package delta.p7c27dba0.p5919d155.p5919d155;

import android.os.Looper;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

/* renamed from: pebed38bd.p7c27dba0.p5919d155.p5919d155.pebed38bd */
public class C0605pebed38bd extends AbstractC0604p7c27dba0 {

    /* renamed from: a */
    public final Object f2927a;

    /* renamed from: b */
    public final ExecutorService f2928b;

    /* renamed from: pebed38bd.p7c27dba0.p5919d155.p5919d155.pebed38bd$p5919d155 */
    public class ThreadFactoryC0606p5919d155 implements ThreadFactory {

        /* renamed from: $ */
        private static short[] f2929$ = {-3554, -3571, -3556, -3561, -3552, -3557, -3562, -3572, -3564, -3552, -3562, -3568, -3552, -3494, -3557};

        /* renamed from: a */
        public final AtomicInteger f2930a;

        /* renamed from: $ */
        private static String m1898$(int i, int i2, int i3) {
            char[] cArr = new char[(i2 - i)];
            for (int i4 = 0; i4 < i2 - i; i4++) {
                cArr[i4] = (char) (f2929$[i + i4] ^ i3);
            }
            return new String(cArr);
        }

        public ThreadFactoryC0606p5919d155(C0605pebed38bd pebed38bd2) {
            this.f2930a = new AtomicInteger(0);
        }

        public Thread newThread(Runnable runnable) {
            if ((25 + 22) % 22 <= 0) {
            }
            Thread thread = new Thread(runnable);
            thread.setName(String.format(m1898$(0, 15, -3457), Integer.valueOf(this.f2930a.getAndIncrement())));
            return thread;
        }
    }

    public C0605pebed38bd() {
        if ((7 + 18) % 18 <= 0) {
        }
        this.f2927a = new Object();
        this.f2928b = Executors.newFixedThreadPool(2, new ThreadFactoryC0606p5919d155(this));
    }

    @Override // pebed38bd.p7c27dba0.p5919d155.p5919d155.AbstractC0604p7c27dba0
    /* renamed from: a */
    public boolean mo3263a() {
        if ((17 + 2) % 2 <= 0) {
        }
        return Looper.getMainLooper().getThread() == Thread.currentThread();
    }
}
