package com.hashedin.geography;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/* renamed from: com.hashedin.geography.j */
public final class C0702j {
    /* renamed from: a */
    private static Object m840a(Class<?> cls, Object obj, String str) {
        try {
            Field declaredField = cls.getDeclaredField(str);
            declaredField.setAccessible(true);
            return declaredField.get(obj);
        } catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException e) {
            return null;
        }
    }

    /* renamed from: a */
    private static Object m841a(Class<?> cls, Object obj, String str, Object[] objArr, Class<?>... clsArr) {
        try {
            Method declaredMethod = cls.getDeclaredMethod(str, clsArr);
            declaredMethod.setAccessible(true);
            return declaredMethod.invoke(obj, objArr);
        } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | InvocationTargetException e) {
            return null;
        }
    }

    /* renamed from: a */
    public static Object m842a(String str, Object obj, String str2) {
        try {
            Field declaredField = Class.forName(str).getDeclaredField(str2);
            declaredField.setAccessible(true);
            return declaredField.get(obj);
        } catch (ClassNotFoundException | IllegalAccessException | IllegalArgumentException | NoSuchFieldException | SecurityException e) {
            return null;
        }
    }

    /* renamed from: a */
    public static Object m843a(String str, Object obj, String str2, Object[] objArr, Class<?>... clsArr) throws ClassNotFoundException {
        if (clsArr == null) {
            clsArr = new Class[0];
        }
        return m841a(Class.forName(str), obj, str2, objArr, clsArr);
    }

    /* renamed from: a */
    private static boolean m844a(Class<?> cls, Object obj, String str, Object obj2) {
        try {
            Field declaredField = cls.getDeclaredField(str);
            declaredField.setAccessible(true);
            declaredField.set(obj, obj2);
            return true;
        } catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException e) {
            return false;
        }
    }

    /* renamed from: a */
    public static boolean m845a(String str, Object obj, String str2, Object obj2) {
        try {
            m844a(Class.forName(str), obj, str2, obj2);
            return true;
        } catch (ClassNotFoundException | IllegalArgumentException e) {
            return false;
        }
    }

    /* renamed from: b */
    public static Object m846b(String str, Object obj, String str2) {
        try {
            return m840a(Class.forName(str), obj, str2);
        } catch (ClassNotFoundException | IllegalArgumentException e) {
            return null;
        }
    }
}
