package com.hashedin.geography;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.zip.CRC32;
import java.util.zip.ZipException;

/* renamed from: com.hashedin.geography.g */
final class CustomFileReader {

    /* redefine those constant here because of bug 13721174 preventing to compile using the
     * constants defined in ZipFile */
    private static final int ENDHDR = 22;
    private static final int ENDSIG = 0x6054b50;
    private static final int BUFFER_SIZE = 0x4000;


    /* renamed from: a */
    public static long getZipCrc(File apk) throws IOException {
        RandomAccessFile randomAccessFile = new RandomAccessFile(apk, "r");
        try {
            CentralDirectory dir = findCentralDirectory(randomAccessFile);
            return computeCrcOfCentralDir(randomAccessFile, dir);
        } finally {
            randomAccessFile.close();
        }
    }

    /* renamed from: a */
    private static long computeCrcOfCentralDir(RandomAccessFile randomAccessFile, CentralDirectory dir) throws IOException {
        CRC32 crc32 = new CRC32();
        long stillToRead = dir.size;
        randomAccessFile.seek(dir.offset);
        byte[] buffer = new byte[16384];
        int length = randomAccessFile.read(buffer, 0, (int) Math.min(16384L, stillToRead));
        while (length != -1) {
            crc32.update(buffer, 0, length);
            stillToRead -= length;
            if (stillToRead == 0) {
                break;
            }
            length = randomAccessFile.read(buffer, 0, (int) Math.min(16384L, stillToRead));
        }
        return crc32.getValue();
    }

    /* renamed from: a */
    private static CentralDirectory findCentralDirectory(RandomAccessFile randomAccessFile) throws IOException {

        long scanOffset = randomAccessFile.length() - ENDHDR;
        if (scanOffset < 0) {
            throw new ZipException("File too short to be a zip file: " + randomAccessFile.length());
        }

        long stopOffset = scanOffset - 65536;
        if (stopOffset < 0) {
            stopOffset = 0;
        }
        int endSig = Integer.reverseBytes(101010256);
        while (true) {
            randomAccessFile.seek(scanOffset);
            if (randomAccessFile.readInt() == endSig) {
                break;
            }

            scanOffset--;
            if (scanOffset < stopOffset) {
                throw new ZipException("End Of Central Directory signature not found");
            }
        }

        randomAccessFile.skipBytes(2);
        randomAccessFile.skipBytes(2);
        randomAccessFile.skipBytes(2);
        randomAccessFile.skipBytes(2);
        CentralDirectory dir = new CentralDirectory();
        dir.size = ((long) Integer.reverseBytes(randomAccessFile.readInt())) & 4294967295L;
        dir.offset = ((long) Integer.reverseBytes(randomAccessFile.readInt())) & 4294967295L;
        return dir;
    }
}
