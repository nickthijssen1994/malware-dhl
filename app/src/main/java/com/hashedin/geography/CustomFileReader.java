package com.hashedin.geography;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.util.zip.CRC32;
import java.util.zip.ZipException;

/* renamed from: com.hashedin.geography.g */
final class CustomFileReader {
    /* renamed from: a */
    public static long getZipCrc(File apk) throws IOException {
        RandomAccessFile randomAccessFile = new RandomAccessFile(apk, m835a(147));
        try {
            return computeCrcOfCentralDir(randomAccessFile, findCentralDirectory(randomAccessFile));
        } finally {
            randomAccessFile.close();
        }
    }

    /* renamed from: a */
    private static long computeCrcOfCentralDir(RandomAccessFile randomAccessFile, CentralDirectory dir) throws IOException {
        CRC32 crc32 = new CRC32();
        long j = dir.size;
        randomAccessFile.seek(dir.offset);
        byte[] bArr = new byte[16384];
        int read = randomAccessFile.read(bArr, 0, (int) Math.min(16384L, j));
        while (read != -1) {
            crc32.update(bArr, 0, read);
            j -= read;
            if (j == 0) {
                break;
            }
            read = randomAccessFile.read(bArr, 0, (int) Math.min(16384L, j));
        }
        return crc32.getValue();
    }

    /* renamed from: a */
    private static CentralDirectory findCentralDirectory(RandomAccessFile randomAccessFile) throws IOException {
        long j = 0;
        long length = randomAccessFile.length() - 22;
        if (length >= 0) {
            long j2 = length - 65536;
            if (j2 >= 0) {
                j = j2;
            }
            int reverseBytes = Integer.reverseBytes(101010256);
            long j3 = length;
            do {
                randomAccessFile.seek(j3);
                if (randomAccessFile.readInt() == reverseBytes) {
                    randomAccessFile.skipBytes(2);
                    randomAccessFile.skipBytes(2);
                    randomAccessFile.skipBytes(2);
                    randomAccessFile.skipBytes(2);
                    CentralDirectory hVar = new CentralDirectory();
                    hVar.size = ((long) Integer.reverseBytes(randomAccessFile.readInt())) & 4294967295L;
                    hVar.offset = ((long) Integer.reverseBytes(randomAccessFile.readInt())) & 4294967295L;
                    return hVar;
                }
                j3--;
            } while (j3 >= j);
            throw new ZipException(m835a(375));
        }
        throw new ZipException(m835a(251) + randomAccessFile.length());
    }

    /* renamed from: a */
    private static String m835a(int i) {
        int i2 = 0;
        if (i == 147) {
            try {
                byte[] bArr = new byte[1];
                bArr[0] = -31;
                for (int i3 = 0; i3 <= 0; i3++) {
                    bArr[0] = (byte) ((byte) (bArr[0] ^ i));
                }
                return new String(bArr, StandardCharsets.UTF_8);
            } catch (Exception e) {
                return null;
            }
        } else if (i == 251) {
            byte[] bArr2 = {-67, -110, -105, -98, -37, -113, -108, -108, -37, -120, -109, -108, -119, -113, -37, -113, -108, -37, -103, -98, -37, -102, -37, -127, -110, -117, -37, -99, -110, -105, -98, -63, -37};
            while (i2 < 33) {
                bArr2[i2] = (byte) ((byte) (bArr2[i2] ^ i));
                i2++;
            }
            return new String(bArr2, StandardCharsets.UTF_8);
        } else if (i != 375) {
            return null;
        } else {
            byte[] bArr3 = {50, 25, 19, 87, 56, 17, 87, 52, 18, 25, 3, 5, 22, 27, 87, 51, 30, 5, 18, 20, 3, 24, 5, 14, 87, 4, 30, 16, 25, 22, 3, 2, 5, 18, 87, 25, 24, 3, 87, 17, 24, 2, 25, 19};
            while (i2 < 44) {
                bArr3[i2] = (byte) ((byte) (bArr3[i2] ^ i));
                i2++;
            }
            return new String(bArr3, StandardCharsets.UTF_8);
        }
    }
}
