package com.hashedin.geography;

import android.content.Context;
import android.content.SharedPreferences;

import com.alibaba.fastjson.parser.JSONLexer;

import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.InflaterInputStream;
import java.util.zip.InflaterOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

/* renamed from: com.hashedin.geography.d */
final class DexDestination implements Closeable {

    /* renamed from: a */
    public static final String f644a = StringsLists.f628a;

    /* renamed from: b */
    public static final String f645b = StringsLists.f636i;

    /* renamed from: c */
    private static final String f646c = FileBuilder.f638a;

    /* renamed from: d */
    private static final String f647d = StringsLists.f635h;

    /* renamed from: e */
    private static final String f648e = m823a(344);

    /* renamed from: f */
    private static final String f649f = m823a(359);

    /* renamed from: g */
    private static final String f650g = m823a(374);

    /* renamed from: h */
    private static final String f651h = m823a(389);

    /* renamed from: i */
    private static final String f652i = m823a(404);

    /* renamed from: j */
    private static final String f653j = m823a(419);

    /* renamed from: k */
    private static final String f654k = StringsLists.f634g;

    /* renamed from: l */
    private static final String f655l = StringsLists.f631d;

    /* renamed from: m */
    private static final String f656m;

    /* renamed from: n */
    private static final String f657n;

    /* renamed from: o */
    private static final String f658o = StringsLists.f629b;

    /* renamed from: p */
    private final File f659p;

    /* renamed from: q */
    private final long f660q;

    /* renamed from: r */
    private final File f661r;

    /* renamed from: s */
    private final RandomAccessFile f662s;

    /* renamed from: t */
    private final FileChannel f663t;

    /* renamed from: u */
    private final FileLock f664u;

    static {
        String str = StringsLists.f630c;
        f656m = str;
        StringBuilder sb = new StringBuilder();
        sb.append(m823a(504));
        String str2 = File.separator;
        sb.append(str2);
        sb.append(str);
        sb.append(str2);
        f657n = sb.toString();
    }

    public DexDestination(File file, File file2) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append(m823a(619));
        sb.append(file.getPath());
        sb.append(m823a(631));
        sb.append(file2.getPath());
        sb.append(m823a(643));
        this.f659p = file;
        this.f661r = file2;
        this.f660q = m828b(file);
        File file3 = new File(file2, f654k);
        RandomAccessFile randomAccessFile = new RandomAccessFile(file3, m823a(703));
        this.f662s = randomAccessFile;
        try {
            FileChannel channel = randomAccessFile.getChannel();
            this.f663t = channel;
            try {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(m823a(733));
                sb2.append(file3.getPath());
                this.f664u = channel.lock();
                StringBuilder sb3 = new StringBuilder();
                sb3.append(file3.getPath());
                sb3.append(m823a(804));
            } catch (IOException | Error | RuntimeException e) {
                m826a(this.f663t);
                throw e;
            }
        } catch (IOException | Error | RuntimeException e2) {
            m826a(this.f662s);
            throw e2;
        }
    }

    /* renamed from: a */
    private static long m820a(File file) {
        long lastModified = file.lastModified();
        return lastModified == -1 ? lastModified - 1 : lastModified;
    }

    /* renamed from: a */
    private static SharedPreferences m821a(Context context) {
        return context.getSharedPreferences(f648e, Context.MODE_MULTI_PROCESS);
    }

    /* renamed from: a */
    private static String m823a(int i) {
        int i2 = 0;
        if (i == 344) {
            try {
                byte[] bArr = new byte[16];
                bArr[0] = 53;
                bArr[1] = 45;
                bArr[2] = 52;
                bArr[3] = 44;
                bArr[4] = 49;
                bArr[5] = 60;
                bArr[6] = 61;
                bArr[7] = 32;
                bArr[8] = 118;
                bArr[9] = 46;
                bArr[10] = 61;
                bArr[11] = 42;
                bArr[12] = 43;
                bArr[13] = 49;
                bArr[14] = 55;
                bArr[15] = 54;
                while (i2 < 16) {
                    bArr[i2] = (byte) ((byte) (bArr[i2] ^ i));
                    i2++;
                }
                return new String(bArr, StandardCharsets.UTF_8);
            } catch (Exception e) {
                return null;
            }
        } else if (i == 359) {
            byte[] bArr2 = {19, 14, 10, 2, 20, 19, 6, 10, 23};
            while (i2 < 9) {
                bArr2[i2] = (byte) ((byte) (bArr2[i2] ^ i));
                i2++;
            }
            return new String(bArr2, StandardCharsets.UTF_8);
        } else if (i == 374) {
            byte[] bArr3 = {21, 4, 21};
            while (i2 < 3) {
                bArr3[i2] = (byte) ((byte) (bArr3[i2] ^ i));
                i2++;
            }
            return new String(bArr3, StandardCharsets.UTF_8);
        } else if (i == 389) {
            byte[] bArr4 = {-31, -32, -3, -85, -21, -16, -24, -25, -32, -9};
            while (i2 < 10) {
                bArr4[i2] = (byte) ((byte) (bArr4[i2] ^ i));
                i2++;
            }
            return new String(bArr4, StandardCharsets.UTF_8);
        } else if (i == 404) {
            byte[] bArr5 = {-16, -15, -20, -70, -9, -26, -9, -70};
            while (i2 < 8) {
                bArr5[i2] = (byte) ((byte) (bArr5[i2] ^ i));
                i2++;
            }
            return new String(bArr5, StandardCharsets.UTF_8);
        } else if (i == 419) {
            byte[] bArr6 = {-57, -58, -37, -115, -41, -54, -50, -58, -115};
            while (i2 < 9) {
                bArr6[i2] = (byte) ((byte) (bArr6[i2] ^ i));
                i2++;
            }
            return new String(bArr6, StandardCharsets.UTF_8);
        } else if (i == 504) {
            byte[] bArr7 = {-103, -117, -117, -99, -116, -117};
            while (i2 < 6) {
                bArr7[i2] = (byte) ((byte) (bArr7[i2] ^ i));
                i2++;
            }
            return new String(bArr7, StandardCharsets.UTF_8);
        } else if (i == 619) {
            byte[] bArr8 = {38, 30, 7, 31, 2, 47, 14, 19, 46, 19, 31, 25, 10, 8, 31, 4, 25, 67};
            while (i2 < 18) {
                bArr8[i2] = (byte) ((byte) (bArr8[i2] ^ i));
                i2++;
            }
            return new String(bArr8, StandardCharsets.UTF_8);
        } else if (i == 631) {
            byte[] bArr9 = {91, 87};
            while (i2 < 2) {
                bArr9[i2] = (byte) ((byte) (bArr9[i2] ^ i));
                i2++;
            }
            return new String(bArr9, StandardCharsets.UTF_8);
        } else if (i == 643) {
            byte[] bArr10 = {-86};
            for (int i3 = 0; i3 <= 0; i3++) {
                bArr10[0] = (byte) ((byte) (bArr10[0] ^ i));
            }
            return new String(bArr10, StandardCharsets.UTF_8);
        } else if (i == 703) {
            byte[] bArr11 = {-51, -56};
            while (i2 < 2) {
                bArr11[i2] = (byte) ((byte) (bArr11[i2] ^ i));
                i2++;
            }
            return new String(bArr11, StandardCharsets.UTF_8);
        } else if (i == 733) {
            byte[] bArr12 = {-97, -79, -78, -66, -74, -76, -77, -70, -3, -78, -77, -3, -79, -78, -66, -74, -3};
            while (i2 < 17) {
                bArr12[i2] = (byte) ((byte) (bArr12[i2] ^ i));
                i2++;
            }
            return new String(bArr12, StandardCharsets.UTF_8);
        } else if (i == 804) {
            byte[] bArr13 = {4, 72, 75, 71, 79, 65, 64};
            while (i2 < 7) {
                bArr13[i2] = (byte) ((byte) (bArr13[i2] ^ i));
                i2++;
            }
            return new String(bArr13, StandardCharsets.UTF_8);
        } else if (i == 1391) {
            byte[] bArr14 = {27, 2, 31, 66};
            while (i2 < 4) {
                bArr14[i2] = (byte) ((byte) (bArr14[i2] ^ i));
                i2++;
            }
            return new String(bArr14, StandardCharsets.UTF_8);
        } else if (i == 1416) {
            byte[] bArr15 = {-51, -16, -4, -6, -23, -21, -4, -31, -26, -17, -88};
            while (i2 < 11) {
                bArr15[i2] = (byte) ((byte) (bArr15[i2] ^ i));
                i2++;
            }
            return new String(bArr15, StandardCharsets.UTF_8);
        } else if (i == 1468) {
            byte[] bArr16 = {-33, -48, -35, -49, -49, -39, -49, -110, -40, -39, -60};
            while (i2 < 11) {
                bArr16[i2] = (byte) ((byte) (bArr16[i2] ^ i));
                i2++;
            }
            return new String(bArr16, StandardCharsets.UTF_8);
        } else if (i == 1568) {
            byte[] bArr17 = {102, 65, 73, 76, 69, 68, 0, 84, 79, 0, 77, 65, 82, 75, 0, 82, 69, 65, 68, 79, 78, 76, 89, 0, 2};
            while (i2 < 25) {
                bArr17[i2] = (byte) ((byte) (bArr17[i2] ^ i));
                i2++;
            }
            return new String(bArr17, StandardCharsets.UTF_8);
        } else if (i == 1580) {
            byte[] bArr18 = {14, 12, 4, 88, 65, 92, 12, 67, 74, 12, 14};
            while (i2 < 11) {
                bArr18[i2] = (byte) ((byte) (bArr18[i2] ^ i));
                i2++;
            }
            return new String(bArr18, StandardCharsets.UTF_8);
        } else if (i == 1592) {
            byte[] bArr19 = {JSONLexer.EOI, 17};
            while (i2 < 2) {
                bArr19[i2] = (byte) ((byte) (bArr19[i2] ^ i));
                i2++;
            }
            return new String(bArr19, StandardCharsets.UTF_8);
        } else if (i == 1605) {
            byte[] bArr20 = {23, 32, 43, 36, 40, 44, 43, 34, 101, 49, 42, 101};
            while (i2 < 12) {
                bArr20[i2] = (byte) ((byte) (bArr20[i2] ^ i));
                i2++;
            }
            return new String(bArr20, StandardCharsets.UTF_8);
        } else if (i == 1637) {
            byte[] bArr21 = {35, 4, 12, 9, 0, 1, 69, 17, 10, 69, 23, 0, 11, 4, 8, 0, 69, 71};
            while (i2 < 18) {
                bArr21[i2] = (byte) ((byte) (bArr21[i2] ^ i));
                i2++;
            }
            return new String(bArr21, StandardCharsets.UTF_8);
        } else if (i == 1649) {
            byte[] bArr22 = {83, 81, 5, 30, 81, 83};
            while (i2 < 6) {
                bArr22[i2] = (byte) ((byte) (bArr22[i2] ^ i));
                i2++;
            }
            return new String(bArr22, StandardCharsets.UTF_8);
        } else if (i == 1661) {
            byte[] bArr23 = {95};
            for (int i4 = 0; i4 <= 0; i4++) {
                bArr23[0] = (byte) ((byte) (bArr23[0] ^ i));
            }
            return new String(bArr23, StandardCharsets.UTF_8);
        } else if (i == 1737) {
            byte[] bArr24 = {-113, -88, -96, -91, -84, -83, -23, -67, -90, -23, -86, -91, -90, -70, -84, -23, -69, -84, -70, -90, -68, -69, -86, -84};
            while (i2 < 24) {
                bArr24[i2] = (byte) ((byte) (bArr24[i2] ^ i));
                i2++;
            }
            return new String(bArr24, StandardCharsets.UTF_8);
        } else if (i == 1788) {
            byte[] bArr25 = {-79, -119, -112, -120, -107, -72, -103, -124, -71, -124, -120, -114, -99, -97, -120, -109, -114, -46, -112, -109, -99, -104, -44};
            while (i2 < 23) {
                bArr25[i2] = (byte) ((byte) (bArr25[i2] ^ i));
                i2++;
            }
            return new String(bArr25, StandardCharsets.UTF_8);
        } else if (i == 1800) {
            byte[] bArr26 = {36, 40};
            while (i2 < 2) {
                bArr26[i2] = (byte) ((byte) (bArr26[i2] ^ i));
                i2++;
            }
            return new String(bArr26, StandardCharsets.UTF_8);
        } else if (i == 1808) {
            byte[] bArr27 = {60, 48};
            while (i2 < 2) {
                bArr27[i2] = (byte) ((byte) (bArr27[i2] ^ i));
                i2++;
            }
            return new String(bArr27, StandardCharsets.UTF_8);
        } else if (i == 1816) {
            byte[] bArr28 = {49};
            for (int i5 = 0; i5 <= 0; i5++) {
                bArr28[0] = (byte) ((byte) (bArr28[0] ^ i));
            }
            return new String(bArr28, StandardCharsets.UTF_8);
        } else if (i == 1839) {
            byte[] bArr29 = {98, 90, 67, 91, 70, 107, 74, 87, 106, 87, 91, 93, 78, 76, 91, 64, 93, 15, 88, 78, 92, 15, 76, 67, 64, 92, 74, 75};
            while (i2 < 28) {
                bArr29[i2] = (byte) ((byte) (bArr29[i2] ^ i));
                i2++;
            }
            return new String(bArr29, StandardCharsets.UTF_8);
        } else if (i == 1916) {
            byte[] bArr30 = {58, 29, 21, 16, 25, 24, 92, 8, 19, 92, 14, 25, 16, 19, 29, 24, 92, 25, 4, 21, 15, 8, 21, 18, 27, 92, 25, 4, 8, 14, 29, 31, 8, 25, 24, 92, 15, 25, 31, 19, 18, 24, 29, 14, 5, 92, 24, 25, 4, 92, JSONLexer.EOI, 21, 16, 25, 15, 80};
            while (i2 < 56) {
                bArr30[i2] = (byte) ((byte) (bArr30[i2] ^ i));
                i2++;
            }
            return new String(bArr30, StandardCharsets.UTF_8);
        } else if (i == 1920) {
            byte[] bArr31 = {-96, -26, -31, -20, -20, -23, -18, -25, -96, -30, -31, -29, -21, -96, -12, -17, -96, -26, -14, -27, -13, -24, -96, -27, -8, -12, -14, -31, -29, -12, -23, -17, -18};
            while (i2 < 33) {
                bArr31[i2] = (byte) ((byte) (bArr31[i2] ^ i));
                i2++;
            }
            return new String(bArr31, StandardCharsets.UTF_8);
        } else if (i == 1980) {
            byte[] bArr32 = {-6, -45, -50, -33, -39, -40, -100, -39, -60, -56, -50, -35, -33, -56, -43, -45, -46, -100, -47, -55, -49, -56, -100, -34, -39, -100, -52, -39, -50, -38, -45, -50, -47, -39, -40, -110};
            while (i2 < 36) {
                bArr32[i2] = (byte) ((byte) (bArr32[i2] ^ i));
                i2++;
            }
            return new String(bArr32, StandardCharsets.UTF_8);
        } else if (i == 1997) {
            byte[] bArr33 = {-119, -88, -71, -88, -82, -71, -88, -87, -19, -71, -91, -84, -71, -19, -88, -75, -71, -65, -84, -82, -71, -92, -94, -93, -19, -96, -72, -66, -71, -19, -81, -88, -19, -67, -88, -65, -85, -94, -65, -96, -88, -87, -29};
            while (i2 < 43) {
                bArr33[i2] = (byte) ((byte) (bArr33[i2] ^ i));
                i2++;
            }
            return new String(bArr33, StandardCharsets.UTF_8);
        } else if (i == 2042) {
            byte[] bArr34 = {-106, -107, -101, -98, -38, -100, -107, -113, -108, -98, -38};
            while (i2 < 11) {
                bArr34[i2] = (byte) ((byte) (bArr34[i2] ^ i));
                i2++;
            }
            return new String(bArr34, StandardCharsets.UTF_8);
        } else if (i == 2054) {
            byte[] bArr35 = {38, 117, 99, 101, 105, 104, 98, 103, 116, Byte.MAX_VALUE, 38, 98, 99, 126, 38, 96, 111, 106, 99, 117};
            while (i2 < 20) {
                bArr35[i2] = (byte) ((byte) (bArr35[i2] ^ i));
                i2++;
            }
            return new String(bArr35, StandardCharsets.UTF_8);
        } else if (i == 2138) {
            byte[] bArr36 = {54, 53, 59, 62, 51, 52, 61, 122, 63, 34, 51, 41, 46, 51, 52, 61, 122, 41, 63, 57, 53, 52, 62, 59, 40, 35, 122, 62, 63, 34, 122, 60, 51, 54, 63, 41};
            while (i2 < 36) {
                bArr36[i2] = (byte) ((byte) (bArr36[i2] ^ i));
                i2++;
            }
            return new String(bArr36, StandardCharsets.UTF_8);
        } else if (i == 2405) {
            byte[] bArr37 = {44, 11, 19, 4, 9, 12, 1, 69, 0, 29, 17, 23, 4, 6, 17, 0, 1, 69, 1, 0, 29, 95, 69};
            while (i2 < 23) {
                bArr37[i2] = (byte) ((byte) (bArr37[i2] ^ i));
                i2++;
            }
            return new String(bArr37, StandardCharsets.UTF_8);
        } else if (i == 2413) {
            byte[] bArr38 = {77, 69, 6, 8, 20, 77, 79};
            while (i2 < 7) {
                bArr38[i2] = (byte) ((byte) (bArr38[i2] ^ i));
                i2++;
            }
            return new String(bArr38, StandardCharsets.UTF_8);
        } else if (i == 2421) {
            byte[] bArr39 = {87, 92, 89, 85, 16, 13, 5, 16, 22, 1, 16, 17, 85, 24, JSONLexer.EOI, 17, 28, 19, 28, 22, 20, 1, 28, JSONLexer.EOI, 27, 85, 1, 28, 24, 16, 79, 85};
            while (i2 < 32) {
                bArr39[i2] = (byte) ((byte) (bArr39[i2] ^ i));
                i2++;
            }
            return new String(bArr39, StandardCharsets.UTF_8);
        } else if (i == 2429) {
            byte[] bArr40 = {81, 93, 16, 18, 25, 20, 27, 20, 30, 28, 9, 20, 18, 19, 93, 9, 20, 16, 24, 71, 93};
            while (i2 < 21) {
                bArr40[i2] = (byte) ((byte) (bArr40[i2] ^ i));
                i2++;
            }
            return new String(bArr40, StandardCharsets.UTF_8);
        } else if (i == 2437) {
            byte[] bArr41 = {-87, -91, -32, -3, -11, -32, -26, -15, -32, -31, -91, -26, -9, -26, -65, -91};
            while (i2 < 16) {
                bArr41[i2] = (byte) ((byte) (bArr41[i2] ^ i));
                i2++;
            }
            return new String(bArr41, StandardCharsets.UTF_8);
        } else if (i == 2445) {
            byte[] bArr42 = {-95, -83, -21, -28, -31, -24, -83, -18, -1, -18, -73, -83};
            while (i2 < 12) {
                bArr42[i2] = (byte) ((byte) (bArr42[i2] ^ i));
                i2++;
            }
            return new String(bArr42, StandardCharsets.UTF_8);
        } else if (i == 2477) {
            byte[] bArr43 = {-32, -60, -34, -34, -60, -61, -54, -115, -56, -43, -39, -33, -52, -50, -39, -56, -55, -115, -34, -56, -50, -62, -61, -55, -52, -33, -44, -115, -55, -56, -43, -115, -53, -60, -63, -56, -115, -118};
            while (i2 < 38) {
                bArr43[i2] = (byte) ((byte) (bArr43[i2] ^ i));
                i2++;
            }
            return new String(bArr43, StandardCharsets.UTF_8);
        } else if (i == 2489) {
            byte[] bArr44 = {-98};
            for (int i6 = 0; i6 <= 0; i6++) {
                bArr44[0] = (byte) ((byte) (bArr44[0] ^ i));
            }
            return new String(bArr44, StandardCharsets.UTF_8);
        } else if (i == 2684) {
            byte[] bArr45 = {57, 4, 8, 14, 29, 31, 8, 21, 19, 18, 92, 21, 15, 92, 18, 25, 25, 24, 25, 24, 92, JSONLexer.EOI, 19, 14, 92, JSONLexer.EOI, 21, 16, 25, 92};
            while (i2 < 30) {
                bArr45[i2] = (byte) ((byte) (bArr45[i2] ^ i));
                i2++;
            }
            return new String(bArr45, StandardCharsets.UTF_8);
        } else if (i == 2800) {
            byte[] bArr46 = {-74, -111, -103, -100, -107, -108, -48, -124, -97, -48, -126, -107, -111, -108, -48, -109, -126, -109, -48, -106, -126, -97, -99, -48};
            while (i2 < 24) {
                bArr46[i2] = (byte) ((byte) (bArr46[i2] ^ i));
                i2++;
            }
            return new String(bArr46, StandardCharsets.UTF_8);
        } else if (i == 2825) {
            byte[] bArr47 = {76, 113, 125, 123, 104, 106, 125, 96, 102, 103, 41};
            while (i2 < 11) {
                bArr47[i2] = (byte) ((byte) (bArr47[i2] ^ i));
                i2++;
            }
            return new String(bArr47, StandardCharsets.UTF_8);
        } else if (i == 2834) {
            byte[] bArr48 = {97, 103, 113, 113, 119, 119, 118, 119, 118};
            while (i2 < 9) {
                bArr48[i2] = (byte) ((byte) (bArr48[i2] ^ i));
                i2++;
            }
            return new String(bArr48, StandardCharsets.UTF_8);
        } else if (i == 2838) {
            byte[] bArr49 = {112, 119, Byte.MAX_VALUE, 122, 115, 114};
            while (i2 < 6) {
                bArr49[i2] = (byte) ((byte) (bArr49[i2] ^ i));
                i2++;
            }
            return new String(bArr49, StandardCharsets.UTF_8);
        } else if (i == 2843) {
            byte[] bArr50 = {59, 60};
            while (i2 < 2) {
                bArr50[i2] = (byte) ((byte) (bArr50[i2] ^ i));
                i2++;
            }
            return new String(bArr50, StandardCharsets.UTF_8);
        } else if (i == 2855) {
            byte[] bArr51 = {0, 29, 7, 75, 66, 73, 64, 83, 79, 7};
            while (i2 < 10) {
                bArr51[i2] = (byte) ((byte) (bArr51[i2] ^ i));
                i2++;
            }
            return new String(bArr51, StandardCharsets.UTF_8);
        } else if (i == 2867) {
            byte[] bArr52 = {19, 30, 19, 80, 65, 80, 9, 19};
            while (i2 < 8) {
                bArr52[i2] = (byte) ((byte) (bArr52[i2] ^ i));
                i2++;
            }
            return new String(bArr52, StandardCharsets.UTF_8);
        } else if (i == 2913) {
            byte[] bArr53 = {39, 0, 8, 13, 4, 5, 65, 21, 14, 65, 5, 4, 13, 4, 21, 4, 65, 2, 14, 19, 19, 20, 17, 21, 4, 5, 65, 18, 4, 2, 14, 15, 5, 0, 19, 24, 65, 5, 4, 25, 65, 70};
            while (i2 < 42) {
                bArr53[i2] = (byte) ((byte) (bArr53[i2] ^ i));
                i2++;
            }
            return new String(bArr53, StandardCharsets.UTF_8);
        } else if (i == 2925) {
            byte[] bArr54 = {74};
            for (int i7 = 0; i7 <= 0; i7++) {
                bArr54[0] = (byte) ((byte) (bArr54[0] ^ i));
            }
            return new String(bArr54, StandardCharsets.UTF_8);
        } else if (i == 2950) {
            byte[] bArr55 = {-59, -23, -13, -22, -30, -90, -24, -23, -14, -90, -27, -12, -29, -25, -14, -29, -90, -4, -17, -10, -90, -32, -17, -22, -29, -90};
            while (i2 < 26) {
                bArr55[i2] = (byte) ((byte) (bArr55[i2] ^ i));
                i2++;
            }
            return new String(bArr55, StandardCharsets.UTF_8);
        } else if (i == 2962) {
            byte[] bArr56 = {-78, -12, -3, -32, -78, -31, -9, -15, -3, -4, -10, -13, -32, -21, -78, -10, -9, -22, -78, -70};
            while (i2 < 20) {
                bArr56[i2] = (byte) ((byte) (bArr56[i2] ^ i));
                i2++;
            }
            return new String(bArr56, StandardCharsets.UTF_8);
        } else if (i == 2970) {
            byte[] bArr57 = {-77};
            for (int i8 = 0; i8 <= 0; i8++) {
                bArr57[0] = (byte) ((byte) (bArr57[0] ^ i));
            }
            return new String(bArr57, StandardCharsets.UTF_8);
        } else if (i == 3043) {
            byte[] bArr58 = {-91, -126, -118, -113, -122, -121, -61, -105, -116, -61, Byte.MIN_VALUE, -113, -116, -112, -122, -61, -111, -122, -112, -116, -106, -111, Byte.MIN_VALUE, -122};
            while (i2 < 24) {
                bArr58[i2] = (byte) ((byte) (bArr58[i2] ^ i));
                i2++;
            }
            return new String(bArr58, StandardCharsets.UTF_8);
        } else if (i == 3148) {
            byte[] bArr59 = {10, 45, 37, 32, 41, 40, 108, 56, 35, 108, 32, 37, 63, 56, 108, 63, 41, 47, 35, 34, 40, 45, 62, 53, 108, 40, 41, 52, 108, 40, 37, 62, 108, 47, 35, 34, 56, 41, 34, 56, 108, 100};
            while (i2 < 42) {
                bArr59[i2] = (byte) ((byte) (bArr59[i2] ^ i));
                i2++;
            }
            return new String(bArr59, StandardCharsets.UTF_8);
        } else if (i == 3160) {
            byte[] bArr60 = {113, 118};
            while (i2 < 2) {
                bArr60[i2] = (byte) ((byte) (bArr60[i2] ^ i));
                i2++;
            }
            return new String(bArr60, StandardCharsets.UTF_8);
        } else if (i == 3190) {
            byte[] bArr61 = {34, 4, 15, 31, 24, 17, 86, 2, 25, 86, 18, 19, JSONLexer.EOI, 19, 2, 19, 86, 25, JSONLexer.EOI, 18, 86, 16, 31, JSONLexer.EOI, 19, 86};
            while (i2 < 26) {
                bArr61[i2] = (byte) ((byte) (bArr61[i2] ^ i));
                i2++;
            }
            return new String(bArr61, StandardCharsets.UTF_8);
        } else if (i == 3202) {
            byte[] bArr62 = {-94, -19, -28, -94, -15, -21, -8, -25, -94};
            while (i2 < 9) {
                bArr62[i2] = (byte) ((byte) (bArr62[i2] ^ i));
                i2++;
            }
            return new String(bArr62, StandardCharsets.UTF_8);
        } else if (i == 3234) {
            byte[] bArr63 = {-28, -61, -53, -50, -57, -58, -126, -42, -51, -126, -58, -57, -50, -57, -42, -57, -126, -51, -50, -58, -126, -60, -53, -50, -57, -126};
            while (i2 < 26) {
                bArr63[i2] = (byte) ((byte) (bArr63[i2] ^ i));
                i2++;
            }
            return new String(bArr63, StandardCharsets.UTF_8);
        } else if (i != 3259) {
            return null;
        } else {
            byte[] bArr64 = {-1, -34, -41, -34, -49, -34, -33, -101, -44, -41, -33, -101, -35, -46, -41, -34, -101};
            while (i2 < 17) {
                bArr64[i2] = (byte) ((byte) (bArr64[i2] ^ i));
                i2++;
            }
            return new String(bArr64, StandardCharsets.UTF_8);
        }
    }

    /* renamed from: a */
    private List<CustomFile> m824a(Context context, String str) throws IOException {
        m823a(2138);
        String str2 = this.f659p.getName() + f647d;
        SharedPreferences a = m821a(context);
        int i = a.getInt(str + f651h, 1);
        ArrayList arrayList = new ArrayList(i + -1);
        for (int i2 = 2; i2 <= i; i2++) {
            CustomFile fVar = new CustomFile(this.f661r, str2 + i2 + f645b);
            if (fVar.isFile()) {
                fVar.f666a = m828b(fVar);
                long j = a.getLong(str + f652i + i2, -1);
                long j2 = a.getLong(str + f653j + i2, -1);
                long lastModified = fVar.lastModified();
                if (j2 == lastModified && j == fVar.f666a) {
                    arrayList.add(fVar);
                } else {
                    throw new IOException(m823a(2405) + fVar + m823a(2413) + str + m823a(2421) + j2 + m823a(2429) + lastModified + m823a(2437) + j + m823a(2445) + fVar.f666a);
                }
            } else {
                throw new IOException(m823a(2477) + fVar.getPath() + m823a(2489));
            }
        }
        return arrayList;
    }

    /* renamed from: a */
    private static void m825a(Context context, String str, long j, long j2, List<CustomFile> list) {
        SharedPreferences.Editor edit = m821a(context).edit();
        edit.putLong(str + f649f, j);
        edit.putLong(str + f650g, j2);
        edit.putInt(str + f651h, list.size() + 1);
        int i = 2;
        for (CustomFile fVar : list) {
            edit.putLong(str + f652i + i, fVar.f666a);
            edit.putLong(str + f653j + i, fVar.lastModified());
            i++;
        }
        edit.apply();
    }

    /* renamed from: a */
    private static void m826a(Closeable closeable) {
        try {
            closeable.close();
        } catch (IOException e) {
            m823a(1737);
        }
    }

    /* renamed from: a */
    private static void m827a(ZipFile zipFile, ZipEntry zipEntry, File file, String str) throws IOException {
        InputStream inputStream = zipFile.getInputStream(zipEntry);
        File createTempFile = File.createTempFile(m823a(1391) + str, f645b, file.getParentFile());
        StringBuilder sb = new StringBuilder();
        sb.append(m823a(1416));
        sb.append(createTempFile.getPath());
        try {
            ZipOutputStream zipOutputStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(createTempFile)));
            try {
                ZipEntry zipEntry2 = new ZipEntry(m823a(1468));
                zipEntry2.setTime(zipEntry.getTime());
                zipOutputStream.putNextEntry(zipEntry2);
                String str2 = f655l;
                InflaterInputStream inflaterInputStream = new InflaterInputStream(inputStream);
                InflaterOutputStream inflaterOutputStream = new InflaterOutputStream(zipOutputStream);
                DexBuilder.m847a(str2, inflaterInputStream, inflaterOutputStream);
                inflaterOutputStream.close();
                inflaterInputStream.close();
                zipOutputStream.closeEntry();
            } catch (Exception e) {
            } catch (Throwable th) {
                zipOutputStream.close();
                throw th;
            }
            zipOutputStream.close();
            if (createTempFile.setReadOnly()) {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(m823a(1605));
                sb2.append(file.getPath());
                if (!createTempFile.renameTo(file)) {
                    throw new IOException(m823a(1637) + createTempFile.getAbsolutePath() + m823a(1649) + file.getAbsolutePath() + m823a(1661));
                }
                return;
            }
            throw new IOException(m823a(1568) + createTempFile.getAbsolutePath() + m823a(1580) + file.getAbsolutePath() + m823a(1592));
        } finally {
            m826a(inputStream);
            createTempFile.delete();
        }
    }

    /* renamed from: b */
    private static long m828b(File file) throws IOException {
        long a = CustomFileReader.getZipCrc(file);
        return a == -1 ? a - 1 : a;
    }

    /* renamed from: b */
    private void m829b() {
        File[] listFiles = this.f661r.listFiles(new CustomFileFilter(this));
        if (listFiles == null) {
            StringBuilder sb = new StringBuilder();
            sb.append(m823a(3148));
            sb.append(this.f661r.getPath());
            sb.append(m823a(3160));
            return;
        }
        for (File file : listFiles) {
            StringBuilder sb2 = new StringBuilder();
            sb2.append(m823a(3190));
            sb2.append(file.getPath());
            sb2.append(m823a(3202));
            sb2.append(file.length());
            if (!file.delete()) {
                StringBuilder sb3 = new StringBuilder();
                sb3.append(m823a(3234));
                sb3.append(file.getPath());
            } else {
                StringBuilder sb4 = new StringBuilder();
                sb4.append(m823a(3259));
                sb4.append(file.getPath());
            }
        }
    }

    /* renamed from: c */
    private List<CustomFile> m830c() throws IOException {
        String str = this.f659p.getName() + f647d;
        m829b();
        ArrayList arrayList = new ArrayList();
        ZipFile zipFile = new ZipFile(this.f659p);
        try {
            int i = 1;
            ZipEntry entry = zipFile.getEntry(f657n + f658o + 1 + f644a);
            while (entry != null) {
                CustomFile fVar = new CustomFile(this.f661r, str + i + f645b);
                arrayList.add(fVar);
                StringBuilder sb = new StringBuilder();
                sb.append(m823a(2684));
                sb.append(fVar);
                boolean z = false;
                int i2 = 0;
                while (i2 < 3 && !z) {
                    int i3 = i2 + 1;
                    m827a(zipFile, entry, fVar, str);
                    try {
                        fVar.f666a = m828b(fVar);
                        z = true;
                    } catch (IOException e) {
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(m823a(2800));
                        sb2.append(fVar.getAbsolutePath());
                        z = false;
                    }
                    StringBuilder sb3 = new StringBuilder();
                    sb3.append(m823a(2825));
                    sb3.append(z ? m823a(2834) : m823a(2838));
                    sb3.append(m823a(2843));
                    sb3.append(fVar.getAbsolutePath());
                    sb3.append(m823a(2855));
                    sb3.append(fVar.length());
                    sb3.append(m823a(2867));
                    sb3.append(fVar.f666a);
                    if (!z) {
                        fVar.delete();
                        if (fVar.exists()) {
                            StringBuilder sb4 = new StringBuilder();
                            sb4.append(m823a(2913));
                            sb4.append(fVar.getPath());
                            sb4.append(m823a(2925));
                            i2 = i3;
                        }
                    }
                    i2 = i3;
                }
                if (z) {
                    int i4 = i + 1;
                    i = i4;
                    entry = zipFile.getEntry(f657n + f658o + i4 + f644a);
                } else {
                    throw new IOException(m823a(2950) + fVar.getAbsolutePath() + m823a(2962) + i + m823a(2970));
                }
            }
            m823a(3043);
            return arrayList;
        } finally {
            try {
                zipFile.close();
            } catch (IOException e3) {
                m823a(3043);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:9:0x0085 A[SYNTHETIC, Splitter:B:9:0x0085] */
    /* renamed from: a */
    public final List<? extends File> mo7479a(Context context, String str, boolean z) throws IOException {
        List<CustomFile> c = null;
        boolean z2;
        StringBuilder sb = new StringBuilder();
        sb.append(m823a(1788));
        sb.append(this.f659p.getPath());
        sb.append(m823a(1800));
        sb.append(z);
        sb.append(m823a(1808));
        sb.append(str);
        sb.append(m823a(1816));
        if (this.f664u.isValid()) {
            if (!z) {
                File file = this.f659p;
                long j = this.f660q;
                SharedPreferences a = m821a(context);
                if (a.getLong(str + f649f, -1) == m820a(file)) {
                    if (a.getLong(str + f650g, -1) == j) {
                        z2 = false;
                        if (!z2) {
                            try {
                                c = m824a(context, str);
                            } catch (IOException e) {
                                StringBuilder sb2 = new StringBuilder();
                                sb2.append(m823a(1916));
                                sb2.append(m823a(1920));
                            }
                            StringBuilder sb3 = new StringBuilder();
                            sb3.append(m823a(2042));
                            sb3.append(c.size());
                            sb3.append(m823a(2054));
                            return c;
                        }
                    }
                }
                z2 = true;
                if (!z2) {
                }
            }
            if (z) {
                m823a(1980);
            } else {
                m823a(1997);
            }
            c = m830c();
            m825a(context, str, m820a(this.f659p), this.f660q, c);
            StringBuilder sb32 = new StringBuilder();
            sb32.append(m823a(2042));
            sb32.append(c.size());
            sb32.append(m823a(2054));
            return c;
        }
        throw new IllegalStateException(m823a(1839));
    }

    @Override // java.io.Closeable, java.lang.AutoCloseable
    public final void close() throws IOException {
        this.f664u.release();
        this.f663t.close();
        this.f662s.close();
    }
}
