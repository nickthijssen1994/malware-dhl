package com.hashedin.geography;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/* renamed from: com.hashedin.geography.k */
public final class DexBuilder {
    /* renamed from: a */
    public static void m847a(String str, InputStream inputStream, OutputStream outputStream) throws IOException {
        char[] charArray = str.toCharArray();
        char c = charArray[0];
        char c2 = charArray[1];
        char c3 = charArray[2];
        char c4 = charArray[3];
        char c5 = charArray[4];
        char c6 = charArray[5];
        char c7 = charArray[6];
        char c8 = charArray[7];
        char c9 = charArray[8];
        char c10 = charArray[9];
        char c11 = charArray[10];
        char c12 = charArray[11];
        int[] iArr = {c | (c2 << 16), (c4 << 16) | c3, (c6 << 16) | c5, (c8 << 16) | c7};
        int[] iArr2 = new int[27];
        int i = 0;
        int i2 = iArr[0];
        iArr2[0] = i2;
        int[] iArr3 = {iArr[1], iArr[2], iArr[3]};
        while (i < 26) {
            int i3 = i % 3;
            iArr3[i3] = (((iArr3[i3] >>> 8) | (iArr3[i3] << 24)) + i2) ^ i;
            i2 = ((i2 << 3) | (i2 >>> 29)) ^ iArr3[i3];
            i++;
            iArr2[i] = i2;
        }
        byte[] bArr = new byte[8192];
        int i4 = 0;
        while (true) {
            int read = inputStream.read(bArr);
            if (read >= 0) {
                int i5 = 0;
                int i6 = i4;
                while (i6 < i4 + read) {
                    bArr[i5] = (byte) ((byte) (((byte) (new int[]{(c10 << 16) | c9, (c12 << 16) | c11}[(i6 % 8) / 4] >> ((i6 % 4) << 3))) ^ bArr[i5]));
                    i6++;
                    i5++;
                }
                outputStream.write(bArr, 0, read);
                i4 = i6;
            } else {
                return;
            }
        }
    }
}
