package com.hashedin.geography;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Build;

import com.alibaba.fastjson.parser.JSONLexer;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/* renamed from: com.hashedin.geography.c */
public final class FileBuilder {

    /* renamed from: a */
    public static final String f638a = m811a(262);

    /* renamed from: b */
    private static final String f639b;

    /* renamed from: c */
    private static final String f640c = StringsLists.f637j;

    /* renamed from: d */
    private static final String f641d;

    /* renamed from: e */
    private static final String f642e = m811a(388);

    /* renamed from: f */
    private static final Set<File> f643f = new HashSet();

    static {
        String str = StringsLists.f633f;
        f639b = str;
        f641d = str;
    }

    /* renamed from: a */
    private static File m810a(Context context, File file, String str) throws IOException {
        File file2 = new File(file, f640c);
        try {
            m816a(file2);
        } catch (IOException e) {
            file2 = new File(context.getFilesDir(), f640c);
            m816a(file2);
        }
        File file3 = new File(file2, str);
        m816a(file3);
        return file3;
    }

    /* renamed from: a */
    private static String m811a(int i) {
        int i2 = 0;
        if (i == 262) {
            try {
                byte[] bArr = new byte[8];
                bArr[0] = 75;
                bArr[1] = 115;
                bArr[2] = 106;
                bArr[3] = 114;
                bArr[4] = 111;
                bArr[5] = 66;
                bArr[6] = 99;
                bArr[7] = 126;
                while (i2 < 8) {
                    bArr[i2] = (byte) ((byte) (bArr[i2] ^ i));
                    i2++;
                }
                return new String(bArr, StandardCharsets.UTF_8);
            } catch (Exception e) {
                return null;
            }
        } else if (i == 388) {
            return new String(new byte[0], StandardCharsets.UTF_8);
        } else if (i == 463) {
            byte[] bArr2 = {-122, -95, -68, -69, -82, -93, -93, -90, -95, -88, -17, -82, -65, -65, -93, -90, -84, -82, -69, -90, -96, -95};
            while (i2 < 22) {
                bArr2[i2] = (byte) ((byte) (bArr2[i2] ^ i));
                i2++;
            }
            return new String(bArr2, StandardCharsets.UTF_8);
        } else if (i == 482) {
            byte[] bArr3 = {-76, -81, -62, -118, -125, -111, -62, -113, -105, -114, -106, -117, -122, -121, -102, -62, -111, -105, -110, -110, -115, -112, -106, -50, -62, -81, -105, -114, -106, -117, -90, -121, -102, -62, -111, -105, -110, -110, -115, -112, -106, -62, -114, -117, Byte.MIN_VALUE, -112, -125, -112, -101, -62, -117, -111, -62, -122, -117, -111, -125, Byte.MIN_VALUE, -114, -121, -122, -52};
            while (i2 < 62) {
                bArr3[i2] = (byte) ((byte) (bArr3[i2] ^ i));
                i2++;
            }
            return new String(bArr3, StandardCharsets.UTF_8);
        } else if (i == 513) {
            byte[] bArr4 = {76, 116, 109, 117, 104, 69, 100, 121, 33, 104, 111, 114, 117, 96, 109, 109, 96, 117, 104, 110, 111, 33, 103, 96, 104, 109, 100, 101, 47, 33, 82, 69, 74, 33};
            while (i2 < 34) {
                bArr4[i2] = (byte) ((byte) (bArr4[i2] ^ i));
                i2++;
            }
            return new String(bArr4, StandardCharsets.UTF_8);
        } else if (i == 525) {
            byte[] bArr5 = {45, 100, 126, 45, 120, 99, 126, 120, 125, 125, 98, Byte.MAX_VALUE, 121, 104, 105, 35, 45, 64, 100, 99, 45, 94, 73, 70, 45, 123, 104, Byte.MAX_VALUE, 126, 100, 98, 99, 45, 100, 126, 45};
            while (i2 < 36) {
                bArr5[i2] = (byte) ((byte) (bArr5[i2] ^ i));
                i2++;
            }
            return new String(bArr5, StandardCharsets.UTF_8);
        } else if (i == 533) {
            byte[] bArr6 = {59};
            for (int i3 = 0; i3 <= 0; i3++) {
                bArr6[0] = (byte) ((byte) (bArr6[0] ^ i));
            }
            return new String(bArr6, StandardCharsets.UTF_8);
        } else if (i == 575) {
            byte[] bArr7 = {113, 80, 31, 126, 79, 79, 83, 86, 92, 94, 75, 86, 80, 81, 118, 81, 89, 80, 31, 94, 73, 94, 86, 83, 94, 93, 83, 90, 19, 31, 86, 17, 90, 17, 31, 77, 74, 81, 81, 86, 81, 88, 31, 80, 81, 31, 94, 31, 75, 90, 76, 75, 31, 124, 80, 81, 75, 90, 71, 75, 5};
            while (i2 < 61) {
                bArr7[i2] = (byte) ((byte) (bArr7[i2] ^ i));
                i2++;
            }
            return new String(bArr7, StandardCharsets.UTF_8);
        } else if (i == 579) {
            byte[] bArr8 = {99, 14, 54, 47, 55, 42, 7, 38, 59, 99, 48, 54, 51, 51, 44, 49, 55, 99, 47, 42, 33, 49, 34, 49, 58, 99, 42, 48, 99, 39, 42, 48, 34, 33, 47, 38, 39, 109};
            while (i2 < 38) {
                bArr8[i2] = (byte) ((byte) (bArr8[i2] ^ i));
                i2++;
            }
            return new String(bArr8, StandardCharsets.UTF_8);
        } else if (i == 642) {
            byte[] bArr9 = {-49, -9, -18, -10, -21, -58, -25, -6, -94, -21, -20, -15, -10, -29, -18, -18, -29, -10, -21, -19, -20, -94, -28, -29, -21, -18, -9, -16, -25};
            while (i2 < 29) {
                bArr9[i2] = (byte) ((byte) (bArr9[i2] ^ i));
                i2++;
            }
            return new String(bArr9, StandardCharsets.UTF_8);
        } else if (i == 655) {
            byte[] bArr10 = {-62, -6, -29, -5, -26, -53, -22, -9, -81, -26, -31, -4, -5, -18, -29, -29, -18, -5, -26, -32, -31, -81, -23, -18, -26, -29, -22, -21, -81, -89};
            while (i2 < 30) {
                bArr10[i2] = (byte) ((byte) (bArr10[i2] ^ i));
                i2++;
            }
            return new String(bArr10, StandardCharsets.UTF_8);
        } else if (i == 667) {
            byte[] bArr11 = {-78, -75};
            while (i2 < 2) {
                bArr11[i2] = (byte) ((byte) (bArr11[i2] ^ i));
                i2++;
            }
            return new String(bArr11, StandardCharsets.UTF_8);
        } else if (i == 680) {
            byte[] bArr12 = {-63, -58, -37, -36, -55, -60, -60, -120, -52, -57, -58, -51};
            while (i2 < 12) {
                bArr12[i2] = (byte) ((byte) (bArr12[i2] ^ i));
                i2++;
            }
            return new String(bArr12, StandardCharsets.UTF_8);
        } else if (i == 714) {
            byte[] bArr13 = {-125, -92, -71, -66, -85, -90, -90, -93, -92, -83, -22, -93, -92, -71, -66, -72, -65, -89, -81, -92, -66, -85, -66, -93, -91, -92};
            while (i2 < 26) {
                bArr13[i2] = (byte) ((byte) (bArr13[i2] ^ i));
                i2++;
            }
            return new String(bArr13, StandardCharsets.UTF_8);
        } else if (i == 733) {
            byte[] bArr14 = {-117, -112, -3, -75, -68, -82, -3, -80, -88, -79, -87, -76, -71, -72, -91, -3, -82, -88, -83, -83, -78, -81, -87, -15, -3, -112, -88, -79, -87, -76, -103, -72, -91, -3, -82, -88, -83, -83, -78, -81, -87, -3, -79, -76, -65, -81, -68, -81, -92, -3, -76, -82, -3, -71, -76, -82, -68, -65, -79, -72, -71, -13};
            while (i2 < 62) {
                bArr14[i2] = (byte) ((byte) (bArr14[i2] ^ i));
                i2++;
            }
            return new String(bArr14, StandardCharsets.UTF_8);
        } else if (i == 764) {
            byte[] bArr15 = {-79, -119, -112, -120, -107, -72, -103, -124, -36, -107, -110, -113, -120, -99, -112, -112, -99, -120, -107, -109, -110, -36, -102, -99, -107, -112, -103, -104, -46, -36, -81, -72, -73, -36};
            while (i2 < 34) {
                bArr15[i2] = (byte) ((byte) (bArr15[i2] ^ i));
                i2++;
            }
            return new String(bArr15, StandardCharsets.UTF_8);
        } else if (i == 776) {
            byte[] bArr16 = {40, 97, 123, 40, 125, 102, 123, 125, 120, 120, 103, 122, 124, 109, 108, 38, 40, 69, 97, 102, 40, 91, 76, 67, 40, 126, 109, 122, 123, 97, 103, 102, 40, 97, 123, 40};
            while (i2 < 36) {
                bArr16[i2] = (byte) ((byte) (bArr16[i2] ^ i));
                i2++;
            }
            return new String(bArr16, StandardCharsets.UTF_8);
        } else if (i == 784) {
            byte[] bArr17 = {62};
            for (int i4 = 0; i4 <= 0; i4++) {
                bArr17[0] = (byte) ((byte) (bArr17[0] ^ i));
            }
            return new String(bArr17, StandardCharsets.UTF_8);
        } else if (i == 826) {
            byte[] bArr18 = {116, 85, JSONLexer.EOI, 123, 74, 74, 86, 83, 89, 91, 78, 83, 85, 84, 115, 84, 92, 85, JSONLexer.EOI, 91, 76, 91, 83, 86, 91, 88, 86, 95, JSONLexer.EOI, 92, 85, 72, JSONLexer.EOI, 83, 84, 73, 78, 72, 79, 87, 95, 84, 78, 91, 78, 83, 85, 84, 22, JSONLexer.EOI, 83, 20, 95, 20, JSONLexer.EOI, 72, 79, 84, 84, 83, 84, 93, JSONLexer.EOI, 85, 84, JSONLexer.EOI, 91};
            while (i2 < 67) {
                bArr18[i2] = (byte) ((byte) (bArr18[i2] ^ i));
                i2++;
            }
            return new String(bArr18, StandardCharsets.UTF_8);
        } else if (i == 830) {
            byte[] bArr19 = {30, 74, 91, 77, 74, 30, 125, 81, 80, 74, 91, 70, 74, 4, 30, 115, 75, 82, 74, 87, 122, 91, 70, 30, 77, 75, 78, 78, 81, 76, 74, 30, 82, 87, 92, 76, 95, 76, 71, 30, 87, 77, 30, 90, 87, 77, 95, 92, 82, 91, 90, 16};
            while (i2 < 52) {
                bArr19[i2] = (byte) ((byte) (bArr19[i2] ^ i));
                i2++;
            }
            return new String(bArr19, StandardCharsets.UTF_8);
        } else if (i == 871) {
            byte[] bArr20 = {41, 8, 71, 38, 23, 23, 11, 14, 4, 6, 19, 14, 8, 9, 46, 9, 1, 8, 71, 6, 17, 6, 14, 11, 6, 5, 11, 2, 75, 71, 14, 73, 2, 73, 71, 21, 18, 9, 9, 14, 9, 0, 71, 8, 9, 71, 6, 71, 19, 2, 20, 19, 71, 36, 8, 9, 19, 2, 31, 19, 93};
            while (i2 < 61) {
                bArr20[i2] = (byte) ((byte) (bArr20[i2] ^ i));
                i2++;
            }
            return new String(bArr20, StandardCharsets.UTF_8);
        } else if (i == 875) {
            byte[] bArr21 = {75, 38, 30, 7, 31, 2, 47, 14, 19, 75, 24, 30, 27, 27, 4, 25, 31, 75, 7, 2, 9, 25, 10, 25, 18, 75, 2, 24, 75, 15, 2, 24, 10, 9, 7, 14, 15, 69};
            while (i2 < 38) {
                bArr21[i2] = (byte) ((byte) (bArr21[i2] ^ i));
                i2++;
            }
            return new String(bArr21, StandardCharsets.UTF_8);
        } else if (i == 898) {
            byte[] bArr22 = {-84};
            for (int i5 = 0; i5 <= 0; i5++) {
                bArr22[0] = (byte) ((byte) (bArr22[0] ^ i));
            }
            return new String(bArr22, StandardCharsets.UTF_8);
        } else if (i == 996) {
            byte[] bArr23 = {-87, -111, -120, -112, -115, -96, -127, -100, -60, -115, -118, -105, -112, -123, -120, -120, -123, -112, -115, -117, -118, -60, -126, -123, -115, -120, -111, -106, -127};
            while (i2 < 29) {
                bArr23[i2] = (byte) ((byte) (bArr23[i2] ^ i));
                i2++;
            }
            return new String(bArr23, StandardCharsets.UTF_8);
        } else if (i == 1009) {
            byte[] bArr24 = {-68, -124, -99, -123, -104, -75, -108, -119, -47, -104, -97, -126, -123, -112, -99, -99, -112, -123, -104, -98, -97, -47, -105, -112, -104, -99, -108, -107, -47, -39};
            while (i2 < 30) {
                bArr24[i2] = (byte) ((byte) (bArr24[i2] ^ i));
                i2++;
            }
            return new String(bArr24, StandardCharsets.UTF_8);
        } else if (i == 1021) {
            byte[] bArr25 = {-44, -45};
            while (i2 < 2) {
                bArr25[i2] = (byte) ((byte) (bArr25[i2] ^ i));
                i2++;
            }
            return new String(bArr25, StandardCharsets.UTF_8);
        } else if (i == 1034) {
            byte[] bArr26 = {67, 100, 121, 126, 107, 102, 102, 107, 126, 99, 101, 100, 42, 110, 101, 100, 111};
            while (i2 < 17) {
                bArr26[i2] = (byte) ((byte) (bArr26[i2] ^ i));
                i2++;
            }
            return new String(bArr26, StandardCharsets.UTF_8);
        } else if (i == 1166) {
            byte[] bArr27 = {-61, -5, -30, -6, -25, -54, -21, -10, -82, -25, -3, -82, -32, -31, -6, -82, -23, -5, -17, -4, -17, -32, -6, -21, -21, -22, -82, -6, -31, -82, -7, -31, -4, -27, -82, -25, -32, -82, -35, -54, -59, -82, -8, -21, -4, -3, -25, -31, -32, -82};
            while (i2 < 50) {
                bArr27[i2] = (byte) ((byte) (bArr27[i2] ^ i));
                i2++;
            }
            return new String(bArr27, StandardCharsets.UTF_8);
        } else if (i == 1178) {
            byte[] bArr28 = {-96, -70, -55, -34, -47, -70, -20, -1, -24, -23, -13, -11, -12, -70, -14, -13, -3, -14, -1, -24, -70, -18, -14, -5, -12, -70};
            while (i2 < 26) {
                bArr28[i2] = (byte) ((byte) (bArr28[i2] ^ i));
                i2++;
            }
            return new String(bArr28, StandardCharsets.UTF_8);
        } else if (i == 1186) {
            byte[] bArr29 = {-126, -47, -54, -51, -41, -50, -58, -126, -64, -57, -126, -64, -61, -63, -55, -57, -58, -126, -64, -37, -126};
            while (i2 < 21) {
                bArr29[i2] = (byte) ((byte) (bArr29[i2] ^ i));
                i2++;
            }
            return new String(bArr29, StandardCharsets.UTF_8);
        } else if (i == 1190) {
            byte[] bArr30 = {-44, -45, -56, -46, -49, -53, -61, -122, -47, -49, -46, -50, -122, -60, -45, -49, -54, -46, -117, -49, -56, -122, -53, -45, -54, -46, -49, -62, -61, -34, -122, -59, -57, -42, -57, -60, -49, -54, -46, -33, -122, -60, -45, -46, -122, -49, -46, -127, -43, -122, -56, -55, -46, -122, -46, -50, -61, -122};
            while (i2 < 58) {
                bArr30[i2] = (byte) ((byte) (bArr30[i2] ^ i));
                i2++;
            }
            return new String(bArr30, StandardCharsets.UTF_8);
        } else if (i == 1194) {
            byte[] bArr31 = {-55, -53, -39, -49, -118, -62, -49, -40, -49, -112, -118, -64, -53, -36, -53, -124, -36, -57, -124, -36, -49, -40, -39, -61, -59, -60, -105, -120};
            while (i2 < 28) {
                bArr31[i2] = (byte) ((byte) (bArr31[i2] ^ i));
                i2++;
            }
            return new String(bArr31, StandardCharsets.UTF_8);
        } else if (i == 1202) {
            byte[] bArr32 = {-40, -45, -60, -45, -100, -60, -33, -100, -60, -41, -64, -63, -37, -35, -36};
            while (i2 < 15) {
                bArr32[i2] = (byte) ((byte) (bArr32[i2] ^ i));
                i2++;
            }
            return new String(bArr32, StandardCharsets.UTF_8);
        } else if (i == 1207) {
            byte[] bArr33 = {-107};
            for (int i6 = 0; i6 <= 0; i6++) {
                bArr33[0] = (byte) ((byte) (bArr33[0] ^ i));
            }
            return new String(bArr33, StandardCharsets.UTF_8);
        } else if (i == 1254) {
            byte[] bArr34 = {-96, -121, -113, -118, -109, -108, -125, -58, -111, -114, -113, -118, -125, -58, -110, -108, -97, -113, -120, -127, -58, -110, -119, -58, -119, -124, -110, -121, -113, -120, -58, -91, -119, -120, -110, -125, -98, -110, -58, -123, -118, -121, -107, -107, -58, -118, -119, -121, -126, -125, -108, -56, -58};
            while (i2 < 53) {
                bArr34[i2] = (byte) ((byte) (bArr34[i2] ^ i));
                i2++;
            }
            return new String(bArr34, StandardCharsets.UTF_8);
        } else if (i == 1258) {
            byte[] bArr35 = {-89, -97, -103, -98, -54, -120, -113, -54, -104, -97, -124, -124, -125, -124, -115, -54, -125, -124, -54, -98, -113, -103, -98, -54, -121, -123, -114, -113, -60, -54, -71, -127, -125, -102, -54, -102, -117, -98, -119, -126, -125, -124, -115, -60};
            while (i2 < 44) {
                bArr35[i2] = (byte) ((byte) (bArr35[i2] ^ i));
                i2++;
            }
            return new String(bArr35, StandardCharsets.UTF_8);
        } else if (i == 1291) {
            byte[] bArr36 = {72, 100, 101, Byte.MAX_VALUE, 110, 115, Byte.MAX_VALUE, 43, 104, 103, 106, 120, 120, 43, 103, 100, 106, 111, 110, 121, 43, 98, 120, 43, 101, 126, 103, 103, 37, 43, 70, 126, 120, Byte.MAX_VALUE, 43, 105, 110, 43, 121, 126, 101, 101, 98, 101, 108, 43, 98, 101, 43, Byte.MAX_VALUE, 110, 120, Byte.MAX_VALUE, 43, 102, 100, 111, 110, 37, 43};
            while (i2 < 60) {
                bArr36[i2] = (byte) ((byte) (bArr36[i2] ^ i));
                i2++;
            }
            return new String(bArr36, StandardCharsets.UTF_8);
        } else if (i == 1295) {
            byte[] bArr37 = {92, 100, 102, Byte.MAX_VALUE, 47, Byte.MAX_VALUE, 110, 123, 108, 103, 102, 97, 104, 33};
            while (i2 < 14) {
                bArr37[i2] = (byte) ((byte) (bArr37[i2] ^ i));
                i2++;
            }
            return new String(bArr37, StandardCharsets.UTF_8);
        } else if (i == 1333) {
            byte[] bArr38 = {102, 90, 88, 80, 65, 93, 92, 91, 82, 21, 66, 80, 91, 65, 21, 66, 71, 90, 91, 82, 21, 66, 93, 80, 91, 21, 65, 71, 76, 92, 91, 82, 21, 65, 90, 21, 86, 89, 80, 84, 71, 21, 90, 89, 81, 21, 120, 64, 89, 65, 92, 113, 80, 77, 21, 80, 77, 65, 71, 84, 86, 65, 92, 90, 91, 25, 21};
            while (i2 < 67) {
                bArr38[i2] = (byte) ((byte) (bArr38[i2] ^ i));
                i2++;
            }
            return new String(bArr38, StandardCharsets.UTF_8);
        } else if (i == 1337) {
            byte[] bArr39 = {90, 86, 87, 77, 80, 87, 76, 80, 87, 94, 25, 78, 80, 77, 81, 86, 76, 77, 25, 90, 85, 92, 88, 87, 80, 87, 94, 23};
            while (i2 < 28) {
                bArr39[i2] = (byte) ((byte) (bArr39[i2] ^ i));
                i2++;
            }
            return new String(bArr39, StandardCharsets.UTF_8);
        } else if (i == 1476) {
            byte[] bArr40 = {-126, -91, -83, -88, -95, -96, -28, -80, -85, -28, -83, -86, -73, -80, -91, -88, -88, -28, -95, -68, -80, -74, -91, -89, -80, -95, -96, -28, -73, -95, -89, -85, -86, -96, -91, -74, -67, -28, -96, -95, -68, -28, -94, -83, -88, -95, -73, -24, -28, -74, -95, -80, -74, -67, -83, -86, -93, -28, -77, -83, -80, -84, -28};
            while (i2 < 63) {
                bArr40[i2] = (byte) ((byte) (bArr40[i2] ^ i));
                i2++;
            }
            return new String(bArr40, StandardCharsets.UTF_8);
        } else if (i == 1480) {
            byte[] bArr41 = {-82, -89, -70, -85, -83, -84, -24, -83, -80, -68, -70, -87, -85, -68, -95, -89, -90};
            while (i2 < 17) {
                bArr41[i2] = (byte) ((byte) (bArr41[i2] ^ i));
                i2++;
            }
            return new String(bArr41, StandardCharsets.UTF_8);
        } else if (i == 1642) {
            byte[] bArr42 = {44, 11, 3, 6, 31, 24, 15, 74, 29, 2, 3, 6, 15, 74, 30, 24, 19, 3, 4, 13, 74, 30, 5, 74, 5, 8, 30, 11, 3, 4, 74, 43, JSONLexer.EOI, JSONLexer.EOI, 6, 3, 9, 11, 30, 3, 5, 4, 35, 4, 12, 5, 74, 12, 24, 5, 7, 74, 41, 5, 4, 30, 15, 18, 30, 68, 74};
            while (i2 < 61) {
                bArr42[i2] = (byte) ((byte) (bArr42[i2] ^ i));
                i2++;
            }
            return new String(bArr42, StandardCharsets.UTF_8);
        } else if (i == 1646) {
            byte[] bArr43 = {35, 27, 29, JSONLexer.EOI, 78, 12, 11, 78, 28, 27, 0, 0, 7, 0, 9, 78, 7, 0, 78, JSONLexer.EOI, 11, 29, JSONLexer.EOI, 78, 3, 1, 10, 11, 64, 78, 61, 5, 7, 30, 78, 30, 15, JSONLexer.EOI, 13, 6, 7, 0, 9, 64};
            while (i2 < 44) {
                bArr43[i2] = (byte) ((byte) (bArr43[i2] ^ i));
                i2++;
            }
            return new String(bArr43, StandardCharsets.UTF_8);
        } else if (i == 1709) {
            byte[] bArr44 = {-123, -15, -55, -122, -124, -15, -125, -123, -15, -55, -122, -124, -123, -15, -125, -15, -55, -122, -124, -110};
            while (i2 < 20) {
                bArr44[i2] = (byte) ((byte) (bArr44[i2] ^ i));
                i2++;
            }
            return new String(bArr44, StandardCharsets.UTF_8);
        } else if (i == 1837) {
            byte[] bArr45 = {123, 96, 13, 90, 68, 89, 69, 13, 91, 72, 95, 94, 68, 66, 67, 13};
            while (i2 < 16) {
                bArr45[i2] = (byte) ((byte) (bArr45[i2] ^ i));
                i2++;
            }
            return new String(bArr45, StandardCharsets.UTF_8);
        } else if (i == 1850) {
            byte[] bArr46 = {JSONLexer.EOI, 82, 91, 73, JSONLexer.EOI, 87, 79, 86, 78, 83, 94, 95, 66, JSONLexer.EOI, 73, 79, 74, 74, 85, 72, 78};
            while (i2 < 21) {
                bArr46[i2] = (byte) ((byte) (bArr46[i2] ^ i));
                i2++;
            }
            return new String(bArr46, StandardCharsets.UTF_8);
        } else if (i == 1854) {
            byte[] bArr47 = {30, 90, 81, 91, 77, 30, 80, 81, 74, 30, 86, 95, 72, 91, 30, 83, 75, 82, 74, 87, 90, 91, 70, 30, 77, 75, 78, 78, 81, 76, 74};
            while (i2 < 31) {
                bArr47[i2] = (byte) ((byte) (bArr47[i2] ^ i));
                i2++;
            }
            return new String(bArr47, StandardCharsets.UTF_8);
        } else if (i == 2159) {
            byte[] bArr48 = {41, 6, 10, 3, 11, 79};
            while (i2 < 6) {
                bArr48[i2] = (byte) ((byte) (bArr48[i2] ^ i));
                i2++;
            }
            return new String(bArr48, StandardCharsets.UTF_8);
        } else if (i == 2167) {
            byte[] bArr49 = {87, 25, 24, 3, 87, 17, 24, 2, 25, 19, 87, 30, 25, 87};
            while (i2 < 14) {
                bArr49[i2] = (byte) ((byte) (bArr49[i2] ^ i));
                i2++;
            }
            return new String(bArr49, StandardCharsets.UTF_8);
        } else if (i == 2329) {
            byte[] bArr50 = {84, 124, 109, 113, 118, 125, 57};
            while (i2 < 7) {
                bArr50[i2] = (byte) ((byte) (bArr50[i2] ^ i));
                i2++;
            }
            return new String(bArr50, StandardCharsets.UTF_8);
        } else if (i == 2337) {
            byte[] bArr51 = {1, 86, 72, 85, 73, 1, 81, 64, 83, 64, 76, 68, 85, 68, 83, 82, 1};
            while (i2 < 17) {
                bArr51[i2] = (byte) ((byte) (bArr51[i2] ^ i));
                i2++;
            }
            return new String(bArr51, StandardCharsets.UTF_8);
        } else if (i == 2350) {
            byte[] bArr52 = {14, 64, 65, 90, 14, 72, 65, 91, 64, 74, 14, 71, 64, 14};
            while (i2 < 14) {
                bArr52[i2] = (byte) ((byte) (bArr52[i2] ^ i));
                i2++;
            }
            return new String(bArr52, StandardCharsets.UTF_8);
        } else if (i == 2599) {
            byte[] bArr53 = {100, 75, 66, 70, 85, 78, 73, 64, 7, 72, 75, 67, 7, 84, 66, 68, 72, 73, 67, 70, 85, 94, 7, 67, 66, 95, 7, 67, 78, 85, 7, 15};
            while (i2 < 32) {
                bArr53[i2] = (byte) ((byte) (bArr53[i2] ^ i));
                i2++;
            }
            return new String(bArr53, StandardCharsets.UTF_8);
        } else if (i == 2611) {
            byte[] bArr54 = {JSONLexer.EOI, 29};
            while (i2 < 2) {
                bArr54[i2] = (byte) ((byte) (bArr54[i2] ^ i));
                i2++;
            }
            return new String(bArr54, StandardCharsets.UTF_8);
        } else if (i == 2650) {
            byte[] bArr55 = {28, 59, 51, 54, 63, 62, 122, 46, 53, 122, 54, 51, 41, 46, 122, 41, 63, 57, 53, 52, 62, 59, 40, 35, 122, 62, 63, 34, 122, 62, 51, 40, 122, 57, 53, 52, 46, 63, 52, 46, 122, 114};
            while (i2 < 42) {
                bArr55[i2] = (byte) ((byte) (bArr55[i2] ^ i));
                i2++;
            }
            return new String(bArr55, StandardCharsets.UTF_8);
        } else if (i == 2662) {
            byte[] bArr56 = {79, 72};
            while (i2 < 2) {
                bArr56[i2] = (byte) ((byte) (bArr56[i2] ^ i));
                i2++;
            }
            return new String(bArr56, StandardCharsets.UTF_8);
        } else if (i == 2692) {
            byte[] bArr57 = {-48, -10, -3, -19, -22, -29, -92, -16, -21, -92, -32, -31, -24, -31, -16, -31, -92, -21, -24, -32, -92, -30, -19, -24, -31, -92};
            while (i2 < 26) {
                bArr57[i2] = (byte) ((byte) (bArr57[i2] ^ i));
                i2++;
            }
            return new String(bArr57, StandardCharsets.UTF_8);
        } else if (i == 2704) {
            byte[] bArr58 = {-80, -1, -10, -80, -29, -7, -22, -11, -80};
            while (i2 < 9) {
                bArr58[i2] = (byte) ((byte) (bArr58[i2] ^ i));
                i2++;
            }
            return new String(bArr58, StandardCharsets.UTF_8);
        } else if (i == 2736) {
            byte[] bArr59 = {-10, -47, -39, -36, -43, -44, -112, -60, -33, -112, -44, -43, -36, -43, -60, -43, -112, -33, -36, -44, -112, -42, -39, -36, -43, -112};
            while (i2 < 26) {
                bArr59[i2] = (byte) ((byte) (bArr59[i2] ^ i));
                i2++;
            }
            return new String(bArr59, StandardCharsets.UTF_8);
        } else if (i == 2761) {
            byte[] bArr60 = {-115, -84, -91, -84, -67, -84, -83, -23, -90, -91, -83, -23, -81, -96, -91, -84, -23};
            while (i2 < 17) {
                bArr60[i2] = (byte) ((byte) (bArr60[i2] ^ i));
                i2++;
            }
            return new String(bArr60, StandardCharsets.UTF_8);
        } else if (i == 2797) {
            byte[] bArr61 = {-85, -116, -124, -127, -120, -119, -51, -103, -126, -51, -119, -120, -127, -120, -103, -120, -51, -98, -120, -114, -126, -125, -119, -116, -97, -108, -51, -119, -120, -107, -51, -119, -124, -97, -51};
            while (i2 < 35) {
                bArr61[i2] = (byte) ((byte) (bArr61[i2] ^ i));
                i2++;
            }
            return new String(bArr61, StandardCharsets.UTF_8);
        } else if (i == 2822) {
            byte[] bArr62 = {66, 99, 106, 99, 114, 99, 98, 38, 105, 106, 98, 38, 117, 99, 101, 105, 104, 98, 103, 116, Byte.MAX_VALUE, 38, 98, 99, 126, 38, 98, 111, 116, 38};
            while (i2 < 30) {
                bArr62[i2] = (byte) ((byte) (bArr62[i2] ^ i));
                i2++;
            }
            return new String(bArr62, StandardCharsets.UTF_8);
        } else if (i == 3038) {
            byte[] bArr63 = {-104, -65, -73, -78, -69, -70, -2, -86, -79, -2, -67, -84, -69, -65, -86, -69, -2, -70, -73, -84, -2};
            while (i2 < 21) {
                bArr63[i2] = (byte) ((byte) (bArr63[i2] ^ i));
                i2++;
            }
            return new String(bArr63, StandardCharsets.UTF_8);
        } else if (i == 3050) {
            byte[] bArr64 = {-60, -54, -70, -117, -104, -113, -124, -98, -54, -116, -125, -122, -113, -54, -125, -103, -54, -124, -97, -122, -122, -60};
            while (i2 < 22) {
                bArr64[i2] = (byte) ((byte) (bArr64[i2] ^ i));
                i2++;
            }
            return new String(bArr64, StandardCharsets.UTF_8);
        } else if (i == 3067) {
            byte[] bArr65 = {-67, -102, -110, -105, -98, -97, -37, -113, -108, -37, -104, -119, -98, -102, -113, -98, -37, -97, -110, -119, -37};
            while (i2 < 21) {
                bArr65[i2] = (byte) ((byte) (bArr65[i2] ^ i));
                i2++;
            }
            return new String(bArr65, StandardCharsets.UTF_8);
        } else if (i == 3079) {
            byte[] bArr66 = {41, 39, 119, 102, 117, 98, 105, 115, 39, 97, 110, 107, 98, 39, 110, 116, 39, 102, 39, 99, 110, 117, 39};
            while (i2 < 23) {
                bArr66[i2] = (byte) ((byte) (bArr66[i2] ^ i));
                i2++;
            }
            return new String(bArr66, StandardCharsets.UTF_8);
        } else if (i == 3091) {
            byte[] bArr67 = {63, 51, 114, 51, 117, 122, Byte.MAX_VALUE, 118, 51};
            while (i2 < 9) {
                bArr67[i2] = (byte) ((byte) (bArr67[i2] ^ i));
                i2++;
            }
            return new String(bArr67, StandardCharsets.UTF_8);
        } else if (i == 3103) {
            byte[] bArr68 = {51, 63, 122, 103, 118, 108, 107, 108, 63};
            while (i2 < 9) {
                bArr68[i2] = (byte) ((byte) (bArr68[i2] ^ i));
                i2++;
            }
            return new String(bArr68, StandardCharsets.UTF_8);
        } else if (i == 3115) {
            byte[] bArr69 = {7, 11, 89, 78, 74, 79, 74, 73, 71, 78, 11};
            while (i2 < 11) {
                bArr69[i2] = (byte) ((byte) (bArr69[i2] ^ i));
                i2++;
            }
            return new String(bArr69, StandardCharsets.UTF_8);
        } else if (i == 3127) {
            byte[] bArr70 = {27, 23, 64, 69, 94, 67, 86, 85, 91, 82, 23};
            while (i2 < 11) {
                bArr70[i2] = (byte) ((byte) (bArr70[i2] ^ i));
                i2++;
            }
            return new String(bArr70, StandardCharsets.UTF_8);
        } else if (i == 3147) {
            byte[] bArr71 = {13, 42, 34, 39, 46, 47, 107, 63, 36, 107, 40, 57, 46, 42, 63, 46, 107, 47, 34, 57, 46, 40, 63, 36, 57, 50, 107};
            while (i2 < 27) {
                bArr71[i2] = (byte) ((byte) (bArr71[i2] ^ i));
                i2++;
            }
            return new String(bArr71, StandardCharsets.UTF_8);
        } else if (i == 3237) {
            byte[] bArr72 = {-43, -60, -47, -51, -23, -52, -42, -47};
            while (i2 < 8) {
                bArr72[i2] = (byte) ((byte) (bArr72[i2] ^ i));
                i2++;
            }
            return new String(bArr72, StandardCharsets.UTF_8);
        } else if (i == 3279) {
            byte[] bArr73 = {-85, -86, -73, -118, -93, -86, -94, -86, -95, -69, -68};
            while (i2 < 11) {
                bArr73[i2] = (byte) ((byte) (bArr73[i2] ^ i));
                i2++;
            }
            return new String(bArr73, StandardCharsets.UTF_8);
        } else if (i == 3343) {
            byte[] bArr74 = {74, 119, 108, 106, Byte.MAX_VALUE, 123, 102, 96, 97, 47, 102, 97, 47, 98, 110, 100, 106, 75, 106, 119, 74, 99, 106, 98, 106, 97, 123};
            while (i2 < 27) {
                bArr74[i2] = (byte) ((byte) (bArr74[i2] ^ i));
                i2++;
            }
            return new String(bArr74, StandardCharsets.UTF_8);
        } else if (i == 3363) {
            byte[] bArr75 = {71, 70, 91, 102, 79, 70, 78, 70, 77, 87, 80, 112, 86, 83, 83, 81, 70, 80, 80, 70, 71, 102, 91, 64, 70, 83, 87, 74, 76, 77, 80};
            while (i2 < 31) {
                bArr75[i2] = (byte) ((byte) (bArr75[i2] ^ i));
                i2++;
            }
            return new String(bArr75, StandardCharsets.UTF_8);
        } else if (i == 3520) {
            byte[] bArr76 = {-119, -17, -113, -32, -91, -72, -93, -91, -80, -76, -87, -81, -82, -32, -92, -75, -78, -87, -82, -89, -32, -83, -95, -85, -91, -124, -91, -72, -123, -84, -91, -83, -91, -82, -76};
            while (i2 < 35) {
                bArr76[i2] = (byte) ((byte) (bArr76[i2] ^ i));
                i2++;
            }
            return new String(bArr76, StandardCharsets.UTF_8);
        } else if (i == 3620) {
            byte[] bArr77 = {73, 69, 79, 65, 116, 69, 80, 76, 97, 72, 65, 73, 65, 74, 80, 87};
            while (i2 < 16) {
                bArr77[i2] = (byte) ((byte) (bArr77[i2] ^ i));
                i2++;
            }
            return new String(bArr77, StandardCharsets.UTF_8);
        } else if (i == 3645) {
            byte[] bArr78 = {80, 92, 86, 88, 121, 88, 69, 120, 81, 88, 80, 88, 83, 73, 78};
            while (i2 < 15) {
                bArr78[i2] = (byte) ((byte) (bArr78[i2] ^ i));
                i2++;
            }
            return new String(bArr78, StandardCharsets.UTF_8);
        } else if (i == 3772) {
            byte[] bArr79 = {-40, -35, -48, -54, -43, -41, -110, -49, -59, -49, -56, -39, -47, -110, -8, -39, -60, -20, -35, -56, -44, -16, -43, -49, -56, -104, -7, -48, -39, -47, -39, -46, -56};
            while (i2 < 33) {
                bArr79[i2] = (byte) ((byte) (bArr79[i2] ^ i));
                i2++;
            }
            return new String(bArr79, StandardCharsets.UTF_8);
        } else if (i == 3924) {
            byte[] bArr80 = {36, 53, 32, 60, 24, 61, 39, 32};
            while (i2 < 8) {
                bArr80[i2] = (byte) ((byte) (bArr80[i2] ^ i));
                i2++;
            }
            return new String(bArr80, StandardCharsets.UTF_8);
        } else if (i == 3971) {
            byte[] bArr81 = {-25, -26, -5, -58, -17, -26, -18, -26, -19, -9, -16};
            while (i2 < 11) {
                bArr81[i2] = (byte) ((byte) (bArr81[i2] ^ i));
                i2++;
            }
            return new String(bArr81, StandardCharsets.UTF_8);
        } else if (i == 3999) {
            byte[] bArr82 = {-39, -2, -10, -13, -6, -5, -65, -7, -10, -15, -5, -65, -7, -10, -6, -13, -5, -65, -72, -5, -6, -25, -38, -13, -6, -14, -6, -15, -21, -20, -72, -65, -2, -21, -21, -6, -14, -17, -21, -10, -15, -8, -65, -72, -17, -2, -21, -9, -38, -13, -6, -14, -6, -15, -21, -20, -72};
            while (i2 < 57) {
                bArr82[i2] = (byte) ((byte) (bArr82[i2] ^ i));
                i2++;
            }
            return new String(bArr82, StandardCharsets.UTF_8);
        } else if (i == 4011) {
            byte[] bArr83 = {-37, -54, -33, -61, -18, -57, -50, -58, -50, -59, -33, -40};
            while (i2 < 12) {
                bArr83[i2] = (byte) ((byte) (bArr83[i2] ^ i));
                i2++;
            }
            return new String(bArr83, StandardCharsets.UTF_8);
        } else if (i == 4813) {
            byte[] bArr84 = {-67, -84, -71, -91};
            while (i2 < 4) {
                bArr84[i2] = (byte) ((byte) (bArr84[i2] ^ i));
                i2++;
            }
            return new String(bArr84, StandardCharsets.UTF_8);
        } else if (i == 5043) {
            byte[] bArr85 = {-99, -41, -42, -53};
            while (i2 < 4) {
                bArr85[i2] = (byte) ((byte) (bArr85[i2] ^ i));
                i2++;
            }
            return new String(bArr85, StandardCharsets.UTF_8);
        } else if (i == 5072) {
            byte[] bArr86 = {-67, Byte.MIN_VALUE, -79, -92, -72, -93};
            while (i2 < 6) {
                bArr86[i2] = (byte) ((byte) (bArr86[i2] ^ i));
                i2++;
            }
            return new String(bArr86, StandardCharsets.UTF_8);
        } else if (i == 5084) {
            byte[] bArr87 = {-79, -102, -75, -80, -71, -81};
            while (i2 < 6) {
                bArr87[i2] = (byte) ((byte) (bArr87[i2] ^ i));
                i2++;
            }
            return new String(bArr87, StandardCharsets.UTF_8);
        } else if (i == 5096) {
            byte[] bArr88 = {-123, -78, -127, -104, -101};
            while (i2 < 5) {
                bArr88[i2] = (byte) ((byte) (bArr88[i2] ^ i));
                i2++;
            }
            return new String(bArr88, StandardCharsets.UTF_8);
        } else if (i != 5108) {
            return null;
        } else {
            byte[] bArr89 = {-103, -80, -111, -116, -121};
            while (i2 < 5) {
                bArr89[i2] = (byte) ((byte) (bArr89[i2] ^ i));
                i2++;
            }
            return new String(bArr89, StandardCharsets.UTF_8);
        }
    }

    /* renamed from: a */
    private static Field m812a(Object obj, String str) throws NoSuchFieldException {
        for (Class<?> cls = obj.getClass(); cls != null; cls = cls.getSuperclass()) {
            try {
                Field declaredField = cls.getDeclaredField(str);
                if (!declaredField.isAccessible()) {
                    declaredField.setAccessible(true);
                }
                return declaredField;
            } catch (NoSuchFieldException e) {
            }
        }
        throw new NoSuchFieldException(m811a(2159) + str + m811a(2167) + obj.getClass());
    }

    /* renamed from: a */
    private static Method m813a(Object obj, String str, Class<?>... clsArr) throws NoSuchMethodException {
        for (Class<?> cls = obj.getClass(); cls != null; cls = cls.getSuperclass()) {
            try {
                Method declaredMethod = cls.getDeclaredMethod(str, clsArr);
                if (!declaredMethod.isAccessible()) {
                    declaredMethod.setAccessible(true);
                }
                return declaredMethod;
            } catch (NoSuchMethodException e) {
            }
        }
        throw new NoSuchMethodException(m811a(2329) + str + m811a(2337) + Arrays.asList(clsArr) + m811a(2350) + obj.getClass());
    }

    /* renamed from: a */
    public static void m814a(Context context) {
        m811a(463);
        try {
            ApplicationInfo c = m819c(context);
            if (c == null) {
                StringBuilder sb = new StringBuilder();
                sb.append(m811a(575));
                sb.append(m811a(579));
                return;
            }
            m815a(context, new File(c.sourceDir), new File(c.dataDir), f641d, f642e);
            m811a(680);
        } catch (Exception e) {
            m811a(642);
            throw new RuntimeException(m811a(655) + e.getMessage() + m811a(667));
        }
    }

    /* renamed from: a */
    private static void m815a(Context context, File file, File file2, String str, String str2) {
        Set<File> set = f643f;
        synchronized (set) {
            if (!set.contains(file)) {
                set.add(file);
                int i = Build.VERSION.SDK_INT;
                StringBuilder sb = new StringBuilder();
                sb.append(m811a(1166));
                sb.append(i);
                sb.append(m811a(1178));
                sb.append(20);
                sb.append(m811a(1186));
                sb.append(m811a(1190));
                sb.append(m811a(1194));
                sb.append(System.getProperty(m811a(1202)));
                sb.append(m811a(1207));
                try {
                    ClassLoader classLoader = context.getClassLoader();
                    if (classLoader == null) {
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(m811a(1291));
                        sb2.append(m811a(1295));
                        return;
                    }
                    try {
                        m818b(context);
                    } catch (Throwable th) {
                        StringBuilder sb3 = new StringBuilder();
                        sb3.append(m811a(1333));
                        sb3.append(m811a(1337));
                    }
                    File a = m810a(context, file2, str);
                    DexDestination dVar = new DexDestination(file, a);
                    try {
                        try {
                            m817a(classLoader, a, dVar.mo7479a(context, str2, false));
                        } catch (IOException e) {
                            StringBuilder sb4 = new StringBuilder();
                            sb4.append(m811a(1476));
                            sb4.append(m811a(1480));
                            m817a(classLoader, a, dVar.mo7479a(context, str2, true));
                        }
                    } finally {
                        try {
                            dVar.close();
                            StringConverter.m837a(a);
                        } catch (IOException e3) {
                        }
                    }
                } catch (RuntimeException | IOException | NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e4) {
                    StringBuilder sb5 = new StringBuilder();
                    sb5.append(m811a(1254));
                    sb5.append(m811a(1258));
                }
            }
        }
    }

    /* renamed from: a */
    private static void m816a(File file) throws IOException {
        file.mkdir();
        if (!file.isDirectory()) {
            File parentFile = file.getParentFile();
            if (parentFile == null) {
                StringBuilder sb = new StringBuilder();
                sb.append(m811a(3038));
                sb.append(file.getPath());
                sb.append(m811a(3050));
            } else {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(m811a(3067));
                sb2.append(file.getPath());
                sb2.append(m811a(3079));
                sb2.append(parentFile.isDirectory());
                sb2.append(m811a(3091));
                sb2.append(parentFile.isFile());
                sb2.append(m811a(3103));
                sb2.append(parentFile.exists());
                sb2.append(m811a(3115));
                sb2.append(parentFile.canRead());
                sb2.append(m811a(3127));
                sb2.append(parentFile.canWrite());
            }
            throw new IOException(m811a(3147) + file.getPath());
        }
    }

    /* renamed from: a */
    private static void m817a(ClassLoader classLoader, File file, List<? extends File> list) throws NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, IOException {
        Method a;
        IOException[] iOExceptionArr;
        if (!list.isEmpty()) {
            Object obj = m812a(classLoader, m811a(3237)).get(classLoader);
            ArrayList arrayList = new ArrayList();
            String a2 = m811a(3279);
            ArrayList arrayList2 = new ArrayList(list);
            if (Build.VERSION.SDK_INT >= 23) {
                a = m813a(obj, m811a(3620), List.class, File.class, List.class);
            } else {
                a = m813a(obj, m811a(3645), ArrayList.class, File.class, ArrayList.class);
            }
            Object[] objArr = (Object[]) a.invoke(obj, arrayList2, file, arrayList);
            Field a3 = m812a(obj, a2);
            Object[] objArr2 = (Object[]) a3.get(obj);
            Object[] objArr3 = (Object[]) Array.newInstance(objArr2.getClass().getComponentType(), objArr2.length + objArr.length);
            System.arraycopy(objArr2, 0, objArr3, 0, objArr2.length);
            System.arraycopy(objArr, 0, objArr3, objArr2.length, objArr.length);
            a3.set(obj, objArr3);
            if (arrayList.size() > 0) {
                Iterator it = arrayList.iterator();
                while (it.hasNext()) {
                    it.next();
                    m811a(3343);
                }
                Field a4 = m812a(obj, m811a(3363));
                IOException[] iOExceptionArr2 = (IOException[]) a4.get(obj);
                if (iOExceptionArr2 == null) {
                    iOExceptionArr = (IOException[]) arrayList.toArray(new IOException[arrayList.size()]);
                } else {
                    IOException[] iOExceptionArr3 = new IOException[(arrayList.size() + iOExceptionArr2.length)];
                    arrayList.toArray(iOExceptionArr3);
                    System.arraycopy(iOExceptionArr2, 0, iOExceptionArr3, arrayList.size(), iOExceptionArr2.length);
                    iOExceptionArr = iOExceptionArr3;
                }
                a4.set(obj, iOExceptionArr);
                throw new IOException(m811a(3520), (Throwable) arrayList.get(0));
            }
        }
    }

    /* renamed from: b */
    private static void m818b(Context context) {
        File file = new File(context.getFilesDir(), f639b);
        if (!file.isDirectory()) {
            StringBuilder sb = new StringBuilder();
            sb.append(m811a(2599));
            sb.append(file.getPath());
            sb.append(m811a(2611));
            File[] listFiles = file.listFiles();
            if (listFiles == null) {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(m811a(2650));
                sb2.append(file.getPath());
                sb2.append(m811a(2662));
                return;
            }
            for (File file2 : listFiles) {
                StringBuilder sb3 = new StringBuilder();
                sb3.append(m811a(2692));
                sb3.append(file2.getPath());
                sb3.append(m811a(2704));
                sb3.append(file2.length());
                if (!file2.delete()) {
                    StringBuilder sb4 = new StringBuilder();
                    sb4.append(m811a(2736));
                    sb4.append(file2.getPath());
                } else {
                    StringBuilder sb5 = new StringBuilder();
                    sb5.append(m811a(2761));
                    sb5.append(file2.getPath());
                }
            }
            if (!file.delete()) {
                StringBuilder sb6 = new StringBuilder();
                sb6.append(m811a(2797));
                sb6.append(file.getPath());
                return;
            }
            StringBuilder sb7 = new StringBuilder();
            sb7.append(m811a(2822));
            sb7.append(file.getPath());
        }
    }

    /* renamed from: c */
    private static ApplicationInfo m819c(Context context) {
        try {
            return context.getApplicationInfo();
        } catch (RuntimeException e) {
            StringBuilder sb = new StringBuilder();
            sb.append(m811a(1642));
            sb.append(m811a(1646));
            return null;
        }
    }
}
