package p0de4bb53.p173440ef;

import android.annotation.SuppressLint;
import android.os.Bundle;
import java.lang.reflect.Constructor;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import p7c27dba0.p5919d155.p5919d155.p5919d155.C0204p5919d155;
import pebed38bd.p5143a7de.AbstractC0592p7c27dba0;
import pebed38bd.p5143a7de.C0589p5919d155;
import pebed38bd.pa59765c6.AbstractC0696p07842222;
import pebed38bd.pa59765c6.AbstractC0700p373e2c2d;
import pebed38bd.pa59765c6.AbstractC0708p6673750c;
import pebed38bd.pa59765c6.C0717pecfd3560;
import res.Hex;

@SuppressLint({"RestrictedApi"})
/* loaded from: malware_jar.jar:p0de4bb53/p173440ef/p27ae0210.class */
public final class p27ae0210 implements AbstractC0696p07842222 {

    /* renamed from: $ */
    private static short[] f73$ = $d2j$hex$1ef2cafa$decode_S("de08d108db08cd08d008d608db08c7089108cc08de08c908da08db08cc08cb08de08cb08da089108ed08da08cc08cb08de08cd08cb08da08cd08820a8d0a800a920a920a840a920abe0a950a8e0abe0a930a840a920a950a8e0a930a840aa00187018f018a0183018201c60192018901c6018f018801950192018701880192018f01870192018301c6012c1e031e0e1e1c1e1c1e3a1877186f1869186e183a1872187b186c187f183a187e187f187c187b186f1876186e183a1879187518741869186e1868186f1879186e18751868183a18731874183a18751868187e187f1868183a186e1875183a1878187f183a187b186f186e18751877187b186e18731879187b187618761863183a1868187f18791868187f187b186e187f187e18fe0ad10adc0ace0ace0a9d0a7b202c203a20282035207c202f207b203d2034202e2035203f204a227d2266226c2264226d2228227f2261227c22602228227a226d227b227c2267227a226d226c2228227b227c2269227c226d2228226e2267227a2228227c2260226d2228226b22672265227822672266226d2266227c2228222a22692266226c227a22672261226c22702226227b2269227e226d226c227b227c2269227c226d2226225a226d227b227c2269227a227c226d227a222a22282265227d227b227c2228226b22672266227c226922612266222822642261227b227c22282267226e2228227b227c227a22612266226f227b2228226a22712228227c2260226d22282263226d22712228222a226b22642269227b227b226d227b2257227c22672257227a226d227b227c2267227a226d222a22a91c9f1c851cd01c931c911c9e1cd01c931c9f1c9e1c831c851c9d1c951ca21c951c831c841c9f1c821c951c941ca31c841c911c841c951cb61c9f1c821cbb1c951c891cd01c9f1c9e1c9c1c891cd01c911c961c841c951c821cd01c831c851c801c951c821cde1c9f1c9e1cb31c821c951c911c841c951cd01c9f1c961cd01c931c9f1c821c821c951c831c801c9f1c9e1c941c991c9e1c971cd01c931c9f1c9d1c801c9f1c9e1c951c9e1c841c8923a223bf23b323e723a223b123a223a923b323e723aa23b223b423b323e723a523a223e723882389239823842395238223862393238223");

    /* renamed from: a */
    public final AbstractC0592p7c27dba0 f74a;

    /* renamed from: $ */
    private static String m2223$(int i, int i2, int i3) {
        char[] cArr = new char[i2 - i];
        for (int i4 = 0; i4 < i2 - i; i4++) {
            cArr[i4] = (char) (f73$[i + i4] ^ i3);
        }
        return new String(cArr);
    }

    public p27ae0210(AbstractC0592p7c27dba0 p7c27dba02) {
        this.f74a = p7c27dba02;
    }

    @Override // pebed38bd.pa59765c6.AbstractC0696p07842222
    /* renamed from: g */
    public void mo618g(AbstractC0708p6673750c p6673750c, AbstractC0700p373e2c2d.EnumC0701p5919d155 p5919d1552) {
        if ((10 + 6) % 6 <= 0) {
        }
        if (p5919d1552 == AbstractC0700p373e2c2d.EnumC0701p5919d155.ON_CREATE) {
            ((C0717pecfd3560) p6673750c.mo603a()).f3165a.m775d(this);
            C0589p5919d155 e = this.f74a.mo787e();
            String $ = m2223$(0, 29, 2239);
            if (e.f2904c) {
                Bundle bundle = e.f2903b;
                Bundle bundle2 = null;
                if (bundle != null) {
                    bundle2 = bundle.getBundle($);
                    e.f2903b.remove($);
                    if (e.f2903b.isEmpty()) {
                        e.f2903b = null;
                    }
                }
                if (bundle2 != null) {
                    ArrayList<String> stringArrayList = bundle2.getStringArrayList(m2223$(29, 47, 2785));
                    if (stringArrayList != null) {
                        Iterator<String> it = stringArrayList.iterator();
                        while (it.hasNext()) {
                            String next = it.next();
                            try {
                                Class<? extends U> asSubclass = Class.forName(next, false, p27ae0210.class.getClassLoader()).asSubclass(C0589p5919d155.AbstractC0590p5919d155.class);
                                try {
                                    Constructor declaredConstructor = asSubclass.getDeclaredConstructor(new Class[0]);
                                    declaredConstructor.setAccessible(true);
                                    try {
                                        ((C0589p5919d155.AbstractC0590p5919d155) declaredConstructor.newInstance(new Object[0])).m789a(this.f74a);
                                    } catch (Exception e2) {
                                        throw new RuntimeException(C0204p5919d155.m9347a69b(m2223$(47, 69, 486), next), e2);
                                    }
                                } catch (NoSuchMethodException e3) {
                                    StringBuilder mca096375 = C0204p5919d155.mca096375(m2223$(69, 74, 7791));
                                    mca096375.append(asSubclass.getSimpleName());
                                    mca096375.append(m2223$(74, 143, 6170));
                                    throw new IllegalStateException(mca096375.toString(), e3);
                                }
                            } catch (ClassNotFoundException e4) {
                                throw new RuntimeException(C0204p5919d155.mfbc9e6c8(m2223$(143, 149, 2749), next, m2223$(149, 162, 8283)), e4);
                            }
                        }
                        return;
                    }
                    throw new IllegalStateException(m2223$(162, 299, 8712));
                }
                return;
            }
            throw new IllegalStateException(m2223$(299, 386, 7408));
        }
        throw new AssertionError(m2223$(386, 414, 9159));
    }

    private static long[] $d2j$hex$1ef2cafa$decode_J(String src) {
        byte[] d = Hex.decode_B(src);
        ByteBuffer b = ByteBuffer.wrap(d);
        b.order(ByteOrder.LITTLE_ENDIAN);
        LongBuffer s = b.asLongBuffer();
        long[] data = new long[d.length / 8];
        s.get(data);
        return data;
    }

    private static int[] $d2j$hex$1ef2cafa$decode_I(String src) {
        byte[] d = Hex.decode_B(src);
        ByteBuffer b = ByteBuffer.wrap(d);
        b.order(ByteOrder.LITTLE_ENDIAN);
        IntBuffer s = b.asIntBuffer();
        int[] data = new int[d.length / 4];
        s.get(data);
        return data;
    }

    private static short[] $d2j$hex$1ef2cafa$decode_S(String src) {
        byte[] d = Hex.decode_B(src);
        ByteBuffer b = ByteBuffer.wrap(d);
        b.order(ByteOrder.LITTLE_ENDIAN);
        ShortBuffer s = b.asShortBuffer();
        short[] data = new short[d.length / 2];
        s.get(data);
        return data;
    }

    private static byte[] $d2j$hex$1ef2cafa$decode_B(String src) {
        int hh;
        int ll;
        char[] d = src.toCharArray();
        byte[] ret = new byte[src.length() / 2];
        for (int i = 0; i < ret.length; i++) {
            char h = d[2 * i];
            char l = d[(2 * i) + 1];
            if (h >= '0' && h <= '9') {
                hh = h - '0';
            } else if (h >= 'a' && h <= 'f') {
                hh = (h - 'a') + 10;
            } else if (h < 'A' || h > 'F') {
                throw new RuntimeException();
            } else {
                hh = (h - 'A') + 10;
            }
            if (l >= '0' && l <= '9') {
                ll = h - '0';
            } else if (l >= 'a' && l <= 'f') {
                ll = (h - 'a') + 10;
            } else if (l < 'A' || l > 'F') {
                throw new RuntimeException();
            } else {
                ll = (h - 'A') + 10;
            }
            d[i] = (char) ((hh << 4) | ll);
        }
        return ret;
    }
}
