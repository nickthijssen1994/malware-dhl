#version 100

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#endif

uniform sampler2D texture;
varying vec2 texCoord;

uniform float brightnessValue;
uniform float contrastValue;
uniform float saturationValue;
uniform vec3 tintHue;
uniform float tintIntensity;
uniform vec2 blurRadius;
uniform sampler2D unsharpMaskBlurredTexture;
uniform float unsharpMaskStrength;
uniform sampler2D xproTexture;
uniform float xproStrength;

uniform float vignetteStrength;
uniform vec2 vignetteCenter;
uniform vec2 vignetteScale;
uniform float vignetteMinRadius;
uniform float vignetteMaxRadius;

vec4 brightness(vec4 color, float value) {
  return vec4(color.rgb + value, color.a);
}

vec4 contrast(vec4 color, float value) {
  if (value > 0.0) {
    color.rgb = (color.rgb - 0.5) / (1.0 - value) + 0.5;
  } else {
    color.rgb = (color.rgb - 0.5) * (1.0 + value) + 0.5;
  }
  return color;
}

vec4 saturation(vec4 color, float value) {
  float sv = value / 100.0 + 1.0;

  vec3 luminanceWeighting = vec3(0.3086, 0.6094, 0.0820);
  float luminance = dot(luminanceWeighting, color.rgb);
  vec3 greyScale = vec3(luminance);

  return vec4(mix(greyScale, color.rgb, sv), color.a);
}

vec4 colorize(vec4 color, vec3 hue, float intensity) {
  color.rgb -= vec3(
    (color.r - hue.r) * intensity,
    (color.g - hue.g) * intensity,
    (color.b - hue.b) * intensity
  );
  return color;
}

float rand(vec2 co)
{
  float a = 12.9898;
  float b = 78.233;
  float c = 43758.5453;
  float dt = dot(co.xy ,vec2(a,b));
  float sn = mod(dt,3.14);
  return fract(sin(sn) * c);
}

vec4 blur(vec2 radius) {
  vec4 color = vec4(0.0);
  float total = 0.0;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = rand(gl_FragCoord.xy);

  float size = 10.0; // TODO(Theeban): this value needs to be based on texture size
  float start = -size + offset - 0.5;
  float end = size + offset - 0.5;
  for (float t = start; t <= end; t++) {
    float percent = t / size;
    float weight = 1.0 - abs(percent);
    vec2 sampleVec = texCoord + radius * percent;
    if (sampleVec.x <= 1.0 && sampleVec.y <= 1.0) {
      vec4 sampleColor = texture2D(texture, sampleVec);
      color += sampleColor * weight;
      total += weight;
    }
  }

  color /= total;

  return color;
}

vec4 unsharpMask(sampler2D originalTexture, sampler2D blurredTexture, float strength) {
  vec4 original = texture2D(originalTexture, texCoord);
  vec4 blurred = texture2D(blurredTexture, texCoord);
  return mix(blurred, original, 1.0 + strength);
}

vec4 vignette() {
  vec4 color = texture2D(texture, texCoord);
  // make sure transparent pixels don't have any color
  if (color.a == 0.0) {
    color.rgb *= 0.0;
  }
  vec2 offset = (texCoord - vignetteCenter) / vignetteScale;
  float radius = length(offset);
  float alpha  = clamp((radius - vignetteMinRadius) / (vignetteMaxRadius - vignetteMinRadius), 0.0, 1.0);
  float t = alpha * alpha * (3.0 - 2.0 * alpha);
  return mix(color, vec4(0.0,0.0,0.0,1.0), vignetteStrength * t);
}

/**
  * Lookup the textcoord of the center pixel in a 256 pixel texture.
  */
float lookupPixelCenter(float v) {
  float index = floor(clamp(v, 0.0, 1.0) * 255.0);
  float center = index + 0.5;
  return center / 256.0;
}

vec4 curves(vec4 color) {
  float redCurveValue = texture2D(xproTexture, vec2(lookupPixelCenter(color.r), 0.0)).r;
  float greenCurveValue = texture2D(xproTexture, vec2(lookupPixelCenter(color.g), 0.0)).g;
  float blueCurveValue = texture2D(xproTexture, vec2(lookupPixelCenter(color.b), 0.0)).b;
  return vec4(redCurveValue, greenCurveValue, blueCurveValue, color.a);
}

void main() {
  vec4 color = texture2D(texture, texCoord);
  if (brightnessValue != 0.0) {
    color = brightness(color, brightnessValue);
  }
  if (contrastValue != 0.0) {
    color = contrast(color, contrastValue);
  }
  if (saturationValue != 0.0) {
    color = saturation(color, saturationValue);
  }
  if (tintHue != vec3(0.0, 0.0, 0.0) && tintIntensity != 0.0) {
    color = colorize(color, tintHue, tintIntensity);
  }
  if (xproStrength != 0.0) {
    color = curves(color);
  }
  if (blurRadius != vec2(0.0, 0.0)) {
    color = blur(blurRadius);
  }
  if (unsharpMaskStrength != 0.0) {
    color = unsharpMask(texture, unsharpMaskBlurredTexture, unsharpMaskStrength);
  }
  if (vignetteStrength != 0.0) {
    color = vignette();
  }
  gl_FragColor = color;
}
