package com.p051jd.mrd.flutter.plugins.imagepicker;

import android.app.Activity;
import android.os.Environment;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.embedding.engine.plugins.activity.ActivityAware;
import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry;
import java.lang.ref.WeakReference;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.mrd.flutter.plugins.imagepicker.c */
/* loaded from: classes.dex */
public class C1994c implements FlutterPlugin, ActivityAware, MethodChannel.MethodCallHandler {

    /* renamed from: e */
    private static WeakReference<Activity> f3461e;

    /* renamed from: a */
    private ActivityPluginBinding f3462a;

    /* renamed from: b */
    private FlutterPlugin.FlutterPluginBinding f3463b;

    /* renamed from: c */
    private C1991b f3464c;

    /* renamed from: d */
    private MethodChannel f3465d;

    public void onDetachedFromEngine(FlutterPlugin.FlutterPluginBinding flutterPluginBinding) {
    }

    /* renamed from: a */
    public static Activity m999a() {
        return f3461e.get();
    }

    public void onAttachedToEngine(FlutterPlugin.FlutterPluginBinding flutterPluginBinding) {
        this.f3463b = flutterPluginBinding;
    }

    /* renamed from: a */
    public void m998a(BinaryMessenger binaryMessenger, Activity activity, PluginRegistry.Registrar registrar, ActivityPluginBinding activityPluginBinding) {
        f3461e = new WeakReference<>(activity);
        this.f3465d = new MethodChannel(binaryMessenger, "plugins.flutter.jd.mrd/image_picker");
        this.f3465d.setMethodCallHandler(this);
        this.f3464c = new C1991b(activity.getExternalFilesDir(Environment.DIRECTORY_PICTURES));
        if (registrar != null) {
            registrar.addActivityResultListener(this.f3464c);
        } else {
            activityPluginBinding.addActivityResultListener(this.f3464c);
        }
    }

    public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) {
        if (f3461e.get() == null || f3461e.get().isFinishing()) {
            result.error("no_activity", "image_picker plugin requires a foreground activity.", (Object) null);
        } else if (methodCall.method.equals("pickImage")) {
            int intValue = ((Integer) methodCall.argument("source")).intValue();
            switch (intValue) {
                case 0:
                    this.f3464c.m1004b(methodCall, result);
                    return;
                case 1:
                    this.f3464c.m1009a(methodCall, result);
                    return;
                default:
                    throw new IllegalArgumentException("Invalid image source: " + intValue);
            }
        } else if (methodCall.method.equals("compressImages")) {
            new C1982a().m1017a(methodCall, result);
        } else {
            result.notImplemented();
        }
    }

    public void onAttachedToActivity(ActivityPluginBinding activityPluginBinding) {
        this.f3462a = activityPluginBinding;
        m998a(this.f3463b.getBinaryMessenger(), this.f3462a.getActivity(), null, activityPluginBinding);
    }

    public void onDetachedFromActivityForConfigChanges() {
        onDetachedFromActivity();
    }

    public void onReattachedToActivityForConfigChanges(ActivityPluginBinding activityPluginBinding) {
        onAttachedToActivity(activityPluginBinding);
    }

    public void onDetachedFromActivity() {
        this.f3462a.removeActivityResultListener(this.f3464c);
        this.f3465d.setMethodCallHandler((MethodChannel.MethodCallHandler) null);
    }
}
