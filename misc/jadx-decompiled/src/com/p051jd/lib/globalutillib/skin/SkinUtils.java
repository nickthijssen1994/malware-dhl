package com.p051jd.lib.globalutillib.skin;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.StateListDrawable;
import android.text.TextUtils;
import com.jingdong.common.network.HttpGroupUtils;
import com.jingdong.jdsdk.network.toolbox.HttpError;
import com.jingdong.jdsdk.network.toolbox.HttpGroup;
import com.jingdong.jdsdk.network.toolbox.HttpResponse;
import com.jingdong.jdsdk.network.toolbox.HttpSetting;
import com.jingdong.sdk.platform.lib.openapi.OpenApiHelper;
import com.jingdong.sdk.platform.lib.utils.HostUtils;
import com.p051jd.framework.json.JDJSON;
import com.p051jd.framework.json.JDJSONArray;
import com.p051jd.framework.json.JDJSONObject;
import java.util.ArrayList;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.globalutillib.skin.SkinUtils */
/* loaded from: classes.dex */
public class SkinUtils {
    public static void setSkinResponse(SkinResponse skinResponse) {
        SkinManager.getInstance().skinResponse = skinResponse;
    }

    private static JDJSONObject getGlobalInfo() {
        if (SkinManager.getInstance().skinResponse == null || SkinManager.getInstance().skinResponse.data == null) {
            return null;
        }
        JDJSONArray jDJSONArray = SkinManager.getInstance().skinResponse.data.configFinalInfo;
        int i = SkinManager.getInstance().skinResponse.data.selected;
        if (jDJSONArray == null || i >= jDJSONArray.size()) {
            return null;
        }
        return SkinManager.getInstance().skinResponse.data.configFinalInfo.getJSONObject(i);
    }

    private static JDJSONObject getChildInfo() {
        if (SkinManager.getInstance().skinResponse == null || SkinManager.getInstance().skinResponse.data == null) {
            return null;
        }
        return SkinManager.getInstance().skinResponse.data.configChildInfo;
    }

    public static SkinChildInfo getChildSkinInfo(String str) {
        if (TextUtils.isEmpty(str) || SkinManager.getInstance().skinResponse == null || SkinManager.getInstance().skinResponse.data == null || SkinManager.getInstance().skinResponse.data.configChildInfo == null || !SkinManager.getInstance().skinResponse.data.configChildVo.containsKey(str)) {
            return null;
        }
        return SkinManager.getInstance().skinResponse.data.configChildVo.get(str);
    }

    public static SkinGlobalInfo getGlobalSkinInfo() {
        if (SkinManager.getInstance().skinResponse == null || SkinManager.getInstance().skinResponse.data == null || SkinManager.getInstance().skinResponse.data.configFinalVos == null) {
            return null;
        }
        ArrayList<SkinGlobalInfo> arrayList = SkinManager.getInstance().skinResponse.data.configFinalVos;
        int i = SkinManager.getInstance().skinResponse.data.selected;
        if (i < arrayList.size()) {
            return arrayList.get(i);
        }
        return null;
    }

    public static ColorStateList getFontColorList(String str, int i, int i2, int i3) {
        SkinChildInfo childSkinInfo = getChildSkinInfo(str);
        SkinGlobalInfo globalSkinInfo = getGlobalSkinInfo();
        int[][] iArr = {new int[]{16842913}, new int[]{16842919}, new int[]{16842912}, new int[0]};
        int[] iArr2 = new int[iArr.length];
        if (childSkinInfo == null || TextUtils.isEmpty(childSkinInfo.fontColor)) {
            if (globalSkinInfo != null) {
                switch (i) {
                    case 1:
                        i2 = Color.parseColor(globalSkinInfo.finalColorOne);
                        break;
                    case 2:
                        i2 = Color.parseColor(globalSkinInfo.finalColorTwo);
                        break;
                    case 3:
                        i2 = Color.parseColor(globalSkinInfo.finalColorThree);
                        break;
                }
            }
        } else {
            i2 = Color.parseColor(childSkinInfo.fontColor);
        }
        iArr2[2] = i2;
        iArr2[1] = i2;
        iArr2[0] = i2;
        iArr2[3] = i3;
        return new ColorStateList(iArr, iArr2);
    }

    public static GradientDrawable getSingleStatusDrawable(String str, int i, int i2, int i3, int i4, float f) {
        SkinChildInfo childSkinInfo = getChildSkinInfo(str);
        SkinGlobalInfo globalSkinInfo = getGlobalSkinInfo();
        if (childSkinInfo == null) {
            if (globalSkinInfo == null) {
                return createBorderDrawable(i3, i4, f);
            }
            return createGradientDrawable(globalSkinInfo, i, i2, i3, i4, f);
        } else if (TextUtils.isEmpty(childSkinInfo.borderColor)) {
            return createGradientDrawable(globalSkinInfo, i, i2, i3, i4, f);
        } else {
            int parseColor = Color.parseColor(childSkinInfo.borderColor);
            if (!TextUtils.isEmpty(childSkinInfo.fillingColor)) {
                i4 = Color.parseColor(childSkinInfo.fillingColor);
            }
            return createBorderDrawable(parseColor, i4, f);
        }
    }

    public static StateListDrawable getBorderDrawable(String str, int i, int i2, int i3, int i4, float f) {
        SkinChildInfo childSkinInfo = getChildSkinInfo(str);
        SkinGlobalInfo globalSkinInfo = getGlobalSkinInfo();
        StateListDrawable stateListDrawable = new StateListDrawable();
        GradientDrawable createBorderDrawable = createBorderDrawable(Color.parseColor("#DADADA"), Color.parseColor("#FFFFFF"), f);
        if (childSkinInfo == null) {
            if (globalSkinInfo == null) {
                addDrawableState(stateListDrawable, 1, createBorderDrawable(i3, i4, f));
                addDrawableState(stateListDrawable, 0, createBorderDrawable);
                return stateListDrawable;
            }
            createDefaultDrawable(stateListDrawable, globalSkinInfo, i, i2, i3, i4, f);
            addDrawableState(stateListDrawable, 0, createBorderDrawable);
            return stateListDrawable;
        } else if (TextUtils.isEmpty(childSkinInfo.borderColor)) {
            createDefaultDrawable(stateListDrawable, globalSkinInfo, i, i2, i3, i4, f);
            addDrawableState(stateListDrawable, 0, createBorderDrawable);
            return stateListDrawable;
        } else {
            int parseColor = Color.parseColor(childSkinInfo.borderColor);
            if (!TextUtils.isEmpty(childSkinInfo.fillingColor)) {
                i4 = Color.parseColor(childSkinInfo.fillingColor);
            }
            addDrawableState(stateListDrawable, 1, createBorderDrawable(parseColor, i4, f));
            addDrawableState(stateListDrawable, 0, createBorderDrawable);
            return stateListDrawable;
        }
    }

    public static StateListDrawable getClickBorderDrawable(String str, int i, int i2, int i3, int i4, float f) {
        SkinChildInfo childSkinInfo = getChildSkinInfo(str);
        SkinGlobalInfo globalSkinInfo = getGlobalSkinInfo();
        StateListDrawable stateListDrawable = new StateListDrawable();
        GradientDrawable createBorderDrawable = createBorderDrawable(Color.parseColor("#DADADA"), Color.parseColor("#FFFFFF"), f);
        if (childSkinInfo == null) {
            if (globalSkinInfo == null) {
                GradientDrawable createBorderDrawable2 = createBorderDrawable(i3, i4, f);
                addDrawableState(stateListDrawable, 1, createBorderDrawable);
                addDrawableState(stateListDrawable, 0, createBorderDrawable2);
                return stateListDrawable;
            }
            addDrawableState(stateListDrawable, 1, createBorderDrawable);
            createDefaultDrawable(stateListDrawable, globalSkinInfo, i, i2, i3, i4, 0, f);
            return stateListDrawable;
        } else if (TextUtils.isEmpty(childSkinInfo.borderColor)) {
            addDrawableState(stateListDrawable, 1, createBorderDrawable);
            createDefaultDrawable(stateListDrawable, globalSkinInfo, i, i2, i3, i4, 0, f);
            return stateListDrawable;
        } else {
            int parseColor = Color.parseColor(childSkinInfo.borderColor);
            if (!TextUtils.isEmpty(childSkinInfo.fillingColor)) {
                i4 = Color.parseColor(childSkinInfo.fillingColor);
            }
            GradientDrawable createBorderDrawable3 = createBorderDrawable(parseColor, i4, f);
            addDrawableState(stateListDrawable, 1, createBorderDrawable);
            addDrawableState(stateListDrawable, 0, createBorderDrawable3);
            return stateListDrawable;
        }
    }

    private static void addDrawableState(StateListDrawable stateListDrawable, int i, GradientDrawable gradientDrawable) {
        if (i == 1) {
            stateListDrawable.addState(new int[]{16842919}, gradientDrawable);
            stateListDrawable.addState(new int[]{16842913}, gradientDrawable);
            stateListDrawable.addState(new int[]{16842912}, gradientDrawable);
            stateListDrawable.addState(new int[]{-16842910}, gradientDrawable);
            return;
        }
        stateListDrawable.addState(new int[0], gradientDrawable);
    }

    private static void createDefaultDrawable(StateListDrawable stateListDrawable, SkinGlobalInfo skinGlobalInfo, int i, int i2, int i3, int i4, float f) {
        createDefaultDrawable(stateListDrawable, skinGlobalInfo, i, i2, i3, i4, 1, f);
    }

    private static void createDefaultDrawable(StateListDrawable stateListDrawable, SkinGlobalInfo skinGlobalInfo, int i, int i2, int i3, int i4, int i5, float f) {
        String globalColor = getGlobalColor(skinGlobalInfo, i);
        String globalColor2 = getGlobalColor(skinGlobalInfo, i2);
        if (!TextUtils.isEmpty(globalColor)) {
            i3 = Color.parseColor(globalColor);
        }
        if (!TextUtils.isEmpty(globalColor2)) {
            i4 = Color.parseColor(globalColor2);
        }
        addDrawableState(stateListDrawable, i5, createBorderDrawable(i3, i4, f));
    }

    private static GradientDrawable createGradientDrawable(SkinGlobalInfo skinGlobalInfo, int i, int i2, int i3, int i4, float f) {
        String globalColor = getGlobalColor(skinGlobalInfo, i);
        String globalColor2 = getGlobalColor(skinGlobalInfo, i2);
        if (!TextUtils.isEmpty(globalColor)) {
            i3 = Color.parseColor(globalColor);
        }
        if (!TextUtils.isEmpty(globalColor2)) {
            i4 = Color.parseColor(globalColor2);
        }
        return createBorderDrawable(i3, i4, f);
    }

    private static GradientDrawable createBorderDrawable(int i, int i2, float f) {
        GradientDrawable gradientDrawable = new GradientDrawable();
        gradientDrawable.setStroke(1, i);
        gradientDrawable.setColor(i2);
        gradientDrawable.setCornerRadius(f);
        return gradientDrawable;
    }

    public static StateListDrawable getFilledDrawable(String str, int i, int i2, float f) {
        SkinChildInfo childSkinInfo = getChildSkinInfo(str);
        SkinGlobalInfo globalSkinInfo = getGlobalSkinInfo();
        StateListDrawable stateListDrawable = new StateListDrawable();
        if (childSkinInfo != null) {
            BtnBgColor btnBgColor = childSkinInfo.backgroupColor;
            BtnBgColor btnBgColor2 = childSkinInfo.clickColor;
            if (btnBgColor2 != null) {
                handleStateDrawable(stateListDrawable, btnBgColor2, globalSkinInfo, -1, -1, f, 2);
            }
            if (btnBgColor == null) {
                stateListDrawable.addState(new int[0], newGlobalDrawable(globalSkinInfo, i, i2, f));
            } else {
                handleStateDrawable(stateListDrawable, btnBgColor, globalSkinInfo, i, i2, f, 1);
            }
            return stateListDrawable;
        } else if (globalSkinInfo == null) {
            stateListDrawable.addState(new int[0], createSolidDrawable(i2, f));
            return stateListDrawable;
        } else {
            String globalColor = getGlobalColor(globalSkinInfo, i);
            if (TextUtils.isEmpty(globalColor)) {
                stateListDrawable.addState(new int[0], createSolidDrawable(i2, f));
                return stateListDrawable;
            }
            stateListDrawable.addState(new int[0], createSolidDrawable(Color.parseColor(globalColor), f));
            return stateListDrawable;
        }
    }

    private static void handleStateDrawable(StateListDrawable stateListDrawable, BtnBgColor btnBgColor, SkinGlobalInfo skinGlobalInfo, int i, int i2, float f, int i3) {
        if (!TextUtils.isEmpty(btnBgColor.colorOne) || !TextUtils.isEmpty(btnBgColor.colorTwo) || !TextUtils.isEmpty(btnBgColor.colorThree)) {
            ArrayList arrayList = new ArrayList();
            if (!TextUtils.isEmpty(btnBgColor.colorOne)) {
                arrayList.add(Integer.valueOf(Color.parseColor(btnBgColor.colorOne)));
            }
            if (!TextUtils.isEmpty(btnBgColor.colorTwo)) {
                arrayList.add(Integer.valueOf(Color.parseColor(btnBgColor.colorTwo)));
            }
            if (!TextUtils.isEmpty(btnBgColor.colorThree)) {
                arrayList.add(Integer.valueOf(Color.parseColor(btnBgColor.colorThree)));
            }
            int[] iArr = new int[arrayList.size()];
            for (int i4 = 0; i4 < arrayList.size(); i4++) {
                iArr[i4] = ((Integer) arrayList.get(i4)).intValue();
            }
            GradientDrawable gradientDrawable = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, iArr);
            gradientDrawable.setCornerRadius(f);
            if (i3 == 1) {
                stateListDrawable.addState(new int[0], gradientDrawable);
                return;
            }
            stateListDrawable.addState(new int[]{16842919}, gradientDrawable);
            stateListDrawable.addState(new int[]{16842913}, gradientDrawable);
            stateListDrawable.addState(new int[]{-16842910}, gradientDrawable);
            stateListDrawable.addState(new int[]{16842912}, gradientDrawable);
        } else if (i3 == 1) {
            stateListDrawable.addState(new int[0], newGlobalDrawable(skinGlobalInfo, i, i2, f));
        }
    }

    private static GradientDrawable newGlobalDrawable(SkinGlobalInfo skinGlobalInfo, int i, int i2, float f) {
        String globalColor = getGlobalColor(skinGlobalInfo, i);
        if (TextUtils.isEmpty(globalColor)) {
            return createSolidDrawable(i2, f);
        }
        return createSolidDrawable(Color.parseColor(globalColor), f);
    }

    private static String getGlobalColor(SkinGlobalInfo skinGlobalInfo, int i) {
        if (skinGlobalInfo == null || i < 0) {
            return "";
        }
        switch (i) {
            case 1:
                return skinGlobalInfo.finalColorOne;
            case 2:
                return skinGlobalInfo.finalColorTwo;
            case 3:
                return skinGlobalInfo.finalColorThree;
            default:
                return "";
        }
    }

    private static GradientDrawable createSolidDrawable(int i, float f) {
        GradientDrawable gradientDrawable = new GradientDrawable();
        gradientDrawable.setCornerRadius(f);
        gradientDrawable.setColor(i);
        return gradientDrawable;
    }

    public static String getStrValue(String str, String str2, String str3) {
        if (TextUtils.isEmpty(str) && TextUtils.isEmpty(str2)) {
            return str3;
        }
        String[] strArr = null;
        String[] split = !TextUtils.isEmpty(str) ? str.split("\\.") : null;
        if (!TextUtils.isEmpty(str2)) {
            strArr = str2.split("\\.");
        }
        JDJSONObject globalInfo = getGlobalInfo();
        if (split == null || split.length <= 0) {
            return findStr(str3, globalInfo, strArr, 0);
        }
        int length = split.length;
        JDJSONObject childInfo = getChildInfo();
        if (childInfo != null) {
            String findStr = findStr("", childInfo, split, 0);
            if (TextUtils.isEmpty(findStr)) {
                return findStr(str3, globalInfo, strArr, 0);
            }
            return findStr;
        } else if (globalInfo == null) {
            return str3;
        } else {
            return findStr(str3, globalInfo, strArr, 0);
        }
    }

    private static String findStr(String str, JDJSONObject jDJSONObject, String[] strArr, int i) {
        if (jDJSONObject == null || strArr == null) {
            return str;
        }
        int length = strArr.length;
        if (i >= length) {
            return str;
        }
        String str2 = strArr[i];
        if (!jDJSONObject.containsKey(str2)) {
            return str;
        }
        if (i == length - 1) {
            return jDJSONObject.optString(str2, str);
        }
        return findStr(str, jDJSONObject.optJSONObject(str2), strArr, i + 1);
    }

    public static int getIntValue(String str, String str2, int i) {
        if (TextUtils.isEmpty(str) && TextUtils.isEmpty(str2)) {
            return i;
        }
        String[] strArr = null;
        String[] split = !TextUtils.isEmpty(str) ? str.split("\\.") : null;
        if (!TextUtils.isEmpty(str2)) {
            strArr = str2.split("\\.");
        }
        JDJSONObject globalInfo = getGlobalInfo();
        if (split == null || split.length <= 0) {
            return findInt(i, globalInfo, strArr, 0);
        }
        int length = split.length;
        JDJSONObject childInfo = getChildInfo();
        if (childInfo != null) {
            int findInt = findInt(-1, childInfo, split, 0);
            if (findInt < 0) {
                return findInt(i, globalInfo, strArr, 0);
            }
            return findInt;
        } else if (globalInfo == null) {
            return i;
        } else {
            return findInt(i, globalInfo, strArr, 0);
        }
    }

    private static int findInt(int i, JDJSONObject jDJSONObject, String[] strArr, int i2) {
        if (jDJSONObject == null || strArr == null) {
            return i;
        }
        int length = strArr.length;
        if (i2 >= length) {
            return i;
        }
        String str = strArr[i2];
        if (!jDJSONObject.containsKey(str)) {
            return i;
        }
        if (i2 == length - 1) {
            return jDJSONObject.optInt(str, i);
        }
        return findInt(i, jDJSONObject.optJSONObject(str), strArr, i2 + 1);
    }

    public static double getFloatValue(String str, String str2, double d) {
        if (TextUtils.isEmpty(str) && TextUtils.isEmpty(str2)) {
            return d;
        }
        String[] strArr = null;
        String[] split = !TextUtils.isEmpty(str) ? str.split("\\.") : null;
        if (!TextUtils.isEmpty(str2)) {
            strArr = str2.split("\\.");
        }
        JDJSONObject globalInfo = getGlobalInfo();
        if (split == null || split.length <= 0) {
            return findDouble(d, globalInfo, strArr, 0);
        }
        int length = split.length;
        JDJSONObject childInfo = getChildInfo();
        if (childInfo != null) {
            double findDouble = findDouble(-1.0d, childInfo, split, 0);
            if (findDouble < 0.0d) {
                return findDouble(d, globalInfo, strArr, 0);
            }
            return findDouble;
        } else if (globalInfo == null) {
            return d;
        } else {
            return findDouble(d, globalInfo, strArr, 0);
        }
    }

    private static double findDouble(double d, JDJSONObject jDJSONObject, String[] strArr, int i) {
        if (jDJSONObject == null || strArr == null) {
            return d;
        }
        int length = strArr.length;
        if (i >= length) {
            return d;
        }
        String str = strArr[i];
        if (!jDJSONObject.containsKey(str)) {
            return d;
        }
        if (i == length - 1) {
            return jDJSONObject.optDouble(str, d);
        }
        return findDouble(d, jDJSONObject.optJSONObject(str), strArr, i + 1);
    }

    public static void querySkinData(Context context) {
        HttpSetting httpSetting = new HttpSetting();
        httpSetting.setFunctionId("usualSkinBusiness");
        httpSetting.setUseFastJsonParser(true);
        httpSetting.setHost(HostUtils.getCommonHost());
        httpSetting.putJsonParam("apolloId", OpenApiHelper.getIClientInfo().getApolloId());
        httpSetting.putJsonParam("apolloSecret", OpenApiHelper.getIClientInfo().getApolloSecret());
        httpSetting.setListener(new HttpGroup.OnCommonListener() { // from class: com.jd.lib.globalutillib.skin.SkinUtils.1
            public void onError(HttpError httpError) {
            }

            public void onReady(HttpGroup.HttpSettingParams httpSettingParams) {
            }

            public void onEnd(HttpResponse httpResponse) {
                JDJSONObject fastJsonObject = httpResponse.getFastJsonObject();
                if (fastJsonObject != null) {
                    SkinResponse skinResponse = (SkinResponse) JDJSON.parseObject(fastJsonObject.toString(), SkinResponse.class);
                    JDJSONObject optJSONObject = fastJsonObject.optJSONObject("data");
                    if (optJSONObject != null) {
                        JDJSONArray optJSONArray = optJSONObject.optJSONArray("configFinalVos");
                        JDJSONObject optJSONObject2 = optJSONObject.optJSONObject("configChildVo");
                        if (skinResponse.data == null) {
                            skinResponse.data = new SkinDetail();
                        }
                        skinResponse.data.configFinalInfo = optJSONArray;
                        skinResponse.data.configChildInfo = optJSONObject2;
                    }
                    SkinUtils.setSkinResponse(skinResponse);
                }
            }
        });
        HttpGroupUtils.getHttpGroupaAsynPool().add(httpSetting);
    }
}
