package com.p051jd.lib.unification.album.filter.video;

import android.annotation.TargetApi;
import android.content.Context;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaCodecList;
import android.media.MediaCrypto;
import android.media.MediaExtractor;
import android.media.MediaFormat;
import android.media.MediaMuxer;
import android.os.Environment;
import android.os.HandlerThread;
import android.text.TextUtils;
import android.view.Surface;
import com.jingdong.common.UnLog;
import com.p051jd.lib.unification.album.filter.FilterTools;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.atomic.AtomicReference;

/* compiled from: TbsSdkJava */
@TargetApi(18)
/* renamed from: com.jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux */
/* loaded from: classes.dex */
public class ExtractDecodeEditEncodeMux {
    private static final int OUTPUT_AUDIO_AAC_PROFILE = 2;
    private static final int OUTPUT_AUDIO_BIT_RATE = 92160;
    private static final int OUTPUT_AUDIO_CHANNEL_COUNT = 1;
    private static final String OUTPUT_AUDIO_MIME_TYPE = "audio/mp4a-latm";
    private static final int OUTPUT_AUDIO_SAMPLE_RATE_HZ = 16000;
    private static final File OUTPUT_FILENAME_DIR = Environment.getExternalStorageDirectory();
    private static final int OUTPUT_VIDEO_COLOR_FORMAT = 2130708361;
    private static final int OUTPUT_VIDEO_FRAME_RATE = 15;
    private static final int OUTPUT_VIDEO_IFRAME_INTERVAL = 1;
    private static final String OUTPUT_VIDEO_MIME_TYPE = "video/avc";
    private static final String TAG = "ExtractDecodeEditEncodeMux";
    private static final int TIMEOUT_USEC = 10000;
    private HandlerThread handlerThread;
    Context mAppContext;
    private boolean mCopyAudio;
    private boolean mCopyVideo;
    private int mFilterProgress;
    private String mOutputFile;
    private String mPath;
    private int mOutPutVideoRate = 2000000;
    private int mWidth = -1;
    private int mHeight = -1;
    private int mVideoOrientation = 0;
    private FilterTools.FilterType mFilterType = FilterTools.FilterType.NO_FILTER;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux$ResultListener */
    /* loaded from: classes.dex */
    public interface ResultListener {
        void onResult(boolean z, String str, String str2);
    }

    public ExtractDecodeEditEncodeMux(Context context) {
        this.mAppContext = context.getApplicationContext();
    }

    public void setFilterType(FilterTools.FilterType filterType) {
        this.mFilterType = filterType;
    }

    public void setFilterProgress(int i) {
        this.mFilterProgress = i;
    }

    public void testExtractDecodeEditEncodeMuxAudioVideo(final ResultListener resultListener, int i, int i2) {
        setSize(i, i2);
        setCopyAudio();
        setCopyVideo();
        this.handlerThread = new HandlerThread("completethread") { // from class: com.jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux.1
            @Override // android.os.HandlerThread, java.lang.Thread, java.lang.Runnable
            public void run() {
                try {
                    ExtractDecodeEditEncodeMux.this.extractDecodeEditEncodeMux();
                    resultListener.onResult(true, ExtractDecodeEditEncodeMux.this.mOutputFile, "");
                } catch (Throwable th) {
                    th.printStackTrace();
                    resultListener.onResult(false, ExtractDecodeEditEncodeMux.this.mOutputFile, "");
                }
            }
        };
        this.handlerThread.start();
    }

    private void setCopyVideo() {
        this.mCopyVideo = true;
    }

    private void setCopyAudio() {
        this.mCopyAudio = true;
    }

    private void setSize(int i, int i2) {
        if (!(i % 16 == 0 && i2 % 16 == 0) && UnLog.W) {
            UnLog.w(TAG, "WARNING: width or height not multiple of 16");
        }
        this.mWidth = i;
        this.mHeight = i2;
    }

    public void setSource(String str) {
        this.mPath = str;
    }

    private void setOutputFile() {
        StringBuilder sb = new StringBuilder();
        sb.append(OUTPUT_FILENAME_DIR.getAbsolutePath());
        sb.append("/cts-media-");
        sb.append(getClass().getSimpleName());
        sb.append('-');
        if (this.mCopyVideo) {
            sb.append('-');
            sb.append("video");
            sb.append('-');
            sb.append(this.mWidth);
            sb.append('x');
            sb.append(this.mHeight);
        }
        if (this.mCopyAudio) {
            sb.append('-');
            sb.append("audio");
        }
        sb.append(".mp4");
        this.mOutputFile = sb.toString();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x02de, code lost:
        if (r12 != null) goto L_0x02e1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0200, code lost:
        if (r12 != null) goto L_0x0203;
     */
    /* JADX WARN: Removed duplicated region for block: B:146:0x02b9  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x02e4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:218:0x035a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:228:0x031e A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:230:0x0346 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:234:0x02d1 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:238:0x030a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:245:0x02f8 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:247:0x0332 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:253:0x02c2 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public void extractDecodeEditEncodeMux() throws Exception {
        MediaMuxer mediaMuxer;
        MediaCodec mediaCodec;
        MediaCodec mediaCodec2;
        MediaExtractor mediaExtractor;
        InputSurface inputSurface;
        MediaCodec mediaCodec3;
        MediaCodec mediaCodec4;
        OutputSurfaceWithFilter outputSurfaceWithFilter;
        MediaExtractor mediaExtractor2;
        Throwable th;
        MediaCodec mediaCodec5;
        OutputSurfaceWithFilter outputSurfaceWithFilter2;
        MediaExtractor mediaExtractor3;
        MediaExtractor mediaExtractor4;
        MediaExtractor mediaExtractor5;
        MediaExtractor mediaExtractor6;
        MediaExtractor mediaExtractor7;
        MediaExtractor mediaExtractor8;
        Throwable th2;
        MediaExtractor mediaExtractor9;
        OutputSurfaceWithFilter outputSurfaceWithFilter3;
        int i;
        MediaExtractor mediaExtractor10;
        OutputSurfaceWithFilter outputSurfaceWithFilter4;
        OutputSurfaceWithFilter outputSurfaceWithFilter5;
        MediaCodecInfo selectCodec = selectCodec(OUTPUT_VIDEO_MIME_TYPE);
        if (selectCodec != null) {
            MediaCodecInfo selectCodec2 = selectCodec(OUTPUT_AUDIO_MIME_TYPE);
            if (selectCodec2 != null) {
                Exception e = null;
                try {
                    if (this.mCopyVideo) {
                        mediaExtractor2 = createExtractor();
                        try {
                            MediaFormat trackFormat = mediaExtractor2.getTrackFormat(getAndSelectVideoTrackIndex(mediaExtractor2));
                            if (this.mVideoOrientation == 90 || this.mVideoOrientation == 270) {
                                int i2 = this.mHeight;
                                this.mHeight = this.mWidth;
                                this.mWidth = i2;
                            }
                            MediaFormat createVideoFormat = MediaFormat.createVideoFormat(OUTPUT_VIDEO_MIME_TYPE, this.mWidth, this.mHeight);
                            createVideoFormat.setInteger("color-format", OUTPUT_VIDEO_COLOR_FORMAT);
                            try {
                                i = trackFormat.getInteger("bitrate");
                            } catch (Exception e2) {
                                if (UnLog.E) {
                                    UnLog.e(TAG, e2.toString());
                                }
                                i = -1;
                            }
                            if (i <= 0) {
                                i = VideoUtil.getVideoBitRate(this.mWidth, this.mHeight);
                            }
                            createVideoFormat.setInteger("bitrate", i);
                            createVideoFormat.setInteger("frame-rate", 15);
                            createVideoFormat.setInteger("i-frame-interval", 1);
                            if (UnLog.D) {
                                UnLog.d(TAG, "video format: " + createVideoFormat);
                            }
                            if (UnLog.D) {
                                UnLog.d(TAG, "video mVideoOrientation: " + this.mVideoOrientation);
                            }
                            if (UnLog.D) {
                                UnLog.d(TAG, "video bitRate: " + i);
                            }
                            AtomicReference<Surface> atomicReference = new AtomicReference<>();
                            MediaCodec createVideoEncoder = createVideoEncoder(selectCodec, createVideoFormat, atomicReference);
                            try {
                                createVideoEncoder.setVideoScalingMode(1);
                                InputSurface inputSurface2 = new InputSurface(atomicReference.get());
                                try {
                                    inputSurface2.makeCurrent();
                                    OutputSurfaceWithFilter outputSurfaceWithFilter6 = new OutputSurfaceWithFilter(this.mAppContext, this.mFilterType, this.mFilterProgress, this.mWidth, this.mHeight, this.mVideoOrientation);
                                    try {
                                        mediaCodec4 = createVideoDecoder(trackFormat, outputSurfaceWithFilter6.getSurface());
                                        mediaCodec3 = createVideoEncoder;
                                        mediaExtractor3 = mediaExtractor2;
                                        inputSurface = inputSurface2;
                                        outputSurfaceWithFilter2 = outputSurfaceWithFilter6;
                                        mediaExtractor4 = createVideoEncoder;
                                    } catch (Throwable th3) {
                                        th2 = th3;
                                        mediaCodec3 = createVideoEncoder;
                                        inputSurface = inputSurface2;
                                        outputSurfaceWithFilter5 = outputSurfaceWithFilter6;
                                        mediaCodec4 = null;
                                        mediaExtractor10 = mediaCodec4;
                                        outputSurfaceWithFilter4 = outputSurfaceWithFilter5;
                                        mediaCodec2 = mediaExtractor10;
                                        mediaCodec = mediaCodec2;
                                        mediaMuxer = mediaCodec;
                                        outputSurfaceWithFilter3 = outputSurfaceWithFilter4;
                                        mediaExtractor9 = mediaExtractor10;
                                        th = th2;
                                        outputSurfaceWithFilter = outputSurfaceWithFilter3;
                                        mediaExtractor = mediaExtractor9;
                                        if (UnLog.D) {
                                        }
                                        if (mediaExtractor2 != null) {
                                        }
                                        if (mediaExtractor != null) {
                                        }
                                        e = e;
                                        if (mediaCodec4 != null) {
                                        }
                                        if (outputSurfaceWithFilter != null) {
                                        }
                                        if (mediaCodec3 != null) {
                                        }
                                        if (mediaCodec2 != null) {
                                        }
                                        if (mediaCodec != null) {
                                        }
                                        if (mediaMuxer != null) {
                                        }
                                        if (inputSurface != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th4) {
                                    th2 = th4;
                                    mediaCodec3 = createVideoEncoder;
                                    inputSurface = inputSurface2;
                                    outputSurfaceWithFilter5 = null;
                                    mediaCodec4 = null;
                                }
                            } catch (Throwable th5) {
                                th2 = th5;
                                mediaCodec3 = createVideoEncoder;
                                outputSurfaceWithFilter4 = null;
                                mediaCodec4 = null;
                                inputSurface = null;
                                mediaExtractor10 = null;
                            }
                        } catch (Throwable th6) {
                            th = th6;
                            mediaCodec5 = null;
                            mediaCodec4 = mediaCodec5;
                            mediaCodec3 = mediaCodec4;
                            inputSurface = mediaCodec3;
                            MediaExtractor mediaExtractor11 = inputSurface;
                            mediaCodec2 = mediaExtractor11;
                            mediaCodec = mediaCodec2;
                            mediaMuxer = mediaCodec;
                            outputSurfaceWithFilter = mediaCodec5;
                            mediaExtractor = mediaExtractor11;
                            if (UnLog.D) {
                            }
                            if (mediaExtractor2 != null) {
                            }
                            if (mediaExtractor != null) {
                            }
                            e = e;
                            if (mediaCodec4 != null) {
                            }
                            if (outputSurfaceWithFilter != null) {
                            }
                            if (mediaCodec3 != null) {
                            }
                            if (mediaCodec2 != null) {
                            }
                            if (mediaCodec != null) {
                            }
                            if (mediaMuxer != null) {
                            }
                            if (inputSurface != null) {
                            }
                            throw th;
                        }
                    } else {
                        mediaExtractor3 = null;
                        outputSurfaceWithFilter2 = null;
                        mediaCodec4 = null;
                        mediaCodec3 = null;
                        inputSurface = null;
                        mediaExtractor4 = selectCodec;
                    }
                    try {
                        if (this.mCopyAudio) {
                            MediaExtractor createExtractor = createExtractor();
                            try {
                                int andSelectAudioTrackIndex = getAndSelectAudioTrackIndex(createExtractor);
                                if (andSelectAudioTrackIndex == -1) {
                                    this.mCopyAudio = false;
                                    mediaExtractor6 = createExtractor;
                                    mediaCodec2 = null;
                                    mediaCodec = null;
                                    mediaExtractor7 = createExtractor;
                                } else {
                                    MediaFormat trackFormat2 = createExtractor.getTrackFormat(andSelectAudioTrackIndex);
                                    MediaFormat createAudioFormat = MediaFormat.createAudioFormat(OUTPUT_AUDIO_MIME_TYPE, trackFormat2.getInteger("sample-rate"), trackFormat2.getInteger("channel-count"));
                                    createAudioFormat.setInteger("bitrate", OUTPUT_AUDIO_BIT_RATE);
                                    createAudioFormat.setInteger("aac-profile", 2);
                                    MediaCodec createAudioEncoder = createAudioEncoder(selectCodec2, createAudioFormat);
                                    try {
                                        mediaCodec2 = createAudioDecoder(trackFormat2);
                                        mediaExtractor6 = createExtractor;
                                        mediaCodec = createAudioEncoder;
                                        mediaExtractor7 = createExtractor;
                                    } catch (Throwable th7) {
                                        th2 = th7;
                                        mediaExtractor8 = createExtractor;
                                        mediaCodec = createAudioEncoder;
                                        mediaCodec2 = null;
                                        mediaMuxer = null;
                                        mediaExtractor2 = mediaExtractor3;
                                        outputSurfaceWithFilter3 = outputSurfaceWithFilter2;
                                        mediaExtractor9 = mediaExtractor8;
                                        th = th2;
                                        outputSurfaceWithFilter = outputSurfaceWithFilter3;
                                        mediaExtractor = mediaExtractor9;
                                        if (UnLog.D) {
                                            UnLog.d(TAG, "releasing extractor, decoder, encoder, and muxer");
                                        }
                                        if (mediaExtractor2 != null) {
                                            try {
                                                mediaExtractor2.release();
                                            } catch (Exception e3) {
                                                e = e3;
                                                UnLog.e(TAG, "error while releasing videoExtractor", e);
                                            }
                                        }
                                        if (mediaExtractor != null) {
                                            try {
                                                mediaExtractor.release();
                                            } catch (Exception e4) {
                                                e = e4;
                                                UnLog.e(TAG, "error while releasing audioExtractor", e);
                                            }
                                        }
                                        e = e;
                                        if (mediaCodec4 != null) {
                                            try {
                                                mediaCodec4.stop();
                                                mediaCodec4.release();
                                            } catch (Exception e5) {
                                                UnLog.e(TAG, "error while releasing videoDecoder", e5);
                                                if (e == null) {
                                                    e = e5;
                                                }
                                            }
                                        }
                                        if (outputSurfaceWithFilter != null) {
                                            try {
                                                outputSurfaceWithFilter.release();
                                            } catch (Exception e6) {
                                                UnLog.e(TAG, "error while releasing outputSurface", e6);
                                                if (e == null) {
                                                    e = e6;
                                                }
                                            }
                                        }
                                        if (mediaCodec3 != null) {
                                            try {
                                                mediaCodec3.stop();
                                                mediaCodec3.release();
                                            } catch (Exception e7) {
                                                UnLog.e(TAG, "error while releasing videoEncoder", e7);
                                                if (e == null) {
                                                    e = e7;
                                                }
                                            }
                                        }
                                        if (mediaCodec2 != null) {
                                            try {
                                                mediaCodec2.stop();
                                                mediaCodec2.release();
                                            } catch (Exception e8) {
                                                UnLog.e(TAG, "error while releasing audioDecoder", e8);
                                                if (e == null) {
                                                    e = e8;
                                                }
                                            }
                                        }
                                        if (mediaCodec != null) {
                                            try {
                                                mediaCodec.stop();
                                                mediaCodec.release();
                                            } catch (Exception e9) {
                                                UnLog.e(TAG, "error while releasing audioEncoder", e9);
                                                if (e == null) {
                                                    e = e9;
                                                }
                                            }
                                        }
                                        if (mediaMuxer != null) {
                                            try {
                                                mediaMuxer.stop();
                                                mediaMuxer.release();
                                            } catch (Exception e10) {
                                                UnLog.e(TAG, "error while releasing muxer", e10);
                                                if (e == null) {
                                                }
                                            }
                                        }
                                        if (inputSurface != null) {
                                            try {
                                                inputSurface.release();
                                            } catch (Exception e11) {
                                                UnLog.e(TAG, "error while releasing inputSurface", e11);
                                            }
                                        }
                                        throw th;
                                    }
                                }
                            } catch (Throwable th8) {
                                th2 = th8;
                                mediaExtractor8 = mediaExtractor7;
                                mediaCodec2 = null;
                                mediaCodec = null;
                                mediaMuxer = null;
                            }
                        } else {
                            mediaExtractor6 = null;
                            mediaCodec2 = null;
                            mediaCodec = null;
                            mediaExtractor7 = mediaExtractor4;
                        }
                        try {
                            mediaMuxer = createMuxer();
                            try {
                                doExtractDecodeEditEncodeMux(mediaExtractor3, mediaExtractor6, mediaCodec4, mediaCodec3, mediaCodec2, mediaCodec, mediaMuxer, inputSurface, outputSurfaceWithFilter2);
                                if (UnLog.D) {
                                    UnLog.d(TAG, "releasing extractor, decoder, encoder, and muxer");
                                }
                                if (mediaExtractor3 != null) {
                                    try {
                                        mediaExtractor3.release();
                                    } catch (Exception e12) {
                                        e = e12;
                                        UnLog.e(TAG, "error while releasing videoExtractor", e);
                                    }
                                }
                                if (mediaExtractor6 != null) {
                                    try {
                                        mediaExtractor6.release();
                                    } catch (Exception e13) {
                                        e = e13;
                                        UnLog.e(TAG, "error while releasing audioExtractor", e);
                                    }
                                }
                                e = e;
                                if (mediaCodec4 != null) {
                                    try {
                                        mediaCodec4.stop();
                                        mediaCodec4.release();
                                    } catch (Exception e14) {
                                        UnLog.e(TAG, "error while releasing videoDecoder", e14);
                                        if (e == null) {
                                            e = e14;
                                        }
                                    }
                                }
                                if (outputSurfaceWithFilter2 != null) {
                                    try {
                                        outputSurfaceWithFilter2.release();
                                    } catch (Exception e15) {
                                        UnLog.e(TAG, "error while releasing outputSurface", e15);
                                        if (e == null) {
                                            e = e15;
                                        }
                                    }
                                }
                                if (mediaCodec3 != null) {
                                    try {
                                        mediaCodec3.stop();
                                        mediaCodec3.release();
                                    } catch (Exception e16) {
                                        UnLog.e(TAG, "error while releasing videoEncoder", e16);
                                        if (e == null) {
                                            e = e16;
                                        }
                                    }
                                }
                                if (mediaCodec2 != null) {
                                    try {
                                        mediaCodec2.stop();
                                        mediaCodec2.release();
                                    } catch (Exception e17) {
                                        UnLog.e(TAG, "error while releasing audioDecoder", e17);
                                        if (e == null) {
                                            e = e17;
                                        }
                                    }
                                }
                                if (mediaCodec != null) {
                                    try {
                                        mediaCodec.stop();
                                        mediaCodec.release();
                                    } catch (Exception e18) {
                                        UnLog.e(TAG, "error while releasing audioEncoder", e18);
                                        if (e == null) {
                                            e = e18;
                                        }
                                    }
                                }
                                if (mediaMuxer != null) {
                                    try {
                                        mediaMuxer.stop();
                                        mediaMuxer.release();
                                    } catch (Exception e19) {
                                        UnLog.e(TAG, "error while releasing muxer", e19);
                                        if (e == null) {
                                            e = e19;
                                        }
                                    }
                                }
                                if (inputSurface != null) {
                                    try {
                                        inputSurface.release();
                                    } catch (Exception e20) {
                                        UnLog.e(TAG, "error while releasing inputSurface", e20);
                                        if (e == null) {
                                            e = e20;
                                        }
                                    }
                                }
                                if (e != null) {
                                    throw e;
                                }
                            } catch (Throwable th9) {
                                th = th9;
                                mediaExtractor5 = mediaExtractor6;
                                mediaExtractor2 = mediaExtractor3;
                                outputSurfaceWithFilter = outputSurfaceWithFilter2;
                                mediaExtractor = mediaExtractor5;
                                if (UnLog.D) {
                                }
                                if (mediaExtractor2 != null) {
                                }
                                if (mediaExtractor != null) {
                                }
                                e = e;
                                if (mediaCodec4 != null) {
                                }
                                if (outputSurfaceWithFilter != null) {
                                }
                                if (mediaCodec3 != null) {
                                }
                                if (mediaCodec2 != null) {
                                }
                                if (mediaCodec != null) {
                                }
                                if (mediaMuxer != null) {
                                }
                                if (inputSurface != null) {
                                }
                                throw th;
                            }
                        } catch (Throwable th10) {
                            th = th10;
                            mediaMuxer = null;
                            mediaExtractor5 = mediaExtractor6;
                        }
                    } catch (Throwable th11) {
                        th = th11;
                        mediaExtractor5 = null;
                        mediaCodec2 = null;
                        mediaCodec = null;
                        mediaMuxer = null;
                    }
                } catch (Throwable th12) {
                    th = th12;
                    mediaExtractor2 = null;
                    mediaCodec5 = null;
                }
            } else if (UnLog.E) {
                UnLog.e(TAG, "Unable to find an appropriate codec for audio/mp4a-latm");
            }
        } else if (UnLog.E) {
            UnLog.e(TAG, "Unable to find an appropriate codec for video/avc");
        }
    }

    private MediaExtractor createExtractor() throws IOException {
        MediaExtractor mediaExtractor = new MediaExtractor();
        mediaExtractor.setDataSource(this.mPath);
        return mediaExtractor;
    }

    private MediaCodec createVideoDecoder(MediaFormat mediaFormat, Surface surface) throws IOException {
        MediaCodec createDecoderByType = MediaCodec.createDecoderByType(getMimeTypeFor(mediaFormat));
        createDecoderByType.configure(mediaFormat, surface, (MediaCrypto) null, 0);
        createDecoderByType.start();
        return createDecoderByType;
    }

    private MediaCodec createVideoEncoder(MediaCodecInfo mediaCodecInfo, MediaFormat mediaFormat, AtomicReference<Surface> atomicReference) throws IOException {
        MediaCodec createByCodecName = MediaCodec.createByCodecName(mediaCodecInfo.getName());
        createByCodecName.configure(mediaFormat, (Surface) null, (MediaCrypto) null, 1);
        atomicReference.set(createByCodecName.createInputSurface());
        createByCodecName.start();
        return createByCodecName;
    }

    private MediaCodec createAudioDecoder(MediaFormat mediaFormat) throws IOException {
        MediaCodec createDecoderByType = MediaCodec.createDecoderByType(getMimeTypeFor(mediaFormat));
        createDecoderByType.configure(mediaFormat, (Surface) null, (MediaCrypto) null, 0);
        createDecoderByType.start();
        return createDecoderByType;
    }

    private MediaCodec createAudioEncoder(MediaCodecInfo mediaCodecInfo, MediaFormat mediaFormat) throws IOException {
        MediaCodec createByCodecName = MediaCodec.createByCodecName(mediaCodecInfo.getName());
        createByCodecName.configure(mediaFormat, (Surface) null, (MediaCrypto) null, 1);
        createByCodecName.start();
        return createByCodecName;
    }

    private MediaMuxer createMuxer() throws IOException {
        if (TextUtils.isEmpty(this.mOutputFile)) {
            setOutputFile();
        }
        return new MediaMuxer(this.mOutputFile, 0);
    }

    private int getAndSelectVideoTrackIndex(MediaExtractor mediaExtractor) {
        for (int i = 0; i < mediaExtractor.getTrackCount(); i++) {
            if (UnLog.D) {
                String str = TAG;
                UnLog.d(str, "format for track " + i + " is " + getMimeTypeFor(mediaExtractor.getTrackFormat(i)));
            }
            if (isVideoFormat(mediaExtractor.getTrackFormat(i))) {
                mediaExtractor.selectTrack(i);
                return i;
            }
        }
        return -1;
    }

    private int getAndSelectAudioTrackIndex(MediaExtractor mediaExtractor) {
        for (int i = 0; i < mediaExtractor.getTrackCount(); i++) {
            if (UnLog.D) {
                String str = TAG;
                UnLog.d(str, "format for track " + i + " is " + getMimeTypeFor(mediaExtractor.getTrackFormat(i)));
            }
            if (isAudioFormat(mediaExtractor.getTrackFormat(i))) {
                mediaExtractor.selectTrack(i);
                return i;
            }
        }
        return -1;
    }

    /* JADX WARN: Removed duplicated region for block: B:184:0x0551  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x0653 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:272:0x0750 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:328:0x0875  */
    /* JADX WARN: Removed duplicated region for block: B:344:0x08c3 A[ADDED_TO_REGION, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void doExtractDecodeEditEncodeMux(MediaExtractor mediaExtractor, MediaExtractor mediaExtractor2, MediaCodec mediaCodec, MediaCodec mediaCodec2, MediaCodec mediaCodec3, MediaCodec mediaCodec4, MediaMuxer mediaMuxer, InputSurface inputSurface, OutputSurfaceWithFilter outputSurfaceWithFilter) {
        MediaCodec.BufferInfo bufferInfo;
        MediaCodec.BufferInfo bufferInfo2;
        ByteBuffer[] byteBufferArr;
        ByteBuffer[] byteBufferArr2;
        ByteBuffer[] byteBufferArr3;
        ByteBuffer[] byteBufferArr4;
        ByteBuffer[] byteBufferArr5;
        MediaCodec.BufferInfo bufferInfo3;
        MediaCodec.BufferInfo bufferInfo4;
        ByteBuffer[] byteBufferArr6;
        ByteBuffer[] byteBufferArr7;
        MediaCodec.BufferInfo bufferInfo5;
        MediaCodec.BufferInfo bufferInfo6;
        MediaCodec.BufferInfo bufferInfo7;
        MediaCodec.BufferInfo bufferInfo8;
        int i;
        int i2;
        ByteBuffer[] byteBufferArr8;
        MediaCodec.BufferInfo bufferInfo9;
        int i3;
        long j;
        MediaCodec.BufferInfo bufferInfo10;
        MediaCodec.BufferInfo bufferInfo11;
        int i4;
        MediaCodec.BufferInfo bufferInfo12;
        int i5;
        int i6;
        int i7;
        MediaMuxer mediaMuxer2;
        MediaFormat mediaFormat;
        int i8;
        int i9;
        int i10;
        MediaFormat mediaFormat2;
        MediaCodec.BufferInfo bufferInfo13;
        long j2;
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        long j3;
        boolean z5;
        int i11;
        boolean z6;
        boolean z7;
        int i12;
        int i13;
        int i14;
        int i15;
        MediaCodec mediaCodec5 = mediaCodec;
        if (this.mCopyVideo) {
            ByteBuffer[] inputBuffers = mediaCodec.getInputBuffers();
            byteBufferArr3 = mediaCodec.getOutputBuffers();
            byteBufferArr2 = mediaCodec2.getOutputBuffers();
            MediaCodec.BufferInfo bufferInfo14 = new MediaCodec.BufferInfo();
            bufferInfo = new MediaCodec.BufferInfo();
            byteBufferArr = inputBuffers;
            bufferInfo2 = bufferInfo14;
        } else {
            byteBufferArr3 = null;
            byteBufferArr2 = null;
            byteBufferArr = null;
            bufferInfo2 = null;
            bufferInfo = null;
        }
        if (this.mCopyAudio) {
            ByteBuffer[] inputBuffers2 = mediaCodec3.getInputBuffers();
            byteBufferArr6 = mediaCodec3.getOutputBuffers();
            ByteBuffer[] inputBuffers3 = mediaCodec4.getInputBuffers();
            ByteBuffer[] outputBuffers = mediaCodec4.getOutputBuffers();
            MediaCodec.BufferInfo bufferInfo15 = new MediaCodec.BufferInfo();
            bufferInfo4 = new MediaCodec.BufferInfo();
            byteBufferArr5 = inputBuffers2;
            byteBufferArr7 = outputBuffers;
            bufferInfo3 = bufferInfo15;
            byteBufferArr4 = inputBuffers3;
        } else {
            byteBufferArr7 = null;
            byteBufferArr6 = null;
            bufferInfo4 = null;
            bufferInfo3 = null;
            byteBufferArr5 = null;
            byteBufferArr4 = null;
        }
        ByteBuffer[] byteBufferArr9 = byteBufferArr7;
        MediaFormat mediaFormat3 = null;
        MediaFormat mediaFormat4 = null;
        ByteBuffer[] byteBufferArr10 = byteBufferArr2;
        ByteBuffer[] byteBufferArr11 = byteBufferArr6;
        long j4 = 0;
        ByteBuffer[] byteBufferArr12 = byteBufferArr3;
        int i16 = -1;
        int i17 = -1;
        int i18 = -1;
        boolean z8 = false;
        boolean z9 = false;
        int i19 = 0;
        boolean z10 = false;
        int i20 = 0;
        boolean z11 = false;
        int i21 = 0;
        int i22 = 0;
        boolean z12 = false;
        int i23 = 0;
        boolean z13 = false;
        int i24 = 0;
        boolean z14 = false;
        while (true) {
            if ((this.mCopyVideo && !z8) || (this.mCopyAudio && !z9)) {
                if (UnLog.D) {
                    bufferInfo6 = bufferInfo4;
                    bufferInfo5 = bufferInfo3;
                    UnLog.d(TAG, String.format("loop: V(%b){extracted:%d(done:%b) decoded:%d(done:%b) encoded:%d(done:%b)} A(%b){extracted:%d(done:%b) decoded:%d(done:%b) encoded:%d(done:%b) pending:%d} muxing:%b(V:%d,A:%d)", Boolean.valueOf(this.mCopyVideo), Integer.valueOf(i19), Boolean.valueOf(z10), Integer.valueOf(i20), Boolean.valueOf(z11), Integer.valueOf(i21), Boolean.valueOf(z8), Boolean.valueOf(this.mCopyAudio), Integer.valueOf(i22), Boolean.valueOf(z12), Integer.valueOf(i23), Boolean.valueOf(z13), Integer.valueOf(i24), Boolean.valueOf(z9), Integer.valueOf(i18), Boolean.valueOf(z14), Integer.valueOf(i17), Integer.valueOf(i16)));
                } else {
                    bufferInfo6 = bufferInfo4;
                    bufferInfo5 = bufferInfo3;
                }
                if (!this.mCopyVideo || z10 || (mediaFormat3 != null && !z14)) {
                    i3 = i16;
                    i = i17;
                    i2 = i18;
                    byteBufferArr8 = byteBufferArr;
                    bufferInfo9 = bufferInfo2;
                    bufferInfo8 = bufferInfo6;
                    bufferInfo7 = bufferInfo5;
                    j = 10000;
                } else {
                    int dequeueInputBuffer = mediaCodec5.dequeueInputBuffer(10000);
                    if (dequeueInputBuffer >= 0) {
                        if (UnLog.D) {
                            UnLog.d(TAG, "video decoder: returned input buffer: " + dequeueInputBuffer);
                        }
                        int readSampleData = mediaExtractor.readSampleData(byteBufferArr[dequeueInputBuffer], 0);
                        long sampleTime = mediaExtractor.getSampleTime();
                        if (UnLog.D) {
                            String str = TAG;
                            i14 = i16;
                            StringBuilder sb = new StringBuilder();
                            i13 = i18;
                            sb.append("video extractor: returned buffer of size ");
                            sb.append(readSampleData);
                            UnLog.d(str, sb.toString());
                            UnLog.d(TAG, "video extractor: returned buffer for time " + sampleTime);
                        } else {
                            i14 = i16;
                            i13 = i18;
                        }
                        if (readSampleData >= 0) {
                            byteBufferArr8 = byteBufferArr;
                            i3 = i14;
                            i = i17;
                            bufferInfo9 = bufferInfo2;
                            bufferInfo8 = bufferInfo6;
                            i2 = i13;
                            j = 10000;
                            i15 = readSampleData;
                            bufferInfo7 = bufferInfo5;
                            mediaCodec.queueInputBuffer(dequeueInputBuffer, 0, readSampleData, sampleTime, mediaExtractor.getSampleFlags());
                        } else {
                            byteBufferArr8 = byteBufferArr;
                            bufferInfo9 = bufferInfo2;
                            i = i17;
                            bufferInfo8 = bufferInfo6;
                            bufferInfo7 = bufferInfo5;
                            i3 = i14;
                            i2 = i13;
                            j = 10000;
                            i15 = readSampleData;
                        }
                        mediaExtractor.advance();
                        if (i15 < 0) {
                            if (UnLog.D) {
                                UnLog.d(TAG, "video extractor: EOS");
                            }
                            mediaCodec.queueInputBuffer(dequeueInputBuffer, 0, 0, 0, 4);
                            z10 = true;
                        }
                        i19++;
                    } else if (UnLog.D) {
                        UnLog.d(TAG, "no video decoder input buffer");
                        i3 = i16;
                        i = i17;
                        i2 = i18;
                        byteBufferArr8 = byteBufferArr;
                        bufferInfo9 = bufferInfo2;
                        bufferInfo8 = bufferInfo6;
                        bufferInfo7 = bufferInfo5;
                        j = 10000;
                    } else {
                        i3 = i16;
                        i = i17;
                        i2 = i18;
                        byteBufferArr8 = byteBufferArr;
                        bufferInfo9 = bufferInfo2;
                        bufferInfo8 = bufferInfo6;
                        bufferInfo7 = bufferInfo5;
                        j = 10000;
                    }
                }
                if (this.mCopyAudio && !z12 && (mediaFormat4 == null || z14)) {
                    int dequeueInputBuffer2 = mediaCodec3.dequeueInputBuffer(j);
                    if (dequeueInputBuffer2 >= 0) {
                        if (UnLog.D) {
                            UnLog.d(TAG, "audio decoder: returned input buffer: " + dequeueInputBuffer2);
                        }
                        int readSampleData2 = mediaExtractor2.readSampleData(byteBufferArr5[dequeueInputBuffer2], 0);
                        long sampleTime2 = mediaExtractor2.getSampleTime();
                        if (UnLog.D) {
                            UnLog.d(TAG, "audio extractor: returned buffer of size " + readSampleData2);
                            UnLog.d(TAG, "audio extractor: returned buffer for time " + sampleTime2);
                        }
                        if (readSampleData2 >= 0) {
                            i12 = readSampleData2;
                            mediaCodec3.queueInputBuffer(dequeueInputBuffer2, 0, readSampleData2, sampleTime2, mediaExtractor2.getSampleFlags());
                        } else {
                            i12 = readSampleData2;
                        }
                        mediaExtractor2.advance();
                        if (i12 < 0) {
                            if (UnLog.D) {
                                UnLog.d(TAG, "audio extractor: EOS");
                            }
                            mediaCodec3.queueInputBuffer(dequeueInputBuffer2, 0, 0, 0, 4);
                            z12 = true;
                        }
                        i22++;
                    } else if (UnLog.D) {
                        UnLog.d(TAG, "no audio decoder input buffer");
                    }
                }
                if (!this.mCopyVideo || z11 || (mediaFormat3 != null && !z14)) {
                    bufferInfo10 = bufferInfo9;
                } else {
                    bufferInfo10 = bufferInfo9;
                    int dequeueOutputBuffer = mediaCodec5.dequeueOutputBuffer(bufferInfo10, j);
                    if (dequeueOutputBuffer == -1) {
                        if (UnLog.D) {
                            UnLog.d(TAG, "no video decoder output buffer");
                        }
                    } else if (dequeueOutputBuffer == -3) {
                        if (UnLog.D) {
                            UnLog.d(TAG, "video decoder: output buffers changed");
                        }
                        byteBufferArr12 = mediaCodec.getOutputBuffers();
                    } else if (dequeueOutputBuffer == -2) {
                        MediaFormat outputFormat = mediaCodec.getOutputFormat();
                        if (UnLog.D) {
                            UnLog.d(TAG, "video decoder: output format changed: " + outputFormat);
                        }
                    } else {
                        if (UnLog.D) {
                            UnLog.d(TAG, "video decoder: returned output buffer: " + dequeueOutputBuffer);
                            UnLog.d(TAG, "video decoder: returned buffer of size " + bufferInfo10.size);
                            UnLog.d(TAG, "video decoder: returned buffer of flags " + bufferInfo10.flags);
                        }
                        ByteBuffer byteBuffer = byteBufferArr12[dequeueOutputBuffer];
                        if ((bufferInfo10.flags & 2) != 0) {
                            if (UnLog.D) {
                                UnLog.d(TAG, "video decoder: codec config buffer");
                                z7 = false;
                            } else {
                                z7 = false;
                            }
                            mediaCodec5.releaseOutputBuffer(dequeueOutputBuffer, z7);
                        } else {
                            if (UnLog.D) {
                                UnLog.d(TAG, "video decoder: returned buffer for time " + bufferInfo10.presentationTimeUs);
                            }
                            boolean z15 = bufferInfo10.size != 0;
                            mediaCodec5.releaseOutputBuffer(dequeueOutputBuffer, z15);
                            if (z15) {
                                if (UnLog.D) {
                                    UnLog.d(TAG, "output surface: await new image");
                                }
                                outputSurfaceWithFilter.awaitNewImage();
                                if (UnLog.D) {
                                    UnLog.d(TAG, "output surface: draw image");
                                }
                                outputSurfaceWithFilter.drawImage();
                                inputSurface.setPresentationTime(bufferInfo10.presentationTimeUs * 1000);
                                if (UnLog.D) {
                                    UnLog.d(TAG, "input surface: swap buffers");
                                }
                                inputSurface.swapBuffers();
                                if (UnLog.D) {
                                    UnLog.d(TAG, "video encoder: notified of new frame");
                                }
                            }
                            if ((bufferInfo10.flags & 4) != 0) {
                                if (UnLog.D) {
                                    UnLog.d(TAG, "video decoder: EOS");
                                }
                                mediaCodec2.signalEndOfInputStream();
                                z11 = true;
                            }
                            i20++;
                        }
                    }
                }
                if (!this.mCopyAudio || z13) {
                    i11 = i2;
                } else {
                    i11 = i2;
                    if (i11 == -1 && (mediaFormat4 == null || z14)) {
                        bufferInfo11 = bufferInfo7;
                        int dequeueOutputBuffer2 = mediaCodec3.dequeueOutputBuffer(bufferInfo11, 10000);
                        if (dequeueOutputBuffer2 != -1) {
                            if (dequeueOutputBuffer2 == -3) {
                                if (UnLog.D) {
                                    UnLog.d(TAG, "audio decoder: output buffers changed");
                                }
                                byteBufferArr11 = mediaCodec3.getOutputBuffers();
                                i4 = i11;
                            } else if (dequeueOutputBuffer2 == -2) {
                                MediaFormat outputFormat2 = mediaCodec3.getOutputFormat();
                                if (UnLog.D) {
                                    UnLog.d(TAG, "audio decoder: output format changed: " + outputFormat2);
                                }
                            } else {
                                if (UnLog.D) {
                                    UnLog.d(TAG, "audio decoder: returned output buffer: " + dequeueOutputBuffer2);
                                }
                                if (UnLog.D) {
                                    UnLog.d(TAG, "audio decoder: returned buffer of size " + bufferInfo11.size);
                                }
                                ByteBuffer byteBuffer2 = byteBufferArr11[dequeueOutputBuffer2];
                                if ((bufferInfo11.flags & 2) != 0) {
                                    if (UnLog.D) {
                                        UnLog.d(TAG, "audio decoder: codec config buffer");
                                        z6 = false;
                                    } else {
                                        z6 = false;
                                    }
                                    mediaCodec3.releaseOutputBuffer(dequeueOutputBuffer2, z6);
                                } else {
                                    if (UnLog.D) {
                                        UnLog.d(TAG, "audio decoder: returned buffer for time " + bufferInfo11.presentationTimeUs);
                                    }
                                    if (UnLog.D) {
                                        UnLog.d(TAG, "audio decoder: output buffer is now pending: " + i11);
                                    }
                                    i23++;
                                    i4 = dequeueOutputBuffer2;
                                }
                            }
                            if (this.mCopyAudio || i4 == -1) {
                                bufferInfo12 = bufferInfo10;
                                i5 = -3;
                            } else {
                                if (UnLog.D) {
                                    UnLog.d(TAG, "audio decoder: attempting to process pending buffer: " + i4);
                                    j3 = 10000;
                                } else {
                                    j3 = 10000;
                                }
                                int dequeueInputBuffer3 = mediaCodec4.dequeueInputBuffer(j3);
                                if (dequeueInputBuffer3 != -1) {
                                    if (UnLog.D) {
                                        UnLog.d(TAG, "audio encoder: returned input buffer: " + dequeueInputBuffer3);
                                    }
                                    ByteBuffer byteBuffer3 = byteBufferArr4[dequeueInputBuffer3];
                                    int i25 = bufferInfo11.size;
                                    long j5 = bufferInfo11.presentationTimeUs;
                                    if (UnLog.D) {
                                        String str2 = TAG;
                                        StringBuilder sb2 = new StringBuilder();
                                        bufferInfo12 = bufferInfo10;
                                        sb2.append("audio decoder: processing pending buffer: ");
                                        sb2.append(i4);
                                        UnLog.d(str2, sb2.toString());
                                    } else {
                                        bufferInfo12 = bufferInfo10;
                                    }
                                    if (UnLog.D) {
                                        UnLog.d(TAG, "audio decoder: pending buffer of size " + i25);
                                        UnLog.d(TAG, "audio decoder: pending buffer for time " + j5);
                                    }
                                    if (i25 >= 0) {
                                        ByteBuffer duplicate = byteBufferArr11[i4].duplicate();
                                        duplicate.position(bufferInfo11.offset);
                                        byteBuffer3.position(0);
                                        int limit = byteBuffer3.limit();
                                        if (i25 <= limit) {
                                            limit = i25;
                                        }
                                        duplicate.limit(bufferInfo11.offset + limit);
                                        byteBuffer3.put(duplicate);
                                        i5 = -3;
                                        mediaCodec4.queueInputBuffer(dequeueInputBuffer3, 0, i25, j5, bufferInfo11.flags);
                                        z5 = false;
                                    } else {
                                        i5 = -3;
                                        z5 = false;
                                    }
                                    mediaCodec3.releaseOutputBuffer(i4, z5);
                                    if ((bufferInfo11.flags & 4) != 0) {
                                        if (UnLog.D) {
                                            UnLog.d(TAG, "audio decoder: EOS");
                                        }
                                        i6 = -1;
                                        z13 = true;
                                    } else {
                                        i6 = -1;
                                    }
                                    if (this.mCopyVideo || z8 || (mediaFormat3 != null && !z14)) {
                                        i7 = i;
                                        mediaMuxer2 = mediaMuxer;
                                    } else {
                                        int dequeueOutputBuffer3 = mediaCodec2.dequeueOutputBuffer(bufferInfo, 10000);
                                        if (dequeueOutputBuffer3 != -1) {
                                            if (dequeueOutputBuffer3 == i5) {
                                                if (UnLog.D) {
                                                    UnLog.d(TAG, "video encoder: output buffers changed");
                                                }
                                                byteBufferArr10 = mediaCodec2.getOutputBuffers();
                                                mediaFormat = mediaFormat3;
                                                i7 = i;
                                                mediaMuxer2 = mediaMuxer;
                                            } else if (dequeueOutputBuffer3 == -2) {
                                                if (UnLog.D) {
                                                    UnLog.d(TAG, "video encoder: output format changed");
                                                }
                                                mediaFormat = mediaCodec2.getOutputFormat();
                                                i7 = i;
                                                mediaMuxer2 = mediaMuxer;
                                            } else {
                                                if (UnLog.D) {
                                                    UnLog.d(TAG, "video encoder: returned output buffer: " + dequeueOutputBuffer3);
                                                    UnLog.d(TAG, "video encoder: returned buffer of size " + bufferInfo.size);
                                                }
                                                ByteBuffer byteBuffer4 = byteBufferArr10[dequeueOutputBuffer3];
                                                if ((bufferInfo.flags & 2) != 0) {
                                                    if (UnLog.D) {
                                                        UnLog.d(TAG, "video encoder: codec config buffer");
                                                        z4 = false;
                                                    } else {
                                                        z4 = false;
                                                    }
                                                    mediaCodec2.releaseOutputBuffer(dequeueOutputBuffer3, z4);
                                                    i7 = i;
                                                    mediaMuxer2 = mediaMuxer;
                                                } else {
                                                    if (UnLog.D) {
                                                        UnLog.d(TAG, "video encoder: returned buffer for time " + bufferInfo.presentationTimeUs);
                                                    }
                                                    if (bufferInfo.size != 0) {
                                                        i7 = i;
                                                        mediaMuxer2 = mediaMuxer;
                                                        mediaMuxer2.writeSampleData(i7, byteBuffer4, bufferInfo);
                                                    } else {
                                                        i7 = i;
                                                        mediaMuxer2 = mediaMuxer;
                                                    }
                                                    if ((bufferInfo.flags & 4) != 0) {
                                                        if (UnLog.D) {
                                                            UnLog.d(TAG, "video encoder: EOS");
                                                        }
                                                        z3 = false;
                                                        z8 = true;
                                                    } else {
                                                        z3 = false;
                                                    }
                                                    mediaCodec2.releaseOutputBuffer(dequeueOutputBuffer3, z3);
                                                    i21++;
                                                    mediaFormat = mediaFormat3;
                                                }
                                            }
                                            if (this.mCopyAudio || z9 || (mediaFormat4 != null && !z14)) {
                                                i8 = i7;
                                                i10 = i6;
                                                i9 = i3;
                                                bufferInfo13 = bufferInfo8;
                                            } else {
                                                bufferInfo13 = bufferInfo8;
                                                int dequeueOutputBuffer4 = mediaCodec4.dequeueOutputBuffer(bufferInfo13, 10000);
                                                if (dequeueOutputBuffer4 != -1) {
                                                    if (dequeueOutputBuffer4 == i5) {
                                                        if (UnLog.D) {
                                                            UnLog.d(TAG, "audio encoder: output buffers changed");
                                                        }
                                                        byteBufferArr9 = mediaCodec4.getOutputBuffers();
                                                        i8 = i7;
                                                        i10 = i6;
                                                        i9 = i3;
                                                        mediaFormat2 = mediaFormat4;
                                                    } else if (dequeueOutputBuffer4 == -2) {
                                                        if (UnLog.D) {
                                                            UnLog.d(TAG, "audio encoder: output format changed");
                                                        }
                                                        mediaFormat2 = mediaCodec4.getOutputFormat();
                                                        i8 = i7;
                                                        i10 = i6;
                                                        i9 = i3;
                                                    } else {
                                                        if (UnLog.D) {
                                                            UnLog.d(TAG, "audio encoder: returned output buffer: " + dequeueOutputBuffer4);
                                                            UnLog.d(TAG, "audio encoder: returned buffer of size " + bufferInfo13.size);
                                                        }
                                                        ByteBuffer byteBuffer5 = byteBufferArr9[dequeueOutputBuffer4];
                                                        if ((bufferInfo13.flags & 2) != 0) {
                                                            if (UnLog.D) {
                                                                UnLog.d(TAG, "audio encoder: codec config buffer");
                                                                z2 = false;
                                                            } else {
                                                                z2 = false;
                                                            }
                                                            mediaCodec4.releaseOutputBuffer(dequeueOutputBuffer4, z2);
                                                            i8 = i7;
                                                            i10 = i6;
                                                            i9 = i3;
                                                        } else {
                                                            if (UnLog.D) {
                                                                String str3 = TAG;
                                                                StringBuilder sb3 = new StringBuilder();
                                                                sb3.append("audio encoder: returned buffer for time ");
                                                                i8 = i7;
                                                                i10 = i6;
                                                                sb3.append(bufferInfo13.presentationTimeUs);
                                                                UnLog.d(str3, sb3.toString());
                                                            } else {
                                                                i8 = i7;
                                                                i10 = i6;
                                                            }
                                                            if (j4 == 0) {
                                                                j2 = bufferInfo13.presentationTimeUs;
                                                            } else {
                                                                if (j4 > bufferInfo13.presentationTimeUs) {
                                                                    bufferInfo13.presentationTimeUs = j4 + 1;
                                                                }
                                                                j2 = bufferInfo13.presentationTimeUs;
                                                            }
                                                            if (bufferInfo13.size != 0) {
                                                                i9 = i3;
                                                                mediaMuxer2.writeSampleData(i9, byteBuffer5, bufferInfo13);
                                                            } else {
                                                                i9 = i3;
                                                            }
                                                            if ((bufferInfo13.flags & 4) != 0) {
                                                                if (UnLog.D) {
                                                                    UnLog.d(TAG, "audio encoder: EOS");
                                                                }
                                                                z = false;
                                                                z9 = true;
                                                            } else {
                                                                z = false;
                                                            }
                                                            mediaCodec4.releaseOutputBuffer(dequeueOutputBuffer4, z);
                                                            i24++;
                                                            j4 = j2;
                                                            mediaFormat2 = mediaFormat4;
                                                        }
                                                    }
                                                    if (!z14 || ((this.mCopyAudio && mediaFormat2 == null) || (this.mCopyVideo && mediaFormat == null))) {
                                                        mediaFormat3 = mediaFormat;
                                                        mediaFormat4 = mediaFormat2;
                                                        i18 = i10;
                                                        bufferInfo3 = bufferInfo11;
                                                        bufferInfo2 = bufferInfo12;
                                                        byteBufferArr = byteBufferArr8;
                                                        i17 = i8;
                                                        mediaCodec5 = mediaCodec;
                                                        bufferInfo4 = bufferInfo13;
                                                        i16 = i9;
                                                    } else {
                                                        if (this.mCopyVideo) {
                                                            UnLog.d(TAG, "muxer: adding video track.");
                                                            i17 = mediaMuxer2.addTrack(mediaFormat);
                                                        } else {
                                                            i17 = i8;
                                                        }
                                                        if (this.mCopyAudio) {
                                                            UnLog.d(TAG, "muxer: adding audio track.");
                                                            i9 = mediaMuxer2.addTrack(mediaFormat2);
                                                        }
                                                        UnLog.d(TAG, "muxer: starting");
                                                        mediaMuxer.start();
                                                        mediaFormat3 = mediaFormat;
                                                        mediaFormat4 = mediaFormat2;
                                                        i18 = i10;
                                                        bufferInfo3 = bufferInfo11;
                                                        bufferInfo2 = bufferInfo12;
                                                        byteBufferArr = byteBufferArr8;
                                                        mediaCodec5 = mediaCodec;
                                                        z14 = true;
                                                        bufferInfo4 = bufferInfo13;
                                                        i16 = i9;
                                                    }
                                                } else if (UnLog.D) {
                                                    UnLog.d(TAG, "no audio encoder output buffer");
                                                    i8 = i7;
                                                    i10 = i6;
                                                    i9 = i3;
                                                } else {
                                                    i8 = i7;
                                                    i10 = i6;
                                                    i9 = i3;
                                                }
                                            }
                                            mediaFormat2 = mediaFormat4;
                                            if (!z14) {
                                            }
                                            mediaFormat3 = mediaFormat;
                                            mediaFormat4 = mediaFormat2;
                                            i18 = i10;
                                            bufferInfo3 = bufferInfo11;
                                            bufferInfo2 = bufferInfo12;
                                            byteBufferArr = byteBufferArr8;
                                            i17 = i8;
                                            mediaCodec5 = mediaCodec;
                                            bufferInfo4 = bufferInfo13;
                                            i16 = i9;
                                        } else if (UnLog.D) {
                                            UnLog.d(TAG, "no video encoder output buffer");
                                            i7 = i;
                                            mediaMuxer2 = mediaMuxer;
                                        } else {
                                            i7 = i;
                                            mediaMuxer2 = mediaMuxer;
                                        }
                                    }
                                    mediaFormat = mediaFormat3;
                                    if (this.mCopyAudio) {
                                    }
                                    i8 = i7;
                                    i10 = i6;
                                    i9 = i3;
                                    bufferInfo13 = bufferInfo8;
                                    mediaFormat2 = mediaFormat4;
                                    if (!z14) {
                                    }
                                    mediaFormat3 = mediaFormat;
                                    mediaFormat4 = mediaFormat2;
                                    i18 = i10;
                                    bufferInfo3 = bufferInfo11;
                                    bufferInfo2 = bufferInfo12;
                                    byteBufferArr = byteBufferArr8;
                                    i17 = i8;
                                    mediaCodec5 = mediaCodec;
                                    bufferInfo4 = bufferInfo13;
                                    i16 = i9;
                                } else if (UnLog.D) {
                                    UnLog.d(TAG, "no audio encoder input buffer");
                                    bufferInfo12 = bufferInfo10;
                                    i5 = -3;
                                } else {
                                    bufferInfo12 = bufferInfo10;
                                    i5 = -3;
                                }
                            }
                            i6 = i4;
                            if (this.mCopyVideo) {
                            }
                            i7 = i;
                            mediaMuxer2 = mediaMuxer;
                            mediaFormat = mediaFormat3;
                            if (this.mCopyAudio) {
                            }
                            i8 = i7;
                            i10 = i6;
                            i9 = i3;
                            bufferInfo13 = bufferInfo8;
                            mediaFormat2 = mediaFormat4;
                            if (!z14) {
                            }
                            mediaFormat3 = mediaFormat;
                            mediaFormat4 = mediaFormat2;
                            i18 = i10;
                            bufferInfo3 = bufferInfo11;
                            bufferInfo2 = bufferInfo12;
                            byteBufferArr = byteBufferArr8;
                            i17 = i8;
                            mediaCodec5 = mediaCodec;
                            bufferInfo4 = bufferInfo13;
                            i16 = i9;
                        } else if (UnLog.D) {
                            UnLog.d(TAG, "no audio decoder output buffer");
                        }
                        i4 = i11;
                        if (this.mCopyAudio) {
                        }
                        bufferInfo12 = bufferInfo10;
                        i5 = -3;
                        i6 = i4;
                        if (this.mCopyVideo) {
                        }
                        i7 = i;
                        mediaMuxer2 = mediaMuxer;
                        mediaFormat = mediaFormat3;
                        if (this.mCopyAudio) {
                        }
                        i8 = i7;
                        i10 = i6;
                        i9 = i3;
                        bufferInfo13 = bufferInfo8;
                        mediaFormat2 = mediaFormat4;
                        if (!z14) {
                        }
                        mediaFormat3 = mediaFormat;
                        mediaFormat4 = mediaFormat2;
                        i18 = i10;
                        bufferInfo3 = bufferInfo11;
                        bufferInfo2 = bufferInfo12;
                        byteBufferArr = byteBufferArr8;
                        i17 = i8;
                        mediaCodec5 = mediaCodec;
                        bufferInfo4 = bufferInfo13;
                        i16 = i9;
                    }
                }
                bufferInfo11 = bufferInfo7;
                i4 = i11;
                if (this.mCopyAudio) {
                }
                bufferInfo12 = bufferInfo10;
                i5 = -3;
                i6 = i4;
                if (this.mCopyVideo) {
                }
                i7 = i;
                mediaMuxer2 = mediaMuxer;
                mediaFormat = mediaFormat3;
                if (this.mCopyAudio) {
                }
                i8 = i7;
                i10 = i6;
                i9 = i3;
                bufferInfo13 = bufferInfo8;
                mediaFormat2 = mediaFormat4;
                if (!z14) {
                }
                mediaFormat3 = mediaFormat;
                mediaFormat4 = mediaFormat2;
                i18 = i10;
                bufferInfo3 = bufferInfo11;
                bufferInfo2 = bufferInfo12;
                byteBufferArr = byteBufferArr8;
                i17 = i8;
                mediaCodec5 = mediaCodec;
                bufferInfo4 = bufferInfo13;
                i16 = i9;
            } else {
                return;
            }
        }
    }

    private static boolean isVideoFormat(MediaFormat mediaFormat) {
        return getMimeTypeFor(mediaFormat).startsWith("video/");
    }

    private static boolean isAudioFormat(MediaFormat mediaFormat) {
        return getMimeTypeFor(mediaFormat).startsWith("audio/");
    }

    private static String getMimeTypeFor(MediaFormat mediaFormat) {
        return mediaFormat.getString("mime");
    }

    private static MediaCodecInfo selectCodec(String str) {
        int codecCount = MediaCodecList.getCodecCount();
        for (int i = 0; i < codecCount; i++) {
            MediaCodecInfo codecInfoAt = MediaCodecList.getCodecInfoAt(i);
            if (codecInfoAt.isEncoder()) {
                for (String str2 : codecInfoAt.getSupportedTypes()) {
                    if (str2.equalsIgnoreCase(str)) {
                        return codecInfoAt;
                    }
                }
                continue;
            }
        }
        return null;
    }

    public void setOutputFile(String str) {
        this.mOutputFile = str;
    }

    public void stopThread() {
        HandlerThread handlerThread = this.handlerThread;
        if (handlerThread != null) {
            handlerThread.getLooper().quit();
            this.handlerThread = null;
        }
    }

    public void setHandlerThread(HandlerThread handlerThread) {
        this.handlerThread = handlerThread;
    }

    public void setVideoOrientation(int i) {
        this.mVideoOrientation = i;
    }
}
