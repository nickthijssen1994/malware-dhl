package com.p051jd.lib.unification.album.adapter;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.recyclerview.widget.RecyclerView;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.widget.image.UnNetImageView;
import com.p051jd.lib.p083un.utils.UnStringUtils;
import com.p051jd.lib.unification.album.entity.LocalMedia;
import com.p051jd.lib.unification.album.utils.AlbumUtils;
import com.p051jd.lib.unification.album.utils.PictureMimeType;
import java.util.ArrayList;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.album.adapter.PictureAlbumAdapter */
/* loaded from: classes.dex */
public class PictureAlbumAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
    public static int HEAD_COUNT = 0;
    public static final int TYPE_CAMERA = 2;
    public static final int TYPE_PICTURE = 1;
    private ClickPictureCallBack callBack;
    private int cameraOrVideoAction;
    private Context mContext;
    private LayoutInflater mInflater;
    private ArrayList<LocalMedia> mLocalMedias;
    private ArrayList<LocalMedia> mSelectImages;
    private int needSelectCount;
    private OnItemClickListener onItemClickListener;
    private String source;
    private String videoMaxDuration;
    private String videoMinDuration;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.adapter.PictureAlbumAdapter$ClickPictureCallBack */
    /* loaded from: classes.dex */
    public interface ClickPictureCallBack {
        void onSelectChange(ArrayList<LocalMedia> arrayList);

        void openCamera();

        void openVideo();
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.adapter.PictureAlbumAdapter$OnItemClickListener */
    /* loaded from: classes.dex */
    public interface OnItemClickListener {
        void onPictureItemClick(ArrayList<LocalMedia> arrayList, ArrayList<LocalMedia> arrayList2, int i, View view);
    }

    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {
        this.onItemClickListener = onItemClickListener;
    }

    public void setCallBack(ClickPictureCallBack clickPictureCallBack) {
        this.callBack = clickPictureCallBack;
    }

    public PictureAlbumAdapter(Context context, int i, String str, String str2, String str3, ArrayList<LocalMedia> arrayList, ArrayList<LocalMedia> arrayList2, int i2) {
        this.videoMinDuration = "";
        this.videoMaxDuration = "";
        this.cameraOrVideoAction = 0;
        this.needSelectCount = 0;
        this.mContext = context;
        this.cameraOrVideoAction = i;
        this.source = str;
        this.videoMinDuration = str2;
        this.videoMaxDuration = str3;
        this.mInflater = LayoutInflater.from(context);
        this.mLocalMedias = arrayList;
        this.mSelectImages = arrayList2;
        this.needSelectCount = i2;
    }

    public void setData(ArrayList<LocalMedia> arrayList, ArrayList<LocalMedia> arrayList2) {
        this.mLocalMedias = arrayList;
        this.mSelectImages = arrayList2;
        notifyDataSetChanged();
    }

    public int getItemViewType(int i) {
        return (this.cameraOrVideoAction != 0 && i == 0) ? 2 : 1;
    }

    public int getItemCount() {
        if (this.cameraOrVideoAction == 0) {
            HEAD_COUNT = 0;
            ArrayList<LocalMedia> arrayList = this.mLocalMedias;
            if (arrayList == null || arrayList.size() == 0) {
                return 0;
            }
            return this.mLocalMedias.size();
        }
        HEAD_COUNT = 1;
        ArrayList<LocalMedia> arrayList2 = this.mLocalMedias;
        if (arrayList2 == null || arrayList2.size() == 0) {
            return 1;
        }
        return this.mLocalMedias.size() + 1;
    }

    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        if (i == 2) {
            return new HeaderViewHolder(this.mInflater.inflate(R.layout.lib_uni_album_camera_item, (ViewGroup) null));
        }
        return new AlbumViewHolder(this.mInflater.inflate(R.layout.lib_uni_album_item_photo_album, (ViewGroup) null));
    }

    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, final int i) {
        int i2;
        int itemViewType = getItemViewType(i);
        if (itemViewType == 2) {
            if (viewHolder instanceof HeaderViewHolder) {
                HeaderViewHolder headerViewHolder = (HeaderViewHolder) viewHolder;
                int i3 = this.cameraOrVideoAction;
                if (i3 == 1 || i3 == 3) {
                    headerViewHolder.imageView.setImageResource(R.drawable.lib_uni_album_shoot_video_icon_g);
                } else {
                    headerViewHolder.imageView.setImageResource(R.drawable.lib_uni_album_take_photos_icon_g);
                }
                headerViewHolder.itemView.setOnClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.album.adapter.PictureAlbumAdapter.1
                    @Override // android.view.View.OnClickListener
                    public void onClick(View view) {
                        if (!PictureAlbumAdapter.this.checkSelectCount() || PictureAlbumAdapter.this.callBack == null) {
                            return;
                        }
                        if (PictureAlbumAdapter.this.cameraOrVideoAction == 3) {
                            PictureAlbumAdapter.this.callBack.openVideo();
                        } else {
                            PictureAlbumAdapter.this.callBack.openCamera();
                        }
                    }
                });
            }
        } else if (itemViewType == 1 && (viewHolder instanceof AlbumViewHolder)) {
            final AlbumViewHolder albumViewHolder = (AlbumViewHolder) viewHolder;
            Context context = this.mContext;
            if (context instanceof Activity) {
                i2 = DpiUtil.getAppWidth((Activity) context);
            } else {
                i2 = DpiUtil.getWidth(context);
            }
            int i4 = (i2 - 5) / 4;
            if (i4 > 0 && (albumViewHolder.image.getLayoutParams() instanceof RelativeLayout.LayoutParams)) {
                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) albumViewHolder.image.getLayoutParams();
                layoutParams.width = i4;
                layoutParams.height = i4;
                albumViewHolder.image.setLayoutParams(layoutParams);
            }
            LocalMedia localMedia = this.mLocalMedias.get(i - HEAD_COUNT);
            ArrayList<LocalMedia> arrayList = this.mSelectImages;
            int i5 = 0;
            if (arrayList == null || arrayList.size() <= 0) {
                localMedia.setPicked(false);
            } else if (this.mSelectImages.contains(localMedia)) {
                localMedia.setPicked(true);
            } else {
                localMedia.setPicked(false);
            }
            if (!PictureMimeType.isVideo(localMedia.getPictureType())) {
                albumViewHolder.duration.setVisibility(8);
                albumViewHolder.floatView.setVisibility(8);
                albumViewHolder.checkedLayout.setVisibility(this.needSelectCount == 1 ? 8 : 0);
                ImageView imageView = albumViewHolder.checked;
                if (this.needSelectCount == 1) {
                    i5 = 8;
                }
                imageView.setVisibility(i5);
            } else if (!UnStringUtils.isEmpty(this.videoMinDuration) && !UnStringUtils.isEmpty(this.videoMaxDuration)) {
                albumViewHolder.duration.setVisibility(0);
                albumViewHolder.duration.setText(AlbumUtils.parseTime(localMedia.getDuration()));
                long floor = (long) Math.floor((double) (localMedia.getDuration() / 1000));
                long parseLong = Long.parseLong(this.videoMinDuration);
                long parseLong2 = Long.parseLong(this.videoMaxDuration);
                if (floor < parseLong) {
                    albumViewHolder.checkedLayout.setVisibility(8);
                    albumViewHolder.floatView.setVisibility(0);
                } else if (parseLong <= floor && floor <= parseLong2) {
                    albumViewHolder.checkedLayout.setVisibility(0);
                    albumViewHolder.floatView.setVisibility(8);
                } else if (parseLong2 < floor && floor < 600000) {
                    albumViewHolder.checkedLayout.setVisibility(8);
                    albumViewHolder.floatView.setVisibility(8);
                }
            } else {
                return;
            }
            UnNetImageView unNetImageView = albumViewHolder.image;
            unNetImageView.setImage("file://" + localMedia.getPath());
            if (localMedia.isPicked()) {
                albumViewHolder.checked.setImageResource(R.drawable.lib_uni_album_image_select_icon);
            } else {
                albumViewHolder.checked.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
            }
            albumViewHolder.checkedLayout.setOnClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.album.adapter.PictureAlbumAdapter.2
                @Override // android.view.View.OnClickListener
                public void onClick(View view) {
                    PictureAlbumAdapter.this.onCheck(i - PictureAlbumAdapter.HEAD_COUNT, albumViewHolder);
                }
            });
            albumViewHolder.itemView.setOnClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.album.adapter.PictureAlbumAdapter.3
                @Override // android.view.View.OnClickListener
                public void onClick(View view) {
                    if (PictureAlbumAdapter.this.onItemClickListener != null) {
                        PictureAlbumAdapter.this.onItemClickListener.onPictureItemClick(PictureAlbumAdapter.this.mLocalMedias, PictureAlbumAdapter.this.mSelectImages, i - PictureAlbumAdapter.HEAD_COUNT, albumViewHolder.image);
                    }
                }
            });
        }
    }

    private boolean isHaveVideo() {
        ArrayList<LocalMedia> arrayList = this.mSelectImages;
        if (arrayList == null || arrayList.size() == 0 || !PictureMimeType.isVideo(this.mSelectImages.get(0).getPictureType())) {
            return false;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void onCheck(int i, AlbumViewHolder albumViewHolder) {
        LocalMedia localMedia = this.mLocalMedias.get(i);
        boolean z = !localMedia.isPicked();
        boolean isHaveVideo = isHaveVideo();
        boolean isVideo = PictureMimeType.isVideo(localMedia.getPictureType());
        int i2 = this.needSelectCount;
        if (z) {
            ArrayList<LocalMedia> arrayList = this.mSelectImages;
            if (arrayList == null || arrayList.size() < i2) {
                if (!isHaveVideo || !isVideo) {
                    if (isVideo) {
                        this.mSelectImages.add(0, localMedia);
                    } else {
                        this.mSelectImages.add(localMedia);
                    }
                    localMedia.setPicked(z);
                    albumViewHolder.checked.setImageResource(R.drawable.lib_uni_album_image_select_icon);
                    if (this.callBack != null) {
                        this.callBack.onSelectChange(this.mSelectImages);
                        return;
                    }
                    return;
                }
                Context context = this.mContext;
                Toast.makeText(context, context.getString(R.string.uni_album_one_video_at_most), 0).show();
            } else if (isHaveVideo) {
                Context context2 = this.mContext;
                Toast.makeText(context2, context2.getString(R.string.uni_album_video_picture_limit, Integer.valueOf(this.needSelectCount - 1)), 0).show();
            } else {
                Context context3 = this.mContext;
                Toast.makeText(context3, context3.getString(R.string.uni_album_select_max_toast, Integer.valueOf(this.needSelectCount)), 0).show();
            }
        } else {
            localMedia.setPicked(z);
            albumViewHolder.checked.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
            this.mSelectImages.remove(localMedia);
            ClickPictureCallBack clickPictureCallBack = this.callBack;
            if (clickPictureCallBack != null) {
                clickPictureCallBack.onSelectChange(this.mSelectImages);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean checkSelectCount() {
        boolean isHaveVideo = isHaveVideo();
        ArrayList<LocalMedia> arrayList = this.mSelectImages;
        if (arrayList == null) {
            return false;
        }
        if (arrayList.size() < this.needSelectCount) {
            return true;
        }
        if (isHaveVideo) {
            Context context = this.mContext;
            Toast.makeText(context, context.getString(R.string.uni_album_video_picture_limit, Integer.valueOf(this.needSelectCount - 1)), 0).show();
        } else {
            Context context2 = this.mContext;
            Toast.makeText(context2, context2.getString(R.string.uni_album_select_max_toast, Integer.valueOf(this.needSelectCount)), 0).show();
        }
        return false;
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.adapter.PictureAlbumAdapter$HeaderViewHolder */
    /* loaded from: classes.dex */
    class HeaderViewHolder extends RecyclerView.ViewHolder {
        public ImageView imageView;

        public HeaderViewHolder(View view) {
            super(view);
            this.imageView = (ImageView) view.findViewById(R.id.lib_ec_preview_camera_icon);
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.adapter.PictureAlbumAdapter$AlbumViewHolder */
    /* loaded from: classes.dex */
    class AlbumViewHolder extends RecyclerView.ViewHolder {
        ImageView checked;
        LinearLayout checkedLayout;
        TextView duration;
        View floatView;
        UnNetImageView image;

        public AlbumViewHolder(View view) {
            super(view);
            this.image = view.findViewById(R.id.lib_ec_photo_album_image);
            this.floatView = view.findViewById(R.id.float_view);
            this.checked = (ImageView) view.findViewById(R.id.lib_ec_photo_album_checked);
            this.checkedLayout = (LinearLayout) view.findViewById(R.id.lib_ec_photo_album_checked_layout);
            this.duration = (TextView) view.findViewById(R.id.lib_ec_tv_duration);
        }
    }
}
