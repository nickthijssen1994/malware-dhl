package com.p051jd.lib.unification.album.utils;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.text.TextUtils;
import com.p051jd.lib.p083un.utils.UnStringUtils;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.album.utils.FileUtil */
/* loaded from: classes.dex */
public class FileUtil {
    public static final String VIDEO_COMPRESS_SAVE_DIR = "/cVideo";

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.io.Closeable] */
    /* JADX WARN: Type inference failed for: r1v3 */
    /* JADX WARN: Type inference failed for: r1v4 */
    /* JADX WARN: Type inference failed for: r1v5 */
    /* JADX WARN: Type inference failed for: r1v6, types: [java.io.FileInputStream, java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r6v0, types: [java.io.File] */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.io.Closeable] */
    /* JADX WARN: Type inference failed for: r6v6 */
    /* JADX WARN: Type inference failed for: r6v9 */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static String copyFile(String str, File file) {
        String str2;
        Throwable th;
        FileOutputStream fileOutputStream;
        Closeable closeable;
        IOException e;
        File externalStoragePublicDirectory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
        ?? exists = externalStoragePublicDirectory.exists();
        if (exists == 0) {
            externalStoragePublicDirectory.mkdir();
        }
        if (PictureMimeType.isVideo(str)) {
            str2 = externalStoragePublicDirectory.getAbsolutePath() + "/" + System.currentTimeMillis() + ".mp4";
        } else {
            str2 = externalStoragePublicDirectory.getAbsolutePath() + "/" + System.currentTimeMillis() + ".jpg";
        }
        if (UnStringUtils.isEmpty(str2)) {
            return "";
        }
        try {
            try {
                exists = new FileInputStream((File) file);
                try {
                    fileOutputStream = new FileOutputStream(str2);
                    try {
                        byte[] bArr = new byte[1024];
                        while (true) {
                            int read = exists.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                        }
                        fileOutputStream.flush();
                        fileOutputStream.close();
                        exists.close();
                        closeable = exists;
                    } catch (IOException e2) {
                        e = e2;
                        e.printStackTrace();
                        closeable = exists;
                        closeQuietly(closeable);
                        closeQuietly(fileOutputStream);
                        return str2;
                    }
                } catch (IOException e3) {
                    e = e3;
                    fileOutputStream = null;
                } catch (Throwable th2) {
                    th = th2;
                    file = 0;
                    closeQuietly(exists);
                    closeQuietly(file);
                    throw th;
                }
            } catch (IOException e4) {
                e = e4;
                exists = 0;
                fileOutputStream = null;
            } catch (Throwable th3) {
                th = th3;
                file = 0;
                exists = 0;
            }
            closeQuietly(closeable);
            closeQuietly(fileOutputStream);
            return str2;
        } catch (Throwable th4) {
            th = th4;
        }
    }

    private static void closeQuietly(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static String saveMediaFile(Activity activity, String str, String str2) {
        String copyFile = copyFile(str2, new File(str));
        if (UnStringUtils.isEmpty(copyFile)) {
            return "";
        }
        File file = new File(copyFile);
        String absolutePath = file.getAbsolutePath();
        Uri fromFile = Uri.fromFile(file);
        ContentValues contentValues = new ContentValues(2);
        if (PictureMimeType.isVideo(str2)) {
            contentValues.put("mime_type", str2);
            contentValues.put("_data", absolutePath);
            activity.getContentResolver().insert(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, contentValues);
            activity.sendBroadcast(new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE", fromFile));
        } else {
            contentValues.put("mime_type", str2);
            contentValues.put("_data", absolutePath);
            activity.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);
            activity.sendBroadcast(new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE", fromFile));
        }
        return absolutePath;
    }

    public static long getVideoDuration(String str) {
        File file = new File(str);
        if (!file.exists()) {
            return -100;
        }
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        mediaMetadataRetriever.setDataSource(file.getAbsolutePath());
        String extractMetadata = mediaMetadataRetriever.extractMetadata(9);
        if (TextUtils.isEmpty(extractMetadata)) {
            return 0;
        }
        return Long.parseLong(extractMetadata);
    }
}
