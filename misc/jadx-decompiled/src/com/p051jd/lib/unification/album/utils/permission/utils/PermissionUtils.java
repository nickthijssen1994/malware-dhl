package com.p051jd.lib.unification.album.utils.permission.utils;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Fragment;
import android.os.Build;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionFail;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionSuccess;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.album.utils.permission.utils.PermissionUtils */
/* loaded from: classes.dex */
public class PermissionUtils {
    public static boolean needRequestPermission() {
        return Build.VERSION.SDK_INT >= 23;
    }

    @TargetApi(23)
    public static List<String> findDeniedPermissions(Activity activity, String... strArr) {
        ArrayList arrayList = new ArrayList();
        for (String str : strArr) {
            if (activity.checkSelfPermission(str) != 0) {
                arrayList.add(str);
            }
        }
        return arrayList;
    }

    public static Activity getActivity(Object obj) {
        if (obj instanceof Fragment) {
            return ((Fragment) obj).getActivity();
        }
        if (obj instanceof androidx.fragment.app.Fragment) {
            return ((androidx.fragment.app.Fragment) obj).getActivity();
        }
        if (obj instanceof Activity) {
            return (Activity) obj;
        }
        throw new RuntimeException("传入的上下文环境错误,请重新设置为activity或者fragement！");
    }

    public static boolean isEqualRequestCodeFromAnntation(Method method, Class cls, int i) {
        if (cls.equals(PermissionFail.class)) {
            if (i == method.getAnnotation(PermissionFail.class).requestCode()) {
                return true;
            }
            return false;
        } else if (!cls.equals(PermissionSuccess.class) || i != method.getAnnotation(PermissionSuccess.class).requestCode()) {
            return false;
        } else {
            return true;
        }
    }

    public static <A extends Annotation> Method findMethodWithRequestCode(Class cls, Class<A> cls2, int i) {
        Method[] declaredMethods = cls.getDeclaredMethods();
        for (Method method : declaredMethods) {
            if (method.isAnnotationPresent(cls2) && isEqualRequestCodeFromAnntation(method, cls2, i)) {
                return method;
            }
        }
        return null;
    }

    public static void checkNull(Object obj, String str) {
        if (obj == null) {
            throw new NullPointerException(str);
        }
    }
}
