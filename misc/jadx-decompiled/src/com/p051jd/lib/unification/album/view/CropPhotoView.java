package com.p051jd.lib.unification.album.view;

import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.util.AttributeSet;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;
import java.util.LinkedList;

/* compiled from: TbsSdkJava */
@SuppressLint({"AppCompatCustomView"})
/* renamed from: com.jd.lib.unification.album.view.CropPhotoView */
/* loaded from: classes.dex */
public class CropPhotoView extends ImageView {
    private static final byte MODE_DEFAULT = 0;
    private static final byte MODE_SCALE = 1;
    private static final String TAG = "PhotoView";
    private Matrix changeMatrix;
    private GestureDetector commonGestureDetector;
    private RectF cropRect;
    private int currentMode;
    private float doubleTapScaleLevel;
    private FlingAnimator flingAnimator;
    private boolean limitCropRectTransAera;
    protected final float[] mCurrentImageCenter;
    protected final float[] mCurrentImageCorners;
    private Bitmap mImageBitmap;
    private float[] mInitialImageCenter;
    private float[] mInitialImageCorners;
    private PointF mLastScalePoint;
    private float mScaleFactor;
    private MatrixPool matrixPool;
    private float maxScaleLevel;
    private float minScaleLevel;
    private View.OnClickListener onClickListener;
    private View.OnLongClickListener onLongClickListener;
    private ScaleAnimator scaleAnimator;
    private ScaleGestureDetector scaleGestureDetector;
    private boolean scaleable;

    public CropPhotoView(Context context) {
        super(context);
        this.mCurrentImageCorners = new float[8];
        this.mCurrentImageCenter = new float[2];
        this.minScaleLevel = 1.0f;
        this.maxScaleLevel = 4.0f;
        this.doubleTapScaleLevel = this.maxScaleLevel;
        this.mScaleFactor = 1.0f;
        this.currentMode = 0;
        this.cropRect = new RectF();
        initConfig();
        initGestureDetector();
    }

    public CropPhotoView(Context context, @Nullable AttributeSet attributeSet) {
        super(context, attributeSet);
        this.mCurrentImageCorners = new float[8];
        this.mCurrentImageCenter = new float[2];
        this.minScaleLevel = 1.0f;
        this.maxScaleLevel = 4.0f;
        this.doubleTapScaleLevel = this.maxScaleLevel;
        this.mScaleFactor = 1.0f;
        this.currentMode = 0;
        this.cropRect = new RectF();
        initConfig();
        initGestureDetector();
    }

    public CropPhotoView(Context context, @Nullable AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.mCurrentImageCorners = new float[8];
        this.mCurrentImageCenter = new float[2];
        this.minScaleLevel = 1.0f;
        this.maxScaleLevel = 4.0f;
        this.doubleTapScaleLevel = this.maxScaleLevel;
        this.mScaleFactor = 1.0f;
        this.currentMode = 0;
        this.cropRect = new RectF();
        initConfig();
        initGestureDetector();
    }

    private void initConfig() {
        setScaleType(ImageView.ScaleType.MATRIX);
        this.changeMatrix = new Matrix();
        this.matrixPool = new MatrixPool(this);
    }

    public void setScaleable(boolean z) {
        this.scaleable = z;
    }

    public void setCropRect(RectF rectF) {
        this.limitCropRectTransAera = true;
        this.cropRect = rectF;
    }

    private void initGestureDetector() {
        this.commonGestureDetector = new GestureDetector(getContext(), new DealCommonGestureCallback());
        this.scaleGestureDetector = new ScaleGestureDetector(getContext(), new DealScaleGestureCallback());
    }

    @Override // android.view.View
    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (!this.scaleable) {
            return true;
        }
        this.commonGestureDetector.onTouchEvent(motionEvent);
        this.scaleGestureDetector.onTouchEvent(motionEvent);
        return true;
    }

    @Override // android.widget.ImageView
    public void setImageMatrix(Matrix matrix) {
        super.setImageMatrix(matrix);
        this.changeMatrix.set(matrix);
        updateCurrentImagePoints();
    }

    private void updateCurrentImagePoints() {
        this.changeMatrix.mapPoints(this.mCurrentImageCorners, this.mInitialImageCorners);
        this.changeMatrix.mapPoints(this.mCurrentImageCenter, this.mInitialImageCenter);
        Log.d(TAG, "updateImagePoint  left: " + this.mCurrentImageCorners[0] + " top: " + this.mCurrentImageCorners[1] + " right: " + this.mCurrentImageCorners[2] + " bottom: " + this.mCurrentImageCorners[5]);
    }

    public float getCurrentScale() {
        return getMatrixValue(this.changeMatrix, 0);
    }

    @Override // android.view.View
    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        super.onLayout(z, i, i2, i3, i4);
        if (z) {
            Drawable drawable = getDrawable();
            if (drawable != null) {
                RectF rectF = new RectF(0.0f, 0.0f, (float) getDrawable().getIntrinsicWidth(), (float) drawable.getIntrinsicHeight());
                this.mInitialImageCorners = new float[]{rectF.left, rectF.top, rectF.right, rectF.top, rectF.right, rectF.bottom, rectF.left, rectF.bottom};
                this.mInitialImageCenter = new float[]{rectF.centerX(), rectF.centerY()};
            }
            fitImageToCenter();
        }
    }

    private void fitImageToCenter() {
        Matrix innerMatrix = getInnerMatrix();
        if (innerMatrix != null) {
            this.mScaleFactor = getMatrixValue(innerMatrix, 0);
            this.changeMatrix.set(innerMatrix);
            setImageMatrix(this.changeMatrix);
            this.matrixPool.returnObject(innerMatrix);
        }
    }

    private Matrix getInnerMatrix() {
        if (!isReady()) {
            return null;
        }
        Drawable drawable = getDrawable();
        RectF rectF = new RectF(0.0f, 0.0f, (float) drawable.getIntrinsicWidth(), (float) drawable.getIntrinsicHeight());
        RectF rectF2 = new RectF(0.0f, 0.0f, (float) getWidth(), (float) getHeight());
        Matrix borrowObject = this.matrixPool.borrowObject();
        Log.d(TAG, "before scale change " + getMatrixValue(borrowObject, 0) + " " + getMatrixValue(borrowObject, 4) + " " + getMatrixValue(borrowObject, 2) + " " + getMatrixValue(borrowObject, 5));
        borrowObject.setRectToRect(rectF, rectF2, Matrix.ScaleToFit.CENTER);
        Log.d(TAG, "after scale change " + getMatrixValue(borrowObject, 0) + " " + getMatrixValue(borrowObject, 4) + " " + getMatrixValue(borrowObject, 2) + " " + getMatrixValue(borrowObject, 5));
        float f = this.minScaleLevel;
        if (f == 1.0f) {
            return borrowObject;
        }
        borrowObject.postScale(f, f, (float) (DpiUtil.getWidth(getContext()) / 2), (float) (DpiUtil.getHeight(getContext()) / 2));
        return borrowObject;
    }

    public boolean isZoomed() {
        Matrix innerMatrix;
        if (this.changeMatrix == null || (innerMatrix = getInnerMatrix()) == null) {
            return false;
        }
        return !innerMatrix.equals(this.changeMatrix);
    }

    private RectF getImageBounds(@NonNull Matrix matrix) {
        if (!isReady() || matrix == null) {
            return new RectF();
        }
        RectF rectF = new RectF(0.0f, 0.0f, (float) getDrawable().getIntrinsicWidth(), (float) getDrawable().getIntrinsicHeight());
        matrix.mapRect(rectF);
        return rectF;
    }

    private boolean isReady() {
        return getWidth() > 0 && getHeight() > 0 && getDrawable() != null && getDrawable().getIntrinsicWidth() > 0 && getDrawable().getIntrinsicHeight() > 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void cancelFlingAnim() {
        FlingAnimator flingAnimator = this.flingAnimator;
        if (flingAnimator != null) {
            flingAnimator.cancel();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void cancelScaleAnim() {
        ScaleAnimator scaleAnimator = this.scaleAnimator;
        if (scaleAnimator != null) {
            scaleAnimator.cancel();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isScaleAnimRunning() {
        ScaleAnimator scaleAnimator = this.scaleAnimator;
        return scaleAnimator != null && scaleAnimator.isRunning();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dispatchScrollChange(float f, float f2) {
        if (isReady()) {
            if (this.currentMode == 0) {
                this.changeMatrix.postTranslate(f, f2);
                if (this.limitCropRectTransAera) {
                    int i = (int) this.cropRect.left;
                    int i2 = (int) this.cropRect.top;
                    int i3 = (int) this.cropRect.right;
                    int i4 = (int) this.cropRect.bottom;
                    Log.d(TAG, "limitLeft:" + i + " limitTop:" + i2 + " limitRight:" + i3 + " limitBottom:" + i4);
                    this.changeMatrix = changeMatrixToFitTranslate(this.changeMatrix, i, i2, i3, i4);
                } else {
                    this.changeMatrix = changeMatrixToFitTranslate(this.changeMatrix);
                }
            } else {
                this.changeMatrix.postTranslate(f, f2);
            }
            setImageMatrix(this.changeMatrix);
        }
    }

    public void dispatchScaleChange(float f, float f2, float f3) {
        if (isReady()) {
            updateLastScalePoint(f2, f3);
            this.changeMatrix.postScale(f, f, f2, f3);
            setImageMatrix(this.changeMatrix);
        }
    }

    private void updateLastScalePoint(float f, float f2) {
        PointF pointF = this.mLastScalePoint;
        if (pointF == null) {
            this.mLastScalePoint = new PointF(f, f2);
        } else {
            pointF.set(f, f2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dispatchScaleEndChange() {
        if (isReady()) {
            Matrix changeMatrixToFitTranslate = changeMatrixToFitTranslate(changeMatrixToFitScale(this.changeMatrix, this.mLastScalePoint.x, this.mLastScalePoint.y));
            this.scaleAnimator = new ScaleAnimator(this, this.changeMatrix, changeMatrixToFitTranslate);
            this.scaleAnimator.start();
            this.matrixPool.returnObject(changeMatrixToFitTranslate);
        }
    }

    private Matrix changeMatrixToFitScale(Matrix matrix, float f, float f2) {
        float f3 = this.mScaleFactor;
        float f4 = this.minScaleLevel * f3;
        float f5 = f3 * this.maxScaleLevel;
        float matrixValue = getMatrixValue(matrix, 0);
        if (matrixValue < f4) {
            return this.matrixPool.borrowObject(getInnerMatrix());
        }
        if (matrixValue <= f5) {
            return this.matrixPool.borrowObject(matrix);
        }
        Matrix borrowObject = this.matrixPool.borrowObject(matrix);
        float f6 = f5 / matrixValue;
        borrowObject.postScale(f6, f6, f, f2);
        return borrowObject;
    }

    private Matrix changeMatrixToFitTranslate(Matrix matrix, int i, int i2, int i3, int i4) {
        float f;
        Matrix borrowObject = this.matrixPool.borrowObject(matrix);
        RectF imageBounds = getImageBounds(borrowObject);
        int width = getWidth();
        int height = getHeight();
        float width2 = ((float) width) - imageBounds.width();
        float height2 = ((float) height) - imageBounds.height();
        float f2 = 0.0f;
        if (width2 <= 0.0f || height2 <= 0.0f) {
            float f3 = (float) i;
            if (imageBounds.left > f3) {
                f = -(imageBounds.left - f3);
            } else {
                float f4 = (float) i3;
                f = imageBounds.right < f4 ? f4 - imageBounds.right : 0.0f;
            }
            float f5 = (float) i2;
            if (imageBounds.top > f5) {
                f2 = -(imageBounds.top - f5);
            } else {
                float f6 = (float) i4;
                if (imageBounds.bottom < f6) {
                    f2 = f6 - imageBounds.bottom;
                }
            }
        } else {
            f = (width2 / 2.0f) - imageBounds.left;
            f2 = (height2 / 2.0f) - imageBounds.top;
        }
        borrowObject.postTranslate(f, f2);
        return borrowObject;
    }

    private Matrix changeMatrixToFitTranslate(Matrix matrix) {
        float f;
        Matrix borrowObject = this.matrixPool.borrowObject(matrix);
        RectF imageBounds = getImageBounds(borrowObject);
        int width = getWidth();
        int height = getHeight();
        float f2 = (float) width;
        float width2 = f2 - imageBounds.width();
        float f3 = (float) height;
        float height2 = f3 - imageBounds.height();
        float f4 = 0.0f;
        if (width2 > 0.0f && height2 > 0.0f) {
            f4 = (height2 / 2.0f) - imageBounds.top;
            f = (width2 / 2.0f) - imageBounds.left;
        } else if (width2 <= 0.0f && height2 <= 0.0f) {
            if (imageBounds.left > 0.0f) {
                f = -imageBounds.left;
            } else {
                f = imageBounds.right < f2 ? f2 - imageBounds.right : 0.0f;
            }
            if (imageBounds.top > 0.0f) {
                f4 = -imageBounds.top;
            } else if (imageBounds.bottom < f3) {
                f4 = f3 - imageBounds.bottom;
            }
        } else if (width2 <= 0.0f && height2 > 0.0f) {
            if (imageBounds.left > 0.0f) {
                f4 = -imageBounds.left;
            } else if (imageBounds.right < f2) {
                f4 = f2 - imageBounds.right;
            }
            f4 = (height2 / 2.0f) - imageBounds.top;
            f = f4;
        } else if (width2 <= 0.0f || height2 > 0.0f) {
            f = 0.0f;
        } else {
            f = (width2 / 2.0f) - imageBounds.left;
            if (imageBounds.top > 0.0f) {
                f4 = -imageBounds.top;
            } else if (imageBounds.bottom < f3) {
                f4 = f3 - imageBounds.bottom;
            }
        }
        borrowObject.postTranslate(f, f4);
        return borrowObject;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dispatchDoubleTapChange(MotionEvent motionEvent) {
        if (isReady()) {
            float floor = (float) (Math.floor((double) (getMatrixValue(this.changeMatrix, 0) * 100.0f)) / 100.0d);
            float f = this.minScaleLevel;
            float f2 = this.mScaleFactor;
            float f3 = f * f2;
            float f4 = this.doubleTapScaleLevel * f2;
            float x = motionEvent.getX();
            float y = motionEvent.getY();
            float f5 = floor <= f3 ? f4 / floor : f3 / floor;
            Matrix borrowObject = this.matrixPool.borrowObject(this.changeMatrix);
            borrowObject.postScale(f5, f5, x, y);
            Matrix changeMatrixToFitTranslate = changeMatrixToFitTranslate(borrowObject);
            this.scaleAnimator = new ScaleAnimator(this, this.changeMatrix, changeMatrixToFitTranslate);
            this.scaleAnimator.start();
            this.matrixPool.returnObject(changeMatrixToFitTranslate);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dispatchFlingChange(float f, float f2) {
        if (isReady()) {
            this.flingAnimator = new FlingAnimator(f / 60.0f, f2 / 60.0f);
            this.flingAnimator.start();
        }
    }

    private float getMatrixValue(Matrix matrix, int i) {
        float[] fArr = new float[9];
        matrix.getValues(fArr);
        return fArr[i];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMode(byte b) {
        this.currentMode = b;
    }

    public void setMaxScaleLevel(float f) {
        if (f < this.minScaleLevel) {
            UnLog.e(TAG, "maxScaleLevel不允许小于minScaleLevel！");
            return;
        }
        this.maxScaleLevel = f;
        if (this.doubleTapScaleLevel > f) {
            this.doubleTapScaleLevel = f;
        }
    }

    public void setMinScaleLevel(float f) {
        this.minScaleLevel = f;
    }

    public void setDoubleTapScaleLevel(int i) {
        float f = (float) i;
        if (f < this.minScaleLevel || f > this.maxScaleLevel) {
            UnLog.e(TAG, "doubleTapScaleLevel其范围必须在minScaleLevel-maxScaleLevel之间！");
        } else {
            this.doubleTapScaleLevel = f;
        }
    }

    public float getMaxScaleLevel() {
        return this.maxScaleLevel;
    }

    public float getDoubleTapScaleLevel() {
        return this.doubleTapScaleLevel;
    }

    public void reset() {
        fitImageToCenter();
    }

    public Bitmap getImageBitmap() {
        return this.mImageBitmap;
    }

    @Override // android.widget.ImageView
    public void setImageBitmap(Bitmap bitmap) {
        super.setImageBitmap(bitmap);
        this.mImageBitmap = bitmap;
        reset();
    }

    @Override // android.widget.ImageView
    public void setImageDrawable(@Nullable Drawable drawable) {
        super.setImageDrawable(drawable);
        reset();
    }

    @Override // android.widget.ImageView
    public void setImageResource(int i) {
        super.setImageResource(i);
        reset();
    }

    @Override // android.widget.ImageView
    public void setImageURI(@Nullable Uri uri) {
        super.setImageURI(uri);
        reset();
    }

    @Override // android.view.View
    public void setOnClickListener(View.OnClickListener onClickListener) {
        this.onClickListener = onClickListener;
    }

    @Override // android.view.View
    public void setOnLongClickListener(View.OnLongClickListener onLongClickListener) {
        this.onLongClickListener = onLongClickListener;
    }

    @Override // android.view.View
    public boolean canScrollHorizontally(int i) {
        if (this.currentMode == 1 || isScaleAnimRunning()) {
            return false;
        }
        RectF imageBounds = getImageBounds(this.changeMatrix);
        if (imageBounds.isEmpty()) {
            return false;
        }
        if (i > 0) {
            if (imageBounds.right > ((float) getWidth())) {
                return true;
            }
            return false;
        } else if (imageBounds.left < 0.0f) {
            return true;
        } else {
            return false;
        }
    }

    @Override // android.view.View
    public boolean canScrollVertically(int i) {
        if (this.currentMode == 1 || isScaleAnimRunning()) {
            return false;
        }
        RectF imageBounds = getImageBounds(this.changeMatrix);
        if (imageBounds.isEmpty()) {
            return false;
        }
        if (i > 0) {
            if (imageBounds.bottom > ((float) getHeight())) {
                return true;
            }
            return false;
        } else if (imageBounds.top < 0.0f) {
            return true;
        } else {
            return false;
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.view.CropPhotoView$DealCommonGestureCallback */
    /* loaded from: classes.dex */
    private class DealCommonGestureCallback extends GestureDetector.SimpleOnGestureListener {
        private DealCommonGestureCallback() {
        }

        @Override // android.view.GestureDetector.SimpleOnGestureListener, android.view.GestureDetector.OnGestureListener
        public boolean onScroll(MotionEvent motionEvent, MotionEvent motionEvent2, float f, float f2) {
            if (CropPhotoView.this.isScaleAnimRunning()) {
                return true;
            }
            CropPhotoView.this.cancelFlingAnim();
            CropPhotoView.this.dispatchScrollChange(-f, -f2);
            return true;
        }

        @Override // android.view.GestureDetector.SimpleOnGestureListener, android.view.GestureDetector.OnGestureListener
        public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent2, float f, float f2) {
            if (CropPhotoView.this.isScaleAnimRunning()) {
                return true;
            }
            CropPhotoView.this.cancelFlingAnim();
            CropPhotoView.this.dispatchFlingChange(f, f2);
            return true;
        }

        @Override // android.view.GestureDetector.SimpleOnGestureListener, android.view.GestureDetector.OnDoubleTapListener
        public boolean onDoubleTap(MotionEvent motionEvent) {
            CropPhotoView.this.cancelFlingAnim();
            CropPhotoView.this.cancelScaleAnim();
            CropPhotoView.this.dispatchDoubleTapChange(motionEvent);
            return true;
        }

        @Override // android.view.GestureDetector.SimpleOnGestureListener, android.view.GestureDetector.OnGestureListener
        public boolean onSingleTapUp(MotionEvent motionEvent) {
            if (CropPhotoView.this.onClickListener == null) {
                return true;
            }
            CropPhotoView.this.onClickListener.onClick(CropPhotoView.this);
            return true;
        }

        @Override // android.view.GestureDetector.SimpleOnGestureListener, android.view.GestureDetector.OnGestureListener
        public void onLongPress(MotionEvent motionEvent) {
            super.onLongPress(motionEvent);
            if (CropPhotoView.this.onLongClickListener != null) {
                CropPhotoView.this.onLongClickListener.onLongClick(CropPhotoView.this);
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.view.CropPhotoView$DealScaleGestureCallback */
    /* loaded from: classes.dex */
    private class DealScaleGestureCallback extends ScaleGestureDetector.SimpleOnScaleGestureListener {
        private DealScaleGestureCallback() {
        }

        @Override // android.view.ScaleGestureDetector.SimpleOnScaleGestureListener, android.view.ScaleGestureDetector.OnScaleGestureListener
        public boolean onScaleBegin(ScaleGestureDetector scaleGestureDetector) {
            if (CropPhotoView.this.isScaleAnimRunning()) {
                return false;
            }
            CropPhotoView.this.updateMode((byte) 1);
            return true;
        }

        @Override // android.view.ScaleGestureDetector.SimpleOnScaleGestureListener, android.view.ScaleGestureDetector.OnScaleGestureListener
        public boolean onScale(ScaleGestureDetector scaleGestureDetector) {
            if (CropPhotoView.this.isScaleAnimRunning()) {
                return true;
            }
            CropPhotoView.this.cancelFlingAnim();
            CropPhotoView.this.dispatchScaleChange(scaleGestureDetector.getScaleFactor(), scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY());
            return true;
        }

        @Override // android.view.ScaleGestureDetector.SimpleOnScaleGestureListener, android.view.ScaleGestureDetector.OnScaleGestureListener
        public void onScaleEnd(ScaleGestureDetector scaleGestureDetector) {
            super.onScaleEnd(scaleGestureDetector);
            CropPhotoView.this.updateMode(CropPhotoView.MODE_DEFAULT);
            CropPhotoView.this.cancelFlingAnim();
            CropPhotoView.this.cancelScaleAnim();
            CropPhotoView.this.dispatchScaleEndChange();
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.view.CropPhotoView$ScaleAnimator */
    /* loaded from: classes.dex */
    private class ScaleAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {
        private float[] mEnd;
        private float[] mResult;
        private float[] mStart;

        public ScaleAnimator(CropPhotoView cropPhotoView, Matrix matrix, Matrix matrix2) {
            this(matrix, matrix2, 300);
        }

        public ScaleAnimator(Matrix matrix, Matrix matrix2, long j) {
            this.mStart = new float[9];
            this.mEnd = new float[9];
            this.mResult = new float[9];
            setFloatValues(0.0f, 1.0f);
            setDuration(j);
            addUpdateListener(this);
            matrix.getValues(this.mStart);
            matrix2.getValues(this.mEnd);
        }

        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            for (int i = 0; i < 9; i++) {
                float[] fArr = this.mResult;
                float[] fArr2 = this.mStart;
                fArr[i] = fArr2[i] + ((this.mEnd[i] - fArr2[i]) * floatValue);
            }
            CropPhotoView.this.changeMatrix.setValues(this.mResult);
            CropPhotoView cropPhotoView = CropPhotoView.this;
            cropPhotoView.setImageMatrix(cropPhotoView.changeMatrix);
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.view.CropPhotoView$FlingAnimator */
    /* loaded from: classes.dex */
    private class FlingAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {
        private float[] mVector;

        public FlingAnimator(float f, float f2) {
            setFloatValues(0.0f, 1.0f);
            setDuration(1000000L);
            addUpdateListener(this);
            this.mVector = new float[]{f, f2};
        }

        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            float[] fArr = this.mVector;
            if (fArr[0] == 0.0f || fArr[1] == 0.0f) {
                valueAnimator.cancel();
                return;
            }
            CropPhotoView.this.dispatchScrollChange(fArr[0], fArr[1]);
            float[] fArr2 = this.mVector;
            fArr2[0] = fArr2[0] * 0.9f;
            fArr2[1] = fArr2[1] * 0.9f;
            if (Math.sqrt((double) ((fArr2[0] * fArr2[0]) + (fArr2[1] * fArr2[1]))) < 1.0d) {
                valueAnimator.cancel();
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.album.view.CropPhotoView$MatrixPool */
    /* loaded from: classes.dex */
    private class MatrixPool {
        private LinkedList<Matrix> caches;
        private int maxSize;

        public MatrixPool(int i) {
            this.maxSize = i;
            this.caches = new LinkedList<>();
        }

        public MatrixPool(CropPhotoView cropPhotoView) {
            this(16);
        }

        public Matrix borrowObject() {
            if (!this.caches.isEmpty()) {
                return this.caches.poll();
            }
            return new Matrix();
        }

        public Matrix borrowObject(Matrix matrix) {
            Matrix borrowObject = borrowObject();
            borrowObject.set(matrix);
            return borrowObject;
        }

        public boolean returnObject(Matrix matrix) {
            if (matrix == null || this.caches.size() >= this.maxSize) {
                return false;
            }
            matrix.reset();
            this.caches.offer(matrix);
            return true;
        }
    }
}
