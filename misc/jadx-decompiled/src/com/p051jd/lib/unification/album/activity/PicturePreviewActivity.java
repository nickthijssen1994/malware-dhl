package com.p051jd.lib.unification.album.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;
import com.facebook.react.uimanager.ViewProps;
import com.jd.unalbumwidget.R;
import com.p051jd.lib.p083un.utils.UnStringUtils;
import com.p051jd.lib.unification.album.adapter.PreviewPictureAdapter;
import com.p051jd.lib.unification.album.adapter.SelectPictureAdapter;
import com.p051jd.lib.unification.album.entity.AlbumConstant;
import com.p051jd.lib.unification.album.entity.ImageConstant;
import com.p051jd.lib.unification.album.entity.ImageParam;
import com.p051jd.lib.unification.album.entity.LocalMedia;
import com.p051jd.lib.unification.album.entity.VideoConstant;
import com.p051jd.lib.unification.album.entity.VideoParam;
import com.p051jd.lib.unification.album.mInterface.IBack;
import com.p051jd.lib.unification.album.utils.Const;
import com.p051jd.lib.unification.album.utils.FileUtil;
import com.p051jd.lib.unification.album.utils.LocalMediaCache;
import com.p051jd.lib.unification.album.utils.PictureMimeType;
import com.p051jd.lib.unification.album.view.DropDownViewPager;
import com.p051jd.lib.unification.album.view.HorizontalListView;
import com.p051jd.lib.unification.image.editor.ImageEditorActivity;
import com.p051jd.lib.unification.video.editor.VideoEditorActivity;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.album.activity.PicturePreviewActivity */
/* loaded from: classes.dex */
public class PicturePreviewActivity extends FragmentActivity implements View.OnClickListener, SelectPictureAdapter.DeletePictureCallBack, IBack {
    private static final int SCROLL_TO_RIGHT = 9999;
    private boolean canBeautifyPic;
    public float cropCircleRadius;
    public float cropRectX;
    public float cropRectY;
    public int cropShape;
    private ImageView ivBeautifyHint;
    private LinearLayout mBackContainer;
    private Button mConfirm;
    private ArrayList<LocalMedia> mCurrentPhotoList;
    private HorizontalListView mListView;
    private PreviewPictureAdapter mPreviewPictureAdapter;
    private TextView mPrompt;
    private View mRootView;
    private ImageView mSelect;
    private LinearLayout mSelectContainer;
    private SelectPictureAdapter mSelectPictureAdapter;
    private ArrayList<LocalMedia> mSelectedMedia;
    private DropDownViewPager mViewPager;
    private RelativeLayout rlBottomBlackLayer;
    private RelativeLayout rlTopBlackLayer;
    private TextView tvPicBeautify;
    private final ArrayList<LocalMedia> mEditVideos = new ArrayList<>();
    private int mCurrentPosition = 0;
    private String videoMinDuration = IBack.CLICK_PIC;
    private String videoMaxDuration = "10";
    private boolean loadVideo = false;
    private int editorSwitch = 0;
    private ArrayList<LocalMedia> picEditorList = new ArrayList<>();
    private String editorMediaPath = "";
    private int needSelectCount = 1;
    private DropDownViewPager.DropViewPagerListener dropViewPagerListener = new DropDownViewPager.DropViewPagerListener() { // from class: com.jd.lib.unification.album.activity.PicturePreviewActivity.1
        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public void onPageScrollStateChanged(int i) {
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public void onPageScrolled(int i, float f, int i2) {
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public Intent getIntent() {
            return PicturePreviewActivity.this.getIntent();
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        @Nullable
        public String getUniqueIdentifier() {
            if (PicturePreviewActivity.this.mPreviewPictureAdapter == null || PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment() == null) {
                return null;
            }
            return PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment().getUri();
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        @Nullable
        public View getCurrentView() {
            if (PicturePreviewActivity.this.mPreviewPictureAdapter == null || PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment() == null) {
                return null;
            }
            return PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment().getView();
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public boolean canDropDown() {
            if (PicturePreviewActivity.this.mPreviewPictureAdapter == null || PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment() == null) {
                return false;
            }
            return PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment().canDropDown();
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public void onDropDownStart(boolean z) {
            if (PicturePreviewActivity.this.mRootView != null) {
                PicturePreviewActivity.this.mRootView.setBackgroundColor(0);
            }
            if (!(PicturePreviewActivity.this.mPreviewPictureAdapter == null || PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment() == null)) {
                PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment().pauseVideo();
            }
            if (PicturePreviewActivity.this.rlTopBlackLayer != null && PicturePreviewActivity.this.rlTopBlackLayer.getVisibility() == 0) {
                PicturePreviewActivity.this.rlTopBlackLayer.setVisibility(4);
            }
            if (PicturePreviewActivity.this.rlBottomBlackLayer != null && PicturePreviewActivity.this.rlBottomBlackLayer.getVisibility() == 0) {
                PicturePreviewActivity.this.rlBottomBlackLayer.setVisibility(4);
            }
            if (PicturePreviewActivity.this.mListView != null && PicturePreviewActivity.this.mListView.getVisibility() == 0) {
                PicturePreviewActivity.this.mListView.setVisibility(4);
            }
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public void onDropDownRecovered(boolean z) {
            if (PicturePreviewActivity.this.mRootView != null) {
                PicturePreviewActivity.this.mRootView.setBackgroundColor(-16777216);
            }
            if (PicturePreviewActivity.this.rlTopBlackLayer != null && PicturePreviewActivity.this.rlTopBlackLayer.getVisibility() == 4) {
                PicturePreviewActivity.this.rlTopBlackLayer.setVisibility(0);
            }
            if (PicturePreviewActivity.this.rlBottomBlackLayer != null && PicturePreviewActivity.this.rlBottomBlackLayer.getVisibility() == 4) {
                PicturePreviewActivity.this.rlBottomBlackLayer.setVisibility(0);
            }
            if (PicturePreviewActivity.this.mListView != null && PicturePreviewActivity.this.mListView.getVisibility() == 4) {
                PicturePreviewActivity.this.mListView.setVisibility(0);
            }
            if (z && PicturePreviewActivity.this.mPreviewPictureAdapter != null && PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment() != null) {
                PicturePreviewActivity.this.mPreviewPictureAdapter.getCurrentFragment().startVideoAfterInitAnimationEnd();
            }
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public void onDropDownRelease(String str, boolean z) {
            if (PicturePreviewActivity.this.mEditVideos.size() > 0) {
                PicturePreviewActivity.this.removeNewEditVideo();
                PicturePreviewActivity picturePreviewActivity = PicturePreviewActivity.this;
                picturePreviewActivity.initSelectedStatus(picturePreviewActivity.mEditVideos);
            }
            Intent intent = new Intent();
            intent.putParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS, PicturePreviewActivity.this.mSelectedMedia);
            intent.putParcelableArrayListExtra(Const.NEW_EDIT_VIDEO, PicturePreviewActivity.this.mEditVideos);
            intent.putParcelableArrayListExtra(Const.NEW_EDIT_PIC, PicturePreviewActivity.this.picEditorList);
            LocalMediaCache.getInstance().putList(PicturePreviewActivity.this.mCurrentPhotoList);
            PicturePreviewActivity.this.setResult(-1, intent);
            PicturePreviewActivity.this.finish();
            if (z) {
                PicturePreviewActivity.this.overridePendingTransition(0, 0);
            }
        }

        @Override // com.p051jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener
        public void onPageSelected(int i) {
            PicturePreviewActivity.this.mCurrentPosition = i;
            if (PicturePreviewActivity.this.mCurrentPosition >= 0 && PicturePreviewActivity.this.mCurrentPosition < PicturePreviewActivity.this.mCurrentPhotoList.size()) {
                LocalMedia localMedia = (LocalMedia) PicturePreviewActivity.this.mCurrentPhotoList.get(PicturePreviewActivity.this.mCurrentPosition);
                if (PicturePreviewActivity.this.mSelectedMedia == null || PicturePreviewActivity.this.mSelectedMedia.size() <= 0) {
                    localMedia.setPicked(false);
                    PicturePreviewActivity.this.mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
                } else if (PicturePreviewActivity.this.mSelectedMedia.contains(localMedia)) {
                    PicturePreviewActivity.this.mSelect.setImageResource(R.drawable.lib_uni_album_image_select_icon);
                    localMedia.setPicked(true);
                    PicturePreviewActivity.this.mListView.scrollTo(PicturePreviewActivity.SCROLL_TO_RIGHT);
                } else {
                    localMedia.setPicked(false);
                    PicturePreviewActivity.this.mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
                }
                PicturePreviewActivity.this.mCurrentPhotoList.set(PicturePreviewActivity.this.mCurrentPosition, localMedia);
                PicturePreviewActivity.this.setPrompt(localMedia, false);
            }
        }
    };

    protected void onCreate(Bundle bundle) {
        if (Build.VERSION.SDK_INT != 26) {
            setRequestedOrientation(1);
        }
        requestWindowFeature(1);
        getWindow().setFlags(1024, 1024);
        PicturePreviewActivity.super.onCreate(bundle);
        setContentView(R.layout.lib_ec_activity_album_preview);
        getData();
        initViews();
        initAdapter();
        registerListener();
    }

    private void getData() {
        Intent intent = getIntent();
        this.mCurrentPhotoList = LocalMediaCache.getInstance().popList();
        this.mSelectedMedia = intent.getParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS);
        this.mCurrentPosition = intent.getIntExtra(ViewProps.POSITION, this.mCurrentPosition);
        this.loadVideo = intent.getBooleanExtra("loadVideo", false);
        if (this.loadVideo) {
            this.videoMinDuration = intent.getStringExtra(AlbumConstant.VIDEO_MIN_DURATION);
            this.videoMaxDuration = intent.getStringExtra(AlbumConstant.VIDEO_MAX_DURATION);
            this.editorSwitch = intent.getIntExtra(AlbumConstant.VIDEO_EDITOR_ACTION, 0);
            if (UnStringUtils.isEmpty(this.videoMinDuration)) {
                this.videoMinDuration = String.valueOf(3L);
            }
            if (UnStringUtils.isEmpty(this.videoMaxDuration)) {
                this.videoMaxDuration = String.valueOf(10L);
            }
        }
        this.canBeautifyPic = intent.getBooleanExtra("needEditorPic", false);
        this.cropShape = intent.getIntExtra(AlbumConstant.CROP_SHAPE, -1);
        this.cropCircleRadius = intent.getFloatExtra(AlbumConstant.CROP_CIRCLE_RADIUS, 0.0f);
        this.cropRectX = intent.getFloatExtra(AlbumConstant.CROP_RECTX, 0.0f);
        this.cropRectY = intent.getFloatExtra(AlbumConstant.CROP_RECTY, 0.0f);
        this.needSelectCount = intent.getIntExtra(AlbumConstant.CAN_SELECT_MEDIA_COUNT, 1);
    }

    private void initViews() {
        this.mRootView = findViewById(R.id.lib_ec_album_preview_root);
        this.rlTopBlackLayer = (RelativeLayout) findViewById(R.id.lib_ec_album_preview_title_bar);
        this.rlBottomBlackLayer = (RelativeLayout) findViewById(R.id.lib_ec_album_preview_bottom);
        this.mBackContainer = (LinearLayout) findViewById(R.id.lib_ec_preview_back_container);
        this.mSelect = (ImageView) findViewById(R.id.lib_ec_album_preview_select);
        this.mSelectContainer = (LinearLayout) findViewById(R.id.lib_ec_preview_select_container);
        this.mViewPager = (DropDownViewPager) findViewById(R.id.lib_ec_album_preview_viewpager);
        this.mListView = (HorizontalListView) findViewById(R.id.lib_ec_album_preview_horizontal_view);
        this.mPrompt = (TextView) findViewById(R.id.lib_ec_album_preview_prompt);
        this.mConfirm = (Button) findViewById(R.id.lib_ec_photo_album_confirm);
        this.mConfirm.setEnabled(false);
        this.tvPicBeautify = (TextView) findViewById(R.id.lib_ec_album_preview_pic_beautify);
        this.ivBeautifyHint = (ImageView) findViewById(R.id.iv_beautify_hint);
        if (this.editorSwitch == 0) {
            this.mPrompt.setVisibility(8);
        }
        showListView();
    }

    private void showListView() {
        ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
        if (arrayList == null || arrayList.size() <= 0) {
            this.mListView.setVisibility(8);
        } else {
            this.mListView.setVisibility(0);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void initAdapter() {
        if (this.mCurrentPhotoList != null) {
            this.mSelectPictureAdapter = new SelectPictureAdapter(this, this.mSelectedMedia);
            this.mSelectPictureAdapter.setCallBack(this);
            this.mListView.setAdapter((ListAdapter) this.mSelectPictureAdapter);
            this.mPreviewPictureAdapter = new PreviewPictureAdapter(getSupportFragmentManager(), this.mCurrentPhotoList);
            this.mViewPager.setAdapter(this.mPreviewPictureAdapter);
            initViewPager();
        }
    }

    private void initViewPager() {
        if (this.mCurrentPosition >= 0 && this.mCurrentPhotoList.size() > 0) {
            LocalMedia localMedia = this.mCurrentPhotoList.get(this.mCurrentPosition);
            setCurrentPosition(localMedia);
            this.mSelect.setImageResource(localMedia.isPicked() ? R.drawable.lib_uni_album_image_select_icon : R.drawable.lib_uni_album_image_not_select_icon);
            setCompleteProgress();
        }
    }

    private void setCurrentPosition(LocalMedia localMedia) {
        for (int i = 0; i < this.mCurrentPhotoList.size(); i++) {
            if (localMedia.getPath().equals(this.mCurrentPhotoList.get(i).getPath())) {
                this.mCurrentPosition = i;
            }
        }
        this.mPreviewPictureAdapter.setCurrentPosition(this.mCurrentPosition);
        this.mViewPager.setCurrentItem(this.mCurrentPosition, false);
        setPrompt(localMedia, true);
    }

    private void registerListener() {
        this.rlTopBlackLayer.setOnClickListener(this);
        this.rlBottomBlackLayer.setOnClickListener(this);
        this.mBackContainer.setOnClickListener(this);
        this.mSelectContainer.setOnClickListener(this);
        this.mPrompt.setOnClickListener(this);
        this.tvPicBeautify.setOnClickListener(this);
        this.mConfirm.setOnClickListener(this);
        this.mViewPager.setDropViewPagerListener(this.dropViewPagerListener);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    public void setPrompt(LocalMedia localMedia, boolean z) {
        int i;
        if (PictureMimeType.isVideo(localMedia.getPictureType())) {
            this.mPrompt.setVisibility(0);
            this.tvPicBeautify.setVisibility(8);
            this.ivBeautifyHint.setVisibility(8);
            long floor = (long) Math.floor((double) (localMedia.getDuration() / 1000));
            long parseLong = Long.parseLong(this.videoMinDuration);
            long parseLong2 = Long.parseLong(this.videoMaxDuration);
            if (floor > parseLong2) {
                int i2 = this.editorSwitch;
                if (i2 == 1 || i2 == 2) {
                    this.mPrompt.setCompoundDrawablesWithIntrinsicBounds(ContextCompat.getDrawable(this, R.drawable.lib_uni_album_preview_video_clipping_icon), (Drawable) null, (Drawable) null, (Drawable) null);
                    this.mPrompt.setTextColor(getResources().getColor(R.color.lib_uni_album_preview_cut_font_color));
                    this.mPrompt.setTextSize(12.0f);
                    this.mPrompt.setText(getString(R.string.uni_album_over_ten_seconds_prompt));
                } else if (i2 == 3) {
                    this.mPrompt.setTextSize(15.0f);
                    this.mPrompt.setText(getString(R.string.uni_album_video_beautify_clip));
                    this.mPrompt.setTextColor(-1);
                    this.mPrompt.setCompoundDrawablesWithIntrinsicBounds((Drawable) null, (Drawable) null, (Drawable) null, (Drawable) null);
                } else {
                    this.mPrompt.setVisibility(8);
                }
                this.mSelectContainer.setVisibility(8);
            } else if (floor >= parseLong && floor <= parseLong2) {
                if (this.editorSwitch != 0) {
                    this.mPrompt.setTextColor(-1);
                    this.mPrompt.setTextSize(15.0f);
                    this.mPrompt.setText(getString(R.string.uni_album_video_beautify_clip));
                    this.mPrompt.setCompoundDrawablesWithIntrinsicBounds((Drawable) null, (Drawable) null, (Drawable) null, (Drawable) null);
                } else {
                    this.mPrompt.setVisibility(8);
                }
                this.mSelectContainer.setVisibility(0);
            }
        } else {
            this.mPrompt.setVisibility(8);
            this.mSelectContainer.setVisibility(0);
            if (this.canBeautifyPic || (i = this.cropShape) == 0 || i == 1) {
                this.tvPicBeautify.setVisibility(0);
            } else {
                this.tvPicBeautify.setVisibility(8);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void selectPicture(LocalMedia localMedia) {
        if (this.mSelectedMedia.size() != this.needSelectCount) {
            boolean isHaveVideo = isHaveVideo();
            boolean isVideo = PictureMimeType.isVideo(localMedia.getPictureType());
            if (!isHaveVideo || !isVideo) {
                this.mSelect.setImageResource(R.drawable.lib_uni_album_image_select_icon);
                localMedia.setPicked(true);
                if (isVideo) {
                    this.mSelectedMedia.add(0, localMedia);
                } else {
                    this.mSelectedMedia.add(localMedia);
                }
                this.mSelectPictureAdapter.notifyDataSetChanged();
                this.mListView.scrollTo(SCROLL_TO_RIGHT);
                return;
            }
            Toast.makeText((Context) this, (CharSequence) getString(R.string.uni_album_one_video_at_most), 0).show();
        } else if (isHaveVideo()) {
            Toast.makeText((Context) this, (CharSequence) getString(R.string.uni_album_video_picture_limit), 0).show();
        } else {
            Toast.makeText((Context) this, (CharSequence) getString(R.string.uni_album_select_max_toast, new Object[]{Integer.valueOf(this.needSelectCount)}), 0).show();
        }
    }

    private void setPickState(boolean z, LocalMedia localMedia) {
        if (z) {
            cancelSelectedPicture(localMedia);
        } else {
            selectPicture(localMedia);
        }
        showListView();
        setCompleteProgress();
    }

    protected void onDestroy() {
        PicturePreviewActivity.super.onDestroy();
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        PicturePreviewActivity.super.onActivityResult(i, i2, intent);
        if (i2 == -1) {
            switch (i) {
                case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                    ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
                    if ((arrayList == null || arrayList.size() < this.needSelectCount) && intent != null) {
                        String stringExtra = intent.getStringExtra(VideoConstant.VIDEO_EDITOR_OUT_PATH);
                        if (!UnStringUtils.isEmpty(stringExtra) && new File(stringExtra).exists()) {
                            long videoDuration = FileUtil.getVideoDuration(stringExtra);
                            String createVideoType = PictureMimeType.createVideoType(stringExtra);
                            if (!UnStringUtils.isEmpty(createVideoType)) {
                                if (TextUtils.equals(this.editorMediaPath, stringExtra)) {
                                    LocalMedia localMedia = this.mCurrentPhotoList.get(this.mCurrentPosition);
                                    if (!localMedia.isPicked()) {
                                        localMedia.setPicked(true);
                                        this.mCurrentPhotoList.set(this.mCurrentPosition, localMedia);
                                        this.mPreviewPictureAdapter.notifyDataSetChanged();
                                        removeFirstVideo();
                                        if (this.mSelectedMedia != null) {
                                            addSelectedVideo(localMedia);
                                        }
                                    }
                                } else {
                                    LocalMedia localMedia2 = new LocalMedia(stringExtra, videoDuration, true, createVideoType);
                                    this.mCurrentPhotoList.get(this.mCurrentPosition).setPicked(false);
                                    setNewMediaPosition(localMedia2);
                                    this.mEditVideos.add(localMedia2);
                                    removeFirstVideo();
                                    addSelectedVideo(localMedia2);
                                }
                                showListView();
                                setCompleteProgress();
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                case Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE:
                    ArrayList<LocalMedia> arrayList2 = this.mSelectedMedia;
                    if ((arrayList2 == null || arrayList2.size() < this.needSelectCount) && intent != null && intent.getBooleanExtra("editorReturn", false)) {
                        String stringExtra2 = intent.getStringExtra(ImageConstant.IMAGE_EDITOR_RETURN_PATH);
                        if (!TextUtils.isEmpty(stringExtra2) && new File(stringExtra2).exists()) {
                            if (TextUtils.equals(this.editorMediaPath, stringExtra2)) {
                                LocalMedia localMedia3 = this.mCurrentPhotoList.get(this.mCurrentPosition);
                                if (!localMedia3.isPicked()) {
                                    localMedia3.setPicked(true);
                                    this.mCurrentPhotoList.set(this.mCurrentPosition, localMedia3);
                                    this.mPreviewPictureAdapter.notifyDataSetChanged();
                                    ArrayList<LocalMedia> arrayList3 = this.mSelectedMedia;
                                    if (arrayList3 != null && !arrayList3.contains(localMedia3)) {
                                        localMedia3.setPicked(true);
                                        this.mSelectedMedia.add(localMedia3);
                                        notifySelectPictureAdapter();
                                    }
                                }
                            } else {
                                LocalMedia localMedia4 = new LocalMedia(stringExtra2, true, true);
                                LocalMedia localMedia5 = this.mCurrentPhotoList.get(this.mCurrentPosition);
                                localMedia5.setPicked(false);
                                setNewMediaPosition(localMedia4);
                                this.picEditorList.add(localMedia4);
                                ArrayList<LocalMedia> arrayList4 = this.mSelectedMedia;
                                if (arrayList4 != null) {
                                    if (arrayList4.contains(localMedia5)) {
                                        int indexOf = this.mSelectedMedia.indexOf(localMedia5);
                                        localMedia4.setPicked(true);
                                        this.mSelectedMedia.set(indexOf, localMedia4);
                                        notifySelectPictureAdapter();
                                    } else {
                                        localMedia4.setPicked(true);
                                        this.mSelectedMedia.add(localMedia4);
                                        notifySelectPictureAdapter();
                                    }
                                }
                            }
                            showListView();
                            setCompleteProgress();
                            return;
                        }
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    private void addSelectedVideo(LocalMedia localMedia) {
        localMedia.setPicked(true);
        this.mSelectedMedia.add(0, localMedia);
        notifySelectPictureAdapter();
    }

    private void notifySelectPictureAdapter() {
        this.mSelectPictureAdapter.setSelectedMedias(this.mSelectedMedia);
        this.mSelect.setImageResource(R.drawable.lib_uni_album_image_select_icon);
        this.mSelect.setVisibility(0);
    }

    private void setNewMediaPosition(LocalMedia localMedia) {
        this.mCurrentPosition++;
        this.mCurrentPhotoList.add(this.mCurrentPosition, localMedia);
        this.mPreviewPictureAdapter.notifyDataSetChanged();
        this.mViewPager.setCurrentItem(this.mCurrentPosition);
    }

    @Override // com.p051jd.lib.unification.album.adapter.SelectPictureAdapter.DeletePictureCallBack
    public void onDelete(LocalMedia localMedia) {
        ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
        if (arrayList != null && arrayList.size() > 0) {
            localMedia.setPicked(false);
            this.mSelectedMedia.remove(localMedia);
            this.mSelectPictureAdapter.notifyDataSetChanged();
            ArrayList<LocalMedia> arrayList2 = this.mCurrentPhotoList;
            if (arrayList2 != null && this.mCurrentPosition >= 0 && arrayList2.size() > 0) {
                LocalMedia localMedia2 = this.mCurrentPhotoList.get(this.mCurrentPosition);
                if (localMedia2.getPath().equals(localMedia.getPath())) {
                    localMedia2.setPicked(false);
                    this.mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
                }
                showListView();
                setCompleteProgress();
            }
        }
    }

    private void cancelSelectedPicture(LocalMedia localMedia) {
        ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
        if (arrayList != null && arrayList.size() > 0) {
            localMedia.setPicked(false);
            this.mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
            Iterator<LocalMedia> it = this.mSelectedMedia.iterator();
            while (it.hasNext()) {
                if (it.next().getPath().equals(localMedia.getPath())) {
                    it.remove();
                }
            }
            this.mSelectPictureAdapter.notifyDataSetChanged();
        }
    }

    private void removeFirstVideo() {
        ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
        if (arrayList != null && arrayList.size() > 0 && PictureMimeType.isVideo(this.mSelectedMedia.get(0).getPictureType())) {
            this.mSelectedMedia.remove(0);
        }
    }

    private void clickSelectButton() {
        ArrayList<LocalMedia> arrayList = this.mCurrentPhotoList;
        if (arrayList != null && this.mCurrentPosition >= 0 && arrayList.size() > 0) {
            LocalMedia localMedia = this.mCurrentPhotoList.get(this.mCurrentPosition);
            setPickState(localMedia.isPicked(), localMedia);
        }
    }

    @Override // android.view.View.OnClickListener
    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.lib_ec_preview_back_container) {
            onCooActivityBack("1");
        } else if (id == R.id.lib_ec_preview_select_container) {
            clickSelectButton();
        } else if (id == R.id.lib_ec_album_preview_prompt) {
            LocalMedia localMedia = this.mCurrentPhotoList.get(this.mCurrentPosition);
            if (PictureMimeType.isVideo(localMedia.getPictureType()) && !UnStringUtils.isEmpty(this.videoMinDuration) && !UnStringUtils.isEmpty(this.videoMaxDuration)) {
                goVideoEditorActivity(localMedia);
            }
        } else if (id == R.id.lib_ec_album_preview_pic_beautify) {
            goPicEditorActivity(this.mCurrentPhotoList.get(this.mCurrentPosition));
        } else if (id == R.id.lib_ec_photo_album_confirm) {
            onConfirm();
        } else if (id != R.id.lib_ec_album_preview_title_bar) {
            int i = R.id.lib_ec_album_preview_bottom;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void goVideoEditorActivity(LocalMedia localMedia) {
        if (!UnStringUtils.isEmpty(localMedia.getPath()) && this.editorSwitch != 0) {
            this.editorMediaPath = localMedia.getPath();
            Intent intent = new Intent((Context) this, (Class<?>) VideoEditorActivity.class);
            VideoParam videoParam = new VideoParam();
            videoParam.editorVideoPath = localMedia.getPath();
            videoParam.cutMaxTime = Long.parseLong(this.videoMaxDuration) * 1000;
            videoParam.cutMinTime = Long.parseLong(this.videoMinDuration) * 1000;
            videoParam.editorFunctionControl = this.editorSwitch - 1;
            intent.putExtra(VideoConstant.VIDEO_PARAM, videoParam);
            startActivityForResult(intent, Const.OPEN_VIDEO_EDITOR_REQUEST_CODE);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void goPicEditorActivity(LocalMedia localMedia) {
        Intent intent = new Intent((Context) this, (Class<?>) ImageEditorActivity.class);
        this.editorMediaPath = localMedia.getPath();
        ImageParam imageParam = new ImageParam();
        imageParam.editorImagePath = localMedia.getPath();
        int i = this.cropShape;
        int i2 = 1;
        if ((i == 0 || i == 1) && this.canBeautifyPic) {
            i2 = 0;
        } else {
            int i3 = this.cropShape;
            if (!(i3 == 0 || i3 == 1)) {
                i2 = this.canBeautifyPic ? 2 : -1;
            }
        }
        imageParam.editorFunction = i2;
        imageParam.cropShape = this.cropShape;
        imageParam.cropCircleRadius = this.cropCircleRadius;
        imageParam.cropRectX = this.cropRectX;
        imageParam.cropRectY = this.cropRectY;
        intent.putExtra(ImageConstant.IMAGE_PARAM, imageParam);
        startActivityForResult(intent, Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE);
    }

    public void onBackPressed() {
        onCooActivityBack(IBack.PHOTO_BACK);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeNewEditVideo() {
        Iterator<LocalMedia> it = this.mCurrentPhotoList.iterator();
        while (it.hasNext()) {
            String path = it.next().getPath();
            if (!UnStringUtils.isEmpty(path)) {
                Iterator<LocalMedia> it2 = this.mEditVideos.iterator();
                while (it2.hasNext()) {
                    if (path.equals(it2.next().getPath())) {
                        it.remove();
                    }
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void initSelectedStatus(ArrayList<LocalMedia> arrayList) {
        ArrayList<LocalMedia> arrayList2 = this.mSelectedMedia;
        if (arrayList2 != null && arrayList2.size() > 0) {
            String path = this.mSelectedMedia.get(0).getPath();
            Iterator<LocalMedia> it = arrayList.iterator();
            while (it.hasNext()) {
                LocalMedia next = it.next();
                if (UnStringUtils.isEmpty(path) || !path.equals(next.getPath())) {
                    next.setPicked(false);
                } else {
                    next.setPicked(true);
                }
            }
        }
    }

    private void onConfirm() {
        Intent intent = new Intent();
        intent.putParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS, this.mSelectedMedia);
        intent.putExtra("back_finish", true);
        setResult(-1, intent);
        finish();
    }

    private boolean isHaveVideo() {
        ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
        if (arrayList == null || arrayList.size() == 0) {
            return false;
        }
        String pictureType = this.mSelectedMedia.get(0).getPictureType();
        if (UnStringUtils.isEmpty(pictureType) || !PictureMimeType.isVideo(pictureType)) {
            return false;
        }
        return true;
    }

    private void setCompleteProgress() {
        ArrayList<LocalMedia> arrayList = this.mSelectedMedia;
        if (arrayList == null || arrayList.size() <= 0) {
            this.mConfirm.setEnabled(false);
            this.mListView.setVisibility(8);
            this.mConfirm.setText(getString(R.string.uni_album_complete));
            return;
        }
        this.mListView.setVisibility(0);
        this.mConfirm.setEnabled(true);
        Button button = this.mConfirm;
        button.setText(getString(R.string.uni_album_complete) + " " + this.mSelectedMedia.size() + "/" + this.needSelectCount);
    }

    @Override // com.p051jd.lib.unification.album.mInterface.IBack
    public void onCooActivityBack(String str) {
        DropDownViewPager dropDownViewPager = this.mViewPager;
        if (dropDownViewPager != null) {
            dropDownViewPager.finishWithAnimation(str);
        }
    }
}
