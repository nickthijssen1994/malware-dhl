package com.p051jd.lib.unification.video.editor;

import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.MediaMetadataRetriever;
import android.os.Handler;
import android.os.Message;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.video.editor.VideoExtractFrameUtils */
/* loaded from: classes.dex */
public class VideoExtractFrameUtils {
    private int extractH;
    private int extractW;
    private Handler mHandler;
    private volatile boolean stop;

    public VideoExtractFrameUtils(int i, int i2, Handler handler) {
        this.mHandler = handler;
        this.extractW = i;
        this.extractH = i2;
    }

    public void getVideoThumbnailsInfoForEdit(String str, String str2, long j, long j2, int i) {
        long j3;
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        mediaMetadataRetriever.setDataSource(str);
        if (i == 1) {
            j3 = j2 - j;
        } else {
            j3 = (j2 - j) / ((long) (i - 1));
        }
        int i2 = 0;
        while (true) {
            if (i2 >= i) {
                break;
            } else if (this.stop) {
                mediaMetadataRetriever.release();
                break;
            } else {
                long j4 = (((long) i2) * j3) + j;
                if (i2 != i - 1) {
                    sendAPic(extractFrame(mediaMetadataRetriever, j4, str2), j4);
                } else if (j3 > 1000) {
                    long j5 = j2 - 800;
                    sendAPic(extractFrame(mediaMetadataRetriever, j5, str2), j5);
                } else {
                    sendAPic(extractFrame(mediaMetadataRetriever, j2, str2), j2);
                }
                i2++;
            }
        }
        mediaMetadataRetriever.release();
    }

    private void sendAPic(String str, long j) {
        VideoEditInfo videoEditInfo = new VideoEditInfo();
        videoEditInfo.path = str;
        videoEditInfo.time = j;
        Message obtainMessage = this.mHandler.obtainMessage(0);
        obtainMessage.obj = videoEditInfo;
        this.mHandler.sendMessage(obtainMessage);
    }

    private String extractFrame(MediaMetadataRetriever mediaMetadataRetriever, long j, String str) {
        Bitmap frameAtTime = mediaMetadataRetriever.getFrameAtTime(1000 * j, 2);
        if (frameAtTime == null) {
            return null;
        }
        Bitmap scaleImage = scaleImage(frameAtTime);
        String saveImageToSDForEdit = PictureUtils.saveImageToSDForEdit(scaleImage, str, System.currentTimeMillis() + "_" + j + PictureUtils.POSTFIX);
        if (scaleImage != null && !scaleImage.isRecycled()) {
            scaleImage.recycle();
        }
        return saveImageToSDForEdit;
    }

    private Bitmap scaleImage(Bitmap bitmap) {
        if (bitmap == null) {
            return null;
        }
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        float f = (((float) this.extractW) * 1.0f) / ((float) width);
        Matrix matrix = new Matrix();
        matrix.postScale(f, f);
        Bitmap createBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
        if (!bitmap.isRecycled()) {
            bitmap.recycle();
        }
        return createBitmap;
    }

    public void stopExtract() {
        this.stop = true;
    }
}
