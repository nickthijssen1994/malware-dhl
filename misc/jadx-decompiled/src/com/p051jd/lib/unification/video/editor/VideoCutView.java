package com.p051jd.lib.unification.video.editor;

import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.Resources;
import android.media.MediaPlayer;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.animation.LinearInterpolator;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.p051jd.lib.unification.album.filter.video.VideoUtil;
import com.p051jd.lib.unification.video.VideoToast;
import com.p051jd.lib.unification.video.editor.RangeSeekBar;
import com.p051jd.lib.unification.video.editor.VideoClip;
import com.p051jd.lib.unification.video.view.util.VideoInfoUtil;
import java.io.File;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.video.editor.VideoCutView */
/* loaded from: classes.dex */
public class VideoCutView extends RelativeLayout {
    private static final int MAX_COUNT_RANGE = 10;
    private final String TAG;
    private ValueAnimator animator;
    private float averageMsPx;
    private float averagePxMs;
    private long duration;
    private Handler handler;
    private boolean isOverScaledTouchSlop;
    private boolean isSeeking;
    private int lastScrollX;
    private long leftProgress;
    private int leftRightMargin;
    private Context mContext;
    private ExtractFrameWorkThread mExtractFrameWorkThread;
    private int mMaxWidth;
    private final RangeSeekBar.OnRangeSeekBarChangeListener mOnRangeSeekBarChangeListener;
    private final RecyclerView.OnScrollListener mOnScrollListener;
    private long mProgress;
    private RecyclerView mRecyclerView;
    private int mScaledTouchSlop;
    private MainHandler mUIHandler;
    private long maxCutDuration;
    private MediaPlayer mediaPlayer;
    private long minCutDuration;
    private String outPutFileDirPath;
    private View positionLine;
    private long rightProgress;
    private Runnable run;
    private long scrollPos;
    private RangeSeekBar seekBar;
    private LinearLayout seekBarLayout;
    private View seekBarLeftView;
    private View seekBarRightView;
    private VideoEditAdapter videoEditAdapter;
    private VideoInfoUtil videoInfoUtil;
    private String videoPath;

    public VideoCutView(Context context) {
        this(context, null);
    }

    public VideoCutView(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public VideoCutView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.TAG = VideoCutView.class.getSimpleName();
        this.maxCutDuration = 10000;
        this.minCutDuration = 3000;
        this.mProgress = -1;
        this.scrollPos = 0;
        this.mediaPlayer = null;
        this.leftRightMargin = 15;
        this.mOnScrollListener = new RecyclerView.OnScrollListener() { // from class: com.jd.lib.unification.video.editor.VideoCutView.1
            public void onScrollStateChanged(RecyclerView recyclerView, int i2) {
                VideoCutView.super.onScrollStateChanged(recyclerView, i2);
                if (i2 == 0) {
                    VideoCutView.this.isSeeking = false;
                    if (VideoCutView.this.mediaPlayer != null && !VideoCutView.this.mediaPlayer.isPlaying()) {
                        VideoCutView.this.mediaPlayer.seekTo((int) VideoCutView.this.leftProgress);
                        return;
                    }
                    return;
                }
                VideoCutView.this.isSeeking = true;
                if (VideoCutView.this.isOverScaledTouchSlop && VideoCutView.this.mediaPlayer != null && VideoCutView.this.mediaPlayer.isPlaying()) {
                    VideoCutView.this.videoPause();
                }
            }

            public void onScrolled(RecyclerView recyclerView, int i2, int i3) {
                VideoCutView.super.onScrolled(recyclerView, i2, i3);
                LinearLayoutManager layoutManager = recyclerView.getLayoutManager();
                if (layoutManager instanceof LinearLayoutManager) {
                    LinearLayoutManager linearLayoutManager = layoutManager;
                    int findFirstCompletelyVisibleItemPosition = linearLayoutManager.findFirstCompletelyVisibleItemPosition();
                    int findLastCompletelyVisibleItemPosition = linearLayoutManager.findLastCompletelyVisibleItemPosition();
                    if (findFirstCompletelyVisibleItemPosition == 0) {
                        VideoCutView.this.seekBarLeftView.setBackgroundDrawable(null);
                    } else {
                        VideoCutView.this.seekBarLeftView.setBackgroundResource(R.drawable.lib_uni_video_editor_overlay_black);
                    }
                    if (findLastCompletelyVisibleItemPosition == VideoCutView.this.videoEditAdapter.getItemCount() - 1) {
                        VideoCutView.this.seekBarRightView.setBackgroundDrawable(null);
                    } else {
                        VideoCutView.this.seekBarRightView.setBackgroundResource(R.drawable.lib_uni_video_editor_overlay_black);
                    }
                }
                VideoCutView.this.isSeeking = false;
                int scrollXDistance = VideoCutView.this.getScrollXDistance();
                if (Math.abs(VideoCutView.this.lastScrollX - scrollXDistance) < VideoCutView.this.mScaledTouchSlop) {
                    VideoCutView.this.isOverScaledTouchSlop = false;
                    return;
                }
                VideoCutView.this.isOverScaledTouchSlop = true;
                if (scrollXDistance == (-DpiUtil.dip2px(VideoCutView.this.mContext, (float) VideoCutView.this.leftRightMargin))) {
                    VideoCutView.this.scrollPos = 0;
                } else {
                    if (VideoCutView.this.mediaPlayer != null && VideoCutView.this.mediaPlayer.isPlaying()) {
                        VideoCutView.this.videoPause();
                    }
                    VideoCutView.this.isSeeking = true;
                    VideoCutView videoCutView = VideoCutView.this;
                    videoCutView.scrollPos = (long) (videoCutView.averageMsPx * ((float) (DpiUtil.dip2px(VideoCutView.this.mContext, (float) VideoCutView.this.leftRightMargin) + scrollXDistance)));
                    VideoCutView videoCutView2 = VideoCutView.this;
                    videoCutView2.leftProgress = videoCutView2.seekBar.getSelectedMinValue() + VideoCutView.this.scrollPos;
                    VideoCutView videoCutView3 = VideoCutView.this;
                    videoCutView3.rightProgress = videoCutView3.seekBar.getSelectedMaxValue() + VideoCutView.this.scrollPos;
                    if (VideoCutView.this.mediaPlayer != null) {
                        VideoCutView.this.mediaPlayer.seekTo((int) VideoCutView.this.leftProgress);
                    }
                }
                VideoCutView.this.lastScrollX = scrollXDistance;
            }
        };
        this.handler = new Handler();
        this.run = new Runnable() { // from class: com.jd.lib.unification.video.editor.VideoCutView.2
            @Override // java.lang.Runnable
            public void run() {
                VideoCutView.this.videoProgressUpdate();
                VideoCutView.this.handler.postDelayed(VideoCutView.this.run, 1000);
            }
        };
        this.mOnRangeSeekBarChangeListener = new RangeSeekBar.OnRangeSeekBarChangeListener() { // from class: com.jd.lib.unification.video.editor.VideoCutView.4
            @Override // com.p051jd.lib.unification.video.editor.RangeSeekBar.OnRangeSeekBarChangeListener
            public void onRangeSeekBarValuesChanged(RangeSeekBar rangeSeekBar, long j, long j2, int i2, boolean z, RangeSeekBar.Thumb thumb) {
                VideoToast.cancel();
                VideoCutView videoCutView = VideoCutView.this;
                videoCutView.leftProgress = j + videoCutView.scrollPos;
                VideoCutView videoCutView2 = VideoCutView.this;
                videoCutView2.rightProgress = j2 + videoCutView2.scrollPos;
                switch (i2) {
                    case 0:
                        VideoCutView.this.isSeeking = false;
                        VideoCutView.this.videoPause();
                        return;
                    case 1:
                        VideoCutView.this.isSeeking = false;
                        if (VideoCutView.this.rightProgress - VideoCutView.this.leftProgress < VideoCutView.this.minCutDuration + 1000) {
                            Context context2 = VideoCutView.this.mContext;
                            Resources resources = VideoCutView.this.mContext.getResources();
                            int i3 = R.string.uni_video_editor_mintip;
                            VideoToast.showToast(context2, resources.getString(i3, (VideoCutView.this.minCutDuration / 1000) + ""), DpiUtil.dip2px(VideoCutView.this.mContext, 140.0f));
                        }
                        if (VideoCutView.this.rightProgress - VideoCutView.this.leftProgress >= VideoCutView.this.maxCutDuration) {
                            Context context3 = VideoCutView.this.mContext;
                            Resources resources2 = VideoCutView.this.mContext.getResources();
                            int i4 = R.string.uni_video_editor_maxtip;
                            VideoToast.showToast(context3, resources2.getString(i4, (VideoCutView.this.maxCutDuration / 1000) + ""), DpiUtil.dip2px(VideoCutView.this.mContext, 140.0f));
                        }
                        VideoCutView.this.mediaPlayer.seekTo((int) VideoCutView.this.leftProgress);
                        return;
                    case 2:
                        VideoCutView.this.isSeeking = true;
                        VideoCutView.this.mediaPlayer.seekTo((int) (thumb == RangeSeekBar.Thumb.MIN ? VideoCutView.this.leftProgress : VideoCutView.this.rightProgress));
                        return;
                    default:
                        return;
                }
            }
        };
        this.mContext = context;
        this.mUIHandler = new MainHandler();
        LayoutInflater.from(context).inflate(R.layout.lib_uni_video_cut_view, this);
        initView();
    }

    private void initView() {
        this.seekBarLayout = (LinearLayout) findViewById(R.id.id_seekBarLayout);
        this.positionLine = findViewById(R.id.positionLine);
        this.mRecyclerView = findViewById(R.id.id_rv_id);
        this.mRecyclerView.setLayoutManager(new LinearLayoutManager(this.mContext, 0, false));
        this.seekBarLeftView = findViewById(R.id.seekBarLeft);
        this.seekBarRightView = findViewById(R.id.seekBarRight);
    }

    public void initData(String str, MediaPlayer mediaPlayer, VideoInfoUtil videoInfoUtil) {
        int i;
        this.mediaPlayer = mediaPlayer;
        this.videoPath = str;
        this.videoInfoUtil = videoInfoUtil;
        this.duration = Long.parseLong(this.videoInfoUtil.getVideoLength());
        this.mMaxWidth = DpiUtil.getWidth(this.mContext) - DpiUtil.dip2px(this.mContext, (float) (this.leftRightMargin * 2));
        this.mScaledTouchSlop = ViewConfiguration.get(this.mContext).getScaledTouchSlop();
        this.videoEditAdapter = new VideoEditAdapter(this.mContext, this.mMaxWidth / 10);
        this.mRecyclerView.setAdapter(this.videoEditAdapter);
        this.mRecyclerView.addOnScrollListener(this.mOnScrollListener);
        long j = this.duration;
        boolean z = j > this.maxCutDuration;
        int i2 = (int) (((((float) j) * 1.0f) / (((float) this.maxCutDuration) * 1.0f)) * 10.0f);
        int i3 = (this.mMaxWidth / 10) * i2;
        this.mRecyclerView.addItemDecoration(new EditSpacingItemDecoration(DpiUtil.dip2px(this.mContext, (float) this.leftRightMargin), i2, 10));
        if (z) {
            this.seekBar = new RangeSeekBar(this.mContext, 0, this.maxCutDuration);
            this.seekBar.setSelectedMinValue(0);
            this.seekBar.setSelectedMaxValue(this.maxCutDuration);
        } else {
            this.seekBar = new RangeSeekBar(this.mContext, 0, j);
            this.seekBar.setSelectedMinValue(0);
            this.seekBar.setSelectedMaxValue(j);
        }
        this.seekBar.setMinCutTime(this.minCutDuration);
        this.seekBar.setNotifyWhileDragging(true);
        this.seekBar.setOnRangeSeekBarChangeListener(this.mOnRangeSeekBarChangeListener);
        int i4 = this.mMaxWidth;
        int i5 = i3 < i4 ? i3 : i4;
        this.seekBarLayout.addView(this.seekBar, new LinearLayout.LayoutParams(i5, -1));
        this.averageMsPx = ((((float) this.duration) * 1.0f) / ((float) i3)) * 1.0f;
        this.outPutFileDirPath = PictureUtils.getSaveEditThumbnailDir(this.mContext);
        this.mExtractFrameWorkThread = new ExtractFrameWorkThread(this.mMaxWidth / 10, DpiUtil.dip2px(this.mContext, 55.0f), this.mUIHandler, str, this.outPutFileDirPath, 0, j, i2);
        this.mExtractFrameWorkThread.start();
        this.leftProgress = 0;
        if (z) {
            this.rightProgress = this.maxCutDuration;
            i = i5;
        } else {
            this.rightProgress = j;
            i = i5;
        }
        this.averagePxMs = (((float) i) * 1.0f) / ((float) (this.rightProgress - this.leftProgress));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getScrollXDistance() {
        if (!(this.mRecyclerView.getLayoutManager() instanceof LinearLayoutManager)) {
            return 0;
        }
        LinearLayoutManager layoutManager = this.mRecyclerView.getLayoutManager();
        int findFirstVisibleItemPosition = layoutManager.findFirstVisibleItemPosition();
        View findViewByPosition = layoutManager.findViewByPosition(findFirstVisibleItemPosition);
        return (findFirstVisibleItemPosition * findViewByPosition.getWidth()) - findViewByPosition.getLeft();
    }

    public void start() {
        this.positionLine.clearAnimation();
        ValueAnimator valueAnimator = this.animator;
        if (valueAnimator != null && valueAnimator.isRunning()) {
            this.animator.cancel();
        }
        anim();
        this.handler.removeCallbacks(this.run);
        this.handler.post(this.run);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void videoProgressUpdate() {
        long currentPosition = (long) this.mediaPlayer.getCurrentPosition();
        if (currentPosition >= this.rightProgress || currentPosition == this.mProgress) {
            this.mediaPlayer.seekTo((int) this.leftProgress);
            this.mProgress = -1;
            return;
        }
        this.mProgress = currentPosition;
    }

    private void anim() {
        if (this.positionLine.getVisibility() == 8) {
            this.positionLine.setVisibility(0);
        }
        final RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) this.positionLine.getLayoutParams();
        this.animator = ValueAnimator.ofInt((int) (((float) DpiUtil.dip2px(this.mContext, (float) this.leftRightMargin)) + (((float) (this.leftProgress - this.scrollPos)) * this.averagePxMs)), (int) (((float) DpiUtil.dip2px(this.mContext, (float) this.leftRightMargin)) + (((float) (this.rightProgress - this.scrollPos)) * this.averagePxMs))).setDuration(this.rightProgress - this.leftProgress);
        this.animator.setInterpolator(new LinearInterpolator());
        this.animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.video.editor.VideoCutView.3
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                layoutParams.leftMargin = ((Integer) valueAnimator.getAnimatedValue()).intValue();
                VideoCutView.this.positionLine.requestLayout();
            }
        });
        this.animator.start();
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.video.editor.VideoCutView$MainHandler */
    /* loaded from: classes.dex */
    private class MainHandler extends Handler {
        private MainHandler() {
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            if (message.what == 0 && VideoCutView.this.videoEditAdapter != null && (message.obj instanceof VideoEditInfo)) {
                VideoCutView.this.videoEditAdapter.addItemVideoInfo((VideoEditInfo) message.obj);
            }
        }
    }

    public void videoPause() {
        this.isSeeking = false;
        this.handler.removeCallbacks(this.run);
        MediaPlayer mediaPlayer = this.mediaPlayer;
        if (mediaPlayer != null && mediaPlayer.isPlaying()) {
            this.mediaPlayer.pause();
        }
        if (this.positionLine.getVisibility() == 0) {
            this.positionLine.setVisibility(8);
        }
        this.positionLine.clearAnimation();
        ValueAnimator valueAnimator = this.animator;
        if (valueAnimator != null && valueAnimator.isRunning()) {
            this.animator.cancel();
        }
    }

    public long getLeftProgress() {
        return this.leftProgress;
    }

    public long getRightProgress() {
        return this.rightProgress;
    }

    public void setMaxCutDuration(long j) {
        this.maxCutDuration = j;
    }

    public void setMinCutDuration(long j) {
        this.minCutDuration = j;
    }

    public boolean isNeedCut() {
        if (this.leftProgress != 0) {
            return true;
        }
        long j = this.rightProgress;
        return (j == this.duration || j == this.maxCutDuration) ? false : true;
    }

    public void cutVideo(VideoClip.ClipFinishListener clipFinishListener) {
        double d = (double) this.leftProgress;
        Double.isNaN(d);
        double d2 = d / 1000.0d;
        long j = this.rightProgress;
        double d3 = (double) j;
        Double.isNaN(d3);
        double d4 = d3 / 1000.0d;
        long j2 = this.duration;
        boolean z = j2 > this.maxCutDuration && j2 - j < 1000;
        if (this.leftProgress != 0 || (this.rightProgress != this.duration && !z)) {
            VideoClipUtils.videoClip(this.videoPath, VideoUtil.createOutVideoPath(this.videoPath), VideoUtil.createOutVideoName(this.videoPath), d2, d4, clipFinishListener);
        } else if (clipFinishListener != null) {
            clipFinishListener.onClipSuccess(this.videoPath);
        }
    }

    public void destory() {
        ValueAnimator valueAnimator = this.animator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        RecyclerView recyclerView = this.mRecyclerView;
        if (recyclerView != null) {
            recyclerView.removeOnScrollListener(this.mOnScrollListener);
        }
        ExtractFrameWorkThread extractFrameWorkThread = this.mExtractFrameWorkThread;
        if (extractFrameWorkThread != null) {
            extractFrameWorkThread.stopExtract();
        }
        this.mUIHandler.removeCallbacksAndMessages(null);
        this.handler.removeCallbacksAndMessages(null);
        if (!TextUtils.isEmpty(this.outPutFileDirPath)) {
            PictureUtils.deleteFile(new File(this.outPutFileDirPath));
        }
    }
}
