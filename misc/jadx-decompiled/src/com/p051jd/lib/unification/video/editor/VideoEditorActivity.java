package com.p051jd.lib.unification.video.editor;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.view.View;
import android.view.animation.Animation;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.fragment.app.FragmentActivity;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.ui.JDDialog;
import com.jingdong.common.ui.JDDialogFactory;
import com.p051jd.lib.unification.album.entity.VideoConstant;
import com.p051jd.lib.unification.album.entity.VideoParam;
import com.p051jd.lib.unification.album.filter.FilterTools;
import com.p051jd.lib.unification.album.filter.FilterView;
import com.p051jd.lib.unification.album.filter.filter.CommonFilter;
import com.p051jd.lib.unification.album.filter.filter.CommonFilterGroup;
import com.p051jd.lib.unification.album.filter.video.CommonExtTexFilter;
import com.p051jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux;
import com.p051jd.lib.unification.album.filter.video.VideoSurfaceView;
import com.p051jd.lib.unification.album.filter.video.VideoUtil;
import com.p051jd.lib.unification.video.VideoToast;
import com.p051jd.lib.unification.video.editor.VideoClip;
import com.p051jd.lib.unification.video.view.util.VideoEditorFinishUtil;
import com.p051jd.lib.unification.video.view.util.VideoInfoUtil;
import java.io.File;
import java.util.List;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.video.editor.VideoEditorActivity */
/* loaded from: classes.dex */
public class VideoEditorActivity extends FragmentActivity implements View.OnClickListener {
    private static final int MAX_PROGRESS;
    private static final String TAG;
    private LinearLayout bottomLayot;
    private TextView cancelTv;
    private int currentFunction;
    private int currentProgress;
    private LinearLayout cutBtLayout;
    private TextView cutTv;
    private VideoCutView cutView;
    private long duration;
    private LinearLayout filterBtLayout;
    private TextView filterTv;
    private List<FilterTools.FilterType> filterTypes;
    private FilterView filterView;
    private TextView finishTv;
    private CommonFilter mFilter;
    private String outEditFileName;
    private ProgressBar progressBar;
    private LinearLayout progressbarLayout;
    private RelativeLayout rootLayout;
    private RelativeLayout titleLayout;
    private VideoEditorFinishUtil videoEditorFinishUtil;
    private int videoHeight;
    private VideoInfoUtil videoInfoUtil;
    private int videoOrientation;
    private VideoParam videoParam;
    private String videoPath;
    private RelativeLayout videoViewContainer;
    private int videoWidth;
    private long maxCutDuration = 10000;
    private long minCutDuration = 3000;
    private boolean isFullScreen = false;
    private boolean isSave = false;
    private boolean isEditorSuccess = false;
    private boolean isEditorFailed = false;
    private VideoSurfaceView videoSurfaceView = null;
    private MediaPlayer mediaPlayer = null;
    private FilterTools.FilterType currentFilterType = FilterTools.FilterType.NO_FILTER;
    private int functionControl = 0;
    private boolean isAlreadyToastCut = false;
    private int finishJumpRequestCode = 20;
    private Handler progressHandler = new Handler() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.1
        @Override // android.os.Handler
        public void handleMessage(Message message) {
            VideoEditorActivity.this.progressBar.setProgress(VideoEditorActivity.this.currentProgress);
            if (VideoEditorActivity.this.currentProgress == 100 && VideoEditorActivity.this.isEditorSuccess) {
                VideoEditorActivity videoEditorActivity = VideoEditorActivity.this;
                videoEditorActivity.editorSuccess(videoEditorActivity.outEditFileName);
                VideoEditorActivity.this.progressHandler.removeCallbacks(VideoEditorActivity.this.progressRunnable);
            } else if (VideoEditorActivity.this.isEditorFailed) {
                VideoEditorActivity.this.progressHandler.removeCallbacks(VideoEditorActivity.this.progressRunnable);
            } else {
                VideoEditorActivity.this.progressHandler.postDelayed(VideoEditorActivity.this.progressRunnable, 1000);
            }
        }
    };
    private Runnable progressRunnable = new Runnable() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.2
        @Override // java.lang.Runnable
        public void run() {
            if (VideoEditorActivity.this.isSave) {
                if (((double) VideoEditorActivity.this.currentProgress) < 30.0d) {
                    VideoEditorActivity videoEditorActivity = VideoEditorActivity.this;
                    double d = (double) videoEditorActivity.currentProgress;
                    Double.isNaN(d);
                    videoEditorActivity.currentProgress = (int) (d + 30.0d);
                } else if (((double) VideoEditorActivity.this.currentProgress) >= 30.0d && ((double) VideoEditorActivity.this.currentProgress) < 70.0d) {
                    VideoEditorActivity videoEditorActivity2 = VideoEditorActivity.this;
                    double d2 = (double) videoEditorActivity2.currentProgress;
                    Double.isNaN(d2);
                    videoEditorActivity2.currentProgress = (int) (d2 + 10.0d);
                } else if (((double) VideoEditorActivity.this.currentProgress) >= 70.0d && ((double) VideoEditorActivity.this.currentProgress) < 95.0d) {
                    VideoEditorActivity videoEditorActivity3 = VideoEditorActivity.this;
                    double d3 = (double) videoEditorActivity3.currentProgress;
                    Double.isNaN(d3);
                    videoEditorActivity3.currentProgress = (int) (d3 + 5.0d);
                } else if (((double) VideoEditorActivity.this.currentProgress) >= 95.0d && ((double) VideoEditorActivity.this.currentProgress) < 99.0d) {
                    VideoEditorActivity videoEditorActivity4 = VideoEditorActivity.this;
                    double d4 = (double) videoEditorActivity4.currentProgress;
                    Double.isNaN(d4);
                    videoEditorActivity4.currentProgress = (int) (d4 + 1.0d);
                }
            } else if (VideoEditorActivity.this.isEditorSuccess) {
                VideoEditorActivity.this.currentProgress = 100;
            }
            VideoEditorActivity.this.progressHandler.sendMessage(VideoEditorActivity.this.progressHandler.obtainMessage());
        }
    };

    protected void onCreate(Bundle bundle) {
        VideoEditorActivity.super.onCreate(bundle);
        setContentView(R.layout.lib_uni_video_editor_activity);
        if (getIntent().getSerializableExtra(VideoConstant.VIDEO_PARAM) instanceof VideoParam) {
            this.videoParam = (VideoParam) getIntent().getSerializableExtra(VideoConstant.VIDEO_PARAM);
            VideoParam videoParam = this.videoParam;
            if (videoParam != null) {
                this.videoPath = videoParam.editorVideoPath;
                this.functionControl = this.videoParam.editorFunctionControl;
            }
            if (isValidVideoPath()) {
                if (this.functionControl == 0 && !VideoUtil.isSupportFilter()) {
                    this.functionControl = 1;
                }
                VideoParam videoParam2 = this.videoParam;
                if (videoParam2 != null) {
                    this.maxCutDuration = videoParam2.cutMaxTime;
                    this.minCutDuration = this.videoParam.cutMinTime;
                }
                this.videoEditorFinishUtil = VideoEditorFinishUtil.getInstance();
                this.duration = Long.parseLong(this.videoInfoUtil.getVideoLength());
                initView();
                functionControl();
                videoStart();
            }
        }
    }

    private void initView() {
        this.rootLayout = (RelativeLayout) findViewById(R.id.rootLayout);
        this.rootLayout.setOnClickListener(this);
        this.titleLayout = (RelativeLayout) findViewById(R.id.titleLayout);
        this.bottomLayot = (LinearLayout) findViewById(R.id.bottomLayout);
        this.finishTv = (TextView) findViewById(R.id.finishTv);
        this.cancelTv = (TextView) findViewById(R.id.cancelTv);
        this.finishTv.setOnClickListener(this);
        this.cancelTv.setOnClickListener(this);
        this.filterBtLayout = (LinearLayout) findViewById(R.id.filterBtLayout);
        this.filterTv = (TextView) findViewById(R.id.filterTv);
        this.filterTv.setOnClickListener(this);
        this.cutBtLayout = (LinearLayout) findViewById(R.id.cutBtLayout);
        this.cutTv = (TextView) findViewById(R.id.cutTv);
        this.cutTv.setOnClickListener(this);
        this.progressbarLayout = (LinearLayout) findViewById(R.id.progresslayout);
        this.progressbarLayout.setOnClickListener(this);
        this.progressBar = (ProgressBar) findViewById(R.id.progressBar);
        this.cutView = (VideoCutView) findViewById(R.id.cutView);
        this.filterView = (FilterView) findViewById(R.id.filterView);
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void functionControl() {
        switch (this.functionControl) {
            case 0:
                initCutView();
                initFilterView();
                if (this.duration >= this.maxCutDuration + 1000) {
                    this.cutView.setVisibility(0);
                    this.filterView.setVisibility(8);
                    Resources resources = getResources();
                    int i = R.string.uni_video_editor_need_cut;
                    VideoToast.showToast(this, resources.getString(i, (this.maxCutDuration / 1000) + ""), DpiUtil.dip2px(this, 140.0f));
                    this.cutTv.setSelected(true);
                    this.filterTv.setSelected(false);
                    this.currentFunction = 0;
                    this.isAlreadyToastCut = true;
                    return;
                }
                this.cutView.setVisibility(8);
                this.cutTv.setSelected(false);
                this.filterTv.setSelected(true);
                this.filterView.setVisibility(0);
                this.currentFunction = 1;
                return;
            case 1:
                initCutView();
                this.cutView.setVisibility(0);
                this.filterView.setVisibility(8);
                this.filterBtLayout.setVisibility(8);
                this.cutTv.setSelected(true);
                this.currentFunction = 0;
                if (this.duration >= this.maxCutDuration + 1000) {
                    Resources resources2 = getResources();
                    int i2 = R.string.uni_video_editor_need_cut;
                    VideoToast.showToast(this, resources2.getString(i2, (this.maxCutDuration / 1000) + ""), DpiUtil.dip2px(this, 140.0f));
                } else {
                    VideoToast.showToast(this, getResources().getString(R.string.uni_video_editor_cut), DpiUtil.dip2px(this, 140.0f));
                }
                this.isAlreadyToastCut = true;
                return;
            case 2:
                initFilterView();
                this.cutView.setVisibility(8);
                this.cutBtLayout.setVisibility(8);
                this.filterTv.setSelected(true);
                this.filterView.setVisibility(0);
                this.currentFunction = 1;
                return;
            default:
                return;
        }
    }

    private void initCutView() {
        this.cutView.setMinCutDuration(this.minCutDuration);
        this.cutView.setMaxCutDuration(this.maxCutDuration);
        this.cutView.initData(this.videoPath, this.mediaPlayer, this.videoInfoUtil);
    }

    private void initFilterView() {
        this.filterView.setFilterChangerListener(new FilterView.FilterChangerListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.3
            @Override // com.p051jd.lib.unification.album.filter.FilterView.FilterChangerListener
            public void onFilterChanged(FilterTools.FilterType filterType, CommonFilter commonFilter) {
                VideoEditorActivity.this.currentFilterType = filterType;
                if (VideoEditorActivity.this.mFilter == null || (commonFilter != null && !VideoEditorActivity.this.mFilter.getClass().equals(commonFilter.getClass()))) {
                    VideoEditorActivity.this.mFilter = commonFilter;
                    CommonFilterGroup commonFilterGroup = new CommonFilterGroup();
                    commonFilterGroup.addFilter(new CommonExtTexFilter());
                    commonFilterGroup.addFilter(VideoEditorActivity.this.mFilter);
                    VideoEditorActivity.this.videoSurfaceView.setFilter(commonFilterGroup);
                    VideoEditorActivity.this.mediaPlayer.seekTo((int) VideoEditorActivity.this.cutView.getLeftProgress());
                }
            }
        });
        this.videoInfoUtil.extractFrame(new VideoInfoUtil.VideoFrameAtTimeListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.4
            @Override // com.p051jd.lib.unification.video.view.util.VideoInfoUtil.VideoFrameAtTimeListener
            public void frameAtTime(final Bitmap bitmap) {
                VideoEditorActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.4.1
                    @Override // java.lang.Runnable
                    public void run() {
                        VideoEditorActivity.this.filterView.initData(bitmap, VideoEditorActivity.this.filterTypes);
                    }
                });
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    private boolean initPlayMedia() {
        RelativeLayout.LayoutParams layoutParams;
        this.videoWidth = this.videoInfoUtil.getVideoWidth();
        this.videoHeight = this.videoInfoUtil.getVideoHeight();
        this.videoOrientation = this.videoInfoUtil.getVideoDegree();
        this.mediaPlayer = MediaPlayer.create((Context) this, Uri.parse(this.videoPath));
        MediaPlayer mediaPlayer = this.mediaPlayer;
        if (mediaPlayer == null) {
            return false;
        }
        mediaPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.5
            @Override // android.media.MediaPlayer.OnSeekCompleteListener
            public void onSeekComplete(MediaPlayer mediaPlayer2) {
                VideoEditorActivity.this.videoStart();
            }
        });
        this.mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.6
            @Override // android.media.MediaPlayer.OnCompletionListener
            public void onCompletion(MediaPlayer mediaPlayer2) {
                if (VideoEditorActivity.this.functionControl != 2) {
                    VideoEditorActivity.this.mediaPlayer.seekTo((int) VideoEditorActivity.this.cutView.getLeftProgress());
                }
            }
        });
        int videoDegree = this.videoInfoUtil.getVideoDegree();
        this.videoSurfaceView = new VideoSurfaceView(this, this.mediaPlayer, videoDegree);
        this.videoSurfaceView.setSourceSize(this.videoWidth, this.videoHeight);
        if (videoDegree == 90 || videoDegree == 270) {
            float min = Math.min(((float) DpiUtil.getHeight(this)) / ((float) this.videoWidth), ((float) DpiUtil.getWidth(this)) / ((float) this.videoHeight));
            layoutParams = new RelativeLayout.LayoutParams((int) (((float) this.videoHeight) * min), (int) (((float) this.videoWidth) * min));
        } else {
            float min2 = Math.min(((float) DpiUtil.getHeight(this)) / ((float) this.videoHeight), ((float) DpiUtil.getWidth(this)) / ((float) this.videoWidth));
            layoutParams = new RelativeLayout.LayoutParams((int) (((float) this.videoWidth) * min2), (int) (((float) this.videoHeight) * min2));
        }
        layoutParams.addRule(13);
        this.videoViewContainer = (RelativeLayout) findViewById(R.id.videoViewContainer);
        this.videoViewContainer.addView(this.videoSurfaceView, layoutParams);
        return true;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // android.view.View.OnClickListener
    public void onClick(View view) {
        int id = view.getId();
        VideoToast.cancel();
        if (id == R.id.rootLayout) {
            if (!this.isSave) {
                if (this.isFullScreen) {
                    this.titleLayout.setVisibility(0);
                    int i = this.currentFunction;
                    if (i == 0) {
                        this.cutView.setVisibility(0);
                    } else if (i == 1) {
                        this.filterView.setVisibility(0);
                    }
                    this.bottomLayot.setVisibility(0);
                    this.isFullScreen = false;
                    return;
                }
                this.titleLayout.setVisibility(8);
                int i2 = this.currentFunction;
                if (i2 == 0) {
                    this.cutView.setVisibility(8);
                } else if (i2 == 1) {
                    this.filterView.setVisibility(8);
                }
                this.bottomLayot.setVisibility(8);
                this.isFullScreen = true;
            }
        } else if (id == R.id.filterTv) {
            if (this.currentFunction != 1) {
                this.cutView.setVisibility(8);
                this.filterView.setVisibility(0);
                this.filterTv.setSelected(true);
                this.cutTv.setSelected(false);
                this.currentFunction = 1;
            }
        } else if (id == R.id.cutTv) {
            if (this.currentFunction != 0) {
                this.cutView.setVisibility(0);
                this.filterView.setVisibility(8);
                this.filterTv.setSelected(false);
                this.cutTv.setSelected(true);
                this.currentFunction = 0;
                if (!this.isAlreadyToastCut) {
                    VideoToast.showToast(this, getResources().getString(R.string.uni_video_editor_cut), DpiUtil.dip2px(this, 140.0f));
                    this.isAlreadyToastCut = true;
                }
            }
        } else if (id == R.id.finishTv) {
            videoPause();
            saveVideo();
            this.isSave = true;
            this.isEditorSuccess = false;
            this.isEditorFailed = false;
            this.progressHandler.post(this.progressRunnable);
            int i3 = this.functionControl;
            if (i3 == 0) {
                this.cutView.cutVideo(new VideoClip.ClipFinishListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.7
                    @Override // com.p051jd.lib.unification.video.editor.VideoClip.ClipFinishListener
                    public void onClipSuccess(String str) {
                        VideoEditorActivity videoEditorActivity = VideoEditorActivity.this;
                        videoEditorActivity.addFilter(str, !str.equals(videoEditorActivity.videoPath));
                    }

                    @Override // com.p051jd.lib.unification.video.editor.VideoClip.ClipFinishListener
                    public void onClipFailed(String str) {
                        VideoEditorActivity.this.isEditorFailed = true;
                        VideoEditorActivity.this.isSave = false;
                        VideoUtil.deleteFile(str);
                        VideoEditorActivity videoEditorActivity = VideoEditorActivity.this;
                        videoEditorActivity.editorFailed(videoEditorActivity.getString(R.string.uni_video_cut_failed));
                    }
                });
            } else if (i3 == 1) {
                this.cutView.cutVideo(new VideoClip.ClipFinishListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.8
                    @Override // com.p051jd.lib.unification.video.editor.VideoClip.ClipFinishListener
                    public void onClipSuccess(String str) {
                        VideoEditorActivity.this.outEditFileName = str;
                        VideoEditorActivity.this.isEditorSuccess = true;
                        VideoEditorActivity.this.isSave = false;
                    }

                    @Override // com.p051jd.lib.unification.video.editor.VideoClip.ClipFinishListener
                    public void onClipFailed(String str) {
                        VideoEditorActivity.this.isEditorFailed = true;
                        VideoEditorActivity.this.isSave = false;
                        VideoUtil.deleteFile(str);
                        VideoEditorActivity videoEditorActivity = VideoEditorActivity.this;
                        videoEditorActivity.editorFailed(videoEditorActivity.getString(R.string.uni_video_cut_failed));
                    }
                });
            } else if (i3 == 2) {
                addFilter(this.videoPath, false);
            }
        } else if (id == R.id.cancelTv) {
            back();
        } else {
            int i4 = R.id.progresslayout;
        }
    }

    public void addFilter(final String str, boolean z) {
        this.filterView.addFilter(str, this.videoWidth, this.videoHeight, this.videoOrientation, this.currentFilterType, z, new ExtractDecodeEditEncodeMux.ResultListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.9
            @Override // com.p051jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux.ResultListener
            public void onResult(final boolean z2, final String str2, String str3) {
                VideoEditorActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.9.1
                    @Override // java.lang.Runnable
                    public void run() {
                        if (z2) {
                            VideoEditorActivity.this.isEditorSuccess = true;
                            VideoEditorActivity.this.isSave = false;
                            if (!str.equals(VideoEditorActivity.this.videoPath) && !str.equals(str2)) {
                                new File(str).delete();
                            }
                            VideoEditorActivity.this.outEditFileName = str2;
                            return;
                        }
                        VideoEditorActivity.this.isEditorFailed = true;
                        VideoEditorActivity.this.isSave = false;
                        VideoUtil.deleteFile(str2);
                        VideoEditorActivity.this.editorFailed(VideoEditorActivity.this.getString(R.string.uni_video_add_filter_failed));
                    }
                });
            }
        });
    }

    public void videoStart() {
        this.mediaPlayer.start();
        if (this.functionControl != 2) {
            this.cutView.start();
        }
    }

    private void videoPause() {
        MediaPlayer mediaPlayer = this.mediaPlayer;
        if (mediaPlayer != null && mediaPlayer.isPlaying()) {
            this.mediaPlayer.pause();
            if (this.functionControl != 2) {
                this.cutView.videoPause();
            }
        }
    }

    public void onBackPressed() {
        back();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void back() {
        VideoCutView videoCutView;
        FilterView filterView;
        videoPause();
        if (this.isSave || (((videoCutView = this.cutView) == null || !videoCutView.isNeedCut()) && ((filterView = this.filterView) == null || !filterView.isNeedFilter(this.currentFilterType)))) {
            backIntent();
            finish();
            return;
        }
        final JDDialog createJdDialogWithStyle2 = JDDialogFactory.getInstance().createJdDialogWithStyle2(this, getString(R.string.uni_video_editor_cancel_tip), getString(R.string.uni_video_cancel), getString(R.string.uni_video_ok));
        createJdDialogWithStyle2.setCancelable(false);
        createJdDialogWithStyle2.setOnLeftButtonClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.10
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                createJdDialogWithStyle2.dismiss();
                VideoEditorActivity.this.videoStart();
            }
        });
        createJdDialogWithStyle2.setOnRightButtonClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.11
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                createJdDialogWithStyle2.dismiss();
                VideoEditorActivity.this.backIntent();
                VideoEditorActivity.this.finish();
            }
        });
        createJdDialogWithStyle2.show();
    }

    public void backIntent() {
        Intent intent = getIntent();
        intent.putExtra("editorReturn", false);
        setResult(-1, intent);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void editorFailed(String str) {
        final JDDialog createJdDialogWithStyle2 = JDDialogFactory.getInstance().createJdDialogWithStyle2(this, str, getString(R.string.uni_video_editor_give_up), getString(R.string.uni_video_editor_continue));
        createJdDialogWithStyle2.setCancelable(false);
        createJdDialogWithStyle2.setOnLeftButtonClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.12
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                createJdDialogWithStyle2.dismiss();
                VideoEditorActivity.this.backIntent();
                VideoEditorActivity.this.finish();
            }
        });
        createJdDialogWithStyle2.setOnRightButtonClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.13
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                createJdDialogWithStyle2.dismiss();
                VideoEditorActivity.this.resetDate();
                VideoEditorActivity.this.videoStart();
            }
        });
        createJdDialogWithStyle2.show();
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void editorSuccess(String str) {
        VideoUtil.galleryAddPic(this, new File(str));
        if (this.videoEditorFinishUtil.getListener() != null) {
            this.videoEditorFinishUtil.getListener().onFinish(this, str, this.finishJumpRequestCode);
            return;
        }
        Intent intent = getIntent();
        intent.putExtra(VideoConstant.VIDEO_EDITOR_OUT_PATH, str);
        intent.putExtra("editorReturn", true);
        setResult(-1, intent);
        finish();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void tipDialog(String str) {
        final JDDialog createJdDialogWithStyle1 = JDDialogFactory.getInstance().createJdDialogWithStyle1(this, str, getString(R.string.uni_video_ok));
        createJdDialogWithStyle1.setCancelable(false);
        createJdDialogWithStyle1.setOnLeftButtonClickListener(new View.OnClickListener() { // from class: com.jd.lib.unification.video.editor.VideoEditorActivity.14
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                createJdDialogWithStyle1.dismiss();
                VideoEditorActivity.this.backIntent();
                VideoEditorActivity.this.finish();
            }
        });
        createJdDialogWithStyle1.show();
    }

    private void saveVideo() {
        this.finishTv.startAnimation(VideoUtil.getAlphaAnim(null));
        this.finishTv.setVisibility(8);
        Animation translateYAnim = VideoUtil.getTranslateYAnim(1.0f, null);
        translateYAnim.setDuration(600);
        int i = this.currentFunction;
        if (i == 0) {
            this.cutView.startAnimation(translateYAnim);
            this.cutView.setVisibility(8);
        } else if (i == 1) {
            this.filterView.startAnimation(translateYAnim);
            this.filterView.setVisibility(8);
        }
        this.bottomLayot.startAnimation(translateYAnim);
        this.bottomLayot.setVisibility(8);
        Animation appearTranslateYAnim = VideoUtil.getAppearTranslateYAnim(1.0f, null);
        appearTranslateYAnim.setStartOffset(300);
        this.progressbarLayout.startAnimation(appearTranslateYAnim);
        this.progressbarLayout.setVisibility(0);
    }

    public void resetDate() {
        this.finishTv.clearAnimation();
        this.progressbarLayout.clearAnimation();
        this.bottomLayot.clearAnimation();
        this.cutView.clearAnimation();
        this.filterView.clearAnimation();
        this.finishTv.setVisibility(0);
        this.progressbarLayout.setVisibility(8);
        this.progressBar.setProgress(0);
        this.currentProgress = 0;
        this.bottomLayot.setVisibility(0);
        int i = this.currentFunction;
        if (i == 0) {
            this.cutView.setVisibility(0);
        } else if (i == 1) {
            this.filterView.setVisibility(0);
        }
    }

    private boolean isValidVideoPath() {
        if (TextUtils.isEmpty(this.videoPath) || !new File(this.videoPath).exists() || new File(this.videoPath).length() == 0) {
            tipDialog(getString(R.string.uni_video_no_exists));
        } else if (this.videoPath.endsWith(".avi")) {
            tipDialog(getString(R.string.uni_video_no_support));
        } else if (this.functionControl != 2 || VideoUtil.isSupportFilter()) {
            this.videoInfoUtil = new VideoInfoUtil();
            this.videoInfoUtil.setPath(this.videoPath);
            if (!this.videoInfoUtil.isSetDataSourceSuccess()) {
                tipDialog(getString(R.string.uni_video_play_error));
            } else if (initPlayMedia()) {
                return true;
            } else {
                tipDialog(getString(R.string.uni_video_play_error));
            }
        } else {
            tipDialog(getString(R.string.uni_video_filter_no_support));
        }
        return false;
    }

    protected void onResume() {
        VideoEditorActivity.super.onResume();
        MediaPlayer mediaPlayer = this.mediaPlayer;
        if (mediaPlayer != null) {
            mediaPlayer.seekTo((int) this.cutView.getLeftProgress());
        }
    }

    protected void onPause() {
        VideoEditorActivity.super.onPause();
        MediaPlayer mediaPlayer = this.mediaPlayer;
        if (mediaPlayer != null && mediaPlayer.isPlaying()) {
            videoPause();
        }
    }

    protected void onDestroy() {
        VideoCutView videoCutView;
        VideoEditorActivity.super.onDestroy();
        MediaPlayer mediaPlayer = this.mediaPlayer;
        if (mediaPlayer != null) {
            try {
                mediaPlayer.stop();
                this.mediaPlayer.release();
            } catch (Exception unused) {
            }
            this.mediaPlayer = null;
        }
        VideoInfoUtil videoInfoUtil = this.videoInfoUtil;
        if (videoInfoUtil != null) {
            videoInfoUtil.release();
        }
        if (!(this.functionControl == 2 || (videoCutView = this.cutView) == null)) {
            videoCutView.destory();
        }
        FilterView filterView = this.filterView;
        if (filterView != null) {
            filterView.destory();
        }
        VideoToast.cancel();
        VideoEditorFinishUtil videoEditorFinishUtil = this.videoEditorFinishUtil;
        if (videoEditorFinishUtil != null) {
            videoEditorFinishUtil.setListener(null);
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        VideoEditorActivity.super.onActivityResult(i, i2, intent);
        if (i == this.finishJumpRequestCode) {
            resetDate();
        }
    }
}
