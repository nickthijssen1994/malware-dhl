package com.p051jd.lib.unification.video.recorder;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.media.CamcorderProfile;
import android.os.Build;
import android.text.TextUtils;
import android.view.SurfaceHolder;
import com.facebook.imagepipeline.common.RotationOptions;
import com.facebook.react.uimanager.ViewProps;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.p051jd.lib.unification.video.VideoToast;
import java.io.IOException;
import java.util.List;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.unification.video.recorder.CameraManager */
/* loaded from: classes.dex */
public class CameraManager {
    private static final String TAG = "CameraManager";
    private boolean isLightOpen;
    private volatile Camera mCamera;
    private Context mContext;
    private SurfaceHolder mSurfaceHolder;
    private boolean mWaitForTakePhoto;
    private int cameraID = 0;
    private int mSupportWidth = -1;
    private int mSupportHeight = -1;
    private int mPicWidth = -1;
    private int mPicHeight = -1;
    private int mWidth = 640;
    private int mHeight = 480;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.unification.video.recorder.CameraManager$OnFinishPicListener */
    /* loaded from: classes.dex */
    public interface OnFinishPicListener {
        void onFailedPic();

        void onFinishPic(Bitmap bitmap);
    }

    public CameraManager(Context context) {
        this.mContext = context;
    }

    public void initCamera(SurfaceHolder surfaceHolder) throws IOException {
        this.mSurfaceHolder = surfaceHolder;
        initCamera(0);
    }

    public void initCamera(SurfaceHolder surfaceHolder, int i) throws IOException {
        this.mSurfaceHolder = surfaceHolder;
        initCamera(i);
    }

    public void initCamera(int i) throws IOException {
        if (this.mCamera != null) {
            freeCameraResource();
        }
        synchronized (this) {
            int i2 = 1126825984;
            try {
                if (i == 1) {
                    if (checkCameraFacing(1)) {
                        this.mCamera = Camera.open(1);
                        this.cameraID = 1;
                    } else {
                        VideoToast.showToast(this.mContext, this.mContext.getResources().getString(R.string.uni_video_no_facing_front_camera), DpiUtil.dip2px(this.mContext, 170.0f));
                    }
                } else if (checkCameraFacing(0)) {
                    this.mCamera = Camera.open(0);
                    this.cameraID = 0;
                } else {
                    VideoToast.showToast(this.mContext, this.mContext.getResources().getString(R.string.uni_video_no_camera), DpiUtil.dip2px(this.mContext, 170.0f));
                }
            } catch (Exception unused) {
                if (this.mCamera != null) {
                    this.mCamera.release();
                    this.mCamera = null;
                }
                Context context = this.mContext;
                String string = this.mContext.getResources().getString(R.string.uni_video_camera_open_fail);
                i2 = DpiUtil.dip2px(this.mContext, i2);
                VideoToast.showToast(context, string, i2);
            }
            if (this.mCamera != null) {
                int width = DpiUtil.getWidth(this.mContext);
                int height = DpiUtil.getHeight(this.mContext);
                Camera.Parameters parameters = getParameters();
                if (parameters != null) {
                    getPreviewSize(width, height, parameters.getSupportedPreviewSizes());
                    getVideoSize(width, height, parameters.getSupportedVideoSizes());
                    getPicSize(width, height, parameters.getSupportedPictureSizes());
                    setCameraParams();
                    if (Build.VERSION.SDK_INT >= 17) {
                        this.mCamera.enableShutterSound(false);
                    }
                    setCameraDisplayOrientation((Activity) this.mContext, this.cameraID, this.mCamera);
                    try {
                        this.mCamera.setPreviewDisplay(this.mSurfaceHolder);
                        this.mCamera.startPreview();
                    } catch (Exception unused2) {
                    }
                }
            }
        }
    }

    public static void setCameraDisplayOrientation(Activity activity, int i, Camera camera) {
        int i2;
        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
        Camera.getCameraInfo(i, cameraInfo);
        int i3 = 0;
        switch (activity.getWindowManager().getDefaultDisplay().getRotation()) {
            case 1:
                i3 = 90;
                break;
            case 2:
                i3 = 180;
                break;
            case 3:
                i3 = RotationOptions.ROTATE_270;
                break;
        }
        if (cameraInfo.facing == 1) {
            i2 = (360 - ((cameraInfo.orientation + i3) % 360)) % 360;
        } else {
            i2 = ((cameraInfo.orientation - i3) + 360) % 360;
        }
        camera.setDisplayOrientation(i2);
    }

    private boolean checkCameraFacing(int i) {
        int numberOfCameras = Camera.getNumberOfCameras();
        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
        for (int i2 = 0; i2 < numberOfCameras; i2++) {
            Camera.getCameraInfo(i2, cameraInfo);
            if (i == cameraInfo.facing) {
                return true;
            }
        }
        return false;
    }

    private void setCameraParams() {
        Camera.Parameters parameters;
        int i;
        int i2;
        if (this.mCamera != null && (parameters = getParameters()) != null) {
            String autoFocusMode = getAutoFocusMode(parameters);
            if (autoFocusMode != null) {
                parameters.setFocusMode(autoFocusMode);
            }
            parameters.set("orientation", "portrait");
            parameters.setPictureFormat(256);
            parameters.setJpegQuality(100);
            setParameters(parameters);
            if (!((this.mSupportWidth == -1 || this.mSupportHeight == -1) && (this.mPicWidth == -1 || this.mPicHeight == -1))) {
                Camera.Parameters parameters2 = getParameters();
                if (parameters2 != null) {
                    int i3 = this.mSupportWidth;
                    if (!(i3 == -1 || (i2 = this.mSupportHeight) == -1)) {
                        parameters2.setPreviewSize(i3, i2);
                    }
                    int i4 = this.mPicWidth;
                    if (!(i4 == -1 || (i = this.mPicHeight) == -1)) {
                        parameters2.setPictureSize(i4, i);
                    }
                    setParameters(parameters2);
                } else {
                    return;
                }
            }
            this.mCamera.cancelAutoFocus();
        }
    }

    private String getAutoFocusMode(Camera.Parameters parameters) {
        if (parameters == null) {
            return null;
        }
        List<String> supportedFocusModes = parameters.getSupportedFocusModes();
        if (isSupported(supportedFocusModes, "continuous-picture")) {
            return "continuous-picture";
        }
        if (isSupported(supportedFocusModes, "continuous-video")) {
            return "continuous-video";
        }
        if (isSupported(supportedFocusModes, "auto")) {
            return "auto";
        }
        return null;
    }

    private boolean isSupported(List<String> list, String str) {
        return list != null && list.contains(str);
    }

    public synchronized void changeCameraFaceing() {
        try {
            if (this.cameraID == 1) {
                if (!checkCameraFacing(0)) {
                    VideoToast.showToast(this.mContext, this.mContext.getResources().getString(R.string.uni_video_no_camera), DpiUtil.dip2px(this.mContext, 170.0f));
                } else {
                    initCamera(0);
                }
            } else if (this.cameraID == 0) {
                if (!checkCameraFacing(1)) {
                    VideoToast.showToast(this.mContext, this.mContext.getResources().getString(R.string.uni_video_no_facing_front_camera), DpiUtil.dip2px(this.mContext, 170.0f));
                } else {
                    initCamera(1);
                }
            }
        } catch (Exception unused) {
        }
    }

    public synchronized boolean openOrCloseLight(int i) {
        if (this.mCamera != null) {
            Camera.Parameters parameters = getParameters();
            if (parameters == null) {
                return false;
            }
            String flashMode = parameters.getFlashMode();
            if (TextUtils.isEmpty(flashMode)) {
                VideoToast.showToast(this.mContext, this.mContext.getResources().getString(R.string.uni_video_no_flash), DpiUtil.dip2px(this.mContext, 170.0f));
                return this.isLightOpen;
            }
            if (TextUtils.equals(flashMode, "off")) {
                if (i == 0) {
                    parameters.setFlashMode("torch");
                } else {
                    parameters.setFlashMode(ViewProps.f621ON);
                }
                this.isLightOpen = true;
            } else if (TextUtils.equals(flashMode, "torch") || TextUtils.equals(flashMode, ViewProps.f621ON)) {
                parameters.setFlashMode("off");
                this.isLightOpen = false;
            }
            setParameters(parameters);
        }
        return this.isLightOpen;
    }

    public synchronized void closeLight() {
        if (this.isLightOpen && this.mCamera != null) {
            Camera.Parameters parameters = getParameters();
            if (parameters != null) {
                parameters.setFlashMode("off");
                this.isLightOpen = false;
                setParameters(parameters);
            }
        }
    }

    public void stopPreview() {
        try {
            if (this.mCamera != null) {
                this.mCamera.stopPreview();
            }
        } catch (Exception unused) {
        }
    }

    public void startPreview() {
        try {
            if (this.mCamera != null) {
                this.mCamera.startPreview();
            } else {
                initCamera(this.mSurfaceHolder);
            }
        } catch (Exception unused) {
        }
    }

    private Camera.Parameters getParameters() {
        if (this.mCamera == null) {
            return null;
        }
        try {
            return this.mCamera.getParameters();
        } catch (Exception unused) {
            return null;
        }
    }

    private void setParameters(Camera.Parameters parameters) {
        if (this.mCamera != null) {
            try {
                this.mCamera.setParameters(parameters);
            } catch (Exception unused) {
            }
        }
    }

    private void getPreviewSize(int i, int i2, List<Camera.Size> list) {
        if (!(list == null || list.size() == 0)) {
            float f = (((float) i) + 0.0f) / ((float) i2);
            int i3 = (i * 3) / 2;
            int i4 = i / 2;
            Camera.Size size = null;
            Camera.Size size2 = null;
            float f2 = Float.MAX_VALUE;
            float f3 = Float.MAX_VALUE;
            for (Camera.Size size3 : list) {
                float abs = Math.abs(((((float) size3.height) + 0.0f) / ((float) size3.width)) - f);
                if (size3.height > i3 || size3.height <= i4) {
                    if (abs < f2) {
                        size2 = size3;
                        f2 = abs;
                    }
                } else if (abs < f3) {
                    size = size3;
                    f3 = abs;
                }
            }
            if (size == null) {
                size = size2;
            }
            if (size != null) {
                this.mSupportHeight = size.height;
                this.mSupportWidth = size.width;
            }
        }
    }

    private void getVideoSize(int i, int i2, List<Camera.Size> list) {
        CamcorderProfile camcorderProfile;
        if (!(list == null || list.size() == 0)) {
            float f = (((float) i) + 0.0f) / ((float) i2);
            int i3 = i / 2;
            Camera.Size size = null;
            Camera.Size size2 = null;
            float f2 = Float.MAX_VALUE;
            float f3 = Float.MAX_VALUE;
            for (Camera.Size size3 : list) {
                float abs = Math.abs(((((float) size3.height) + 0.0f) / ((float) size3.width)) - f);
                if (size3.height > i || size3.height <= i3) {
                    if (size3.height < (i * 3) / 2 && abs < f2) {
                        size2 = size3;
                        f2 = abs;
                    }
                } else if (abs < f3) {
                    size = size3;
                    f3 = abs;
                }
            }
            if (size == null) {
                size = size2;
            }
            if (size != null) {
                this.mHeight = size.height;
                this.mWidth = size.width;
                return;
            }
            if (CamcorderProfile.hasProfile(this.cameraID, 5)) {
                camcorderProfile = CamcorderProfile.get(this.cameraID, 5);
            } else if (CamcorderProfile.hasProfile(this.cameraID, 4)) {
                camcorderProfile = CamcorderProfile.get(4);
            } else if (CamcorderProfile.hasProfile(this.cameraID, 7)) {
                camcorderProfile = CamcorderProfile.get(7);
            } else {
                camcorderProfile = CamcorderProfile.get(this.cameraID, 0);
            }
            if (camcorderProfile != null) {
                this.mHeight = camcorderProfile.videoFrameHeight;
                this.mWidth = camcorderProfile.videoFrameWidth;
            }
        }
    }

    private void getPicSize(int i, int i2, List<Camera.Size> list) {
        CamcorderProfile camcorderProfile;
        if (!(list == null || list.size() == 0)) {
            float f = (((float) i) + 0.0f) / ((float) i2);
            int i3 = i * 3;
            int i4 = i3 / 2;
            int i5 = i3 / 4;
            Camera.Size size = null;
            Camera.Size size2 = null;
            float f2 = Float.MAX_VALUE;
            float f3 = Float.MAX_VALUE;
            for (Camera.Size size3 : list) {
                float abs = Math.abs(((((float) size3.height) + 0.0f) / ((float) size3.width)) - f);
                if (size3.height > i4 || size3.height < i5) {
                    if (size3.height < i * 2 && abs < f2) {
                        size2 = size3;
                        f2 = abs;
                    }
                } else if (abs < f3) {
                    size = size3;
                    f3 = abs;
                }
            }
            if (size == null) {
                size = size2;
            }
            if (size != null) {
                this.mPicHeight = size.height;
                this.mPicWidth = size.width;
                return;
            }
            if (CamcorderProfile.hasProfile(this.cameraID, 5)) {
                camcorderProfile = CamcorderProfile.get(this.cameraID, 5);
            } else if (CamcorderProfile.hasProfile(this.cameraID, 6)) {
                camcorderProfile = CamcorderProfile.get(6);
            } else if (CamcorderProfile.hasProfile(this.cameraID, 4)) {
                camcorderProfile = CamcorderProfile.get(4);
            } else {
                camcorderProfile = CamcorderProfile.get(this.cameraID, 7);
            }
            if (camcorderProfile != null) {
                this.mPicHeight = camcorderProfile.videoFrameHeight;
                this.mPicWidth = camcorderProfile.videoFrameWidth;
            }
        }
    }

    public void takePicture(final OnFinishPicListener onFinishPicListener) {
        try {
            if (!this.mWaitForTakePhoto && this.mCamera != null) {
                this.mWaitForTakePhoto = true;
                this.mCamera.takePicture(null, null, new Camera.PictureCallback() { // from class: com.jd.lib.unification.video.recorder.CameraManager.1
                    @Override // android.hardware.Camera.PictureCallback
                    public void onPictureTaken(byte[] bArr, Camera camera) {
                        try {
                            Bitmap decodeByteArray = BitmapFactory.decodeByteArray(bArr, 0, bArr.length);
                            CameraManager.this.mWaitForTakePhoto = false;
                            if (onFinishPicListener != null) {
                                onFinishPicListener.onFinishPic(decodeByteArray);
                            }
                        } catch (Exception unused) {
                            CameraManager.this.mWaitForTakePhoto = false;
                            OnFinishPicListener onFinishPicListener2 = onFinishPicListener;
                            if (onFinishPicListener2 != null) {
                                onFinishPicListener2.onFailedPic();
                            }
                        }
                    }
                });
            }
        } catch (Exception unused) {
            this.mWaitForTakePhoto = false;
            if (onFinishPicListener != null) {
                onFinishPicListener.onFailedPic();
            }
        }
    }

    public void freeCameraResource() {
        try {
            if (this.mCamera != null) {
                synchronized (this) {
                    if (this.mCamera != null) {
                        this.mCamera.setPreviewCallback(null);
                        stopPreview();
                        lock();
                        this.mCamera.release();
                        this.mCamera = null;
                    }
                }
            }
        } catch (Exception unused) {
            this.mCamera = null;
        }
    }

    public void lock() {
        if (this.mCamera != null) {
            try {
                this.mCamera.lock();
            } catch (Exception unused) {
            }
        }
    }

    public void unLock() {
        if (this.mCamera != null) {
            try {
                this.mCamera.unlock();
            } catch (Exception unused) {
            }
        }
    }

    public synchronized Camera getCamera() {
        return this.mCamera;
    }

    public synchronized int getVideoWidth() {
        return this.mWidth;
    }

    public synchronized int getVideoHeight() {
        return this.mHeight;
    }

    public synchronized int getCameraID() {
        return this.cameraID;
    }
}
