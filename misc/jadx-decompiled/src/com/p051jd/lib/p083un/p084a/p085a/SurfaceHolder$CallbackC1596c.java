package com.p051jd.lib.p083un.p084a.p085a;

import android.content.Context;
import android.graphics.Point;
import android.hardware.Camera;
import android.os.Handler;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import com.facebook.imagepipeline.common.RotationOptions;
import java.util.List;

/* renamed from: com.jd.lib.un.a.a.c */
/* loaded from: classes.dex */
public final class SurfaceHolder$CallbackC1596c extends SurfaceView implements SurfaceHolder.Callback {

    /* renamed from: b */
    public boolean f2897b;

    /* renamed from: c */
    private C1601e f2898c;

    /* renamed from: i */
    private Camera.PreviewCallback f2904i;

    /* renamed from: k */
    private AbstractC1599a f2906k;

    /* renamed from: m */
    private long f2908m;

    /* renamed from: n */
    private float f2909n;

    /* renamed from: o */
    private int f2910o;

    /* renamed from: e */
    private boolean f2900e = true;

    /* renamed from: f */
    private boolean f2901f = true;

    /* renamed from: g */
    private boolean f2902g = false;

    /* renamed from: h */
    private boolean f2903h = true;

    /* renamed from: j */
    private float f2905j = 0.1f;

    /* renamed from: l */
    private Runnable f2907l = new Runnable() { // from class: com.jd.lib.un.a.a.c.1
        @Override // java.lang.Runnable
        public final void run() {
            if (SurfaceHolder$CallbackC1596c.this.f2898c != null && SurfaceHolder$CallbackC1596c.this.f2900e && SurfaceHolder$CallbackC1596c.this.f2901f && SurfaceHolder$CallbackC1596c.this.f2902g) {
                SurfaceHolder$CallbackC1596c.this.m1518b();
            }
        }
    };

    /* renamed from: a */
    Camera.AutoFocusCallback f2896a = new Camera.AutoFocusCallback() { // from class: com.jd.lib.un.a.a.c.2
        @Override // android.hardware.Camera.AutoFocusCallback
        public final void onAutoFocus(boolean z, Camera camera) {
            SurfaceHolder$CallbackC1596c.this.m1512e();
        }
    };

    /* renamed from: d */
    private Handler f2899d = new Handler();

    /* renamed from: com.jd.lib.un.a.a.c$a */
    /* loaded from: classes.dex */
    public interface AbstractC1599a {
        /* renamed from: a */
        void mo855a();
    }

    public SurfaceHolder$CallbackC1596c(Context context, C1601e eVar, Camera.PreviewCallback previewCallback) {
        super(context);
        this.f2906k = (AbstractC1599a) context;
        m1519a(eVar, previewCallback);
        getHolder().addCallback(this);
        getHolder().setType(3);
    }

    /* renamed from: a */
    private static float m1521a(MotionEvent motionEvent) {
        float x = motionEvent.getX(1) - motionEvent.getX(0);
        float y = motionEvent.getY(1) - motionEvent.getY(0);
        return (float) Math.sqrt((double) ((x * x) + (y * y)));
    }

    /* renamed from: a */
    private Point m1523a(Point point) {
        return getDisplayOrientation() % 180 == 0 ? point : new Point(point.y, point.x);
    }

    /* renamed from: a */
    private void m1524a(int i, int i2) {
        ViewGroup.LayoutParams layoutParams = getLayoutParams();
        if (getDisplayOrientation() % 180 != 0) {
            i2 = i;
            i = i2;
        }
        if (this.f2903h) {
            float f = (float) i;
            float width = ((float) ((View) getParent()).getWidth()) / f;
            float f2 = (float) i2;
            float height = ((float) ((View) getParent()).getHeight()) / f2;
            if (width <= height) {
                width = height;
            }
            i = Math.round(f * width);
            i2 = Math.round(f2 * width);
        }
        layoutParams.width = i;
        layoutParams.height = i2;
        setLayoutParams(layoutParams);
    }

    /* renamed from: a */
    private void m1522a(Camera.Size size) {
        int i;
        int i2;
        Point a = m1523a(new Point(getWidth(), getHeight()));
        float f = ((float) size.width) / ((float) size.height);
        if (((float) a.x) / ((float) a.y) > f) {
            i = (int) (((float) a.y) * f);
            i2 = a.y;
        } else {
            i = a.x;
            i2 = (int) (((float) a.x) / f);
        }
        m1524a(i, i2);
    }

    /* renamed from: d */
    private void m1514d() {
        Camera.Size optimalPreviewSize = getOptimalPreviewSize();
        Camera.Parameters parameters = this.f2898c.f2913a.getParameters();
        parameters.setPreviewSize(optimalPreviewSize.width, optimalPreviewSize.height);
        this.f2898c.f2913a.setParameters(parameters);
        m1522a(optimalPreviewSize);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: e */
    public void m1512e() {
        this.f2899d.postDelayed(this.f2907l, 1000);
    }

    private Camera.Size getOptimalPreviewSize() {
        C1601e eVar = this.f2898c;
        Camera.Size size = null;
        if (eVar == null) {
            return null;
        }
        List<Camera.Size> supportedPreviewSizes = eVar.f2913a.getParameters().getSupportedPreviewSizes();
        int width = getWidth();
        int height = getHeight();
        if (C1602f.m1507a(getContext()) == 1) {
            height = width;
            width = height;
        }
        double d = (double) width;
        double d2 = (double) height;
        Double.isNaN(d);
        Double.isNaN(d2);
        double d3 = d / d2;
        if (supportedPreviewSizes == null) {
            return null;
        }
        double d4 = Double.MAX_VALUE;
        double d5 = Double.MAX_VALUE;
        for (Camera.Size size2 : supportedPreviewSizes) {
            double d6 = (double) size2.width;
            double d7 = (double) size2.height;
            Double.isNaN(d6);
            Double.isNaN(d7);
            if (Math.abs((d6 / d7) - d3) <= ((double) this.f2905j) && ((double) Math.abs(size2.height - height)) < d5) {
                d5 = (double) Math.abs(size2.height - height);
                size = size2;
            }
        }
        if (size == null) {
            for (Camera.Size size3 : supportedPreviewSizes) {
                if (((double) Math.abs(size3.height - height)) < d4) {
                    d4 = (double) Math.abs(size3.height - height);
                    size = size3;
                }
            }
        }
        return size;
    }

    /* renamed from: a */
    public final void m1525a() {
        if (this.f2898c != null) {
            try {
                getHolder().addCallback(this);
                this.f2900e = true;
                m1514d();
                this.f2898c.f2913a.setPreviewDisplay(getHolder());
                this.f2898c.f2913a.setDisplayOrientation(getDisplayOrientation());
                this.f2898c.f2913a.setOneShotPreviewCallback(this.f2904i);
                this.f2898c.f2913a.startPreview();
                if (!this.f2901f) {
                    return;
                }
                if (this.f2902g) {
                    m1518b();
                } else {
                    m1512e();
                }
            } catch (Exception e) {
                Log.e("CameraPreview", e.toString(), e);
            }
        }
    }

    /* renamed from: a */
    public final void m1519a(C1601e eVar, Camera.PreviewCallback previewCallback) {
        this.f2898c = eVar;
        this.f2904i = previewCallback;
    }

    /* renamed from: b */
    public final void m1518b() {
        try {
            this.f2898c.f2913a.autoFocus(this.f2896a);
        } catch (RuntimeException unused) {
            m1512e();
        }
    }

    /* renamed from: c */
    public final void m1516c() {
        if (this.f2898c != null) {
            try {
                this.f2900e = false;
                getHolder().removeCallback(this);
                this.f2898c.f2913a.cancelAutoFocus();
                this.f2898c.f2913a.setOneShotPreviewCallback(null);
                this.f2898c.f2913a.stopPreview();
            } catch (Exception e) {
                Log.e("CameraPreview", e.toString(), e);
            }
        }
    }

    public final int getDisplayOrientation() {
        int i = 0;
        if (this.f2898c == null) {
            return 0;
        }
        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
        if (this.f2898c.f2914b == -1) {
            Camera.getCameraInfo(0, cameraInfo);
        } else {
            Camera.getCameraInfo(this.f2898c.f2914b, cameraInfo);
        }
        switch (((WindowManager) getContext().getSystemService("window")).getDefaultDisplay().getRotation()) {
            case 1:
                i = 90;
                break;
            case 2:
                i = 180;
                break;
            case 3:
                i = RotationOptions.ROTATE_270;
                break;
        }
        return (cameraInfo.facing == 1 ? 360 - ((cameraInfo.orientation + i) % 360) : (cameraInfo.orientation - i) + 360) % 360;
    }

    /* JADX WARN: Code restructure failed: missing block: B:44:0x00a5, code lost:
        if (r10 == 1) goto L_0x00fb;
     */
    @Override // android.view.View
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final boolean onTouchEvent(MotionEvent motionEvent) {
        AbstractC1599a aVar = this.f2906k;
        if (aVar != null) {
            aVar.mo855a();
        }
        if (!(this.f2898c != null && this.f2900e)) {
            return super.onTouchEvent(motionEvent);
        }
        if (motionEvent.getPointerCount() == 1) {
            int action = motionEvent.getAction() & 255;
            if (action == 0) {
                this.f2897b = true;
                long currentTimeMillis = System.currentTimeMillis();
                if (currentTimeMillis - this.f2908m < 300) {
                    try {
                        Camera.Parameters parameters = this.f2898c.f2913a.getParameters();
                        if (parameters.isZoomSupported()) {
                            int i = -1;
                            List<Integer> zoomRatios = parameters.getZoomRatios();
                            int intValue = zoomRatios.get(0).intValue() * 3;
                            for (int i2 = 0; i2 < zoomRatios.size(); i2++) {
                                if (zoomRatios.get(i2).intValue() < intValue && i2 != zoomRatios.size() - 1) {
                                }
                                i = i2;
                            }
                            int zoom = parameters.getZoom();
                            if (zoom < i) {
                                parameters.setZoom(i);
                                this.f2898c.f2913a.setParameters(parameters);
                            } else if (zoom >= i) {
                                parameters.setZoom(0);
                                this.f2898c.f2913a.setParameters(parameters);
                            }
                            this.f2897b = true;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    this.f2908m = 0;
                    return true;
                }
                this.f2908m = currentTimeMillis;
            }
            return true;
        }
        if (motionEvent.getPointerCount() == 2) {
            int action2 = motionEvent.getAction() & 255;
            if (action2 != 5) {
                switch (action2) {
                    case 2:
                        if (motionEvent.getPointerCount() >= 2) {
                            int a = this.f2910o + ((int) ((m1521a(motionEvent) - this.f2909n) / 20.0f));
                            Camera.Parameters parameters2 = this.f2898c.f2913a.getParameters();
                            if (parameters2.isZoomSupported()) {
                                if (a < parameters2.getMaxZoom() && a > 0) {
                                    parameters2.setZoom(a);
                                    this.f2898c.f2913a.setParameters(parameters2);
                                    this.f2897b = true;
                                    break;
                                }
                            } else {
                                Log.d("CameraPreview", "support zoom false");
                                break;
                            }
                        }
                        break;
                }
            } else {
                this.f2909n = m1521a(motionEvent);
                try {
                    Camera.Parameters parameters3 = this.f2898c.f2913a.getParameters();
                    if (parameters3.isZoomSupported()) {
                        this.f2910o = parameters3.getZoom();
                    }
                    this.f2897b = true;
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        }
        return true;
        this.f2897b = false;
        return true;
    }

    public final void setAspectTolerance(float f) {
        this.f2905j = f;
    }

    public final void setAutoFocus(boolean z) {
        C1601e eVar = this.f2898c;
        if (eVar != null && this.f2900e && z != this.f2901f) {
            this.f2901f = z;
            if (!this.f2901f) {
                eVar.f2913a.cancelAutoFocus();
            } else if (this.f2902g) {
                m1518b();
            } else {
                m1512e();
            }
        }
    }

    public final void setShouldScaleToFill(boolean z) {
        this.f2903h = z;
    }

    @Override // android.view.SurfaceHolder.Callback
    public final void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
        if (surfaceHolder.getSurface() != null) {
            m1516c();
            m1525a();
        }
    }

    @Override // android.view.SurfaceHolder.Callback
    public final void surfaceCreated(SurfaceHolder surfaceHolder) {
        this.f2902g = true;
    }

    @Override // android.view.SurfaceHolder.Callback
    public final void surfaceDestroyed(SurfaceHolder surfaceHolder) {
        this.f2902g = false;
        m1516c();
    }
}
