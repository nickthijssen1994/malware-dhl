package com.p051jd.lib.p083un.utils;

import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.text.TextUtils;
import android.util.Base64;
import com.facebook.common.util.UriUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.un.utils.UnLibFileUtils */
/* loaded from: classes.dex */
public class UnLibFileUtils {
    private static final String TAG = "FileUtils";

    public static double getDirSize(File file) {
        double d = 0.0d;
        if (file == null || !file.exists()) {
            return 0.0d;
        }
        if (file.isDirectory()) {
            File[] listFiles = file.listFiles();
            if (listFiles == null) {
                return 0.0d;
            }
            for (File file2 : listFiles) {
                d += getDirSize(file2);
            }
            return d;
        }
        double length = (double) file.length();
        Double.isNaN(length);
        return (length / 1024.0d) / 1024.0d;
    }

    public static String renameFile(String str, String str2) {
        if (TextUtils.isEmpty(str) || TextUtils.isEmpty(str2)) {
            return null;
        }
        File file = new File(str);
        if (!file.exists() || !file.isFile()) {
            return null;
        }
        String parent = file.getParent();
        File file2 = new File(parent + File.separator + str2);
        if (file2.exists() && file2.isFile()) {
            file2.delete();
        }
        if (file.renameTo(file2)) {
            return file2.getAbsolutePath();
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r10v0, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r10v1, types: [java.io.FileInputStream] */
    /* JADX WARN: Type inference failed for: r10v13 */
    public static String getMD5(String str) {
        Throwable th;
        String str2;
        FileInputStream fileInputStream;
        NoSuchAlgorithmException e;
        FileNotFoundException e2;
        try {
            try {
                str2 = null;
            } catch (Exception e3) {
                UnLog.m1368e(TAG, e3.toString());
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            MessageDigest instance = MessageDigest.getInstance("MD5");
            File file = new File((String) str);
            if (file.exists() && file.isFile()) {
                fileInputStream = new FileInputStream(file);
                try {
                    instance.update(fileInputStream.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, file.length()));
                    byte[] digest = instance.digest();
                    StringBuilder sb = new StringBuilder(digest.length * 2);
                    for (byte b : digest) {
                        sb.append("0123456789abcdef".charAt((b >> 4) & 15));
                        sb.append("0123456789abcdef".charAt(b & 15));
                    }
                    String sb2 = sb.toString();
                    try {
                        fileInputStream.close();
                    } catch (Exception e4) {
                        UnLog.m1368e(TAG, e4.toString());
                    }
                    return sb2;
                } catch (FileNotFoundException e5) {
                    e2 = e5;
                    UnLog.m1368e(TAG, e2.toString());
                    if (fileInputStream != null) {
                        fileInputStream.close();
                    }
                    return str2;
                } catch (IOException unused) {
                    if (fileInputStream != null) {
                        fileInputStream.close();
                    }
                    return str2;
                } catch (NoSuchAlgorithmException e6) {
                    e = e6;
                    UnLog.m1368e(TAG, e.toString());
                    if (fileInputStream != null) {
                        fileInputStream.close();
                    }
                    return str2;
                }
            }
            return null;
        } catch (FileNotFoundException e7) {
            e2 = e7;
            fileInputStream = null;
        } catch (IOException unused2) {
            fileInputStream = null;
        } catch (NoSuchAlgorithmException e8) {
            e = e8;
            fileInputStream = null;
        } catch (Throwable th3) {
            th = th3;
            str = 0;
            if (str != 0) {
                try {
                    str.close();
                } catch (Exception e9) {
                    UnLog.m1368e(TAG, e9.toString());
                }
            }
            throw th;
        }
    }

    public static boolean fileIsExists(String str) {
        if (UnLog.f3163D) {
            UnLog.m1370d(TAG, "apkpath -->> " + str);
        }
        return new File(str).exists();
    }

    public static String getRealFilePathOfUri(Context context, Uri uri) {
        Cursor query;
        int columnIndex;
        String str = null;
        if (uri == null) {
            return null;
        }
        String scheme = uri.getScheme();
        if (scheme == null) {
            return uri.getPath();
        }
        if (UriUtil.LOCAL_FILE_SCHEME.equals(scheme)) {
            return uri.getPath();
        }
        if (!"content".equals(scheme) || (query = context.getContentResolver().query(uri, new String[]{"_data"}, null, null, null)) == null) {
            return null;
        }
        if (query.moveToFirst() && (columnIndex = query.getColumnIndex("_data")) > -1) {
            str = query.getString(columnIndex);
        }
        query.close();
        return str;
    }

    public static long getDataDiskFreeSize(boolean z) {
        long blockSizeLong;
        long availableBlocksLong;
        StatFs statFs = new StatFs(Environment.getDataDirectory().getPath());
        if (z) {
            try {
                if (Build.VERSION.SDK_INT >= 18) {
                    blockSizeLong = statFs.getBlockSizeLong();
                    availableBlocksLong = statFs.getAvailableBlocksLong();
                    return ((((blockSizeLong * 2) / 1024) * availableBlocksLong) / 2) / 1024;
                }
            } catch (Throwable th) {
                UnLog.m1368e(TAG, th.toString());
                return -1;
            }
        }
        blockSizeLong = (long) statFs.getBlockSize();
        availableBlocksLong = (long) statFs.getAvailableBlocks();
        return ((((blockSizeLong * 2) / 1024) * availableBlocksLong) / 2) / 1024;
    }

    /* JADX WARN: Code restructure failed: missing block: B:35:0x006c, code lost:
        if (r7 == null) goto L_0x006f;
     */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0078 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0073 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static boolean saveToFile(String str, String str2) {
        FileOutputStream fileOutputStream;
        Exception e;
        File file;
        byte[] bArr = new byte[1024];
        boolean z = false;
        FileInputStream fileInputStream = null;
        try {
            try {
                file = new File(str);
                try {
                    File parentFile = file.getParentFile();
                    if (!parentFile.exists()) {
                        parentFile.mkdirs();
                    }
                    FileInputStream fileInputStream2 = new FileInputStream(new File(str2));
                    try {
                        fileOutputStream = new FileOutputStream(file);
                        while (true) {
                            try {
                                int read = fileInputStream2.read(bArr);
                                if (read < 0) {
                                    break;
                                }
                                fileOutputStream.write(bArr, 0, read);
                            } catch (Exception e2) {
                                e = e2;
                                fileInputStream = fileInputStream2;
                                try {
                                    UnLog.m1368e(TAG, e.toString());
                                    if (file != null) {
                                        file.delete();
                                    }
                                    if (fileInputStream != null) {
                                        try {
                                            fileInputStream.close();
                                        } catch (Exception unused) {
                                        }
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    if (fileInputStream != null) {
                                        try {
                                            fileInputStream.close();
                                        } catch (Exception unused2) {
                                        }
                                    }
                                    if (fileOutputStream != null) {
                                        try {
                                            fileOutputStream.close();
                                        } catch (Exception unused3) {
                                        }
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                fileInputStream = fileInputStream2;
                                if (fileInputStream != null) {
                                }
                                if (fileOutputStream != null) {
                                }
                                throw th;
                            }
                        }
                        fileOutputStream.flush();
                        z = true;
                        try {
                            fileInputStream2.close();
                        } catch (Exception unused4) {
                        }
                    } catch (Exception e3) {
                        e = e3;
                        fileInputStream = fileInputStream2;
                        fileOutputStream = null;
                    } catch (Throwable th3) {
                        th = th3;
                        fileInputStream = fileInputStream2;
                        fileOutputStream = null;
                    }
                } catch (Exception e4) {
                    e = e4;
                    fileOutputStream = null;
                }
            } catch (Throwable th4) {
                th = th4;
                fileOutputStream = null;
            }
        } catch (Exception e5) {
            e = e5;
            fileOutputStream = null;
            file = null;
        }
        try {
            fileOutputStream.close();
        } catch (Exception unused5) {
            return z;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static String encodeBase64File(String str) {
        Throwable th;
        FileInputStream fileInputStream;
        byte[] bArr;
        FileInputStream fileInputStream2;
        IOException e;
        FileInputStream fileInputStream3;
        try {
            try {
                File file = new File(str);
                str = null;
                str = null;
                str = null;
                bArr = new byte[0];
                fileInputStream2 = null;
                fileInputStream = null;
                try {
                    fileInputStream3 = new FileInputStream(file);
                } catch (IOException e2) {
                    e = e2;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (IOException e3) {
            String str2 = TAG;
            UnLog.m1368e(str2, e3.toString());
            fileInputStream = str2;
        }
        try {
            bArr = new byte[fileInputStream3.available()];
            fileInputStream3.read(bArr);
            fileInputStream3.close();
        } catch (IOException e4) {
            e = e4;
            fileInputStream2 = fileInputStream3;
            UnLog.m1368e(TAG, e.toString());
            fileInputStream = fileInputStream2;
            if (fileInputStream2 != null) {
                fileInputStream2.close();
                fileInputStream = fileInputStream2;
            }
            int i = str == 1 ? 1 : 0;
            int i2 = str == 1 ? 1 : 0;
            int i3 = str == 1 ? 1 : 0;
            int i4 = str == 1 ? 1 : 0;
            int i5 = str == 1 ? 1 : 0;
            str = Base64.encodeToString(bArr, i);
            return str;
        } catch (Throwable th3) {
            th = th3;
            fileInputStream = fileInputStream3;
            if (fileInputStream != null) {
                try {
                    fileInputStream.close();
                } catch (IOException e5) {
                    UnLog.m1368e(TAG, e5.toString());
                }
            }
            throw th;
        }
        int i6 = str == 1 ? 1 : 0;
        int i22 = str == 1 ? 1 : 0;
        int i32 = str == 1 ? 1 : 0;
        int i42 = str == 1 ? 1 : 0;
        int i52 = str == 1 ? 1 : 0;
        str = Base64.encodeToString(bArr, i6);
        return str;
    }
}
