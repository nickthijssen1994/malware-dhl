package com.p051jd.lib.p083un.basewidget.widget.simple;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Build;
import android.os.Handler;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.widget.Scroller;
import android.widget.TextView;
import androidx.annotation.ColorInt;
import androidx.annotation.ColorRes;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.view.NestedScrollingChildHelper;
import androidx.core.view.NestedScrollingParent;
import androidx.core.view.NestedScrollingParentHelper;
import com.facebook.react.fabric.mounting.LayoutMetricsConversions;
import com.p051jd.lib.p083un.basewidget.C1620R;
import com.p051jd.lib.p083un.basewidget.widget.simple.constant.RefreshDimensionStatus;
import com.p051jd.lib.p083un.basewidget.widget.simple.constant.RefreshSpinner;
import com.p051jd.lib.p083un.basewidget.widget.simple.constant.RefreshState;
import com.p051jd.lib.p083un.basewidget.widget.simple.footer.BallPulseFooter;
import com.p051jd.lib.p083un.basewidget.widget.simple.header.BezierRadarHeader;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshContent;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshFooter;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshHeader;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshInternal;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout;
import com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshScrollBound;
import com.p051jd.lib.p083un.basewidget.widget.simple.listener.OnLoadMoreListener;
import com.p051jd.lib.p083un.basewidget.widget.simple.listener.OnMultiPurposeListener;
import com.p051jd.lib.p083un.basewidget.widget.simple.listener.OnRefreshListener;
import com.p051jd.lib.p083un.basewidget.widget.simple.listener.OnRefreshLoadMoreListener;
import com.p051jd.lib.p083un.basewidget.widget.simple.p092a.RunnableC1664a;
import com.p051jd.lib.p083un.basewidget.widget.simple.utils.DpiUtils;
import com.p051jd.lib.p083un.basewidget.widget.simple.utils.RefreshUtils;
import com.p051jd.lib.p083un.basewidget.widget.simple.wrapper.C1669a;
import com.p051jd.lib.p083un.basewidget.widget.simple.wrapper.RefreshFooterWrapper;
import com.p051jd.lib.p083un.basewidget.widget.simple.wrapper.RefreshHeaderWrapper;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout */
/* loaded from: classes.dex */
public class SimpleRefreshLayout extends ViewGroup implements NestedScrollingParent, RefreshLayout {
    protected Runnable animationRunnable;
    private int mCurrentVelocity;
    private boolean mDisableContentWhenLoading;
    private boolean mDisableContentWhenRefresh;
    private char mDragDirection;
    private float mDragRate;
    private boolean mEnableAutoLoadMore;
    private boolean mEnableClipFooterWhenFIXED_BEHIND;
    private boolean mEnableClipHeaderWhenFIXED_BEHIND;
    private boolean mEnableFooterFollowWhenLoadFinished;
    private boolean mEnableFooterTranslationContent;
    private boolean mEnableHeaderTranslationContent;
    private boolean mEnableLoadMore;
    private boolean mEnableLoadMoreWhenContentNotFull;
    private boolean mEnableOverScrollBounce;
    private boolean mEnableOverScrollDrag;
    private boolean mEnablePureScrollMode;
    private boolean mEnableRefresh;
    private boolean mEnableScrollContentWhenLoaded;
    private boolean mEnableScrollContentWhenRefreshed;
    protected MotionEvent mFalsifyEvent;
    private int mFixedFooterViewId;
    private int mFixedHeaderViewId;
    private int mFooterBackgroundColor;
    private int mFooterHeight;
    private RefreshDimensionStatus mFooterHeightStatus;
    private int mFooterInsetStart;
    private boolean mFooterLocked;
    private float mFooterMaxDragRate;
    private boolean mFooterNeedTouchEventWhenLoading;
    private boolean mFooterNoMoreData;
    private int mFooterTranslationViewId;
    private float mFooterTriggerRate;
    private Handler mHandler;
    private int mHeaderBackgroundColor;
    private int mHeaderHeight;
    private RefreshDimensionStatus mHeaderHeightStatus;
    private int mHeaderInsetStart;
    private float mHeaderMaxDragRate;
    private boolean mHeaderNeedTouchEventWhenRefreshing;
    private int mHeaderTranslationViewId;
    private float mHeaderTriggerRate;
    private boolean mIsBeingDragged;
    private RefreshKernel mKernel;
    private long mLastOpenTime;
    private int mLastSpinner;
    private float mLastTouchX;
    private float mLastTouchY;
    private List<RunnableC1664a> mListDelayedRunnable;
    private OnLoadMoreListener mLoadMoreListener;
    private boolean mManualFooterTranslationContent;
    private boolean mManualHeaderTranslationContent;
    private boolean mManualLoadMore;
    private boolean mManualNestedScrolling;
    private int mMaximumVelocity;
    private int mMinimumVelocity;
    private NestedScrollingChildHelper mNestedChild;
    private boolean mNestedInProgress;
    private NestedScrollingParentHelper mNestedParent;
    private OnMultiPurposeListener mOnMultiPurposeListener;
    private Paint mPaint;
    private int[] mParentOffsetInWindow;
    private int[] mPrimaryColors;
    private int mReboundDuration;
    private Interpolator mReboundInterpolator;
    private RefreshContent mRefreshContent;
    private RefreshInternal mRefreshFooter;
    private RefreshInternal mRefreshHeader;
    private OnRefreshListener mRefreshListener;
    private int mScreenHeight;
    private RefreshScrollBound mScrollBoundaryDecider;
    private Scroller mScroller;
    private int mSpinner;
    private RefreshState mState;
    private boolean mSuperDispatchTouchEvent;
    private int mTotalUnconsumed;
    private int mTouchSlop;
    private int mTouchSpinner;
    private float mTouchX;
    private float mTouchY;
    private VelocityTracker mVelocityTracker;
    protected boolean mVerticalPermit;
    private RefreshState mViceState;
    protected ValueAnimator reboundAnimator;

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout getLayout() {
        return this;
    }

    public SimpleRefreshLayout(Context context) {
        this(context, null);
    }

    public SimpleRefreshLayout(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public SimpleRefreshLayout(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.mHeaderHeightStatus = RefreshDimensionStatus.DefaultUnNotify;
        this.mFooterHeightStatus = RefreshDimensionStatus.DefaultUnNotify;
        this.mDragRate = 0.5f;
        this.mHeaderMaxDragRate = 2.5f;
        this.mFooterMaxDragRate = 2.5f;
        this.mHeaderTriggerRate = 1.0f;
        this.mFooterTriggerRate = 1.0f;
        this.mEnableRefresh = true;
        this.mEnableLoadMore = false;
        this.mReboundDuration = 300;
        this.mEnableClipHeaderWhenFIXED_BEHIND = true;
        this.mEnableClipFooterWhenFIXED_BEHIND = true;
        this.mEnableHeaderTranslationContent = true;
        this.mEnableFooterTranslationContent = true;
        this.mEnableFooterFollowWhenLoadFinished = false;
        this.mEnableOverScrollBounce = true;
        this.mEnableOverScrollDrag = false;
        this.mEnableAutoLoadMore = true;
        this.mEnablePureScrollMode = false;
        this.mEnableScrollContentWhenLoaded = true;
        this.mEnableScrollContentWhenRefreshed = true;
        this.mEnableLoadMoreWhenContentNotFull = true;
        this.mDisableContentWhenRefresh = false;
        this.mDisableContentWhenLoading = false;
        this.mFooterNoMoreData = false;
        this.mManualLoadMore = false;
        this.mManualNestedScrolling = false;
        this.mManualHeaderTranslationContent = false;
        this.mManualFooterTranslationContent = false;
        this.mFixedHeaderViewId = -1;
        this.mFixedFooterViewId = -1;
        this.mHeaderTranslationViewId = -1;
        this.mFooterTranslationViewId = -1;
        this.mParentOffsetInWindow = new int[2];
        this.mKernel = new C1663c();
        this.mState = RefreshState.None;
        this.mViceState = RefreshState.None;
        this.mLastOpenTime = 0;
        this.mHeaderBackgroundColor = 0;
        this.mFooterBackgroundColor = 0;
        this.mFooterLocked = false;
        this.mDragDirection = 'n';
        this.mVerticalPermit = false;
        this.mFalsifyEvent = null;
        super.setClipToPadding(false);
        ViewConfiguration viewConfiguration = ViewConfiguration.get(context);
        this.mHeaderHeight = DpiUtils.dp2px(60.0f);
        this.mFooterHeight = DpiUtils.dp2px(60.0f);
        this.mTouchSlop = viewConfiguration.getScaledTouchSlop();
        this.mMinimumVelocity = viewConfiguration.getScaledMinimumFlingVelocity();
        this.mMaximumVelocity = viewConfiguration.getScaledMaximumFlingVelocity();
        this.mReboundInterpolator = new AccelerateDecelerateInterpolator();
        this.mScreenHeight = Resources.getSystem().getDisplayMetrics().heightPixels;
        this.mNestedChild = new NestedScrollingChildHelper(this);
        this.mNestedParent = new NestedScrollingParentHelper(this);
        this.mScroller = new Scroller(context);
        this.mVelocityTracker = VelocityTracker.obtain();
        initConfig(context, attributeSet);
    }

    private void initConfig(Context context, AttributeSet attributeSet) {
        TypedArray obtainStyledAttributes = context.obtainStyledAttributes(attributeSet, C1620R.styleable.SimpleRefreshLayout);
        this.mNestedChild.setNestedScrollingEnabled(obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableNestedScrolling, this.mNestedChild.isNestedScrollingEnabled()));
        this.mDragRate = obtainStyledAttributes.getFloat(C1620R.styleable.SimpleRefreshLayout_SimpleDragRate, this.mDragRate);
        this.mHeaderMaxDragRate = obtainStyledAttributes.getFloat(C1620R.styleable.SimpleRefreshLayout_SimpleHeaderMaxDragRate, this.mHeaderMaxDragRate);
        this.mFooterMaxDragRate = obtainStyledAttributes.getFloat(C1620R.styleable.SimpleRefreshLayout_SimpleFooterMaxDragRate, this.mFooterMaxDragRate);
        this.mHeaderTriggerRate = obtainStyledAttributes.getFloat(C1620R.styleable.SimpleRefreshLayout_SimpleHeaderTriggerRate, this.mHeaderTriggerRate);
        this.mFooterTriggerRate = obtainStyledAttributes.getFloat(C1620R.styleable.SimpleRefreshLayout_SimpleFooterTriggerRate, this.mFooterTriggerRate);
        this.mEnableRefresh = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableRefresh, this.mEnableRefresh);
        this.mReboundDuration = obtainStyledAttributes.getInt(C1620R.styleable.SimpleRefreshLayout_SimpleReboundDuration, this.mReboundDuration);
        this.mEnableLoadMore = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableLoadMore, this.mEnableLoadMore);
        this.mHeaderHeight = obtainStyledAttributes.getDimensionPixelOffset(C1620R.styleable.SimpleRefreshLayout_SimpleHeaderHeight, this.mHeaderHeight);
        this.mFooterHeight = obtainStyledAttributes.getDimensionPixelOffset(C1620R.styleable.SimpleRefreshLayout_SimpleFooterHeight, this.mFooterHeight);
        this.mHeaderInsetStart = obtainStyledAttributes.getDimensionPixelOffset(C1620R.styleable.SimpleRefreshLayout_SimpleHeaderInsetStart, this.mHeaderInsetStart);
        this.mFooterInsetStart = obtainStyledAttributes.getDimensionPixelOffset(C1620R.styleable.SimpleRefreshLayout_SimpleFooterInsetStart, this.mFooterInsetStart);
        this.mDisableContentWhenRefresh = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleDisableContentWhenRefresh, this.mDisableContentWhenRefresh);
        this.mDisableContentWhenLoading = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleDisableContentWhenLoading, this.mDisableContentWhenLoading);
        this.mEnableHeaderTranslationContent = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableHeaderTranslationContent, this.mEnableHeaderTranslationContent);
        this.mEnableFooterTranslationContent = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableFooterTranslationContent, this.mEnableFooterTranslationContent);
        this.mEnableAutoLoadMore = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableAutoLoadMore, this.mEnableAutoLoadMore);
        this.mEnableOverScrollBounce = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableOverScrollBounce, this.mEnableOverScrollBounce);
        this.mEnablePureScrollMode = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnablePureScrollMode, this.mEnablePureScrollMode);
        this.mEnableScrollContentWhenLoaded = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableScrollContentWhenLoaded, this.mEnableScrollContentWhenLoaded);
        this.mEnableScrollContentWhenRefreshed = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableScrollContentWhenRefreshed, this.mEnableScrollContentWhenRefreshed);
        this.mEnableLoadMoreWhenContentNotFull = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableLoadMoreWhenContentNotFull, this.mEnableLoadMoreWhenContentNotFull);
        this.mEnableFooterFollowWhenLoadFinished = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableFooterFollowWhenLoadFinished, this.mEnableFooterFollowWhenLoadFinished);
        this.mEnableClipHeaderWhenFIXED_BEHIND = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableClipHeaderWhenFixedBehind, this.mEnableClipHeaderWhenFIXED_BEHIND);
        this.mEnableClipFooterWhenFIXED_BEHIND = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableClipFooterWhenFixedBehind, this.mEnableClipFooterWhenFIXED_BEHIND);
        this.mEnableOverScrollDrag = obtainStyledAttributes.getBoolean(C1620R.styleable.SimpleRefreshLayout_SimpleEnableOverScrollDrag, this.mEnableOverScrollDrag);
        this.mFixedHeaderViewId = obtainStyledAttributes.getResourceId(C1620R.styleable.SimpleRefreshLayout_SimpleFixedHeaderViewId, this.mFixedHeaderViewId);
        this.mFixedFooterViewId = obtainStyledAttributes.getResourceId(C1620R.styleable.SimpleRefreshLayout_SimpleFixedFooterViewId, this.mFixedFooterViewId);
        this.mHeaderTranslationViewId = obtainStyledAttributes.getResourceId(C1620R.styleable.SimpleRefreshLayout_SimpleHeaderTranslationViewId, this.mHeaderTranslationViewId);
        this.mFooterTranslationViewId = obtainStyledAttributes.getResourceId(C1620R.styleable.SimpleRefreshLayout_SimpleFooterTranslationViewId, this.mFooterTranslationViewId);
        if (this.mEnablePureScrollMode && !obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleEnableOverScrollDrag)) {
            this.mEnableOverScrollDrag = true;
        }
        this.mManualLoadMore = this.mManualLoadMore || obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleEnableLoadMore);
        this.mManualHeaderTranslationContent = this.mManualHeaderTranslationContent || obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleEnableHeaderTranslationContent);
        this.mManualFooterTranslationContent = this.mManualFooterTranslationContent || obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleEnableFooterTranslationContent);
        this.mManualNestedScrolling = this.mManualNestedScrolling || obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleEnableNestedScrolling);
        this.mHeaderHeightStatus = obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleHeaderHeight) ? RefreshDimensionStatus.XmlLayoutUnNotify : this.mHeaderHeightStatus;
        this.mFooterHeightStatus = obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_SimpleFooterHeight) ? RefreshDimensionStatus.XmlLayoutUnNotify : this.mFooterHeightStatus;
        int color = obtainStyledAttributes.getColor(C1620R.styleable.SimpleRefreshLayout_SimpleAccentColor, 0);
        int color2 = obtainStyledAttributes.getColor(C1620R.styleable.SimpleRefreshLayout_SimplePrimaryColor, 0);
        if (color2 != 0) {
            if (color != 0) {
                this.mPrimaryColors = new int[]{color2, color};
            } else {
                this.mPrimaryColors = new int[]{color2};
            }
        } else if (color != 0) {
            this.mPrimaryColors = new int[]{0, color};
        }
        obtainStyledAttributes.recycle();
    }

    /* JADX WARN: Removed duplicated region for block: B:30:0x0053  */
    @Override // android.view.View
    /* Code decompiled incorrectly, please refer to instructions dump */
    protected void onFinishInflate() {
        int i;
        int i2;
        int i3;
        super.onFinishInflate();
        int childCount = super.getChildCount();
        if (childCount <= 3) {
            int i4 = 0;
            int i5 = -1;
            char c = 0;
            while (true) {
                i = 2;
                char c2 = 1;
                if (i4 >= childCount) {
                    break;
                }
                View childAt = super.getChildAt(i4);
                if (RefreshUtils.isContentView(childAt) && (c < 2 || i4 == 1)) {
                    i5 = i4;
                    c = 2;
                } else if (!(childAt instanceof RefreshInternal) && c < 1) {
                    if (i4 <= 0) {
                        c2 = 0;
                    }
                    i5 = i4;
                    c = c2;
                }
                i4++;
            }
            if (i5 >= 0) {
                this.mRefreshContent = new C1669a(super.getChildAt(i5));
                if (i5 == 1) {
                    if (childCount == 3) {
                        i2 = 0;
                    } else {
                        i2 = 0;
                        i = -1;
                    }
                } else if (childCount == 2) {
                    i2 = -1;
                    i = 1;
                }
                for (i3 = 0; i3 < childCount; i3++) {
                    View childAt2 = super.getChildAt(i3);
                    if (i3 == i2 || (i3 != i && i2 == -1 && this.mRefreshHeader == null && (childAt2 instanceof RefreshHeader))) {
                        this.mRefreshHeader = childAt2 instanceof RefreshHeader ? (RefreshHeader) childAt2 : new RefreshHeaderWrapper(childAt2);
                    } else if (i3 == i || (i == -1 && (childAt2 instanceof RefreshFooter))) {
                        this.mEnableLoadMore = this.mEnableLoadMore || !this.mManualLoadMore;
                        this.mRefreshFooter = childAt2 instanceof RefreshFooter ? (RefreshFooter) childAt2 : new RefreshFooterWrapper(childAt2);
                    }
                }
                return;
            }
            i2 = -1;
            i = -1;
            while (i3 < childCount) {
            }
            return;
        }
        throw new RuntimeException("最多只支持3个子View，Most only support three sub view");
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onAttachedToWindow() {
        RefreshInternal refreshInternal;
        super.onAttachedToWindow();
        if (!isInEditMode()) {
            if (this.mHandler == null) {
                this.mHandler = new Handler();
            }
            List<RunnableC1664a> list = this.mListDelayedRunnable;
            View view = null;
            if (list != null) {
                for (RunnableC1664a aVar : list) {
                    this.mHandler.postDelayed(aVar, aVar.f3107a);
                }
                this.mListDelayedRunnable.clear();
                this.mListDelayedRunnable = null;
            }
            if (this.mRefreshHeader == null) {
                setRefreshHeader(new BezierRadarHeader(getContext()));
            }
            if (this.mRefreshFooter == null) {
                boolean z = this.mEnableLoadMore;
                setRefreshFooter(new BallPulseFooter(getContext()));
                this.mEnableLoadMore = z;
            } else {
                this.mEnableLoadMore = this.mEnableLoadMore || !this.mManualLoadMore;
            }
            if (this.mRefreshContent == null) {
                int childCount = getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = getChildAt(i);
                    RefreshInternal refreshInternal2 = this.mRefreshHeader;
                    if ((refreshInternal2 == null || childAt != refreshInternal2.getView()) && ((refreshInternal = this.mRefreshFooter) == null || childAt != refreshInternal.getView())) {
                        this.mRefreshContent = new C1669a(childAt);
                    }
                }
            }
            if (this.mRefreshContent == null) {
                int dp2px = DpiUtils.dp2px(20.0f);
                TextView textView = new TextView(getContext());
                textView.setTextColor(-39424);
                textView.setGravity(17);
                textView.setTextSize(20.0f);
                textView.setText("Empty");
                super.addView(textView, -1, -1);
                this.mRefreshContent = new C1669a(textView);
                this.mRefreshContent.getView().setPadding(dp2px, dp2px, dp2px, dp2px);
            }
            int i2 = this.mFixedHeaderViewId;
            View findViewById = i2 > 0 ? findViewById(i2) : null;
            int i3 = this.mFixedFooterViewId;
            if (i3 > 0) {
                view = findViewById(i3);
            }
            this.mRefreshContent.setScrollBound(this.mScrollBoundaryDecider);
            this.mRefreshContent.setEnableLoadMoreWhenContentNotFull(this.mEnableLoadMoreWhenContentNotFull);
            this.mRefreshContent.setUpComponent(this.mKernel, findViewById, view);
            if (this.mSpinner != 0) {
                notifyStateChanged(RefreshState.None);
                RefreshContent refreshContent = this.mRefreshContent;
                this.mSpinner = 0;
                refreshContent.moveSpinner(0, this.mHeaderTranslationViewId, this.mFooterTranslationViewId);
            }
            if (!this.mManualNestedScrolling && !isNestedScrollingEnabled()) {
                post(new Runnable() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.1
                    @Override // java.lang.Runnable
                    public void run() {
                        for (NestedScrollingParent parent = SimpleRefreshLayout.this.getParent(); parent != null; parent = ((View) parent).getParent()) {
                            if (parent instanceof NestedScrollingParent) {
                                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                                if (parent.onStartNestedScroll(simpleRefreshLayout, simpleRefreshLayout, 2)) {
                                    SimpleRefreshLayout.this.setNestedScrollingEnabled(true);
                                    SimpleRefreshLayout.this.mManualNestedScrolling = false;
                                    return;
                                }
                            }
                            if (!(parent instanceof View)) {
                                return;
                            }
                        }
                    }
                });
            }
        }
        int[] iArr = this.mPrimaryColors;
        if (iArr != null) {
            RefreshInternal refreshInternal3 = this.mRefreshHeader;
            if (refreshInternal3 != null) {
                refreshInternal3.setPrimaryColors(iArr);
            }
            RefreshInternal refreshInternal4 = this.mRefreshFooter;
            if (refreshInternal4 != null) {
                refreshInternal4.setPrimaryColors(this.mPrimaryColors);
            }
        }
        RefreshContent refreshContent2 = this.mRefreshContent;
        if (refreshContent2 != null) {
            super.bringChildToFront(refreshContent2.getView());
        }
        RefreshInternal refreshInternal5 = this.mRefreshHeader;
        if (!(refreshInternal5 == null || refreshInternal5.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)) {
            super.bringChildToFront(this.mRefreshHeader.getView());
        }
        RefreshInternal refreshInternal6 = this.mRefreshFooter;
        if (!(refreshInternal6 == null || refreshInternal6.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)) {
            super.bringChildToFront(this.mRefreshFooter.getView());
        }
    }

    @Override // android.view.View
    @SuppressLint({"RestrictedApi"})
    protected void onMeasure(int i, int i2) {
        int i3;
        int i4;
        int childCount = super.getChildCount();
        int i5 = 0;
        for (int i6 = 0; i6 < childCount; i6++) {
            View childAt = super.getChildAt(i6);
            RefreshInternal refreshInternal = this.mRefreshHeader;
            if (refreshInternal != null && refreshInternal.getView() == childAt) {
                View view = this.mRefreshHeader.getView();
                LayoutParams layoutParams = (LayoutParams) view.getLayoutParams();
                int childMeasureSpec = ViewGroup.getChildMeasureSpec(i, layoutParams.leftMargin + layoutParams.rightMargin, layoutParams.width);
                int i7 = this.mHeaderHeight;
                if (this.mHeaderHeightStatus.ordinal() < RefreshDimensionStatus.XmlLayoutUnNotify.ordinal()) {
                    if (layoutParams.height > 0) {
                        int i8 = layoutParams.topMargin + layoutParams.height + layoutParams.bottomMargin;
                        if (this.mHeaderHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlExactUnNotify)) {
                            this.mHeaderHeight = layoutParams.height + layoutParams.bottomMargin + layoutParams.topMargin;
                            this.mHeaderHeightStatus = RefreshDimensionStatus.XmlExactUnNotify;
                        }
                        i7 = i8;
                    } else if (layoutParams.height == -2 && (this.mRefreshHeader.getRefreshSpinner() != RefreshSpinner.MATCH_LAYOUT || !this.mHeaderHeightStatus.notified)) {
                        int max = Math.max((View.MeasureSpec.getSize(i2) - layoutParams.bottomMargin) - layoutParams.topMargin, 0);
                        view.measure(childMeasureSpec, View.MeasureSpec.makeMeasureSpec(max, LayoutMetricsConversions.REACT_CONSTRAINT_UNDEFINED));
                        int measuredHeight = view.getMeasuredHeight();
                        if (measuredHeight > 0) {
                            if (measuredHeight != max && this.mHeaderHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlWrapUnNotify)) {
                                this.mHeaderHeight = measuredHeight + layoutParams.bottomMargin + layoutParams.topMargin;
                                this.mHeaderHeightStatus = RefreshDimensionStatus.XmlWrapUnNotify;
                            }
                            i7 = -1;
                        }
                    }
                }
                if (this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.MATCH_LAYOUT) {
                    i7 = View.MeasureSpec.getSize(i2);
                    i4 = -1;
                } else if (this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.SCALE) {
                    i7 = Math.max(0, isEnableRefreshOrLoadMore(this.mEnableRefresh) ? this.mSpinner : 0);
                    i4 = -1;
                } else {
                    i4 = -1;
                }
                if (i7 != i4) {
                    view.measure(childMeasureSpec, View.MeasureSpec.makeMeasureSpec(Math.max((i7 - layoutParams.bottomMargin) - layoutParams.topMargin, 0), 1073741824));
                }
                if (!this.mHeaderHeightStatus.notified) {
                    this.mHeaderHeightStatus = this.mHeaderHeightStatus.notified();
                    RefreshInternal refreshInternal2 = this.mRefreshHeader;
                    RefreshKernel refreshKernel = this.mKernel;
                    int i9 = this.mHeaderHeight;
                    refreshInternal2.onInitialized(refreshKernel, i9, (int) (this.mHeaderMaxDragRate * ((float) i9)));
                }
            }
            RefreshInternal refreshInternal3 = this.mRefreshFooter;
            if (refreshInternal3 != null && refreshInternal3.getView() == childAt) {
                View view2 = this.mRefreshFooter.getView();
                LayoutParams layoutParams2 = (LayoutParams) view2.getLayoutParams();
                int childMeasureSpec2 = ViewGroup.getChildMeasureSpec(i, layoutParams2.leftMargin + layoutParams2.rightMargin, layoutParams2.width);
                int i10 = this.mFooterHeight;
                if (this.mFooterHeightStatus.ordinal() < RefreshDimensionStatus.XmlLayoutUnNotify.ordinal()) {
                    if (layoutParams2.height > 0) {
                        int i11 = layoutParams2.height + layoutParams2.topMargin + layoutParams2.bottomMargin;
                        if (this.mFooterHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlExactUnNotify)) {
                            this.mFooterHeight = layoutParams2.height + layoutParams2.topMargin + layoutParams2.bottomMargin;
                            this.mFooterHeightStatus = RefreshDimensionStatus.XmlExactUnNotify;
                        }
                        i10 = i11;
                    } else if (layoutParams2.height == -2 && (this.mRefreshFooter.getRefreshSpinner() != RefreshSpinner.MATCH_LAYOUT || !this.mFooterHeightStatus.notified)) {
                        int max2 = Math.max((View.MeasureSpec.getSize(i2) - layoutParams2.bottomMargin) - layoutParams2.topMargin, 0);
                        view2.measure(childMeasureSpec2, View.MeasureSpec.makeMeasureSpec(max2, LayoutMetricsConversions.REACT_CONSTRAINT_UNDEFINED));
                        int measuredHeight2 = view2.getMeasuredHeight();
                        if (measuredHeight2 > 0) {
                            if (measuredHeight2 != max2 && this.mFooterHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlWrapUnNotify)) {
                                this.mFooterHeight = measuredHeight2 + layoutParams2.topMargin + layoutParams2.bottomMargin;
                                this.mFooterHeightStatus = RefreshDimensionStatus.XmlWrapUnNotify;
                            }
                            i10 = -1;
                        }
                    }
                }
                if (this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.MATCH_LAYOUT) {
                    i10 = View.MeasureSpec.getSize(i2);
                    i3 = -1;
                } else if (this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.SCALE) {
                    i10 = Math.max(0, isEnableRefreshOrLoadMore(this.mEnableLoadMore) ? -this.mSpinner : 0);
                    i3 = -1;
                } else {
                    i3 = -1;
                }
                if (i10 != i3) {
                    view2.measure(childMeasureSpec2, View.MeasureSpec.makeMeasureSpec(Math.max((i10 - layoutParams2.bottomMargin) - layoutParams2.topMargin, 0), 1073741824));
                }
                if (!this.mFooterHeightStatus.notified) {
                    this.mFooterHeightStatus = this.mFooterHeightStatus.notified();
                    RefreshInternal refreshInternal4 = this.mRefreshFooter;
                    RefreshKernel refreshKernel2 = this.mKernel;
                    int i12 = this.mFooterHeight;
                    refreshInternal4.onInitialized(refreshKernel2, i12, (int) (this.mFooterMaxDragRate * ((float) i12)));
                }
            }
            RefreshContent refreshContent = this.mRefreshContent;
            if (refreshContent != null && refreshContent.getView() == childAt) {
                View view3 = this.mRefreshContent.getView();
                LayoutParams layoutParams3 = (LayoutParams) view3.getLayoutParams();
                view3.measure(ViewGroup.getChildMeasureSpec(i, getPaddingLeft() + getPaddingRight() + layoutParams3.leftMargin + layoutParams3.rightMargin, layoutParams3.width), ViewGroup.getChildMeasureSpec(i2, getPaddingTop() + getPaddingBottom() + layoutParams3.topMargin + layoutParams3.bottomMargin, layoutParams3.height));
                i5 += view3.getMeasuredHeight();
            }
        }
        super.setMeasuredDimension(View.resolveSize(super.getSuggestedMinimumWidth(), i), View.resolveSize(i5, i2));
        this.mLastTouchX = (float) (getMeasuredWidth() / 2);
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        int paddingLeft = getPaddingLeft();
        int paddingTop = getPaddingTop();
        getPaddingBottom();
        int childCount = super.getChildCount();
        for (int i5 = 0; i5 < childCount; i5++) {
            View childAt = super.getChildAt(i5);
            RefreshContent refreshContent = this.mRefreshContent;
            if (refreshContent != null && refreshContent.getView() == childAt) {
                View view = this.mRefreshContent.getView();
                LayoutParams layoutParams = (LayoutParams) view.getLayoutParams();
                int i6 = layoutParams.leftMargin + paddingLeft;
                int i7 = layoutParams.topMargin + paddingTop;
                view.layout(i6, i7, view.getMeasuredWidth() + i6, view.getMeasuredHeight() + i7);
            }
            RefreshInternal refreshInternal = this.mRefreshHeader;
            if (refreshInternal != null && refreshInternal.getView() == childAt) {
                View view2 = this.mRefreshHeader.getView();
                LayoutParams layoutParams2 = (LayoutParams) view2.getLayoutParams();
                int i8 = layoutParams2.leftMargin;
                int i9 = layoutParams2.topMargin + this.mHeaderInsetStart;
                int measuredWidth = view2.getMeasuredWidth() + i8;
                int measuredHeight = view2.getMeasuredHeight() + i9;
                if (this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
                    int i10 = this.mHeaderHeight;
                    i9 -= i10;
                    measuredHeight -= i10;
                }
                view2.layout(i8, i9, measuredWidth, measuredHeight);
            }
            RefreshInternal refreshInternal2 = this.mRefreshFooter;
            if (refreshInternal2 != null && refreshInternal2.getView() == childAt) {
                View view3 = this.mRefreshFooter.getView();
                LayoutParams layoutParams3 = (LayoutParams) view3.getLayoutParams();
                RefreshSpinner refreshSpinner = this.mRefreshFooter.getRefreshSpinner();
                int i11 = layoutParams3.leftMargin;
                int measuredHeight2 = (layoutParams3.topMargin + getMeasuredHeight()) - this.mFooterInsetStart;
                if (refreshSpinner == RefreshSpinner.MATCH_LAYOUT) {
                    measuredHeight2 = layoutParams3.topMargin - this.mFooterInsetStart;
                } else if (refreshSpinner == RefreshSpinner.FIXED_FRONT || refreshSpinner == RefreshSpinner.FIXED_BEHIND) {
                    measuredHeight2 -= this.mFooterHeight;
                } else if (refreshSpinner == RefreshSpinner.SCALE && this.mSpinner < 0) {
                    measuredHeight2 -= Math.max(isEnableRefreshOrLoadMore(this.mEnableLoadMore) ? -this.mSpinner : 0, 0);
                }
                view3.layout(i11, measuredHeight2, view3.getMeasuredWidth() + i11, view3.getMeasuredHeight() + measuredHeight2);
            }
        }
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        this.mKernel.moveSpinner(0, true);
        notifyStateChanged(RefreshState.None);
        Handler handler = this.mHandler;
        if (handler != null) {
            handler.removeCallbacksAndMessages(null);
            this.mHandler = null;
        }
        List<RunnableC1664a> list = this.mListDelayedRunnable;
        if (list != null) {
            list.clear();
            this.mListDelayedRunnable = null;
        }
        this.mManualLoadMore = true;
        this.mManualNestedScrolling = true;
        this.animationRunnable = null;
        ValueAnimator valueAnimator = this.reboundAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.reboundAnimator.removeAllUpdateListeners();
            this.reboundAnimator.cancel();
            this.reboundAnimator = null;
        }
    }

    @Override // android.view.ViewGroup
    protected boolean drawChild(Canvas canvas, View view, long j) {
        Paint paint;
        Paint paint2;
        RefreshContent refreshContent = this.mRefreshContent;
        View view2 = refreshContent != null ? refreshContent.getView() : null;
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal != null && refreshInternal.getView() == view) {
            if (!isEnableRefreshOrLoadMore(this.mEnableRefresh)) {
                return true;
            }
            if (view2 != null) {
                int max = Math.max(view2.getTop() + view2.getPaddingTop() + this.mSpinner, view.getTop());
                int i = this.mHeaderBackgroundColor;
                if (!(i == 0 || (paint2 = this.mPaint) == null)) {
                    paint2.setColor(i);
                    if (this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.SCALE) {
                        max = view.getBottom();
                    } else if (this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
                        max = view.getBottom() + this.mSpinner;
                    }
                    canvas.drawRect((float) view.getLeft(), (float) view.getTop(), (float) view.getRight(), (float) max, this.mPaint);
                }
                if (this.mEnableClipHeaderWhenFIXED_BEHIND && this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) {
                    canvas.save();
                    canvas.clipRect(view.getLeft(), view.getTop(), view.getRight(), max);
                    boolean drawChild = super.drawChild(canvas, view, j);
                    canvas.restore();
                    return drawChild;
                }
            }
        }
        RefreshInternal refreshInternal2 = this.mRefreshFooter;
        if (refreshInternal2 != null && refreshInternal2.getView() == view) {
            if (!isEnableRefreshOrLoadMore(this.mEnableLoadMore)) {
                return true;
            }
            if (view2 != null) {
                int min = Math.min((view2.getBottom() - view2.getPaddingBottom()) + this.mSpinner, view.getBottom());
                int i2 = this.mFooterBackgroundColor;
                if (!(i2 == 0 || (paint = this.mPaint) == null)) {
                    paint.setColor(i2);
                    if (this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.SCALE) {
                        min = view.getTop();
                    } else if (this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
                        min = view.getTop() + this.mSpinner;
                    }
                    canvas.drawRect((float) view.getLeft(), (float) min, (float) view.getRight(), (float) view.getBottom(), this.mPaint);
                }
                if (this.mEnableClipFooterWhenFIXED_BEHIND && this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) {
                    canvas.save();
                    canvas.clipRect(view.getLeft(), min, view.getRight(), view.getBottom());
                    boolean drawChild2 = super.drawChild(canvas, view, j);
                    canvas.restore();
                    return drawChild2;
                }
            }
        }
        return super.drawChild(canvas, view, j);
    }

    @Override // android.view.View
    public void computeScroll() {
        float f;
        if (this.mScroller.computeScrollOffset()) {
            int finalY = this.mScroller.getFinalY();
            if ((finalY >= 0 || ((!this.mEnableOverScrollDrag && !isEnableRefreshOrLoadMore(this.mEnableRefresh)) || !this.mRefreshContent.canRefresh())) && (finalY <= 0 || ((!this.mEnableOverScrollDrag && !isEnableRefreshOrLoadMore(this.mEnableLoadMore)) || !this.mRefreshContent.canLoadMore()))) {
                this.mVerticalPermit = true;
                invalidate();
                return;
            }
            if (this.mVerticalPermit) {
                if (Build.VERSION.SDK_INT >= 14) {
                    f = finalY > 0 ? -this.mScroller.getCurrVelocity() : this.mScroller.getCurrVelocity();
                } else {
                    f = (((float) (this.mScroller.getCurrY() - finalY)) * 1.0f) / ((float) Math.max(this.mScroller.getDuration() - this.mScroller.timePassed(), 1));
                }
                animSpinnerBounce(f);
            }
            this.mScroller.forceFinished(true);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:180:0x02a5  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x02c3  */
    @Override // android.view.ViewGroup, android.view.View
    /* Code decompiled incorrectly, please refer to instructions dump */
    public boolean dispatchTouchEvent(MotionEvent motionEvent) {
        MotionEvent motionEvent2;
        int actionMasked = motionEvent.getActionMasked();
        boolean z = actionMasked == 6;
        int actionIndex = z ? motionEvent.getActionIndex() : -1;
        int pointerCount = motionEvent.getPointerCount();
        float f = 0.0f;
        float f2 = 0.0f;
        for (int i = 0; i < pointerCount; i++) {
            if (actionIndex != i) {
                f += motionEvent.getX(i);
                f2 += motionEvent.getY(i);
            }
        }
        if (z) {
            pointerCount--;
        }
        float f3 = (float) pointerCount;
        float f4 = f / f3;
        float f5 = f2 / f3;
        if ((actionMasked == 6 || actionMasked == 5) && this.mIsBeingDragged) {
            this.mTouchY += f5 - this.mLastTouchY;
        }
        this.mLastTouchX = f4;
        this.mLastTouchY = f5;
        if (this.mNestedInProgress) {
            int i2 = this.mTotalUnconsumed;
            return super.dispatchTouchEvent(motionEvent);
        } else if (!isEnabled() || ((!isEnableRefreshOrLoadMore(this.mEnableRefresh) && !isEnableRefreshOrLoadMore(this.mEnableLoadMore) && !this.mEnableOverScrollDrag) || ((this.mHeaderNeedTouchEventWhenRefreshing && ((this.mState.isOpening || this.mState.isFinishing) && this.mState.isHeader)) || (this.mFooterNeedTouchEventWhenLoading && ((this.mState.isOpening || this.mState.isFinishing) && this.mState.isFooter))))) {
            return super.dispatchTouchEvent(motionEvent);
        } else {
            if (interceptAnimatorByAction(actionMasked) || this.mState.isFinishing || ((this.mState == RefreshState.Loading && this.mDisableContentWhenLoading) || (this.mState == RefreshState.Refreshing && this.mDisableContentWhenRefresh))) {
                return false;
            }
            switch (actionMasked) {
                case 0:
                    this.mCurrentVelocity = 0;
                    this.mVelocityTracker.addMovement(motionEvent);
                    this.mScroller.forceFinished(true);
                    this.mTouchX = f4;
                    this.mTouchY = f5;
                    this.mLastSpinner = 0;
                    this.mTouchSpinner = this.mSpinner;
                    this.mIsBeingDragged = false;
                    this.mSuperDispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                    RefreshContent refreshContent = this.mRefreshContent;
                    if (refreshContent != null) {
                        refreshContent.onActionDown(motionEvent);
                    }
                    return true;
                case 1:
                    this.mVelocityTracker.addMovement(motionEvent);
                    this.mVelocityTracker.computeCurrentVelocity(1000, (float) this.mMaximumVelocity);
                    this.mCurrentVelocity = (int) this.mVelocityTracker.getYVelocity();
                    startFlingIfNeed(null);
                    this.mVelocityTracker.clear();
                    this.mDragDirection = 'n';
                    motionEvent2 = this.mFalsifyEvent;
                    if (motionEvent2 != null) {
                        motionEvent2.recycle();
                        this.mFalsifyEvent = null;
                        long eventTime = motionEvent.getEventTime();
                        MotionEvent obtain = MotionEvent.obtain(eventTime, eventTime, actionMasked, this.mTouchX, f5, 0);
                        super.dispatchTouchEvent(obtain);
                        obtain.recycle();
                    }
                    overSpinner();
                    if (this.mIsBeingDragged) {
                        this.mIsBeingDragged = false;
                        return true;
                    }
                    return super.dispatchTouchEvent(motionEvent);
                case 2:
                    float f6 = f4 - this.mTouchX;
                    float f7 = f5 - this.mTouchY;
                    this.mVelocityTracker.addMovement(motionEvent);
                    if (!this.mIsBeingDragged && this.mRefreshContent != null && (this.mDragDirection == 'v' || (Math.abs(f7) >= ((float) this.mTouchSlop) && Math.abs(f6) < Math.abs(f7)))) {
                        this.mDragDirection = 'v';
                        if (f7 > 0.0f && (this.mSpinner < 0 || ((this.mEnableOverScrollDrag || isEnableRefreshOrLoadMore(this.mEnableRefresh)) && this.mRefreshContent.canRefresh()))) {
                            this.mIsBeingDragged = true;
                            this.mTouchY = f5 - ((float) this.mTouchSlop);
                        } else if (f7 < 0.0f && (this.mSpinner > 0 || ((this.mEnableOverScrollDrag || isEnableRefreshOrLoadMore(this.mEnableLoadMore)) && ((this.mState == RefreshState.Loading && this.mFooterLocked) || this.mRefreshContent.canLoadMore())))) {
                            this.mIsBeingDragged = true;
                            this.mTouchY = ((float) this.mTouchSlop) + f5;
                        }
                        if (this.mIsBeingDragged) {
                            f7 = f5 - this.mTouchY;
                            if (this.mSuperDispatchTouchEvent) {
                                motionEvent.setAction(3);
                                super.dispatchTouchEvent(motionEvent);
                            }
                            int i3 = this.mSpinner;
                            if (i3 > 0 || (i3 == 0 && f7 > 0.0f)) {
                                this.mKernel.setState(RefreshState.PullDownToRefresh);
                            } else {
                                this.mKernel.setState(RefreshState.PullUpToLoad);
                            }
                            ViewParent parent = getParent();
                            if (parent != null) {
                                parent.requestDisallowInterceptTouchEvent(true);
                            }
                        }
                    }
                    if (this.mIsBeingDragged) {
                        int i4 = ((int) f7) + this.mTouchSpinner;
                        if ((this.mViceState.isHeader && (i4 < 0 || this.mLastSpinner < 0)) || (this.mViceState.isFooter && (i4 > 0 || this.mLastSpinner > 0))) {
                            this.mLastSpinner = i4;
                            long eventTime2 = motionEvent.getEventTime();
                            if (this.mFalsifyEvent == null) {
                                this.mFalsifyEvent = MotionEvent.obtain(eventTime2, eventTime2, 0, this.mTouchX + f6, this.mTouchY, 0);
                                super.dispatchTouchEvent(this.mFalsifyEvent);
                            }
                            MotionEvent obtain2 = MotionEvent.obtain(eventTime2, eventTime2, 2, this.mTouchX + f6, this.mTouchY + ((float) i4), 0);
                            super.dispatchTouchEvent(obtain2);
                            if (this.mFooterLocked && f7 > ((float) this.mTouchSlop) && this.mSpinner < 0) {
                                this.mFooterLocked = false;
                            }
                            if (i4 > 0 && ((this.mEnableOverScrollDrag || isEnableRefreshOrLoadMore(this.mEnableRefresh)) && this.mRefreshContent.canRefresh())) {
                                this.mLastTouchY = f5;
                                this.mTouchY = f5;
                                this.mTouchSpinner = 0;
                                this.mKernel.setState(RefreshState.PullDownToRefresh);
                                i4 = 0;
                            } else if (i4 < 0 && ((this.mEnableOverScrollDrag || isEnableRefreshOrLoadMore(this.mEnableLoadMore)) && this.mRefreshContent.canLoadMore())) {
                                this.mLastTouchY = f5;
                                this.mTouchY = f5;
                                this.mTouchSpinner = 0;
                                this.mKernel.setState(RefreshState.PullUpToLoad);
                                i4 = 0;
                            }
                            if ((!this.mViceState.isHeader || i4 >= 0) && (!this.mViceState.isFooter || i4 <= 0)) {
                                if (this.mFalsifyEvent != null) {
                                    this.mFalsifyEvent = null;
                                    obtain2.setAction(3);
                                    super.dispatchTouchEvent(obtain2);
                                }
                                obtain2.recycle();
                            } else {
                                if (this.mSpinner != 0) {
                                    moveSpinnerInfinitely(0.0f);
                                }
                                return true;
                            }
                        }
                        moveSpinnerInfinitely((float) i4);
                        return true;
                    }
                    if (this.mFooterLocked && f7 > ((float) this.mTouchSlop) && this.mSpinner < 0) {
                        this.mFooterLocked = false;
                    }
                    return super.dispatchTouchEvent(motionEvent);
                case 3:
                    this.mVelocityTracker.clear();
                    this.mDragDirection = 'n';
                    motionEvent2 = this.mFalsifyEvent;
                    if (motionEvent2 != null) {
                    }
                    overSpinner();
                    if (this.mIsBeingDragged) {
                    }
                    return super.dispatchTouchEvent(motionEvent);
                default:
                    return super.dispatchTouchEvent(motionEvent);
            }
        }
    }

    protected boolean startFlingIfNeed(Float f) {
        float floatValue = f == null ? (float) this.mCurrentVelocity : f.floatValue();
        if (Math.abs(floatValue) > ((float) this.mMinimumVelocity)) {
            if (((float) this.mSpinner) * floatValue < 0.0f) {
                if (!this.mState.isOpening) {
                    int i = this.mSpinner;
                    if (((float) i) > ((float) this.mHeaderHeight) * this.mHeaderTriggerRate || ((float) (-i)) > ((float) this.mFooterHeight) * this.mFooterTriggerRate) {
                        return true;
                    }
                } else if (this.mState != this.mViceState) {
                    this.animationRunnable = new RunnableC1662b(floatValue).m1390a();
                    return true;
                }
            }
            if ((floatValue < 0.0f && ((this.mEnableOverScrollBounce && (this.mEnableOverScrollDrag || isEnableRefreshOrLoadMore(this.mEnableLoadMore))) || ((this.mState == RefreshState.Loading && this.mSpinner >= 0) || (this.mEnableAutoLoadMore && isEnableRefreshOrLoadMore(this.mEnableLoadMore))))) || (floatValue > 0.0f && ((this.mEnableOverScrollBounce && (this.mEnableOverScrollDrag || isEnableRefreshOrLoadMore(this.mEnableRefresh))) || (this.mState == RefreshState.Refreshing && this.mSpinner <= 0)))) {
                this.mVerticalPermit = false;
                this.mScroller.fling(0, 0, 0, (int) (-floatValue), 0, 0, -2147483647, Integer.MAX_VALUE);
                this.mScroller.computeScrollOffset();
                invalidate();
            }
        }
        return false;
    }

    protected boolean interceptAnimatorByAction(int i) {
        if (i == 0) {
            if (this.reboundAnimator != null) {
                if (this.mState.isFinishing) {
                    return true;
                }
                if (this.mState == RefreshState.PullDownCanceled) {
                    this.mKernel.setState(RefreshState.PullDownToRefresh);
                } else if (this.mState == RefreshState.PullUpCanceled) {
                    this.mKernel.setState(RefreshState.PullUpToLoad);
                }
                this.reboundAnimator.cancel();
                this.reboundAnimator = null;
            }
            this.animationRunnable = null;
        }
        if (this.reboundAnimator != null) {
            return true;
        }
        return false;
    }

    @SuppressLint({"RestrictedApi"})
    protected void notifyStateChanged(RefreshState refreshState) {
        RefreshState refreshState2 = this.mState;
        if (refreshState2 != refreshState) {
            this.mState = refreshState;
            this.mViceState = refreshState;
            RefreshInternal refreshInternal = this.mRefreshHeader;
            RefreshInternal refreshInternal2 = this.mRefreshFooter;
            OnMultiPurposeListener onMultiPurposeListener = this.mOnMultiPurposeListener;
            if (refreshInternal != null) {
                refreshInternal.onStateChanged(this, refreshState2, refreshState);
            }
            if (refreshInternal2 != null) {
                refreshInternal2.onStateChanged(this, refreshState2, refreshState);
            }
            if (onMultiPurposeListener != null) {
                onMultiPurposeListener.onStateChanged(this, refreshState2, refreshState);
            }
        }
    }

    @SuppressLint({"RestrictedApi"})
    protected void setStateDirectLoading() {
        if (this.mState != RefreshState.Loading) {
            this.mLastOpenTime = System.currentTimeMillis();
            this.mFooterLocked = true;
            notifyStateChanged(RefreshState.Loading);
            OnLoadMoreListener onLoadMoreListener = this.mLoadMoreListener;
            if (onLoadMoreListener != null) {
                onLoadMoreListener.onLoadMore(this);
            } else if (this.mOnMultiPurposeListener == null) {
                finishLoadMore(2000);
            }
            RefreshInternal refreshInternal = this.mRefreshFooter;
            if (refreshInternal != null) {
                int i = this.mFooterHeight;
                refreshInternal.onStartAnimator(this, i, (int) (this.mFooterMaxDragRate * ((float) i)));
            }
            OnMultiPurposeListener onMultiPurposeListener = this.mOnMultiPurposeListener;
            if (onMultiPurposeListener != null && (this.mRefreshFooter instanceof RefreshFooter)) {
                onMultiPurposeListener.onLoadMore(this);
                int i2 = this.mFooterHeight;
                this.mOnMultiPurposeListener.onFooterStartAnimator((RefreshFooter) this.mRefreshFooter, i2, (int) (this.mFooterMaxDragRate * ((float) i2)));
            }
        }
    }

    @SuppressLint({"RestrictedApi"})
    protected void setStateLoading() {
        C16503 r0 = new AnimatorListenerAdapter() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.3
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                SimpleRefreshLayout.this.setStateDirectLoading();
            }
        };
        notifyStateChanged(RefreshState.LoadReleased);
        ValueAnimator animSpinner = this.mKernel.animSpinner(-this.mFooterHeight);
        if (animSpinner != null) {
            animSpinner.addListener(r0);
        }
        RefreshInternal refreshInternal = this.mRefreshFooter;
        if (refreshInternal != null) {
            int i = this.mFooterHeight;
            refreshInternal.onReleased(this, i, (int) (this.mFooterMaxDragRate * ((float) i)));
        }
        OnMultiPurposeListener onMultiPurposeListener = this.mOnMultiPurposeListener;
        if (onMultiPurposeListener != null) {
            RefreshInternal refreshInternal2 = this.mRefreshFooter;
            if (refreshInternal2 instanceof RefreshFooter) {
                int i2 = this.mFooterHeight;
                onMultiPurposeListener.onFooterReleased((RefreshFooter) refreshInternal2, i2, (int) (this.mFooterMaxDragRate * ((float) i2)));
            }
        }
        if (animSpinner == null) {
            r0.onAnimationEnd(null);
        }
    }

    @SuppressLint({"RestrictedApi"})
    protected void setStateRefreshing() {
        C16514 r0 = new AnimatorListenerAdapter() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.4
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                SimpleRefreshLayout.this.mLastOpenTime = System.currentTimeMillis();
                SimpleRefreshLayout.this.notifyStateChanged(RefreshState.Refreshing);
                if (SimpleRefreshLayout.this.mRefreshListener != null) {
                    SimpleRefreshLayout.this.mRefreshListener.onRefresh(SimpleRefreshLayout.this);
                } else if (SimpleRefreshLayout.this.mOnMultiPurposeListener == null) {
                    SimpleRefreshLayout.this.finishRefresh(3000);
                }
                if (SimpleRefreshLayout.this.mRefreshHeader != null) {
                    RefreshInternal refreshInternal = SimpleRefreshLayout.this.mRefreshHeader;
                    SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                    refreshInternal.onStartAnimator(simpleRefreshLayout, simpleRefreshLayout.mHeaderHeight, (int) (SimpleRefreshLayout.this.mHeaderMaxDragRate * ((float) SimpleRefreshLayout.this.mHeaderHeight)));
                }
                if (SimpleRefreshLayout.this.mOnMultiPurposeListener != null && (SimpleRefreshLayout.this.mRefreshHeader instanceof RefreshHeader)) {
                    SimpleRefreshLayout.this.mOnMultiPurposeListener.onRefresh(SimpleRefreshLayout.this);
                    SimpleRefreshLayout.this.mOnMultiPurposeListener.onHeaderStartAnimator((RefreshHeader) SimpleRefreshLayout.this.mRefreshHeader, SimpleRefreshLayout.this.mHeaderHeight, (int) (SimpleRefreshLayout.this.mHeaderMaxDragRate * ((float) SimpleRefreshLayout.this.mHeaderHeight)));
                }
            }
        };
        notifyStateChanged(RefreshState.RefreshReleased);
        ValueAnimator animSpinner = this.mKernel.animSpinner(this.mHeaderHeight);
        if (animSpinner != null) {
            animSpinner.addListener(r0);
        }
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal != null) {
            int i = this.mHeaderHeight;
            refreshInternal.onReleased(this, i, (int) (this.mHeaderMaxDragRate * ((float) i)));
        }
        OnMultiPurposeListener onMultiPurposeListener = this.mOnMultiPurposeListener;
        if (onMultiPurposeListener != null) {
            RefreshInternal refreshInternal2 = this.mRefreshHeader;
            if (refreshInternal2 instanceof RefreshHeader) {
                int i2 = this.mHeaderHeight;
                onMultiPurposeListener.onHeaderReleased((RefreshHeader) refreshInternal2, i2, (int) (this.mHeaderMaxDragRate * ((float) i2)));
            }
        }
        if (animSpinner == null) {
            r0.onAnimationEnd(null);
        }
    }

    protected void resetStatus() {
        if (this.mState != RefreshState.None && this.mSpinner == 0) {
            notifyStateChanged(RefreshState.None);
        }
        if (this.mSpinner != 0) {
            this.mKernel.animSpinner(0);
        }
    }

    protected void setViceState(RefreshState refreshState) {
        if (this.mState.isDragging && this.mState.isHeader != refreshState.isHeader) {
            notifyStateChanged(RefreshState.None);
        }
        if (this.mViceState != refreshState) {
            this.mViceState = refreshState;
        }
    }

    protected boolean isEnableTranslationContent(boolean z, RefreshInternal refreshInternal) {
        return z || this.mEnablePureScrollMode || refreshInternal == null || refreshInternal.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND;
    }

    protected boolean isEnableRefreshOrLoadMore(boolean z) {
        return z && !this.mEnablePureScrollMode;
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout$b */
    /* loaded from: classes.dex */
    protected class RunnableC1662b implements Runnable {

        /* renamed from: a */
        int f3098a;

        /* renamed from: d */
        float f3101d;

        /* renamed from: b */
        int f3099b = 0;

        /* renamed from: c */
        int f3100c = 10;

        /* renamed from: e */
        float f3102e = 0.98f;

        /* renamed from: f */
        long f3103f = 0;

        /* renamed from: g */
        long f3104g = AnimationUtils.currentAnimationTimeMillis();

        RunnableC1662b(float f) {
            SimpleRefreshLayout.this = r3;
            this.f3101d = f;
            this.f3098a = r3.mSpinner;
        }

        /* JADX WARN: Code restructure failed: missing block: B:14:0x0038, code lost:
            if (r0.isEnableRefreshOrLoadMore(r0.mEnableLoadMore) != false) goto L_0x003a;
         */
        /* JADX WARN: Code restructure failed: missing block: B:22:0x005e, code lost:
            if (r0.isEnableRefreshOrLoadMore(r0.mEnableLoadMore) != false) goto L_0x0060;
         */
        /* JADX WARN: Code restructure failed: missing block: B:24:0x006d, code lost:
            if (com.p051jd.lib.p083un.basewidget.widget.simple.SimpleRefreshLayout.this.mSpinner >= (-com.p051jd.lib.p083un.basewidget.widget.simple.SimpleRefreshLayout.this.mFooterHeight)) goto L_0x006f;
         */
        /* JADX WARN: Code restructure failed: missing block: B:28:0x0085, code lost:
            if (com.p051jd.lib.p083un.basewidget.widget.simple.SimpleRefreshLayout.this.mSpinner > com.p051jd.lib.p083un.basewidget.widget.simple.SimpleRefreshLayout.this.mHeaderHeight) goto L_0x0087;
         */
        /* renamed from: a */
        /* Code decompiled incorrectly, please refer to instructions dump */
        public Runnable m1390a() {
            if (SimpleRefreshLayout.this.mState.isFinishing) {
                return null;
            }
            if (SimpleRefreshLayout.this.mSpinner != 0) {
                if (!SimpleRefreshLayout.this.mState.isOpening) {
                    if (SimpleRefreshLayout.this.mFooterNoMoreData && SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished) {
                        SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                    }
                    int i = 0;
                    int i2 = SimpleRefreshLayout.this.mSpinner;
                    int i3 = SimpleRefreshLayout.this.mSpinner;
                    float f = this.f3101d;
                    while (true) {
                        if (i3 * i2 <= 0) {
                            break;
                        }
                        double d = (double) f;
                        i++;
                        double pow = Math.pow((double) this.f3102e, (double) ((this.f3100c * i) / 10));
                        Double.isNaN(d);
                        f = (float) (d * pow);
                        float f2 = ((((float) this.f3100c) * 1.0f) / 1000.0f) * f;
                        if (Math.abs(f2) >= 1.0f) {
                            i2 = (int) (((float) i2) + f2);
                        } else if (!SimpleRefreshLayout.this.mState.isOpening || ((SimpleRefreshLayout.this.mState == RefreshState.Refreshing && i2 > SimpleRefreshLayout.this.mHeaderHeight) || (SimpleRefreshLayout.this.mState != RefreshState.Refreshing && i2 < (-SimpleRefreshLayout.this.mFooterHeight)))) {
                            return null;
                        }
                    }
                }
                if (SimpleRefreshLayout.this.mState != RefreshState.Loading) {
                    if (SimpleRefreshLayout.this.mFooterNoMoreData && SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished) {
                        SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                    }
                    if (SimpleRefreshLayout.this.mState == RefreshState.Refreshing) {
                    }
                }
            }
            this.f3103f = AnimationUtils.currentAnimationTimeMillis();
            SimpleRefreshLayout.this.postDelayed(this, (long) this.f3100c);
            return this;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (SimpleRefreshLayout.this.animationRunnable == this && !SimpleRefreshLayout.this.mState.isFinishing) {
                long currentAnimationTimeMillis = AnimationUtils.currentAnimationTimeMillis();
                double d = (double) this.f3101d;
                double pow = Math.pow((double) this.f3102e, (double) ((currentAnimationTimeMillis - this.f3103f) / ((long) (1000 / this.f3100c))));
                Double.isNaN(d);
                this.f3101d = (float) (d * pow);
                float f = this.f3101d * ((((float) (currentAnimationTimeMillis - this.f3104g)) * 1.0f) / 1000.0f);
                if (Math.abs(f) > 1.0f) {
                    this.f3104g = currentAnimationTimeMillis;
                    this.f3098a = (int) (((float) this.f3098a) + f);
                    if (SimpleRefreshLayout.this.mSpinner * this.f3098a > 0) {
                        SimpleRefreshLayout.this.mKernel.moveSpinner(this.f3098a, true);
                        SimpleRefreshLayout.this.postDelayed(this, (long) this.f3100c);
                        return;
                    }
                    SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                    simpleRefreshLayout.animationRunnable = null;
                    simpleRefreshLayout.mKernel.moveSpinner(0, true);
                    RefreshUtils.fling(SimpleRefreshLayout.this.mRefreshContent.getScrollableView(), (int) (-this.f3101d));
                    if (SimpleRefreshLayout.this.mFooterLocked && f > 0.0f) {
                        SimpleRefreshLayout.this.mFooterLocked = false;
                        return;
                    }
                    return;
                }
                SimpleRefreshLayout.this.animationRunnable = null;
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout$a */
    /* loaded from: classes.dex */
    protected class RunnableC1661a implements Runnable {

        /* renamed from: c */
        int f3093c;

        /* renamed from: f */
        float f3096f;

        /* renamed from: a */
        int f3091a = 0;

        /* renamed from: b */
        int f3092b = 10;

        /* renamed from: e */
        float f3095e = 0.0f;

        /* renamed from: d */
        long f3094d = AnimationUtils.currentAnimationTimeMillis();

        RunnableC1661a(float f, int i) {
            SimpleRefreshLayout.this = r2;
            this.f3096f = f;
            this.f3093c = i;
            r2.postDelayed(this, (long) this.f3092b);
        }

        @Override // java.lang.Runnable
        public void run() {
            if (SimpleRefreshLayout.this.animationRunnable == this && !SimpleRefreshLayout.this.mState.isFinishing) {
                if (Math.abs(SimpleRefreshLayout.this.mSpinner) < Math.abs(this.f3093c)) {
                    double d = (double) this.f3096f;
                    int i = this.f3091a + 1;
                    this.f3091a = i;
                    double pow = Math.pow(0.949999988079071d, (double) (i * 2));
                    Double.isNaN(d);
                    this.f3096f = (float) (d * pow);
                } else if (this.f3093c != 0) {
                    double d2 = (double) this.f3096f;
                    int i2 = this.f3091a + 1;
                    this.f3091a = i2;
                    double pow2 = Math.pow(0.44999998807907104d, (double) (i2 * 2));
                    Double.isNaN(d2);
                    this.f3096f = (float) (d2 * pow2);
                } else {
                    double d3 = (double) this.f3096f;
                    int i3 = this.f3091a + 1;
                    this.f3091a = i3;
                    double pow3 = Math.pow(0.8500000238418579d, (double) (i3 * 2));
                    Double.isNaN(d3);
                    this.f3096f = (float) (d3 * pow3);
                }
                long currentAnimationTimeMillis = AnimationUtils.currentAnimationTimeMillis();
                float f = this.f3096f * ((((float) (currentAnimationTimeMillis - this.f3094d)) * 1.0f) / 1000.0f);
                if (Math.abs(f) >= 1.0f) {
                    this.f3094d = currentAnimationTimeMillis;
                    this.f3095e += f;
                    SimpleRefreshLayout.this.moveSpinnerInfinitely(this.f3095e);
                    SimpleRefreshLayout.this.postDelayed(this, (long) this.f3092b);
                    return;
                }
                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                simpleRefreshLayout.animationRunnable = null;
                if (Math.abs(simpleRefreshLayout.mSpinner) >= Math.abs(this.f3093c)) {
                    SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                    simpleRefreshLayout2.animSpinner(this.f3093c, 0, simpleRefreshLayout2.mReboundInterpolator, Math.min(Math.max(DpiUtils.px2dp((float) Math.abs(SimpleRefreshLayout.this.mSpinner - this.f3093c)), 30), 100) * 10);
                }
            }
        }
    }

    protected ValueAnimator animSpinner(int i, int i2, Interpolator interpolator, int i3) {
        if (this.mSpinner == i) {
            return null;
        }
        ValueAnimator valueAnimator = this.reboundAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        this.animationRunnable = null;
        this.reboundAnimator = ValueAnimator.ofInt(this.mSpinner, i);
        this.reboundAnimator.setDuration((long) i3);
        this.reboundAnimator.setInterpolator(interpolator);
        this.reboundAnimator.addListener(new AnimatorListenerAdapter() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.5
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationCancel(Animator animator) {
                super.onAnimationEnd(animator);
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                simpleRefreshLayout.reboundAnimator = null;
                if (simpleRefreshLayout.mSpinner == 0) {
                    if (SimpleRefreshLayout.this.mState != RefreshState.None && !SimpleRefreshLayout.this.mState.isOpening) {
                        SimpleRefreshLayout.this.notifyStateChanged(RefreshState.None);
                    }
                } else if (SimpleRefreshLayout.this.mState != SimpleRefreshLayout.this.mViceState) {
                    SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                    simpleRefreshLayout2.setViceState(simpleRefreshLayout2.mState);
                }
            }
        });
        this.reboundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.6
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator2) {
                SimpleRefreshLayout.this.mKernel.moveSpinner(((Integer) valueAnimator2.getAnimatedValue()).intValue(), false);
            }
        });
        this.reboundAnimator.setStartDelay((long) i2);
        this.reboundAnimator.start();
        return this.reboundAnimator;
    }

    protected void animSpinnerBounce(float f) {
        if (this.reboundAnimator != null) {
            return;
        }
        if (f > 0.0f && this.mState == RefreshState.Refreshing) {
            this.animationRunnable = new RunnableC1661a(f, this.mHeaderHeight);
        } else if (f < 0.0f && (this.mState == RefreshState.Loading || ((this.mEnableFooterFollowWhenLoadFinished && this.mFooterNoMoreData && isEnableRefreshOrLoadMore(this.mEnableLoadMore)) || (this.mEnableAutoLoadMore && !this.mFooterNoMoreData && isEnableRefreshOrLoadMore(this.mEnableLoadMore) && this.mState != RefreshState.Refreshing)))) {
            this.animationRunnable = new RunnableC1661a(f, -this.mFooterHeight);
        } else if (this.mSpinner == 0 && this.mEnableOverScrollBounce) {
            this.animationRunnable = new RunnableC1661a(f, 0);
        }
    }

    protected void overSpinner() {
        if (this.mState == RefreshState.Loading || (this.mEnableFooterFollowWhenLoadFinished && this.mFooterNoMoreData && this.mSpinner < 0 && isEnableRefreshOrLoadMore(this.mEnableLoadMore))) {
            int i = this.mSpinner;
            int i2 = this.mFooterHeight;
            if (i < (-i2)) {
                this.mKernel.animSpinner(-i2);
            } else if (i > 0) {
                this.mKernel.animSpinner(0);
            }
        } else if (this.mState == RefreshState.Refreshing) {
            int i3 = this.mSpinner;
            int i4 = this.mHeaderHeight;
            if (i3 > i4) {
                this.mKernel.animSpinner(i4);
            } else if (i3 < 0) {
                this.mKernel.animSpinner(0);
            }
        } else if (this.mState == RefreshState.PullDownToRefresh) {
            this.mKernel.setState(RefreshState.PullDownCanceled);
        } else if (this.mState == RefreshState.PullUpToLoad) {
            this.mKernel.setState(RefreshState.PullUpCanceled);
        } else if (this.mState == RefreshState.ReleaseToRefresh) {
            this.mKernel.setState(RefreshState.Refreshing);
        } else if (this.mState == RefreshState.ReleaseToLoad) {
            this.mKernel.setState(RefreshState.Loading);
        } else if (this.mState == RefreshState.LoadReleased) {
            if (this.reboundAnimator == null) {
                this.mKernel.animSpinner(-this.mFooterHeight);
            }
        } else if (this.mSpinner != 0) {
            this.mKernel.animSpinner(0);
        }
    }

    protected void moveSpinnerInfinitely(float f) {
        if (this.mState == RefreshState.Refreshing && f >= 0.0f) {
            int i = this.mHeaderHeight;
            if (f < ((float) i)) {
                this.mKernel.moveSpinner((int) f, true);
            } else {
                double d = (double) ((this.mHeaderMaxDragRate - 1.0f) * ((float) i));
                int max = Math.max((this.mScreenHeight * 4) / 3, getHeight());
                int i2 = this.mHeaderHeight;
                double d2 = (double) (max - i2);
                double max2 = (double) Math.max(0.0f, (f - ((float) i2)) * this.mDragRate);
                Double.isNaN(max2);
                double d3 = -max2;
                if (d2 == 0.0d) {
                    d2 = 1.0d;
                }
                Double.isNaN(d);
                this.mKernel.moveSpinner(((int) Math.min(d * (1.0d - Math.pow(100.0d, d3 / d2)), max2)) + this.mHeaderHeight, true);
            }
        } else if (f < 0.0f && (this.mState == RefreshState.Loading || ((this.mEnableFooterFollowWhenLoadFinished && this.mFooterNoMoreData && isEnableRefreshOrLoadMore(this.mEnableLoadMore)) || (this.mEnableAutoLoadMore && !this.mFooterNoMoreData && isEnableRefreshOrLoadMore(this.mEnableLoadMore))))) {
            int i3 = this.mFooterHeight;
            if (f > ((float) (-i3))) {
                this.mKernel.moveSpinner((int) f, true);
            } else {
                double d4 = (double) ((this.mFooterMaxDragRate - 1.0f) * ((float) i3));
                int max3 = Math.max((this.mScreenHeight * 4) / 3, getHeight());
                int i4 = this.mFooterHeight;
                double d5 = (double) (max3 - i4);
                double d6 = (double) (-Math.min(0.0f, (((float) i4) + f) * this.mDragRate));
                Double.isNaN(d6);
                double d7 = -d6;
                if (d5 == 0.0d) {
                    d5 = 1.0d;
                }
                Double.isNaN(d4);
                this.mKernel.moveSpinner(((int) (-Math.min(d4 * (1.0d - Math.pow(100.0d, d7 / d5)), d6))) - this.mFooterHeight, true);
            }
        } else if (f >= 0.0f) {
            double d8 = (double) (this.mHeaderMaxDragRate * ((float) this.mHeaderHeight));
            double max4 = (double) Math.max(this.mScreenHeight / 2, getHeight());
            double max5 = (double) Math.max(0.0f, this.mDragRate * f);
            Double.isNaN(max5);
            double d9 = -max5;
            if (max4 == 0.0d) {
                max4 = 1.0d;
            }
            Double.isNaN(d8);
            this.mKernel.moveSpinner((int) Math.min(d8 * (1.0d - Math.pow(100.0d, d9 / max4)), max5), true);
        } else {
            double d10 = (double) (this.mFooterMaxDragRate * ((float) this.mFooterHeight));
            double max6 = (double) Math.max(this.mScreenHeight / 2, getHeight());
            double d11 = (double) (-Math.min(0.0f, this.mDragRate * f));
            Double.isNaN(d11);
            double d12 = -d11;
            if (max6 == 0.0d) {
                max6 = 1.0d;
            }
            Double.isNaN(d10);
            this.mKernel.moveSpinner((int) (-Math.min(d10 * (1.0d - Math.pow(100.0d, d12 / max6)), d11)), true);
        }
        if (this.mEnableAutoLoadMore && !this.mFooterNoMoreData && isEnableRefreshOrLoadMore(this.mEnableLoadMore) && f < 0.0f && this.mState != RefreshState.Refreshing && this.mState != RefreshState.Loading && this.mState != RefreshState.LoadFinish) {
            setStateDirectLoading();
            if (this.mDisableContentWhenLoading) {
                this.animationRunnable = null;
                this.mKernel.animSpinner(-this.mFooterHeight);
            }
        }
    }

    @Override // android.view.ViewGroup
    protected boolean checkLayoutParams(ViewGroup.LayoutParams layoutParams) {
        return layoutParams instanceof LayoutParams;
    }

    @Override // android.view.ViewGroup
    public LayoutParams generateDefaultLayoutParams() {
        return new LayoutParams(-1, -1);
    }

    @Override // android.view.ViewGroup
    public LayoutParams generateLayoutParams(ViewGroup.LayoutParams layoutParams) {
        return new LayoutParams(layoutParams);
    }

    @Override // android.view.ViewGroup
    public LayoutParams generateLayoutParams(AttributeSet attributeSet) {
        return new LayoutParams(getContext(), attributeSet);
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout$LayoutParams */
    /* loaded from: classes.dex */
    public static class LayoutParams extends ViewGroup.MarginLayoutParams {

        /* renamed from: a */
        public int f3089a;

        /* renamed from: b */
        public RefreshSpinner f3090b;

        public LayoutParams(Context context, AttributeSet attributeSet) {
            super(context, attributeSet);
            this.f3089a = 0;
            this.f3090b = null;
            TypedArray obtainStyledAttributes = context.obtainStyledAttributes(attributeSet, C1620R.styleable.SimpleRefreshLayout_Layout);
            this.f3089a = obtainStyledAttributes.getColor(C1620R.styleable.SimpleRefreshLayout_Layout_layout_SimpleBackgroundColor, this.f3089a);
            if (obtainStyledAttributes.hasValue(C1620R.styleable.SimpleRefreshLayout_Layout_layout_SimpleRefreshSpinner)) {
                this.f3090b = RefreshSpinner.values()[obtainStyledAttributes.getInt(C1620R.styleable.SimpleRefreshLayout_Layout_layout_SimpleRefreshSpinner, RefreshSpinner.TRANSLATE.ordinal())];
            }
            obtainStyledAttributes.recycle();
        }

        public LayoutParams(int i, int i2) {
            super(i, i2);
            this.f3089a = 0;
            this.f3090b = null;
        }

        public LayoutParams(ViewGroup.LayoutParams layoutParams) {
            super(layoutParams);
            this.f3089a = 0;
            this.f3090b = null;
        }
    }

    @Override // android.view.ViewGroup
    public int getNestedScrollAxes() {
        return this.mNestedParent.getNestedScrollAxes();
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public boolean onStartNestedScroll(@NonNull View view, @NonNull View view2, int i) {
        if (!(isEnabled() && isNestedScrollingEnabled() && (i & 2) != 0) || (!this.mEnableOverScrollDrag && !isEnableRefreshOrLoadMore(this.mEnableRefresh) && !isEnableRefreshOrLoadMore(this.mEnableLoadMore))) {
            return false;
        }
        return true;
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public void onNestedScrollAccepted(@NonNull View view, @NonNull View view2, int i) {
        this.mNestedParent.onNestedScrollAccepted(view, view2, i);
        this.mNestedChild.startNestedScroll(i & 2);
        this.mTotalUnconsumed = this.mSpinner;
        this.mNestedInProgress = true;
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public void onNestedPreScroll(@NonNull View view, int i, int i2, @NonNull int[] iArr) {
        int i3;
        int i4 = this.mTotalUnconsumed;
        if (i2 * i4 > 0) {
            if (Math.abs(i2) > Math.abs(this.mTotalUnconsumed)) {
                i3 = this.mTotalUnconsumed;
                this.mTotalUnconsumed = 0;
            } else {
                this.mTotalUnconsumed -= i2;
                i3 = i2;
            }
            moveSpinnerInfinitely((float) this.mTotalUnconsumed);
            if (this.mViceState.isOpening || this.mViceState == RefreshState.None) {
                if (this.mSpinner > 0) {
                    this.mKernel.setState(RefreshState.PullDownToRefresh);
                } else {
                    this.mKernel.setState(RefreshState.PullUpToLoad);
                }
            }
        } else if (i2 <= 0 || !this.mFooterLocked) {
            i3 = 0;
        } else {
            this.mTotalUnconsumed = i4 - i2;
            moveSpinnerInfinitely((float) this.mTotalUnconsumed);
            i3 = i2;
        }
        this.mNestedChild.dispatchNestedPreScroll(i, i2 - i3, iArr, (int[]) null);
        iArr[1] = iArr[1] + i3;
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public void onNestedScroll(@NonNull View view, int i, int i2, int i3, int i4) {
        this.mNestedChild.dispatchNestedScroll(i, i2, i3, i4, this.mParentOffsetInWindow);
        int i5 = i4 + this.mParentOffsetInWindow[1];
        if (i5 == 0) {
            return;
        }
        if (this.mEnableOverScrollDrag || ((i5 < 0 && isEnableRefreshOrLoadMore(this.mEnableRefresh)) || (i5 > 0 && isEnableRefreshOrLoadMore(this.mEnableLoadMore)))) {
            if (this.mViceState == RefreshState.None) {
                this.mKernel.setState(i5 > 0 ? RefreshState.PullUpToLoad : RefreshState.PullDownToRefresh);
            }
            int i6 = this.mTotalUnconsumed - i5;
            this.mTotalUnconsumed = i6;
            moveSpinnerInfinitely((float) i6);
        }
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public boolean onNestedPreFling(@NonNull View view, float f, float f2) {
        return (this.mFooterLocked && f2 > 0.0f) || startFlingIfNeed(Float.valueOf(-f2)) || this.mNestedChild.dispatchNestedPreFling(f, f2);
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public boolean onNestedFling(@NonNull View view, float f, float f2, boolean z) {
        return this.mNestedChild.dispatchNestedFling(f, f2, z);
    }

    @Override // android.view.ViewGroup, android.view.ViewParent
    public void onStopNestedScroll(@NonNull View view) {
        this.mNestedParent.onStopNestedScroll(view);
        this.mNestedInProgress = false;
        this.mTotalUnconsumed = 0;
        overSpinner();
        this.mNestedChild.stopNestedScroll();
    }

    @Override // android.view.View
    public void setNestedScrollingEnabled(boolean z) {
        this.mManualNestedScrolling = true;
        this.mNestedChild.setNestedScrollingEnabled(z);
    }

    @Override // android.view.View
    public boolean isNestedScrollingEnabled() {
        return this.mNestedChild.isNestedScrollingEnabled();
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setFooterHeight(float f) {
        if (this.mFooterHeightStatus.canReplaceWith(RefreshDimensionStatus.CodeExact)) {
            this.mFooterHeight = DpiUtils.dp2px(f);
            this.mFooterHeightStatus = RefreshDimensionStatus.CodeExactUnNotify;
            RefreshInternal refreshInternal = this.mRefreshFooter;
            if (refreshInternal != null) {
                refreshInternal.getView().requestLayout();
            }
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setHeaderHeight(float f) {
        if (this.mHeaderHeightStatus.canReplaceWith(RefreshDimensionStatus.CodeExact)) {
            this.mHeaderHeight = DpiUtils.dp2px(f);
            this.mHeaderHeightStatus = RefreshDimensionStatus.CodeExactUnNotify;
            RefreshInternal refreshInternal = this.mRefreshHeader;
            if (refreshInternal != null) {
                refreshInternal.getView().requestLayout();
            }
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setHeaderInsetStart(float f) {
        this.mHeaderInsetStart = DpiUtils.dp2px(f);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setFooterInsetStart(float f) {
        this.mFooterInsetStart = DpiUtils.dp2px(f);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setDragRate(float f) {
        this.mDragRate = f;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    @SuppressLint({"RestrictedApi"})
    public SimpleRefreshLayout setHeaderMaxDragRate(float f) {
        this.mHeaderMaxDragRate = f;
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal == null || this.mHandler == null) {
            this.mHeaderHeightStatus = this.mHeaderHeightStatus.unNotify();
        } else {
            RefreshKernel refreshKernel = this.mKernel;
            int i = this.mHeaderHeight;
            refreshInternal.onInitialized(refreshKernel, i, (int) (this.mHeaderMaxDragRate * ((float) i)));
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    @SuppressLint({"RestrictedApi"})
    public SimpleRefreshLayout setFooterMaxDragRate(float f) {
        this.mFooterMaxDragRate = f;
        RefreshInternal refreshInternal = this.mRefreshFooter;
        if (refreshInternal == null || this.mHandler == null) {
            this.mFooterHeightStatus = this.mFooterHeightStatus.unNotify();
        } else {
            RefreshKernel refreshKernel = this.mKernel;
            int i = this.mFooterHeight;
            refreshInternal.onInitialized(refreshKernel, i, (int) (((float) i) * this.mFooterMaxDragRate));
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setHeaderTriggerRate(float f) {
        this.mHeaderTriggerRate = f;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setFooterTriggerRate(float f) {
        this.mFooterTriggerRate = f;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setReboundInterpolator(@NonNull Interpolator interpolator) {
        this.mReboundInterpolator = interpolator;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setReboundDuration(int i) {
        this.mReboundDuration = i;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableLoadMore(boolean z) {
        this.mManualLoadMore = true;
        this.mEnableLoadMore = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableRefresh(boolean z) {
        this.mEnableRefresh = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableHeaderTranslationContent(boolean z) {
        this.mEnableHeaderTranslationContent = z;
        this.mManualHeaderTranslationContent = true;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableFooterTranslationContent(boolean z) {
        this.mEnableFooterTranslationContent = z;
        this.mManualFooterTranslationContent = true;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableAutoLoadMore(boolean z) {
        this.mEnableAutoLoadMore = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableOverScrollBounce(boolean z) {
        this.mEnableOverScrollBounce = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnablePureScrollMode(boolean z) {
        this.mEnablePureScrollMode = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableScrollContentWhenLoaded(boolean z) {
        this.mEnableScrollContentWhenLoaded = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableScrollContentWhenRefreshed(boolean z) {
        this.mEnableScrollContentWhenRefreshed = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableLoadMoreWhenContentNotFull(boolean z) {
        this.mEnableLoadMoreWhenContentNotFull = z;
        RefreshContent refreshContent = this.mRefreshContent;
        if (refreshContent != null) {
            refreshContent.setEnableLoadMoreWhenContentNotFull(z);
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableOverScrollDrag(boolean z) {
        this.mEnableOverScrollDrag = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableFooterFollowWhenLoadFinished(boolean z) {
        this.mEnableFooterFollowWhenLoadFinished = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableClipHeaderWhenFixedBehind(boolean z) {
        this.mEnableClipHeaderWhenFIXED_BEHIND = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setEnableClipFooterWhenFixedBehind(boolean z) {
        this.mEnableClipFooterWhenFIXED_BEHIND = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public RefreshLayout setEnableNestedScroll(boolean z) {
        setNestedScrollingEnabled(z);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setDisableContentWhenRefresh(boolean z) {
        this.mDisableContentWhenRefresh = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setDisableContentWhenLoading(boolean z) {
        this.mDisableContentWhenLoading = z;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setRefreshHeader(@NonNull RefreshHeader refreshHeader) {
        return setRefreshHeader(refreshHeader, -1, -2);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setRefreshHeader(@NonNull RefreshHeader refreshHeader, int i, int i2) {
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal != null) {
            super.removeView(refreshInternal.getView());
        }
        this.mRefreshHeader = refreshHeader;
        this.mHeaderBackgroundColor = 0;
        this.mHeaderNeedTouchEventWhenRefreshing = false;
        this.mHeaderHeightStatus = this.mHeaderHeightStatus.unNotify();
        if (refreshHeader.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) {
            super.addView(this.mRefreshHeader.getView(), 0, new LayoutParams(i, i2));
        } else {
            super.addView(this.mRefreshHeader.getView(), i, i2);
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setRefreshFooter(@NonNull RefreshFooter refreshFooter) {
        return setRefreshFooter(refreshFooter, -1, -2);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setRefreshFooter(@NonNull RefreshFooter refreshFooter, int i, int i2) {
        RefreshInternal refreshInternal = this.mRefreshFooter;
        if (refreshInternal != null) {
            super.removeView(refreshInternal.getView());
        }
        this.mRefreshFooter = refreshFooter;
        this.mFooterBackgroundColor = 0;
        this.mFooterNeedTouchEventWhenLoading = false;
        this.mFooterHeightStatus = this.mFooterHeightStatus.unNotify();
        this.mEnableLoadMore = !this.mManualLoadMore || this.mEnableLoadMore;
        if (this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) {
            super.addView(this.mRefreshFooter.getView(), 0, new LayoutParams(i, i2));
        } else {
            super.addView(this.mRefreshFooter.getView(), i, i2);
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public RefreshLayout setRefreshContent(@NonNull View view) {
        return setRefreshContent(view, -1, -1);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public RefreshLayout setRefreshContent(@NonNull View view, int i, int i2) {
        RefreshContent refreshContent = this.mRefreshContent;
        if (refreshContent != null) {
            super.removeView(refreshContent.getView());
        }
        super.addView(view, 0, new LayoutParams(i, i2));
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal == null || refreshInternal.getRefreshSpinner() != RefreshSpinner.FIXED_BEHIND) {
            RefreshInternal refreshInternal2 = this.mRefreshFooter;
            if (refreshInternal2 != null && refreshInternal2.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) {
                super.bringChildToFront(view);
                RefreshInternal refreshInternal3 = this.mRefreshHeader;
                if (refreshInternal3 != null && refreshInternal3.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) {
                    super.bringChildToFront(this.mRefreshHeader.getView());
                }
            }
        } else {
            super.bringChildToFront(view);
            RefreshInternal refreshInternal4 = this.mRefreshFooter;
            if (!(refreshInternal4 == null || refreshInternal4.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)) {
                super.bringChildToFront(this.mRefreshFooter.getView());
            }
        }
        this.mRefreshContent = new C1669a(view);
        if (this.mHandler != null) {
            int i3 = this.mFixedHeaderViewId;
            View view2 = null;
            View findViewById = i3 > 0 ? findViewById(i3) : null;
            int i4 = this.mFixedFooterViewId;
            if (i4 > 0) {
                view2 = findViewById(i4);
            }
            this.mRefreshContent.setScrollBound(this.mScrollBoundaryDecider);
            this.mRefreshContent.setEnableLoadMoreWhenContentNotFull(this.mEnableLoadMoreWhenContentNotFull);
            this.mRefreshContent.setUpComponent(this.mKernel, findViewById, view2);
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    @Nullable
    public RefreshFooter getRefreshFooter() {
        RefreshInternal refreshInternal = this.mRefreshFooter;
        if (refreshInternal instanceof RefreshFooter) {
            return (RefreshFooter) refreshInternal;
        }
        return null;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    @Nullable
    public RefreshHeader getRefreshHeader() {
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal instanceof RefreshHeader) {
            return (RefreshHeader) refreshInternal;
        }
        return null;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public RefreshState getState() {
        return this.mState;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setOnRefreshListener(OnRefreshListener onRefreshListener) {
        this.mRefreshListener = onRefreshListener;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setOnLoadMoreListener(OnLoadMoreListener onLoadMoreListener) {
        this.mLoadMoreListener = onLoadMoreListener;
        this.mEnableLoadMore = this.mEnableLoadMore || (!this.mManualLoadMore && onLoadMoreListener != null);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setOnRefreshLoadMoreListener(OnRefreshLoadMoreListener onRefreshLoadMoreListener) {
        this.mRefreshListener = onRefreshLoadMoreListener;
        this.mLoadMoreListener = onRefreshLoadMoreListener;
        this.mEnableLoadMore = this.mEnableLoadMore || (!this.mManualLoadMore && onRefreshLoadMoreListener != null);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setOnMultiPurposeListener(OnMultiPurposeListener onMultiPurposeListener) {
        this.mOnMultiPurposeListener = onMultiPurposeListener;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setPrimaryColors(@ColorInt int... iArr) {
        RefreshInternal refreshInternal = this.mRefreshHeader;
        if (refreshInternal != null) {
            refreshInternal.setPrimaryColors(iArr);
        }
        RefreshInternal refreshInternal2 = this.mRefreshFooter;
        if (refreshInternal2 != null) {
            refreshInternal2.setPrimaryColors(iArr);
        }
        this.mPrimaryColors = iArr;
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setPrimaryColorsId(@ColorRes int... iArr) {
        int[] iArr2 = new int[iArr.length];
        for (int i = 0; i < iArr.length; i++) {
            iArr2[i] = RefreshUtils.getColor(getContext(), iArr[i]);
        }
        setPrimaryColors(iArr2);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setScrollBound(RefreshScrollBound refreshScrollBound) {
        this.mScrollBoundaryDecider = refreshScrollBound;
        RefreshContent refreshContent = this.mRefreshContent;
        if (refreshContent != null) {
            refreshContent.setScrollBound(refreshScrollBound);
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout setNoMoreData(boolean z) {
        this.mFooterNoMoreData = z;
        RefreshInternal refreshInternal = this.mRefreshFooter;
        if ((refreshInternal instanceof RefreshFooter) && !((RefreshFooter) refreshInternal).setNoMoreData(z)) {
            PrintStream printStream = System.out;
            printStream.println("Footer:" + this.mRefreshFooter + " NoMoreData is not supported.(不支持NoMoreData)");
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishRefresh() {
        return finishRefresh(Math.min(Math.max(0, 300 - ((int) (System.currentTimeMillis() - this.mLastOpenTime))), 300));
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishLoadMore() {
        return finishLoadMore(Math.min(Math.max(0, 300 - ((int) (System.currentTimeMillis() - this.mLastOpenTime))), 300));
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishRefresh(int i) {
        return finishRefresh(i, true);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishRefresh(boolean z) {
        long currentTimeMillis = System.currentTimeMillis() - this.mLastOpenTime;
        int i = 0;
        if (z) {
            i = Math.min(Math.max(0, 300 - ((int) currentTimeMillis)), 300);
        }
        return finishRefresh(i, z);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishRefresh(int i, final boolean z) {
        if (this.mState == RefreshState.Refreshing && z) {
            setNoMoreData(false);
        }
        postDelayed(new Runnable() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.7
            @Override // java.lang.Runnable
            public void run() {
                if (SimpleRefreshLayout.this.mState == RefreshState.Refreshing && SimpleRefreshLayout.this.mRefreshHeader != null && SimpleRefreshLayout.this.mRefreshContent != null) {
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.RefreshFinish);
                    int onFinish = SimpleRefreshLayout.this.mRefreshHeader.onFinish(SimpleRefreshLayout.this, z);
                    if (SimpleRefreshLayout.this.mOnMultiPurposeListener != null && (SimpleRefreshLayout.this.mRefreshHeader instanceof RefreshHeader)) {
                        SimpleRefreshLayout.this.mOnMultiPurposeListener.onHeaderFinish((RefreshHeader) SimpleRefreshLayout.this.mRefreshHeader, z);
                    }
                    if (onFinish < Integer.MAX_VALUE) {
                        if (SimpleRefreshLayout.this.mIsBeingDragged || SimpleRefreshLayout.this.mNestedInProgress) {
                            if (SimpleRefreshLayout.this.mIsBeingDragged) {
                                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                                simpleRefreshLayout.mTouchY = simpleRefreshLayout.mLastTouchY;
                                SimpleRefreshLayout.this.mTouchSpinner = 0;
                                SimpleRefreshLayout.this.mIsBeingDragged = false;
                            }
                            long currentTimeMillis = System.currentTimeMillis();
                            SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                            SimpleRefreshLayout.super.dispatchTouchEvent(MotionEvent.obtain(currentTimeMillis, currentTimeMillis, 0, simpleRefreshLayout2.mLastTouchX, (SimpleRefreshLayout.this.mLastTouchY + ((float) SimpleRefreshLayout.this.mSpinner)) - ((float) (SimpleRefreshLayout.this.mTouchSlop * 2)), 0));
                            SimpleRefreshLayout simpleRefreshLayout3 = SimpleRefreshLayout.this;
                            SimpleRefreshLayout.super.dispatchTouchEvent(MotionEvent.obtain(currentTimeMillis, currentTimeMillis, 2, simpleRefreshLayout3.mLastTouchX, SimpleRefreshLayout.this.mLastTouchY + ((float) SimpleRefreshLayout.this.mSpinner), 0));
                            if (SimpleRefreshLayout.this.mNestedInProgress) {
                                SimpleRefreshLayout.this.mTotalUnconsumed = 0;
                            }
                        }
                        if (SimpleRefreshLayout.this.mSpinner > 0) {
                            ValueAnimator.AnimatorUpdateListener animatorUpdateListener = null;
                            SimpleRefreshLayout simpleRefreshLayout4 = SimpleRefreshLayout.this;
                            ValueAnimator animSpinner = simpleRefreshLayout4.animSpinner(0, onFinish, simpleRefreshLayout4.mReboundInterpolator, SimpleRefreshLayout.this.mReboundDuration);
                            if (SimpleRefreshLayout.this.mEnableScrollContentWhenRefreshed) {
                                animatorUpdateListener = SimpleRefreshLayout.this.mRefreshContent.scrollContentWhenFinished(SimpleRefreshLayout.this.mSpinner);
                            }
                            if (animSpinner != null && animatorUpdateListener != null) {
                                animSpinner.addUpdateListener(animatorUpdateListener);
                            }
                        } else if (SimpleRefreshLayout.this.mSpinner < 0) {
                            SimpleRefreshLayout simpleRefreshLayout5 = SimpleRefreshLayout.this;
                            simpleRefreshLayout5.animSpinner(0, onFinish, simpleRefreshLayout5.mReboundInterpolator, SimpleRefreshLayout.this.mReboundDuration);
                        } else {
                            SimpleRefreshLayout.this.mKernel.moveSpinner(0, false);
                            SimpleRefreshLayout.this.resetStatus();
                        }
                    }
                }
            }
        }, i <= 0 ? 1 : (long) i);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishLoadMore(int i) {
        return finishLoadMore(i, true, false);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishLoadMore(boolean z) {
        return finishLoadMore(z ? Math.min(Math.max(0, 300 - ((int) (System.currentTimeMillis() - this.mLastOpenTime))), 300) : 0, z, false);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishLoadMore(int i, final boolean z, final boolean z2) {
        postDelayed(new Runnable() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.8
            @Override // java.lang.Runnable
            public void run() {
                boolean z3 = true;
                if (SimpleRefreshLayout.this.mState == RefreshState.Loading && SimpleRefreshLayout.this.mRefreshFooter != null && SimpleRefreshLayout.this.mRefreshContent != null) {
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.LoadFinish);
                    int onFinish = SimpleRefreshLayout.this.mRefreshFooter.onFinish(SimpleRefreshLayout.this, z);
                    if (SimpleRefreshLayout.this.mOnMultiPurposeListener != null && (SimpleRefreshLayout.this.mRefreshFooter instanceof RefreshFooter)) {
                        SimpleRefreshLayout.this.mOnMultiPurposeListener.onFooterFinish((RefreshFooter) SimpleRefreshLayout.this.mRefreshFooter, z);
                    }
                    if (onFinish < Integer.MAX_VALUE) {
                        if (!z2 || !SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished || SimpleRefreshLayout.this.mSpinner >= 0 || !SimpleRefreshLayout.this.mRefreshContent.canLoadMore()) {
                            z3 = false;
                        }
                        final int max = SimpleRefreshLayout.this.mSpinner - (z3 ? Math.max(SimpleRefreshLayout.this.mSpinner, -SimpleRefreshLayout.this.mFooterHeight) : 0);
                        if (SimpleRefreshLayout.this.mIsBeingDragged || SimpleRefreshLayout.this.mNestedInProgress) {
                            if (SimpleRefreshLayout.this.mIsBeingDragged) {
                                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                                simpleRefreshLayout.mTouchY = simpleRefreshLayout.mLastTouchY;
                                SimpleRefreshLayout.this.mIsBeingDragged = false;
                                SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                                simpleRefreshLayout2.mTouchSpinner = simpleRefreshLayout2.mSpinner - max;
                            }
                            long currentTimeMillis = System.currentTimeMillis();
                            SimpleRefreshLayout simpleRefreshLayout3 = SimpleRefreshLayout.this;
                            float f = (float) max;
                            SimpleRefreshLayout.super.dispatchTouchEvent(MotionEvent.obtain(currentTimeMillis, currentTimeMillis, 0, simpleRefreshLayout3.mLastTouchX, SimpleRefreshLayout.this.mLastTouchY + f + ((float) (SimpleRefreshLayout.this.mTouchSlop * 2)), 0));
                            SimpleRefreshLayout simpleRefreshLayout4 = SimpleRefreshLayout.this;
                            SimpleRefreshLayout.super.dispatchTouchEvent(MotionEvent.obtain(currentTimeMillis, currentTimeMillis, 2, simpleRefreshLayout4.mLastTouchX, SimpleRefreshLayout.this.mLastTouchY + f, 0));
                            if (SimpleRefreshLayout.this.mNestedInProgress) {
                                SimpleRefreshLayout.this.mTotalUnconsumed = 0;
                            }
                        }
                        SimpleRefreshLayout.this.postDelayed(new Runnable() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.8.1
                            @Override // java.lang.Runnable
                            public void run() {
                                ValueAnimator valueAnimator;
                                ValueAnimator.AnimatorUpdateListener scrollContentWhenFinished = (!SimpleRefreshLayout.this.mEnableScrollContentWhenLoaded || max >= 0) ? null : SimpleRefreshLayout.this.mRefreshContent.scrollContentWhenFinished(SimpleRefreshLayout.this.mSpinner);
                                if (scrollContentWhenFinished != null) {
                                    scrollContentWhenFinished.onAnimationUpdate(ValueAnimator.ofInt(0, 0));
                                }
                                C16571 r2 = new AnimatorListenerAdapter() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.8.1.1
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationCancel(Animator animator) {
                                        super.onAnimationEnd(animator);
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        SimpleRefreshLayout.this.mFooterLocked = false;
                                        if (z2) {
                                            SimpleRefreshLayout.this.setNoMoreData(true);
                                        }
                                        if (SimpleRefreshLayout.this.mState == RefreshState.LoadFinish) {
                                            SimpleRefreshLayout.this.notifyStateChanged(RefreshState.None);
                                        }
                                    }
                                };
                                if (SimpleRefreshLayout.this.mSpinner > 0) {
                                    valueAnimator = SimpleRefreshLayout.this.mKernel.animSpinner(0);
                                } else {
                                    if (scrollContentWhenFinished != null || SimpleRefreshLayout.this.mSpinner == 0) {
                                        if (SimpleRefreshLayout.this.reboundAnimator != null) {
                                            SimpleRefreshLayout.this.reboundAnimator.cancel();
                                            SimpleRefreshLayout.this.reboundAnimator = null;
                                        }
                                        SimpleRefreshLayout.this.mKernel.moveSpinner(0, false);
                                        SimpleRefreshLayout.this.resetStatus();
                                    } else if (!z2 || !SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished) {
                                        valueAnimator = SimpleRefreshLayout.this.mKernel.animSpinner(0);
                                    } else if (SimpleRefreshLayout.this.mSpinner >= (-SimpleRefreshLayout.this.mFooterHeight)) {
                                        SimpleRefreshLayout.this.notifyStateChanged(RefreshState.None);
                                    } else {
                                        valueAnimator = SimpleRefreshLayout.this.mKernel.animSpinner(-SimpleRefreshLayout.this.mFooterHeight);
                                    }
                                    valueAnimator = null;
                                }
                                if (valueAnimator != null) {
                                    valueAnimator.addListener(r2);
                                } else {
                                    r2.onAnimationEnd(null);
                                }
                            }
                        }, SimpleRefreshLayout.this.mSpinner < 0 ? (long) onFinish : 0);
                    }
                } else if (z2) {
                    SimpleRefreshLayout.this.setNoMoreData(true);
                }
            }
        }, i <= 0 ? 1 : (long) i);
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public SimpleRefreshLayout finishLoadMoreWithNoMoreData() {
        return finishLoadMore(Math.min(Math.max(0, 300 - ((int) (System.currentTimeMillis() - this.mLastOpenTime))), 300), true, true);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public RefreshLayout closeHeaderOrFooter() {
        if (this.mState == RefreshState.Refreshing) {
            finishRefresh();
        } else if (this.mState == RefreshState.Loading) {
            finishLoadMore();
        } else if (this.mSpinner != 0) {
            animSpinner(0, 0, this.mReboundInterpolator, this.mReboundDuration);
        }
        return this;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public boolean autoRefresh() {
        return autoRefresh(this.mHandler == null ? 400 : 0);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public boolean autoRefresh(int i) {
        int i2 = this.mReboundDuration;
        int i3 = this.mHeaderHeight;
        float f = ((this.mHeaderMaxDragRate / 2.0f) + 0.5f) * ((float) i3) * 1.0f;
        if (i3 == 0) {
            i3 = 1;
        }
        return autoRefresh(i, i2, f / ((float) i3));
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public boolean autoRefresh(int i, final int i2, final float f) {
        if (this.mState != RefreshState.None || !isEnableRefreshOrLoadMore(this.mEnableRefresh)) {
            return false;
        }
        ValueAnimator valueAnimator = this.reboundAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        RunnableC16589 r0 = new Runnable() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.9
            @Override // java.lang.Runnable
            public void run() {
                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                simpleRefreshLayout.reboundAnimator = ValueAnimator.ofInt(simpleRefreshLayout.mSpinner, (int) (((float) SimpleRefreshLayout.this.mHeaderHeight) * f));
                SimpleRefreshLayout.this.reboundAnimator.setDuration((long) i2);
                SimpleRefreshLayout.this.reboundAnimator.setInterpolator(new DecelerateInterpolator());
                SimpleRefreshLayout.this.reboundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.9.1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        SimpleRefreshLayout.this.mKernel.moveSpinner(((Integer) valueAnimator2.getAnimatedValue()).intValue(), true);
                    }
                });
                SimpleRefreshLayout.this.reboundAnimator.addListener(new AnimatorListenerAdapter() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.9.2
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationStart(Animator animator) {
                        SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                        SimpleRefreshLayout.this.mLastTouchX = (float) (simpleRefreshLayout2.getMeasuredWidth() / 2);
                        SimpleRefreshLayout.this.mKernel.setState(RefreshState.PullDownToRefresh);
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        SimpleRefreshLayout.this.reboundAnimator = null;
                        if (SimpleRefreshLayout.this.mState != RefreshState.ReleaseToRefresh) {
                            SimpleRefreshLayout.this.mKernel.setState(RefreshState.ReleaseToRefresh);
                        }
                        SimpleRefreshLayout.this.overSpinner();
                    }
                });
                SimpleRefreshLayout.this.reboundAnimator.start();
            }
        };
        if (i > 0) {
            this.reboundAnimator = new ValueAnimator();
            postDelayed(r0, (long) i);
            return true;
        }
        r0.run();
        return true;
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public boolean autoLoadMore() {
        return autoLoadMore(0);
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public boolean autoLoadMore(int i) {
        int i2 = this.mReboundDuration;
        int i3 = this.mFooterHeight;
        float f = ((float) i3) * ((this.mFooterMaxDragRate / 2.0f) + 0.5f) * 1.0f;
        if (i3 == 0) {
            i3 = 1;
        }
        return autoLoadMore(i, i2, f / ((float) i3));
    }

    @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshLayout
    public boolean autoLoadMore(int i, final int i2, final float f) {
        if (this.mState != RefreshState.None || !isEnableRefreshOrLoadMore(this.mEnableLoadMore) || this.mFooterNoMoreData) {
            return false;
        }
        ValueAnimator valueAnimator = this.reboundAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        RunnableC164610 r0 = new Runnable() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.10
            @Override // java.lang.Runnable
            public void run() {
                SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                simpleRefreshLayout.reboundAnimator = ValueAnimator.ofInt(simpleRefreshLayout.mSpinner, -((int) (((float) SimpleRefreshLayout.this.mFooterHeight) * f)));
                SimpleRefreshLayout.this.reboundAnimator.setDuration((long) i2);
                SimpleRefreshLayout.this.reboundAnimator.setInterpolator(new DecelerateInterpolator());
                SimpleRefreshLayout.this.reboundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.10.1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        SimpleRefreshLayout.this.mKernel.moveSpinner(((Integer) valueAnimator2.getAnimatedValue()).intValue(), true);
                    }
                });
                SimpleRefreshLayout.this.reboundAnimator.addListener(new AnimatorListenerAdapter() { // from class: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout.10.2
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationStart(Animator animator) {
                        SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                        SimpleRefreshLayout.this.mLastTouchX = (float) (simpleRefreshLayout2.getMeasuredWidth() / 2);
                        SimpleRefreshLayout.this.mKernel.setState(RefreshState.PullUpToLoad);
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        SimpleRefreshLayout.this.reboundAnimator = null;
                        if (SimpleRefreshLayout.this.mState != RefreshState.ReleaseToLoad) {
                            SimpleRefreshLayout.this.mKernel.setState(RefreshState.ReleaseToLoad);
                        }
                        if (SimpleRefreshLayout.this.mEnableAutoLoadMore) {
                            SimpleRefreshLayout.this.mEnableAutoLoadMore = false;
                            SimpleRefreshLayout.this.overSpinner();
                            SimpleRefreshLayout.this.mEnableAutoLoadMore = true;
                            return;
                        }
                        SimpleRefreshLayout.this.overSpinner();
                    }
                });
                SimpleRefreshLayout.this.reboundAnimator.start();
            }
        };
        if (i > 0) {
            this.reboundAnimator = new ValueAnimator();
            postDelayed(r0, (long) i);
            return true;
        }
        r0.run();
        return true;
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.lib.un.basewidget.widget.simple.SimpleRefreshLayout$c */
    /* loaded from: classes.dex */
    public class C1663c implements RefreshKernel {
        public C1663c() {
            SimpleRefreshLayout.this = r1;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        @NonNull
        public RefreshLayout getRefreshLayout() {
            return SimpleRefreshLayout.this;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        @NonNull
        public RefreshContent getRefreshContent() {
            return SimpleRefreshLayout.this.mRefreshContent;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        public RefreshKernel setState(@NonNull RefreshState refreshState) {
            switch (refreshState) {
                case None:
                    SimpleRefreshLayout.this.resetStatus();
                    return null;
                case PullDownToRefresh:
                    if (!SimpleRefreshLayout.this.mState.isOpening) {
                        SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                        if (simpleRefreshLayout.isEnableRefreshOrLoadMore(simpleRefreshLayout.mEnableRefresh)) {
                            SimpleRefreshLayout.this.notifyStateChanged(RefreshState.PullDownToRefresh);
                            return null;
                        }
                    }
                    SimpleRefreshLayout.this.setViceState(RefreshState.PullDownToRefresh);
                    return null;
                case PullUpToLoad:
                    SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                    if (!simpleRefreshLayout2.isEnableRefreshOrLoadMore(simpleRefreshLayout2.mEnableLoadMore) || SimpleRefreshLayout.this.mState.isOpening || SimpleRefreshLayout.this.mState.isFinishing || (SimpleRefreshLayout.this.mFooterNoMoreData && SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished)) {
                        SimpleRefreshLayout.this.setViceState(RefreshState.PullUpToLoad);
                        return null;
                    }
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.PullUpToLoad);
                    return null;
                case PullDownCanceled:
                    if (!SimpleRefreshLayout.this.mState.isOpening) {
                        SimpleRefreshLayout simpleRefreshLayout3 = SimpleRefreshLayout.this;
                        if (simpleRefreshLayout3.isEnableRefreshOrLoadMore(simpleRefreshLayout3.mEnableRefresh)) {
                            SimpleRefreshLayout.this.notifyStateChanged(RefreshState.PullDownCanceled);
                            SimpleRefreshLayout.this.resetStatus();
                            return null;
                        }
                    }
                    SimpleRefreshLayout.this.setViceState(RefreshState.PullDownCanceled);
                    return null;
                case PullUpCanceled:
                    SimpleRefreshLayout simpleRefreshLayout4 = SimpleRefreshLayout.this;
                    if (!simpleRefreshLayout4.isEnableRefreshOrLoadMore(simpleRefreshLayout4.mEnableLoadMore) || SimpleRefreshLayout.this.mState.isOpening || (SimpleRefreshLayout.this.mFooterNoMoreData && SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished)) {
                        SimpleRefreshLayout.this.setViceState(RefreshState.PullUpCanceled);
                        return null;
                    }
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.PullUpCanceled);
                    SimpleRefreshLayout.this.resetStatus();
                    return null;
                case ReleaseToRefresh:
                    if (!SimpleRefreshLayout.this.mState.isOpening) {
                        SimpleRefreshLayout simpleRefreshLayout5 = SimpleRefreshLayout.this;
                        if (simpleRefreshLayout5.isEnableRefreshOrLoadMore(simpleRefreshLayout5.mEnableRefresh)) {
                            SimpleRefreshLayout.this.notifyStateChanged(RefreshState.ReleaseToRefresh);
                            return null;
                        }
                    }
                    SimpleRefreshLayout.this.setViceState(RefreshState.ReleaseToRefresh);
                    return null;
                case ReleaseToLoad:
                    SimpleRefreshLayout simpleRefreshLayout6 = SimpleRefreshLayout.this;
                    if (!simpleRefreshLayout6.isEnableRefreshOrLoadMore(simpleRefreshLayout6.mEnableLoadMore) || SimpleRefreshLayout.this.mState.isOpening || SimpleRefreshLayout.this.mState.isFinishing || (SimpleRefreshLayout.this.mFooterNoMoreData && SimpleRefreshLayout.this.mEnableFooterFollowWhenLoadFinished)) {
                        SimpleRefreshLayout.this.setViceState(RefreshState.ReleaseToLoad);
                        return null;
                    }
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.ReleaseToLoad);
                    return null;
                case RefreshReleased:
                    if (!SimpleRefreshLayout.this.mState.isOpening) {
                        SimpleRefreshLayout simpleRefreshLayout7 = SimpleRefreshLayout.this;
                        if (simpleRefreshLayout7.isEnableRefreshOrLoadMore(simpleRefreshLayout7.mEnableRefresh)) {
                            SimpleRefreshLayout.this.notifyStateChanged(RefreshState.RefreshReleased);
                            return null;
                        }
                    }
                    SimpleRefreshLayout.this.setViceState(RefreshState.RefreshReleased);
                    return null;
                case LoadReleased:
                    if (!SimpleRefreshLayout.this.mState.isOpening) {
                        SimpleRefreshLayout simpleRefreshLayout8 = SimpleRefreshLayout.this;
                        if (simpleRefreshLayout8.isEnableRefreshOrLoadMore(simpleRefreshLayout8.mEnableLoadMore)) {
                            SimpleRefreshLayout.this.notifyStateChanged(RefreshState.LoadReleased);
                            return null;
                        }
                    }
                    SimpleRefreshLayout.this.setViceState(RefreshState.LoadReleased);
                    return null;
                case Refreshing:
                    Log.d("ghy", "refreshing");
                    SimpleRefreshLayout.this.setStateRefreshing();
                    return null;
                case Loading:
                    SimpleRefreshLayout.this.setStateLoading();
                    return null;
                case RefreshFinish:
                    if (SimpleRefreshLayout.this.mState != RefreshState.Refreshing) {
                        return null;
                    }
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.RefreshFinish);
                    return null;
                case LoadFinish:
                    if (SimpleRefreshLayout.this.mState != RefreshState.Loading) {
                        return null;
                    }
                    SimpleRefreshLayout.this.notifyStateChanged(RefreshState.LoadFinish);
                    return null;
                default:
                    return null;
            }
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        @SuppressLint({"RestrictedApi"})
        public RefreshKernel moveSpinner(int i, boolean z) {
            int i2;
            if (SimpleRefreshLayout.this.mSpinner == i && SimpleRefreshLayout.this.mRefreshHeader == null && SimpleRefreshLayout.this.mRefreshFooter == null) {
                return this;
            }
            SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
            int i3 = simpleRefreshLayout.mSpinner;
            SimpleRefreshLayout.this.mSpinner = i;
            if (z && SimpleRefreshLayout.this.mViceState.isDragging) {
                if (((float) SimpleRefreshLayout.this.mSpinner) > ((float) SimpleRefreshLayout.this.mHeaderHeight) * SimpleRefreshLayout.this.mHeaderTriggerRate) {
                    SimpleRefreshLayout.this.mKernel.setState(RefreshState.ReleaseToRefresh);
                } else if (((float) (-SimpleRefreshLayout.this.mSpinner)) > ((float) SimpleRefreshLayout.this.mFooterHeight) * SimpleRefreshLayout.this.mFooterTriggerRate && !SimpleRefreshLayout.this.mFooterNoMoreData) {
                    SimpleRefreshLayout.this.mKernel.setState(RefreshState.ReleaseToLoad);
                } else if (SimpleRefreshLayout.this.mSpinner < 0 && !SimpleRefreshLayout.this.mFooterNoMoreData) {
                    SimpleRefreshLayout.this.mKernel.setState(RefreshState.PullUpToLoad);
                } else if (SimpleRefreshLayout.this.mSpinner > 0) {
                    SimpleRefreshLayout.this.mKernel.setState(RefreshState.PullDownToRefresh);
                }
            }
            int i4 = 1;
            if (SimpleRefreshLayout.this.mRefreshContent != null) {
                Integer num = null;
                if (i >= 0 && SimpleRefreshLayout.this.mRefreshHeader != null) {
                    SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                    if (simpleRefreshLayout2.isEnableTranslationContent(simpleRefreshLayout2.mEnableHeaderTranslationContent, SimpleRefreshLayout.this.mRefreshHeader)) {
                        num = Integer.valueOf(i);
                    } else if (i3 < 0) {
                        num = 0;
                    }
                }
                if (i <= 0 && SimpleRefreshLayout.this.mRefreshFooter != null) {
                    SimpleRefreshLayout simpleRefreshLayout3 = SimpleRefreshLayout.this;
                    if (simpleRefreshLayout3.isEnableTranslationContent(simpleRefreshLayout3.mEnableFooterTranslationContent, SimpleRefreshLayout.this.mRefreshFooter)) {
                        num = Integer.valueOf(i);
                    } else if (i3 > 0) {
                        num = 0;
                    }
                }
                if (num != null) {
                    SimpleRefreshLayout.this.mRefreshContent.moveSpinner(num.intValue(), SimpleRefreshLayout.this.mHeaderTranslationViewId, SimpleRefreshLayout.this.mFooterTranslationViewId);
                    boolean z2 = (SimpleRefreshLayout.this.mEnableClipHeaderWhenFIXED_BEHIND && SimpleRefreshLayout.this.mRefreshHeader != null && SimpleRefreshLayout.this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) || SimpleRefreshLayout.this.mHeaderBackgroundColor != 0;
                    boolean z3 = (SimpleRefreshLayout.this.mEnableClipFooterWhenFIXED_BEHIND && SimpleRefreshLayout.this.mRefreshFooter != null && SimpleRefreshLayout.this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND) || SimpleRefreshLayout.this.mFooterBackgroundColor != 0;
                    if ((z2 && (num.intValue() >= 0 || i3 > 0)) || (z3 && (num.intValue() <= 0 || i3 < 0))) {
                        simpleRefreshLayout.invalidate();
                    }
                }
            }
            if ((i >= 0 || i3 > 0) && SimpleRefreshLayout.this.mRefreshHeader != null) {
                int max = Math.max(i, 0);
                int i5 = SimpleRefreshLayout.this.mHeaderHeight;
                int i6 = (int) (((float) SimpleRefreshLayout.this.mHeaderHeight) * SimpleRefreshLayout.this.mHeaderMaxDragRate);
                float f = ((float) max) * 1.0f;
                if (SimpleRefreshLayout.this.mHeaderHeight == 0) {
                    i2 = 1;
                } else {
                    i2 = SimpleRefreshLayout.this.mHeaderHeight;
                }
                float f2 = f / ((float) i2);
                SimpleRefreshLayout simpleRefreshLayout4 = SimpleRefreshLayout.this;
                if ((simpleRefreshLayout4.isEnableRefreshOrLoadMore(simpleRefreshLayout4.mEnableRefresh) || (SimpleRefreshLayout.this.mState == RefreshState.RefreshFinish && !z)) && i3 != SimpleRefreshLayout.this.mSpinner) {
                    if (SimpleRefreshLayout.this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
                        SimpleRefreshLayout.this.mRefreshHeader.getView().setTranslationY((float) SimpleRefreshLayout.this.mSpinner);
                        if (!(SimpleRefreshLayout.this.mHeaderBackgroundColor == 0 || SimpleRefreshLayout.this.mPaint == null)) {
                            SimpleRefreshLayout simpleRefreshLayout5 = SimpleRefreshLayout.this;
                            if (!simpleRefreshLayout5.isEnableTranslationContent(simpleRefreshLayout5.mEnableHeaderTranslationContent, SimpleRefreshLayout.this.mRefreshHeader)) {
                                simpleRefreshLayout.invalidate();
                            }
                        }
                    } else if (SimpleRefreshLayout.this.mRefreshHeader.getRefreshSpinner() == RefreshSpinner.SCALE) {
                        SimpleRefreshLayout.this.mRefreshHeader.getView().requestLayout();
                    }
                    SimpleRefreshLayout.this.mRefreshHeader.onMoving(z, f2, max, i5, i6);
                }
                if (!(i3 == SimpleRefreshLayout.this.mSpinner || SimpleRefreshLayout.this.mOnMultiPurposeListener == null || !(SimpleRefreshLayout.this.mRefreshHeader instanceof RefreshHeader))) {
                    SimpleRefreshLayout.this.mOnMultiPurposeListener.onHeaderMoving((RefreshHeader) SimpleRefreshLayout.this.mRefreshHeader, z, f2, max, i5, i6);
                }
            }
            if ((i <= 0 || i3 < 0) && SimpleRefreshLayout.this.mRefreshFooter != null) {
                int i7 = -Math.min(i, 0);
                int i8 = SimpleRefreshLayout.this.mFooterHeight;
                int i9 = (int) (((float) SimpleRefreshLayout.this.mFooterHeight) * SimpleRefreshLayout.this.mFooterMaxDragRate);
                float f3 = ((float) i7) * 1.0f;
                if (SimpleRefreshLayout.this.mFooterHeight != 0) {
                    i4 = SimpleRefreshLayout.this.mFooterHeight;
                }
                float f4 = f3 / ((float) i4);
                SimpleRefreshLayout simpleRefreshLayout6 = SimpleRefreshLayout.this;
                if ((simpleRefreshLayout6.isEnableRefreshOrLoadMore(simpleRefreshLayout6.mEnableLoadMore) || (SimpleRefreshLayout.this.mState == RefreshState.LoadFinish && !z)) && i3 != SimpleRefreshLayout.this.mSpinner) {
                    if (SimpleRefreshLayout.this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
                        SimpleRefreshLayout.this.mRefreshFooter.getView().setTranslationY((float) SimpleRefreshLayout.this.mSpinner);
                        if (!(SimpleRefreshLayout.this.mFooterBackgroundColor == 0 || SimpleRefreshLayout.this.mPaint == null)) {
                            SimpleRefreshLayout simpleRefreshLayout7 = SimpleRefreshLayout.this;
                            if (!simpleRefreshLayout7.isEnableTranslationContent(simpleRefreshLayout7.mEnableFooterTranslationContent, SimpleRefreshLayout.this.mRefreshFooter)) {
                                simpleRefreshLayout.invalidate();
                            }
                        }
                    } else if (SimpleRefreshLayout.this.mRefreshFooter.getRefreshSpinner() == RefreshSpinner.SCALE) {
                        SimpleRefreshLayout.this.mRefreshFooter.getView().requestLayout();
                    }
                    SimpleRefreshLayout.this.mRefreshFooter.onMoving(z, f4, i7, i8, i9);
                }
                if (!(i3 == SimpleRefreshLayout.this.mSpinner || SimpleRefreshLayout.this.mOnMultiPurposeListener == null || !(SimpleRefreshLayout.this.mRefreshFooter instanceof RefreshFooter))) {
                    SimpleRefreshLayout.this.mOnMultiPurposeListener.onFooterMoving((RefreshFooter) SimpleRefreshLayout.this.mRefreshFooter, z, f4, i7, i8, i9);
                }
            }
            return this;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        public ValueAnimator animSpinner(int i) {
            SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
            return simpleRefreshLayout.animSpinner(i, 0, simpleRefreshLayout.mReboundInterpolator, SimpleRefreshLayout.this.mReboundDuration);
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        public RefreshKernel requestDrawBackgroundFor(@NonNull RefreshInternal refreshInternal, int i) {
            if (SimpleRefreshLayout.this.mPaint == null && i != 0) {
                SimpleRefreshLayout.this.mPaint = new Paint();
            }
            if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshHeader)) {
                SimpleRefreshLayout.this.mHeaderBackgroundColor = i;
            } else if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshFooter)) {
                SimpleRefreshLayout.this.mFooterBackgroundColor = i;
            }
            return this;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        public RefreshKernel requestNeedTouchEventFor(@NonNull RefreshInternal refreshInternal, boolean z) {
            if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshHeader)) {
                SimpleRefreshLayout.this.mHeaderNeedTouchEventWhenRefreshing = z;
            } else if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshFooter)) {
                SimpleRefreshLayout.this.mFooterNeedTouchEventWhenLoading = z;
            }
            return this;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        public RefreshKernel requestDefaultTranslationContentFor(@NonNull RefreshInternal refreshInternal, boolean z) {
            if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshHeader)) {
                if (!SimpleRefreshLayout.this.mManualHeaderTranslationContent) {
                    SimpleRefreshLayout.this.mManualHeaderTranslationContent = true;
                    SimpleRefreshLayout.this.mEnableHeaderTranslationContent = z;
                }
            } else if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshFooter) && !SimpleRefreshLayout.this.mManualFooterTranslationContent) {
                SimpleRefreshLayout.this.mManualFooterTranslationContent = true;
                SimpleRefreshLayout.this.mEnableFooterTranslationContent = z;
            }
            return this;
        }

        @Override // com.p051jd.lib.p083un.basewidget.widget.simple.interfaces.RefreshKernel
        public RefreshKernel requestRemeasureHeightFor(@NonNull RefreshInternal refreshInternal) {
            if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshHeader)) {
                if (SimpleRefreshLayout.this.mHeaderHeightStatus.notified) {
                    SimpleRefreshLayout simpleRefreshLayout = SimpleRefreshLayout.this;
                    simpleRefreshLayout.mHeaderHeightStatus = simpleRefreshLayout.mHeaderHeightStatus.unNotify();
                }
            } else if (refreshInternal.equals(SimpleRefreshLayout.this.mRefreshFooter) && SimpleRefreshLayout.this.mFooterHeightStatus.notified) {
                SimpleRefreshLayout simpleRefreshLayout2 = SimpleRefreshLayout.this;
                simpleRefreshLayout2.mFooterHeightStatus = simpleRefreshLayout2.mFooterHeightStatus.unNotify();
            }
            return this;
        }
    }

    @Override // android.view.View
    public boolean post(@NonNull Runnable runnable) {
        Handler handler = this.mHandler;
        if (handler != null) {
            return handler.post(new RunnableC1664a(runnable, 0));
        }
        List<RunnableC1664a> list = this.mListDelayedRunnable;
        if (list == null) {
            list = new ArrayList<>();
        }
        this.mListDelayedRunnable = list;
        this.mListDelayedRunnable.add(new RunnableC1664a(runnable, 0));
        return false;
    }

    @Override // android.view.View
    public boolean postDelayed(@NonNull Runnable runnable, long j) {
        if (j == 0) {
            new RunnableC1664a(runnable, 0).run();
            return true;
        }
        Handler handler = this.mHandler;
        if (handler != null) {
            return handler.postDelayed(new RunnableC1664a(runnable, 0), j);
        }
        List<RunnableC1664a> list = this.mListDelayedRunnable;
        if (list == null) {
            list = new ArrayList<>();
        }
        this.mListDelayedRunnable = list;
        this.mListDelayedRunnable.add(new RunnableC1664a(runnable, j));
        return false;
    }
}
