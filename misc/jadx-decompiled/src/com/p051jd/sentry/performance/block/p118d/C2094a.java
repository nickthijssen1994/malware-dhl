package com.p051jd.sentry.performance.block.p118d;

import com.jd.sentry.Sentry;
import com.jd.sentry.strategy.a;
import com.jd.sentry.util.Log;
import com.p051jd.sentry.performance.block.p117c.C2088a;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/* renamed from: com.jd.sentry.performance.block.d.a */
/* loaded from: classes.dex */
public class C2094a {

    /* renamed from: a */
    final C2096a f3751a;

    /* renamed from: b */
    private C2097b f3752b;

    /* renamed from: c */
    private ArrayDeque<C2088a> f3753c;

    /* renamed from: d */
    private Thread f3754d;

    /* renamed from: e */
    private boolean f3755e;

    /* renamed from: f */
    private volatile boolean f3756f;

    /* renamed from: g */
    private final Runnable f3757g;

    /* renamed from: com.jd.sentry.performance.block.d.a$a */
    /* loaded from: classes.dex */
    static class C2096a {

        /* renamed from: a */
        int f3759a;

        C2096a() {
        }

        /* renamed from: a */
        public void m743a() {
            this.f3759a++;
        }

        /* renamed from: b */
        public void m742b() {
            this.f3759a = 0;
        }
    }

    public C2094a() {
        this(new C2097b(5, 30000));
    }

    public C2094a(C2097b bVar) {
        this.f3757g = new Runnable() { // from class: com.jd.sentry.performance.block.d.a.1
            @Override // java.lang.Runnable
            public void run() {
                if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                    Log.d("block", "BlockCacheMemory submitRunnable run....");
                }
                while (true) {
                    if (C2094a.this.f3756f) {
                        synchronized (C2094a.this) {
                            try {
                                C2094a.this.wait();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    if (C2094a.this.f3752b.f3761b <= 0) {
                        break;
                    }
                    long j = C2094a.this.f3752b.f3761b;
                    synchronized (C2094a.this) {
                        try {
                            C2094a.this.wait(j);
                        } catch (InterruptedException unused) {
                        }
                    }
                    try {
                        C2094a.this.m745c();
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                    Log.d("block", "BlockCacheMemory mPoolParams.delayTimeDataSubmitToDisk must > 0L");
                }
            }
        };
        this.f3752b = bVar;
        this.f3753c = new ArrayDeque<>();
        this.f3751a = new C2096a();
        this.f3754d = new Thread(this.f3757g, "BlockCacheMemoryPool");
        this.f3754d.setDaemon(false);
        this.f3754d.setPriority(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: c */
    public void m745c() {
        if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
            Log.d("block", "BlockCacheMemory submitDataDisk....");
        }
        synchronized (this) {
            if (this.f3753c == null || this.f3753c.size() != 0) {
                ArrayList arrayList = new ArrayList();
                int size = this.f3753c.size();
                for (int i = 0; i < size; i++) {
                    C2088a remove = this.f3753c.remove();
                    if (remove != null) {
                        arrayList.addAll(remove.m767a());
                        remove.m764b();
                    }
                }
                this.f3751a.m742b();
                a blockDetectStratety = Sentry.getSentryConfig().getBlockDetectStratety();
                if (blockDetectStratety != null) {
                    if (Sentry.isDebug() && Sentry.getSentryConfig().isEnableBlockDetect() && Log.LOGSWITCH) {
                        Iterator it = arrayList.iterator();
                        while (it.hasNext()) {
                            HashMap hashMap = (HashMap) it.next();
                            StringBuffer stringBuffer = new StringBuffer();
                            for (Object obj : hashMap.keySet()) {
                                Object obj2 = hashMap.get(obj);
                                stringBuffer.append(obj.toString() + " " + obj2.toString() + " ");
                            }
                            if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                                Log.d("BlockCacheMemoryPool", "testStr is " + ((Object) stringBuffer));
                            }
                        }
                    }
                    blockDetectStratety.a(arrayList);
                }
            }
        }
    }

    /* renamed from: a */
    public void m750a() {
        synchronized (this) {
            if (this.f3756f) {
                notify();
            } else if (!this.f3755e) {
                this.f3754d.start();
                this.f3755e = true;
            }
            this.f3756f = false;
        }
    }

    /* renamed from: a */
    public void m749a(C2088a aVar) {
        synchronized (this) {
            this.f3753c.offer(aVar);
            this.f3751a.m743a();
        }
        if (this.f3751a.f3759a >= this.f3752b.f3760a) {
            try {
                m745c();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /* renamed from: b */
    public void m747b() {
        if (this.f3755e) {
            this.f3756f = true;
        }
    }
}
