package com.p051jd.framework.p077a.p078a;

import android.text.TextUtils;
import com.huawei.hms.framework.common.ContainerUtils;
import com.jingdong.jdsdk.network.JDHttpTookit;
import com.jingdong.sdk.oklog.OKLog;
import com.p051jd.framework.network.JDNetworkResponse;
import com.p051jd.framework.network.JDResponse;
import com.p051jd.framework.network.error.JDError;
import com.p051jd.framework.network.request.JDRequest;
import com.p051jd.framework.p077a.p079b.C1514a;
import com.p051jd.framework.p077a.p079b.C1516b;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.GZIPInputStream;
import okhttp3.Headers;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.framework.a.a.a */
/* loaded from: classes.dex */
public class C1513a {

    /* renamed from: a */
    public static final String f2754a = "a";

    /* renamed from: b */
    public static String f2755b = "utf-8";

    /* renamed from: d */
    private static int f2756d = 4096;

    /* renamed from: c */
    protected final C1514a f2757c = new C1514a(f2756d);

    /* renamed from: a */
    public Request m1590a(JDRequest<?> jDRequest) {
        Request.Builder url = new Request.Builder().url(jDRequest.getUrl());
        if (OKLog.f4224D) {
            OKLog.m135d(f2754a, "request Header Fields : ");
        }
        Map<String, String> header = jDRequest.getHeader();
        for (String str : header.keySet()) {
            url.addHeader(str, header.get(str));
            if (OKLog.f4224D) {
                String str2 = f2754a;
                OKLog.m135d(str2, str + " : " + header.get(str));
            }
        }
        try {
            String cookie = JDHttpTookit.getEngine().getLoginUserControllerImpl().getCookie();
            if (!TextUtils.isEmpty(cookie)) {
                url.addHeader("Cookie", cookie);
                url.addHeader("jdc-backup", cookie);
            }
        } catch (Throwable unused) {
        }
        if (!TextUtils.isEmpty(jDRequest.getTag())) {
            url.tag(jDRequest.getTag());
        }
        try {
            m1586a(url, jDRequest);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return url.build();
    }

    /* renamed from: a */
    public JDResponse<?> m1588a(JDRequest<?> jDRequest, Response response) {
        JDResponse<?> jDResponse = new JDResponse<>();
        if (response != null) {
            if (response.body() != null) {
                try {
                    jDResponse.setData(new String(m1585a(response), m1584a(response, f2755b)));
                } catch (IOException unused) {
                }
            }
            jDResponse.setHeaders(m1587a(response.headers()));
        }
        return jDResponse;
    }

    /* renamed from: a */
    public JDError m1589a(JDRequest<?> jDRequest, Exception exc, Response response) {
        JDResponse<?> jDResponse;
        JDError jDError = null;
        try {
            jDResponse = m1588a(jDRequest, response);
        } catch (Exception e) {
            e.printStackTrace();
            jDResponse = null;
        }
        if (exc != null) {
            jDError = new JDError(exc);
        }
        if (jDResponse != null) {
            jDError.networkResponse = new JDNetworkResponse(jDResponse.getStatusCode(), jDResponse.getHeaders(), jDResponse.getData() != null ? jDResponse.getData().toString() : "");
        }
        return jDError;
    }

    /* renamed from: a */
    private HashMap<String, String> m1587a(Headers headers) {
        if (headers == null && headers.size() <= 0) {
            return null;
        }
        HashMap<String, String> hashMap = new HashMap<>();
        int size = headers.size();
        for (int i = 0; i < size; i++) {
            if (!TextUtils.isEmpty(headers.name(i)) && !TextUtils.isEmpty(headers.value(i))) {
                hashMap.put(headers.name(i), headers.value(i));
            }
        }
        return hashMap;
    }

    /* renamed from: a */
    private void m1586a(Request.Builder builder, JDRequest jDRequest) throws IOException {
        int method = jDRequest.getMethod();
        if (method == 0) {
            builder.get();
        } else if (method == 3) {
            builder.delete();
        } else {
            throw new IllegalStateException("Unknown method type.");
        }
    }

    /* renamed from: a */
    public static String m1584a(Response response, String str) {
        String header = response.header("Content-Type");
        if (header == null) {
            header = response.header("content-type");
        }
        if (header != null) {
            String[] split = header.split(";");
            for (int i = 1; i < split.length; i++) {
                String[] split2 = split[i].trim().split(ContainerUtils.KEY_VALUE_DELIMITER);
                if (split2.length == 2 && split2[0].equals("charset")) {
                    return split2[1];
                }
            }
        }
        return str;
    }

    /* renamed from: a */
    private byte[] m1585a(Response response) throws IOException {
        InputStream inputStream;
        String header = response.header("Content-Encoding");
        ResponseBody body = response.body();
        if ("gzip".equals(header)) {
            inputStream = new GZIPInputStream(body.byteStream());
        } else {
            inputStream = body.byteStream();
        }
        C1516b bVar = new C1516b(this.f2757c, (int) body.contentLength());
        byte[] bArr = null;
        try {
            bArr = this.f2757c.m1582a(1024);
            while (true) {
                int read = inputStream.read(bArr);
                if (read == -1) {
                    break;
                }
                bVar.write(bArr, 0, read);
            }
            byte[] byteArray = bVar.toByteArray();
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException unused) {
                    OKLog.m120v("Error occured when calling consumingContent", new Object[0]);
                }
            }
            this.f2757c.m1581a(bArr);
            bVar.close();
            return byteArray;
        } catch (Throwable th) {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException unused2) {
                    OKLog.m120v("Error occured when calling consumingContent", new Object[0]);
                }
            }
            this.f2757c.m1581a(bArr);
            bVar.close();
            throw th;
        }
    }
}
