package com.p051jd.framework.network.dialing;

import android.util.Log;
import com.android.volley.VolleyLog;
import com.android.volley.utils.TimeUtils;
import com.jingdong.jdsdk.network.toolbox.GlobalExecutorService;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.framework.network.dialing.DialingExecutor */
/* loaded from: classes.dex */
public class DialingExecutor {
    public static final int DEFAULT_DAILING_TIMEOUT = 2000;
    public static final int LOCAL_DNS_DAILING_TIMEOUT = 250;
    public static final String TAG = "DialingExecutor";

    public static IPEntity randomSelect(ArrayList<IPEntity> arrayList, final int i) {
        IPEntity iPEntity;
        if (arrayList == null || arrayList.size() <= 0) {
            return null;
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "Start IP connection test.");
        }
        Future[] futureArr = new Future[arrayList.size()];
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            final IPEntity iPEntity2 = arrayList.get(i2);
            futureArr[i2] = GlobalExecutorService.lightExecutorService().submit(new Callable<IPEntity>() { // from class: com.jd.framework.network.dialing.DialingExecutor.1
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public IPEntity call() throws Exception {
                    return DialingExecutor.customIpTest(IPEntity.this, i);
                }
            });
        }
        ArrayList arrayList2 = new ArrayList();
        for (Future future : futureArr) {
            try {
                iPEntity = (IPEntity) future.get();
            } catch (Exception e) {
                e.printStackTrace();
                iPEntity = null;
            }
            if (iPEntity != null && iPEntity.time > 0) {
                arrayList2.add(iPEntity);
            }
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "IP connection test complete.");
        }
        if (arrayList2.size() > 0) {
            return (IPEntity) arrayList2.get(new Random().nextInt(arrayList2.size()));
        }
        return null;
    }

    public static IPEntity select(ArrayList<IPEntity> arrayList, final int i) {
        IPEntity iPEntity;
        IPEntity iPEntity2 = null;
        if (arrayList == null || arrayList.size() <= 0) {
            return null;
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "Start IP connection test.");
        }
        Future[] futureArr = new Future[arrayList.size()];
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            final IPEntity iPEntity3 = arrayList.get(i2);
            futureArr[i2] = GlobalExecutorService.lightExecutorService().submit(new Callable<IPEntity>() { // from class: com.jd.framework.network.dialing.DialingExecutor.2
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public IPEntity call() throws Exception {
                    return DialingExecutor.customIpTest(IPEntity.this, i);
                }
            });
        }
        ArrayList arrayList2 = new ArrayList();
        for (Future future : futureArr) {
            try {
                iPEntity = (IPEntity) future.get();
            } catch (Exception e) {
                e.printStackTrace();
                iPEntity = null;
            }
            if (iPEntity != null && iPEntity.time > 0) {
                arrayList2.add(iPEntity);
            }
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "IP connection test complete.");
        }
        if (arrayList2.size() > 0) {
            Iterator it = arrayList2.iterator();
            while (it.hasNext()) {
                IPEntity iPEntity4 = (IPEntity) it.next();
                if (iPEntity2 == null || iPEntity2.time > iPEntity4.time) {
                    iPEntity2 = iPEntity4;
                }
            }
        }
        return iPEntity2;
    }

    public static IPEntity select(final IPEntity iPEntity, final int i) {
        IPEntity iPEntity2;
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "Start IP connection test.");
        }
        try {
            iPEntity2 = (IPEntity) GlobalExecutorService.lightExecutorService().submit(new Callable<IPEntity>() { // from class: com.jd.framework.network.dialing.DialingExecutor.3
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public IPEntity call() throws Exception {
                    return DialingExecutor.customIpTest(IPEntity.this, i);
                }
            }).get();
        } catch (Exception e) {
            e.printStackTrace();
            iPEntity2 = null;
        }
        if (iPEntity2 != null && iPEntity2.time > 0) {
            return iPEntity2;
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "IP connection test complete.");
        }
        return iPEntity2;
    }

    /* JADX WARN: Removed duplicated region for block: B:30:0x005b  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static long connect(String str, int i, int i2) {
        Throwable th;
        Socket socket;
        long j;
        long j2;
        InetSocketAddress inetSocketAddress;
        IOException e;
        Socket socket2;
        if (i == 0) {
            i = 443;
        }
        try {
            inetSocketAddress = null;
            socket2 = null;
            socket2 = null;
            j2 = 0;
            try {
                try {
                    j = System.currentTimeMillis();
                    try {
                        socket = new Socket();
                    } catch (IOException e2) {
                        e = e2;
                    }
                } catch (IOException e3) {
                    e = e3;
                    j = 0;
                }
            } catch (Throwable th2) {
                th = th2;
                socket = inetSocketAddress;
            }
        } catch (IOException e4) {
            e4.printStackTrace();
        }
        try {
            InetSocketAddress inetSocketAddress2 = new InetSocketAddress(str, i);
            socket.connect(inetSocketAddress2, i2);
            socket.sendUrgentData(255);
            j2 = System.currentTimeMillis();
            if (!socket.isClosed()) {
                socket.shutdownInput();
            }
            socket.shutdownOutput();
            socket.close();
            inetSocketAddress = inetSocketAddress2;
        } catch (IOException e5) {
            e = e5;
            socket2 = socket;
            e.printStackTrace();
            if (socket2 != null && !socket2.isClosed()) {
                socket2.shutdownInput();
            }
            socket2.shutdownOutput();
            socket2.close();
            inetSocketAddress = socket2;
            long j3 = j2 - j;
            if (VolleyLog.DEBUG) {
            }
            return j3;
        } catch (Throwable th3) {
            th = th3;
            if (socket != null) {
                try {
                    if (!socket.isClosed()) {
                        socket.shutdownInput();
                    }
                } catch (IOException e6) {
                    e6.printStackTrace();
                    throw th;
                }
            }
            socket.shutdownOutput();
            socket.close();
            throw th;
        }
        long j32 = j2 - j;
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "ip : " + str + ", rtt time : " + j32);
        }
        return j32;
    }

    public static IPEntity customIpTest(IPEntity iPEntity, int i) {
        iPEntity.time = connect(iPEntity.key, 443, i);
        iPEntity.updateTime = TimeUtils.getCurrentTime();
        return iPEntity;
    }
}
