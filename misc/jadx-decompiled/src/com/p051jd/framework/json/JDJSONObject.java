package com.p051jd.framework.json;

import android.util.Log;
import com.jd.framework.json.anotation.JSONField;
import com.p051jd.JSONException;
import com.p051jd.p052a.C1181d;
import com.p051jd.parser.C2015l;
import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.framework.json.JDJSONObject */
/* loaded from: classes.dex */
public class JDJSONObject extends JDJSON implements Serializable, Cloneable, InvocationHandler, Map<String, Object> {
    public static final Object NULL = new Object() { // from class: com.jd.framework.json.JDJSONObject.1
        public boolean equals(Object obj) {
            return obj == this || obj == null;
        }

        public String toString() {
            return "null";
        }
    };
    private final Map<String, Object> map;

    public JDJSONObject() {
        this(16, false);
    }

    public JDJSONObject(Map<String, Object> map) {
        this.map = map;
    }

    public JDJSONObject(boolean z) {
        this(16, z);
    }

    public JDJSONObject(int i) {
        this(i, false);
    }

    public JDJSONObject(int i, boolean z) {
        if (z) {
            this.map = new LinkedHashMap(i);
        } else {
            this.map = new HashMap(i);
        }
    }

    @Override // java.util.Map
    public int size() {
        return this.map.size();
    }

    @Override // java.util.Map
    public boolean isEmpty() {
        return this.map.isEmpty();
    }

    @Override // java.util.Map
    public boolean containsKey(Object obj) {
        return this.map.containsKey(obj);
    }

    @Override // java.util.Map
    public boolean containsValue(Object obj) {
        return this.map.containsValue(obj);
    }

    @Override // java.util.Map
    public Object get(Object obj) {
        return this.map.get(obj);
    }

    public JDJSONObject getJSONObject(String str) {
        Object obj = this.map.get(str);
        if (obj instanceof JDJSONObject) {
            return (JDJSONObject) obj;
        }
        if (obj instanceof String) {
            return JDJSON.parseObject((String) obj);
        }
        return (JDJSONObject) toJSON(obj);
    }

    public JDJSONArray getJSONArray(String str) {
        Object obj = this.map.get(str);
        if (obj instanceof JDJSONArray) {
            return (JDJSONArray) obj;
        }
        if (obj instanceof String) {
            return (JDJSONArray) JDJSON.parse((String) obj);
        }
        return (JDJSONArray) toJSON(obj);
    }

    public <T> T getObject(String str, Class<T> cls) {
        return (T) C1181d.m2479a(this.map.get(str), cls);
    }

    public Boolean getBoolean(String str) {
        Object obj = get(str);
        if (obj == null) {
            return null;
        }
        return C1181d.m2451m(obj);
    }

    public boolean optBoolean(String str) {
        return optBoolean(str, false);
    }

    public boolean optBoolean(String str, boolean z) {
        Boolean bool;
        try {
            bool = getBoolean(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse boolean error with key : " + str);
            }
            bool = null;
        }
        return bool != null ? bool.booleanValue() : z;
    }

    public String optString(String str) {
        return optString(str, "");
    }

    public String optString(String str, String str2) {
        String str3;
        try {
            str3 = getString(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse String error with key : " + str);
            }
            str3 = null;
        }
        return str3 != null ? str3 : str2;
    }

    public int optInt(String str) {
        return optInt(str, 0);
    }

    public int optInt(String str, int i) {
        Integer num;
        try {
            num = getInteger(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse int error with key : " + str);
            }
            num = null;
        }
        return num != null ? num.intValue() : i;
    }

    public long optLong(String str) {
        return optLong(str, 0);
    }

    public long optLong(String str, long j) {
        Long l;
        try {
            l = getLong(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse long error with key : " + str);
            }
            l = null;
        }
        return l != null ? l.longValue() : j;
    }

    public double optDouble(String str) {
        return optDouble(str, Double.NaN);
    }

    public double optDouble(String str, double d) {
        Double d2;
        try {
            d2 = getDouble(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse double error with key : " + str);
            }
            d2 = null;
        }
        return d2 != null ? d2.doubleValue() : d;
    }

    public JDJSONObject optJSONObject(String str) {
        JDJSONObject jDJSONObject;
        try {
            jDJSONObject = getJSONObject(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse jsonobject error with key : " + str);
            }
            jDJSONObject = null;
        }
        if (jDJSONObject != null) {
            return jDJSONObject;
        }
        return null;
    }

    public JDJSONArray optJSONArray(String str) {
        JDJSONArray jDJSONArray;
        try {
            jDJSONArray = getJSONArray(str);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse jsonarray error with key : " + str);
            }
            jDJSONArray = null;
        }
        if (jDJSONArray != null) {
            return jDJSONArray;
        }
        return null;
    }

    public boolean isNull(String str) {
        Object obj = get(str);
        return obj == null || obj == NULL;
    }

    public byte[] getBytes(String str) {
        Object obj = get(str);
        if (obj == null) {
            return null;
        }
        return C1181d.m2452l(obj);
    }

    public boolean getBooleanValue(String str) {
        Boolean m = C1181d.m2451m(get(str));
        if (m == null) {
            return false;
        }
        return m.booleanValue();
    }

    public Byte getByte(String str) {
        return C1181d.m2468b(get(str));
    }

    public byte getByteValue(String str) {
        Byte b = C1181d.m2468b(get(str));
        if (b == null) {
            return 0;
        }
        return b.byteValue();
    }

    public Short getShort(String str) {
        return C1181d.m2461d(get(str));
    }

    public short getShortValue(String str) {
        Short d = C1181d.m2461d(get(str));
        if (d == null) {
            return 0;
        }
        return d.shortValue();
    }

    public Integer getInteger(String str) {
        return C1181d.m2453k(get(str));
    }

    public int getIntValue(String str) {
        Integer k = C1181d.m2453k(get(str));
        if (k == null) {
            return 0;
        }
        return k.intValue();
    }

    public Long getLong(String str) {
        return C1181d.m2454j(get(str));
    }

    public long getLongValue(String str) {
        Long j = C1181d.m2454j(get(str));
        if (j == null) {
            return 0;
        }
        return j.longValue();
    }

    public Float getFloat(String str) {
        return C1181d.m2457g(get(str));
    }

    public float getFloatValue(String str) {
        Float g = C1181d.m2457g(get(str));
        if (g == null) {
            return 0.0f;
        }
        return g.floatValue();
    }

    public Double getDouble(String str) {
        return C1181d.m2456h(get(str));
    }

    public double getDoubleValue(String str) {
        Double h = C1181d.m2456h(get(str));
        if (h == null) {
            return 0.0d;
        }
        return h.doubleValue();
    }

    public BigDecimal getBigDecimal(String str) {
        return C1181d.m2459e(get(str));
    }

    public BigInteger getBigInteger(String str) {
        return C1181d.m2458f(get(str));
    }

    public String getString(String str) {
        Object obj = get(str);
        if (obj == null) {
            return null;
        }
        return obj.toString();
    }

    public Date getDate(String str) {
        return C1181d.m2455i(get(str));
    }

    public Object put(String str, Object obj) {
        return this.map.put(str, obj);
    }

    @Override // java.util.Map
    public void putAll(Map<? extends String, ? extends Object> map) {
        this.map.putAll(map);
    }

    @Override // java.util.Map
    public void clear() {
        this.map.clear();
    }

    @Override // java.util.Map
    public Object remove(Object obj) {
        return this.map.remove(obj);
    }

    @Override // java.util.Map
    public Set<String> keySet() {
        return this.map.keySet();
    }

    @Override // java.util.Map
    public Collection<Object> values() {
        return this.map.values();
    }

    @Override // java.util.Map
    public Set<Map.Entry<String, Object>> entrySet() {
        return this.map.entrySet();
    }

    @Override // java.lang.Object
    public Object clone() {
        return new JDJSONObject(new LinkedHashMap(this.map));
    }

    @Override // java.lang.Object, java.util.Map
    public boolean equals(Object obj) {
        return this.map.equals(obj);
    }

    @Override // java.lang.Object, java.util.Map
    public int hashCode() {
        return this.map.hashCode();
    }

    @Override // java.lang.reflect.InvocationHandler
    public Object invoke(Object obj, Method method, Object[] objArr) throws Throwable {
        Class<?>[] parameterTypes = method.getParameterTypes();
        String str = null;
        if (parameterTypes.length == 1) {
            if (method.getName().equals("equals")) {
                return Boolean.valueOf(equals(objArr[0]));
            }
            if (method.getReturnType() == Void.TYPE) {
                JSONField annotation = method.getAnnotation(JSONField.class);
                String name = (annotation == null || annotation.name().length() == 0) ? null : annotation.name();
                if (name == null) {
                    String name2 = method.getName();
                    if (name2.startsWith("set")) {
                        String substring = name2.substring(3);
                        if (substring.length() != 0) {
                            name = Character.toLowerCase(substring.charAt(0)) + substring.substring(1);
                        } else {
                            throw new JSONException("illegal setter");
                        }
                    } else {
                        throw new JSONException("illegal setter");
                    }
                }
                this.map.put(name, objArr[0]);
                return null;
            }
            throw new JSONException("illegal setter");
        } else if (parameterTypes.length != 0) {
            throw new UnsupportedOperationException(method.toGenericString());
        } else if (method.getReturnType() != Void.TYPE) {
            JSONField annotation2 = method.getAnnotation(JSONField.class);
            if (!(annotation2 == null || annotation2.name().length() == 0)) {
                str = annotation2.name();
            }
            if (str == null) {
                String name3 = method.getName();
                if (name3.startsWith("get")) {
                    String substring2 = name3.substring(3);
                    if (substring2.length() != 0) {
                        str = Character.toLowerCase(substring2.charAt(0)) + substring2.substring(1);
                    } else {
                        throw new JSONException("illegal getter");
                    }
                } else if (name3.startsWith("is")) {
                    String substring3 = name3.substring(2);
                    if (substring3.length() != 0) {
                        str = Character.toLowerCase(substring3.charAt(0)) + substring3.substring(1);
                    } else {
                        throw new JSONException("illegal getter");
                    }
                } else if (name3.startsWith("hashCode")) {
                    return Integer.valueOf(hashCode());
                } else {
                    if (name3.startsWith("toString")) {
                        return toString();
                    }
                    throw new JSONException("illegal getter");
                }
            }
            return C1181d.m2476a(this.map.get(str), method.getGenericReturnType(), C2015l.f3550b);
        } else {
            throw new JSONException("illegal getter");
        }
    }

    public Map<String, Object> getInnerMap() {
        return this.map;
    }
}
