package com.p051jd.framework.json;

import android.util.Log;
import com.p051jd.p052a.C1181d;
import java.io.Serializable;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.framework.json.JDJSONArray */
/* loaded from: classes.dex */
public class JDJSONArray extends JDJSON implements Serializable, Cloneable, List<Object>, RandomAccess {
    protected transient Type componentType;
    private final List<Object> list;
    protected transient Object relatedArray;

    public JDJSONArray() {
        this.list = new ArrayList(10);
    }

    public JDJSONArray(List<Object> list) {
        this.list = list;
    }

    public JDJSONArray(int i) {
        this.list = new ArrayList(i);
    }

    public Object getRelatedArray() {
        return this.relatedArray;
    }

    public void setRelatedArray(Object obj) {
        this.relatedArray = obj;
    }

    public Type getComponentType() {
        return this.componentType;
    }

    public void setComponentType(Type type) {
        this.componentType = type;
    }

    @Override // java.util.List, java.util.Collection
    public int size() {
        return this.list.size();
    }

    @Override // java.util.List, java.util.Collection
    public boolean isEmpty() {
        return this.list.isEmpty();
    }

    @Override // java.util.List, java.util.Collection
    public boolean contains(Object obj) {
        return this.list.contains(obj);
    }

    @Override // java.util.List, java.util.Collection, java.lang.Iterable
    public Iterator<Object> iterator() {
        return this.list.iterator();
    }

    @Override // java.util.List, java.util.Collection
    public Object[] toArray() {
        return this.list.toArray();
    }

    @Override // java.util.List, java.util.Collection
    public <T> T[] toArray(T[] tArr) {
        return (T[]) this.list.toArray(tArr);
    }

    @Override // java.util.List, java.util.Collection
    public boolean add(Object obj) {
        return this.list.add(obj);
    }

    @Override // java.util.List, java.util.Collection
    public boolean remove(Object obj) {
        return this.list.remove(obj);
    }

    @Override // java.util.List, java.util.Collection
    public boolean containsAll(Collection<?> collection) {
        return this.list.containsAll(collection);
    }

    @Override // java.util.List, java.util.Collection
    public boolean addAll(Collection<? extends Object> collection) {
        return this.list.addAll(collection);
    }

    @Override // java.util.List
    public boolean addAll(int i, Collection<? extends Object> collection) {
        return this.list.addAll(i, collection);
    }

    @Override // java.util.List, java.util.Collection
    public boolean removeAll(Collection<?> collection) {
        return this.list.removeAll(collection);
    }

    @Override // java.util.List, java.util.Collection
    public boolean retainAll(Collection<?> collection) {
        return this.list.retainAll(collection);
    }

    @Override // java.util.List, java.util.Collection
    public void clear() {
        this.list.clear();
    }

    @Override // java.util.List
    public Object set(int i, Object obj) {
        return this.list.set(i, obj);
    }

    @Override // java.util.List
    public void add(int i, Object obj) {
        this.list.add(i, obj);
    }

    @Override // java.util.List
    public Object remove(int i) {
        return this.list.remove(i);
    }

    @Override // java.util.List
    public int indexOf(Object obj) {
        return this.list.indexOf(obj);
    }

    @Override // java.util.List
    public int lastIndexOf(Object obj) {
        return this.list.lastIndexOf(obj);
    }

    @Override // java.util.List
    public ListIterator<Object> listIterator() {
        return this.list.listIterator();
    }

    @Override // java.util.List
    public ListIterator<Object> listIterator(int i) {
        return this.list.listIterator(i);
    }

    @Override // java.util.List
    public List<Object> subList(int i, int i2) {
        return this.list.subList(i, i2);
    }

    @Override // java.util.List
    public Object get(int i) {
        return this.list.get(i);
    }

    public JDJSONObject getJSONObject(int i) {
        Object obj = this.list.get(i);
        if (obj instanceof JDJSONObject) {
            return (JDJSONObject) obj;
        }
        return (JDJSONObject) toJSON(obj);
    }

    public JDJSONArray getJSONArray(int i) {
        Object obj = this.list.get(i);
        if (obj instanceof JDJSONArray) {
            return (JDJSONArray) obj;
        }
        return (JDJSONArray) toJSON(obj);
    }

    public <T> T getObject(int i, Class<T> cls) {
        return (T) C1181d.m2479a(this.list.get(i), cls);
    }

    public Boolean getBoolean(int i) {
        Object obj = get(i);
        if (obj == null) {
            return null;
        }
        return C1181d.m2451m(obj);
    }

    public boolean getBooleanValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return false;
        }
        return C1181d.m2451m(obj).booleanValue();
    }

    public Byte getByte(int i) {
        return C1181d.m2468b(get(i));
    }

    public byte getByteValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return 0;
        }
        return C1181d.m2468b(obj).byteValue();
    }

    public Short getShort(int i) {
        return C1181d.m2461d(get(i));
    }

    public short getShortValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return 0;
        }
        return C1181d.m2461d(obj).shortValue();
    }

    public Integer getInteger(int i) {
        return C1181d.m2453k(get(i));
    }

    public int getIntValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return 0;
        }
        return C1181d.m2453k(obj).intValue();
    }

    public Long getLong(int i) {
        return C1181d.m2454j(get(i));
    }

    public long getLongValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return 0;
        }
        return C1181d.m2454j(obj).longValue();
    }

    public Float getFloat(int i) {
        return C1181d.m2457g(get(i));
    }

    public float getFloatValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return 0.0f;
        }
        return C1181d.m2457g(obj).floatValue();
    }

    public Double getDouble(int i) {
        return C1181d.m2456h(get(i));
    }

    public double getDoubleValue(int i) {
        Object obj = get(i);
        if (obj == null) {
            return 0.0d;
        }
        return C1181d.m2456h(obj).doubleValue();
    }

    public BigDecimal getBigDecimal(int i) {
        return C1181d.m2459e(get(i));
    }

    public BigInteger getBigInteger(int i) {
        return C1181d.m2458f(get(i));
    }

    public String getString(int i) {
        return C1181d.m2480a(get(i));
    }

    public Date getDate(int i) {
        return C1181d.m2455i(get(i));
    }

    public boolean optBoolean(int i) {
        return optBoolean(i, false);
    }

    public boolean optBoolean(int i, boolean z) {
        Boolean bool;
        try {
            bool = getBoolean(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse boolean error with index : " + i);
            }
            bool = null;
        }
        return bool != null ? bool.booleanValue() : z;
    }

    public String optString(int i) {
        return optString(i, "");
    }

    public String optString(int i, String str) {
        String str2;
        try {
            str2 = getString(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse String error with index : " + i);
            }
            str2 = null;
        }
        return str2 != null ? str2 : str;
    }

    public int optInt(int i) {
        return optInt(i, 0);
    }

    public int optInt(int i, int i2) {
        Integer num;
        try {
            num = getInteger(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse int error with index : " + i);
            }
            num = null;
        }
        return num != null ? num.intValue() : i2;
    }

    public long optLong(int i) {
        return optLong(i, 0);
    }

    public long optLong(int i, long j) {
        Long l;
        try {
            l = getLong(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse long error with index : " + i);
            }
            l = null;
        }
        return l != null ? l.longValue() : j;
    }

    public double optDouble(int i) {
        return optDouble(i, Double.NaN);
    }

    public double optDouble(int i, double d) {
        Double d2;
        try {
            d2 = getDouble(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse double error with index : " + i);
            }
            d2 = null;
        }
        return d2 != null ? d2.doubleValue() : d;
    }

    public JDJSONObject optJSONObject(int i) {
        JDJSONObject jDJSONObject;
        try {
            jDJSONObject = getJSONObject(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse jsonobject error with index : " + i);
            }
            jDJSONObject = null;
        }
        if (jDJSONObject != null) {
            return jDJSONObject;
        }
        return null;
    }

    public JDJSONArray optJSONArray(int i) {
        JDJSONArray jDJSONArray;
        try {
            jDJSONArray = getJSONArray(i);
        } catch (Exception unused) {
            if (JDJSON.debug) {
                Log.e("jdjson", "parse jsonarray error with index : " + i);
            }
            jDJSONArray = null;
        }
        if (jDJSONArray != null) {
            return jDJSONArray;
        }
        return null;
    }

    public boolean isNull(int i) {
        Object obj = get(i);
        return obj == null || obj == JDJSONObject.NULL;
    }

    @Override // java.lang.Object
    public Object clone() {
        return new JDJSONArray(new ArrayList(this.list));
    }

    @Override // java.lang.Object, java.util.List, java.util.Collection
    public boolean equals(Object obj) {
        return this.list.equals(obj);
    }

    @Override // java.lang.Object, java.util.List, java.util.Collection
    public int hashCode() {
        return this.list.hashCode();
    }
}
