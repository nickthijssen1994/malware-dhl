package com.p051jd.p052a;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Arrays;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.a.c */
/* loaded from: classes.dex */
public class C1180c implements ParameterizedType {

    /* renamed from: a */
    private final Type[] f1907a;

    /* renamed from: b */
    private final Type f1908b;

    /* renamed from: c */
    private final Type f1909c;

    public C1180c(Type[] typeArr, Type type, Type type2) {
        this.f1907a = typeArr;
        this.f1908b = type;
        this.f1909c = type2;
    }

    @Override // java.lang.reflect.ParameterizedType
    public Type[] getActualTypeArguments() {
        return this.f1907a;
    }

    @Override // java.lang.reflect.ParameterizedType
    public Type getOwnerType() {
        return this.f1908b;
    }

    @Override // java.lang.reflect.ParameterizedType
    public Type getRawType() {
        return this.f1909c;
    }

    @Override // java.lang.Object
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        C1180c cVar = (C1180c) obj;
        if (!Arrays.equals(this.f1907a, cVar.f1907a)) {
            return false;
        }
        Type type = this.f1908b;
        if (type == null ? cVar.f1908b != null : !type.equals(cVar.f1908b)) {
            return false;
        }
        Type type2 = this.f1909c;
        if (type2 != null) {
            return type2.equals(cVar.f1909c);
        }
        if (cVar.f1909c == null) {
            return true;
        }
        return false;
    }

    @Override // java.lang.Object
    public int hashCode() {
        Type[] typeArr = this.f1907a;
        int i = 0;
        int hashCode = (typeArr != null ? Arrays.hashCode(typeArr) : 0) * 31;
        Type type = this.f1908b;
        int hashCode2 = (hashCode + (type != null ? type.hashCode() : 0)) * 31;
        Type type2 = this.f1909c;
        if (type2 != null) {
            i = type2.hashCode();
        }
        return hashCode2 + i;
    }
}
