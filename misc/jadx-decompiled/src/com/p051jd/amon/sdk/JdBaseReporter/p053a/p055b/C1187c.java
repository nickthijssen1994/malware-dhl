package com.p051jd.amon.sdk.JdBaseReporter.p053a.p055b;

import android.content.Context;
import android.os.Handler;
import android.text.TextUtils;
import com.jd.amon.sdk.JdBaseReporter.a;
import com.jd.amon.sdk.JdBaseReporter.b.b;
import com.jd.amon.sdk.JdBaseReporter.f.e;
import com.p051jd.amon.sdk.JdBaseReporter.p056b.b$a;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/* renamed from: com.jd.amon.sdk.JdBaseReporter.a.b.c */
/* loaded from: classes.dex */
public class C1187c extends Thread {

    /* renamed from: a */
    private Context f1932a;

    /* renamed from: c */
    private final b f1934c;

    /* renamed from: e */
    private d f1936e;

    /* renamed from: b */
    private BlockingQueue<HashMap<String, String>> f1933b = new LinkedBlockingQueue();

    /* renamed from: d */
    private Deque<HashMap<String, String>> f1935d = new ArrayDeque();

    public C1187c(d dVar, Context context) {
        super("schedule-data-dispatcher");
        this.f1934c = b.a(context);
        this.f1936e = dVar;
        this.f1932a = context;
    }

    /* renamed from: d */
    private void m2434d() {
        int size = this.f1935d.size();
        if (size > 0) {
            ArrayList arrayList = null;
            ArrayList arrayList2 = null;
            ArrayList arrayList3 = null;
            for (int i = 0; i < size; i++) {
                HashMap<String, String> poll = this.f1935d.poll();
                if (poll != null) {
                    String str = poll.get("chId");
                    if (!TextUtils.isEmpty(str)) {
                        b$a a = b$a.m2402a(str);
                        if (a == b$a.CORE) {
                            if (arrayList == null) {
                                arrayList = new ArrayList();
                            }
                            arrayList.add(poll);
                        } else if (a == b$a.MEDIUM) {
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList();
                            }
                            arrayList2.add(poll);
                        } else {
                            if (arrayList3 == null) {
                                arrayList3 = new ArrayList();
                            }
                            arrayList3.add(poll);
                        }
                    }
                }
            }
            if (e.a) {
                StringBuilder sb = new StringBuilder();
                sb.append("批处理数据为：core:");
                sb.append(arrayList == null ? 0 : arrayList.size());
                sb.append(" medium:");
                sb.append(arrayList2 == null ? 0 : arrayList2.size());
                sb.append(" normal:");
                sb.append(arrayList3 == null ? 0 : arrayList3.size());
                sb.append("");
                e.a("ScheduleDataDispatcher", sb.toString());
            }
            this.f1934c.a(new ArrayList[]{arrayList, arrayList2, arrayList3});
            if (!m2435c()) {
                Handler b = this.f1936e.f().m2430b();
                b.removeMessages(1001);
                b.sendEmptyMessageDelayed(1001, a.a().d().d(com.jd.amon.sdk.JdBaseReporter.f.a.a(this.f1932a)) * 1000);
            }
        }
    }

    /* renamed from: a */
    public void m2437a() {
        synchronized (this.f1935d) {
            m2434d();
        }
    }

    /* renamed from: b */
    public BlockingQueue<HashMap<String, String>> m2436b() {
        return this.f1933b;
    }

    /* renamed from: c */
    public boolean m2435c() {
        Handler b = this.f1936e.f().m2430b();
        String a = com.jd.amon.sdk.JdBaseReporter.f.a.a(this.f1932a);
        e.b("当前网络类型：" + a);
        if (!a.a().d().b(a)) {
            return false;
        }
        e.a("数据库中的数据量达到上报值, 上报频率缩短至:10000进行上报");
        b.removeMessages(1001);
        long currentTimeMillis = 10000 - (System.currentTimeMillis() - this.f1936e.g().longValue());
        long j = 0;
        if (currentTimeMillis > 0) {
            j = currentTimeMillis;
        }
        b.sendEmptyMessageDelayed(1001, j);
        return true;
    }

    @Override // java.lang.Thread, java.lang.Runnable
    public void run() {
        while (true) {
            try {
                HashMap<String, String> take = this.f1933b.take();
                e.a("从阻塞队列中取出一条记录");
                synchronized (this.f1935d) {
                    this.f1935d.add(take);
                    e.a("将这条记录保存到dataLoader");
                    if (this.f1935d.size() >= 10) {
                        e.c("临时数据缓存量达到:10开始批量插入数据库");
                        m2434d();
                    }
                }
            } catch (InterruptedException e) {
                a.a().c().a("ScheduleDataDispatcher", "阻塞队列中断", e);
                return;
            }
        }
    }
}
