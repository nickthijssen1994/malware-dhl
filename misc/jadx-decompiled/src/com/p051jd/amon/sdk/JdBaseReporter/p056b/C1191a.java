package com.p051jd.amon.sdk.JdBaseReporter.p056b;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.huawei.hms.actions.SearchIntents;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.jd.amon.sdk.JdBaseReporter.a;
import com.jd.amon.sdk.JdBaseReporter.f.e;
import com.p051jd.amon.sdk.JdBaseReporter.p058e.C1196d;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

/* renamed from: com.jd.amon.sdk.JdBaseReporter.b.a */
/* loaded from: classes.dex */
public class C1191a {

    /* renamed from: a */
    protected String f1946a;

    /* renamed from: b */
    protected Context f1947b;

    /* renamed from: c */
    private long f1948c;

    public C1191a(Context context, String str) {
        this.f1947b = context;
        this.f1946a = str;
    }

    /* renamed from: a */
    private boolean m2415a(long j) {
        return 100000 <= j;
    }

    /* renamed from: f */
    private SQLiteDatabase m2404f() {
        return b.a(this.f1947b).getReadableDatabase();
    }

    /* renamed from: g */
    private SQLiteDatabase m2403g() {
        return b.a(this.f1947b).getWritableDatabase();
    }

    /* JADX WARN: Code restructure failed: missing block: B:17:0x0079, code lost:
        if (r11.isClosed() == false) goto L_0x007b;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public int m2414a(long j, long j2) {
        Exception e;
        Throwable th;
        int delete;
        Cursor cursor;
        Exception e2;
        if (j == -1 && j2 == -1) {
            return -1;
        }
        m2406d();
        int i = 0;
        try {
            String[] strArr = new String[2];
            if (j <= j2) {
                strArr[0] = "" + j;
                strArr[1] = "" + j2;
                i = m2403g().delete(this.f1946a, "id>=? and id<=?", strArr) + 0;
            } else {
                Cursor cursor2 = null;
                r10 = null;
                r10 = null;
                String str = null;
                try {
                    cursor = m2404f().query(this.f1946a, new String[]{"max(id)"}, null, null, null, null, null);
                    try {
                        try {
                            cursor.moveToFirst();
                            str = cursor.getString(0);
                            if (cursor != null) {
                            }
                        } catch (Exception e3) {
                            e2 = e3;
                            e2.printStackTrace();
                            if (cursor != null && !cursor.isClosed()) {
                                cursor.close();
                            }
                            strArr[0] = "" + j;
                            strArr[1] = str;
                            delete = m2403g().delete(this.f1946a, "id>=? and id<=?", strArr) + 0;
                            strArr[0] = "0";
                            strArr[1] = "" + j2;
                            i = m2403g().delete(this.f1946a, "id>=? and id<=?", strArr) + delete;
                            this.f1948c -= (long) i;
                            e.a("数据库批量删除 firstId :" + j + "lastId :" + j2 + "删除总量 :" + i + "删除后数据库量 :" + this.f1948c);
                            return i;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        cursor2 = cursor;
                        if (cursor2 != null && !cursor2.isClosed()) {
                            cursor2.close();
                        }
                        throw th;
                    }
                } catch (Exception e4) {
                    e2 = e4;
                    cursor = null;
                } catch (Throwable th3) {
                    th = th3;
                    if (cursor2 != null) {
                        cursor2.close();
                    }
                    throw th;
                }
                strArr[0] = "" + j;
                strArr[1] = str;
                delete = m2403g().delete(this.f1946a, "id>=? and id<=?", strArr) + 0;
                try {
                    strArr[0] = "0";
                    strArr[1] = "" + j2;
                    i = m2403g().delete(this.f1946a, "id>=? and id<=?", strArr) + delete;
                } catch (Exception e5) {
                    e = e5;
                    i = delete;
                    e.printStackTrace();
                    a.a().c().a("BaseTable", "delete", e);
                    this.f1948c -= (long) i;
                    e.a("数据库批量删除 firstId :" + j + "lastId :" + j2 + "删除总量 :" + i + "删除后数据库量 :" + this.f1948c);
                    return i;
                }
            }
        } catch (Exception e6) {
            e = e6;
        }
        this.f1948c -= (long) i;
        e.a("数据库批量删除 firstId :" + j + "lastId :" + j2 + "删除总量 :" + i + "删除后数据库量 :" + this.f1948c);
        return i;
    }

    /* JADX WARN: Code restructure failed: missing block: B:16:0x0093, code lost:
        if (r0 == false) goto L_0x00cf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x00b1, code lost:
        if (r0 == false) goto L_0x00cf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:27:0x00cd, code lost:
        if (r0 == false) goto L_0x00cf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x00cf, code lost:
        r4.close();
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v21 */
    /* JADX WARN: Type inference failed for: r0v22 */
    /* JADX WARN: Type inference failed for: r4v0, types: [long] */
    /* JADX WARN: Type inference failed for: r4v1, types: [android.database.Cursor] */
    /* JADX WARN: Type inference failed for: r4v5, types: [android.database.Cursor] */
    /* JADX WARN: Type inference failed for: r4v7, types: [android.database.Cursor] */
    /* JADX WARN: Type inference failed for: r4v8 */
    /* JADX WARN: Type inference failed for: r4v9 */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public ArrayList<C1196d> m2411a(Long l) {
        Cursor cursor;
        int i;
        ArrayList<C1196d> arrayList = new ArrayList<>();
        Cursor longValue = l.longValue();
        if (longValue == 0) {
            return arrayList;
        }
        try {
            longValue = null;
            longValue = 0;
            longValue = 0;
            try {
                String[] strArr = {"id", "time", "data", "reserve"};
                if (l.longValue() > 0) {
                    i = 2;
                    longValue = m2404f().query(this.f1946a, strArr, null, null, null, null, "time asc", "" + l);
                } else {
                    i = 2;
                    longValue = m2404f().query(this.f1946a, strArr, null, null, null, null, "time asc");
                }
                longValue.moveToFirst();
                while (!longValue.isAfterLast()) {
                    C1196d dVar = new C1196d();
                    dVar.m2376b(longValue.getString(0));
                    dVar.m2378a(longValue.getString(i));
                    arrayList.add(dVar);
                    longValue.moveToNext();
                }
                if (longValue != 0) {
                    boolean isClosed = longValue.isClosed();
                    cursor = longValue;
                }
            } catch (Exception e) {
                e.printStackTrace();
                a.a().c().a("BaseTable", SearchIntents.EXTRA_QUERY, e);
                if (longValue != null) {
                    boolean isClosed2 = longValue.isClosed();
                    cursor = longValue;
                }
            } catch (StackOverflowError e2) {
                e2.printStackTrace();
                a.a().c().a("BaseTable", SearchIntents.EXTRA_QUERY, e2);
                if (longValue != 0) {
                    boolean isClosed3 = longValue.isClosed();
                    cursor = longValue;
                }
            }
            e.a("需要从数据库读取" + l + "条数据,实际得到数据量为" + arrayList.size());
            return arrayList;
        } catch (Throwable th) {
            if (longValue != 0 && !longValue.isClosed()) {
                longValue.close();
            }
            throw th;
        }
    }

    /* renamed from: a */
    public void m2416a() {
    }

    /* renamed from: a */
    public void m2413a(SQLiteDatabase sQLiteDatabase) {
        sQLiteDatabase.execSQL("CREATE TABLE " + this.f1946a + " (id INTEGER PRIMARY KEY, time TEXT, data TEXT, reserve TEXT);");
        StringBuilder sb = new StringBuilder();
        sb.append("create index if not exists timeindex on ");
        sb.append(this.f1946a);
        sb.append("(");
        sb.append("time");
        sb.append(")");
        sQLiteDatabase.execSQL(sb.toString());
    }

    /* renamed from: a */
    public void m2412a(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        sQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + this.f1946a);
        m2413a(sQLiteDatabase);
    }

    /* renamed from: a */
    public void m2410a(List<String> list) {
        if (!m2415a(m2406d()) && list != null && list.size() > 0) {
            try {
                SQLiteDatabase g = m2403g();
                SQLiteStatement compileStatement = g.compileStatement("insert into " + this.f1946a + "(time,data,reserve)values(?,?,?)");
                g.beginTransaction();
                int i = 0;
                for (String str : list) {
                    compileStatement.bindString(1, String.valueOf(System.currentTimeMillis()));
                    compileStatement.bindString(2, str);
                    compileStatement.bindString(3, PushSelfShowConstant.ACTION_APP_OUT_OF_DATE_EVENT_ID);
                    if (compileStatement.executeInsert() != -1) {
                        i++;
                    }
                }
                g.setTransactionSuccessful();
                g.endTransaction();
                this.f1948c += (long) i;
                e.a("批量插入数据成功,总量:" + list.size() + "成功量:" + i);
            } catch (Exception e) {
                e.d("批量插入数据失败");
                e.printStackTrace();
                a.a().c().a("BaseTable", "put", e);
            }
        }
    }

    /* renamed from: a */
    public void m2409a(List<HashMap<String, String>> list, String str) {
        if (!m2415a(m2406d()) && list != null && list.size() > 0) {
            try {
                SQLiteDatabase g = m2403g();
                SQLiteStatement compileStatement = g.compileStatement("insert into " + this.f1946a + "(time,data,reserve)values(?,?,?)");
                g.beginTransaction();
                int i = 0;
                for (HashMap<String, String> hashMap : list) {
                    compileStatement.bindString(1, String.valueOf(System.currentTimeMillis()));
                    compileStatement.bindString(2, com.jd.amon.sdk.JdBaseReporter.a.a.a(hashMap));
                    compileStatement.bindString(3, str);
                    if (compileStatement.executeInsert() != -1) {
                        i++;
                    }
                }
                g.setTransactionSuccessful();
                g.endTransaction();
                this.f1948c += (long) i;
                e.a("批量插入数据成功,总量:" + list.size() + "成功量:" + i);
            } catch (Exception e) {
                e.d("批量插入数据失败");
                e.printStackTrace();
                a.a().c().a("BaseTable", "putHashMap", e);
            }
        }
    }

    /* renamed from: b */
    public String m2408b() {
        return this.f1946a;
    }

    /* JADX WARN: Code restructure failed: missing block: B:13:0x005d, code lost:
        if (r1.isClosed() == false) goto L_0x003e;
     */
    /* renamed from: c */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public long m2407c() {
        Cursor cursor;
        try {
            cursor = null;
            long j = 0;
            try {
                cursor = m2404f().query(this.f1946a, new String[]{"count(*)"}, null, null, null, null, null);
                cursor.moveToFirst();
                j = (long) cursor.getInt(0);
                e.a("数据库数据量实时查询 结果为：" + j);
            } catch (Exception e) {
                e.printStackTrace();
                a.a().c().a("BaseTable", "querySize", e);
                if (cursor != null) {
                }
            }
            return j;
        } finally {
            if (cursor != null && !cursor.isClosed()) {
                cursor.close();
            }
        }
    }

    /* renamed from: d */
    public long m2406d() {
        if (this.f1948c <= 0) {
            this.f1948c = m2407c();
        }
        return this.f1948c;
    }

    /* renamed from: e */
    public void m2405e() {
        if (m2406d() > 0) {
            Calendar instance = Calendar.getInstance();
            instance.set(instance.get(1), instance.get(2), instance.get(5), 0, 0, 0);
            long timeInMillis = instance.getTimeInMillis();
            if (e.a) {
                e.a("BaseTable", this.f1946a + " ---> before clean obsolete size is " + this.f1948c);
            }
            String str = "DELETE FROM " + this.f1946a + " WHERE CAST(time AS LONG) < " + timeInMillis;
            try {
                try {
                    m2403g().beginTransaction();
                    m2403g().execSQL(str);
                    m2403g().setTransactionSuccessful();
                } catch (Exception e) {
                    e.printStackTrace();
                    a.a().c().a("BaseTable", "removeObsoleteData", e);
                }
                this.f1948c = m2407c();
                if (e.a) {
                    e.a("BaseTable", this.f1946a + " ---> after clean obsolete size is " + this.f1948c);
                }
            } finally {
                m2403g().endTransaction();
            }
        } else if (e.a) {
            e.a("BaseTable", this.f1946a + " --->  mCurrentSize <= 0 return ");
        }
    }
}
