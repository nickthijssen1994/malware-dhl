package com.p051jd.feedback.p074b;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Build;
import android.util.Base64;
import android.util.Log;
import androidx.annotation.RequiresApi;
import com.facebook.imagepipeline.common.RotationOptions;
import com.p051jd.feedback.FeedbackSDK;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.feedback.b.b */
/* loaded from: classes.dex */
public final class C1420b {
    /* renamed from: a */
    public static boolean m1990a() {
        try {
            if (!new File("/system/bin/su").exists()) {
                if (!new File("/system/xbin/su").exists()) {
                    return false;
                }
            }
            return true;
        } catch (Exception unused) {
            return false;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:66:0x00e8 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x00e1 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x00ef A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static Bitmap m1988a(Uri uri) {
        Exception e;
        InputStream inputStream;
        InputStream inputStream2;
        InputStream inputStream3;
        int round;
        if (uri != null) {
            InputStream inputStream4 = null;
            try {
                inputStream3 = FeedbackSDK.getContext().getContentResolver().openInputStream(uri);
                try {
                    if (inputStream3 != null) {
                        BitmapFactory.Options options = new BitmapFactory.Options();
                        int i = 1;
                        options.inJustDecodeBounds = true;
                        BitmapFactory.decodeStream(inputStream3, null, options);
                        int i2 = options.outHeight;
                        int i3 = options.outWidth;
                        if ((i2 > 800 || i3 > 480) && (i = Math.round(((float) i2) / 800.0f)) >= (round = Math.round(((float) i3) / 480.0f))) {
                            i = round;
                        }
                        options.inSampleSize = i;
                        int i4 = 0;
                        options.inJustDecodeBounds = false;
                        inputStream = FeedbackSDK.getContext().getContentResolver().openInputStream(uri);
                        try {
                            Bitmap decodeStream = BitmapFactory.decodeStream(inputStream, null, options);
                            Log.d("FeedbackSdk.AppUtils", "smallBmp: ".concat(String.valueOf(decodeStream)));
                            if (decodeStream != null) {
                                if (Build.VERSION.SDK_INT >= 24) {
                                    inputStream4 = FeedbackSDK.getContext().getContentResolver().openInputStream(uri);
                                    i4 = m1987a(inputStream4);
                                } else {
                                    String a = C1425g.m1976a(FeedbackSDK.getContext(), uri);
                                    if (a != null) {
                                        i4 = m1986a(a);
                                    }
                                }
                                if (i4 != 0) {
                                    Matrix matrix = new Matrix();
                                    matrix.setRotate((float) i4);
                                    decodeStream = Bitmap.createBitmap(decodeStream, 0, 0, decodeStream.getWidth(), decodeStream.getHeight(), matrix, true);
                                }
                            }
                            if (inputStream3 != null) {
                                try {
                                    inputStream3.close();
                                } catch (Exception unused) {
                                }
                            }
                            if (inputStream != null) {
                                try {
                                    inputStream.close();
                                } catch (Exception unused2) {
                                }
                            }
                            if (inputStream4 != null) {
                                try {
                                    inputStream4.close();
                                } catch (Exception unused3) {
                                }
                            }
                            return decodeStream;
                        } catch (Exception e2) {
                            e = e2;
                            inputStream2 = inputStream4;
                            inputStream4 = inputStream3;
                            try {
                                Log.w("Feedback", "read image failed");
                                throw e;
                            } catch (Throwable th) {
                                th = th;
                                inputStream3 = inputStream4;
                                inputStream4 = inputStream2;
                                if (inputStream3 != null) {
                                    try {
                                        inputStream3.close();
                                    } catch (Exception unused4) {
                                    }
                                }
                                if (inputStream != null) {
                                    try {
                                        inputStream.close();
                                    } catch (Exception unused5) {
                                    }
                                }
                                if (inputStream4 != null) {
                                    try {
                                        inputStream4.close();
                                    } catch (Exception unused6) {
                                    }
                                }
                                throw th;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            if (inputStream3 != null) {
                            }
                            if (inputStream != null) {
                            }
                            if (inputStream4 != null) {
                            }
                            throw th;
                        }
                    } else {
                        throw new IllegalStateException("get InputStream from imageUri failed");
                    }
                } catch (Exception e3) {
                    e = e3;
                    inputStream = null;
                    inputStream4 = inputStream3;
                    inputStream2 = null;
                } catch (Throwable th3) {
                    th = th3;
                    inputStream = null;
                }
            } catch (Exception e4) {
                e = e4;
                inputStream2 = null;
                inputStream = null;
            } catch (Throwable th4) {
                th = th4;
                inputStream3 = null;
                inputStream = null;
            }
        } else {
            throw new IllegalArgumentException("imageUri is null");
        }
    }

    /* renamed from: a */
    public static String m1989a(Bitmap bitmap) {
        if (bitmap != null) {
            long currentTimeMillis = System.currentTimeMillis();
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            int i = 100;
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);
            while (byteArrayOutputStream.toByteArray().length / 1024 > 2000) {
                byteArrayOutputStream.reset();
                i -= 15;
                if (i <= 0) {
                    break;
                }
                bitmap.compress(Bitmap.CompressFormat.JPEG, i, byteArrayOutputStream);
            }
            String str = new String(Base64.encode(byteArrayOutputStream.toByteArray(), 0));
            Log.i("Feedback", "compressAndEncode:  cost" + ((System.currentTimeMillis() - currentTimeMillis) / 1000));
            return str;
        }
        throw new IllegalArgumentException("imageBitmap is null");
    }

    /* renamed from: a */
    private static int m1986a(String str) {
        try {
            int attributeInt = new ExifInterface(str).getAttributeInt("Orientation", 1);
            if (attributeInt == 3) {
                return 180;
            }
            if (attributeInt == 6) {
                return 90;
            }
            if (attributeInt != 8) {
                return 0;
            }
            return RotationOptions.ROTATE_270;
        } catch (IOException unused) {
            return 0;
        }
    }

    @RequiresApi(api = 24)
    /* renamed from: a */
    private static int m1987a(InputStream inputStream) {
        try {
            int attributeInt = new ExifInterface(inputStream).getAttributeInt("Orientation", 1);
            if (attributeInt == 3) {
                return 180;
            }
            if (attributeInt == 6) {
                return 90;
            }
            if (attributeInt != 8) {
                return 0;
            }
            return RotationOptions.ROTATE_270;
        } catch (IOException unused) {
            return 0;
        }
    }
}
