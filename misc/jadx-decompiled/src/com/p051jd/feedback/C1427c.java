package com.p051jd.feedback;

import android.net.Uri;
import android.os.Process;
import android.util.Log;
import android.util.LruCache;
import com.jingdong.common.utils.Configuration;
import com.p051jd.feedback.network.C1432a;
import com.p051jd.feedback.network.result.FeedbackRequestResult;
import com.p051jd.feedback.p074b.C1420b;
import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.functions.Function;
import io.reactivex.schedulers.Schedulers;
import java.util.List;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.feedback.c */
/* loaded from: classes.dex */
public final class C1427c {

    /* renamed from: a */
    private static LruCache<String, String> f2565a = new LruCache<>(5);

    /* renamed from: a */
    public static Observable<String> m1972a(List<Uri> list) {
        return m1969a(false, list, (String) null);
    }

    /* renamed from: a */
    public static Observable<String> m1971a(List<Uri> list, String str) {
        return m1969a(true, list, str);
    }

    /* renamed from: a */
    private static Observable<String> m1969a(final boolean z, List<Uri> list, final String str) {
        return Observable.fromIterable(list).flatMap(new Function<Uri, ObservableSource<String>>() { // from class: com.jd.feedback.c.1
            public final /* synthetic */ Object apply(Object obj) {
                return C1427c.m1970a(z, (Uri) obj, str).subscribeOn(Schedulers.computation());
            }
        });
    }

    /* renamed from: a */
    static /* synthetic */ Observable m1970a(final boolean z, Uri uri, final String str) {
        return Observable.just(uri).subscribeOn(Schedulers.computation()).map(new Function<Uri, String>() { // from class: com.jd.feedback.c.4
            public final /* synthetic */ Object apply(Object obj) {
                return m1968a((Uri) obj);
            }

            /* renamed from: a */
            private static String m1968a(Uri uri2) {
                Log.i("ImageProccessor", "图片压缩编码 at thread " + Process.myTid());
                try {
                    return C1420b.m1989a(C1420b.m1988a(uri2));
                } catch (Exception e) {
                    Log.w("ImageProccessor", "读取图片失败: " + e.getMessage());
                    throw e;
                }
            }
        }).flatMap(new Function<String, ObservableSource<FeedbackRequestResult>>() { // from class: com.jd.feedback.c.3
            public final /* synthetic */ Object apply(Object obj) {
                String str2 = (String) obj;
                if (z) {
                    String str3 = str;
                    C1432a.m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey", "userId");
                    return C1432a.m1955a(true, str2, str3);
                }
                C1432a.m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey");
                return C1432a.m1955a(false, str2, (String) null);
            }
        }).map(new Function<FeedbackRequestResult, String>() { // from class: com.jd.feedback.c.2
            public final /* synthetic */ Object apply(Object obj) {
                FeedbackRequestResult feedbackRequestResult = (FeedbackRequestResult) obj;
                if (feedbackRequestResult.getState().equals("200")) {
                    Log.i("TAG", "image upload success :" + feedbackRequestResult.getMessage());
                } else {
                    Log.w("TAG", "image upload fail :" + feedbackRequestResult.getMessage());
                }
                return feedbackRequestResult.getImageUrl();
            }
        });
    }
}
