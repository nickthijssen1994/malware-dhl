package com.p051jd.feedback;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.util.Log;
import android.widget.ImageView;
import androidx.annotation.Nullable;
import androidx.lifecycle.LifecycleOwner;
import com.google.gson.Gson;
import com.p051jd.android.sdk.coreinfo.C1203a;
import com.p051jd.feedback.album.AbstractC1375f;
import com.p051jd.feedback.album.C1363b;
import com.p051jd.feedback.album.C1367c;
import com.p051jd.feedback.album.C1371d;
import com.p051jd.feedback.network.C1432a;
import com.p051jd.feedback.network.result.FeedbackRequestResult;
import com.p051jd.feedback.network.result.MessageRequestResult;
import com.p051jd.feedback.network.result.StatisticsRequestResult;
import com.p051jd.feedback.p074b.C1420b;
import com.p051jd.feedback.p074b.C1425g;
import com.p051jd.feedback.p074b.C1426h;
import com.uber.autodispose.a;
import com.uber.autodispose.l;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.schedulers.Schedulers;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.feedback.FeedbackSDK */
/* loaded from: classes.dex */
public class FeedbackSDK {
    public static final String INTENT_KEY_IMAGES2ADD;
    private static final String SDK_VERSION;
    public static final String TAG;
    private static C1284a sConfig;
    private static Context sContext;
    private static ImageLoader sImageLoader = ImageLoader.DEFAULT;
    private static boolean isTest = false;
    private static boolean initialized = false;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.feedback.FeedbackSDK$FeedbackRequestListener */
    /* loaded from: classes.dex */
    public interface FeedbackRequestListener {
        void onFailure(Throwable th);

        void onSuccess(String str);
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.feedback.FeedbackSDK$ImageLoader */
    /* loaded from: classes.dex */
    public interface ImageLoader {
        public static final ImageLoader DEFAULT = new ImageLoader() { // from class: com.jd.feedback.FeedbackSDK.ImageLoader.1
            @Override // com.p051jd.feedback.FeedbackSDK.ImageLoader
            public final void load(ImageView imageView, Uri uri, Drawable drawable, Drawable drawable2, String str) {
            }
        };
        public static final String OPTION_CENTER_CROP;
        public static final String OPTION_FIT_CENTER;

        void load(ImageView imageView, Uri uri, Drawable drawable, Drawable drawable2, String str);
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.feedback.FeedbackSDK$PullConfigListener */
    /* loaded from: classes.dex */
    public interface PullConfigListener extends FeedbackRequestListener {
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.feedback.FeedbackSDK$UploadFeedbackListener */
    /* loaded from: classes.dex */
    public interface UploadFeedbackListener extends FeedbackRequestListener {
    }

    public static String getClient() {
        return "android";
    }

    @Deprecated
    public static String getNetworkCode() {
        return "";
    }

    public static String getSdkVersion() {
        return SDK_VERSION;
    }

    public static ImageLoader getImageLoader() {
        return sImageLoader;
    }

    public static void init(Context context, ImageLoader imageLoader) {
        if (initialized) {
            Log.i(TAG, "FeedbackSDK has been initialized!");
        } else if (context != null) {
            if (context.getApplicationContext() == null) {
                sContext = context;
            } else {
                sContext = context.getApplicationContext();
            }
            if (imageLoader != null) {
                sImageLoader = imageLoader;
            }
            checkMateData(sContext);
            sConfig = new C1284a((byte) 0);
            C1292a.m2230a(sContext);
            C1367c.C1368a a = C1367c.m2102a();
            a.f2457a = new AbstractC1375f() { // from class: com.jd.feedback.FeedbackSDK.1
                @Override // com.p051jd.feedback.album.AbstractC1375f
                /* renamed from: a */
                public final void mo2078a(ImageView imageView, C1371d dVar) {
                    ImageLoader imageLoader2 = FeedbackSDK.sImageLoader;
                    imageLoader2.load(imageView, Uri.parse("content://media/external/images/media/" + dVar.f2459a), FeedbackSDK.sContext.getResources().getDrawable(C1287R.C1289drawable.placeholder), FeedbackSDK.sContext.getResources().getDrawable(C1287R.C1289drawable.placeholder), ImageLoader.OPTION_CENTER_CROP);
                }

                @Override // com.p051jd.feedback.album.AbstractC1375f
                /* renamed from: a */
                public final void mo2077a(ImageView imageView, String str) {
                    Uri a2 = C1425g.m1975a(FeedbackSDK.getContext(), str);
                    Log.d(FeedbackSDK.TAG, "image uri: " + a2.toString());
                    if (a2 == null) {
                        Log.w(FeedbackSDK.TAG, "image uri is null");
                    } else {
                        FeedbackSDK.sImageLoader.load(imageView, a2, FeedbackSDK.sContext.getResources().getDrawable(C1287R.C1289drawable.placeholder), FeedbackSDK.sContext.getResources().getDrawable(C1287R.C1289drawable.placeholder), ImageLoader.OPTION_CENTER_CROP);
                    }
                }
            };
            C1367c a2 = a.m2101a();
            if (C1363b.f2452a == null) {
                C1363b.f2452a = a2;
            } else {
                Log.w("Album", new IllegalStateException("Illegal operation, only allowed to configure once."));
            }
            initialized = true;
        } else {
            throw new IllegalStateException("Failed to initial FeedbackSDK as context is null");
        }
    }

    private static void checkMateData(Context context) {
        try {
            ApplicationInfo applicationInfo = context.getApplicationContext().getPackageManager().getApplicationInfo(context.getPackageName(), 128);
            if (applicationInfo != null && applicationInfo.metaData != null) {
                isTest = applicationInfo.metaData.getBoolean("feedbackSdk-isTest", false);
            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static boolean isTest() {
        return isTest;
    }

    public static Context getContext() {
        checkFeedbackSDKState();
        return sContext;
    }

    private static C1284a getConfig() {
        checkFeedbackSDKState();
        return sConfig;
    }

    private static void checkFeedbackSDKState() {
        if (sContext == null) {
            throw new IllegalStateException("FeedbackSDK is uninitialized");
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.feedback.FeedbackSDK$a */
    /* loaded from: classes.dex */
    static class C1284a {

        /* renamed from: a */
        String f2171a;

        /* renamed from: b */
        String f2172b;

        /* renamed from: c */
        byte[] f2173c;

        /* renamed from: d */
        String f2174d;

        /* renamed from: e */
        String f2175e;

        /* renamed from: f */
        String f2176f;

        /* renamed from: g */
        String f2177g;

        /* renamed from: h */
        String f2178h;

        /* renamed from: i */
        String f2179i;

        /* renamed from: j */
        String f2180j;

        /* renamed from: k */
        String f2181k;

        /* renamed from: l */
        String f2182l;

        /* renamed from: m */
        String f2183m;

        /* renamed from: n */
        String f2184n;

        /* renamed from: o */
        String f2185o;

        /* synthetic */ C1284a(byte b) {
            this();
        }

        private C1284a() {
            this.f2171a = "48c1055755f6421cb03046f6362fca35";
            this.f2173c = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            this.f2174d = "open-feedback-app";
            this.f2175e = "";
            this.f2184n = "Android";
        }
    }

    public static String getHostSecretKey() {
        return getConfig().f2171a;
    }

    public static String getSecretKey() {
        return getConfig().f2172b;
    }

    public static byte[] getAesIV() {
        return getConfig().f2173c;
    }

    public static String getAppId() {
        return getConfig().f2174d;
    }

    public static String getTime() {
        return String.valueOf(System.currentTimeMillis());
    }

    public static String getClientVersion() {
        return getConfig().f2175e;
    }

    public static String getBuild() {
        return getConfig().f2176f;
    }

    public static String getUuid() {
        return getConfig().f2177g;
    }

    public static String getOsVersion() {
        return String.valueOf(Build.VERSION.RELEASE);
    }

    public static String getNetworkType() {
        return C1203a.b.m(getContext());
    }

    public static String getPartner() {
        return getConfig().f2178h;
    }

    public static String getScreen() {
        Context context = getContext();
        float f = context.getResources().getDisplayMetrics().scaledDensity;
        float f2 = context.getResources().getDisplayMetrics().density;
        float f3 = context.getResources().getDisplayMetrics().xdpi;
        float f4 = context.getResources().getDisplayMetrics().ydpi;
        float f5 = ((float) context.getResources().getDisplayMetrics().widthPixels) / f3;
        return (f5 * f5) + "x" + ((((float) context.getResources().getDisplayMetrics().heightPixels) / f4) * f5);
    }

    public static String getBrand() {
        return Build.BRAND;
    }

    public static String getModel() {
        return Build.MODEL;
    }

    public static String getAppKey() {
        return getConfig().f2179i;
    }

    public static String getPackageName() {
        return getConfig().f2180j;
    }

    public static boolean getIsJailbroken() {
        getContext();
        return C1420b.m1990a();
    }

    public static String getResolution() {
        return C1203a.b.h(getContext());
    }

    public static String getNetworkName() {
        Context context = getContext();
        String str = "";
        if (C1426h.m1973a("android.permission.READ_PHONE_STATE")) {
            str = C1203a.b.c(context);
        }
        if (str.startsWith("46000") || str.startsWith("46002") || str.startsWith("46004") || str.startsWith("46007") || str.startsWith("46008")) {
            return "中国移动";
        }
        if (str.startsWith("46001") || str.startsWith("46006") || str.startsWith("46009")) {
            return "中国联通";
        }
        return (str.startsWith("46003") || str.startsWith("46005") || str.startsWith("46011")) ? "中国电信" : "未知";
    }

    public static String getUserId() {
        return getConfig().f2181k;
    }

    public static String getUserName() {
        return getConfig().f2182l;
    }

    public static String getUserPhoneNumber() {
        return getConfig().f2183m;
    }

    public static String getSource() {
        return getConfig().f2184n;
    }

    public static String getExt() {
        return getConfig().f2185o;
    }

    public static void setExt(String str) {
        getConfig().f2185o = str;
    }

    public static void setClientVersion(String str) {
        getConfig().f2175e = str;
    }

    public static void setUserPhoneNumber(String str) {
        getConfig().f2183m = str;
    }

    public static void setBuild(String str) {
        getConfig().f2176f = str;
    }

    public static void setUuid(String str) {
        getConfig().f2177g = str;
    }

    public static void setPartner(String str) {
        getConfig().f2178h = str;
    }

    public static void setAppKey(String str) {
        getConfig().f2179i = str;
    }

    public static void setUserId(String str) {
        getConfig().f2181k = str;
    }

    public static void setUserName(String str) {
        getConfig().f2182l = str;
    }

    public static void setSecret(String str) {
        getConfig().f2172b = str;
    }

    public static void setPackageName(String str) {
        getConfig().f2180j = str;
    }

    public static void setSource(String str) {
        getConfig().f2184n = str;
    }

    public static void api_pullconfig(LifecycleOwner lifecycleOwner, final PullConfigListener pullConfigListener) {
        checkFeedbackSDKState();
        ((l) C1292a.m2231a().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(a.a(com.uber.autodispose.android.lifecycle.a.a(lifecycleOwner)))).a(new Observer<String>() { // from class: com.jd.feedback.FeedbackSDK.12
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                String str = (String) obj;
                PullConfigListener pullConfigListener2 = pullConfigListener;
                if (pullConfigListener2 != null) {
                    pullConfigListener2.onSuccess(str);
                }
            }

            public final void onError(Throwable th) {
                PullConfigListener pullConfigListener2 = pullConfigListener;
                if (pullConfigListener2 != null) {
                    pullConfigListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "拉取配置失败: " + th.getMessage(), th);
            }
        });
    }

    public static void api_pullconfig(final PullConfigListener pullConfigListener) {
        checkFeedbackSDKState();
        C1292a.m2231a().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<String>() { // from class: com.jd.feedback.FeedbackSDK.15
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                String str = (String) obj;
                PullConfigListener pullConfigListener2 = pullConfigListener;
                if (pullConfigListener2 != null) {
                    pullConfigListener2.onSuccess(str);
                }
            }

            public final void onError(Throwable th) {
                PullConfigListener pullConfigListener2 = pullConfigListener;
                if (pullConfigListener2 != null) {
                    pullConfigListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "拉取配置失败: " + th.getMessage(), th);
            }
        });
    }

    public static void api_uploadFeedback(final String str, final String str2, final String str3, List list, final UploadFeedbackListener uploadFeedbackListener) {
        checkFeedbackSDKState();
        final ArrayList<Uri> a = C1425g.m1974a(list, false);
        C1427c.m1972a(a).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer<List<String>>() { // from class: com.jd.feedback.FeedbackSDK.18
            public final /* synthetic */ void accept(Object obj) {
                if (((List) obj).size() < a.size()) {
                    throw new Exception("部分图片上传失败");
                }
            }
        }).flatMapObservable(new Function<List<String>, ObservableSource<FeedbackRequestResult>>() { // from class: com.jd.feedback.FeedbackSDK.17
            public final /* synthetic */ Object apply(Object obj) {
                return C1432a.m1961a(str, str2, str3, (List) obj);
            }
        }).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<FeedbackRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.16
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                FeedbackRequestResult feedbackRequestResult = (FeedbackRequestResult) obj;
                UploadFeedbackListener uploadFeedbackListener2 = uploadFeedbackListener;
                if (uploadFeedbackListener2 != null) {
                    uploadFeedbackListener2.onSuccess(new Gson().toJson(feedbackRequestResult));
                }
            }

            public final void onError(Throwable th) {
                UploadFeedbackListener uploadFeedbackListener2 = uploadFeedbackListener;
                if (uploadFeedbackListener2 != null) {
                    uploadFeedbackListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "上传反馈失败: " + th.getMessage(), th);
            }
        });
    }

    public static void api_uploadFeedback(LifecycleOwner lifecycleOwner, final String str, final String str2, final String str3, List list, final UploadFeedbackListener uploadFeedbackListener) {
        checkFeedbackSDKState();
        final ArrayList<Uri> a = C1425g.m1974a(list, false);
        ((l) C1427c.m1972a(a).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer<List<String>>() { // from class: com.jd.feedback.FeedbackSDK.21
            public final /* synthetic */ void accept(Object obj) {
                if (((List) obj).size() < a.size()) {
                    throw new Exception("部分图片上传失败");
                }
            }
        }).flatMapObservable(new Function<List<String>, ObservableSource<FeedbackRequestResult>>() { // from class: com.jd.feedback.FeedbackSDK.20
            public final /* synthetic */ Object apply(Object obj) {
                return C1432a.m1961a(str, str2, str3, (List) obj);
            }
        }).observeOn(AndroidSchedulers.mainThread()).as(a.a(com.uber.autodispose.android.lifecycle.a.a(lifecycleOwner)))).a(new Observer<FeedbackRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.19
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                FeedbackRequestResult feedbackRequestResult = (FeedbackRequestResult) obj;
                UploadFeedbackListener uploadFeedbackListener2 = uploadFeedbackListener;
                if (uploadFeedbackListener2 != null) {
                    uploadFeedbackListener2.onSuccess(new Gson().toJson(feedbackRequestResult));
                }
            }

            public final void onError(Throwable th) {
                UploadFeedbackListener uploadFeedbackListener2 = uploadFeedbackListener;
                if (uploadFeedbackListener2 != null) {
                    uploadFeedbackListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "上传反馈失败： " + th.getMessage(), th);
            }
        });
    }

    public static void api_uploadReply(final String str, List list, final String str2, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        final ArrayList<Uri> a = C1425g.m1974a(list, false);
        C1427c.m1971a(a, str2).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer<List<String>>() { // from class: com.jd.feedback.FeedbackSDK.4
            public final /* synthetic */ void accept(Object obj) {
                if (((List) obj).size() < a.size()) {
                    throw new Exception("部分图片上传失败");
                }
            }
        }).flatMapObservable(new Function<List<String>, ObservableSource<FeedbackRequestResult>>() { // from class: com.jd.feedback.FeedbackSDK.3
            public final /* synthetic */ Object apply(Object obj) {
                return C1432a.m1960a(str, (List) obj, str2);
            }
        }).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<FeedbackRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.2
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                FeedbackRequestResult feedbackRequestResult = (FeedbackRequestResult) obj;
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onSuccess(new Gson().toJson(feedbackRequestResult));
                }
            }

            public final void onError(Throwable th) {
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "回复上报失败： " + th.getMessage(), th);
            }
        });
    }

    public static void api_uploadReply(LifecycleOwner lifecycleOwner, final String str, List list, final String str2, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        final ArrayList<Uri> a = C1425g.m1974a(list, false);
        ((l) C1427c.m1971a(a, str2).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer<List<String>>() { // from class: com.jd.feedback.FeedbackSDK.7
            public final /* synthetic */ void accept(Object obj) {
                if (((List) obj).size() < a.size()) {
                    throw new Exception("部分图片上传失败");
                }
            }
        }).flatMapObservable(new Function<List<String>, ObservableSource<FeedbackRequestResult>>() { // from class: com.jd.feedback.FeedbackSDK.6
            public final /* synthetic */ Object apply(Object obj) {
                return C1432a.m1960a(str, (List) obj, str2);
            }
        }).observeOn(AndroidSchedulers.mainThread()).as(a.a(com.uber.autodispose.android.lifecycle.a.a(lifecycleOwner)))).a(new Observer<FeedbackRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.5
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                FeedbackRequestResult feedbackRequestResult = (FeedbackRequestResult) obj;
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onSuccess(new Gson().toJson(feedbackRequestResult));
                }
            }

            public final void onError(Throwable th) {
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "回复上报失败： " + th.getMessage(), th);
            }
        });
    }

    public static void api_getFeedbackStatistics(final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        C1432a.m1964a().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<StatisticsRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.8
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                StatisticsRequestResult statisticsRequestResult = (StatisticsRequestResult) obj;
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onSuccess(new Gson().toJson(statisticsRequestResult));
                }
            }

            public final void onError(Throwable th) {
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "获取未读消息失败: " + th.getMessage(), th);
            }
        });
    }

    public static void api_getFeedbackStatistics(LifecycleOwner lifecycleOwner, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        ((l) C1432a.m1964a().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(a.a(com.uber.autodispose.android.lifecycle.a.a(lifecycleOwner)))).a(new Observer<StatisticsRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.9
            public final void onComplete() {
            }

            public final void onSubscribe(Disposable disposable) {
            }

            public final /* synthetic */ void onNext(Object obj) {
                StatisticsRequestResult statisticsRequestResult = (StatisticsRequestResult) obj;
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onSuccess(new Gson().toJson(statisticsRequestResult));
                }
            }

            public final void onError(Throwable th) {
                FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                if (feedbackRequestListener2 != null) {
                    feedbackRequestListener2.onFailure(th);
                }
                Log.e(FeedbackSDK.TAG, "获取未读消息失败: " + th.getMessage(), th);
            }
        });
    }

    public static void api_getFeedbackHistories(LifecycleOwner lifecycleOwner, String str, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        if (str == null || Pattern.compile("^\\d+$").matcher(str).matches()) {
            ((l) C1432a.m1963a(str).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(a.a(com.uber.autodispose.android.lifecycle.a.a(lifecycleOwner)))).a(new Observer<MessageRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.10
                public final void onComplete() {
                }

                public final void onSubscribe(Disposable disposable) {
                }

                public final /* synthetic */ void onNext(Object obj) {
                    MessageRequestResult messageRequestResult = (MessageRequestResult) obj;
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onSuccess(new Gson().toJson(messageRequestResult));
                    }
                }

                public final void onError(Throwable th) {
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onFailure(th);
                    }
                    Log.e(FeedbackSDK.TAG, "获取历史反馈失败: " + th.getMessage(), th);
                }
            });
        }
    }

    public static void api_getFeedbackHistories(String str, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        if (str == null || Pattern.compile("^\\d+$").matcher(str).matches()) {
            C1432a.m1963a(str).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<MessageRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.11
                public final void onComplete() {
                }

                public final void onSubscribe(Disposable disposable) {
                }

                public final /* synthetic */ void onNext(Object obj) {
                    MessageRequestResult messageRequestResult = (MessageRequestResult) obj;
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onSuccess(new Gson().toJson(messageRequestResult));
                    }
                }

                public final void onError(Throwable th) {
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onFailure(th);
                    }
                    Log.e(FeedbackSDK.TAG, "获取历史反馈失败: " + th.getMessage(), th);
                }
            });
        }
    }

    public static void api_getReplyInformation(LifecycleOwner lifecycleOwner, String str, String str2, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        if (str == null || Pattern.compile("^\\d+$").matcher(str).matches()) {
            ((l) C1432a.m1962a(str, str2).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(a.a(com.uber.autodispose.android.lifecycle.a.a(lifecycleOwner)))).a(new Observer<MessageRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.13
                public final void onComplete() {
                }

                public final void onSubscribe(Disposable disposable) {
                }

                public final /* synthetic */ void onNext(Object obj) {
                    MessageRequestResult messageRequestResult = (MessageRequestResult) obj;
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onSuccess(new Gson().toJson(messageRequestResult));
                    }
                }

                public final void onError(Throwable th) {
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onFailure(th);
                    }
                    Log.e(FeedbackSDK.TAG, "获取回复列表失败: " + th.getMessage(), th);
                }
            });
        }
    }

    public static void api_getReplyInformation(String str, String str2, final FeedbackRequestListener feedbackRequestListener) {
        checkFeedbackSDKState();
        if (str == null || Pattern.compile("^\\d+$").matcher(str).matches()) {
            C1432a.m1962a(str, str2).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<MessageRequestResult>() { // from class: com.jd.feedback.FeedbackSDK.14
                public final void onComplete() {
                }

                public final void onSubscribe(Disposable disposable) {
                }

                public final /* synthetic */ void onNext(Object obj) {
                    MessageRequestResult messageRequestResult = (MessageRequestResult) obj;
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onSuccess(new Gson().toJson(messageRequestResult));
                    }
                }

                public final void onError(Throwable th) {
                    FeedbackRequestListener feedbackRequestListener2 = feedbackRequestListener;
                    if (feedbackRequestListener2 != null) {
                        feedbackRequestListener2.onFailure(th);
                    }
                    Log.e(FeedbackSDK.TAG, "获取回复列表失败: " + th.getMessage(), th);
                }
            });
        }
    }

    public static void launch(Context context, @Nullable ArrayList arrayList) {
        ArrayList<Uri> arrayList2;
        checkFeedbackSDKState();
        try {
            arrayList2 = C1425g.m1974a((List) arrayList, true);
        } catch (Exception e) {
            Log.w(TAG, "get image uri from path failed");
            e.printStackTrace();
            arrayList2 = new ArrayList<>();
        }
        Intent intent = new Intent(context, FeedbackActivity.class);
        intent.putParcelableArrayListExtra(INTENT_KEY_IMAGES2ADD, arrayList2);
        context.startActivity(intent);
    }
}
