package com.p051jd.feedback.network;

import android.os.Process;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import com.google.gson.Gson;
import com.huawei.hms.adapter.internal.CommonCode;
import com.huawei.hms.support.api.push.utils.common.base.PushConst;
import com.jingdong.common.utils.Configuration;
import com.p051jd.feedback.FeedbackSDK;
import com.p051jd.feedback.network.result.FeedbackRequestResult;
import com.p051jd.feedback.network.result.MessageRequestResult;
import com.p051jd.feedback.network.result.StatisticsRequestResult;
import com.p051jd.feedback.p074b.C1419a;
import com.p051jd.feedback.p074b.C1424f;
import com.p051jd.push.common.constant.Constants;
import io.reactivex.Observable;
import io.reactivex.functions.Consumer;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.feedback.network.a */
/* loaded from: classes.dex */
public final class C1432a {
    /* renamed from: a */
    public static Observable<FeedbackRequestResult> m1955a(boolean z, String str, String str2) {
        String str3;
        Log.i("FeedbackRequestHelper", ">>>>>>>>>>>> Request openFeedbackImage, isReply: " + z + " >>>>>>>>>>>>");
        LinkedHashMap<String, String> b = m1952b("openFeedbackImage");
        ArrayList arrayList = new ArrayList();
        arrayList.add(Constants.JdPushMsg.JSON_SDK_VER);
        arrayList.add("appKey");
        arrayList.add("isJailbroken");
        arrayList.add(CommonCode.MapKey.HAS_RESOLUTION);
        arrayList.add("userId");
        if (!z) {
            arrayList.add(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full);
            arrayList.add("networkName");
            arrayList.add("userName");
        }
        JSONObject a = m1956a(arrayList, b);
        try {
            if (z) {
                str3 = str2 + a.get("userId") + a.get(Constants.JdPushMsg.JSON_SDK_VER) + a.get("appKey");
            } else {
                str3 = b.get("clientVersion") + b.get("build") + b.get(Constants.JdPushMsg.JSON_KEY_UUID) + a.get(Constants.JdPushMsg.JSON_SDK_VER) + a.get("appKey");
            }
            a.put("sign", m1950d(str3));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        if (z) {
            try {
                a.put("feedbackId", m1951c(str2));
                a.put("module", "reply");
            } catch (JSONException e2) {
                e2.printStackTrace();
            }
        }
        a.put("image", str);
        b.put("body", a.toString());
        return m1957a(b, "openFeedbackImage");
    }

    /* renamed from: a */
    public static Observable<FeedbackRequestResult> m1961a(String str, String str2, String str3, List<String> list) {
        m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey");
        return m1954a(false, str, str2, list, str3, null);
    }

    /* renamed from: a */
    public static Observable<FeedbackRequestResult> m1960a(String str, List<String> list, String str2) {
        m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey", "userId");
        return m1954a(true, null, str, list, null, str2);
    }

    /* renamed from: a */
    private static Observable<FeedbackRequestResult> m1954a(boolean z, String str, String str2, List<String> list, String str3, String str4) {
        String str5;
        Log.i("FeedbackRequestHelper", ">>>>>>>>>>>> Request openFeedback, isReply: " + z + " >>>>>>>>>>>>");
        LinkedHashMap<String, String> b = m1952b("openFeedback");
        ArrayList arrayList = new ArrayList();
        arrayList.add(Constants.JdPushMsg.JSON_SDK_VER);
        arrayList.add("appKey");
        arrayList.add("userId");
        if (!z) {
            arrayList.add(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full);
            arrayList.add("isJailbroken");
            arrayList.add(CommonCode.MapKey.HAS_RESOLUTION);
            arrayList.add("networkName");
            arrayList.add("userName");
        }
        JSONObject a = m1956a(arrayList, b);
        try {
            if (z) {
                str5 = str4 + a.get("userId") + a.get(Constants.JdPushMsg.JSON_SDK_VER) + a.get("appKey");
            } else {
                str5 = b.get("clientVersion") + b.get("build") + b.get(Constants.JdPushMsg.JSON_KEY_UUID) + a.get(Constants.JdPushMsg.JSON_SDK_VER) + a.get("appKey");
            }
            a.put("sign", m1950d(str5));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        try {
            StringBuilder sb = new StringBuilder();
            for (String str6 : list) {
                sb.append(str6);
                sb.append(',');
            }
            if (sb.toString().endsWith(",")) {
                sb.deleteCharAt(sb.length() - 1);
            }
            a.put("images", sb.toString());
            a.put("content", str2);
            if (z) {
                a.put("module", "reply");
                a.put("feedbackId", m1951c(str4));
            } else {
                a.put(PushConst.EXTRA_SELFSHOW_TYPE_KEY, m1951c(str));
                a.put("phone", m1951c(str3));
                a.put("source", m1951c(FeedbackSDK.getSource()));
                if (!TextUtils.isEmpty(FeedbackSDK.getExt())) {
                    a.put("ext", FeedbackSDK.getExt());
                }
            }
        } catch (JSONException e2) {
            e2.printStackTrace();
        }
        b.put("body", a.toString());
        return m1957a(b, "openFeedback");
    }

    /* renamed from: a */
    public static Observable<FeedbackRequestResult> m1957a(LinkedHashMap<String, String> linkedHashMap, final String str) {
        m1958a(linkedHashMap);
        return ((IFeedbackApiService) C1436b.m1949a(IFeedbackApiService.class)).m1967a(str, linkedHashMap).doOnNext(new Consumer<FeedbackRequestResult>() { // from class: com.jd.feedback.network.a.1
            public final /* synthetic */ void accept(Object obj) {
                FeedbackRequestResult feedbackRequestResult = (FeedbackRequestResult) obj;
                if (str.equals("openFeedbackImage")) {
                    Log.i("FeedbackRequestHelper", "图片上传结束 at thread " + Process.myTid());
                }
                Log.i("FeedbackRequestHelper", "Response " + str + ": " + new Gson().toJson(feedbackRequestResult));
                String state = feedbackRequestResult.getState();
                if (state == null || !state.equals("200")) {
                    throw new Exception(feedbackRequestResult.getMessage());
                }
                Log.i("FeedbackRequestHelper", "<<<<<<<<<<<< Request " + str + " End, state: " + state + " <<<<<<<<<<<<");
            }
        });
    }

    /* renamed from: a */
    public static Observable<MessageRequestResult> m1963a(String str) {
        m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey", "userId");
        return m1959a(str, false, (String) null);
    }

    /* renamed from: a */
    public static Observable<MessageRequestResult> m1962a(String str, String str2) {
        m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey", "userId");
        return m1959a(str, true, str2);
    }

    /* renamed from: a */
    private static Observable<MessageRequestResult> m1959a(String str, boolean z, String str2) {
        String str3;
        Log.i("FeedbackRequestHelper", ">>>>>>>>>>>> Request openFeedbackList, isReply: " + z + " >>>>>>>>>>>>");
        LinkedHashMap<String, String> b = m1952b("openFeedbackList");
        ArrayList arrayList = new ArrayList();
        arrayList.add(Constants.JdPushMsg.JSON_SDK_VER);
        arrayList.add("appKey");
        arrayList.add("isJailbroken");
        arrayList.add(CommonCode.MapKey.HAS_RESOLUTION);
        arrayList.add("userId");
        JSONObject a = m1956a(arrayList, b);
        try {
            if (z) {
                str3 = str2 + a.get("userId") + a.get(Constants.JdPushMsg.JSON_SDK_VER) + a.get("appKey");
            } else {
                str3 = b.get("clientVersion") + b.get("build") + b.get(Constants.JdPushMsg.JSON_KEY_UUID) + a.get(Constants.JdPushMsg.JSON_SDK_VER) + a.get("appKey");
            }
            a.put("sign", m1950d(str3));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        try {
            a.put("pageNumber", m1951c(str));
            if (z) {
                a.put("module", "reply");
                a.put("feedbackId", m1951c(str2));
            }
        } catch (JSONException e2) {
            e2.printStackTrace();
        }
        b.put("body", a.toString());
        m1958a(b);
        return ((IFeedbackApiService) C1436b.m1949a(IFeedbackApiService.class)).m1966b("openFeedbackList", b).doOnNext(new Consumer<MessageRequestResult>("openFeedbackList") { // from class: com.jd.feedback.network.a.2
            public final /* synthetic */ void accept(Object obj) {
                MessageRequestResult messageRequestResult = (MessageRequestResult) obj;
                Log.i("FeedbackRequestHelper", "Response " + "openFeedbackList" + ": " + new Gson().toJson(messageRequestResult));
                String state = messageRequestResult.getState();
                if (state == null || !state.equals("200")) {
                    throw new Exception(messageRequestResult.getMessage());
                }
                Log.i("FeedbackRequestHelper", "<<<<<<<<<<<< Request " + "openFeedbackList" + " End, state: " + state + " <<<<<<<<<<<<");
            }
        });
    }

    /* renamed from: a */
    public static Observable<StatisticsRequestResult> m1964a() {
        m1953a("clientVersion", "build", Configuration.PARTNER, "appKey", "secretKey", "userId");
        Log.i("FeedbackRequestHelper", ">>>>>>>>>>>> Request openFeedbackStatistics >>>>>>>>>>>>");
        LinkedHashMap<String, String> b = m1952b("openFeedbackStatistics");
        ArrayList arrayList = new ArrayList();
        arrayList.add("appKey");
        arrayList.add("userId");
        arrayList.add(Constants.JdPushMsg.JSON_SDK_VER);
        JSONObject a = m1956a(arrayList, b);
        try {
            a.put("sign", m1950d(a.get("appKey") + b.get(Configuration.CLIENT) + a.get("userId") + a.get(Constants.JdPushMsg.JSON_SDK_VER)));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        b.put("body", a.toString());
        m1958a(b);
        return ((IFeedbackApiService) C1436b.m1949a(IFeedbackApiService.class)).m1965c("openFeedbackStatistics", b).doOnNext(new Consumer<StatisticsRequestResult>() { // from class: com.jd.feedback.network.a.3
            public final /* synthetic */ void accept(Object obj) {
                StatisticsRequestResult statisticsRequestResult = (StatisticsRequestResult) obj;
                Log.i("FeedbackRequestHelper", "Response openFeedbackStatistics: " + new Gson().toJson(statisticsRequestResult));
                String state = statisticsRequestResult.getState();
                if (state == null || !state.equals("200")) {
                    throw new Exception(statisticsRequestResult.getMessage());
                }
                Log.i("FeedbackRequestHelper", "<<<<<<<<<<<< Request openFeedbackStatistics End, state: " + state + " <<<<<<<<<<<<");
            }
        });
    }

    /* renamed from: a */
    private static void m1958a(LinkedHashMap<String, String> linkedHashMap) {
        linkedHashMap.put("sign", C1424f.m1979a(linkedHashMap, FeedbackSDK.getHostSecretKey()));
        Log.i("FeedbackRequestHelper", "params: -----------------------");
        for (Map.Entry<String, String> entry : linkedHashMap.entrySet()) {
            Log.i("FeedbackRequestHelper", "   " + ((Object) entry.getKey()) + ": " + ((Object) entry.getValue()));
        }
        Log.i("FeedbackRequestHelper", "-------------------- params end");
    }

    /* renamed from: b */
    public static LinkedHashMap<String, String> m1952b(String str) {
        LinkedHashMap<String, String> linkedHashMap = new LinkedHashMap<>();
        linkedHashMap.put("appid", m1951c(FeedbackSDK.getAppId()));
        linkedHashMap.put("functionId", str);
        linkedHashMap.put("t", m1951c(FeedbackSDK.getTime()));
        linkedHashMap.put(Configuration.CLIENT, m1951c(FeedbackSDK.getClient()));
        linkedHashMap.put("clientVersion", m1951c(FeedbackSDK.getClientVersion()));
        linkedHashMap.put("build", m1951c(FeedbackSDK.getBuild()));
        linkedHashMap.put(Constants.JdPushMsg.JSON_KEY_UUID, m1951c(FeedbackSDK.getUuid()));
        linkedHashMap.put(Constants.JdPushMsg.JSON_KEY_OS_VERSION, m1951c(FeedbackSDK.getOsVersion()));
        linkedHashMap.put(Constants.JdPushMsg.JSON_KEY_NETWORKTYPE, m1951c(FeedbackSDK.getNetworkType()));
        linkedHashMap.put(Configuration.PARTNER, m1951c(FeedbackSDK.getPartner()));
        linkedHashMap.put("screen", m1951c(FeedbackSDK.getScreen()));
        linkedHashMap.put("d_brand", m1951c(FeedbackSDK.getBrand()));
        linkedHashMap.put("d_model", m1951c(FeedbackSDK.getModel()));
        return linkedHashMap;
    }

    /* renamed from: a */
    public static JSONObject m1956a(List<String> list, Map<String, String> map) {
        if (map != null) {
            JSONObject jSONObject = new JSONObject();
            if (list.size() > 0) {
                for (String str : list) {
                    char c = 65535;
                    try {
                        switch (str.hashCode()) {
                            case -1962630338:
                                if (str.equals(Constants.JdPushMsg.JSON_SDK_VER)) {
                                    c = 0;
                                    break;
                                }
                                break;
                            case -1940815399:
                                if (str.equals("networkName")) {
                                    c = 6;
                                    break;
                                }
                                break;
                            case -1600030548:
                                if (str.equals(CommonCode.MapKey.HAS_RESOLUTION)) {
                                    c = 5;
                                    break;
                                }
                                break;
                            case -1411093378:
                                if (str.equals("appKey")) {
                                    c = 1;
                                    break;
                                }
                                break;
                            case -836030906:
                                if (str.equals("userId")) {
                                    c = 7;
                                    break;
                                }
                                break;
                            case -266666762:
                                if (str.equals("userName")) {
                                    c = '\b';
                                    break;
                                }
                                break;
                            case 3530173:
                                if (str.equals("sign")) {
                                    c = 3;
                                    break;
                                }
                                break;
                            case 908759025:
                                if (str.equals(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full)) {
                                    c = 2;
                                    break;
                                }
                                break;
                            case 1878245817:
                                if (str.equals("isJailbroken")) {
                                    c = 4;
                                    break;
                                }
                                break;
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    switch (c) {
                        case 0:
                            jSONObject.put(Constants.JdPushMsg.JSON_SDK_VER, m1951c(FeedbackSDK.getSdkVersion()));
                            continue;
                        case 1:
                            jSONObject.put("appKey", m1951c(FeedbackSDK.getAppKey()));
                            continue;
                        case 2:
                            jSONObject.put(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full, m1951c(FeedbackSDK.getPackageName()));
                            continue;
                        case 3:
                            String c2 = m1951c(map.get("clientVersion"));
                            String c3 = m1951c(map.get("build"));
                            String c4 = m1951c(map.get(Constants.JdPushMsg.JSON_KEY_UUID));
                            String c5 = m1951c(FeedbackSDK.getSdkVersion());
                            String c6 = m1951c(FeedbackSDK.getAppKey());
                            jSONObject.put("sign", m1950d(c2 + c3 + c4 + c5 + c6));
                            continue;
                        case 4:
                            jSONObject.put("isJailbroken", FeedbackSDK.getIsJailbroken());
                            continue;
                        case 5:
                            jSONObject.put(CommonCode.MapKey.HAS_RESOLUTION, m1951c(FeedbackSDK.getResolution()));
                            continue;
                        case 6:
                            if (!m1951c(map.get(Constants.JdPushMsg.JSON_KEY_NETWORKTYPE)).equals("WIFI")) {
                                jSONObject.put("networkName", FeedbackSDK.getNetworkName());
                            } else {
                                continue;
                            }
                        case 7:
                            jSONObject.put("userId", m1951c(FeedbackSDK.getUserId()));
                            continue;
                        case '\b':
                            jSONObject.put("userName", m1951c(FeedbackSDK.getUserName()));
                            continue;
                        default:
                            throw new InvalidParameterException("Not support body param '" + str + "'");
                            break;
                    }
                    e.printStackTrace();
                }
            }
            return jSONObject;
        }
        throw new NullPointerException("Parameter 'commonParamMap' can not null !!!");
    }

    /* renamed from: c */
    private static String m1951c(String str) {
        return TextUtils.isEmpty(str) ? "" : str;
    }

    /* renamed from: d */
    private static String m1950d(String str) {
        return new String(Base64.encode(C1419a.m1991a(str.getBytes(), FeedbackSDK.getSecretKey().getBytes(), FeedbackSDK.getAesIV()), 2));
    }

    /* renamed from: a */
    public static void m1953a(String... strArr) {
        for (String str : strArr) {
            char c = 65535;
            boolean z = true;
            switch (str.hashCode()) {
                case -1411093378:
                    if (str.equals("appKey")) {
                        c = 3;
                        break;
                    }
                    break;
                case -836030906:
                    if (str.equals("userId")) {
                        c = 6;
                        break;
                    }
                    break;
                case -792929080:
                    if (str.equals(Configuration.PARTNER)) {
                        c = 2;
                        break;
                    }
                    break;
                case -739567217:
                    if (str.equals("secretKey")) {
                        c = 4;
                        break;
                    }
                    break;
                case 94094958:
                    if (str.equals("build")) {
                        c = 1;
                        break;
                    }
                    break;
                case 771880589:
                    if (str.equals("clientVersion")) {
                        c = 0;
                        break;
                    }
                    break;
                case 908759025:
                    if (str.equals(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full)) {
                        c = 5;
                        break;
                    }
                    break;
            }
            switch (c) {
                case 0:
                    if (FeedbackSDK.getClientVersion() == null || FeedbackSDK.getClientVersion().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
                case 1:
                    if (FeedbackSDK.getBuild() == null || FeedbackSDK.getBuild().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
                case 2:
                    if (FeedbackSDK.getPartner() == null || FeedbackSDK.getPartner().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
                case 3:
                    if (FeedbackSDK.getAppKey() == null || FeedbackSDK.getAppKey().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
                case 4:
                    if (FeedbackSDK.getSecretKey() == null || FeedbackSDK.getSecretKey().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
                case 5:
                    if (FeedbackSDK.getPackageName() == null || FeedbackSDK.getPackageName().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
                case 6:
                    if (FeedbackSDK.getUserId() == null || FeedbackSDK.getUserId().trim().length() == 0) {
                        z = false;
                        break;
                    }
                    break;
            }
            if (!z) {
                throw new IllegalStateException("Param '" + str + "' is necessary.");
            }
        }
    }
}
