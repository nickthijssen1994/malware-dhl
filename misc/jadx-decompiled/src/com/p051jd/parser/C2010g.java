package com.p051jd.parser;

import com.jd.framework.json.anotation.JSONCreator;
import com.jd.framework.json.anotation.JSONField;
import com.jd.framework.json.anotation.JSONType;
import com.jd.serializer.SerializerFeature;
import com.p051jd.JSONException;
import com.p051jd.PropertyNamingStrategy;
import com.p051jd.p052a.C1177a;
import com.p051jd.p052a.C1181d;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.parser.g */
/* loaded from: classes.dex */
class C2010g {

    /* renamed from: a */
    final Constructor<?> f3526a;

    /* renamed from: b */
    final int f3527b;

    /* renamed from: c */
    final Constructor<?> f3528c;

    /* renamed from: d */
    final Method f3529d;

    /* renamed from: e */
    final C1177a[] f3530e;

    /* renamed from: f */
    final C1177a[] f3531f;

    /* renamed from: g */
    final JSONType f3532g;

    /* renamed from: h */
    boolean f3533h = false;

    /* renamed from: i */
    final boolean f3534i;

    /* renamed from: j */
    public final String f3535j;

    /* renamed from: k */
    public final String f3536k;

    /* renamed from: l */
    public final int f3537l;

    /* renamed from: m */
    public final String[] f3538m;

    C2010g(Class<?> cls, Constructor<?> constructor, Constructor<?> constructor2, Method method, C1177a[] aVarArr, C1177a[] aVarArr2, JSONType jSONType, String[] strArr) {
        int i;
        boolean z;
        int i2 = 0;
        this.f3526a = constructor;
        this.f3528c = constructor2;
        this.f3529d = method;
        this.f3530e = aVarArr;
        this.f3532g = jSONType;
        if (strArr == null || strArr.length != aVarArr.length) {
            this.f3538m = strArr;
        } else {
            this.f3538m = null;
        }
        if (jSONType != null) {
            String typeName = jSONType.typeName();
            this.f3535j = typeName.length() <= 0 ? cls.getName() : typeName;
            String typeKey = jSONType.typeKey();
            this.f3536k = typeKey.length() <= 0 ? null : typeKey;
            i = 0;
            for (Feature feature : jSONType.parseFeatures()) {
                i |= feature.mask;
            }
        } else {
            this.f3535j = cls.getName();
            this.f3536k = null;
            i = 0;
        }
        this.f3537l = i;
        if (jSONType != null) {
            Feature[] parseFeatures = jSONType.parseFeatures();
            z = false;
            for (Feature feature2 : parseFeatures) {
                if (feature2 == Feature.SupportArrayToBean) {
                    z = true;
                }
            }
        } else {
            z = false;
        }
        this.f3534i = z;
        C1177a[] a = m885a(aVarArr, aVarArr2);
        this.f3531f = Arrays.equals(aVarArr, a) ? aVarArr : a;
        if (constructor != null) {
            i2 = constructor.getParameterTypes().length;
        } else if (method != null) {
            i2 = method.getParameterTypes().length;
        }
        this.f3527b = i2;
    }

    /* renamed from: a */
    private C1177a[] m885a(C1177a[] aVarArr, C1177a[] aVarArr2) {
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        JSONType jSONType = this.f3532g;
        if (jSONType == null) {
            return aVarArr2;
        }
        String[] orders = jSONType.orders();
        if (!(orders == null || orders.length == 0)) {
            int i = 0;
            while (true) {
                if (i >= orders.length) {
                    z = true;
                    break;
                }
                int i2 = 0;
                while (true) {
                    if (i2 >= aVarArr2.length) {
                        z4 = false;
                        break;
                    } else if (aVarArr2[i2].f1885a.equals(orders[i])) {
                        z4 = true;
                        break;
                    } else {
                        i2++;
                    }
                }
                if (!z4) {
                    z = false;
                    break;
                }
                i++;
            }
            if (!z) {
                return aVarArr2;
            }
            if (orders.length == aVarArr.length) {
                int i3 = 0;
                while (true) {
                    if (i3 >= orders.length) {
                        z3 = true;
                        break;
                    } else if (!aVarArr2[i3].f1885a.equals(orders[i3])) {
                        z3 = false;
                        break;
                    } else {
                        i3++;
                    }
                }
                if (z3) {
                    return aVarArr2;
                }
                C1177a[] aVarArr3 = new C1177a[aVarArr2.length];
                for (int i4 = 0; i4 < orders.length; i4++) {
                    int i5 = 0;
                    while (true) {
                        if (i5 >= aVarArr2.length) {
                            break;
                        } else if (aVarArr2[i5].f1885a.equals(orders[i4])) {
                            aVarArr3[i4] = aVarArr2[i5];
                            break;
                        } else {
                            i5++;
                        }
                    }
                }
                this.f3533h = true;
                return aVarArr3;
            }
            C1177a[] aVarArr4 = new C1177a[aVarArr2.length];
            for (int i6 = 0; i6 < orders.length; i6++) {
                int i7 = 0;
                while (true) {
                    if (i7 >= aVarArr2.length) {
                        break;
                    } else if (aVarArr2[i7].f1885a.equals(orders[i6])) {
                        aVarArr4[i6] = aVarArr2[i7];
                        break;
                    } else {
                        i7++;
                    }
                }
            }
            int length = orders.length;
            for (int i8 = 0; i8 < aVarArr2.length; i8++) {
                int i9 = 0;
                while (i9 < aVarArr4.length && i9 < length) {
                    if (aVarArr4[i8].m2490b(aVarArr2[i9])) {
                        z2 = true;
                        break;
                    }
                    i9++;
                }
                z2 = false;
                if (!z2) {
                    aVarArr4[length] = aVarArr2[i8];
                    length++;
                }
            }
            this.f3533h = true;
        }
        return aVarArr2;
    }

    /* renamed from: a */
    static boolean m886a(List<C1177a> list, C1177a aVar, boolean z) {
        if (!z) {
            int size = list.size();
            for (int i = 0; i < size; i++) {
                C1177a aVar2 = list.get(i);
                if (aVar2.f1885a.equals(aVar.f1885a) && (!aVar2.f1893i || aVar.f1893i)) {
                    return false;
                }
            }
        }
        list.add(aVar);
        return true;
    }

    /* JADX WARN: Removed duplicated region for block: B:244:0x05a2  */
    /* JADX WARN: Removed duplicated region for block: B:256:0x0611  */
    /* JADX WARN: Removed duplicated region for block: B:259:0x0621  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x0627  */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static C2010g m887a(Class<?> cls, int i, Type type, boolean z, boolean z2, boolean z3, boolean z4, PropertyNamingStrategy propertyNamingStrategy) {
        Constructor<?> constructor;
        Method method;
        Method[] methodArr;
        Method[] methodArr2;
        Constructor<?> constructor2;
        Field[] fieldArr;
        Method[] methodArr3;
        Field[] fieldArr2;
        Constructor<?> constructor3;
        Method method2;
        int i2;
        int i3;
        String str;
        PropertyNamingStrategy propertyNamingStrategy2;
        int i4;
        int i5;
        Method[] methodArr4;
        Field[] fieldArr3;
        Constructor<?> constructor4;
        int i6;
        int i7;
        HashMap hashMap;
        Method method3;
        HashMap hashMap2;
        int i8;
        int i9;
        int i10;
        Method method4;
        HashMap hashMap3;
        Field[] fieldArr4;
        String str2;
        Field field;
        PropertyNamingStrategy propertyNamingStrategy3;
        JSONField jSONField;
        int i11;
        int i12;
        Constructor<?> constructor5;
        JSONField jSONField2;
        int i13;
        int i14;
        String str3;
        JSONField jSONField3;
        JSONField jSONField4;
        int i15;
        Constructor<?> constructor6;
        Constructor<?> constructor7;
        ArrayList arrayList = new ArrayList();
        HashMap hashMap4 = new HashMap();
        Constructor<?>[] declaredConstructors = cls.getDeclaredConstructors();
        boolean a = C1181d.m2487a((Class) cls);
        int i16 = i & 1024;
        if (i16 != 0 || (declaredConstructors.length != 1 && a)) {
            constructor = null;
        } else {
            try {
                constructor6 = cls.getDeclaredConstructor(new Class[0]);
            } catch (Exception unused) {
                constructor6 = null;
            }
            if (constructor6 != null) {
                constructor7 = constructor6;
            } else if (!cls.isMemberClass() || (i & 8) != 0) {
                constructor7 = constructor6;
            } else {
                int length = declaredConstructors.length;
                int i17 = 0;
                while (i17 < length) {
                    Constructor<?> constructor8 = declaredConstructors[i17];
                    Class<?>[] parameterTypes = constructor8.getParameterTypes();
                    if (parameterTypes.length == 1 && parameterTypes[0].equals(cls.getDeclaringClass())) {
                        constructor = constructor8;
                        break;
                    }
                    i17++;
                    constructor6 = constructor6;
                }
                constructor7 = constructor6;
            }
            constructor = constructor7;
        }
        String[] strArr = null;
        if (z) {
            methodArr = null;
            method = null;
        } else {
            ArrayList arrayList2 = new ArrayList();
            Class<?> cls2 = cls;
            Method method5 = null;
            while (cls2 != null && cls2 != Object.class) {
                Method[] declaredMethods = cls2.getDeclaredMethods();
                int length2 = declaredMethods.length;
                Method method6 = method5;
                int i18 = 0;
                while (i18 < length2) {
                    Method method7 = declaredMethods[i18];
                    int modifiers = method7.getModifiers();
                    if ((modifiers & 8) != 0) {
                        if (!method7.isAnnotationPresent(JSONCreator.class)) {
                            i15 = length2;
                        } else if (method6 == null) {
                            method6 = method7;
                            i15 = length2;
                        } else {
                            throw new JSONException("multi-json creator");
                        }
                    } else if ((modifiers & 2) == 0) {
                        i15 = length2;
                        if ((modifiers & 256) == 0 && (modifiers & 4) == 0) {
                            arrayList2.add(method7);
                        }
                    } else {
                        i15 = length2;
                    }
                    i18++;
                    declaredMethods = declaredMethods;
                    length2 = i15;
                }
                cls2 = cls2.getSuperclass();
                method5 = method6;
            }
            Method[] methodArr5 = new Method[arrayList2.size()];
            arrayList2.toArray(methodArr5);
            methodArr = methodArr5;
            method = method5;
        }
        Field[] declaredFields = cls.getDeclaredFields();
        boolean z5 = cls.isInterface() || i16 != 0;
        if (constructor == null || z5) {
            int length3 = declaredConstructors.length;
            int i19 = 0;
            while (true) {
                if (i19 >= length3) {
                    constructor5 = null;
                    break;
                }
                constructor5 = declaredConstructors[i19];
                if (constructor5.getAnnotation(JSONCreator.class) != null) {
                    break;
                }
                i19++;
                length3 = length3;
            }
            if (constructor5 != null) {
                C1181d.m2482a(cls, constructor5, i);
                Class<?>[] parameterTypes2 = constructor5.getParameterTypes();
                Type[] genericParameterTypes = z4 ? constructor5.getGenericParameterTypes() : parameterTypes2;
                JSONField[][] parameterAnnotations = constructor5.getParameterAnnotations();
                int i20 = 0;
                while (i20 < parameterTypes2.length) {
                    JSONField[] jSONFieldArr = parameterAnnotations[i20];
                    int length4 = jSONFieldArr.length;
                    int i21 = 0;
                    while (true) {
                        if (i21 >= length4) {
                            jSONField4 = null;
                            break;
                        }
                        JSONField jSONField5 = jSONFieldArr[i21];
                        if (jSONField5 instanceof JSONField) {
                            jSONField4 = jSONField5;
                            break;
                        }
                        i21++;
                        length4 = length4;
                        jSONFieldArr = jSONFieldArr;
                    }
                    if (jSONField4 != null) {
                        Class<?> cls3 = parameterTypes2[i20];
                        Type type2 = genericParameterTypes[i20];
                        Field a2 = C1181d.m2483a(cls, jSONField4.name(), declaredFields, hashMap4);
                        if (a2 != null) {
                            C1181d.m2482a(cls, a2, i);
                        }
                        m886a(arrayList, new C1177a(jSONField4.name(), cls, cls3, type2, a2, jSONField4.ordinal(), SerializerFeature.of(jSONField4.serialzeFeatures())), z);
                        i20++;
                        declaredFields = declaredFields;
                        parameterTypes2 = parameterTypes2;
                        constructor5 = constructor5;
                        methodArr = methodArr;
                        constructor = constructor;
                    } else {
                        throw new JSONException("illegal json creator");
                    }
                }
                constructor2 = constructor5;
                methodArr2 = methodArr;
                fieldArr = declaredFields;
                C1177a[] aVarArr = new C1177a[arrayList.size()];
                arrayList.toArray(aVarArr);
                C1177a[] aVarArr2 = new C1177a[aVarArr.length];
                System.arraycopy(aVarArr, 0, aVarArr2, 0, aVarArr.length);
                Arrays.sort(aVarArr2);
                if (z2) {
                    cls.getAnnotation(JSONType.class);
                }
                String[] strArr2 = new String[aVarArr.length];
                for (int i22 = 0; i22 < aVarArr.length; i22++) {
                    strArr2[i22] = aVarArr[i22].f1885a;
                }
                strArr = strArr2;
                constructor = constructor;
            } else {
                constructor2 = constructor5;
                methodArr2 = methodArr;
                fieldArr = declaredFields;
                if (method != null) {
                    C1181d.m2482a(cls, method, i);
                    Class<?>[] parameterTypes3 = method.getParameterTypes();
                    if (parameterTypes3.length > 0) {
                        Type[] genericParameterTypes2 = z4 ? method.getGenericParameterTypes() : parameterTypes3;
                        JSONField[][] parameterAnnotations2 = method.getParameterAnnotations();
                        int i23 = 0;
                        while (i23 < parameterTypes3.length) {
                            JSONField[] jSONFieldArr2 = parameterAnnotations2[i23];
                            int length5 = jSONFieldArr2.length;
                            int i24 = 0;
                            while (true) {
                                if (i24 >= length5) {
                                    jSONField3 = null;
                                    break;
                                }
                                JSONField jSONField6 = jSONFieldArr2[i24];
                                if (jSONField6 instanceof JSONField) {
                                    jSONField3 = jSONField6;
                                    break;
                                }
                                i24++;
                            }
                            if (jSONField3 != null) {
                                m886a(arrayList, new C1177a(jSONField3.name(), cls, parameterTypes3[i23], genericParameterTypes2[i23], C1181d.m2483a(cls, jSONField3.name(), fieldArr, hashMap4), jSONField3.ordinal(), SerializerFeature.of(jSONField3.serialzeFeatures())), z);
                                i23++;
                                genericParameterTypes2 = genericParameterTypes2;
                            } else {
                                throw new JSONException("illegal json creator");
                            }
                        }
                        C1177a[] aVarArr3 = new C1177a[arrayList.size()];
                        arrayList.toArray(aVarArr3);
                        C1177a[] aVarArr4 = new C1177a[aVarArr3.length];
                        System.arraycopy(aVarArr3, 0, aVarArr4, 0, aVarArr3.length);
                        Arrays.sort(aVarArr4);
                        return new C2010g(cls, null, null, method, aVarArr3, Arrays.equals(aVarArr3, aVarArr4) ? aVarArr3 : aVarArr4, z2 ? (JSONType) cls.getAnnotation(JSONType.class) : null, null);
                    }
                } else if (!z5) {
                    if (!a || declaredConstructors.length <= 0) {
                        throw new JSONException("default constructor not found. " + cls);
                    }
                    String[] b = C1181d.m2470b((Class) cls);
                    if (b != null) {
                        Constructor<?> constructor9 = constructor2;
                        for (Constructor<?> constructor10 : declaredConstructors) {
                            Class<?>[] parameterTypes4 = constructor10.getParameterTypes();
                            if ((parameterTypes4.length <= 0 || !parameterTypes4[parameterTypes4.length - 1].getName().equals("kotlin.jvm.internal.DefaultConstructorMarker")) && (constructor9 == null || constructor9.getParameterTypes().length < parameterTypes4.length)) {
                                constructor9 = constructor10;
                            }
                        }
                        constructor9.setAccessible(true);
                        C1181d.m2482a(cls, constructor9, i);
                        Class<?>[] parameterTypes5 = constructor9.getParameterTypes();
                        Type[] genericParameterTypes3 = z4 ? constructor9.getGenericParameterTypes() : parameterTypes5;
                        JSONField[][] parameterAnnotations3 = constructor9.getParameterAnnotations();
                        int i25 = 0;
                        while (i25 < parameterTypes5.length) {
                            String str4 = b[i25];
                            JSONField[] jSONFieldArr3 = parameterAnnotations3[i25];
                            int length6 = jSONFieldArr3.length;
                            int i26 = 0;
                            while (true) {
                                if (i26 >= length6) {
                                    jSONField2 = null;
                                    break;
                                }
                                JSONField jSONField7 = jSONFieldArr3[i26];
                                if (jSONField7 instanceof JSONField) {
                                    jSONField2 = jSONField7;
                                    break;
                                }
                                i26++;
                                jSONFieldArr3 = jSONFieldArr3;
                            }
                            Class<?> cls4 = parameterTypes5[i25];
                            Type type3 = genericParameterTypes3[i25];
                            Field a3 = C1181d.m2483a(cls, str4, fieldArr, hashMap4);
                            if (a3 != null && jSONField2 == null) {
                                jSONField2 = (JSONField) a3.getAnnotation(JSONField.class);
                            }
                            if (jSONField2 != null) {
                                i14 = jSONField2.ordinal();
                                i13 = SerializerFeature.of(jSONField2.serialzeFeatures());
                                String name = jSONField2.name();
                                if (name.length() != 0) {
                                    str4 = name;
                                }
                                str3 = str4;
                            } else {
                                str3 = str4;
                                i14 = 0;
                                i13 = 0;
                            }
                            m886a(arrayList, new C1177a(str3, cls, cls4, type3, a3, i14, i13), z);
                            i25++;
                            constructor9 = constructor9;
                            parameterTypes5 = parameterTypes5;
                        }
                        C1177a[] aVarArr5 = new C1177a[arrayList.size()];
                        arrayList.toArray(aVarArr5);
                        C1177a[] aVarArr6 = new C1177a[aVarArr5.length];
                        System.arraycopy(aVarArr5, 0, aVarArr6, 0, aVarArr5.length);
                        Arrays.sort(aVarArr6);
                        String[] strArr3 = new String[aVarArr5.length];
                        for (int i27 = 0; i27 < aVarArr5.length; i27++) {
                            strArr3[i27] = aVarArr5[i27].f1885a;
                        }
                        strArr = strArr3;
                        constructor2 = constructor9;
                        constructor = constructor;
                    } else {
                        throw new JSONException("default constructor not found. " + cls);
                    }
                }
                constructor = constructor;
            }
        } else {
            methodArr2 = methodArr;
            constructor2 = null;
            fieldArr = declaredFields;
        }
        if (constructor != null) {
            C1181d.m2482a(cls, constructor, i);
        }
        int i28 = 4;
        if (!z) {
            Method[] methodArr6 = methodArr2;
            int length7 = methodArr6.length;
            int i29 = 0;
            while (i29 < length7) {
                Method method8 = methodArr6[i29];
                String name2 = method8.getName();
                if (name2.length() < i28) {
                    i7 = i29;
                    i6 = length7;
                    methodArr4 = methodArr6;
                    constructor4 = constructor;
                    fieldArr3 = fieldArr;
                    method3 = method;
                    hashMap = hashMap4;
                } else {
                    Class<?> returnType = method8.getReturnType();
                    if (returnType != Void.TYPE && returnType != method8.getDeclaringClass()) {
                        i7 = i29;
                        i6 = length7;
                        methodArr4 = methodArr6;
                        constructor4 = constructor;
                        fieldArr3 = fieldArr;
                        method3 = method;
                        hashMap = hashMap4;
                    } else if (method8.getParameterTypes().length != 1) {
                        i7 = i29;
                        i6 = length7;
                        methodArr4 = methodArr6;
                        constructor4 = constructor;
                        fieldArr3 = fieldArr;
                        method3 = method;
                        hashMap = hashMap4;
                    } else {
                        JSONField jSONField8 = z3 ? (JSONField) method8.getAnnotation(JSONField.class) : null;
                        JSONField a4 = (jSONField8 != null || !z3) ? jSONField8 : C1181d.m2481a(cls, method8);
                        if (a4 == null) {
                            i7 = i29;
                            i6 = length7;
                            methodArr4 = methodArr6;
                            constructor4 = constructor;
                            fieldArr3 = fieldArr;
                            method3 = method;
                            hashMap2 = hashMap4;
                            i10 = 3;
                            method4 = method8;
                            i9 = 0;
                            i8 = 0;
                        } else if (!a4.deserialize()) {
                            i7 = i29;
                            i6 = length7;
                            methodArr4 = methodArr6;
                            constructor4 = constructor;
                            fieldArr3 = fieldArr;
                            method3 = method;
                            hashMap = hashMap4;
                        } else {
                            i9 = a4.ordinal();
                            i8 = SerializerFeature.of(a4.serialzeFeatures());
                            if (a4.name().length() != 0) {
                                i7 = i29;
                                i6 = length7;
                                constructor4 = constructor;
                                fieldArr3 = fieldArr;
                                methodArr4 = methodArr6;
                                method3 = method;
                                m886a(arrayList, new C1177a(a4.name(), method8, null, cls, type, i9, i8, a4, null, z4), z);
                                C1181d.m2482a(cls, method8, i);
                                hashMap = hashMap4;
                            } else {
                                i7 = i29;
                                i6 = length7;
                                methodArr4 = methodArr6;
                                constructor4 = constructor;
                                fieldArr3 = fieldArr;
                                method3 = method;
                                hashMap2 = hashMap4;
                                i10 = 3;
                                method4 = method8;
                            }
                        }
                        if (!name2.startsWith("set")) {
                            hashMap = hashMap2;
                        } else {
                            char charAt = name2.charAt(i10);
                            if (Character.isUpperCase(charAt)) {
                                if (C1181d.f1910a) {
                                    str2 = C1181d.m2475a(name2.substring(i10));
                                    fieldArr4 = fieldArr3;
                                    hashMap3 = hashMap2;
                                } else {
                                    str2 = Character.toLowerCase(name2.charAt(i10)) + name2.substring(4);
                                    fieldArr4 = fieldArr3;
                                    hashMap3 = hashMap2;
                                }
                            } else if (charAt == '_') {
                                str2 = name2.substring(4);
                                fieldArr4 = fieldArr3;
                                hashMap3 = hashMap2;
                            } else if (charAt == 'f') {
                                str2 = name2.substring(i10);
                                fieldArr4 = fieldArr3;
                                hashMap3 = hashMap2;
                            } else if (name2.length() < 5 || !Character.isUpperCase(name2.charAt(4))) {
                                hashMap = hashMap2;
                            } else {
                                str2 = C1181d.m2475a(name2.substring(i10));
                                fieldArr4 = fieldArr3;
                                hashMap3 = hashMap2;
                            }
                            Field a5 = C1181d.m2483a(cls, str2, fieldArr4, hashMap3);
                            if (a5 == null && method4.getParameterTypes()[0] == Boolean.TYPE) {
                                field = C1181d.m2483a(cls, "is" + Character.toUpperCase(str2.charAt(0)) + str2.substring(1), fieldArr4, hashMap3);
                                if (field == null) {
                                    JSONField jSONField9 = z3 ? (JSONField) field.getAnnotation(JSONField.class) : null;
                                    if (jSONField9 != null) {
                                        int ordinal = jSONField9.ordinal();
                                        int of = SerializerFeature.of(jSONField9.serialzeFeatures());
                                        if (jSONField9.name().length() != 0) {
                                            hashMap = hashMap3;
                                            fieldArr3 = fieldArr4;
                                            m886a(arrayList, new C1177a(jSONField9.name(), method4, field, cls, type, ordinal, of, a4, jSONField9, z4), z);
                                        } else {
                                            fieldArr3 = fieldArr4;
                                            hashMap = hashMap3;
                                            if (a4 == null) {
                                                i12 = ordinal;
                                                i11 = of;
                                                jSONField = jSONField9;
                                                propertyNamingStrategy3 = propertyNamingStrategy;
                                            } else {
                                                jSONField = a4;
                                                i12 = ordinal;
                                                i11 = of;
                                                propertyNamingStrategy3 = propertyNamingStrategy;
                                            }
                                            m886a(arrayList, new C1177a(propertyNamingStrategy3 != null ? propertyNamingStrategy3.translate(str2) : str2, method4, null, cls, type, i12, i11, jSONField, null, z4), z);
                                            C1181d.m2482a(cls, method4, i);
                                        }
                                    } else {
                                        fieldArr3 = fieldArr4;
                                        hashMap = hashMap3;
                                    }
                                } else {
                                    fieldArr3 = fieldArr4;
                                    hashMap = hashMap3;
                                }
                                jSONField = a4;
                                i12 = i9;
                                i11 = i8;
                                propertyNamingStrategy3 = propertyNamingStrategy;
                                m886a(arrayList, new C1177a(propertyNamingStrategy3 != null ? propertyNamingStrategy3.translate(str2) : str2, method4, null, cls, type, i12, i11, jSONField, null, z4), z);
                                C1181d.m2482a(cls, method4, i);
                            }
                            field = a5;
                            if (field == null) {
                            }
                            jSONField = a4;
                            i12 = i9;
                            i11 = i8;
                            propertyNamingStrategy3 = propertyNamingStrategy;
                            m886a(arrayList, new C1177a(propertyNamingStrategy3 != null ? propertyNamingStrategy3.translate(str2) : str2, method4, null, cls, type, i12, i11, jSONField, null, z4), z);
                            C1181d.m2482a(cls, method4, i);
                        }
                    }
                }
                i29 = i7 + 1;
                method = method3;
                hashMap4 = hashMap;
                length7 = i6;
                constructor = constructor4;
                fieldArr = fieldArr3;
                methodArr6 = methodArr4;
                i28 = 4;
            }
            methodArr3 = methodArr6;
            constructor3 = constructor;
            fieldArr2 = fieldArr;
            method2 = method;
        } else {
            constructor3 = constructor;
            fieldArr2 = fieldArr;
            method2 = method;
            methodArr3 = methodArr2;
        }
        ArrayList<Field> arrayList3 = new ArrayList(fieldArr2.length);
        for (Field field2 : fieldArr2) {
            int modifiers2 = field2.getModifiers();
            if ((modifiers2 & 8) == 0) {
                if ((modifiers2 & 16) != 0) {
                    Class<?> type4 = field2.getType();
                    if (!(Map.class.isAssignableFrom(type4) || Collection.class.isAssignableFrom(type4))) {
                    }
                }
                if ((field2.getModifiers() & 1) != 0) {
                    arrayList3.add(field2);
                }
            }
        }
        Class<? super Object> superclass = cls.getSuperclass();
        while (superclass != null && superclass != Object.class) {
            Field[] declaredFields2 = superclass.getDeclaredFields();
            for (Field field3 : declaredFields2) {
                int modifiers3 = field3.getModifiers();
                if ((modifiers3 & 8) == 0) {
                    if ((modifiers3 & 16) != 0) {
                        Class<?> type5 = field3.getType();
                        if (!(Map.class.isAssignableFrom(type5) || Collection.class.isAssignableFrom(type5))) {
                        }
                    }
                    if ((modifiers3 & 1) != 0) {
                        arrayList3.add(field3);
                    }
                }
            }
            superclass = superclass.getSuperclass();
        }
        for (Field field4 : arrayList3) {
            String name3 = field4.getName();
            int size = arrayList.size();
            boolean z6 = false;
            for (int i30 = 0; i30 < size; i30++) {
                if (((C1177a) arrayList.get(i30)).f1885a.equals(name3)) {
                    z6 = true;
                }
            }
            if (!z6) {
                JSONField jSONField10 = z3 ? (JSONField) field4.getAnnotation(JSONField.class) : null;
                if (jSONField10 != null) {
                    int ordinal2 = jSONField10.ordinal();
                    int of2 = SerializerFeature.of(jSONField10.serialzeFeatures());
                    if (jSONField10.name().length() != 0) {
                        name3 = jSONField10.name();
                        i5 = ordinal2;
                        i4 = of2;
                        propertyNamingStrategy2 = propertyNamingStrategy;
                    } else {
                        i5 = ordinal2;
                        i4 = of2;
                        propertyNamingStrategy2 = propertyNamingStrategy;
                    }
                } else {
                    i5 = 0;
                    i4 = 0;
                    propertyNamingStrategy2 = propertyNamingStrategy;
                }
                if (propertyNamingStrategy2 != null) {
                    name3 = propertyNamingStrategy2.translate(name3);
                }
                C1181d.m2482a(cls, field4, i);
                m886a(arrayList, new C1177a(name3, null, field4, cls, type, i5, i4, null, jSONField10, z4), z);
            }
        }
        if (!z) {
            int length8 = methodArr3.length;
            int i31 = 0;
            while (i31 < length8) {
                Method method9 = methodArr3[i31];
                String name4 = method9.getName();
                if (name4.length() < 4) {
                    i3 = i31;
                    i2 = length8;
                } else if (!name4.startsWith("get") || !Character.isUpperCase(name4.charAt(3))) {
                    i3 = i31;
                    i2 = length8;
                } else if (method9.getParameterTypes().length != 0) {
                    i3 = i31;
                    i2 = length8;
                } else {
                    Class<?> returnType2 = method9.getReturnType();
                    if (Collection.class.isAssignableFrom(returnType2) || Map.class.isAssignableFrom(returnType2)) {
                        JSONField jSONField11 = z3 ? (JSONField) method9.getAnnotation(JSONField.class) : null;
                        if (jSONField11 != null) {
                            str = jSONField11.name();
                            if (str.length() > 0) {
                                i3 = i31;
                                i2 = length8;
                                m886a(arrayList, new C1177a(str, method9, null, cls, type, 0, 0, jSONField11, null, z4), z);
                                C1181d.m2482a(cls, method9, i);
                            }
                        }
                        str = Character.toLowerCase(name4.charAt(3)) + name4.substring(4);
                        i3 = i31;
                        i2 = length8;
                        m886a(arrayList, new C1177a(str, method9, null, cls, type, 0, 0, jSONField11, null, z4), z);
                        C1181d.m2482a(cls, method9, i);
                    } else {
                        i3 = i31;
                        i2 = length8;
                    }
                }
                i31 = i3 + 1;
                length8 = i2;
            }
        }
        C1177a[] aVarArr7 = new C1177a[arrayList.size()];
        arrayList.toArray(aVarArr7);
        C1177a[] aVarArr8 = new C1177a[aVarArr7.length];
        System.arraycopy(aVarArr7, 0, aVarArr8, 0, aVarArr7.length);
        Arrays.sort(aVarArr8);
        return new C2010g(cls, constructor3, constructor2, method2, aVarArr7, aVarArr8, z2 ? (JSONType) cls.getAnnotation(JSONType.class) : null, strArr);
    }
}
