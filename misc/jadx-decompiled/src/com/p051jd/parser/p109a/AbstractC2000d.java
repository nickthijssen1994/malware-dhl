package com.p051jd.parser.p109a;

import com.p051jd.JSONException;
import com.p051jd.p052a.C1177a;
import com.p051jd.parser.C2004b;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.parser.a.d */
/* loaded from: classes.dex */
public abstract class AbstractC2000d {

    /* renamed from: b */
    public final C1177a f3467b;

    /* renamed from: c */
    public final Class<?> f3468c;

    /* renamed from: d */
    protected Enum[] f3469d;

    /* renamed from: e */
    protected long[] f3470e;

    /* renamed from: a */
    public abstract void mo874a(C2004b bVar, Object obj, Type type, Map<String, Object> map);

    public AbstractC2000d(Class<?> cls, C1177a aVar, int i) {
        this.f3468c = cls;
        this.f3467b = aVar;
        if (aVar != null) {
            Class<?> cls2 = aVar.f1890f;
            if (cls2.isEnum()) {
                Enum[] enumArr = (Enum[]) cls2.getEnumConstants();
                long[] jArr = new long[enumArr.length];
                this.f3470e = new long[enumArr.length];
                for (int i2 = 0; i2 < enumArr.length; i2++) {
                    String name = enumArr[i2].name();
                    long j = -3750763034362895579L;
                    for (int i3 = 0; i3 < name.length(); i3++) {
                        j = (j ^ ((long) name.charAt(i3))) * 1099511628211L;
                    }
                    jArr[i2] = j;
                    this.f3470e[i2] = j;
                }
                Arrays.sort(this.f3470e);
                this.f3469d = new Enum[enumArr.length];
                for (int i4 = 0; i4 < this.f3470e.length; i4++) {
                    int i5 = 0;
                    while (true) {
                        if (i5 >= jArr.length) {
                            break;
                        } else if (this.f3470e[i4] == jArr[i5]) {
                            this.f3469d[i4] = enumArr[i5];
                            break;
                        } else {
                            i5++;
                        }
                    }
                }
            }
        }
    }

    /* renamed from: a */
    public Enum m989a(long j) {
        int binarySearch;
        if (this.f3469d != null && (binarySearch = Arrays.binarySearch(this.f3470e, j)) >= 0) {
            return this.f3469d[binarySearch];
        }
        return null;
    }

    /* renamed from: a */
    public void m986a(Object obj, int i) throws IllegalAccessException {
        this.f3467b.f1887c.setInt(obj, i);
    }

    /* renamed from: a */
    public void m985a(Object obj, long j) throws IllegalAccessException {
        this.f3467b.f1887c.setLong(obj, j);
    }

    /* renamed from: a */
    public void m987a(Object obj, float f) throws IllegalAccessException {
        this.f3467b.f1887c.setFloat(obj, f);
    }

    /* renamed from: a */
    public void m988a(Object obj, double d) throws IllegalAccessException {
        this.f3467b.f1887c.setDouble(obj, d);
    }

    /* renamed from: a */
    public void mo873a(Object obj, Object obj2) {
        if (obj2 != null || !this.f3467b.f1890f.isPrimitive()) {
            Field field = this.f3467b.f1887c;
            Method method = this.f3467b.f1886b;
            try {
                if (this.f3467b.f1888d) {
                    if (!this.f3467b.f1893i) {
                        field.set(obj, obj2);
                    } else if (Map.class.isAssignableFrom(this.f3467b.f1890f)) {
                        Map map = (Map) field.get(obj);
                        if (map != null) {
                            map.putAll((Map) obj2);
                        }
                    } else {
                        Collection collection = (Collection) field.get(obj);
                        if (collection != null) {
                            collection.addAll((Collection) obj2);
                        }
                    }
                } else if (!this.f3467b.f1893i) {
                    method.invoke(obj, obj2);
                } else if (Map.class.isAssignableFrom(this.f3467b.f1890f)) {
                    Map map2 = (Map) method.invoke(obj, new Object[0]);
                    if (map2 != null) {
                        map2.putAll((Map) obj2);
                    }
                } else {
                    Collection collection2 = (Collection) method.invoke(obj, new Object[0]);
                    if (collection2 != null) {
                        collection2.addAll((Collection) obj2);
                    }
                }
            } catch (Exception e) {
                throw new JSONException("set property error, " + this.f3467b.f1885a, e);
            }
        }
    }
}
