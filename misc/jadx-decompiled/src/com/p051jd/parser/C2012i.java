package com.p051jd.parser;

import com.p051jd.JSONException;
import com.p051jd.framework.json.JDJSONArray;
import com.p051jd.p052a.C1177a;
import com.p051jd.p052a.C1180c;
import com.p051jd.p052a.C1181d;
import com.p051jd.parser.p109a.AbstractC2000d;
import com.p051jd.parser.p109a.AbstractC2002f;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.parser.i */
/* loaded from: classes.dex */
class C2012i extends AbstractC2000d {

    /* renamed from: a */
    private final Type f3540a;

    /* renamed from: f */
    private AbstractC2002f f3541f;

    /* renamed from: g */
    private final boolean f3542g;

    public C2012i(C2015l lVar, Class<?> cls, C1177a aVar) {
        super(cls, aVar, 14);
        Type type = aVar.f1891g;
        Class<?> cls2 = aVar.f1890f;
        if (cls2.isArray()) {
            this.f3540a = cls2.getComponentType();
            this.f3542g = true;
            return;
        }
        this.f3540a = C1181d.m2460d(type);
        this.f3542g = false;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v5, types: [java.util.ArrayList] */
    /* JADX WARN: Type inference failed for: r4v0, types: [com.jd.parser.i] */
    @Override // com.p051jd.parser.p109a.AbstractC2000d
    /* renamed from: a */
    public void mo874a(C2004b bVar, Object obj, Type type, Map<String, Object> map) {
        JDJSONArray jDJSONArray;
        C2007d dVar = bVar.f3473c;
        int a = dVar.m954a();
        JDJSONArray jDJSONArray2 = null;
        if (a == 8 || (a == 4 && dVar.m910m().length() == 0)) {
            mo873a(obj, null);
            bVar.f3473c.m926e();
            return;
        }
        if (this.f3542g) {
            JDJSONArray jDJSONArray3 = new JDJSONArray();
            jDJSONArray3.setComponentType(this.f3540a);
            jDJSONArray = jDJSONArray3;
            jDJSONArray2 = jDJSONArray3;
        } else {
            jDJSONArray = new ArrayList();
        }
        C2014k kVar = bVar.f3474d;
        bVar.m979a(kVar, obj, ((C2012i) this).f3467b.f1885a);
        m884a(bVar, type, jDJSONArray);
        bVar.m980a(kVar);
        Object[] objArr = jDJSONArray;
        if (this.f3542g) {
            Object[] array = jDJSONArray.toArray((Object[]) Array.newInstance((Class) this.f3540a, jDJSONArray.size()));
            jDJSONArray2.setRelatedArray(array);
            objArr = array;
        }
        if (obj == null) {
            map.put(((C2012i) this).f3467b.f1885a, objArr);
        } else {
            mo873a(obj, objArr);
        }
    }

    /* renamed from: a */
    final void m884a(C2004b bVar, Type type, Collection collection) {
        char c;
        char c2;
        char c3;
        char c4;
        char c5;
        int i;
        int i2;
        Type type2 = this.f3540a;
        AbstractC2002f fVar = this.f3541f;
        if (type instanceof ParameterizedType) {
            Class cls = null;
            if (type2 instanceof TypeVariable) {
                TypeVariable typeVariable = (TypeVariable) type2;
                ParameterizedType parameterizedType = (ParameterizedType) type;
                if (parameterizedType.getRawType() instanceof Class) {
                    cls = (Class) parameterizedType.getRawType();
                }
                if (cls != null) {
                    int length = cls.getTypeParameters().length;
                    i2 = 0;
                    while (i2 < length) {
                        if (cls.getTypeParameters()[i2].getName().equals(typeVariable.getName())) {
                            break;
                        }
                        i2++;
                    }
                }
                i2 = -1;
                if (i2 != -1) {
                    type2 = parameterizedType.getActualTypeArguments()[i2];
                    if (!type2.equals(this.f3540a)) {
                        fVar = bVar.f3472b.m876a(type2);
                    }
                }
            } else if (type2 instanceof ParameterizedType) {
                ParameterizedType parameterizedType2 = (ParameterizedType) type2;
                Type[] actualTypeArguments = parameterizedType2.getActualTypeArguments();
                if (actualTypeArguments.length == 1 && (actualTypeArguments[0] instanceof TypeVariable)) {
                    TypeVariable typeVariable2 = (TypeVariable) actualTypeArguments[0];
                    ParameterizedType parameterizedType3 = (ParameterizedType) type;
                    if (parameterizedType3.getRawType() instanceof Class) {
                        cls = (Class) parameterizedType3.getRawType();
                    }
                    if (cls != null) {
                        int length2 = cls.getTypeParameters().length;
                        i = 0;
                        while (i < length2) {
                            if (cls.getTypeParameters()[i].getName().equals(typeVariable2.getName())) {
                                break;
                            }
                            i++;
                        }
                    }
                    i = -1;
                    if (i != -1) {
                        actualTypeArguments[0] = parameterizedType3.getActualTypeArguments()[i];
                        type2 = new C1180c(actualTypeArguments, parameterizedType2.getOwnerType(), parameterizedType2.getRawType());
                    }
                }
            }
        }
        C2007d dVar = bVar.f3473c;
        if (fVar == null) {
            fVar = bVar.f3472b.m876a(type2);
            this.f3541f = fVar;
        }
        if (dVar.f3497a == 14) {
            int i3 = 0;
            char c6 = dVar.f3500d;
            int i4 = 15;
            char c7 = 26;
            if (c6 == '[') {
                int i5 = dVar.f3501e + 1;
                dVar.f3501e = i5;
                if (i5 >= dVar.f3514r) {
                    c5 = 26;
                } else {
                    c5 = dVar.f3513q.charAt(i5);
                }
                dVar.f3500d = c5;
                dVar.f3497a = 14;
            } else if (c6 == '{') {
                int i6 = dVar.f3501e + 1;
                dVar.f3501e = i6;
                if (i6 >= dVar.f3514r) {
                    c4 = 26;
                } else {
                    c4 = dVar.f3513q.charAt(i6);
                }
                dVar.f3500d = c4;
                dVar.f3497a = 12;
            } else if (c6 == '\"') {
                dVar.m916j();
            } else if (c6 == ']') {
                int i7 = dVar.f3501e + 1;
                dVar.f3501e = i7;
                if (i7 >= dVar.f3514r) {
                    c3 = 26;
                } else {
                    c3 = dVar.f3513q.charAt(i7);
                }
                dVar.f3500d = c3;
                dVar.f3497a = 15;
            } else {
                dVar.m926e();
            }
            while (true) {
                if (dVar.f3497a == 16) {
                    dVar.m926e();
                } else if (dVar.f3497a == i4) {
                    break;
                } else {
                    collection.add(fVar.mo869a(bVar, type2, Integer.valueOf(i3)));
                    if (bVar.f3475e == 1) {
                        bVar.m971a(collection);
                    }
                    if (dVar.f3497a == 16) {
                        char c8 = dVar.f3500d;
                        if (c8 == '[') {
                            int i8 = dVar.f3501e + 1;
                            dVar.f3501e = i8;
                            if (i8 >= dVar.f3514r) {
                                c2 = 26;
                            } else {
                                c2 = dVar.f3513q.charAt(i8);
                            }
                            dVar.f3500d = c2;
                            dVar.f3497a = 14;
                        } else if (c8 == '{') {
                            int i9 = dVar.f3501e + 1;
                            dVar.f3501e = i9;
                            if (i9 >= dVar.f3514r) {
                                c = 26;
                            } else {
                                c = dVar.f3513q.charAt(i9);
                            }
                            dVar.f3500d = c;
                            dVar.f3497a = 12;
                        } else if (c8 == '\"') {
                            dVar.m916j();
                        } else {
                            dVar.m926e();
                        }
                    }
                    i3++;
                    i4 = 15;
                }
            }
            if (dVar.f3500d == ',') {
                int i10 = dVar.f3501e + 1;
                dVar.f3501e = i10;
                if (i10 < dVar.f3514r) {
                    c7 = dVar.f3513q.charAt(i10);
                }
                dVar.f3500d = c7;
                dVar.f3497a = 16;
                return;
            }
            dVar.m926e();
        } else if (dVar.f3497a == 12) {
            collection.add(fVar.mo869a(bVar, type2, 0));
        } else {
            String str = "exepct '[', but " + C2008e.m897a(dVar.f3497a);
            if (type != null) {
                str = str + ", type : " + type;
            }
            throw new JSONException(str);
        }
    }
}
