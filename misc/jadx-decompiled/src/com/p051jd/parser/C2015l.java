package com.p051jd.parser;

import com.jd.framework.json.anotation.JSONType;
import com.jd.serializer.aa;
import com.jd.serializer.b;
import com.jd.serializer.e;
import com.jd.serializer.f;
import com.jd.serializer.g;
import com.jd.serializer.h;
import com.jd.serializer.k;
import com.jd.serializer.q;
import com.jd.serializer.s;
import com.p051jd.PropertyNamingStrategy;
import com.p051jd.framework.json.JDJSON;
import com.p051jd.p052a.C1177a;
import com.p051jd.p052a.C1178b;
import com.p051jd.parser.p109a.AbstractC2000d;
import com.p051jd.parser.p109a.AbstractC2002f;
import java.io.Closeable;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.regex.Pattern;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.parser.l */
/* loaded from: classes.dex */
public class C2015l {

    /* renamed from: a */
    public static boolean f3549a = JDJSON.debug;

    /* renamed from: b */
    public static C2015l f3550b = new C2015l();

    /* renamed from: d */
    public ClassLoader f3552d;

    /* renamed from: e */
    public PropertyNamingStrategy f3553e;

    /* renamed from: f */
    private final C1178b<AbstractC2002f> f3554f = new C1178b<>(1024);

    /* renamed from: c */
    public final C2017n f3551c = new C2017n(16384);

    /* renamed from: a */
    public static C2015l m880a() {
        return f3550b;
    }

    public C2015l() {
        this.f3554f.m2488a(SimpleDateFormat.class, q.a);
        this.f3554f.m2488a(Date.class, h.a);
        this.f3554f.m2488a(Calendar.class, h.a);
        this.f3554f.m2488a(Map.class, C2013j.f3543a);
        this.f3554f.m2488a(HashMap.class, C2013j.f3543a);
        this.f3554f.m2488a(LinkedHashMap.class, C2013j.f3543a);
        this.f3554f.m2488a(TreeMap.class, C2013j.f3543a);
        this.f3554f.m2488a(ConcurrentMap.class, C2013j.f3543a);
        this.f3554f.m2488a(ConcurrentHashMap.class, C2013j.f3543a);
        this.f3554f.m2488a(Collection.class, g.a);
        this.f3554f.m2488a(List.class, g.a);
        this.f3554f.m2488a(ArrayList.class, g.a);
        this.f3554f.m2488a(Object.class, C2011h.f3539a);
        this.f3554f.m2488a(String.class, aa.a);
        this.f3554f.m2488a(Character.TYPE, q.a);
        this.f3554f.m2488a(Character.class, q.a);
        this.f3554f.m2488a(Byte.TYPE, s.a);
        this.f3554f.m2488a(Byte.class, s.a);
        this.f3554f.m2488a(Short.TYPE, s.a);
        this.f3554f.m2488a(Short.class, s.a);
        this.f3554f.m2488a(Integer.TYPE, k.a);
        this.f3554f.m2488a(Integer.class, k.a);
        this.f3554f.m2488a(Long.TYPE, k.a);
        this.f3554f.m2488a(Long.class, k.a);
        this.f3554f.m2488a(BigInteger.class, e.a);
        this.f3554f.m2488a(BigDecimal.class, e.a);
        this.f3554f.m2488a(Float.TYPE, s.a);
        this.f3554f.m2488a(Float.class, s.a);
        this.f3554f.m2488a(Double.TYPE, s.a);
        this.f3554f.m2488a(Double.class, s.a);
        this.f3554f.m2488a(Boolean.TYPE, f.a);
        this.f3554f.m2488a(Boolean.class, f.a);
        this.f3554f.m2488a(Class.class, q.a);
        this.f3554f.m2488a(char[].class, b.a);
        this.f3554f.m2488a(Object[].class, b.a);
        this.f3554f.m2488a(UUID.class, q.a);
        this.f3554f.m2488a(TimeZone.class, q.a);
        this.f3554f.m2488a(Locale.class, q.a);
        this.f3554f.m2488a(Currency.class, q.a);
        this.f3554f.m2488a(URI.class, q.a);
        this.f3554f.m2488a(URL.class, q.a);
        this.f3554f.m2488a(Pattern.class, q.a);
        this.f3554f.m2488a(Charset.class, q.a);
        this.f3554f.m2488a(Number.class, s.a);
        this.f3554f.m2488a(StackTraceElement.class, q.a);
        this.f3554f.m2488a(Serializable.class, C2011h.f3539a);
        this.f3554f.m2488a(Cloneable.class, C2011h.f3539a);
        this.f3554f.m2488a(Comparable.class, C2011h.f3539a);
        this.f3554f.m2488a(Closeable.class, C2011h.f3539a);
    }

    /* renamed from: a */
    public AbstractC2002f m876a(Type type) {
        AbstractC2002f a = this.f3554f.m2489a(type);
        if (a != null) {
            return a;
        }
        if (type instanceof Class) {
            return m877a((Class) type, type);
        }
        if (type instanceof ParameterizedType) {
            Type rawType = ((ParameterizedType) type).getRawType();
            if (rawType instanceof Class) {
                return m877a((Class) rawType, type);
            }
            return m876a(rawType);
        }
        if (type instanceof WildcardType) {
            Type[] upperBounds = ((WildcardType) type).getUpperBounds();
            if (upperBounds.length == 1) {
                return m876a(upperBounds[0]);
            }
        }
        return C2011h.f3539a;
    }

    /* renamed from: a */
    public AbstractC2002f m877a(Class<?> cls, Type type) {
        AbstractC2002f fVar;
        JSONType annotation;
        Class<?> mappingTo;
        AbstractC2002f a = this.f3554f.m2489a(type);
        if (a != null) {
            return a;
        }
        if (type == null) {
            type = cls;
        }
        AbstractC2002f a2 = this.f3554f.m2489a(type);
        if (a2 != null) {
            return a2;
        }
        if (!m878a(cls) && (annotation = cls.getAnnotation(JSONType.class)) != null && (mappingTo = annotation.mappingTo()) != Void.class) {
            return m877a(mappingTo, mappingTo);
        }
        if ((type instanceof WildcardType) || (type instanceof TypeVariable) || (type instanceof ParameterizedType)) {
            a2 = this.f3554f.m2489a(cls);
        }
        if (a2 != null) {
            return a2;
        }
        AbstractC2002f a3 = this.f3554f.m2489a(type);
        if (a3 != null) {
            return a3;
        }
        if (cls.isEnum()) {
            fVar = new C2006c(cls);
        } else if (cls.isArray()) {
            fVar = b.a;
        } else if (cls == Set.class || cls == HashSet.class || cls == Collection.class || cls == List.class || cls == ArrayList.class) {
            fVar = g.a;
        } else if (Collection.class.isAssignableFrom(cls)) {
            fVar = g.a;
        } else if (Map.class.isAssignableFrom(cls)) {
            fVar = C2013j.f3543a;
        } else if (Throwable.class.isAssignableFrom(cls)) {
            fVar = new C2019o(this, cls);
        } else {
            fVar = cls.getName().equals("android.net.Uri") ? q.a : new C2009f(this, cls, type);
        }
        m875a(type, fVar);
        return fVar;
    }

    /* renamed from: a */
    public AbstractC2000d m879a(C2015l lVar, Class<?> cls, C1177a aVar) {
        Class<?> cls2 = aVar.f1890f;
        if (cls2 == List.class || cls2 == ArrayList.class || (cls2.isArray() && !cls2.getComponentType().isPrimitive())) {
            return new C2012i(lVar, cls, aVar);
        }
        return new C1996a(lVar, cls, aVar);
    }

    /* renamed from: a */
    public void m875a(Type type, AbstractC2002f fVar) {
        this.f3554f.m2488a(type, fVar);
    }

    /* renamed from: a */
    public static boolean m878a(Class<?> cls) {
        return cls.isPrimitive() || cls == Boolean.class || cls == Character.class || cls == Byte.class || cls == Short.class || cls == Integer.class || cls == Long.class || cls == Float.class || cls == Double.class || cls == BigInteger.class || cls == BigDecimal.class || cls == String.class || cls == Date.class || cls == java.sql.Date.class || cls == Time.class || cls == Timestamp.class;
    }
}
