package com.p051jd.parser;

import com.p051jd.JSONException;
import com.p051jd.framework.json.JDJSON;
import com.p051jd.framework.json.JDJSONObject;
import com.p051jd.p052a.C1181d;
import com.p051jd.parser.C2004b;
import com.p051jd.parser.p109a.AbstractC2002f;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.parser.j */
/* loaded from: classes.dex */
class C2013j implements AbstractC2002f {

    /* renamed from: a */
    public static C2013j f3543a = new C2013j();

    C2013j() {
    }

    @Override // com.p051jd.parser.p109a.AbstractC2002f
    /* renamed from: a */
    public <T> T mo869a(C2004b bVar, Type type, Object obj) {
        if (type == JDJSONObject.class && bVar.f3478h == null) {
            return (T) bVar.m967b();
        }
        C2007d dVar = bVar.f3473c;
        if (dVar.f3497a == 8) {
            dVar.m935b(16);
            return null;
        }
        Map<?, ?> a = m881a(type);
        C2014k kVar = bVar.f3474d;
        try {
            bVar.m979a(kVar, a, obj);
            if (!(type instanceof ParameterizedType)) {
                return (T) bVar.m969a(a, obj);
            }
            ParameterizedType parameterizedType = (ParameterizedType) type;
            Type type2 = parameterizedType.getActualTypeArguments()[0];
            Type type3 = parameterizedType.getActualTypeArguments()[1];
            if (String.class == type2) {
                return (T) m883a(bVar, a, type3, obj);
            }
            return (T) m882a(bVar, a, type2, type3, obj);
        } finally {
            bVar.m980a(kVar);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:66:0x012b, code lost:
        return r9;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static Map m883a(C2004b bVar, Map<String, Object> map, Type type, Object obj) {
        String str;
        Object obj2;
        C2007d dVar = bVar.f3473c;
        if (dVar.f3497a == 12) {
            C2014k kVar = bVar.f3474d;
            while (true) {
                try {
                    dVar.m906o();
                    char c = dVar.f3500d;
                    while (c == ',') {
                        dVar.m930c();
                        dVar.m906o();
                        c = dVar.f3500d;
                    }
                    if (c == '\"') {
                        str = dVar.m943a(bVar.f3471a, '\"');
                        dVar.m906o();
                        if (dVar.f3500d != ':') {
                            throw new JSONException("syntax error, " + dVar.m920h());
                        }
                    } else if (c == '}') {
                        dVar.m930c();
                        dVar.f3504h = 0;
                        dVar.m935b(16);
                        return map;
                    } else if (c == '\'') {
                        str = dVar.m943a(bVar.f3471a, '\'');
                        dVar.m906o();
                        if (dVar.f3500d != ':') {
                            throw new JSONException("syntax error, " + dVar.m920h());
                        }
                    } else {
                        str = dVar.m932b(bVar.f3471a);
                        dVar.m906o();
                        char c2 = dVar.f3500d;
                        if (c2 != ':') {
                            throw new JSONException("expect ':' at " + dVar.f3498b + ", actual " + c2);
                        }
                    }
                    dVar.m930c();
                    dVar.m906o();
                    char c3 = dVar.f3500d;
                    dVar.f3504h = 0;
                    if (str != JDJSON.DEFAULT_TYPE_KEY || dVar.m945a(Feature.DisableSpecialKeyDetect)) {
                        dVar.m926e();
                        bVar.m980a(kVar);
                        if (dVar.f3497a == 8) {
                            obj2 = null;
                            dVar.m926e();
                        } else {
                            obj2 = bVar.m974a(type, str);
                        }
                        map.put(str, obj2);
                        if (bVar.f3475e == 1) {
                            bVar.m964b(map, str);
                        }
                        bVar.m979a(kVar, obj2, str);
                        int i = dVar.f3497a;
                        if (i == 20 || i == 15) {
                            break;
                        } else if (i == 13) {
                            dVar.m926e();
                            return map;
                        }
                    } else {
                        Class<?> a = C1181d.m2474a(dVar.m943a(bVar.f3471a, '\"'), bVar.f3472b.f3552d);
                        if (a == map.getClass()) {
                            dVar.m935b(16);
                            if (dVar.f3497a == 13) {
                                dVar.m935b(16);
                                return map;
                            }
                        } else {
                            AbstractC2002f a2 = bVar.f3472b.m876a((Type) a);
                            dVar.m935b(16);
                            bVar.f3475e = 2;
                            if (kVar != null && !(obj instanceof Integer)) {
                                bVar.m959f();
                            }
                            return (Map) a2.mo869a(bVar, a, obj);
                        }
                    }
                } finally {
                    bVar.m980a(kVar);
                }
            }
        } else {
            throw new JSONException("syntax error, expect {, actual " + dVar.f3497a);
        }
    }

    /* renamed from: a */
    public static Object m882a(C2004b bVar, Map<Object, Object> map, Type type, Type type2, Object obj) {
        Object obj2;
        Object obj3;
        C2007d dVar = bVar.f3473c;
        int i = dVar.f3497a;
        int i2 = 16;
        if (i == 12 || i == 16) {
            AbstractC2002f a = bVar.f3472b.m876a(type);
            AbstractC2002f a2 = bVar.f3472b.m876a(type2);
            dVar.m926e();
            C2014k kVar = bVar.f3474d;
            while (true) {
                try {
                    int i3 = dVar.f3497a;
                    if (i3 == 13) {
                        dVar.m935b(i2);
                        return map;
                    } else if (i3 != 4 || dVar.f3504h != 4 || !dVar.f3513q.startsWith("$ref", dVar.f3507k + 1) || dVar.m945a(Feature.DisableSpecialKeyDetect)) {
                        if (map.size() != 0 || i3 != 4) {
                            obj2 = null;
                        } else if (!JDJSON.DEFAULT_TYPE_KEY.equals(dVar.m910m())) {
                            obj2 = null;
                        } else if (!dVar.m945a(Feature.DisableSpecialKeyDetect)) {
                            dVar.m953a(':');
                            dVar.m935b(16);
                            if (dVar.f3497a == 13) {
                                dVar.m926e();
                                return map;
                            }
                            dVar.m926e();
                            obj2 = null;
                        } else {
                            obj2 = null;
                        }
                        Object a3 = a.mo869a(bVar, type, obj2);
                        if (dVar.f3497a == 17) {
                            dVar.m926e();
                            Object a4 = a2.mo869a(bVar, type2, a3);
                            if (bVar.f3475e == 1) {
                                bVar.m964b(map, a3);
                            }
                            map.put(a3, a4);
                            if (dVar.f3497a == 16) {
                                dVar.m926e();
                            }
                            i2 = 16;
                        } else {
                            throw new JSONException("syntax error, expect :, actual " + dVar.f3497a);
                        }
                    } else {
                        dVar.m953a(':');
                        if (dVar.f3497a == 4) {
                            String m = dVar.m910m();
                            if ("..".equals(m)) {
                                obj3 = kVar.f3545b.f3544a;
                            } else if ("$".equals(m)) {
                                C2014k kVar2 = kVar;
                                while (kVar2.f3545b != null) {
                                    kVar2 = kVar2.f3545b;
                                }
                                obj3 = kVar2.f3544a;
                            } else {
                                bVar.m981a(new C2004b.C2005a(kVar, m));
                                bVar.f3475e = 1;
                                obj3 = null;
                            }
                            dVar.m935b(13);
                            if (dVar.f3497a == 13) {
                                dVar.m935b(16);
                                return obj3;
                            }
                            throw new JSONException("illegal ref");
                        }
                        throw new JSONException("illegal ref, " + C2008e.m897a(i3));
                    }
                } finally {
                    bVar.m980a(kVar);
                }
            }
        } else {
            throw new JSONException("syntax error, expect {, actual " + C2008e.m897a(i));
        }
    }

    /* renamed from: a */
    protected Map<?, ?> m881a(Type type) {
        if (type == Properties.class) {
            return new Properties();
        }
        if (type == Hashtable.class) {
            return new Hashtable();
        }
        if (type == IdentityHashMap.class) {
            return new IdentityHashMap();
        }
        if (type == SortedMap.class || type == TreeMap.class) {
            return new TreeMap();
        }
        if (type == ConcurrentMap.class || type == ConcurrentHashMap.class) {
            return new ConcurrentHashMap();
        }
        if (type == Map.class || type == HashMap.class) {
            return new HashMap();
        }
        if (type == LinkedHashMap.class) {
            return new LinkedHashMap();
        }
        if (type == JDJSONObject.class) {
            return new JDJSONObject();
        }
        if (type instanceof ParameterizedType) {
            ParameterizedType parameterizedType = (ParameterizedType) type;
            Type rawType = parameterizedType.getRawType();
            if (EnumMap.class.equals(rawType)) {
                return new EnumMap((Class) parameterizedType.getActualTypeArguments()[0]);
            }
            return m881a(rawType);
        }
        Class cls = (Class) type;
        if (!cls.isInterface()) {
            try {
                return (Map) cls.newInstance();
            } catch (Exception e) {
                throw new JSONException("unsupport type " + type, e);
            }
        } else {
            throw new JSONException("unsupport type " + type);
        }
    }
}
