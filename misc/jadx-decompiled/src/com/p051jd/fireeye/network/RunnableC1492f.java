package com.p051jd.fireeye.network;

import android.text.TextUtils;
import com.alibaba.fastjson.support.spring.FastJsonJsonView;
import com.facebook.common.util.UriUtil;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import com.p051jd.fireeye.network.C1489d;
import com.p051jd.lib.p083un.utils.UnTimeUtils;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLException;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.fireeye.network.f */
/* loaded from: classes.dex */
public class RunnableC1492f implements Runnable {

    /* renamed from: a */
    private static final String f2679a;

    /* renamed from: b */
    private static Map<Object, WeakReference<RunnableC1492f>> f2680b = Collections.synchronizedMap(new WeakHashMap());

    /* renamed from: c */
    private Future f2681c;

    /* renamed from: d */
    private int f2682d;

    /* renamed from: f */
    private int f2684f;

    /* renamed from: g */
    private String f2685g;

    /* renamed from: h */
    private boolean f2686h;

    /* renamed from: k */
    private AbstractC1495h f2689k;

    /* renamed from: l */
    private Object f2690l;

    /* renamed from: m */
    private Integer f2691m;

    /* renamed from: e */
    private int f2683e = 1;

    /* renamed from: i */
    private final AtomicBoolean f2687i = new AtomicBoolean();

    /* renamed from: j */
    private int f2688j = 15000;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.fireeye.network.f$a */
    /* loaded from: classes.dex */
    public interface AbstractC1493a {

        /* renamed from: a */
        public static final int f2692a;

        /* renamed from: b */
        public static final int f2693b;
    }

    /* renamed from: j */
    private static Map<String, String> m1660j() {
        return null;
    }

    /* renamed from: m */
    private void m1657m() {
    }

    /* renamed from: c */
    protected String mo1596c() {
        return null;
    }

    public RunnableC1492f(String str) {
        this.f2685g = str;
    }

    private RunnableC1492f(String str, int i) {
        this.f2685g = str;
        this.f2684f = i;
    }

    /* renamed from: a */
    public final void m1679a(AbstractC1495h hVar) {
        this.f2689k = hVar;
    }

    /* renamed from: a */
    public final void m1677a(Object obj) {
        this.f2690l = obj;
    }

    /* renamed from: e */
    private Object m1665e() {
        return this.f2690l;
    }

    /* renamed from: a */
    public final int m1683a() {
        int i = this.f2683e;
        if (i <= 0) {
            return 1;
        }
        return i;
    }

    /* renamed from: b */
    private void m1670b(int i) {
        this.f2683e = i;
    }

    /* renamed from: a */
    private void m1672a(boolean z) {
        this.f2686h = z;
    }

    /* renamed from: f */
    private void m1664f() {
        this.f2687i.set(true);
        Future future = this.f2681c;
        if (future != null) {
            future.cancel(true);
        }
    }

    /* renamed from: b */
    private static void m1669b(Object obj) {
        WeakReference<RunnableC1492f> weakReference;
        RunnableC1492f fVar;
        if (obj != null && (weakReference = f2680b.get(obj)) != null && (fVar = weakReference.get()) != null) {
            fVar.m1664f();
            weakReference.clear();
        }
    }

    /* renamed from: g */
    private static void m1663g() {
        RunnableC1492f fVar;
        if (!f2680b.isEmpty()) {
            for (Map.Entry<Object, WeakReference<RunnableC1492f>> entry : f2680b.entrySet()) {
                WeakReference<RunnableC1492f> value = entry.getValue();
                if (!(value == null || (fVar = value.get()) == null)) {
                    fVar.m1664f();
                    value.clear();
                }
            }
        }
    }

    /* renamed from: b */
    public final boolean m1671b() {
        return this.f2687i.get();
    }

    /* renamed from: h */
    private int m1662h() {
        return this.f2688j;
    }

    /* renamed from: a */
    public final void m1682a(int i) {
        this.f2688j = UnTimeUtils.MIN;
    }

    /* renamed from: i */
    private boolean m1661i() {
        return this.f2686h;
    }

    /* renamed from: k */
    private Integer m1659k() {
        return this.f2691m;
    }

    /* renamed from: a */
    private void m1678a(Integer num) {
        this.f2691m = num;
    }

    /* renamed from: a */
    private void m1680a(C1494g gVar) {
        AbstractC1495h hVar = this.f2689k;
        if (hVar != null) {
            hVar.mo1594a(gVar);
        }
    }

    /* renamed from: a */
    private void m1681a(NetworkException networkException) {
        AbstractC1495h hVar = this.f2689k;
        if (hVar != null) {
            hVar.mo1595a();
        }
    }

    /* renamed from: l */
    private String m1658l() {
        return this.f2685g;
    }

    /* renamed from: d */
    public final void m1666d() {
        if (this.f2690l == null) {
            this.f2690l = Long.valueOf(System.currentTimeMillis());
        }
        Object obj = this.f2690l;
        if (obj != null) {
            f2680b.put(obj, new WeakReference<>(this));
        }
        this.f2681c = C1489d.C1490a.f2678a.m1685a(this);
    }

    /* renamed from: n */
    private int m1656n() {
        return this.f2684f;
    }

    /* renamed from: p */
    private void m1654p() {
        Object obj = this.f2690l;
        if (obj != null) {
            try {
                f2680b.remove(obj);
            } catch (Exception unused) {
            }
        }
    }

    /* renamed from: q */
    private void m1653q() throws NetworkException {
        NetworkException networkException;
        boolean z;
        if (C1488c.m1688a()) {
            new HashMap();
            String c = mo1596c();
            NetworkException networkException2 = null;
            boolean z2 = true;
            while (z2) {
                try {
                    this.f2682d++;
                    if (C1488c.f2674b) {
                        C1487b.m1691a(f2679a, "Request.tag = " + this.f2690l + ", url = " + this.f2685g + " executionCount = " + this.f2682d);
                    }
                    C1494g a = m1673a((Map<String, String>) null, c);
                    if (C1488c.f2674b) {
                        C1487b.m1691a(f2679a, "Response.tag = " + this.f2690l + ", response.responseCode = " + a.m1652a());
                    }
                    if (!a.m1645c()) {
                        throw new NetworkException(a.m1652a());
                    } else if (!this.f2687i.get() && this.f2689k != null) {
                        this.f2689k.mo1594a(a);
                        return;
                    } else {
                        return;
                    }
                } catch (NetworkException e) {
                    boolean a2 = C1496i.m1638a(e, this.f2682d, this);
                    int a3 = e.m1694a();
                    if (a3 == 0) {
                        a3 = AbstractC1486a.f2668c;
                    }
                    networkException2 = new NetworkException(e, a3);
                    z2 = a2;
                } catch (SocketTimeoutException e2) {
                    if (C1488c.f2674b) {
                        e2.printStackTrace();
                    }
                    z = C1496i.m1638a(e2, this.f2682d, this);
                    networkException = new NetworkException(e2, (int) AbstractC1486a.f2666a);
                    z2 = z;
                    networkException2 = networkException;
                } catch (SSLException e3) {
                    if (C1488c.f2674b) {
                        e3.printStackTrace();
                    }
                    z = C1496i.m1638a(e3, this.f2682d, this);
                    networkException = new NetworkException(e3, (int) AbstractC1486a.f2671f);
                    z2 = z;
                    networkException2 = networkException;
                } catch (Exception e4) {
                    if (!this.f2687i.get()) {
                        z = C1496i.m1638a(e4, this.f2682d, this);
                        if (z && this.f2686h && !TextUtils.isEmpty(this.f2685g) && this.f2685g.startsWith("https://")) {
                            this.f2685g = this.f2685g.replaceFirst("https://", "http://");
                            if (C1488c.f2674b) {
                                C1487b.m1691a(f2679a, "Request.tag = " + this.f2690l + ", after replace, url  = " + this.f2685g);
                            }
                        }
                        networkException = new NetworkException(e4, (int) AbstractC1486a.f2667b);
                        if (C1488c.f2674b) {
                            e4.printStackTrace();
                        }
                        z2 = z;
                        networkException2 = networkException;
                    } else {
                        return;
                    }
                }
            }
            throw networkException2;
        }
    }

    /* renamed from: a */
    private static byte[] m1676a(HttpURLConnection httpURLConnection) throws IOException {
        InputStream inputStream;
        ByteArrayOutputStream byteArrayOutputStream;
        Throwable th;
        try {
            inputStream = httpURLConnection.getInputStream();
            try {
                byteArrayOutputStream = new ByteArrayOutputStream();
                try {
                    byte[] bArr = new byte[1024];
                    while (true) {
                        int read = inputStream.read(bArr);
                        if (read == -1) {
                            break;
                        }
                        byteArrayOutputStream.write(bArr, 0, read);
                    }
                    byteArrayOutputStream.flush();
                    byteArrayOutputStream.close();
                    inputStream.close();
                    byte[] byteArray = byteArrayOutputStream.toByteArray();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    byteArrayOutputStream.close();
                    return byteArray;
                } catch (IOException unused) {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    if (byteArrayOutputStream != null) {
                        byteArrayOutputStream.close();
                    }
                    return null;
                } catch (Throwable th2) {
                    th = th2;
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    if (byteArrayOutputStream != null) {
                        byteArrayOutputStream.close();
                    }
                    throw th;
                }
            } catch (IOException unused2) {
                byteArrayOutputStream = null;
            } catch (Throwable th3) {
                th = th3;
                byteArrayOutputStream = null;
            }
        } catch (IOException unused3) {
            inputStream = null;
            byteArrayOutputStream = null;
        } catch (Throwable th4) {
            th = th4;
            byteArrayOutputStream = null;
            inputStream = null;
        }
    }

    /* renamed from: b */
    private static void m1668b(HttpURLConnection httpURLConnection, String str) throws IOException {
        if (httpURLConnection != null) {
            DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
            if (str != null) {
                dataOutputStream.write(str.getBytes());
            }
            dataOutputStream.flush();
            dataOutputStream.close();
        }
    }

    /* renamed from: b */
    private static HttpURLConnection m1667b(URL url) throws IOException {
        if (UriUtil.HTTPS_SCHEME.equals(url.getProtocol().toLowerCase())) {
            return (HttpsURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
        }
        return (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
    }

    @Override // java.lang.Runnable
    public void run() {
        try {
            if (this.f2687i.get()) {
                m1654p();
                return;
            }
            try {
                m1653q();
            } catch (NetworkException e) {
                e.printStackTrace();
                if (!this.f2687i.get() && this.f2689k != null) {
                    this.f2689k.mo1595a();
                }
            }
            m1654p();
        } catch (InterruptedException e2) {
            e2.printStackTrace();
        }
    }

    /* renamed from: o */
    private void m1655o() throws InterruptedException {
        NetworkException networkException;
        boolean z;
        try {
            if (!this.f2687i.get()) {
                if (C1488c.m1688a()) {
                    new HashMap();
                    String c = mo1596c();
                    NetworkException networkException2 = null;
                    boolean z2 = true;
                    while (z2) {
                        try {
                            this.f2682d++;
                            if (C1488c.f2674b) {
                                C1487b.m1691a(f2679a, "Request.tag = " + this.f2690l + ", url = " + this.f2685g + " executionCount = " + this.f2682d);
                            }
                            C1494g a = m1673a((Map<String, String>) null, c);
                            if (C1488c.f2674b) {
                                C1487b.m1691a(f2679a, "Response.tag = " + this.f2690l + ", response.responseCode = " + a.m1652a());
                            }
                            if (!a.m1645c()) {
                                throw new NetworkException(a.m1652a());
                            } else if (!this.f2687i.get() && this.f2689k != null) {
                                this.f2689k.mo1594a(a);
                            }
                        } catch (NetworkException e) {
                            boolean a2 = C1496i.m1638a(e, this.f2682d, this);
                            int a3 = e.m1694a();
                            if (a3 == 0) {
                                a3 = AbstractC1486a.f2668c;
                            }
                            networkException2 = new NetworkException(e, a3);
                            z2 = a2;
                        } catch (SocketTimeoutException e2) {
                            if (C1488c.f2674b) {
                                e2.printStackTrace();
                            }
                            z = C1496i.m1638a(e2, this.f2682d, this);
                            networkException = new NetworkException(e2, (int) AbstractC1486a.f2666a);
                            z2 = z;
                            networkException2 = networkException;
                        } catch (SSLException e3) {
                            if (C1488c.f2674b) {
                                e3.printStackTrace();
                            }
                            z = C1496i.m1638a(e3, this.f2682d, this);
                            networkException = new NetworkException(e3, (int) AbstractC1486a.f2671f);
                            z2 = z;
                            networkException2 = networkException;
                        } catch (Exception e4) {
                            if (!this.f2687i.get()) {
                                z = C1496i.m1638a(e4, this.f2682d, this);
                                if (z && this.f2686h && !TextUtils.isEmpty(this.f2685g) && this.f2685g.startsWith("https://")) {
                                    this.f2685g = this.f2685g.replaceFirst("https://", "http://");
                                    if (C1488c.f2674b) {
                                        C1487b.m1691a(f2679a, "Request.tag = " + this.f2690l + ", after replace, url  = " + this.f2685g);
                                    }
                                }
                                networkException = new NetworkException(e4, (int) AbstractC1486a.f2667b);
                                if (C1488c.f2674b) {
                                    e4.printStackTrace();
                                }
                                z2 = z;
                                networkException2 = networkException;
                            }
                        }
                    }
                    throw networkException2;
                }
            }
        } catch (NetworkException e5) {
            e5.printStackTrace();
            if (!this.f2687i.get() && this.f2689k != null) {
                this.f2689k.mo1595a();
            }
        } finally {
            m1654p();
        }
    }

    /* renamed from: a */
    private C1494g m1673a(Map<String, String> map, String str) throws Exception {
        HttpURLConnection httpURLConnection;
        if (!this.f2687i.get()) {
            URL url = new URL(this.f2685g);
            if (UriUtil.HTTPS_SCHEME.equals(url.getProtocol().toLowerCase())) {
                httpURLConnection = (HttpsURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
            } else {
                httpURLConnection = (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
            }
            int i = this.f2688j;
            httpURLConnection.setConnectTimeout(i);
            httpURLConnection.setReadTimeout(i);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            if (map != null && !map.isEmpty()) {
                for (String str2 : map.keySet()) {
                    httpURLConnection.addRequestProperty(str2, map.get(str2));
                }
            }
            httpURLConnection.setRequestProperty("Charset", "UTF-8");
            httpURLConnection.setRequestProperty("Content-Type", FastJsonJsonView.DEFAULT_CONTENT_TYPE);
            switch (this.f2684f) {
                case 0:
                    httpURLConnection.setRequestMethod("POST");
                    if (httpURLConnection != null) {
                        DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
                        if (str != null) {
                            dataOutputStream.write(str.getBytes());
                        }
                        dataOutputStream.flush();
                        dataOutputStream.close();
                        break;
                    }
                    break;
                case 1:
                    httpURLConnection.setRequestMethod("GET");
                    break;
            }
            if (!this.f2687i.get()) {
                int responseCode = httpURLConnection.getResponseCode();
                if (responseCode != -1) {
                    C1494g gVar = new C1494g();
                    HashMap hashMap = new HashMap();
                    for (Map.Entry<String, List<String>> entry : httpURLConnection.getHeaderFields().entrySet()) {
                        if (entry.getKey() != null) {
                            hashMap.put(entry.getKey(), entry.getValue().get(0));
                        }
                    }
                    gVar.m1651a(responseCode);
                    gVar.m1650a(hashMap);
                    gVar.m1648a(m1676a(httpURLConnection));
                    if (!this.f2687i.get()) {
                        return gVar;
                    }
                    throw new NetworkException(AbstractC1486a.f2670e);
                }
                throw new NetworkException(responseCode);
            }
            throw new NetworkException(AbstractC1486a.f2670e);
        }
        throw new NetworkException(AbstractC1486a.f2670e);
    }

    /* renamed from: a */
    private void m1675a(HttpURLConnection httpURLConnection, String str) throws IOException {
        switch (this.f2684f) {
            case 0:
                httpURLConnection.setRequestMethod("POST");
                if (httpURLConnection != null) {
                    DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
                    if (str != null) {
                        dataOutputStream.write(str.getBytes());
                    }
                    dataOutputStream.flush();
                    dataOutputStream.close();
                    return;
                }
                return;
            case 1:
                httpURLConnection.setRequestMethod("GET");
                return;
            default:
                return;
        }
    }

    /* renamed from: a */
    private HttpURLConnection m1674a(URL url) throws IOException {
        HttpURLConnection httpURLConnection;
        if (UriUtil.HTTPS_SCHEME.equals(url.getProtocol().toLowerCase())) {
            httpURLConnection = (HttpsURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
        } else {
            httpURLConnection = (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
        }
        int i = this.f2688j;
        httpURLConnection.setConnectTimeout(i);
        httpURLConnection.setReadTimeout(i);
        httpURLConnection.setDoInput(true);
        httpURLConnection.setDoOutput(true);
        return httpURLConnection;
    }
}
