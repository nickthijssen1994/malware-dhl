package com.p051jd.fireeye.common;

import android.util.Base64;
import com.p051jd.fireeye.security.C1498b;
import java.io.IOException;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.fireeye.common.b */
/* loaded from: classes.dex */
public final class C1456b {

    /* renamed from: a */
    public static final String f2600a;

    /* renamed from: b */
    public static final String f2601b;

    /* renamed from: c */
    public static final String f2602c;

    /* renamed from: d */
    public static final String f2603d;

    /* renamed from: a */
    public static byte[] m1921a(String str) throws IOException {
        return Base64.decode(str.getBytes(), 0);
    }

    /* renamed from: a */
    public static String m1919a(byte[] bArr) {
        return new String(Base64.encode(bArr, 0));
    }

    /* renamed from: a */
    public static String m1922a() {
        Random random = new Random();
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < 16; i++) {
            stringBuffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".charAt(random.nextInt(62)));
        }
        return stringBuffer.toString();
    }

    /* renamed from: a */
    private static byte[] m1918a(byte[] bArr, String str, int i) throws Exception {
        SecretKeySpec secretKeySpec = new SecretKeySpec(str.getBytes("UTF-8"), f2600a);
        IvParameterSpec ivParameterSpec = new IvParameterSpec(f2603d.getBytes("UTF-8"));
        Cipher instance = Cipher.getInstance("AES/CBC/PKCS5Padding");
        instance.init(i, secretKeySpec, ivParameterSpec);
        return instance.doFinal(bArr);
    }

    /* renamed from: b */
    private static String m1916b(String str, String str2) throws Exception {
        return m1919a(m1918a(str.getBytes("UTF-8"), str2, 1));
    }

    /* renamed from: b */
    public static JSONObject m1917b(String str) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("appkey", C1498b.m1620i());
            jSONObject.put("head", C1498b.m1622g());
            jSONObject.put("info", URLEncoder.encode(m1919a(m1918a(str.getBytes("UTF-8"), C1498b.m1621h(), 1)), "UTF-8"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jSONObject;
    }

    /* renamed from: c */
    private static String m1915c(String str, String str2) throws Exception {
        return new String(m1918a(m1921a(str), str2, 2), "UTF-8");
    }

    /* renamed from: a */
    public static String m1920a(String str, String str2) throws Exception {
        PublicKey generatePublic = KeyFactory.getInstance(f2601b).generatePublic(new X509EncodedKeySpec(m1921a(str2)));
        Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        instance.init(1, generatePublic);
        return m1919a(instance.doFinal(str.getBytes("UTF-8")));
    }

    /* renamed from: d */
    private static String m1914d(String str, String str2) throws Exception {
        PrivateKey generatePrivate = KeyFactory.getInstance(f2601b).generatePrivate(new PKCS8EncodedKeySpec(m1921a(str2)));
        Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        instance.init(2, generatePrivate);
        return new String(instance.doFinal(m1921a(str)), "UTF-8");
    }
}
