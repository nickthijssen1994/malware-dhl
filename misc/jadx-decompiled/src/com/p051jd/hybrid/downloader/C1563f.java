package com.p051jd.hybrid.downloader;

import android.content.Context;
import android.os.Process;
import android.util.Log;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.HttpStackFactory;
import com.p051jd.framework.network.JDResponse;
import com.p051jd.framework.network.error.JDError;
import com.p051jd.framework.network.error.JDFileDownloadError;
import com.p051jd.framework.network.file.JDFileGuider;
import com.p051jd.framework.network.filedown.JDFileService;
import com.p051jd.framework.network.request.JDFileRequest;
import com.p051jd.hybrid.downloader.AbstractC1559e;
import com.p051jd.hybrid.downloader.p080a.AbstractC1546a;
import com.p051jd.hybrid.downloader.p080a.C1547b;
import com.p051jd.hybrid.downloader.p080a.C1549c;
import com.p051jd.libs.hybrid.base.C1841a;
import com.p051jd.libs.hybrid.base.p095b.C1853c;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/* renamed from: com.jd.hybrid.downloader.f */
/* loaded from: classes.dex */
public class C1563f {

    /* renamed from: d */
    private static C1563f f2816d;

    /* renamed from: f */
    private Context f2821f;

    /* renamed from: a */
    public AtomicInteger f2817a = new AtomicInteger(0);

    /* renamed from: e */
    private HttpStackFactory f2820e = new HttpStackFactory();

    /* renamed from: c */
    volatile ConcurrentLinkedQueue<Integer> f2819c = new ConcurrentLinkedQueue<>();

    /* renamed from: b */
    final ThreadPoolExecutor f2818b = new ThreadPoolExecutor(1, 1, 15, TimeUnit.SECONDS, new PriorityBlockingQueue(), new ThreadPoolExecutor.DiscardOldestPolicy());

    /* renamed from: h */
    private final Object f2823h = new Object();

    /* renamed from: g */
    private List<AbstractC1546a> f2822g = new ArrayList(4);

    /* renamed from: com.jd.hybrid.downloader.f$a */
    /* loaded from: classes.dex */
    class RunnableC1565a implements Comparable<RunnableC1565a>, Runnable {

        /* renamed from: b */
        private final JDFileRequest f2826b;

        /* renamed from: c */
        private final int f2827c;

        public RunnableC1565a(JDFileRequest jDFileRequest, int i) {
            this.f2826b = jDFileRequest;
            this.f2827c = i;
        }

        @Override // java.lang.Comparable
        public final /* bridge */ /* synthetic */ int compareTo(RunnableC1565a aVar) {
            return aVar.f2827c - this.f2827c;
        }

        /* JADX WARN: Type inference failed for: r10v0, types: [com.jd.framework.network.file.JDFileResponseListener] */
        /* JADX WARN: Unknown variable types count: 1 */
        @Override // java.lang.Runnable
        /* Code decompiled incorrectly, please refer to instructions dump */
        public final void run() {
            C1563f.this.f2819c.remove(Integer.valueOf(hashCode()));
            synchronized (C1563f.this.f2823h) {
                while (!C1563f.m1549a(C1563f.this)) {
                    try {
                        C1563f.this.f2823h.wait();
                    } catch (InterruptedException e) {
                        C1853c.m1312a("HybridSerialFileDownloader", e);
                    }
                }
            }
            if (VolleyLog.DEBUG) {
                C1853c.m1308c("JDFileDownloader", "execute file request -> " + this.f2826b.getUrl());
            }
            Context context = C1563f.this.f2821f;
            JDFileRequest jDFileRequest = this.f2826b;
            HttpStackFactory httpStackFactory = C1563f.this.f2820e;
            AbstractC1559e bVar = jDFileRequest.getUseOkhttpFlag() ? new AbstractC1559e.C1561b(httpStackFactory) : new AbstractC1559e.C1562c(httpStackFactory);
            Process.setThreadPriority(jDFileRequest.isTopPriority() ? -8 : 19);
            if (VolleyLog.DEBUG) {
                Log.d("DownloadImpl", "Start Downloading----> , isExclusiveTask : " + jDFileRequest.isExclusiveTask() + "RequestUrl:" + jDFileRequest.getUrl());
            }
            boolean isBreakpointTransmission = jDFileRequest.isBreakpointTransmission();
            ?? responseListener = jDFileRequest.getResponseListener();
            responseListener.onStart();
            try {
                AbstractC1559e.C1560a aVar = (AbstractC1559e.C1560a) bVar.mo1551a(jDFileRequest);
                try {
                    InputStream inputStream = aVar.f2813d;
                    long j = aVar.f2814e;
                    Map<String, String> map = aVar.f2815f;
                    JDFileGuider savePath = jDFileRequest.getSavePath();
                    savePath.setAvailableSize(j);
                    JDFileService.resetSaveFileParam(jDFileRequest, context, savePath, savePath.isImmutable(), savePath.getSpace());
                    File fileSavePath = JDFileService.getFileSavePath(savePath, context);
                    if (fileSavePath == null) {
                        if (VolleyLog.DEBUG) {
                            Log.d("DownloadImpl", "requestID : " + jDFileRequest.getSequence() + ",下载失败，存储空间不足！");
                        }
                        throw new IOException("Not enough storage space！");
                    }
                    if (isBreakpointTransmission) {
                        AbstractC1557d.m1552a(inputStream, fileSavePath, (long) jDFileRequest.getStartPosBreakpointTransmission(), responseListener, savePath.getAvailableSize(), jDFileRequest);
                    } else {
                        BufferedOutputStream openFileOutput = JDFileService.openFileOutput(jDFileRequest.getSavePath(), fileSavePath);
                        AbstractC1557d.m1553a(inputStream, openFileOutput, responseListener, savePath.getAvailableSize(), jDFileRequest);
                        if (openFileOutput != null) {
                            openFileOutput.flush();
                        }
                        if (openFileOutput != null) {
                            openFileOutput.close();
                        }
                        if (jDFileRequest.isStop()) {
                            fileSavePath.delete();
                        }
                    }
                    if (jDFileRequest.isStop()) {
                        responseListener.onPause();
                    } else if (fileSavePath.exists()) {
                        JDResponse jDResponse = new JDResponse();
                        jDResponse.setData(fileSavePath);
                        jDResponse.setHeaders(map);
                        responseListener.onEnd(jDResponse);
                    } else {
                        throw new IllegalStateException("download finished but file not exist");
                    }
                    if (VolleyLog.DEBUG) {
                        Log.d("DownloadImpl", "download success:" + jDFileRequest.getUrl());
                    }
                    inputStream.close();
                } catch (Throwable th) {
                    if (VolleyLog.DEBUG) {
                        th.printStackTrace();
                    }
                    responseListener.onError(new JDFileDownloadError(jDFileRequest.getUrl(), th, false));
                }
            } catch (Throwable th2) {
                if (VolleyLog.DEBUG) {
                    th2.printStackTrace();
                }
                if (VolleyLog.DEBUG) {
                    Log.e("DownloadImpl", "errorInfo:" + th2.toString());
                    Log.d("DownloadImpl", "FileRequest URL : " + jDFileRequest.getUrl());
                }
                responseListener.onError(th2 instanceof JDError ? new JDFileDownloadError((JDError) th2, false) : new JDFileDownloadError(jDFileRequest.getUrl(), th2, false));
            }
        }
    }

    /* renamed from: com.jd.hybrid.downloader.f$b */
    /* loaded from: classes.dex */
    public static class C1566b implements Comparable<C1566b> {

        /* renamed from: a */
        JDFileRequest f2828a;

        /* renamed from: b */
        int f2829b;

        public C1566b(JDFileRequest jDFileRequest, int i) {
            this.f2828a = jDFileRequest;
            this.f2829b = i;
        }

        @Override // java.lang.Comparable
        public final /* bridge */ /* synthetic */ int compareTo(C1566b bVar) {
            return bVar.f2829b - this.f2829b;
        }
    }

    private C1563f(Context context) {
        this.f2821f = context.getApplicationContext();
        this.f2818b.allowCoreThreadTimeOut(true);
        this.f2822g.add(new C1549c(this.f2823h));
        this.f2822g.add(new C1547b(this.f2821f, this.f2823h));
        C1841a.m1350a(new C1841a.AbstractC1842a() { // from class: com.jd.hybrid.downloader.f.1
            @Override // com.p051jd.libs.hybrid.base.C1841a.AbstractC1842a
            /* renamed from: a */
            public final void mo1335a() {
                if (C1563f.m1549a(C1563f.this)) {
                    synchronized (C1563f.this.f2823h) {
                        C1563f.this.f2823h.notifyAll();
                    }
                }
            }
        });
    }

    /* renamed from: a */
    public static C1563f m1550a(Context context) {
        if (f2816d == null) {
            synchronized (C1563f.class) {
                if (f2816d == null) {
                    f2816d = new C1563f(context);
                }
            }
        }
        return f2816d;
    }

    /* renamed from: a */
    static /* synthetic */ boolean m1549a(C1563f fVar) {
        boolean z = true;
        for (AbstractC1546a aVar : fVar.f2822g) {
            if (!aVar.mo1578a()) {
                aVar.mo1577b();
                z = false;
            } else if (fVar.f2819c.isEmpty()) {
                aVar.mo1576c();
            }
        }
        return z;
    }
}
