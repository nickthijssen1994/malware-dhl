package com.p051jd.libs.hybrid.preload.p100a;

import android.net.Uri;
import android.text.TextUtils;
import com.huawei.hms.framework.common.ContainerUtils;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.jdsdk.network.toolbox.HttpSetting;
import com.p051jd.framework.json.JDJSONObject;
import com.p051jd.libs.hybrid.base.p095b.C1853c;
import com.tencent.smtt.sdk.CookieManager;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;

/* renamed from: com.jd.libs.hybrid.preload.a.d */
/* loaded from: classes.dex */
public final class C1931d extends HttpSetting {

    /* renamed from: a */
    public boolean f3358a;

    /* renamed from: f */
    private String f3363f;

    /* renamed from: b */
    public JDJSONObject f3359b = new JDJSONObject();

    /* renamed from: c */
    public Map<String, String> f3360c = new HashMap();

    /* renamed from: g */
    private String f3364g = "";

    /* renamed from: d */
    public String f3361d = "";

    /* renamed from: e */
    public OkHttpClient f3362e = m1096a();

    public C1931d(String str, boolean z) {
        this.f3363f = str.trim();
        this.f3358a = z;
    }

    /* renamed from: a */
    private static String m1095a(String str, Map<String, String> map) {
        if (TextUtils.isEmpty(str)) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append(str);
        sb2.append(str.contains("?") ? ContainerUtils.FIELD_DELIMITER : "?");
        sb.append(sb2.toString());
        if (map != null && !map.isEmpty()) {
            for (String str2 : map.keySet()) {
                sb.append(str2);
                sb.append(ContainerUtils.KEY_VALUE_DELIMITER);
                sb.append(map.get(str2));
                sb.append(ContainerUtils.FIELD_DELIMITER);
            }
        }
        return sb.deleteCharAt(sb.length() - 1).toString();
    }

    /* renamed from: a */
    public final OkHttpClient m1096a() {
        try {
            if (this.f3362e == null) {
                return ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder()).connectTimeout(5000, TimeUnit.MILLISECONDS).readTimeout(3000, TimeUnit.MILLISECONDS).writeTimeout(3000, TimeUnit.MILLISECONDS).followRedirects(false).followSslRedirects(false).retryOnConnectionFailure(false).build();
            }
        } catch (Exception e) {
            C1853c.m1308c("OKHttpSetting", "initOkHttpClient error --> " + e.toString());
        }
        return this.f3362e;
    }

    /* JADX WARN: Removed duplicated region for block: B:36:0x00e4  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00e7  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0102  */
    /* renamed from: b */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final Request m1094b() {
        String str;
        Map headerMap;
        C1853c.m1308c("OKHttpSetting", "preload(JSONP/Http) finalUrl --> " + getUrl());
        Map<String, Object> hashMap = new HashMap<>();
        JDJSONObject jDJSONObject = this.f3359b;
        if (jDJSONObject != null) {
            hashMap = jDJSONObject.getInnerMap();
        }
        FormBody.Builder builder = new FormBody.Builder();
        for (String str2 : hashMap.keySet()) {
            builder.add(str2, hashMap.get(str2) != null ? hashMap.get(str2).toString() : "");
        }
        FormBody build = builder.build();
        Request.Builder builder2 = new Request.Builder();
        if (isPost()) {
            builder2.post(build);
        } else {
            builder2.get();
        }
        Request.Builder addHeader = builder2.url(m1095a(getRequestUrl(), this.f3360c)).removeHeader("User-Agent").addHeader("User-Agent", this.f3361d);
        if (!TextUtils.isEmpty(this.f3363f)) {
            Uri parse = !TextUtils.isEmpty(this.f3363f) ? Uri.parse(this.f3363f) : null;
            if (parse != null) {
                StringBuilder sb = new StringBuilder();
                sb.append(parse.getScheme() == null ? "" : parse.getScheme());
                sb.append("://");
                sb.append(parse.getHost() == null ? "" : parse.getHost());
                str = sb.toString();
                addHeader.addHeader("Origin", str).addHeader("Cookie", CookieManager.getInstance().getCookie(this.f3363f) != null ? "" : CookieManager.getInstance().getCookie(this.f3363f)).addHeader("Referer", this.f3363f);
                headerMap = getHeaderMap();
                if (headerMap != null) {
                    for (String str3 : headerMap.keySet()) {
                        builder2.addHeader(str3, (String) headerMap.get(str3));
                    }
                }
                return builder2.build();
            }
        }
        str = "";
        addHeader.addHeader("Origin", str).addHeader("Cookie", CookieManager.getInstance().getCookie(this.f3363f) != null ? "" : CookieManager.getInstance().getCookie(this.f3363f)).addHeader("Referer", this.f3363f);
        headerMap = getHeaderMap();
        if (headerMap != null) {
        }
        return builder2.build();
    }

    public final String getRequestUrl() {
        return TextUtils.isEmpty(this.f3364g) ? "" : this.f3364g;
    }

    public final void setRequestUrl(String str) {
        this.f3364g = str;
    }
}
