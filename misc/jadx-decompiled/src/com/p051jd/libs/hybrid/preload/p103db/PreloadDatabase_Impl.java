package com.p051jd.libs.hybrid.preload.p103db;

import androidx.room.DatabaseConfiguration;
import androidx.room.InvalidationTracker;
import androidx.room.RoomDatabase;
import androidx.room.RoomOpenHelper;
import androidx.room.util.TableInfo;
import androidx.sqlite.db.SupportSQLiteDatabase;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import com.p051jd.libs.hybrid.preload.p103db.p104a.AbstractC1944a;
import com.p051jd.libs.hybrid.preload.p103db.p104a.C1945b;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

/* renamed from: com.jd.libs.hybrid.preload.db.PreloadDatabase_Impl */
/* loaded from: classes.dex */
public final class PreloadDatabase_Impl extends PreloadDatabase {

    /* renamed from: a */
    private volatile AbstractC1944a f3381a;

    @Override // com.p051jd.libs.hybrid.preload.p103db.PreloadDatabase
    /* renamed from: a */
    public final AbstractC1944a mo1080a() {
        AbstractC1944a aVar;
        if (this.f3381a != null) {
            return this.f3381a;
        }
        synchronized (this) {
            if (this.f3381a == null) {
                this.f3381a = new C1945b(this);
            }
            aVar = this.f3381a;
        }
        return aVar;
    }

    public final void clearAllTables() {
        super.assertNotMainThread();
        SupportSQLiteDatabase writableDatabase = super.getOpenHelper().getWritableDatabase();
        try {
            super.beginTransaction();
            writableDatabase.execSQL("DELETE FROM `HybridPreloadInfo`");
            super.setTransactionSuccessful();
        } finally {
            super.endTransaction();
            writableDatabase.query("PRAGMA wal_checkpoint(FULL)").close();
            if (!writableDatabase.inTransaction()) {
                writableDatabase.execSQL("VACUUM");
            }
        }
    }

    protected final InvalidationTracker createInvalidationTracker() {
        return new InvalidationTracker(this, new String[]{"HybridPreloadInfo"});
    }

    protected final SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration databaseConfiguration) {
        return databaseConfiguration.sqliteOpenHelperFactory.create(SupportSQLiteOpenHelper.Configuration.builder(databaseConfiguration.context).name(databaseConfiguration.name).callback(new RoomOpenHelper(databaseConfiguration, new RoomOpenHelper.Delegate() { // from class: com.jd.libs.hybrid.preload.db.PreloadDatabase_Impl.1
            public final void createAllTables(SupportSQLiteDatabase supportSQLiteDatabase) {
                supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `HybridPreloadInfo` (`appid` TEXT NOT NULL, `url` TEXT NOT NULL, `originalUrl` TEXT, `requestUrl` TEXT, `requestType` TEXT, `functionId` TEXT, `method` TEXT, `header` TEXT, `params` TEXT, `body` TEXT, `extraKeys` TEXT, `mappings` TEXT, `urlParamsState` INTEGER NOT NULL, `appMin` TEXT, `appMax` TEXT, PRIMARY KEY(`appid`))");
                supportSQLiteDatabase.execSQL("CREATE UNIQUE INDEX `index_HybridPreloadInfo_url` ON `HybridPreloadInfo` (`url`)");
                supportSQLiteDatabase.execSQL("CREATE UNIQUE INDEX `index_HybridPreloadInfo_originalUrl` ON `HybridPreloadInfo` (`originalUrl`)");
                supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
                supportSQLiteDatabase.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, \"02db638ec98c2a7528df29cc2d0a10a0\")");
            }

            public final void dropAllTables(SupportSQLiteDatabase supportSQLiteDatabase) {
                supportSQLiteDatabase.execSQL("DROP TABLE IF EXISTS `HybridPreloadInfo`");
            }

            protected final void onCreate(SupportSQLiteDatabase supportSQLiteDatabase) {
                if (PreloadDatabase_Impl.this.mCallbacks != null) {
                    int size = PreloadDatabase_Impl.this.mCallbacks.size();
                    for (int i = 0; i < size; i++) {
                        ((RoomDatabase.Callback) PreloadDatabase_Impl.this.mCallbacks.get(i)).onCreate(supportSQLiteDatabase);
                    }
                }
            }

            public final void onOpen(SupportSQLiteDatabase supportSQLiteDatabase) {
                PreloadDatabase_Impl.this.mDatabase = supportSQLiteDatabase;
                PreloadDatabase_Impl.this.internalInitInvalidationTracker(supportSQLiteDatabase);
                if (PreloadDatabase_Impl.this.mCallbacks != null) {
                    int size = PreloadDatabase_Impl.this.mCallbacks.size();
                    for (int i = 0; i < size; i++) {
                        ((RoomDatabase.Callback) PreloadDatabase_Impl.this.mCallbacks.get(i)).onOpen(supportSQLiteDatabase);
                    }
                }
            }

            protected final void validateMigration(SupportSQLiteDatabase supportSQLiteDatabase) {
                HashMap hashMap = new HashMap(15);
                hashMap.put("appid", new TableInfo.Column("appid", "TEXT", true, 1));
                hashMap.put("url", new TableInfo.Column("url", "TEXT", true, 0));
                hashMap.put("originalUrl", new TableInfo.Column("originalUrl", "TEXT", false, 0));
                hashMap.put("requestUrl", new TableInfo.Column("requestUrl", "TEXT", false, 0));
                hashMap.put("requestType", new TableInfo.Column("requestType", "TEXT", false, 0));
                hashMap.put("functionId", new TableInfo.Column("functionId", "TEXT", false, 0));
                hashMap.put("method", new TableInfo.Column("method", "TEXT", false, 0));
                hashMap.put("header", new TableInfo.Column("header", "TEXT", false, 0));
                hashMap.put("params", new TableInfo.Column("params", "TEXT", false, 0));
                hashMap.put("body", new TableInfo.Column("body", "TEXT", false, 0));
                hashMap.put("extraKeys", new TableInfo.Column("extraKeys", "TEXT", false, 0));
                hashMap.put("mappings", new TableInfo.Column("mappings", "TEXT", false, 0));
                hashMap.put("urlParamsState", new TableInfo.Column("urlParamsState", "INTEGER", true, 0));
                hashMap.put("appMin", new TableInfo.Column("appMin", "TEXT", false, 0));
                hashMap.put("appMax", new TableInfo.Column("appMax", "TEXT", false, 0));
                HashSet hashSet = new HashSet(0);
                HashSet hashSet2 = new HashSet(2);
                hashSet2.add(new TableInfo.Index("index_HybridPreloadInfo_url", true, Arrays.asList("url")));
                hashSet2.add(new TableInfo.Index("index_HybridPreloadInfo_originalUrl", true, Arrays.asList("originalUrl")));
                TableInfo tableInfo = new TableInfo("HybridPreloadInfo", hashMap, hashSet, hashSet2);
                TableInfo read = TableInfo.read(supportSQLiteDatabase, "HybridPreloadInfo");
                if (!tableInfo.equals(read)) {
                    throw new IllegalStateException("Migration didn't properly handle HybridPreloadInfo(com.jd.libs.hybrid.preload.entity.PreloadInfoEntity).\n Expected:\n" + tableInfo + "\n Found:\n" + read);
                }
            }
        }, "02db638ec98c2a7528df29cc2d0a10a0", "137dcbd1c8a4d06d62a83c3e7e040c23")).build());
    }
}
