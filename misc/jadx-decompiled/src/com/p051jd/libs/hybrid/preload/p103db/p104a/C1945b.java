package com.p051jd.libs.hybrid.preload.p103db.p104a;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.jd.libs.hybrid.preload.entity.PreloadInfoEntity;
import com.p051jd.libs.hybrid.preload.p103db.converter.RoomJdJsonObjConverts;
import com.p051jd.libs.hybrid.preload.p103db.converter.RoomListStrConverts;
import com.p051jd.libs.hybrid.preload.p103db.converter.RoomMapConverts;
import java.util.ArrayList;
import java.util.List;

/* renamed from: com.jd.libs.hybrid.preload.db.a.b */
/* loaded from: classes.dex */
public final class C1945b implements AbstractC1944a {

    /* renamed from: a */
    final RoomMapConverts f3383a = new RoomMapConverts();

    /* renamed from: b */
    final RoomJdJsonObjConverts f3384b = new RoomJdJsonObjConverts();

    /* renamed from: c */
    final RoomListStrConverts f3385c = new RoomListStrConverts();

    /* renamed from: d */
    private final RoomDatabase f3386d;

    /* renamed from: e */
    private final EntityInsertionAdapter f3387e;

    /* renamed from: f */
    private final EntityDeletionOrUpdateAdapter f3388f;

    /* renamed from: g */
    private final EntityDeletionOrUpdateAdapter f3389g;

    /* renamed from: h */
    private final SharedSQLiteStatement f3390h;

    public C1945b(RoomDatabase roomDatabase) {
        this.f3386d = roomDatabase;
        this.f3387e = new EntityInsertionAdapter<PreloadInfoEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.preload.db.a.b.1
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                PreloadInfoEntity preloadInfoEntity = (PreloadInfoEntity) obj;
                if (preloadInfoEntity.getAppid() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, preloadInfoEntity.getAppid());
                }
                if (preloadInfoEntity.getUrl() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, preloadInfoEntity.getUrl());
                }
                if (preloadInfoEntity.getOriginalUrl() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, preloadInfoEntity.getOriginalUrl());
                }
                if (preloadInfoEntity.getRequestUrl() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, preloadInfoEntity.getRequestUrl());
                }
                if (preloadInfoEntity.getRequestType() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, preloadInfoEntity.getRequestType());
                }
                if (preloadInfoEntity.getFunctionId() == null) {
                    supportSQLiteStatement.bindNull(6);
                } else {
                    supportSQLiteStatement.bindString(6, preloadInfoEntity.getFunctionId());
                }
                if (preloadInfoEntity.getMethod() == null) {
                    supportSQLiteStatement.bindNull(7);
                } else {
                    supportSQLiteStatement.bindString(7, preloadInfoEntity.getMethod());
                }
                String roomMapConverts = C1945b.this.f3383a.toString(preloadInfoEntity.getHeader());
                if (roomMapConverts == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, roomMapConverts);
                }
                String roomMapConverts2 = C1945b.this.f3383a.toString(preloadInfoEntity.getParams());
                if (roomMapConverts2 == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, roomMapConverts2);
                }
                String roomJdJsonObjConverts = C1945b.this.f3384b.toString(preloadInfoEntity.getBody());
                if (roomJdJsonObjConverts == null) {
                    supportSQLiteStatement.bindNull(10);
                } else {
                    supportSQLiteStatement.bindString(10, roomJdJsonObjConverts);
                }
                String roomListStrConverts = C1945b.this.f3385c.toString(preloadInfoEntity.getExtraKeys());
                if (roomListStrConverts == null) {
                    supportSQLiteStatement.bindNull(11);
                } else {
                    supportSQLiteStatement.bindString(11, roomListStrConverts);
                }
                String roomMapConverts3 = C1945b.this.f3383a.toString(preloadInfoEntity.getMappings());
                if (roomMapConverts3 == null) {
                    supportSQLiteStatement.bindNull(12);
                } else {
                    supportSQLiteStatement.bindString(12, roomMapConverts3);
                }
                supportSQLiteStatement.bindLong(13, (long) preloadInfoEntity.getUrlParamsState());
                if (preloadInfoEntity.getAppMin() == null) {
                    supportSQLiteStatement.bindNull(14);
                } else {
                    supportSQLiteStatement.bindString(14, preloadInfoEntity.getAppMin());
                }
                if (preloadInfoEntity.getAppMax() == null) {
                    supportSQLiteStatement.bindNull(15);
                } else {
                    supportSQLiteStatement.bindString(15, preloadInfoEntity.getAppMax());
                }
            }

            public final String createQuery() {
                return "INSERT OR REPLACE INTO `HybridPreloadInfo`(`appid`,`url`,`originalUrl`,`requestUrl`,`requestType`,`functionId`,`method`,`header`,`params`,`body`,`extraKeys`,`mappings`,`urlParamsState`,`appMin`,`appMax`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            }
        };
        this.f3388f = new EntityDeletionOrUpdateAdapter<PreloadInfoEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.preload.db.a.b.2
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                PreloadInfoEntity preloadInfoEntity = (PreloadInfoEntity) obj;
                if (preloadInfoEntity.getAppid() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, preloadInfoEntity.getAppid());
                }
            }

            public final String createQuery() {
                return "DELETE FROM `HybridPreloadInfo` WHERE `appid` = ?";
            }
        };
        this.f3389g = new EntityDeletionOrUpdateAdapter<PreloadInfoEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.preload.db.a.b.3
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                PreloadInfoEntity preloadInfoEntity = (PreloadInfoEntity) obj;
                if (preloadInfoEntity.getAppid() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, preloadInfoEntity.getAppid());
                }
                if (preloadInfoEntity.getUrl() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, preloadInfoEntity.getUrl());
                }
                if (preloadInfoEntity.getOriginalUrl() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, preloadInfoEntity.getOriginalUrl());
                }
                if (preloadInfoEntity.getRequestUrl() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, preloadInfoEntity.getRequestUrl());
                }
                if (preloadInfoEntity.getRequestType() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, preloadInfoEntity.getRequestType());
                }
                if (preloadInfoEntity.getFunctionId() == null) {
                    supportSQLiteStatement.bindNull(6);
                } else {
                    supportSQLiteStatement.bindString(6, preloadInfoEntity.getFunctionId());
                }
                if (preloadInfoEntity.getMethod() == null) {
                    supportSQLiteStatement.bindNull(7);
                } else {
                    supportSQLiteStatement.bindString(7, preloadInfoEntity.getMethod());
                }
                String roomMapConverts = C1945b.this.f3383a.toString(preloadInfoEntity.getHeader());
                if (roomMapConverts == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, roomMapConverts);
                }
                String roomMapConverts2 = C1945b.this.f3383a.toString(preloadInfoEntity.getParams());
                if (roomMapConverts2 == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, roomMapConverts2);
                }
                String roomJdJsonObjConverts = C1945b.this.f3384b.toString(preloadInfoEntity.getBody());
                if (roomJdJsonObjConverts == null) {
                    supportSQLiteStatement.bindNull(10);
                } else {
                    supportSQLiteStatement.bindString(10, roomJdJsonObjConverts);
                }
                String roomListStrConverts = C1945b.this.f3385c.toString(preloadInfoEntity.getExtraKeys());
                if (roomListStrConverts == null) {
                    supportSQLiteStatement.bindNull(11);
                } else {
                    supportSQLiteStatement.bindString(11, roomListStrConverts);
                }
                String roomMapConverts3 = C1945b.this.f3383a.toString(preloadInfoEntity.getMappings());
                if (roomMapConverts3 == null) {
                    supportSQLiteStatement.bindNull(12);
                } else {
                    supportSQLiteStatement.bindString(12, roomMapConverts3);
                }
                supportSQLiteStatement.bindLong(13, (long) preloadInfoEntity.getUrlParamsState());
                if (preloadInfoEntity.getAppMin() == null) {
                    supportSQLiteStatement.bindNull(14);
                } else {
                    supportSQLiteStatement.bindString(14, preloadInfoEntity.getAppMin());
                }
                if (preloadInfoEntity.getAppMax() == null) {
                    supportSQLiteStatement.bindNull(15);
                } else {
                    supportSQLiteStatement.bindString(15, preloadInfoEntity.getAppMax());
                }
                if (preloadInfoEntity.getAppid() == null) {
                    supportSQLiteStatement.bindNull(16);
                } else {
                    supportSQLiteStatement.bindString(16, preloadInfoEntity.getAppid());
                }
            }

            public final String createQuery() {
                return "UPDATE OR ABORT `HybridPreloadInfo` SET `appid` = ?,`url` = ?,`originalUrl` = ?,`requestUrl` = ?,`requestType` = ?,`functionId` = ?,`method` = ?,`header` = ?,`params` = ?,`body` = ?,`extraKeys` = ?,`mappings` = ?,`urlParamsState` = ?,`appMin` = ?,`appMax` = ? WHERE `appid` = ?";
            }
        };
        this.f3390h = new SharedSQLiteStatement(roomDatabase) { // from class: com.jd.libs.hybrid.preload.db.a.b.4
            public final String createQuery() {
                return "DELETE FROM hybridpreloadinfo";
            }
        };
    }

    @Override // com.p051jd.libs.hybrid.preload.p103db.p104a.AbstractC1944a
    /* renamed from: a */
    public final PreloadInfoEntity mo1070a(String str) {
        RoomSQLiteQuery roomSQLiteQuery;
        Throwable th;
        PreloadInfoEntity preloadInfoEntity;
        RoomSQLiteQuery acquire = RoomSQLiteQuery.acquire("SELECT * FROM HybridPreloadInfo WHERE url=? OR originalUrl=? LIMIT 1", 2);
        if (str == null) {
            acquire.bindNull(1);
        } else {
            acquire.bindString(1, str);
        }
        if (str == null) {
            acquire.bindNull(2);
        } else {
            acquire.bindString(2, str);
        }
        Cursor query = this.f3386d.query(acquire);
        try {
            int columnIndexOrThrow = query.getColumnIndexOrThrow("appid");
            int columnIndexOrThrow2 = query.getColumnIndexOrThrow("url");
            int columnIndexOrThrow3 = query.getColumnIndexOrThrow("originalUrl");
            int columnIndexOrThrow4 = query.getColumnIndexOrThrow("requestUrl");
            int columnIndexOrThrow5 = query.getColumnIndexOrThrow("requestType");
            int columnIndexOrThrow6 = query.getColumnIndexOrThrow("functionId");
            int columnIndexOrThrow7 = query.getColumnIndexOrThrow("method");
            int columnIndexOrThrow8 = query.getColumnIndexOrThrow("header");
            int columnIndexOrThrow9 = query.getColumnIndexOrThrow("params");
            int columnIndexOrThrow10 = query.getColumnIndexOrThrow("body");
            int columnIndexOrThrow11 = query.getColumnIndexOrThrow("extraKeys");
            int columnIndexOrThrow12 = query.getColumnIndexOrThrow("mappings");
            int columnIndexOrThrow13 = query.getColumnIndexOrThrow("urlParamsState");
            roomSQLiteQuery = acquire;
            try {
                int columnIndexOrThrow14 = query.getColumnIndexOrThrow("appMin");
                int columnIndexOrThrow15 = query.getColumnIndexOrThrow("appMax");
                if (query.moveToFirst()) {
                    preloadInfoEntity = new PreloadInfoEntity();
                    preloadInfoEntity.setAppid(query.getString(columnIndexOrThrow));
                    preloadInfoEntity.setUrl(query.getString(columnIndexOrThrow2));
                    preloadInfoEntity.setOriginalUrl(query.getString(columnIndexOrThrow3));
                    preloadInfoEntity.setRequestUrl(query.getString(columnIndexOrThrow4));
                    preloadInfoEntity.setRequestType(query.getString(columnIndexOrThrow5));
                    preloadInfoEntity.setFunctionId(query.getString(columnIndexOrThrow6));
                    preloadInfoEntity.setMethod(query.getString(columnIndexOrThrow7));
                    preloadInfoEntity.setHeader(this.f3383a.toMap(query.getString(columnIndexOrThrow8)));
                    preloadInfoEntity.setParams(this.f3383a.toMap(query.getString(columnIndexOrThrow9)));
                    preloadInfoEntity.setBody(this.f3384b.toJson(query.getString(columnIndexOrThrow10)));
                    preloadInfoEntity.setExtraKeys(this.f3385c.toArray(query.getString(columnIndexOrThrow11)));
                    preloadInfoEntity.setMappings(this.f3383a.toMap(query.getString(columnIndexOrThrow12)));
                    preloadInfoEntity.setUrlParamsState(query.getInt(columnIndexOrThrow13));
                    preloadInfoEntity.setAppMin(query.getString(columnIndexOrThrow14));
                    preloadInfoEntity.setAppMax(query.getString(columnIndexOrThrow15));
                } else {
                    preloadInfoEntity = null;
                }
                query.close();
                roomSQLiteQuery.release();
                return preloadInfoEntity;
            } catch (Throwable th2) {
                th = th2;
                query.close();
                roomSQLiteQuery.release();
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            roomSQLiteQuery = acquire;
        }
    }

    @Override // com.p051jd.libs.hybrid.preload.p103db.p104a.AbstractC1944a
    /* renamed from: a */
    public final List<PreloadInfoEntity> mo1071a() {
        RoomSQLiteQuery roomSQLiteQuery;
        Throwable th;
        C1945b bVar = this;
        RoomSQLiteQuery acquire = RoomSQLiteQuery.acquire("SELECT * FROM HybridPreloadInfo", 0);
        Cursor query = bVar.f3386d.query(acquire);
        try {
            int columnIndexOrThrow = query.getColumnIndexOrThrow("appid");
            int columnIndexOrThrow2 = query.getColumnIndexOrThrow("url");
            int columnIndexOrThrow3 = query.getColumnIndexOrThrow("originalUrl");
            int columnIndexOrThrow4 = query.getColumnIndexOrThrow("requestUrl");
            int columnIndexOrThrow5 = query.getColumnIndexOrThrow("requestType");
            int columnIndexOrThrow6 = query.getColumnIndexOrThrow("functionId");
            int columnIndexOrThrow7 = query.getColumnIndexOrThrow("method");
            int columnIndexOrThrow8 = query.getColumnIndexOrThrow("header");
            int columnIndexOrThrow9 = query.getColumnIndexOrThrow("params");
            int columnIndexOrThrow10 = query.getColumnIndexOrThrow("body");
            int columnIndexOrThrow11 = query.getColumnIndexOrThrow("extraKeys");
            int columnIndexOrThrow12 = query.getColumnIndexOrThrow("mappings");
            int columnIndexOrThrow13 = query.getColumnIndexOrThrow("urlParamsState");
            roomSQLiteQuery = acquire;
            try {
                int columnIndexOrThrow14 = query.getColumnIndexOrThrow("appMin");
                int columnIndexOrThrow15 = query.getColumnIndexOrThrow("appMax");
                ArrayList arrayList = new ArrayList(query.getCount());
                while (query.moveToNext()) {
                    PreloadInfoEntity preloadInfoEntity = new PreloadInfoEntity();
                    preloadInfoEntity.setAppid(query.getString(columnIndexOrThrow));
                    preloadInfoEntity.setUrl(query.getString(columnIndexOrThrow2));
                    preloadInfoEntity.setOriginalUrl(query.getString(columnIndexOrThrow3));
                    preloadInfoEntity.setRequestUrl(query.getString(columnIndexOrThrow4));
                    preloadInfoEntity.setRequestType(query.getString(columnIndexOrThrow5));
                    preloadInfoEntity.setFunctionId(query.getString(columnIndexOrThrow6));
                    preloadInfoEntity.setMethod(query.getString(columnIndexOrThrow7));
                    preloadInfoEntity.setHeader(bVar.f3383a.toMap(query.getString(columnIndexOrThrow8)));
                    preloadInfoEntity.setParams(bVar.f3383a.toMap(query.getString(columnIndexOrThrow9)));
                    preloadInfoEntity.setBody(bVar.f3384b.toJson(query.getString(columnIndexOrThrow10)));
                    preloadInfoEntity.setExtraKeys(bVar.f3385c.toArray(query.getString(columnIndexOrThrow11)));
                    preloadInfoEntity.setMappings(bVar.f3383a.toMap(query.getString(columnIndexOrThrow12)));
                    preloadInfoEntity.setUrlParamsState(query.getInt(columnIndexOrThrow13));
                    columnIndexOrThrow13 = columnIndexOrThrow13;
                    preloadInfoEntity.setAppMin(query.getString(columnIndexOrThrow14));
                    preloadInfoEntity.setAppMax(query.getString(columnIndexOrThrow15));
                    arrayList.add(preloadInfoEntity);
                    columnIndexOrThrow15 = columnIndexOrThrow15;
                    columnIndexOrThrow14 = columnIndexOrThrow14;
                    columnIndexOrThrow = columnIndexOrThrow;
                    arrayList = arrayList;
                    bVar = this;
                }
                query.close();
                roomSQLiteQuery.release();
                return arrayList;
            } catch (Throwable th2) {
                th = th2;
                query.close();
                roomSQLiteQuery.release();
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            roomSQLiteQuery = acquire;
        }
    }

    @Override // com.p051jd.libs.hybrid.preload.p103db.p104a.AbstractC1944a
    /* renamed from: a */
    public final void mo1069a(List<PreloadInfoEntity> list) {
        this.f3386d.beginTransaction();
        try {
            this.f3387e.insert(list);
            this.f3386d.setTransactionSuccessful();
        } finally {
            this.f3386d.endTransaction();
        }
    }

    @Override // com.p051jd.libs.hybrid.preload.p103db.p104a.AbstractC1944a
    /* renamed from: b */
    public final void mo1068b() {
        SupportSQLiteStatement acquire = this.f3390h.acquire();
        this.f3386d.beginTransaction();
        try {
            acquire.executeUpdateDelete();
            this.f3386d.setTransactionSuccessful();
        } finally {
            this.f3386d.endTransaction();
            this.f3390h.release(acquire);
        }
    }

    @Override // com.p051jd.libs.hybrid.preload.p103db.p104a.AbstractC1944a
    /* renamed from: b */
    public final void mo1067b(List<PreloadInfoEntity> list) {
        this.f3386d.beginTransaction();
        try {
            this.f3388f.handleMultiple(list);
            this.f3386d.setTransactionSuccessful();
        } finally {
            this.f3386d.endTransaction();
        }
    }
}
