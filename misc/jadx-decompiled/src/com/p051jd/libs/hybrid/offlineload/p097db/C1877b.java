package com.p051jd.libs.hybrid.offlineload.p097db;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.jd.libs.hybrid.offlineload.entity.CommonEntity;
import com.p051jd.libs.hybrid.offlineload.entity.FileDetail;
import com.p051jd.libs.hybrid.offlineload.p097db.converter.RoomDateConverts;
import java.util.ArrayList;
import java.util.List;

/* renamed from: com.jd.libs.hybrid.offlineload.db.b */
/* loaded from: classes.dex */
public final class C1877b implements AbstractC1876a {

    /* renamed from: a */
    final RoomDateConverts f3240a = new RoomDateConverts();

    /* renamed from: b */
    private final RoomDatabase f3241b;

    /* renamed from: c */
    private final EntityInsertionAdapter f3242c;

    /* renamed from: d */
    private final EntityDeletionOrUpdateAdapter f3243d;

    /* renamed from: e */
    private final EntityDeletionOrUpdateAdapter f3244e;

    /* renamed from: f */
    private final SharedSQLiteStatement f3245f;

    public C1877b(RoomDatabase roomDatabase) {
        this.f3241b = roomDatabase;
        this.f3242c = new EntityInsertionAdapter<CommonEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.1
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                CommonEntity commonEntity = (CommonEntity) obj;
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, commonEntity.getId());
                }
                if (commonEntity.getUrl() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, commonEntity.getUrl());
                }
                supportSQLiteStatement.bindLong(3, (long) commonEntity.getVersionCode());
                if (commonEntity.getMd5() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, commonEntity.getMd5());
                }
                supportSQLiteStatement.bindLong(5, commonEntity.isAvailable() ? 1 : 0);
                supportSQLiteStatement.bindLong(6, commonEntity.getCreateTimestamp());
                String fromStringMap = C1877b.this.f3240a.fromStringMap(commonEntity.getHeadersMap());
                if (fromStringMap == null) {
                    supportSQLiteStatement.bindNull(7);
                } else {
                    supportSQLiteStatement.bindString(7, fromStringMap);
                }
                FileDetail fileDetail = commonEntity.getFileDetail();
                if (fileDetail != null) {
                    if (fileDetail.getPath() == null) {
                        supportSQLiteStatement.bindNull(8);
                    } else {
                        supportSQLiteStatement.bindString(8, fileDetail.getPath());
                    }
                    supportSQLiteStatement.bindLong(9, fileDetail.getLastModified());
                    supportSQLiteStatement.bindLong(10, fileDetail.getTotalSpace());
                    return;
                }
                supportSQLiteStatement.bindNull(8);
                supportSQLiteStatement.bindNull(9);
                supportSQLiteStatement.bindNull(10);
            }

            public final String createQuery() {
                return "INSERT OR REPLACE INTO `HybridOfflineCommonEntity`(`id`,`url`,`versionCode`,`md5`,`available`,`createTimestamp`,`headersMap`,`localfile_path`,`localfile_lastModified`,`localfile_totalSpace`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }
        };
        this.f3243d = new EntityDeletionOrUpdateAdapter<CommonEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.2
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                CommonEntity commonEntity = (CommonEntity) obj;
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, commonEntity.getId());
                }
            }

            public final String createQuery() {
                return "DELETE FROM `HybridOfflineCommonEntity` WHERE `id` = ?";
            }
        };
        this.f3244e = new EntityDeletionOrUpdateAdapter<CommonEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.3
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                CommonEntity commonEntity = (CommonEntity) obj;
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, commonEntity.getId());
                }
                if (commonEntity.getUrl() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, commonEntity.getUrl());
                }
                supportSQLiteStatement.bindLong(3, (long) commonEntity.getVersionCode());
                if (commonEntity.getMd5() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, commonEntity.getMd5());
                }
                supportSQLiteStatement.bindLong(5, commonEntity.isAvailable() ? 1 : 0);
                supportSQLiteStatement.bindLong(6, commonEntity.getCreateTimestamp());
                String fromStringMap = C1877b.this.f3240a.fromStringMap(commonEntity.getHeadersMap());
                if (fromStringMap == null) {
                    supportSQLiteStatement.bindNull(7);
                } else {
                    supportSQLiteStatement.bindString(7, fromStringMap);
                }
                FileDetail fileDetail = commonEntity.getFileDetail();
                if (fileDetail != null) {
                    if (fileDetail.getPath() == null) {
                        supportSQLiteStatement.bindNull(8);
                    } else {
                        supportSQLiteStatement.bindString(8, fileDetail.getPath());
                    }
                    supportSQLiteStatement.bindLong(9, fileDetail.getLastModified());
                    supportSQLiteStatement.bindLong(10, fileDetail.getTotalSpace());
                } else {
                    supportSQLiteStatement.bindNull(8);
                    supportSQLiteStatement.bindNull(9);
                    supportSQLiteStatement.bindNull(10);
                }
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(11);
                } else {
                    supportSQLiteStatement.bindString(11, commonEntity.getId());
                }
            }

            public final String createQuery() {
                return "UPDATE OR ABORT `HybridOfflineCommonEntity` SET `id` = ?,`url` = ?,`versionCode` = ?,`md5` = ?,`available` = ?,`createTimestamp` = ?,`headersMap` = ?,`localfile_path` = ?,`localfile_lastModified` = ?,`localfile_totalSpace` = ? WHERE `id` = ?";
            }
        };
        this.f3245f = new SharedSQLiteStatement(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.4
            public final String createQuery() {
                return "DELETE FROM HybridOfflineCommonEntity";
            }
        };
    }

    /* JADX WARN: Removed duplicated region for block: B:19:0x00b4  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x00b6  */
    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final List<CommonEntity> mo1219a() {
        Throwable th;
        FileDetail fileDetail;
        RoomSQLiteQuery acquire = RoomSQLiteQuery.acquire("SELECT * FROM HybridOfflineCommonEntity", 0);
        Cursor query = this.f3241b.query(acquire);
        try {
            int columnIndexOrThrow = query.getColumnIndexOrThrow("id");
            int columnIndexOrThrow2 = query.getColumnIndexOrThrow("url");
            int columnIndexOrThrow3 = query.getColumnIndexOrThrow("versionCode");
            int columnIndexOrThrow4 = query.getColumnIndexOrThrow("md5");
            int columnIndexOrThrow5 = query.getColumnIndexOrThrow("available");
            int columnIndexOrThrow6 = query.getColumnIndexOrThrow("createTimestamp");
            int columnIndexOrThrow7 = query.getColumnIndexOrThrow("headersMap");
            int columnIndexOrThrow8 = query.getColumnIndexOrThrow("localfile_path");
            int columnIndexOrThrow9 = query.getColumnIndexOrThrow("localfile_lastModified");
            int columnIndexOrThrow10 = query.getColumnIndexOrThrow("localfile_totalSpace");
            ArrayList arrayList = new ArrayList(query.getCount());
            while (query.moveToNext()) {
                try {
                    if (query.isNull(columnIndexOrThrow8) && query.isNull(columnIndexOrThrow9) && query.isNull(columnIndexOrThrow10)) {
                        fileDetail = null;
                        acquire = acquire;
                        CommonEntity commonEntity = new CommonEntity();
                        commonEntity.setId(query.getString(columnIndexOrThrow));
                        commonEntity.setUrl(query.getString(columnIndexOrThrow2));
                        commonEntity.setVersionCode(query.getInt(columnIndexOrThrow3));
                        commonEntity.setMd5(query.getString(columnIndexOrThrow4));
                        commonEntity.setAvailable(query.getInt(columnIndexOrThrow5) == 0);
                        commonEntity.setCreateTimestamp(query.getLong(columnIndexOrThrow6));
                        commonEntity.setHeadersMap(this.f3240a.fromString(query.getString(columnIndexOrThrow7)));
                        commonEntity.setFileDetail(fileDetail);
                        arrayList.add(commonEntity);
                        columnIndexOrThrow2 = columnIndexOrThrow2;
                        acquire = acquire;
                        columnIndexOrThrow3 = columnIndexOrThrow3;
                    }
                    fileDetail.setLastModified(query.getLong(columnIndexOrThrow9));
                    fileDetail.setTotalSpace(query.getLong(columnIndexOrThrow10));
                    CommonEntity commonEntity2 = new CommonEntity();
                    commonEntity2.setId(query.getString(columnIndexOrThrow));
                    commonEntity2.setUrl(query.getString(columnIndexOrThrow2));
                    commonEntity2.setVersionCode(query.getInt(columnIndexOrThrow3));
                    commonEntity2.setMd5(query.getString(columnIndexOrThrow4));
                    commonEntity2.setAvailable(query.getInt(columnIndexOrThrow5) == 0);
                    commonEntity2.setCreateTimestamp(query.getLong(columnIndexOrThrow6));
                    commonEntity2.setHeadersMap(this.f3240a.fromString(query.getString(columnIndexOrThrow7)));
                    commonEntity2.setFileDetail(fileDetail);
                    arrayList.add(commonEntity2);
                    columnIndexOrThrow2 = columnIndexOrThrow2;
                    acquire = acquire;
                    columnIndexOrThrow3 = columnIndexOrThrow3;
                } catch (Throwable th2) {
                    th = th2;
                    query.close();
                    acquire.release();
                    throw th;
                }
                fileDetail = new FileDetail();
                fileDetail.setPath(query.getString(columnIndexOrThrow8));
                acquire = acquire;
            }
            query.close();
            acquire.release();
            return arrayList;
        } catch (Throwable th3) {
            th = th3;
        }
    }

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: a */
    public final void mo1218a(CommonEntity commonEntity) {
        this.f3241b.beginTransaction();
        try {
            this.f3244e.handle(commonEntity);
            this.f3241b.setTransactionSuccessful();
        } finally {
            this.f3241b.endTransaction();
        }
    }

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: a */
    public final void mo1217a(List<CommonEntity> list) {
        this.f3241b.beginTransaction();
        try {
            this.f3242c.insert(list);
            this.f3241b.setTransactionSuccessful();
        } finally {
            this.f3241b.endTransaction();
        }
    }

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: b */
    public final void mo1216b() {
        SupportSQLiteStatement acquire = this.f3245f.acquire();
        this.f3241b.beginTransaction();
        try {
            acquire.executeUpdateDelete();
            this.f3241b.setTransactionSuccessful();
        } finally {
            this.f3241b.endTransaction();
            this.f3245f.release(acquire);
        }
    }

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: b */
    public final void mo1215b(CommonEntity commonEntity) {
        this.f3241b.beginTransaction();
        try {
            this.f3243d.handle(commonEntity);
            this.f3241b.setTransactionSuccessful();
        } finally {
            this.f3241b.endTransaction();
        }
    }

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: b */
    public final void mo1214b(List<CommonEntity> list) {
        this.f3241b.beginTransaction();
        try {
            this.f3244e.handleMultiple(list);
            this.f3241b.setTransactionSuccessful();
        } finally {
            this.f3241b.endTransaction();
        }
    }

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1876a
    /* renamed from: c */
    public final void mo1213c(List<CommonEntity> list) {
        this.f3241b.beginTransaction();
        try {
            this.f3243d.handleMultiple(list);
            this.f3241b.setTransactionSuccessful();
        } finally {
            this.f3241b.endTransaction();
        }
    }
}
