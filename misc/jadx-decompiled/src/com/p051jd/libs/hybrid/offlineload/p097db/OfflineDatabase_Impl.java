package com.p051jd.libs.hybrid.offlineload.p097db;

import androidx.room.DatabaseConfiguration;
import androidx.room.InvalidationTracker;
import androidx.room.RoomDatabase;
import androidx.room.RoomOpenHelper;
import androidx.room.util.TableInfo;
import androidx.sqlite.db.SupportSQLiteDatabase;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

/* renamed from: com.jd.libs.hybrid.offlineload.db.OfflineDatabase_Impl */
/* loaded from: classes.dex */
public final class OfflineDatabase_Impl extends OfflineDatabase {

    /* renamed from: a */
    private volatile AbstractC1882c f3238a;

    @Override // com.p051jd.libs.hybrid.offlineload.p097db.OfflineDatabase
    /* renamed from: a */
    public final AbstractC1882c mo1228a() {
        AbstractC1882c cVar;
        if (this.f3238a != null) {
            return this.f3238a;
        }
        synchronized (this) {
            if (this.f3238a == null) {
                this.f3238a = new C1883d(this);
            }
            cVar = this.f3238a;
        }
        return cVar;
    }

    public final void clearAllTables() {
        super.assertNotMainThread();
        SupportSQLiteDatabase writableDatabase = super.getOpenHelper().getWritableDatabase();
        try {
            super.beginTransaction();
            writableDatabase.execSQL("DELETE FROM `HybridOfflineEntity`");
            super.setTransactionSuccessful();
        } finally {
            super.endTransaction();
            writableDatabase.query("PRAGMA wal_checkpoint(FULL)").close();
            if (!writableDatabase.inTransaction()) {
                writableDatabase.execSQL("VACUUM");
            }
        }
    }

    protected final InvalidationTracker createInvalidationTracker() {
        return new InvalidationTracker(this, new String[]{"HybridOfflineEntity"});
    }

    protected final SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration databaseConfiguration) {
        return databaseConfiguration.sqliteOpenHelperFactory.create(SupportSQLiteOpenHelper.Configuration.builder(databaseConfiguration.context).name(databaseConfiguration.name).callback(new RoomOpenHelper(databaseConfiguration, new RoomOpenHelper.Delegate() { // from class: com.jd.libs.hybrid.offlineload.db.OfflineDatabase_Impl.1
            public final void createAllTables(SupportSQLiteDatabase supportSQLiteDatabase) {
                supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `HybridOfflineEntity` (`appid` TEXT NOT NULL, `name` TEXT, `documentUrl` TEXT NOT NULL, `originalUrl` TEXT, `documentDir` TEXT, `sourceRoot` TEXT, `sourceDir` TEXT, `appMin` TEXT, `appMax` TEXT, `serverPriority` INTEGER NOT NULL, `checkType` TEXT, `available` INTEGER NOT NULL, `createTimestamp` INTEGER NOT NULL, `lastVisitTimestamp` INTEGER NOT NULL, `localPriorityInfo` TEXT, `file_url` TEXT, `file_version` TEXT, `file_versionCode` INTEGER, `file_md5` TEXT, `file_fileType` TEXT, `file_password` TEXT, `document_path` TEXT, `document_lastModified` INTEGER, `document_totalSpace` INTEGER, `source_path` TEXT, `source_lastModified` INTEGER, `source_totalSpace` INTEGER, `zip_path` TEXT, `zip_lastModified` INTEGER, `zip_totalSpace` INTEGER, PRIMARY KEY(`appid`))");
                supportSQLiteDatabase.execSQL("CREATE UNIQUE INDEX `index_HybridOfflineEntity_documentUrl` ON `HybridOfflineEntity` (`documentUrl`)");
                supportSQLiteDatabase.execSQL("CREATE UNIQUE INDEX `index_HybridOfflineEntity_originalUrl` ON `HybridOfflineEntity` (`originalUrl`)");
                supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
                supportSQLiteDatabase.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, \"29a35b67adc98157a04067db8c588f35\")");
            }

            public final void dropAllTables(SupportSQLiteDatabase supportSQLiteDatabase) {
                supportSQLiteDatabase.execSQL("DROP TABLE IF EXISTS `HybridOfflineEntity`");
            }

            protected final void onCreate(SupportSQLiteDatabase supportSQLiteDatabase) {
                if (OfflineDatabase_Impl.this.mCallbacks != null) {
                    int size = OfflineDatabase_Impl.this.mCallbacks.size();
                    for (int i = 0; i < size; i++) {
                        ((RoomDatabase.Callback) OfflineDatabase_Impl.this.mCallbacks.get(i)).onCreate(supportSQLiteDatabase);
                    }
                }
            }

            public final void onOpen(SupportSQLiteDatabase supportSQLiteDatabase) {
                OfflineDatabase_Impl.this.mDatabase = supportSQLiteDatabase;
                OfflineDatabase_Impl.this.internalInitInvalidationTracker(supportSQLiteDatabase);
                if (OfflineDatabase_Impl.this.mCallbacks != null) {
                    int size = OfflineDatabase_Impl.this.mCallbacks.size();
                    for (int i = 0; i < size; i++) {
                        ((RoomDatabase.Callback) OfflineDatabase_Impl.this.mCallbacks.get(i)).onOpen(supportSQLiteDatabase);
                    }
                }
            }

            protected final void validateMigration(SupportSQLiteDatabase supportSQLiteDatabase) {
                HashMap hashMap = new HashMap(30);
                hashMap.put("appid", new TableInfo.Column("appid", "TEXT", true, 1));
                hashMap.put("name", new TableInfo.Column("name", "TEXT", false, 0));
                hashMap.put("documentUrl", new TableInfo.Column("documentUrl", "TEXT", true, 0));
                hashMap.put("originalUrl", new TableInfo.Column("originalUrl", "TEXT", false, 0));
                hashMap.put("documentDir", new TableInfo.Column("documentDir", "TEXT", false, 0));
                hashMap.put("sourceRoot", new TableInfo.Column("sourceRoot", "TEXT", false, 0));
                hashMap.put("sourceDir", new TableInfo.Column("sourceDir", "TEXT", false, 0));
                hashMap.put("appMin", new TableInfo.Column("appMin", "TEXT", false, 0));
                hashMap.put("appMax", new TableInfo.Column("appMax", "TEXT", false, 0));
                hashMap.put("serverPriority", new TableInfo.Column("serverPriority", "INTEGER", true, 0));
                hashMap.put("checkType", new TableInfo.Column("checkType", "TEXT", false, 0));
                hashMap.put("available", new TableInfo.Column("available", "INTEGER", true, 0));
                hashMap.put("createTimestamp", new TableInfo.Column("createTimestamp", "INTEGER", true, 0));
                hashMap.put("lastVisitTimestamp", new TableInfo.Column("lastVisitTimestamp", "INTEGER", true, 0));
                hashMap.put("localPriorityInfo", new TableInfo.Column("localPriorityInfo", "TEXT", false, 0));
                hashMap.put("file_url", new TableInfo.Column("file_url", "TEXT", false, 0));
                hashMap.put("file_version", new TableInfo.Column("file_version", "TEXT", false, 0));
                hashMap.put("file_versionCode", new TableInfo.Column("file_versionCode", "INTEGER", false, 0));
                hashMap.put("file_md5", new TableInfo.Column("file_md5", "TEXT", false, 0));
                hashMap.put("file_fileType", new TableInfo.Column("file_fileType", "TEXT", false, 0));
                hashMap.put("file_password", new TableInfo.Column("file_password", "TEXT", false, 0));
                hashMap.put("document_path", new TableInfo.Column("document_path", "TEXT", false, 0));
                hashMap.put("document_lastModified", new TableInfo.Column("document_lastModified", "INTEGER", false, 0));
                hashMap.put("document_totalSpace", new TableInfo.Column("document_totalSpace", "INTEGER", false, 0));
                hashMap.put("source_path", new TableInfo.Column("source_path", "TEXT", false, 0));
                hashMap.put("source_lastModified", new TableInfo.Column("source_lastModified", "INTEGER", false, 0));
                hashMap.put("source_totalSpace", new TableInfo.Column("source_totalSpace", "INTEGER", false, 0));
                hashMap.put("zip_path", new TableInfo.Column("zip_path", "TEXT", false, 0));
                hashMap.put("zip_lastModified", new TableInfo.Column("zip_lastModified", "INTEGER", false, 0));
                hashMap.put("zip_totalSpace", new TableInfo.Column("zip_totalSpace", "INTEGER", false, 0));
                HashSet hashSet = new HashSet(0);
                HashSet hashSet2 = new HashSet(2);
                hashSet2.add(new TableInfo.Index("index_HybridOfflineEntity_documentUrl", true, Arrays.asList("documentUrl")));
                hashSet2.add(new TableInfo.Index("index_HybridOfflineEntity_originalUrl", true, Arrays.asList("originalUrl")));
                TableInfo tableInfo = new TableInfo("HybridOfflineEntity", hashMap, hashSet, hashSet2);
                TableInfo read = TableInfo.read(supportSQLiteDatabase, "HybridOfflineEntity");
                if (!tableInfo.equals(read)) {
                    throw new IllegalStateException("Migration didn't properly handle HybridOfflineEntity(com.jd.libs.hybrid.offlineload.entity.OfflineEntity).\n Expected:\n" + tableInfo + "\n Found:\n" + read);
                }
            }
        }, "29a35b67adc98157a04067db8c588f35", "fb277d9beeb857e145022fc4e3447b39")).build());
    }
}
