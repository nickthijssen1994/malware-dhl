package com.p051jd.libs.hybrid.offlineload;

import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import androidx.annotation.CallSuper;
import cn.com.union.fido.common.MIMEType;
import com.jd.sentry.performance.network.instrumentation.x5webview.ShooterX5WebViewClient;
import com.p051jd.framework.json.JDJSON;
import com.p051jd.libs.hybrid.base.C1841a;
import com.p051jd.libs.hybrid.base.p095b.C1853c;
import com.p051jd.libs.hybrid.base.p095b.C1855d;
import com.p051jd.libs.hybrid.offlineload.C1861a;
import com.p051jd.libs.hybrid.offlineload.entity.CommonFile;
import com.p051jd.libs.hybrid.offlineload.entity.OfflineFiles;
import com.tencent.smtt.export.external.interfaces.WebResourceRequest;
import com.tencent.smtt.export.external.interfaces.WebResourceResponse;
import com.tencent.smtt.sdk.WebView;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* renamed from: com.jd.libs.hybrid.offlineload.b */
/* loaded from: classes.dex */
public class C1868b extends ShooterX5WebViewClient {

    /* renamed from: a */
    private C1861a f3215a;

    /* renamed from: b */
    private String f3216b;

    /* renamed from: d */
    private volatile List<CommonFile> f3218d;

    /* renamed from: e */
    private volatile OfflineFiles f3219e;

    /* renamed from: m */
    private Uri f3227m;

    /* renamed from: n */
    private Uri f3228n;

    /* renamed from: c */
    private volatile WebView f3217c = null;

    /* renamed from: f */
    private volatile boolean f3220f = false;

    /* renamed from: g */
    private volatile Handler f3221g = null;

    /* renamed from: h */
    private volatile Runnable f3222h = null;

    /* renamed from: i */
    private volatile boolean f3223i = false;

    /* renamed from: j */
    private int f3224j = C1841a.f3181a;

    /* renamed from: k */
    private boolean f3225k = false;

    /* renamed from: l */
    private AbstractC1873a f3226l = null;

    /* renamed from: o */
    private boolean f3229o = false;

    /* renamed from: com.jd.libs.hybrid.offlineload.b$a */
    /* loaded from: classes.dex */
    public interface AbstractC1873a {
        /* renamed from: a */
        void m1242a();

        /* renamed from: a */
        void m1241a(String str, String str2);

        /* renamed from: a */
        void m1240a(String str, boolean z, boolean z2);
    }

    public C1868b(String str) {
        if (C1841a.m1355a()) {
            this.f3216b = str;
            if (!TextUtils.isEmpty(str)) {
                this.f3215a = new C1861a(C1841a.m1343c());
                this.f3215a.m1283a(str, new C1861a.AbstractC1862a<OfflineFiles>() { // from class: com.jd.libs.hybrid.offlineload.b.1
                    @Override // com.p051jd.libs.hybrid.offlineload.C1861a.AbstractC1862a
                    /* renamed from: a */
                    public final /* synthetic */ void mo1244a(OfflineFiles offlineFiles) {
                        OfflineFiles offlineFiles2 = offlineFiles;
                        if (!C1868b.this.f3223i) {
                            if (C1853c.m1317a()) {
                                C1853c.m1308c("OfflineWebClient", "Callback for fetching latest info of entry url(" + C1868b.this.f3216b + ") from network, Info = " + JDJSON.toJSONString(offlineFiles2));
                            }
                            if (C1868b.this.f3220f) {
                                C1868b.this.m1256a(false, offlineFiles2);
                            }
                        }
                    }

                    @Override // com.p051jd.libs.hybrid.offlineload.C1861a.AbstractC1862a
                    /* renamed from: a */
                    public final /* synthetic */ void mo1243a(OfflineFiles offlineFiles, boolean z) {
                        String str2;
                        String str3;
                        OfflineFiles offlineFiles2 = offlineFiles;
                        if (!C1868b.this.f3223i) {
                            C1868b.this.f3219e = null;
                            C1868b.this.f3220f = false;
                            if (offlineFiles2 == null) {
                                C1853c.m1307d("OfflineWebClient", "Offline config of entry url(" + C1868b.this.f3216b + ") CANNOT found in local database.");
                                return;
                            }
                            C1868b.this.f3219e = offlineFiles2;
                            if (C1868b.this.f3219e.isAvailable()) {
                                if (C1853c.m1317a()) {
                                    C1853c.m1314a("OfflineWebClient", "找到(" + C1868b.this.f3216b + ")离线包配置信息，离线文件可用，配置信息:", JDJSON.toJSONString(C1868b.this.f3219e));
                                }
                                StringBuilder sb = new StringBuilder("Offline config and local files of entry url(");
                                sb.append(C1868b.this.f3216b);
                                sb.append(") Found in local database.");
                                if (C1853c.m1317a()) {
                                    str3 = " Info: " + JDJSON.toJSONString(offlineFiles2);
                                } else {
                                    str3 = "";
                                }
                                sb.append(str3);
                                C1853c.m1307d("OfflineWebClient", sb.toString());
                                if (z) {
                                    C1853c.m1308c("OfflineWebClient", "Need to fetch the latest info from network");
                                    C1868b.this.f3221g = new Handler(Looper.getMainLooper());
                                    C1868b.this.f3222h = new Runnable() { // from class: com.jd.libs.hybrid.offlineload.b.1.1
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            C1853c.m1308c("OfflineWebClient", "Timer finished.");
                                            C1868b.this.m1256a(true, (OfflineFiles) null);
                                        }
                                    };
                                    C1853c.m1308c("OfflineWebClient", "Start timer of " + C1868b.this.f3224j + "ms.");
                                    C1868b.this.f3220f = true;
                                    C1868b.this.f3221g.postDelayed(C1868b.this.f3222h, (long) C1868b.this.f3224j);
                                    return;
                                }
                                return;
                            }
                            StringBuilder sb2 = new StringBuilder("Offline local files is NOT available even though config of entry url(");
                            sb2.append(C1868b.this.f3216b);
                            sb2.append(") is found in local database.");
                            if (C1853c.m1317a()) {
                                str2 = " Info: " + JDJSON.toJSONString(offlineFiles2);
                            } else {
                                str2 = "";
                            }
                            sb2.append(str2);
                            C1853c.m1307d("OfflineWebClient", sb2.toString());
                            if (C1853c.m1317a()) {
                                C1853c.m1314a("OfflineWebClient", "找到(" + C1868b.this.f3216b + ")离线包配置信息，但离线文件未下载完毕，配置信息:", JDJSON.toJSONString(C1868b.this.f3219e));
                            }
                        }
                    }
                });
                this.f3215a.m1284a(new C1861a.AbstractC1862a<List<CommonFile>>() { // from class: com.jd.libs.hybrid.offlineload.b.2
                    @Override // com.p051jd.libs.hybrid.offlineload.C1861a.AbstractC1862a
                    /* renamed from: a */
                    public final /* bridge */ /* synthetic */ void mo1244a(List<CommonFile> list) {
                    }

                    @Override // com.p051jd.libs.hybrid.offlineload.C1861a.AbstractC1862a
                    /* renamed from: a */
                    public final /* bridge */ /* synthetic */ void mo1243a(List<CommonFile> list, boolean z) {
                        List<CommonFile> list2 = list;
                        if (!C1868b.this.f3223i) {
                            C1868b.this.f3218d = list2;
                        }
                    }
                });
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x022f A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:107:0x0265 A[Catch: Exception -> 0x027b, TRY_LEAVE, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x010b A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0193 A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x01f5 A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private OfflineWebRezResp m1258a(WebView webView, Uri uri) {
        boolean z;
        boolean z2;
        boolean z3;
        String str;
        HashMap hashMap;
        String str2;
        String str3;
        String str4;
        String str5;
        OfflineWebRezResp offlineWebRezResp;
        if (C1841a.m1355a() && uri != null) {
            boolean z4 = false;
            if (this.f3219e == null || TextUtils.isEmpty(this.f3219e.getHtmlPath())) {
                this.f3225k = false;
                this.f3227m = null;
                this.f3228n = null;
            } else if (!this.f3219e.isAvailable()) {
                this.f3225k = false;
                return null;
            } else {
                try {
                    if (this.f3227m == null) {
                        m1251d();
                    }
                    z = (this.f3227m == null || this.f3227m.getHost() == null || !this.f3227m.getHost().equals(uri.getHost()) || this.f3227m.getPath() == null || !this.f3227m.getPath().equals(uri.getPath())) ? false : true;
                    z2 = (this.f3228n == null || this.f3228n.getHost() == null || !this.f3228n.getHost().equals(uri.getHost()) || this.f3228n.getPath() == null || !this.f3228n.getPath().equals(uri.getPath())) ? false : true;
                } catch (Exception e) {
                    C1853c.m1312a("OfflineWebClient", e);
                }
                if (!z && !z2) {
                    if (TextUtils.isEmpty(this.f3219e.getStaticPath()) || !uri.toString().startsWith(this.f3219e.getStaticPath())) {
                        hashMap = new HashMap();
                        str = m1267a(uri, hashMap);
                        z4 = true;
                    } else {
                        str = this.f3219e.getStaticDir() + File.separator + uri.toString().substring(this.f3219e.getStaticPath().length());
                        hashMap = null;
                    }
                    z3 = false;
                    if (TextUtils.isEmpty(str)) {
                        File file = new File(str);
                        if (!file.exists() || !file.isFile()) {
                            str2 = "OfflineWebClient";
                            str3 = "Offline local file NOT exists for url[" + uri + "], File[" + str + "]";
                        } else {
                            if (str.endsWith(".js")) {
                                str5 = "text/txt";
                            } else if (str.endsWith(".css")) {
                                str5 = "text/css";
                            } else {
                                if (!str.endsWith("gif") && !str.endsWith("png") && !str.endsWith("jpg") && !str.endsWith("jpeg")) {
                                    if (!str.endsWith("htm") && !str.endsWith("html")) {
                                        if (str.endsWith("ttf")) {
                                            str5 = MIMEType.MIME_TYPE_HTML;
                                            HashMap hashMap2 = new HashMap();
                                            hashMap2.put("access-control-allow-origin", "*");
                                            str4 = null;
                                            hashMap = hashMap2;
                                            if (C1853c.m1317a()) {
                                                StringBuilder sb = new StringBuilder("使用本地离线资源替换线上资源（类型：");
                                                sb.append(z4 ? "公共" : "业务");
                                                sb.append("资源，原url：");
                                                sb.append(uri.toString());
                                                sb.append(")");
                                                C1853c.m1315a("OfflineWebClient", sb.toString());
                                                C1853c.m1308c("OfflineWebClient", "Assembling local response(miniType = " + str5 + ", encoding = " + str4 + ", file[" + str + "]), for url[" + uri + "]");
                                            }
                                            FileInputStream fileInputStream = new FileInputStream(str);
                                            if (z3) {
                                                C1853c.m1307d("OfflineWebClient", "Use local offline file for main resource(url: " + uri + "), local file[" + str + "])");
                                                this.f3225k = true;
                                                if (this.f3226l != null) {
                                                    this.f3226l.m1241a(uri.toString(), str);
                                                }
                                                C1855d.m1298a(webView);
                                            }
                                            offlineWebRezResp = new OfflineWebRezResp(str5, str4, fileInputStream, str, z3);
                                            if (hashMap != null && !hashMap.isEmpty()) {
                                                offlineWebRezResp.setMimeType("");
                                                m1257a("Content-Length", hashMap);
                                                offlineWebRezResp.setResponseHeaders(hashMap);
                                            }
                                            return offlineWebRezResp;
                                        }
                                        str5 = MIMEType.MIME_TYPE_HTML;
                                    }
                                    str5 = MIMEType.MIME_TYPE_HTML;
                                }
                                str5 = "image/*";
                                str4 = null;
                                if (C1853c.m1317a()) {
                                }
                                FileInputStream fileInputStream2 = new FileInputStream(str);
                                if (z3) {
                                }
                                offlineWebRezResp = new OfflineWebRezResp(str5, str4, fileInputStream2, str, z3);
                                if (hashMap != null) {
                                    offlineWebRezResp.setMimeType("");
                                    m1257a("Content-Length", hashMap);
                                    offlineWebRezResp.setResponseHeaders(hashMap);
                                }
                                return offlineWebRezResp;
                            }
                            str4 = "utf-8";
                            if (C1853c.m1317a()) {
                            }
                            FileInputStream fileInputStream22 = new FileInputStream(str);
                            if (z3) {
                            }
                            offlineWebRezResp = new OfflineWebRezResp(str5, str4, fileInputStream22, str, z3);
                            if (hashMap != null) {
                            }
                            return offlineWebRezResp;
                        }
                    } else {
                        str2 = "OfflineWebClient";
                        str3 = "Offline target NOT found for url[" + uri + "]";
                    }
                    C1853c.m1308c(str2, str3);
                    return null;
                }
                str = this.f3219e.getHtmlFile();
                hashMap = null;
                z3 = true;
                if (TextUtils.isEmpty(str)) {
                }
                C1853c.m1308c(str2, str3);
                return null;
            }
        }
        return null;
    }

    /* renamed from: a */
    private String m1267a(Uri uri, Map<String, String> map) {
        if (uri != null && !TextUtils.isEmpty(uri.toString()) && this.f3218d != null && !this.f3218d.isEmpty()) {
            for (CommonFile commonFile : this.f3218d) {
                if (commonFile.getUrl().equalsIgnoreCase(uri.toString())) {
                    if (commonFile.getHeaderParams() != null) {
                        map.putAll(commonFile.getHeaderParams());
                        map.put("X-Cache", "jd");
                    }
                    return commonFile.getFilePath();
                }
            }
        }
        return null;
    }

    /* renamed from: a */
    private static void m1257a(String str, Map<String, String> map) {
        for (String str2 : map.keySet()) {
            if (!(TextUtils.isEmpty(str2) || !str2.equals(str) || TextUtils.isEmpty(map.get(str2)))) {
                map.remove(str2);
                return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public synchronized void m1256a(boolean z, OfflineFiles offlineFiles) {
        String str;
        String str2;
        if (this.f3220f) {
            this.f3220f = false;
            if (this.f3221g != null) {
                if (this.f3222h != null) {
                    C1853c.m1308c("OfflineWebClient", "Cancel timer.");
                    this.f3221g.removeCallbacks(this.f3222h);
                    this.f3222h = null;
                }
                this.f3221g = null;
            }
            if (this.f3219e != null && offlineFiles != null) {
                boolean z2 = true;
                if (this.f3219e.getVersion() != offlineFiles.getVersion()) {
                    C1853c.m1307d("OfflineWebClient", "Latest info differs with cache, load URL for web on network.");
                    if (C1853c.m1317a()) {
                        C1853c.m1314a("OfflineWebClient", "最新配置已变更，不使用离线包，重新加载线上H5。最新配置：", JDJSON.toJSONString(offlineFiles));
                    }
                } else if (!offlineFiles.isAvailable()) {
                    C1853c.m1307d("OfflineWebClient", "Fail to fetch latest info, load URL for web on network.");
                    if (C1853c.m1317a()) {
                        C1853c.m1315a("OfflineWebClient", "未能成功获取到最新线上配置，不使用离线包，重新加载线上H5");
                    }
                } else {
                    z2 = false;
                }
                if (z2) {
                    this.f3227m = null;
                    this.f3228n = null;
                    this.f3219e = offlineFiles;
                    m1253c();
                    return;
                }
                C1853c.m1308c("OfflineWebClient", "Latest info's version is same with cache's, do nothing.");
            } else if (z) {
                C1853c.m1307d("OfflineWebClient", "Fetch info timeout, load URL for real web.");
                if (C1853c.m1317a()) {
                    str = "OfflineWebClient";
                    str2 = "规定时间内未能获取到最新线上配置，不使用离线包，重新加载线上H5";
                    C1853c.m1315a(str, str2);
                }
                this.f3227m = null;
                this.f3228n = null;
                this.f3219e = null;
                m1253c();
            } else {
                C1853c.m1307d("OfflineWebClient", "Has no config on server, load URL for real web.");
                if (C1853c.m1317a()) {
                    str = "OfflineWebClient";
                    str2 = "最新线上配置已下线此离线包配置，不使用离线包，重新加载线上H5";
                    C1853c.m1315a(str, str2);
                }
                this.f3227m = null;
                this.f3228n = null;
                this.f3219e = null;
                m1253c();
            }
        }
    }

    /* renamed from: c */
    private void m1253c() {
        if (this.f3217c != null) {
            RunnableC18723 r0 = new Runnable() { // from class: com.jd.libs.hybrid.offlineload.b.3
                @Override // java.lang.Runnable
                public final void run() {
                    C1853c.m1308c("OfflineWebClient", "Reload for real web.");
                    if (C1868b.this.f3226l != null) {
                        C1868b.this.f3226l.m1242a();
                    }
                    if (C1868b.this.f3217c != null) {
                        C1868b.this.f3217c.reload();
                    }
                }
            };
            if (Looper.myLooper() == Looper.getMainLooper()) {
                r0.run();
            } else {
                this.f3217c.post(r0);
            }
        }
    }

    /* renamed from: d */
    private void m1251d() {
        this.f3227m = Uri.parse(this.f3219e.getHtmlPath());
        this.f3228n = !TextUtils.isEmpty(this.f3219e.getOriginHtmlPath()) ? Uri.parse(this.f3219e.getOriginHtmlPath()) : null;
    }

    /* renamed from: a */
    public OfflineFiles m1268a() {
        return this.f3219e;
    }

    /* renamed from: a */
    public void m1266a(AbstractC1873a aVar) {
        this.f3226l = aVar;
    }

    /* renamed from: b */
    public void m1255b() {
        C1853c.m1308c("OfflineWebClient", "Calling destroy for OfflineWebClient.");
        this.f3223i = true;
        this.f3217c = null;
        this.f3220f = false;
        this.f3218d = null;
        this.f3219e = null;
        if (this.f3221g != null) {
            if (this.f3222h != null) {
                this.f3221g.removeCallbacks(this.f3222h);
                this.f3222h = null;
            }
            this.f3221g = null;
        }
        this.f3215a = null;
    }

    public void onPageFinished(WebView webView, String str) {
        this.f3225k = false;
        C1868b.super.onPageFinished(webView, str);
    }

    public void onPageStarted(WebView webView, String str, Bitmap bitmap) {
        C1868b.super.onPageStarted(webView, str, bitmap);
        if (!this.f3229o && this.f3219e != null && !TextUtils.isEmpty(this.f3219e.getHtmlPath())) {
            if (this.f3227m == null) {
                m1251d();
            }
            Uri parse = Uri.parse(str);
            Uri uri = this.f3227m;
            boolean z = false;
            boolean z2 = (uri == null || uri.getHost() == null || !this.f3227m.getHost().equals(parse.getHost()) || this.f3227m.getPath() == null || !this.f3227m.getPath().equals(parse.getPath())) ? false : true;
            Uri uri2 = this.f3228n;
            if (!(uri2 == null || uri2.getHost() == null || !this.f3228n.getHost().equals(parse.getHost()) || this.f3228n.getPath() == null || !this.f3228n.getPath().equals(parse.getPath()))) {
                z = true;
            }
            if (z2 || z) {
                this.f3229o = true;
                AbstractC1873a aVar = this.f3226l;
                if (aVar != null) {
                    aVar.m1240a(str, true, this.f3225k);
                }
            }
        }
    }

    @CallSuper
    public WebResourceResponse shouldInterceptRequest(WebView webView, WebResourceRequest webResourceRequest) {
        OfflineWebRezResp a;
        this.f3217c = webView;
        return (Build.VERSION.SDK_INT < 21 || (a = m1258a(webView, webResourceRequest.getUrl())) == null) ? C1868b.super.shouldInterceptRequest(webView, webResourceRequest) : a;
    }
}
