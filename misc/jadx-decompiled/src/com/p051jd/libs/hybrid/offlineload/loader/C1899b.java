package com.p051jd.libs.hybrid.offlineload.loader;

import android.content.Context;
import android.text.TextUtils;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.p051jd.framework.network.JDResponse;
import com.p051jd.framework.network.error.JDError;
import com.p051jd.hybrid.downloader.C1545a;
import com.p051jd.hybrid.downloader.C1551b;
import com.p051jd.hybrid.downloader.C1556c;
import com.p051jd.hybrid.downloader.p081b.C1554a;
import com.p051jd.libs.hybrid.base.C1841a;
import com.p051jd.libs.hybrid.base.p095b.C1848a;
import com.p051jd.libs.hybrid.base.p095b.C1853c;
import com.p051jd.libs.hybrid.offlineload.C1861a;
import com.p051jd.libs.hybrid.offlineload.entity.FileDetail;
import com.p051jd.libs.hybrid.offlineload.entity.OfflineFiles;
import com.p051jd.libs.hybrid.offlineload.p096a.C1866c;
import com.p051jd.libs.hybrid.offlineload.p096a.C1867d;
import com.p051jd.libs.hybrid.offlineload.p097db.AbstractC1882c;
import com.p051jd.libs.hybrid.offlineload.p097db.OfflineDatabase;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import net.lingala.zip4j.a;
import net.lingala.zip4j.exception.ZipException;

/* renamed from: com.jd.libs.hybrid.offlineload.loader.b */
/* loaded from: classes.dex */
public final class C1899b {

    /* renamed from: a */
    final Context f3278a;

    /* renamed from: b */
    final AbstractC1882c f3279b;

    /* renamed from: c */
    final OfflineEntityLoader f3280c = new OfflineEntityLoader();

    /* renamed from: com.jd.libs.hybrid.offlineload.loader.b$a */
    /* loaded from: classes.dex */
    class C1907a extends C1545a {

        /* renamed from: b */
        private final OfflineEntity f3298b;

        /* renamed from: c */
        private final int f3299c;

        C1907a(OfflineEntity offlineEntity, int i) {
            this.f3298b = offlineEntity;
            this.f3299c = i;
        }

        /* renamed from: a */
        static /* synthetic */ void m1182a(C1907a aVar, OfflineEntity offlineEntity, boolean z) {
            C1867d.m1269a(offlineEntity);
            offlineEntity.setZipFile((FileDetail) null);
            offlineEntity.setAvailable(false);
            if (z) {
                OfflineDatabase.m1229a(C1899b.this.f3278a).mo1228a().mo1211a(offlineEntity);
            }
        }

        /* renamed from: a */
        static /* synthetic */ void m1181a(String str, String str2) {
            if (C1853c.m1317a()) {
                C1853c.m1309b("OfflineService", null, "项目(" + str + ")离线包下载或解压失败，原因:" + str2);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: b */
        public static boolean m1179b(String str, String str2, String str3) {
            try {
                a aVar = new a(str);
                if (aVar.a()) {
                    if (TextUtils.isEmpty(str3)) {
                        C1853c.m1306e("OfflineService", "[Offline-file] zip is encrypted, but password is empty.");
                        return false;
                    }
                    aVar.a(str3.toCharArray());
                }
                aVar.a(str2);
                return true;
            } catch (ZipException e) {
                C1853c.m1306e("OfflineService", e.getMessage());
                return false;
            }
        }

        @Override // com.p051jd.hybrid.downloader.C1545a, com.p051jd.framework.network.JDResponseListener
        public final void onEnd(JDResponse<File> jDResponse) {
            final File data = jDResponse.getData();
            C1848a.m1322a().m1321b().execute(new Runnable() { // from class: com.jd.libs.hybrid.offlineload.loader.b.a.1
                @Override // java.lang.Runnable
                public final void run() {
                    C1853c.m1308c("OfflineService", "[Offline-file] Start to unzip, file at " + data.getAbsolutePath() + ", app url = " + C1907a.this.f3298b.getDocumentUrl());
                    C1907a.this.f3298b.setZipFile(new FileDetail(data));
                    String a = C1867d.m1270a(C1899b.this.f3278a, C1907a.this.f3298b.getAppid(), null);
                    if (TextUtils.isEmpty(a)) {
                        C1907a.m1181a(C1907a.this.f3298b.getAppid(), "获取解压路径为空");
                        C1853c.m1306e("OfflineService", "[Offline-file] unzip dest path is null/empty, will not try again until app next startup.");
                        C1909c.m1177b(C1907a.this.f3298b);
                    } else if (C1907a.this.f3298b.getFileInfo().getFileType().equalsIgnoreCase("zip")) {
                        try {
                            if (C1907a.m1179b(data.getAbsolutePath(), a, C1907a.this.f3298b.getFileInfo().getPassword())) {
                                String appid = C1907a.this.f3298b.getAppid();
                                String a2 = C1867d.m1270a(C1899b.this.f3278a, appid, C1907a.this.f3298b.getDocumentDir());
                                String a3 = C1867d.m1270a(C1899b.this.f3278a, appid, C1907a.this.f3298b.getSourceDir());
                                if (TextUtils.isEmpty(a2)) {
                                    C1907a.m1181a(C1907a.this.f3298b.getAppid(), "获取本地html文件路径为空");
                                    C1853c.m1306e("OfflineService", "[Offline-file] local html file path is null/empty.");
                                    C1867d.m1271a(C1899b.this.f3278a, C1907a.this.f3298b);
                                    return;
                                }
                                File file = new File(a2);
                                if (TextUtils.isEmpty(a3)) {
                                    C1907a.m1181a(C1907a.this.f3298b.getAppid(), "获取本地静态资源路径为空");
                                    C1853c.m1306e("OfflineService", "[Offline-file] local static file path is null/empty.");
                                    C1867d.m1271a(C1899b.this.f3278a, C1907a.this.f3298b);
                                    return;
                                }
                                File file2 = new File(a3);
                                if (!(file.exists() && (TextUtils.isEmpty(C1907a.this.f3298b.getSourceDir()) || file2.exists()))) {
                                    C1867d.m1271a(C1899b.this.f3278a, C1907a.this.f3298b);
                                    C1907a.m1181a(C1907a.this.f3298b.getAppid(), "缺少必要文件");
                                    C1853c.m1308c("OfflineService", "[Offline-file] Download error: missing files. Zip: " + data.getAbsolutePath() + ", unzip path: " + a);
                                    return;
                                }
                                C1907a.this.f3298b.setAvailable(true);
                                C1907a.this.f3298b.setDocumentFile(new FileDetail(file));
                                C1907a.this.f3298b.setSourceFile(new FileDetail(file2));
                                C1899b.this.f3279b.mo1211a(C1907a.this.f3298b);
                                if (C1853c.m1317a()) {
                                    C1853c.m1309b("OfflineService", null, "项目(" + C1907a.this.f3298b.getAppid() + ")离线包下载完毕，已可用。");
                                }
                                C1853c.m1308c("OfflineService", "[Offline-file] Download and update offline config success for " + C1907a.this.f3298b.getDocumentUrl());
                                return;
                            }
                            C1907a.m1181a(C1907a.this.f3298b.getAppid(), "解压失败");
                            C1853c.m1308c("OfflineService", "[Offline-file] Unzip fail " + C1907a.this.f3298b.getDocumentUrl());
                            C1907a.m1182a(C1907a.this, C1907a.this.f3298b, C1907a.this.f3298b.isAvailable());
                        } catch (Exception e) {
                            String appid2 = C1907a.this.f3298b.getAppid();
                            C1907a.m1181a(appid2, "内部错误，" + e.getMessage());
                            C1853c.m1306e("OfflineService", e.getMessage());
                        }
                    } else {
                        C1907a.m1181a(C1907a.this.f3298b.getAppid(), "下载的文件不是一个zip文件");
                        C1853c.m1308c("OfflineService", "[Offline-file] Save fail " + C1907a.this.f3298b.getDocumentUrl() + " is not a zip, delete it.");
                        C1907a aVar = C1907a.this;
                        C1907a.m1182a(aVar, aVar.f3298b, C1907a.this.f3298b.isAvailable());
                    }
                }
            });
        }

        @Override // com.p051jd.hybrid.downloader.C1545a, com.p051jd.framework.network.JDResponseListener
        public final void onError(JDError jDError) {
            if (this.f3299c < C1841a.f3186f) {
                C1853c.m1308c("OfflineService", "[Offline-file] Retry download " + this.f3298b.getDocumentUrl());
                C1899b.m1190a(C1899b.this, this.f3298b, this.f3299c + 1);
                C1909c.m1176c(this.f3298b);
                return;
            }
            C1909c.m1177b(this.f3298b);
        }
    }

    public C1899b(Context context) {
        this.f3278a = context.getApplicationContext();
        this.f3279b = OfflineDatabase.m1229a(this.f3278a).mo1228a();
    }

    /* renamed from: a */
    static /* synthetic */ OfflineFiles m1187a(boolean z, OfflineEntity offlineEntity) {
        return z ? new OfflineFiles(true, offlineEntity.getDocumentUrl(), offlineEntity.getOriginalUrl(), offlineEntity.getSourceRoot(), offlineEntity.getDocumentFile().getPath(), offlineEntity.getSourceFile().getPath(), offlineEntity.getFileInfo().getVersionCode()) : new OfflineFiles(false, offlineEntity.getDocumentUrl(), offlineEntity.getOriginalUrl(), offlineEntity.getSourceRoot(), null, null, offlineEntity.getFileInfo().getVersionCode());
    }

    /* renamed from: a */
    static /* synthetic */ List m1192a(C1899b bVar, C1861a.C1863b bVar2) {
        ArrayList<OfflineEntity> arrayList;
        String str;
        StringBuilder sb;
        int size = bVar2.f3212a != null ? bVar2.f3212a.size() : 0;
        int size2 = bVar2.f3213b != null ? bVar2.f3213b.size() : 0;
        if (size > 0 || size2 > 0) {
            arrayList = new ArrayList(size + size2);
            if (size > 0) {
                arrayList.addAll(bVar2.f3212a);
            }
            if (size2 > 0) {
                arrayList.addAll(bVar2.f3213b);
            }
        } else {
            arrayList = null;
        }
        if (arrayList == null || arrayList.isEmpty()) {
            C1853c.m1308c("OfflineService", "[Offline-file] Final local offline config list is empty, no need to download.");
            return null;
        }
        Collections.sort(arrayList);
        ArrayList arrayList2 = new ArrayList();
        int i = 0;
        for (OfflineEntity offlineEntity : arrayList) {
            i++;
            if (C1841a.m1346b()) {
                C1853c.m1309b("OfflineService", null, String.format(Locale.getDefault(), "%d:项目(%s)的离线包优先级=%s", Integer.valueOf(i), offlineEntity.getAppid(), Float.valueOf(offlineEntity.getPriority())));
            }
            if (i <= C1841a.f3188h) {
                if (!offlineEntity.isAvailable()) {
                    if (!C1909c.m1178a(offlineEntity)) {
                        arrayList2.add(offlineEntity);
                        if (C1841a.m1346b()) {
                            str = "OfflineService-Priority";
                            sb = new StringBuilder("[Offline-file] Need to download because its priority is high enough within max count(");
                            sb.append(C1841a.f3188h);
                            sb.append("), priority = ");
                        }
                    } else if (C1841a.m1346b()) {
                        str = "OfflineService-Priority";
                        sb = new StringBuilder("[Offline-file] Need to download but it has exceed the max retry count, priority = ");
                    }
                } else if (C1841a.m1346b()) {
                    str = "OfflineService-Priority";
                    sb = new StringBuilder("[Offline-file] Do nothing for existed offline files because its priority is high enough within max count(");
                    sb.append(C1841a.f3188h);
                    sb.append("), priority = ");
                }
            } else if (offlineEntity.isAvailable()) {
                if (C1841a.m1346b()) {
                    C1853c.m1308c("OfflineService-Priority", "[Offline-file] Delete existed offline files because of exceeding max count(" + C1841a.f3188h + "), priority = " + offlineEntity.getPriority() + ", url: " + offlineEntity.getDocumentUrl());
                }
                C1867d.m1271a(bVar.f3278a, offlineEntity);
                offlineEntity.setAvailable(false);
                offlineEntity.setZipFile((FileDetail) null);
                offlineEntity.setDocumentFile((FileDetail) null);
                offlineEntity.setSourceFile((FileDetail) null);
                if (bVar2.f3213b == null) {
                    bVar2.f3213b = new ArrayList();
                }
                if (!bVar2.f3213b.contains(offlineEntity)) {
                    bVar2.f3213b.add(offlineEntity);
                }
            } else if (C1841a.m1346b()) {
                str = "OfflineService-Priority";
                sb = new StringBuilder("[Offline-file] Won't download because of exceeding max count(");
                sb.append(C1841a.f3188h);
                sb.append("), priority = ");
            }
            sb.append(offlineEntity.getPriority());
            sb.append(", url: ");
            sb.append(offlineEntity.getDocumentUrl());
            C1853c.m1308c(str, sb.toString());
        }
        return arrayList2;
    }

    /* renamed from: a */
    static /* synthetic */ void m1191a(C1899b bVar, final OfflineEntity offlineEntity) {
        C1848a.m1322a().m1321b().execute(new Runnable() { // from class: com.jd.libs.hybrid.offlineload.loader.b.5
            @Override // java.lang.Runnable
            public final void run() {
                try {
                    C1867d.m1271a(C1899b.this.f3278a, offlineEntity);
                    C1899b.this.f3279b.mo1206b(offlineEntity);
                } catch (Exception e) {
                    C1853c.m1312a("OfflineService", e);
                }
            }
        });
    }

    /* renamed from: a */
    static /* synthetic */ void m1190a(C1899b bVar, OfflineEntity offlineEntity, int i) {
        bVar.m1188a(Collections.singletonList(offlineEntity), i, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m1188a(List<OfflineEntity> list, int i, boolean z) {
        int lastIndexOf;
        C1551b a = C1551b.m1575a();
        if (a != null) {
            ArrayList arrayList = new ArrayList(list.size());
            for (OfflineEntity offlineEntity : list) {
                String url = offlineEntity.getFileInfo().getUrl();
                String str = "项目(" + offlineEntity.getAppid() + ")离线包";
                String substring = (url.endsWith("/") || -1 == (lastIndexOf = url.lastIndexOf("/"))) ? "" : url.substring(lastIndexOf + 1);
                if (TextUtils.isEmpty(substring)) {
                    substring = C1866c.m1275a();
                }
                C1556c cVar = new C1556c(str, url, "hybrid/.preload/.zip", (System.currentTimeMillis() + ((long) new Random().nextInt(1000))) + "_" + substring, true, (int) (offlineEntity.getPriority() * 1000.0f));
                cVar.m1564a(0);
                cVar.m1562a(new C1554a(offlineEntity.getFileInfo().getMd5()));
                cVar.m1563a(new C1907a(offlineEntity, i));
                arrayList.add(cVar);
            }
            a.m1570a(arrayList, z);
        }
    }
}
