package com.p051jd.mobile.image.p106b.p107a;

import android.net.Uri;
import android.os.Looper;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Log;
import com.facebook.common.logging.FLog;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.backends.okhttp3.ImgNetStatisticTool;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.listener.RequestListener;
import com.facebook.imagepipeline.producers.BaseNetworkFetcher;
import com.facebook.imagepipeline.producers.BaseProducerContextCallbacks;
import com.facebook.imagepipeline.producers.Consumer;
import com.facebook.imagepipeline.producers.FetchState;
import com.facebook.imagepipeline.producers.NetworkFetcher;
import com.facebook.imagepipeline.producers.ProducerContext;
import com.facebook.imagepipeline.request.ImageRequest;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.JdImageToolKit;
import com.jingdong.app.util.image.assist.JDFailReason;
import com.jingdong.app.util.image.assist.JDFailType;
import com.jingdong.common.httpdns.DnsResolver;
import com.jingdong.common.httpdns.c;
import com.jingdong.common.utils.Configuration;
import com.p051jd.mobile.image.AbstractC1969b;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

/* renamed from: com.jd.mobile.image.b.a.a */
/* loaded from: classes.dex */
public class C1973a extends BaseNetworkFetcher<C1977a> {

    /* renamed from: a */
    private final OkHttpClient f3415a = ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder()).connectTimeout(15000, TimeUnit.MILLISECONDS).readTimeout(20000, TimeUnit.MILLISECONDS).build();

    /* renamed from: b */
    private Executor f3416b = this.f3415a.dispatcher().executorService();

    /* renamed from: com.jd.mobile.image.b.a.a$a */
    /* loaded from: classes.dex */
    public static class C1977a extends FetchState {

        /* renamed from: a */
        public long f3430a;

        /* renamed from: b */
        public long f3431b;

        /* renamed from: c */
        public long f3432c;

        public C1977a(Consumer<EncodedImage> consumer, ProducerContext producerContext) {
            super(consumer, producerContext);
        }
    }

    public C1973a() {
        this.f3415a.readTimeoutMillis();
    }

    /* renamed from: a */
    private static String m1025a(String str) {
        try {
            String host = new URL(str).getHost();
            if (!TextUtils.isEmpty(host)) {
                return host;
            }
            throw new MalformedURLException(str);
        } catch (MalformedURLException unused) {
            return null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m1030a(C1977a aVar, String str, Throwable th) {
        ImageRequest imageRequest = aVar.getContext().getImageRequest();
        if (!imageRequest.isUseDomainFlag()) {
            String a = m1025a(str);
            JdImageToolKit.getEngine().getExceptionReportHandlerImpl().reportBitmapException(imageRequest.getSourceUri().toString(), new JDFailReason(JDFailType.UNKNOWN, new Fresco.JDImageNetworkException(th, imageRequest.isUseDomainFlag(), str, a)), JdImageToolKit.getEngine().getImageControllerImpl().getThisPageInfo());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d3  */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public void m1024a(String str, final C1977a aVar, final NetworkFetcher.Callback callback, final boolean z) {
        final String str2;
        Request build;
        final ImageRequest imageRequest = aVar.getContext().getImageRequest();
        Uri uri = aVar.getUri();
        final String host = uri.getHost();
        final String str3 = null;
        final boolean z2 = false;
        if (z) {
            if (!imageRequest.isUseDomainFlag()) {
                imageRequest.setUseDomainFlag(true);
            }
            str2 = uri.toString();
            str3 = null;
        } else if (!imageRequest.isUseDomainFlag()) {
            c healthIp = DnsResolver.getInstance().getHealthIp(host);
            if (healthIp != null) {
                str2 = str.replaceFirst(host, healthIp.c);
                if (healthIp.a == 1) {
                    str3 = healthIp.c;
                } else if (healthIp.a == 2) {
                    z2 = true;
                }
                if (Fresco.isLog) {
                    Log.d("facebook", "ImageHttpDns域名 : " + host + " ,获取到可用IP地址类型 : " + healthIp.a() + ", ip : " + healthIp.c);
                }
            } else {
                imageRequest.setUseDomainFlag(true);
                str2 = str;
            }
            if (Fresco.isLog) {
                Log.d("facebook", "ImageRequest ==> isRetry : " + z + ", URL : " + str2);
            }
            Request.Builder builder = new Request.Builder().cacheControl(new CacheControl.Builder().noStore().build()).url(str2).get();
            if (!imageRequest.isUseDomainFlag()) {
                builder.addHeader(Configuration.HOST, host);
            }
            build = builder.build();
            if (!aVar.getContext().getImageRequest().isUseDomainFlag() && !TextUtils.isEmpty(host)) {
                build.url().setSniHost(host);
            }
            final Call newCall = ShooterOkhttp3Instrumentation.newCall(this.f3415a, build);
            aVar.getContext().addCallbacks(new BaseProducerContextCallbacks() { // from class: com.jd.mobile.image.b.a.a.1
                @Override // com.facebook.imagepipeline.producers.BaseProducerContextCallbacks, com.facebook.imagepipeline.producers.ProducerContextCallbacks
                public void onCancellationRequested() {
                    if (!C1973a.this.f3415a.dispatcher().queuedCalls().contains(newCall)) {
                        return;
                    }
                    if (Looper.myLooper() != Looper.getMainLooper()) {
                        newCall.cancel();
                    } else {
                        C1973a.this.f3416b.execute(new Runnable() { // from class: com.jd.mobile.image.b.a.a.1.1
                            @Override // java.lang.Runnable
                            public void run() {
                                newCall.cancel();
                            }
                        });
                    }
                }
            });
            final long currentTimeMillis = System.currentTimeMillis();
            newCall.enqueue(new Callback() { // from class: com.jd.mobile.image.b.a.a.2
                public void onFailure(Call call, IOException iOException) {
                    try {
                        if (!TextUtils.isEmpty(str3)) {
                            DnsResolver.getInstance().add2IPFailList(host, str3, iOException);
                        }
                    } catch (Throwable unused) {
                    }
                    if (call != null && call.isCanceled()) {
                        int decreaseTotalCountAndGet = ImgNetStatisticTool.decreaseTotalCountAndGet();
                        if (Fresco.isLog) {
                            Log.d("facebook", ">>>>>>>>>>>>>>>current total count : after cancel " + decreaseTotalCountAndGet);
                        }
                    }
                    if (call != null) {
                        try {
                            if (!call.isCanceled() && !z) {
                                try {
                                    C1973a.this.m1030a(aVar, str2, iOException);
                                    C1973a.this.m1024a(str2, aVar, callback, true);
                                } catch (Exception e) {
                                    C1973a.this.m1023a(call, e, callback);
                                }
                            }
                        } finally {
                            C1973a.m1022b();
                        }
                    }
                    C1973a.this.m1023a(call, iOException, callback);
                    if (Fresco.isLog) {
                        Log.e("facebook", "image request" + call.request().url().toString() + " failed!");
                    }
                }

                public void onResponse(Call call, Response response) {
                    aVar.f3431b = SystemClock.elapsedRealtime();
                    ResponseBody body = response.body();
                    try {
                        if (!imageRequest.isUseDomainFlag() && !TextUtils.isEmpty(str3)) {
                            DnsResolver.getInstance().removeFromFailList(host, str3);
                        }
                    } catch (Throwable unused) {
                    }
                    try {
                        try {
                        } catch (Exception e) {
                            C1973a.this.m1023a(call, e, callback);
                            try {
                                try {
                                    body.close();
                                } catch (Exception e2) {
                                    FLog.m4291w("facebook", "Exception when closing response body", e2);
                                }
                            } catch (Throwable th) {
                                C1973a.m1022b();
                                throw th;
                            }
                        }
                        if (!response.isSuccessful()) {
                            if (!z) {
                                try {
                                    C1973a aVar2 = C1973a.this;
                                    C1977a aVar3 = aVar;
                                    String str4 = str2;
                                    aVar2.m1030a(aVar3, str4, new IOException("Unexpected HTTP code : " + response));
                                    C1973a.this.m1024a(str2, aVar, callback, true);
                                } catch (Exception e3) {
                                    C1973a.this.m1023a(call, e3, callback);
                                }
                            } else {
                                C1973a aVar4 = C1973a.this;
                                aVar4.m1023a(call, new IOException("Unexpected HTTP code " + response), callback);
                                if (Fresco.isLog) {
                                    Log.e("facebook", "image request" + call.request().url().toString() + " failed!");
                                }
                            }
                            try {
                                try {
                                    body.close();
                                } catch (Exception e4) {
                                    FLog.m4291w("facebook", "Exception when closing response body", e4);
                                }
                                C1973a.m1022b();
                            } catch (Throwable th2) {
                                C1973a.m1022b();
                                throw th2;
                            }
                        } else {
                            ImgNetStatisticTool.incrementSuccessCountAndGet();
                            if (imageRequest.isUseDomainFlag()) {
                                ImgNetStatisticTool.incrementDomainSuccessCountAndGet();
                            } else if (z2) {
                                ImgNetStatisticTool.incrementBakIpSuccessCountAndGet();
                            }
                            if (Fresco.isLog) {
                                Log.d("facebook", "Protocol is " + response.protocol().toString());
                            }
                            int contentLength = (int) body.contentLength();
                            int i = contentLength < 0 ? 0 : contentLength;
                            long currentTimeMillis2 = System.currentTimeMillis();
                            callback.onResponse(body.byteStream(), i);
                            RequestListener requestListener = imageRequest.getRequestListener();
                            if (requestListener instanceof AbstractC1969b) {
                                ((AbstractC1969b) requestListener).onSuccess(str2, currentTimeMillis, currentTimeMillis2, i);
                            }
                            try {
                                try {
                                    body.close();
                                } catch (Throwable th3) {
                                    C1973a.m1022b();
                                    throw th3;
                                }
                            } catch (Exception e5) {
                                FLog.m4291w("facebook", "Exception when closing response body", e5);
                            }
                            C1973a.m1022b();
                        }
                    } catch (Throwable th4) {
                        try {
                            try {
                                body.close();
                            } catch (Exception e6) {
                                FLog.m4291w("facebook", "Exception when closing response body", e6);
                            }
                            C1973a.m1022b();
                            throw th4;
                        } catch (Throwable th5) {
                            C1973a.m1022b();
                            throw th5;
                        }
                    }
                }
            });
        } else {
            str3 = null;
            str2 = str;
        }
        z2 = false;
        if (Fresco.isLog) {
        }
        Request.Builder builder2 = new Request.Builder().cacheControl(new CacheControl.Builder().noStore().build()).url(str2).get();
        if (!imageRequest.isUseDomainFlag()) {
        }
        build = builder2.build();
        if (!aVar.getContext().getImageRequest().isUseDomainFlag()) {
            build.url().setSniHost(host);
        }
        final Call newCall2 = ShooterOkhttp3Instrumentation.newCall(this.f3415a, build);
        aVar.getContext().addCallbacks(new BaseProducerContextCallbacks() { // from class: com.jd.mobile.image.b.a.a.1
            @Override // com.facebook.imagepipeline.producers.BaseProducerContextCallbacks, com.facebook.imagepipeline.producers.ProducerContextCallbacks
            public void onCancellationRequested() {
                if (!C1973a.this.f3415a.dispatcher().queuedCalls().contains(newCall2)) {
                    return;
                }
                if (Looper.myLooper() != Looper.getMainLooper()) {
                    newCall2.cancel();
                } else {
                    C1973a.this.f3416b.execute(new Runnable() { // from class: com.jd.mobile.image.b.a.a.1.1
                        @Override // java.lang.Runnable
                        public void run() {
                            newCall2.cancel();
                        }
                    });
                }
            }
        });
        final long currentTimeMillis2 = System.currentTimeMillis();
        newCall2.enqueue(new Callback() { // from class: com.jd.mobile.image.b.a.a.2
            public void onFailure(Call call, IOException iOException) {
                try {
                    if (!TextUtils.isEmpty(str3)) {
                        DnsResolver.getInstance().add2IPFailList(host, str3, iOException);
                    }
                } catch (Throwable unused) {
                }
                if (call != null && call.isCanceled()) {
                    int decreaseTotalCountAndGet = ImgNetStatisticTool.decreaseTotalCountAndGet();
                    if (Fresco.isLog) {
                        Log.d("facebook", ">>>>>>>>>>>>>>>current total count : after cancel " + decreaseTotalCountAndGet);
                    }
                }
                if (call != null) {
                    try {
                        if (!call.isCanceled() && !z) {
                            try {
                                C1973a.this.m1030a(aVar, str2, iOException);
                                C1973a.this.m1024a(str2, aVar, callback, true);
                            } catch (Exception e) {
                                C1973a.this.m1023a(call, e, callback);
                            }
                        }
                    } finally {
                        C1973a.m1022b();
                    }
                }
                C1973a.this.m1023a(call, iOException, callback);
                if (Fresco.isLog) {
                    Log.e("facebook", "image request" + call.request().url().toString() + " failed!");
                }
            }

            public void onResponse(Call call, Response response) {
                aVar.f3431b = SystemClock.elapsedRealtime();
                ResponseBody body = response.body();
                try {
                    if (!imageRequest.isUseDomainFlag() && !TextUtils.isEmpty(str3)) {
                        DnsResolver.getInstance().removeFromFailList(host, str3);
                    }
                } catch (Throwable unused) {
                }
                try {
                    try {
                    } catch (Exception e) {
                        C1973a.this.m1023a(call, e, callback);
                        try {
                            try {
                                body.close();
                            } catch (Exception e2) {
                                FLog.m4291w("facebook", "Exception when closing response body", e2);
                            }
                        } catch (Throwable th) {
                            C1973a.m1022b();
                            throw th;
                        }
                    }
                    if (!response.isSuccessful()) {
                        if (!z) {
                            try {
                                C1973a aVar2 = C1973a.this;
                                C1977a aVar3 = aVar;
                                String str4 = str2;
                                aVar2.m1030a(aVar3, str4, new IOException("Unexpected HTTP code : " + response));
                                C1973a.this.m1024a(str2, aVar, callback, true);
                            } catch (Exception e3) {
                                C1973a.this.m1023a(call, e3, callback);
                            }
                        } else {
                            C1973a aVar4 = C1973a.this;
                            aVar4.m1023a(call, new IOException("Unexpected HTTP code " + response), callback);
                            if (Fresco.isLog) {
                                Log.e("facebook", "image request" + call.request().url().toString() + " failed!");
                            }
                        }
                        try {
                            try {
                                body.close();
                            } catch (Exception e4) {
                                FLog.m4291w("facebook", "Exception when closing response body", e4);
                            }
                            C1973a.m1022b();
                        } catch (Throwable th2) {
                            C1973a.m1022b();
                            throw th2;
                        }
                    } else {
                        ImgNetStatisticTool.incrementSuccessCountAndGet();
                        if (imageRequest.isUseDomainFlag()) {
                            ImgNetStatisticTool.incrementDomainSuccessCountAndGet();
                        } else if (z2) {
                            ImgNetStatisticTool.incrementBakIpSuccessCountAndGet();
                        }
                        if (Fresco.isLog) {
                            Log.d("facebook", "Protocol is " + response.protocol().toString());
                        }
                        int contentLength = (int) body.contentLength();
                        int i = contentLength < 0 ? 0 : contentLength;
                        long currentTimeMillis22 = System.currentTimeMillis();
                        callback.onResponse(body.byteStream(), i);
                        RequestListener requestListener = imageRequest.getRequestListener();
                        if (requestListener instanceof AbstractC1969b) {
                            ((AbstractC1969b) requestListener).onSuccess(str2, currentTimeMillis2, currentTimeMillis22, i);
                        }
                        try {
                            try {
                                body.close();
                            } catch (Throwable th3) {
                                C1973a.m1022b();
                                throw th3;
                            }
                        } catch (Exception e5) {
                            FLog.m4291w("facebook", "Exception when closing response body", e5);
                        }
                        C1973a.m1022b();
                    }
                } catch (Throwable th4) {
                    try {
                        try {
                            body.close();
                        } catch (Exception e6) {
                            FLog.m4291w("facebook", "Exception when closing response body", e6);
                        }
                        C1973a.m1022b();
                        throw th4;
                    } catch (Throwable th5) {
                        C1973a.m1022b();
                        throw th5;
                    }
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m1023a(Call call, Throwable th, NetworkFetcher.Callback callback) {
        if (call == null || !call.isCanceled()) {
            callback.onFailure(th);
        } else {
            callback.onCancellation();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: b */
    public static void m1022b() {
        if (ImgNetStatisticTool.isSendLastResult() && JdImageToolKit.getEngine().getNetStatReporter() != null) {
            HashMap hashMap = new HashMap();
            hashMap.put(ImgNetStatisticTool.KEY_TOTAL_IMG_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getTotalCount()));
            hashMap.put(ImgNetStatisticTool.KEY_SUCCEED_IMG_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getSuccessCount()));
            hashMap.put(ImgNetStatisticTool.KEY_SUCCEED_IMG_DOMAIN_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getDomainSuccessCount()));
            hashMap.put(ImgNetStatisticTool.KEY_SUCCEED_IMG_BAK_IP_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getSuccImgBakIpRequestCount()));
            JdImageToolKit.getEngine().getNetStatReporter().saveStatisticData(hashMap);
        }
    }

    /* renamed from: a */
    public C1977a createFetchState(Consumer<EncodedImage> consumer, ProducerContext producerContext) {
        return new C1977a(consumer, producerContext);
    }

    /* renamed from: a */
    public void onFetchCompletion(C1977a aVar, int i) {
        aVar.f3432c = SystemClock.elapsedRealtime();
    }

    /* renamed from: a */
    public void fetch(C1977a aVar, NetworkFetcher.Callback callback) {
        try {
            aVar.f3430a = SystemClock.elapsedRealtime();
            int incrementTotalCountAndGet = ImgNetStatisticTool.incrementTotalCountAndGet();
            if (Fresco.isLog) {
                Log.d("facebook", ">>>>>>>>>>>>>>>current total count : " + incrementTotalCountAndGet);
            }
            m1024a(aVar.getUri().toString(), aVar, callback, false);
        } catch (Exception e) {
            m1023a((Call) null, e, callback);
        }
    }

    /* renamed from: b */
    public Map<String, String> getExtraMap(C1977a aVar, int i) {
        HashMap hashMap = new HashMap(4);
        hashMap.put("queue_time", Long.toString(aVar.f3431b - aVar.f3430a));
        hashMap.put("fetch_time", Long.toString(aVar.f3432c - aVar.f3431b));
        hashMap.put("total_time", Long.toString(aVar.f3432c - aVar.f3430a));
        hashMap.put("image_size", Integer.toString(i));
        return hashMap;
    }
}
