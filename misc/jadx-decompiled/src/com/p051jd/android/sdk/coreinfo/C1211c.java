package com.p051jd.android.sdk.coreinfo;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.hardware.fingerprint.FingerprintManager;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.os.storage.StorageManager;
import android.os.storage.StorageVolume;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import androidx.annotation.RequiresPermission;
import com.facebook.react.modules.deviceinfo.DeviceInfoModule;
import com.facebook.react.uimanager.ViewProps;
import com.jd.android.sdk.coreinfo.c.a;
import com.p051jd.android.sdk.coreinfo.p060a.C1204a;
import com.p051jd.android.sdk.coreinfo.p060a.C1205b;
import com.p051jd.android.sdk.coreinfo.p060a.C1206c;
import com.p051jd.android.sdk.coreinfo.p060a.C1207d;
import com.p051jd.android.sdk.coreinfo.p060a.C1208e;
import com.p051jd.android.sdk.coreinfo.p061b.C1210a;
import com.p051jd.android.sdk.coreinfo.p062c.C1213c;
import com.p051jd.android.sdk.coreinfo.p062c.C1214d;
import com.p051jd.android.sdk.coreinfo.p062c.C1216f;
import java.io.File;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.lang.reflect.Method;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.List;

/* compiled from: TbsSdkJava */
/* renamed from: com.jd.android.sdk.coreinfo.c */
/* loaded from: classes.dex */
final class C1211c {

    /* renamed from: a */
    private static String f2013a = "";

    /* renamed from: b */
    private static String f2014b = "";

    /* renamed from: c */
    private static String f2015c = "";

    /* renamed from: d */
    private static String f2016d = "";

    /* renamed from: e */
    private static String f2017e = "";

    /* renamed from: f */
    private static String f2018f = "";

    /* renamed from: g */
    private static String f2019g = "";

    /* renamed from: h */
    private static String f2020h = "";

    /* renamed from: i */
    private static String f2021i = "";

    /* renamed from: j */
    private static long f2022j = 0;

    /* renamed from: k */
    private static long f2023k = 0;

    /* renamed from: l */
    private static long f2024l = 0;

    /* renamed from: m */
    private static boolean f2025m = false;

    /* renamed from: n */
    private static boolean f2026n = false;

    /* renamed from: o */
    private static boolean f2027o = false;

    /* renamed from: p */
    private static boolean f2028p = false;

    /* renamed from: q */
    private static boolean f2029q = false;

    /* renamed from: r */
    private static boolean f2030r = false;

    /* renamed from: s */
    private static boolean f2031s = false;

    /* renamed from: t */
    private static boolean f2032t = false;

    /* renamed from: u */
    private static boolean f2033u = false;

    /* renamed from: v */
    private static boolean f2034v = false;

    /* renamed from: w */
    private static String f2035w = "";

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    /* renamed from: a */
    static String m2323a(Context context) {
        if (TextUtils.isEmpty(f2013a)) {
            f2013a = C1213c.m2282a(C1205b.m2357a(context), "");
        }
        return f2013a;
    }

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    /* renamed from: b */
    static String m2319b(Context context) {
        if (TextUtils.isEmpty(f2014b)) {
            f2014b = C1213c.m2282a(C1208e.m2338a(context), "");
        }
        return f2014b;
    }

    /* renamed from: a */
    static String m2324a() {
        return C1213c.m2282a(Build.DEVICE, "");
    }

    /* renamed from: b */
    static String m2320b() {
        return C1213c.m2282a(Build.PRODUCT, "");
    }

    /* renamed from: c */
    static String m2318c() {
        return C1213c.m2282a(Build.MANUFACTURER, "");
    }

    /* renamed from: d */
    static String m2316d() {
        return C1213c.m2282a(Build.BRAND, "");
    }

    /* renamed from: e */
    static String m2314e() {
        return C1213c.m2282a(Build.MODEL, "");
    }

    /* renamed from: f */
    static String m2312f() {
        return C1213c.m2282a(Build.BOARD, "");
    }

    /* renamed from: g */
    static String m2310g() {
        if (TextUtils.isEmpty(f2015c)) {
            f2015c = C1216f.m2278a("ro.board.platform", "");
        }
        return f2015c;
    }

    /* renamed from: h */
    static String[] m2308h() {
        if (Build.VERSION.SDK_INT >= 21) {
            return Build.SUPPORTED_ABIS;
        }
        return TextUtils.isEmpty(Build.CPU_ABI2) ? new String[]{Build.CPU_ABI} : new String[]{Build.CPU_ABI, Build.CPU_ABI2};
    }

    /* renamed from: i */
    static String m2306i() {
        if (TextUtils.isEmpty(f2016d)) {
            f2016d = C1213c.m2282a(Build.getRadioVersion(), "");
        }
        return f2016d;
    }

    /* renamed from: j */
    static String m2304j() {
        return C1213c.m2282a(Build.HARDWARE, "");
    }

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    /* renamed from: k */
    static String m2302k() {
        if (TextUtils.isEmpty(f2017e)) {
            if (Build.VERSION.SDK_INT >= 26) {
                try {
                    f2017e = C1213c.m2282a(Build.getSerial(), "");
                } catch (SecurityException e) {
                    a.b(DeviceInfoModule.NAME, "DeviceInfo.getHardwareSerialNo() exception: " + e.getMessage());
                    return "";
                }
            } else {
                f2017e = C1213c.m2282a(Build.SERIAL, "");
            }
        }
        return f2017e;
    }

    /* renamed from: l */
    static String m2300l() {
        return C1213c.m2282a(Build.BOOTLOADER, "");
    }

    /* renamed from: m */
    static String m2298m() {
        if (TextUtils.isEmpty(f2018f)) {
            f2018f = C1213c.m2282a(C1206c.m2345a(), "");
        }
        return f2018f;
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x007b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0076 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: n */
    /* Code decompiled incorrectly, please refer to instructions dump */
    static String m2296n() {
        LineNumberReader lineNumberReader;
        Throwable th;
        InputStreamReader inputStreamReader;
        if (TextUtils.isEmpty(f2019g)) {
            String str = "";
            InputStreamReader inputStreamReader2 = null;
            try {
                inputStreamReader = new InputStreamReader(Runtime.getRuntime().exec("cat /proc/cpuinfo | grep Serial").getInputStream());
                try {
                    lineNumberReader = new LineNumberReader(inputStreamReader);
                    for (int i = 0; i < 100; i = i + 1 + 1) {
                        try {
                            try {
                                String readLine = lineNumberReader.readLine();
                                if (readLine != null && readLine.indexOf("Serial") >= 0) {
                                    str = readLine.substring(readLine.indexOf(":") + 1).trim();
                                    break;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                if (inputStreamReader != null) {
                                }
                                if (lineNumberReader != null) {
                                }
                                throw th;
                            }
                        } catch (Throwable th3) {
                            try {
                                th3.printStackTrace();
                            } catch (Throwable th4) {
                                th = th4;
                                inputStreamReader2 = inputStreamReader;
                                try {
                                    th.printStackTrace();
                                    f2019g = C1213c.m2282a(str, "");
                                    return f2019g;
                                } catch (Throwable th5) {
                                    th = th5;
                                    inputStreamReader = inputStreamReader2;
                                    if (inputStreamReader != null) {
                                        try {
                                            inputStreamReader.close();
                                        } catch (Exception unused) {
                                        }
                                    }
                                    if (lineNumberReader != null) {
                                        try {
                                            lineNumberReader.close();
                                        } catch (Exception unused2) {
                                        }
                                    }
                                    throw th;
                                }
                            }
                        }
                    }
                } catch (Throwable th6) {
                    th = th6;
                    lineNumberReader = null;
                }
            } catch (Throwable th7) {
                th = th7;
                lineNumberReader = null;
            }
            f2019g = C1213c.m2282a(str, "");
        }
        return f2019g;
    }

    /* renamed from: o */
    static String m2294o() {
        if (TextUtils.isEmpty(f2020h)) {
            try {
                f2020h = String.valueOf(new File("/sys/devices/system/cpu/").listFiles(new C1210a()).length);
            } catch (Exception e) {
                a.a(DeviceInfoModule.NAME, "An exception happens when call getCPUNum()", e);
                return "1";
            }
        }
        return f2020h;
    }

    /* renamed from: p */
    static String m2292p() {
        if (TextUtils.isEmpty(f2021i)) {
            String a = C1214d.m2281a("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq", false);
            if (a.length() == 0) {
                return "";
            }
            f2021i = C1213c.m2282a(a, "");
        }
        return f2021i;
    }

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    /* renamed from: c */
    static String m2317c(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            return C1213c.m2282a(((TelephonyManager) context.getSystemService("phone")).getSimSerialNumber(), "");
        } catch (SecurityException e) {
            a.b(DeviceInfoModule.NAME, "DeviceInfo.getSimSerialNo() exception: " + e.getMessage());
            return "";
        }
    }

    /* renamed from: q */
    static String m2291q() {
        return C1213c.m2282a(C1214d.m2281a("/sys/block/mmcblk0/device/cid", false), "");
    }

    /* renamed from: d */
    static long m2315d(Context context) {
        long j;
        if (f2022j <= 0) {
            if (Build.VERSION.SDK_INT < 16) {
                try {
                    String a = C1214d.m2281a("/proc/meminfo", true);
                    if (a.length() == 0) {
                        j = 0;
                    } else {
                        int indexOf = a.indexOf("MemTotal:");
                        j = Long.parseLong(a.substring(indexOf + 9, a.indexOf("kB", indexOf)).trim());
                    }
                    f2022j = j;
                } catch (Exception e) {
                    a.a(DeviceInfoModule.NAME, "An exception happens when call getMemTotalSizeLowerAPI16()", e);
                    return 0;
                }
            } else if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return 0;
            } else {
                try {
                    ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
                    ((ActivityManager) context.getSystemService("activity")).getMemoryInfo(memoryInfo);
                    f2022j = memoryInfo.totalMem >> 10;
                } catch (Exception e2) {
                    a.a(DeviceInfoModule.NAME, "An exception happens when call getMemTotalSize()", e2);
                    return 0;
                }
            }
        }
        return f2022j;
    }

    /* renamed from: e */
    static long m2313e(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return 0;
        }
        try {
            ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
            ((ActivityManager) context.getSystemService("activity")).getMemoryInfo(memoryInfo);
            return memoryInfo.availMem >> 10;
        } catch (Exception e) {
            a.a(DeviceInfoModule.NAME, "An exception happens when call getMemAvailSize()", e);
            return 0;
        }
    }

    /* renamed from: r */
    static long m2290r() {
        if (f2023k <= 0) {
            try {
                f2023k = m2321a(Environment.getDataDirectory().getPath());
            } catch (Exception e) {
                a.a(DeviceInfoModule.NAME, "An exception happens when call getRomSize()", e);
                return 0;
            }
        }
        return f2023k;
    }

    /* renamed from: s */
    static long m2289s() {
        if (f2024l <= 0) {
            try {
                f2024l = m2321a(Environment.getExternalStorageDirectory().getPath());
            } catch (Exception e) {
                a.a(DeviceInfoModule.NAME, "An exception happens when call getExternalStorageSize()", e);
                return 0;
            }
        }
        return f2024l;
    }

    /* renamed from: a */
    private static long m2321a(String str) {
        StatFs statFs = new StatFs(str);
        if (Build.VERSION.SDK_INT >= 18) {
            return statFs.getBlockCountLong() * statFs.getBlockSizeLong();
        }
        return (long) (statFs.getBlockCount() * statFs.getBlockSize());
    }

    /* renamed from: f */
    static String m2311f(Context context) {
        if (context == null) {
            return "";
        }
        try {
            return String.valueOf(context.getResources().getDisplayMetrics().densityDpi);
        } catch (Exception e) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getDensityDpi()", e);
            return "";
        }
    }

    /* renamed from: g */
    static String m2309g(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
            return displayMetrics.widthPixels + "*" + displayMetrics.heightPixels;
        } catch (Exception e) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getDisplayMetrics()", e);
            return "";
        }
    }

    /* renamed from: h */
    static boolean m2307h(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return false;
        }
        try {
            if (Build.VERSION.SDK_INT < 24) {
                return m2295n(context);
            }
            List<StorageVolume> storageVolumes = ((StorageManager) context.getSystemService("storage")).getStorageVolumes();
            if (storageVolumes != null) {
                for (StorageVolume storageVolume : storageVolumes) {
                    if (storageVolume.isRemovable() && storageVolume.getState().equals("mounted")) {
                        return true;
                    }
                }
            }
            return false;
        } catch (Exception e) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call storageIsRemovable()", e);
            return false;
        }
    }

    /* renamed from: n */
    private static boolean m2295n(Context context) {
        StorageManager storageManager = (StorageManager) context.getSystemService("storage");
        try {
            Method method = StorageManager.class.getMethod("getVolumeList", new Class[0]);
            method.setAccessible(true);
            Object[] objArr = (Object[]) method.invoke(storageManager, new Object[0]);
            if (objArr != null) {
                for (Object obj : objArr) {
                    if (((Boolean) obj.getClass().getMethod("isRemovable", new Class[0]).invoke(obj, new Object[0])).booleanValue() && ((String) obj.getClass().getMethod("getState", new Class[0]).invoke(obj, new Object[0])).equals("mounted")) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call storageIsRemovable()", e);
        }
        return false;
    }

    /* renamed from: a */
    static boolean m2322a(Context context, int i) {
        if (!f2026n) {
            boolean z = false;
            if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return false;
            }
            SensorManager sensorManager = (SensorManager) context.getSystemService("sensor");
            if (sensorManager == null) {
                return false;
            }
            List<Sensor> sensorList = sensorManager.getSensorList(i);
            if (sensorList != null && sensorList.size() > 0) {
                z = true;
            }
            f2025m = z;
            f2026n = true;
        }
        return f2025m;
    }

    /* renamed from: i */
    static boolean m2305i(Context context) {
        if (!f2028p) {
            boolean z = false;
            if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return false;
            }
            LocationManager locationManager = (LocationManager) context.getSystemService("location");
            if (locationManager == null) {
                return false;
            }
            List<String> allProviders = locationManager.getAllProviders();
            if (allProviders != null && allProviders.contains("gps")) {
                z = true;
            }
            f2027o = z;
            f2028p = true;
        }
        return f2027o;
    }

    @RequiresPermission("android.permission.USE_FINGERPRINT")
    @TargetApi(23)
    /* renamed from: j */
    static boolean m2303j(Context context) {
        FingerprintManager fingerprintManager;
        if (!f2030r) {
            if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return false;
            } else if (Build.VERSION.SDK_INT < 23 || (fingerprintManager = (FingerprintManager) context.getSystemService("fingerprint")) == null) {
                return false;
            } else {
                try {
                    f2029q = fingerprintManager.isHardwareDetected();
                    f2030r = true;
                } catch (Throwable th) {
                    a.a(DeviceInfoModule.NAME, "An error occors when call isFingerprintAvailable()", th);
                    return false;
                }
            }
        }
        return f2029q;
    }

    @RequiresPermission(allOf = {"android.permission.ACCESS_WIFI_STATE", "android.permission.INTERNET"})
    /* renamed from: k */
    static String m2301k(Context context) {
        return C1213c.m2282a(C1207d.m2343a(context), "");
    }

    @RequiresPermission("android.permission.INTERNET")
    /* renamed from: t */
    static String m2288t() {
        try {
            a.a(DeviceInfoModule.NAME, "get wifi mac by getWifiMacAddressOver23()");
            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {
                if (networkInterface.getName().equalsIgnoreCase("wlan0")) {
                    byte[] hardwareAddress = networkInterface.getHardwareAddress();
                    if (hardwareAddress == null) {
                        return "";
                    }
                    StringBuilder sb = new StringBuilder();
                    int length = hardwareAddress.length;
                    for (int i = 0; i < length; i++) {
                        sb.append(String.format("%02x:", Byte.valueOf(hardwareAddress[i])));
                    }
                    if (sb.length() > 0) {
                        sb.deleteCharAt(sb.length() - 1);
                    }
                    return sb.toString();
                }
            }
            return "";
        } catch (Exception e) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getWifiMacAddressOver23()", e);
            return "";
        }
    }

    @RequiresPermission("android.permission.ACCESS_NETWORK_STATE")
    /* renamed from: l */
    static String m2299l(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
            if (connectivityManager == null) {
                return "";
            }
            NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
            if (activeNetworkInfo == null) {
                return ViewProps.NONE;
            }
            if (!activeNetworkInfo.isAvailable()) {
                return ViewProps.NONE;
            }
            try {
                NetworkInfo networkInfo = connectivityManager.getNetworkInfo(1);
                if (!(networkInfo == null || networkInfo.getState() == null)) {
                    NetworkInfo.State state = networkInfo.getState();
                    if (state == NetworkInfo.State.CONNECTED) {
                        return "wifi";
                    }
                    if (state == NetworkInfo.State.CONNECTING) {
                        return "wifi";
                    }
                }
            } catch (Throwable th) {
                a.a(DeviceInfoModule.NAME, "An exception happends when call getNetworkType()", th);
            }
            return m2293o(context);
        } catch (Throwable th2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getNetworkType()", th2);
            return "";
        }
    }

    /* renamed from: o */
    private static String m2293o(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService("phone");
            if (telephonyManager == null) {
                return "";
            }
            int networkType = telephonyManager.getNetworkType();
            if (networkType == 20) {
                return "5g";
            }
            switch (networkType) {
                case 1:
                case 2:
                case 4:
                case 7:
                case 11:
                case 16:
                    return "2g";
                case 3:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 17:
                    return "3g";
                case 13:
                    return "4g";
                default:
                    return "mobile";
            }
        } catch (Throwable th) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getMobileDataType()", th);
            return "";
        }
    }

    /* renamed from: m */
    static String m2297m(Context context) {
        if (TextUtils.isEmpty(f2035w)) {
            f2035w = C1213c.m2282a(C1204a.m2360a(context), "");
        }
        return f2035w;
    }
}
