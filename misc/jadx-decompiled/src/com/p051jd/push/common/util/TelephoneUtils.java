package com.p051jd.push.common.util;

import android.content.Context;
import android.net.wifi.WifiManager;
import android.os.Build;
import java.net.NetworkInterface;
import java.util.Collections;

/* renamed from: com.jd.push.common.util.TelephoneUtils */
/* loaded from: classes.dex */
public class TelephoneUtils {
    static final String SDK_23_WIFI_MAC = "02:00:00:00:00:00";
    private static final String TAG = "TelephoneUtils";

    public static synchronized void getLocalMacAddress(MacAddressListener macAddressListener, Context context) {
        synchronized (TelephoneUtils.class) {
            try {
                macAddressListener.setMacAddress(getMacAddressStr(context));
            } catch (Exception unused) {
                macAddressListener.setMacAddress(null);
            }
        }
    }

    public static String getMacAddressStr(Context context) {
        try {
            if (context != null) {
                WifiManager wifiManager = (WifiManager) context.getSystemService("wifi");
                if (wifiManager != null) {
                    String macAddress = wifiManager.getConnectionInfo().getMacAddress();
                    return (Build.VERSION.SDK_INT >= 23 || SDK_23_WIFI_MAC.equals(macAddress)) ? getWifiMacAddressOver23() : macAddress;
                }
                throw new IllegalStateException("Can't get WifiManager.");
            }
            throw new NullPointerException("getMacAddressStr(), context is null");
        } catch (Exception unused) {
            return "";
        }
    }

    public static String getWifiMacAddressOver23() {
        try {
            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {
                if (networkInterface.getName().equalsIgnoreCase("wlan0")) {
                    byte[] hardwareAddress = networkInterface.getHardwareAddress();
                    if (hardwareAddress == null) {
                        return "";
                    }
                    StringBuilder sb = new StringBuilder();
                    int length = hardwareAddress.length;
                    for (int i = 0; i < length; i++) {
                        sb.append(String.format("%02x:", Byte.valueOf(hardwareAddress[i])));
                    }
                    if (sb.length() > 0) {
                        sb.deleteCharAt(sb.length() - 1);
                    }
                    return sb.toString();
                }
            }
            return "";
        } catch (Exception unused) {
            return "";
        }
    }
}
