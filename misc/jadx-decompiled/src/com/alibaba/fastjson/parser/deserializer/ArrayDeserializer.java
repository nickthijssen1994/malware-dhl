package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ArrayDeserializer implements ObjectDeserializer {
    public static final ArrayDeserializer instance = new ArrayDeserializer();

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public int getFastMatchToken() {
        return 14;
    }

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public <T> T deserialze(DefaultJSONParser defaultJSONParser, Type type, Object obj) {
        Class<?> cls;
        JSONLexer lexer = defaultJSONParser.getLexer();
        Type type2 = 0;
        if (lexer.token() == 8) {
            lexer.nextToken(16);
            return null;
        } else if (lexer.token() == 4) {
            T t = (T) lexer.bytesValue();
            lexer.nextToken(16);
            return t;
        } else {
            if (type instanceof GenericArrayType) {
                Type genericComponentType = ((GenericArrayType) type).getGenericComponentType();
                if (genericComponentType instanceof TypeVariable) {
                    TypeVariable typeVariable = (TypeVariable) genericComponentType;
                    Type type3 = defaultJSONParser.getContext().getType();
                    if (type3 instanceof ParameterizedType) {
                        ParameterizedType parameterizedType = (ParameterizedType) type3;
                        Type rawType = parameterizedType.getRawType();
                        if (rawType instanceof Class) {
                            TypeVariable<Class<T>>[] typeParameters = ((Class) rawType).getTypeParameters();
                            for (int i = 0; i < typeParameters.length; i++) {
                                if (typeParameters[i].getName().equals(typeVariable.getName())) {
                                    type2 = parameterizedType.getActualTypeArguments()[i];
                                }
                            }
                        }
                        if (type2 instanceof Class) {
                            cls = type2;
                        } else {
                            cls = Object.class;
                        }
                    } else {
                        cls = Object.class;
                    }
                } else {
                    cls = (Class) genericComponentType;
                }
            } else {
                cls = ((Class) type).getComponentType();
            }
            JSONArray jSONArray = new JSONArray();
            defaultJSONParser.parseArray(cls, jSONArray, obj);
            return (T) toObjectArray(defaultJSONParser, cls, jSONArray);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:28:0x0057  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private <T> T toObjectArray(DefaultJSONParser defaultJSONParser, Class<?> cls, JSONArray jSONArray) {
        Object obj;
        if (jSONArray == null) {
            return null;
        }
        int size = jSONArray.size();
        T t = (T) Array.newInstance(cls, size);
        for (int i = 0; i < size; i++) {
            Object obj2 = jSONArray.get(i);
            if (obj2 == jSONArray) {
                Array.set(t, i, t);
            } else if (cls.isArray()) {
                if (!cls.isInstance(obj2)) {
                    obj2 = toObjectArray(defaultJSONParser, cls, (JSONArray) obj2);
                }
                Array.set(t, i, obj2);
            } else {
                if (obj2 instanceof JSONArray) {
                    JSONArray jSONArray2 = (JSONArray) obj2;
                    int size2 = jSONArray2.size();
                    boolean z = false;
                    for (int i2 = 0; i2 < size2; i2++) {
                        if (jSONArray2.get(i2) == jSONArray) {
                            jSONArray2.set(i, t);
                            z = true;
                        }
                    }
                    if (z) {
                        obj = jSONArray2.toArray();
                        if (obj == null) {
                            obj = TypeUtils.cast(obj2, (Class<Object>) cls, defaultJSONParser.getConfig());
                        }
                        Array.set(t, i, obj);
                    }
                }
                obj = null;
                if (obj == null) {
                }
                Array.set(t, i, obj);
            }
        }
        jSONArray.setRelatedArray(t);
        jSONArray.setComponentType(cls);
        return t;
    }
}
