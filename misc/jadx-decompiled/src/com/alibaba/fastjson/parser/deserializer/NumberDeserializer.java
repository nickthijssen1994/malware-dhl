package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.Type;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class NumberDeserializer implements ObjectDeserializer {
    public static final NumberDeserializer instance = new NumberDeserializer();

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public int getFastMatchToken() {
        return 2;
    }

    /* JADX WARN: Type inference failed for: r5v12, types: [java.math.BigDecimal, T] */
    /* JADX WARN: Unknown variable types count: 1 */
    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    /* Code decompiled incorrectly, please refer to instructions dump */
    public <T> T deserialze(DefaultJSONParser defaultJSONParser, Type type, Object obj) {
        JSONLexer lexer = defaultJSONParser.getLexer();
        if (lexer.token() == 2) {
            if (type == Double.TYPE || type == Double.class) {
                String numberString = lexer.numberString();
                lexer.nextToken(16);
                return (T) Double.valueOf(Double.parseDouble(numberString));
            }
            long longValue = lexer.longValue();
            lexer.nextToken(16);
            if (type == Short.TYPE || type == Short.class) {
                return (T) Short.valueOf((short) ((int) longValue));
            }
            if (type == Byte.TYPE || type == Byte.class) {
                return (T) Byte.valueOf((byte) ((int) longValue));
            }
            if (longValue < -2147483648L || longValue > 2147483647L) {
                return (T) Long.valueOf(longValue);
            }
            return (T) Integer.valueOf((int) longValue);
        } else if (lexer.token() != 3) {
            Object parse = defaultJSONParser.parse();
            if (parse == null) {
                return null;
            }
            if (type == Double.TYPE || type == Double.class) {
                return (T) TypeUtils.castToDouble(parse);
            }
            if (type == Short.TYPE || type == Short.class) {
                return (T) TypeUtils.castToShort(parse);
            }
            if (type == Byte.TYPE || type == Byte.class) {
                return (T) TypeUtils.castToByte(parse);
            }
            return (T) TypeUtils.castToBigDecimal(parse);
        } else if (type == Double.TYPE || type == Double.class) {
            String numberString2 = lexer.numberString();
            lexer.nextToken(16);
            return (T) Double.valueOf(Double.parseDouble(numberString2));
        } else {
            ?? r5 = (T) lexer.decimalValue();
            lexer.nextToken(16);
            if (type == Short.TYPE || type == Short.class) {
                return (T) Short.valueOf(r5.shortValue());
            }
            if (type == Byte.TYPE || type == Byte.class) {
                return (T) Byte.valueOf(r5.byteValue());
            }
            return r5;
        }
    }
}
