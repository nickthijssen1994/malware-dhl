package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.asm.ClassWriter;
import com.alibaba.fastjson.asm.Label;
import com.alibaba.fastjson.asm.MethodVisitor;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.ASMUtils;
import com.alibaba.fastjson.util.DeserializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import com.huawei.hms.opendevice.C0981i;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ASMDeserializerFactory implements Opcodes {
    private static final ASMDeserializerFactory instance = new ASMDeserializerFactory();
    private final ASMClassLoader classLoader;
    private final AtomicLong seed;

    public String getGenClassName(Class<?> cls) {
        return "Fastjson_ASM_" + cls.getSimpleName() + "_" + this.seed.incrementAndGet();
    }

    public String getGenFieldDeserializer(Class<?> cls, FieldInfo fieldInfo) {
        return ("Fastjson_ASM__Field_" + cls.getSimpleName()) + "_" + fieldInfo.getName() + "_" + this.seed.incrementAndGet();
    }

    public ASMDeserializerFactory() {
        this.seed = new AtomicLong();
        this.classLoader = new ASMClassLoader();
    }

    public ASMDeserializerFactory(ClassLoader classLoader) {
        this.seed = new AtomicLong();
        this.classLoader = new ASMClassLoader(classLoader);
    }

    public static final ASMDeserializerFactory getInstance() {
        return instance;
    }

    public boolean isExternalClass(Class<?> cls) {
        return this.classLoader.isExternalClass(cls);
    }

    public ObjectDeserializer createJavaBeanDeserializer(ParserConfig parserConfig, Class<?> cls, Type type) throws Exception {
        Throwable th;
        Exception e;
        FileOutputStream fileOutputStream;
        if (!cls.isPrimitive()) {
            String genClassName = getGenClassName(cls);
            ClassWriter classWriter = new ClassWriter();
            classWriter.visit(49, 33, genClassName, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", null);
            DeserializeBeanInfo computeSetters = DeserializeBeanInfo.computeSetters(cls, type);
            _init(classWriter, new Context(genClassName, parserConfig, computeSetters, 3));
            _createInstance(classWriter, new Context(genClassName, parserConfig, computeSetters, 3));
            _deserialze(classWriter, new Context(genClassName, parserConfig, computeSetters, 4));
            _deserialzeArrayMapping(classWriter, new Context(genClassName, parserConfig, computeSetters, 4));
            byte[] byteArray = classWriter.toByteArray();
            if (JSON.DUMP_CLASS != null) {
                FileOutputStream fileOutputStream2 = null;
                try {
                    try {
                        fileOutputStream = new FileOutputStream(JSON.DUMP_CLASS + File.separator + genClassName + ".class");
                    } catch (Exception e2) {
                        e = e2;
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
                try {
                    fileOutputStream.write(byteArray);
                    fileOutputStream.close();
                } catch (Exception e3) {
                    e = e3;
                    fileOutputStream2 = fileOutputStream;
                    PrintStream printStream = System.err;
                    printStream.println("FASTJSON dump class:" + genClassName + "失败:" + e.getMessage());
                    if (fileOutputStream2 != null) {
                        fileOutputStream2.close();
                    }
                    return (ObjectDeserializer) this.classLoader.defineClassPublic(genClassName, byteArray, 0, byteArray.length).getConstructor(ParserConfig.class, Class.class).newInstance(parserConfig, cls);
                } catch (Throwable th3) {
                    th = th3;
                    fileOutputStream2 = fileOutputStream;
                    if (fileOutputStream2 != null) {
                        fileOutputStream2.close();
                    }
                    throw th;
                }
            }
            return (ObjectDeserializer) this.classLoader.defineClassPublic(genClassName, byteArray, 0, byteArray.length).getConstructor(ParserConfig.class, Class.class).newInstance(parserConfig, cls);
        }
        throw new IllegalArgumentException("not support type :" + cls.getName());
    }

    void _setFlag(MethodVisitor methodVisitor, Context context, int i) {
        String str = "_asm_flag_" + (i / 32);
        methodVisitor.visitVarInsn(21, context.var(str));
        methodVisitor.visitLdcInsn(Integer.valueOf(1 << i));
        methodVisitor.visitInsn(128);
        methodVisitor.visitVarInsn(54, context.var(str));
    }

    void _isFlag(MethodVisitor methodVisitor, Context context, int i, Label label) {
        methodVisitor.visitVarInsn(21, context.var("_asm_flag_" + (i / 32)));
        methodVisitor.visitLdcInsn(Integer.valueOf(1 << i));
        methodVisitor.visitInsn(Opcodes.IAND);
        methodVisitor.visitJumpInsn(Opcodes.IFEQ, label);
    }

    void _deserialzeArrayMapping(ClassWriter classWriter, Context context) {
        int i;
        int i2;
        MethodVisitor visitMethod = classWriter.visitMethod(1, "deserialzeArrayMapping", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", null, null);
        defineVarLexer(context, visitMethod);
        _createInstance(context, visitMethod);
        List<FieldInfo> sortedFieldList = context.getBeanInfo().getSortedFieldList();
        int size = sortedFieldList.size();
        int i3 = 0;
        while (i3 < size) {
            boolean z = i3 == size + -1;
            int i4 = z ? 93 : 44;
            FieldInfo fieldInfo = sortedFieldList.get(i3);
            Class<?> fieldClass = fieldInfo.getFieldClass();
            Type fieldType = fieldInfo.getFieldType();
            if (fieldClass == Byte.TYPE || fieldClass == Short.TYPE || fieldClass == Integer.TYPE) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanInt", "(C)I");
                visitMethod.visitVarInsn(54, context.var(fieldInfo.getName() + "_asm"));
            } else if (fieldClass == Long.TYPE) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanLong", "(C)J");
                visitMethod.visitVarInsn(55, context.var(fieldInfo.getName() + "_asm", 2));
            } else if (fieldClass == Boolean.TYPE) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanBoolean", "(C)Z");
                visitMethod.visitVarInsn(54, context.var(fieldInfo.getName() + "_asm"));
            } else if (fieldClass == Float.TYPE) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFloat", "(C)F");
                visitMethod.visitVarInsn(56, context.var(fieldInfo.getName() + "_asm"));
            } else if (fieldClass == Double.TYPE) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanDouble", "(C)D");
                visitMethod.visitVarInsn(57, context.var(fieldInfo.getName() + "_asm", 2));
            } else if (fieldClass == Character.TYPE) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanString", "(C)Ljava/lang/String;");
                visitMethod.visitInsn(3);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C");
                visitMethod.visitVarInsn(54, context.var(fieldInfo.getName() + "_asm"));
            } else if (fieldClass == String.class) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanString", "(C)Ljava/lang/String;");
                visitMethod.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
            } else if (fieldClass.isEnum()) {
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(fieldClass)));
                visitMethod.visitVarInsn(25, 1);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getSymbolTable", "()Lcom/alibaba/fastjson/parser/SymbolTable;");
                visitMethod.visitVarInsn(16, i4);
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanEnum", "(Ljava/lang/Class;Lcom/alibaba/fastjson/parser/SymbolTable;C)Ljava/lang/Enum;");
                visitMethod.visitTypeInsn(192, ASMUtils.getType(fieldClass));
                visitMethod.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
            } else if (Collection.class.isAssignableFrom(fieldClass)) {
                Class<?> collectionItemClass = TypeUtils.getCollectionItemClass(fieldType);
                if (collectionItemClass == String.class) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(fieldClass)));
                    visitMethod.visitVarInsn(16, i4);
                    visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanStringArray", "(Ljava/lang/Class;C)Ljava/util/Collection;");
                    visitMethod.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
                } else {
                    visitMethod.visitVarInsn(25, 1);
                    if (i3 == 0) {
                        i2 = Opcodes.GETSTATIC;
                        visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
                    } else {
                        i2 = Opcodes.GETSTATIC;
                        visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
                    }
                    visitMethod.visitFieldInsn(i2, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
                    visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "accept", "(II)V");
                    _newCollection(visitMethod, fieldClass);
                    visitMethod.visitInsn(89);
                    visitMethod.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
                    _getCollectionFieldItemDeser(context, visitMethod, fieldInfo, collectionItemClass);
                    visitMethod.visitVarInsn(25, 1);
                    visitMethod.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(collectionItemClass)));
                    visitMethod.visitVarInsn(25, 3);
                    visitMethod.visitMethodInsn(Opcodes.INVOKESTATIC, "com/alibaba/fastjson/util/ASMUtils", "parseArray", "(Ljava/util/Collection;Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
                }
            } else {
                visitMethod.visitVarInsn(25, 1);
                if (i3 == 0) {
                    i = Opcodes.GETSTATIC;
                    visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
                } else {
                    i = Opcodes.GETSTATIC;
                    visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
                }
                visitMethod.visitFieldInsn(i, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "accept", "(II)V");
                _deserObject(context, visitMethod, fieldInfo, fieldClass);
                visitMethod.visitVarInsn(25, 1);
                if (!z) {
                    visitMethod.visitFieldInsn(i, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
                    visitMethod.visitFieldInsn(i, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
                } else {
                    visitMethod.visitFieldInsn(i, "com/alibaba/fastjson/parser/JSONToken", "RBRACKET", "I");
                    visitMethod.visitFieldInsn(i, "com/alibaba/fastjson/parser/JSONToken", "EOF", "I");
                }
                visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "accept", "(II)V");
            }
            i3++;
        }
        _batchSet(context, visitMethod, false);
        visitMethod.visitVarInsn(25, context.var("lexer"));
        visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
        visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
        visitMethod.visitVarInsn(25, context.var("instance"));
        visitMethod.visitInsn(Opcodes.ARETURN);
        visitMethod.visitMaxs(5, context.getVariantCount());
        visitMethod.visitEnd();
    }

    void _deserialze(ClassWriter classWriter, Context context) {
        Label label;
        int i;
        if (context.getFieldInfoList().size() != 0) {
            for (FieldInfo fieldInfo : context.getFieldInfoList()) {
                Class<?> fieldClass = fieldInfo.getFieldClass();
                Type fieldType = fieldInfo.getFieldType();
                if (fieldClass != Character.TYPE) {
                    if (Collection.class.isAssignableFrom(fieldClass) && !((fieldType instanceof ParameterizedType) && (((ParameterizedType) fieldType).getActualTypeArguments()[0] instanceof Class))) {
                        return;
                    }
                } else {
                    return;
                }
            }
            Collections.sort(context.getFieldInfoList());
            MethodVisitor visitMethod = classWriter.visitMethod(1, "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", null, null);
            Label label2 = new Label();
            Label label3 = new Label();
            Label label4 = new Label();
            Label label5 = new Label();
            defineVarLexer(context, visitMethod);
            _isEnable(context, visitMethod, Feature.SortFeidFastMatch);
            visitMethod.visitJumpInsn(Opcodes.IFEQ, label3);
            Label label6 = new Label();
            int i2 = 25;
            visitMethod.visitVarInsn(25, 0);
            visitMethod.visitVarInsn(25, context.var("lexer"));
            visitMethod.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "isSupportArrayToBean", "(Lcom/alibaba/fastjson/parser/JSONLexer;)Z");
            visitMethod.visitJumpInsn(Opcodes.IFEQ, label6);
            visitMethod.visitVarInsn(25, context.var("lexer"));
            int i3 = Opcodes.INVOKEVIRTUAL;
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
            visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
            visitMethod.visitJumpInsn(Opcodes.IF_ICMPNE, label6);
            visitMethod.visitVarInsn(25, 0);
            visitMethod.visitVarInsn(25, 1);
            visitMethod.visitVarInsn(25, 2);
            visitMethod.visitVarInsn(25, 3);
            visitMethod.visitMethodInsn(Opcodes.INVOKESPECIAL, context.getClassName(), "deserialzeArrayMapping", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
            visitMethod.visitInsn(Opcodes.ARETURN);
            visitMethod.visitLabel(label6);
            visitMethod.visitVarInsn(25, context.var("lexer"));
            visitMethod.visitLdcInsn(context.getClazz().getName());
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanType", "(Ljava/lang/String;)I");
            visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONLexerBase", "NOT_MATCH", "I");
            visitMethod.visitJumpInsn(Opcodes.IF_ICMPEQ, label3);
            visitMethod.visitVarInsn(25, 1);
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
            visitMethod.visitVarInsn(58, context.var("mark_context"));
            visitMethod.visitInsn(3);
            visitMethod.visitVarInsn(54, context.var("matchedCount"));
            _createInstance(context, visitMethod);
            visitMethod.visitVarInsn(25, 1);
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
            visitMethod.visitVarInsn(58, context.var("context"));
            visitMethod.visitVarInsn(25, 1);
            visitMethod.visitVarInsn(25, context.var("context"));
            visitMethod.visitVarInsn(25, context.var("instance"));
            visitMethod.visitVarInsn(25, 3);
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Lcom/alibaba/fastjson/parser/ParseContext;Ljava/lang/Object;Ljava/lang/Object;)Lcom/alibaba/fastjson/parser/ParseContext;");
            visitMethod.visitVarInsn(58, context.var("childContext"));
            visitMethod.visitVarInsn(25, context.var("lexer"));
            visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
            visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONLexerBase", "END", "I");
            visitMethod.visitJumpInsn(Opcodes.IF_ICMPEQ, label4);
            int i4 = 3;
            visitMethod.visitInsn(3);
            visitMethod.visitIntInsn(54, context.var("matchStat"));
            int size = context.getFieldInfoList().size();
            int i5 = 0;
            while (i5 < size) {
                visitMethod.visitInsn(i4);
                visitMethod.visitVarInsn(54, context.var("_asm_flag_" + (i5 / 32)));
                i5 += 32;
                i4 = 3;
            }
            int i6 = 0;
            while (i6 < size) {
                FieldInfo fieldInfo2 = context.getFieldInfoList().get(i6);
                Class<?> fieldClass2 = fieldInfo2.getFieldClass();
                if (fieldClass2 == Boolean.TYPE || fieldClass2 == Byte.TYPE || fieldClass2 == Short.TYPE || fieldClass2 == Integer.TYPE) {
                    visitMethod.visitInsn(3);
                    visitMethod.visitVarInsn(54, context.var(fieldInfo2.getName() + "_asm"));
                } else if (fieldClass2 == Long.TYPE) {
                    visitMethod.visitInsn(9);
                    visitMethod.visitVarInsn(55, context.var(fieldInfo2.getName() + "_asm", 2));
                } else if (fieldClass2 == Float.TYPE) {
                    visitMethod.visitInsn(11);
                    visitMethod.visitVarInsn(56, context.var(fieldInfo2.getName() + "_asm"));
                } else if (fieldClass2 == Double.TYPE) {
                    visitMethod.visitInsn(14);
                    visitMethod.visitVarInsn(57, context.var(fieldInfo2.getName() + "_asm", 2));
                } else {
                    if (fieldClass2 == String.class) {
                        Label label7 = new Label();
                        _isEnable(context, visitMethod, Feature.InitStringFieldAsEmpty);
                        visitMethod.visitJumpInsn(Opcodes.IFEQ, label7);
                        _setFlag(visitMethod, context, i6);
                        visitMethod.visitLabel(label7);
                        visitMethod.visitVarInsn(i2, context.var("lexer"));
                        visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "stringDefaultValue", "()Ljava/lang/String;");
                    } else {
                        visitMethod.visitInsn(1);
                    }
                    visitMethod.visitTypeInsn(192, ASMUtils.getType(fieldClass2));
                    visitMethod.visitVarInsn(58, context.var(fieldInfo2.getName() + "_asm"));
                }
                i6++;
                i2 = 25;
            }
            int i7 = 0;
            while (i7 < size) {
                FieldInfo fieldInfo3 = context.getFieldInfoList().get(i7);
                Class<?> fieldClass3 = fieldInfo3.getFieldClass();
                Type fieldType2 = fieldInfo3.getFieldType();
                Label label8 = new Label();
                if (fieldClass3 == Boolean.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className = context.getClassName();
                    visitMethod.visitFieldInsn(180, className, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldBoolean", "([C)Z");
                    visitMethod.visitVarInsn(54, context.var(fieldInfo3.getName() + "_asm"));
                    label = label3;
                } else if (fieldClass3 == Byte.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className2 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className2, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldInt", "([C)I");
                    visitMethod.visitVarInsn(54, context.var(fieldInfo3.getName() + "_asm"));
                    label = label3;
                } else if (fieldClass3 == Short.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className3 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className3, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldInt", "([C)I");
                    visitMethod.visitVarInsn(54, context.var(fieldInfo3.getName() + "_asm"));
                    label = label3;
                } else if (fieldClass3 == Integer.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className4 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className4, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldInt", "([C)I");
                    visitMethod.visitVarInsn(54, context.var(fieldInfo3.getName() + "_asm"));
                    label = label3;
                } else if (fieldClass3 == Long.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className5 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className5, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldLong", "([C)J");
                    visitMethod.visitVarInsn(55, context.var(fieldInfo3.getName() + "_asm", 2));
                    label = label3;
                } else if (fieldClass3 == Float.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className6 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className6, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldFloat", "([C)F");
                    visitMethod.visitVarInsn(56, context.var(fieldInfo3.getName() + "_asm"));
                    label = label3;
                } else if (fieldClass3 == Double.TYPE) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className7 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className7, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldDouble", "([C)D");
                    visitMethod.visitVarInsn(57, context.var(fieldInfo3.getName() + "_asm", 2));
                    label = label3;
                } else if (fieldClass3 == String.class) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className8 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className8, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    visitMethod.visitMethodInsn(i3, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldString", "([C)Ljava/lang/String;");
                    visitMethod.visitVarInsn(58, context.var(fieldInfo3.getName() + "_asm"));
                    label = label3;
                } else if (fieldClass3.isEnum()) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitVarInsn(25, 0);
                    String className9 = context.getClassName();
                    visitMethod.visitFieldInsn(180, className9, fieldInfo3.getName() + "_asm_prefix__", "[C");
                    Label label9 = new Label();
                    visitMethod.visitInsn(1);
                    visitMethod.visitTypeInsn(192, ASMUtils.getType(fieldClass3));
                    visitMethod.visitVarInsn(58, context.var(fieldInfo3.getName() + "_asm"));
                    visitMethod.visitVarInsn(25, 1);
                    label = label3;
                    visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getSymbolTable", "()Lcom/alibaba/fastjson/parser/SymbolTable;");
                    visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldSymbol", "([CLcom/alibaba/fastjson/parser/SymbolTable;)Ljava/lang/String;");
                    visitMethod.visitInsn(89);
                    visitMethod.visitVarInsn(58, context.var(fieldInfo3.getName() + "_asm_enumName"));
                    visitMethod.visitJumpInsn(Opcodes.IFNULL, label9);
                    visitMethod.visitVarInsn(25, context.var(fieldInfo3.getName() + "_asm_enumName"));
                    String type = ASMUtils.getType(fieldClass3);
                    visitMethod.visitMethodInsn(Opcodes.INVOKESTATIC, type, "valueOf", "(Ljava/lang/String;)" + ASMUtils.getDesc(fieldClass3));
                    visitMethod.visitVarInsn(58, context.var(fieldInfo3.getName() + "_asm"));
                    visitMethod.visitLabel(label9);
                } else {
                    label = label3;
                    if (Collection.class.isAssignableFrom(fieldClass3)) {
                        visitMethod.visitVarInsn(25, context.var("lexer"));
                        visitMethod.visitVarInsn(25, 0);
                        String className10 = context.getClassName();
                        visitMethod.visitFieldInsn(180, className10, fieldInfo3.getName() + "_asm_prefix__", "[C");
                        Class<?> collectionItemClass = TypeUtils.getCollectionItemClass(fieldType2);
                        if (collectionItemClass == String.class) {
                            visitMethod.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(fieldClass3)));
                            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldStringArray", "([CLjava/lang/Class;)" + ASMUtils.getDesc(Collection.class));
                            visitMethod.visitVarInsn(58, context.var(fieldInfo3.getName() + "_asm"));
                        } else {
                            i = i7;
                            _deserialze_list_obj(context, visitMethod, label2, fieldInfo3, fieldClass3, collectionItemClass, i);
                            if (i == size - 1) {
                                _deserialize_endCheck(context, visitMethod, label2);
                            }
                        }
                    } else {
                        i = i7;
                        _deserialze_obj(context, visitMethod, label2, fieldInfo3, fieldClass3, i);
                        if (i == size - 1) {
                            _deserialize_endCheck(context, visitMethod, label2);
                        }
                    }
                    i7 = i + 1;
                    label3 = label;
                    i3 = Opcodes.INVOKEVIRTUAL;
                }
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
                Label label10 = new Label();
                visitMethod.visitJumpInsn(Opcodes.IFLE, label10);
                _setFlag(visitMethod, context, i7);
                visitMethod.visitLabel(label10);
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
                visitMethod.visitInsn(89);
                visitMethod.visitVarInsn(54, context.var("matchStat"));
                visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONLexerBase", "NOT_MATCH", "I");
                visitMethod.visitJumpInsn(Opcodes.IF_ICMPEQ, label2);
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
                visitMethod.visitJumpInsn(Opcodes.IFLE, label8);
                visitMethod.visitVarInsn(21, context.var("matchedCount"));
                visitMethod.visitInsn(4);
                visitMethod.visitInsn(96);
                visitMethod.visitVarInsn(54, context.var("matchedCount"));
                visitMethod.visitVarInsn(25, context.var("lexer"));
                visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
                visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONLexerBase", "END", "I");
                visitMethod.visitJumpInsn(Opcodes.IF_ICMPEQ, label5);
                visitMethod.visitLabel(label8);
                if (i7 == size - 1) {
                    visitMethod.visitVarInsn(25, context.var("lexer"));
                    visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
                    visitMethod.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONLexerBase", "END", "I");
                    visitMethod.visitJumpInsn(Opcodes.IF_ICMPNE, label2);
                    i = i7;
                } else {
                    i = i7;
                }
                i7 = i + 1;
                label3 = label;
                i3 = Opcodes.INVOKEVIRTUAL;
            }
            visitMethod.visitLabel(label5);
            if (!context.getClazz().isInterface() && !Modifier.isAbstract(context.getClazz().getModifiers())) {
                _batchSet(context, visitMethod);
            }
            visitMethod.visitLabel(label4);
            _setContext(context, visitMethod);
            visitMethod.visitVarInsn(25, context.var("instance"));
            visitMethod.visitInsn(Opcodes.ARETURN);
            visitMethod.visitLabel(label2);
            _batchSet(context, visitMethod);
            visitMethod.visitVarInsn(25, 0);
            visitMethod.visitVarInsn(25, 1);
            visitMethod.visitVarInsn(25, 2);
            visitMethod.visitVarInsn(25, 3);
            visitMethod.visitVarInsn(25, context.var("instance"));
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "parseRest", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
            visitMethod.visitTypeInsn(192, ASMUtils.getType(context.getClazz()));
            visitMethod.visitInsn(Opcodes.ARETURN);
            visitMethod.visitLabel(label3);
            visitMethod.visitVarInsn(25, 0);
            visitMethod.visitVarInsn(25, 1);
            visitMethod.visitVarInsn(25, 2);
            visitMethod.visitVarInsn(25, 3);
            visitMethod.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
            visitMethod.visitInsn(Opcodes.ARETURN);
            visitMethod.visitMaxs(5, context.getVariantCount());
            visitMethod.visitEnd();
        }
    }

    private void _isEnable(Context context, MethodVisitor methodVisitor, Feature feature) {
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/Feature", feature.name(), "Lcom/alibaba/fastjson/parser/Feature;");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "isEnabled", "(Lcom/alibaba/fastjson/parser/Feature;)Z");
    }

    private void defineVarLexer(Context context, MethodVisitor methodVisitor) {
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getLexer", "()Lcom/alibaba/fastjson/parser/JSONLexer;");
        methodVisitor.visitTypeInsn(192, "com/alibaba/fastjson/parser/JSONLexerBase");
        methodVisitor.visitVarInsn(58, context.var("lexer"));
    }

    private void _createInstance(Context context, MethodVisitor methodVisitor) {
        if (Modifier.isPublic(context.getBeanInfo().getDefaultConstructor().getModifiers())) {
            methodVisitor.visitTypeInsn(Opcodes.NEW, ASMUtils.getType(context.getClazz()));
            methodVisitor.visitInsn(89);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(context.getClazz()), "<init>", "()V");
            methodVisitor.visitVarInsn(58, context.var("instance"));
            return;
        }
        methodVisitor.visitVarInsn(25, 0);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "createInstance", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;)Ljava/lang/Object;");
        methodVisitor.visitTypeInsn(192, ASMUtils.getType(context.getClazz()));
        methodVisitor.visitVarInsn(58, context.var("instance"));
    }

    private void _batchSet(Context context, MethodVisitor methodVisitor) {
        _batchSet(context, methodVisitor, true);
    }

    private void _batchSet(Context context, MethodVisitor methodVisitor, boolean z) {
        int size = context.getFieldInfoList().size();
        for (int i = 0; i < size; i++) {
            Label label = new Label();
            if (z) {
                _isFlag(methodVisitor, context, i, label);
            }
            _loadAndSet(context, methodVisitor, context.getFieldInfoList().get(i));
            if (z) {
                methodVisitor.visitLabel(label);
            }
        }
    }

    private void _loadAndSet(Context context, MethodVisitor methodVisitor, FieldInfo fieldInfo) {
        Class<?> fieldClass = fieldInfo.getFieldClass();
        Type fieldType = fieldInfo.getFieldType();
        if (fieldClass == Boolean.TYPE) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(21, context.var(fieldInfo.getName() + "_asm"));
            _set(context, methodVisitor, fieldInfo);
        } else if (fieldClass == Byte.TYPE || fieldClass == Short.TYPE || fieldClass == Integer.TYPE || fieldClass == Character.TYPE) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(21, context.var(fieldInfo.getName() + "_asm"));
            _set(context, methodVisitor, fieldInfo);
        } else if (fieldClass == Long.TYPE) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(22, context.var(fieldInfo.getName() + "_asm", 2));
            if (fieldInfo.getMethod() != null) {
                methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ASMUtils.getType(context.getClazz()), fieldInfo.getMethod().getName(), ASMUtils.getDesc(fieldInfo.getMethod()));
                if (!fieldInfo.getMethod().getReturnType().equals(Void.TYPE)) {
                    methodVisitor.visitInsn(87);
                    return;
                }
                return;
            }
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, ASMUtils.getType(fieldInfo.getDeclaringClass()), fieldInfo.getField().getName(), ASMUtils.getDesc(fieldInfo.getFieldClass()));
        } else if (fieldClass == Float.TYPE) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(23, context.var(fieldInfo.getName() + "_asm"));
            _set(context, methodVisitor, fieldInfo);
        } else if (fieldClass == Double.TYPE) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(24, context.var(fieldInfo.getName() + "_asm", 2));
            _set(context, methodVisitor, fieldInfo);
        } else if (fieldClass == String.class) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
            _set(context, methodVisitor, fieldInfo);
        } else if (fieldClass.isEnum()) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
            _set(context, methodVisitor, fieldInfo);
        } else if (Collection.class.isAssignableFrom(fieldClass)) {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            if (TypeUtils.getCollectionItemClass(fieldType) == String.class) {
                methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
                methodVisitor.visitTypeInsn(192, ASMUtils.getType(fieldClass));
            } else {
                methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
            }
            _set(context, methodVisitor, fieldInfo);
        } else {
            methodVisitor.visitVarInsn(25, context.var("instance"));
            methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
            _set(context, methodVisitor, fieldInfo);
        }
    }

    private void _set(Context context, MethodVisitor methodVisitor, FieldInfo fieldInfo) {
        if (fieldInfo.getMethod() != null) {
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ASMUtils.getType(fieldInfo.getDeclaringClass()), fieldInfo.getMethod().getName(), ASMUtils.getDesc(fieldInfo.getMethod()));
            if (!fieldInfo.getMethod().getReturnType().equals(Void.TYPE)) {
                methodVisitor.visitInsn(87);
                return;
            }
            return;
        }
        methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, ASMUtils.getType(fieldInfo.getDeclaringClass()), fieldInfo.getField().getName(), ASMUtils.getDesc(fieldInfo.getFieldClass()));
    }

    private void _setContext(Context context, MethodVisitor methodVisitor) {
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitVarInsn(25, context.var("context"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Lcom/alibaba/fastjson/parser/ParseContext;)V");
        Label label = new Label();
        methodVisitor.visitVarInsn(25, context.var("childContext"));
        methodVisitor.visitJumpInsn(Opcodes.IFNULL, label);
        methodVisitor.visitVarInsn(25, context.var("childContext"));
        methodVisitor.visitVarInsn(25, context.var("instance"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/ParseContext", "setObject", "(Ljava/lang/Object;)V");
        methodVisitor.visitLabel(label);
    }

    private void _deserialize_endCheck(Context context, MethodVisitor methodVisitor, Label label) {
        methodVisitor.visitIntInsn(21, context.var("matchedCount"));
        methodVisitor.visitJumpInsn(Opcodes.IFLE, label);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "RBRACE", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPNE, label);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
    }

    private void _deserialze_list_obj(Context context, MethodVisitor methodVisitor, Label label, FieldInfo fieldInfo, Class<?> cls, Class<?> cls2, int i) {
        int i2;
        Label label2 = new Label();
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "matchField", "([C)Z");
        methodVisitor.visitJumpInsn(Opcodes.IFEQ, label2);
        _setFlag(methodVisitor, context, i);
        Label label3 = new Label();
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "NULL", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPNE, label3);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
        methodVisitor.visitJumpInsn(Opcodes.GOTO, label2);
        methodVisitor.visitLabel(label3);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPNE, label);
        _getCollectionFieldItemDeser(context, methodVisitor, fieldInfo, cls2);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "com/alibaba/fastjson/parser/deserializer/ObjectDeserializer", "getFastMatchToken", "()I");
        methodVisitor.visitVarInsn(54, context.var("fastMatchToken"));
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitVarInsn(21, context.var("fastMatchToken"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
        _newCollection(methodVisitor, cls);
        methodVisitor.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
        methodVisitor.visitVarInsn(58, context.var("listContext"));
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
        methodVisitor.visitLdcInsn(fieldInfo.getName());
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Ljava/lang/Object;Ljava/lang/Object;)Lcom/alibaba/fastjson/parser/ParseContext;");
        methodVisitor.visitInsn(87);
        Label label4 = new Label();
        Label label5 = new Label();
        methodVisitor.visitInsn(3);
        methodVisitor.visitVarInsn(54, context.var(C0981i.f1307b));
        methodVisitor.visitLabel(label4);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "RBRACKET", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPEQ, label5);
        methodVisitor.visitVarInsn(25, 0);
        String className = context.getClassName();
        methodVisitor.visitFieldInsn(180, className, fieldInfo.getName() + "_asm_list_item_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(cls2)));
        methodVisitor.visitVarInsn(21, context.var(C0981i.f1307b));
        methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "com/alibaba/fastjson/parser/deserializer/ObjectDeserializer", "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
        methodVisitor.visitVarInsn(58, context.var("list_item_value"));
        methodVisitor.visitIincInsn(context.var(C0981i.f1307b), 1);
        methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
        methodVisitor.visitVarInsn(25, context.var("list_item_value"));
        if (cls.isInterface()) {
            methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, ASMUtils.getType(cls), "add", "(Ljava/lang/Object;)Z");
            i2 = 87;
        } else {
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ASMUtils.getType(cls), "add", "(Ljava/lang/Object;)Z");
            i2 = 87;
        }
        methodVisitor.visitInsn(i2);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitVarInsn(25, context.var(fieldInfo.getName() + "_asm"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "checkListResolve", "(Ljava/util/Collection;)V");
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPNE, label4);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitVarInsn(21, context.var("fastMatchToken"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
        methodVisitor.visitJumpInsn(Opcodes.GOTO, label4);
        methodVisitor.visitLabel(label5);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitVarInsn(25, context.var("listContext"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Lcom/alibaba/fastjson/parser/ParseContext;)V");
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "RBRACKET", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPNE, label);
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
        methodVisitor.visitLabel(label2);
    }

    private void _getCollectionFieldItemDeser(Context context, MethodVisitor methodVisitor, FieldInfo fieldInfo, Class<?> cls) {
        Label label = new Label();
        methodVisitor.visitVarInsn(25, 0);
        String className = context.getClassName();
        methodVisitor.visitFieldInsn(180, className, fieldInfo.getName() + "_asm_list_item_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, label);
        methodVisitor.visitVarInsn(25, 0);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getConfig", "()Lcom/alibaba/fastjson/parser/ParserConfig;");
        methodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(cls)));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/ParserConfig", "getDeserializer", "(Ljava/lang/reflect/Type;)Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        String className2 = context.getClassName();
        methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className2, fieldInfo.getName() + "_asm_list_item_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        methodVisitor.visitLabel(label);
        methodVisitor.visitVarInsn(25, 0);
        String className3 = context.getClassName();
        methodVisitor.visitFieldInsn(180, className3, fieldInfo.getName() + "_asm_list_item_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    }

    private void _newCollection(MethodVisitor methodVisitor, Class<?> cls) {
        if (cls.isAssignableFrom(ArrayList.class)) {
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/util/ArrayList");
            methodVisitor.visitInsn(89);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V");
        } else if (cls.isAssignableFrom(LinkedList.class)) {
            methodVisitor.visitTypeInsn(Opcodes.NEW, ASMUtils.getType(LinkedList.class));
            methodVisitor.visitInsn(89);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(LinkedList.class), "<init>", "()V");
        } else if (cls.isAssignableFrom(HashSet.class)) {
            methodVisitor.visitTypeInsn(Opcodes.NEW, ASMUtils.getType(HashSet.class));
            methodVisitor.visitInsn(89);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(HashSet.class), "<init>", "()V");
        } else if (cls.isAssignableFrom(TreeSet.class)) {
            methodVisitor.visitTypeInsn(Opcodes.NEW, ASMUtils.getType(TreeSet.class));
            methodVisitor.visitInsn(89);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(TreeSet.class), "<init>", "()V");
        } else {
            methodVisitor.visitTypeInsn(Opcodes.NEW, ASMUtils.getType(cls));
            methodVisitor.visitInsn(89);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(cls), "<init>", "()V");
        }
        methodVisitor.visitTypeInsn(192, ASMUtils.getType(cls));
    }

    private void _deserialze_obj(Context context, MethodVisitor methodVisitor, Label label, FieldInfo fieldInfo, Class<?> cls, int i) {
        Label label2 = new Label();
        Label label3 = new Label();
        methodVisitor.visitVarInsn(25, context.var("lexer"));
        methodVisitor.visitVarInsn(25, 0);
        String className = context.getClassName();
        methodVisitor.visitFieldInsn(180, className, fieldInfo.getName() + "_asm_prefix__", "[C");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/JSONLexerBase", "matchField", "([C)Z");
        methodVisitor.visitJumpInsn(Opcodes.IFNE, label2);
        methodVisitor.visitInsn(1);
        methodVisitor.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
        methodVisitor.visitJumpInsn(Opcodes.GOTO, label3);
        methodVisitor.visitLabel(label2);
        _setFlag(methodVisitor, context, i);
        methodVisitor.visitVarInsn(21, context.var("matchedCount"));
        methodVisitor.visitInsn(4);
        methodVisitor.visitInsn(96);
        methodVisitor.visitVarInsn(54, context.var("matchedCount"));
        _deserObject(context, methodVisitor, fieldInfo, cls);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getResolveStatus", "()I");
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/DefaultJSONParser", "NeedToResolve", "I");
        methodVisitor.visitJumpInsn(Opcodes.IF_ICMPNE, label3);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getLastResolveTask", "()Lcom/alibaba/fastjson/parser/DefaultJSONParser$ResolveTask;");
        methodVisitor.visitVarInsn(58, context.var("resolveTask"));
        methodVisitor.visitVarInsn(25, context.var("resolveTask"));
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser$ResolveTask", "setOwnerContext", "(Lcom/alibaba/fastjson/parser/ParseContext;)V");
        methodVisitor.visitVarInsn(25, context.var("resolveTask"));
        methodVisitor.visitVarInsn(25, 0);
        methodVisitor.visitLdcInsn(fieldInfo.getName());
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "getFieldDeserializer", "(Ljava/lang/String;)Lcom/alibaba/fastjson/parser/deserializer/FieldDeserializer;");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser$ResolveTask", "setFieldDeserializer", "(Lcom/alibaba/fastjson/parser/deserializer/FieldDeserializer;)V");
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "com/alibaba/fastjson/parser/DefaultJSONParser", "NONE", "I");
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "setResolveStatus", "(I)V");
        methodVisitor.visitLabel(label3);
    }

    private void _deserObject(Context context, MethodVisitor methodVisitor, FieldInfo fieldInfo, Class<?> cls) {
        _getFieldDeser(context, methodVisitor, fieldInfo);
        methodVisitor.visitVarInsn(25, 1);
        if (fieldInfo.getFieldType() instanceof Class) {
            methodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(fieldInfo.getFieldClass())));
        } else {
            methodVisitor.visitVarInsn(25, 0);
            methodVisitor.visitLdcInsn(fieldInfo.getName());
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "getFieldType", "(Ljava/lang/String;)Ljava/lang/reflect/Type;");
        }
        methodVisitor.visitLdcInsn(fieldInfo.getName());
        methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "com/alibaba/fastjson/parser/deserializer/ObjectDeserializer", "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
        methodVisitor.visitTypeInsn(192, ASMUtils.getType(cls));
        methodVisitor.visitVarInsn(58, context.var(fieldInfo.getName() + "_asm"));
    }

    private void _getFieldDeser(Context context, MethodVisitor methodVisitor, FieldInfo fieldInfo) {
        Label label = new Label();
        methodVisitor.visitVarInsn(25, 0);
        String className = context.getClassName();
        methodVisitor.visitFieldInsn(180, className, fieldInfo.getName() + "_asm_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, label);
        methodVisitor.visitVarInsn(25, 0);
        methodVisitor.visitVarInsn(25, 1);
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/DefaultJSONParser", "getConfig", "()Lcom/alibaba/fastjson/parser/ParserConfig;");
        methodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(fieldInfo.getFieldClass())));
        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/ParserConfig", "getDeserializer", "(Ljava/lang/reflect/Type;)Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        String className2 = context.getClassName();
        methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className2, fieldInfo.getName() + "_asm_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
        methodVisitor.visitLabel(label);
        methodVisitor.visitVarInsn(25, 0);
        String className3 = context.getClassName();
        methodVisitor.visitFieldInsn(180, className3, fieldInfo.getName() + "_asm_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    }

    public FieldDeserializer createFieldDeserializer(ParserConfig parserConfig, Class<?> cls, FieldInfo fieldInfo) throws Exception {
        Class<?> fieldClass = fieldInfo.getFieldClass();
        if (fieldClass == Integer.TYPE || fieldClass == Long.TYPE || fieldClass == String.class) {
            return createStringFieldDeserializer(parserConfig, cls, fieldInfo);
        }
        return parserConfig.createFieldDeserializerWithoutASM(parserConfig, cls, fieldInfo);
    }

    public FieldDeserializer createStringFieldDeserializer(ParserConfig parserConfig, Class<?> cls, FieldInfo fieldInfo) throws Exception {
        Class cls2;
        char c;
        char c2;
        int i;
        Class<?> fieldClass = fieldInfo.getFieldClass();
        Method method = fieldInfo.getMethod();
        String genFieldDeserializer = getGenFieldDeserializer(cls, fieldInfo);
        ClassWriter classWriter = new ClassWriter();
        if (fieldClass == Integer.TYPE) {
            cls2 = IntegerFieldDeserializer.class;
        } else if (fieldClass == Long.TYPE) {
            cls2 = LongFieldDeserializer.class;
        } else {
            cls2 = StringFieldDeserializer.class;
        }
        int i2 = cls.isInterface() ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;
        classWriter.visit(49, 33, genFieldDeserializer, ASMUtils.getType(cls2), null);
        MethodVisitor visitMethod = classWriter.visitMethod(1, "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;Lcom/alibaba/fastjson/util/FieldInfo;)V", null, null);
        visitMethod.visitVarInsn(25, 0);
        visitMethod.visitVarInsn(25, 1);
        visitMethod.visitVarInsn(25, 2);
        visitMethod.visitVarInsn(25, 3);
        visitMethod.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(cls2), "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;Lcom/alibaba/fastjson/util/FieldInfo;)V");
        visitMethod.visitInsn(Opcodes.RETURN);
        visitMethod.visitMaxs(4, 6);
        visitMethod.visitEnd();
        if (method == null) {
            i = 3;
            c2 = 2;
            c = 1;
        } else if (fieldClass == Integer.TYPE) {
            c = 1;
            MethodVisitor visitMethod2 = classWriter.visitMethod(1, "setValue", "(Ljava/lang/Object;I)V", null, null);
            visitMethod2.visitVarInsn(25, 1);
            visitMethod2.visitTypeInsn(192, ASMUtils.getType(method.getDeclaringClass()));
            c2 = 2;
            visitMethod2.visitVarInsn(21, 2);
            visitMethod2.visitMethodInsn(i2, ASMUtils.getType(method.getDeclaringClass()), method.getName(), ASMUtils.getDesc(method));
            visitMethod2.visitInsn(Opcodes.RETURN);
            visitMethod2.visitMaxs(3, 3);
            visitMethod2.visitEnd();
            i = 3;
        } else {
            c = 1;
            if (fieldClass == Long.TYPE) {
                MethodVisitor visitMethod3 = classWriter.visitMethod(1, "setValue", "(Ljava/lang/Object;J)V", null, null);
                visitMethod3.visitVarInsn(25, 1);
                visitMethod3.visitTypeInsn(192, ASMUtils.getType(method.getDeclaringClass()));
                visitMethod3.visitVarInsn(22, 2);
                visitMethod3.visitMethodInsn(i2, ASMUtils.getType(method.getDeclaringClass()), method.getName(), ASMUtils.getDesc(method));
                visitMethod3.visitInsn(Opcodes.RETURN);
                visitMethod3.visitMaxs(3, 4);
                visitMethod3.visitEnd();
                i = 3;
                c2 = 2;
            } else {
                MethodVisitor visitMethod4 = classWriter.visitMethod(1, "setValue", "(Ljava/lang/Object;Ljava/lang/Object;)V", null, null);
                visitMethod4.visitVarInsn(25, 1);
                visitMethod4.visitTypeInsn(192, ASMUtils.getType(method.getDeclaringClass()));
                c2 = 2;
                visitMethod4.visitVarInsn(25, 2);
                visitMethod4.visitTypeInsn(192, ASMUtils.getType(fieldClass));
                visitMethod4.visitMethodInsn(i2, ASMUtils.getType(method.getDeclaringClass()), method.getName(), ASMUtils.getDesc(method));
                visitMethod4.visitInsn(Opcodes.RETURN);
                i = 3;
                visitMethod4.visitMaxs(3, 3);
                visitMethod4.visitEnd();
            }
        }
        byte[] byteArray = classWriter.toByteArray();
        Class<?> defineClassPublic = this.classLoader.defineClassPublic(genFieldDeserializer, byteArray, 0, byteArray.length);
        Class<?>[] clsArr = new Class[i];
        clsArr[0] = ParserConfig.class;
        clsArr[c] = Class.class;
        clsArr[c2] = FieldInfo.class;
        Constructor<?> constructor = defineClassPublic.getConstructor(clsArr);
        Object[] objArr = new Object[i];
        objArr[0] = parserConfig;
        objArr[c] = cls;
        objArr[c2] = fieldInfo;
        return (FieldDeserializer) constructor.newInstance(objArr);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    static class Context {
        private final DeserializeBeanInfo beanInfo;
        private String className;
        private Class<?> clazz;
        private List<FieldInfo> fieldInfoList;
        private int variantIndex;
        private Map<String, Integer> variants = new HashMap();

        public Context(String str, ParserConfig parserConfig, DeserializeBeanInfo deserializeBeanInfo, int i) {
            this.variantIndex = 5;
            this.className = str;
            this.clazz = deserializeBeanInfo.getClazz();
            this.variantIndex = i;
            this.beanInfo = deserializeBeanInfo;
            this.fieldInfoList = new ArrayList(deserializeBeanInfo.getFieldList());
        }

        public String getClassName() {
            return this.className;
        }

        public List<FieldInfo> getFieldInfoList() {
            return this.fieldInfoList;
        }

        public DeserializeBeanInfo getBeanInfo() {
            return this.beanInfo;
        }

        public Class<?> getClazz() {
            return this.clazz;
        }

        public int getVariantCount() {
            return this.variantIndex;
        }

        public int var(String str, int i) {
            if (this.variants.get(str) == null) {
                this.variants.put(str, Integer.valueOf(this.variantIndex));
                this.variantIndex += i;
            }
            return this.variants.get(str).intValue();
        }

        public int var(String str) {
            if (this.variants.get(str) == null) {
                Map<String, Integer> map = this.variants;
                int i = this.variantIndex;
                this.variantIndex = i + 1;
                map.put(str, Integer.valueOf(i));
            }
            return this.variants.get(str).intValue();
        }
    }

    private void _init(ClassWriter classWriter, Context context) {
        int size = context.getFieldInfoList().size();
        for (int i = 0; i < size; i++) {
            classWriter.visitField(1, context.getFieldInfoList().get(i).getName() + "_asm_prefix__", "[C").visitEnd();
        }
        int size2 = context.getFieldInfoList().size();
        for (int i2 = 0; i2 < size2; i2++) {
            FieldInfo fieldInfo = context.getFieldInfoList().get(i2);
            Class<?> fieldClass = fieldInfo.getFieldClass();
            if (!fieldClass.isPrimitive() && !fieldClass.isEnum()) {
                if (Collection.class.isAssignableFrom(fieldClass)) {
                    classWriter.visitField(1, fieldInfo.getName() + "_asm_list_item_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;").visitEnd();
                } else {
                    classWriter.visitField(1, fieldInfo.getName() + "_asm_deser__", "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;").visitEnd();
                }
            }
        }
        MethodVisitor visitMethod = classWriter.visitMethod(1, "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;)V", null, null);
        visitMethod.visitVarInsn(25, 0);
        visitMethod.visitVarInsn(25, 1);
        visitMethod.visitVarInsn(25, 2);
        visitMethod.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;)V");
        visitMethod.visitVarInsn(25, 0);
        visitMethod.visitFieldInsn(180, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "serializer", "Lcom/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer$InnerJavaBeanDeserializer;");
        visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer", "getFieldDeserializerMap", "()Ljava/util/Map;");
        visitMethod.visitInsn(87);
        int size3 = context.getFieldInfoList().size();
        for (int i3 = 0; i3 < size3; i3++) {
            FieldInfo fieldInfo2 = context.getFieldInfoList().get(i3);
            visitMethod.visitVarInsn(25, 0);
            visitMethod.visitLdcInsn("\"" + fieldInfo2.getName() + "\":");
            visitMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "toCharArray", "()[C");
            String className = context.getClassName();
            visitMethod.visitFieldInsn(Opcodes.PUTFIELD, className, fieldInfo2.getName() + "_asm_prefix__", "[C");
        }
        visitMethod.visitInsn(Opcodes.RETURN);
        visitMethod.visitMaxs(4, 4);
        visitMethod.visitEnd();
    }

    private void _createInstance(ClassWriter classWriter, Context context) {
        MethodVisitor visitMethod = classWriter.visitMethod(1, "createInstance", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;)Ljava/lang/Object;", null, null);
        visitMethod.visitTypeInsn(Opcodes.NEW, ASMUtils.getType(context.getClazz()));
        visitMethod.visitInsn(89);
        visitMethod.visitMethodInsn(Opcodes.INVOKESPECIAL, ASMUtils.getType(context.getClazz()), "<init>", "()V");
        visitMethod.visitInsn(Opcodes.ARETURN);
        visitMethod.visitMaxs(3, 3);
        visitMethod.visitEnd();
    }
}
