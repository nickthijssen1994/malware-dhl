package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONToken;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class MapDeserializer implements ObjectDeserializer {
    public static final MapDeserializer instance = new MapDeserializer();

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public int getFastMatchToken() {
        return 12;
    }

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public <T> T deserialze(DefaultJSONParser defaultJSONParser, Type type, Object obj) {
        JSONLexer lexer = defaultJSONParser.getLexer();
        if (lexer.token() == 8) {
            lexer.nextToken(16);
            return null;
        }
        Map<Object, Object> createMap = createMap(type);
        ParseContext context = defaultJSONParser.getContext();
        try {
            defaultJSONParser.setContext(context, createMap, obj);
            return (T) deserialze(defaultJSONParser, type, obj, createMap);
        } finally {
            defaultJSONParser.setContext(context);
        }
    }

    protected Object deserialze(DefaultJSONParser defaultJSONParser, Type type, Object obj, Map map) {
        if (!(type instanceof ParameterizedType)) {
            return defaultJSONParser.parseObject(map, obj);
        }
        ParameterizedType parameterizedType = (ParameterizedType) type;
        Type type2 = parameterizedType.getActualTypeArguments()[0];
        Type type3 = parameterizedType.getActualTypeArguments()[1];
        if (String.class == type2) {
            return parseMap(defaultJSONParser, map, type3, obj);
        }
        return parseMap(defaultJSONParser, map, type2, type3, obj);
    }

    /* JADX WARN: Code restructure failed: missing block: B:70:0x0165, code lost:
        return r8;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static Map parseMap(DefaultJSONParser defaultJSONParser, Map<String, Object> map, Type type, Object obj) {
        String str;
        Object obj2;
        JSONLexer lexer = defaultJSONParser.getLexer();
        if (lexer.token() == 12) {
            ParseContext context = defaultJSONParser.getContext();
            while (true) {
                try {
                    lexer.skipWhitespace();
                    char current = lexer.getCurrent();
                    if (defaultJSONParser.isEnabled(Feature.AllowArbitraryCommas)) {
                        while (current == ',') {
                            lexer.next();
                            lexer.skipWhitespace();
                            current = lexer.getCurrent();
                        }
                    }
                    if (current == '\"') {
                        str = lexer.scanSymbol(defaultJSONParser.getSymbolTable(), '\"');
                        lexer.skipWhitespace();
                        if (lexer.getCurrent() != ':') {
                            throw new JSONException("expect ':' at " + lexer.pos());
                        }
                    } else if (current == '}') {
                        lexer.next();
                        lexer.resetStringPosition();
                        lexer.nextToken(16);
                        return map;
                    } else if (current == '\'') {
                        if (defaultJSONParser.isEnabled(Feature.AllowSingleQuotes)) {
                            str = lexer.scanSymbol(defaultJSONParser.getSymbolTable(), '\'');
                            lexer.skipWhitespace();
                            if (lexer.getCurrent() != ':') {
                                throw new JSONException("expect ':' at " + lexer.pos());
                            }
                        } else {
                            throw new JSONException("syntax error");
                        }
                    } else if (defaultJSONParser.isEnabled(Feature.AllowUnQuotedFieldNames)) {
                        str = lexer.scanSymbolUnQuoted(defaultJSONParser.getSymbolTable());
                        lexer.skipWhitespace();
                        char current2 = lexer.getCurrent();
                        if (current2 != ':') {
                            throw new JSONException("expect ':' at " + lexer.pos() + ", actual " + current2);
                        }
                    } else {
                        throw new JSONException("syntax error");
                    }
                    lexer.next();
                    lexer.skipWhitespace();
                    lexer.getCurrent();
                    lexer.resetStringPosition();
                    if (str != JSON.DEFAULT_TYPE_KEY || defaultJSONParser.isEnabled(Feature.DisableSpecialKeyDetect)) {
                        lexer.nextToken();
                        if (lexer.token() == 8) {
                            obj2 = null;
                            lexer.nextToken();
                        } else {
                            obj2 = defaultJSONParser.parseObject(type);
                        }
                        map.put(str, obj2);
                        defaultJSONParser.checkMapResolve(map, str);
                        defaultJSONParser.setContext(context, obj2, str);
                        int i = lexer.token();
                        if (i == 20 || i == 15) {
                            break;
                        } else if (i == 13) {
                            lexer.nextToken();
                            return map;
                        }
                    } else {
                        Class<?> loadClass = TypeUtils.loadClass(lexer.scanSymbol(defaultJSONParser.getSymbolTable(), '\"'));
                        if (Map.class.isAssignableFrom(loadClass)) {
                            lexer.nextToken(16);
                            if (lexer.token() == 13) {
                                lexer.nextToken(16);
                                return map;
                            }
                        } else {
                            ObjectDeserializer deserializer = defaultJSONParser.getConfig().getDeserializer(loadClass);
                            lexer.nextToken(16);
                            defaultJSONParser.setResolveStatus(2);
                            if (context != null && !(obj instanceof Integer)) {
                                defaultJSONParser.popContext();
                            }
                            return (Map) deserializer.deserialze(defaultJSONParser, loadClass, obj);
                        }
                    }
                } finally {
                    defaultJSONParser.setContext(context);
                }
            }
        } else {
            throw new JSONException("syntax error, expect {, actual " + lexer.token());
        }
    }

    public static Object parseMap(DefaultJSONParser defaultJSONParser, Map<Object, Object> map, Type type, Type type2, Object obj) {
        JSONLexer lexer = defaultJSONParser.getLexer();
        if (lexer.token() == 12 || lexer.token() == 16) {
            ObjectDeserializer deserializer = defaultJSONParser.getConfig().getDeserializer(type);
            ObjectDeserializer deserializer2 = defaultJSONParser.getConfig().getDeserializer(type2);
            lexer.nextToken(deserializer.getFastMatchToken());
            ParseContext context = defaultJSONParser.getContext();
            while (lexer.token() != 13) {
                try {
                    Object obj2 = null;
                    if (lexer.token() != 4 || !lexer.isRef() || defaultJSONParser.isEnabled(Feature.DisableSpecialKeyDetect)) {
                        if (map.size() == 0 && lexer.token() == 4 && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !defaultJSONParser.isEnabled(Feature.DisableSpecialKeyDetect)) {
                            lexer.nextTokenWithColon(4);
                            lexer.nextToken(16);
                            if (lexer.token() == 13) {
                                lexer.nextToken();
                                return map;
                            }
                            lexer.nextToken(deserializer.getFastMatchToken());
                        }
                        Object deserialze = deserializer.deserialze(defaultJSONParser, type, null);
                        if (lexer.token() == 17) {
                            lexer.nextToken(deserializer2.getFastMatchToken());
                            map.put(deserialze, deserializer2.deserialze(defaultJSONParser, type2, deserialze));
                            if (lexer.token() == 16) {
                                lexer.nextToken(deserializer.getFastMatchToken());
                            }
                        } else {
                            throw new JSONException("syntax error, expect :, actual " + lexer.token());
                        }
                    } else {
                        lexer.nextTokenWithColon(4);
                        if (lexer.token() == 4) {
                            String stringVal = lexer.stringVal();
                            if ("..".equals(stringVal)) {
                                obj2 = context.getParentContext().getObject();
                            } else if ("$".equals(stringVal)) {
                                ParseContext parseContext = context;
                                while (parseContext.getParentContext() != null) {
                                    parseContext = parseContext.getParentContext();
                                }
                                obj2 = parseContext.getObject();
                            } else {
                                defaultJSONParser.addResolveTask(new DefaultJSONParser.ResolveTask(context, stringVal));
                                defaultJSONParser.setResolveStatus(1);
                            }
                            lexer.nextToken(13);
                            if (lexer.token() == 13) {
                                lexer.nextToken(16);
                                return obj2;
                            }
                            throw new JSONException("illegal ref");
                        }
                        throw new JSONException("illegal ref, " + JSONToken.name(lexer.token()));
                    }
                } finally {
                    defaultJSONParser.setContext(context);
                }
            }
            lexer.nextToken(16);
            return map;
        }
        throw new JSONException("syntax error, expect {, actual " + lexer.tokenName());
    }

    protected Map<Object, Object> createMap(Type type) {
        if (type == Properties.class) {
            return new Properties();
        }
        if (type == Hashtable.class) {
            return new Hashtable();
        }
        if (type == IdentityHashMap.class) {
            return new IdentityHashMap();
        }
        if (type == SortedMap.class || type == TreeMap.class) {
            return new TreeMap();
        }
        if (type == ConcurrentMap.class || type == ConcurrentHashMap.class) {
            return new ConcurrentHashMap();
        }
        if (type == Map.class || type == HashMap.class) {
            return new HashMap();
        }
        if (type == LinkedHashMap.class) {
            return new LinkedHashMap();
        }
        if (type instanceof ParameterizedType) {
            return createMap(((ParameterizedType) type).getRawType());
        }
        Class cls = (Class) type;
        if (!cls.isInterface()) {
            try {
                return (Map) cls.newInstance();
            } catch (Exception e) {
                throw new JSONException("unsupport type " + type, e);
            }
        } else {
            throw new JSONException("unsupport type " + type);
        }
    }
}
