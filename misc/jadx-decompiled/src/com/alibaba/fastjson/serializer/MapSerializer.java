package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class MapSerializer implements ObjectSerializer {
    public static MapSerializer instance = new MapSerializer();

    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:147:0x0147 A[ADDED_TO_REGION, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:152:0x019a A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:153:0x0194 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:71:0x010e A[Catch: all -> 0x01db, TryCatch #0 {all -> 0x01db, blocks: (B:11:0x0027, B:13:0x0036, B:15:0x0049, B:16:0x0054, B:18:0x005a, B:20:0x006e, B:23:0x0076, B:26:0x007b, B:28:0x0085, B:30:0x0089, B:33:0x0094, B:36:0x009e, B:38:0x00a4, B:41:0x00ac, B:44:0x00b1, B:46:0x00bb, B:48:0x00bf, B:51:0x00ca, B:54:0x00d4, B:56:0x00da, B:59:0x00e2, B:62:0x00e7, B:64:0x00f1, B:66:0x00f5, B:67:0x00ff, B:69:0x0108, B:71:0x010e, B:74:0x0116, B:77:0x011b, B:79:0x0125, B:81:0x0129, B:82:0x0133, B:84:0x013d, B:87:0x0147, B:89:0x014d, B:91:0x0152, B:92:0x0155, B:94:0x015d, B:95:0x0160, B:97:0x0166, B:98:0x0169, B:100:0x0171, B:102:0x0179, B:105:0x0182, B:106:0x0186, B:107:0x018d, B:109:0x0194, B:110:0x019a, B:112:0x01a0, B:113:0x01a9), top: B:126:0x0027 }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x013d A[Catch: all -> 0x01db, TryCatch #0 {all -> 0x01db, blocks: (B:11:0x0027, B:13:0x0036, B:15:0x0049, B:16:0x0054, B:18:0x005a, B:20:0x006e, B:23:0x0076, B:26:0x007b, B:28:0x0085, B:30:0x0089, B:33:0x0094, B:36:0x009e, B:38:0x00a4, B:41:0x00ac, B:44:0x00b1, B:46:0x00bb, B:48:0x00bf, B:51:0x00ca, B:54:0x00d4, B:56:0x00da, B:59:0x00e2, B:62:0x00e7, B:64:0x00f1, B:66:0x00f5, B:67:0x00ff, B:69:0x0108, B:71:0x010e, B:74:0x0116, B:77:0x011b, B:79:0x0125, B:81:0x0129, B:82:0x0133, B:84:0x013d, B:87:0x0147, B:89:0x014d, B:91:0x0152, B:92:0x0155, B:94:0x015d, B:95:0x0160, B:97:0x0166, B:98:0x0169, B:100:0x0171, B:102:0x0179, B:105:0x0182, B:106:0x0186, B:107:0x018d, B:109:0x0194, B:110:0x019a, B:112:0x01a0, B:113:0x01a9), top: B:126:0x0027 }] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x014d A[Catch: all -> 0x01db, TryCatch #0 {all -> 0x01db, blocks: (B:11:0x0027, B:13:0x0036, B:15:0x0049, B:16:0x0054, B:18:0x005a, B:20:0x006e, B:23:0x0076, B:26:0x007b, B:28:0x0085, B:30:0x0089, B:33:0x0094, B:36:0x009e, B:38:0x00a4, B:41:0x00ac, B:44:0x00b1, B:46:0x00bb, B:48:0x00bf, B:51:0x00ca, B:54:0x00d4, B:56:0x00da, B:59:0x00e2, B:62:0x00e7, B:64:0x00f1, B:66:0x00f5, B:67:0x00ff, B:69:0x0108, B:71:0x010e, B:74:0x0116, B:77:0x011b, B:79:0x0125, B:81:0x0129, B:82:0x0133, B:84:0x013d, B:87:0x0147, B:89:0x014d, B:91:0x0152, B:92:0x0155, B:94:0x015d, B:95:0x0160, B:97:0x0166, B:98:0x0169, B:100:0x0171, B:102:0x0179, B:105:0x0182, B:106:0x0186, B:107:0x018d, B:109:0x0194, B:110:0x019a, B:112:0x01a0, B:113:0x01a9), top: B:126:0x0027 }] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0164  */
    @Override // com.alibaba.fastjson.serializer.ObjectSerializer
    /* Code decompiled incorrectly, please refer to instructions dump */
    public void write(JSONSerializer jSONSerializer, Object obj, Object obj2, Type type, int i) throws IOException {
        boolean z;
        Object obj3;
        List<ValueFilter> valueFiltersDirect;
        SerializeWriter writer = jSONSerializer.getWriter();
        if (obj == null) {
            writer.writeNull();
            return;
        }
        Map map = (Map) obj;
        if (jSONSerializer.containsReference(obj)) {
            jSONSerializer.writeReference(obj);
            return;
        }
        SerialContext context = jSONSerializer.getContext();
        jSONSerializer.setContext(context, obj, obj2, 0);
        try {
            writer.write('{');
            jSONSerializer.incrementIndent();
            if (writer.isEnabled(SerializerFeature.WriteClassName)) {
                writer.writeFieldName(JSON.DEFAULT_TYPE_KEY);
                writer.writeString(obj.getClass().getName());
                z = false;
            } else {
                z = true;
            }
            Class<?> cls = null;
            ObjectSerializer objectSerializer = null;
            for (Map.Entry entry : map.entrySet()) {
                Object value = entry.getValue();
                Object key = entry.getKey();
                List<PropertyPreFilter> propertyPreFiltersDirect = jSONSerializer.getPropertyPreFiltersDirect();
                if (propertyPreFiltersDirect != null && propertyPreFiltersDirect.size() > 0) {
                    if (key != null && !(key instanceof String)) {
                        if ((key.getClass().isPrimitive() || (key instanceof Number)) && !FilterUtils.applyName(jSONSerializer, obj, JSON.toJSONString(key))) {
                        }
                    }
                    if (!FilterUtils.applyName(jSONSerializer, obj, (String) key)) {
                    }
                }
                List<PropertyFilter> propertyFiltersDirect = jSONSerializer.getPropertyFiltersDirect();
                if (propertyFiltersDirect != null && propertyFiltersDirect.size() > 0) {
                    if (key != null && !(key instanceof String)) {
                        if ((key.getClass().isPrimitive() || (key instanceof Number)) && !FilterUtils.apply(jSONSerializer, obj, JSON.toJSONString(key), value)) {
                        }
                    }
                    if (!FilterUtils.apply(jSONSerializer, obj, (String) key, value)) {
                    }
                }
                List<NameFilter> nameFiltersDirect = jSONSerializer.getNameFiltersDirect();
                if (nameFiltersDirect != null && nameFiltersDirect.size() > 0) {
                    if (key != null && !(key instanceof String)) {
                        if (key.getClass().isPrimitive() || (key instanceof Number)) {
                            obj3 = FilterUtils.processKey(jSONSerializer, obj, JSON.toJSONString(key), value);
                            valueFiltersDirect = jSONSerializer.getValueFiltersDirect();
                            if (valueFiltersDirect != null && valueFiltersDirect.size() > 0) {
                                if (obj3 != null && !(obj3 instanceof String)) {
                                    if (!obj3.getClass().isPrimitive() || (obj3 instanceof Number)) {
                                        value = FilterUtils.processValue(jSONSerializer, obj, JSON.toJSONString(obj3), value);
                                    }
                                }
                                value = FilterUtils.processValue(jSONSerializer, obj, (String) obj3, value);
                            }
                            if (value != null || jSONSerializer.isEnabled(SerializerFeature.WriteMapNullValue)) {
                                if (obj3 instanceof String) {
                                    String str = (String) obj3;
                                    if (!z) {
                                        writer.write(',');
                                    }
                                    if (writer.isEnabled(SerializerFeature.PrettyFormat)) {
                                        jSONSerializer.println();
                                    }
                                    writer.writeFieldName(str, true);
                                } else {
                                    if (!z) {
                                        writer.write(',');
                                    }
                                    if (!writer.isEnabled(SerializerFeature.BrowserCompatible) && !writer.isEnabled(SerializerFeature.WriteNonStringKeyAsString) && !writer.isEnabled(SerializerFeature.BrowserSecure)) {
                                        jSONSerializer.write(obj3);
                                        writer.write(':');
                                    }
                                    jSONSerializer.write(JSON.toJSONString(obj3));
                                    writer.write(':');
                                }
                                if (value == null) {
                                    writer.writeNull();
                                    z = false;
                                } else {
                                    Class<?> cls2 = value.getClass();
                                    if (cls2 == cls) {
                                        objectSerializer.write(jSONSerializer, value, obj3, null, 0);
                                    } else {
                                        ObjectSerializer objectWriter = jSONSerializer.getObjectWriter(cls2);
                                        objectWriter.write(jSONSerializer, value, obj3, null, 0);
                                        objectSerializer = objectWriter;
                                        cls = cls2;
                                    }
                                    z = false;
                                }
                            }
                        }
                    }
                    obj3 = FilterUtils.processKey(jSONSerializer, obj, (String) key, value);
                    valueFiltersDirect = jSONSerializer.getValueFiltersDirect();
                    if (valueFiltersDirect != null) {
                        if (obj3 != null) {
                            if (!obj3.getClass().isPrimitive()) {
                            }
                            value = FilterUtils.processValue(jSONSerializer, obj, JSON.toJSONString(obj3), value);
                        }
                        value = FilterUtils.processValue(jSONSerializer, obj, (String) obj3, value);
                    }
                    if (value != null) {
                    }
                    if (obj3 instanceof String) {
                    }
                    if (value == null) {
                    }
                }
                obj3 = key;
                valueFiltersDirect = jSONSerializer.getValueFiltersDirect();
                if (valueFiltersDirect != null) {
                }
                if (value != null) {
                }
                if (obj3 instanceof String) {
                }
                if (value == null) {
                }
            }
            jSONSerializer.setContext(context);
            jSONSerializer.decrementIdent();
            if (writer.isEnabled(SerializerFeature.PrettyFormat) && map.size() > 0) {
                jSONSerializer.println();
            }
            writer.write('}');
        } catch (Throwable th) {
            jSONSerializer.setContext(context);
            throw th;
        }
    }
}
