package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.util.IOUtils;
import com.p051jd.lib.p083un.utils.UnTimeUtils;
import java.io.IOException;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class DateSerializer implements ObjectSerializer {
    public static final DateSerializer instance = new DateSerializer();

    @Override // com.alibaba.fastjson.serializer.ObjectSerializer
    public void write(JSONSerializer jSONSerializer, Object obj, Object obj2, Type type, int i) throws IOException {
        char[] cArr;
        SerializeWriter writer = jSONSerializer.getWriter();
        if (obj == null) {
            writer.writeNull();
            return;
        }
        Date date = (Date) obj;
        if (writer.isEnabled(SerializerFeature.WriteDateUseDateFormat)) {
            DateFormat dateFormat = jSONSerializer.getDateFormat();
            if (dateFormat == null) {
                dateFormat = new SimpleDateFormat(JSON.DEFFAULT_DATE_FORMAT);
            }
            writer.writeString(dateFormat.format(date));
        } else if (!writer.isEnabled(SerializerFeature.WriteClassName) || obj.getClass() == type) {
            long time = date.getTime();
            if (jSONSerializer.isEnabled(SerializerFeature.UseISO8601DateFormat)) {
                if (jSONSerializer.isEnabled(SerializerFeature.UseSingleQuotes)) {
                    writer.append('\'');
                } else {
                    writer.append('\"');
                }
                Calendar instance2 = Calendar.getInstance();
                instance2.setTimeInMillis(time);
                int i2 = instance2.get(1);
                int i3 = instance2.get(2) + 1;
                int i4 = instance2.get(5);
                int i5 = instance2.get(11);
                int i6 = instance2.get(12);
                int i7 = instance2.get(13);
                int i8 = instance2.get(14);
                if (i8 != 0) {
                    cArr = "0000-00-00T00:00:00.000".toCharArray();
                    IOUtils.getChars(i8, 23, cArr);
                    IOUtils.getChars(i7, 19, cArr);
                    IOUtils.getChars(i6, 16, cArr);
                    IOUtils.getChars(i5, 13, cArr);
                    IOUtils.getChars(i4, 10, cArr);
                    IOUtils.getChars(i3, 7, cArr);
                    IOUtils.getChars(i2, 4, cArr);
                } else if (i7 == 0 && i6 == 0 && i5 == 0) {
                    cArr = "0000-00-00".toCharArray();
                    IOUtils.getChars(i4, 10, cArr);
                    IOUtils.getChars(i3, 7, cArr);
                    IOUtils.getChars(i2, 4, cArr);
                } else {
                    cArr = "0000-00-00T00:00:00".toCharArray();
                    IOUtils.getChars(i7, 19, cArr);
                    IOUtils.getChars(i6, 16, cArr);
                    IOUtils.getChars(i5, 13, cArr);
                    IOUtils.getChars(i4, 10, cArr);
                    IOUtils.getChars(i3, 7, cArr);
                    IOUtils.getChars(i2, 4, cArr);
                }
                writer.write(cArr);
                int rawOffset = instance2.getTimeZone().getRawOffset() / UnTimeUtils.HOUR;
                if (rawOffset == 0) {
                    writer.append("Z");
                } else if (rawOffset > 0) {
                    writer.append("+").append((CharSequence) String.format("%02d", Integer.valueOf(rawOffset))).append(":00");
                } else {
                    writer.append("-").append((CharSequence) String.format("%02d", Integer.valueOf(-rawOffset))).append(":00");
                }
                if (jSONSerializer.isEnabled(SerializerFeature.UseSingleQuotes)) {
                    writer.append('\'');
                } else {
                    writer.append('\"');
                }
            } else {
                writer.writeLong(time);
            }
        } else if (obj.getClass() == Date.class) {
            writer.write("new Date(");
            writer.writeLongAndChar(date.getTime(), ')');
        } else {
            writer.write('{');
            writer.writeFieldName(JSON.DEFAULT_TYPE_KEY);
            jSONSerializer.write(obj.getClass().getName());
            writer.writeFieldValue(',', "val", date.getTime());
            writer.write('}');
        }
    }
}
