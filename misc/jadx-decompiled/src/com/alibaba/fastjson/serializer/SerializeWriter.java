package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.Base64;
import com.alibaba.fastjson.util.IOUtils;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.lang.ref.SoftReference;
import java.math.BigDecimal;
import java.nio.charset.Charset;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class SerializeWriter extends Writer {
    private static final ThreadLocal<SoftReference<char[]>> bufLocal = new ThreadLocal<>();
    protected char[] buf;
    protected int count;
    private int features;
    private final Writer writer;

    public SerializeWriter() {
        this((Writer) null);
    }

    public SerializeWriter(Writer writer) {
        this.writer = writer;
        this.features = JSON.DEFAULT_GENERATE_FEATURE;
        SoftReference<char[]> softReference = bufLocal.get();
        if (softReference != null) {
            this.buf = softReference.get();
            bufLocal.set(null);
        }
        if (this.buf == null) {
            this.buf = new char[1024];
        }
    }

    public SerializeWriter(SerializerFeature... serializerFeatureArr) {
        this((Writer) null, serializerFeatureArr);
    }

    public SerializeWriter(Writer writer, SerializerFeature... serializerFeatureArr) {
        this.writer = writer;
        SoftReference<char[]> softReference = bufLocal.get();
        if (softReference != null) {
            this.buf = softReference.get();
            bufLocal.set(null);
        }
        if (this.buf == null) {
            this.buf = new char[1024];
        }
        int i = 0;
        for (SerializerFeature serializerFeature : serializerFeatureArr) {
            i |= serializerFeature.getMask();
        }
        this.features = i;
    }

    public int getBufferLength() {
        return this.buf.length;
    }

    public SerializeWriter(int i) {
        this((Writer) null, i);
    }

    public SerializeWriter(Writer writer, int i) {
        this.writer = writer;
        if (i > 0) {
            this.buf = new char[i];
            return;
        }
        throw new IllegalArgumentException("Negative initial size: " + i);
    }

    public void config(SerializerFeature serializerFeature, boolean z) {
        if (z) {
            this.features |= serializerFeature.getMask();
            if (serializerFeature == SerializerFeature.WriteEnumUsingToString) {
                this.features &= SerializerFeature.WriteEnumUsingName.getMask() ^ -1;
            } else if (serializerFeature == SerializerFeature.WriteEnumUsingName) {
                this.features &= SerializerFeature.WriteEnumUsingToString.getMask() ^ -1;
            }
        } else {
            this.features = (serializerFeature.getMask() ^ -1) & this.features;
        }
    }

    public boolean isEnabled(SerializerFeature serializerFeature) {
        return SerializerFeature.isEnabled(this.features, serializerFeature);
    }

    @Override // java.io.Writer
    public void write(int i) {
        int i2 = this.count + 1;
        if (i2 > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i2);
            } else {
                flush();
                i2 = 1;
            }
        }
        this.buf[this.count] = (char) i;
        this.count = i2;
    }

    public void write(char c) {
        int i = this.count + 1;
        if (i > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i);
            } else {
                flush();
                i = 1;
            }
        }
        this.buf[this.count] = c;
        this.count = i;
    }

    @Override // java.io.Writer
    public void write(char[] cArr, int i, int i2) {
        int i3;
        if (i < 0 || i > cArr.length || i2 < 0 || (i3 = i + i2) > cArr.length || i3 < 0) {
            throw new IndexOutOfBoundsException();
        } else if (i2 != 0) {
            int i4 = this.count + i2;
            if (i4 > this.buf.length) {
                if (this.writer == null) {
                    expandCapacity(i4);
                } else {
                    do {
                        char[] cArr2 = this.buf;
                        int length = cArr2.length;
                        int i5 = this.count;
                        int i6 = length - i5;
                        System.arraycopy(cArr, i, cArr2, i5, i6);
                        this.count = this.buf.length;
                        flush();
                        i2 -= i6;
                        i += i6;
                    } while (i2 > this.buf.length);
                    i4 = i2;
                }
            }
            System.arraycopy(cArr, i, this.buf, this.count, i2);
            this.count = i4;
        }
    }

    public void expandCapacity(int i) {
        int length = ((this.buf.length * 3) / 2) + 1;
        if (length >= i) {
            i = length;
        }
        char[] cArr = new char[i];
        System.arraycopy(this.buf, 0, cArr, 0, this.count);
        this.buf = cArr;
    }

    @Override // java.io.Writer
    public void write(String str, int i, int i2) {
        int i3;
        int i4 = this.count + i2;
        if (i4 > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i4);
            } else {
                while (true) {
                    char[] cArr = this.buf;
                    int length = cArr.length;
                    int i5 = this.count;
                    int i6 = length - i5;
                    i3 = i + i6;
                    str.getChars(i, i3, cArr, i5);
                    this.count = this.buf.length;
                    flush();
                    i2 -= i6;
                    if (i2 <= this.buf.length) {
                        break;
                    }
                    i = i3;
                }
                i4 = i2;
                i = i3;
            }
        }
        str.getChars(i, i2 + i, this.buf, this.count);
        this.count = i4;
    }

    public void writeTo(Writer writer) throws IOException {
        if (this.writer == null) {
            writer.write(this.buf, 0, this.count);
            return;
        }
        throw new UnsupportedOperationException("writer not null");
    }

    public void writeTo(OutputStream outputStream, String str) throws IOException {
        writeTo(outputStream, Charset.forName(str));
    }

    public void writeTo(OutputStream outputStream, Charset charset) throws IOException {
        if (this.writer == null) {
            outputStream.write(new String(this.buf, 0, this.count).getBytes(charset));
            return;
        }
        throw new UnsupportedOperationException("writer not null");
    }

    @Override // java.io.Writer, java.lang.Appendable
    public SerializeWriter append(CharSequence charSequence) {
        String charSequence2 = charSequence == null ? "null" : charSequence.toString();
        write(charSequence2, 0, charSequence2.length());
        return this;
    }

    @Override // java.io.Writer, java.lang.Appendable
    public SerializeWriter append(CharSequence charSequence, int i, int i2) {
        if (charSequence == null) {
            charSequence = "null";
        }
        String charSequence2 = charSequence.subSequence(i, i2).toString();
        write(charSequence2, 0, charSequence2.length());
        return this;
    }

    @Override // java.io.Writer, java.lang.Appendable
    public SerializeWriter append(char c) {
        write(c);
        return this;
    }

    public void reset() {
        this.count = 0;
    }

    public char[] toCharArray() {
        if (this.writer == null) {
            int i = this.count;
            char[] cArr = new char[i];
            System.arraycopy(this.buf, 0, cArr, 0, i);
            return cArr;
        }
        throw new UnsupportedOperationException("writer not null");
    }

    public byte[] toBytes(String str) {
        if (this.writer == null) {
            if (str == null) {
                str = "UTF-8";
            }
            return new SerialWriterStringEncoder(Charset.forName(str)).encode(this.buf, 0, this.count);
        }
        throw new UnsupportedOperationException("writer not null");
    }

    public int size() {
        return this.count;
    }

    @Override // java.lang.Object
    public String toString() {
        return new String(this.buf, 0, this.count);
    }

    @Override // java.io.Writer, java.io.Closeable, java.lang.AutoCloseable
    public void close() {
        if (this.writer != null && this.count > 0) {
            flush();
        }
        char[] cArr = this.buf;
        if (cArr.length <= 8192) {
            bufLocal.set(new SoftReference<>(cArr));
        }
        this.buf = null;
    }

    @Override // java.io.Writer
    public void write(String str) {
        if (str == null) {
            writeNull();
        } else {
            write(str, 0, str.length());
        }
    }

    public void writeInt(int i) {
        if (i == Integer.MIN_VALUE) {
            write("-2147483648");
            return;
        }
        int stringSize = i < 0 ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);
        int i2 = this.count + stringSize;
        if (i2 > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i2);
            } else {
                char[] cArr = new char[stringSize];
                IOUtils.getChars(i, stringSize, cArr);
                write(cArr, 0, cArr.length);
                return;
            }
        }
        IOUtils.getChars(i, i2, this.buf);
        this.count = i2;
    }

    public void writeByteArray(byte[] bArr) {
        int length = bArr.length;
        boolean isEnabled = isEnabled(SerializerFeature.UseSingleQuotes);
        char c = isEnabled ? '\'' : '\"';
        if (length == 0) {
            write(isEnabled ? "''" : "\"\"");
            return;
        }
        char[] cArr = Base64.f249CA;
        int i = (length / 3) * 3;
        int i2 = length - 1;
        int i3 = this.count;
        int i4 = (((i2 / 3) + 1) << 2) + i3 + 2;
        int i5 = 0;
        if (i4 > this.buf.length) {
            if (this.writer != null) {
                write(c);
                int i6 = 0;
                while (i6 < i) {
                    int i7 = i6 + 1;
                    int i8 = i7 + 1;
                    int i9 = ((bArr[i6] & 255) << 16) | ((bArr[i7] & 255) << 8) | (bArr[i8] & 255);
                    write(cArr[(i9 >>> 18) & 63]);
                    write(cArr[(i9 >>> 12) & 63]);
                    write(cArr[(i9 >>> 6) & 63]);
                    write(cArr[i9 & 63]);
                    i6 = i8 + 1;
                }
                int i10 = length - i;
                if (i10 > 0) {
                    int i11 = (bArr[i] & 255) << 10;
                    if (i10 == 2) {
                        i5 = (bArr[i2] & 255) << 2;
                    }
                    int i12 = i11 | i5;
                    write(cArr[i12 >> 12]);
                    write(cArr[(i12 >>> 6) & 63]);
                    write(i10 == 2 ? cArr[i12 & 63] : '=');
                    write('=');
                }
                write(c);
                return;
            }
            expandCapacity(i4);
        }
        this.count = i4;
        int i13 = i3 + 1;
        this.buf[i3] = c;
        int i14 = 0;
        while (i14 < i) {
            int i15 = i14 + 1;
            int i16 = i15 + 1;
            int i17 = ((bArr[i14] & 255) << 16) | ((bArr[i15] & 255) << 8);
            int i18 = i16 + 1;
            int i19 = i17 | (bArr[i16] & 255);
            char[] cArr2 = this.buf;
            int i20 = i13 + 1;
            cArr2[i13] = cArr[(i19 >>> 18) & 63];
            int i21 = i20 + 1;
            cArr2[i20] = cArr[(i19 >>> 12) & 63];
            int i22 = i21 + 1;
            cArr2[i21] = cArr[(i19 >>> 6) & 63];
            i13 = i22 + 1;
            cArr2[i22] = cArr[i19 & 63];
            i14 = i18;
        }
        int i23 = length - i;
        if (i23 > 0) {
            int i24 = (bArr[i] & 255) << 10;
            if (i23 == 2) {
                i5 = (bArr[i2] & 255) << 2;
            }
            int i25 = i24 | i5;
            char[] cArr3 = this.buf;
            cArr3[i4 - 5] = cArr[i25 >> 12];
            cArr3[i4 - 4] = cArr[(i25 >>> 6) & 63];
            cArr3[i4 - 3] = i23 == 2 ? cArr[i25 & 63] : '=';
            this.buf[i4 - 2] = '=';
        }
        this.buf[i4 - 1] = c;
    }

    public void writeFloatAndChar(float f, char c) {
        String f2 = Float.toString(f);
        if (f2.endsWith(".0")) {
            f2 = f2.substring(0, f2.length() - 2);
        }
        write(f2);
        write(c);
    }

    public void writeDoubleAndChar(double d, char c) {
        String d2 = Double.toString(d);
        if (d2.endsWith(".0")) {
            d2 = d2.substring(0, d2.length() - 2);
        }
        write(d2);
        write(c);
    }

    public void writeBooleanAndChar(boolean z, char c) {
        if (z) {
            if (c == ',') {
                write("true,");
            } else if (c == ']') {
                write("true]");
            } else {
                write("true");
                write(c);
            }
        } else if (c == ',') {
            write("false,");
        } else if (c == ']') {
            write("false]");
        } else {
            write("false");
            write(c);
        }
    }

    public void writeCharacterAndChar(char c, char c2) {
        writeString(Character.toString(c));
        write(c2);
    }

    public void writeEnum(Enum<?> r2, char c) {
        if (r2 == null) {
            writeNull();
            write(',');
        } else if (isEnabled(SerializerFeature.WriteEnumUsingName)) {
            writeEnumValue(r2.name(), c);
        } else if (isEnabled(SerializerFeature.WriteEnumUsingToString)) {
            writeEnumValue(r2.toString(), c);
        } else {
            writeIntAndChar(r2.ordinal(), c);
        }
    }

    private void writeEnumValue(String str, char c) {
        if (isEnabled(SerializerFeature.UseSingleQuotes)) {
            write('\'');
            write(str);
            write('\'');
            write(c);
            return;
        }
        write('\"');
        write(str);
        write('\"');
        write(c);
    }

    public void writeIntAndChar(int i, char c) {
        if (i == Integer.MIN_VALUE) {
            write("-2147483648");
            write(c);
            return;
        }
        int stringSize = this.count + (i < 0 ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i));
        int i2 = stringSize + 1;
        if (i2 > this.buf.length) {
            if (this.writer != null) {
                writeInt(i);
                write(c);
                return;
            }
            expandCapacity(i2);
        }
        IOUtils.getChars(i, stringSize, this.buf);
        this.buf[stringSize] = c;
        this.count = i2;
    }

    public void writeLongAndChar(long j, char c) throws IOException {
        if (j == Long.MIN_VALUE) {
            write("-9223372036854775808");
            write(c);
            return;
        }
        int stringSize = this.count + (j < 0 ? IOUtils.stringSize(-j) + 1 : IOUtils.stringSize(j));
        int i = stringSize + 1;
        if (i > this.buf.length) {
            if (this.writer != null) {
                writeLong(j);
                write(c);
                return;
            }
            expandCapacity(i);
        }
        IOUtils.getChars(j, stringSize, this.buf);
        this.buf[stringSize] = c;
        this.count = i;
    }

    public void writeLong(long j) {
        if (j == Long.MIN_VALUE) {
            write("-9223372036854775808");
            return;
        }
        int stringSize = j < 0 ? IOUtils.stringSize(-j) + 1 : IOUtils.stringSize(j);
        int i = this.count + stringSize;
        if (i > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i);
            } else {
                char[] cArr = new char[stringSize];
                IOUtils.getChars(j, stringSize, cArr);
                write(cArr, 0, cArr.length);
                return;
            }
        }
        IOUtils.getChars(j, i, this.buf);
        this.count = i;
    }

    public void writeNull() {
        write("null");
    }

    private void writeStringWithDoubleQuote(String str, char c) {
        writeStringWithDoubleQuote(str, c, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:246:0x04dc  */
    /* JADX WARN: Removed duplicated region for block: B:247:0x0518  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void writeStringWithDoubleQuote(String str, char c, boolean z) {
        if (str == null) {
            writeNull();
            if (c != 0) {
                write(c);
                return;
            }
            return;
        }
        int length = str.length();
        int i = this.count + length + 2;
        if (c != 0) {
            i++;
        }
        int i2 = 0;
        if (i > this.buf.length) {
            if (this.writer != null) {
                write('\"');
                while (i2 < str.length()) {
                    char charAt = str.charAt(i2);
                    if (isEnabled(SerializerFeature.BrowserSecure)) {
                        if ((charAt < '0' || charAt > '9') && ((charAt < 'a' || charAt > 'z') && !((charAt >= 'A' && charAt <= 'Z') || charAt == ',' || charAt == '.' || charAt == '_'))) {
                            write('\\');
                            write('u');
                            write(IOUtils.DIGITS[(charAt >>> '\f') & 15]);
                            write(IOUtils.DIGITS[(charAt >>> '\b') & 15]);
                            write(IOUtils.DIGITS[(charAt >>> 4) & 15]);
                            write(IOUtils.DIGITS[charAt & 15]);
                            i2++;
                        }
                        write(charAt);
                        i2++;
                    } else if (isEnabled(SerializerFeature.BrowserCompatible)) {
                        if (charAt == '\b' || charAt == '\f' || charAt == '\n' || charAt == '\r' || charAt == '\t' || charAt == '\"' || charAt == '/' || charAt == '\\') {
                            write('\\');
                            write(IOUtils.replaceChars[charAt]);
                        } else if (charAt < ' ') {
                            write('\\');
                            write('u');
                            write('0');
                            write('0');
                            int i3 = charAt * 2;
                            write(IOUtils.ASCII_CHARS[i3]);
                            write(IOUtils.ASCII_CHARS[i3 + 1]);
                        } else {
                            if (charAt >= 127) {
                                write('\\');
                                write('u');
                                write(IOUtils.DIGITS[(charAt >>> '\f') & 15]);
                                write(IOUtils.DIGITS[(charAt >>> '\b') & 15]);
                                write(IOUtils.DIGITS[(charAt >>> 4) & 15]);
                                write(IOUtils.DIGITS[charAt & 15]);
                            }
                            write(charAt);
                        }
                        i2++;
                    } else {
                        if ((charAt < IOUtils.specicalFlags_doubleQuotes.length && IOUtils.specicalFlags_doubleQuotes[charAt] != 0) || (charAt == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {
                            write('\\');
                            if (IOUtils.specicalFlags_doubleQuotes[charAt] == 4) {
                                write('u');
                                write(IOUtils.DIGITS[(charAt >>> '\f') & 15]);
                                write(IOUtils.DIGITS[(charAt >>> '\b') & 15]);
                                write(IOUtils.DIGITS[(charAt >>> 4) & 15]);
                                write(IOUtils.DIGITS[charAt & 15]);
                            } else {
                                write(IOUtils.replaceChars[charAt]);
                            }
                            i2++;
                        }
                        write(charAt);
                        i2++;
                    }
                }
                write('\"');
                if (c != 0) {
                    write(c);
                    return;
                }
                return;
            }
            expandCapacity(i);
        }
        int i4 = this.count;
        int i5 = i4 + 1;
        int i6 = i5 + length;
        char[] cArr = this.buf;
        cArr[i4] = '\"';
        str.getChars(0, length, cArr, i5);
        this.count = i;
        int i7 = -1;
        if (isEnabled(SerializerFeature.BrowserSecure)) {
            for (int i8 = i5; i8 < i6; i8++) {
                char c2 = this.buf[i8];
                if ((c2 < '0' || c2 > '9') && ((c2 < 'a' || c2 > 'z') && !((c2 >= 'A' && c2 <= 'Z') || c2 == ',' || c2 == '.' || c2 == '_'))) {
                    i += 5;
                    i7 = i8;
                }
            }
            if (i > this.buf.length) {
                expandCapacity(i);
            }
            this.count = i;
            while (i7 >= i5) {
                char c3 = this.buf[i7];
                if ((c3 < '0' || c3 > '9') && ((c3 < 'a' || c3 > 'z') && !((c3 >= 'A' && c3 <= 'Z') || c3 == ',' || c3 == '.' || c3 == '_'))) {
                    char[] cArr2 = this.buf;
                    int i9 = i7 + 1;
                    System.arraycopy(cArr2, i9, cArr2, i7 + 6, (i6 - i7) - 1);
                    char[] cArr3 = this.buf;
                    cArr3[i7] = '\\';
                    cArr3[i9] = 'u';
                    cArr3[i7 + 2] = IOUtils.DIGITS[(c3 >>> '\f') & 15];
                    this.buf[i7 + 3] = IOUtils.DIGITS[(c3 >>> '\b') & 15];
                    this.buf[i7 + 4] = IOUtils.DIGITS[(c3 >>> 4) & 15];
                    this.buf[i7 + 5] = IOUtils.DIGITS[c3 & 15];
                    i6 += 5;
                }
                i7--;
            }
            if (c != 0) {
                char[] cArr4 = this.buf;
                int i10 = this.count;
                cArr4[i10 - 2] = '\"';
                cArr4[i10 - 1] = c;
                return;
            }
            this.buf[this.count - 1] = '\"';
        } else if (isEnabled(SerializerFeature.BrowserCompatible)) {
            for (int i11 = i5; i11 < i6; i11++) {
                char c4 = this.buf[i11];
                if (c4 == '\"' || c4 == '/' || c4 == '\\') {
                    i++;
                    i7 = i11;
                } else if (c4 == '\b' || c4 == '\f' || c4 == '\n' || c4 == '\r' || c4 == '\t') {
                    i++;
                    i7 = i11;
                } else if (c4 < ' ') {
                    i += 5;
                    i7 = i11;
                } else if (c4 >= 127) {
                    i += 5;
                    i7 = i11;
                }
            }
            if (i > this.buf.length) {
                expandCapacity(i);
            }
            this.count = i;
            while (i7 >= i5) {
                char[] cArr5 = this.buf;
                char c5 = cArr5[i7];
                if (c5 == '\b' || c5 == '\f' || c5 == '\n' || c5 == '\r' || c5 == '\t') {
                    char[] cArr6 = this.buf;
                    int i12 = i7 + 1;
                    System.arraycopy(cArr6, i12, cArr6, i7 + 2, (i6 - i7) - 1);
                    char[] cArr7 = this.buf;
                    cArr7[i7] = '\\';
                    cArr7[i12] = IOUtils.replaceChars[c5];
                    i6++;
                } else if (c5 == '\"' || c5 == '/' || c5 == '\\') {
                    char[] cArr8 = this.buf;
                    int i13 = i7 + 1;
                    System.arraycopy(cArr8, i13, cArr8, i7 + 2, (i6 - i7) - 1);
                    char[] cArr9 = this.buf;
                    cArr9[i7] = '\\';
                    cArr9[i13] = c5;
                    i6++;
                } else if (c5 < ' ') {
                    int i14 = i7 + 1;
                    System.arraycopy(cArr5, i14, cArr5, i7 + 6, (i6 - i7) - 1);
                    char[] cArr10 = this.buf;
                    cArr10[i7] = '\\';
                    cArr10[i14] = 'u';
                    cArr10[i7 + 2] = '0';
                    cArr10[i7 + 3] = '0';
                    int i15 = c5 * 2;
                    cArr10[i7 + 4] = IOUtils.ASCII_CHARS[i15];
                    this.buf[i7 + 5] = IOUtils.ASCII_CHARS[i15 + 1];
                    i6 += 5;
                } else if (c5 >= 127) {
                    int i16 = i7 + 1;
                    System.arraycopy(cArr5, i16, cArr5, i7 + 6, (i6 - i7) - 1);
                    char[] cArr11 = this.buf;
                    cArr11[i7] = '\\';
                    cArr11[i16] = 'u';
                    cArr11[i7 + 2] = IOUtils.DIGITS[(c5 >>> '\f') & 15];
                    this.buf[i7 + 3] = IOUtils.DIGITS[(c5 >>> '\b') & 15];
                    this.buf[i7 + 4] = IOUtils.DIGITS[(c5 >>> 4) & 15];
                    this.buf[i7 + 5] = IOUtils.DIGITS[c5 & 15];
                    i6 += 5;
                }
                i7--;
            }
            if (c != 0) {
                char[] cArr12 = this.buf;
                int i17 = this.count;
                cArr12[i17 - 2] = '\"';
                cArr12[i17 - 1] = c;
                return;
            }
            this.buf[this.count - 1] = '\"';
        } else {
            if (z) {
                int i18 = -1;
                char c6 = 0;
                int i19 = -1;
                for (int i20 = i5; i20 < i6; i20++) {
                    char c7 = this.buf[i20];
                    if (c7 == 8232) {
                        i2++;
                        i += 4;
                        if (i18 == -1) {
                            i18 = i20;
                            i19 = i18;
                            c6 = c7;
                        } else {
                            i19 = i20;
                            c6 = c7;
                        }
                    } else if (c7 >= ']') {
                        if (c7 >= 127 && c7 <= 160) {
                            if (i18 == -1) {
                                i18 = i20;
                            }
                            i2++;
                            i += 4;
                            i19 = i20;
                            c6 = c7;
                        }
                    } else if (isSpecial(c7, this.features)) {
                        i2++;
                        if (c7 < IOUtils.specicalFlags_doubleQuotes.length && IOUtils.specicalFlags_doubleQuotes[c7] == 4) {
                            i += 4;
                        }
                        if (i18 == -1) {
                            i18 = i20;
                            i19 = i18;
                            c6 = c7;
                        } else {
                            i19 = i20;
                            c6 = c7;
                        }
                    }
                }
                if (i2 > 0) {
                    int i21 = i + i2;
                    if (i21 > this.buf.length) {
                        expandCapacity(i21);
                    }
                    this.count = i21;
                    if (i2 == 1) {
                        if (c6 == 8232) {
                            int i22 = i19 + 1;
                            char[] cArr13 = this.buf;
                            System.arraycopy(cArr13, i22, cArr13, i19 + 6, (i6 - i19) - 1);
                            char[] cArr14 = this.buf;
                            cArr14[i19] = '\\';
                            cArr14[i22] = 'u';
                            int i23 = i22 + 1;
                            cArr14[i23] = '2';
                            int i24 = i23 + 1;
                            cArr14[i24] = '0';
                            int i25 = i24 + 1;
                            cArr14[i25] = '2';
                            cArr14[i25 + 1] = '8';
                        } else if (c6 >= IOUtils.specicalFlags_doubleQuotes.length || IOUtils.specicalFlags_doubleQuotes[c6] != 4) {
                            int i26 = i19 + 1;
                            char[] cArr15 = this.buf;
                            System.arraycopy(cArr15, i26, cArr15, i19 + 2, (i6 - i19) - 1);
                            char[] cArr16 = this.buf;
                            cArr16[i19] = '\\';
                            cArr16[i26] = IOUtils.replaceChars[c6];
                        } else {
                            int i27 = i19 + 1;
                            char[] cArr17 = this.buf;
                            System.arraycopy(cArr17, i27, cArr17, i19 + 6, (i6 - i19) - 1);
                            char[] cArr18 = this.buf;
                            cArr18[i19] = '\\';
                            int i28 = i27 + 1;
                            cArr18[i27] = 'u';
                            int i29 = i28 + 1;
                            cArr18[i28] = IOUtils.DIGITS[(c6 >>> '\f') & 15];
                            int i30 = i29 + 1;
                            this.buf[i29] = IOUtils.DIGITS[(c6 >>> '\b') & 15];
                            this.buf[i30] = IOUtils.DIGITS[(c6 >>> 4) & 15];
                            this.buf[i30 + 1] = IOUtils.DIGITS[c6 & 15];
                        }
                    } else if (i2 > 1) {
                        for (int i31 = i18 - i5; i31 < str.length(); i31++) {
                            char charAt2 = str.charAt(i31);
                            if (charAt2 < IOUtils.specicalFlags_doubleQuotes.length) {
                                if (IOUtils.specicalFlags_doubleQuotes[charAt2] != 0) {
                                    int i32 = i18 + 1;
                                    this.buf[i18] = '\\';
                                    if (IOUtils.specicalFlags_doubleQuotes[charAt2] != 4) {
                                        char[] cArr19 = this.buf;
                                        int i33 = i32 + 1;
                                        cArr19[i32] = 'u';
                                        int i34 = i33 + 1;
                                        cArr19[i33] = IOUtils.DIGITS[(charAt2 >>> '\f') & 15];
                                        int i35 = i34 + 1;
                                        this.buf[i34] = IOUtils.DIGITS[(charAt2 >>> '\b') & 15];
                                        int i36 = i35 + 1;
                                        this.buf[i35] = IOUtils.DIGITS[(charAt2 >>> 4) & 15];
                                        i18 = i36 + 1;
                                        this.buf[i36] = IOUtils.DIGITS[charAt2 & 15];
                                    } else {
                                        i18 = i32 + 1;
                                        this.buf[i32] = IOUtils.replaceChars[charAt2];
                                    }
                                }
                            }
                            if (charAt2 == '/') {
                                if (!isEnabled(SerializerFeature.WriteSlashAsSpecial)) {
                                }
                                int i322 = i18 + 1;
                                this.buf[i18] = '\\';
                                if (IOUtils.specicalFlags_doubleQuotes[charAt2] != 4) {
                                }
                            }
                            if (charAt2 == 8232) {
                                char[] cArr20 = this.buf;
                                int i37 = i18 + 1;
                                cArr20[i18] = '\\';
                                int i38 = i37 + 1;
                                cArr20[i37] = 'u';
                                int i39 = i38 + 1;
                                cArr20[i38] = IOUtils.DIGITS[(charAt2 >>> '\f') & 15];
                                int i40 = i39 + 1;
                                this.buf[i39] = IOUtils.DIGITS[(charAt2 >>> '\b') & 15];
                                int i41 = i40 + 1;
                                this.buf[i40] = IOUtils.DIGITS[(charAt2 >>> 4) & 15];
                                i18 = i41 + 1;
                                this.buf[i41] = IOUtils.DIGITS[charAt2 & 15];
                            } else {
                                i18++;
                                this.buf[i18] = charAt2;
                            }
                        }
                    }
                }
            }
            if (c != 0) {
                char[] cArr21 = this.buf;
                int i42 = this.count;
                cArr21[i42 - 2] = '\"';
                cArr21[i42 - 1] = c;
                return;
            }
            this.buf[this.count - 1] = '\"';
        }
    }

    public void writeFieldNull(char c, String str) {
        write(c);
        writeFieldName(str);
        writeNull();
    }

    public void writeFieldEmptyList(char c, String str) {
        write(c);
        writeFieldName(str);
        write("[]");
    }

    public void writeFieldNullString(char c, String str) {
        write(c);
        writeFieldName(str);
        if (isEnabled(SerializerFeature.WriteNullStringAsEmpty)) {
            writeString("");
        } else {
            writeNull();
        }
    }

    public void writeFieldNullBoolean(char c, String str) {
        write(c);
        writeFieldName(str);
        if (isEnabled(SerializerFeature.WriteNullBooleanAsFalse)) {
            write("false");
        } else {
            writeNull();
        }
    }

    public void writeFieldNullList(char c, String str) {
        write(c);
        writeFieldName(str);
        if (isEnabled(SerializerFeature.WriteNullListAsEmpty)) {
            write("[]");
        } else {
            writeNull();
        }
    }

    public void writeFieldNullNumber(char c, String str) {
        write(c);
        writeFieldName(str);
        if (isEnabled(SerializerFeature.WriteNullNumberAsZero)) {
            write('0');
        } else {
            writeNull();
        }
    }

    public void writeFieldValue(char c, String str, char c2) {
        write(c);
        writeFieldName(str);
        if (c2 == 0) {
            writeString("\u0000");
        } else {
            writeString(Character.toString(c2));
        }
    }

    public void writeFieldValue(char c, String str, boolean z) {
        char c2 = isEnabled(SerializerFeature.UseSingleQuotes) ? '\'' : '\"';
        int i = z ? 4 : 5;
        int length = str.length();
        int i2 = this.count + length + 4 + i;
        if (i2 > this.buf.length) {
            if (this.writer != null) {
                write(c);
                writeString(str);
                write(':');
                write(z);
                return;
            }
            expandCapacity(i2);
        }
        int i3 = this.count;
        this.count = i2;
        char[] cArr = this.buf;
        cArr[i3] = c;
        int i4 = i3 + length + 1;
        cArr[i3 + 1] = c2;
        str.getChars(0, length, cArr, i3 + 2);
        this.buf[i4 + 1] = c2;
        if (z) {
            System.arraycopy(":true".toCharArray(), 0, this.buf, i4 + 2, 5);
        } else {
            System.arraycopy(":false".toCharArray(), 0, this.buf, i4 + 2, 6);
        }
    }

    public void write(boolean z) {
        if (z) {
            write("true");
        } else {
            write("false");
        }
    }

    public void writeFieldValue(char c, String str, int i) {
        if (i == Integer.MIN_VALUE || !isEnabled(SerializerFeature.QuoteFieldNames)) {
            writeFieldValue1(c, str, i);
            return;
        }
        char c2 = isEnabled(SerializerFeature.UseSingleQuotes) ? '\'' : '\"';
        int stringSize = i < 0 ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);
        int length = str.length();
        int i2 = this.count + length + 4 + stringSize;
        if (i2 > this.buf.length) {
            if (this.writer != null) {
                writeFieldValue1(c, str, i);
                return;
            }
            expandCapacity(i2);
        }
        int i3 = this.count;
        this.count = i2;
        char[] cArr = this.buf;
        cArr[i3] = c;
        int i4 = i3 + length + 1;
        cArr[i3 + 1] = c2;
        str.getChars(0, length, cArr, i3 + 2);
        char[] cArr2 = this.buf;
        cArr2[i4 + 1] = c2;
        cArr2[i4 + 2] = ':';
        IOUtils.getChars(i, this.count, cArr2);
    }

    public void writeFieldValue1(char c, String str, int i) {
        write(c);
        writeFieldName(str);
        writeInt(i);
    }

    public void writeFieldValue(char c, String str, long j) {
        if (j == Long.MIN_VALUE || !isEnabled(SerializerFeature.QuoteFieldNames)) {
            writeFieldValue1(c, str, j);
            return;
        }
        char c2 = isEnabled(SerializerFeature.UseSingleQuotes) ? '\'' : '\"';
        int stringSize = j < 0 ? IOUtils.stringSize(-j) + 1 : IOUtils.stringSize(j);
        int length = str.length();
        int i = this.count + length + 4 + stringSize;
        if (i > this.buf.length) {
            if (this.writer != null) {
                write(c);
                writeFieldName(str);
                writeLong(j);
                return;
            }
            expandCapacity(i);
        }
        int i2 = this.count;
        this.count = i;
        char[] cArr = this.buf;
        cArr[i2] = c;
        int i3 = i2 + length + 1;
        cArr[i2 + 1] = c2;
        str.getChars(0, length, cArr, i2 + 2);
        char[] cArr2 = this.buf;
        cArr2[i3 + 1] = c2;
        cArr2[i3 + 2] = ':';
        IOUtils.getChars(j, this.count, cArr2);
    }

    public void writeFieldValue1(char c, String str, long j) {
        write(c);
        writeFieldName(str);
        writeLong(j);
    }

    public void writeFieldValue(char c, String str, float f) {
        write(c);
        writeFieldName(str);
        if (f == 0.0f) {
            write('0');
        } else if (Float.isNaN(f)) {
            writeNull();
        } else if (Float.isInfinite(f)) {
            writeNull();
        } else {
            String f2 = Float.toString(f);
            if (f2.endsWith(".0")) {
                f2 = f2.substring(0, f2.length() - 2);
            }
            write(f2);
        }
    }

    public void writeFieldValue(char c, String str, double d) {
        write(c);
        writeFieldName(str);
        if (d == 0.0d) {
            write('0');
        } else if (Double.isNaN(d)) {
            writeNull();
        } else if (Double.isInfinite(d)) {
            writeNull();
        } else {
            String d2 = Double.toString(d);
            if (d2.endsWith(".0")) {
                d2 = d2.substring(0, d2.length() - 2);
            }
            write(d2);
        }
    }

    public void writeFieldValue(char c, String str, String str2) {
        if (!isEnabled(SerializerFeature.QuoteFieldNames)) {
            write(c);
            writeFieldName(str);
            if (str2 == null) {
                writeNull();
            } else {
                writeString(str2);
            }
        } else if (isEnabled(SerializerFeature.UseSingleQuotes)) {
            write(c);
            writeFieldName(str);
            if (str2 == null) {
                writeNull();
            } else {
                writeString(str2);
            }
        } else if (isEnabled(SerializerFeature.BrowserSecure)) {
            write(c);
            writeStringWithDoubleQuote(str, ':');
            writeStringWithDoubleQuote(str2, 0);
        } else if (isEnabled(SerializerFeature.BrowserCompatible)) {
            write(c);
            writeStringWithDoubleQuote(str, ':');
            writeStringWithDoubleQuote(str2, 0);
        } else {
            writeFieldValueStringWithDoubleQuote(c, str, str2, true);
        }
    }

    private void writeFieldValueStringWithDoubleQuote(char c, String str, String str2, boolean z) {
        int i;
        int i2;
        int length = str.length();
        int i3 = this.count;
        if (str2 == null) {
            i2 = i3 + length + 8;
            i = 4;
        } else {
            i = str2.length();
            i2 = i3 + length + i + 6;
        }
        int i4 = 0;
        if (i2 > this.buf.length) {
            if (this.writer != null) {
                write(c);
                writeStringWithDoubleQuote(str, ':', z);
                writeStringWithDoubleQuote(str2, 0, z);
                return;
            }
            expandCapacity(i2);
        }
        char[] cArr = this.buf;
        int i5 = this.count;
        cArr[i5] = c;
        int i6 = i5 + 2;
        int i7 = i6 + length;
        cArr[i5 + 1] = '\"';
        str.getChars(0, length, cArr, i6);
        this.count = i2;
        char[] cArr2 = this.buf;
        cArr2[i7] = '\"';
        int i8 = i7 + 1;
        int i9 = i8 + 1;
        cArr2[i8] = ':';
        if (str2 == null) {
            int i10 = i9 + 1;
            cArr2[i9] = 'n';
            int i11 = i10 + 1;
            cArr2[i10] = 'u';
            cArr2[i11] = 'l';
            cArr2[i11 + 1] = 'l';
            return;
        }
        int i12 = i9 + 1;
        cArr2[i9] = '\"';
        int i13 = i12 + i;
        str2.getChars(0, i, cArr2, i12);
        if (z && !isEnabled(SerializerFeature.DisableCheckSpecialChar)) {
            int i14 = -1;
            char c2 = 0;
            int i15 = -1;
            for (int i16 = i12; i16 < i13; i16++) {
                char c3 = this.buf[i16];
                if (c3 == 8232) {
                    i4++;
                    i2 += 4;
                    if (i14 == -1) {
                        i14 = i16;
                        i15 = i14;
                        c2 = c3;
                    } else {
                        i15 = i16;
                        c2 = c3;
                    }
                } else if (c3 >= ']') {
                    if (c3 >= 127 && c3 <= 160) {
                        if (i14 == -1) {
                            i14 = i16;
                        }
                        i4++;
                        i2 += 4;
                        i15 = i16;
                        c2 = c3;
                    }
                } else if (isSpecial(c3, this.features)) {
                    i4++;
                    if (c3 < IOUtils.specicalFlags_doubleQuotes.length && IOUtils.specicalFlags_doubleQuotes[c3] == 4) {
                        i2 += 4;
                    }
                    if (i14 == -1) {
                        i14 = i16;
                        i15 = i14;
                        c2 = c3;
                    } else {
                        i15 = i16;
                        c2 = c3;
                    }
                }
            }
            if (i4 > 0) {
                int i17 = i2 + i4;
                if (i17 > this.buf.length) {
                    expandCapacity(i17);
                }
                this.count = i17;
                if (i4 == 1) {
                    if (c2 == 8232) {
                        int i18 = i15 + 1;
                        char[] cArr3 = this.buf;
                        System.arraycopy(cArr3, i18, cArr3, i15 + 6, (i13 - i15) - 1);
                        char[] cArr4 = this.buf;
                        cArr4[i15] = '\\';
                        cArr4[i18] = 'u';
                        int i19 = i18 + 1;
                        cArr4[i19] = '2';
                        int i20 = i19 + 1;
                        cArr4[i20] = '0';
                        int i21 = i20 + 1;
                        cArr4[i21] = '2';
                        cArr4[i21 + 1] = '8';
                    } else if (c2 >= IOUtils.specicalFlags_doubleQuotes.length || IOUtils.specicalFlags_doubleQuotes[c2] != 4) {
                        int i22 = i15 + 1;
                        char[] cArr5 = this.buf;
                        System.arraycopy(cArr5, i22, cArr5, i15 + 2, (i13 - i15) - 1);
                        char[] cArr6 = this.buf;
                        cArr6[i15] = '\\';
                        cArr6[i22] = IOUtils.replaceChars[c2];
                    } else {
                        int i23 = i15 + 1;
                        char[] cArr7 = this.buf;
                        System.arraycopy(cArr7, i23, cArr7, i15 + 6, (i13 - i15) - 1);
                        char[] cArr8 = this.buf;
                        cArr8[i15] = '\\';
                        int i24 = i23 + 1;
                        cArr8[i23] = 'u';
                        int i25 = i24 + 1;
                        cArr8[i24] = IOUtils.DIGITS[(c2 >>> '\f') & 15];
                        int i26 = i25 + 1;
                        this.buf[i25] = IOUtils.DIGITS[(c2 >>> '\b') & 15];
                        this.buf[i26] = IOUtils.DIGITS[(c2 >>> 4) & 15];
                        this.buf[i26 + 1] = IOUtils.DIGITS[c2 & 15];
                    }
                } else if (i4 > 1) {
                    for (int i27 = i14 - i12; i27 < str2.length(); i27++) {
                        char charAt = str2.charAt(i27);
                        if ((charAt < IOUtils.specicalFlags_doubleQuotes.length && IOUtils.specicalFlags_doubleQuotes[charAt] != 0) || (charAt == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {
                            int i28 = i14 + 1;
                            this.buf[i14] = '\\';
                            if (IOUtils.specicalFlags_doubleQuotes[charAt] == 4) {
                                char[] cArr9 = this.buf;
                                int i29 = i28 + 1;
                                cArr9[i28] = 'u';
                                int i30 = i29 + 1;
                                cArr9[i29] = IOUtils.DIGITS[(charAt >>> '\f') & 15];
                                int i31 = i30 + 1;
                                this.buf[i30] = IOUtils.DIGITS[(charAt >>> '\b') & 15];
                                int i32 = i31 + 1;
                                this.buf[i31] = IOUtils.DIGITS[(charAt >>> 4) & 15];
                                i14 = i32 + 1;
                                this.buf[i32] = IOUtils.DIGITS[charAt & 15];
                            } else {
                                i14 = i28 + 1;
                                this.buf[i28] = IOUtils.replaceChars[charAt];
                            }
                        } else if (charAt == 8232) {
                            char[] cArr10 = this.buf;
                            int i33 = i14 + 1;
                            cArr10[i14] = '\\';
                            int i34 = i33 + 1;
                            cArr10[i33] = 'u';
                            int i35 = i34 + 1;
                            cArr10[i34] = IOUtils.DIGITS[(charAt >>> '\f') & 15];
                            int i36 = i35 + 1;
                            this.buf[i35] = IOUtils.DIGITS[(charAt >>> '\b') & 15];
                            int i37 = i36 + 1;
                            this.buf[i36] = IOUtils.DIGITS[(charAt >>> 4) & 15];
                            i14 = i37 + 1;
                            this.buf[i37] = IOUtils.DIGITS[charAt & 15];
                        } else {
                            i14++;
                            this.buf[i14] = charAt;
                        }
                    }
                }
            }
        }
        this.buf[this.count - 1] = '\"';
    }

    static boolean isSpecial(char c, int i) {
        if (c == ' ') {
            return false;
        }
        if (c == '/' && SerializerFeature.isEnabled(i, SerializerFeature.WriteSlashAsSpecial)) {
            return true;
        }
        if (c <= '#' || c == '\\') {
            return c <= 31 || c == '\\' || c == '\"';
        }
        return false;
    }

    public void writeFieldValue(char c, String str, Enum<?> r4) {
        if (r4 == null) {
            write(c);
            writeFieldName(str);
            writeNull();
        } else if (isEnabled(SerializerFeature.WriteEnumUsingName)) {
            writeEnumFieldValue(c, str, r4.name());
        } else if (isEnabled(SerializerFeature.WriteEnumUsingToString)) {
            writeEnumFieldValue(c, str, r4.toString());
        } else {
            writeFieldValue(c, str, r4.ordinal());
        }
    }

    private void writeEnumFieldValue(char c, String str, String str2) {
        if (isEnabled(SerializerFeature.UseSingleQuotes)) {
            writeFieldValue(c, str, str2);
        } else {
            writeFieldValueStringWithDoubleQuote(c, str, str2, false);
        }
    }

    public void writeFieldValue(char c, String str, BigDecimal bigDecimal) {
        write(c);
        writeFieldName(str);
        if (bigDecimal == null) {
            writeNull();
        } else {
            write(bigDecimal.toString());
        }
    }

    public void writeString(String str, char c) {
        if (isEnabled(SerializerFeature.UseSingleQuotes)) {
            writeStringWithSingleQuote(str);
            write(c);
            return;
        }
        writeStringWithDoubleQuote(str, c);
    }

    public void writeString(String str) {
        if (isEnabled(SerializerFeature.UseSingleQuotes)) {
            writeStringWithSingleQuote(str);
        } else {
            writeStringWithDoubleQuote(str, 0);
        }
    }

    private void writeStringWithSingleQuote(String str) {
        int i = 0;
        if (str == null) {
            int i2 = this.count + 4;
            if (i2 > this.buf.length) {
                expandCapacity(i2);
            }
            "null".getChars(0, 4, this.buf, this.count);
            this.count = i2;
            return;
        }
        int length = str.length();
        int i3 = this.count + length + 2;
        if (i3 > this.buf.length) {
            if (this.writer != null) {
                write('\'');
                while (i < str.length()) {
                    char charAt = str.charAt(i);
                    if (charAt <= '\r' || charAt == '\\' || charAt == '\'' || (charAt == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {
                        write('\\');
                        write(IOUtils.replaceChars[charAt]);
                    } else {
                        write(charAt);
                    }
                    i++;
                }
                write('\'');
                return;
            }
            expandCapacity(i3);
        }
        int i4 = this.count;
        int i5 = i4 + 1;
        int i6 = i5 + length;
        char[] cArr = this.buf;
        cArr[i4] = '\'';
        str.getChars(0, length, cArr, i5);
        this.count = i3;
        int i7 = -1;
        char c = 0;
        for (int i8 = i5; i8 < i6; i8++) {
            char c2 = this.buf[i8];
            if (c2 <= '\r' || c2 == '\\' || c2 == '\'' || (c2 == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {
                i++;
                i7 = i8;
                c = c2;
            }
        }
        int i9 = i3 + i;
        if (i9 > this.buf.length) {
            expandCapacity(i9);
        }
        this.count = i9;
        if (i == 1) {
            char[] cArr2 = this.buf;
            int i10 = i7 + 1;
            System.arraycopy(cArr2, i10, cArr2, i7 + 2, (i6 - i7) - 1);
            char[] cArr3 = this.buf;
            cArr3[i7] = '\\';
            cArr3[i10] = IOUtils.replaceChars[c];
        } else if (i > 1) {
            char[] cArr4 = this.buf;
            int i11 = i7 + 1;
            System.arraycopy(cArr4, i11, cArr4, i7 + 2, (i6 - i7) - 1);
            char[] cArr5 = this.buf;
            cArr5[i7] = '\\';
            cArr5[i11] = IOUtils.replaceChars[c];
            int i12 = i6 + 1;
            for (int i13 = i11 - 2; i13 >= i5; i13--) {
                char c3 = this.buf[i13];
                if (c3 <= '\r' || c3 == '\\' || c3 == '\'' || (c3 == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {
                    char[] cArr6 = this.buf;
                    int i14 = i13 + 1;
                    System.arraycopy(cArr6, i14, cArr6, i13 + 2, (i12 - i13) - 1);
                    char[] cArr7 = this.buf;
                    cArr7[i13] = '\\';
                    cArr7[i14] = IOUtils.replaceChars[c3];
                    i12++;
                }
            }
        }
        this.buf[this.count - 1] = '\'';
    }

    public void writeFieldName(String str) {
        writeFieldName(str, false);
    }

    public void writeFieldName(String str, boolean z) {
        if (str == null) {
            write("null:");
        } else if (isEnabled(SerializerFeature.UseSingleQuotes)) {
            if (isEnabled(SerializerFeature.QuoteFieldNames)) {
                writeStringWithSingleQuote(str);
                write(':');
                return;
            }
            writeKeyWithSingleQuoteIfHasSpecial(str);
        } else if (isEnabled(SerializerFeature.QuoteFieldNames)) {
            writeStringWithDoubleQuote(str, ':', z);
        } else {
            writeKeyWithDoubleQuoteIfHasSpecial(str);
        }
    }

    private void writeKeyWithDoubleQuoteIfHasSpecial(String str) {
        int i;
        byte[] bArr = IOUtils.specicalFlags_doubleQuotes;
        int length = str.length();
        boolean z = true;
        int i2 = this.count + length + 1;
        int i3 = 0;
        if (i2 > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i2);
            } else if (length == 0) {
                write('\"');
                write('\"');
                write(':');
                return;
            } else {
                int i4 = 0;
                while (true) {
                    if (i4 < length) {
                        char charAt = str.charAt(i4);
                        if (charAt < bArr.length && bArr[charAt] != 0) {
                            break;
                        }
                        i4++;
                    } else {
                        z = false;
                        break;
                    }
                }
                if (z) {
                    write('\"');
                }
                while (i3 < length) {
                    char charAt2 = str.charAt(i3);
                    if (charAt2 >= bArr.length || bArr[charAt2] == 0) {
                        write(charAt2);
                    } else {
                        write('\\');
                        write(IOUtils.replaceChars[charAt2]);
                    }
                    i3++;
                }
                if (z) {
                    write('\"');
                }
                write(':');
                return;
            }
        }
        if (length == 0) {
            int i5 = this.count;
            if (i5 + 3 > this.buf.length) {
                expandCapacity(i5 + 3);
            }
            char[] cArr = this.buf;
            int i6 = this.count;
            this.count = i6 + 1;
            cArr[i6] = '\"';
            int i7 = this.count;
            this.count = i7 + 1;
            cArr[i7] = '\"';
            int i8 = this.count;
            this.count = i8 + 1;
            cArr[i8] = ':';
            return;
        }
        int i9 = this.count;
        int i10 = i9 + length;
        str.getChars(0, length, this.buf, i9);
        this.count = i2;
        int i11 = i9;
        boolean z2 = false;
        while (i11 < i10) {
            char[] cArr2 = this.buf;
            char c = cArr2[i11];
            if (c >= bArr.length || bArr[c] == 0) {
                i = i11;
            } else if (!z2) {
                i2 += 3;
                if (i2 > cArr2.length) {
                    expandCapacity(i2);
                }
                this.count = i2;
                char[] cArr3 = this.buf;
                int i12 = i11 + 1;
                System.arraycopy(cArr3, i12, cArr3, i11 + 3, (i10 - i11) - 1);
                char[] cArr4 = this.buf;
                System.arraycopy(cArr4, i3, cArr4, 1, i11);
                char[] cArr5 = this.buf;
                cArr5[i9] = '\"';
                cArr5[i12] = '\\';
                int i13 = i12 + 1;
                cArr5[i13] = IOUtils.replaceChars[c];
                i10 += 2;
                this.buf[this.count - 2] = '\"';
                i = i13;
                z2 = true;
            } else {
                i2++;
                if (i2 > cArr2.length) {
                    expandCapacity(i2);
                }
                this.count = i2;
                char[] cArr6 = this.buf;
                i = i11 + 1;
                System.arraycopy(cArr6, i, cArr6, i11 + 2, i10 - i11);
                char[] cArr7 = this.buf;
                cArr7[i11] = '\\';
                cArr7[i] = IOUtils.replaceChars[c];
                i10++;
            }
            i11 = i + 1;
            i3 = 0;
        }
        this.buf[this.count - 1] = ':';
    }

    private void writeKeyWithSingleQuoteIfHasSpecial(String str) {
        int i;
        byte[] bArr = IOUtils.specicalFlags_singleQuotes;
        int length = str.length();
        boolean z = true;
        int i2 = this.count + length + 1;
        int i3 = 0;
        if (i2 > this.buf.length) {
            if (this.writer == null) {
                expandCapacity(i2);
            } else if (length == 0) {
                write('\'');
                write('\'');
                write(':');
                return;
            } else {
                int i4 = 0;
                while (true) {
                    if (i4 < length) {
                        char charAt = str.charAt(i4);
                        if (charAt < bArr.length && bArr[charAt] != 0) {
                            break;
                        }
                        i4++;
                    } else {
                        z = false;
                        break;
                    }
                }
                if (z) {
                    write('\'');
                }
                while (i3 < length) {
                    char charAt2 = str.charAt(i3);
                    if (charAt2 >= bArr.length || bArr[charAt2] == 0) {
                        write(charAt2);
                    } else {
                        write('\\');
                        write(IOUtils.replaceChars[charAt2]);
                    }
                    i3++;
                }
                if (z) {
                    write('\'');
                }
                write(':');
                return;
            }
        }
        if (length == 0) {
            int i5 = this.count;
            if (i5 + 3 > this.buf.length) {
                expandCapacity(i5 + 3);
            }
            char[] cArr = this.buf;
            int i6 = this.count;
            this.count = i6 + 1;
            cArr[i6] = '\'';
            int i7 = this.count;
            this.count = i7 + 1;
            cArr[i7] = '\'';
            int i8 = this.count;
            this.count = i8 + 1;
            cArr[i8] = ':';
            return;
        }
        int i9 = this.count;
        int i10 = i9 + length;
        str.getChars(0, length, this.buf, i9);
        this.count = i2;
        int i11 = i9;
        boolean z2 = false;
        while (i11 < i10) {
            char[] cArr2 = this.buf;
            char c = cArr2[i11];
            if (c >= bArr.length || bArr[c] == 0) {
                i = i11;
            } else if (!z2) {
                i2 += 3;
                if (i2 > cArr2.length) {
                    expandCapacity(i2);
                }
                this.count = i2;
                char[] cArr3 = this.buf;
                int i12 = i11 + 1;
                System.arraycopy(cArr3, i12, cArr3, i11 + 3, (i10 - i11) - 1);
                char[] cArr4 = this.buf;
                System.arraycopy(cArr4, i3, cArr4, 1, i11);
                char[] cArr5 = this.buf;
                cArr5[i9] = '\'';
                cArr5[i12] = '\\';
                int i13 = i12 + 1;
                cArr5[i13] = IOUtils.replaceChars[c];
                i10 += 2;
                this.buf[this.count - 2] = '\'';
                i = i13;
                z2 = true;
            } else {
                i2++;
                if (i2 > cArr2.length) {
                    expandCapacity(i2);
                }
                this.count = i2;
                char[] cArr6 = this.buf;
                i = i11 + 1;
                System.arraycopy(cArr6, i, cArr6, i11 + 2, i10 - i11);
                char[] cArr7 = this.buf;
                cArr7[i11] = '\\';
                cArr7[i] = IOUtils.replaceChars[c];
                i10++;
            }
            i11 = i + 1;
            i3 = 0;
        }
        this.buf[i2 - 1] = ':';
    }

    @Override // java.io.Writer, java.io.Flushable
    public void flush() {
        Writer writer = this.writer;
        if (writer != null) {
            try {
                writer.write(this.buf, 0, this.count);
                this.writer.flush();
                this.count = 0;
            } catch (IOException e) {
                throw new JSONException(e.getMessage(), e);
            }
        }
    }
}
