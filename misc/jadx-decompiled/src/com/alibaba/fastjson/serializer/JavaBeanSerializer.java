package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class JavaBeanSerializer implements ObjectSerializer {
    private int features;
    private transient Map<String, FieldSerializer> getterMap;
    private final FieldSerializer[] getters;
    private final FieldSerializer[] sortedGetters;

    public FieldSerializer[] getGetters() {
        return this.getters;
    }

    public JavaBeanSerializer(Class<?> cls) {
        this(cls, (Map<String, String>) null);
    }

    public JavaBeanSerializer(Class<?> cls, String... strArr) {
        this(cls, createAliasMap(strArr));
    }

    static Map<String, String> createAliasMap(String... strArr) {
        HashMap hashMap = new HashMap();
        for (String str : strArr) {
            hashMap.put(str, str);
        }
        return hashMap;
    }

    public JavaBeanSerializer(Class<?> cls, Map<String, String> map) {
        this.features = 0;
        this.features = TypeUtils.getSerializeFeatures(cls);
        ArrayList arrayList = new ArrayList();
        for (FieldInfo fieldInfo : TypeUtils.computeGetters(cls, map, false)) {
            arrayList.add(createFieldSerializer(fieldInfo));
        }
        this.getters = (FieldSerializer[]) arrayList.toArray(new FieldSerializer[arrayList.size()]);
        ArrayList arrayList2 = new ArrayList();
        for (FieldInfo fieldInfo2 : TypeUtils.computeGetters(cls, map, true)) {
            arrayList2.add(createFieldSerializer(fieldInfo2));
        }
        this.sortedGetters = (FieldSerializer[]) arrayList2.toArray(new FieldSerializer[arrayList2.size()]);
    }

    protected boolean isWriteClassName(JSONSerializer jSONSerializer, Object obj, Type type, Object obj2) {
        return jSONSerializer.isWriteClassName(type, obj);
    }

    @Override // com.alibaba.fastjson.serializer.ObjectSerializer
    public void write(JSONSerializer jSONSerializer, Object obj, Object obj2, Type type, int i) throws IOException {
        FieldSerializer[] fieldSerializerArr;
        Object obj3;
        boolean z;
        Class<?> fieldClass;
        SerializeWriter writer = jSONSerializer.getWriter();
        if (obj == null) {
            writer.writeNull();
        } else if (!writeReference(jSONSerializer, obj, i)) {
            if (writer.isEnabled(SerializerFeature.SortField)) {
                fieldSerializerArr = this.sortedGetters;
            } else {
                fieldSerializerArr = this.getters;
            }
            SerialContext context = jSONSerializer.getContext();
            jSONSerializer.setContext(context, obj, obj2, this.features, i);
            boolean isWriteAsArray = isWriteAsArray(jSONSerializer);
            char c = isWriteAsArray ? '[' : '{';
            char c2 = isWriteAsArray ? ']' : '}';
            try {
                try {
                    writer.append(c);
                    if (fieldSerializerArr.length <= 0 || !writer.isEnabled(SerializerFeature.PrettyFormat)) {
                        obj3 = obj2;
                    } else {
                        jSONSerializer.incrementIndent();
                        jSONSerializer.println();
                        obj3 = obj2;
                    }
                    if (!isWriteClassName(jSONSerializer, obj, type, obj3) || obj.getClass() == type) {
                        z = false;
                    } else {
                        writer.writeFieldName(JSON.DEFAULT_TYPE_KEY);
                        jSONSerializer.write(obj.getClass());
                        z = true;
                    }
                    boolean z2 = FilterUtils.writeBefore(jSONSerializer, obj, z ? ',' : 0) == ',';
                    for (FieldSerializer fieldSerializer : fieldSerializerArr) {
                        Field field = fieldSerializer.getField();
                        if ((!jSONSerializer.isEnabled(SerializerFeature.SkipTransientField) || field == null || !Modifier.isTransient(field.getModifiers())) && ((!jSONSerializer.isEnabled(SerializerFeature.IgnoreNonFieldGetter) || field != null) && FilterUtils.applyName(jSONSerializer, obj, fieldSerializer.getName()) && FilterUtils.applyLabel(jSONSerializer, fieldSerializer.getLabel()))) {
                            Object propertyValue = fieldSerializer.getPropertyValue(obj);
                            if (FilterUtils.apply(jSONSerializer, obj, fieldSerializer.getName(), propertyValue)) {
                                String processKey = FilterUtils.processKey(jSONSerializer, obj, fieldSerializer.getName(), propertyValue);
                                Object processValue = FilterUtils.processValue(jSONSerializer, obj, fieldSerializer.getName(), propertyValue);
                                if ((processValue != null || isWriteAsArray || fieldSerializer.isWriteNull() || jSONSerializer.isEnabled(SerializerFeature.WriteMapNullValue)) && (processValue == null || !jSONSerializer.isEnabled(SerializerFeature.NotWriteDefaultValue) || (!((fieldClass = fieldSerializer.fieldInfo.getFieldClass()) == Byte.TYPE && (processValue instanceof Byte) && ((Byte) processValue).byteValue() == 0) && (!(fieldClass == Short.TYPE && (processValue instanceof Short) && ((Short) processValue).shortValue() == 0) && (!(fieldClass == Integer.TYPE && (processValue instanceof Integer) && ((Integer) processValue).intValue() == 0) && (!(fieldClass == Long.TYPE && (processValue instanceof Long) && ((Long) processValue).longValue() == 0) && (!(fieldClass == Float.TYPE && (processValue instanceof Float) && ((Float) processValue).floatValue() == 0.0f) && (!(fieldClass == Double.TYPE && (processValue instanceof Double) && ((Double) processValue).doubleValue() == 0.0d) && (fieldClass != Boolean.TYPE || !(processValue instanceof Boolean) || ((Boolean) processValue).booleanValue()))))))))) {
                                    if (z2) {
                                        writer.append(',');
                                        if (writer.isEnabled(SerializerFeature.PrettyFormat)) {
                                            jSONSerializer.println();
                                        }
                                    }
                                    if (processKey != fieldSerializer.getName()) {
                                        if (!isWriteAsArray) {
                                            writer.writeFieldName(processKey);
                                        }
                                        jSONSerializer.write(processValue);
                                    } else if (propertyValue != processValue) {
                                        if (!isWriteAsArray) {
                                            fieldSerializer.writePrefix(jSONSerializer);
                                        }
                                        jSONSerializer.write(processValue);
                                    } else if (!isWriteAsArray) {
                                        fieldSerializer.writeProperty(jSONSerializer, processValue);
                                    } else {
                                        fieldSerializer.writeValue(jSONSerializer, processValue);
                                    }
                                    z2 = true;
                                }
                            }
                        }
                    }
                    char c3 = ',';
                    if (!z2) {
                        c3 = 0;
                    }
                    FilterUtils.writeAfter(jSONSerializer, obj, c3);
                    if (fieldSerializerArr.length > 0 && writer.isEnabled(SerializerFeature.PrettyFormat)) {
                        jSONSerializer.decrementIdent();
                        jSONSerializer.println();
                    }
                    writer.append(c2);
                } catch (Exception e) {
                    throw new JSONException("write javaBean error", e);
                }
            } finally {
                jSONSerializer.setContext(context);
            }
        }
    }

    public boolean writeReference(JSONSerializer jSONSerializer, Object obj, int i) {
        SerialContext context = jSONSerializer.getContext();
        if ((context != null && SerializerFeature.isEnabled(context.getFeatures(), i, SerializerFeature.DisableCircularReferenceDetect)) || !jSONSerializer.containsReference(obj)) {
            return false;
        }
        jSONSerializer.writeReference(obj);
        return true;
    }

    public FieldSerializer createFieldSerializer(FieldInfo fieldInfo) {
        if (fieldInfo.getFieldClass() == Number.class) {
            return new NumberFieldSerializer(fieldInfo);
        }
        return new ObjectFieldSerializer(fieldInfo);
    }

    public boolean isWriteAsArray(JSONSerializer jSONSerializer) {
        if (SerializerFeature.isEnabled(this.features, SerializerFeature.BeanToArray)) {
            return true;
        }
        return jSONSerializer.isEnabled(SerializerFeature.BeanToArray);
    }

    public Map<String, FieldSerializer> getGetterMap() {
        if (this.getterMap == null) {
            HashMap hashMap = new HashMap(this.getters.length);
            FieldSerializer[] fieldSerializerArr = this.sortedGetters;
            for (FieldSerializer fieldSerializer : fieldSerializerArr) {
                hashMap.put(fieldSerializer.getName(), fieldSerializer);
            }
            this.getterMap = hashMap;
        }
        return this.getterMap;
    }

    public Object getFieldValue(Object obj, String str) throws Exception {
        FieldSerializer fieldSerializer = getGetterMap().get(str);
        if (fieldSerializer == null) {
            return null;
        }
        return fieldSerializer.getPropertyValue(obj);
    }

    public List<Object> getFieldValues(Object obj) throws Exception {
        ArrayList arrayList = new ArrayList(this.sortedGetters.length);
        for (FieldSerializer fieldSerializer : this.sortedGetters) {
            arrayList.add(fieldSerializer.getPropertyValue(obj));
        }
        return arrayList;
    }
}
