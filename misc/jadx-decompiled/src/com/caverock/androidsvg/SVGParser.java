package com.caverock.androidsvg;

import android.graphics.Matrix;
import android.util.Log;
import android.util.Xml;
import com.caverock.androidsvg.CSSParser;
import com.caverock.androidsvg.PreserveAspectRatio;
import com.caverock.androidsvg.SVG;
import com.facebook.react.uimanager.ViewProps;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.huawei.hms.support.api.push.utils.common.base.PushConst;
import com.p051jd.lib.unification.album.entity.AlbumConstant;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.zip.GZIPInputStream;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
class SVGParser {

    /* renamed from: d */
    private int f487d;

    /* renamed from: a */
    private SVG f484a = null;

    /* renamed from: b */
    private SVG.AbstractC0141ag f485b = null;

    /* renamed from: c */
    private boolean f486c = false;

    /* renamed from: e */
    private boolean f488e = false;

    /* renamed from: f */
    private SVGElem f489f = null;

    /* renamed from: g */
    private StringBuilder f490g = null;

    /* renamed from: h */
    private boolean f491h = false;

    /* renamed from: i */
    private StringBuilder f492i = null;

    /* renamed from: a */
    private void m4597a(String str, Object... objArr) {
    }

    /* renamed from: b */
    private static float m4593b(float f, float f2, float f3) {
        if (f3 < 0.0f) {
            f3 += 6.0f;
        }
        if (f3 >= 6.0f) {
            f3 -= 6.0f;
        }
        return f3 < 1.0f ? ((f2 - f) * f3) + f : f3 < 3.0f ? f2 : f3 < 4.0f ? ((f2 - f) * (4.0f - f3)) + f : f;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: b */
    public void m4594b() {
    }

    SVGParser() {
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    private enum SVGElem {
        svg,
        a,
        circle,
        clipPath,
        defs,
        desc,
        ellipse,
        g,
        image,
        line,
        linearGradient,
        marker,
        mask,
        path,
        pattern,
        polygon,
        polyline,
        radialGradient,
        rect,
        solidColor,
        stop,
        style,
        SWITCH,
        symbol,
        text,
        textPath,
        title,
        tref,
        tspan,
        use,
        view,
        UNSUPPORTED;
        
        private static final Map<String, SVGElem> cache = new HashMap();

        static {
            SVGElem[] values = values();
            for (SVGElem sVGElem : values) {
                if (sVGElem == SWITCH) {
                    cache.put("switch", sVGElem);
                } else if (sVGElem != UNSUPPORTED) {
                    cache.put(sVGElem.name(), sVGElem);
                }
            }
        }

        public static SVGElem fromString(String str) {
            SVGElem sVGElem = cache.get(str);
            if (sVGElem != null) {
                return sVGElem;
            }
            return UNSUPPORTED;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    private enum SVGAttr {
        CLASS,
        clip,
        clip_path,
        clipPathUnits,
        clip_rule,
        color,
        cx,
        cy,
        direction,
        dx,
        dy,
        fx,
        fy,
        d,
        display,
        fill,
        fill_rule,
        fill_opacity,
        font,
        font_family,
        font_size,
        font_weight,
        font_style,
        gradientTransform,
        gradientUnits,
        height,
        href,
        image_rendering,
        marker,
        marker_start,
        marker_mid,
        marker_end,
        markerHeight,
        markerUnits,
        markerWidth,
        mask,
        maskContentUnits,
        maskUnits,
        media,
        offset,
        opacity,
        orient,
        overflow,
        pathLength,
        patternContentUnits,
        patternTransform,
        patternUnits,
        points,
        preserveAspectRatio,
        r,
        refX,
        refY,
        requiredFeatures,
        requiredExtensions,
        requiredFormats,
        requiredFonts,
        rx,
        ry,
        solid_color,
        solid_opacity,
        spreadMethod,
        startOffset,
        stop_color,
        stop_opacity,
        stroke,
        stroke_dasharray,
        stroke_dashoffset,
        stroke_linecap,
        stroke_linejoin,
        stroke_miterlimit,
        stroke_opacity,
        stroke_width,
        style,
        systemLanguage,
        text_anchor,
        text_decoration,
        transform,
        type,
        vector_effect,
        version,
        viewBox,
        width,
        x,
        y,
        x1,
        y1,
        x2,
        y2,
        viewport_fill,
        viewport_fill_opacity,
        visibility,
        UNSUPPORTED;
        
        private static final Map<String, SVGAttr> cache = new HashMap();

        static {
            SVGAttr[] values = values();
            for (SVGAttr sVGAttr : values) {
                if (sVGAttr == CLASS) {
                    cache.put("class", sVGAttr);
                } else if (sVGAttr != UNSUPPORTED) {
                    cache.put(sVGAttr.name().replace('_', '-'), sVGAttr);
                }
            }
        }

        public static SVGAttr fromString(String str) {
            SVGAttr sVGAttr = cache.get(str);
            if (sVGAttr != null) {
                return sVGAttr;
            }
            return UNSUPPORTED;
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$b */
    /* loaded from: classes.dex */
    private static class C0193b {

        /* renamed from: a */
        private static final Map<String, Integer> f514a = new HashMap(47);

        static {
            f514a.put("aliceblue", -984833);
            f514a.put("antiquewhite", -332841);
            f514a.put("aqua", -16711681);
            f514a.put("aquamarine", -8388652);
            f514a.put("azure", -983041);
            f514a.put("beige", -657956);
            f514a.put("bisque", -6972);
            f514a.put("black", -16777216);
            f514a.put("blanchedalmond", -5171);
            f514a.put("blue", -16776961);
            f514a.put("blueviolet", -7722014);
            f514a.put("brown", -5952982);
            f514a.put("burlywood", -2180985);
            f514a.put("cadetblue", -10510688);
            f514a.put("chartreuse", -8388864);
            f514a.put("chocolate", -2987746);
            f514a.put("coral", -32944);
            f514a.put("cornflowerblue", -10185235);
            f514a.put("cornsilk", -1828);
            f514a.put("crimson", -2354116);
            f514a.put("cyan", -16711681);
            f514a.put("darkblue", -16777077);
            f514a.put("darkcyan", -16741493);
            f514a.put("darkgoldenrod", -4684277);
            f514a.put("darkgray", -5658199);
            f514a.put("darkgreen", -16751616);
            f514a.put("darkgrey", -5658199);
            f514a.put("darkkhaki", -4343957);
            f514a.put("darkmagenta", -7667573);
            f514a.put("darkolivegreen", -11179217);
            f514a.put("darkorange", -29696);
            f514a.put("darkorchid", -6737204);
            f514a.put("darkred", -7667712);
            f514a.put("darksalmon", -1468806);
            f514a.put("darkseagreen", -7357297);
            f514a.put("darkslateblue", -12042869);
            f514a.put("darkslategray", -13676721);
            f514a.put("darkslategrey", -13676721);
            f514a.put("darkturquoise", -16724271);
            f514a.put("darkviolet", -7077677);
            f514a.put("deeppink", -60269);
            f514a.put("deepskyblue", -16728065);
            f514a.put("dimgray", -9868951);
            f514a.put("dimgrey", -9868951);
            f514a.put("dodgerblue", -14774017);
            f514a.put("firebrick", -5103070);
            f514a.put("floralwhite", -1296);
            f514a.put("forestgreen", -14513374);
            f514a.put("fuchsia", -65281);
            f514a.put("gainsboro", -2302756);
            f514a.put("ghostwhite", -460545);
            f514a.put("gold", -10496);
            f514a.put("goldenrod", -2448096);
            f514a.put("gray", -8355712);
            f514a.put("green", -16744448);
            f514a.put("greenyellow", -5374161);
            f514a.put("grey", -8355712);
            f514a.put("honeydew", -983056);
            f514a.put("hotpink", -38476);
            f514a.put("indianred", -3318692);
            f514a.put("indigo", -11861886);
            f514a.put("ivory", -16);
            f514a.put("khaki", -989556);
            f514a.put("lavender", -1644806);
            f514a.put("lavenderblush", -3851);
            f514a.put("lawngreen", -8586240);
            f514a.put("lemonchiffon", -1331);
            f514a.put("lightblue", -5383962);
            f514a.put("lightcoral", -1015680);
            f514a.put("lightcyan", -2031617);
            f514a.put("lightgoldenrodyellow", -329006);
            f514a.put("lightgray", -2894893);
            f514a.put("lightgreen", -7278960);
            f514a.put("lightgrey", -2894893);
            f514a.put("lightpink", -18751);
            f514a.put("lightsalmon", -24454);
            f514a.put("lightseagreen", -14634326);
            f514a.put("lightskyblue", -7876870);
            f514a.put("lightslategray", -8943463);
            f514a.put("lightslategrey", -8943463);
            f514a.put("lightsteelblue", -5192482);
            f514a.put("lightyellow", -32);
            f514a.put("lime", -16711936);
            f514a.put("limegreen", -13447886);
            f514a.put("linen", -331546);
            f514a.put("magenta", -65281);
            f514a.put("maroon", -8388608);
            f514a.put("mediumaquamarine", -10039894);
            f514a.put("mediumblue", -16777011);
            f514a.put("mediumorchid", -4565549);
            f514a.put("mediumpurple", -7114533);
            f514a.put("mediumseagreen", -12799119);
            f514a.put("mediumslateblue", -8689426);
            f514a.put("mediumspringgreen", -16713062);
            f514a.put("mediumturquoise", -12004916);
            f514a.put("mediumvioletred", -3730043);
            f514a.put("midnightblue", -15132304);
            f514a.put("mintcream", -655366);
            f514a.put("mistyrose", -6943);
            f514a.put("moccasin", -6987);
            f514a.put("navajowhite", -8531);
            f514a.put("navy", -16777088);
            f514a.put("oldlace", -133658);
            f514a.put("olive", -8355840);
            f514a.put("olivedrab", -9728477);
            f514a.put("orange", -23296);
            f514a.put("orangered", -47872);
            f514a.put("orchid", -2461482);
            f514a.put("palegoldenrod", -1120086);
            f514a.put("palegreen", -6751336);
            f514a.put("paleturquoise", -5247250);
            f514a.put("palevioletred", -2396013);
            f514a.put("papayawhip", -4139);
            f514a.put("peachpuff", -9543);
            f514a.put("peru", -3308225);
            f514a.put("pink", -16181);
            f514a.put("plum", -2252579);
            f514a.put("powderblue", -5185306);
            f514a.put("purple", -8388480);
            f514a.put("rebeccapurple", -10079335);
            f514a.put("red", -65536);
            f514a.put("rosybrown", -4419697);
            f514a.put("royalblue", -12490271);
            f514a.put("saddlebrown", -7650029);
            f514a.put("salmon", -360334);
            f514a.put("sandybrown", -744352);
            f514a.put("seagreen", -13726889);
            f514a.put("seashell", -2578);
            f514a.put("sienna", -6270419);
            f514a.put("silver", -4144960);
            f514a.put("skyblue", -7876885);
            f514a.put("slateblue", -9807155);
            f514a.put("slategray", -9404272);
            f514a.put("slategrey", -9404272);
            f514a.put("snow", -1286);
            f514a.put("springgreen", -16711809);
            f514a.put("steelblue", -12156236);
            f514a.put("tan", -2968436);
            f514a.put("teal", -16744320);
            f514a.put("thistle", -2572328);
            f514a.put("tomato", -40121);
            f514a.put("turquoise", -12525360);
            f514a.put("violet", -1146130);
            f514a.put("wheat", -663885);
            f514a.put("white", -1);
            f514a.put("whitesmoke", -657931);
            f514a.put("yellow", -256);
            f514a.put("yellowgreen", -6632142);
            f514a.put("transparent", 0);
        }

        /* renamed from: a */
        static Integer m4537a(String str) {
            return f514a.get(str);
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$c */
    /* loaded from: classes.dex */
    private static class C0194c {

        /* renamed from: a */
        private static final Map<String, SVG.C0175n> f515a = new HashMap(9);

        static {
            f515a.put("xx-small", new SVG.C0175n(0.694f, SVG.Unit.pt));
            f515a.put("x-small", new SVG.C0175n(0.833f, SVG.Unit.pt));
            f515a.put("small", new SVG.C0175n(10.0f, SVG.Unit.pt));
            f515a.put("medium", new SVG.C0175n(12.0f, SVG.Unit.pt));
            f515a.put("large", new SVG.C0175n(14.4f, SVG.Unit.pt));
            f515a.put("x-large", new SVG.C0175n(17.3f, SVG.Unit.pt));
            f515a.put("xx-large", new SVG.C0175n(20.7f, SVG.Unit.pt));
            f515a.put("smaller", new SVG.C0175n(83.33f, SVG.Unit.percent));
            f515a.put("larger", new SVG.C0175n(120.0f, SVG.Unit.percent));
        }

        /* renamed from: a */
        static SVG.C0175n m4536a(String str) {
            return f515a.get(str);
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$d */
    /* loaded from: classes.dex */
    private static class C0195d {

        /* renamed from: a */
        private static final Map<String, Integer> f516a = new HashMap(13);

        static {
            f516a.put("normal", 400);
            f516a.put("bold", 700);
            f516a.put("bolder", 1);
            f516a.put("lighter", -1);
            f516a.put(PushSelfShowConstant.EVENT_ID_SHOW_NOTIFICATION, 100);
            f516a.put("200", 200);
            f516a.put("300", 300);
            f516a.put("400", 400);
            f516a.put("500", 500);
            f516a.put("600", Integer.valueOf((int) AlbumConstant.RECORD_AUDIO_PERMI2));
            f516a.put("700", 700);
            f516a.put("800", 800);
            f516a.put("900", 900);
        }

        /* renamed from: a */
        static Integer m4535a(String str) {
            return f516a.get(str);
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$a */
    /* loaded from: classes.dex */
    private static class C0192a {

        /* renamed from: a */
        private static final Map<String, PreserveAspectRatio.Alignment> f513a = new HashMap(10);

        static {
            f513a.put(ViewProps.NONE, PreserveAspectRatio.Alignment.none);
            f513a.put("xMinYMin", PreserveAspectRatio.Alignment.xMinYMin);
            f513a.put("xMidYMin", PreserveAspectRatio.Alignment.xMidYMin);
            f513a.put("xMaxYMin", PreserveAspectRatio.Alignment.xMaxYMin);
            f513a.put("xMinYMid", PreserveAspectRatio.Alignment.xMinYMid);
            f513a.put("xMidYMid", PreserveAspectRatio.Alignment.xMidYMid);
            f513a.put("xMaxYMid", PreserveAspectRatio.Alignment.xMaxYMid);
            f513a.put("xMinYMax", PreserveAspectRatio.Alignment.xMinYMax);
            f513a.put("xMidYMax", PreserveAspectRatio.Alignment.xMidYMax);
            f513a.put("xMaxYMax", PreserveAspectRatio.Alignment.xMaxYMax);
        }

        /* renamed from: a */
        static PreserveAspectRatio.Alignment m4538a(String str) {
            return f513a.get(str);
        }
    }

    /* renamed from: a */
    SVG m4604a(InputStream inputStream, boolean z) throws SVGParseException {
        if (!inputStream.markSupported()) {
            inputStream = new BufferedInputStream(inputStream);
        }
        try {
            inputStream.mark(3);
            int read = inputStream.read() + (inputStream.read() << 8);
            inputStream.reset();
            if (read == 35615) {
                inputStream = new BufferedInputStream(new GZIPInputStream(inputStream));
            }
        } catch (IOException unused) {
        }
        try {
            inputStream.mark(4096);
            m4589b(inputStream, z);
            return this.f484a;
        } finally {
            try {
                inputStream.close();
            } catch (IOException unused2) {
                Log.e("SVGParser", "Exception thrown closing input stream");
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$g */
    /* loaded from: classes.dex */
    private class C0198g implements Attributes {

        /* renamed from: b */
        private XmlPullParser f523b;

        @Override // org.xml.sax.Attributes
        public int getIndex(String str) {
            return -1;
        }

        @Override // org.xml.sax.Attributes
        public int getIndex(String str, String str2) {
            return -1;
        }

        @Override // org.xml.sax.Attributes
        public String getType(int i) {
            return null;
        }

        @Override // org.xml.sax.Attributes
        public String getType(String str) {
            return null;
        }

        @Override // org.xml.sax.Attributes
        public String getType(String str, String str2) {
            return null;
        }

        @Override // org.xml.sax.Attributes
        public String getValue(String str) {
            return null;
        }

        @Override // org.xml.sax.Attributes
        public String getValue(String str, String str2) {
            return null;
        }

        public C0198g(XmlPullParser xmlPullParser) {
            this.f523b = xmlPullParser;
        }

        @Override // org.xml.sax.Attributes
        public int getLength() {
            return this.f523b.getAttributeCount();
        }

        @Override // org.xml.sax.Attributes
        public String getURI(int i) {
            return this.f523b.getAttributeNamespace(i);
        }

        @Override // org.xml.sax.Attributes
        public String getLocalName(int i) {
            return this.f523b.getAttributeName(i);
        }

        @Override // org.xml.sax.Attributes
        public String getQName(int i) {
            String attributeName = this.f523b.getAttributeName(i);
            if (this.f523b.getAttributePrefix(i) == null) {
                return attributeName;
            }
            return this.f523b.getAttributePrefix(i) + ':' + attributeName;
        }

        @Override // org.xml.sax.Attributes
        public String getValue(int i) {
            return this.f523b.getAttributeValue(i);
        }
    }

    /* renamed from: b */
    private void m4589b(InputStream inputStream, boolean z) throws SVGParseException {
        try {
            try {
                XmlPullParser newPullParser = Xml.newPullParser();
                C0198g gVar = new C0198g(newPullParser);
                newPullParser.setFeature("http://xmlpull.org/v1/doc/features.html#process-docdecl", false);
                newPullParser.setFeature("http://xmlpull.org/v1/doc/features.html#process-namespaces", true);
                newPullParser.setInput(inputStream, null);
                for (int eventType = newPullParser.getEventType(); eventType != 1; eventType = newPullParser.nextToken()) {
                    if (eventType == 0) {
                        m4643a();
                    } else if (eventType == 8) {
                        Log.d("SVGParser", "PROC INSTR: " + newPullParser.getText());
                        C0197f fVar = new C0197f(newPullParser.getText());
                        m4598a(fVar.m4515o(), m4612a(fVar));
                    } else if (eventType != 10) {
                        switch (eventType) {
                            case 2:
                                String name = newPullParser.getName();
                                if (newPullParser.getPrefix() != null) {
                                    name = newPullParser.getPrefix() + ':' + name;
                                }
                                m4599a(newPullParser.getNamespace(), newPullParser.getName(), name, gVar);
                                continue;
                            case 3:
                                String name2 = newPullParser.getName();
                                if (newPullParser.getPrefix() != null) {
                                    name2 = newPullParser.getPrefix() + ':' + name2;
                                }
                                m4600a(newPullParser.getNamespace(), newPullParser.getName(), name2);
                                continue;
                            case 4:
                                int[] iArr = new int[2];
                                m4595a(newPullParser.getTextCharacters(iArr), iArr[0], iArr[1]);
                                continue;
                            case 5:
                                m4586c(newPullParser.getText());
                                continue;
                            default:
                                continue;
                        }
                    } else if (z && this.f484a.m4721a() == null && newPullParser.getText().contains("<!ENTITY ")) {
                        try {
                            Log.d("SVGParser", "Switching to SAX parser to process entities");
                            inputStream.reset();
                            m4605a(inputStream);
                            return;
                        } catch (IOException unused) {
                            Log.w("SVGParser", "Detected internal entity definitions, but could not parse them.");
                            return;
                        }
                    }
                }
                m4594b();
            } catch (IOException e) {
                throw new SVGParseException("Stream error", e);
            }
        } catch (XmlPullParserException e2) {
            throw new SVGParseException("XML parser problem", e2);
        }
    }

    /* renamed from: a */
    private void m4605a(InputStream inputStream) throws SVGParseException {
        Log.d("SVGParser", "Falling back to SAX parser");
        try {
            SAXParserFactory newInstance = SAXParserFactory.newInstance();
            newInstance.setFeature("http://xml.org/sax/features/external-general-entities", false);
            newInstance.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            XMLReader xMLReader = newInstance.newSAXParser().getXMLReader();
            C0196e eVar = new C0196e();
            xMLReader.setContentHandler(eVar);
            xMLReader.setProperty("http://xml.org/sax/properties/lexical-handler", eVar);
            xMLReader.parse(new InputSource(inputStream));
        } catch (IOException e) {
            throw new SVGParseException("Stream error", e);
        } catch (ParserConfigurationException e2) {
            throw new SVGParseException("XML parser problem", e2);
        } catch (SAXException e3) {
            throw new SVGParseException("SVG parse error", e3);
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$e */
    /* loaded from: classes.dex */
    private class C0196e extends DefaultHandler2 {
        private C0196e() {
        }

        @Override // org.xml.sax.helpers.DefaultHandler, org.xml.sax.ContentHandler
        public void startDocument() throws SAXException {
            SVGParser.this.m4643a();
        }

        @Override // org.xml.sax.helpers.DefaultHandler, org.xml.sax.ContentHandler
        public void startElement(String str, String str2, String str3, Attributes attributes) throws SAXException {
            SVGParser.this.m4599a(str, str2, str3, attributes);
        }

        @Override // org.xml.sax.helpers.DefaultHandler, org.xml.sax.ContentHandler
        public void characters(char[] cArr, int i, int i2) throws SAXException {
            SVGParser.this.m4586c(new String(cArr, i, i2));
        }

        @Override // org.xml.sax.helpers.DefaultHandler, org.xml.sax.ContentHandler
        public void endElement(String str, String str2, String str3) throws SAXException {
            SVGParser.this.m4600a(str, str2, str3);
        }

        @Override // org.xml.sax.helpers.DefaultHandler, org.xml.sax.ContentHandler
        public void endDocument() throws SAXException {
            SVGParser.this.m4594b();
        }

        @Override // org.xml.sax.helpers.DefaultHandler, org.xml.sax.ContentHandler
        public void processingInstruction(String str, String str2) throws SAXException {
            SVGParser.this.m4598a(str, SVGParser.this.m4612a(new C0197f(str2)));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m4643a() {
        this.f484a = new SVG();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m4599a(String str, String str2, String str3, Attributes attributes) throws SVGParseException {
        if (this.f486c) {
            this.f487d++;
        } else if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            SVGElem fromString = SVGElem.fromString(str2);
            switch (fromString) {
                case svg:
                    m4596a(attributes);
                    return;
                case g:
                case a:
                    m4587b(attributes);
                    return;
                case defs:
                    m4585c(attributes);
                    return;
                case use:
                    m4583d(attributes);
                    return;
                case path:
                    m4579f(attributes);
                    return;
                case rect:
                    m4577g(attributes);
                    return;
                case circle:
                    m4575h(attributes);
                    return;
                case ellipse:
                    m4573i(attributes);
                    return;
                case line:
                    m4571j(attributes);
                    return;
                case polyline:
                    m4569k(attributes);
                    return;
                case polygon:
                    m4567l(attributes);
                    return;
                case text:
                    m4565m(attributes);
                    return;
                case tspan:
                    m4563n(attributes);
                    return;
                case tref:
                    m4561o(attributes);
                    return;
                case SWITCH:
                    m4559p(attributes);
                    return;
                case symbol:
                    m4557q(attributes);
                    return;
                case marker:
                    m4555r(attributes);
                    return;
                case linearGradient:
                    m4553s(attributes);
                    return;
                case radialGradient:
                    m4551t(attributes);
                    return;
                case stop:
                    m4549u(attributes);
                    return;
                case title:
                case desc:
                    this.f488e = true;
                    this.f489f = fromString;
                    return;
                case clipPath:
                    m4545w(attributes);
                    return;
                case textPath:
                    m4543x(attributes);
                    return;
                case pattern:
                    m4541y(attributes);
                    return;
                case image:
                    m4581e(attributes);
                    return;
                case view:
                    m4539z(attributes);
                    return;
                case mask:
                    m4652A(attributes);
                    return;
                case style:
                    m4650B(attributes);
                    return;
                case solidColor:
                    m4547v(attributes);
                    return;
                default:
                    this.f486c = true;
                    this.f487d = 1;
                    return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: c */
    public void m4586c(String str) throws SVGParseException {
        if (!this.f486c) {
            if (this.f488e) {
                if (this.f490g == null) {
                    this.f490g = new StringBuilder(str.length());
                }
                this.f490g.append(str);
            } else if (this.f491h) {
                if (this.f492i == null) {
                    this.f492i = new StringBuilder(str.length());
                }
                this.f492i.append(str);
            } else if (this.f485b instanceof SVG.AbstractC0156av) {
                m4584d(str);
            }
        }
    }

    /* renamed from: a */
    private void m4595a(char[] cArr, int i, int i2) throws SVGParseException {
        if (!this.f486c) {
            if (this.f488e) {
                if (this.f490g == null) {
                    this.f490g = new StringBuilder(i2);
                }
                this.f490g.append(cArr, i, i2);
            } else if (this.f491h) {
                if (this.f492i == null) {
                    this.f492i = new StringBuilder(i2);
                }
                this.f492i.append(cArr, i, i2);
            } else if (this.f485b instanceof SVG.AbstractC0156av) {
                m4584d(new String(cArr, i, i2));
            }
        }
    }

    /* renamed from: d */
    private void m4584d(String str) throws SVGParseException {
        SVG.C0145ak akVar;
        SVG.AbstractC0139ae aeVar = (SVG.AbstractC0139ae) this.f485b;
        int size = aeVar.f359i.size();
        if (size == 0) {
            akVar = null;
        } else {
            akVar = aeVar.f359i.get(size - 1);
        }
        if (akVar instanceof SVG.C0160az) {
            StringBuilder sb = new StringBuilder();
            SVG.C0160az azVar = (SVG.C0160az) akVar;
            sb.append(azVar.f400a);
            sb.append(str);
            azVar.f400a = sb.toString();
            return;
        }
        this.f485b.mo4680a(new SVG.C0160az(str));
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m4600a(String str, String str2, String str3) throws SVGParseException {
        if (this.f486c) {
            int i = this.f487d - 1;
            this.f487d = i;
            if (i == 0) {
                this.f486c = false;
                return;
            }
        }
        if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            switch (SVGElem.fromString(str2)) {
                case svg:
                case g:
                case defs:
                case use:
                case text:
                case tspan:
                case SWITCH:
                case symbol:
                case marker:
                case linearGradient:
                case radialGradient:
                case stop:
                case clipPath:
                case textPath:
                case pattern:
                case image:
                case view:
                case mask:
                case solidColor:
                    this.f485b = ((SVG.C0145ak) this.f485b).f381v;
                    return;
                case a:
                case path:
                case rect:
                case circle:
                case ellipse:
                case line:
                case polyline:
                case polygon:
                case tref:
                default:
                    return;
                case title:
                case desc:
                    this.f488e = false;
                    if (this.f490g != null) {
                        if (this.f489f == SVGElem.title) {
                            this.f484a.m4707c(this.f490g.toString());
                        } else if (this.f489f == SVGElem.desc) {
                            this.f484a.m4705d(this.f490g.toString());
                        }
                        this.f490g.setLength(0);
                        return;
                    }
                    return;
                case style:
                    StringBuilder sb = this.f492i;
                    if (sb != null) {
                        this.f491h = false;
                        m4644H(sb.toString());
                        this.f492i.setLength(0);
                        return;
                    }
                    return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public void m4598a(String str, Map<String, String> map) {
        String str2;
        String b;
        if (str.equals("xml-stylesheet") && SVG.m4704e() != null) {
            if (map.get(PushConst.EXTRA_SELFSHOW_TYPE_KEY) != null && !"text/css".equals(map.get(PushConst.EXTRA_SELFSHOW_TYPE_KEY))) {
                return;
            }
            if ((map.get("alternate") == null || "no".equals(map.get("alternate"))) && (str2 = map.get("href")) != null && (b = SVG.m4704e().m4364b(str2)) != null) {
                String str3 = map.get("media");
                if (str3 != null && !"all".equals(str3.trim())) {
                    b = "@media " + str3 + " { " + b + "}";
                }
                m4644H(b);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: a */
    public Map<String, String> m4612a(C0197f fVar) {
        HashMap hashMap = new HashMap();
        fVar.m4523g();
        String b = fVar.m4527b('=');
        while (b != null) {
            fVar.m4534a('=');
            hashMap.put(b, fVar.m4509u());
            fVar.m4523g();
            b = fVar.m4527b('=');
        }
        return hashMap;
    }

    /* renamed from: a */
    private void m4596a(Attributes attributes) throws SVGParseException {
        m4597a("<svg>", new Object[0]);
        SVG.C0137ac acVar = new SVG.C0137ac();
        acVar.f380u = this.f484a;
        acVar.f381v = this.f485b;
        m4634a((SVG.AbstractC0143ai) acVar, attributes);
        m4592b(acVar, attributes);
        m4636a((SVG.AbstractC0138ad) acVar, attributes);
        m4630a((SVG.AbstractC0149ao) acVar, attributes);
        m4637a(acVar, attributes);
        SVG.AbstractC0141ag agVar = this.f485b;
        if (agVar == null) {
            this.f484a.m4715a(acVar);
        } else {
            agVar.mo4680a(acVar);
        }
        this.f485b = acVar;
    }

    /* renamed from: a */
    private void m4637a(SVG.C0137ac acVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case x:
                    acVar.f354a = m4603a(trim);
                    break;
                case y:
                    acVar.f355b = m4603a(trim);
                    break;
                case width:
                    acVar.f356c = m4603a(trim);
                    if (!acVar.f356c.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <svg> element. width cannot be negative");
                    }
                case height:
                    acVar.f357d = m4603a(trim);
                    if (!acVar.f357d.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <svg> element. height cannot be negative");
                    }
                case version:
                    acVar.f358e = trim;
                    break;
            }
        }
    }

    /* renamed from: b */
    private void m4587b(Attributes attributes) throws SVGParseException {
        m4597a("<g>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0172k kVar = new SVG.C0172k();
            kVar.f380u = this.f484a;
            kVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) kVar, attributes);
            m4592b(kVar, attributes);
            m4621a((SVG.AbstractC0173l) kVar, attributes);
            m4636a((SVG.AbstractC0138ad) kVar, attributes);
            this.f485b.mo4680a(kVar);
            this.f485b = kVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: c */
    private void m4585c(Attributes attributes) throws SVGParseException {
        m4597a("<defs>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0168g gVar = new SVG.C0168g();
            gVar.f380u = this.f484a;
            gVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) gVar, attributes);
            m4592b(gVar, attributes);
            m4621a((SVG.AbstractC0173l) gVar, attributes);
            this.f485b.mo4680a(gVar);
            this.f485b = gVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: d */
    private void m4583d(Attributes attributes) throws SVGParseException {
        m4597a("<use>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0162ba baVar = new SVG.C0162ba();
            baVar.f380u = this.f484a;
            baVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) baVar, attributes);
            m4592b(baVar, attributes);
            m4621a((SVG.AbstractC0173l) baVar, attributes);
            m4636a((SVG.AbstractC0138ad) baVar, attributes);
            m4626a(baVar, attributes);
            this.f485b.mo4680a(baVar);
            this.f485b = baVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* JADX WARN: Code restructure failed: missing block: B:32:0x007c, code lost:
        continue;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void m4626a(SVG.C0162ba baVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 != 6) {
                switch (i2) {
                    case 1:
                        baVar.f407c = m4603a(trim);
                        continue;
                    case 2:
                        baVar.f408d = m4603a(trim);
                        continue;
                    case 3:
                        baVar.f409e = m4603a(trim);
                        if (!baVar.f409e.m4671c()) {
                            continue;
                        } else {
                            throw new SVGParseException("Invalid <use> element. width cannot be negative");
                        }
                    case 4:
                        baVar.f410f = m4603a(trim);
                        if (!baVar.f410f.m4671c()) {
                            continue;
                        } else {
                            throw new SVGParseException("Invalid <use> element. height cannot be negative");
                        }
                }
            } else if ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                baVar.f406a = trim;
            }
        }
    }

    /* renamed from: e */
    private void m4581e(Attributes attributes) throws SVGParseException {
        m4597a("<image>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0174m mVar = new SVG.C0174m();
            mVar.f380u = this.f484a;
            mVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) mVar, attributes);
            m4592b(mVar, attributes);
            m4621a((SVG.AbstractC0173l) mVar, attributes);
            m4636a((SVG.AbstractC0138ad) mVar, attributes);
            m4620a(mVar, attributes);
            this.f485b.mo4680a(mVar);
            this.f485b = mVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4620a(SVG.C0174m mVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case x:
                    mVar.f431b = m4603a(trim);
                    break;
                case y:
                    mVar.f432c = m4603a(trim);
                    break;
                case width:
                    mVar.f433d = m4603a(trim);
                    if (!mVar.f433d.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <use> element. width cannot be negative");
                    }
                case height:
                    mVar.f434e = m4603a(trim);
                    if (!mVar.f434e.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <use> element. height cannot be negative");
                    }
                case href:
                    if (!"".equals(attributes.getURI(i)) && !"http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                        break;
                    } else {
                        mVar.f430a = trim;
                        break;
                    }
                    break;
                case preserveAspectRatio:
                    m4632a((SVG.AbstractC0147am) mVar, trim);
                    break;
            }
        }
    }

    /* renamed from: f */
    private void m4579f(Attributes attributes) throws SVGParseException {
        m4597a("<path>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0181t tVar = new SVG.C0181t();
            tVar.f380u = this.f484a;
            tVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) tVar, attributes);
            m4592b(tVar, attributes);
            m4621a((SVG.AbstractC0173l) tVar, attributes);
            m4636a((SVG.AbstractC0138ad) tVar, attributes);
            m4616a(tVar, attributes);
            this.f485b.mo4680a(tVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4616a(SVG.C0181t tVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case d:
                    tVar.f456a = m4648D(trim);
                    break;
                case pathLength:
                    tVar.f457b = Float.valueOf(m4576h(trim));
                    if (tVar.f457b.floatValue() >= 0.0f) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <path> element. pathLength cannot be negative");
                    }
            }
        }
    }

    /* renamed from: g */
    private void m4577g(Attributes attributes) throws SVGParseException {
        m4597a("<rect>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0187z zVar = new SVG.C0187z();
            zVar.f380u = this.f484a;
            zVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) zVar, attributes);
            m4592b(zVar, attributes);
            m4621a((SVG.AbstractC0173l) zVar, attributes);
            m4636a((SVG.AbstractC0138ad) zVar, attributes);
            m4613a(zVar, attributes);
            this.f485b.mo4680a(zVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* JADX WARN: Code restructure failed: missing block: B:35:0x008f, code lost:
        continue;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void m4613a(SVG.C0187z zVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            switch (i2) {
                case 1:
                    zVar.f471a = m4603a(trim);
                    break;
                case 2:
                    zVar.f472b = m4603a(trim);
                    break;
                case 3:
                    zVar.f473c = m4603a(trim);
                    if (!zVar.f473c.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <rect> element. width cannot be negative");
                    }
                case 4:
                    zVar.f474d = m4603a(trim);
                    if (!zVar.f474d.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <rect> element. height cannot be negative");
                    }
                default:
                    switch (i2) {
                        case 10:
                            zVar.f475f = m4603a(trim);
                            if (!zVar.f475f.m4671c()) {
                                continue;
                            } else {
                                throw new SVGParseException("Invalid <rect> element. rx cannot be negative");
                            }
                        case 11:
                            zVar.f476g = m4603a(trim);
                            if (!zVar.f476g.m4671c()) {
                                continue;
                            } else {
                                throw new SVGParseException("Invalid <rect> element. ry cannot be negative");
                            }
                    }
            }
        }
    }

    /* renamed from: h */
    private void m4575h(Attributes attributes) throws SVGParseException {
        m4597a("<circle>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0164c cVar = new SVG.C0164c();
            cVar.f380u = this.f484a;
            cVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) cVar, attributes);
            m4592b(cVar, attributes);
            m4621a((SVG.AbstractC0173l) cVar, attributes);
            m4636a((SVG.AbstractC0138ad) cVar, attributes);
            m4625a(cVar, attributes);
            this.f485b.mo4680a(cVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4625a(SVG.C0164c cVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case cx:
                    cVar.f411a = m4603a(trim);
                    break;
                case cy:
                    cVar.f412b = m4603a(trim);
                    break;
                case r:
                    cVar.f413c = m4603a(trim);
                    if (!cVar.f413c.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <circle> element. r cannot be negative");
                    }
            }
        }
    }

    /* renamed from: i */
    private void m4573i(Attributes attributes) throws SVGParseException {
        m4597a("<ellipse>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0169h hVar = new SVG.C0169h();
            hVar.f380u = this.f484a;
            hVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) hVar, attributes);
            m4592b(hVar, attributes);
            m4621a((SVG.AbstractC0173l) hVar, attributes);
            m4636a((SVG.AbstractC0138ad) hVar, attributes);
            m4623a(hVar, attributes);
            this.f485b.mo4680a(hVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4623a(SVG.C0169h hVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case rx:
                    hVar.f421c = m4603a(trim);
                    if (!hVar.f421c.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <ellipse> element. rx cannot be negative");
                    }
                case ry:
                    hVar.f422d = m4603a(trim);
                    if (!hVar.f422d.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <ellipse> element. ry cannot be negative");
                    }
                case cx:
                    hVar.f419a = m4603a(trim);
                    break;
                case cy:
                    hVar.f420b = m4603a(trim);
                    break;
            }
        }
    }

    /* renamed from: j */
    private void m4571j(Attributes attributes) throws SVGParseException {
        m4597a("<line>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0176o oVar = new SVG.C0176o();
            oVar.f380u = this.f484a;
            oVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) oVar, attributes);
            m4592b(oVar, attributes);
            m4621a((SVG.AbstractC0173l) oVar, attributes);
            m4636a((SVG.AbstractC0138ad) oVar, attributes);
            m4619a(oVar, attributes);
            this.f485b.mo4680a(oVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4619a(SVG.C0176o oVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case x1:
                    oVar.f438a = m4603a(trim);
                    break;
                case y1:
                    oVar.f439b = m4603a(trim);
                    break;
                case x2:
                    oVar.f440c = m4603a(trim);
                    break;
                case y2:
                    oVar.f441d = m4603a(trim);
                    break;
            }
        }
    }

    /* renamed from: k */
    private void m4569k(Attributes attributes) throws SVGParseException {
        m4597a("<polyline>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0185x xVar = new SVG.C0185x();
            xVar.f380u = this.f484a;
            xVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) xVar, attributes);
            m4592b(xVar, attributes);
            m4621a((SVG.AbstractC0173l) xVar, attributes);
            m4636a((SVG.AbstractC0138ad) xVar, attributes);
            m4614a(xVar, attributes, "polyline");
            this.f485b.mo4680a(xVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4614a(SVG.C0185x xVar, Attributes attributes, String str) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            if (SVGAttr.fromString(attributes.getLocalName(i)) == SVGAttr.points) {
                C0197f fVar = new C0197f(attributes.getValue(i));
                ArrayList<Float> arrayList = new ArrayList();
                fVar.m4523g();
                while (!fVar.m4524f()) {
                    float i2 = fVar.m4521i();
                    if (!Float.isNaN(i2)) {
                        fVar.m4522h();
                        float i3 = fVar.m4521i();
                        if (!Float.isNaN(i3)) {
                            fVar.m4522h();
                            arrayList.add(Float.valueOf(i2));
                            arrayList.add(Float.valueOf(i3));
                        } else {
                            throw new SVGParseException("Invalid <" + str + "> points attribute. There should be an even number of coordinates.");
                        }
                    } else {
                        throw new SVGParseException("Invalid <" + str + "> points attribute. Non-coordinate content found in list.");
                    }
                }
                xVar.f470a = new float[arrayList.size()];
                int i4 = 0;
                for (Float f : arrayList) {
                    i4++;
                    xVar.f470a[i4] = f.floatValue();
                }
            }
        }
    }

    /* renamed from: l */
    private void m4567l(Attributes attributes) throws SVGParseException {
        m4597a("<polygon>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0186y yVar = new SVG.C0186y();
            yVar.f380u = this.f484a;
            yVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) yVar, attributes);
            m4592b(yVar, attributes);
            m4621a((SVG.AbstractC0173l) yVar, attributes);
            m4636a((SVG.AbstractC0138ad) yVar, attributes);
            m4614a(yVar, attributes, "polygon");
            this.f485b.mo4680a(yVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: m */
    private void m4565m(Attributes attributes) throws SVGParseException {
        m4597a("<text>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0154at atVar = new SVG.C0154at();
            atVar.f380u = this.f484a;
            atVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) atVar, attributes);
            m4592b(atVar, attributes);
            m4621a((SVG.AbstractC0173l) atVar, attributes);
            m4636a((SVG.AbstractC0138ad) atVar, attributes);
            m4627a((SVG.AbstractC0158ax) atVar, attributes);
            this.f485b.mo4680a(atVar);
            this.f485b = atVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4627a(SVG.AbstractC0158ax axVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case x:
                    axVar.f396b = m4578g(trim);
                    break;
                case y:
                    axVar.f397c = m4578g(trim);
                    break;
                case dx:
                    axVar.f398d = m4578g(trim);
                    break;
                case dy:
                    axVar.f399e = m4578g(trim);
                    break;
            }
        }
    }

    /* renamed from: n */
    private void m4563n(Attributes attributes) throws SVGParseException {
        m4597a("<tspan>", new Object[0]);
        SVG.AbstractC0141ag agVar = this.f485b;
        if (agVar == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (agVar instanceof SVG.AbstractC0156av) {
            SVG.C0153as asVar = new SVG.C0153as();
            asVar.f380u = this.f484a;
            asVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) asVar, attributes);
            m4592b(asVar, attributes);
            m4636a((SVG.AbstractC0138ad) asVar, attributes);
            m4627a((SVG.AbstractC0158ax) asVar, attributes);
            this.f485b.mo4680a(asVar);
            this.f485b = asVar;
            if (asVar.f381v instanceof SVG.AbstractC0159ay) {
                asVar.m4684a((SVG.AbstractC0159ay) asVar.f381v);
            } else {
                asVar.m4684a(((SVG.AbstractC0155au) asVar.f381v).mo4682h());
            }
        } else {
            throw new SVGParseException("Invalid document. <tspan> elements are only valid inside <text> or other <tspan> elements.");
        }
    }

    /* renamed from: o */
    private void m4561o(Attributes attributes) throws SVGParseException {
        m4597a("<tref>", new Object[0]);
        SVG.AbstractC0141ag agVar = this.f485b;
        if (agVar == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (agVar instanceof SVG.AbstractC0156av) {
            SVG.C0152ar arVar = new SVG.C0152ar();
            arVar.f380u = this.f484a;
            arVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) arVar, attributes);
            m4592b(arVar, attributes);
            m4636a((SVG.AbstractC0138ad) arVar, attributes);
            m4629a(arVar, attributes);
            this.f485b.mo4680a(arVar);
            if (arVar.f381v instanceof SVG.AbstractC0159ay) {
                arVar.m4685a((SVG.AbstractC0159ay) arVar.f381v);
            } else {
                arVar.m4685a(((SVG.AbstractC0155au) arVar.f381v).mo4682h());
            }
        } else {
            throw new SVGParseException("Invalid document. <tref> elements are only valid inside <text> or <tspan> elements.");
        }
    }

    /* renamed from: a */
    private void m4629a(SVG.C0152ar arVar, Attributes attributes) {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()] == 6 && ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i)))) {
                arVar.f389a = trim;
            }
        }
    }

    /* renamed from: p */
    private void m4559p(Attributes attributes) throws SVGParseException {
        m4597a("<switch>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0150ap apVar = new SVG.C0150ap();
            apVar.f380u = this.f484a;
            apVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) apVar, attributes);
            m4592b(apVar, attributes);
            m4621a((SVG.AbstractC0173l) apVar, attributes);
            m4636a((SVG.AbstractC0138ad) apVar, attributes);
            this.f485b.mo4680a(apVar);
            this.f485b = apVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4636a(SVG.AbstractC0138ad adVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case requiredFeatures:
                    adVar.mo4694a(m4647E(trim));
                    break;
                case requiredExtensions:
                    adVar.mo4695a(trim);
                    break;
                case systemLanguage:
                    adVar.mo4693b(m4646F(trim));
                    break;
                case requiredFormats:
                    adVar.mo4691c(m4645G(trim));
                    break;
                case requiredFonts:
                    List<String> o = m4562o(trim);
                    adVar.mo4689d(o != null ? new HashSet(o) : new HashSet(0));
                    break;
            }
        }
    }

    /* renamed from: q */
    private void m4557q(Attributes attributes) throws SVGParseException {
        m4597a("<symbol>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0151aq aqVar = new SVG.C0151aq();
            aqVar.f380u = this.f484a;
            aqVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) aqVar, attributes);
            m4592b(aqVar, attributes);
            m4636a((SVG.AbstractC0138ad) aqVar, attributes);
            m4630a((SVG.AbstractC0149ao) aqVar, attributes);
            this.f485b.mo4680a(aqVar);
            this.f485b = aqVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: r */
    private void m4555r(Attributes attributes) throws SVGParseException {
        m4597a("<marker>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0177p pVar = new SVG.C0177p();
            pVar.f380u = this.f484a;
            pVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) pVar, attributes);
            m4592b(pVar, attributes);
            m4636a((SVG.AbstractC0138ad) pVar, attributes);
            m4630a((SVG.AbstractC0149ao) pVar, attributes);
            m4618a(pVar, attributes);
            this.f485b.mo4680a(pVar);
            this.f485b = pVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4618a(SVG.C0177p pVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case refX:
                    pVar.f443b = m4603a(trim);
                    break;
                case refY:
                    pVar.f444c = m4603a(trim);
                    break;
                case markerWidth:
                    pVar.f445d = m4603a(trim);
                    if (!pVar.f445d.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <marker> element. markerWidth cannot be negative");
                    }
                case markerHeight:
                    pVar.f446e = m4603a(trim);
                    if (!pVar.f446e.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <marker> element. markerHeight cannot be negative");
                    }
                case markerUnits:
                    if ("strokeWidth".equals(trim)) {
                        pVar.f442a = false;
                        break;
                    } else if ("userSpaceOnUse".equals(trim)) {
                        pVar.f442a = true;
                        break;
                    } else {
                        throw new SVGParseException("Invalid value for attribute markerUnits");
                    }
                case orient:
                    if ("auto".equals(trim)) {
                        pVar.f447f = Float.valueOf(Float.NaN);
                        break;
                    } else {
                        pVar.f447f = Float.valueOf(m4576h(trim));
                        break;
                    }
            }
        }
    }

    /* renamed from: s */
    private void m4553s(Attributes attributes) throws SVGParseException {
        m4597a("<linearGradient>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0144aj ajVar = new SVG.C0144aj();
            ajVar.f380u = this.f484a;
            ajVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) ajVar, attributes);
            m4592b(ajVar, attributes);
            m4622a((SVG.AbstractC0170i) ajVar, attributes);
            m4633a(ajVar, attributes);
            this.f485b.mo4680a(ajVar);
            this.f485b = ajVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* JADX WARN: Code restructure failed: missing block: B:36:0x0092, code lost:
        continue;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void m4622a(SVG.AbstractC0170i iVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 != 6) {
                switch (i2) {
                    case 32:
                        if ("objectBoundingBox".equals(trim)) {
                            iVar.f424b = false;
                            continue;
                        } else if ("userSpaceOnUse".equals(trim)) {
                            iVar.f424b = true;
                            break;
                        } else {
                            throw new SVGParseException("Invalid value for attribute gradientUnits");
                        }
                    case 33:
                        iVar.f425c = m4580f(trim);
                        continue;
                    case 34:
                        try {
                            iVar.f426d = SVG.GradientSpread.valueOf(trim);
                            continue;
                        } catch (IllegalArgumentException unused) {
                            throw new SVGParseException("Invalid spreadMethod attribute. \"" + trim + "\" is not a valid value.");
                        }
                }
            } else if ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                iVar.f427e = trim;
            }
        }
    }

    /* renamed from: a */
    private void m4633a(SVG.C0144aj ajVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                case x1:
                    ajVar.f376f = m4603a(trim);
                    break;
                case y1:
                    ajVar.f377g = m4603a(trim);
                    break;
                case x2:
                    ajVar.f378h = m4603a(trim);
                    break;
                case y2:
                    ajVar.f379i = m4603a(trim);
                    break;
            }
        }
    }

    /* renamed from: t */
    private void m4551t(Attributes attributes) throws SVGParseException {
        m4597a("<radialGradient>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0148an anVar = new SVG.C0148an();
            anVar.f380u = this.f484a;
            anVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) anVar, attributes);
            m4592b(anVar, attributes);
            m4622a((SVG.AbstractC0170i) anVar, attributes);
            m4631a(anVar, attributes);
            this.f485b.mo4680a(anVar);
            this.f485b = anVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4631a(SVG.C0148an anVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            switch (i2) {
                case 12:
                    anVar.f383f = m4603a(trim);
                    break;
                case 13:
                    anVar.f384g = m4603a(trim);
                    break;
                case 14:
                    anVar.f385h = m4603a(trim);
                    if (!anVar.f385h.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <radialGradient> element. r cannot be negative");
                    }
                default:
                    switch (i2) {
                        case 35:
                            anVar.f386i = m4603a(trim);
                            continue;
                        case 36:
                            anVar.f387j = m4603a(trim);
                            continue;
                    }
            }
        }
    }

    /* renamed from: u */
    private void m4549u(Attributes attributes) throws SVGParseException {
        m4597a("<stop>", new Object[0]);
        SVG.AbstractC0141ag agVar = this.f485b;
        if (agVar == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (agVar instanceof SVG.AbstractC0170i) {
            SVG.C0136ab abVar = new SVG.C0136ab();
            abVar.f380u = this.f484a;
            abVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) abVar, attributes);
            m4592b(abVar, attributes);
            m4638a(abVar, attributes);
            this.f485b.mo4680a(abVar);
            this.f485b = abVar;
        } else {
            throw new SVGParseException("Invalid document. <stop> elements are only valid inside <linearGradient> or <radialGradient> elements.");
        }
    }

    /* renamed from: a */
    private void m4638a(SVG.C0136ab abVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()] == 37) {
                abVar.f353a = m4582e(trim);
            }
        }
    }

    /* renamed from: e */
    private Float m4582e(String str) throws SVGParseException {
        if (str.length() != 0) {
            int length = str.length();
            boolean z = true;
            if (str.charAt(str.length() - 1) == '%') {
                length--;
            } else {
                z = false;
            }
            try {
                float a = m4602a(str, 0, length);
                if (z) {
                    a /= 100.0f;
                }
                if (a < 0.0f) {
                    a = 0.0f;
                } else if (a > 100.0f) {
                    a = 100.0f;
                }
                return Float.valueOf(a);
            } catch (NumberFormatException e) {
                throw new SVGParseException("Invalid offset value in <stop>: " + str, e);
            }
        } else {
            throw new SVGParseException("Invalid offset value in <stop> (empty string)");
        }
    }

    /* renamed from: v */
    private void m4547v(Attributes attributes) throws SVGParseException {
        m4597a("<solidColor>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0135aa aaVar = new SVG.C0135aa();
            aaVar.f380u = this.f484a;
            aaVar.f381v = this.f485b;
            m4634a(aaVar, attributes);
            m4592b(aaVar, attributes);
            this.f485b.mo4680a(aaVar);
            this.f485b = aaVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: w */
    private void m4545w(Attributes attributes) throws SVGParseException {
        m4597a("<clipPath>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0165d dVar = new SVG.C0165d();
            dVar.f380u = this.f484a;
            dVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) dVar, attributes);
            m4592b(dVar, attributes);
            m4621a((SVG.AbstractC0173l) dVar, attributes);
            m4636a((SVG.AbstractC0138ad) dVar, attributes);
            m4624a(dVar, attributes);
            this.f485b.mo4680a(dVar);
            this.f485b = dVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a */
    private void m4624a(SVG.C0165d dVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()] == 38) {
                if ("objectBoundingBox".equals(trim)) {
                    dVar.f414a = false;
                } else if ("userSpaceOnUse".equals(trim)) {
                    dVar.f414a = true;
                } else {
                    throw new SVGParseException("Invalid value for attribute clipPathUnits");
                }
            }
        }
    }

    /* renamed from: x */
    private void m4543x(Attributes attributes) throws SVGParseException {
        m4597a("<textPath>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0157aw awVar = new SVG.C0157aw();
            awVar.f380u = this.f484a;
            awVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) awVar, attributes);
            m4592b(awVar, attributes);
            m4636a((SVG.AbstractC0138ad) awVar, attributes);
            m4628a(awVar, attributes);
            this.f485b.mo4680a(awVar);
            this.f485b = awVar;
            if (awVar.f381v instanceof SVG.AbstractC0159ay) {
                awVar.m4683a((SVG.AbstractC0159ay) awVar.f381v);
            } else {
                awVar.m4683a(((SVG.AbstractC0155au) awVar.f381v).mo4682h());
            }
        } else {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        }
    }

    /* renamed from: a */
    private void m4628a(SVG.C0157aw awVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 != 6) {
                if (i2 == 39) {
                    awVar.f394b = m4603a(trim);
                }
            } else if ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                awVar.f393a = trim;
            }
        }
    }

    /* renamed from: y */
    private void m4541y(Attributes attributes) throws SVGParseException {
        m4597a("<pattern>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0184w wVar = new SVG.C0184w();
            wVar.f380u = this.f484a;
            wVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) wVar, attributes);
            m4592b(wVar, attributes);
            m4636a((SVG.AbstractC0138ad) wVar, attributes);
            m4630a((SVG.AbstractC0149ao) wVar, attributes);
            m4615a(wVar, attributes);
            this.f485b.mo4680a(wVar);
            this.f485b = wVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* JADX WARN: Code restructure failed: missing block: B:58:0x00d8, code lost:
        continue;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void m4615a(SVG.C0184w wVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 != 6) {
                switch (i2) {
                    case 1:
                        wVar.f465d = m4603a(trim);
                        continue;
                    case 2:
                        wVar.f466e = m4603a(trim);
                        continue;
                    case 3:
                        wVar.f467f = m4603a(trim);
                        if (!wVar.f467f.m4671c()) {
                            continue;
                        } else {
                            throw new SVGParseException("Invalid <pattern> element. width cannot be negative");
                        }
                    case 4:
                        wVar.f468g = m4603a(trim);
                        if (!wVar.f468g.m4671c()) {
                            continue;
                        } else {
                            throw new SVGParseException("Invalid <pattern> element. height cannot be negative");
                        }
                    default:
                        switch (i2) {
                            case 40:
                                if ("objectBoundingBox".equals(trim)) {
                                    wVar.f462a = false;
                                    continue;
                                } else if ("userSpaceOnUse".equals(trim)) {
                                    wVar.f462a = true;
                                    break;
                                } else {
                                    throw new SVGParseException("Invalid value for attribute patternUnits");
                                }
                            case 41:
                                if ("objectBoundingBox".equals(trim)) {
                                    wVar.f463b = false;
                                    continue;
                                } else if ("userSpaceOnUse".equals(trim)) {
                                    wVar.f463b = true;
                                    break;
                                } else {
                                    throw new SVGParseException("Invalid value for attribute patternContentUnits");
                                }
                            case 42:
                                wVar.f464c = m4580f(trim);
                                continue;
                                continue;
                        }
                }
            } else if ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                wVar.f469h = trim;
            }
        }
    }

    /* renamed from: z */
    private void m4539z(Attributes attributes) throws SVGParseException {
        m4597a("<view>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0163bb bbVar = new SVG.C0163bb();
            bbVar.f380u = this.f484a;
            bbVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) bbVar, attributes);
            m4636a((SVG.AbstractC0138ad) bbVar, attributes);
            m4630a((SVG.AbstractC0149ao) bbVar, attributes);
            this.f485b.mo4680a(bbVar);
            this.f485b = bbVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: A */
    private void m4652A(Attributes attributes) throws SVGParseException {
        m4597a("<mask>", new Object[0]);
        if (this.f485b != null) {
            SVG.C0178q qVar = new SVG.C0178q();
            qVar.f380u = this.f484a;
            qVar.f381v = this.f485b;
            m4634a((SVG.AbstractC0143ai) qVar, attributes);
            m4592b(qVar, attributes);
            m4636a((SVG.AbstractC0138ad) qVar, attributes);
            m4617a(qVar, attributes);
            this.f485b.mo4680a(qVar);
            this.f485b = qVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* JADX WARN: Code restructure failed: missing block: B:48:0x00b1, code lost:
        continue;
     */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void m4617a(SVG.C0178q qVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            switch (i2) {
                case 1:
                    qVar.f450c = m4603a(trim);
                    break;
                case 2:
                    qVar.f451d = m4603a(trim);
                    break;
                case 3:
                    qVar.f452e = m4603a(trim);
                    if (!qVar.f452e.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <mask> element. width cannot be negative");
                    }
                case 4:
                    qVar.f453f = m4603a(trim);
                    if (!qVar.f453f.m4671c()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <mask> element. height cannot be negative");
                    }
                default:
                    switch (i2) {
                        case 43:
                            if ("objectBoundingBox".equals(trim)) {
                                qVar.f448a = false;
                                continue;
                            } else if ("userSpaceOnUse".equals(trim)) {
                                qVar.f448a = true;
                                break;
                            } else {
                                throw new SVGParseException("Invalid value for attribute maskUnits");
                            }
                        case 44:
                            if ("objectBoundingBox".equals(trim)) {
                                qVar.f449b = false;
                                continue;
                            } else if ("userSpaceOnUse".equals(trim)) {
                                qVar.f449b = true;
                                break;
                            } else {
                                throw new SVGParseException("Invalid value for attribute maskContentUnits");
                            }
                    }
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.SVGParser$f */
    /* loaded from: classes.dex */
    static class C0197f {

        /* renamed from: a */
        String f518a;

        /* renamed from: c */
        int f520c;

        /* renamed from: b */
        int f519b = 0;

        /* renamed from: d */
        private C0201c f521d = new C0201c();

        /* renamed from: a */
        boolean m4531a(int i) {
            return i == 32 || i == 10 || i == 13 || i == 9;
        }

        /* renamed from: b */
        boolean m4526b(int i) {
            return i == 10 || i == 13;
        }

        C0197f(String str) {
            this.f520c = 0;
            this.f518a = str.trim();
            this.f520c = this.f518a.length();
        }

        /* renamed from: f */
        boolean m4524f() {
            return this.f519b == this.f520c;
        }

        /* renamed from: g */
        void m4523g() {
            while (true) {
                int i = this.f519b;
                if (i < this.f520c && m4531a((int) this.f518a.charAt(i))) {
                    this.f519b++;
                } else {
                    return;
                }
            }
        }

        /* renamed from: h */
        boolean m4522h() {
            m4523g();
            int i = this.f519b;
            if (i == this.f520c || this.f518a.charAt(i) != ',') {
                return false;
            }
            this.f519b++;
            m4523g();
            return true;
        }

        /* renamed from: i */
        float m4521i() {
            float a = this.f521d.m4499a(this.f518a, this.f519b, this.f520c);
            if (!Float.isNaN(a)) {
                this.f519b = this.f521d.m4500a();
            }
            return a;
        }

        /* renamed from: j */
        float m4520j() {
            m4522h();
            float a = this.f521d.m4499a(this.f518a, this.f519b, this.f520c);
            if (!Float.isNaN(a)) {
                this.f519b = this.f521d.m4500a();
            }
            return a;
        }

        /* renamed from: a */
        float m4532a(float f) {
            if (Float.isNaN(f)) {
                return Float.NaN;
            }
            m4522h();
            return m4521i();
        }

        /* renamed from: a */
        float m4530a(Boolean bool) {
            if (bool == null) {
                return Float.NaN;
            }
            m4522h();
            return m4521i();
        }

        /* renamed from: k */
        Integer m4519k() {
            int i = this.f519b;
            if (i == this.f520c) {
                return null;
            }
            String str = this.f518a;
            this.f519b = i + 1;
            return Integer.valueOf(str.charAt(i));
        }

        /* renamed from: l */
        SVG.C0175n m4518l() {
            float i = m4521i();
            if (Float.isNaN(i)) {
                return null;
            }
            SVG.Unit s = m4511s();
            if (s == null) {
                return new SVG.C0175n(i, SVG.Unit.px);
            }
            return new SVG.C0175n(i, s);
        }

        /* renamed from: m */
        Boolean m4517m() {
            int i = this.f519b;
            if (i == this.f520c) {
                return null;
            }
            char charAt = this.f518a.charAt(i);
            if (charAt != '0' && charAt != '1') {
                return null;
            }
            boolean z = true;
            this.f519b++;
            if (charAt != '1') {
                z = false;
            }
            return Boolean.valueOf(z);
        }

        /* renamed from: a */
        Boolean m4529a(Object obj) {
            if (obj == null) {
                return null;
            }
            m4522h();
            return m4517m();
        }

        /* renamed from: a */
        boolean m4534a(char c) {
            int i = this.f519b;
            boolean z = i < this.f520c && this.f518a.charAt(i) == c;
            if (z) {
                this.f519b++;
            }
            return z;
        }

        /* renamed from: a */
        boolean m4528a(String str) {
            int length = str.length();
            int i = this.f519b;
            boolean z = i <= this.f520c - length && this.f518a.substring(i, i + length).equals(str);
            if (z) {
                this.f519b += length;
            }
            return z;
        }

        /* renamed from: n */
        int m4516n() {
            int i = this.f519b;
            int i2 = this.f520c;
            if (i == i2) {
                return -1;
            }
            this.f519b = i + 1;
            int i3 = this.f519b;
            if (i3 < i2) {
                return this.f518a.charAt(i3);
            }
            return -1;
        }

        /* renamed from: o */
        String m4515o() {
            return m4533a(' ', false);
        }

        /* renamed from: b */
        String m4527b(char c) {
            return m4533a(c, false);
        }

        /* renamed from: c */
        String m4525c(char c) {
            return m4533a(c, true);
        }

        /* renamed from: a */
        String m4533a(char c, boolean z) {
            if (m4524f()) {
                return null;
            }
            char charAt = this.f518a.charAt(this.f519b);
            if ((!z && m4531a((int) charAt)) || charAt == c) {
                return null;
            }
            int i = this.f519b;
            int n = m4516n();
            while (n != -1 && n != c && (z || !m4531a(n))) {
                n = m4516n();
            }
            return this.f518a.substring(i, this.f519b);
        }

        /* renamed from: p */
        String m4514p() {
            if (m4524f()) {
                return null;
            }
            int i = this.f519b;
            char charAt = this.f518a.charAt(i);
            if ((charAt < 'A' || charAt > 'Z') && (charAt < 'a' || charAt > 'z')) {
                this.f519b = i;
                return null;
            }
            int n = m4516n();
            while (true) {
                if ((n < 65 || n > 90) && (n < 97 || n > 122)) {
                    break;
                }
                n = m4516n();
            }
            return this.f518a.substring(i, this.f519b);
        }

        /* renamed from: q */
        String m4513q() {
            if (m4524f()) {
                return null;
            }
            int i = this.f519b;
            int charAt = this.f518a.charAt(i);
            while (true) {
                if ((charAt < 97 || charAt > 122) && (charAt < 65 || charAt > 90)) {
                    break;
                }
                charAt = m4516n();
            }
            int i2 = this.f519b;
            while (m4531a(charAt)) {
                charAt = m4516n();
            }
            if (charAt == 40) {
                this.f519b++;
                return this.f518a.substring(i, i2);
            }
            this.f519b = i;
            return null;
        }

        /* renamed from: r */
        String m4512r() {
            int i = this.f519b;
            while (!m4524f() && !m4531a((int) this.f518a.charAt(this.f519b))) {
                this.f519b++;
            }
            String substring = this.f518a.substring(i, this.f519b);
            this.f519b = i;
            return substring;
        }

        /* renamed from: s */
        SVG.Unit m4511s() {
            if (m4524f()) {
                return null;
            }
            if (this.f518a.charAt(this.f519b) == '%') {
                this.f519b++;
                return SVG.Unit.percent;
            }
            int i = this.f519b;
            if (i > this.f520c - 2) {
                return null;
            }
            try {
                SVG.Unit valueOf = SVG.Unit.valueOf(this.f518a.substring(i, i + 2).toLowerCase(Locale.US));
                this.f519b += 2;
                return valueOf;
            } catch (IllegalArgumentException unused) {
                return null;
            }
        }

        /* renamed from: t */
        boolean m4510t() {
            int i = this.f519b;
            if (i == this.f520c) {
                return false;
            }
            char charAt = this.f518a.charAt(i);
            if ((charAt < 'a' || charAt > 'z') && (charAt < 'A' || charAt > 'Z')) {
                return false;
            }
            return true;
        }

        /* renamed from: u */
        String m4509u() {
            if (m4524f()) {
                return null;
            }
            int i = this.f519b;
            char charAt = this.f518a.charAt(i);
            if (charAt != '\'' && charAt != '\"') {
                return null;
            }
            int n = m4516n();
            while (n != -1 && n != charAt) {
                n = m4516n();
            }
            if (n == -1) {
                this.f519b = i;
                return null;
            }
            this.f519b++;
            return this.f518a.substring(i + 1, this.f519b - 1);
        }

        /* renamed from: v */
        String m4508v() {
            if (m4524f()) {
                return null;
            }
            int i = this.f519b;
            this.f519b = this.f520c;
            return this.f518a.substring(i);
        }
    }

    /* renamed from: a */
    private void m4634a(SVG.AbstractC0143ai aiVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String qName = attributes.getQName(i);
            if (qName.equals("id") || qName.equals("xml:id")) {
                aiVar.f371p = attributes.getValue(i).trim();
                return;
            } else if (qName.equals("xml:space")) {
                String trim = attributes.getValue(i).trim();
                if ("default".equals(trim)) {
                    aiVar.f372q = Boolean.FALSE;
                    return;
                } else if ("preserve".equals(trim)) {
                    aiVar.f372q = Boolean.TRUE;
                    return;
                } else {
                    throw new SVGParseException("Invalid value for \"xml:space\" attribute: " + trim);
                }
            }
        }
    }

    /* renamed from: b */
    private void m4592b(SVG.AbstractC0143ai aiVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (trim.length() != 0) {
                switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                    case style:
                        m4635a(aiVar, trim);
                        continue;
                    case CLASS:
                        aiVar.f375t = CSSParser.m4758b(trim);
                        continue;
                    default:
                        if (aiVar.f373r == null) {
                            aiVar.f373r = new SVG.Style();
                        }
                        m4639a(aiVar.f373r, attributes.getLocalName(i), attributes.getValue(i).trim());
                        continue;
                }
            }
        }
    }

    /* renamed from: a */
    private static void m4635a(SVG.AbstractC0143ai aiVar, String str) {
        C0197f fVar = new C0197f(str.replaceAll("/\\*.*?\\*/", ""));
        while (true) {
            String b = fVar.m4527b(':');
            fVar.m4523g();
            if (fVar.m4534a(':')) {
                fVar.m4523g();
                String c = fVar.m4525c(';');
                if (c != null) {
                    fVar.m4523g();
                    if (fVar.m4524f() || fVar.m4534a(';')) {
                        if (aiVar.f374s == null) {
                            aiVar.f374s = new SVG.Style();
                        }
                        m4639a(aiVar.f374s, b, c);
                        fVar.m4523g();
                    }
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    }

    /* renamed from: a */
    static void m4639a(SVG.Style style, String str, String str2) {
        if (str2.length() != 0 && !str2.equals("inherit")) {
            try {
                switch (SVGAttr.fromString(str)) {
                    case fill:
                        style.f316b = m4570k(str2);
                        if (style.f316b != null) {
                            style.f315a |= 1;
                            return;
                        }
                        return;
                    case fill_rule:
                        style.f317c = m4550u(str2);
                        if (style.f317c != null) {
                            style.f315a |= 2;
                            return;
                        }
                        return;
                    case fill_opacity:
                        style.f318d = m4574i(str2);
                        if (style.f318d != null) {
                            style.f315a |= 4;
                            return;
                        }
                        return;
                    case stroke:
                        style.f319e = m4570k(str2);
                        if (style.f319e != null) {
                            style.f315a |= 8;
                            return;
                        }
                        return;
                    case stroke_opacity:
                        style.f320f = m4574i(str2);
                        if (style.f320f != null) {
                            style.f315a |= 16;
                            return;
                        }
                        return;
                    case stroke_width:
                        style.f321g = m4603a(str2);
                        style.f315a |= 32;
                        return;
                    case stroke_linecap:
                        style.f322h = m4548v(str2);
                        if (style.f322h != null) {
                            style.f315a |= 64;
                            return;
                        }
                        return;
                    case stroke_linejoin:
                        style.f323i = m4546w(str2);
                        if (style.f323i != null) {
                            style.f315a |= 128;
                            return;
                        }
                        return;
                    case stroke_miterlimit:
                        style.f324j = Float.valueOf(m4576h(str2));
                        style.f315a |= 256;
                        return;
                    case stroke_dasharray:
                        if (ViewProps.NONE.equals(str2)) {
                            style.f325k = null;
                            style.f315a |= 512;
                            return;
                        }
                        style.f325k = m4544x(str2);
                        if (style.f325k != null) {
                            style.f315a |= 512;
                            return;
                        }
                        return;
                    case stroke_dashoffset:
                        style.f326l = m4603a(str2);
                        style.f315a |= 1024;
                        return;
                    case opacity:
                        style.f327m = m4574i(str2);
                        style.f315a |= 2048;
                        return;
                    case color:
                        style.f328n = m4566m(str2);
                        style.f315a |= 4096;
                        return;
                    case font:
                        m4640a(style, str2);
                        return;
                    case font_family:
                        style.f329o = m4562o(str2);
                        if (style.f329o != null) {
                            style.f315a |= 8192;
                            return;
                        }
                        return;
                    case font_size:
                        style.f330p = m4560p(str2);
                        if (style.f330p != null) {
                            style.f315a |= 16384;
                            return;
                        }
                        return;
                    case font_weight:
                        style.f331q = m4558q(str2);
                        if (style.f331q != null) {
                            style.f315a |= 32768;
                            return;
                        }
                        return;
                    case font_style:
                        style.f332r = m4556r(str2);
                        if (style.f332r != null) {
                            style.f315a |= 65536;
                            return;
                        }
                        return;
                    case text_decoration:
                        style.f333s = m4554s(str2);
                        if (style.f333s != null) {
                            style.f315a |= 131072;
                            return;
                        }
                        return;
                    case direction:
                        style.f334t = m4552t(str2);
                        if (style.f334t != null) {
                            style.f315a |= 68719476736L;
                            return;
                        }
                        return;
                    case text_anchor:
                        style.f335u = m4542y(str2);
                        if (style.f335u != null) {
                            style.f315a |= 262144;
                            return;
                        }
                        return;
                    case overflow:
                        style.f336v = m4540z(str2);
                        if (style.f336v != null) {
                            style.f315a |= 524288;
                            return;
                        }
                        return;
                    case marker:
                        style.f338x = m4601a(str2, str);
                        style.f339y = style.f338x;
                        style.f340z = style.f338x;
                        style.f315a |= 14680064;
                        return;
                    case marker_start:
                        style.f338x = m4601a(str2, str);
                        style.f315a |= 2097152;
                        return;
                    case marker_mid:
                        style.f339y = m4601a(str2, str);
                        style.f315a |= 4194304;
                        return;
                    case marker_end:
                        style.f340z = m4601a(str2, str);
                        style.f315a |= 8388608;
                        return;
                    case display:
                        if (str2.indexOf(124) < 0) {
                            if ("|inline|block|list-item|run-in|compact|marker|table|inline-table|table-row-group|table-header-group|table-footer-group|table-row|table-column-group|table-column|table-cell|table-caption|none|".contains('|' + str2 + '|')) {
                                style.f302A = Boolean.valueOf(!str2.equals(ViewProps.NONE));
                                style.f315a |= 16777216;
                                return;
                            }
                            return;
                        }
                        return;
                    case visibility:
                        if (str2.indexOf(124) < 0) {
                            if ("|visible|hidden|collapse|".contains('|' + str2 + '|')) {
                                style.f303B = Boolean.valueOf(str2.equals(ViewProps.VISIBLE));
                                style.f315a |= 33554432;
                                return;
                            }
                            return;
                        }
                        return;
                    case stop_color:
                        if (str2.equals("currentColor")) {
                            style.f304C = SVG.C0167f.m4681a();
                        } else {
                            try {
                                style.f304C = m4566m(str2);
                            } catch (SVGParseException e) {
                                Log.w("SVGParser", e.getMessage());
                                return;
                            }
                        }
                        style.f315a |= 67108864;
                        return;
                    case stop_opacity:
                        style.f305D = m4574i(str2);
                        style.f315a |= 134217728;
                        return;
                    case clip:
                        style.f337w = m4653A(str2);
                        if (style.f337w != null) {
                            style.f315a |= 1048576;
                            return;
                        }
                        return;
                    case clip_path:
                        style.f306E = m4601a(str2, str);
                        style.f315a |= 268435456;
                        return;
                    case clip_rule:
                        style.f307F = m4550u(str2);
                        style.f315a |= 536870912;
                        return;
                    case mask:
                        style.f308G = m4601a(str2, str);
                        style.f315a |= 1073741824;
                        return;
                    case solid_color:
                        if (str2.equals("currentColor")) {
                            style.f309H = SVG.C0167f.m4681a();
                        } else {
                            try {
                                style.f309H = m4566m(str2);
                            } catch (SVGParseException e2) {
                                Log.w("SVGParser", e2.getMessage());
                                return;
                            }
                        }
                        style.f315a |= 2147483648L;
                        return;
                    case solid_opacity:
                        style.f310I = m4574i(str2);
                        style.f315a |= 4294967296L;
                        return;
                    case viewport_fill:
                        if (str2.equals("currentColor")) {
                            style.f311J = SVG.C0167f.m4681a();
                        } else {
                            try {
                                style.f311J = m4566m(str2);
                            } catch (SVGParseException e3) {
                                Log.w("SVGParser", e3.getMessage());
                                return;
                            }
                        }
                        style.f315a |= 8589934592L;
                        return;
                    case viewport_fill_opacity:
                        style.f312K = m4574i(str2);
                        style.f315a |= 17179869184L;
                        return;
                    case vector_effect:
                        style.f313L = m4651B(str2);
                        if (style.f313L != null) {
                            style.f315a |= 34359738368L;
                            return;
                        }
                        return;
                    case image_rendering:
                        style.f314M = m4649C(str2);
                        if (style.f314M != null) {
                            style.f315a |= 137438953472L;
                            return;
                        }
                        return;
                    default:
                        return;
                }
            } catch (SVGParseException unused) {
            }
        }
    }

    /* renamed from: a */
    private void m4630a(SVG.AbstractC0149ao aoVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C01911.f494b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 7) {
                m4632a((SVG.AbstractC0147am) aoVar, trim);
            } else if (i2 == 87) {
                aoVar.f388x = m4572j(trim);
            }
        }
    }

    /* renamed from: a */
    private void m4621a(SVG.AbstractC0173l lVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            if (SVGAttr.fromString(attributes.getLocalName(i)) == SVGAttr.transform) {
                lVar.mo4678a(m4580f(attributes.getValue(i)));
            }
        }
    }

    /* renamed from: f */
    private Matrix m4580f(String str) throws SVGParseException {
        Matrix matrix = new Matrix();
        C0197f fVar = new C0197f(str);
        fVar.m4523g();
        while (!fVar.m4524f()) {
            String q = fVar.m4513q();
            if (q != null) {
                char c = 65535;
                switch (q.hashCode()) {
                    case -1081239615:
                        if (q.equals("matrix")) {
                            c = 0;
                            break;
                        }
                        break;
                    case -925180581:
                        if (q.equals("rotate")) {
                            c = 3;
                            break;
                        }
                        break;
                    case 109250890:
                        if (q.equals("scale")) {
                            c = 2;
                            break;
                        }
                        break;
                    case 109493390:
                        if (q.equals("skewX")) {
                            c = 4;
                            break;
                        }
                        break;
                    case 109493391:
                        if (q.equals("skewY")) {
                            c = 5;
                            break;
                        }
                        break;
                    case 1052832078:
                        if (q.equals("translate")) {
                            c = 1;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        fVar.m4523g();
                        float i = fVar.m4521i();
                        fVar.m4522h();
                        float i2 = fVar.m4521i();
                        fVar.m4522h();
                        float i3 = fVar.m4521i();
                        fVar.m4522h();
                        float i4 = fVar.m4521i();
                        fVar.m4522h();
                        float i5 = fVar.m4521i();
                        fVar.m4522h();
                        float i6 = fVar.m4521i();
                        fVar.m4523g();
                        if (!Float.isNaN(i6) && fVar.m4534a(')')) {
                            Matrix matrix2 = new Matrix();
                            matrix2.setValues(new float[]{i, i3, i5, i2, i4, i6, 0.0f, 0.0f, 1.0f});
                            matrix.preConcat(matrix2);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str);
                        }
                        break;
                    case 1:
                        fVar.m4523g();
                        float i7 = fVar.m4521i();
                        float j = fVar.m4520j();
                        fVar.m4523g();
                        if (!Float.isNaN(i7) && fVar.m4534a(')')) {
                            if (!Float.isNaN(j)) {
                                matrix.preTranslate(i7, j);
                                break;
                            } else {
                                matrix.preTranslate(i7, 0.0f);
                                break;
                            }
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str);
                        }
                        break;
                    case 2:
                        fVar.m4523g();
                        float i8 = fVar.m4521i();
                        float j2 = fVar.m4520j();
                        fVar.m4523g();
                        if (!Float.isNaN(i8) && fVar.m4534a(')')) {
                            if (!Float.isNaN(j2)) {
                                matrix.preScale(i8, j2);
                                break;
                            } else {
                                matrix.preScale(i8, i8);
                                break;
                            }
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str);
                        }
                        break;
                    case 3:
                        fVar.m4523g();
                        float i9 = fVar.m4521i();
                        float j3 = fVar.m4520j();
                        float j4 = fVar.m4520j();
                        fVar.m4523g();
                        if (Float.isNaN(i9) || !fVar.m4534a(')')) {
                            throw new SVGParseException("Invalid transform list: " + str);
                        } else if (Float.isNaN(j3)) {
                            matrix.preRotate(i9);
                            break;
                        } else if (!Float.isNaN(j4)) {
                            matrix.preRotate(i9, j3, j4);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str);
                        }
                    case 4:
                        fVar.m4523g();
                        float i10 = fVar.m4521i();
                        fVar.m4523g();
                        if (!Float.isNaN(i10) && fVar.m4534a(')')) {
                            matrix.preSkew((float) Math.tan(Math.toRadians((double) i10)), 0.0f);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str);
                        }
                        break;
                    case 5:
                        fVar.m4523g();
                        float i11 = fVar.m4521i();
                        fVar.m4523g();
                        if (!Float.isNaN(i11) && fVar.m4534a(')')) {
                            matrix.preSkew(0.0f, (float) Math.tan(Math.toRadians((double) i11)));
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str);
                        }
                        break;
                    default:
                        throw new SVGParseException("Invalid transform list fn: " + q + ")");
                }
                if (fVar.m4524f()) {
                    return matrix;
                }
                fVar.m4522h();
            } else {
                throw new SVGParseException("Bad transform function encountered in transform list: " + str);
            }
        }
        return matrix;
    }

    /* renamed from: a */
    static SVG.C0175n m4603a(String str) throws SVGParseException {
        if (str.length() != 0) {
            int length = str.length();
            SVG.Unit unit = SVG.Unit.px;
            char charAt = str.charAt(length - 1);
            if (charAt == '%') {
                length--;
                unit = SVG.Unit.percent;
            } else if (length > 2 && Character.isLetter(charAt) && Character.isLetter(str.charAt(length - 2))) {
                length -= 2;
                try {
                    unit = SVG.Unit.valueOf(str.substring(length).toLowerCase(Locale.US));
                } catch (IllegalArgumentException unused) {
                    throw new SVGParseException("Invalid length unit specifier: " + str);
                }
            }
            try {
                return new SVG.C0175n(m4602a(str, 0, length), unit);
            } catch (NumberFormatException e) {
                throw new SVGParseException("Invalid length value: " + str, e);
            }
        } else {
            throw new SVGParseException("Invalid length value (empty string)");
        }
    }

    /* renamed from: g */
    private static List<SVG.C0175n> m4578g(String str) throws SVGParseException {
        if (str.length() != 0) {
            ArrayList arrayList = new ArrayList(1);
            C0197f fVar = new C0197f(str);
            fVar.m4523g();
            while (!fVar.m4524f()) {
                float i = fVar.m4521i();
                if (!Float.isNaN(i)) {
                    SVG.Unit s = fVar.m4511s();
                    if (s == null) {
                        s = SVG.Unit.px;
                    }
                    arrayList.add(new SVG.C0175n(i, s));
                    fVar.m4522h();
                } else {
                    throw new SVGParseException("Invalid length list value: " + fVar.m4512r());
                }
            }
            return arrayList;
        }
        throw new SVGParseException("Invalid length list (empty string)");
    }

    /* renamed from: h */
    private static float m4576h(String str) throws SVGParseException {
        int length = str.length();
        if (length != 0) {
            return m4602a(str, 0, length);
        }
        throw new SVGParseException("Invalid float value (empty string)");
    }

    /* renamed from: a */
    private static float m4602a(String str, int i, int i2) throws SVGParseException {
        float a = new C0201c().m4499a(str, i, i2);
        if (!Float.isNaN(a)) {
            return a;
        }
        throw new SVGParseException("Invalid float value: " + str);
    }

    /* renamed from: i */
    private static Float m4574i(String str) {
        try {
            float h = m4576h(str);
            if (h < 0.0f) {
                h = 0.0f;
            } else if (h > 1.0f) {
                h = 1.0f;
            }
            return Float.valueOf(h);
        } catch (SVGParseException unused) {
            return null;
        }
    }

    /* renamed from: j */
    private static SVG.C0134a m4572j(String str) throws SVGParseException {
        C0197f fVar = new C0197f(str);
        fVar.m4523g();
        float i = fVar.m4521i();
        fVar.m4522h();
        float i2 = fVar.m4521i();
        fVar.m4522h();
        float i3 = fVar.m4521i();
        fVar.m4522h();
        float i4 = fVar.m4521i();
        if (Float.isNaN(i) || Float.isNaN(i2) || Float.isNaN(i3) || Float.isNaN(i4)) {
            throw new SVGParseException("Invalid viewBox definition - should have four numbers");
        } else if (i3 < 0.0f) {
            throw new SVGParseException("Invalid viewBox. width cannot be negative");
        } else if (i4 >= 0.0f) {
            return new SVG.C0134a(i, i2, i3, i4);
        } else {
            throw new SVGParseException("Invalid viewBox. height cannot be negative");
        }
    }

    /* renamed from: a */
    private static void m4632a(SVG.AbstractC0147am amVar, String str) throws SVGParseException {
        amVar.f382w = m4588b(str);
    }

    /* renamed from: b */
    static PreserveAspectRatio m4588b(String str) throws SVGParseException {
        C0197f fVar = new C0197f(str);
        fVar.m4523g();
        String o = fVar.m4515o();
        if ("defer".equals(o)) {
            fVar.m4523g();
            o = fVar.m4515o();
        }
        PreserveAspectRatio.Alignment a = C0192a.m4538a(o);
        PreserveAspectRatio.Scale scale = null;
        fVar.m4523g();
        if (!fVar.m4524f()) {
            String o2 = fVar.m4515o();
            char c = 65535;
            int hashCode = o2.hashCode();
            if (hashCode != 3347527) {
                if (hashCode == 109526418 && o2.equals("slice")) {
                    c = 1;
                }
            } else if (o2.equals("meet")) {
                c = 0;
            }
            switch (c) {
                case 0:
                    scale = PreserveAspectRatio.Scale.meet;
                    break;
                case 1:
                    scale = PreserveAspectRatio.Scale.slice;
                    break;
                default:
                    throw new SVGParseException("Invalid preserveAspectRatio definition: " + str);
            }
        }
        return new PreserveAspectRatio(a, scale);
    }

    /* renamed from: k */
    private static SVG.AbstractC0146al m4570k(String str) {
        if (!str.startsWith("url(")) {
            return m4568l(str);
        }
        int indexOf = str.indexOf(")");
        SVG.AbstractC0146al alVar = null;
        if (indexOf == -1) {
            return new SVG.C0180s(str.substring(4).trim(), null);
        }
        String trim = str.substring(4, indexOf).trim();
        String trim2 = str.substring(indexOf + 1).trim();
        if (trim2.length() > 0) {
            alVar = m4568l(trim2);
        }
        return new SVG.C0180s(trim, alVar);
    }

    /* renamed from: l */
    private static SVG.AbstractC0146al m4568l(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode != 3387192) {
            if (hashCode == 1442907498 && str.equals("currentColor")) {
                c = 1;
            }
            c = 65535;
        } else {
            if (str.equals(ViewProps.NONE)) {
                c = 0;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
                return SVG.C0166e.f416c;
            case 1:
                return SVG.C0167f.m4681a();
            default:
                try {
                    return m4566m(str);
                } catch (SVGParseException unused) {
                    return null;
                }
        }
    }

    /* renamed from: m */
    private static SVG.C0166e m4566m(String str) throws SVGParseException {
        int i = 4;
        if (str.charAt(0) == '#') {
            C0200b a = C0200b.m4503a(str, 1, str.length());
            if (a != null) {
                int a2 = a.m4504a();
                if (a2 == 7) {
                    return new SVG.C0166e(a.m4501b() | -16777216);
                }
                if (a2 != 9) {
                    switch (a2) {
                        case 4:
                            int b = a.m4501b();
                            int i2 = b & 3840;
                            int i3 = b & 240;
                            int i4 = b & 15;
                            return new SVG.C0166e(i4 | (i2 << 8) | -16777216 | (i2 << 12) | (i3 << 8) | (i3 << 4) | (i4 << 4));
                        case 5:
                            int b2 = a.m4501b();
                            int i5 = 61440 & b2;
                            int i6 = b2 & 3840;
                            int i7 = b2 & 240;
                            int i8 = b2 & 15;
                            return new SVG.C0166e((i8 << 24) | (i8 << 28) | (i5 << 8) | (i5 << 4) | (i6 << 4) | i6 | i7 | (i7 >> 4));
                        default:
                            throw new SVGParseException("Bad hex colour value: " + str);
                    }
                } else {
                    return new SVG.C0166e((a.m4501b() >>> 8) | (a.m4501b() << 24));
                }
            } else {
                throw new SVGParseException("Bad hex colour value: " + str);
            }
        } else {
            String lowerCase = str.toLowerCase(Locale.US);
            boolean startsWith = lowerCase.startsWith("rgba(");
            if (startsWith || lowerCase.startsWith("rgb(")) {
                if (startsWith) {
                    i = 5;
                }
                C0197f fVar = new C0197f(str.substring(i));
                fVar.m4523g();
                float i9 = fVar.m4521i();
                if (!Float.isNaN(i9) && fVar.m4534a('%')) {
                    i9 = (i9 * 256.0f) / 100.0f;
                }
                float a3 = fVar.m4532a(i9);
                if (!Float.isNaN(a3) && fVar.m4534a('%')) {
                    a3 = (a3 * 256.0f) / 100.0f;
                }
                float a4 = fVar.m4532a(a3);
                if (!Float.isNaN(a4) && fVar.m4534a('%')) {
                    a4 = (a4 * 256.0f) / 100.0f;
                }
                if (startsWith) {
                    float a5 = fVar.m4532a(a4);
                    fVar.m4523g();
                    if (!Float.isNaN(a5) && fVar.m4534a(')')) {
                        return new SVG.C0166e((m4642a(a5 * 256.0f) << 24) | (m4642a(i9) << 16) | (m4642a(a3) << 8) | m4642a(a4));
                    }
                    throw new SVGParseException("Bad rgba() colour value: " + str);
                }
                fVar.m4523g();
                if (!Float.isNaN(a4) && fVar.m4534a(')')) {
                    return new SVG.C0166e((m4642a(i9) << 16) | -16777216 | (m4642a(a3) << 8) | m4642a(a4));
                }
                throw new SVGParseException("Bad rgb() colour value: " + str);
            }
            boolean startsWith2 = lowerCase.startsWith("hsla(");
            if (!startsWith2 && !lowerCase.startsWith("hsl(")) {
                return m4564n(lowerCase);
            }
            if (startsWith2) {
                i = 5;
            }
            C0197f fVar2 = new C0197f(str.substring(i));
            fVar2.m4523g();
            float i10 = fVar2.m4521i();
            float a6 = fVar2.m4532a(i10);
            if (!Float.isNaN(a6)) {
                fVar2.m4534a('%');
            }
            float a7 = fVar2.m4532a(a6);
            if (!Float.isNaN(a7)) {
                fVar2.m4534a('%');
            }
            if (startsWith2) {
                float a8 = fVar2.m4532a(a7);
                fVar2.m4523g();
                if (!Float.isNaN(a8) && fVar2.m4534a(')')) {
                    return new SVG.C0166e((m4642a(a8 * 256.0f) << 24) | m4641a(i10, a6, a7));
                }
                throw new SVGParseException("Bad hsla() colour value: " + str);
            }
            fVar2.m4523g();
            if (!Float.isNaN(a7) && fVar2.m4534a(')')) {
                return new SVG.C0166e(m4641a(i10, a6, a7) | -16777216);
            }
            throw new SVGParseException("Bad hsl() colour value: " + str);
        }
    }

    /* renamed from: a */
    private static int m4642a(float f) {
        if (f < 0.0f) {
            return 0;
        }
        if (f > 255.0f) {
            return 255;
        }
        return Math.round(f);
    }

    /* renamed from: a */
    private static int m4641a(float f, float f2, float f3) {
        float f4 = (f >= 0.0f ? f % 360.0f : (f % 360.0f) + 360.0f) / 60.0f;
        float f5 = f2 / 100.0f;
        float f6 = f3 / 100.0f;
        if (f5 < 0.0f) {
            f5 = 0.0f;
        } else if (f5 > 1.0f) {
            f5 = 1.0f;
        }
        if (f6 < 0.0f) {
            f6 = 0.0f;
        } else if (f6 > 1.0f) {
            f6 = 1.0f;
        }
        float f7 = f6 <= 0.5f ? (f5 + 1.0f) * f6 : (f6 + f5) - (f5 * f6);
        float f8 = (f6 * 2.0f) - f7;
        return m4642a(m4593b(f8, f7, f4 - 2.0f) * 256.0f) | (m4642a(m4593b(f8, f7, f4 + 2.0f) * 256.0f) << 16) | (m4642a(m4593b(f8, f7, f4) * 256.0f) << 8);
    }

    /* renamed from: n */
    private static SVG.C0166e m4564n(String str) throws SVGParseException {
        Integer a = C0193b.m4537a(str);
        if (a != null) {
            return new SVG.C0166e(a.intValue());
        }
        throw new SVGParseException("Invalid colour keyword: " + str);
    }

    /* renamed from: a */
    private static void m4640a(SVG.Style style, String str) {
        String b;
        int i;
        if ("|caption|icon|menu|message-box|small-caption|status-bar|".contains('|' + str + '|')) {
            C0197f fVar = new C0197f(str);
            Integer num = null;
            SVG.Style.FontStyle fontStyle = null;
            String str2 = null;
            while (true) {
                b = fVar.m4527b('/');
                fVar.m4523g();
                if (b != null) {
                    if (num != null && fontStyle != null) {
                        break;
                    } else if (!b.equals("normal") && (num != null || (num = C0195d.m4535a(b)) == null)) {
                        if (fontStyle != null || (fontStyle = m4556r(b)) == null) {
                            if (str2 != null || !b.equals("small-caps")) {
                                break;
                            }
                            str2 = b;
                        }
                    }
                } else {
                    return;
                }
            }
            SVG.C0175n p = m4560p(b);
            if (fVar.m4534a('/')) {
                fVar.m4523g();
                String o = fVar.m4515o();
                if (o != null) {
                    try {
                        m4603a(o);
                    } catch (SVGParseException unused) {
                        return;
                    }
                }
                fVar.m4523g();
            }
            style.f329o = m4562o(fVar.m4508v());
            style.f330p = p;
            if (num == null) {
                i = 400;
            } else {
                i = num.intValue();
            }
            style.f331q = Integer.valueOf(i);
            if (fontStyle == null) {
                fontStyle = SVG.Style.FontStyle.Normal;
            }
            style.f332r = fontStyle;
            style.f315a |= 122880;
        }
    }

    /* renamed from: o */
    private static List<String> m4562o(String str) {
        C0197f fVar = new C0197f(str);
        ArrayList arrayList = null;
        do {
            String u = fVar.m4509u();
            if (u == null) {
                u = fVar.m4525c(',');
            }
            if (u == null) {
                break;
            }
            if (arrayList == null) {
                arrayList = new ArrayList();
            }
            arrayList.add(u);
            fVar.m4522h();
        } while (!fVar.m4524f());
        return arrayList;
    }

    /* renamed from: p */
    private static SVG.C0175n m4560p(String str) {
        try {
            SVG.C0175n a = C0194c.m4536a(str);
            return a == null ? m4603a(str) : a;
        } catch (SVGParseException unused) {
            return null;
        }
    }

    /* renamed from: q */
    private static Integer m4558q(String str) {
        return C0195d.m4535a(str);
    }

    /* renamed from: r */
    private static SVG.Style.FontStyle m4556r(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode == -1657669071) {
            if (str.equals("oblique")) {
                c = 2;
            }
            c = 65535;
        } else if (hashCode != -1178781136) {
            if (hashCode == -1039745817 && str.equals("normal")) {
                c = 1;
            }
            c = 65535;
        } else {
            if (str.equals("italic")) {
                c = 0;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
                return SVG.Style.FontStyle.Italic;
            case 1:
                return SVG.Style.FontStyle.Normal;
            case 2:
                return SVG.Style.FontStyle.Oblique;
            default:
                return null;
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* renamed from: s */
    private static SVG.Style.TextDecoration m4554s(String str) {
        char c;
        switch (str.hashCode()) {
            case -1171789332:
                if (str.equals("line-through")) {
                    c = 3;
                    break;
                }
                c = 65535;
                break;
            case -1026963764:
                if (str.equals("underline")) {
                    c = 1;
                    break;
                }
                c = 65535;
                break;
            case 3387192:
                if (str.equals(ViewProps.NONE)) {
                    c = 0;
                    break;
                }
                c = 65535;
                break;
            case 93826908:
                if (str.equals("blink")) {
                    c = 4;
                    break;
                }
                c = 65535;
                break;
            case 529818312:
                if (str.equals("overline")) {
                    c = 2;
                    break;
                }
                c = 65535;
                break;
            default:
                c = 65535;
                break;
        }
        switch (c) {
            case 0:
                return SVG.Style.TextDecoration.None;
            case 1:
                return SVG.Style.TextDecoration.Underline;
            case 2:
                return SVG.Style.TextDecoration.Overline;
            case 3:
                return SVG.Style.TextDecoration.LineThrough;
            case 4:
                return SVG.Style.TextDecoration.Blink;
            default:
                return null;
        }
    }

    /* renamed from: t */
    private static SVG.Style.TextDirection m4552t(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode != 107498) {
            if (hashCode == 113258 && str.equals("rtl")) {
                c = 1;
            }
            c = 65535;
        } else {
            if (str.equals("ltr")) {
                c = 0;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
                return SVG.Style.TextDirection.LTR;
            case 1:
                return SVG.Style.TextDirection.RTL;
            default:
                return null;
        }
    }

    /* renamed from: u */
    private static SVG.Style.FillRule m4550u(String str) {
        if ("nonzero".equals(str)) {
            return SVG.Style.FillRule.NonZero;
        }
        if ("evenodd".equals(str)) {
            return SVG.Style.FillRule.EvenOdd;
        }
        return null;
    }

    /* renamed from: v */
    private static SVG.Style.LineCap m4548v(String str) {
        if ("butt".equals(str)) {
            return SVG.Style.LineCap.Butt;
        }
        if ("round".equals(str)) {
            return SVG.Style.LineCap.Round;
        }
        if ("square".equals(str)) {
            return SVG.Style.LineCap.Square;
        }
        return null;
    }

    /* renamed from: w */
    private static SVG.Style.LineJoin m4546w(String str) {
        if ("miter".equals(str)) {
            return SVG.Style.LineJoin.Miter;
        }
        if ("round".equals(str)) {
            return SVG.Style.LineJoin.Round;
        }
        if ("bevel".equals(str)) {
            return SVG.Style.LineJoin.Bevel;
        }
        return null;
    }

    /* renamed from: x */
    private static SVG.C0175n[] m4544x(String str) {
        SVG.C0175n l;
        C0197f fVar = new C0197f(str);
        fVar.m4523g();
        if (fVar.m4524f() || (l = fVar.m4518l()) == null || l.m4671c()) {
            return null;
        }
        float a = l.m4677a();
        ArrayList arrayList = new ArrayList();
        arrayList.add(l);
        while (!fVar.m4524f()) {
            fVar.m4522h();
            SVG.C0175n l2 = fVar.m4518l();
            if (l2 == null || l2.m4671c()) {
                return null;
            }
            arrayList.add(l2);
            a += l2.m4677a();
        }
        if (a == 0.0f) {
            return null;
        }
        return (SVG.C0175n[]) arrayList.toArray(new SVG.C0175n[arrayList.size()]);
    }

    /* renamed from: y */
    private static SVG.Style.TextAnchor m4542y(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode == -1074341483) {
            if (str.equals("middle")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != 100571) {
            if (hashCode == 109757538 && str.equals(ViewProps.START)) {
                c = 0;
            }
            c = 65535;
        } else {
            if (str.equals(ViewProps.END)) {
                c = 2;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
                return SVG.Style.TextAnchor.Start;
            case 1:
                return SVG.Style.TextAnchor.Middle;
            case 2:
                return SVG.Style.TextAnchor.End;
            default:
                return null;
        }
    }

    /* renamed from: z */
    private static Boolean m4540z(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode == -1217487446) {
            if (str.equals(ViewProps.HIDDEN)) {
                c = 2;
            }
            c = 65535;
        } else if (hashCode == -907680051) {
            if (str.equals(ViewProps.SCROLL)) {
                c = 3;
            }
            c = 65535;
        } else if (hashCode != 3005871) {
            if (hashCode == 466743410 && str.equals(ViewProps.VISIBLE)) {
                c = 0;
            }
            c = 65535;
        } else {
            if (str.equals("auto")) {
                c = 1;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
            case 1:
                return Boolean.TRUE;
            case 2:
            case 3:
                return Boolean.FALSE;
            default:
                return null;
        }
    }

    /* renamed from: A */
    private static SVG.C0161b m4653A(String str) {
        if ("auto".equals(str) || !str.startsWith("rect(")) {
            return null;
        }
        C0197f fVar = new C0197f(str.substring(5));
        fVar.m4523g();
        SVG.C0175n b = m4591b(fVar);
        fVar.m4522h();
        SVG.C0175n b2 = m4591b(fVar);
        fVar.m4522h();
        SVG.C0175n b3 = m4591b(fVar);
        fVar.m4522h();
        SVG.C0175n b4 = m4591b(fVar);
        fVar.m4523g();
        if (fVar.m4534a(')') || fVar.m4524f()) {
            return new SVG.C0161b(b, b2, b3, b4);
        }
        return null;
    }

    /* renamed from: b */
    private static SVG.C0175n m4591b(C0197f fVar) {
        if (fVar.m4528a("auto")) {
            return new SVG.C0175n(0.0f);
        }
        return fVar.m4518l();
    }

    /* renamed from: B */
    private static SVG.Style.VectorEffect m4651B(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode != 3387192) {
            if (hashCode == 1629199934 && str.equals("non-scaling-stroke")) {
                c = 1;
            }
            c = 65535;
        } else {
            if (str.equals(ViewProps.NONE)) {
                c = 0;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
                return SVG.Style.VectorEffect.None;
            case 1:
                return SVG.Style.VectorEffect.NonScalingStroke;
            default:
                return null;
        }
    }

    /* renamed from: C */
    private static SVG.Style.RenderQuality m4649C(String str) {
        char c;
        int hashCode = str.hashCode();
        if (hashCode == -933002398) {
            if (str.equals("optimizeQuality")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != 3005871) {
            if (hashCode == 362741610 && str.equals("optimizeSpeed")) {
                c = 2;
            }
            c = 65535;
        } else {
            if (str.equals("auto")) {
                c = 0;
            }
            c = 65535;
        }
        switch (c) {
            case 0:
                return SVG.Style.RenderQuality.auto;
            case 1:
                return SVG.Style.RenderQuality.optimizeQuality;
            case 2:
                return SVG.Style.RenderQuality.optimizeSpeed;
            default:
                return null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:102:0x02f2, code lost:
        return r9;
     */
    /* renamed from: D */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static SVG.C0182u m4648D(String str) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        float f9;
        float f10;
        C0197f fVar = new C0197f(str);
        SVG.C0182u uVar = new SVG.C0182u();
        if (fVar.m4524f()) {
            return uVar;
        }
        int intValue = fVar.m4519k().intValue();
        int i = 109;
        if (intValue != 77 && intValue != 109) {
            return uVar;
        }
        int i2 = intValue;
        float f11 = 0.0f;
        float f12 = 0.0f;
        float f13 = 0.0f;
        float f14 = 0.0f;
        float f15 = 0.0f;
        float f16 = 0.0f;
        while (true) {
            fVar.m4523g();
            int i3 = 108;
            switch (i2) {
                case 65:
                case 97:
                    float i4 = fVar.m4521i();
                    float a = fVar.m4532a(i4);
                    float a2 = fVar.m4532a(a);
                    Boolean a3 = fVar.m4529a(Float.valueOf(a2));
                    Boolean a4 = fVar.m4529a((Object) a3);
                    float a5 = fVar.m4530a(a4);
                    float a6 = fVar.m4532a(a5);
                    if (!Float.isNaN(a6) && i4 >= 0.0f && a >= 0.0f) {
                        if (i2 == 97) {
                            f = a5 + f11;
                            a6 += f13;
                        } else {
                            f = a5;
                        }
                        uVar.mo4371a(i4, a, a2, a3.booleanValue(), a4.booleanValue(), f, a6);
                        f11 = f;
                        f12 = f11;
                        f13 = a6;
                        f14 = f13;
                        break;
                    }
                    break;
                case 67:
                case 99:
                    float i5 = fVar.m4521i();
                    float a7 = fVar.m4532a(i5);
                    float a8 = fVar.m4532a(a7);
                    float a9 = fVar.m4532a(a8);
                    float a10 = fVar.m4532a(a9);
                    float a11 = fVar.m4532a(a10);
                    if (!Float.isNaN(a11)) {
                        if (i2 == 99) {
                            f3 = a10 + f11;
                            f2 = a11 + f13;
                            i5 += f11;
                            f6 = a7 + f13;
                            f5 = a8 + f11;
                            f4 = a9 + f13;
                        } else {
                            f6 = a7;
                            f4 = a9;
                            f3 = a10;
                            f2 = a11;
                            f5 = a8;
                        }
                        uVar.mo4372a(i5, f6, f5, f4, f3, f2);
                        f12 = f5;
                        f14 = f4;
                        f11 = f3;
                        f13 = f2;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 72:
                case 104:
                    f12 = fVar.m4521i();
                    if (!Float.isNaN(f12)) {
                        if (i2 == 104) {
                            f12 += f11;
                        }
                        uVar.mo4369b(f12, f13);
                        f11 = f12;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 76:
                case 108:
                    f12 = fVar.m4521i();
                    f14 = fVar.m4532a(f12);
                    if (!Float.isNaN(f14)) {
                        if (i2 == 108) {
                            f12 += f11;
                            f14 += f13;
                        }
                        uVar.mo4369b(f12, f14);
                        f11 = f12;
                        f13 = f14;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 77:
                case 109:
                    f12 = fVar.m4521i();
                    f14 = fVar.m4532a(f12);
                    if (!Float.isNaN(f14)) {
                        if (i2 == i && !uVar.m4669a()) {
                            f12 += f11;
                            f14 += f13;
                        }
                        uVar.mo4374a(f12, f14);
                        if (i2 != i) {
                            i3 = 76;
                        }
                        f11 = f12;
                        f15 = f11;
                        f13 = f14;
                        f16 = f13;
                        i2 = i3;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                    break;
                case 81:
                case 113:
                    f12 = fVar.m4521i();
                    f14 = fVar.m4532a(f12);
                    float a12 = fVar.m4532a(f14);
                    float a13 = fVar.m4532a(a12);
                    if (!Float.isNaN(a13)) {
                        if (i2 == 113) {
                            a12 += f11;
                            a13 += f13;
                            f12 += f11;
                            f14 += f13;
                        }
                        uVar.mo4373a(f12, f14, a12, a13);
                        f11 = a12;
                        f13 = a13;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 83:
                case 115:
                    float f17 = (f11 * 2.0f) - f12;
                    float f18 = (2.0f * f13) - f14;
                    float i6 = fVar.m4521i();
                    float a14 = fVar.m4532a(i6);
                    float a15 = fVar.m4532a(a14);
                    float a16 = fVar.m4532a(a15);
                    if (!Float.isNaN(a16)) {
                        if (i2 == 115) {
                            f8 = a15 + f11;
                            f7 = a16 + f13;
                            f10 = i6 + f11;
                            f9 = a14 + f13;
                        } else {
                            f9 = a14;
                            f8 = a15;
                            f7 = a16;
                            f10 = i6;
                        }
                        uVar.mo4372a(f17, f18, f10, f9, f8, f7);
                        f12 = f10;
                        f14 = f9;
                        f11 = f8;
                        f13 = f7;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 84:
                case 116:
                    float f19 = (f11 * 2.0f) - f12;
                    float f20 = (2.0f * f13) - f14;
                    float i7 = fVar.m4521i();
                    float a17 = fVar.m4532a(i7);
                    if (!Float.isNaN(a17)) {
                        if (i2 == 116) {
                            i7 += f11;
                            a17 += f13;
                        }
                        uVar.mo4373a(f19, f20, i7, a17);
                        f11 = i7;
                        f13 = a17;
                        f12 = f19;
                        f14 = f20;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 86:
                case 118:
                    f14 = fVar.m4521i();
                    if (!Float.isNaN(f14)) {
                        if (i2 == 118) {
                            f14 += f13;
                        }
                        uVar.mo4369b(f11, f14);
                        f13 = f14;
                        break;
                    } else {
                        Log.e("SVGParser", "Bad path coords for " + ((char) i2) + " path segment");
                        return uVar;
                    }
                case 90:
                case 122:
                    uVar.mo4370b();
                    f11 = f15;
                    f12 = f11;
                    f13 = f16;
                    f14 = f13;
                    break;
                default:
                    return uVar;
            }
            fVar.m4522h();
            if (fVar.m4524f()) {
                return uVar;
            }
            if (fVar.m4510t()) {
                i2 = fVar.m4519k().intValue();
                i = 109;
            } else {
                i = 109;
            }
        }
    }

    /* renamed from: E */
    private static Set<String> m4647E(String str) {
        C0197f fVar = new C0197f(str);
        HashSet hashSet = new HashSet();
        while (!fVar.m4524f()) {
            String o = fVar.m4515o();
            if (o.startsWith("http://www.w3.org/TR/SVG11/feature#")) {
                hashSet.add(o.substring(35));
            } else {
                hashSet.add("UNSUPPORTED");
            }
            fVar.m4523g();
        }
        return hashSet;
    }

    /* renamed from: F */
    private static Set<String> m4646F(String str) {
        C0197f fVar = new C0197f(str);
        HashSet hashSet = new HashSet();
        while (!fVar.m4524f()) {
            String o = fVar.m4515o();
            int indexOf = o.indexOf(45);
            if (indexOf != -1) {
                o = o.substring(0, indexOf);
            }
            hashSet.add(new Locale(o, "", "").getLanguage());
            fVar.m4523g();
        }
        return hashSet;
    }

    /* renamed from: G */
    private static Set<String> m4645G(String str) {
        C0197f fVar = new C0197f(str);
        HashSet hashSet = new HashSet();
        while (!fVar.m4524f()) {
            hashSet.add(fVar.m4515o());
            fVar.m4523g();
        }
        return hashSet;
    }

    /* renamed from: a */
    private static String m4601a(String str, String str2) {
        if (str.equals(ViewProps.NONE) || !str.startsWith("url(")) {
            return null;
        }
        if (str.endsWith(")")) {
            return str.substring(4, str.length() - 1).trim();
        }
        return str.substring(4).trim();
    }

    /* renamed from: B */
    private void m4650B(Attributes attributes) throws SVGParseException {
        m4597a("<style>", new Object[0]);
        if (this.f485b != null) {
            String str = "all";
            boolean z = true;
            for (int i = 0; i < attributes.getLength(); i++) {
                String trim = attributes.getValue(i).trim();
                switch (SVGAttr.fromString(attributes.getLocalName(i))) {
                    case type:
                        z = trim.equals("text/css");
                        break;
                    case media:
                        str = trim;
                        break;
                }
            }
            if (!z || !CSSParser.m4764a(str, CSSParser.MediaType.screen)) {
                this.f486c = true;
                this.f487d = 1;
                return;
            }
            this.f491h = true;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: H */
    private void m4644H(String str) {
        this.f484a.m4716a(new CSSParser(CSSParser.MediaType.screen, CSSParser.Source.Document).m4765a(str));
    }
}
