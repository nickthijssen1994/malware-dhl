package com.jingdong.sdk.uuid;

import android.content.Context;
import android.text.TextUtils;
import com.p051jd.fireeye.common.C1456b;
import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

/* loaded from: classes.dex */
public class AesCrypto {
    private static String AES_KEY = null;
    private static final String HEX = "0123456789ABCDEF";
    private static final int ITERATION_COUNT = 10;
    private static final int KEY_LENGTH = 128;
    private static byte[] rawKey;

    /* renamed from: com.jingdong.sdk.uuid.AesCrypto$a */
    /* loaded from: classes.dex */
    public static class C2254a {
        private C2254a() {
        }

        /* renamed from: a */
        public static C2254a m57a() {
            return new C2254a();
        }

        /* renamed from: a */
        public byte[] m56a(Context context) {
            byte[] bArr = new byte[16];
            byte[] bytes = "!q@w".getBytes();
            byte[] bytes2 = context.getResources().getString(R$string.privateKeyP2).getBytes();
            byte[] a = C2257a.m52a("JXReeQ==");
            byte[] bArr2 = new byte[bytes.length];
            for (int i = 0; i < bytes.length; i++) {
                bArr2[i] = (byte) (((bytes[i] + bytes2[i]) + a[i]) / 3);
            }
            System.arraycopy(bytes, 0, bArr, 0, 4);
            System.arraycopy(bytes2, 0, bArr, 4, 4);
            System.arraycopy(a, 0, bArr, 8, 4);
            System.arraycopy(bArr2, 0, bArr, 12, 4);
            return bArr;
        }
    }

    private static void appendHex(StringBuffer stringBuffer, byte b) {
        stringBuffer.append(HEX.charAt((b >> 4) & 15));
        stringBuffer.append(HEX.charAt(b & 15));
    }

    public static String decrypt(Context context, String str) {
        try {
            getAesKey(context);
            return new String(decrypt(getRawKey(context, AES_KEY), toByte(str)));
        } catch (Throwable unused) {
            return "";
        }
    }

    private static byte[] decrypt(byte[] bArr, byte[] bArr2) {
        IvParameterSpec ivParameterSpec = new IvParameterSpec(rawKey);
        SecretKeySpec secretKeySpec = new SecretKeySpec(bArr, C1456b.f2600a);
        Cipher instance = Cipher.getInstance("AES/CBC/PKCS5PADDING");
        instance.init(2, secretKeySpec, ivParameterSpec);
        return instance.doFinal(bArr2);
    }

    public static String encrypt(Context context, String str) {
        try {
            getAesKey(context);
            return toHex(encrypt(getRawKey(context, AES_KEY), str.getBytes()));
        } catch (Throwable unused) {
            return null;
        }
    }

    private static byte[] encrypt(byte[] bArr, byte[] bArr2) {
        IvParameterSpec ivParameterSpec = new IvParameterSpec(rawKey);
        SecretKeySpec secretKeySpec = new SecretKeySpec(bArr, C1456b.f2600a);
        Cipher instance = Cipher.getInstance("AES/CBC/PKCS5PADDING");
        instance.init(1, secretKeySpec, ivParameterSpec);
        return instance.doFinal(bArr2);
    }

    public static void getAesKey(Context context) {
        if (TextUtils.isEmpty(AES_KEY)) {
            AES_KEY = context.getString(R$string.aes_seed);
        }
    }

    private static byte[] getRawKey(Context context, String str) {
        if (context == null) {
            return new byte[1];
        }
        byte[] bArr = rawKey;
        if (bArr != null) {
            return bArr;
        }
        rawKey = new SecretKeySpec(SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1").generateSecret(new PBEKeySpec(str.toCharArray(), C2254a.m57a().m56a(context), 10, 128)).getEncoded(), C1456b.f2600a).getEncoded();
        return rawKey;
    }

    private static byte[] toByte(String str) {
        int length = str.length() / 2;
        byte[] bArr = new byte[length];
        for (int i = 0; i < length; i++) {
            int i2 = i * 2;
            bArr[i] = Integer.valueOf(str.substring(i2, i2 + 2), 16).byteValue();
        }
        return bArr;
    }

    private static String toHex(byte[] bArr) {
        if (bArr == null) {
            return "";
        }
        StringBuffer stringBuffer = new StringBuffer(bArr.length * 2);
        for (byte b : bArr) {
            appendHex(stringBuffer, b);
        }
        return stringBuffer.toString();
    }
}
