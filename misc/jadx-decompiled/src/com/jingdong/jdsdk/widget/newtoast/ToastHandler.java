package com.jingdong.jdsdk.widget.newtoast;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.widget.Toast;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;

/* loaded from: classes.dex */
final class ToastHandler extends Handler {
    private static final int DELAY_TIMEOUT = 300;
    static final int LONG_DURATION_TIMEOUT = 3500;
    private static final int MAX_TOAST_CAPACITY = 3;
    static final int SHORT_DURATION_TIMEOUT = 2000;
    private static final int TYPE_CANCEL = 3;
    private static final int TYPE_CONTINUE = 2;
    private static final int TYPE_SHOW = 1;
    private volatile boolean isShow;
    private volatile Queue<CharSequence> mQueue = new ArrayBlockingQueue(3);
    private final Toast mToast;

    ToastHandler(Toast toast) {
        super(Looper.getMainLooper());
        this.mToast = toast;
    }

    private static int getToastDuration(CharSequence charSequence) {
        if (charSequence.length() > 20) {
            return LONG_DURATION_TIMEOUT;
        }
        return 2000;
    }

    void add(CharSequence charSequence) {
        if ((this.mQueue.isEmpty() || !this.mQueue.contains(charSequence)) && !this.mQueue.offer(charSequence)) {
            this.mQueue.poll();
            this.mQueue.offer(charSequence);
        }
    }

    void cancel() {
        if (this.isShow) {
            this.isShow = false;
            sendEmptyMessage(3);
        }
    }

    @Override // android.os.Handler
    public void handleMessage(Message message) {
        switch (message.what) {
            case 1:
                CharSequence peek = this.mQueue.peek();
                if (peek != null) {
                    this.mToast.setText(peek);
                    this.mToast.show();
                    sendEmptyMessageDelayed(2, (long) (getToastDuration(peek) + 300));
                    return;
                }
                break;
            case 2:
                this.mQueue.poll();
                if (!this.mQueue.isEmpty()) {
                    sendEmptyMessage(1);
                    return;
                }
                break;
            case 3:
                this.isShow = false;
                this.mQueue.clear();
                this.mToast.cancel();
                return;
            default:
                return;
        }
        this.isShow = false;
    }

    void show() {
        if (!this.isShow) {
            this.isShow = true;
            sendEmptyMessageDelayed(1, 300);
        }
    }
}
