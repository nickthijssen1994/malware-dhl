package com.jingdong.common.share;

import android.app.Activity;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.TranslateAnimation;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.drawable.RoundedBitmapDrawable;
import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;
import com.alibaba.fastjson.asm.Opcodes;
import com.facebook.common.util.UriUtil;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.appshare.R;
import com.jingdong.appshare.R$drawable;
import com.jingdong.appshare.R$string;
import com.jingdong.common.entity.ShareInfo;
import com.jingdong.common.permission.PermissionManager;
import com.jingdong.common.unification.statusbar.IStatusController;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import com.jingdong.common.utils.FileService;
import com.jingdong.common.utils.JdSdk;
import com.jingdong.common.utils.QQUtil;
import com.jingdong.common.utils.ShareCallbackListenerParcel;
import com.jingdong.common.utils.ShareUtil;
import com.jingdong.common.utils.WeiboUtil;
import com.jingdong.common.utils.WeixinUtil;
import com.jingdong.jdsdk.widget.JDToast;
import com.jingdong.sdk.jdtoast.ToastUtils;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.utils.DPIUtil;
import com.p051jd.framework.network.dialing.DialingExecutor;
import com.sina.weibo.sdk.api.share.BaseResponse;
import com.sina.weibo.sdk.api.share.IWeiboHandler;
import com.tencent.tauth.Tencent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import pub.devrel.easypermissions.EasyPermissions;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ShareActivity extends AppCompatActivity implements IStatusController, IWeiboHandler.Response, EasyPermissions.PermissionCallbacks {
    private static final int BYTE_LENGTH;
    private static final int BYTE_LENGTH_BIG;
    private static final int BYTE_LENGTH_MP;
    private static final String CANCEL;
    private static final String CLICK_SHARE_VALUE_HB;
    private static final float IMAGE_SIZE;
    private static final float IMAGE_SIZE_BIG;
    private static final float IMAGE_SIZE_MP;
    private static final String SHARE_BIG_IMAGE_NAME;
    public static final int SHARE_PERMISSION_CODE;
    private static final String TAG;
    private int mAction;
    private Bitmap mBitmapProduct;
    private String mBitmapSavedPath;
    private Bitmap mBitmapSubLogo;
    private ShareUtil.CallbackListener mCallbackListener;
    private List<Map<String, Object>> mChannelSet;
    private ShareUtil.ClickCallbackListener mClickCallbackListener;
    private long mDoShareMillis;
    private long mFinishMillis;
    private boolean mIsTimeout;
    private long mLotteryActivityId;
    private String mLotteryBizId;
    private String mLotteryRuleContent;
    private int mLotteryRuleType;
    private String mLotterySourceType;
    private String mLotteryToken;
    private RelativeLayout mRootView;
    private Bitmap mShareBigBitmap;
    private String mShareEventFrom;
    private ShareInfo mShareInfo;
    private Runnable mShareRunnable;
    private String mSharedChannel;
    private String mSharedMsg;
    private int mSharedResult;
    private String mSharedUrl;
    private byte[] mThumbData;
    private Activity thisActivity;
    private String mSelectedChannel = "";
    private Runnable mTimeoutRunnable = new 1(this);
    private boolean mLotteryXViewOpening = false;
    private BaseUiListener mBaseUiListener = new BaseUiListener(this, (1) null);
    private Handler handler = new Handler(Looper.getMainLooper());

    public void setMta(String str, String str2, String str3) {
    }

    @Override // com.jingdong.common.unification.statusbar.IStatusController
    public String getServerConfigValue() {
        return null;
    }

    @Override // com.jingdong.common.unification.statusbar.IStatusController
    public boolean isDisplayCutout() {
        return false;
    }

    @Override // com.jingdong.common.unification.statusbar.IStatusController
    public int statusBarHint() {
        return 1;
    }

    @Override // com.jingdong.common.unification.statusbar.IStatusController
    public boolean statusBarTransparentEnable() {
        return false;
    }

    public Handler getHandler() {
        return this.handler;
    }

    public void post(Runnable runnable) {
        if (!isFinishing()) {
            this.handler.post(runnable);
        }
    }

    public void post(Runnable runnable, int i) {
        if (!isFinishing()) {
            this.handler.postDelayed(runnable, (long) i);
        }
    }

    public static final String getBigImgPath() {
        FileService.Directory directory = FileService.getDirectory(1);
        if (directory == null) {
            return "";
        }
        return directory.getPath() + "/" + SHARE_BIG_IMAGE_NAME;
    }

    /* JADX WARN: Multi-variable type inference failed */
    protected void onCreate(Bundle bundle) {
        Intent intent;
        boolean z;
        try {
            ShareActivity.super.onCreate(bundle);
            Log.d(TAG, "onCreate_start");
            if (Build.VERSION.SDK_INT < 26) {
                setRequestedOrientation(3);
            }
            overridePendingTransition(R.anim.nothing, R.anim.nothing);
            if (bundle != null) {
                try {
                    WeiboUtil.getWBShareApi().handleWeiboResponse(getIntent(), this);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            intent = getIntent();
        } catch (Throwable th) {
            th.printStackTrace();
        }
        if (intent == null) {
            ToastUtils.showToast(this.thisActivity, getString(R$string.share_setting_none));
            finish();
            return;
        }
        this.thisActivity = this;
        initData(intent);
        if (this.mAction == 3) {
            setResultMta();
            finish();
            return;
        }
        if (this.mShareInfo != null && (this.mShareInfo.getShareImageInfo() != null || (!TextUtils.isEmpty(this.mShareInfo.getUrl()) && this.mShareInfo.getUrl().startsWith(UriUtil.HTTP_SCHEME)))) {
            if (!JdSdk.getInstance().getIsCheckHost() || isUrlInWhiteList(this.mShareInfo.getUrl())) {
                ShareUtil.init(this.thisActivity);
                UnStatusBarTintUtil.defaultSetTranslucent(this);
                setContentView(R.layout.activity_share);
                if (UnStatusBarTintUtil.isEnable(this)) {
                    UnStatusBarTintUtil.setStatusBar4Base(this, statusBarHint());
                }
                this.mRootView = (RelativeLayout) findViewById(R.id.share_activity);
                this.mRootView.setOnClickListener(new 2(this));
                boolean z2 = this.mShareInfo.getChannelsList() != null && this.mShareInfo.getChannelsList().contains(ShareUtil.S_QRCODE);
                if (this.mShareInfo.getShareImageInfo() != null) {
                    if (TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().productUrl) && TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().logoUrl)) {
                        z = false;
                    }
                    z = true;
                } else {
                    z = false;
                }
                this.mChannelSet = ShareUtil.packChannels(this.mShareInfo.getChannelsList(), this.mShareInfo.getShareImageInfo() != null && z && z2, this.mAction == 4, false);
                setShareInfo();
                if (this.mAction == 1) {
                    if (this.mChannelSet.size() == 0) {
                        ToastUtils.showToast(this.thisActivity, getString(R$string.share_setting_none));
                        finish();
                        return;
                    }
                    showPanel();
                } else if (this.mAction == 4) {
                    if (this.mChannelSet.size() == 0) {
                        ToastUtils.showToast(this.thisActivity, getString(R$string.share_setting_none));
                        finish();
                        return;
                    }
                    showLotteryPanel();
                } else if (this.mAction != 2) {
                    finish();
                } else if (this.mChannelSet.size() != 1) {
                    ToastUtils.showToast(this.thisActivity, getString(R$string.share_setting_none));
                    finish();
                    return;
                } else {
                    this.mSelectedChannel = this.mChannelSet.get(0).get("channel").toString();
                    setMta("Share_SendDirect", this.mShareInfo.getUrl(), this.mSelectedChannel);
                    if (ShareUtil.S_QRCODE.equalsIgnoreCase(this.mSelectedChannel) || this.mShareInfo.getShareImageInfo() == null) {
                        doShare();
                    } else {
                        doShareImageDirect();
                    }
                }
                Log.d(TAG, "onCreate_end");
                UnStatusBarTintUtil.setStatusBarLightMode(this);
                return;
            }
            String hostCheckToast = JdSdk.getInstance().getHostCheckToast();
            if (TextUtils.isEmpty(hostCheckToast)) {
                ToastUtils.showToast(this.thisActivity, getString(R$string.share_host_setting_error));
            } else {
                ToastUtils.showToast(this.thisActivity, hostCheckToast);
            }
            finish();
            return;
        }
        ToastUtils.showToast(this.thisActivity, getString(R$string.share_setting_none));
        finish();
    }

    protected void onNewIntent(Intent intent) {
        try {
            ShareActivity.super.onNewIntent(intent);
            setIntent(intent);
            WeiboUtil.getWBShareApi().handleWeiboResponse(getIntent(), this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void onResume() {
        ShareActivity.super.onResume();
        if (!this.mLotteryXViewOpening) {
            Log.d(TAG, "onResume: " + this.mSharedResult);
            Log.d(TAG, "onResume: " + this);
            int i = this.mSharedResult;
            if (i != 0 && (i != 11 || TextUtils.isEmpty(this.mShareInfo.getCpsUrl()))) {
                dealResult();
                finish();
            } else if (this.mRootView.getChildCount() == 0 && (TextUtils.isEmpty(this.mSelectedChannel) || System.currentTimeMillis() > this.mDoShareMillis + 5000)) {
                finish();
            } else if (!TextUtils.isEmpty(this.mSelectedChannel) && !this.mSelectedChannel.equals(ShareUtil.S_QRCODE)) {
                finish();
            }
        }
    }

    public void onStop() {
        ShareActivity.super.onStop();
        Log.d(TAG, "onStop");
    }

    protected void onDestroy() {
        ShareActivity.super.onDestroy();
        Log.d(TAG, "onDestroy");
    }

    public void finish() {
        Log.d(TAG, "finish");
        if (this.mFinishMillis + 250 <= System.currentTimeMillis()) {
            this.mFinishMillis = System.currentTimeMillis();
            if (!closePanelAnimation(true)) {
                if (this.mSharedResult == 0) {
                    setResult(15, new Intent());
                }
                ShareActivity.super.finish();
            }
            overridePendingTransition(R.anim.nothing, R.anim.nothing);
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        if (QQUtil.getTencentInstance() != null) {
            QQUtil.getTencentInstance();
            Tencent.onActivityResultData(i, i2, intent, this.mBaseUiListener);
        }
    }

    public void onResponse(BaseResponse baseResponse) {
        switch (baseResponse.errCode) {
            case 0:
                setSharedResult(11, baseResponse.transaction, baseResponse.errMsg);
                return;
            case 1:
                setSharedResult(13, baseResponse.transaction, baseResponse.errMsg);
                return;
            case 2:
                setSharedResult(12, baseResponse.transaction, baseResponse.errMsg);
                return;
            default:
                return;
        }
    }

    public void setSharedResult(int i, String str, String str2) {
        this.mSharedResult = i;
        Log.d(TAG, "setSharedResult: " + this.mSharedResult);
        this.mSharedMsg = str2;
        splitTransaction(str);
        setResultMta();
    }

    private void initData(Intent intent) {
        ShareCallbackListenerParcel shareCallbackListenerParcel;
        this.mAction = intent.getIntExtra("action", 0);
        this.mSharedResult = intent.getIntExtra("result", 0);
        Log.d(TAG, "initData: " + this.mSharedResult);
        this.mLotteryRuleType = intent.getIntExtra("ruleType", 0);
        this.mLotteryActivityId = intent.getLongExtra("activityId", 0);
        if (intent.hasExtra("bizId")) {
            this.mLotteryBizId = intent.getStringExtra("bizId");
        }
        if (intent.hasExtra("sourceType")) {
            this.mLotterySourceType = intent.getStringExtra("sourceType");
        }
        if (intent.hasExtra("ruleContent")) {
            this.mLotteryRuleContent = intent.getStringExtra("ruleContent");
        }
        if (intent.hasExtra("transaction")) {
            splitTransaction(intent.getStringExtra("transaction"));
        }
        if (intent.hasExtra(RemoteMessageConst.MessageBody.MSG)) {
            this.mSharedMsg = intent.getStringExtra(RemoteMessageConst.MessageBody.MSG);
        }
        if (intent.hasExtra("shareInfo")) {
            this.mShareInfo = (ShareInfo) intent.getParcelableExtra("shareInfo");
        }
        if (intent.hasExtra("bytes")) {
            this.mThumbData = intent.getByteArrayExtra("bytes");
        }
        if (intent.hasExtra("parcel") && (shareCallbackListenerParcel = (ShareCallbackListenerParcel) intent.getParcelableExtra("parcel")) != null) {
            this.mCallbackListener = shareCallbackListenerParcel.getCallbackListener();
            this.mClickCallbackListener = shareCallbackListenerParcel.getClickCallbackListener();
        }
        ShareInfo shareInfo = this.mShareInfo;
        if (shareInfo != null && !TextUtils.isEmpty(shareInfo.getEventFrom())) {
            this.mShareEventFrom = this.mShareInfo.getEventFrom();
        }
    }

    private boolean isUrlInWhiteList(String str) {
        ArrayList<String> whiteHostList = JdSdk.getInstance().getWhiteHostList();
        if (whiteHostList == null || whiteHostList.size() <= 0) {
            return true;
        }
        Iterator<String> it = whiteHostList.iterator();
        while (it.hasNext()) {
            if (checkShareUrl(str, it.next())) {
                return true;
            }
        }
        return false;
    }

    private boolean checkShareUrl(String str, String str2) {
        Uri parse;
        if (TextUtils.isEmpty(str) || (parse = Uri.parse(str)) == null || !isHttpOrHttps(parse.getScheme())) {
            return false;
        }
        return checkPayHost(parse.getHost(), str2);
    }

    private boolean isHttpOrHttps(String str) {
        return UriUtil.HTTP_SCHEME.equalsIgnoreCase(str) || UriUtil.HTTPS_SCHEME.equalsIgnoreCase(str);
    }

    private boolean checkPayHost(String str, String str2) {
        if (str2 != null) {
            return str2.equalsIgnoreCase(str) || str.endsWith(str2);
        }
        return false;
    }

    private void splitTransaction(String str) {
        String[] splitTransaction = ShareUtil.splitTransaction(str);
        this.mSharedUrl = ShareUtil.urlDecode(splitTransaction[0]);
        this.mSharedChannel = splitTransaction[1];
    }

    private void setResultMta() {
        String str;
        String str2 = this.mSelectedChannel;
        ShareInfo shareInfo = this.mShareInfo;
        if (shareInfo == null || TextUtils.isEmpty(shareInfo.getCpsUrl())) {
            str = str2 + "_1_0";
        } else {
            str = str2 + "_2_" + this.mLotterySourceType;
        }
        Log.d(TAG, "setResultMta: " + this.mSharedResult);
        int i = this.mSharedResult;
        if (i == 11) {
            setMta("Share_ShareSuccess", this.mSharedUrl, str);
        } else if (i == 13) {
            setMta("Share_ShareCancel", this.mSharedUrl, str);
        } else if (i == 12) {
            setMta("Share_ShareFail", this.mSharedUrl, str);
        }
    }

    private void callbackForResult() {
        int i = this.mSharedResult;
        if (i == 11) {
            this.mCallbackListener.onComplete(this.mSharedChannel);
        } else if (i == 13) {
            this.mCallbackListener.onCancel();
        } else if (i == 12) {
            this.mCallbackListener.onError(this.mSharedMsg);
        }
    }

    private void dealResult() {
        Log.d(TAG, "dealResult: " + this);
        if (this.mDoShareMillis + 30000 >= System.currentTimeMillis()) {
            if (this.mCallbackListener != null) {
                callbackForResult();
                return;
            }
            Intent intent = new Intent();
            intent.putExtra("selectedChannel", this.mSelectedChannel);
            intent.putExtra("sharedChannel", this.mSharedChannel);
            intent.putExtra("sharedMsg", this.mSharedMsg);
            setResult(this.mSharedResult, intent);
        }
    }

    private void setShareInfo() {
        if (TextUtils.isEmpty(this.mShareInfo.getTitle())) {
            this.mShareInfo.setTitle(getString(R$string.app_name));
        }
        if (TextUtils.isEmpty(this.mShareInfo.getSummary())) {
            this.mShareInfo.setSummary(getString(R$string.share_defaut_summary));
        }
        if (TextUtils.isEmpty(this.mShareInfo.getWxcontent())) {
            ShareInfo shareInfo = this.mShareInfo;
            shareInfo.setWxcontent(shareInfo.getSummary());
        }
        if (TextUtils.isEmpty(this.mShareInfo.getWxMomentsContent())) {
            ShareInfo shareInfo2 = this.mShareInfo;
            shareInfo2.setWxMomentsContent(shareInfo2.getSummary());
        }
        if (!TextUtils.isEmpty(this.mShareInfo.getUrl())) {
            ShareInfo shareInfo3 = this.mShareInfo;
            shareInfo3.setUrl(shareInfo3.getUrl().replace("3.cn/Ceo4yH", "sq.jd.com/NvQBpa"));
        }
        ShareInfo shareInfo4 = this.mShareInfo;
        shareInfo4.setTransaction(ShareUtil.urlEncode(shareInfo4.getUrl()));
    }

    private void showPanel() {
        showPanelAnimation(R.layout.share_layout);
        findViewById(R.id.share_layout_cancel).setOnClickListener(new 3(this));
        GridView gridView = (GridView) findViewById(R.id.share_channels);
        List<Map<String, Object>> list = this.mChannelSet;
        int i = 4;
        if (list == null || list.size() >= 4) {
            if (DPIUtil.getWidth(this.thisActivity.getApplication()) > DPIUtil.getHeight(this.thisActivity.getApplication())) {
                i = 5;
            }
            gridView.setNumColumns(i);
        } else {
            gridView.setNumColumns(this.mChannelSet.size());
        }
        gridView.setAdapter((ListAdapter) new ChannelsAdapter(this));
        gridView.setOnItemClickListener(new 4(this));
        setMta("Share_SharePanelPop", this.mShareInfo.getUrl(), "1_0");
    }

    private void postShowShareBigImgPanel() {
        post(new 5(this), DialingExecutor.LOCAL_DNS_DAILING_TIMEOUT);
    }

    public void showShareBigImgPanel() {
        if (this.mShareBigBitmap != null) {
            this.mSelectedChannel = "";
            showPanelAnimation(R.layout.share_layout_image);
            findViewById(R.id.share_layout_image).setOnClickListener(new 6(this));
            findViewById(R.id.share_image_cancel).setOnClickListener(new 7(this));
            findViewById(R.id.share_scroll_width).setOnTouchListener(new 8(this));
            findViewById(R.id.share_scroll_heigh).setOnTouchListener(new 9(this));
            ImageView imageView = (ImageView) findViewById(R.id.share_big_img_heigh);
            ImageView imageView2 = (ImageView) findViewById(R.id.share_big_img_width);
            if (this.mShareInfo.getShareImageInfo() != null) {
                String str = this.mShareInfo.getShareImageInfo().imageContentMode;
                if (str == null) {
                    findViewById(R.id.share_scroll_width).setVisibility(8);
                    findViewById(R.id.share_scroll_heigh).setVisibility(0);
                    if (Build.VERSION.SDK_INT < 21) {
                        imageView.setImageDrawable(getRoundedDrawable());
                    } else {
                        imageView.setImageBitmap(this.mShareBigBitmap);
                    }
                } else if (str.equals(ShareUtil.WIDTH_MODE)) {
                    findViewById(R.id.share_scroll_heigh).setVisibility(8);
                    findViewById(R.id.share_scroll_width).setVisibility(0);
                    if (Build.VERSION.SDK_INT < 21) {
                        imageView2.setImageDrawable(getRoundedDrawable());
                    } else {
                        imageView2.setImageBitmap(this.mShareBigBitmap);
                    }
                } else {
                    findViewById(R.id.share_scroll_width).setVisibility(8);
                    findViewById(R.id.share_scroll_heigh).setVisibility(0);
                    if (Build.VERSION.SDK_INT < 21) {
                        imageView.setImageDrawable(getRoundedDrawable());
                    } else {
                        imageView.setImageBitmap(this.mShareBigBitmap);
                    }
                }
            }
            this.mChannelSet = ShareUtil.packChannels(Arrays.asList(ShareUtil.S_WX_FRIENDS, ShareUtil.S_WX_MOMENTS), false, false, true);
            GridView gridView = (GridView) findViewById(R.id.share_channels);
            gridView.setAdapter((ListAdapter) new ChannelsAdapter(this));
            gridView.setOnItemClickListener(new 10(this));
        }
    }

    private RoundedBitmapDrawable getRoundedDrawable() {
        RoundedBitmapDrawable create = RoundedBitmapDrawableFactory.create(this.thisActivity.getResources(), this.mShareBigBitmap);
        create.setCornerRadius(8.0f);
        return create;
    }

    private void showLotteryPanel() {
        showPanelAnimation(R.layout.share_layout_lottery);
        findViewById(R.id.share_lottery_rule).setOnClickListener(new 11(this));
        findViewById(R.id.share_layout_cancel).setOnClickListener(new 12(this));
        GridView gridView = (GridView) findViewById(R.id.share_channels);
        gridView.setNumColumns(DPIUtil.getWidth(this.thisActivity.getApplication()) > DPIUtil.getHeight(this.thisActivity.getApplication()) ? 5 : 4);
        gridView.setAdapter((ListAdapter) new ChannelsAdapter(this));
        gridView.setOnItemClickListener(new 13(this));
        if (!TextUtils.isEmpty(this.mLotteryRuleContent)) {
            ((TextView) findViewById(R.id.share_lottery_content)).setText(this.mLotteryRuleContent);
        }
        String url = this.mShareInfo.getUrl();
        setMta("Share_SharePanelPop", url, "2_" + this.mLotterySourceType);
    }

    private void showPanelAnimation(int i) {
        TranslateAnimation translateAnimation = new TranslateAnimation(1, 0.0f, 1, 0.0f, 1, 1.0f, 1, 0.0f);
        translateAnimation.setFillAfter(true);
        translateAnimation.setDuration(200);
        View inflate = getLayoutInflater().inflate(i, (ViewGroup) null);
        this.mRootView.addView(inflate);
        inflate.startAnimation(translateAnimation);
    }

    private boolean closePanelAnimation(boolean z) {
        RelativeLayout relativeLayout = this.mRootView;
        if (relativeLayout == null || relativeLayout.getChildCount() != 1) {
            return false;
        }
        TranslateAnimation translateAnimation = new TranslateAnimation(1, 0.0f, 1, 0.0f, 1, 0.0f, 1, 1.0f);
        translateAnimation.setFillAfter(true);
        translateAnimation.setDuration(200);
        translateAnimation.setAnimationListener(new 14(this, z));
        post(new 15(this, translateAnimation));
        return true;
    }

    public void onChannelItemClick(int i, String str, String str2) {
        closePanelAnimation(false);
        if (this.mChannelSet.size() > i) {
            this.mSelectedChannel = this.mChannelSet.get(i).get("channel").toString();
        }
        ShareUtil.ClickCallbackListener clickCallbackListener = this.mClickCallbackListener;
        if (clickCallbackListener != null) {
            clickCallbackListener.onClick(str + this.mSelectedChannel, this.mShareEventFrom);
        }
        if (ShareUtil.S_WX_FRIENDS.equals(this.mSelectedChannel) && "Share_".equals(str)) {
            String str3 = str2 + "_";
            StringBuilder sb = new StringBuilder();
            sb.append(str3);
            sb.append(TextUtils.isEmpty(this.mShareInfo.getMpId()) ? "1" : "2");
            str2 = sb.toString();
        }
        setMta(str + this.mSelectedChannel, this.mShareInfo.getUrl(), str2);
    }

    public void doShare() {
        Log.d(TAG, "doshare: " + this);
        this.mDoShareMillis = System.currentTimeMillis();
        if (ShareUtil.S_WX_FRIENDS.equals(this.mSelectedChannel)) {
            if (WeixinUtil.check()) {
                this.mShareRunnable = new 16(this);
                shareToDo();
                return;
            }
            shareBlock();
        } else if (ShareUtil.S_WX_MOMENTS.equals(this.mSelectedChannel)) {
            if (WeixinUtil.check()) {
                this.mShareRunnable = new 17(this);
                shareToDo();
                return;
            }
            shareBlock();
        } else if (ShareUtil.S_QQ_FRIENDS.equals(this.mSelectedChannel)) {
            if (QQUtil.check()) {
                BaseUiListener baseUiListener = this.mBaseUiListener;
                baseUiListener.transaction = this.mShareInfo.getTransaction() + ShareUtil.SEPARATOR_SIGN + ShareUtil.S_QQ_FRIENDS;
                QQUtil.shareToQQ(this.thisActivity, this.mShareInfo, this.mBaseUiListener);
                return;
            }
            shareBlock();
        } else if (ShareUtil.S_QQ_ZONE.equals(this.mSelectedChannel)) {
            if (QQUtil.check()) {
                BaseUiListener baseUiListener2 = this.mBaseUiListener;
                baseUiListener2.transaction = this.mShareInfo.getTransaction() + ShareUtil.SEPARATOR_SIGN + ShareUtil.S_QQ_ZONE;
                QQUtil.shareToQZone(this.thisActivity, this.mShareInfo, this.mBaseUiListener);
                return;
            }
            shareBlock();
        } else if (ShareUtil.S_SINA_WEIBO.equals(this.mSelectedChannel)) {
            if (WeiboUtil.check()) {
                this.mShareRunnable = new 18(this);
                shareToDo();
                return;
            }
            shareBlock();
        } else if (ShareUtil.S_COPY_URL.equals(this.mSelectedChannel)) {
            ((ClipboardManager) getApplicationContext().getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("Label", ShareUtil.getShareUrl(this.mShareInfo.getUrl(), ShareUtil.S_COPY_URL)));
            ToastUtils.showToast(this.thisActivity, getString(R$string.share_copy_success));
            finish();
        } else if (!ShareUtil.S_QRCODE.equals(this.mSelectedChannel)) {
            finish();
        } else if (this.mShareInfo.getShareImageInfo() == null || (TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().productUrl) && TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().productPath) && TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directUrl) && TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directContent) && TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directPath))) {
            ToastUtils.showToast(this.thisActivity, getString(R$string.share_setting_none));
            finish();
        } else {
            this.mIsTimeout = false;
            if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directPath)) {
                this.mBitmapSavedPath = this.mShareInfo.getShareImageInfo().directPath;
                loadLocalBitmap();
            } else if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directContent)) {
                getImageFromBase64(this.mShareInfo.getShareImageInfo().directContent);
            } else {
                post(this.mTimeoutRunnable, 6000);
                if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directUrl)) {
                    downloadImage(ShareUtil.urlDecode(this.mShareInfo.getShareImageInfo().directUrl), 3);
                    return;
                }
                if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().productPath)) {
                    this.mBitmapProduct = getBitmapFromFile(this.mShareInfo.getShareImageInfo().productPath, IMAGE_SIZE_BIG);
                    onDownloadImageComplete();
                } else {
                    downloadImage(ShareUtil.urlDecode(this.mShareInfo.getShareImageInfo().productUrl), 2);
                }
                downloadImage(ShareUtil.urlDecode(this.mShareInfo.getShareImageInfo().logoUrl), 1);
            }
        }
    }

    private void getImageFromBase64(String str) {
        Bitmap base64ToBitmap;
        if (!TextUtils.isEmpty(str) && (base64ToBitmap = base64ToBitmap(str)) != null && base64ToBitmap.getByteCount() >= 1) {
            this.mShareBigBitmap = base64ToBitmap;
            onDownloadImageCompleteDirect();
        }
    }

    private Bitmap base64ToBitmap(String str) {
        String str2 = "";
        if (str != null) {
            String[] split = str.split(",");
            if (split.length >= 2) {
                str2 = split[1];
            }
        }
        byte[] decode = Base64.decode(str2, 0);
        return BitmapFactory.decodeByteArray(decode, 0, decode.length);
    }

    public void doShareImage() {
        if (TextUtils.isEmpty(this.mBitmapSavedPath)) {
            ToastUtils.showToast(this.thisActivity, getString(R$string.share_qr_error));
            finish();
            return;
        }
        if (this.mShareBigBitmap == null) {
            this.mShareBigBitmap = getBitmapFromFile(this.mBitmapSavedPath, IMAGE_SIZE_BIG);
        }
        if (this.mShareBigBitmap == null || isThumbDataWrong()) {
            ToastUtils.showToast(this.thisActivity, getString(R$string.share_qr_error));
            finish();
            return;
        }
        this.mDoShareMillis = System.currentTimeMillis();
        if (ShareUtil.S_WX_FRIENDS.equals(this.mSelectedChannel)) {
            if (WeixinUtil.check()) {
                WeixinUtil.doWXShare(this.mShareInfo, true, this.mThumbData, getBitmap4Share());
            } else {
                shareBlock();
            }
        } else if (ShareUtil.S_WX_MOMENTS.equals(this.mSelectedChannel)) {
            if (WeixinUtil.check()) {
                WeixinUtil.doWXShare(this.mShareInfo, false, this.mThumbData, getBitmap4Share());
            } else {
                shareBlock();
            }
        } else if (!ShareUtil.S_QQ_FRIENDS.equals(this.mSelectedChannel)) {
            finish();
        } else if (QQUtil.check()) {
            BaseUiListener baseUiListener = this.mBaseUiListener;
            baseUiListener.transaction = this.mShareInfo.getTransaction() + ShareUtil.SEPARATOR_SIGN + ShareUtil.S_QQ_FRIENDS;
            QQUtil.shareToQQ(this.thisActivity, this.mShareInfo, this.mBitmapSavedPath, this.mBaseUiListener);
        } else {
            shareBlock();
        }
    }

    public void doShareLottery() {
        this.mDoShareMillis = System.currentTimeMillis();
        if (ShareUtil.S_WX_FRIENDS.equals(this.mSelectedChannel)) {
            if (WeixinUtil.check()) {
                this.mShareRunnable = new 19(this);
            } else {
                shareBlock();
            }
        } else if (ShareUtil.S_WX_MOMENTS.equals(this.mSelectedChannel)) {
            if (WeixinUtil.check()) {
                this.mShareRunnable = new 20(this);
            } else {
                shareBlock();
            }
        } else if (ShareUtil.S_QQ_FRIENDS.equals(this.mSelectedChannel)) {
            if (QQUtil.check()) {
                this.mShareRunnable = new 21(this);
            } else {
                shareBlock();
            }
        } else if (!ShareUtil.S_QQ_ZONE.equals(this.mSelectedChannel)) {
        } else {
            if (QQUtil.check()) {
                this.mShareRunnable = new 22(this);
            } else {
                shareBlock();
            }
        }
    }

    private void doShareImageDirect() {
        if (!this.mSelectedChannel.equalsIgnoreCase(ShareUtil.S_WX_FRIENDS) && !this.mSelectedChannel.equalsIgnoreCase(ShareUtil.S_WX_MOMENTS) && !this.mSelectedChannel.equalsIgnoreCase(ShareUtil.S_QQ_FRIENDS)) {
            finish();
        } else if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directPath)) {
            this.mBitmapSavedPath = this.mShareInfo.getShareImageInfo().directPath;
            this.mShareBigBitmap = getBitmapFromFile(this.mBitmapSavedPath, IMAGE_SIZE_BIG);
            setBigImgThumbData();
            doShareImage();
        } else if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directUrl)) {
            this.mDoShareMillis = System.currentTimeMillis();
            post(this.mTimeoutRunnable, 6000);
            downloadImage(ShareUtil.urlDecode(this.mShareInfo.getShareImageInfo().directUrl), 3);
        } else if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().directContent)) {
            this.mDoShareMillis = System.currentTimeMillis();
            post(this.mTimeoutRunnable, 6000);
            getImageFromBase64(this.mShareInfo.getShareImageInfo().directContent);
        } else {
            finish();
        }
    }

    private void shareBlock() {
        this.mSharedResult = 14;
        this.mSharedMsg = "check failed";
        dealResult();
        finish();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void checkPermission() {
        String[] strArr = {"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"};
        if (!PermissionManager.checkPermission(this, strArr)) {
            PermissionManager.requestPermission(this, getResources().getString(R$string.permission_dialog_msg_app_necessary_setting, "存储空间"), 111, strArr);
        } else {
            shareToDo();
        }
    }

    private void shareToDo() {
        if (this.mShareRunnable != null) {
            if (!isThumbDataWrong()) {
                this.mShareRunnable.run();
            } else if (isShareToMpUseLocalIcon()) {
                shareToMpWithLocalThumbData();
            } else if (TextUtils.isEmpty(this.mShareInfo.getIconUrl())) {
                shareWithDefaultThumbData();
            } else {
                tryShareWithNetThumbData();
            }
        }
    }

    private void shareToMpWithLocalThumbData() {
        Bitmap bitmapFromFile = getBitmapFromFile(this.mShareInfo.getMpLocalIconPath(), IMAGE_SIZE_MP);
        if (bitmapFromFile != null) {
            this.mThumbData = compressBitmap2Bytes(bitmapFromFile, 131072);
            Runnable runnable = this.mShareRunnable;
            if (runnable != null) {
                runnable.run();
                return;
            }
            return;
        }
        shareWithDefaultThumbData();
    }

    public void shareWithDefaultThumbData() {
        Drawable drawable = ContextCompat.getDrawable(this.thisActivity, (this.mShareInfo.getEventFrom() != null ? this.mShareInfo.getEventFrom() : "").equals(CLICK_SHARE_VALUE_HB) ? R$drawable.share_wx_hb : R$drawable.share_default_icon);
        if (drawable != null) {
            this.mThumbData = compressBitmap2Bytes(((BitmapDrawable) drawable).getBitmap(), BYTE_LENGTH);
            this.mShareRunnable.run();
        }
    }

    private void tryShareWithNetThumbData() {
        try {
            shareWithNetThumbData();
        } catch (Throwable th) {
            OKLog.m129e(TAG, th);
            shareWithDefaultThumbData();
        }
    }

    private void shareWithNetThumbData() {
        ShooterOkhttp3Instrumentation.newCall(ShooterOkhttp3Instrumentation.newInstance(new OkHttpClient()), new Request.Builder().url((!isShareToMp() || TextUtils.isEmpty(this.mShareInfo.getMpIconUrl())) ? this.mShareInfo.getIconUrl() : this.mShareInfo.getMpIconUrl()).build()).enqueue(new 23(this));
    }

    private void downloadImage(String str, int i) {
        if (!TextUtils.isEmpty(str)) {
            ShooterOkhttp3Instrumentation.newCall(ShooterOkhttp3Instrumentation.newInstance(new OkHttpClient()), new Request.Builder().url(str).build()).enqueue(new 24(this, i));
        }
    }

    private Bitmap getBitmapFromFile(String str, float f) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(str, options);
        options.inSampleSize = (int) Math.ceil((double) (((float) options.outWidth) / f));
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeFile(str, options);
    }

    private Bitmap getBitmapFromByteArray(byte[] bArr, float f) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeByteArray(bArr, 0, bArr.length, options);
        options.inSampleSize = (int) Math.ceil((double) (((float) options.outWidth) / f));
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeByteArray(bArr, 0, bArr.length, options);
    }

    private Bitmap getBitmap4Share() {
        return getBitmapFromByteArray(compressBitmap2Bytes(this.mShareBigBitmap, BYTE_LENGTH_BIG), IMAGE_SIZE_BIG);
    }

    private Bitmap scaleBitmap(Bitmap bitmap, float f) {
        if (((float) bitmap.getWidth()) <= f) {
            return bitmap;
        }
        float width = f / ((float) bitmap.getWidth());
        Matrix matrix = new Matrix();
        matrix.postScale(width, width);
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
    }

    public byte[] compressBitmap2Bytes(Bitmap bitmap, int i) {
        byte[] bArr = new byte[0];
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        int i2 = 95;
        while (true) {
            if ((bArr.length == 0 || bArr.length > i) && i2 > 0) {
                byteArrayOutputStream.reset();
                bitmap.compress(Bitmap.CompressFormat.JPEG, i2, byteArrayOutputStream);
                bArr = byteArrayOutputStream.toByteArray();
                i2 -= 10;
            }
        }
        return bArr;
    }

    public void onDownloadImageCompleteDirect() {
        if (!this.mIsTimeout && this.mShareBigBitmap != null) {
            getHandler().removeCallbacks(this.mTimeoutRunnable);
            if (!saveShareBitmap()) {
                post(new 25(this), 1500);
                return;
            }
            setBigImgThumbData();
            if (!ShareUtil.S_QRCODE.equalsIgnoreCase(this.mSelectedChannel)) {
                doShareImage();
            } else {
                postShowShareBigImgPanel();
            }
        }
    }

    public void onDownloadImageComplete() {
        if (this.mShareInfo == null || TextUtils.isEmpty(this.mSelectedChannel) || !ShareUtil.S_QRCODE.equals(this.mSelectedChannel)) {
            return;
        }
        if ((TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().logoUrl) || this.mBitmapSubLogo != null) && this.mBitmapProduct != null && !this.mIsTimeout) {
            getHandler().removeCallbacks(this.mTimeoutRunnable);
            View createShareBigImgView = createShareBigImgView();
            if (createShareBigImgView == null || !saveBitmapFromView(createShareBigImgView)) {
                post(new 26(this), 1500);
                return;
            }
            setBigImgThumbData();
            postShowShareBigImgPanel();
        }
    }

    private View createShareBigImgView() {
        LinearLayout linearLayout = new LinearLayout(this.thisActivity);
        linearLayout.setLayoutParams(new ViewGroup.LayoutParams(DPIUtil.getWidth(this.thisActivity.getApplication()), -2));
        linearLayout.setOrientation(1);
        linearLayout.setBackgroundColor(-1);
        RelativeLayout relativeLayout = new RelativeLayout(this.thisActivity);
        relativeLayout.setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(this.thisActivity.getApplication()), calSizeFrom720(144)));
        relativeLayout.setPadding(calSizeFrom720(40), calSizeFrom720(50), calSizeFrom720(40), calSizeFrom720(40));
        linearLayout.addView(relativeLayout);
        ImageView imageView = new ImageView(this.thisActivity);
        imageView.setId(R.id.img_1);
        relativeLayout.addView(imageView);
        Bitmap bitmap = this.mBitmapSubLogo;
        if (bitmap == null || ((double) (((float) bitmap.getWidth()) / ((float) this.mBitmapSubLogo.getHeight()))) >= 4.26d) {
            imageView.setLayoutParams(new RelativeLayout.LayoutParams(calSizeFrom720(290), calSizeFrom720(54)));
            imageView.setImageDrawable(ContextCompat.getDrawable(this.thisActivity, R$drawable.share_qr_logo_long));
        } else {
            imageView.setLayoutParams(new RelativeLayout.LayoutParams(calSizeFrom720(Opcodes.I2C), calSizeFrom720(54)));
            imageView.setImageDrawable(ContextCompat.getDrawable(this.thisActivity, R$drawable.share_qr_logo_short));
            RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(calSizeFrom720(10), calSizeFrom720(10));
            layoutParams.leftMargin = calSizeFrom720(14);
            layoutParams.rightMargin = calSizeFrom720(14);
            layoutParams.topMargin = calSizeFrom720(22);
            layoutParams.addRule(1, R.id.img_1);
            TextView textView = new TextView(this.thisActivity);
            textView.setId(R.id.id_image);
            textView.setLayoutParams(layoutParams);
            textView.setBackgroundResource(R$drawable.button_b_02);
            relativeLayout.addView(textView);
            RelativeLayout.LayoutParams layoutParams2 = new RelativeLayout.LayoutParams((calSizeFrom720(54) * this.mBitmapSubLogo.getWidth()) / this.mBitmapSubLogo.getHeight(), calSizeFrom720(54));
            layoutParams2.addRule(1, R.id.id_image);
            ImageView imageView2 = new ImageView(this.thisActivity);
            imageView2.setLayoutParams(layoutParams2);
            imageView2.setScaleType(ImageView.ScaleType.FIT_CENTER);
            imageView2.setImageBitmap(this.mBitmapSubLogo);
            relativeLayout.addView(imageView2);
        }
        if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().slogan)) {
            RelativeLayout.LayoutParams layoutParams3 = new RelativeLayout.LayoutParams(-2, calSizeFrom720(42));
            layoutParams3.addRule(11, 1);
            layoutParams3.topMargin = calSizeFrom720(12);
            TextView textView2 = new TextView(this.thisActivity);
            textView2.setLayoutParams(layoutParams3);
            textView2.setSingleLine(true);
            textView2.setMaxWidth(calSizeFrom720(200));
            textView2.setText(this.mShareInfo.getShareImageInfo().slogan);
            textView2.setTextSize(0, (float) calSizeFrom720(28));
            textView2.setTextColor(-16777216);
            textView2.setGravity(16);
            textView2.setBackgroundResource(R$drawable.share_qr_slogan_bg);
            textView2.setPadding(calSizeFrom720(23), 0, calSizeFrom720(10), 0);
            relativeLayout.addView(textView2);
        }
        ImageView imageView3 = new ImageView(this.thisActivity);
        imageView3.setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(this.thisActivity.getApplication()), (DPIUtil.getWidth(this.thisActivity.getApplication()) * this.mBitmapProduct.getHeight()) / this.mBitmapProduct.getWidth()));
        imageView3.setScaleType(ImageView.ScaleType.FIT_CENTER);
        imageView3.setImageBitmap(this.mBitmapProduct);
        linearLayout.addView(imageView3);
        if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().productTitle)) {
            TextView textView3 = new TextView(this.thisActivity);
            textView3.setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(this.thisActivity.getApplication()), -2));
            textView3.setText(this.mShareInfo.getShareImageInfo().productTitle);
            textView3.setPadding(calSizeFrom720(40), calSizeFrom720(20), calSizeFrom720(40), 0);
            textView3.setTextSize(0, (float) calSizeFrom720(32));
            textView3.setTextColor(-16777216);
            textView3.setLineSpacing(0.0f, 1.3f);
            textView3.setMaxLines(5);
            textView3.setEllipsize(TextUtils.TruncateAt.END);
            linearLayout.addView(textView3);
        }
        if (!TextUtils.isEmpty(this.mShareInfo.getShareImageInfo().productDesc)) {
            TextView textView4 = new TextView(this.thisActivity);
            textView4.setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(this.thisActivity.getApplication()), -2));
            textView4.setText(this.mShareInfo.getShareImageInfo().productDesc);
            textView4.setPadding(calSizeFrom720(40), calSizeFrom720(20), calSizeFrom720(40), 0);
            textView4.setTextSize(0, (float) calSizeFrom720(30));
            textView4.setTextColor(-6316129);
            textView4.setLineSpacing(0.0f, 1.3f);
            textView4.setMaxLines(10);
            textView4.setEllipsize(TextUtils.TruncateAt.END);
            linearLayout.addView(textView4);
        }
        Bitmap createQRCode = ShareUtil.createQRCode(ShareUtil.getShareUrl(this.mShareInfo.getUrl(), ShareUtil.S_QRCODE));
        if (createQRCode == null) {
            return null;
        }
        LinearLayout.LayoutParams layoutParams4 = new LinearLayout.LayoutParams(calSizeFrom720(256), calSizeFrom720(256));
        layoutParams4.topMargin = calSizeFrom720(12);
        layoutParams4.bottomMargin = calSizeFrom720(6);
        layoutParams4.gravity = 17;
        ImageView imageView4 = new ImageView(this.thisActivity);
        imageView4.setLayoutParams(layoutParams4);
        imageView4.setScaleType(ImageView.ScaleType.FIT_CENTER);
        imageView4.setImageBitmap(createQRCode);
        linearLayout.addView(imageView4);
        LinearLayout.LayoutParams layoutParams5 = new LinearLayout.LayoutParams(-1, -2);
        layoutParams5.gravity = 17;
        TextView textView5 = new TextView(this.thisActivity);
        textView5.setLayoutParams(layoutParams5);
        textView5.setText(getString(R$string.share_look_detail));
        textView5.setPadding(0, calSizeFrom720(5), 0, 0);
        textView5.setGravity(17);
        textView5.setTextSize(0, (float) calSizeFrom720(26));
        textView5.setTextColor(-6316129);
        linearLayout.addView(textView5);
        TextView textView6 = new TextView(this.thisActivity);
        textView6.setLayoutParams(layoutParams5);
        textView6.setText(getString(R$string.share_download_app));
        textView6.setPadding(0, calSizeFrom720(5), 0, calSizeFrom720(50));
        textView6.setGravity(17);
        textView6.setTextSize(0, (float) calSizeFrom720(26));
        textView6.setTextColor(-6316129);
        linearLayout.addView(textView6);
        return linearLayout;
    }

    private int calSizeFrom720(int i) {
        return DPIUtil.getWidthByDesignValue720(this.thisActivity.getApplication(), i);
    }

    private boolean saveShareBitmap() {
        Bitmap bitmap = this.mShareBigBitmap;
        if (bitmap == null) {
            return false;
        }
        byte[] compressBitmap2Bytes = compressBitmap2Bytes(bitmap, BYTE_LENGTH_BIG);
        this.mBitmapSavedPath = getBigImgPath();
        return FileService.saveToSDCard(FileService.getDirectory(1), SHARE_BIG_IMAGE_NAME, compressBitmap2Bytes);
    }

    private boolean saveBitmapFromView(View view) {
        view.measure(View.MeasureSpec.makeMeasureSpec(0, 0), View.MeasureSpec.makeMeasureSpec(0, 0));
        view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());
        Bitmap createBitmap = Bitmap.createBitmap(view.getMeasuredWidth(), view.getMeasuredHeight(), Bitmap.Config.RGB_565);
        view.draw(new Canvas(createBitmap));
        Bitmap bitmap = this.mBitmapSubLogo;
        if (bitmap != null) {
            bitmap.recycle();
            this.mBitmapSubLogo = null;
        }
        Bitmap bitmap2 = this.mBitmapProduct;
        if (bitmap2 != null) {
            bitmap2.recycle();
            this.mBitmapProduct = null;
        }
        this.mShareBigBitmap = scaleBitmap(createBitmap, IMAGE_SIZE_BIG);
        return saveShareBitmap();
    }

    private void setBigImgThumbData() {
        Bitmap bitmap = this.mShareBigBitmap;
        if (bitmap != null) {
            this.mThumbData = compressBitmap2Bytes(scaleBitmap(bitmap, IMAGE_SIZE), BYTE_LENGTH);
        }
    }

    public boolean isShareToMp() {
        return ShareUtil.S_WX_FRIENDS.equals(this.mSelectedChannel) && !TextUtils.isEmpty(this.mShareInfo.getMpId());
    }

    private boolean isShareToMpUseLocalIcon() {
        if (!isShareToMp() || TextUtils.isEmpty(this.mShareInfo.getMpLocalIconPath())) {
            return false;
        }
        try {
            return new File(this.mShareInfo.getMpLocalIconPath()).exists();
        } catch (Throwable th) {
            th.printStackTrace();
            return false;
        }
    }

    private boolean isThumbDataWrong() {
        byte[] bArr = this.mThumbData;
        if (bArr == null || bArr.length == 0) {
            return true;
        }
        if (isShareToMp()) {
            if (this.mThumbData.length > 131072) {
                return true;
            }
            return false;
        } else if (this.mThumbData.length > BYTE_LENGTH) {
            return true;
        } else {
            return false;
        }
    }

    private void loadLocalBitmap() {
        this.mShareBigBitmap = getBitmapFromFile(this.mBitmapSavedPath, IMAGE_SIZE_BIG);
        setBigImgThumbData();
        postShowShareBigImgPanel();
    }

    private int hash(String str) {
        byte[] bArr = new byte[0];
        try {
            bArr = str.getBytes("utf-8");
        } catch (Exception e) {
            e.printStackTrace();
        }
        int length = bArr.length;
        int i = length ^ 31;
        int i2 = length >> 2;
        for (int i3 = 0; i3 < i2; i3++) {
            int i4 = (i3 << 2) + 0;
            int i5 = ((bArr[i4 + 0] & 255) | (((((bArr[i4 + 3] << 8) | (bArr[i4 + 2] & 255)) << 8) | (bArr[i4 + 1] & 255)) << 8)) * 1540483477;
            i = (i * 1540483477) ^ ((i5 ^ (i5 >>> 24)) * 1540483477);
        }
        int i6 = i2 << 2;
        int i7 = length - i6;
        int i8 = i6 + 0;
        if (i7 != 0) {
            if (i7 >= 3) {
                i ^= bArr[i8 + 2] << 16;
            }
            if (i7 >= 2) {
                i ^= bArr[i8 + 1] << 8;
            }
            if (i7 >= 1) {
                i ^= bArr[i8];
            }
            i *= 1540483477;
        }
        int i9 = ((i >>> 13) ^ i) * 1540483477;
        return Math.abs(i9 ^ (i9 >>> 15));
    }

    public void onPermissionsGranted(int i, List<String> list) {
        Log.d(TAG, "requestCode: " + i);
        if (i == 111) {
            shareToDo();
        }
    }

    public void onRequestPermissionsResult(int i, @NonNull String[] strArr, @NonNull int[] iArr) {
        ShareActivity.super.onRequestPermissionsResult(i, strArr, iArr);
        EasyPermissions.a(i, strArr, iArr, new Object[]{this});
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void onPermissionsDenied(int i, List<String> list) {
        Log.d(TAG, "requestCode: " + i);
        if (i == 111) {
            if (!ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.READ_EXTERNAL_STORAGE")) {
                JDToast.makeText((Context) this, (CharSequence) "请到设置界面，打开应用的存储权限", 0).show();
            }
            finish();
        }
    }
}
