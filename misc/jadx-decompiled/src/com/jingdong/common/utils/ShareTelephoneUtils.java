package com.jingdong.common.utils;

import android.annotation.SuppressLint;
import android.content.Context;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.telephony.TelephonyManager;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.permission.PermissionHelper;
import java.net.NetworkInterface;
import java.util.Collections;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ShareTelephoneUtils {
    static final String SDK_23_WIFI_MAC = "02:00:00:00:00:00";
    private static final String TAG = "ShareTelephoneUtils";

    public static String getWifiMacAddressOver23() {
        try {
            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {
                if (networkInterface.getName().equalsIgnoreCase("wlan0")) {
                    byte[] hardwareAddress = networkInterface.getHardwareAddress();
                    if (hardwareAddress == null) {
                        return "";
                    }
                    StringBuilder sb = new StringBuilder();
                    int length = hardwareAddress.length;
                    for (int i = 0; i < length; i++) {
                        sb.append(String.format("%02x:", Byte.valueOf(hardwareAddress[i])));
                    }
                    if (sb.length() > 0) {
                        sb.deleteCharAt(sb.length() - 1);
                    }
                    return sb.toString();
                }
            }
            return "";
        } catch (Exception unused) {
            return "";
        }
    }

    public static String getDeviceId() {
        return getDeviceId(JdSdk.getInstance().getApplication());
    }

    @SuppressLint({"MissingPermission"})
    public static String getDeviceId(Context context) {
        if (!PermissionHelper.hasGrantedPhoneState()) {
            return "";
        }
        try {
            return ((TelephonyManager) context.getSystemService("phone")).getDeviceId();
        } catch (Throwable unused) {
            return "";
        }
    }

    @SuppressLint({"MissingPermission"})
    public static String getSimSerialNumber(Context context) {
        if (!PermissionHelper.hasGrantedPhoneState()) {
            return "";
        }
        try {
            return ((TelephonyManager) context.getSystemService("phone")).getSimSerialNumber();
        } catch (Throwable unused) {
            return "";
        }
    }

    public static String getIMSI() {
        if (!PermissionHelper.hasGrantedPhoneState()) {
            return "";
        }
        try {
            return ((TelephonyManager) JdSdk.getInstance().getApplication().getSystemService("phone")).getSubscriberId();
        } catch (Throwable unused) {
            return "";
        }
    }

    public static synchronized void getLocalMacAddress(MacAddressListener macAddressListener) {
        synchronized (ShareTelephoneUtils.class) {
            getLocalMacAddress(macAddressListener, JdSdk.getInstance().getApplication());
        }
    }

    public static String getMacAddressStr(Context context) {
        try {
            if (context != null) {
                WifiManager wifiManager = (WifiManager) context.getSystemService("wifi");
                if (wifiManager != null) {
                    String macAddress = wifiManager.getConnectionInfo().getMacAddress();
                    if (Build.VERSION.SDK_INT >= 23 || macAddress.equals(SDK_23_WIFI_MAC)) {
                        return getWifiMacAddressOver23();
                    }
                    return macAddress;
                }
                throw new IllegalStateException("Can't get WifiManager.");
            }
            throw new NullPointerException("getMacAddressStr(), context is null");
        } catch (Exception e) {
            OKLog.m129e(TAG, e);
            return "";
        }
    }

    public static synchronized void getLocalMacAddress(MacAddressListener macAddressListener, Context context) {
        synchronized (ShareTelephoneUtils.class) {
            try {
                if (OKLog.f4224D) {
                    OKLog.m135d(TAG, "getMacAddress() -->> ");
                }
                String macAddressStr = getMacAddressStr(context);
                if (OKLog.f4224D) {
                    String str = TAG;
                    OKLog.m135d(str, "getMacAddress()--->" + macAddressStr);
                }
                new 1(context, new Object(), macAddressListener).start();
            } catch (Exception e) {
                macAddressListener.setMacAddress((String) null);
                OKLog.m129e(TAG, e);
            }
        }
    }

    public static String readMetaDataFromApplication(Context context, String str) {
        try {
            return context.getPackageManager().getApplicationInfo(context.getPackageName(), 128).metaData.getString(str);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }
}
