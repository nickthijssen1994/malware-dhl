package com.jingdong.common.utils;

import android.text.TextUtils;
import com.jingdong.jdsdk.JdSdk;
import com.jingdong.sdk.oklog.OKLog;
import com.p051jd.lib.unification.album.mInterface.IBack;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class Configuration {
    public static final String ALARM_NEED_WAKE_UP = "alarmNeedWakeUp";
    public static final String APPLICATION_SHORTCUT = "applicationShortcut";
    public static final String APPLICATION_UPGRADE = "applicationUpgrade";
    public static final String APP_START_COUNT = "appStartCount";
    public static final String ATTEMPTS = "attempts";
    public static final String ATTEMPTS_TIME = "attemptsTime";
    public static final String BARCODE_SCAN = "barCodeScan";
    public static final String BEFORE_INIT_TIP = "beforeInitTip";
    public static final String BROADCAST_FROM_CUTEVENT = "com.jingdong.app.mall.cutevent";
    public static final String BROADCAST_FROM_WXLOGIN = "com.jingdong.app.mall.wxloginreceiver";
    public static final String CASHIERDESK_BETA_HOST = "paybeta.m.jd.com";
    public static final String CASHIERDESK_HOST = "pay.m.jd.com";
    public static final String CBTMODE = "CBTMode";
    public static final String CDN_HOST = "cndHost";
    public static final String CHECK_NEW_VERSION = "checkNewVersion";
    public static final String CLIENT = "client";
    public static final String COMMUNITY_HOST = "go.m.jd.com";
    public static final String CONNECT_TIMEOUT = "connectTimeout";
    public static final String CONNECT_TIMEOUT_FOR_2G = "connectTimeoutFor2G";
    public static final String CONNECT_TIMEOUT_FOR_WIFI = "connectTimeoutForWIFI";
    public static final String COST_HINT = "costHint";
    public static final String CURRENT_APK_COMMENT = "currentApkComment";
    public static final String CURRENT_APK_MD5 = "currentApkMD5";
    public static final String CURRENT_APK_SIZE = "currentApkSize";
    public static final String DEFAULT_FIRST_GET_TOKEN_DELAY = "defaultFirstGetTokenDelay";
    public static final String DEFAULT_PUSH_MESSAGE_ALARM_DELAY = "defaultPushMessageAlarmDelay";
    public static final String DISCUSSUPLOADIMAGE_HEIGHT = "discussUploadImageHeight";
    public static final String DISCUSSUPLOADIMAGE_QUALITY = "discussUploadImageQuality";
    public static final String DISCUSSUPLOADIMAGE_WIDTH = "discussUploadImageWidth";
    public static final int D_MODEL_SPLIT_LEN = 25;
    public static final String HAS_INIT_TIP = "hasInitTip";
    public static final String HOST = "host";
    public static final String INIT_FIRST_POOL_SIZE = "initFirstPoolSize";
    public static final String INIT_SECOND_POOL_SIZE = "initSecondPoolSize";
    public static final String INIT_THIRD_POOL_SIZE = "initThirdPoolSize";
    public static final String IS_COOLMART = "isCoolMart";
    public static final String JLOG_VERSION = "JLogVersion";
    public static final String KEY_ABTEST_THRESHOLD = "keyAbTestBackFunctionIdAccessThresholdMS";
    public static final String KEY_DEVICE_THRESHOLD = "keyDeviceAccessThresholdMS";
    public static final String KEY_LAST_ACCESS_ABTEST = "keyLastAccessAbTestBackFunctionId";
    public static final String KEY_LAST_ACCESS_DEVICE = "keyLastAccessDevice";
    public static final String KEY_LAST_ACCESS_SERVERCONFIG = "keyLastAccessServerConfig";
    public static final String KEY_LAST_ACCESS_START = "keyLastAccessStart";
    public static final String KEY_LAST_ACCESS_VERSION = "keyLastAccessVersion";
    public static final String KEY_LAST_UPDATE = "keyLastUpdate";
    public static final String KEY_SERVERCONFIG_THRESHOLD = "keyServerConfigAccessThresholdMS";
    public static final String KEY_START_THRESHOLD = "keyAbTestBackFunctionIdAccessThresholdMS";
    public static final String KEY_TIME_STAMP = "keyTimestamp";
    public static final String KEY_UPDATE_INSTALL_NUM = "keyLastInstallShowNum";
    public static final String KEY_UPDATE_INTERVAL = "keyUpdateInterval";
    public static final String KEY_UPDATE_LIMIT = "keyLastShowLimit";
    public static final String KEY_UPDATE_NUM = "keyLastShowNum";
    public static final String KEY_UPDATE_WEB = "keyUpdateWeb";
    public static final String KEY_VERSION_THRESHOLD = "keyVersionAccessThresholdMS";
    public static final String LEAVE_TIME_GAP = "leaveTimeGap";
    public static final String LOCAL_FILE_CACHE = "localFileCache";
    public static final String LOCAL_MEMORY_CACHE = "localMemoryCache";
    public static final String LOCATION_TIP = "locationTip";
    public static final String MAX_FIRST_POOL_SIZE = "maxFirstPoolSize";
    public static final String MAX_SECOND_POOL_SIZE = "maxSecondPoolSize";
    public static final String MAX_THIRD_POOL_SIZE = "maxThirdPoolSize";
    public static final String MIAppId = "2882303761517506461";
    public static final String MIAppKey = "5601750626461";
    public static final String MSG_BOOT_COMPLETED = "msgBootCompleted";
    public static final String MSG_CENTER_HOST = "jpns.m.jd.com";
    public static final String MSG_CENTER_HOST_BETA = "jpns.m.jd.care";
    public static final String MSG_CENTER_HTTPS_HOST_BETA = "beta-jpns.m.jd.com";
    public static final String MSG_HOST = "msgHost";
    public static final String MSG_SET_SWITCH = "msgSwitch";
    public static final String MUST_USE_WIFI_MAC = "mustUseWifiMac";
    public static final String MZAppId = "110198";
    public static final String MZAppKey = "d9b0957b105346fd9c521e65b9af8d25";
    public static final String M_HOST = "mHost";
    public static final String NEW_MSG_CENTER_HOST = "msg.m.jd.com";
    public static final String NEW_MSG_CENTER_HOST_BETA = "msg.m.jd.care";
    public static final String NEW_MSG_CENTER_HTTPS_HOST_BETA = "beta-msg.m.jd.com";
    public static final String OPTIMIZE_COMBINE_API = "optCombineAPI";
    public static final String ORDER_HOST = "orderHost";
    public static final String OTHER_APP = "otherApp";
    public static final String PAI_HOST = "paiHost";
    public static final String PARTNER = "partner";
    public static final String PAY_APP_ID = "jd_android_app4";
    public static final String PAY_APP_ID_BETA = "android_app_beta";
    public static final String PAY_APP_KEY = "e53jfgRgd7Hk";
    public static final String PAY_APP_KEY_BETA = "6fg7weDfF6gh";
    public static final String PAY_URL_ADDRESS = "http://pay.m.jd.com/index.action";
    public static final String PAY_URL_ADDRESS_BETA = "http://paybeta.m.jd.com/index.action";
    public static final String PAY_URL_ADDRESS_TEST = "http://paytest.m.jd.com/index.action";
    public static final String PERSONAL_CONFIG_HOST = "cc.m.jd.com";
    public static final String PHOTOBUY_BETA_HOST = "photobuy.jd.care";
    public static final String PHOTOBUY_HOST = "photobuy.jd.local";
    public static final String PHOTO_SHUT = "photoShut";
    public static final String PLUG_HOST = "plugHost";
    public static final String PRINT_JLOG = "useJLog";
    public static final String PUSH_MSG_MODE = "msgMode";
    public static final String READ_TIMEOUT = "readTimeout";
    public static final String READ_TIMEOUT_FOR_WIFI = "readTimeoutForWIFI";
    public static final String REQUEST_METHOD = "requestMethod";
    public static final String ROUTINE_CHECK_DELAY_TIME = "routineCheckDelayTime";
    public static final String SETTLEMENT_GENAPPPAYID_PAY_URL_ADDRESS_BETA = "http://paybeta.m.jd.com/index.action";
    public static final String SETTLEMENT_PAY_URL_ADDRESS = "http://pay.m.jd.com/pay/indexForPre.action";
    public static final String SETTLEMENT_PAY_URL_ADDRESS_BETA = "http://paybeta.m.jd.com/pay/indexForPre.action";
    public static final String SLEF_BROADCAST_PERMISSION = "com.jingdong.app.mall.permission.self_broadcast";
    public static final String SPARSE_IMG_SWITCH = "sparseImgSwitch";
    public static final String SUB_UNION_ID = "subunionId";
    public static final String TEST_MODE = "testMode";
    public static final String TEST_RELEASE_HOST_MODE = "releaseHostMode";
    public static final String TOKEN_HOST = "tokenHost";
    public static final String UNIFORM_GLOBAL_HOST_BETA = "beta-api.jd.co.th";
    public static final String UNIFORM_GLOBAL_HOST_INTRA_BETA = "beta-intra.jd.co.th";
    public static final String UNIFORM_HOST = "api.m.jd.com";
    public static final String UNIFORM_HOST_BETA = "api.m.jd.care";
    public static final String UNIFORM_HOST_HTTPS_BETA = "beta-api.m.jd.com";
    public static final String UNIFORM_HOST_TEST = "android.m.jd.care/service";
    public static final String UNION_ID = "unionId";
    public static final String UPDATE_DELAY = "updateDelay";
    public static final String VOICE_SEARCH_SHUT = "voiseSearchShut";
    public static final boolean WX_CHECK_SIG = true;
    private static Map<String, String> localProperties;
    private static Properties properties;
    private static Map<String, String> v2Cache;

    private static synchronized void init() {
        synchronized (Configuration.class) {
            if (localProperties == null) {
                localProperties = new HashMap();
                localProperties.put(ORDER_HOST, UNIFORM_HOST);
                localProperties.put(PAI_HOST, "jdimg.m.jd.com");
                localProperties.put(HOST, UNIFORM_HOST);
                localProperties.put(M_HOST, null);
                localProperties.put(PLUG_HOST, "jdmps.m.jd.com");
                localProperties.put(TOKEN_HOST, UNIFORM_HOST);
                localProperties.put(MSG_HOST, MSG_CENTER_HOST);
                localProperties.put(CDN_HOST, "cdngw.m.jd.com");
                localProperties.put(CONNECT_TIMEOUT, "10000");
                localProperties.put(CONNECT_TIMEOUT_FOR_2G, "20000");
                localProperties.put(CONNECT_TIMEOUT_FOR_WIFI, "10000");
                localProperties.put(READ_TIMEOUT, "15000");
                localProperties.put(READ_TIMEOUT_FOR_WIFI, "10000");
                localProperties.put(ATTEMPTS, IBack.CLICK_PIC);
                localProperties.put(ATTEMPTS_TIME, "0");
                localProperties.put(REQUEST_METHOD, "post");
                localProperties.put(LOCAL_MEMORY_CACHE, "false");
                localProperties.put(LOCAL_FILE_CACHE, "false");
                localProperties.put(BEFORE_INIT_TIP, "false");
                localProperties.put(MSG_BOOT_COMPLETED, "true");
                localProperties.put(MSG_SET_SWITCH, "true");
                localProperties.put(LOCATION_TIP, "false");
                localProperties.put(SPARSE_IMG_SWITCH, "true");
                localProperties.put(INIT_FIRST_POOL_SIZE, IBack.CLICK_PIC);
                localProperties.put(MAX_FIRST_POOL_SIZE, IBack.CLICK_PIC);
                localProperties.put(INIT_SECOND_POOL_SIZE, "0");
                localProperties.put(MAX_SECOND_POOL_SIZE, "0");
                localProperties.put(INIT_THIRD_POOL_SIZE, "1");
                localProperties.put(MAX_THIRD_POOL_SIZE, "1");
                localProperties.put(DISCUSSUPLOADIMAGE_WIDTH, "500");
                localProperties.put(DISCUSSUPLOADIMAGE_HEIGHT, "500");
                localProperties.put(DISCUSSUPLOADIMAGE_QUALITY, "80");
                localProperties.put(ROUTINE_CHECK_DELAY_TIME, "2000");
                localProperties.put(LEAVE_TIME_GAP, "86400000");
                localProperties.put(DEFAULT_FIRST_GET_TOKEN_DELAY, "180000");
                localProperties.put(DEFAULT_PUSH_MESSAGE_ALARM_DELAY, "600000");
                localProperties.put(TEST_MODE, "false");
                localProperties.put(PRINT_JLOG, "true");
                localProperties.put(JLOG_VERSION, "2");
                localProperties.put(CBTMODE, "false");
                localProperties.put(CHECK_NEW_VERSION, "true");
                localProperties.put(OTHER_APP, "true");
                localProperties.put(PUSH_MSG_MODE, "true");
                localProperties.put(UPDATE_DELAY, "0");
                localProperties.put(CLIENT, "android");
                localProperties.put(APPLICATION_UPGRADE, "true");
                localProperties.put(APPLICATION_SHORTCUT, "true");
                localProperties.put(COST_HINT, "false");
                localProperties.put(BARCODE_SCAN, "true");
                localProperties.put(PHOTO_SHUT, "false");
                localProperties.put(VOICE_SEARCH_SHUT, "false");
                localProperties.put(IS_COOLMART, "false");
                localProperties.put(KEY_DEVICE_THRESHOLD, Long.toString(86400000));
                localProperties.put(KEY_SERVERCONFIG_THRESHOLD, Long.toString(86400000));
                localProperties.put(KEY_VERSION_THRESHOLD, Long.toString(86400000));
                localProperties.put("keyAbTestBackFunctionIdAccessThresholdMS", Long.toString(86400000));
                localProperties.put("keyAbTestBackFunctionIdAccessThresholdMS", Long.toString(1800000));
                localProperties.put(MUST_USE_WIFI_MAC, "false");
                try {
                    properties = new Properties();
                    InputStream open = JdSdk.getInstance().getApplicationContext().getAssets().open("config.properties");
                    if (open != null) {
                        properties.load(open);
                    }
                } catch (Exception unused) {
                }
            }
        }
    }

    public static String getProperty(String str) {
        return getProperty(str, null);
    }

    public static String getProperty(String str, String str2) {
        init();
        if (!TextUtils.equals(str, PARTNER)) {
            if (TextUtils.equals(str, UNION_ID)) {
                str2 = getExtraProperty(str, "50965");
            } else if (TextUtils.equals(str, SUB_UNION_ID)) {
                str2 = getExtraProperty(str, "jingdong");
            } else {
                Properties properties2 = properties;
                String property = properties2 != null ? properties2.getProperty(str) : null;
                String str3 = property == null ? localProperties.get(str) : property;
                if (str3 != null) {
                    str2 = str3;
                }
            }
            if (OKLog.f4224D) {
                OKLog.m135d("Configuration", "getProperty-->" + str2);
            }
            return str2;
        } else if (OKLog.f4224D) {
            return getExtraProperty(str, "test");
        } else {
            return getExtraProperty(str, "jingdong");
        }
    }

    public static String getExtraProperty(String str, String str2) {
        if (v2Cache == null) {
            v2Cache = new HashMap();
        }
        if (v2Cache.containsKey(str)) {
            return v2Cache.get(str);
        }
        v2Cache.put(str, str2);
        if (OKLog.f4224D) {
            OKLog.m135d("Configuration", "getExtraProperty, key=" + str + ",result=" + str2);
        }
        return str2;
    }

    public static boolean isBeta() {
        return JdSdk.getInstance().getBuildConfigDebug();
    }

    public static Integer getIntegerProperty(String str) {
        return getIntegerProperty(str, null);
    }

    public static Properties getProperties() {
        init();
        return properties;
    }

    public static Integer getIntegerProperty(String str, Integer num) {
        String property = getProperty(str);
        if (property == null) {
            return num;
        }
        try {
            return Integer.valueOf(property);
        } catch (Exception unused) {
            return num;
        }
    }

    public static Long getLongProperty(String str) {
        return getLongProperty(str, null);
    }

    public static Long getLongProperty(String str, Long l) {
        String property = getProperty(str);
        if (property == null) {
            return l;
        }
        try {
            return Long.valueOf(property);
        } catch (Exception unused) {
            return l;
        }
    }

    public static Boolean getBooleanProperty(String str) {
        return getBooleanProperty(str, null);
    }

    public static Boolean getBooleanProperty(String str, Boolean bool) {
        String property = getProperty(str);
        if (property == null) {
            return bool;
        }
        try {
            return Boolean.valueOf(property);
        } catch (Exception unused) {
            return bool;
        }
    }
}
