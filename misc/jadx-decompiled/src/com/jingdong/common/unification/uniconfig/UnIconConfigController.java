package com.jingdong.common.unification.uniconfig;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.NinePatch;
import android.graphics.Rect;
import android.text.TextUtils;
import com.jd.lib.un.business.a.a;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;
import com.p051jd.lib.p083un.utils.UnLibFileUtils;
import com.p051jd.lib.p083un.utils.UnSharedPreferencesUtils;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Set;
import rx.Observable;
import rx.schedulers.Schedulers;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class UnIconConfigController {
    private static UnIconConfigController controller;
    private static LinkedHashMap<String, IconConfigModel> iconCache = new LRULinkedHashMap(10);
    private static Set<String> ninePatchIds;
    private Object syncObject = new Object();
    private int iconNotFoundTimes = 0;

    public void execute() {
    }

    public void iconNotFound() {
    }

    public synchronized void setIconNotFoundTimes(int i) {
        this.iconNotFoundTimes = i;
    }

    private UnIconConfigController() {
        ninePatchIds = new HashSet();
        ninePatchIds.add("tab_var_070");
        ninePatchIds.add("tab_var_071");
        ninePatchIds.add("tab_var_095");
        ninePatchIds.add("tab_var_108");
        ninePatchIds.add("tab_var_124");
        ninePatchIds.add("tab_var_126");
        ninePatchIds.add("search_var_006");
        ninePatchIds.add("detail_var_045");
    }

    public static synchronized UnIconConfigController getController() {
        UnIconConfigController unIconConfigController;
        synchronized (UnIconConfigController.class) {
            if (controller != null) {
                return controller;
            }
            synchronized (UnIconConfigController.class) {
                if (controller == null) {
                    controller = new UnIconConfigController();
                }
                unIconConfigController = controller;
            }
            return unIconConfigController;
        }
    }

    public void requestData() {
        NetDataController.getController().requestToJson(new 1(this));
    }

    public String getIconPath4DraweeView(String str) {
        String str2;
        if (TextUtils.isEmpty(str)) {
            return "";
        }
        IconConfigModel iconConfigModel = iconCache.get(str);
        if (iconConfigModel != null) {
            if (!TextUtils.isEmpty(iconConfigModel.cachePath)) {
                return iconConfigModel.cachePath;
            }
            if (!TextUtils.isEmpty(iconConfigModel.path)) {
                iconConfigModel.cachePath = "file://" + iconConfigModel.path;
                return iconConfigModel.cachePath;
            }
        }
        IconConfigModel queryByIconId = DataBaseController.getController().queryByIconId(str);
        if (queryByIconId == null || TextUtils.isEmpty(queryByIconId.path) || !fileIsExists(queryByIconId)) {
            str2 = DefaultDataController.getController().getIconPath(str);
            if (TextUtils.isEmpty(str2) && queryByIconId != null) {
                str2 = queryByIconId.url;
            }
        } else {
            str2 = "file://" + queryByIconId.path;
        }
        if (queryByIconId == null) {
            queryByIconId = new IconConfigModel();
            queryByIconId.id = str;
        }
        queryByIconId.cachePath = str2;
        iconCache.put(str, queryByIconId);
        return str2;
    }

    /* JADX WARN: Removed duplicated region for block: B:29:0x0067 A[Catch: all -> 0x0077, TryCatch #0 {, blocks: (B:3:0x0001, B:8:0x000a, B:10:0x0018, B:12:0x001c, B:16:0x0022, B:18:0x002a, B:20:0x0034, B:22:0x003c, B:25:0x0043, B:26:0x0048, B:27:0x0061, B:29:0x0067, B:30:0x006e), top: B:35:0x0001 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public synchronized Bitmap getBitmap(String str, BitmapFactory.Options options) {
        Bitmap bitmap;
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        String ninePatchId = getNinePatchId(str);
        IconConfigModel iconConfigModel = iconCache.get(ninePatchId);
        if (iconConfigModel == null || iconConfigModel.bitmap == null) {
            if (iconConfigModel == null || TextUtils.isEmpty(iconConfigModel.path)) {
                iconConfigModel = DataBaseController.getController().queryByIconId(ninePatchId);
            }
            if (iconConfigModel != null && !TextUtils.isEmpty(iconConfigModel.path) && fileIsExists(iconConfigModel)) {
                bitmap = createBitmap(iconConfigModel, options);
                Bitmap scaleBitmap = scaleBitmap(bitmap, ninePatchId);
                if (iconConfigModel == null) {
                    iconConfigModel = new IconConfigModel();
                    iconConfigModel.id = ninePatchId;
                }
                iconConfigModel.bitmap = scaleBitmap;
                iconCache.put(ninePatchId, iconConfigModel);
                return scaleBitmap;
            }
            DefaultDataController controller2 = DefaultDataController.getController();
            bitmap = controller2.getAssetsBitmap(ninePatchId + ".png", (Rect) null, options);
            Bitmap scaleBitmap2 = scaleBitmap(bitmap, ninePatchId);
            if (iconConfigModel == null) {
            }
            iconConfigModel.bitmap = scaleBitmap2;
            iconCache.put(ninePatchId, iconConfigModel);
            return scaleBitmap2;
        }
        return iconConfigModel.bitmap;
    }

    public String getTextColor(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        IconConfigModel iconConfigModel = iconCache.get(str);
        if (iconConfigModel == null || iconConfigModel.config == null || TextUtils.isEmpty(iconConfigModel.config.textColor)) {
            iconConfigModel = DataBaseController.getController().queryByIconId(str);
            iconCache.put(str, iconConfigModel);
        }
        if (iconConfigModel == null || iconConfigModel.config == null) {
            return null;
        }
        return iconConfigModel.config.textColor;
    }

    public IconExtraConfigModel getTextConfig(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        IconConfigModel iconConfigModel = iconCache.get(str);
        if (iconConfigModel == null || iconConfigModel.config == null || (TextUtils.isEmpty(iconConfigModel.config.textColor) && TextUtils.isEmpty(iconConfigModel.config.edge))) {
            iconConfigModel = DataBaseController.getController().queryByIconId(str);
            iconCache.put(str, iconConfigModel);
        }
        if (iconConfigModel == null || iconConfigModel.config == null) {
            return null;
        }
        return iconConfigModel.config;
    }

    public boolean fileIsExists(IconConfigModel iconConfigModel) {
        if (UnLibFileUtils.fileIsExists(iconConfigModel.path)) {
            return true;
        }
        Observable.create(new 2(this, iconConfigModel)).observeOn(Schedulers.io());
        return false;
    }

    private Bitmap createBitmap(IconConfigModel iconConfigModel, BitmapFactory.Options options) {
        try {
            return BitmapFactory.decodeFile(iconConfigModel.path, options);
        } catch (Exception unused) {
            return null;
        }
    }

    public void download4NotFinish() {
        if (UnSharedPreferencesUtils.getLong(a.a().c(), "uni_config_download_data_version", 0) != UnIconConfigHelper.getUniConfigDataVersion()) {
            NetDataController.getController().multiDownload(DataBaseController.getController().queryListNotDown());
        }
    }

    public void clearAllData() {
        DataBaseController.getController().deleteAllData();
        UnSharedPreferencesUtils.putLong(a.a().c(), "uni_config_data_version", UnIconConfigHelper.getLastDataVersion());
        UnSharedPreferencesUtils.putLong(a.a().c(), "uni_config_download_data_version", 0);
    }

    private Bitmap scaleBitmap(Bitmap bitmap, String str) {
        if (bitmap == null) {
            return null;
        }
        if (NinePatch.isNinePatchChunk(bitmap.getNinePatchChunk())) {
            return bitmap;
        }
        float density = DpiUtil.getDensity(a.a().c());
        if (UnLog.D) {
            UnLog.d("Uniocn", "dpi:" + density);
        }
        int width = DpiUtil.getWidth(a.a().c());
        float f = density / 3.0f;
        if (UnLog.D) {
            UnLog.d("Uniocn", "scale:" + f);
        }
        if (width == 480 && "tab_100".equals(str)) {
            f = 0.46f;
        }
        Matrix matrix = new Matrix();
        matrix.postScale(f, f);
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
    }

    public void clearCache() {
        iconCache.clear();
    }

    private String getNinePatchId(String str) {
        Set<String> set = ninePatchIds;
        if (set != null && set.contains(str)) {
            float density = DpiUtil.getDensity(a.a().c());
            if (UnLog.D) {
                UnLog.d("UniconConfigController", "dpi:" + density);
            }
            if (density <= 2.0f) {
                str = str + "_2x";
            }
        }
        if (UnLog.D) {
            UnLog.d("UniconConfigController", "id:" + str);
        }
        return str;
    }
}
