package com.jingdong.jdpush_new.datahandle;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.text.TextUtils;
import com.jd.push.common.util.CommonUtil;
import com.jd.push.common.util.LogUtils;
import com.jd.push.common.util.PushSPUtil;
import com.jingdong.jdpush_new.db.AppInfoDbUtil;
import com.jingdong.jdpush_new.db.NecessaryPageDbUtil;
import com.jingdong.jdpush_new.db.RecordOpenPushInfoUtil;
import com.jingdong.jdpush_new.entity.dbEntity.AppInfo;
import com.jingdong.jdpush_new.entity.dbEntity.NecessaryMessage;
import com.jingdong.jdpush_new.entity.dbEntity.PushMsg;
import com.jingdong.jdpush_new.entity.dbEntity.RecordPushInfo;
import com.jingdong.jdpush_new.util.PushUtil;
import com.jingdong.jdpush_new.util.RetryUtil;
import com.p051jd.push.common.constant.Command;
import com.p051jd.push.common.constant.Constants;
import com.p051jd.push.common.util.DateUtils;
import com.p051jd.push.common.util.PushMessageUtil;
import java.util.List;
import org.json.JSONException;
import org.json.JSONObject;

/* loaded from: classes.dex */
public class JDPushMsgParse {
    private static final String TAG = "JDPushMsgParse";
    private static JDPushMsgParse msgParse;
    private LogUtils mLog = LogUtils.getInstance();

    private void doAfterAPPLogin(Context context, String str) {
        if (!TextUtils.isEmpty(str)) {
            try {
                JSONObject jSONObject = new JSONObject(str);
                if (jSONObject.optInt("code") == 0) {
                    HeartbeatManager.getInstance().setHeartStep(jSONObject.optInt("idleTime"));
                    doAfterLoginSuccess(context);
                    return;
                }
                this.mLog.e(TAG, "app login fail");
            } catch (JSONException e) {
                while (true) {
                    e.printStackTrace();
                    return;
                }
            }
        }
    }

    private void doAfterCreatClientId(Context context, String str) {
    }

    private void doAfterHeartBeat(Context context, String str) {
        this.mLog.d(TAG, "收到心跳回执 %s ", new Object[]{DateUtils.currentTime()});
        Constants.JD_PUSH_HEART_TIME--;
    }

    private void doAfterLoginSuccess(Context context) {
        HeartbeatManager.getInstance().openOrCloseHeartBeat(context, true);
        sendRegistrationPage(context);
        sendNecessaryPage(context);
        sendRecordPushPage(context);
    }

    public static JDPushMsgParse getInstance() {
        if (msgParse == null) {
            msgParse = new JDPushMsgParse();
        }
        return msgParse;
    }

    private boolean isAvailable(Context context, String str) {
        List<PackageInfo> installedPackages = context.getPackageManager().getInstalledPackages(0);
        for (int i = 0; i < installedPackages.size(); i++) {
            if (installedPackages.get(i).packageName.equalsIgnoreCase(str)) {
                return true;
            }
        }
        return false;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r0v1 */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5 */
    /* JADX WARN: Type inference failed for: r3v0, types: [com.jingdong.jdpush_new.entity.dbEntity.PushMsg] */
    /* JADX WARN: Type inference failed for: r3v1 */
    /* JADX WARN: Type inference failed for: r7v3, types: [com.jingdong.jdpush_new.datahandle.JDPushEventHandler] */
    /* JADX WARN: Type inference failed for: r8v0, types: [short] */
    /* JADX WARN: Type inference failed for: r8v35 */
    /* JADX WARN: Type inference failed for: r8v36 */
    /* JADX WARN: Type inference failed for: r8v6, types: [java.lang.String] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void parseExtStation(Context context, String str, short s) {
        Throwable th;
        PushMsg pushMsg;
        JDPushEventHandler jDPushEventHandler;
        JSONException e;
        JSONObject jSONObject;
        ?? isEmpty = TextUtils.isEmpty(str);
        if (isEmpty != 0) {
            LogUtils.getInstance().e(TAG, "解析消息体数据，msg为空");
            return;
        }
        try {
            LogUtils.getInstance().d(TAG, "command:%s, msg:%s", new Object[]{Short.valueOf((short) s), str});
            pushMsg = null;
            isEmpty = 2010;
            isEmpty = 2010;
            try {
                jSONObject = new JSONObject(str);
                s = new PushMsg();
            } catch (JSONException e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            s.setAppId(String.valueOf(jSONObject.optInt("appid")));
            s.setTitle(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_TITLE));
            s.setPayload(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_PayLOad));
            s.setPackageName(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full));
            s.setEcho(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_ECHO));
            s.setFlowId(jSONObject.optString(Constants.JdPushMsg.JSON_KEY__flowID));
            s.setExtras(jSONObject.optString(Constants.JdPushMsg.JSON_KEY__extras));
            s.setMsgId(jSONObject.optString("msgId"));
            s.setMsgType(jSONObject.optInt("msgType"));
            s.setDeviceTokenSrc(jSONObject.optInt(Constants.JdPushMsg.JSON_KEY_DEV_SRC));
            if (str.contains(CommonUtil.getPackageName(context))) {
                LogUtils.getInstance().e(TAG, "收到消息，开始发送广播 ----------- ");
                PushMessageUtil.sendMsgToAppBroadcast(context, 11, 7, str);
            }
            jDPushEventHandler = JDPushEventHandler.getInstance();
            s = PushMsg.toJson(s);
        } catch (JSONException e3) {
            e = e3;
            pushMsg = s;
            LogUtils.getInstance().e(TAG, e.toString());
            jDPushEventHandler = JDPushEventHandler.getInstance();
            s = PushMsg.toJson(pushMsg);
            jDPushEventHandler.sendJDMessage(4, Command.PRO_EXT_PRO_RESP, s, context);
        } catch (Throwable th3) {
            th = th3;
            JDPushEventHandler.getInstance().sendJDMessage(4, isEmpty == true ? (short) 1 : 0, PushMsg.toJson((PushMsg) s), context);
            throw th;
        }
        jDPushEventHandler.sendJDMessage(4, Command.PRO_EXT_PRO_RESP, s, context);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r0v1 */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5 */
    /* JADX WARN: Type inference failed for: r3v0, types: [com.jingdong.jdpush_new.entity.dbEntity.PushMsg] */
    /* JADX WARN: Type inference failed for: r3v1 */
    /* JADX WARN: Type inference failed for: r7v3, types: [com.jingdong.jdpush_new.datahandle.JDPushEventHandler] */
    /* JADX WARN: Type inference failed for: r8v0, types: [short] */
    /* JADX WARN: Type inference failed for: r8v32 */
    /* JADX WARN: Type inference failed for: r8v33 */
    /* JADX WARN: Type inference failed for: r8v6, types: [java.lang.String] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void parseJDPushMsg(Context context, String str, short s) {
        Throwable th;
        PushMsg pushMsg;
        JDPushEventHandler jDPushEventHandler;
        JSONException e;
        JSONObject jSONObject;
        ?? isEmpty = TextUtils.isEmpty(str);
        if (isEmpty != 0) {
            LogUtils.getInstance().e(TAG, "解析消息体数据，msg为空");
            return;
        }
        try {
            LogUtils.getInstance().d(TAG, "command:%s, msg:%s", new Object[]{Short.valueOf((short) s), str});
            pushMsg = null;
            isEmpty = 2006;
            isEmpty = 2006;
            try {
                jSONObject = new JSONObject(str);
                s = new PushMsg();
            } catch (JSONException e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            s.setAppId(String.valueOf(jSONObject.optInt("appid")));
            s.setTitle(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_TITLE));
            s.setPayload(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_PayLOad));
            s.setPackageName(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full));
            s.setEcho(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_ECHO));
            s.setFlowId(jSONObject.optString(Constants.JdPushMsg.JSON_KEY__flowID));
            s.setExtras(jSONObject.optString(Constants.JdPushMsg.JSON_KEY__extras));
            s.setMsgId(jSONObject.optString("msgId"));
            s.setMsgType(jSONObject.optInt("msgType"));
            s.setDeviceTokenSrc(jSONObject.optInt(Constants.JdPushMsg.JSON_KEY_DEV_SRC));
            sendMsg(context, str);
            jDPushEventHandler = JDPushEventHandler.getInstance();
            s = PushMsg.toJson(s);
        } catch (JSONException e3) {
            e = e3;
            pushMsg = s;
            LogUtils.getInstance().e(TAG, e.toString());
            jDPushEventHandler = JDPushEventHandler.getInstance();
            s = PushMsg.toJson(pushMsg);
            jDPushEventHandler.sendJDMessage(4, 2006, s, context);
        } catch (Throwable th3) {
            th = th3;
            JDPushEventHandler.getInstance().sendJDMessage(4, isEmpty == true ? (short) 1 : 0, PushMsg.toJson((PushMsg) s), context);
            throw th;
        }
        jDPushEventHandler.sendJDMessage(4, 2006, s, context);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r0v1 */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5 */
    /* JADX WARN: Type inference failed for: r3v0, types: [com.jingdong.jdpush_new.entity.dbEntity.PushMsg] */
    /* JADX WARN: Type inference failed for: r3v1 */
    /* JADX WARN: Type inference failed for: r7v3, types: [com.jingdong.jdpush_new.datahandle.JDPushEventHandler] */
    /* JADX WARN: Type inference failed for: r8v0, types: [short] */
    /* JADX WARN: Type inference failed for: r8v35 */
    /* JADX WARN: Type inference failed for: r8v36 */
    /* JADX WARN: Type inference failed for: r8v6, types: [java.lang.String] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void parseJDStation(Context context, String str, short s) {
        Throwable th;
        PushMsg pushMsg;
        JDPushEventHandler jDPushEventHandler;
        JSONException e;
        JSONObject jSONObject;
        ?? isEmpty = TextUtils.isEmpty(str);
        if (isEmpty != 0) {
            LogUtils.getInstance().e(TAG, "解析消息体数据，msg为空");
            return;
        }
        try {
            LogUtils.getInstance().d(TAG, "command:%s, msg:%s", new Object[]{Short.valueOf((short) s), str});
            pushMsg = null;
            isEmpty = 2008;
            isEmpty = 2008;
            try {
                jSONObject = new JSONObject(str);
                s = new PushMsg();
            } catch (JSONException e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            s.setAppId(String.valueOf(jSONObject.optInt("appid")));
            s.setTitle(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_TITLE));
            s.setPayload(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_PayLOad));
            s.setPackageName(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full));
            s.setEcho(jSONObject.optString(Constants.JdPushMsg.JSON_KEY_ECHO));
            s.setFlowId(jSONObject.optString(Constants.JdPushMsg.JSON_KEY__flowID));
            s.setExtras(jSONObject.optString(Constants.JdPushMsg.JSON_KEY__extras));
            s.setMsgId(jSONObject.optString("msgId"));
            s.setMsgType(jSONObject.optInt("msgType"));
            s.setDeviceTokenSrc(jSONObject.optInt(Constants.JdPushMsg.JSON_KEY_DEV_SRC));
            if (str.contains(CommonUtil.getPackageName(context))) {
                LogUtils.getInstance().e(TAG, "收到消息，开始发送广播 ----------- ");
                PushMessageUtil.sendMsgToAppBroadcast(context, 9, 7, str);
            }
            jDPushEventHandler = JDPushEventHandler.getInstance();
            s = PushMsg.toJson(s);
        } catch (JSONException e3) {
            e = e3;
            pushMsg = s;
            LogUtils.getInstance().e(TAG, e.toString());
            jDPushEventHandler = JDPushEventHandler.getInstance();
            s = PushMsg.toJson(pushMsg);
            jDPushEventHandler.sendJDMessage(4, Command.PRO_STATION_RESP, s, context);
        } catch (Throwable th3) {
            th = th3;
            JDPushEventHandler.getInstance().sendJDMessage(4, isEmpty == true ? (short) 1 : 0, PushMsg.toJson((PushMsg) s), context);
            throw th;
        }
        jDPushEventHandler.sendJDMessage(4, Command.PRO_STATION_RESP, s, context);
    }

    private void sendMsg(Context context, String str) {
        LogUtils instance = LogUtils.getInstance();
        instance.e("pushDEBUg", "sendmsg --- " + str);
        if (str.contains(CommonUtil.getPackageName(context))) {
            LogUtils.getInstance().e(TAG, "收到消息，开始发送广播 ----------- ");
            PushMessageUtil.sendMsgToAppBroadcast(context, 2, 7, str);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v0 */
    /* JADX WARN: Type inference failed for: r1v2, types: [java.lang.Object[]] */
    public void doAfterBindClient(Context context, int i, String str, String str2) {
        int i2 = 1;
        try {
            int optInt = new JSONObject(str).optInt(Constants.JdPushMsg.JSON_KEY_STATUS);
            if (optInt == 0) {
                this.mLog.d(TAG, "绑定ClientId成功");
                NecessaryPageDbUtil instance = NecessaryPageDbUtil.getInstance(context);
                NecessaryMessage findPageByID = instance.findPageByID(str2 + i);
                if (findPageByID != null && TextUtils.equals(findPageByID.getStatus(), "1")) {
                    findPageByID.setStatus("0");
                    NecessaryPageDbUtil.getInstance(context).updateItem(findPageByID);
                    return;
                }
                return;
            }
            this.mLog.e(TAG, "ERROR:绑定失败，status:%s", new Object[]{Integer.valueOf(optInt)});
        } catch (JSONException e) {
            while (true) {
                LogUtils logUtils = this.mLog;
                String str3 = TAG;
                i2 = new Object[i2];
                i2[0] = e.toString();
                logUtils.e(str3, "ERROR:绑定失败,%s", (Object[]) i2);
                return;
            }
        }
    }

    public void doAfterOpenMessage(Context context, int i, String str, String str2) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.optInt(Constants.JdPushMsg.JSON_KEY_STATUS) == 0) {
                RecordPushInfo findRecordPushMsg = RecordOpenPushInfoUtil.getInstance(context).findRecordPushMsg(jSONObject.optString("msgId"));
                if (findRecordPushMsg != null && TextUtils.equals(findRecordPushMsg.getStatus(), "1")) {
                    findRecordPushMsg.setStatus("0");
                    RecordOpenPushInfoUtil.getInstance(context).updateItem(findRecordPushMsg);
                    return;
                }
                return;
            }
            this.mLog.e(TAG, "doAfterOpenMessage没有成功");
        } catch (JSONException e) {
            while (true) {
                LogUtils logUtils = this.mLog;
                String str3 = TAG;
                logUtils.e(str3, "doAfterOpenMessage.ecp=" + e.getMessage());
                return;
            }
        }
    }

    public void doAfterRegistDT(Context context, int i, String str, String str2) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.optInt(Constants.JdPushMsg.JSON_KEY_STATUS) == 0) {
                try {
                    if (jSONObject.has("deviceToken")) {
                        String str3 = PushSPUtil.getInstance().get(context, "usedToken", "") + "";
                        if (TextUtils.equals(str3, jSONObject.getString("deviceToken"))) {
                            PushMessageUtil.sendMsgToAppBroadcast(context, 8, 7, str3);
                        }
                    }
                } catch (Exception unused) {
                }
                AppInfo findAppByAppid = AppInfoDbUtil.getInstance(context).findAppByAppid(str2);
                if (findAppByAppid != null && i == 7) {
                    findAppByAppid.setUpdateStatus("0");
                    AppInfoDbUtil.getInstance(context).updateItem(findAppByAppid);
                }
                NecessaryMessage findPageByID = NecessaryPageDbUtil.getInstance(context).findPageByID(str2 + i + 1001);
                if (findPageByID != null && TextUtils.equals(findPageByID.getStatus(), "1")) {
                    findPageByID.setStatus("0");
                    NecessaryPageDbUtil.getInstance(context).updateItem(findPageByID);
                    return;
                }
                return;
            }
            this.mLog.e(TAG, "doAfterRegistDT没有成功");
        } catch (JSONException e) {
            this.mLog.e(TAG, "doAfterRegistDT.ecp=" + e.getMessage());
        }
    }

    public void doAfterUnBindClientId(Context context, int i, String str, String str2) {
        try {
            if (new JSONObject(str).optInt(Constants.JdPushMsg.JSON_KEY_STATUS) == 0) {
                NecessaryPageDbUtil instance = NecessaryPageDbUtil.getInstance(context);
                NecessaryMessage findPageByID = instance.findPageByID(str2 + i);
                if (findPageByID != null && TextUtils.equals(findPageByID.getStatus(), "1")) {
                    findPageByID.setStatus("0");
                    NecessaryPageDbUtil.getInstance(context).updateItem(findPageByID);
                    return;
                }
                return;
            }
            this.mLog.e(TAG, "doAfterUnBindClientId没有成功");
        } catch (JSONException e) {
            while (true) {
                LogUtils logUtils = this.mLog;
                String str3 = TAG;
                logUtils.e(str3, "doAfterUnBindClientId.ecp=" + e.getMessage());
                return;
            }
        }
    }

    public void doAfterUnBindDT(String str) {
    }

    public void parseMessage(Context context, short s, String str) {
        if (Command.isValidRecCommand(s)) {
            this.mLog.e(TAG, "parseMessage command: %s,msg: %s, %s ", new Object[]{Short.valueOf(s), str, DateUtils.currentTime()});
            switch (s) {
                case 2002:
                    doAfterAPPLogin(context, str);
                    return;
                case 2003:
                case 2006:
                case 2008:
                default:
                    return;
                case 2004:
                    doAfterHeartBeat(context, str);
                    return;
                case 2005:
                    parseJDPushMsg(context, str, s);
                    return;
                case 2007:
                    parseJDStation(context, str, s);
                    return;
                case 2009:
                    parseExtStation(context, str, s);
                    return;
            }
        } else {
            this.mLog.e(TAG, "ERROR:无效指令,command:%s,msg:%s", new Object[]{Short.valueOf(s), str});
        }
    }

    public void sendNecessaryPage(Context context) {
        this.mLog.e(TAG, "注册、绑定、解绑失败数据重试");
        try {
            List<NecessaryMessage> findAllNecessaryPage = NecessaryPageDbUtil.getInstance(context).findAllNecessaryPage();
            if (findAllNecessaryPage != null && findAllNecessaryPage.size() > 0) {
                for (NecessaryMessage necessaryMessage : findAllNecessaryPage) {
                    if (TextUtils.equals(necessaryMessage.getStatus(), "1")) {
                        int optInt = new JSONObject(necessaryMessage.getMsgBody()).optInt(Constants.JdPushMsg.JSON_KEY_MODLE);
                        String command = necessaryMessage.getCommand();
                        LogUtils logUtils = this.mLog;
                        logUtils.e("sendNecessaryPage", "sendNecessaryPage=" + NecessaryMessage.toJson(necessaryMessage));
                        RetryUtil.retryLogic(context, Short.valueOf(command).shortValue(), NecessaryMessage.toJson(necessaryMessage), optInt);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void sendRecordPushPage(Context context) {
        this.mLog.e(TAG, "消息打开数据重试");
        try {
            List<RecordPushInfo> findAllAppInfo = RecordOpenPushInfoUtil.getInstance(context).findAllAppInfo();
            if (findAllAppInfo != null && findAllAppInfo.size() > 0) {
                for (RecordPushInfo recordPushInfo : findAllAppInfo) {
                    if (TextUtils.equals(recordPushInfo.getStatus(), "1")) {
                        int optInt = new JSONObject(recordPushInfo.getMsgBody()).optInt(Constants.JdPushMsg.JSON_KEY_MODLE);
                        String commad = recordPushInfo.getCommad();
                        LogUtils logUtils = this.mLog;
                        logUtils.e("sendRecordPushPage", "sendRecordPushPage=" + RecordPushInfo.toJson(recordPushInfo));
                        RetryUtil.retryLogic(context, Short.valueOf(commad).shortValue(), RecordPushInfo.toJson(recordPushInfo), optInt);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void sendRegistrationPage(Context context) {
        PushUtil.registerDevTokenAssembledData(context, 7, CommonUtil.makeDeviceToken(context), (short) Command.PRO_REG_DT_REQ);
    }
}
