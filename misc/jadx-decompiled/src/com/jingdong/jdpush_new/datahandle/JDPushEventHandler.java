package com.jingdong.jdpush_new.datahandle;

import android.content.Context;
import com.jd.push.common.eventbus.Subscribe;
import com.jd.push.common.eventbus.ThreadMode;
import com.jd.push.common.util.LogUtils;
import com.jingdong.jdpush_new.connect.PushSocket;
import com.jingdong.jdpush_new.entity.ConnectedEvent;
import com.jingdong.jdpush_new.entity.CustomerEvent;
import com.jingdong.jdpush_new.entity.MessageEvent;
import com.p051jd.push.common.constant.Command;
import com.p051jd.push.common.eventbus.EventBus;
import com.p051jd.push.common.util.NetWorkUtil;
import com.p051jd.push.common.util.PushMessageUtil;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/* loaded from: classes.dex */
public class JDPushEventHandler {
    private static final String TAG;
    private static JDPushEventHandler handler;
    private ExecutorService mPostMsgPool = Executors.newSingleThreadExecutor();

    private void connectSuccess(Context context) {
        getInstance().sendJDMessage(4, Command.PRO_LONG_CONN_LOGIN, null, context);
    }

    public static JDPushEventHandler getInstance() {
        if (handler == null) {
            handler = new JDPushEventHandler();
        }
        return handler;
    }

    private void initService(Context context) {
        LogUtils.getInstance().e("======", "initService...connect");
        PushSocket.getInstance().connect(context);
    }

    private void netWorkChanged(Context context) {
        int netWorkType = NetWorkUtil.getNetWorkType(context);
        if (netWorkType == 0 || netWorkType == 1) {
            HeartbeatManager.getInstance().openOrCloseHeartBeat(context, false);
            return;
        }
        LogUtils.getInstance().e("======", "netWorkChanged...connect");
        PushSocket.getInstance().connect(context);
    }

    @Subscribe(threadMode = ThreadMode.ASYNC)
    public void onEventAsync(ConnectedEvent connectedEvent) {
        int action = connectedEvent.getAction();
        String str = "0";
        if (PushSocket.getInstance().isConnected()) {
            str = "1";
        }
        if (action == 9) {
            PushMessageUtil.sendMsgToAppBroadcast(connectedEvent.getContext(), 10, 7, str);
        }
    }

    @Subscribe(threadMode = ThreadMode.ASYNC)
    public void onEventAsync(CustomerEvent customerEvent) {
        int action = customerEvent.getAction();
        Context conetxt = customerEvent.getConetxt();
        switch (action) {
            case 6:
                initService(conetxt);
                return;
            case 7:
                PushSocket.getInstance().reConnect(conetxt);
                return;
            default:
                return;
        }
    }

    @Subscribe(threadMode = ThreadMode.ASYNC)
    public void onEventAsync(MessageEvent messageEvent) {
        int action = messageEvent.getAction();
        short command = messageEvent.getCommand();
        String msgData = messageEvent.getMsgData();
        Context conetxt = messageEvent.getConetxt();
        switch (action) {
            case 1:
                JDPushMsgParse.getInstance().parseMessage(conetxt, command, msgData);
                return;
            case 2:
                connectSuccess(conetxt);
                return;
            case 3:
            default:
                return;
            case 4:
                JDPushMsgPackage.getInstance().sendMessage(conetxt, command, msgData);
                return;
            case 5:
                netWorkChanged(conetxt);
                return;
        }
    }

    public void register() {
        if (!EventBus.getDefault().isRegistered(handler)) {
            EventBus.getDefault().register(handler);
        }
    }

    public void sendJDMessage(int i, Context context) {
        this.mPostMsgPool.execute(new 3(this, i, context));
    }

    public void sendJDMessage(int i, String str, Context context) {
        this.mPostMsgPool.execute(new 5(this, i, str, context));
    }

    public void sendJDMessage(int i, short s, Context context) {
        this.mPostMsgPool.execute(new 4(this, i, s, context));
    }

    public void sendJDMessage(int i, short s, String str, Context context) {
        this.mPostMsgPool.execute(new 6(this, i, s, str, context));
    }

    public void sentConnectedEvent(int i, Context context) {
        this.mPostMsgPool.execute(new 2(this, i, context));
    }

    public void sentCustomerEvent(int i, Context context) {
        this.mPostMsgPool.execute(new 1(this, i, context));
    }

    public void unregister() {
        EventBus.getDefault().unregister(handler);
    }
}
