package com.jingdong.aura.sdk.update.downloader;

import android.content.Context;
import com.jingdong.aura.sdk.network.http.AuraHttp;
import com.jingdong.aura.sdk.network.http.InitializationConfig;
import com.jingdong.aura.sdk.network.http.dowmload.DownloadQueue;
import com.jingdong.aura.sdk.network.http.dowmload.DownloadRequest;
import com.jingdong.aura.sdk.network.http.rest.RequestMethod;
import com.jingdong.aura.sdk.network.http.rest.URLConnectionNetworkExecutor;
import com.jingdong.aura.sdk.network.utils.Logger;
import com.jingdong.aura.sdk.update.AuraBundleResult;
import com.jingdong.aura.sdk.update.a;
import com.jingdong.aura.sdk.update.b.c;

/* loaded from: classes.dex */
public class DefaultDownloader implements IDownloader {
    private static String TAG = "DefaultDownloader";
    private DownloadQueue downloadQueue;

    public DefaultDownloader(Context context) {
        this(context, false);
    }

    public DefaultDownloader(Context context, boolean z) {
        AuraHttp.initialize(InitializationConfig.newBuilder(context).networkExecutor(new URLConnectionNetworkExecutor()).build());
        Logger.setDebug(z);
        this.downloadQueue = AuraHttp.newDownloadQueue();
    }

    @Override // com.jingdong.aura.sdk.update.downloader.IDownloader
    public boolean cancelAll() {
        this.downloadQueue.cancelAll();
        return true;
    }

    @Override // com.jingdong.aura.sdk.update.downloader.IDownloader
    public boolean cancelBySign(AuraBundleResult auraBundleResult) {
        this.downloadQueue.cancelAll();
        return true;
    }

    @Override // com.jingdong.aura.sdk.update.downloader.IDownloader
    public void download(AuraBundleResult auraBundleResult, IDownloadCallback iDownloadCallback) {
        if (auraBundleResult == null) {
            c.b(TAG, "bundleResult is null");
            if (iDownloadCallback != null) {
                iDownloadCallback.onError(new IllegalArgumentException("bundleResult is null"));
                return;
            }
            return;
        }
        this.downloadQueue.add(0, new DownloadRequest(auraBundleResult.downloadUrl, RequestMethod.GET, a.a().k.getAbsolutePath(), auraBundleResult.downloadedFileName, true, true), new 1(this, iDownloadCallback));
    }
}
