package com.jingdong.aura.wrapper.p128a;

import android.annotation.TargetApi;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Debug;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/* compiled from: TbsSdkJava */
/* renamed from: com.jingdong.aura.wrapper.a.b */
/* loaded from: classes.dex */
public class C2213b {

    /* renamed from: b */
    private static final Executor f4158b;

    /* renamed from: a */
    static final Queue<AbstractRunnableC2217c> f4157a = new LinkedList();

    /* renamed from: c */
    private static final BlockingQueue<Runnable> f4159c = new LinkedBlockingQueue(128);

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.wrapper.a.b$a */
    /* loaded from: classes.dex */
    public static class RejectedExecutionHandlerC2215a implements RejectedExecutionHandler {
        @Override // java.util.concurrent.RejectedExecutionHandler
        public void rejectedExecution(Runnable runnable, ThreadPoolExecutor threadPoolExecutor) {
            Object[] array = C2213b.f4159c.toArray();
            StringBuilder sb = new StringBuilder();
            sb.append('[');
            for (Object obj : array) {
                if (obj.getClass().isAnonymousClass()) {
                    sb.append(m188a(obj));
                    sb.append(',');
                    sb.append(' ');
                } else {
                    sb.append(obj.getClass());
                    sb.append(',');
                    sb.append(' ');
                }
            }
            sb.append(']');
            throw new RejectedExecutionException("Task " + runnable.toString() + " rejected from " + threadPoolExecutor.toString() + " in " + sb.toString());
        }

        /* renamed from: a */
        private Object m188a(Object obj) {
            try {
                Field declaredField = obj.getClass().getDeclaredField("this$0");
                declaredField.setAccessible(true);
                return declaredField.get(obj);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return obj;
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                return obj;
            } catch (NoSuchFieldException e3) {
                e3.printStackTrace();
                return obj;
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.wrapper.a.b$c */
    /* loaded from: classes.dex */
    public static abstract class AbstractRunnableC2217c implements Runnable {

        /* renamed from: d */
        public final String f4162d;

        public AbstractRunnableC2217c(String str) {
            this.f4162d = str;
        }

        @Override // java.lang.Object
        public String toString() {
            return getClass().getName() + "@" + this.f4162d;
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.wrapper.a.b$b */
    /* loaded from: classes.dex */
    static class AsyncTaskC2216b extends AsyncTask<Void, Void, Void> {

        /* renamed from: a */
        private final AbstractRunnableC2217c f4161a;

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public Void doInBackground(Void... voidArr) {
            return m186b(voidArr);
        }

        public AsyncTaskC2216b(AbstractRunnableC2217c cVar) {
            this.f4161a = cVar;
        }

        /* renamed from: b */
        protected Void m186b(Void... voidArr) {
            C2213b.m189c(this.f4161a);
            return null;
        }

        @Override // java.lang.Object
        public String toString() {
            return getClass().getSimpleName() + "@" + this.f4161a;
        }
    }

    @TargetApi(11)
    /* renamed from: a */
    public static void m191a(AbstractRunnableC2217c cVar) {
        AsyncTaskC2216b bVar = new AsyncTaskC2216b(cVar);
        if (Build.VERSION.SDK_INT < 11) {
            bVar.execute(new Void[0]);
        } else {
            bVar.executeOnExecutor(f4158b, new Void[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: c */
    public static void m189c(AbstractRunnableC2217c cVar) {
        long nanoTime = System.nanoTime();
        long threadCpuTimeNanos = Debug.threadCpuTimeNanos();
        try {
            cVar.run();
            PrintStream printStream = System.out;
            printStream.println("Timing - " + Thread.currentThread().getName() + " " + cVar.f4162d + ": " + ((Debug.threadCpuTimeNanos() - threadCpuTimeNanos) / 1000000) + "ms (cpu) / " + ((System.nanoTime() - nanoTime) / 1000000) + "ms (real)");
        } catch (RuntimeException unused) {
            PrintStream printStream2 = System.out;
            printStream2.println("Exception in " + cVar.f4162d);
            PrintStream printStream3 = System.out;
            printStream3.println("Timing - " + Thread.currentThread().getName() + " " + cVar.f4162d + " (failed): " + ((Debug.threadCpuTimeNanos() - threadCpuTimeNanos) / 1000000) + "ms (cpu) / " + ((System.nanoTime() - nanoTime) / 1000000) + "ms (real)");
        } catch (Throwable th) {
            th.printStackTrace();
            PrintStream printStream4 = System.out;
            printStream4.println("Timing - " + Thread.currentThread().getName() + " " + cVar.f4162d + " (failed): " + ((Debug.threadCpuTimeNanos() - threadCpuTimeNanos) / 1000000) + "ms (cpu) / " + ((System.nanoTime() - nanoTime) / 1000000) + "ms (real)");
        }
    }

    static {
        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(8, 16, 1, TimeUnit.SECONDS, f4159c, new ThreadFactory() { // from class: com.jingdong.aura.wrapper.a.b.1

            /* renamed from: a */
            private final AtomicInteger f4160a = new AtomicInteger(1);

            @Override // java.util.concurrent.ThreadFactory
            public Thread newThread(Runnable runnable) {
                return new Thread(runnable, "CoordTask #" + this.f4160a.getAndIncrement());
            }
        }, new RejectedExecutionHandlerC2215a());
        f4158b = threadPoolExecutor;
        C2219d.m176a(threadPoolExecutor);
    }
}
