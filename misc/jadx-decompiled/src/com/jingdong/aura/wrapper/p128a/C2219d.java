package com.jingdong.aura.wrapper.p128a;

import android.os.AsyncTask;
import android.os.Build;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.concurrent.Executor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Pattern;

/* compiled from: TbsSdkJava */
/* renamed from: com.jingdong.aura.wrapper.a.d */
/* loaded from: classes.dex */
public class C2219d extends ThreadPoolExecutor {

    /* renamed from: a */
    static final Pattern f4167a = Pattern.compile("cpu[0-9]+");

    /* renamed from: c */
    private static final ThreadFactory f4169c = new ThreadFactory() { // from class: com.jingdong.aura.wrapper.a.d.1

        /* renamed from: a */
        private final AtomicInteger f4170a = new AtomicInteger(1);

        @Override // java.util.concurrent.ThreadFactory
        public Thread newThread(Runnable runnable) {
            Thread thread = new Thread(runnable, "SaturativeThread #" + this.f4170a.getAndIncrement());
            C2219d.m177a(thread);
            return thread;
        }
    };

    /* renamed from: b */
    private static final HashSet<Thread> f4168b = new HashSet<>();

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.wrapper.a.d$a */
    /* loaded from: classes.dex */
    protected static class RunnableC2221a implements Runnable {

        /* renamed from: a */
        static final AtomicInteger f4171a = new AtomicInteger();

        /* renamed from: b */
        Runnable f4172b;

        public RunnableC2221a(Runnable runnable) {
            this.f4172b = runnable;
        }

        @Override // java.lang.Runnable
        public void run() {
            f4171a.incrementAndGet();
            try {
                this.f4172b.run();
            } finally {
                f4171a.decrementAndGet();
            }
        }
    }

    @Override // java.util.concurrent.ThreadPoolExecutor, java.util.concurrent.Executor
    public void execute(Runnable runnable) {
        super.execute(new RunnableC2221a(runnable));
    }

    /* renamed from: a */
    public static final boolean m176a(ThreadPoolExecutor threadPoolExecutor) {
        if (Build.VERSION.SDK_INT >= 11) {
            try {
                Field declaredField = AsyncTask.class.getDeclaredField("THREAD_POOL_EXECUTOR");
                declaredField.setAccessible(true);
                declaredField.set(null, threadPoolExecutor);
            } catch (Exception unused) {
            }
        }
        try {
            try {
                try {
                    Method method = AsyncTask.class.getMethod("setDefaultExecutor", Executor.class);
                    method.setAccessible(true);
                    method.invoke(null, threadPoolExecutor);
                    return true;
                } catch (Exception unused2) {
                    Field declaredField2 = AsyncTask.class.getDeclaredField("sDefaultExecutor");
                    declaredField2.setAccessible(true);
                    declaredField2.set(null, threadPoolExecutor);
                    return true;
                }
            } catch (Exception unused3) {
                Field declaredField3 = AsyncTask.class.getDeclaredField("sExecutor");
                declaredField3.setAccessible(true);
                declaredField3.set(null, threadPoolExecutor);
                return true;
            }
        } catch (Exception unused4) {
            return false;
        }
    }

    /* renamed from: a */
    public static void m177a(Thread thread) {
        synchronized (f4168b) {
            f4168b.add(thread);
        }
    }
}
