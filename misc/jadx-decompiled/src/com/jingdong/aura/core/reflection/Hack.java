package com.jingdong.aura.core.reflection;

import com.jingdong.aura.core.reflection.C2167c;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class Hack {

    /* renamed from: a */
    private static AbstractC2158a f3986a;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.reflection.Hack$a */
    /* loaded from: classes.dex */
    public interface AbstractC2158a {
        /* renamed from: a */
        boolean mo360a(HackDeclaration.HackAssertionException hackAssertionException);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class HackDeclaration {

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public static class HackAssertionException extends Throwable {
            private static final long serialVersionUID = 1;
            private Class<?> mHackedClass;
            private String mHackedFieldName;
            private String mHackedMethodName;

            public HackAssertionException(String str) {
                super(str);
            }

            public HackAssertionException(Exception exc) {
                super(exc);
            }

            @Override // java.lang.Throwable, java.lang.Object
            public String toString() {
                if (getCause() == null) {
                    return super.toString();
                }
                return getClass().getName() + ": " + getCause();
            }

            public Class<?> getHackedClass() {
                return this.mHackedClass;
            }

            public void setHackedClass(Class<?> cls) {
                this.mHackedClass = cls;
            }

            public String getHackedMethodName() {
                return this.mHackedMethodName;
            }

            public void setHackedMethodName(String str) {
                this.mHackedMethodName = str;
            }

            public String getHackedFieldName() {
                return this.mHackedFieldName;
            }

            public void setHackedFieldName(String str) {
                this.mHackedFieldName = str;
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.reflection.Hack$b */
    /* loaded from: classes.dex */
    public static class C2159b<C> {

        /* renamed from: a */
        protected Class<C> f3987a;

        /* renamed from: a */
        public C2161d<C, Object> m388a(String str) {
            return new C2161d<>(this.f3987a, str, 8);
        }

        /* renamed from: b */
        public C2161d<C, Object> m385b(String str) {
            return new C2161d<>(this.f3987a, str, 0);
        }

        /* renamed from: a */
        public C2162e m387a(String str, Class<?>... clsArr) {
            return new C2162e(this.f3987a, str, clsArr, 0);
        }

        /* renamed from: a */
        public C2160c m386a(Class<?>... clsArr) {
            return new C2160c(this.f3987a, clsArr);
        }

        public C2159b(Class<C> cls) {
            this.f3987a = cls;
        }

        /* renamed from: a */
        public Class<C> m389a() {
            return this.f3987a;
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.reflection.Hack$c */
    /* loaded from: classes.dex */
    public static class C2160c {

        /* renamed from: a */
        protected Constructor<?> f3988a;

        C2160c(Class<?> cls, Class<?>[] clsArr) {
            if (cls != null) {
                try {
                    this.f3988a = cls.getDeclaredConstructor(clsArr);
                } catch (Exception e) {
                    HackDeclaration.HackAssertionException hackAssertionException = new HackDeclaration.HackAssertionException(e);
                    hackAssertionException.setHackedClass(cls);
                    Hack.m390b(hackAssertionException);
                }
            }
        }

        /* renamed from: a */
        public Object m384a(Object... objArr) {
            this.f3988a.setAccessible(true);
            try {
                return this.f3988a.newInstance(objArr);
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.reflection.Hack$d */
    /* loaded from: classes.dex */
    public static class C2161d<C, T> {

        /* renamed from: a */
        private final Field f3989a;

        /* JADX WARN: Multi-variable type inference failed */
        /* renamed from: a */
        public <T2> C2161d<C, T2> m382a(Class<?> cls) {
            Field field = this.f3989a;
            if (field != null && !cls.isAssignableFrom(field.getType())) {
                Hack.m390b(new HackDeclaration.HackAssertionException(new ClassCastException(this.f3989a + " is not of type " + cls)));
            }
            return this;
        }

        /* JADX WARN: Multi-variable type inference failed */
        /* renamed from: b */
        public <T2> C2161d<C, T2> m378b(Class<T2> cls) {
            Field field = this.f3989a;
            if (field != null && !cls.isAssignableFrom(field.getType())) {
                Hack.m390b(new HackDeclaration.HackAssertionException(new ClassCastException(this.f3989a + " is not of type " + cls)));
            }
            return this;
        }

        /* renamed from: a */
        public T m381a(C c) {
            try {
                return (T) this.f3989a.get(c);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return null;
            }
        }

        /* renamed from: a */
        public void m379a(C c, Object obj) {
            boolean z;
            RuntimeException runtimeException;
            try {
                this.f3989a.set(c, obj);
            } finally {
                if (!z) {
                }
            }
        }

        /* renamed from: a */
        public void m380a(C c, C2167c.AbstractC2168a<?> aVar) {
            T a = m381a((C2161d<C, T>) c);
            if (a != null) {
                m379a((C2161d<C, T>) c, C2167c.m355a(a, aVar, a.getClass().getInterfaces()));
                return;
            }
            throw new IllegalStateException("Cannot hijack null");
        }

        C2161d(Class<C> cls, String str, int i) {
            Field field = null;
            if (cls != null) {
                try {
                    try {
                        field = cls.getDeclaredField(str);
                        if (i > 0 && (field.getModifiers() & i) != i) {
                            Hack.m390b(new HackDeclaration.HackAssertionException(field + " does not match modifiers: " + i));
                        }
                        field.setAccessible(true);
                    } catch (Exception e) {
                        HackDeclaration.HackAssertionException hackAssertionException = new HackDeclaration.HackAssertionException(e);
                        hackAssertionException.setHackedClass(cls);
                        hackAssertionException.setHackedFieldName(str);
                        Hack.m390b(hackAssertionException);
                    }
                } finally {
                    this.f3989a = field;
                }
            }
        }

        /* renamed from: a */
        public Field m383a() {
            return this.f3989a;
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.reflection.Hack$e */
    /* loaded from: classes.dex */
    public static class C2162e {

        /* renamed from: a */
        protected final Method f3990a;

        /* renamed from: a */
        public Object m377a(Object obj, Object... objArr) {
            try {
                return this.f3990a.invoke(obj, objArr);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return null;
            }
        }

        C2162e(Class<?> cls, String str, Class<?>[] clsArr, int i) {
            Method method = null;
            if (cls != null) {
                try {
                    try {
                        method = cls.getDeclaredMethod(str, clsArr);
                        if (i > 0 && (method.getModifiers() & i) != i) {
                            Hack.m390b(new HackDeclaration.HackAssertionException(method + " does not match modifiers: " + i));
                        }
                        method.setAccessible(true);
                    } catch (Exception e) {
                        HackDeclaration.HackAssertionException hackAssertionException = new HackDeclaration.HackAssertionException(e);
                        hackAssertionException.setHackedClass(cls);
                        hackAssertionException.setHackedMethodName(str);
                        Hack.m390b(hackAssertionException);
                    }
                } finally {
                    this.f3990a = method;
                }
            }
        }
    }

    /* renamed from: a */
    public static <T> C2159b<T> m392a(Class<T> cls) {
        return new C2159b<>(cls);
    }

    /* renamed from: a */
    public static <T> C2159b<T> m391a(String str) {
        try {
            return new C2159b<>(Class.forName(str));
        } catch (Exception e) {
            m390b(new HackDeclaration.HackAssertionException(e));
            return new C2159b<>(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: b */
    public static void m390b(HackDeclaration.HackAssertionException hackAssertionException) {
        AbstractC2158a aVar = f3986a;
        if (aVar == null || !aVar.mo360a(hackAssertionException)) {
            throw hackAssertionException;
        }
    }

    /* renamed from: a */
    public static void m393a(AbstractC2158a aVar) {
        f3986a = aVar;
    }
}
