package com.jingdong.aura.core.util;

import android.text.TextUtils;
import com.jingdong.aura.core.p122b.C2150e;
import com.jingdong.aura.core.runing.C2181k;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.util.zip.ZipFile;

/* compiled from: TbsSdkJava */
/* renamed from: com.jingdong.aura.core.util.d */
/* loaded from: classes.dex */
public class C2201d {
    /* renamed from: a */
    public static String m247a(String str) {
        Throwable th;
        FileChannel fileChannel;
        FileInputStream fileInputStream;
        FileChannel fileChannel2;
        Exception e;
        try {
            try {
                MessageDigest instance = MessageDigest.getInstance("MD5");
                File file = new File(str);
                if (file.exists() && file.isFile()) {
                    fileInputStream = new FileInputStream(file);
                    try {
                        fileChannel2 = fileInputStream.getChannel();
                        try {
                            instance.update(fileChannel2.map(FileChannel.MapMode.READ_ONLY, 0, file.length()));
                            byte[] digest = instance.digest();
                            StringBuilder sb = new StringBuilder(digest.length * 2);
                            for (byte b : digest) {
                                sb.append("0123456789abcdef".charAt((b >> 4) & 15));
                                sb.append("0123456789abcdef".charAt(b & 15));
                            }
                            String sb2 = sb.toString();
                            if (fileChannel2 != null) {
                                try {
                                    fileChannel2.close();
                                } catch (Exception e2) {
                                    e2.printStackTrace();
                                }
                            }
                            try {
                                fileInputStream.close();
                            } catch (Exception e3) {
                                e3.printStackTrace();
                            }
                            return sb2;
                        } catch (Exception e4) {
                            e = e4;
                            e.printStackTrace();
                            C2150e.m428a("getMD5", str + "get md5 failed", "FileUtils.getMD5", e);
                            if (fileChannel2 != null) {
                                try {
                                    fileChannel2.close();
                                } catch (Exception e5) {
                                    e5.printStackTrace();
                                }
                            }
                            if (fileInputStream != null) {
                                try {
                                    fileInputStream.close();
                                } catch (Exception e6) {
                                    e6.printStackTrace();
                                }
                            }
                            return null;
                        }
                    } catch (Exception e7) {
                        e = e7;
                        fileChannel2 = null;
                    } catch (Throwable th2) {
                        th = th2;
                        fileChannel = null;
                        if (fileChannel != null) {
                            try {
                                fileChannel.close();
                            } catch (Exception e8) {
                                e8.printStackTrace();
                            }
                        }
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (Exception e9) {
                                e9.printStackTrace();
                            }
                        }
                        throw th;
                    }
                }
                return null;
            } catch (Exception e10) {
                e = e10;
                fileInputStream = null;
                fileChannel2 = null;
            } catch (Throwable th3) {
                th = th3;
                fileInputStream = null;
                fileChannel = null;
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* renamed from: b */
    public static String m244b(String str) {
        String a = m247a(str);
        if (a == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder();
        byte[] bytes = a.getBytes();
        int length = bytes.length;
        int i = 0;
        while (i < length) {
            int i2 = i + 1;
            int i3 = i2 >= length ? i2 - length : i2;
            int i4 = i + 4;
            if (i4 >= length) {
                i4 -= length;
            }
            sb.append("e70d12f4985ac3b6".charAt((bytes[i] + bytes[i3] + bytes[i4]) & 15));
            i = i2;
        }
        return sb.toString();
    }

    /* JADX WARN: Removed duplicated region for block: B:51:0x006b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0075 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0061 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static void m248a(InputStream inputStream, File file) {
        Throwable th;
        FileOutputStream fileOutputStream;
        Throwable th2;
        try {
            FileChannel fileChannel = null;
            try {
                fileOutputStream = new FileOutputStream(file);
                try {
                    try {
                        fileChannel = fileOutputStream.getChannel();
                        byte[] bArr = new byte[4096];
                        while (true) {
                            int read = inputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileChannel.write(ByteBuffer.wrap(bArr, 0, read));
                        }
                        if (inputStream != null) {
                            try {
                                inputStream.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (fileChannel != null) {
                            try {
                                fileChannel.close();
                            } catch (Exception e2) {
                                e2.printStackTrace();
                            }
                        }
                        fileOutputStream.close();
                    } catch (Throwable th3) {
                        th2 = th3;
                        th2.printStackTrace();
                        if (inputStream != null) {
                            try {
                                inputStream.close();
                            } catch (Exception e3) {
                                e3.printStackTrace();
                            }
                        }
                        if (fileChannel != null) {
                            try {
                                fileChannel.close();
                            } catch (Exception e4) {
                                e4.printStackTrace();
                            }
                        }
                        if (fileOutputStream != null) {
                            fileOutputStream.close();
                        }
                    }
                } catch (Throwable th4) {
                    th = th4;
                    if (inputStream != null) {
                        try {
                            inputStream.close();
                        } catch (Exception e5) {
                            e5.printStackTrace();
                        }
                    }
                    if (fileChannel != null) {
                        try {
                            fileChannel.close();
                        } catch (Exception e6) {
                            e6.printStackTrace();
                        }
                    }
                    if (fileOutputStream != null) {
                        try {
                            fileOutputStream.close();
                        } catch (Exception e7) {
                            e7.printStackTrace();
                        }
                    }
                    throw th;
                }
            } catch (Throwable th5) {
                th = th5;
                fileOutputStream = null;
                if (inputStream != null) {
                }
                if (fileChannel != null) {
                }
                if (fileOutputStream != null) {
                }
                throw th;
            }
        } catch (Exception e8) {
            while (true) {
                e8.printStackTrace();
                return;
            }
        }
    }

    /* renamed from: a */
    public static File m249a() {
        File filesDir = C2181k.f4098a.getFilesDir();
        if (filesDir != null) {
            return filesDir;
        }
        return new File("/data/data/" + C2181k.f4098a.getPackageName() + "/files");
    }

    /* renamed from: a */
    public static void m245a(ZipFile zipFile) {
        if (zipFile != null) {
            try {
                zipFile.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /* renamed from: a */
    public static boolean m246a(String str, String str2) {
        if (TextUtils.isEmpty(str) || TextUtils.isEmpty(str2) || !new File(str).exists() || !new File(str2).exists()) {
            return false;
        }
        String a = m247a(str);
        String a2 = m247a(str2);
        if (TextUtils.isEmpty(a) || TextUtils.isEmpty(a2)) {
            return false;
        }
        return a.equals(a2);
    }
}
