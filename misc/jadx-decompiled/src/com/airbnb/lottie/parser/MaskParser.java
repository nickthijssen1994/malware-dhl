package com.airbnb.lottie.parser;

import com.airbnb.lottie.LottieComposition;
import com.airbnb.lottie.model.animatable.AnimatableIntegerValue;
import com.airbnb.lottie.model.animatable.AnimatableShapeValue;
import com.airbnb.lottie.model.content.Mask;
import com.airbnb.lottie.parser.moshi.JsonReader;
import com.airbnb.lottie.utils.Logger;
import com.p051jd.framework.p077a.p078a.C1513a;
import java.io.IOException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
class MaskParser {
    private MaskParser() {
    }

    /* JADX WARN: Code restructure failed: missing block: B:46:0x009f, code lost:
        if (r1.equals(com.huawei.hms.opendevice.C0981i.f1307b) != false) goto L_0x00ad;
     */
    /* JADX WARN: Removed duplicated region for block: B:60:0x005d A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0062 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0067 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x006c A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0059 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x00cd A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x00d6 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x00da A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x00de A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x00b0 A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    static Mask parse(JsonReader jsonReader, LottieComposition lottieComposition) throws IOException {
        char c;
        jsonReader.beginObject();
        Mask.MaskMode maskMode = null;
        AnimatableShapeValue animatableShapeValue = null;
        AnimatableIntegerValue animatableIntegerValue = null;
        boolean z = false;
        while (jsonReader.hasNext()) {
            String nextName = jsonReader.nextName();
            int hashCode = nextName.hashCode();
            char c2 = 3;
            if (hashCode == 111) {
                if (nextName.equals("o")) {
                    c = 2;
                    switch (c) {
                    }
                }
                c = 65535;
                switch (c) {
                }
            } else if (hashCode == 3588) {
                if (nextName.equals("pt")) {
                    c = 1;
                    switch (c) {
                    }
                }
                c = 65535;
                switch (c) {
                }
            } else if (hashCode != 104433) {
                if (hashCode == 3357091 && nextName.equals("mode")) {
                    c = 0;
                    switch (c) {
                        case 0:
                            String nextString = jsonReader.nextString();
                            int hashCode2 = nextString.hashCode();
                            if (hashCode2 != 97) {
                                if (hashCode2 == 105) {
                                    break;
                                } else if (hashCode2 != 110) {
                                    if (hashCode2 == 115 && nextString.equals("s")) {
                                        c2 = 1;
                                        switch (c2) {
                                            case 0:
                                                maskMode = Mask.MaskMode.MASK_MODE_ADD;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                            case 1:
                                                maskMode = Mask.MaskMode.MASK_MODE_SUBTRACT;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                            case 2:
                                                maskMode = Mask.MaskMode.MASK_MODE_NONE;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                            case 3:
                                                lottieComposition.addWarning("Animation contains intersect masks. They are not supported but will be treated like add masks.");
                                                maskMode = Mask.MaskMode.MASK_MODE_INTERSECT;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                            default:
                                                Logger.warning("Unknown mask mode " + nextName + ". Defaulting to Add.");
                                                maskMode = Mask.MaskMode.MASK_MODE_ADD;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                                continue;
                                        }
                                    }
                                    c2 = 65535;
                                    switch (c2) {
                                    }
                                } else {
                                    if (nextString.equals("n")) {
                                        c2 = 2;
                                        switch (c2) {
                                        }
                                    }
                                    c2 = 65535;
                                    switch (c2) {
                                    }
                                }
                            } else {
                                if (nextString.equals(C1513a.f2754a)) {
                                    c2 = 0;
                                    switch (c2) {
                                    }
                                }
                                c2 = 65535;
                                switch (c2) {
                                }
                            }
                            break;
                        case 1:
                            animatableShapeValue = AnimatableValueParser.parseShapeData(jsonReader, lottieComposition);
                            break;
                        case 2:
                            animatableIntegerValue = AnimatableValueParser.parseInteger(jsonReader, lottieComposition);
                            break;
                        case 3:
                            z = jsonReader.nextBoolean();
                            break;
                        default:
                            jsonReader.skipValue();
                            break;
                    }
                }
                c = 65535;
                switch (c) {
                }
            } else {
                if (nextName.equals("inv")) {
                    c = 3;
                    switch (c) {
                    }
                }
                c = 65535;
                switch (c) {
                }
            }
        }
        jsonReader.endObject();
        return new Mask(maskMode, animatableShapeValue, animatableIntegerValue, z);
    }
}
