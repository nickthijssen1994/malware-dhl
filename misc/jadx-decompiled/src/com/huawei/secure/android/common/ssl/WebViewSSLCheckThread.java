package com.huawei.secure.android.common.ssl;

import android.content.Context;
import android.text.TextUtils;
import android.webkit.SslErrorHandler;
import com.facebook.common.util.UriUtil;
import com.huawei.hms.android.HwBuildEx;
import com.huawei.secure.android.common.ssl.util.AbstractC1044f;
import com.huawei.secure.android.common.ssl.util.C1045g;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.IOException;
import java.io.Reader;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.X509HostnameVerifier;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class WebViewSSLCheckThread extends Thread {
    private static final String TAG = "WebViewSSLCheckThread";

    /* renamed from: H */
    private SSLSocketFactory f1605H;

    /* renamed from: I */
    private org.apache.http.conn.ssl.SSLSocketFactory f1606I;

    /* renamed from: J */
    private X509HostnameVerifier f1607J;

    /* renamed from: K */
    private SslErrorHandler f1608K;

    /* renamed from: L */
    private String f1609L;

    /* renamed from: M */
    private Callback f1610M;
    private HostnameVerifier hostnameVerifier;

    /* renamed from: k */
    private Context f1611k;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface Callback {
        void onCancel(Context context, String str);

        void onProceed(Context context, String str);
    }

    public WebViewSSLCheckThread() {
    }

    public WebViewSSLCheckThread(SslErrorHandler sslErrorHandler, String str, Context context) throws CertificateException, NoSuchAlgorithmException, IOException, KeyManagementException, KeyStoreException, IllegalAccessException {
        setSslErrorHandler(sslErrorHandler);
        setUrl(str);
        setContext(context);
        setSslSocketFactory(new SecureSSLSocketFactory(new C1036c(context)));
        setHostnameVerifier(SecureSSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
        try {
            setApacheSSLSocketFactory(new SecureApacheSSLSocketFactory((KeyStore) null, new C1036c(context)));
        } catch (UnrecoverableKeyException e) {
            String str2 = TAG;
            C1045g.m2984e(str2, "WebViewSSLCheckThread: UnrecoverableKeyException : " + e.getMessage());
        }
        setApacheHostnameVerifier(SecureApacheSSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
    }

    @Deprecated
    public WebViewSSLCheckThread(SslErrorHandler sslErrorHandler, String str, SSLSocketFactory sSLSocketFactory, HostnameVerifier hostnameVerifier) {
        setSslErrorHandler(sslErrorHandler);
        setUrl(str);
        setSslSocketFactory(sSLSocketFactory);
        setHostnameVerifier(hostnameVerifier);
    }

    @Deprecated
    public WebViewSSLCheckThread(SslErrorHandler sslErrorHandler, String str, org.apache.http.conn.ssl.SSLSocketFactory sSLSocketFactory, X509HostnameVerifier x509HostnameVerifier) {
        setSslErrorHandler(sslErrorHandler);
        setUrl(str);
        setApacheSSLSocketFactory(sSLSocketFactory);
        setApacheHostnameVerifier(x509HostnameVerifier);
    }

    @Deprecated
    public WebViewSSLCheckThread(SslErrorHandler sslErrorHandler, String str, org.apache.http.conn.ssl.SSLSocketFactory sSLSocketFactory, X509HostnameVerifier x509HostnameVerifier, Callback callback, Context context) {
        this.f1608K = sslErrorHandler;
        this.f1609L = str;
        this.f1606I = sSLSocketFactory;
        this.f1607J = x509HostnameVerifier;
        this.f1610M = callback;
        this.f1611k = context;
    }

    public static void checkServerCertificateWithOK(SslErrorHandler sslErrorHandler, String str, Context context) {
        checkServerCertificateWithOK(sslErrorHandler, str, context, null);
    }

    public static void checkServerCertificateWithOK(final SslErrorHandler sslErrorHandler, final String str, final Context context, final Callback callback) {
        if (sslErrorHandler == null || TextUtils.isEmpty(str) || context == null) {
            C1045g.m2984e(TAG, "checkServerCertificateWithOK: handler or url or context is null");
            return;
        }
        OkHttpClient.Builder builderInit = ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder());
        try {
            SecureSSLSocketFactory secureSSLSocketFactory = new SecureSSLSocketFactory(new C1036c(context));
            secureSSLSocketFactory.setContext(context);
            builderInit.sslSocketFactory(secureSSLSocketFactory, new C1036c(context));
            builderInit.hostnameVerifier(SecureSSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
            ShooterOkhttp3Instrumentation.newCall(builderInit.build(), new Request.Builder().url(str).build()).enqueue(new okhttp3.Callback() { // from class: com.huawei.secure.android.common.ssl.WebViewSSLCheckThread.1
                public void onFailure(Call call, IOException iOException) {
                    String str2 = WebViewSSLCheckThread.TAG;
                    C1045g.m2984e(str2, "onFailure , IO Exception : " + iOException.getMessage());
                    Callback callback2 = Callback.this;
                    if (callback2 != null) {
                        callback2.onCancel(context, str);
                    } else {
                        sslErrorHandler.cancel();
                    }
                }

                public void onResponse(Call call, Response response) throws IOException {
                    C1045g.m2984e(WebViewSSLCheckThread.TAG, "onResponse . proceed");
                    Callback callback2 = Callback.this;
                    if (callback2 != null) {
                        callback2.onProceed(context, str);
                    } else {
                        sslErrorHandler.proceed();
                    }
                }
            });
        } catch (Exception e) {
            String str2 = TAG;
            C1045g.m2984e(str2, "checkServerCertificateWithOK: exception : " + e.getMessage());
            sslErrorHandler.cancel();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v2, types: [javax.net.ssl.HostnameVerifier] */
    /* JADX WARN: Type inference failed for: r0v8 */
    @Override // java.lang.Thread, java.lang.Runnable
    public void run() {
        Throwable th;
        Exception e;
        HttpsURLConnection httpsURLConnection;
        super.run();
        if (this.f1606I == null || this.f1607J == null) {
            if (this.f1605H != null) {
                HttpsURLConnection httpsURLConnection2 = this.hostnameVerifier;
                try {
                    if (httpsURLConnection2 != 0) {
                        try {
                            URLConnection openConnection = ShooterUrlConnectionInstrumentation.openConnection(new URL(this.f1609L).openConnection());
                            if (openConnection instanceof HttpsURLConnection) {
                                httpsURLConnection = (HttpsURLConnection) openConnection;
                                try {
                                    httpsURLConnection.setSSLSocketFactory(this.f1605H);
                                    httpsURLConnection.setHostnameVerifier(this.hostnameVerifier);
                                    httpsURLConnection.setRequestMethod("GET");
                                    httpsURLConnection.setConnectTimeout(HwBuildEx.VersionCodes.CUR_DEVELOPMENT);
                                    httpsURLConnection.setReadTimeout(20000);
                                    httpsURLConnection.connect();
                                } catch (Exception e2) {
                                    e = e2;
                                    C1045g.m2984e(TAG, "exception : " + e.getMessage());
                                    m3042b();
                                    if (httpsURLConnection != null) {
                                        httpsURLConnection.disconnect();
                                        return;
                                    }
                                    return;
                                }
                            } else {
                                httpsURLConnection = null;
                            }
                            if (httpsURLConnection != null) {
                                httpsURLConnection.disconnect();
                            }
                            m3041c();
                            return;
                        } catch (Exception e3) {
                            e = e3;
                            httpsURLConnection = null;
                        } catch (Throwable th2) {
                            th = th2;
                            httpsURLConnection2 = 0;
                            if (httpsURLConnection2 != 0) {
                                httpsURLConnection2.disconnect();
                            }
                            throw th;
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                }
            }
            m3042b();
            return;
        }
        if (this.f1608K != null) {
            try {
                if (!TextUtils.isEmpty(this.f1609L)) {
                    try {
                        this.f1606I.setHostnameVerifier(this.f1607J);
                        if (this.f1606I instanceof SecureApacheSSLSocketFactory) {
                            ((SecureApacheSSLSocketFactory) this.f1606I).setContext(this.f1611k);
                        }
                        BasicHttpParams basicHttpParams = new BasicHttpParams();
                        HttpConnectionParams.setConnectionTimeout(basicHttpParams, 30000);
                        HttpConnectionParams.setSoTimeout(basicHttpParams, 30000);
                        SchemeRegistry schemeRegistry = new SchemeRegistry();
                        schemeRegistry.register(new Scheme(UriUtil.HTTPS_SCHEME, this.f1606I, 443));
                        schemeRegistry.register(new Scheme(UriUtil.HTTP_SCHEME, PlainSocketFactory.getSocketFactory(), 80));
                        DefaultHttpClient defaultHttpClient = new DefaultHttpClient(new ThreadSafeClientConnManager(basicHttpParams, schemeRegistry), basicHttpParams);
                        HttpGet httpGet = new HttpGet();
                        httpGet.setURI(new URI(this.f1609L));
                        HttpResponse execute = defaultHttpClient.execute(httpGet);
                        C1045g.m2986c(TAG, "status code is : " + execute.getStatusLine().getStatusCode());
                        AbstractC1044f.m2995a((Reader) null);
                        m3041c();
                        return;
                    } catch (Exception e4) {
                        C1045g.m2984e(TAG, "run: exception : " + e4.getMessage());
                        m3042b();
                        AbstractC1044f.m2995a((Reader) null);
                        return;
                    }
                }
            } catch (Throwable th4) {
                AbstractC1044f.m2995a((Reader) null);
                throw th4;
            }
        }
        C1045g.m2984e(TAG, "sslErrorHandler or url is null");
        m3042b();
    }

    public String getUrl() {
        return this.f1609L;
    }

    public void setUrl(String str) {
        this.f1609L = str;
    }

    public SslErrorHandler getSslErrorHandler() {
        return this.f1608K;
    }

    public void setSslErrorHandler(SslErrorHandler sslErrorHandler) {
        this.f1608K = sslErrorHandler;
    }

    public Callback getCallback() {
        return this.f1610M;
    }

    public void setCallback(Callback callback) {
        this.f1610M = callback;
    }

    public Context getContext() {
        return this.f1611k;
    }

    public void setContext(Context context) {
        this.f1611k = context;
    }

    /* renamed from: b */
    private void m3042b() {
        C1045g.m2986c(TAG, "callbackCancel: ");
        Callback callback = this.f1610M;
        if (callback != null) {
            callback.onCancel(this.f1611k, this.f1609L);
        } else if (this.f1608K != null) {
            C1045g.m2986c(TAG, "callbackCancel 2: ");
            this.f1608K.cancel();
        }
    }

    /* renamed from: c */
    private void m3041c() {
        C1045g.m2986c(TAG, "callbackProceed: ");
        Callback callback = this.f1610M;
        if (callback != null) {
            callback.onProceed(this.f1611k, this.f1609L);
            return;
        }
        SslErrorHandler sslErrorHandler = this.f1608K;
        if (sslErrorHandler != null) {
            sslErrorHandler.proceed();
        }
    }

    public org.apache.http.conn.ssl.SSLSocketFactory getApacheSSLSocketFactory() {
        return this.f1606I;
    }

    public void setApacheSSLSocketFactory(org.apache.http.conn.ssl.SSLSocketFactory sSLSocketFactory) {
        this.f1606I = sSLSocketFactory;
    }

    public X509HostnameVerifier getApacheHostnameVerifier() {
        return this.f1607J;
    }

    public void setApacheHostnameVerifier(X509HostnameVerifier x509HostnameVerifier) {
        this.f1607J = x509HostnameVerifier;
    }

    public SSLSocketFactory getSslSocketFactory() {
        return this.f1605H;
    }

    public void setSslSocketFactory(SSLSocketFactory sSLSocketFactory) {
        this.f1605H = sSLSocketFactory;
    }

    public HostnameVerifier getHostnameVerifier() {
        return this.hostnameVerifier;
    }

    public void setHostnameVerifier(HostnameVerifier hostnameVerifier) {
        this.hostnameVerifier = hostnameVerifier;
    }
}
