package com.huawei.secure.android.common.util;

import android.annotation.SuppressLint;
import android.text.TextUtils;
import android.util.Log;
import com.facebook.common.statfs.StatFsHelper;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ZipUtil {

    /* renamed from: A */
    private static final int f1671A = 4096;

    /* renamed from: B */
    private static final String f1672B = "../";

    /* renamed from: C */
    private static final String f1673C = "..\\";
    private static final String TAG = "ZipUtil";

    /* renamed from: y */
    private static final int f1674y = 104857600;

    /* renamed from: z */
    private static final int f1675z = 100;

    @Deprecated
    public static boolean unZip(String str, String str2, boolean z) throws SecurityCommonException {
        return unZip(str, str2, StatFsHelper.DEFAULT_DISK_RED_LEVEL_IN_BYTES, 100, z);
    }

    /* JADX WARN: Removed duplicated region for block: B:70:0x013d  */
    @Deprecated
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static boolean unZip(String str, String str2, long j, int i, boolean z) throws SecurityCommonException {
        FileOutputStream fileOutputStream;
        ZipInputStream zipInputStream;
        BufferedOutputStream bufferedOutputStream;
        IOException e;
        FileInputStream fileInputStream;
        FileOutputStream fileOutputStream2;
        String str3 = str2;
        boolean z2 = false;
        if (!m2924a(str, str2, j, i)) {
            return false;
        }
        if (str3.endsWith(File.separator) && str2.length() > File.separator.length()) {
            str3 = str3.substring(0, str2.length() - File.separator.length());
        }
        byte[] bArr = new byte[4096];
        ArrayList arrayList = new ArrayList();
        FileInputStream fileInputStream2 = null;
        r6 = null;
        r6 = null;
        BufferedOutputStream bufferedOutputStream2 = null;
        try {
            fileInputStream = new FileInputStream(str);
            try {
                zipInputStream = new ZipInputStream(new BufferedInputStream(fileInputStream));
                fileOutputStream2 = null;
                boolean z3 = true;
                int i2 = 0;
                while (true) {
                    try {
                        ZipEntry nextEntry = zipInputStream.getNextEntry();
                        if (nextEntry == null) {
                            break;
                        }
                        String replaceAll = nextEntry.getName().replaceAll("\\\\", "/");
                        File file = new File(str3, replaceAll);
                        String normalize = Normalizer.normalize(replaceAll, Normalizer.Form.NFKC);
                        if (m2914h(normalize)) {
                            Log.e(TAG, "zipPath is a invalid path: " + m2919d(normalize));
                            z3 = false;
                            break;
                        }
                        if (z && file.exists() && file.isFile()) {
                            m2921c(file);
                        }
                        if (nextEntry.isDirectory()) {
                            m2918e(file);
                            arrayList.add(file);
                        } else {
                            File parentFile = file.getParentFile();
                            if (parentFile != null && !parentFile.exists()) {
                                m2918e(parentFile);
                            }
                            fileOutputStream = new FileOutputStream(file);
                            try {
                                bufferedOutputStream = new BufferedOutputStream(fileOutputStream);
                                while (true) {
                                    try {
                                        int read = zipInputStream.read(bArr, 0, 4096);
                                        if (read == -1) {
                                            break;
                                        }
                                        i2 += read;
                                        if (((long) i2) > j) {
                                            Log.e(TAG, "unzip  over than top size");
                                            z3 = false;
                                            break;
                                        }
                                        bufferedOutputStream.write(bArr, 0, read);
                                    } catch (IOException e2) {
                                        e = e2;
                                        fileInputStream2 = fileInputStream;
                                        try {
                                            LogsUtil.m2950e(TAG, "Unzip IOException : " + e.getMessage());
                                            m2926a(fileInputStream2, bufferedOutputStream, zipInputStream, fileOutputStream);
                                            if (!z2) {
                                            }
                                            return z2;
                                        } catch (Throwable th) {
                                            th = th;
                                            fileInputStream = fileInputStream2;
                                            bufferedOutputStream2 = bufferedOutputStream;
                                            fileOutputStream2 = fileOutputStream;
                                            m2926a(fileInputStream, bufferedOutputStream2, zipInputStream, fileOutputStream2);
                                            throw th;
                                        }
                                    } catch (Throwable th2) {
                                        th = th2;
                                        bufferedOutputStream2 = bufferedOutputStream;
                                        fileOutputStream2 = fileOutputStream;
                                        m2926a(fileInputStream, bufferedOutputStream2, zipInputStream, fileOutputStream2);
                                        throw th;
                                    }
                                }
                                arrayList.add(file);
                                bufferedOutputStream.flush();
                                IOUtil.closeSecure((OutputStream) bufferedOutputStream);
                                IOUtil.closeSecure((OutputStream) fileOutputStream);
                                bufferedOutputStream2 = bufferedOutputStream;
                                fileOutputStream2 = fileOutputStream;
                            } catch (IOException e3) {
                                e = e3;
                                bufferedOutputStream = bufferedOutputStream2;
                                fileInputStream2 = fileInputStream;
                                LogsUtil.m2950e(TAG, "Unzip IOException : " + e.getMessage());
                                m2926a(fileInputStream2, bufferedOutputStream, zipInputStream, fileOutputStream);
                                if (!z2) {
                                }
                                return z2;
                            } catch (Throwable th3) {
                                th = th3;
                                fileOutputStream2 = fileOutputStream;
                                m2926a(fileInputStream, bufferedOutputStream2, zipInputStream, fileOutputStream2);
                                throw th;
                            }
                        }
                        zipInputStream.closeEntry();
                    } catch (IOException e4) {
                        e = e4;
                        fileOutputStream = fileOutputStream2;
                    } catch (Throwable th4) {
                        th = th4;
                        m2926a(fileInputStream, bufferedOutputStream2, zipInputStream, fileOutputStream2);
                        throw th;
                    }
                }
                IOUtil.closeSecure((InputStream) zipInputStream);
                IOUtil.closeSecure((InputStream) fileInputStream);
                m2926a(fileInputStream, bufferedOutputStream2, zipInputStream, fileOutputStream2);
                z2 = z3;
            } catch (IOException e5) {
                e = e5;
                bufferedOutputStream = null;
                zipInputStream = null;
                fileOutputStream = null;
            } catch (Throwable th5) {
                th = th5;
                fileOutputStream2 = null;
                zipInputStream = null;
            }
        } catch (IOException e6) {
            e = e6;
            bufferedOutputStream = null;
            zipInputStream = null;
            fileOutputStream = null;
        } catch (Throwable th6) {
            th = th6;
            fileOutputStream2 = null;
            fileInputStream = null;
            zipInputStream = null;
        }
        if (!z2) {
            m2923a(arrayList);
        }
        return z2;
    }

    public static List<File> unZipNew(String str, String str2, boolean z) throws SecurityCommonException {
        return unZipNew(str, str2, StatFsHelper.DEFAULT_DISK_RED_LEVEL_IN_BYTES, 100, z);
    }

    public static List<File> unZipNew(String str, String str2, long j, int i, boolean z) throws SecurityCommonException {
        if (!m2924a(str, str2, j, i)) {
            return null;
        }
        if (str2.endsWith(File.separator) && str2.length() > File.separator.length()) {
            str2 = str2.substring(0, str2.length() - File.separator.length());
        }
        return m2927a(m2916f(str), m2916f(str2), j, z);
    }

    /* JADX WARN: Code restructure failed: missing block: B:58:0x00fa, code lost:
        if (r3 == false) goto L_0x00fc;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0130  */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v2, types: [java.io.Closeable] */
    /* JADX WARN: Type inference failed for: r6v3 */
    /* JADX WARN: Type inference failed for: r6v4, types: [java.io.Closeable, java.util.zip.ZipFile] */
    /* JADX WARN: Unknown variable types count: 1 */
    @SuppressLint({"NewApi"})
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static List<File> m2927a(File file, File file2, long j, boolean z) {
        IOException e;
        ?? r6;
        BufferedInputStream bufferedInputStream;
        FileOutputStream fileOutputStream;
        Throwable th;
        BufferedOutputStream bufferedOutputStream = null;
        if (file == null || file2 == null) {
            return null;
        }
        boolean z2 = true;
        ArrayList arrayList = new ArrayList();
        try {
            r6 = new ZipFile(file);
            try {
                Enumeration<? extends ZipEntry> entries = r6.entries();
                int i = 0;
                while (true) {
                    if (!entries.hasMoreElements()) {
                        break;
                    }
                    try {
                        ZipEntry zipEntry = (ZipEntry) entries.nextElement();
                        String name = zipEntry.getName();
                        if (!TextUtils.isEmpty(name)) {
                            String normalize = Normalizer.normalize(name, Normalizer.Form.NFKC);
                            if (m2914h(normalize)) {
                                Log.e(TAG, "zipPath is a invalid path: " + m2919d(normalize));
                                z2 = false;
                                break;
                            }
                            File file3 = new File(file2, normalize.replaceAll("\\\\", "/"));
                            if (z && file3.exists() && file3.isFile()) {
                                m2921c(file3);
                            }
                            arrayList.add(file3);
                            if (zipEntry.isDirectory()) {
                                if (!m2922b(file3)) {
                                    IOUtil.closeSecure((Closeable) r6);
                                    m2923a(arrayList);
                                    return null;
                                }
                            } else if (!m2928a(file3)) {
                                IOUtil.closeSecure((Closeable) r6);
                                m2923a(arrayList);
                                return null;
                            } else {
                                try {
                                    bufferedInputStream = new BufferedInputStream(r6.getInputStream(zipEntry));
                                    try {
                                        fileOutputStream = new FileOutputStream(file3);
                                        try {
                                            BufferedOutputStream bufferedOutputStream2 = new BufferedOutputStream(fileOutputStream);
                                            try {
                                                byte[] bArr = new byte[1024];
                                                while (true) {
                                                    int read = bufferedInputStream.read(bArr);
                                                    if (read == -1) {
                                                        break;
                                                    }
                                                    i += read;
                                                    if (((long) i) > j) {
                                                        Log.e(TAG, "unzipFileNew: over than top size");
                                                        z2 = false;
                                                        break;
                                                    }
                                                    bufferedOutputStream2.write(bArr, 0, read);
                                                }
                                                IOUtil.closeSecure((InputStream) bufferedInputStream);
                                                IOUtil.closeSecure((OutputStream) bufferedOutputStream2);
                                                IOUtil.closeSecure((OutputStream) fileOutputStream);
                                            } catch (Throwable th2) {
                                                th = th2;
                                                bufferedOutputStream = bufferedOutputStream2;
                                                IOUtil.closeSecure((InputStream) bufferedInputStream);
                                                IOUtil.closeSecure((OutputStream) bufferedOutputStream);
                                                IOUtil.closeSecure((OutputStream) fileOutputStream);
                                                throw th;
                                            }
                                        } catch (Throwable th3) {
                                            th = th3;
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        fileOutputStream = null;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    fileOutputStream = null;
                                    bufferedInputStream = null;
                                }
                            }
                        }
                    } catch (IllegalArgumentException unused) {
                        Log.e(TAG, "entries.nextElement IllegalArgumentException");
                    }
                }
                IOUtil.closeSecure((Closeable) r6);
            } catch (IOException e2) {
                e = e2;
                bufferedOutputStream = r6;
                try {
                    Log.e(TAG, "unzip new IOException : " + e.getMessage());
                    IOUtil.closeSecure((Closeable) bufferedOutputStream);
                    m2923a(arrayList);
                    return arrayList;
                } catch (Throwable th6) {
                    th = th6;
                    r6 = bufferedOutputStream;
                    z2 = false;
                    IOUtil.closeSecure((Closeable) r6);
                    if (!z2) {
                        m2923a(arrayList);
                    }
                    throw th;
                }
            } catch (Throwable th7) {
                th = th7;
                IOUtil.closeSecure((Closeable) r6);
                if (!z2) {
                }
                throw th;
            }
        } catch (IOException e3) {
            e = e3;
        } catch (Throwable th8) {
            th = th8;
            r6 = 0;
        }
    }

    /* renamed from: d */
    private static String m2919d(String str) {
        if (TextUtils.isEmpty(str)) {
            return str;
        }
        int lastIndexOf = str.lastIndexOf(File.separator);
        return lastIndexOf == -1 ? str : str.substring(lastIndexOf + 1);
    }

    /* renamed from: a */
    private static boolean m2928a(File file) {
        if (file == null) {
            return false;
        }
        if (file.exists()) {
            return file.isFile();
        }
        if (!m2922b(file.getParentFile())) {
            return false;
        }
        try {
            return file.createNewFile();
        } catch (IOException unused) {
            Log.e(TAG, "createOrExistsFile IOException ");
            return false;
        }
    }

    /* renamed from: e */
    private static void m2917e(String str) {
        if (!TextUtils.isEmpty(str) && m2914h(str)) {
            Log.e(TAG, "IllegalArgumentException--path is not a standard path");
            throw new IllegalArgumentException("path is not a standard path");
        }
    }

    /* renamed from: b */
    private static boolean m2922b(File file) {
        return file != null && (!file.exists() ? file.mkdirs() : file.isDirectory());
    }

    /* renamed from: f */
    private static File m2916f(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        return m2915g(str);
    }

    /* renamed from: g */
    private static File m2915g(String str) {
        m2917e(str);
        return new File(str);
    }

    /* JADX WARN: Removed duplicated region for block: B:7:0x0015 A[Catch: IOException -> 0x0053, all -> 0x0050, TryCatch #6 {IOException -> 0x0053, all -> 0x0050, blocks: (B:4:0x0007, B:5:0x000e, B:7:0x0015, B:12:0x0031, B:14:0x003b), top: B:39:0x0007 }] */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static boolean m2925a(String str, long j, int i) {
        boolean z;
        ZipFile zipFile;
        Throwable th;
        IOException e;
        ZipFile zipFile2;
        try {
            z = false;
            zipFile = null;
            try {
                try {
                    zipFile2 = new ZipFile(str);
                } catch (IOException e2) {
                    e = e2;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (IOException unused) {
            LogsUtil.m2950e(TAG, "close zipFile IOException ");
        }
        try {
            Enumeration<? extends ZipEntry> entries = zipFile2.entries();
            long j2 = 0;
            int i2 = 0;
            while (entries.hasMoreElements()) {
                ZipEntry zipEntry = (ZipEntry) entries.nextElement();
                j2 += zipEntry.getSize();
                i2++;
                if (m2914h(zipEntry.getName()) || i2 >= i || j2 > j || zipEntry.getSize() == -1) {
                    LogsUtil.m2950e(TAG, "File name is invalid or too many files or too big");
                    break;
                }
                while (entries.hasMoreElements()) {
                }
            }
            z = true;
            zipFile2.close();
        } catch (IOException e3) {
            e = e3;
            zipFile = zipFile2;
            LogsUtil.m2950e(TAG, "not a valid zip file, IOException : " + e.getMessage());
            if (zipFile != null) {
                zipFile.close();
            }
            return z;
        } catch (Throwable th3) {
            th = th3;
            zipFile = zipFile2;
            if (zipFile != null) {
                try {
                    zipFile.close();
                } catch (IOException unused2) {
                    LogsUtil.m2950e(TAG, "close zipFile IOException ");
                }
            }
            throw th;
        }
        return z;
    }

    /* renamed from: c */
    private static void m2921c(File file) {
        if (file != null) {
            if (file.isFile()) {
                m2920d(file);
            } else if (file.isDirectory()) {
                File[] listFiles = file.listFiles();
                if (listFiles == null || listFiles.length == 0) {
                    m2920d(file);
                    return;
                }
                for (File file2 : listFiles) {
                    m2921c(file2);
                }
                m2920d(file);
            }
        }
    }

    /* renamed from: a */
    private static boolean m2924a(String str, String str2, long j, int i) throws SecurityCommonException {
        if (TextUtils.isEmpty(str) || m2914h(str)) {
            LogsUtil.m2950e(TAG, "zip file is not valid");
            return false;
        } else if (TextUtils.isEmpty(str2) || m2914h(str2)) {
            LogsUtil.m2950e(TAG, "target directory is not valid");
            return false;
        } else if (m2925a(str, j, i)) {
            return true;
        } else {
            LogsUtil.m2950e(TAG, "zip file contains valid chars or too many files");
            throw new SecurityCommonException("unsecure zipfile!");
        }
    }

    /* renamed from: a */
    private static boolean m2923a(List<File> list) {
        try {
            for (File file : list) {
                m2921c(file);
            }
            return true;
        } catch (Exception e) {
            LogsUtil.m2950e(TAG, "unzip fail delete file failed" + e.getMessage());
            return false;
        }
    }

    /* renamed from: a */
    private static void m2926a(FileInputStream fileInputStream, BufferedOutputStream bufferedOutputStream, ZipInputStream zipInputStream, FileOutputStream fileOutputStream) {
        IOUtil.closeSecure((InputStream) fileInputStream);
        IOUtil.closeSecure((OutputStream) bufferedOutputStream);
        IOUtil.closeSecure((InputStream) zipInputStream);
        IOUtil.closeSecure((OutputStream) fileOutputStream);
    }

    /* renamed from: d */
    private static void m2920d(File file) {
        if (file != null && !file.delete()) {
            LogsUtil.m2950e(TAG, "delete file error");
        }
    }

    /* renamed from: e */
    private static void m2918e(File file) {
        if (file != null && !file.exists() && !file.mkdirs()) {
            LogsUtil.m2950e(TAG, "mkdirs error , files exists or IOException.");
        }
    }

    /* renamed from: h */
    private static boolean m2914h(String str) {
        if (TextUtils.isEmpty(str)) {
            Log.e(TAG, "isContainInvalidStr: name is null");
            return true;
        } else if (str.contains(f1672B) || str.contains(f1673C) || str.contains("..") || str.contains("./") || str.contains(".\\.\\") || str.contains("%00")) {
            return true;
        } else {
            return false;
        }
    }
}
