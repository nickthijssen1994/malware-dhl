package com.huawei.secure.android.common.ssl;

import android.content.Context;
import com.huawei.secure.android.common.ssl.util.C1039a;
import com.huawei.secure.android.common.ssl.util.C1041c;
import com.huawei.secure.android.common.ssl.util.C1045g;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.X509TrustManager;
import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.StrictHostnameVerifier;
import org.apache.http.conn.ssl.X509HostnameVerifier;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class SecureApacheSSLSocketFactory extends SSLSocketFactory {
    public static final X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER = new BrowserCompatHostnameVerifier();
    public static final X509HostnameVerifier STRICT_HOSTNAME_VERIFIER = new StrictHostnameVerifier();
    private static final String TAG = SecureApacheSSLSocketFactory.class.getSimpleName();

    /* renamed from: y */
    private static volatile SecureApacheSSLSocketFactory f1579y = null;

    /* renamed from: b */
    private SSLContext f1580b;

    /* renamed from: j */
    private SSLSocket f1581j;

    /* renamed from: k */
    private Context f1582k;

    /* renamed from: l */
    private String[] f1583l;

    /* renamed from: m */
    private X509TrustManager f1584m;

    /* renamed from: n */
    private String[] f1585n;

    /* renamed from: o */
    private String[] f1586o;

    /* renamed from: p */
    private String[] f1587p;

    private SecureApacheSSLSocketFactory(KeyStore keyStore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {
        super(keyStore);
        this.f1581j = null;
    }

    private SecureApacheSSLSocketFactory(KeyStore keyStore, Context context) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException {
        super(keyStore);
        this.f1581j = null;
        if (context == null) {
            C1045g.m2984e(TAG, "SecureSSLSocketFactory: context is null");
            return;
        }
        setContext(context);
        setSslContext(SSLUtil.setSSLContext());
        this.f1584m = SecureX509SingleInstance.getInstance(context);
        this.f1580b.init(null, new X509TrustManager[]{this.f1584m}, null);
    }

    public SecureApacheSSLSocketFactory(KeyStore keyStore, InputStream inputStream, String str) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException {
        super(keyStore);
        this.f1581j = null;
        this.f1580b = SSLUtil.setSSLContext();
        HiCloudX509TrustManager hiCloudX509TrustManager = new HiCloudX509TrustManager(inputStream, str);
        setX509TrustManager(hiCloudX509TrustManager);
        this.f1580b.init(null, new X509TrustManager[]{hiCloudX509TrustManager}, null);
    }

    public SecureApacheSSLSocketFactory(KeyStore keyStore, X509TrustManager x509TrustManager) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException {
        super(keyStore);
        this.f1581j = null;
        this.f1580b = SSLUtil.setSSLContext();
        setX509TrustManager(x509TrustManager);
        this.f1580b.init(null, new X509TrustManager[]{x509TrustManager}, null);
    }

    public static SecureApacheSSLSocketFactory getInstance(KeyStore keyStore, Context context) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException {
        C1041c.setContext(context);
        if (f1579y == null) {
            synchronized (SecureApacheSSLSocketFactory.class) {
                if (f1579y == null) {
                    f1579y = new SecureApacheSSLSocketFactory(keyStore, context);
                }
            }
        }
        return f1579y;
    }

    /* renamed from: a */
    static void m3050a(X509TrustManager x509TrustManager) {
        C1045g.m2986c(TAG, "sasf update socket factory trust manager");
        try {
            f1579y = new SecureApacheSSLSocketFactory((KeyStore) null, x509TrustManager);
        } catch (IOException unused) {
            C1045g.m2984e(TAG, "IOException");
        } catch (KeyManagementException unused2) {
            C1045g.m2984e(TAG, "KeyManagementException");
        } catch (KeyStoreException unused3) {
            C1045g.m2984e(TAG, "KeyStoreException");
        } catch (NoSuchAlgorithmException unused4) {
            C1045g.m2984e(TAG, "NoSuchAlgorithmException");
        } catch (UnrecoverableKeyException unused5) {
            C1045g.m2984e(TAG, "UnrecoverableKeyException");
        } catch (CertificateException unused6) {
            C1045g.m2984e(TAG, "CertificateException");
        }
    }

    public SSLContext getSslContext() {
        return this.f1580b;
    }

    public void setSslContext(SSLContext sSLContext) {
        this.f1580b = sSLContext;
    }

    public Context getContext() {
        return this.f1582k;
    }

    public void setContext(Context context) {
        this.f1582k = context.getApplicationContext();
    }

    public String[] getSupportedCipherSuites() {
        String[] strArr = this.f1583l;
        if (strArr != null) {
            return strArr;
        }
        return new String[0];
    }

    public SSLSocket getSslSocket() {
        return this.f1581j;
    }

    public void setSslSocket(SSLSocket sSLSocket) {
        this.f1581j = sSLSocket;
    }

    @Override // org.apache.http.conn.ssl.SSLSocketFactory, org.apache.http.conn.scheme.LayeredSocketFactory
    public Socket createSocket(Socket socket, String str, int i, boolean z) throws IOException {
        C1045g.m2986c(TAG, "createSocket: socket host port autoClose");
        Socket createSocket = this.f1580b.getSocketFactory().createSocket(socket, str, i, z);
        if (createSocket instanceof SSLSocket) {
            m3049b(createSocket);
            this.f1581j = (SSLSocket) createSocket;
            this.f1583l = (String[]) this.f1581j.getEnabledCipherSuites().clone();
        }
        return createSocket;
    }

    @Override // org.apache.http.conn.ssl.SSLSocketFactory, org.apache.http.conn.scheme.SocketFactory
    public Socket createSocket() throws IOException {
        C1045g.m2986c(TAG, "createSocket: ");
        Socket createSocket = this.f1580b.getSocketFactory().createSocket();
        if (createSocket instanceof SSLSocket) {
            m3049b(createSocket);
            this.f1581j = (SSLSocket) createSocket;
            this.f1583l = (String[]) this.f1581j.getEnabledCipherSuites().clone();
        }
        return createSocket;
    }

    public X509Certificate[] getChain() {
        X509TrustManager x509TrustManager = this.f1584m;
        if (x509TrustManager instanceof SecureX509TrustManager) {
            return ((SecureX509TrustManager) x509TrustManager).getChain();
        }
        return new X509Certificate[0];
    }

    public String[] getBlackCiphers() {
        return this.f1585n;
    }

    public void setBlackCiphers(String[] strArr) {
        this.f1585n = strArr;
    }

    public String[] getWhiteCiphers() {
        return this.f1586o;
    }

    public void setWhiteCiphers(String[] strArr) {
        this.f1586o = strArr;
    }

    public String[] getProtocols() {
        return this.f1587p;
    }

    public void setProtocols(String[] strArr) {
        this.f1587p = strArr;
    }

    public X509TrustManager getX509TrustManager() {
        return this.f1584m;
    }

    public void setX509TrustManager(X509TrustManager x509TrustManager) {
        this.f1584m = x509TrustManager;
    }

    /* renamed from: b */
    private void m3049b(Socket socket) {
        boolean z;
        boolean z2 = true;
        if (!C1039a.m3018a(this.f1587p)) {
            C1045g.m2986c(TAG, "set protocols");
            SSLUtil.setEnabledProtocols((SSLSocket) socket, this.f1587p);
            z = true;
        } else {
            z = false;
        }
        if (!C1039a.m3018a(this.f1586o) || !C1039a.m3018a(this.f1585n)) {
            C1045g.m2986c(TAG, "set white cipher or black cipher");
            SSLSocket sSLSocket = (SSLSocket) socket;
            SSLUtil.setEnabledProtocols(sSLSocket);
            if (!C1039a.m3018a(this.f1586o)) {
                SSLUtil.setWhiteListCipherSuites(sSLSocket, this.f1586o);
            } else {
                SSLUtil.setBlackListCipherSuites(sSLSocket, this.f1585n);
            }
        } else {
            z2 = false;
        }
        if (!z) {
            C1045g.m2986c(TAG, "set default protocols");
            SSLUtil.setEnabledProtocols((SSLSocket) socket);
        }
        if (!z2) {
            C1045g.m2986c(TAG, "set default cipher suites");
            SSLUtil.setEnableSafeCipherSuites((SSLSocket) socket);
        }
    }
}
