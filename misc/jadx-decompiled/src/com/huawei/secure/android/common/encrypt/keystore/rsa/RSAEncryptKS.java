package com.huawei.secure.android.common.encrypt.keystore.rsa;

import android.os.Build;
import android.security.keystore.KeyGenParameterSpec;
import android.text.TextUtils;
import android.util.Base64;
import com.huawei.secure.android.common.encrypt.utils.C1032b;
import com.p051jd.fireeye.common.C1456b;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.spec.MGF1ParameterSpec;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.OAEPParameterSpec;
import javax.crypto.spec.PSource;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public abstract class RSAEncryptKS {

    /* renamed from: C */
    private static final String f1528C = "AndroidKeyStore";

    /* renamed from: G */
    private static final String f1529G = "RSA/ECB/OAEPWithSHA-256AndMGF1Padding";

    /* renamed from: H */
    private static final int f1530H = 2048;

    /* renamed from: I */
    private static final int f1531I = 3072;
    private static final String TAG = "RSAEncryptKS";

    /* renamed from: i */
    private static final String f1532i = "";

    @Deprecated
    public static String encrypt(String str, String str2) {
        if (TextUtils.isEmpty(str2)) {
            return "";
        }
        try {
            return Base64.encodeToString(encrypt(str, str2.getBytes("UTF-8")), 0);
        } catch (UnsupportedEncodingException e) {
            String str3 = TAG;
            C1032b.m3058f(str3, "UnsupportedEncodingException: " + e.getMessage());
            return "";
        }
    }

    @Deprecated
    public static String decrpyt(String str, String str2) {
        try {
            return new String(decrpyt(str, Base64.decode(str2, 0)), "UTF-8");
        } catch (UnsupportedEncodingException e) {
            String str3 = TAG;
            C1032b.m3058f(str3, "UnsupportedEncodingException: " + e.getMessage());
            return "";
        } catch (Exception e2) {
            String str4 = TAG;
            C1032b.m3058f(str4, "Exception: " + e2.getMessage());
            return "";
        }
    }

    @Deprecated
    public static byte[] encrypt(String str, byte[] bArr) {
        return m3096a(str, bArr, false);
    }

    @Deprecated
    public static byte[] decrpyt(String str, byte[] bArr) {
        byte[] bArr2 = new byte[0];
        if (TextUtils.isEmpty(str) || bArr == null) {
            C1032b.m3058f(TAG, "alias or encrypted content is null");
            return bArr2;
        } else if (!isBuildVersionHigherThan22()) {
            C1032b.m3058f(TAG, "sdk version is too low");
            return bArr2;
        } else {
            PrivateKey privateKey = getPrivateKey(str);
            if (privateKey == null) {
                C1032b.m3058f(TAG, "Private key is null");
                return bArr2;
            }
            try {
                Cipher instance = Cipher.getInstance(f1529G);
                instance.init(2, privateKey, new OAEPParameterSpec("SHA-256", "MGF1", new MGF1ParameterSpec("SHA-1"), PSource.PSpecified.DEFAULT));
                return instance.doFinal(bArr);
            } catch (InvalidAlgorithmParameterException e) {
                String str2 = TAG;
                C1032b.m3058f(str2, "InvalidAlgorithmParameterException: " + e.getMessage());
                return bArr2;
            } catch (InvalidKeyException e2) {
                String str3 = TAG;
                C1032b.m3058f(str3, "InvalidKeyException: " + e2.getMessage());
                return bArr2;
            } catch (NoSuchAlgorithmException e3) {
                String str4 = TAG;
                C1032b.m3058f(str4, "NoSuchAlgorithmException: " + e3.getMessage());
                return bArr2;
            } catch (BadPaddingException e4) {
                String str5 = TAG;
                C1032b.m3058f(str5, "BadPaddingException: " + e4.getMessage());
                return bArr2;
            } catch (IllegalBlockSizeException e5) {
                String str6 = TAG;
                C1032b.m3058f(str6, "IllegalBlockSizeException: " + e5.getMessage());
                return bArr2;
            } catch (NoSuchPaddingException e6) {
                String str7 = TAG;
                C1032b.m3058f(str7, "NoSuchPaddingException: " + e6.getMessage());
                return bArr2;
            } catch (Exception e7) {
                String str8 = TAG;
                C1032b.m3058f(str8, "Exception: " + e7.getMessage());
                return bArr2;
            }
        }
    }

    public static String encryptNew(String str, String str2) {
        if (TextUtils.isEmpty(str2)) {
            return "";
        }
        try {
            return Base64.encodeToString(encryptNew(str, str2.getBytes("UTF-8")), 0);
        } catch (UnsupportedEncodingException e) {
            String str3 = TAG;
            C1032b.m3058f(str3, "UnsupportedEncodingException: " + e.getMessage());
            return "";
        }
    }

    public static String decrpytNew(String str, String str2) {
        try {
            return new String(decrpytNew(str, Base64.decode(str2, 0)), "UTF-8");
        } catch (UnsupportedEncodingException e) {
            String str3 = TAG;
            C1032b.m3058f(str3, "UnsupportedEncodingException: " + e.getMessage());
            return "";
        } catch (Exception e2) {
            String str4 = TAG;
            C1032b.m3058f(str4, "Exception: " + e2.getMessage());
            return "";
        }
    }

    public static byte[] encryptNew(String str, byte[] bArr) {
        return m3096a(str, bArr, true);
    }

    public static byte[] decrpytNew(String str, byte[] bArr) {
        return decrpyt(str, bArr);
    }

    /* renamed from: a */
    private static byte[] m3096a(String str, byte[] bArr, boolean z) {
        byte[] bArr2 = new byte[0];
        if (TextUtils.isEmpty(str) || bArr == null) {
            C1032b.m3058f(TAG, "alias or content is null");
            return bArr2;
        } else if (!isBuildVersionHigherThan22()) {
            C1032b.m3058f(TAG, "sdk version is too low");
            return bArr2;
        } else {
            PublicKey b = m3095b(str, z);
            if (b == null) {
                C1032b.m3058f(TAG, "Public key is null");
                return bArr2;
            }
            try {
                Cipher instance = Cipher.getInstance(f1529G);
                instance.init(1, b, new OAEPParameterSpec("SHA-256", "MGF1", new MGF1ParameterSpec("SHA-1"), PSource.PSpecified.DEFAULT));
                return instance.doFinal(bArr);
            } catch (InvalidAlgorithmParameterException e) {
                String str2 = TAG;
                C1032b.m3058f(str2, "InvalidAlgorithmParameterException: " + e.getMessage());
                return bArr2;
            } catch (InvalidKeyException e2) {
                String str3 = TAG;
                C1032b.m3058f(str3, "InvalidKeyException: " + e2.getMessage());
                return bArr2;
            } catch (NoSuchAlgorithmException e3) {
                String str4 = TAG;
                C1032b.m3058f(str4, "NoSuchAlgorithmException: " + e3.getMessage());
                return bArr2;
            } catch (BadPaddingException e4) {
                String str5 = TAG;
                C1032b.m3058f(str5, "BadPaddingException: " + e4.getMessage());
                return bArr2;
            } catch (IllegalBlockSizeException e5) {
                String str6 = TAG;
                C1032b.m3058f(str6, "IllegalBlockSizeException: " + e5.getMessage());
                return bArr2;
            } catch (NoSuchPaddingException e6) {
                String str7 = TAG;
                C1032b.m3058f(str7, "NoSuchPaddingException: " + e6.getMessage());
                return bArr2;
            } catch (Exception e7) {
                String str8 = TAG;
                C1032b.m3058f(str8, "Exception: " + e7.getMessage());
                return bArr2;
            }
        }
    }

    /* renamed from: a */
    private static synchronized KeyPair m3097a(String str, boolean z) {
        synchronized (RSAEncryptKS.class) {
            KeyPair keyPair = null;
            if (m3093g(str)) {
                C1032b.m3058f(TAG, "Key pair exits");
                return null;
            }
            C1032b.m3060d(TAG, "generate key pair.");
            try {
                try {
                    try {
                        try {
                            KeyPairGenerator instance = KeyPairGenerator.getInstance(C1456b.f2601b, f1528C);
                            if (!z) {
                                instance.initialize(new KeyGenParameterSpec.Builder(str, 2).setDigests("SHA-256", "SHA-512").setEncryptionPaddings("OAEPPadding").setKeySize(f1530H).build());
                            } else {
                                instance.initialize(new KeyGenParameterSpec.Builder(str, 2).setDigests("SHA-256", "SHA-512").setEncryptionPaddings("OAEPPadding").setKeySize(f1531I).build());
                            }
                            keyPair = instance.generateKeyPair();
                        } catch (NoSuchProviderException e) {
                            String str2 = TAG;
                            C1032b.m3058f(str2, "NoSuchProviderException: " + e.getMessage());
                        }
                    } catch (NoSuchAlgorithmException e2) {
                        String str3 = TAG;
                        C1032b.m3058f(str3, "NoSuchAlgorithmException: " + e2.getMessage());
                    }
                } catch (InvalidAlgorithmParameterException e3) {
                    String str4 = TAG;
                    C1032b.m3058f(str4, "InvalidAlgorithmParameterException: " + e3.getMessage());
                }
            } catch (Exception e4) {
                String str5 = TAG;
                C1032b.m3058f(str5, "Exception: " + e4.getMessage());
            }
            return keyPair;
        }
    }

    /* renamed from: b */
    private static PublicKey m3095b(String str, boolean z) {
        if (!m3093g(str)) {
            m3097a(str, z);
        }
        Certificate f = m3094f(str);
        if (f != null) {
            return f.getPublicKey();
        }
        return null;
    }

    /* renamed from: f */
    private static Certificate m3094f(String str) {
        try {
            KeyStore instance = KeyStore.getInstance(f1528C);
            instance.load(null);
            return instance.getCertificate(str);
        } catch (IOException e) {
            String str2 = TAG;
            C1032b.m3058f(str2, "IOException: " + e.getMessage());
            return null;
        } catch (KeyStoreException e2) {
            String str3 = TAG;
            C1032b.m3058f(str3, "KeyStoreException: " + e2.getMessage());
            return null;
        } catch (NoSuchAlgorithmException e3) {
            String str4 = TAG;
            C1032b.m3058f(str4, "NoSuchAlgorithmException: " + e3.getMessage());
            return null;
        } catch (CertificateException e4) {
            String str5 = TAG;
            C1032b.m3058f(str5, "CertificateException: " + e4.getMessage());
            return null;
        } catch (Exception e5) {
            String str6 = TAG;
            C1032b.m3058f(str6, "Exception: " + e5.getMessage());
            return null;
        }
    }

    private static PrivateKey getPrivateKey(String str) {
        if (!m3093g(str)) {
            return null;
        }
        try {
            KeyStore instance = KeyStore.getInstance(f1528C);
            instance.load(null);
            return (PrivateKey) instance.getKey(str, null);
        } catch (IOException e) {
            String str2 = TAG;
            C1032b.m3058f(str2, "IOException: " + e.getMessage());
            return null;
        } catch (KeyStoreException e2) {
            String str3 = TAG;
            C1032b.m3058f(str3, "KeyStoreException: " + e2.getMessage());
            return null;
        } catch (NoSuchAlgorithmException e3) {
            String str4 = TAG;
            C1032b.m3058f(str4, "NoSuchAlgorithmException: " + e3.getMessage());
            return null;
        } catch (UnrecoverableKeyException e4) {
            String str5 = TAG;
            C1032b.m3058f(str5, "UnrecoverableKeyException: " + e4.getMessage());
            return null;
        } catch (CertificateException e5) {
            String str6 = TAG;
            C1032b.m3058f(str6, "CertificateException: " + e5.getMessage());
            return null;
        } catch (Exception e6) {
            String str7 = TAG;
            C1032b.m3058f(str7, "Exception: " + e6.getMessage());
            return null;
        }
    }

    private static boolean isBuildVersionHigherThan22() {
        return Build.VERSION.SDK_INT >= 23;
    }

    /* renamed from: g */
    private static boolean m3093g(String str) {
        try {
            KeyStore instance = KeyStore.getInstance(f1528C);
            instance.load(null);
            if (instance.getKey(str, null) != null) {
                return true;
            }
            return false;
        } catch (IOException e) {
            String str2 = TAG;
            C1032b.m3058f(str2, "IOException: " + e.getMessage());
            return false;
        } catch (KeyStoreException e2) {
            String str3 = TAG;
            C1032b.m3058f(str3, "KeyStoreException: " + e2.getMessage());
            return false;
        } catch (NoSuchAlgorithmException e3) {
            String str4 = TAG;
            C1032b.m3058f(str4, "NoSuchAlgorithmException: " + e3.getMessage());
            return false;
        } catch (UnrecoverableKeyException e4) {
            String str5 = TAG;
            C1032b.m3058f(str5, "UnrecoverableKeyException: " + e4.getMessage());
            return false;
        } catch (CertificateException e5) {
            String str6 = TAG;
            C1032b.m3058f(str6, "CertificateException: " + e5.getMessage());
            return false;
        } catch (Exception e6) {
            String str7 = TAG;
            C1032b.m3058f(str7, "Exception: " + e6.getMessage());
            return false;
        }
    }
}
