package com.huawei.secure.android.common.ssl;

import android.content.Context;
import com.huawei.secure.android.common.ssl.util.AbstractC1044f;
import com.huawei.secure.android.common.ssl.util.BksUtil;
import com.huawei.secure.android.common.ssl.util.C1041c;
import com.huawei.secure.android.common.ssl.util.C1045g;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class SecureX509TrustManager implements X509TrustManager {

    /* renamed from: A */
    public static final String f1598A;

    /* renamed from: B */
    private static final String f1599B;

    /* renamed from: C */
    private static final String f1600C;

    /* renamed from: D */
    private static final String f1601D;

    /* renamed from: E */
    private static final String f1602E;
    private static final String TAG;

    /* renamed from: F */
    protected List<X509TrustManager> f1603F;

    /* renamed from: G */
    private X509Certificate[] f1604G;

    public List<X509TrustManager> getX509TrustManagers() {
        return this.f1603F;
    }

    public void setX509TrustManagers(List<X509TrustManager> list) {
        this.f1603F = list;
    }

    public SecureX509TrustManager(Context context) throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, IllegalArgumentException {
        this(context, false);
    }

    public SecureX509TrustManager(Context context, boolean z) throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, IllegalArgumentException {
        this.f1603F = new ArrayList();
        if (context != null) {
            C1041c.setContext(context);
            if (z) {
                m3046a();
            }
            m3045a(context);
            if (this.f1603F.isEmpty()) {
                throw new CertificateException("X509TrustManager is empty");
            }
            return;
        }
        throw new IllegalArgumentException("context is null");
    }

    public SecureX509TrustManager(InputStream inputStream, String str) throws IllegalArgumentException {
        this.f1603F = new ArrayList();
        m3043a(inputStream, str);
    }

    public SecureX509TrustManager(String str) throws IllegalArgumentException, FileNotFoundException {
        this(str, false);
    }

    public SecureX509TrustManager(String str, boolean z) throws IllegalArgumentException, FileNotFoundException {
        Throwable th;
        FileInputStream fileInputStream;
        this.f1603F = new ArrayList();
        FileInputStream fileInputStream2 = null;
        try {
            fileInputStream = new FileInputStream(str);
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            m3043a(fileInputStream, "");
            AbstractC1044f.m2993c(fileInputStream);
            if (z) {
                m3046a();
            }
        } catch (Throwable th3) {
            th = th3;
            fileInputStream2 = fileInputStream;
            AbstractC1044f.m2993c(fileInputStream2);
            throw th;
        }
    }

    public SecureX509TrustManager(InputStream inputStream, String str, boolean z) throws IllegalArgumentException {
        this.f1603F = new ArrayList();
        m3043a(inputStream, str);
        if (z) {
            m3046a();
        }
    }

    /* renamed from: a */
    private void m3046a() {
        C1045g.m2986c(TAG, "loadSystemCA");
        try {
            KeyStore instance = KeyStore.getInstance(f1602E);
            instance.load(null, null);
            TrustManagerFactory instance2 = TrustManagerFactory.getInstance(f1600C);
            instance2.init(instance);
            TrustManager[] trustManagers = instance2.getTrustManagers();
            for (int i = 0; i < trustManagers.length; i++) {
                if (trustManagers[i] instanceof X509TrustManager) {
                    this.f1603F.add((X509TrustManager) trustManagers[i]);
                }
            }
        } catch (IOException | KeyStoreException | NoSuchAlgorithmException | CertificateException e) {
            String str = TAG;
            C1045g.m2984e(str, "loadSystemCA: exception : " + e.getMessage());
        }
    }

    /* renamed from: a */
    private void m3045a(Context context) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {
        boolean z;
        C1045g.m2986c(TAG, "loadBksCA");
        InputStream filesBksIS = BksUtil.getFilesBksIS(context);
        if (filesBksIS != null) {
            try {
                C1045g.m2986c(TAG, " get bks not from assets");
                m3044a(filesBksIS);
            } catch (IOException | KeyStoreException | NoSuchAlgorithmException | CertificateException e) {
                String str = TAG;
                C1045g.m2984e(str, "loadBksCA: exception : " + e.getMessage());
                z = false;
            }
        }
        z = true;
        if (!z || filesBksIS == null) {
            C1045g.m2986c(TAG, " get bks from assets ");
            m3044a(context.getAssets().open(f1598A));
        }
    }

    /* renamed from: a */
    private void m3044a(InputStream inputStream) throws NoSuchAlgorithmException, KeyStoreException, CertificateException, IOException {
        try {
            TrustManagerFactory instance = TrustManagerFactory.getInstance(f1600C);
            KeyStore instance2 = KeyStore.getInstance(f1601D);
            instance2.load(inputStream, "".toCharArray());
            instance.init(instance2);
            TrustManager[] trustManagers = instance.getTrustManagers();
            for (int i = 0; i < trustManagers.length; i++) {
                if (trustManagers[i] instanceof X509TrustManager) {
                    this.f1603F.add((X509TrustManager) trustManagers[i]);
                }
            }
        } finally {
            AbstractC1044f.m2993c(inputStream);
        }
    }

    /* renamed from: a */
    private void m3043a(InputStream inputStream, String str) {
        if (inputStream != null) {
            try {
                if (str != null) {
                    try {
                        TrustManagerFactory instance = TrustManagerFactory.getInstance(f1600C);
                        KeyStore instance2 = KeyStore.getInstance(f1601D);
                        instance2.load(inputStream, str.toCharArray());
                        instance.init(instance2);
                        TrustManager[] trustManagers = instance.getTrustManagers();
                        for (int i = 0; i < trustManagers.length; i++) {
                            if (trustManagers[i] instanceof X509TrustManager) {
                                this.f1603F.add((X509TrustManager) trustManagers[i]);
                            }
                        }
                    } catch (IOException | KeyStoreException | NoSuchAlgorithmException | CertificateException e) {
                        String str2 = TAG;
                        C1045g.m2984e(str2, "loadInputStream: exception : " + e.getMessage());
                    }
                    return;
                }
            } finally {
                AbstractC1044f.m2993c(inputStream);
            }
        }
        throw new IllegalArgumentException("inputstream or trustPwd is null");
    }

    @Override // javax.net.ssl.X509TrustManager
    public void checkClientTrusted(X509Certificate[] x509CertificateArr, String str) throws CertificateException {
        C1045g.m2986c(TAG, "checkClientTrusted: ");
        for (X509TrustManager x509TrustManager : this.f1603F) {
            try {
                x509TrustManager.checkServerTrusted(x509CertificateArr, str);
                return;
            } catch (CertificateException e) {
                String str2 = TAG;
                C1045g.m2984e(str2, "checkServerTrusted CertificateException" + e.getMessage());
            }
        }
        throw new CertificateException("checkServerTrusted CertificateException");
    }

    @Override // javax.net.ssl.X509TrustManager
    public void checkServerTrusted(X509Certificate[] x509CertificateArr, String str) throws CertificateException {
        setChain(x509CertificateArr);
        C1045g.m2986c(TAG, "checkServerTrusted begin ,server ca chain size is : " + x509CertificateArr.length + " ,auth type is : " + str);
        for (X509Certificate x509Certificate : x509CertificateArr) {
            C1045g.m2987b(TAG, "server ca chain: getSubjectDN is :" + x509Certificate.getSubjectDN() + " , getIssuerDN :" + x509Certificate.getIssuerDN());
            String str2 = TAG;
            StringBuilder sb = new StringBuilder();
            sb.append("server ca chain is :");
            sb.append(x509Certificate);
            C1045g.m2987b(str2, sb.toString());
        }
        int size = this.f1603F.size();
        for (int i = 0; i < size; i++) {
            try {
                C1045g.m2986c(TAG, "check server i : " + i);
                X509TrustManager x509TrustManager = this.f1603F.get(i);
                X509Certificate[] acceptedIssuers = x509TrustManager.getAcceptedIssuers();
                if (acceptedIssuers != null) {
                    C1045g.m2986c(TAG, "client root ca size is : " + acceptedIssuers.length);
                    for (int i2 = 0; i2 < acceptedIssuers.length; i2++) {
                        C1045g.m2987b(TAG, "client root ca getIssuerDN :" + acceptedIssuers[i2].getIssuerDN());
                    }
                }
                x509TrustManager.checkServerTrusted(x509CertificateArr, str);
                C1045g.m2986c(TAG, "checkServerTrusted succeed ,root ca issuer is : " + x509CertificateArr[x509CertificateArr.length - 1].getIssuerDN());
                return;
            } catch (CertificateException e) {
                C1045g.m2984e(TAG, "checkServerTrusted error :" + e.getMessage() + " , time : " + i);
                if (i == size - 1) {
                    if (x509CertificateArr != null && x509CertificateArr.length > 0) {
                        C1045g.m2984e(TAG, "root ca issuer : " + x509CertificateArr[x509CertificateArr.length - 1].getIssuerDN());
                    }
                    throw e;
                }
            }
        }
    }

    @Override // javax.net.ssl.X509TrustManager
    public X509Certificate[] getAcceptedIssuers() {
        try {
            ArrayList arrayList = new ArrayList();
            for (X509TrustManager x509TrustManager : this.f1603F) {
                arrayList.addAll(Arrays.asList(x509TrustManager.getAcceptedIssuers()));
            }
            return (X509Certificate[]) arrayList.toArray(new X509Certificate[arrayList.size()]);
        } catch (Exception e) {
            String str = TAG;
            C1045g.m2984e(str, "getAcceptedIssuers exception : " + e.getMessage());
            return new X509Certificate[0];
        }
    }

    public X509Certificate[] getChain() {
        return this.f1604G;
    }

    public void setChain(X509Certificate[] x509CertificateArr) {
        this.f1604G = x509CertificateArr;
    }
}
