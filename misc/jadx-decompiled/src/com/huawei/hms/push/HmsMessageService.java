package com.huawei.hms.push;

import android.annotation.SuppressLint;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.text.TextUtils;
import com.huawei.hms.aaid.constant.ErrorEnum;
import com.huawei.hms.aaid.utils.BaseUtils;
import com.huawei.hms.adapter.internal.CommonCode;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.huawei.hms.push.utils.PushBiUtil;
import com.huawei.hms.support.api.entity.push.PushNaming;
import com.huawei.hms.support.api.push.PushReceiver;
import com.huawei.hms.support.log.HMSLog;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class HmsMessageService extends Service {
    public static final String PROXY_TYPE = "proxy_type";
    public static final String SUBJECT_ID = "subject_id";

    /* renamed from: a */
    public final Messenger f1341a = new Messenger(new HandlerC0994a());

    /* compiled from: TbsSdkJava */
    @SuppressLint({"HandlerLeak"})
    /* renamed from: com.huawei.hms.push.HmsMessageService$a */
    /* loaded from: classes.dex */
    private class HandlerC0994a extends Handler {
        public HandlerC0994a() {
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            if (message == null) {
                HMSLog.m3177e("HmsMessageService", "receive message is null");
                return;
            }
            HMSLog.m3175i("HmsMessageService", "handle message start ");
            Bundle data = message.getData();
            if (data != null) {
                Intent intent = new Intent();
                intent.putExtras(data);
                intent.putExtra("inputType", data.getInt("inputType", -1));
                HmsMessageService.this.m3221b(intent);
            }
            super.handleMessage(message);
        }
    }

    /* renamed from: b */
    public final void m3221b(Intent intent) {
        if (intent == null) {
            HMSLog.m3177e("HmsMessageService", "receive message is null");
            return;
        }
        String stringExtra = intent.getStringExtra("message_id");
        String stringExtra2 = intent.getStringExtra(RemoteMessageConst.MSGTYPE);
        String stringExtra3 = intent.getStringExtra(CommonCode.MapKey.TRANSACTION_ID);
        if ("new_token".equals(stringExtra2)) {
            HMSLog.m3175i("HmsMessageService", "onNewToken");
            m3226a(intent, stringExtra3);
        } else if ("received_message".equals(stringExtra2)) {
            HMSLog.m3175i("HmsMessageService", "onMessageReceived, message id:" + stringExtra);
            m3222a(PushNaming.RECEIVE_MSG_RSP, stringExtra, ErrorEnum.SUCCESS.getInternalCode());
            doMsgReceived(intent);
        } else if ("sent_message".equals(stringExtra2)) {
            m3220b(stringExtra3, stringExtra);
        } else if ("send_error".equals(stringExtra2)) {
            m3219b(stringExtra3, stringExtra, intent.getIntExtra("error", ErrorEnum.ERROR_UNKNOWN.getInternalCode()));
        } else if ("delivery".equals(stringExtra2)) {
            int intExtra = intent.getIntExtra("error", ErrorEnum.ERROR_APP_SERVER_NOT_ONLINE.getInternalCode());
            HMSLog.m3175i("HmsMessageService", "onMessageDelivery, message id:" + stringExtra + ", status:" + intExtra + ", transactionId: " + stringExtra3);
            m3222a(PushNaming.UPSEND_RECEIPT, stringExtra3, intExtra);
            onMessageDelivered(stringExtra, new SendException(intExtra));
        } else if ("server_deleted_message".equals(stringExtra2)) {
            HMSLog.m3175i("HmsMessageService", "delete message, message id:" + stringExtra);
            onDeletedMessages();
        } else if ("batchSent".equals(stringExtra2)) {
            m3218c(intent);
        } else {
            HMSLog.m3177e("HmsMessageService", "Receive unknown message: " + stringExtra2);
        }
    }

    /* renamed from: c */
    public final void m3218c(Intent intent) {
        HMSLog.m3175i("HmsMessageService", "parse batch response.");
        String stringExtra = intent.getStringExtra("batchMsgbody");
        if (!TextUtils.isEmpty(stringExtra)) {
            try {
                JSONArray jSONArray = new JSONArray(stringExtra);
                for (int i = 0; i < jSONArray.length(); i++) {
                    JSONObject jSONObject = jSONArray.getJSONObject(i);
                    String optString = jSONObject.optString(PushReceiver.PushMessageThread.TRANS_ID);
                    String optString2 = jSONObject.optString("msgId");
                    int optInt = jSONObject.optInt("ret", ErrorEnum.ERROR_UNKNOWN.getInternalCode());
                    if (ErrorEnum.SUCCESS.getInternalCode() == optInt) {
                        m3220b(optString, optString2);
                    } else {
                        m3219b(optString, optString2, optInt);
                    }
                }
            } catch (JSONException unused) {
                HMSLog.m3174w("HmsMessageService", "parse batch response failed.");
            }
        }
    }

    public void doMsgReceived(Intent intent) {
        onMessageReceived(new RemoteMessage(m3228a(intent)));
    }

    @Override // android.app.Service
    public IBinder onBind(Intent intent) {
        HMSLog.m3175i("HmsMessageService", "start to bind");
        return this.f1341a.getBinder();
    }

    public void onDeletedMessages() {
    }

    @Override // android.app.Service
    public void onDestroy() {
        HMSLog.m3175i("HmsMessageService", "start to destroy");
        super.onDestroy();
    }

    public void onMessageDelivered(String str, Exception exc) {
    }

    public void onMessageReceived(RemoteMessage remoteMessage) {
    }

    public void onMessageSent(String str) {
    }

    public void onNewToken(String str) {
    }

    public void onNewToken(String str, Bundle bundle) {
    }

    public void onSendError(String str, Exception exc) {
    }

    @Override // android.app.Service
    public int onStartCommand(Intent intent, int i, int i2) {
        HMSLog.m3175i("HmsMessageService", "start to command , startId = " + i2);
        m3221b(intent);
        return 2;
    }

    public void onTokenError(Exception exc) {
    }

    public void onTokenError(Exception exc, Bundle bundle) {
    }

    /* renamed from: a */
    public final void m3223a(String str, String str2) {
        if (!TextUtils.isEmpty(str)) {
            Context applicationContext = getApplicationContext();
            if (!str.equals(BaseUtils.getLocalToken(applicationContext, str2))) {
                HMSLog.m3175i("HmsMessageService", "receive a token, refresh the local token");
                BaseUtils.saveToken(applicationContext, str2, str);
                return;
            }
            BaseUtils.reportAaidToken(applicationContext, str);
        }
    }

    /* renamed from: a */
    public final Bundle m3228a(Intent intent) {
        Bundle bundle = new Bundle();
        bundle.putString("message_id", intent.getStringExtra("message_id"));
        bundle.putByteArray(RemoteMessageConst.MSGBODY, intent.getByteArrayExtra(RemoteMessageConst.MSGBODY));
        bundle.putString("device_token", intent.getStringExtra("device_token"));
        if (intent.getIntExtra("inputType", -1) == 1) {
            bundle.putInt("inputType", 1);
        }
        return bundle;
    }

    /* renamed from: a */
    public final void m3226a(Intent intent, String str) {
        int intExtra = intent.getIntExtra("error", ErrorEnum.SUCCESS.getInternalCode());
        m3222a(PushNaming.GETTOKEN_ASYNC_RSP, str, intExtra);
        String stringExtra = intent.getStringExtra("subjectId");
        String stringExtra2 = intent.getStringExtra("message_proxy_type");
        HMSLog.m3175i("HmsMessageService", "doOnNewToken:transactionId = " + str + " , internalCode = " + intExtra + ",subjectId:" + stringExtra + ",proxyType:" + stringExtra2);
        Bundle bundle = new Bundle();
        if (!TextUtils.isEmpty(stringExtra)) {
            bundle.putString(SUBJECT_ID, stringExtra);
        }
        if (!TextUtils.isEmpty(stringExtra2)) {
            bundle.putString(PROXY_TYPE, stringExtra2);
        }
        if (intExtra == ErrorEnum.SUCCESS.getInternalCode()) {
            HMSLog.m3175i("HmsMessageService", "Apply token OnNewToken, subId: " + stringExtra);
            m3227a(intent, bundle, stringExtra);
            return;
        }
        HMSLog.m3175i("HmsMessageService", "Apply token failed, subId: " + stringExtra);
        m3225a(bundle, stringExtra, intExtra);
    }

    /* renamed from: b */
    public final void m3220b(String str, String str2) {
        HMSLog.m3175i("HmsMessageService", "onMessageSent, message id:" + str2 + ", transactionId: " + str);
        m3222a(PushNaming.UPSEND_MSG_ASYNC_RSP, str, ErrorEnum.SUCCESS.getInternalCode());
        onMessageSent(str2);
    }

    /* renamed from: a */
    public final synchronized void m3225a(Bundle bundle, String str, int i) {
        Context applicationContext = getApplicationContext();
        boolean z = !TextUtils.isEmpty(BaseUtils.getCacheData(applicationContext, applicationContext.getPackageName(), false));
        if (bundle.isEmpty() && z) {
            HMSLog.m3175i("HmsMessageService", "onTokenError to host app.");
            onTokenError(new BaseException(i));
            BaseUtils.deleteCacheData(applicationContext, applicationContext.getPackageName());
        }
        if (TextUtils.isEmpty(str)) {
            String[] subjectIds = BaseUtils.getSubjectIds(applicationContext);
            if (!(subjectIds == null || subjectIds.length == 0)) {
                for (int i2 = 0; i2 < subjectIds.length; i2++) {
                    Bundle bundle2 = new Bundle();
                    bundle2.putString(SUBJECT_ID, subjectIds[i2]);
                    HMSLog.m3175i("HmsMessageService", "onTokenError to sub app, subjectId:" + subjectIds[i2]);
                    onTokenError(new BaseException(i), bundle2);
                }
                BaseUtils.clearSubjectIds(applicationContext);
            }
            HMSLog.m3175i("HmsMessageService", "onTokenError to host app with bundle.");
            onTokenError(new BaseException(i), bundle);
            return;
        }
        HMSLog.m3175i("HmsMessageService", "onTokenError to sub app, subjectId:" + str);
        onTokenError(new BaseException(i), bundle);
    }

    /* renamed from: b */
    public final void m3219b(String str, String str2, int i) {
        HMSLog.m3175i("HmsMessageService", "onSendError, message id:" + str2 + " error:" + i + ", transactionId: " + str);
        m3222a(PushNaming.UPSEND_MSG_ASYNC_RSP, str, i);
        onSendError(str2, new SendException(i));
    }

    /* renamed from: a */
    public final synchronized void m3227a(Intent intent, Bundle bundle, String str) {
        String stringExtra = intent.getStringExtra("device_token");
        m3223a(stringExtra, str);
        Context applicationContext = getApplicationContext();
        boolean z = !TextUtils.isEmpty(BaseUtils.getCacheData(applicationContext, applicationContext.getPackageName(), false));
        if (bundle.isEmpty() && z) {
            HMSLog.m3175i("HmsMessageService", "onNewToken to host app.");
            onNewToken(stringExtra);
            BaseUtils.deleteCacheData(applicationContext, applicationContext.getPackageName());
        }
        if (TextUtils.isEmpty(str)) {
            String[] subjectIds = BaseUtils.getSubjectIds(applicationContext);
            if (!(subjectIds == null || subjectIds.length == 0)) {
                for (int i = 0; i < subjectIds.length; i++) {
                    Bundle bundle2 = new Bundle();
                    bundle2.putString(SUBJECT_ID, subjectIds[i]);
                    HMSLog.m3175i("HmsMessageService", "onNewToken to sub app, subjectId:" + subjectIds[i]);
                    onNewToken(stringExtra, bundle2);
                    m3223a(stringExtra, subjectIds[i]);
                }
                BaseUtils.clearSubjectIds(applicationContext);
            }
            HMSLog.m3175i("HmsMessageService", "onNewToken to host app with bundle.");
            bundle.putString("belongId", intent.getStringExtra("belongId"));
            onNewToken(stringExtra, bundle);
            return;
        }
        HMSLog.m3175i("HmsMessageService", "onNewToken to sub app, subjectId:" + str);
        onNewToken(stringExtra, bundle);
    }

    /* renamed from: a */
    public final void m3222a(String str, String str2, int i) {
        if (TextUtils.isEmpty(str2)) {
            str2 = "null";
        }
        PushBiUtil.reportExit(getApplicationContext(), str, str2, i);
    }
}
