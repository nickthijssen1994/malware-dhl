package com.huawei.hms.push;

import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.huawei.hms.push.utils.DateUtil;
import com.huawei.hms.push.utils.JsonUtil;
import com.huawei.hms.support.api.push.PushException;
import com.huawei.hms.support.api.push.utils.CommFun;
import com.huawei.hms.support.api.push.utils.common.base.BaseUtil;
import com.huawei.hms.support.api.push.utils.common.base.PushConst;
import com.huawei.hms.support.log.HMSLog;
import java.io.Serializable;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class RemoteMessage implements Parcelable {
    public static final int PRIORITY_HIGH;
    public static final int PRIORITY_NORMAL;
    public static final int PRIORITY_UNKNOWN;

    /* renamed from: i */
    public Bundle f1357i;

    /* renamed from: j */
    public Notification f1358j;

    /* renamed from: a */
    public static final String[] f1349a = new String[0];

    /* renamed from: b */
    public static final int[] f1350b = new int[0];

    /* renamed from: c */
    public static final long[] f1351c = new long[0];

    /* renamed from: d */
    public static final HashMap<String, Object> f1352d = new HashMap<>(6);

    /* renamed from: e */
    public static final HashMap<String, Object> f1353e = new HashMap<>(8);

    /* renamed from: f */
    public static final HashMap<String, Object> f1354f = new HashMap<>(8);

    /* renamed from: g */
    public static final HashMap<String, Object> f1355g = new HashMap<>(8);

    /* renamed from: h */
    public static final HashMap<String, Object> f1356h = new HashMap<>(3);
    public static final Parcelable.Creator<RemoteMessage> CREATOR = new C0996b();

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class Builder {

        /* renamed from: a */
        public final Bundle f1359a = new Bundle();

        /* renamed from: b */
        public final Map<String, String> f1360b = new HashMap();

        public Builder(String str) {
            this.f1359a.putString(RemoteMessageConst.f1389TO, str);
        }

        public Builder addData(String str, String str2) {
            if (str != null) {
                this.f1360b.put(str, str2);
                return this;
            }
            throw new IllegalArgumentException("add data failed, key is null.");
        }

        public RemoteMessage build() {
            Bundle bundle = new Bundle();
            JSONObject jSONObject = new JSONObject();
            try {
                for (Map.Entry<String, String> entry : this.f1360b.entrySet()) {
                    jSONObject.put(entry.getKey(), entry.getValue());
                }
                try {
                    String jSONObject2 = jSONObject.toString();
                    JSONObject jSONObject3 = new JSONObject();
                    jSONObject3.put(RemoteMessageConst.COLLAPSE_KEY, this.f1359a.getString(RemoteMessageConst.COLLAPSE_KEY));
                    jSONObject3.put(RemoteMessageConst.TTL, this.f1359a.getInt(RemoteMessageConst.TTL));
                    jSONObject3.put(RemoteMessageConst.SEND_MODE, this.f1359a.getInt(RemoteMessageConst.SEND_MODE));
                    jSONObject3.put(RemoteMessageConst.RECEIPT_MODE, this.f1359a.getInt(RemoteMessageConst.RECEIPT_MODE));
                    JSONObject jSONObject4 = new JSONObject();
                    if (jSONObject.length() != 0) {
                        jSONObject4.put("data", jSONObject2);
                    }
                    jSONObject4.put("msgId", this.f1359a.getString("msgId"));
                    jSONObject3.put("msgContent", jSONObject4);
                    bundle.putByteArray(RemoteMessageConst.MSGBODY, jSONObject3.toString().getBytes(PushConst.UTF_8));
                    bundle.putString(RemoteMessageConst.f1389TO, this.f1359a.getString(RemoteMessageConst.f1389TO));
                    bundle.putString(RemoteMessageConst.MSGTYPE, this.f1359a.getString(RemoteMessageConst.MSGTYPE));
                    return new RemoteMessage(bundle);
                } catch (JSONException unused) {
                    HMSLog.m3174w("RemoteMessage", "JSONException: parse message body failed.");
                    throw new PushException(PushException.EXCEPTION_SEND_FAILED);
                }
            } catch (JSONException unused2) {
                HMSLog.m3174w("RemoteMessage", "JSONException: parse data to json failed.");
                throw new PushException(PushException.EXCEPTION_SEND_FAILED);
            }
        }

        public Builder clearData() {
            this.f1360b.clear();
            return this;
        }

        public Builder setCollapseKey(String str) {
            this.f1359a.putString(RemoteMessageConst.COLLAPSE_KEY, str);
            return this;
        }

        public Builder setData(Map<String, String> map) {
            this.f1360b.clear();
            for (Map.Entry<String, String> entry : map.entrySet()) {
                this.f1360b.put(entry.getKey(), entry.getValue());
            }
            return this;
        }

        public Builder setMessageId(String str) {
            this.f1359a.putString("msgId", str);
            return this;
        }

        public Builder setMessageType(String str) {
            this.f1359a.putString(RemoteMessageConst.MSGTYPE, str);
            return this;
        }

        public Builder setReceiptMode(int i) {
            if (i == 1 || i == 0) {
                this.f1359a.putInt(RemoteMessageConst.RECEIPT_MODE, i);
                return this;
            }
            throw new IllegalArgumentException("receipt mode can only be 0 or 1.");
        }

        public Builder setSendMode(int i) {
            if (i == 0 || i == 1) {
                this.f1359a.putInt(RemoteMessageConst.SEND_MODE, i);
                return this;
            }
            throw new IllegalArgumentException("send mode can only be 0 or 1.");
        }

        public Builder setTtl(int i) {
            if (i < 1 || i > 1296000) {
                throw new IllegalArgumentException("ttl must be greater than or equal to 1 and less than or equal to 1296000");
            }
            this.f1359a.putInt(RemoteMessageConst.TTL, i);
            return this;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class Notification implements Serializable {

        /* renamed from: A */
        public final long[] f1361A;

        /* renamed from: B */
        public final String f1362B;

        /* renamed from: a */
        public final String f1363a;

        /* renamed from: b */
        public final String f1364b;

        /* renamed from: c */
        public final String[] f1365c;

        /* renamed from: d */
        public final String f1366d;

        /* renamed from: e */
        public final String f1367e;

        /* renamed from: f */
        public final String[] f1368f;

        /* renamed from: g */
        public final String f1369g;

        /* renamed from: h */
        public final String f1370h;

        /* renamed from: i */
        public final String f1371i;

        /* renamed from: j */
        public final String f1372j;

        /* renamed from: k */
        public final String f1373k;

        /* renamed from: l */
        public final String f1374l;

        /* renamed from: m */
        public final String f1375m;

        /* renamed from: n */
        public final Uri f1376n;

        /* renamed from: o */
        public final int f1377o;

        /* renamed from: p */
        public final String f1378p;

        /* renamed from: q */
        public final int f1379q;

        /* renamed from: r */
        public final int f1380r;

        /* renamed from: s */
        public final int f1381s;

        /* renamed from: t */
        public final int[] f1382t;

        /* renamed from: u */
        public final String f1383u;

        /* renamed from: v */
        public final int f1384v;

        /* renamed from: w */
        public final String f1385w;

        /* renamed from: x */
        public final int f1386x;

        /* renamed from: y */
        public final String f1387y;

        /* renamed from: z */
        public final String f1388z;

        public /* synthetic */ Notification(Bundle bundle, C0996b bVar) {
            this(bundle);
        }

        /* renamed from: a */
        public final Integer m3203a(String str) {
            if (str != null) {
                try {
                    return Integer.valueOf(str);
                } catch (NumberFormatException unused) {
                    HMSLog.m3174w("RemoteMessage", "NumberFormatException: get " + str + " failed.");
                }
            }
            return null;
        }

        public Integer getBadgeNumber() {
            return m3203a(this.f1385w);
        }

        public String getBody() {
            return this.f1366d;
        }

        public String[] getBodyLocalizationArgs() {
            String[] strArr = this.f1368f;
            return strArr == null ? new String[0] : (String[]) strArr.clone();
        }

        public String getBodyLocalizationKey() {
            return this.f1367e;
        }

        public String getChannelId() {
            return this.f1375m;
        }

        public String getClickAction() {
            return this.f1373k;
        }

        public String getColor() {
            return this.f1372j;
        }

        public String getIcon() {
            return this.f1369g;
        }

        public Uri getImageUrl() {
            String str = this.f1378p;
            if (str == null) {
                return null;
            }
            return Uri.parse(str);
        }

        public Integer getImportance() {
            return m3203a(this.f1387y);
        }

        public String getIntentUri() {
            return this.f1374l;
        }

        public int[] getLightSettings() {
            int[] iArr = this.f1382t;
            return iArr == null ? new int[0] : (int[]) iArr.clone();
        }

        public Uri getLink() {
            return this.f1376n;
        }

        public int getNotifyId() {
            return this.f1377o;
        }

        public String getSound() {
            return this.f1370h;
        }

        public String getTag() {
            return this.f1371i;
        }

        public String getTicker() {
            return this.f1388z;
        }

        public String getTitle() {
            return this.f1363a;
        }

        public String[] getTitleLocalizationArgs() {
            String[] strArr = this.f1365c;
            return strArr == null ? new String[0] : (String[]) strArr.clone();
        }

        public String getTitleLocalizationKey() {
            return this.f1364b;
        }

        public long[] getVibrateConfig() {
            long[] jArr = this.f1361A;
            return jArr == null ? new long[0] : (long[]) jArr.clone();
        }

        public Integer getVisibility() {
            return m3203a(this.f1362B);
        }

        public Long getWhen() {
            if (!TextUtils.isEmpty(this.f1383u)) {
                try {
                    return Long.valueOf(DateUtil.parseUtcToMillisecond(this.f1383u));
                } catch (StringIndexOutOfBoundsException unused) {
                    HMSLog.m3174w("RemoteMessage", "StringIndexOutOfBoundsException: parse when failed.");
                } catch (ParseException unused2) {
                    HMSLog.m3174w("RemoteMessage", "ParseException: parse when failed.");
                }
            }
            return null;
        }

        public boolean isAutoCancel() {
            return this.f1386x == 1;
        }

        public boolean isDefaultLight() {
            return this.f1379q == 1;
        }

        public boolean isDefaultSound() {
            return this.f1380r == 1;
        }

        public boolean isDefaultVibrate() {
            return this.f1381s == 1;
        }

        public boolean isLocalOnly() {
            return this.f1384v == 1;
        }

        public Notification(Bundle bundle) {
            this.f1363a = bundle.getString("notifyTitle");
            this.f1366d = bundle.getString("content");
            this.f1364b = bundle.getString(RemoteMessageConst.Notification.TITLE_LOC_KEY);
            this.f1367e = bundle.getString(RemoteMessageConst.Notification.BODY_LOC_KEY);
            this.f1365c = bundle.getStringArray(RemoteMessageConst.Notification.TITLE_LOC_ARGS);
            this.f1368f = bundle.getStringArray(RemoteMessageConst.Notification.BODY_LOC_ARGS);
            this.f1369g = bundle.getString("icon");
            this.f1372j = bundle.getString("color");
            this.f1370h = bundle.getString(RemoteMessageConst.Notification.SOUND);
            this.f1371i = bundle.getString("tag");
            this.f1375m = bundle.getString(RemoteMessageConst.Notification.CHANNEL_ID);
            this.f1373k = bundle.getString("acn");
            this.f1374l = bundle.getString("intentUri");
            this.f1377o = bundle.getInt("notifyId");
            String string = bundle.getString("url");
            this.f1376n = !TextUtils.isEmpty(string) ? Uri.parse(string) : null;
            this.f1378p = bundle.getString("notifyIcon");
            this.f1379q = bundle.getInt(RemoteMessageConst.Notification.DEFAULT_LIGHT_SETTINGS);
            this.f1380r = bundle.getInt(RemoteMessageConst.Notification.DEFAULT_SOUND);
            this.f1381s = bundle.getInt(RemoteMessageConst.Notification.DEFAULT_VIBRATE_TIMINGS);
            this.f1382t = bundle.getIntArray(RemoteMessageConst.Notification.LIGHT_SETTINGS);
            this.f1383u = bundle.getString("when");
            this.f1384v = bundle.getInt(RemoteMessageConst.Notification.LOCAL_ONLY);
            this.f1385w = bundle.getString(RemoteMessageConst.Notification.BADGE_SET_NUM, null);
            this.f1386x = bundle.getInt("autoCancel");
            this.f1387y = bundle.getString(RemoteMessageConst.Notification.PRIORITY, null);
            this.f1388z = bundle.getString("ticker");
            this.f1361A = bundle.getLongArray(RemoteMessageConst.Notification.VIBRATE_TIMINGS);
            this.f1362B = bundle.getString("visibility", null);
        }
    }

    static {
        f1352d.put(RemoteMessageConst.FROM, "");
        f1352d.put(RemoteMessageConst.COLLAPSE_KEY, "");
        f1352d.put(RemoteMessageConst.SEND_TIME, "");
        f1352d.put(RemoteMessageConst.TTL, Integer.valueOf((int) RemoteMessageConst.DEFAULT_TTL));
        f1352d.put(RemoteMessageConst.URGENCY, 2);
        f1352d.put(RemoteMessageConst.ORI_URGENCY, 2);
        f1352d.put(RemoteMessageConst.SEND_MODE, 0);
        f1352d.put(RemoteMessageConst.RECEIPT_MODE, 0);
        f1353e.put(RemoteMessageConst.Notification.TITLE_LOC_KEY, "");
        f1353e.put(RemoteMessageConst.Notification.BODY_LOC_KEY, "");
        f1353e.put("notifyIcon", "");
        f1353e.put(RemoteMessageConst.Notification.TITLE_LOC_ARGS, f1349a);
        f1353e.put(RemoteMessageConst.Notification.BODY_LOC_ARGS, f1349a);
        f1353e.put("ticker", "");
        f1353e.put("notifyTitle", "");
        f1353e.put("content", "");
        f1354f.put("icon", "");
        f1354f.put("color", "");
        f1354f.put(RemoteMessageConst.Notification.SOUND, "");
        f1354f.put(RemoteMessageConst.Notification.DEFAULT_LIGHT_SETTINGS, 1);
        f1354f.put(RemoteMessageConst.Notification.LIGHT_SETTINGS, f1350b);
        f1354f.put(RemoteMessageConst.Notification.DEFAULT_SOUND, 1);
        f1354f.put(RemoteMessageConst.Notification.DEFAULT_VIBRATE_TIMINGS, 1);
        f1354f.put(RemoteMessageConst.Notification.VIBRATE_TIMINGS, f1351c);
        f1355g.put("tag", "");
        f1355g.put("when", "");
        f1355g.put(RemoteMessageConst.Notification.LOCAL_ONLY, 1);
        f1355g.put(RemoteMessageConst.Notification.BADGE_SET_NUM, "");
        f1355g.put(RemoteMessageConst.Notification.PRIORITY, "");
        f1355g.put("autoCancel", 1);
        f1355g.put("visibility", "");
        f1355g.put(RemoteMessageConst.Notification.CHANNEL_ID, "");
        f1356h.put("acn", "");
        f1356h.put("intentUri", "");
        f1356h.put("url", "");
    }

    public RemoteMessage(Bundle bundle) {
        this.f1357i = m3210a(bundle);
    }

    /* renamed from: b */
    public static JSONObject m3207b(Bundle bundle) {
        try {
            return new JSONObject(BaseUtil.byte2Str(bundle.getByteArray(RemoteMessageConst.MSGBODY)));
        } catch (JSONException unused) {
            HMSLog.m3174w("RemoteMessage", "JSONException:parse message body failed.");
            return null;
        }
    }

    /* renamed from: c */
    public static JSONObject m3205c(JSONObject jSONObject) {
        if (jSONObject != null) {
            return jSONObject.optJSONObject("param");
        }
        return null;
    }

    /* renamed from: d */
    public static JSONObject m3204d(JSONObject jSONObject) {
        if (jSONObject != null) {
            return jSONObject.optJSONObject("psContent");
        }
        return null;
    }

    /* renamed from: a */
    public final Bundle m3210a(Bundle bundle) {
        Bundle bundle2 = new Bundle();
        JSONObject b = m3207b(bundle);
        JSONObject a = m3209a(b);
        String string = JsonUtil.getString(a, "data", null);
        bundle2.putString("device_token", bundle.getString("device_token"));
        JSONObject d = m3204d(a);
        JSONObject b2 = m3206b(d);
        JSONObject c = m3205c(d);
        if (bundle.getInt("inputType") != 1 || !CommFun.isOldMsg(a, d, string)) {
            String string2 = bundle.getString(RemoteMessageConst.f1389TO);
            String string3 = bundle.getString(RemoteMessageConst.MSGTYPE);
            String string4 = JsonUtil.getString(a, "msgId", null);
            bundle2.putString(RemoteMessageConst.f1389TO, string2);
            bundle2.putString("data", string);
            bundle2.putString("msgId", string4);
            bundle2.putString(RemoteMessageConst.MSGTYPE, string3);
            JsonUtil.transferJsonObjectToBundle(b, bundle2, f1352d);
            bundle2.putBundle(RemoteMessageConst.NOTIFICATION, m3208a(b, a, d, b2, c));
            return bundle2;
        }
        bundle2.putString("data", BaseUtil.byte2Str(bundle.getByteArray(RemoteMessageConst.MSGBODY)));
        return bundle2;
    }

    @Override // android.os.Parcelable
    public final int describeContents() {
        return 0;
    }

    public String getCollapseKey() {
        return this.f1357i.getString(RemoteMessageConst.COLLAPSE_KEY);
    }

    public String getData() {
        return this.f1357i.getString("data");
    }

    public Map<String, String> getDataOfMap() {
        HashMap hashMap = new HashMap();
        String string = this.f1357i.getString("data");
        if (string != null && !string.trim().isEmpty()) {
            try {
                JSONObject jSONObject = new JSONObject(string);
                Iterator<String> keys = jSONObject.keys();
                while (keys.hasNext()) {
                    String valueOf = String.valueOf(keys.next());
                    hashMap.put(valueOf, String.valueOf(jSONObject.get(valueOf)));
                }
            } catch (JSONException unused) {
                HMSLog.m3174w("RemoteMessage", "JSONException: get data from map failed");
            }
        }
        return hashMap;
    }

    public String getFrom() {
        return this.f1357i.getString(RemoteMessageConst.FROM);
    }

    public String getMessageId() {
        return this.f1357i.getString("msgId");
    }

    public String getMessageType() {
        return this.f1357i.getString(RemoteMessageConst.MSGTYPE);
    }

    public Notification getNotification() {
        Bundle bundle = this.f1357i.getBundle(RemoteMessageConst.NOTIFICATION);
        if (this.f1358j == null && bundle != null) {
            this.f1358j = new Notification(bundle, null);
        }
        if (this.f1358j == null) {
            this.f1358j = new Notification(new Bundle(), null);
        }
        return this.f1358j;
    }

    public int getOriginalUrgency() {
        int i = this.f1357i.getInt(RemoteMessageConst.ORI_URGENCY);
        if (i == 1 || i == 2) {
            return i;
        }
        return 0;
    }

    public int getReceiptMode() {
        return this.f1357i.getInt(RemoteMessageConst.RECEIPT_MODE);
    }

    public int getSendMode() {
        return this.f1357i.getInt(RemoteMessageConst.SEND_MODE);
    }

    public long getSentTime() {
        try {
            String string = this.f1357i.getString(RemoteMessageConst.SEND_TIME);
            if (!TextUtils.isEmpty(string)) {
                return Long.parseLong(string);
            }
            return 0;
        } catch (NumberFormatException unused) {
            HMSLog.m3174w("RemoteMessage", "NumberFormatException: get sendTime error.");
            return 0;
        }
    }

    public String getTo() {
        return this.f1357i.getString(RemoteMessageConst.f1389TO);
    }

    public String getToken() {
        return this.f1357i.getString("device_token");
    }

    public int getTtl() {
        return this.f1357i.getInt(RemoteMessageConst.TTL);
    }

    public int getUrgency() {
        int i = this.f1357i.getInt(RemoteMessageConst.URGENCY);
        if (i == 1 || i == 2) {
            return i;
        }
        return 0;
    }

    @Override // android.os.Parcelable
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeBundle(this.f1357i);
        parcel.writeSerializable(this.f1358j);
    }

    public RemoteMessage(Parcel parcel) {
        this.f1357i = parcel.readBundle();
        this.f1358j = (Notification) parcel.readSerializable();
    }

    /* renamed from: b */
    public static JSONObject m3206b(JSONObject jSONObject) {
        if (jSONObject != null) {
            return jSONObject.optJSONObject("notifyDetail");
        }
        return null;
    }

    /* renamed from: a */
    public final Bundle m3208a(JSONObject jSONObject, JSONObject jSONObject2, JSONObject jSONObject3, JSONObject jSONObject4, JSONObject jSONObject5) {
        Bundle bundle = new Bundle();
        JsonUtil.transferJsonObjectToBundle(jSONObject3, bundle, f1353e);
        JsonUtil.transferJsonObjectToBundle(jSONObject4, bundle, f1354f);
        JsonUtil.transferJsonObjectToBundle(jSONObject, bundle, f1355g);
        JsonUtil.transferJsonObjectToBundle(jSONObject5, bundle, f1356h);
        bundle.putInt("notifyId", JsonUtil.getInt(jSONObject2, "notifyId", 0));
        return bundle;
    }

    /* renamed from: a */
    public static JSONObject m3209a(JSONObject jSONObject) {
        if (jSONObject != null) {
            return jSONObject.optJSONObject("msgContent");
        }
        return null;
    }
}
