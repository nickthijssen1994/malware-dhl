package com.huawei.hms.support.api.push.service;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import com.huawei.hms.push.C0997c;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.huawei.hms.support.api.push.pushselfshow.SelfShow;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.huawei.hms.support.api.push.utils.common.NotificationUtil;
import com.huawei.hms.support.api.push.utils.common.base.PushConst;
import com.huawei.hms.support.api.push.utils.common.base.PushIntents;
import com.huawei.hms.support.log.HMSLog;
import com.huawei.hms.utils.HMSPackageManager;
import com.huawei.hms.utils.PackageManagerHelper;
import com.huawei.hms.utils.ResourceLoaderUtil;
import java.util.Objects;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class HmsMsgService extends Service {
    public static final String TAG = "HmsMsgService";

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    private static class PushHandler extends Handler {
        public Context context;

        public PushHandler(Context context) {
            this.context = context;
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            Bundle data = message.getData();
            if (Build.VERSION.SDK_INT >= 21) {
                if (Objects.equals(this.context.getApplicationContext().getPackageManager().getNameForUid(message.sendingUid), HMSPackageManager.getInstance(this.context).getHMSPackageName()) && data != null) {
                    if (HMSPackageManager.getInstance(this.context).getHMSPackageStates() != PackageManagerHelper.PackageStates.ENABLED) {
                        HMSLog.m3175i(HmsMsgService.TAG, "service not start by hms");
                    } else {
                        HMSLog.m3175i(HmsMsgService.TAG, "chose push type");
                        if (Objects.equals(C0997c.m3201b(data, PushIntents.ACTION_PUSH), PushIntents.ACTION_NOTIFY_MSG)) {
                            if (ResourceLoaderUtil.getmContext() == null) {
                                ResourceLoaderUtil.setmContext(this.context.getApplicationContext());
                            }
                            HMSLog.m3175i(HmsMsgService.TAG, "invokeSelfShow");
                            HmsMsgService.invokeSelfShow(this.context, data);
                        } else if (Objects.equals(C0997c.m3201b(data, PushIntents.ACTION_PUSH), PushIntents.ACTION_PASSBY_MSG)) {
                            HMSLog.m3175i(HmsMsgService.TAG, "sendBroadcastToHms");
                            HmsMsgService.sendBroadcastToHms(this.context, data);
                        }
                    }
                }
                super.handleMessage(message);
            }
        }
    }

    public static void invokeSelfShow(Context context, Bundle bundle) {
        if (!NotificationUtil.areNotificationsEnabled(context)) {
            HMSLog.m3175i(TAG, context.getPackageName() + " disable display notification.");
        }
        Intent intent = new Intent();
        intent.setAction(PushIntents.ACTION_NOTIFY_MSG);
        intent.putExtra("selfshow_info", C0997c.m3202a(bundle, "selfshow_info"));
        intent.putExtra("selfshow_token", C0997c.m3202a(bundle, "selfshow_token"));
        intent.setPackage(C0997c.m3200c(bundle, PushIntents.PUSH_PACKAGE));
        SelfShow.onReceive(context, intent);
        HMSLog.m3175i(TAG, "invokeSelfShow done");
    }

    public static void sendBroadcastToHms(Context context, Bundle bundle) {
        try {
            Intent intent = new Intent();
            intent.setAction(PushIntents.ACTION_PUSH_RECEIVE_MESSAGE);
            intent.putExtra(PushConst.KeyType.PUSH_BROADCAST_MESSAGE, C0997c.m3202a(bundle, PushConst.KeyType.PUSH_BROADCAST_MESSAGE));
            intent.putExtra("device_token", C0997c.m3202a(bundle, "device_token"));
            intent.putExtra("msgIdStr", C0997c.m3200c(bundle, "msgIdStr"));
            intent.setFlags(32);
            intent.setPackage(C0997c.m3200c(bundle, PushIntents.PUSH_PACKAGE));
            StringBuilder sb = new StringBuilder();
            sb.append(context.getPackageName());
            sb.append(PushIntents.PUSH_PERMISSION_SUFFIX);
            context.sendBroadcast(intent, sb.toString());
            HMSLog.m3175i(TAG, "send broadcast passby done");
        } catch (SecurityException unused) {
            HMSLog.m3175i(TAG, "send broadcast SecurityException");
        } catch (Exception unused2) {
            HMSLog.m3175i(TAG, "send broadcast Exception");
        }
    }

    @Override // android.app.Service
    public IBinder onBind(Intent intent) {
        HMSLog.m3175i(TAG, "onBind");
        Messenger messenger = new Messenger(new PushHandler(this));
        stopService(intent);
        return messenger.getBinder();
    }

    @Override // android.app.Service
    public void onDestroy() {
        super.onDestroy();
        if (Build.VERSION.SDK_INT >= 26) {
            stopForeground(true);
        }
    }

    @Override // android.app.Service
    public int onStartCommand(Intent intent, int i, int i2) {
        HMSLog.m3175i(TAG, "Enter onStartCommand.");
        if (Build.VERSION.SDK_INT < 26) {
            return 2;
        }
        NotificationChannel notificationChannel = new NotificationChannel(PushSelfShowConstant.PUSH_CHANNEL_ID, "pushKit", 3);
        notificationChannel.enableVibration(false);
        NotificationManager notificationManager = (NotificationManager) getSystemService(RemoteMessageConst.NOTIFICATION);
        if (notificationManager != null) {
            notificationManager.createNotificationChannel(notificationChannel);
        }
        Notification.Builder builder = new Notification.Builder(this, PushSelfShowConstant.PUSH_CHANNEL_ID);
        builder.setAutoCancel(true);
        startForeground(1, builder.build());
        return 2;
    }
}
