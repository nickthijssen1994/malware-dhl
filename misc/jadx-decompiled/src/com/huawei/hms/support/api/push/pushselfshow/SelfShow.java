package com.huawei.hms.support.api.push.pushselfshow;

import android.content.Context;
import android.content.Intent;
import com.huawei.hms.push.C0999e;
import com.huawei.hms.support.api.push.pushselfshow.click.SelfShowType;
import com.huawei.hms.support.api.push.pushselfshow.entity.PushSelfShowMessage;
import com.huawei.hms.support.api.push.pushselfshow.prepare.PushSelfShowThread;
import com.huawei.hms.support.api.push.pushselfshow.utils.CommFun;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.huawei.hms.support.api.push.utils.common.base.PushIntents;
import com.huawei.hms.support.log.HMSLog;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class SelfShow {
    public static final String TAG = "PushSelfShowLog";

    public static void handlePushMsg(Context context, Intent intent, byte[] bArr, byte[] bArr2) {
        String stringExtra = intent.getStringExtra(PushSelfShowConstant.EXTRA_SELF_SHOW_EVENT_ID);
        int intExtra = intent.getIntExtra(PushSelfShowConstant.EXTRA_SELF_SHOW_NOTIFY_ID, 0);
        HMSLog.m3175i("PushSelfShowLog", "get notifyId:" + intExtra);
        PushSelfShowMessage pushSelfShowMessage = new PushSelfShowMessage(bArr, bArr2);
        if (!pushSelfShowMessage.parseMessage()) {
            HMSLog.m3180d("PushSelfShowLog", "parseMessage failed");
            return;
        }
        HMSLog.m3175i("PushSelfShowLog", " onReceive the msg id = " + pushSelfShowMessage.getMsgId() + ",and cmd is" + pushSelfShowMessage.getCmd() + ",and the eventId is " + stringExtra);
        if (stringExtra == null) {
            processSelfShowMsg(context, intent, pushSelfShowMessage);
        } else {
            processClickEvent(context, intent, stringExtra, pushSelfShowMessage, intExtra);
        }
    }

    public static void onReceive(Context context, Intent intent) {
        try {
            if (context == null || intent == null) {
                HMSLog.m3180d("PushSelfShowLog", "enter SelfShowReceiver receiver, context or intent is null");
                return;
            }
            String action = intent.getAction();
            if ("com.huawei.intent.action.PUSH".equals(action) || PushIntents.ACTION_NOTIFY_MSG.equals(action) || PushIntents.ACTION_PUSH_DELAY_NOTIFY.equals(action)) {
                byte[] byteArrayExtra = intent.getByteArrayExtra("selfshow_info");
                byte[] byteArrayExtra2 = intent.getByteArrayExtra("selfshow_token");
                if (!(byteArrayExtra.length == 0 || byteArrayExtra2.length == 0)) {
                    handlePushMsg(context, intent, byteArrayExtra, byteArrayExtra2);
                    return;
                }
                HMSLog.m3175i("PushSelfShowLog", "self show info or token is null.");
            }
        } catch (RuntimeException e) {
            HMSLog.m3176e("PushSelfShowLog", "onReceive RuntimeException.", e);
        } catch (Exception unused) {
            HMSLog.m3180d("PushSelfShowLog", "onReceive Exception.");
        }
    }

    public static void processClickEvent(Context context, Intent intent, String str, PushSelfShowMessage pushSelfShowMessage, int i) {
        HMSLog.m3180d("PushSelfShowLog", "receive a selfshow user handle message eventId = " + str);
        if (!PushSelfShowConstant.ACTION_APP_OUT_OF_DATE_EVENT_ID.equals(str)) {
            CommFun.cancelNotificationAlarm(context, intent);
        } else {
            CommFun.removeNotifiCationById(context, i);
        }
        if ("1".equals(str)) {
            new SelfShowType(context, pushSelfShowMessage).launchNotify();
            C0999e.m3198a(context, "1", pushSelfShowMessage);
        } else if ("2".equals(str)) {
            C0999e.m3198a(context, "2", pushSelfShowMessage);
        } else {
            HMSLog.m3180d("PushSelfShowLog", "other event");
        }
    }

    public static void processSelfShowMsg(Context context, Intent intent, PushSelfShowMessage pushSelfShowMessage) {
        HMSLog.m3175i("PushSelfShowLog", "receive a selfshow message ,the type is" + pushSelfShowMessage.getCmd());
        if (SelfShowType.supportCmd(pushSelfShowMessage.getCmd())) {
            long aPDelayTime = CommFun.getAPDelayTime(pushSelfShowMessage.getAp());
            if (aPDelayTime == 0) {
                new PushSelfShowThread(context, pushSelfShowMessage).start();
                return;
            }
            HMSLog.m3180d("PushSelfShowLog", "waiting ……");
            intent.setPackage(context.getPackageName());
            CommFun.setAPDelayAlarm(context, intent, aPDelayTime);
        }
    }
}
