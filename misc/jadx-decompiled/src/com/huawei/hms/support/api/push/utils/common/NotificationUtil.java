package com.huawei.hms.support.api.push.utils.common;

import android.annotation.SuppressLint;
import android.app.AppOpsManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Build;
import com.huawei.hms.aaid.utils.PushPreferences;
import com.huawei.hms.support.api.push.utils.common.base.FileConst;
import java.lang.reflect.InvocationTargetException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class NotificationUtil {
    public static final String CHECK_OP_NO_THROW = "checkOpNoThrow";
    public static final String OP_POST_NOTIFICATION = "OP_POST_NOTIFICATION";

    public static boolean areNotificationsEnabled(Context context) {
        if (new PushPreferences(context, FileConst.PushSdkSharedSwitch.FILE_NAME).getBoolean(FileConst.PushSdkSharedSwitch.NOTIFY_MSG_ENABLE)) {
            return false;
        }
        int i = Build.VERSION.SDK_INT;
        if (i >= 24) {
            return areNotificationsEnabledKitKat(context);
        }
        if (i >= 19) {
            return areNotificationsEnabledKitKat(context);
        }
        return true;
    }

    @SuppressLint({"NewApi", "InlinedApi"})
    public static boolean areNotificationsEnabledKitKat(Context context) {
        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService("appops");
        ApplicationInfo applicationInfo = context.getApplicationInfo();
        String packageName = context.getApplicationContext().getPackageName();
        int i = applicationInfo.uid;
        try {
            Class<?> cls = Class.forName(AppOpsManager.class.getName());
            if (((Integer) cls.getMethod(CHECK_OP_NO_THROW, Integer.TYPE, Integer.TYPE, String.class).invoke(appOpsManager, Integer.valueOf(((Integer) cls.getDeclaredField(OP_POST_NOTIFICATION).get(Integer.class)).intValue()), Integer.valueOf(i), packageName)).intValue() == 0) {
                return true;
            }
            return false;
        } catch (ClassNotFoundException | IllegalAccessException | NoSuchFieldException | NoSuchMethodException | RuntimeException | InvocationTargetException unused) {
            return true;
        }
    }
}
