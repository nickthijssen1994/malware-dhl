package com.huawei.hms.support.api.push.pushselfshow.utils;

import android.app.AlarmManager;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.huawei.hms.support.api.push.utils.common.base.PushIntents;
import com.huawei.hms.support.log.HMSLog;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class CommFun {
    public static final long CLEAR_FILES_INTERVAL = 86400000;
    public static final String TAG = "PushSelfShowLog";

    public static void cancelNotificationAlarm(Context context, Intent intent) {
        try {
            int intExtra = intent.getIntExtra(PushSelfShowConstant.EXTRA_SELFSHOW_AUTO_CLEAR_ID, 0);
            StringBuilder sb = new StringBuilder();
            sb.append("setDelayAlarm(cancel) alarmNotityId ");
            sb.append(intExtra);
            HMSLog.m3180d("PushSelfShowLog", sb.toString());
            if (intExtra != 0) {
                Intent intent2 = new Intent(PushIntents.ACTION_PUSH_DELAY_NOTIFY);
                intent2.setPackage(context.getPackageName()).setFlags(32);
                AlarmManager alarmManager = (AlarmManager) context.getSystemService("alarm");
                PendingIntent broadcast = PendingIntent.getBroadcast(context, intExtra, intent2, 536870912);
                if (broadcast == null || alarmManager == null) {
                    HMSLog.m3180d("PushSelfShowLog", "alarm not exist");
                    return;
                }
                HMSLog.m3180d("PushSelfShowLog", "alarm cancel");
                alarmManager.cancel(broadcast);
            }
        } catch (Exception e) {
            while (true) {
                HMSLog.m3177e("PushSelfShowLog", "cancelAlarm err:" + e.toString());
                return;
            }
        }
    }

    public static void delete(File file) throws IOException {
        if (file != null) {
            HMSLog.m3180d("PushSelfShowLog", "delete file " + file.getCanonicalPath());
            File file2 = new File(file.getCanonicalPath() + System.currentTimeMillis());
            if (file.renameTo(file2)) {
                if ((!file2.isFile() || !file2.delete()) && file2.isDirectory()) {
                    File[] listFiles = file2.listFiles();
                    if (listFiles != null && listFiles.length != 0) {
                        for (File file3 : listFiles) {
                            delete(file3);
                        }
                        if (!file2.delete()) {
                            HMSLog.m3180d("PushSelfShowLog", "delete file unsuccess");
                        }
                    } else if (!file2.delete()) {
                        HMSLog.m3180d("PushSelfShowLog", "delete file failed");
                    }
                }
            }
        }
    }

    public static void deleteFileBefore(File file) {
        File[] listFiles;
        HMSLog.m3180d("PushSelfShowLog", "delete file before ");
        if (!(file == null || !file.exists() || (listFiles = file.listFiles()) == null || listFiles.length == 0)) {
            long currentTimeMillis = System.currentTimeMillis();
            for (File file2 : listFiles) {
                try {
                    if (currentTimeMillis - file2.lastModified() > 86400000) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("delete file before ");
                        sb.append(file2.getCanonicalPath());
                        HMSLog.m3175i("PushSelfShowLog", sb.toString());
                        delete(file2);
                    }
                } catch (Exception e) {
                    HMSLog.m3177e("PushSelfShowLog", "delete file failed." + e.toString());
                }
            }
        }
    }

    public static Boolean findActivityByIntent(Context context, String str, Intent intent) {
        try {
            List<ResolveInfo> queryIntentActivities = context.getPackageManager().queryIntentActivities(intent, 0);
            if (queryIntentActivities != null && queryIntentActivities.size() > 0) {
                int size = queryIntentActivities.size();
                for (int i = 0; i < size; i++) {
                    if (queryIntentActivities.get(i).activityInfo != null && str.equals(queryIntentActivities.get(i).activityInfo.applicationInfo.packageName)) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            HMSLog.m3176e("PushSelfShowLog", e.toString(), e);
        }
        return false;
    }

    public static long getAPDelayTime(String str) {
        if (str == null) {
            str = "";
        }
        try {
            Date date = new Date();
            int hours = (date.getHours() * 2) + (date.getMinutes() / 30);
            String concat = str.concat(str);
            StringBuilder sb = new StringBuilder();
            sb.append("startIndex is ");
            sb.append(hours);
            sb.append(",ap is:");
            sb.append(concat);
            sb.append(",length is:");
            sb.append(concat.length());
            HMSLog.m3175i("PushSelfShowLog", sb.toString());
            int length = concat.length();
            for (int i = hours; i < length; i++) {
                if (concat.charAt(i) != '0') {
                    long minutes = 60000 * ((long) (((i - hours) * 30) - (date.getMinutes() % 30)));
                    StringBuilder sb2 = new StringBuilder();
                    sb2.append("startIndex is:");
                    sb2.append(hours);
                    sb2.append(" i is:");
                    sb2.append(i);
                    sb2.append(" delay:");
                    sb2.append(minutes);
                    HMSLog.m3180d("PushSelfShowLog", sb2.toString());
                    if (minutes >= 0) {
                        return minutes;
                    }
                    return 0;
                }
            }
        } catch (Exception e) {
            HMSLog.m3176e("PushSelfShowLog", "error ", e);
        }
        return 0;
    }

    public static String getAppName(Context context, String str) {
        try {
            PackageManager packageManager = context.getPackageManager();
            return packageManager.getApplicationLabel(packageManager.getApplicationInfo(str, 128)).toString();
        } catch (PackageManager.NameNotFoundException unused) {
            HMSLog.m3175i("PushSelfShowLog", "get the app name of package:" + str + " failed.");
            return null;
        }
    }

    public static long getIntMetaValue(ResolveInfo resolveInfo, String str) {
        if (resolveInfo == null) {
            return -1;
        }
        try {
            String stringMetaValue = getStringMetaValue(resolveInfo, str);
            if (!(stringMetaValue == null || stringMetaValue.length() == 0)) {
                return Long.parseLong(stringMetaValue);
            }
            return -1;
        } catch (NumberFormatException unused) {
            HMSLog.m3175i("PushSelfShowLog", str + " is not set in " + getPkgName(resolveInfo));
            return -1;
        }
    }

    public static String getPkgName(ResolveInfo resolveInfo) {
        ServiceInfo serviceInfo = resolveInfo.serviceInfo;
        return serviceInfo != null ? serviceInfo.packageName : resolveInfo.activityInfo.packageName;
    }

    public static String getStringMetaValue(ResolveInfo resolveInfo, String str) {
        ServiceInfo serviceInfo = resolveInfo.serviceInfo;
        Bundle bundle = serviceInfo != null ? serviceInfo.metaData : resolveInfo.activityInfo.metaData;
        if (bundle == null) {
            return null;
        }
        return bundle.getString(str);
    }

    public static long getVersion(Context context) {
        List<ResolveInfo> queryBroadcastReceivers;
        HMSLog.m3180d("PushSelfShowLog", "enter getVersion()");
        long j = -1000;
        try {
            queryBroadcastReceivers = context.getPackageManager().queryBroadcastReceivers(new Intent("com.huawei.android.push.intent.REGISTER").setPackage(context.getPackageName()), 640);
        } catch (Exception e) {
            HMSLog.m3176e("PushSelfShowLog", e.toString(), e);
        }
        if (!(queryBroadcastReceivers == null || queryBroadcastReceivers.size() == 0)) {
            j = getIntMetaValue(queryBroadcastReceivers.get(0), PushSelfShowConstant.VERSION_NAME);
            HMSLog.m3180d("PushSelfShowLog", "get the version is :" + j);
            return j;
        }
        return -1000;
    }

    public static Intent hasActivity(Context context, String str) {
        try {
            return context.getPackageManager().getLaunchIntentForPackage(str);
        } catch (Exception unused) {
            HMSLog.m3174w("PushSelfShowLog", str + "not have launch activity");
            return null;
        }
    }

    public static boolean hasPermissionToStartActivity(Context context, Intent intent) {
        if (context == null) {
            HMSLog.m3175i("PushSelfShowLog", "context is null");
            return false;
        } else if (intent == null) {
            HMSLog.m3175i("PushSelfShowLog", "intent is null");
            return false;
        } else {
            List<ResolveInfo> queryIntentActivities = context.getPackageManager().queryIntentActivities(intent, 640);
            if (queryIntentActivities == null || queryIntentActivities.size() == 0) {
                HMSLog.m3177e("PushSelfShowLog", "no activity exist, may be system Err!! pkgName:");
                return false;
            }
            boolean z = queryIntentActivities.get(0).activityInfo.exported;
            HMSLog.m3175i("PushSelfShowLog", "exportedFlag:" + z);
            String str = queryIntentActivities.get(0).activityInfo.permission;
            HMSLog.m3175i("PushSelfShowLog", "need permission:" + str);
            if (!z) {
                return false;
            }
            if (TextUtils.isEmpty(str)) {
                return true;
            }
            HMSLog.m3177e("PushSelfShowLog", "does't have the permission to open this activity");
            return false;
        }
    }

    public static boolean isCurrentHMS(Context context) {
        return "com.huawei.hwid".equals(context.getPackageName());
    }

    public static boolean isCurrentPushApk(Context context) {
        return "com.huawei.android.pushagent".equals(context.getPackageName());
    }

    public static boolean isExistPushApk(Context context) {
        try {
            if (context.getPackageManager().getApplicationInfo("com.huawei.android.pushagent", 128) != null) {
                return true;
            }
            return false;
        } catch (PackageManager.NameNotFoundException unused) {
            return false;
        }
    }

    public static boolean isInstalled(Context context, String str) {
        if (!(context == null || str == null || "".equals(str))) {
            try {
                if (context.getPackageManager().getApplicationInfo(str, 8192) == null) {
                    return false;
                }
                StringBuilder sb = new StringBuilder();
                sb.append(str);
                sb.append(" is installed");
                HMSLog.m3180d("PushSelfShowLog", sb.toString());
                return true;
            } catch (Exception unused) {
            }
        }
        return false;
    }

    public static boolean isPreferredPkg(Context context, String str) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        context.getPackageManager().getPreferredActivities(arrayList, arrayList2, str);
        return arrayList2.size() > 0;
    }

    public static boolean isSelf(Context context, String str) {
        return context.getPackageName().equals(str);
    }

    public static boolean isSupportLargeIcon() {
        return Build.VERSION.SDK_INT >= 11;
    }

    public static ArrayList<String> lsAppmarketSuportCMD(Context context) {
        ArrayList<String> arrayList = new ArrayList<>();
        Intent intent = new Intent("android.intent.action.VIEW");
        intent.setData(Uri.parse("market://details?id="));
        List<ResolveInfo> queryIntentActivities = context.getPackageManager().queryIntentActivities(intent, 0);
        if (!(queryIntentActivities == null || queryIntentActivities.size() == 0)) {
            int size = queryIntentActivities.size();
            for (int i = 0; i < size; i++) {
                if (queryIntentActivities.get(i).activityInfo != null) {
                    arrayList.add(queryIntentActivities.get(i).activityInfo.applicationInfo.packageName);
                }
            }
        }
        return arrayList;
    }

    public static void removeNotifiCationById(Context context, int i) {
        if (context == null) {
            HMSLog.m3177e("PushSelfShowLog", "context is null");
            return;
        }
        try {
            NotificationManager notificationManager = (NotificationManager) context.getSystemService(RemoteMessageConst.NOTIFICATION);
            if (notificationManager != null) {
                notificationManager.cancel(i);
            }
        } catch (Exception e) {
            HMSLog.m3177e("PushSelfShowLog", "removeNotifiCationById err:" + e.toString());
        }
    }

    public static void setAPDelayAlarm(Context context, Intent intent, long j) {
        try {
            StringBuilder sb = new StringBuilder();
            sb.append("enter setAPDelayAlarm(intent:");
            sb.append(intent.toURI());
            sb.append(" interval:");
            sb.append(j);
            sb.append("ms, context:");
            sb.append(context);
            HMSLog.m3180d("PushSelfShowLog", sb.toString());
            AlarmManager alarmManager = (AlarmManager) context.getSystemService("alarm");
            if (alarmManager != null) {
                alarmManager.set(0, System.currentTimeMillis() + j, PendingIntent.getBroadcast(context, (int) (System.currentTimeMillis() / 1000), intent, 0));
            }
        } catch (Exception e) {
            HMSLog.m3174w("PushSelfShowLog", "set DelayAlarm error" + e.toString());
        }
    }

    public static void startBrowserActivity(Context context, String str) {
        if (TextUtils.isEmpty(str)) {
            HMSLog.m3175i("PushSelfShowLog", "url is null.");
            return;
        }
        try {
            Intent intent = new Intent("android.intent.action.VIEW");
            intent.setData(Uri.parse(str));
            intent.setFlags(402653184);
            List<ResolveInfo> queryIntentActivities = context.getPackageManager().queryIntentActivities(intent, 0);
            String str2 = null;
            Iterator<ResolveInfo> it = queryIntentActivities.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                String str3 = it.next().activityInfo.packageName;
                if (isPreferredPkg(context, str3)) {
                    str2 = str3;
                    break;
                }
            }
            if (str2 == null) {
                Iterator<ResolveInfo> it2 = queryIntentActivities.iterator();
                while (true) {
                    if (!it2.hasNext()) {
                        break;
                    }
                    String str4 = it2.next().activityInfo.packageName;
                    if ("com.android.browser".equalsIgnoreCase(str4)) {
                        str2 = str4;
                        break;
                    }
                }
            }
            if (str2 != null) {
                intent.setPackage(str2);
            }
            context.startActivity(intent);
        } catch (Exception e) {
            HMSLog.m3177e("PushSelfShowLog", "start browser activity failed, exception:" + e.getMessage());
        }
    }
}
