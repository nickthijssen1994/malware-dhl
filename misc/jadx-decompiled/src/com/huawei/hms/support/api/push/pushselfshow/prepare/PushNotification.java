package com.huawei.hms.support.api.push.pushselfshow.prepare;

import android.annotation.SuppressLint;
import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import com.huawei.hms.android.HwBuildEx;
import com.huawei.hms.push.C0999e;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.huawei.hms.support.api.push.pushselfshow.entity.PushSelfShowMessage;
import com.huawei.hms.support.api.push.pushselfshow.utils.CommFun;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.huawei.hms.support.api.push.utils.common.base.PushIntents;
import com.huawei.hms.support.log.HMSLog;
import com.huawei.hms.utils.ResourceLoaderUtil;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class PushNotification {
    public static final int AUTO_CLEAR_INDEX = 3;
    public static final int DELETE_INDEX = 2;
    public static int IDX = 0;
    public static final int NOTIFY_ID_ARR_LEN = 4;
    public static final int NOTIFY_ID_INDEX = 0;
    public static final int OPEN_INDEX = 1;
    public static final String TAG = "PushSelfShowLog";

    public static Notification getBuilderNotification(Context context, PushSelfShowMessage pushSelfShowMessage, int[] iArr) {
        Notification.Builder builder = new Notification.Builder(context);
        if (NotificationUtils.getStyle(pushSelfShowMessage) == NotifyStyle.STYLE_BIGTEXT) {
            NotificationUtils.initBigTextStyleBuilder(builder, pushSelfShowMessage.getBigContent(), pushSelfShowMessage);
        }
        NotificationIconUtil.setSmallIcon(context, builder, pushSelfShowMessage);
        setSubText(pushSelfShowMessage, builder);
        setTitleContent(context, pushSelfShowMessage, builder);
        setLargeIcon(context, pushSelfShowMessage, builder);
        setWhen(builder);
        setAutoCancel(pushSelfShowMessage, builder);
        setTicker(pushSelfShowMessage, builder);
        builder.setContentIntent(getPendingOpenIntent(context, pushSelfShowMessage, iArr));
        builder.setDeleteIntent(getPendingDeleteIntent(context, pushSelfShowMessage, iArr));
        if (Build.VERSION.SDK_INT >= 26) {
            builder.setChannelId(PushSelfShowConstant.PUSH_CHANNEL_ID);
        }
        setOriginPkgname(context, builder, pushSelfShowMessage);
        setNotifyAppName(context, builder, pushSelfShowMessage);
        return builder.build();
    }

    public static Intent getIntent(Context context, PushSelfShowMessage pushSelfShowMessage, int[] iArr, String str, int i) {
        Intent intent = new Intent(PushIntents.ACTION_PUSH_DELAY_NOTIFY);
        intent.putExtra("selfshow_info", pushSelfShowMessage.getMsgData()).putExtra("selfshow_token", pushSelfShowMessage.getToken()).putExtra(PushSelfShowConstant.EXTRA_SELF_SHOW_EVENT_ID, str).putExtra(PushSelfShowConstant.EXTRA_SELF_SHOW_NOTIFY_ID, iArr[0]).putExtra(PushSelfShowConstant.EXTRA_SELFSHOW_AUTO_CLEAR_ID, iArr[3]).setPackage(context.getPackageName()).setFlags(i);
        return intent;
    }

    public static PendingIntent getPendingDeleteIntent(Context context, PushSelfShowMessage pushSelfShowMessage, int[] iArr) {
        return PendingIntent.getBroadcast(context, iArr[2], getIntent(context, pushSelfShowMessage, iArr, "2", 268435456), 134217728);
    }

    public static PendingIntent getPendingOpenIntent(Context context, PushSelfShowMessage pushSelfShowMessage, int[] iArr) {
        return PendingIntent.getBroadcast(context, iArr[1], getIntent(context, pushSelfShowMessage, iArr, "1", 268435456), 134217728);
    }

    public static void setAutoCancel(PushSelfShowMessage pushSelfShowMessage, Notification.Builder builder) {
        boolean z = true;
        if (pushSelfShowMessage.getAutoCancel() != 1) {
            z = false;
        }
        builder.setAutoCancel(z);
        builder.setOngoing(false);
    }

    public static void setAutoClear(Context context, PushSelfShowMessage pushSelfShowMessage, int[] iArr) {
        HMSLog.m3175i("PushSelfShowLog", "setAutoClear time is: " + pushSelfShowMessage.getAutoClear());
        if (pushSelfShowMessage.getAutoClear() > 0) {
            setDelayAlarm(context, getIntent(context, pushSelfShowMessage, iArr, PushSelfShowConstant.ACTION_APP_OUT_OF_DATE_EVENT_ID, 32), (long) pushSelfShowMessage.getAutoClear(), iArr[3]);
        }
    }

    public static void setDelayAlarm(Context context, Intent intent, long j, int i) {
        try {
            StringBuilder sb = new StringBuilder();
            sb.append("enter setDelayAlarm(intent:");
            sb.append(intent.toURI());
            sb.append(" interval:");
            sb.append(j);
            sb.append("ms, context:");
            sb.append(context);
            HMSLog.m3180d("PushSelfShowLog", sb.toString());
            AlarmManager alarmManager = (AlarmManager) context.getSystemService("alarm");
            if (alarmManager != null) {
                alarmManager.set(0, System.currentTimeMillis() + j, PendingIntent.getBroadcast(context, i, intent, 134217728));
            }
        } catch (Exception e) {
            HMSLog.m3174w("PushSelfShowLog", "set DelayAlarm error" + e.toString());
        }
    }

    public static void setLargeIcon(Context context, PushSelfShowMessage pushSelfShowMessage, Notification.Builder builder) {
        Bitmap buildLeftIcon = NotificationIconUtil.buildLeftIcon(context, pushSelfShowMessage);
        if (buildLeftIcon != null) {
            builder.setLargeIcon(buildLeftIcon);
        }
    }

    @SuppressLint({"NewApi"})
    public static void setNotifyAppName(Context context, Notification.Builder builder, PushSelfShowMessage pushSelfShowMessage) {
        if (HwBuildEx.VERSION.EMUI_SDK_INT >= 11 && CommFun.isCurrentHMS(context)) {
            Bundle bundle = new Bundle();
            String dispPkgName = pushSelfShowMessage.getDispPkgName();
            HMSLog.m3175i("PushSelfShowLog", "the package name of notification is:" + dispPkgName);
            if (!TextUtils.isEmpty(dispPkgName)) {
                String appName = CommFun.getAppName(context, dispPkgName);
                HMSLog.m3175i("PushSelfShowLog", "the app name is:" + appName);
                if (appName != null) {
                    bundle.putCharSequence(PushSelfShowConstant.HW_ORIGIN_SENDER_APP_NAME, appName);
                }
            }
            builder.setExtras(bundle);
        }
    }

    @SuppressLint({"NewApi"})
    public static void setOriginPkgname(Context context, Notification.Builder builder, PushSelfShowMessage pushSelfShowMessage) {
        if ("com.huawei.android.pushagent".equals(context.getPackageName())) {
            Bundle bundle = new Bundle();
            String dispPkgName = pushSelfShowMessage.getDispPkgName();
            if (!TextUtils.isEmpty(dispPkgName)) {
                bundle.putString(PushSelfShowConstant.HW_ORIGIN_SENDER_PACKAGE_NAME, dispPkgName);
                builder.setExtras(bundle);
            }
        }
    }

    public static void setSubText(PushSelfShowMessage pushSelfShowMessage, Notification.Builder builder) {
        String notifySummary = pushSelfShowMessage.getNotifySummary();
        if (!TextUtils.isEmpty(notifySummary)) {
            builder.setSubText(notifySummary);
        }
    }

    public static void setTicker(PushSelfShowMessage pushSelfShowMessage, Notification.Builder builder) {
        builder.setTicker(pushSelfShowMessage.getTicker());
    }

    public static void setTitleContent(Context context, PushSelfShowMessage pushSelfShowMessage, Notification.Builder builder) {
        String str;
        if (TextUtils.isEmpty(pushSelfShowMessage.getNotifyTitle())) {
            str = context.getResources().getString(context.getApplicationInfo().labelRes);
        } else {
            str = pushSelfShowMessage.getNotifyTitle();
        }
        String content = pushSelfShowMessage.getContent();
        builder.setContentTitle(str);
        builder.setContentText(content);
    }

    public static void setWhen(Notification.Builder builder) {
        builder.setShowWhen(true);
        builder.setWhen(System.currentTimeMillis());
    }

    public static synchronized void showNotification(Context context, PushSelfShowMessage pushSelfShowMessage) {
        int i;
        int i2;
        int i3;
        int i4;
        synchronized (PushNotification.class) {
            if (context != null && pushSelfShowMessage != null) {
                HMSLog.m3180d("PushSelfShowLog", " showNotification , the msg id = " + pushSelfShowMessage.getMsgId());
                if (IDX == 0) {
                    IDX = (context.getPackageName() + System.currentTimeMillis()).hashCode();
                }
                if (TextUtils.isEmpty(pushSelfShowMessage.getGroup())) {
                    String msgTag = pushSelfShowMessage.getMsgTag();
                    if (!TextUtils.isEmpty(msgTag)) {
                        int hashCode = msgTag.hashCode();
                        pushSelfShowMessage.setNotifyId(hashCode);
                        HMSLog.m3180d("PushSelfShowLog", "notification msgTag = " + hashCode);
                    }
                    if (pushSelfShowMessage.getNotifyId() != -1) {
                        i4 = pushSelfShowMessage.getNotifyId();
                        i3 = (pushSelfShowMessage.getDispPkgName() + System.currentTimeMillis()).hashCode();
                        i2 = i3 + 1;
                        i = (pushSelfShowMessage.getNotifyId() + pushSelfShowMessage.getDispPkgName() + context.getPackageName()).hashCode();
                    } else {
                        i4 = IDX + 1;
                        IDX = i4;
                        i3 = IDX + 1;
                        IDX = i3;
                        i2 = IDX + 1;
                        IDX = i2;
                        i = IDX + 1;
                        IDX = i;
                    }
                } else {
                    i4 = (pushSelfShowMessage.getGroup() + pushSelfShowMessage.getDispPkgName()).hashCode();
                    i3 = IDX + 1;
                    IDX = i3;
                    i2 = IDX + 1;
                    IDX = i2;
                    i = (pushSelfShowMessage.getGroup() + pushSelfShowMessage.getDispPkgName() + context.getPackageName()).hashCode();
                }
                HMSLog.m3180d("PushSelfShowLog", "notifyId:" + i4 + ",openNotifyId:" + i3 + ",delNotifyId:" + i2 + ",alarmNotifyId:" + i);
                int[] iArr = new int[4];
                iArr[0] = i4;
                iArr[1] = i3;
                iArr[2] = i2;
                if (pushSelfShowMessage.getAutoClear() <= 0) {
                    i = 0;
                }
                iArr[3] = i;
                Notification notification = null;
                if (CommFun.isSupportLargeIcon()) {
                    notification = getBuilderNotification(context, pushSelfShowMessage, iArr);
                }
                NotificationManager notificationManager = (NotificationManager) context.getSystemService(RemoteMessageConst.NOTIFICATION);
                if (!(notificationManager == null || notification == null)) {
                    if (Build.VERSION.SDK_INT >= 26) {
                        notificationManager.createNotificationChannel(new NotificationChannel(PushSelfShowConstant.PUSH_CHANNEL_ID, context.getString(ResourceLoaderUtil.getStringId("hms_push_channel")), 3));
                    }
                    notificationManager.notify(i4, notification);
                    setAutoClear(context, pushSelfShowMessage, iArr);
                    C0999e.m3198a(context, PushSelfShowConstant.EVENT_ID_SHOW_NOTIFICATION, pushSelfShowMessage);
                }
            }
        }
    }
}
