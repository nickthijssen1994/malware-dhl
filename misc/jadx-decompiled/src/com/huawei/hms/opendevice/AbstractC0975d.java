package com.huawei.hms.opendevice;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.support.log.HMSLog;
import com.huawei.secure.android.common.ssl.SecureSSLSocketFactory;
import com.huawei.secure.android.common.util.IOUtil;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.util.Map;
import javax.net.ssl.HttpsURLConnection;

/* compiled from: TbsSdkJava */
/* renamed from: com.huawei.hms.opendevice.d */
/* loaded from: classes.dex */
public abstract class AbstractC0975d {

    /* compiled from: TbsSdkJava */
    /* renamed from: com.huawei.hms.opendevice.d$a */
    /* loaded from: classes.dex */
    private enum EnumC0976a {
        GET("GET"),
        POST("POST");
        

        /* renamed from: d */
        public String f1300d;

        EnumC0976a(String str) {
            this.f1300d = str;
        }

        /* renamed from: a */
        public String m3277a() {
            return this.f1300d;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r6v0, types: [android.content.Context] */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.net.HttpURLConnection] */
    /* JADX WARN: Type inference failed for: r6v14 */
    /* JADX WARN: Type inference failed for: r6v15, types: [java.net.HttpURLConnection] */
    /* JADX WARN: Type inference failed for: r7v0, types: [java.lang.CharSequence, java.lang.String] */
    /* JADX WARN: Type inference failed for: r7v1, types: [java.io.OutputStream] */
    /* JADX WARN: Type inference failed for: r7v10 */
    /* JADX WARN: Type inference failed for: r7v13 */
    /* JADX WARN: Type inference failed for: r7v14 */
    /* JADX WARN: Type inference failed for: r7v15 */
    /* JADX WARN: Type inference failed for: r7v16 */
    /* JADX WARN: Type inference failed for: r7v17 */
    /* JADX WARN: Type inference failed for: r7v20 */
    /* JADX WARN: Type inference failed for: r7v21, types: [java.io.OutputStream, java.io.FilterOutputStream, java.io.BufferedOutputStream] */
    /* JADX WARN: Type inference failed for: r7v22 */
    /* JADX WARN: Type inference failed for: r7v23 */
    /* JADX WARN: Type inference failed for: r7v24 */
    /* JADX WARN: Type inference failed for: r7v25 */
    /* JADX WARN: Type inference failed for: r7v5 */
    /* JADX WARN: Type inference failed for: r7v6 */
    /* JADX WARN: Type inference failed for: r7v7 */
    /* JADX WARN: Type inference failed for: r7v8 */
    /* JADX WARN: Type inference failed for: r7v9 */
    /* JADX WARN: Type inference failed for: r8v0, types: [java.lang.CharSequence, java.lang.String] */
    /* JADX WARN: Type inference failed for: r8v1, types: [java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r8v10 */
    /* JADX WARN: Type inference failed for: r8v15 */
    /* JADX WARN: Type inference failed for: r8v20 */
    /* JADX WARN: Type inference failed for: r8v24, types: [java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r8v30 */
    /* JADX WARN: Type inference failed for: r8v31 */
    /* JADX WARN: Type inference failed for: r9v0, types: [java.util.Map<java.lang.String, java.lang.String>, java.util.Map] */
    /* JADX WARN: Type inference failed for: r9v1, types: [java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r9v12 */
    /* JADX WARN: Type inference failed for: r9v15 */
    /* JADX WARN: Type inference failed for: r9v22 */
    /* JADX WARN: Type inference failed for: r9v9 */
    /* renamed from: a */
    public static String m3280a(Context context, String str, String str2, Map<String, String> map) {
        Throwable th;
        InputStream inputStream;
        InputStream inputStream2;
        OutputStream outputStream;
        HttpURLConnection httpURLConnection;
        InputStream inputStream3;
        HttpURLConnection httpURLConnection2;
        if (str2 == 0 || TextUtils.isEmpty(str) || TextUtils.isEmpty(str2)) {
            return null;
        }
        try {
            int i = -1;
            try {
                context = m3279a((Context) context, (String) str, (Map<String, String>) map, EnumC0976a.POST.m3277a());
                if (context == 0) {
                    IOUtil.closeSecure((OutputStream) null);
                    IOUtil.closeSecure((InputStream) null);
                    IOUtil.closeSecure((InputStream) null);
                    AbstractC0993s.m3229a((HttpURLConnection) context);
                    HMSLog.m3175i("PushHttpClient", "close connection");
                    return null;
                }
                try {
                    str = new BufferedOutputStream(context.getOutputStream());
                } catch (IOException unused) {
                    str = 0;
                    str2 = null;
                } catch (RuntimeException unused2) {
                    str = 0;
                    str2 = null;
                } catch (Exception unused3) {
                    inputStream3 = null;
                    httpURLConnection2 = context;
                    str2 = inputStream3;
                    context = httpURLConnection2;
                    str = inputStream3;
                    inputStream = str2;
                    StringBuilder sb = new StringBuilder();
                    sb.append("http execute encounter unknown exception - http code:");
                    sb.append(i);
                    HMSLog.m3174w("PushHttpClient", sb.toString());
                    httpURLConnection = context;
                    outputStream = str;
                    inputStream2 = str2;
                    IOUtil.closeSecure(outputStream);
                    IOUtil.closeSecure(inputStream2);
                    IOUtil.closeSecure(inputStream);
                    AbstractC0993s.m3229a(httpURLConnection);
                    HMSLog.m3175i("PushHttpClient", "close connection");
                    return null;
                } catch (Throwable th2) {
                    th = th2;
                    str2 = 0;
                    map = 0;
                    str = 0;
                }
                try {
                    str.write(str2.getBytes("UTF-8"));
                    str.flush();
                    i = context.getResponseCode();
                    StringBuilder sb2 = new StringBuilder();
                    sb2.append("http post response code: ");
                    sb2.append(i);
                    HMSLog.m3180d("PushHttpClient", sb2.toString());
                    if (i >= 400) {
                        str2 = context.getErrorStream();
                    } else {
                        str2 = context.getInputStream();
                    }
                    try {
                        inputStream = new BufferedInputStream(str2);
                        try {
                            String a = AbstractC0993s.m3230a(inputStream);
                            IOUtil.closeSecure((OutputStream) str);
                            IOUtil.closeSecure((InputStream) str2);
                            IOUtil.closeSecure(inputStream);
                            AbstractC0993s.m3229a((HttpURLConnection) context);
                            HMSLog.m3175i("PushHttpClient", "close connection");
                            return a;
                        } catch (IOException unused4) {
                            StringBuilder sb3 = new StringBuilder();
                            sb3.append("http execute encounter IOException - http code:");
                            sb3.append(i);
                            HMSLog.m3174w("PushHttpClient", sb3.toString());
                            httpURLConnection = context;
                            outputStream = str;
                            inputStream2 = str2;
                            IOUtil.closeSecure(outputStream);
                            IOUtil.closeSecure(inputStream2);
                            IOUtil.closeSecure(inputStream);
                            AbstractC0993s.m3229a(httpURLConnection);
                            HMSLog.m3175i("PushHttpClient", "close connection");
                            return null;
                        } catch (RuntimeException unused5) {
                            StringBuilder sb4 = new StringBuilder();
                            sb4.append("http execute encounter RuntimeException - http code:");
                            sb4.append(i);
                            HMSLog.m3174w("PushHttpClient", sb4.toString());
                            httpURLConnection = context;
                            outputStream = str;
                            inputStream2 = str2;
                            IOUtil.closeSecure(outputStream);
                            IOUtil.closeSecure(inputStream2);
                            IOUtil.closeSecure(inputStream);
                            AbstractC0993s.m3229a(httpURLConnection);
                            HMSLog.m3175i("PushHttpClient", "close connection");
                            return null;
                        } catch (Exception unused6) {
                            StringBuilder sb5 = new StringBuilder();
                            sb5.append("http execute encounter unknown exception - http code:");
                            sb5.append(i);
                            HMSLog.m3174w("PushHttpClient", sb5.toString());
                            httpURLConnection = context;
                            outputStream = str;
                            inputStream2 = str2;
                            IOUtil.closeSecure(outputStream);
                            IOUtil.closeSecure(inputStream2);
                            IOUtil.closeSecure(inputStream);
                            AbstractC0993s.m3229a(httpURLConnection);
                            HMSLog.m3175i("PushHttpClient", "close connection");
                            return null;
                        }
                    } catch (IOException unused7) {
                        inputStream = null;
                    } catch (RuntimeException unused8) {
                        inputStream = null;
                    } catch (Exception unused9) {
                        inputStream = null;
                    } catch (Throwable th3) {
                        th = th3;
                        map = 0;
                        IOUtil.closeSecure((OutputStream) str);
                        IOUtil.closeSecure((InputStream) str2);
                        IOUtil.closeSecure((InputStream) map);
                        AbstractC0993s.m3229a((HttpURLConnection) context);
                        HMSLog.m3175i("PushHttpClient", "close connection");
                        throw th;
                    }
                } catch (IOException unused10) {
                    str2 = null;
                    str = str;
                    inputStream = str2;
                    StringBuilder sb32 = new StringBuilder();
                    sb32.append("http execute encounter IOException - http code:");
                    sb32.append(i);
                    HMSLog.m3174w("PushHttpClient", sb32.toString());
                    httpURLConnection = context;
                    outputStream = str;
                    inputStream2 = str2;
                    IOUtil.closeSecure(outputStream);
                    IOUtil.closeSecure(inputStream2);
                    IOUtil.closeSecure(inputStream);
                    AbstractC0993s.m3229a(httpURLConnection);
                    HMSLog.m3175i("PushHttpClient", "close connection");
                    return null;
                } catch (RuntimeException unused11) {
                    str2 = null;
                    str = str;
                    inputStream = str2;
                    StringBuilder sb42 = new StringBuilder();
                    sb42.append("http execute encounter RuntimeException - http code:");
                    sb42.append(i);
                    HMSLog.m3174w("PushHttpClient", sb42.toString());
                    httpURLConnection = context;
                    outputStream = str;
                    inputStream2 = str2;
                    IOUtil.closeSecure(outputStream);
                    IOUtil.closeSecure(inputStream2);
                    IOUtil.closeSecure(inputStream);
                    AbstractC0993s.m3229a(httpURLConnection);
                    HMSLog.m3175i("PushHttpClient", "close connection");
                    return null;
                } catch (Exception unused12) {
                    str2 = null;
                    context = context;
                    str = str;
                    inputStream = str2;
                    StringBuilder sb52 = new StringBuilder();
                    sb52.append("http execute encounter unknown exception - http code:");
                    sb52.append(i);
                    HMSLog.m3174w("PushHttpClient", sb52.toString());
                    httpURLConnection = context;
                    outputStream = str;
                    inputStream2 = str2;
                    IOUtil.closeSecure(outputStream);
                    IOUtil.closeSecure(inputStream2);
                    IOUtil.closeSecure(inputStream);
                    AbstractC0993s.m3229a(httpURLConnection);
                    HMSLog.m3175i("PushHttpClient", "close connection");
                    return null;
                } catch (Throwable th4) {
                    th = th4;
                    map = 0;
                    str2 = 0;
                }
            } catch (IOException unused13) {
                context = null;
                str = 0;
                str2 = null;
                inputStream = null;
            } catch (RuntimeException unused14) {
                context = null;
                str = 0;
                str2 = null;
                inputStream = null;
            } catch (Exception unused15) {
                httpURLConnection2 = null;
                inputStream3 = null;
            } catch (Throwable th5) {
                th = th5;
                str = 0;
                str2 = 0;
                map = 0;
                context = 0;
            }
        } catch (Throwable th6) {
            th = th6;
        }
    }

    /* renamed from: a */
    public static HttpURLConnection m3279a(Context context, String str, Map<String, String> map, String str2) throws Exception {
        HttpURLConnection httpURLConnection = (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(new URL(str).openConnection());
        m3278a(context, httpURLConnection);
        httpURLConnection.setRequestMethod(str2);
        httpURLConnection.setConnectTimeout(15000);
        httpURLConnection.setReadTimeout(15000);
        httpURLConnection.setDoOutput(true);
        httpURLConnection.setDoInput(true);
        httpURLConnection.setRequestProperty("Content-type", "application/json; charset=UTF-8");
        httpURLConnection.setRequestProperty("Connection", "close");
        if (map != null && map.size() >= 1) {
            for (Map.Entry<String, String> entry : map.entrySet()) {
                String key = entry.getKey();
                if (key != null && !TextUtils.isEmpty(key)) {
                    httpURLConnection.setRequestProperty(key, URLEncoder.encode(entry.getValue() == null ? "" : entry.getValue(), "UTF-8"));
                }
            }
        }
        return httpURLConnection;
    }

    /* renamed from: a */
    public static void m3278a(Context context, HttpURLConnection httpURLConnection) throws Exception {
        if (httpURLConnection instanceof HttpsURLConnection) {
            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) httpURLConnection;
            SecureSSLSocketFactory secureSSLSocketFactory = null;
            try {
                secureSSLSocketFactory = SecureSSLSocketFactory.getInstance(context);
            } catch (IOException unused) {
                HMSLog.m3174w("PushHttpClient", "Get SocketFactory IO Exception.");
            } catch (IllegalAccessException unused2) {
                HMSLog.m3174w("PushHttpClient", "Get SocketFactory Illegal Access Exception.");
            } catch (IllegalArgumentException unused3) {
                HMSLog.m3174w("PushHttpClient", "Get SocketFactory Illegal Argument Exception.");
            } catch (KeyStoreException unused4) {
                HMSLog.m3174w("PushHttpClient", "Get SocketFactory Key Store exception.");
            } catch (NoSuchAlgorithmException unused5) {
                HMSLog.m3174w("PushHttpClient", "Get SocketFactory Algorithm Exception.");
            } catch (GeneralSecurityException unused6) {
                HMSLog.m3174w("PushHttpClient", "Get SocketFactory General Security Exception.");
            }
            if (secureSSLSocketFactory != null) {
                httpsURLConnection.setSSLSocketFactory(secureSSLSocketFactory);
                httpsURLConnection.setHostnameVerifier(SecureSSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
                return;
            }
            throw new Exception("No ssl socket factory set.");
        }
    }
}
