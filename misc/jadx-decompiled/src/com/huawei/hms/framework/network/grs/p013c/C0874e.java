package com.huawei.hms.framework.network.grs.p013c;

import android.text.TextUtils;
import com.huawei.hms.api.ConnectionResult;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.common.StringUtils;
import java.nio.ByteBuffer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* renamed from: com.huawei.hms.framework.network.grs.c.e */
/* loaded from: classes.dex */
public class C0874e {

    /* renamed from: a */
    private static final String f1035a;

    /* renamed from: b */
    private Map<String, List<String>> f1036b;

    /* renamed from: c */
    private byte[] f1037c;

    /* renamed from: d */
    private int f1038d;

    /* renamed from: e */
    private long f1039e;

    /* renamed from: f */
    private long f1040f;

    /* renamed from: g */
    private long f1041g;

    /* renamed from: h */
    private String f1042h;

    /* renamed from: i */
    private int f1043i;

    /* renamed from: j */
    private int f1044j;

    /* renamed from: k */
    private String f1045k;

    /* renamed from: l */
    private String f1046l;

    /* renamed from: m */
    private String f1047m;

    /* renamed from: n */
    private long f1048n;

    /* renamed from: o */
    private Exception f1049o;

    /* renamed from: p */
    private String f1050p;

    /* renamed from: q */
    private int f1051q;

    public C0874e(int i, Map<String, List<String>> map, byte[] bArr, long j) {
        this.f1038d = 0;
        this.f1043i = 2;
        this.f1044j = ConnectionResult.RESOLUTION_REQUIRED;
        this.f1045k = "";
        this.f1046l = "";
        this.f1047m = "";
        this.f1048n = 0;
        this.f1038d = i;
        this.f1036b = map;
        this.f1037c = ByteBuffer.wrap(bArr).array();
        this.f1039e = j;
        m3779q();
    }

    public C0874e(Exception exc, long j) {
        this.f1038d = 0;
        this.f1043i = 2;
        this.f1044j = ConnectionResult.RESOLUTION_REQUIRED;
        this.f1045k = "";
        this.f1046l = "";
        this.f1047m = "";
        this.f1048n = 0;
        this.f1049o = exc;
        this.f1039e = j;
    }

    /* renamed from: a */
    private void m3804a(Map<String, String> map) {
        long j;
        NumberFormatException e;
        if (map == null || map.size() <= 0) {
            Logger.m3897w(f1035a, "getExpireTime {headers == null} or {headers.size() <= 0}");
            return;
        }
        if (map.containsKey("Cache-Control")) {
            String str = map.get("Cache-Control");
            if (!TextUtils.isEmpty(str) && str.contains("max-age=")) {
                try {
                    j = Long.parseLong(str.substring(str.indexOf("max-age=") + 8));
                } catch (NumberFormatException e2) {
                    e = e2;
                    j = 0;
                }
                try {
                    Logger.m3898v(f1035a, "Cache-Control value{%s}", Long.valueOf(j));
                } catch (NumberFormatException e3) {
                    e = e3;
                    Logger.m3896w(f1035a, "getExpireTime addHeadersToResult NumberFormatException", e);
                    if (j > 0) {
                    }
                    j = 86400;
                    long j2 = j * 1000;
                    Logger.m3898v(f1035a, "convert expireTime{%s}", Long.valueOf(j2));
                    m3800b(String.valueOf(j2 + System.currentTimeMillis()));
                }
            }
            j = 0;
        } else {
            if (map.containsKey("Expires")) {
                String str2 = map.get("Expires");
                Logger.m3898v(f1035a, "expires is{%s}", str2);
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss 'GMT'", Locale.ROOT);
                String str3 = null;
                if (map.containsKey("Date")) {
                    str3 = map.get("Date");
                }
                try {
                    j = (simpleDateFormat.parse(str2).getTime() - (TextUtils.isEmpty(str3) ? new Date() : simpleDateFormat.parse(str3)).getTime()) / 1000;
                } catch (ParseException e4) {
                    Logger.m3896w(f1035a, "getExpireTime ParseException.", e4);
                }
            } else {
                Logger.m3901i(f1035a, "response headers neither contains Cache-Control nor Expires.");
            }
            j = 0;
        }
        if (j > 0 || j > 2592000) {
            j = 86400;
        }
        long j22 = j * 1000;
        Logger.m3898v(f1035a, "convert expireTime{%s}", Long.valueOf(j22));
        m3800b(String.valueOf(j22 + System.currentTimeMillis()));
    }

    /* renamed from: b */
    private void m3802b(int i) {
        this.f1044j = i;
    }

    /* renamed from: b */
    private void m3800b(String str) {
        this.f1047m = str;
    }

    /* renamed from: b */
    private void m3799b(Map<String, String> map) {
        if (map == null || map.size() <= 0) {
            Logger.m3897w(f1035a, "getExpireTime {headers == null} or {headers.size() <= 0}");
            return;
        }
        long j = 0;
        if (map.containsKey("Retry-After")) {
            String str = map.get("Retry-After");
            if (!TextUtils.isEmpty(str)) {
                try {
                    j = Long.parseLong(str);
                } catch (NumberFormatException e) {
                    Logger.m3896w(f1035a, "getRetryAfter addHeadersToResult NumberFormatException", e);
                }
            }
        }
        long j2 = j * 1000;
        Logger.m3898v(f1035a, "convert retry-afterTime{%s}", Long.valueOf(j2));
        m3796c(j2);
    }

    /* renamed from: c */
    private void m3797c(int i) {
        this.f1043i = i;
    }

    /* renamed from: c */
    private void m3796c(long j) {
        this.f1048n = j;
    }

    /* renamed from: c */
    private void m3795c(String str) {
        this.f1045k = str;
    }

    /* renamed from: d */
    private void m3793d(String str) {
        this.f1046l = str;
    }

    /* renamed from: e */
    private void m3791e(String str) {
        this.f1042h = str;
    }

    /* JADX WARN: Removed duplicated region for block: B:34:0x0060  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0067  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x007b  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0090  */
    /* JADX WARN: Removed duplicated region for block: B:59:? A[RETURN, SYNTHETIC] */
    /* renamed from: n */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void m3782n() {
        boolean z;
        String str;
        if (!m3783m()) {
            Logger.m3901i(f1035a, "GRSSDK parse server body all failed.");
            m3797c(2);
            return;
        }
        try {
            String byte2Str = StringUtils.byte2Str(this.f1037c);
            JSONObject jSONObject = new JSONObject(byte2Str);
            int i = -1;
            if (jSONObject.has("isSuccess")) {
                str = "isSuccess";
            } else if (jSONObject.has("resultCode")) {
                str = "resultCode";
            } else {
                Logger.m3904e(f1035a, "sth. wrong because server errorcode's key.");
                m3797c(i);
                z = i != 0 && byte2Str.contains("services");
                if (i != 1 && !z) {
                    m3797c(2);
                    m3802b(!jSONObject.has("errorCode") ? jSONObject.getInt("errorCode") : ConnectionResult.RESOLUTION_REQUIRED);
                    m3795c(!jSONObject.has("errorDesc") ? jSONObject.getString("errorDesc") : "");
                    return;
                }
                m3791e(jSONObject.getJSONObject("services").toString());
                if (!z) {
                    m3793d(jSONObject.has("errorList") ? jSONObject.getString("errorList") : "");
                    return;
                }
                return;
            }
            i = jSONObject.getInt(str);
            m3797c(i);
            if (i != 0) {
            }
            if (i != 1) {
                m3797c(2);
                m3802b(!jSONObject.has("errorCode") ? jSONObject.getInt("errorCode") : ConnectionResult.RESOLUTION_REQUIRED);
                m3795c(!jSONObject.has("errorDesc") ? jSONObject.getString("errorDesc") : "");
                return;
            }
            m3791e(jSONObject.getJSONObject("services").toString());
            if (!z) {
            }
        } catch (JSONException e) {
            Logger.m3896w(f1035a, "GrsResponse GrsResponse(String result) JSONException", e);
            m3797c(2);
        }
    }

    /* renamed from: o */
    private void m3781o() {
        if (m3783m() || m3784l()) {
            Map<String, String> p = m3780p();
            try {
                if (m3783m()) {
                    m3804a(p);
                }
                if (m3784l()) {
                    m3799b(p);
                }
            } catch (JSONException e) {
                Logger.m3896w(f1035a, "parseHeader catch JSONException", e);
            }
        }
    }

    /* renamed from: p */
    private Map<String, String> m3780p() {
        HashMap hashMap = new HashMap(16);
        Map<String, List<String>> map = this.f1036b;
        if (map == null || map.size() <= 0) {
            Logger.m3899v(f1035a, "parseRespHeaders {respHeaders == null} or {respHeaders.size() <= 0}");
            return hashMap;
        }
        for (Map.Entry<String, List<String>> entry : this.f1036b.entrySet()) {
            hashMap.put(entry.getKey(), entry.getValue().get(0));
        }
        return hashMap;
    }

    /* renamed from: q */
    private void m3779q() {
        m3781o();
        m3782n();
    }

    /* renamed from: a */
    public String m3808a() {
        return this.f1047m;
    }

    /* renamed from: a */
    public void m3807a(int i) {
        this.f1051q = i;
    }

    /* renamed from: a */
    public void m3806a(long j) {
        this.f1041g = j;
    }

    /* renamed from: a */
    public void m3805a(String str) {
        this.f1050p = str;
    }

    /* renamed from: b */
    public int m3803b() {
        return this.f1038d;
    }

    /* renamed from: b */
    public void m3801b(long j) {
        this.f1040f = j;
    }

    /* renamed from: c */
    public int m3798c() {
        return this.f1044j;
    }

    /* renamed from: d */
    public Exception m3794d() {
        return this.f1049o;
    }

    /* renamed from: e */
    public int m3792e() {
        return this.f1043i;
    }

    /* renamed from: f */
    public long m3790f() {
        return this.f1041g;
    }

    /* renamed from: g */
    public long m3789g() {
        return this.f1040f;
    }

    /* renamed from: h */
    public long m3788h() {
        return this.f1039e;
    }

    /* renamed from: i */
    public String m3787i() {
        return this.f1042h;
    }

    /* renamed from: j */
    public long m3786j() {
        return this.f1048n;
    }

    /* renamed from: k */
    public String m3785k() {
        return this.f1050p;
    }

    /* renamed from: l */
    public boolean m3784l() {
        return this.f1038d == 503;
    }

    /* renamed from: m */
    public boolean m3783m() {
        return this.f1038d == 200;
    }
}
