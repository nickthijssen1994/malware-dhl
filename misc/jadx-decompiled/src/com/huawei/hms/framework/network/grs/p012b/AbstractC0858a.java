package com.huawei.hms.framework.network.grs.p012b;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.local.model.C0896a;
import com.huawei.hms.framework.network.grs.local.model.C0897b;
import com.huawei.hms.framework.network.grs.local.model.C0898c;
import com.huawei.hms.framework.network.grs.local.model.C0899d;
import com.huawei.hms.framework.network.grs.p016d.C0890c;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* renamed from: com.huawei.hms.framework.network.grs.b.a */
/* loaded from: classes.dex */
public abstract class AbstractC0858a {

    /* renamed from: a */
    protected C0896a f989a;

    /* renamed from: b */
    protected List<C0897b> f990b;

    /* renamed from: c */
    protected Map<String, String> f991c = new ConcurrentHashMap(16);

    /* renamed from: d */
    protected boolean f992d = false;

    /* renamed from: e */
    protected Set<String> f993e = new HashSet(16);

    /* renamed from: a */
    private int m3862a(Context context) {
        int i = -1;
        try {
            String[] list = context.getAssets().list("");
            if (list == null || list.length <= 0) {
                return -1;
            }
            int i2 = -1;
            for (String str : list) {
                try {
                    if (Pattern.matches("^grs_sdk_global_route_config_[a-zA-Z]+\\.json$", str) && m3850g(C0890c.m3723a(str, context)) == 0) {
                        Logger.m3901i("AbstractLocalManager", "load SDK_CONFIG_FILE sucess.");
                        i2 = 0;
                    }
                } catch (IOException unused) {
                    i = i2;
                    Logger.m3897w("AbstractLocalManager", "list assets files fail,please check if according to our standard config json files.");
                    return i;
                }
            }
            return i2;
        } catch (IOException unused2) {
        }
    }

    /* renamed from: a */
    private int m3858a(String str, Context context) {
        if (m3851f(C0890c.m3723a(str, context)) != 0) {
            return -1;
        }
        Logger.m3901i("AbstractLocalManager", "load APP_CONFIG_FILE success.");
        return 0;
    }

    /* renamed from: a */
    private Map<String, String> m3856a(List<C0897b> list, GrsBaseInfo grsBaseInfo) {
        ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap(16);
        concurrentHashMap.put("no_route_country", "no-country");
        for (C0897b bVar : list) {
            if (bVar.m3710a().contains(grsBaseInfo.getIssueCountry())) {
                concurrentHashMap.put(grsBaseInfo.getIssueCountry(), bVar.m3707b());
            }
            if (bVar.m3710a().contains(grsBaseInfo.getRegCountry())) {
                concurrentHashMap.put(grsBaseInfo.getRegCountry(), bVar.m3707b());
            }
            if (bVar.m3710a().contains(grsBaseInfo.getSerCountry())) {
                concurrentHashMap.put(grsBaseInfo.getSerCountry(), bVar.m3707b());
            }
        }
        return concurrentHashMap;
    }

    /* renamed from: f */
    private int m3851f(String str) {
        if (TextUtils.isEmpty(str)) {
            return -1;
        }
        int b = mo3841b(str);
        if (b != 0) {
            return b;
        }
        int a = mo3843a(str);
        return a != 0 ? a : mo3840e(str);
    }

    /* renamed from: g */
    private int m3850g(String str) {
        int c;
        if (TextUtils.isEmpty(str)) {
            return -1;
        }
        List<C0897b> list = this.f990b;
        return ((list == null || list.isEmpty()) && (c = m3853c(str)) != 0) ? c : m3852d(str);
    }

    /* renamed from: a */
    public abstract int mo3843a(String str);

    /* renamed from: a */
    int m3857a(String str, Context context, boolean z) {
        if (m3858a(str, context) != 0 && z) {
            return -1;
        }
        m3862a(context);
        return 0;
    }

    /* renamed from: a */
    public C0896a m3863a() {
        return this.f989a;
    }

    /* renamed from: a */
    public String m3859a(GrsBaseInfo grsBaseInfo, String str, String str2) {
        Map<String, String> a = m3860a(grsBaseInfo, str);
        if (a != null) {
            return a.get(str2);
        }
        Logger.m3895w("AbstractLocalManager", "addresses not found by routeby in local config{%s}", str);
        return null;
    }

    /* renamed from: a */
    public abstract List<C0897b> mo3842a(JSONArray jSONArray, JSONObject jSONObject);

    /* renamed from: a */
    public Map<String, String> m3860a(GrsBaseInfo grsBaseInfo, String str) {
        if (!this.f992d) {
            return null;
        }
        C0896a aVar = this.f989a;
        if (aVar == null) {
            Logger.m3897w("AbstractLocalManager", "application data is null.");
            return null;
        }
        C0898c a = aVar.m3714a(str);
        if (a == null) {
            Logger.m3895w("AbstractLocalManager", "service not found in local config{%s}", str);
            return null;
        }
        String a2 = C0863f.m3839a(a.m3698c(), grsBaseInfo);
        if (a2 == null) {
            Logger.m3895w("AbstractLocalManager", "country not found by routeby in local config{%s}", a.m3698c());
            return null;
        }
        List<C0897b> a3 = a.m3704a();
        C0899d a4 = a.m3703a(((a3 == null || a3.size() == 0) ? this.f991c : m3856a(a3, grsBaseInfo)).get(a2));
        if (a4 == null) {
            return null;
        }
        return a4.m3696a();
    }

    /* JADX WARN: Removed duplicated region for block: B:24:0x008f A[LOOP:2: B:22:0x0089->B:24:0x008f, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00d7  */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    protected void m3855a(JSONArray jSONArray) {
        String str;
        Iterator<String> keys;
        String str2;
        if (!(jSONArray == null || jSONArray.length() == 0)) {
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                C0898c cVar = new C0898c();
                String string = jSONObject.getString("name");
                cVar.m3699b(string);
                if (!this.f993e.contains(string)) {
                    this.f993e.add(string);
                    cVar.m3697c(jSONObject.getString("routeBy"));
                    JSONArray jSONArray2 = jSONObject.getJSONArray("servings");
                    for (int i2 = 0; i2 < jSONArray2.length(); i2++) {
                        JSONObject jSONObject2 = (JSONObject) jSONArray2.get(i2);
                        C0899d dVar = new C0899d();
                        String str3 = "no-country";
                        if (jSONObject2.has("countryOrAreaGroup")) {
                            str2 = "countryOrAreaGroup";
                        } else if (jSONObject2.has("countryGroup")) {
                            str2 = "countryGroup";
                        } else {
                            Logger.m3899v("AbstractLocalManager", "maybe this service routeBy is unconditional.");
                            dVar.m3695a(str3);
                            JSONObject jSONObject3 = jSONObject2.getJSONObject("addresses");
                            HashMap hashMap = new HashMap(16);
                            keys = jSONObject3.keys();
                            while (keys.hasNext()) {
                                String next = keys.next();
                                hashMap.put(next, jSONObject3.getString(next));
                            }
                            dVar.m3694a(hashMap);
                            cVar.m3702a(dVar.m3693b(), dVar);
                        }
                        str3 = jSONObject2.getString(str2);
                        dVar.m3695a(str3);
                        JSONObject jSONObject32 = jSONObject2.getJSONObject("addresses");
                        HashMap hashMap2 = new HashMap(16);
                        keys = jSONObject32.keys();
                        while (keys.hasNext()) {
                        }
                        dVar.m3694a(hashMap2);
                        cVar.m3702a(dVar.m3693b(), dVar);
                    }
                    List<C0897b> list = null;
                    if (jSONObject.has("countryOrAreaGroups")) {
                        str = "countryOrAreaGroups";
                    } else if (jSONObject.has("countryGroups")) {
                        str = "countryGroups";
                    } else {
                        Logger.m3901i("AbstractLocalManager", "service use default countryOrAreaGroup");
                        cVar.m3701a(list);
                        if (this.f989a == null) {
                            this.f989a = new C0896a();
                        }
                        this.f989a.m3713a(string, cVar);
                    }
                    list = mo3842a(jSONObject.getJSONArray(str), (JSONObject) null);
                    cVar.m3701a(list);
                    if (this.f989a == null) {
                    }
                    this.f989a.m3713a(string, cVar);
                }
            }
        }
    }

    /* renamed from: a */
    public boolean m3861a(GrsBaseInfo grsBaseInfo) {
        List<C0897b> list = this.f990b;
        if (list == null || list.isEmpty()) {
            return false;
        }
        this.f991c.put("no_route_country", "no-country");
        for (C0897b bVar : this.f990b) {
            if (bVar.m3710a().contains(grsBaseInfo.getIssueCountry())) {
                this.f991c.put(grsBaseInfo.getIssueCountry(), bVar.m3707b());
            }
            if (bVar.m3710a().contains(grsBaseInfo.getRegCountry())) {
                this.f991c.put(grsBaseInfo.getRegCountry(), bVar.m3707b());
            }
            if (bVar.m3710a().contains(grsBaseInfo.getSerCountry())) {
                this.f991c.put(grsBaseInfo.getSerCountry(), bVar.m3707b());
            }
        }
        return true;
    }

    /* renamed from: b */
    public abstract int mo3841b(String str);

    /* renamed from: b */
    public boolean m3854b() {
        return this.f992d;
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x0034 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0035 A[Catch: JSONException -> 0x00b7, TryCatch #0 {JSONException -> 0x00b7, blocks: (B:3:0x000a, B:5:0x0011, B:10:0x001d, B:13:0x0025, B:15:0x002e, B:18:0x0035, B:21:0x003d, B:23:0x0043, B:25:0x004e, B:27:0x0057, B:29:0x0060, B:31:0x0069, B:35:0x0074, B:38:0x007c, B:40:0x0085, B:41:0x0089, B:43:0x0090, B:47:0x0098, B:49:0x009e, B:50:0x00aa), top: B:57:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x009e A[Catch: JSONException -> 0x00b7, LOOP:1: B:47:0x0098->B:49:0x009e, LOOP_END, TryCatch #0 {JSONException -> 0x00b7, blocks: (B:3:0x000a, B:5:0x0011, B:10:0x001d, B:13:0x0025, B:15:0x002e, B:18:0x0035, B:21:0x003d, B:23:0x0043, B:25:0x004e, B:27:0x0057, B:29:0x0060, B:31:0x0069, B:35:0x0074, B:38:0x007c, B:40:0x0085, B:41:0x0089, B:43:0x0090, B:47:0x0098, B:49:0x009e, B:50:0x00aa), top: B:57:0x000a }] */
    /* renamed from: c */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public int m3853c(String str) {
        JSONArray jSONArray;
        JSONArray jSONArray2;
        HashSet hashSet;
        int i;
        String str2;
        String str3;
        this.f990b = new ArrayList(16);
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.has("countryOrAreaGroups")) {
                str3 = "countryOrAreaGroups";
            } else if (jSONObject.has("countryGroups")) {
                str3 = "countryGroups";
            } else {
                Logger.m3904e("AbstractLocalManager", "maybe local config json is wrong because the default countryOrAreaGroups isn't config.");
                jSONArray = null;
                if (jSONArray != null) {
                    return -1;
                }
                if (jSONArray.length() != 0) {
                    for (int i2 = 0; i2 < jSONArray.length(); i2++) {
                        JSONObject jSONObject2 = jSONArray.getJSONObject(i2);
                        C0897b bVar = new C0897b();
                        bVar.m3706b(jSONObject2.getString("id"));
                        bVar.m3705c(jSONObject2.getString("name"));
                        bVar.m3709a(jSONObject2.getString("description"));
                        if (jSONObject2.has("countriesOrAreas")) {
                            str2 = "countriesOrAreas";
                        } else if (jSONObject2.has("countries")) {
                            str2 = "countries";
                        } else {
                            Logger.m3897w("AbstractLocalManager", "current country or area group has not config countries or areas.");
                            jSONArray2 = null;
                            hashSet = new HashSet(16);
                            if (!(jSONArray2 == null || jSONArray2.length() == 0)) {
                                for (i = 0; i < jSONArray2.length(); i++) {
                                    hashSet.add((String) jSONArray2.get(i));
                                }
                                bVar.m3708a(hashSet);
                                this.f990b.add(bVar);
                            }
                            return -1;
                        }
                        jSONArray2 = jSONObject2.getJSONArray(str2);
                        hashSet = new HashSet(16);
                        if (jSONArray2 == null) {
                            while (i < jSONArray2.length()) {
                            }
                            bVar.m3708a(hashSet);
                            this.f990b.add(bVar);
                        }
                        return -1;
                    }
                }
                return 0;
            }
            jSONArray = jSONObject.getJSONArray(str3);
            if (jSONArray != null) {
            }
        } catch (JSONException e) {
            Logger.m3896w("AbstractLocalManager", "parse countrygroup failed maybe json style is wrong.", e);
            return -1;
        }
    }

    /* renamed from: d */
    public int m3852d(String str) {
        try {
            m3855a(new JSONObject(str).getJSONArray("services"));
            return 0;
        } catch (JSONException e) {
            Logger.m3896w("AbstractLocalManager", "parse 2.0 services failed maybe because of json style.please check!", e);
            return -1;
        }
    }

    /* renamed from: e */
    public abstract int mo3840e(String str);
}
