package com.huawei.hms.framework.network.grs.p013c;

import android.content.Context;
import android.os.SystemClock;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.local.model.C0896a;
import com.huawei.hms.framework.network.grs.p011a.C0854a;
import com.huawei.hms.framework.network.grs.p012b.C0859b;
import com.huawei.hms.framework.network.grs.p013c.p014a.C0866a;
import com.huawei.hms.framework.network.grs.p013c.p015b.C0871c;
import com.huawei.hms.framework.network.grs.p016d.C0891d;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.json.JSONArray;

/* compiled from: TbsSdkJava */
/* renamed from: com.huawei.hms.framework.network.grs.c.d */
/* loaded from: classes.dex */
public class C0873d implements AbstractC0865a {

    /* renamed from: a */
    private static final String f1023a;

    /* renamed from: b */
    private GrsBaseInfo f1024b;

    /* renamed from: c */
    private Context f1025c;

    /* renamed from: d */
    private C0854a f1026d;

    /* renamed from: e */
    private C0874e f1027e;

    /* renamed from: k */
    private C0871c f1033k;

    /* renamed from: f */
    private ArrayList<Future<C0874e>> f1028f = new ArrayList<>();

    /* renamed from: g */
    private ArrayList<C0874e> f1029g = new ArrayList<>();

    /* renamed from: h */
    private JSONArray f1030h = new JSONArray();

    /* renamed from: i */
    private ArrayList<String> f1031i = new ArrayList<>();

    /* renamed from: j */
    private ArrayList<String> f1032j = new ArrayList<>();

    /* renamed from: l */
    private long f1034l = 1;

    public C0873d(GrsBaseInfo grsBaseInfo, Context context, C0854a aVar) {
        this.f1024b = grsBaseInfo;
        this.f1025c = context;
        this.f1026d = aVar;
        m3812b();
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x0087 A[LOOP:0: B:3:0x0004->B:33:0x0087, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x007f A[SYNTHETIC] */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private C0874e m3813a(ExecutorService executorService, ArrayList<String> arrayList, String str) {
        ExecutionException e;
        InterruptedException e2;
        C0874e eVar = null;
        int i = 0;
        while (true) {
            if (i >= arrayList.size()) {
                break;
            }
            String str2 = arrayList.get(i);
            boolean z = true;
            if (!TextUtils.isEmpty(str2)) {
                Future<C0874e> submit = executorService.submit(new C0867b(str2, i, this, this.f1025c, str, this.f1024b).m3830f());
                this.f1028f.add(submit);
                try {
                    eVar = submit.get(this.f1034l, TimeUnit.SECONDS);
                } catch (InterruptedException e3) {
                    e2 = e3;
                    eVar = eVar;
                } catch (CancellationException unused) {
                    eVar = eVar;
                } catch (ExecutionException e4) {
                    e = e4;
                    eVar = eVar;
                } catch (TimeoutException unused2) {
                    eVar = eVar;
                }
                if (eVar != null) {
                    try {
                    } catch (InterruptedException e5) {
                        e2 = e5;
                        Logger.m3896w(f1023a, "the current thread was interrupted while waiting", e2);
                        if (z) {
                        }
                    } catch (CancellationException unused3) {
                        Logger.m3901i(f1023a, "{requestServer} the computation was cancelled");
                        if (z) {
                        }
                    } catch (ExecutionException e6) {
                        e = e6;
                        Logger.m3896w(f1023a, "the computation threw an ExecutionException", e);
                        z = false;
                        if (z) {
                        }
                    } catch (TimeoutException unused4) {
                        Logger.m3897w(f1023a, "the wait timed out");
                        z = false;
                        if (z) {
                        }
                    }
                    if (eVar.m3783m()) {
                        Logger.m3901i(f1023a, "grs request return body is not null and is OK.");
                        if (z) {
                            Logger.m3899v(f1023a, "needBreak is true so need break current circulation");
                            break;
                        }
                        i++;
                    }
                }
                z = false;
                if (z) {
                }
            }
            z = false;
            if (z) {
            }
        }
        return m3811b(eVar);
    }

    /* renamed from: b */
    private C0874e m3811b(C0874e eVar) {
        String str;
        String str2;
        Throwable e;
        int size = this.f1028f.size();
        for (int i = 0; i < size && (eVar == null || !eVar.m3783m()); i++) {
            try {
                eVar = this.f1028f.get(i).get(40000, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e2) {
                e = e2;
                str2 = f1023a;
                str = "{checkResponse} when check result, find InterruptedException, check others";
                Logger.m3896w(str2, str, e);
            } catch (CancellationException unused) {
                Logger.m3901i(f1023a, "{checkResponse} when check result, find CancellationException, check others");
            } catch (ExecutionException e3) {
                e = e3;
                str2 = f1023a;
                str = "{checkResponse} when check result, find ExecutionException, check others";
                Logger.m3896w(str2, str, e);
            } catch (TimeoutException unused2) {
                Logger.m3897w(f1023a, "{checkResponse} when check result, find TimeoutException, cancel current request task");
                if (!this.f1028f.get(i).isCancelled()) {
                    this.f1028f.get(i).cancel(true);
                }
            }
        }
        return eVar;
    }

    /* renamed from: b */
    public C0874e m3810b(ExecutorService executorService, String str) {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        C0874e a = m3813a(executorService, this.f1032j, str);
        int b = a == null ? 0 : a.m3803b();
        Logger.m3898v(f1023a, "use 2.0 interface return http's code isï¼š{%s}", Integer.valueOf(b));
        if (b == 404 || b == 401) {
            if (!TextUtils.isEmpty(m3809c()) || !TextUtils.isEmpty(this.f1024b.getAppName())) {
                this.f1028f.clear();
                Logger.m3901i(f1023a, "this env has not deploy new interface,so use old interface.");
                a = m3813a(executorService, this.f1031i, str);
            } else {
                Logger.m3901i(f1023a, "request grs server use 1.0 API must set appName,please check.");
                return null;
            }
        }
        C0876g.m3777a(this.f1029g, SystemClock.elapsedRealtime() - elapsedRealtime, this.f1030h, this.f1025c);
        return a;
    }

    /* renamed from: b */
    private void m3812b() {
        C0871c a = C0866a.m3837a(this.f1025c);
        if (a == null) {
            Logger.m3897w(f1023a, "g*s***_se****er_conf*** maybe has a big error");
            return;
        }
        m3817a(a);
        List<String> a2 = a.m3826a();
        if (a2 == null || a2.size() <= 0) {
            Logger.m3899v(f1023a, "maybe grs_base_url config with [],please check.");
        } else if (a2.size() <= 10) {
            String c = a.m3820c();
            String b = a.m3822b();
            if (a2.size() > 0) {
                for (String str : a2) {
                    if (!str.startsWith("https://")) {
                        Logger.m3897w(f1023a, "grs server just support https scheme url,please check.");
                    } else {
                        StringBuilder sb = new StringBuilder();
                        sb.append(str);
                        Locale locale = Locale.ROOT;
                        Object[] objArr = new Object[1];
                        objArr[0] = TextUtils.isEmpty(m3809c()) ? this.f1024b.getAppName() : m3809c();
                        sb.append(String.format(locale, c, objArr));
                        String grsReqParamJoint = this.f1024b.getGrsReqParamJoint(false, false, "1.0", this.f1025c);
                        if (!TextUtils.isEmpty(grsReqParamJoint)) {
                            sb.append("?");
                            sb.append(grsReqParamJoint);
                        }
                        this.f1031i.add(sb.toString());
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(str);
                        sb2.append(b);
                        String grsReqParamJoint2 = this.f1024b.getGrsReqParamJoint(false, false, m3809c(), this.f1025c);
                        if (!TextUtils.isEmpty(grsReqParamJoint2)) {
                            sb2.append("?");
                            sb2.append(grsReqParamJoint2);
                        }
                        this.f1032j.add(sb2.toString());
                    }
                }
            }
            Logger.m3898v(f1023a, "request to GRS server url is{%s} and {%s}", this.f1031i, this.f1032j);
        } else {
            throw new IllegalArgumentException("grs_base_url's count is larger than MAX value 10");
        }
    }

    /* renamed from: c */
    private String m3809c() {
        C0896a a = C0859b.m3844a(this.f1025c.getPackageName(), this.f1024b).m3849a();
        if (a == null) {
            return "";
        }
        String a2 = a.m3716a();
        Logger.m3898v(f1023a, "get appName from local assets is{%s}", a2);
        return a2;
    }

    /* renamed from: a */
    public C0871c m3818a() {
        return this.f1033k;
    }

    /* renamed from: a */
    public C0874e m3814a(ExecutorService executorService, String str) {
        String str2;
        Throwable e;
        String str3;
        if (this.f1031i == null || this.f1032j == null) {
            return null;
        }
        try {
            C0871c a = m3818a();
            return (C0874e) executorService.submit(new CallableC0872c(this, executorService, str)).get((long) (a != null ? a.m3819d() : 10), TimeUnit.SECONDS);
        } catch (InterruptedException e2) {
            e = e2;
            str2 = f1023a;
            str3 = "{submitExcutorTaskWithTimeout} the current thread was interrupted while waiting";
            Logger.m3896w(str2, str3, e);
            return null;
        } catch (CancellationException unused) {
            Logger.m3901i(f1023a, "{submitExcutorTaskWithTimeout} the computation was cancelled");
            return null;
        } catch (ExecutionException e3) {
            e = e3;
            str2 = f1023a;
            str3 = "{submitExcutorTaskWithTimeout} the computation threw an ExecutionException";
            Logger.m3896w(str2, str3, e);
            return null;
        } catch (TimeoutException unused2) {
            Logger.m3897w(f1023a, "{submitExcutorTaskWithTimeout} the wait timed out");
            return null;
        } catch (Exception e4) {
            e = e4;
            str2 = f1023a;
            str3 = "{submitExcutorTaskWithTimeout} catch Exception";
            Logger.m3896w(str2, str3, e);
            return null;
        }
    }

    /* renamed from: a */
    public void m3817a(C0871c cVar) {
        this.f1033k = cVar;
    }

    @Override // com.huawei.hms.framework.network.grs.p013c.AbstractC0865a
    /* renamed from: a */
    public synchronized void mo3815a(C0874e eVar) {
        this.f1029g.add(eVar);
        C0874e eVar2 = this.f1027e;
        if (eVar2 == null || !eVar2.m3783m()) {
            if (eVar.m3784l()) {
                Logger.m3901i(f1023a, "GRS server open 503 limiting strategy.");
                C0891d.m3721a(this.f1024b.getGrsParasKey(false, true, this.f1025c), new C0891d.C0892a(eVar.m3786j(), SystemClock.elapsedRealtime()));
            } else if (!eVar.m3783m()) {
                Logger.m3899v(f1023a, "grsResponseResult has exception so need return");
            } else {
                this.f1027e = eVar;
                this.f1026d.m3879a(this.f1024b, this.f1027e, this.f1025c);
                for (int i = 0; i < this.f1028f.size(); i++) {
                    if (!this.f1031i.get(i).equals(eVar.m3785k()) && !this.f1032j.get(i).equals(eVar.m3785k()) && !this.f1028f.get(i).isCancelled()) {
                        Logger.m3901i(f1023a, "future cancel");
                        this.f1028f.get(i).cancel(true);
                    }
                }
            }
        } else {
            Logger.m3899v(f1023a, "grsResponseResult is ok");
        }
    }
}
