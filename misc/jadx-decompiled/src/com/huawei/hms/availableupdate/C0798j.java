package com.huawei.hms.availableupdate;

import android.content.Context;
import com.huawei.hms.support.log.HMSLog;
import com.huawei.hms.utils.IOUtils;
import com.huawei.secure.android.common.ssl.SecureSSLSocketFactory;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import javax.net.ssl.HttpsURLConnection;

/* compiled from: TbsSdkJava */
/* renamed from: com.huawei.hms.availableupdate.j */
/* loaded from: classes.dex */
public class C0798j implements AbstractC0799k {

    /* renamed from: a */
    public HttpURLConnection f917a;

    /* renamed from: b */
    public volatile int f918b = -1;

    @Override // com.huawei.hms.availableupdate.AbstractC0799k
    /* renamed from: a */
    public void mo4019a() {
        this.f918b = 1;
    }

    @Override // com.huawei.hms.availableupdate.AbstractC0799k
    public void close() {
        this.f918b = -1;
        HttpURLConnection httpURLConnection = this.f917a;
        if (httpURLConnection != null) {
            httpURLConnection.disconnect();
        }
    }

    @Override // com.huawei.hms.availableupdate.AbstractC0799k
    /* renamed from: a */
    public int mo4018a(String str, OutputStream outputStream, int i, int i2, Context context) throws IOException, C0797i {
        InputStream inputStream = null;
        try {
            m4020a(str, context);
            this.f917a.setRequestMethod("GET");
            if (i > 0) {
                HttpURLConnection httpURLConnection = this.f917a;
                httpURLConnection.addRequestProperty("Range", "bytes=" + i + "-" + i2);
            }
            int responseCode = this.f917a.getResponseCode();
            if ((i > 0 && responseCode == 206) || (i <= 0 && responseCode == 200)) {
                inputStream = this.f917a.getInputStream();
                m4021a(new BufferedInputStream(inputStream, 4096), outputStream);
                outputStream.flush();
            }
            return responseCode;
        } finally {
            IOUtils.closeQuietly(inputStream);
        }
    }

    /* renamed from: a */
    public final void m4020a(String str, Context context) throws IOException {
        if (this.f918b == 0) {
            HMSLog.m3177e("HttpRequestHelper", "Not allowed to repeat open http(s) connection.");
        }
        this.f917a = (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(new URL(str).openConnection());
        if (this.f917a instanceof HttpsURLConnection) {
            try {
                SecureSSLSocketFactory instance = SecureSSLSocketFactory.getInstance(context);
                if (instance != null) {
                    ((HttpsURLConnection) this.f917a).setSSLSocketFactory(instance);
                }
                ((HttpsURLConnection) this.f917a).setSSLSocketFactory(instance);
            } catch (IOException | IllegalAccessException | IllegalArgumentException | KeyManagementException | KeyStoreException | NoSuchAlgorithmException | CertificateException e) {
                HMSLog.m3177e("HttpRequestHelper", "Failed to new TLSSocketFactory instance." + e.getMessage());
                throw new IOException("Failed to create SSLSocketFactory.");
            }
        }
        this.f917a.setConnectTimeout(30000);
        this.f917a.setReadTimeout(30000);
        this.f917a.setDoInput(true);
        this.f917a.setDoOutput(true);
        this.f917a.setUseCaches(false);
        this.f917a.setInstanceFollowRedirects(true);
        this.f918b = 0;
    }

    /* renamed from: a */
    public final void m4021a(InputStream inputStream, OutputStream outputStream) throws IOException, C0797i {
        byte[] bArr = new byte[4096];
        do {
            int read = inputStream.read(bArr);
            if (-1 != read) {
                outputStream.write(bArr, 0, read);
            } else {
                return;
            }
        } while (this.f918b != 1);
        throw new C0797i("HTTP(s) request was canceled.");
    }
}
