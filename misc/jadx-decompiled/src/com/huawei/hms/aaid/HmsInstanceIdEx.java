package com.huawei.hms.aaid;

import android.app.Activity;
import android.content.Context;
import com.huawei.hmf.tasks.Task;
import com.huawei.hmf.tasks.TaskCompletionSource;
import com.huawei.hms.aaid.constant.ErrorEnum;
import com.huawei.hms.aaid.entity.TokenReq;
import com.huawei.hms.aaid.entity.TokenResult;
import com.huawei.hms.aaid.plugin.ProxyCenter;
import com.huawei.hms.aaid.task.PushClientBuilder;
import com.huawei.hms.aaid.utils.PushPreferences;
import com.huawei.hms.api.Api;
import com.huawei.hms.api.HuaweiApiAvailability;
import com.huawei.hms.common.ApiException;
import com.huawei.hms.common.HuaweiApi;
import com.huawei.hms.common.internal.AbstractClientBuilder;
import com.huawei.hms.common.internal.Preconditions;
import com.huawei.hms.opendevice.C0984l;
import com.huawei.hms.opendevice.C0989o;
import com.huawei.hms.opendevice.C0991q;
import com.huawei.hms.support.log.HMSLog;
import java.util.UUID;

/* compiled from: TbsSdkJava */
@Deprecated
/* loaded from: classes.dex */
public class HmsInstanceIdEx {
    public static final String TAG = "HmsInstanceIdEx";

    /* renamed from: a */
    public Context f759a;

    /* renamed from: b */
    public PushPreferences f760b;

    /* renamed from: c */
    public HuaweiApi<Api.ApiOptions.NoOptions> f761c;

    public HmsInstanceIdEx(Context context) {
        this.f759a = null;
        this.f760b = null;
        this.f759a = context;
        this.f760b = new PushPreferences(context, "aaid");
        Api api = new Api(HuaweiApiAvailability.HMS_API_NAME_PUSH);
        if (context instanceof Activity) {
            this.f761c = new HuaweiApi<>((Activity) context, (Api<Api.ApiOptions>) api, (Api.ApiOptions) null, (AbstractClientBuilder) new PushClientBuilder());
        } else {
            this.f761c = new HuaweiApi<>(context, api, (Api.ApiOptions) null, new PushClientBuilder());
        }
        this.f761c.setKitSdkVersion(50004300);
    }

    public static HmsInstanceIdEx getInstance(Context context) {
        Preconditions.checkNotNull(context);
        return new HmsInstanceIdEx(context);
    }

    /* renamed from: a */
    public final String m4160a(String str) {
        return "creationTime" + str;
    }

    public void deleteAAID(String str) throws ApiException {
        if (str != null) {
            try {
                if (this.f760b.containsKey(str)) {
                    this.f760b.removeKey(str);
                    this.f760b.removeKey(m4160a(str));
                }
            } catch (RuntimeException unused) {
                throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
            } catch (Exception unused2) {
                throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
            }
        } else {
            throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
        }
    }

    public String getAAId(String str) throws ApiException {
        if (str != null) {
            try {
                if (this.f760b.containsKey(str)) {
                    return this.f760b.getString(str);
                }
                String uuid = UUID.randomUUID().toString();
                this.f760b.saveString(str, uuid);
                this.f760b.saveLong(m4160a(str), Long.valueOf(System.currentTimeMillis()));
                return uuid;
            } catch (RuntimeException unused) {
                throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
            } catch (Exception unused2) {
                throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
            }
        } else {
            throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
        }
    }

    public long getCreationTime(String str) throws ApiException {
        if (str != null) {
            try {
                if (!this.f760b.containsKey(m4160a(str))) {
                    getAAId(str);
                }
                return this.f760b.getLong(m4160a(str));
            } catch (RuntimeException unused) {
                throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
            } catch (Exception unused2) {
                throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
            }
        } else {
            throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
        }
    }

    public Task<TokenResult> getToken() {
        if (ProxyCenter.getProxy() != null) {
            try {
                HMSLog.m3175i(TAG, "use proxy get token, please check HmsMessageService.onNewToken receive result.");
                ProxyCenter.getProxy().getToken(this.f759a, null, null);
                TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
                taskCompletionSource.setResult(new TokenResult());
                return taskCompletionSource.getTask();
            } catch (ApiException e) {
                return m4161a(e);
            } catch (Exception unused) {
                return m4161a(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
            }
        } else {
            String a = C0991q.m3236a(this.f759a, "push.gettoken");
            try {
                TokenReq b = C0989o.m3244b(this.f759a, null, null);
                b.setAaid(HmsInstanceId.getInstance(this.f759a).getId());
                return this.f761c.doWrite(new C0984l("push.gettoken", b, this.f759a, a));
            } catch (RuntimeException unused2) {
                C0991q.m3233a(this.f759a, "push.gettoken", a, ErrorEnum.ERROR_INTERNAL_ERROR);
                return m4161a(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
            } catch (Exception unused3) {
                C0991q.m3233a(this.f759a, "push.gettoken", a, ErrorEnum.ERROR_INTERNAL_ERROR);
                return m4161a(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
            }
        }
    }

    /* renamed from: a */
    public final Task<TokenResult> m4161a(Exception exc) {
        TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        taskCompletionSource.setException(exc);
        return taskCompletionSource.getTask();
    }
}
