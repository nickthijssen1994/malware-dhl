package com.huawei.hms.hatool;

import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.util.zip.Deflater;

/* compiled from: TbsSdkJava */
/* renamed from: com.huawei.hms.hatool.r0 */
/* loaded from: classes.dex */
public final class C0953r0 {
    /* renamed from: a */
    public static String m3386a(File file) {
        Throwable th;
        FileInputStream fileInputStream;
        String str;
        String str2;
        FileInputStream fileInputStream2;
        try {
            fileInputStream = null;
            try {
                fileInputStream2 = new FileInputStream(file);
            } catch (FileNotFoundException unused) {
            } catch (IOException unused2) {
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            C0947o0 o0Var = new C0947o0(1024);
            byte[] bArr = new byte[1024];
            while (true) {
                int read = fileInputStream2.read(bArr);
                if (read == -1) {
                    break;
                }
                o0Var.m3418a(bArr, read);
            }
            if (o0Var.m3417b() == 0) {
                m3387a((Closeable) fileInputStream2);
                return "";
            }
            String str3 = new String(o0Var.m3419a(), "UTF-8");
            m3387a((Closeable) fileInputStream2);
            return str3;
        } catch (FileNotFoundException unused3) {
            fileInputStream = fileInputStream2;
            str = "hmsSdk";
            str2 = "getInfoFromFile(): No files need to be read";
            C0968y.m3313f(str, str2);
            m3387a((Closeable) fileInputStream);
            return "";
        } catch (IOException unused4) {
            fileInputStream = fileInputStream2;
            str = "hmsSdk";
            str2 = "getInfoFromFile(): stream.read or new string exception";
            C0968y.m3313f(str, str2);
            m3387a((Closeable) fileInputStream);
            return "";
        } catch (Throwable th3) {
            th = th3;
            m3387a((Closeable) fileInputStream2);
            throw th;
        }
    }

    /* renamed from: a */
    public static String m3384a(InputStream inputStream) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            byte[] bArr = new byte[1024];
            while (true) {
                int read = inputStream.read(bArr);
                if (read == -1) {
                    return byteArrayOutputStream.toString("UTF-8");
                }
                byteArrayOutputStream.write(bArr, 0, read);
            }
        } finally {
            m3387a((Closeable) byteArrayOutputStream);
        }
    }

    /* renamed from: a */
    public static void m3387a(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException unused) {
                C0968y.m3313f("hmsSdk", "closeQuietly(): Exception when closing the closeable!");
            }
        }
    }

    /* renamed from: a */
    public static void m3385a(File file, String str) {
        Throwable th;
        FileOutputStream fileOutputStream;
        FileOutputStream fileOutputStream2;
        String str2;
        String str3;
        try {
            fileOutputStream = null;
        } catch (Throwable th2) {
            th = th2;
            fileOutputStream = fileOutputStream2;
        }
        try {
            fileOutputStream2 = new FileOutputStream(file);
            try {
                fileOutputStream2.write(str.getBytes("UTF-8"));
                fileOutputStream2.flush();
            } catch (FileNotFoundException unused) {
                str2 = "hmsSdk";
                str3 = "saveInfoToFile(): No files need to be read";
                C0968y.m3313f(str2, str3);
                m3387a((Closeable) fileOutputStream2);
            } catch (IOException unused2) {
                str2 = "hmsSdk";
                str3 = "saveInfoToFile(): io exc from write info to file!";
                C0968y.m3313f(str2, str3);
                m3387a((Closeable) fileOutputStream2);
            }
        } catch (FileNotFoundException unused3) {
            fileOutputStream2 = null;
        } catch (IOException unused4) {
            fileOutputStream2 = null;
        } catch (Throwable th3) {
            th = th3;
            m3387a((Closeable) fileOutputStream);
            throw th;
        }
        m3387a((Closeable) fileOutputStream2);
    }

    /* renamed from: a */
    public static void m3383a(OutputStream outputStream) {
        if (outputStream != null) {
            try {
                outputStream.close();
            } catch (IOException unused) {
                C0968y.m3313f("hmsSdk", "closeStream(): Exception: close OutputStream error!");
            }
        }
    }

    /* renamed from: a */
    public static void m3382a(HttpURLConnection httpURLConnection) {
        try {
            httpURLConnection.getInputStream().close();
        } catch (Exception unused) {
            C0968y.m3313f("hmsSdk", "closeQuietly(): Exception when connHttp.getInputStream()!,There may be no network, or no INTERNET permission");
        }
        httpURLConnection.disconnect();
        C0968y.m3323a("hmsSdk", " connHttp disconnect");
    }

    /* renamed from: a */
    public static byte[] m3381a(byte[] bArr) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        Deflater deflater = new Deflater();
        deflater.setInput(bArr);
        deflater.finish();
        byte[] bArr2 = new byte[1024];
        while (!deflater.finished()) {
            byteArrayOutputStream.write(bArr2, 0, deflater.deflate(bArr2));
        }
        byte[] byteArray = byteArrayOutputStream.toByteArray();
        deflater.end();
        m3383a((OutputStream) byteArrayOutputStream);
        return byteArray;
    }
}
