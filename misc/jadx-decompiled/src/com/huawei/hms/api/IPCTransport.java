package com.huawei.hms.api;

import android.os.Bundle;
import com.huawei.hms.core.aidl.AbstractC0840c;
import com.huawei.hms.core.aidl.C0837a;
import com.huawei.hms.core.aidl.C0838b;
import com.huawei.hms.core.aidl.C0846e;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.core.aidl.RequestHeader;
import com.huawei.hms.support.api.client.AidlApiClient;
import com.huawei.hms.support.api.client.ApiClient;
import com.huawei.hms.support.api.entity.core.CommonCode;
import com.huawei.hms.support.api.transport.DatagramTransport;
import com.huawei.hms.support.log.HMSLog;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class IPCTransport implements DatagramTransport {

    /* renamed from: a */
    private final String f856a;

    /* renamed from: b */
    private final IMessageEntity f857b;

    /* renamed from: c */
    private final Class<? extends IMessageEntity> f858c;

    /* renamed from: d */
    private int f859d;

    public IPCTransport(String str, IMessageEntity iMessageEntity, Class<? extends IMessageEntity> cls) {
        this.f856a = str;
        this.f857b = iMessageEntity;
        this.f858c = cls;
    }

    /* renamed from: a */
    private int m4089a(ApiClient apiClient, AbstractC0840c cVar) {
        if (apiClient instanceof HuaweiApiClientImpl) {
            C0838b bVar = new C0838b(this.f856a, ProtocolNegotiate.getInstance().getVersion());
            C0846e a = C0837a.m3949a(bVar.m3943c());
            bVar.m3947a(a.m3938a(this.f857b, new Bundle()));
            RequestHeader requestHeader = new RequestHeader();
            requestHeader.setAppID(apiClient.getAppID());
            requestHeader.setPackageName(apiClient.getPackageName());
            requestHeader.setSdkVersion(50005300);
            requestHeader.setApiNameList(((HuaweiApiClientImpl) apiClient).getApiNameList());
            requestHeader.setSessionId(apiClient.getSessionId());
            requestHeader.setApiLevel(this.f859d);
            bVar.f961b = a.m3938a(requestHeader, new Bundle());
            try {
                HuaweiApiClientImpl huaweiApiClientImpl = (HuaweiApiClientImpl) apiClient;
                if (huaweiApiClientImpl.getService() == null) {
                    HMSLog.m3177e("IPCTransport", "HuaweiApiClient is not binded to service yet.");
                    return CommonCode.ErrorCode.INTERNAL_ERROR;
                }
                huaweiApiClientImpl.getService().mo3940a(bVar, cVar);
                return 0;
            } catch (Exception e) {
                HMSLog.m3177e("IPCTransport", "sync call ex:" + e);
                return CommonCode.ErrorCode.INTERNAL_ERROR;
            }
        } else {
            if (apiClient instanceof AidlApiClient) {
                AidlApiClient aidlApiClient = (AidlApiClient) apiClient;
                C0838b bVar2 = new C0838b(this.f856a, ProtocolNegotiate.getInstance().getVersion());
                bVar2.m3947a(C0837a.m3949a(bVar2.m3943c()).m3938a(this.f857b, new Bundle()));
                try {
                    aidlApiClient.getService().mo3940a(bVar2, cVar);
                    return 0;
                } catch (Exception e2) {
                    HMSLog.m3177e("IPCTransport", "sync call ex:" + e2);
                }
            }
            return CommonCode.ErrorCode.INTERNAL_ERROR;
        }
    }

    @Override // com.huawei.hms.support.api.transport.DatagramTransport
    public final void post(ApiClient apiClient, DatagramTransport.CallBack callBack) {
        send(apiClient, callBack);
    }

    @Override // com.huawei.hms.support.api.transport.DatagramTransport
    public final void send(ApiClient apiClient, DatagramTransport.CallBack callBack) {
        int a = m4089a(apiClient, new IPCCallback(this.f858c, callBack));
        if (a != 0) {
            callBack.onCallback(a, null);
        }
    }

    public IPCTransport(String str, IMessageEntity iMessageEntity, Class<? extends IMessageEntity> cls, int i) {
        this.f856a = str;
        this.f857b = iMessageEntity;
        this.f858c = cls;
        this.f859d = i;
    }
}
