package com.facebook.react.animated;

import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import javax.annotation.Nullable;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
class InterpolationAnimatedNode extends ValueAnimatedNode {
    public static final String EXTRAPOLATE_TYPE_CLAMP = "clamp";
    public static final String EXTRAPOLATE_TYPE_EXTEND = "extend";
    public static final String EXTRAPOLATE_TYPE_IDENTITY = "identity";
    private final String mExtrapolateLeft;
    private final String mExtrapolateRight;
    private final double[] mInputRange;
    private final double[] mOutputRange;
    @Nullable
    private ValueAnimatedNode mParent;

    private static double[] fromDoubleArray(ReadableArray readableArray) {
        double[] dArr = new double[readableArray.size()];
        for (int i = 0; i < dArr.length; i++) {
            dArr[i] = readableArray.getDouble(i);
        }
        return dArr;
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x008b, code lost:
        if (r22.equals(com.facebook.react.animated.InterpolationAnimatedNode.EXTRAPOLATE_TYPE_EXTEND) != false) goto L_0x008f;
     */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0060 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0092  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00b0 A[RETURN] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static double interpolate(double d, double d2, double d3, double d4, double d5, String str, String str2) {
        double d6;
        char c;
        char c2 = 2;
        if (d < d2) {
            int hashCode = str.hashCode();
            if (hashCode == -1289044198) {
                if (str.equals(EXTRAPOLATE_TYPE_EXTEND)) {
                    c = 2;
                    switch (c) {
                    }
                    if (d6 > d3) {
                    }
                    return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
                }
                c = 65535;
                switch (c) {
                }
                if (d6 > d3) {
                }
                return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
            } else if (hashCode != -135761730) {
                if (hashCode == 94742715 && str.equals(EXTRAPOLATE_TYPE_CLAMP)) {
                    c = 1;
                    switch (c) {
                        case 0:
                            return d;
                        case 1:
                            d6 = d2;
                            break;
                        case 2:
                            break;
                        default:
                            throw new JSApplicationIllegalArgumentException("Invalid extrapolation type " + str + "for left extrapolation");
                    }
                    if (d6 > d3) {
                        int hashCode2 = str2.hashCode();
                        if (hashCode2 != -1289044198) {
                            if (hashCode2 != -135761730) {
                                if (hashCode2 == 94742715 && str2.equals(EXTRAPOLATE_TYPE_CLAMP)) {
                                    c2 = 1;
                                    switch (c2) {
                                        case 0:
                                            return d6;
                                        case 1:
                                            d6 = d3;
                                            break;
                                        case 2:
                                            break;
                                        default:
                                            throw new JSApplicationIllegalArgumentException("Invalid extrapolation type " + str2 + "for right extrapolation");
                                    }
                                }
                                c2 = 65535;
                                switch (c2) {
                                }
                            } else {
                                if (str2.equals(EXTRAPOLATE_TYPE_IDENTITY)) {
                                    c2 = 0;
                                    switch (c2) {
                                    }
                                }
                                c2 = 65535;
                                switch (c2) {
                                }
                            }
                        }
                    }
                    return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
                }
                c = 65535;
                switch (c) {
                }
                if (d6 > d3) {
                }
                return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
            } else {
                if (str.equals(EXTRAPOLATE_TYPE_IDENTITY)) {
                    c = 0;
                    switch (c) {
                    }
                    if (d6 > d3) {
                    }
                    return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
                }
                c = 65535;
                switch (c) {
                }
                if (d6 > d3) {
                }
                return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
            }
        }
        d6 = d;
        if (d6 > d3) {
        }
        return d4 + (((d5 - d4) * (d6 - d2)) / (d3 - d2));
    }

    static double interpolate(double d, double[] dArr, double[] dArr2, String str, String str2) {
        int findRangeIndex = findRangeIndex(d, dArr);
        int i = findRangeIndex + 1;
        return interpolate(d, dArr[findRangeIndex], dArr[i], dArr2[findRangeIndex], dArr2[i], str, str2);
    }

    private static int findRangeIndex(double d, double[] dArr) {
        int i = 1;
        while (i < dArr.length - 1 && dArr[i] < d) {
            i++;
        }
        return i - 1;
    }

    public InterpolationAnimatedNode(ReadableMap readableMap) {
        this.mInputRange = fromDoubleArray(readableMap.getArray("inputRange"));
        this.mOutputRange = fromDoubleArray(readableMap.getArray("outputRange"));
        this.mExtrapolateLeft = readableMap.getString("extrapolateLeft");
        this.mExtrapolateRight = readableMap.getString("extrapolateRight");
    }

    @Override // com.facebook.react.animated.AnimatedNode
    public void onAttachedToNode(AnimatedNode animatedNode) {
        if (this.mParent != null) {
            throw new IllegalStateException("Parent already attached");
        } else if (animatedNode instanceof ValueAnimatedNode) {
            this.mParent = (ValueAnimatedNode) animatedNode;
        } else {
            throw new IllegalArgumentException("Parent is of an invalid type");
        }
    }

    @Override // com.facebook.react.animated.AnimatedNode
    public void onDetachedFromNode(AnimatedNode animatedNode) {
        if (animatedNode == this.mParent) {
            this.mParent = null;
            return;
        }
        throw new IllegalArgumentException("Invalid parent node provided");
    }

    @Override // com.facebook.react.animated.AnimatedNode
    public void update() {
        ValueAnimatedNode valueAnimatedNode = this.mParent;
        if (valueAnimatedNode != null) {
            this.mValue = interpolate(valueAnimatedNode.getValue(), this.mInputRange, this.mOutputRange, this.mExtrapolateLeft, this.mExtrapolateRight);
        }
    }
}
