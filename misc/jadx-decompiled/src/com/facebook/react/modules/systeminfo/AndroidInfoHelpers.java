package com.facebook.react.modules.systeminfo;

import android.os.Build;
import com.facebook.common.logging.FLog;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.Locale;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class AndroidInfoHelpers {
    private static final int DEBUG_SERVER_HOST_PORT = 8081;
    public static final String DEVICE_LOCALHOST = "localhost";
    public static final String EMULATOR_LOCALHOST = "10.0.2.2";
    public static final String GENYMOTION_LOCALHOST = "10.0.3.2";
    private static final int INSPECTOR_PROXY_PORT = 8082;
    public static final String METRO_HOST_PROP_NAME = "metro.host";
    private static final String TAG = "AndroidInfoHelpers";
    private static String metroHostPropValue;

    private static boolean isRunningOnGenymotion() {
        return Build.FINGERPRINT.contains("vbox");
    }

    private static boolean isRunningOnStockEmulator() {
        return Build.FINGERPRINT.contains("generic");
    }

    public static String getServerHost() {
        return getServerIpAddress(DEBUG_SERVER_HOST_PORT);
    }

    public static String getInspectorProxyHost() {
        return getServerIpAddress(INSPECTOR_PROXY_PORT);
    }

    public static String getFriendlyDeviceName() {
        if (isRunningOnGenymotion()) {
            return Build.MODEL;
        }
        return Build.MODEL + " - " + Build.VERSION.RELEASE + " - API " + Build.VERSION.SDK_INT;
    }

    private static String getServerIpAddress(int i) {
        String metroHostPropValue2 = getMetroHostPropValue();
        if (metroHostPropValue2.equals("")) {
            if (isRunningOnGenymotion()) {
                metroHostPropValue2 = GENYMOTION_LOCALHOST;
            } else {
                metroHostPropValue2 = isRunningOnStockEmulator() ? EMULATOR_LOCALHOST : DEVICE_LOCALHOST;
            }
        }
        return String.format(Locale.US, "%s:%d", metroHostPropValue2, Integer.valueOf(i));
    }

    /* JADX WARN: Removed duplicated region for block: B:44:0x0086 A[Catch: all -> 0x008a, TRY_ENTER, TryCatch #5 {, blocks: (B:4:0x0003, B:6:0x0007, B:17:0x0041, B:19:0x0046, B:34:0x0072, B:36:0x0077, B:37:0x007a, B:42:0x0081, B:44:0x0086, B:45:0x0089), top: B:51:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0081 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static synchronized String getMetroHostPropValue() {
        Process process;
        Exception e;
        synchronized (AndroidInfoHelpers.class) {
            if (metroHostPropValue != null) {
                return metroHostPropValue;
            }
            BufferedReader bufferedReader = null;
            try {
                Process exec = Runtime.getRuntime().exec(new String[]{"/system/bin/getprop", METRO_HOST_PROP_NAME});
                try {
                    BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(exec.getInputStream(), Charset.forName("UTF-8")));
                    String str = "";
                    while (true) {
                        try {
                            String readLine = bufferedReader2.readLine();
                            if (readLine == null) {
                                break;
                            }
                            str = readLine;
                        } catch (Exception e2) {
                            e = e2;
                            bufferedReader = bufferedReader2;
                            process = exec;
                            try {
                                FLog.m4291w(TAG, "Failed to query for metro.host prop:", e);
                                metroHostPropValue = "";
                                if (bufferedReader != null) {
                                    try {
                                        bufferedReader.close();
                                    } catch (Exception unused) {
                                    }
                                }
                                if (process != null) {
                                    process.destroy();
                                }
                                return metroHostPropValue;
                            } catch (Throwable th) {
                                th = th;
                                if (bufferedReader != null) {
                                    try {
                                        bufferedReader.close();
                                    } catch (Exception unused2) {
                                    }
                                }
                                if (process != null) {
                                    process.destroy();
                                }
                                throw th;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            bufferedReader = bufferedReader2;
                            process = exec;
                            if (bufferedReader != null) {
                            }
                            if (process != null) {
                            }
                            throw th;
                        }
                    }
                    metroHostPropValue = str;
                    try {
                        bufferedReader2.close();
                    } catch (Exception unused3) {
                    }
                    if (exec != null) {
                        exec.destroy();
                    }
                } catch (Exception e3) {
                    e = e3;
                    process = exec;
                } catch (Throwable th3) {
                    th = th3;
                    process = exec;
                }
            } catch (Exception e4) {
                e = e4;
                process = null;
            } catch (Throwable th4) {
                th = th4;
                process = null;
            }
            return metroHostPropValue;
        }
    }
}
