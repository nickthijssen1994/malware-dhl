package com.facebook.react.bridge;

import android.content.Context;
import android.text.TextUtils;
import com.jingdong.common.jdreactFramework.download.PluginVersion;
import com.jingdong.common.jdreactFramework.utils.q;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

/* loaded from: classes.dex */
public class O000000o {
    public static PluginVersion O000000o;
    public static String O00000Oo;

    public static String O000000o(Context context, String str) {
        if (context == null) {
            return "";
        }
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getResources().getAssets().open(str)));
            String str2 = "";
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine == null) {
                    return str2;
                }
                if (!TextUtils.isEmpty(readLine)) {
                    str2 = str2 + readLine;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private static String O000000o(File file) {
        InputStreamReader inputStreamReader;
        FileInputStream fileInputStream;
        Throwable th;
        StringBuffer stringBuffer = new StringBuffer();
        if (file == null || !file.exists()) {
            return "";
        }
        try {
            BufferedReader bufferedReader = null;
            try {
                fileInputStream = new FileInputStream(file);
                try {
                    inputStreamReader = new InputStreamReader(fileInputStream);
                    try {
                        BufferedReader bufferedReader2 = new BufferedReader(inputStreamReader);
                        while (true) {
                            try {
                                String readLine = bufferedReader2.readLine();
                                if (readLine == null) {
                                    try {
                                        break;
                                    } catch (IOException e) {
                                        e.printStackTrace();
                                    }
                                } else if (!TextUtils.isEmpty(readLine)) {
                                    stringBuffer.append(readLine);
                                }
                            } catch (FileNotFoundException unused) {
                                bufferedReader = bufferedReader2;
                                if (fileInputStream != null) {
                                    try {
                                        fileInputStream.close();
                                    } catch (IOException e2) {
                                        e2.printStackTrace();
                                    }
                                }
                                if (inputStreamReader != null) {
                                    try {
                                        inputStreamReader.close();
                                    } catch (IOException e3) {
                                        e3.printStackTrace();
                                    }
                                }
                                if (bufferedReader != null) {
                                    bufferedReader.close();
                                }
                                return stringBuffer.toString();
                            } catch (IOException unused2) {
                                bufferedReader = bufferedReader2;
                                if (fileInputStream != null) {
                                    try {
                                        fileInputStream.close();
                                    } catch (IOException e4) {
                                        e4.printStackTrace();
                                    }
                                }
                                if (inputStreamReader != null) {
                                    try {
                                        inputStreamReader.close();
                                    } catch (IOException e5) {
                                        e5.printStackTrace();
                                    }
                                }
                                if (bufferedReader != null) {
                                    bufferedReader.close();
                                }
                                return stringBuffer.toString();
                            } catch (Throwable th2) {
                                th = th2;
                                bufferedReader = bufferedReader2;
                                if (fileInputStream != null) {
                                    try {
                                        fileInputStream.close();
                                    } catch (IOException e6) {
                                        e6.printStackTrace();
                                    }
                                }
                                if (inputStreamReader != null) {
                                    try {
                                        inputStreamReader.close();
                                    } catch (IOException e7) {
                                        e7.printStackTrace();
                                    }
                                }
                                if (bufferedReader != null) {
                                    try {
                                        bufferedReader.close();
                                    } catch (IOException e8) {
                                        e8.printStackTrace();
                                    }
                                }
                                throw th;
                            }
                        }
                        fileInputStream.close();
                        if (inputStreamReader != null) {
                            try {
                                inputStreamReader.close();
                            } catch (IOException e9) {
                                e9.printStackTrace();
                            }
                        }
                        if (bufferedReader2 != null) {
                            bufferedReader2.close();
                        }
                    } catch (FileNotFoundException unused3) {
                    } catch (IOException unused4) {
                    } catch (Throwable th3) {
                        th = th3;
                    }
                } catch (FileNotFoundException unused5) {
                    inputStreamReader = null;
                } catch (IOException unused6) {
                    inputStreamReader = null;
                } catch (Throwable th4) {
                    th = th4;
                    inputStreamReader = null;
                }
            } catch (FileNotFoundException unused7) {
                inputStreamReader = null;
                fileInputStream = null;
            } catch (IOException unused8) {
                inputStreamReader = null;
                fileInputStream = null;
            } catch (Throwable th5) {
                th = th5;
                inputStreamReader = null;
                fileInputStream = null;
            }
        } catch (IOException e10) {
            e10.printStackTrace();
        }
        return stringBuffer.toString();
    }

    public static boolean O000000o(Context context, CatalystInstanceImpl catalystInstanceImpl, String str, String str2) {
        boolean z;
        if (!TextUtils.isEmpty(str) && !str.startsWith("/data")) {
            String str3 = "assets://" + str + File.separator + str2;
            try {
                String[] list = context.getAssets().list(str);
                if (list != null && list.length > 0) {
                    int i = 0;
                    while (true) {
                        if (i >= list.length) {
                            z = false;
                            break;
                        } else if (str2.equals(list[i])) {
                            z = true;
                            break;
                        } else {
                            i++;
                        }
                    }
                    if (!z) {
                        return false;
                    }
                    try {
                        catalystInstanceImpl.loadJSFromAssetsSynchronously(context.getAssets(), str3);
                        return true;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } catch (IOException unused) {
            }
        }
        return false;
    }

    public static boolean O000000o(Context context, CatalystInstanceImpl catalystInstanceImpl, String str, String str2, boolean z) {
        boolean z2;
        if (TextUtils.isEmpty(str)) {
            return false;
        }
        if (!str.startsWith("/data")) {
            String str3 = "assets://" + str + File.separator + str2;
            try {
                String[] list = context.getAssets().list(str);
                if (list != null && list.length > 0) {
                    int i = 0;
                    while (true) {
                        if (i >= list.length) {
                            z2 = false;
                            break;
                        } else if (str2.equals(list[i])) {
                            z2 = true;
                            break;
                        } else {
                            i++;
                        }
                    }
                    if (!z2) {
                        return false;
                    }
                    catalystInstanceImpl.loadJSFromAssets(context.getAssets(), str3, z);
                    return true;
                }
            } catch (IOException unused) {
            }
            return false;
        }
        String str4 = str + File.separator + str2;
        if (!new File(str4).exists()) {
            return false;
        }
        catalystInstanceImpl.loadJSFromFile(str4, str4, z);
        return true;
    }

    public static String O00000Oo(Context context, CatalystInstanceImpl catalystInstanceImpl, String str, String str2) {
        int loadingType = catalystInstanceImpl.getLoadingType();
        if (loadingType == 0) {
            PluginVersion d = q.d(context, str);
            if (d == null || TextUtils.isEmpty(d.pluginDir)) {
                return "";
            }
            String str3 = d.pluginDir + File.separator + str2;
            O00000Oo = str3;
            return O000000o(context, str3);
        } else if (loadingType != 1) {
            return "";
        } else {
            PluginVersion G = q.G(str);
            O000000o = G;
            if (G == null || TextUtils.isEmpty(G.pluginDir)) {
                return "";
            }
            File file = new File(G.pluginDir + File.separator + str2);
            return !file.exists() ? "" : O000000o(file);
        }
    }

    public static boolean O00000Oo(Context context, CatalystInstanceImpl catalystInstanceImpl, String str, String str2, boolean z) {
        String str3;
        int loadingType = catalystInstanceImpl.getLoadingType();
        String sourceURL = catalystInstanceImpl.getSourceURL();
        if (!TextUtils.isEmpty(sourceURL)) {
            int lastIndexOf = sourceURL.lastIndexOf(47);
            if (lastIndexOf > 0) {
                str3 = sourceURL.substring(0, lastIndexOf) + File.separator + str2;
                if (loadingType != 0) {
                    if (loadingType != 1 || !new File(str3).exists()) {
                        return false;
                    }
                    catalystInstanceImpl.loadJSFromFile(str3, str3, z);
                    return true;
                }
            }
            return false;
        } else if (loadingType == 0) {
            PluginVersion d = q.d(context, str);
            if (d == null || TextUtils.isEmpty(d.pluginDir)) {
                return false;
            }
            str3 = "assets://" + d.pluginDir + File.separator + str2;
            O00000Oo = str3;
        } else {
            if (loadingType == 1) {
                PluginVersion G = q.G(str);
                O000000o = G;
                if (G != null && !TextUtils.isEmpty(G.pluginDir)) {
                    String str4 = G.pluginDir + File.separator + str2;
                    if (!new File(str4).exists()) {
                        return false;
                    }
                    catalystInstanceImpl.loadJSFromFile(str4, str4, z);
                    return true;
                }
            }
            return false;
        }
        catalystInstanceImpl.loadJSFromAssets(context.getAssets(), str3, z);
        return true;
    }
}
