package com.hashedin.geography;

import com.alibaba.fastjson.asm.Opcodes;
import java.io.File;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.util.zip.CRC32;
import java.util.zip.ZipException;

/* renamed from: com.hashedin.geography.g */
/* loaded from: classes.dex */
final class C0699g {
    /* renamed from: a */
    public static long m4234a(File file) {
        RandomAccessFile randomAccessFile = new RandomAccessFile(file, m4235a((int) Opcodes.I2S));
        try {
            return m4232a(randomAccessFile, m4233a(randomAccessFile));
        } finally {
            randomAccessFile.close();
        }
    }

    /* renamed from: a */
    private static long m4232a(RandomAccessFile randomAccessFile, C0700h hVar) {
        CRC32 crc32 = new CRC32();
        long j = hVar.f668b;
        randomAccessFile.seek(hVar.f667a);
        byte[] bArr = new byte[16384];
        int read = randomAccessFile.read(bArr, 0, (int) Math.min(16384L, j));
        while (read != -1) {
            crc32.update(bArr, 0, read);
            j -= (long) read;
            if (j == 0) {
                break;
            }
            read = randomAccessFile.read(bArr, 0, (int) Math.min(16384L, j));
        }
        return crc32.getValue();
    }

    /* renamed from: a */
    private static C0700h m4233a(RandomAccessFile randomAccessFile) {
        long j = 0;
        long length = randomAccessFile.length() - 22;
        if (length >= 0) {
            long j2 = length - 65536;
            if (j2 >= 0) {
                j = j2;
            }
            int reverseBytes = Integer.reverseBytes(101010256);
            long j3 = length;
            do {
                randomAccessFile.seek(j3);
                if (randomAccessFile.readInt() == reverseBytes) {
                    randomAccessFile.skipBytes(2);
                    randomAccessFile.skipBytes(2);
                    randomAccessFile.skipBytes(2);
                    randomAccessFile.skipBytes(2);
                    C0700h hVar = new C0700h();
                    hVar.f668b = ((long) Integer.reverseBytes(randomAccessFile.readInt())) & 4294967295L;
                    hVar.f667a = ((long) Integer.reverseBytes(randomAccessFile.readInt())) & 4294967295L;
                    return hVar;
                }
                j3--;
            } while (j3 >= j);
            throw new ZipException(m4235a(375));
        }
        throw new ZipException(m4235a(251) + randomAccessFile.length());
    }

    /* renamed from: a */
    private static String m4235a(int i) {
        int i2 = 0;
        try {
            if (i == 147) {
                byte[] bArr = new byte[1];
                bArr[0] = -31;
                for (int i3 = 0; i3 <= 0; i3++) {
                    bArr[0] = (byte) ((byte) (bArr[0] ^ i));
                }
                return new String(bArr, StandardCharsets.UTF_8);
            } else if (i == 251) {
                byte[] bArr2 = new byte[33];
                bArr2[0] = -67;
                bArr2[1] = -110;
                bArr2[2] = -105;
                bArr2[3] = -98;
                bArr2[4] = -37;
                bArr2[5] = -113;
                bArr2[6] = -108;
                bArr2[7] = -108;
                bArr2[8] = -37;
                bArr2[9] = -120;
                bArr2[10] = -109;
                bArr2[11] = -108;
                bArr2[12] = -119;
                bArr2[13] = -113;
                bArr2[14] = -37;
                bArr2[15] = -113;
                bArr2[16] = -108;
                bArr2[17] = -37;
                bArr2[18] = -103;
                bArr2[19] = -98;
                bArr2[20] = -37;
                bArr2[21] = -102;
                bArr2[22] = -37;
                bArr2[23] = -127;
                bArr2[24] = -110;
                bArr2[25] = -117;
                bArr2[26] = -37;
                bArr2[27] = -99;
                bArr2[28] = -110;
                bArr2[29] = -105;
                bArr2[30] = -98;
                bArr2[31] = -63;
                bArr2[32] = -37;
                while (i2 < 33) {
                    bArr2[i2] = (byte) ((byte) (bArr2[i2] ^ i));
                    i2++;
                }
                return new String(bArr2, StandardCharsets.UTF_8);
            } else if (i != 375) {
                return null;
            } else {
                byte[] bArr3 = new byte[44];
                bArr3[0] = 50;
                bArr3[1] = 25;
                bArr3[2] = 19;
                bArr3[3] = 87;
                bArr3[4] = 56;
                bArr3[5] = 17;
                bArr3[6] = 87;
                bArr3[7] = 52;
                bArr3[8] = 18;
                bArr3[9] = 25;
                bArr3[10] = 3;
                bArr3[11] = 5;
                bArr3[12] = 22;
                bArr3[13] = 27;
                bArr3[14] = 87;
                bArr3[15] = 51;
                bArr3[16] = 30;
                bArr3[17] = 5;
                bArr3[18] = 18;
                bArr3[19] = 20;
                bArr3[20] = 3;
                bArr3[21] = 24;
                bArr3[22] = 5;
                bArr3[23] = 14;
                bArr3[24] = 87;
                bArr3[25] = 4;
                bArr3[26] = 30;
                bArr3[27] = 16;
                bArr3[28] = 25;
                bArr3[29] = 22;
                bArr3[30] = 3;
                bArr3[31] = 2;
                bArr3[32] = 5;
                bArr3[33] = 18;
                bArr3[34] = 87;
                bArr3[35] = 25;
                bArr3[36] = 24;
                bArr3[37] = 3;
                bArr3[38] = 87;
                bArr3[39] = 17;
                bArr3[40] = 24;
                bArr3[41] = 2;
                bArr3[42] = 25;
                bArr3[43] = 19;
                while (i2 < 44) {
                    bArr3[i2] = (byte) ((byte) (bArr3[i2] ^ i));
                    i2++;
                }
                return new String(bArr3, StandardCharsets.UTF_8);
            }
        } catch (Exception e) {
            return null;
        }
    }
}
