package cn.bingoogolapple.qrcode.core;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;

/* compiled from: TbsSdkJava */
/* renamed from: cn.bingoogolapple.qrcode.core.ScanBoxView */
/* loaded from: classes.dex */
public class ScanBoxView extends View {

    /* renamed from: C */
    private String f20C;

    /* renamed from: D */
    private String f21D;

    /* renamed from: F */
    private int f23F;

    /* renamed from: I */
    private int f26I;

    /* renamed from: O */
    private Drawable f32O;

    /* renamed from: P */
    private Bitmap f33P;

    /* renamed from: Q */
    private float f34Q;

    /* renamed from: R */
    private float f35R;

    /* renamed from: S */
    private Bitmap f36S;

    /* renamed from: T */
    private Bitmap f37T;

    /* renamed from: U */
    private Bitmap f38U;

    /* renamed from: V */
    private Bitmap f39V;

    /* renamed from: W */
    private float f40W;

    /* renamed from: a */
    private int f41a;

    /* renamed from: aa */
    private StaticLayout f42aa;

    /* renamed from: ab */
    private int f43ab;

    /* renamed from: af */
    private QRCodeView f47af;

    /* renamed from: b */
    private int f48b;

    /* renamed from: c */
    private Rect f49c;

    /* renamed from: d */
    private float f50d;

    /* renamed from: e */
    private float f51e;

    /* renamed from: j */
    private int f56j;

    /* renamed from: k */
    private int f57k;

    /* renamed from: l */
    private int f58l;

    /* renamed from: m */
    private int f59m;

    /* renamed from: n */
    private int f60n;

    /* renamed from: o */
    private int f61o;

    /* renamed from: p */
    private int f62p;

    /* renamed from: v */
    private int f68v;

    /* renamed from: f */
    private Paint f52f = new Paint();

    /* renamed from: h */
    private int f54h = Color.parseColor("#33FFFFFF");

    /* renamed from: i */
    private int f55i = -1;

    /* renamed from: q */
    private int f63q = -1;

    /* renamed from: r */
    private int f64r = 0;

    /* renamed from: s */
    private boolean f65s = false;

    /* renamed from: t */
    private Drawable f66t = null;

    /* renamed from: u */
    private Bitmap f67u = null;

    /* renamed from: w */
    private int f69w = -1;

    /* renamed from: x */
    private int f70x = 1000;

    /* renamed from: y */
    private float f71y = -1.0f;

    /* renamed from: z */
    private int f72z = 1;

    /* renamed from: A */
    private int f18A = 0;

    /* renamed from: B */
    private boolean f19B = false;

    /* renamed from: E */
    private String f22E = null;

    /* renamed from: G */
    private int f24G = -1;

    /* renamed from: H */
    private boolean f25H = false;

    /* renamed from: J */
    private boolean f27J = false;

    /* renamed from: K */
    private int f28K = Color.parseColor("#22000000");

    /* renamed from: L */
    private boolean f29L = false;

    /* renamed from: M */
    private boolean f30M = false;

    /* renamed from: N */
    private boolean f31N = false;

    /* renamed from: g */
    private TextPaint f53g = new TextPaint();

    /* renamed from: ac */
    private boolean f44ac = false;

    /* renamed from: ad */
    private boolean f45ad = false;

    /* renamed from: ae */
    private boolean f46ae = false;

    public ScanBoxView(Context context) {
        super(context);
        this.f52f.setAntiAlias(true);
        this.f56j = C0010a.m4900a(context, 20.0f);
        this.f57k = C0010a.m4900a(context, 3.0f);
        this.f62p = C0010a.m4900a(context, 1.0f);
        this.f61o = C0010a.m4900a(context, 90.0f);
        this.f58l = C0010a.m4900a(context, 200.0f);
        this.f60n = C0010a.m4900a(context, 140.0f);
        this.f68v = C0010a.m4900a(context, 1.0f);
        this.f41a = C0010a.m4900a(context, 2.0f);
        this.f23F = C0010a.m4893b(context, 14.0f);
        this.f26I = C0010a.m4900a(context, 20.0f);
        this.f53g.setAntiAlias(true);
        this.f43ab = C0010a.m4900a(context, 4.0f);
    }

    /* renamed from: a */
    void m4915a(QRCodeView qRCodeView, AttributeSet attributeSet) {
        this.f47af = qRCodeView;
        TypedArray obtainStyledAttributes = getContext().obtainStyledAttributes(attributeSet, C0008R.styleable.QRCodeView);
        int indexCount = obtainStyledAttributes.getIndexCount();
        for (int i = 0; i < indexCount; i++) {
            m4917a(obtainStyledAttributes.getIndex(i), obtainStyledAttributes);
        }
        obtainStyledAttributes.recycle();
        m4910d();
    }

    /* renamed from: a */
    private void m4917a(int i, TypedArray typedArray) {
        if (i == C0008R.styleable.QRCodeView_qrcv_topOffset) {
            this.f61o = typedArray.getDimensionPixelSize(i, this.f61o);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_cornerSize) {
            this.f57k = typedArray.getDimensionPixelSize(i, this.f57k);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_cornerLength) {
            this.f56j = typedArray.getDimensionPixelSize(i, this.f56j);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_scanLineSize) {
            this.f62p = typedArray.getDimensionPixelSize(i, this.f62p);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_rectWidth) {
            this.f58l = typedArray.getDimensionPixelSize(i, this.f58l);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_maskColor) {
            this.f54h = typedArray.getColor(i, this.f54h);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_cornerColor) {
            this.f55i = typedArray.getColor(i, this.f55i);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_scanLineColor) {
            this.f63q = typedArray.getColor(i, this.f63q);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_scanLineMargin) {
            this.f64r = typedArray.getDimensionPixelSize(i, this.f64r);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isShowDefaultScanLineDrawable) {
            this.f65s = typedArray.getBoolean(i, this.f65s);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_customScanLineDrawable) {
            this.f66t = typedArray.getDrawable(i);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_borderSize) {
            this.f68v = typedArray.getDimensionPixelSize(i, this.f68v);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_borderColor) {
            this.f69w = typedArray.getColor(i, this.f69w);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_animTime) {
            this.f70x = typedArray.getInteger(i, this.f70x);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_verticalBias) {
            this.f71y = typedArray.getFloat(i, this.f71y);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_cornerDisplayType) {
            this.f72z = typedArray.getInteger(i, this.f72z);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_toolbarHeight) {
            this.f18A = typedArray.getDimensionPixelSize(i, this.f18A);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_barcodeRectHeight) {
            this.f60n = typedArray.getDimensionPixelSize(i, this.f60n);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isBarcode) {
            this.f19B = typedArray.getBoolean(i, this.f19B);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_barCodeTipText) {
            this.f21D = typedArray.getString(i);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_qrCodeTipText) {
            this.f20C = typedArray.getString(i);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_tipTextSize) {
            this.f23F = typedArray.getDimensionPixelSize(i, this.f23F);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_tipTextColor) {
            this.f24G = typedArray.getColor(i, this.f24G);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isTipTextBelowRect) {
            this.f25H = typedArray.getBoolean(i, this.f25H);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_tipTextMargin) {
            this.f26I = typedArray.getDimensionPixelSize(i, this.f26I);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isShowTipTextAsSingleLine) {
            this.f27J = typedArray.getBoolean(i, this.f27J);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isShowTipBackground) {
            this.f29L = typedArray.getBoolean(i, this.f29L);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_tipBackgroundColor) {
            this.f28K = typedArray.getColor(i, this.f28K);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isScanLineReverse) {
            this.f30M = typedArray.getBoolean(i, this.f30M);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isShowDefaultGridScanLineDrawable) {
            this.f31N = typedArray.getBoolean(i, this.f31N);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_customGridScanLineDrawable) {
            this.f32O = typedArray.getDrawable(i);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isOnlyDecodeScanBoxArea) {
            this.f44ac = typedArray.getBoolean(i, this.f44ac);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isShowLocationPoint) {
            this.f45ad = typedArray.getBoolean(i, this.f45ad);
        } else if (i == C0008R.styleable.QRCodeView_qrcv_isAutoZoom) {
            this.f46ae = typedArray.getBoolean(i, this.f46ae);
        }
    }

    /* renamed from: d */
    private void m4910d() {
        Drawable drawable = this.f32O;
        if (drawable != null) {
            this.f38U = ((BitmapDrawable) drawable).getBitmap();
        }
        if (this.f38U == null) {
            this.f38U = BitmapFactory.decodeResource(getResources(), C0008R.mipmap.qrcode_default_grid_scan_line);
            this.f38U = C0010a.m4892b(this.f38U, this.f63q);
        }
        this.f39V = C0010a.m4899a(this.f38U, 90);
        this.f39V = C0010a.m4899a(this.f39V, 90);
        this.f39V = C0010a.m4899a(this.f39V, 90);
        Drawable drawable2 = this.f66t;
        if (drawable2 != null) {
            this.f36S = ((BitmapDrawable) drawable2).getBitmap();
        }
        if (this.f36S == null) {
            this.f36S = BitmapFactory.decodeResource(getResources(), C0008R.mipmap.qrcode_default_scan_line);
            this.f36S = C0010a.m4892b(this.f36S, this.f63q);
        }
        this.f37T = C0010a.m4899a(this.f36S, 90);
        this.f61o += this.f18A;
        this.f40W = (((float) this.f57k) * 1.0f) / 2.0f;
        this.f53g.setTextSize((float) this.f23F);
        this.f53g.setColor(this.f24G);
        setIsBarcode(this.f19B);
    }

    @Override // android.view.View
    public void onDraw(Canvas canvas) {
        if (this.f49c != null) {
            m4916a(canvas);
            m4913b(canvas);
            m4911c(canvas);
            m4909d(canvas);
            m4907e(canvas);
            m4908e();
        }
    }

    /* renamed from: a */
    private void m4916a(Canvas canvas) {
        int width = canvas.getWidth();
        int height = canvas.getHeight();
        if (this.f54h != 0) {
            this.f52f.setStyle(Paint.Style.FILL);
            this.f52f.setColor(this.f54h);
            float f = (float) width;
            canvas.drawRect(0.0f, 0.0f, f, (float) this.f49c.top, this.f52f);
            canvas.drawRect(0.0f, (float) this.f49c.top, (float) this.f49c.left, (float) (this.f49c.bottom + 1), this.f52f);
            canvas.drawRect((float) (this.f49c.right + 1), (float) this.f49c.top, f, (float) (this.f49c.bottom + 1), this.f52f);
            canvas.drawRect(0.0f, (float) (this.f49c.bottom + 1), f, (float) height, this.f52f);
        }
    }

    /* renamed from: b */
    private void m4913b(Canvas canvas) {
        if (this.f68v > 0) {
            this.f52f.setStyle(Paint.Style.STROKE);
            this.f52f.setColor(this.f69w);
            this.f52f.setStrokeWidth((float) this.f68v);
            canvas.drawRect(this.f49c, this.f52f);
        }
    }

    /* renamed from: c */
    private void m4911c(Canvas canvas) {
        if (this.f40W > 0.0f) {
            this.f52f.setStyle(Paint.Style.STROKE);
            this.f52f.setColor(this.f55i);
            this.f52f.setStrokeWidth((float) this.f57k);
            int i = this.f72z;
            if (i == 1) {
                canvas.drawLine(((float) this.f49c.left) - this.f40W, (float) this.f49c.top, (((float) this.f49c.left) - this.f40W) + ((float) this.f56j), (float) this.f49c.top, this.f52f);
                canvas.drawLine((float) this.f49c.left, ((float) this.f49c.top) - this.f40W, (float) this.f49c.left, (((float) this.f49c.top) - this.f40W) + ((float) this.f56j), this.f52f);
                canvas.drawLine(((float) this.f49c.right) + this.f40W, (float) this.f49c.top, (((float) this.f49c.right) + this.f40W) - ((float) this.f56j), (float) this.f49c.top, this.f52f);
                canvas.drawLine((float) this.f49c.right, ((float) this.f49c.top) - this.f40W, (float) this.f49c.right, (((float) this.f49c.top) - this.f40W) + ((float) this.f56j), this.f52f);
                canvas.drawLine(((float) this.f49c.left) - this.f40W, (float) this.f49c.bottom, (((float) this.f49c.left) - this.f40W) + ((float) this.f56j), (float) this.f49c.bottom, this.f52f);
                canvas.drawLine((float) this.f49c.left, ((float) this.f49c.bottom) + this.f40W, (float) this.f49c.left, (((float) this.f49c.bottom) + this.f40W) - ((float) this.f56j), this.f52f);
                canvas.drawLine(((float) this.f49c.right) + this.f40W, (float) this.f49c.bottom, (((float) this.f49c.right) + this.f40W) - ((float) this.f56j), (float) this.f49c.bottom, this.f52f);
                canvas.drawLine((float) this.f49c.right, ((float) this.f49c.bottom) + this.f40W, (float) this.f49c.right, (((float) this.f49c.bottom) + this.f40W) - ((float) this.f56j), this.f52f);
            } else if (i == 2) {
                canvas.drawLine((float) this.f49c.left, ((float) this.f49c.top) + this.f40W, (float) (this.f49c.left + this.f56j), ((float) this.f49c.top) + this.f40W, this.f52f);
                canvas.drawLine(((float) this.f49c.left) + this.f40W, (float) this.f49c.top, ((float) this.f49c.left) + this.f40W, (float) (this.f49c.top + this.f56j), this.f52f);
                canvas.drawLine((float) this.f49c.right, ((float) this.f49c.top) + this.f40W, (float) (this.f49c.right - this.f56j), ((float) this.f49c.top) + this.f40W, this.f52f);
                canvas.drawLine(((float) this.f49c.right) - this.f40W, (float) this.f49c.top, ((float) this.f49c.right) - this.f40W, (float) (this.f49c.top + this.f56j), this.f52f);
                canvas.drawLine((float) this.f49c.left, ((float) this.f49c.bottom) - this.f40W, (float) (this.f49c.left + this.f56j), ((float) this.f49c.bottom) - this.f40W, this.f52f);
                canvas.drawLine(((float) this.f49c.left) + this.f40W, (float) this.f49c.bottom, ((float) this.f49c.left) + this.f40W, (float) (this.f49c.bottom - this.f56j), this.f52f);
                canvas.drawLine((float) this.f49c.right, ((float) this.f49c.bottom) - this.f40W, (float) (this.f49c.right - this.f56j), ((float) this.f49c.bottom) - this.f40W, this.f52f);
                canvas.drawLine(((float) this.f49c.right) - this.f40W, (float) this.f49c.bottom, ((float) this.f49c.right) - this.f40W, (float) (this.f49c.bottom - this.f56j), this.f52f);
            }
        }
    }

    /* renamed from: d */
    private void m4909d(Canvas canvas) {
        if (this.f19B) {
            if (this.f33P != null) {
                RectF rectF = new RectF(((float) this.f49c.left) + this.f40W + 0.5f, ((float) this.f49c.top) + this.f40W + ((float) this.f64r), this.f35R, (((float) this.f49c.bottom) - this.f40W) - ((float) this.f64r));
                Rect rect = new Rect((int) (((float) this.f33P.getWidth()) - rectF.width()), 0, this.f33P.getWidth(), this.f33P.getHeight());
                if (rect.left < 0) {
                    rect.left = 0;
                    rectF.left = rectF.right - ((float) rect.width());
                }
                canvas.drawBitmap(this.f33P, rect, rectF, this.f52f);
            } else if (this.f67u != null) {
                canvas.drawBitmap(this.f67u, (Rect) null, new RectF(this.f51e, ((float) this.f49c.top) + this.f40W + ((float) this.f64r), this.f51e + ((float) this.f67u.getWidth()), (((float) this.f49c.bottom) - this.f40W) - ((float) this.f64r)), this.f52f);
            } else {
                this.f52f.setStyle(Paint.Style.FILL);
                this.f52f.setColor(this.f63q);
                canvas.drawRect(this.f51e, ((float) this.f49c.top) + this.f40W + ((float) this.f64r), this.f51e + ((float) this.f62p), (((float) this.f49c.bottom) - this.f40W) - ((float) this.f64r), this.f52f);
            }
        } else if (this.f33P != null) {
            RectF rectF2 = new RectF(((float) this.f49c.left) + this.f40W + ((float) this.f64r), ((float) this.f49c.top) + this.f40W + 0.5f, (((float) this.f49c.right) - this.f40W) - ((float) this.f64r), this.f34Q);
            Rect rect2 = new Rect(0, (int) (((float) this.f33P.getHeight()) - rectF2.height()), this.f33P.getWidth(), this.f33P.getHeight());
            if (rect2.top < 0) {
                rect2.top = 0;
                rectF2.top = rectF2.bottom - ((float) rect2.height());
            }
            canvas.drawBitmap(this.f33P, rect2, rectF2, this.f52f);
        } else if (this.f67u != null) {
            canvas.drawBitmap(this.f67u, (Rect) null, new RectF(((float) this.f49c.left) + this.f40W + ((float) this.f64r), this.f50d, (((float) this.f49c.right) - this.f40W) - ((float) this.f64r), this.f50d + ((float) this.f67u.getHeight())), this.f52f);
        } else {
            this.f52f.setStyle(Paint.Style.FILL);
            this.f52f.setColor(this.f63q);
            canvas.drawRect(((float) this.f49c.left) + this.f40W + ((float) this.f64r), this.f50d, (((float) this.f49c.right) - this.f40W) - ((float) this.f64r), this.f50d + ((float) this.f62p), this.f52f);
        }
    }

    /* renamed from: e */
    private void m4907e(Canvas canvas) {
        if (!TextUtils.isEmpty(this.f22E) && this.f42aa != null) {
            if (this.f25H) {
                if (this.f29L) {
                    this.f52f.setColor(this.f28K);
                    this.f52f.setStyle(Paint.Style.FILL);
                    if (this.f27J) {
                        Rect rect = new Rect();
                        TextPaint textPaint = this.f53g;
                        String str = this.f22E;
                        textPaint.getTextBounds(str, 0, str.length(), rect);
                        float width = (float) (((canvas.getWidth() - rect.width()) / 2) - this.f43ab);
                        RectF rectF = new RectF(width, (float) ((this.f49c.bottom + this.f26I) - this.f43ab), ((float) rect.width()) + width + ((float) (this.f43ab * 2)), (float) (this.f49c.bottom + this.f26I + this.f42aa.getHeight() + this.f43ab));
                        int i = this.f43ab;
                        canvas.drawRoundRect(rectF, (float) i, (float) i, this.f52f);
                    } else {
                        RectF rectF2 = new RectF((float) this.f49c.left, (float) ((this.f49c.bottom + this.f26I) - this.f43ab), (float) this.f49c.right, (float) (this.f49c.bottom + this.f26I + this.f42aa.getHeight() + this.f43ab));
                        int i2 = this.f43ab;
                        canvas.drawRoundRect(rectF2, (float) i2, (float) i2, this.f52f);
                    }
                }
                canvas.save();
                if (this.f27J) {
                    canvas.translate(0.0f, (float) (this.f49c.bottom + this.f26I));
                } else {
                    canvas.translate((float) (this.f49c.left + this.f43ab), (float) (this.f49c.bottom + this.f26I));
                }
                this.f42aa.draw(canvas);
                canvas.restore();
                return;
            }
            if (this.f29L) {
                this.f52f.setColor(this.f28K);
                this.f52f.setStyle(Paint.Style.FILL);
                if (this.f27J) {
                    Rect rect2 = new Rect();
                    TextPaint textPaint2 = this.f53g;
                    String str2 = this.f22E;
                    textPaint2.getTextBounds(str2, 0, str2.length(), rect2);
                    float width2 = (float) (((canvas.getWidth() - rect2.width()) / 2) - this.f43ab);
                    RectF rectF3 = new RectF(width2, (float) (((this.f49c.top - this.f26I) - this.f42aa.getHeight()) - this.f43ab), ((float) rect2.width()) + width2 + ((float) (this.f43ab * 2)), (float) ((this.f49c.top - this.f26I) + this.f43ab));
                    int i3 = this.f43ab;
                    canvas.drawRoundRect(rectF3, (float) i3, (float) i3, this.f52f);
                } else {
                    RectF rectF4 = new RectF((float) this.f49c.left, (float) (((this.f49c.top - this.f26I) - this.f42aa.getHeight()) - this.f43ab), (float) this.f49c.right, (float) ((this.f49c.top - this.f26I) + this.f43ab));
                    int i4 = this.f43ab;
                    canvas.drawRoundRect(rectF4, (float) i4, (float) i4, this.f52f);
                }
            }
            canvas.save();
            if (this.f27J) {
                canvas.translate(0.0f, (float) ((this.f49c.top - this.f26I) - this.f42aa.getHeight()));
            } else {
                canvas.translate((float) (this.f49c.left + this.f43ab), (float) ((this.f49c.top - this.f26I) - this.f42aa.getHeight()));
            }
            this.f42aa.draw(canvas);
            canvas.restore();
        }
    }

    /* renamed from: e */
    private void m4908e() {
        if (this.f19B) {
            if (this.f33P == null) {
                this.f51e += (float) this.f41a;
                int i = this.f62p;
                Bitmap bitmap = this.f67u;
                if (bitmap != null) {
                    i = bitmap.getWidth();
                }
                if (this.f30M) {
                    if (this.f51e + ((float) i) > ((float) this.f49c.right) - this.f40W || this.f51e < ((float) this.f49c.left) + this.f40W) {
                        this.f41a = -this.f41a;
                    }
                } else if (this.f51e + ((float) i) > ((float) this.f49c.right) - this.f40W) {
                    this.f51e = ((float) this.f49c.left) + this.f40W + 0.5f;
                }
            } else {
                this.f35R += (float) this.f41a;
                if (this.f35R > ((float) this.f49c.right) - this.f40W) {
                    this.f35R = ((float) this.f49c.left) + this.f40W + 0.5f;
                }
            }
        } else if (this.f33P == null) {
            this.f50d += (float) this.f41a;
            int i2 = this.f62p;
            Bitmap bitmap2 = this.f67u;
            if (bitmap2 != null) {
                i2 = bitmap2.getHeight();
            }
            if (this.f30M) {
                if (this.f50d + ((float) i2) > ((float) this.f49c.bottom) - this.f40W || this.f50d < ((float) this.f49c.top) + this.f40W) {
                    this.f41a = -this.f41a;
                }
            } else if (this.f50d + ((float) i2) > ((float) this.f49c.bottom) - this.f40W) {
                this.f50d = ((float) this.f49c.top) + this.f40W + 0.5f;
            }
        } else {
            this.f34Q += (float) this.f41a;
            if (this.f34Q > ((float) this.f49c.bottom) - this.f40W) {
                this.f34Q = ((float) this.f49c.top) + this.f40W + 0.5f;
            }
        }
        postInvalidateDelayed((long) this.f48b, this.f49c.left, this.f49c.top, this.f49c.right, this.f49c.bottom);
    }

    @Override // android.view.View
    protected void onSizeChanged(int i, int i2, int i3, int i4) {
        super.onSizeChanged(i, i2, i3, i4);
        m4906f();
    }

    /* renamed from: f */
    private void m4906f() {
        int width = getWidth();
        int i = this.f58l;
        int i2 = (width - i) / 2;
        int i3 = this.f61o;
        this.f49c = new Rect(i2, i3, i + i2, this.f59m + i3);
        if (this.f19B) {
            float f = ((float) this.f49c.left) + this.f40W + 0.5f;
            this.f51e = f;
            this.f35R = f;
        } else {
            float f2 = ((float) this.f49c.top) + this.f40W + 0.5f;
            this.f50d = f2;
            this.f34Q = f2;
        }
        if (this.f47af != null && m4919a()) {
            this.f47af.onScanBoxRectChanged(new Rect(this.f49c));
        }
    }

    /* renamed from: a */
    public Rect m4918a(int i) {
        if (!this.f44ac || getVisibility() != 0) {
            return null;
        }
        Rect rect = new Rect(this.f49c);
        float measuredHeight = (((float) i) * 1.0f) / ((float) getMeasuredHeight());
        float exactCenterX = rect.exactCenterX() * measuredHeight;
        float exactCenterY = rect.exactCenterY() * measuredHeight;
        float width = (((float) rect.width()) / 2.0f) * measuredHeight;
        float height = (((float) rect.height()) / 2.0f) * measuredHeight;
        rect.left = (int) (exactCenterX - width);
        rect.right = (int) (exactCenterX + width);
        rect.top = (int) (exactCenterY - height);
        rect.bottom = (int) (exactCenterY + height);
        return rect;
    }

    public void setIsBarcode(boolean z) {
        this.f19B = z;
        m4905g();
    }

    /* renamed from: g */
    private void m4905g() {
        if (this.f32O != null || this.f31N) {
            if (this.f19B) {
                this.f33P = this.f39V;
            } else {
                this.f33P = this.f38U;
            }
        } else if (this.f66t != null || this.f65s) {
            if (this.f19B) {
                this.f67u = this.f37T;
            } else {
                this.f67u = this.f36S;
            }
        }
        if (this.f19B) {
            this.f22E = this.f21D;
            this.f59m = this.f60n;
            this.f48b = (int) (((((float) this.f70x) * 1.0f) * ((float) this.f41a)) / ((float) this.f58l));
        } else {
            this.f22E = this.f20C;
            this.f59m = this.f58l;
            this.f48b = (int) (((((float) this.f70x) * 1.0f) * ((float) this.f41a)) / ((float) this.f59m));
        }
        if (!TextUtils.isEmpty(this.f22E)) {
            if (this.f27J) {
                this.f42aa = new StaticLayout(this.f22E, this.f53g, C0010a.m4894b(getContext()).x, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, true);
            } else {
                this.f42aa = new StaticLayout(this.f22E, this.f53g, this.f58l - (this.f43ab * 2), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, true);
            }
        }
        if (this.f71y != -1.0f) {
            int c = C0010a.m4894b(getContext()).y - C0010a.m4890c(getContext());
            int i = this.f18A;
            if (i == 0) {
                this.f61o = (int) ((((float) c) * this.f71y) - ((float) (this.f59m / 2)));
            } else {
                this.f61o = i + ((int) ((((float) (c - i)) * this.f71y) - ((float) (this.f59m / 2))));
            }
        }
        m4906f();
        postInvalidate();
    }

    public boolean getIsBarcode() {
        return this.f19B;
    }

    public int getMaskColor() {
        return this.f54h;
    }

    public void setMaskColor(int i) {
        this.f54h = i;
        m4905g();
    }

    public int getCornerColor() {
        return this.f55i;
    }

    public void setCornerColor(int i) {
        this.f55i = i;
        m4905g();
    }

    public int getCornerLength() {
        return this.f56j;
    }

    public void setCornerLength(int i) {
        this.f56j = i;
        m4905g();
    }

    public int getCornerSize() {
        return this.f57k;
    }

    public void setCornerSize(int i) {
        this.f57k = i;
        m4905g();
    }

    public int getRectWidth() {
        return this.f58l;
    }

    public void setRectWidth(int i) {
        this.f58l = i;
        m4905g();
    }

    public int getRectHeight() {
        return this.f59m;
    }

    public void setRectHeight(int i) {
        this.f59m = i;
        m4905g();
    }

    public int getBarcodeRectHeight() {
        return this.f60n;
    }

    public void setBarcodeRectHeight(int i) {
        this.f60n = i;
        m4905g();
    }

    public int getTopOffset() {
        return this.f61o;
    }

    public void setTopOffset(int i) {
        this.f61o = i;
        m4905g();
    }

    public int getScanLineSize() {
        return this.f62p;
    }

    public void setScanLineSize(int i) {
        this.f62p = i;
        m4905g();
    }

    public int getScanLineColor() {
        return this.f63q;
    }

    public void setScanLineColor(int i) {
        this.f63q = i;
        m4905g();
    }

    public int getScanLineMargin() {
        return this.f64r;
    }

    public void setScanLineMargin(int i) {
        this.f64r = i;
        m4905g();
    }

    public void setShowDefaultScanLineDrawable(boolean z) {
        this.f65s = z;
        m4905g();
    }

    public Drawable getCustomScanLineDrawable() {
        return this.f66t;
    }

    public void setCustomScanLineDrawable(Drawable drawable) {
        this.f66t = drawable;
        m4905g();
    }

    public Bitmap getScanLineBitmap() {
        return this.f67u;
    }

    public void setScanLineBitmap(Bitmap bitmap) {
        this.f67u = bitmap;
        m4905g();
    }

    public int getBorderSize() {
        return this.f68v;
    }

    public void setBorderSize(int i) {
        this.f68v = i;
        m4905g();
    }

    public int getBorderColor() {
        return this.f69w;
    }

    public void setBorderColor(int i) {
        this.f69w = i;
        m4905g();
    }

    public int getAnimTime() {
        return this.f70x;
    }

    public void setAnimTime(int i) {
        this.f70x = i;
        m4905g();
    }

    public float getVerticalBias() {
        return this.f71y;
    }

    public void setVerticalBias(float f) {
        this.f71y = f;
        m4905g();
    }

    public int getToolbarHeight() {
        return this.f18A;
    }

    public void setToolbarHeight(int i) {
        this.f18A = i;
        m4905g();
    }

    public String getQRCodeTipText() {
        return this.f20C;
    }

    public void setQRCodeTipText(String str) {
        this.f20C = str;
        m4905g();
    }

    public String getBarCodeTipText() {
        return this.f21D;
    }

    public void setBarCodeTipText(String str) {
        this.f21D = str;
        m4905g();
    }

    public String getTipText() {
        return this.f22E;
    }

    public void setTipText(String str) {
        if (this.f19B) {
            this.f21D = str;
        } else {
            this.f20C = str;
        }
        m4905g();
    }

    public int getTipTextColor() {
        return this.f24G;
    }

    public void setTipTextColor(int i) {
        this.f24G = i;
        this.f53g.setColor(this.f24G);
        m4905g();
    }

    public int getTipTextSize() {
        return this.f23F;
    }

    public void setTipTextSize(int i) {
        this.f23F = i;
        this.f53g.setTextSize((float) this.f23F);
        m4905g();
    }

    public void setTipTextBelowRect(boolean z) {
        this.f25H = z;
        m4905g();
    }

    public int getTipTextMargin() {
        return this.f26I;
    }

    public void setTipTextMargin(int i) {
        this.f26I = i;
        m4905g();
    }

    public void setShowTipTextAsSingleLine(boolean z) {
        this.f27J = z;
        m4905g();
    }

    public void setShowTipBackground(boolean z) {
        this.f29L = z;
        m4905g();
    }

    public int getTipBackgroundColor() {
        return this.f28K;
    }

    public void setTipBackgroundColor(int i) {
        this.f28K = i;
        m4905g();
    }

    public void setScanLineReverse(boolean z) {
        this.f30M = z;
        m4905g();
    }

    public void setShowDefaultGridScanLineDrawable(boolean z) {
        this.f31N = z;
        m4905g();
    }

    public float getHalfCornerSize() {
        return this.f40W;
    }

    public void setHalfCornerSize(float f) {
        this.f40W = f;
        m4905g();
    }

    public StaticLayout getTipTextSl() {
        return this.f42aa;
    }

    public void setTipTextSl(StaticLayout staticLayout) {
        this.f42aa = staticLayout;
        m4905g();
    }

    public int getTipBackgroundRadius() {
        return this.f43ab;
    }

    public void setTipBackgroundRadius(int i) {
        this.f43ab = i;
        m4905g();
    }

    /* renamed from: a */
    public boolean m4919a() {
        return this.f44ac;
    }

    public void setOnlyDecodeScanBoxArea(boolean z) {
        this.f44ac = z;
        m4906f();
    }

    /* renamed from: b */
    public boolean m4914b() {
        return this.f45ad;
    }

    public void setShowLocationPoint(boolean z) {
        this.f45ad = z;
    }

    /* renamed from: c */
    public boolean m4912c() {
        return this.f46ae;
    }

    public void setAutoZoom(boolean z) {
        this.f46ae = z;
    }
}
