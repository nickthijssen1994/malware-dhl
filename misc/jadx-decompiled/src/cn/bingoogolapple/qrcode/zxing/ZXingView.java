package cn.bingoogolapple.qrcode.zxing;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.PointF;
import android.graphics.Rect;
import android.text.TextUtils;
import android.util.AttributeSet;
import cn.bingoogolapple.qrcode.core.C0010a;
import cn.bingoogolapple.qrcode.core.C0013d;
import cn.bingoogolapple.qrcode.core.QRCodeView;
import cn.bingoogolapple.qrcode.core.TbsSdkJava;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.PlanarYUVLuminanceSource;
import com.google.zxing.Result;
import com.google.zxing.ResultPoint;
import com.google.zxing.common.GlobalHistogramBinarizer;
import com.google.zxing.common.HybridBinarizer;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* renamed from: cn.bingoogolapple.qrcode.zxing.ZXingView */
/* loaded from: classes.dex */
public class ZXingView extends QRCodeView {
    private Map<DecodeHintType, Object> mHintMap;
    private MultiFormatReader mMultiFormatReader;

    public ZXingView(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public ZXingView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
    }

    @Override // cn.bingoogolapple.qrcode.core.QRCodeView
    protected void setupReader() {
        this.mMultiFormatReader = new MultiFormatReader();
        if (this.mBarcodeType == TbsSdkJava.ONE_DIMENSION) {
            this.mMultiFormatReader.setHints(QRCodeDecoder.ONE_DIMENSION_HINT_MAP);
        } else if (this.mBarcodeType == TbsSdkJava.TWO_DIMENSION) {
            this.mMultiFormatReader.setHints(QRCodeDecoder.TWO_DIMENSION_HINT_MAP);
        } else if (this.mBarcodeType == TbsSdkJava.ONLY_QR_CODE) {
            this.mMultiFormatReader.setHints(QRCodeDecoder.QR_CODE_HINT_MAP);
        } else if (this.mBarcodeType == TbsSdkJava.ONLY_CODE_128) {
            this.mMultiFormatReader.setHints(QRCodeDecoder.CODE_128_HINT_MAP);
        } else if (this.mBarcodeType == TbsSdkJava.ONLY_EAN_13) {
            this.mMultiFormatReader.setHints(QRCodeDecoder.EAN_13_HINT_MAP);
        } else if (this.mBarcodeType == TbsSdkJava.HIGH_FREQUENCY) {
            this.mMultiFormatReader.setHints(QRCodeDecoder.HIGH_FREQUENCY_HINT_MAP);
        } else if (this.mBarcodeType == TbsSdkJava.CUSTOM) {
            this.mMultiFormatReader.setHints(this.mHintMap);
        } else {
            this.mMultiFormatReader.setHints(QRCodeDecoder.ALL_HINT_MAP);
        }
    }

    public void setType(TbsSdkJava barcodeType, Map<DecodeHintType, Object> map) {
        Map<DecodeHintType, Object> map2;
        this.mBarcodeType = barcodeType;
        this.mHintMap = map;
        if (this.mBarcodeType != TbsSdkJava.CUSTOM || ((map2 = this.mHintMap) != null && !map2.isEmpty())) {
            setupReader();
            return;
        }
        throw new RuntimeException("barcodeType 为 BarcodeType.CUSTOM 时 hintMap 不能为空");
    }

    @Override // cn.bingoogolapple.qrcode.core.QRCodeView
    protected C0013d processBitmapData(Bitmap bitmap) {
        return new C0013d(QRCodeDecoder.syncDecodeQRCode(bitmap));
    }

    /* JADX WARN: Removed duplicated region for block: B:21:0x0077 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0078  */
    @Override // cn.bingoogolapple.qrcode.core.QRCodeView
    /* Code decompiled incorrectly, please refer to instructions dump */
    protected C0013d processData(byte[] bArr, int i, int i2, boolean z) {
        Rect rect;
        Result result;
        Exception e;
        PlanarYUVLuminanceSource planarYUVLuminanceSource;
        try {
            try {
                rect = this.mScanBoxView.m4918a(i2);
                try {
                    if (rect != null) {
                        planarYUVLuminanceSource = new PlanarYUVLuminanceSource(bArr, i, i2, rect.left, rect.top, rect.width(), rect.height(), false);
                    } else {
                        planarYUVLuminanceSource = new PlanarYUVLuminanceSource(bArr, i, i2, 0, 0, i, i2, false);
                    }
                    result = this.mMultiFormatReader.decodeWithState(new BinaryBitmap(new GlobalHistogramBinarizer(planarYUVLuminanceSource)));
                    if (result == null) {
                        try {
                            result = this.mMultiFormatReader.decodeWithState(new BinaryBitmap(new HybridBinarizer(planarYUVLuminanceSource)));
                            if (result != null) {
                                C0010a.m4897a("GlobalHistogramBinarizer 没识别到，HybridBinarizer 能识别到");
                            }
                        } catch (Exception e2) {
                            e = e2;
                            e.printStackTrace();
                            if (result != null) {
                            }
                        }
                    }
                } catch (Exception e3) {
                    e = e3;
                    result = null;
                }
            } catch (Exception e4) {
                e = e4;
                result = null;
                rect = null;
            }
            if (result != null) {
                return null;
            }
            String text = result.getText();
            if (TextUtils.isEmpty(text)) {
                return null;
            }
            BarcodeFormat barcodeFormat = result.getBarcodeFormat();
            C0010a.m4897a("格式为：" + barcodeFormat.name());
            boolean isNeedAutoZoom = isNeedAutoZoom(barcodeFormat);
            if (isShowLocationPoint() || isNeedAutoZoom) {
                ResultPoint[] resultPoints = result.getResultPoints();
                PointF[] pointFArr = new PointF[resultPoints.length];
                int i3 = 0;
                for (ResultPoint resultPoint : resultPoints) {
                    pointFArr[i3] = new PointF(resultPoint.getX(), resultPoint.getY());
                    i3++;
                }
                if (transformToViewCoordinates(pointFArr, rect, isNeedAutoZoom, text)) {
                    return null;
                }
            }
            return new C0013d(text);
        } finally {
            this.mMultiFormatReader.reset();
        }
    }

    private boolean isNeedAutoZoom(BarcodeFormat barcodeFormat) {
        return isAutoZoom() && barcodeFormat == BarcodeFormat.QR_CODE;
    }
}
