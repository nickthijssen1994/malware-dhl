package cn.com.union.fido.p003ui;

import android.annotation.TargetApi;
import android.app.Activity;
import android.hardware.fingerprint.FingerprintManager;
import android.os.Build;
import android.util.Base64;
import cn.com.union.fido.bean.SecCheckResult;
import cn.com.union.fido.bean.authenticator.RawKeyHandle;
import cn.com.union.fido.bean.authenticator.command.RegisterCommand;
import cn.com.union.fido.bean.authenticator.command.RegisterResponse;
import cn.com.union.fido.bean.authenticator.command.SignCommand;
import cn.com.union.fido.bean.authenticator.command.SignResponse;
import cn.com.union.fido.bean.authenticator.tag.TAG_ATTESTATION_BASIC_FULL;
import cn.com.union.fido.bean.authenticator.tag.TAG_ATTESTATION_BASIC_SURROGATE;
import cn.com.union.fido.bean.authenticator.tag.TAG_EXTENSION;
import cn.com.union.fido.bean.authenticator.tag.TAG_UAFV1_AUTH_ASSERTION;
import cn.com.union.fido.bean.authenticator.tag.TAG_UAFV1_KRD;
import cn.com.union.fido.bean.authenticator.tag.TAG_UAFV1_REG_ASSERTION;
import cn.com.union.fido.bean.authenticator.tag.TAG_UAFV1_SIGNED_DATA;
import cn.com.union.fido.bean.authenticator.tag.TAG_USERNAME_AND_KEYHANDLE;
import cn.com.union.fido.bean.uafclient.Operation;
import cn.com.union.fido.common.FingerAuthenticatorInfo;
import cn.com.union.fido.p002db.SignCounterManager;
import cn.com.union.fido.util.CryptoTools;
import cn.com.union.fido.util.StringTools;
import cn.com.union.fido.util.UAFTools;
import cn.com.union.fido.util.Utility;
import cn.com.union.fido.util.asn1.ASN1Set;
import cn.com.union.fido.util.asn1.x509.X509Name;
import cn.com.union.fido.util.p10.PKCS10CertificationRequest;
import com.jdcn.fido.utils.TrackerUtil;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

/* renamed from: cn.com.union.fido.ui.FidoSignUtil */
/* loaded from: classes.dex */
public class FidoSignUtil {
    private SignCommand signCommand = new SignCommand();
    private RegisterCommand registerCommand = new RegisterCommand();
    private List<RawKeyHandle> remainingKeyhandleList = new ArrayList();

    private void getKeyHandle(Activity activity, byte[] bArr) {
        this.signCommand.deserialize(bArr);
        this.remainingKeyhandleList = new ArrayList();
        for (String str : this.signCommand.keyHandles) {
            RawKeyHandle generateDecryptedKeyHandle = UAFTools.generateDecryptedKeyHandle(activity, str);
            if (generateDecryptedKeyHandle != null && generateDecryptedKeyHandle.KHAccessToken.equals(this.signCommand.khAccessToken)) {
                this.remainingKeyhandleList.add(generateDecryptedKeyHandle);
            }
        }
    }

    private PrivateKey getPrivateHandle(Activity activity, IAuthPresenter iAuthPresenter) {
        PrivateKey privateKey;
        if (iAuthPresenter.getOpType().equals(Operation.Reg.name())) {
            this.registerCommand.deserialize(iAuthPresenter.getFidoCmd());
            privateKey = UAFTools.genUAuthKeyPair(2, StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")), activity).getPrivate();
        } else {
            privateKey = null;
        }
        if (!iAuthPresenter.getOpType().equals(Operation.Auth.name())) {
            return privateKey;
        }
        getKeyHandle(activity, iAuthPresenter.getFidoCmd());
        if (this.remainingKeyhandleList.size() != 1) {
            return privateKey;
        }
        RawKeyHandle rawKeyHandle = this.remainingKeyhandleList.get(0);
        String str = rawKeyHandle.PrivateKey;
        return UAFTools.getUAuthPrivateKeyTEE(257, str, StringTools.urlSafeBase64Enc(CryptoTools.hash(rawKeyHandle.Username + "004B#0001" + this.signCommand.extensions.get(1).data, "SHA256")));
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r14v1, types: [byte[]] */
    /* JADX WARN: Type inference failed for: r14v11 */
    /* JADX WARN: Type inference failed for: r14v7 */
    /* JADX WARN: Type inference failed for: r14v9 */
    /* JADX WARN: Type inference failed for: r2v12, types: [byte[]] */
    /* JADX WARN: Type inference failed for: r3v10 */
    /* JADX WARN: Type inference failed for: r3v25 */
    /* JADX WARN: Type inference failed for: r3v35 */
    /* JADX WARN: Type inference failed for: r3v36 */
    /* JADX WARN: Type inference failed for: r3v37 */
    /* JADX WARN: Type inference failed for: r3v38, types: [cn.com.union.fido.bean.authenticator.tag.TAG_EXTENSION] */
    /* JADX WARN: Type inference failed for: r3v8, types: [cn.com.union.fido.bean.authenticator.tag.TAG_EXTENSION] */
    /* JADX WARN: Type inference failed for: r3v9 */
    /* JADX WARN: Unknown variable types count: 2 */
    @TargetApi(23)
    /* Code decompiled incorrectly, please refer to instructions dump */
    public RegisterResponse doRegProcess(Activity activity, FingerprintManager.CryptoObject cryptoObject, String str) {
        String str2;
        TAG_UAFV1_REG_ASSERTION tag_uafv1_reg_assertion;
        TAG_UAFV1_KRD tag_uafv1_krd;
        short s;
        byte[] bArr;
        ?? r3;
        KeyPair keyPair;
        Throwable th;
        ArrayList arrayList;
        byte[] bArr2;
        SignCounterManager signCounterManager = new SignCounterManager(activity);
        RegisterResponse registerResponse = new RegisterResponse();
        List<Short> list = FingerAuthenticatorInfo.attestationType;
        if (list == null || list.indexOf(Short.valueOf(this.registerCommand.attestationType)) != -1) {
            KeyPair uAuthKeyPairTEE = UAFTools.getUAuthKeyPairTEE(257, null, StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")));
            byte[] uAuthPublicKey = UAFTools.getUAuthPublicKey(257, uAuthKeyPairTEE);
            if (uAuthKeyPairTEE == null) {
                return null;
            }
            String keyString = CryptoTools.getKeyString(uAuthKeyPairTEE.getPrivate());
            RawKeyHandle rawKeyHandle = new RawKeyHandle();
            rawKeyHandle.KHAccessToken = this.registerCommand.khAccessToken;
            rawKeyHandle.PrivateKey = keyString;
            rawKeyHandle.Username = this.registerCommand.userName;
            String generateEncryptedKeyHandleReg = UAFTools.generateEncryptedKeyHandleReg(rawKeyHandle);
            TAG_UAFV1_KRD tag_uafv1_krd2 = new TAG_UAFV1_KRD();
            tag_uafv1_krd2.aaid = "004B#0001";
            tag_uafv1_krd2.authenticatorVersion = 1;
            tag_uafv1_krd2.authenticationMode = 1;
            tag_uafv1_krd2.signatureAlgAndEncoding = 2;
            tag_uafv1_krd2.publicKeyAlgAndEncoding = 257;
            tag_uafv1_krd2.finalChallenge = this.registerCommand.finalChallenge;
            String hash2Hex = CryptoTools.hash2Hex(generateEncryptedKeyHandleReg);
            if (hash2Hex == null) {
                return null;
            }
            tag_uafv1_krd2.keyID = hash2Hex.substring(0, 32);
            int updateOrAddCounter = signCounterManager.updateOrAddCounter("004B#0001", tag_uafv1_krd2.keyID, this.registerCommand.userName);
            if (-1 == updateOrAddCounter) {
                return null;
            }
            tag_uafv1_krd2.signCounter = updateOrAddCounter;
            tag_uafv1_krd2.regCounter = 0;
            tag_uafv1_krd2.publicKey = uAuthPublicKey;
            tag_uafv1_krd2.uvi = UAFTools.genUVI(tag_uafv1_krd2.keyID, str);
            byte[] serialize = tag_uafv1_krd2.serialize();
            TAG_UAFV1_REG_ASSERTION tag_uafv1_reg_assertion2 = new TAG_UAFV1_REG_ASSERTION();
            if (this.registerCommand.attestationType == 15879) {
                ArrayList arrayList2 = new ArrayList();
                try {
                    Signature signature = cryptoObject.getSignature();
                    if (Build.VERSION.SDK_INT > 29) {
                        Certificate[] certificateChain = CryptoTools.getCertificateChain(StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")));
                        if (certificateChain == null || certificateChain.length <= 0) {
                            return null;
                        }
                        for (Certificate certificate : certificateChain) {
                            arrayList2.add(Base64.encodeToString(((X509Certificate) certificate).getEncoded(), 0));
                        }
                        signature.update(serialize);
                        bArr2 = signature.sign();
                        arrayList = arrayList2;
                        tag_uafv1_reg_assertion = tag_uafv1_reg_assertion2;
                        tag_uafv1_krd = tag_uafv1_krd2;
                        str2 = generateEncryptedKeyHandleReg;
                        s = 0;
                    } else {
                        arrayList2.add("MIIBnTCCAUGgAwIBAgIIC+S/RaEbr1EwDAYIKoEcz1UBg3UFADAeMQswCQYDVQQGEwJDTjEPMA0GA1UEAwwGRklET0NBMB4XDTE3MTExNzAxMzYxM1oXDTIyMTExNzAxMzYxM1owJTELMAkGA1UEBhMCQ04xFjAUBgNVBAMMDWFuZHJvaWRmaW5nZXIwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAATGRZ63XzzbA++OkWDPbzRg4MluvVxHk94k0hAV6Kh15xReq9QY1QXiMGiYp5gT/hY4C/xiVcan9N57Cd6em1oQo2AwXjAdBgNVHQ4EFgQU2pipUzxMHVWvQebA9J70riuyHlwwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBRIeUDXNcO6ji3GLLfkl02nPSZJojAOBgNVHQ8BAf8EBAMCBwAwDAYIKoEcz1UBg3UFAANIADBFAiEAuu4dQGMgCIur0pq82bxqN51t+sZGqFxa/rJ1Up5NbMsCICJbkt3VB9vt5pPWrEz+bzWM/BuvzNR7OEdDcnNuRxJ5");
                        arrayList = arrayList2;
                        tag_uafv1_reg_assertion = tag_uafv1_reg_assertion2;
                        s = 0;
                        tag_uafv1_krd = tag_uafv1_krd2;
                        str2 = generateEncryptedKeyHandleReg;
                        SecCheckResult secCheck = new CryptoTools().secCheck(activity, activity.getFilesDir().getPath() + "/fidoTable", signature, StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")), Base64.decode(FingerAuthenticatorInfo.privateKey.getBytes("ISO-8859-1"), 10), null, serialize);
                        bArr2 = secCheck != null ? secCheck.signedData : null;
                    }
                    TAG_ATTESTATION_BASIC_FULL tag_attestation_basic_full = new TAG_ATTESTATION_BASIC_FULL();
                    tag_attestation_basic_full.signature = bArr2;
                    tag_attestation_basic_full.certificate = arrayList;
                    tag_uafv1_reg_assertion.attestationBasicFull = tag_attestation_basic_full;
                } catch (Throwable th2) {
                    TrackerUtil.appendException("SCENE_REG_SIG_EXCEPTION", th2);
                    return null;
                }
            } else {
                tag_uafv1_reg_assertion = tag_uafv1_reg_assertion2;
                tag_uafv1_krd = tag_uafv1_krd2;
                str2 = generateEncryptedKeyHandleReg;
                s = 0;
            }
            if (this.registerCommand.attestationType == 15880) {
                try {
                    Signature signature2 = cryptoObject.getSignature();
                    String str3 = activity.getFilesDir().getPath() + "/fidoTable";
                    try {
                        if ("true".equals(this.registerCommand.extensions.get(s).data)) {
                            X509Name x509Name = new X509Name("CN=" + rawKeyHandle.Username + ",O=cfca" + System.currentTimeMillis() + ",OU=cfca,C=CN");
                            PublicKey publicKey = uAuthKeyPairTEE.getPublic();
                            bArr = 0;
                            PKCS10CertificationRequest pKCS10CertificationRequest = new PKCS10CertificationRequest("SHA256withRSA", x509Name, publicKey, null);
                            SecCheckResult secCheck2 = new CryptoTools().secCheck(activity, str3, signature2, StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")), Base64.decode(FingerAuthenticatorInfo.privateKey.getBytes("ISO-8859-1"), 10), pKCS10CertificationRequest.getReqInfoEncoded(), serialize);
                            if (secCheck2 != null) {
                                ?? r2 = secCheck2.signedData;
                                try {
                                    pKCS10CertificationRequest.setSigBits(secCheck2.extraData);
                                    r3 = new TAG_EXTENSION();
                                    try {
                                        r3.f89id = "encrypt";
                                        r3.data = new String(Base64.encode(pKCS10CertificationRequest.getEncoded(), s));
                                        tag_uafv1_reg_assertion.extension = r3;
                                        bArr = r2;
                                    } catch (Throwable th3) {
                                        th = th3;
                                        keyPair = r2;
                                        th.printStackTrace();
                                        bArr = keyPair;
                                        TAG_ATTESTATION_BASIC_SURROGATE tag_attestation_basic_surrogate = new TAG_ATTESTATION_BASIC_SURROGATE();
                                        tag_attestation_basic_surrogate.signature = bArr;
                                        tag_uafv1_reg_assertion.attestationBasicSurrogate = tag_attestation_basic_surrogate;
                                        tag_uafv1_reg_assertion.extension = r3;
                                        tag_uafv1_reg_assertion.uafv1Krd = tag_uafv1_krd;
                                        registerResponse.statusCode = s;
                                        registerResponse.assertion = tag_uafv1_reg_assertion.serialize();
                                        registerResponse.keyHandle = str2;
                                        return registerResponse;
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    r3 = null;
                                }
                            } else {
                                r3 = null;
                            }
                        } else {
                            SecCheckResult secCheck3 = new CryptoTools().secCheck(activity, str3, signature2, StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")), Base64.decode(FingerAuthenticatorInfo.privateKey.getBytes("ISO-8859-1"), 10), null, serialize);
                            r3 = null;
                            bArr = secCheck3 != null ? secCheck3.signedData : null;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        r3 = uAuthKeyPairTEE;
                        keyPair = uAuthKeyPairTEE;
                        th.printStackTrace();
                        bArr = keyPair;
                        TAG_ATTESTATION_BASIC_SURROGATE tag_attestation_basic_surrogate2 = new TAG_ATTESTATION_BASIC_SURROGATE();
                        tag_attestation_basic_surrogate2.signature = bArr;
                        tag_uafv1_reg_assertion.attestationBasicSurrogate = tag_attestation_basic_surrogate2;
                        tag_uafv1_reg_assertion.extension = r3;
                        tag_uafv1_reg_assertion.uafv1Krd = tag_uafv1_krd;
                        registerResponse.statusCode = s;
                        registerResponse.assertion = tag_uafv1_reg_assertion.serialize();
                        registerResponse.keyHandle = str2;
                        return registerResponse;
                    }
                } catch (Throwable th6) {
                    th = th6;
                    uAuthKeyPairTEE = null;
                }
                TAG_ATTESTATION_BASIC_SURROGATE tag_attestation_basic_surrogate22 = new TAG_ATTESTATION_BASIC_SURROGATE();
                tag_attestation_basic_surrogate22.signature = bArr;
                tag_uafv1_reg_assertion.attestationBasicSurrogate = tag_attestation_basic_surrogate22;
                tag_uafv1_reg_assertion.extension = r3;
            }
            tag_uafv1_reg_assertion.uafv1Krd = tag_uafv1_krd;
            registerResponse.statusCode = s;
            registerResponse.assertion = tag_uafv1_reg_assertion.serialize();
            registerResponse.keyHandle = str2;
        } else {
            registerResponse.statusCode = 7;
        }
        return registerResponse;
    }

    @TargetApi(23)
    public SignResponse doSignProcess(Activity activity, FingerprintManager.CryptoObject cryptoObject, String str) {
        byte[] bArr;
        SignCounterManager signCounterManager = new SignCounterManager(activity);
        SignResponse signResponse = new SignResponse();
        String str2 = this.signCommand.transactionContent;
        List<TAG_EXTENSION> list = this.signCommand.extensions;
        if (this.remainingKeyhandleList.size() == 0) {
            signResponse.statusCode = 2;
        } else if (this.remainingKeyhandleList.size() > 1) {
            ArrayList arrayList = new ArrayList();
            for (RawKeyHandle rawKeyHandle : this.remainingKeyhandleList) {
                String str3 = rawKeyHandle.Username;
                String generateEncryptedKeyHandleAhth = UAFTools.generateEncryptedKeyHandleAhth(activity, rawKeyHandle);
                TAG_USERNAME_AND_KEYHANDLE tag_username_and_keyhandle = new TAG_USERNAME_AND_KEYHANDLE();
                tag_username_and_keyhandle.keyHandle = generateEncryptedKeyHandleAhth;
                tag_username_and_keyhandle.userName = str3;
                arrayList.add(tag_username_and_keyhandle);
            }
            signResponse.userNameAndKeyHandle = arrayList;
        } else if (this.remainingKeyhandleList.size() == 1) {
            RawKeyHandle rawKeyHandle2 = this.remainingKeyhandleList.get(0);
            String generateEncryptedKeyHandleAhth2 = UAFTools.generateEncryptedKeyHandleAhth(activity, rawKeyHandle2);
            TAG_UAFV1_SIGNED_DATA tag_uafv1_signed_data = new TAG_UAFV1_SIGNED_DATA();
            tag_uafv1_signed_data.authenticationMode = 1;
            if (StringTools.isValidateString(str2)) {
                tag_uafv1_signed_data.tcHash = CryptoTools.hash(str2, "SHA256");
                tag_uafv1_signed_data.authenticationMode = 2;
            }
            TAG_UAFV1_AUTH_ASSERTION tag_uafv1_auth_assertion = new TAG_UAFV1_AUTH_ASSERTION();
            tag_uafv1_signed_data.aaid = "004B#0001";
            tag_uafv1_signed_data.authenticatorVersion = 1;
            tag_uafv1_signed_data.signatureAlgAndEncoding = 2;
            tag_uafv1_signed_data.authnrNonce = CryptoTools.genRandom(8);
            tag_uafv1_signed_data.finalChallenge = this.signCommand.finalChallenge;
            TAG_EXTENSION tag_extension = null;
            if (tag_uafv1_signed_data.authenticationMode == 1) {
                tag_uafv1_signed_data.tcHash = null;
            }
            String hash2Hex = CryptoTools.hash2Hex(generateEncryptedKeyHandleAhth2);
            if (hash2Hex == null) {
                return null;
            }
            String substring = hash2Hex.substring(0, 32);
            tag_uafv1_signed_data.keyID = Utility.strToByte(substring);
            int updateOrAddCounter = signCounterManager.updateOrAddCounter("004B#0001", substring, rawKeyHandle2.Username);
            if (-1 == updateOrAddCounter) {
                return null;
            }
            tag_uafv1_signed_data.signCounter = updateOrAddCounter;
            tag_uafv1_signed_data.uvi = UAFTools.genUVI(substring, str);
            byte[] serialize = tag_uafv1_signed_data.serialize();
            try {
                String str4 = rawKeyHandle2.PrivateKey;
                KeyPair uAuthKeyPairTEE = UAFTools.getUAuthKeyPairTEE(257, str4, rawKeyHandle2.Username + "004B#0001");
                Signature signature = cryptoObject.getSignature();
                if (list == null || list.size() != 3) {
                    signature.update(serialize);
                } else if (Boolean.parseBoolean(list.get(2).data)) {
                    PKCS10CertificationRequest pKCS10CertificationRequest = new PKCS10CertificationRequest("SHA256withRSA", new X509Name("CN=" + rawKeyHandle2.Username + ",O=cfca" + System.currentTimeMillis() + ",OU=cfca,C=CN"), uAuthKeyPairTEE.getPublic(), (ASN1Set) null, signature);
                    TAG_EXTENSION tag_extension2 = new TAG_EXTENSION();
                    tag_extension2.f89id = "p10";
                    tag_extension2.data = new String(Base64.encode(pKCS10CertificationRequest.getEncoded(), 0));
                    tag_extension = tag_extension2;
                    bArr = null;
                    tag_uafv1_auth_assertion.signedData = tag_uafv1_signed_data;
                    tag_uafv1_auth_assertion.signature = bArr;
                    tag_uafv1_auth_assertion.extension = tag_extension;
                    signResponse.assertion = tag_uafv1_auth_assertion.serialize();
                    signResponse.statusCode = 0;
                } else {
                    signature.update(serialize);
                }
                bArr = signature.sign();
                tag_uafv1_auth_assertion.signedData = tag_uafv1_signed_data;
                tag_uafv1_auth_assertion.signature = bArr;
                tag_uafv1_auth_assertion.extension = tag_extension;
                signResponse.assertion = tag_uafv1_auth_assertion.serialize();
                signResponse.statusCode = 0;
            } catch (Throwable th) {
                TrackerUtil.appendException("SCENE_TRANS_SIG_EXCEPTION", th);
                return null;
            }
        }
        return signResponse;
    }

    @TargetApi(23)
    public FingerprintManager.CryptoObject genCryptoObject(Activity activity, IAuthPresenter iAuthPresenter) {
        Signature instance = Signature.getInstance("SHA256withECDSA");
        instance.initSign(getPrivateHandle(activity, iAuthPresenter));
        return new FingerprintManager.CryptoObject(instance);
    }
}
