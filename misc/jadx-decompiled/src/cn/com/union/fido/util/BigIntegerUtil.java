package cn.com.union.fido.util;

import java.math.BigInteger;

/* renamed from: cn.com.union.fido.util.BigIntegerUtil */
/* loaded from: classes.dex */
public class BigIntegerUtil {
    public static byte[] asUnsigned32ByteArray(BigInteger bigInteger) {
        return asUnsignedNByteArray(bigInteger, 32);
    }

    public static byte[] asUnsignedNByteArray(BigInteger bigInteger, int i) {
        if (bigInteger == null) {
            return null;
        }
        byte[] bArr = new byte[i];
        int length = bigInteger.toByteArray().length;
        int i2 = i + 1;
        if (length > i2) {
            return null;
        }
        if (length != i2) {
            System.arraycopy(bigInteger.toByteArray(), 0, bArr, i - length, length);
            return bArr;
        } else if (bigInteger.toByteArray()[0] != 0) {
            return null;
        } else {
            System.arraycopy(bigInteger.toByteArray(), 1, bArr, 0, i);
            return bArr;
        }
    }

    public static BigInteger toPositiveInteger(byte[] bArr) {
        if (bArr == null) {
            return null;
        }
        if (bArr[0] < 0) {
            byte[] bArr2 = new byte[bArr.length + 1];
            bArr2[0] = 0;
            System.arraycopy(bArr, 0, bArr2, 1, bArr2.length - 1);
            bArr = bArr2;
        }
        return new BigInteger(bArr);
    }
}
