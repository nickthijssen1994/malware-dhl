package cn.com.union.fido.p002db;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import cn.com.union.fido.bean.p001db.AuthenticationEntity;
import cn.com.union.fido.p002db.help.SQLiteHelper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* renamed from: cn.com.union.fido.db.AuthenticationManager */
/* loaded from: classes.dex */
public class AuthenticationManager {

    /* renamed from: db */
    private SQLiteDatabase f96db;
    private SQLiteHelper helper;

    public AuthenticationManager(Context context) {
        this.helper = SQLiteHelper.getInstance(context);
        this.f96db = this.helper.getWritableDatabase();
    }

    public void add(AuthenticationEntity authenticationEntity) {
        this.f96db.beginTransaction();
        try {
            SQLiteDatabase sQLiteDatabase = this.f96db;
            StringBuilder sb = new StringBuilder("INSERT INTO ");
            this.helper.getClass();
            sb.append("authentication VALUES(null, ?, ?, ?, ?, ?, ?, ?, ?)");
            sQLiteDatabase.execSQL(sb.toString(), new Object[]{authenticationEntity.getCallerID(), authenticationEntity.getAppID(), authenticationEntity.getKeyHandle(), authenticationEntity.getKeyID(), authenticationEntity.getCurrentTimestamp(), authenticationEntity.getStatus(), authenticationEntity.getAaid(), authenticationEntity.getUserName()});
            this.f96db.setTransactionSuccessful();
        } finally {
            this.f96db.endTransaction();
        }
    }

    public int delEntityByAaid(String str, String str2) {
        SQLiteDatabase sQLiteDatabase = this.f96db;
        this.helper.getClass();
        return sQLiteDatabase.delete("authentication", "aaid = ? and keyID = ?", new String[]{str, str2});
    }

    public int delEntityByAppID(String str, String str2) {
        SQLiteDatabase sQLiteDatabase = this.f96db;
        this.helper.getClass();
        return sQLiteDatabase.delete("authentication", "appID = ? and keyID = ?", new String[]{str, str2});
    }

    public List<AuthenticationEntity> getAll() {
        ArrayList arrayList = new ArrayList();
        SQLiteDatabase sQLiteDatabase = this.f96db;
        StringBuilder sb = new StringBuilder("SELECT * FROM ");
        this.helper.getClass();
        sb.append("authentication");
        Cursor rawQuery = sQLiteDatabase.rawQuery(sb.toString(), null);
        while (rawQuery.moveToNext()) {
            AuthenticationEntity authenticationEntity = new AuthenticationEntity();
            authenticationEntity.setCallerID(rawQuery.getString(rawQuery.getColumnIndex("callerID")));
            authenticationEntity.setAppID(rawQuery.getString(rawQuery.getColumnIndex("appID")));
            authenticationEntity.setKeyHandle(rawQuery.getString(rawQuery.getColumnIndex("keyHandle")));
            authenticationEntity.setKeyID(rawQuery.getString(rawQuery.getColumnIndex("keyID")));
            authenticationEntity.setCurrentTimestamp(rawQuery.getString(rawQuery.getColumnIndex("currentTimestamp")));
            authenticationEntity.setStatus(rawQuery.getString(rawQuery.getColumnIndex("status")));
            authenticationEntity.setAaid(rawQuery.getString(rawQuery.getColumnIndex("aaid")));
            authenticationEntity.setUserName(rawQuery.getString(rawQuery.getColumnIndex("userName")));
            arrayList.add(authenticationEntity);
        }
        rawQuery.close();
        return arrayList;
    }

    /* JADX WARN: Code restructure failed: missing block: B:12:0x003a, code lost:
        if (r1 != null) goto L_0x002f;
     */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x003d, code lost:
        return r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:6:0x002d, code lost:
        if (r1 != null) goto L_0x002f;
     */
    /* JADX WARN: Code restructure failed: missing block: B:7:0x002f, code lost:
        r1.close();
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public int getCountByUserName(String str) {
        int i = -1;
        Cursor cursor = null;
        try {
            SQLiteDatabase sQLiteDatabase = this.f96db;
            StringBuilder sb = new StringBuilder("SELECT count(*) FROM ");
            this.helper.getClass();
            sb.append("authentication WHERE userName = ?");
            cursor = sQLiteDatabase.rawQuery(sb.toString(), new String[]{str});
            if (cursor.moveToNext()) {
                i = cursor.getInt(0);
            }
        } catch (Throwable th) {
            if (cursor != null) {
                cursor.close();
            }
            throw th;
        }
    }

    public AuthenticationEntity getEntity(String str, String str2) {
        Cursor cursor;
        Throwable th;
        AuthenticationEntity authenticationEntity;
        try {
            authenticationEntity = new AuthenticationEntity();
            SQLiteDatabase sQLiteDatabase = this.f96db;
            StringBuilder sb = new StringBuilder("SELECT * FROM ");
            this.helper.getClass();
            sb.append("authentication WHERE appID = ? and keyID = ? and status = ? ");
            cursor = sQLiteDatabase.rawQuery(sb.toString(), new String[]{str, str2, "ready"});
        } catch (Throwable th2) {
            th = th2;
            cursor = null;
        }
        try {
            if (cursor.moveToNext()) {
                authenticationEntity.setAppID(str);
                authenticationEntity.setCallerID(cursor.getString(cursor.getColumnIndex("callerID")));
                authenticationEntity.setAppID(cursor.getString(cursor.getColumnIndex("appID")));
                authenticationEntity.setKeyHandle(cursor.getString(cursor.getColumnIndex("keyHandle")));
                authenticationEntity.setKeyID(str2);
                authenticationEntity.setCurrentTimestamp(cursor.getString(cursor.getColumnIndex("currentTimestamp")));
                authenticationEntity.setStatus(cursor.getString(cursor.getColumnIndex("status")));
                authenticationEntity.setAaid(cursor.getString(cursor.getColumnIndex("aaid")));
                authenticationEntity.setUserName(cursor.getString(cursor.getColumnIndex("userName")));
            }
            if (cursor != null) {
                cursor.close();
            }
            return authenticationEntity;
        } catch (Throwable unused) {
            if (cursor == null) {
                return null;
            }
            cursor.close();
            return null;
        }
    }

    public Map<String, List<String>> getRegistrations(String str, String str2) {
        SQLiteDatabase sQLiteDatabase = this.f96db;
        this.helper.getClass();
        Cursor query = sQLiteDatabase.query("authentication", new String[]{"appID", "keyID"}, "callerID = ? and aaid = ? and status = ?", new String[]{str, str2, "ready"}, null, null, null);
        HashMap hashMap = new HashMap();
        while (query.moveToNext()) {
            String string = query.getString(query.getColumnIndex("appID"));
            String string2 = query.getString(query.getColumnIndex("keyID"));
            if (hashMap.get(string) == null) {
                hashMap.put(string, new ArrayList());
            }
            ((List) hashMap.get(string)).add(string2);
        }
        query.close();
        return hashMap;
    }

    public void updateStatus(AuthenticationEntity authenticationEntity) {
        ContentValues contentValues = new ContentValues();
        contentValues.put("status", authenticationEntity.getStatus());
        SQLiteDatabase sQLiteDatabase = this.f96db;
        this.helper.getClass();
        sQLiteDatabase.update("authentication", contentValues, "aaid = ? and keyID = ?", new String[]{authenticationEntity.getAaid(), authenticationEntity.getKeyID()});
    }
}
