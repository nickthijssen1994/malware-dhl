#version 100

precision mediump float;

uniform sampler2D texture;
varying vec2 texCoord;
uniform bool useSolidColor;
uniform vec4 solidColor;

uniform float opacity;
uniform bool block;
uniform float blockLeft;
uniform float blockRight;
uniform float blockTop;
uniform float blockBottom;
uniform vec4 blockColor;

uniform float offsetTop;
uniform float offsetBottom;
uniform float offsetRight;
uniform float offsetLeft;

varying vec2 alphaMaskTexCoord;
uniform bool isMasked;

void main() {
    bool showBlock = block &&
                     texCoord.x >= blockLeft && texCoord.x < blockRight &&
                     texCoord.y >= blockBottom && texCoord.y < blockTop;
    // make sure outbound of texture pixels is transparent
    bool clearColor = texCoord.y > offsetTop || texCoord.y < offsetBottom || texCoord.x > offsetRight || texCoord.x < offsetLeft;
    vec4 texColor = texture2D(texture, texCoord) * vec4(!useSolidColor) + solidColor * vec4(useSolidColor);
    vec4 clearedColor = texColor * vec4(!clearColor);
    // Division by zero will not fail OpenGL but cause unspecified behaviour.
    // However, it is acceptable as the 4th component of the vector will be 0 anyway.
    vec4 premultipliedColor = vec4(clearedColor.rgb / clearedColor.a, clearedColor.a * opacity);
    vec4 fragColor = premultipliedColor * vec4(!showBlock) + blockColor * vec4(showBlock);

    vec4 mask = texture2D(texture, alphaMaskTexCoord) * vec4(isMasked) + fragColor * vec4(!isMasked);
    fragColor.a = mask.a;

    gl_FragColor = fragColor;
}
