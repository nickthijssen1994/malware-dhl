package org.org.union.fido.helpers;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.org.union.fido.bean.parts.AuthenticationEntity;
import org.org.union.fido.helpers.help.SQLiteHelper;

public class AuthenticationManager
{
  private SQLiteDatabase db;
  private SQLiteHelper helper;
  
  public AuthenticationManager(Context paramContext)
  {
    helper = SQLiteHelper.getInstance(paramContext);
    db = helper.getWritableDatabase();
  }
  
  public int delEntityByAaid(String paramString1, String paramString2)
  {
    SQLiteDatabase localSQLiteDatabase = db;
    helper.getClass();
    return localSQLiteDatabase.delete("authentication", "aaid = ? and keyID = ?", new String[] { paramString1, paramString2 });
  }
  
  public int delEntityByAppID(String paramString1, String paramString2)
  {
    SQLiteDatabase localSQLiteDatabase = db;
    helper.getClass();
    return localSQLiteDatabase.delete("authentication", "appID = ? and keyID = ?", new String[] { paramString1, paramString2 });
  }
  
  public List getAll()
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject1 = db;
    Object localObject2 = new StringBuilder("SELECT * FROM ");
    helper.getClass();
    ((StringBuilder)localObject2).append("authentication");
    localObject1 = ((SQLiteDatabase)localObject1).rawQuery(((StringBuilder)localObject2).toString(), null);
    while (((Cursor)localObject1).moveToNext())
    {
      localObject2 = new AuthenticationEntity();
      ((AuthenticationEntity)localObject2).setCallerID(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("callerID")));
      ((AuthenticationEntity)localObject2).setAppID(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("appID")));
      ((AuthenticationEntity)localObject2).setKeyHandle(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("keyHandle")));
      ((AuthenticationEntity)localObject2).setKeyID(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("keyID")));
      ((AuthenticationEntity)localObject2).setCurrentTimestamp(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("currentTimestamp")));
      ((AuthenticationEntity)localObject2).setStatus(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("status")));
      ((AuthenticationEntity)localObject2).setAaid(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("aaid")));
      ((AuthenticationEntity)localObject2).setUserName(((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("userName")));
      localArrayList.add(localObject2);
    }
    ((Cursor)localObject1).close();
    return localArrayList;
  }
  
  public int getCountByUserName(String paramString)
  {
    int j = -1;
    Cursor localCursor = null;
    Object localObject = localCursor;
    for (;;)
    {
      try
      {
        SQLiteDatabase localSQLiteDatabase = db;
        localObject = localCursor;
        StringBuilder localStringBuilder = new StringBuilder("SELECT count(*) FROM ");
        localObject = localCursor;
        helper.getClass();
        localObject = localCursor;
        localStringBuilder.append("authentication WHERE userName = ?");
        localObject = localCursor;
        localCursor = localSQLiteDatabase.rawQuery(localStringBuilder.toString(), new String[] { paramString });
        paramString = localCursor;
        localObject = paramString;
        boolean bool = localCursor.moveToNext();
        i = j;
        if (bool)
        {
          localObject = paramString;
          i = localCursor.getInt(0);
        }
        if (localCursor == null) {
          continue;
        }
        paramString.close();
        return i;
      }
      catch (Throwable paramString)
      {
        int i;
        continue;
      }
      if (localObject == null) {
        break label144;
      }
      i = j;
      paramString = (String)localObject;
    }
    return i;
    label144:
    return -1;
  }
  
  public AuthenticationEntity getEntity(String paramString1, String paramString2)
  {
    for (;;)
    {
      try
      {
        localAuthenticationEntity = new AuthenticationEntity();
        localObject1 = db;
        localObject2 = new StringBuilder("SELECT * FROM ");
        helper.getClass();
        ((StringBuilder)localObject2).append("authentication WHERE appID = ? and keyID = ? and status = ? ");
        localObject2 = ((SQLiteDatabase)localObject1).rawQuery(((StringBuilder)localObject2).toString(), new String[] { paramString1, paramString2, "ready" });
        localObject1 = localObject2;
      }
      catch (Throwable paramString1)
      {
        AuthenticationEntity localAuthenticationEntity;
        Object localObject1;
        Object localObject2;
        boolean bool;
        continue;
      }
      try
      {
        bool = ((Cursor)localObject2).moveToNext();
        if (bool)
        {
          localAuthenticationEntity.setAppID(paramString1);
          localAuthenticationEntity.setCallerID(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("callerID")));
          localAuthenticationEntity.setAppID(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("appID")));
          localAuthenticationEntity.setKeyHandle(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("keyHandle")));
          localAuthenticationEntity.setKeyID(paramString2);
          localAuthenticationEntity.setCurrentTimestamp(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("currentTimestamp")));
          localAuthenticationEntity.setStatus(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("status")));
          localAuthenticationEntity.setAaid(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("aaid")));
          localAuthenticationEntity.setUserName(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("userName")));
        }
        if (localObject2 != null) {
          ((Cursor)localObject2).close();
        }
        return localAuthenticationEntity;
      }
      catch (Throwable paramString1) {}
    }
    localObject1 = null;
    if (localObject1 != null)
    {
      ((Cursor)localObject1).close();
      return null;
    }
    return null;
  }
  
  public Map getRegistrations(String paramString1, String paramString2)
  {
    Object localObject = db;
    helper.getClass();
    paramString1 = ((SQLiteDatabase)localObject).query("authentication", new String[] { "appID", "keyID" }, "callerID = ? and aaid = ? and status = ?", new String[] { paramString1, paramString2, "ready" }, null, null, null);
    paramString2 = new HashMap();
    while (paramString1.moveToNext())
    {
      localObject = paramString1.getString(paramString1.getColumnIndex("appID"));
      String str = paramString1.getString(paramString1.getColumnIndex("keyID"));
      if (paramString2.get(localObject) == null) {
        paramString2.put(localObject, new ArrayList());
      }
      ((List)paramString2.get(localObject)).add(str);
    }
    paramString1.close();
    return paramString2;
  }
  
  public void init(AuthenticationEntity paramAuthenticationEntity)
  {
    db.beginTransaction();
    try
    {
      SQLiteDatabase localSQLiteDatabase = db;
      StringBuilder localStringBuilder = new StringBuilder("INSERT INTO ");
      helper.getClass();
      localStringBuilder.append("authentication VALUES(null, ?, ?, ?, ?, ?, ?, ?, ?)");
      localSQLiteDatabase.execSQL(localStringBuilder.toString(), new Object[] { paramAuthenticationEntity.getCallerID(), paramAuthenticationEntity.getAppID(), paramAuthenticationEntity.getKeyHandle(), paramAuthenticationEntity.getKeyID(), paramAuthenticationEntity.getCurrentTimestamp(), paramAuthenticationEntity.getStatus(), paramAuthenticationEntity.getAaid(), paramAuthenticationEntity.getUserName() });
      db.setTransactionSuccessful();
      db.endTransaction();
      return;
    }
    catch (Throwable paramAuthenticationEntity)
    {
      db.endTransaction();
      throw paramAuthenticationEntity;
    }
  }
  
  public void updateStatus(AuthenticationEntity paramAuthenticationEntity)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("status", paramAuthenticationEntity.getStatus());
    SQLiteDatabase localSQLiteDatabase = db;
    helper.getClass();
    localSQLiteDatabase.update("authentication", localContentValues, "aaid = ? and keyID = ?", new String[] { paramAuthenticationEntity.getAaid(), paramAuthenticationEntity.getKeyID() });
  }
}
