package org.org.union.fido.helpers.help;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

public class SQLiteHelper
  extends SQLiteOpenHelper
{
  private static final String DATABASE_NAME = "fidounion.db";
  private static final int DATABASE_VERSION = 1;
  private static SQLiteHelper mInstance;
  private final String CREATE_TABLE_AUTHENTICATION = "CREATE TABLE authentication(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, callerID VARCHAR, appID VARCHAR, keyHandle VARCHAR, keyID VARCHAR, currentTimestamp VARCHAR, status VARCHAR, aaid VARCHAR, userName VARCHAR)";
  private final String CREATE_TABLE_SIGNCOUNTER = "CREATE TABLE signcounter(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, aaid VARCHAR, keyID VARCHAR, userName VARCHAR,signCounter INTEGER)";
  private final String CREATE_TABLE_USERKEY = "CREATE TABLE userkey(_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,keyhandle VARCHAR(200) NOT NULL,pubkey VARCHAR(200) NOT NULL,privkey VARCHAR(200) NOT NULL) ";
  public final String TABLE_AUTHENTICATION = "authentication";
  public final String TABLE_SIGNCOUNTER = "signcounter";
  public final String TABLE_USERKEY = "userkey";
  
  private SQLiteHelper(Context paramContext)
  {
    this(paramContext, "fidounion.db", null, 1);
  }
  
  private SQLiteHelper(Context paramContext, int paramInt)
  {
    this(paramContext, "fidounion.db", null, paramInt);
  }
  
  private SQLiteHelper(Context paramContext, String paramString, SQLiteDatabase.CursorFactory paramCursorFactory, int paramInt)
  {
    super(paramContext, paramString, paramCursorFactory, paramInt);
  }
  
  public static SQLiteHelper getInstance(Context paramContext)
  {
    try
    {
      if (mInstance == null) {
        mInstance = new SQLiteHelper(paramContext);
      }
      paramContext = mInstance;
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("CREATE TABLE userkey(_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,keyhandle VARCHAR(200) NOT NULL,pubkey VARCHAR(200) NOT NULL,privkey VARCHAR(200) NOT NULL) ");
    paramSQLiteDatabase.execSQL("CREATE TABLE authentication(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, callerID VARCHAR, appID VARCHAR, keyHandle VARCHAR, keyID VARCHAR, currentTimestamp VARCHAR, status VARCHAR, aaid VARCHAR, userName VARCHAR)");
    paramSQLiteDatabase.execSQL("CREATE TABLE signcounter(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, aaid VARCHAR, keyID VARCHAR, userName VARCHAR,signCounter INTEGER)");
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2) {}
  
  public void recreateAuthenticationTable(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS CREATE TABLE authentication(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, callerID VARCHAR, appID VARCHAR, keyHandle VARCHAR, keyID VARCHAR, currentTimestamp VARCHAR, status VARCHAR, aaid VARCHAR, userName VARCHAR)");
    paramSQLiteDatabase.execSQL("CREATE TABLE authentication(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, callerID VARCHAR, appID VARCHAR, keyHandle VARCHAR, keyID VARCHAR, currentTimestamp VARCHAR, status VARCHAR, aaid VARCHAR, userName VARCHAR)");
  }
  
  public void recreateSigncounterTable(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS CREATE TABLE signcounter(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, aaid VARCHAR, keyID VARCHAR, userName VARCHAR,signCounter INTEGER)");
    paramSQLiteDatabase.execSQL("CREATE TABLE signcounter(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, aaid VARCHAR, keyID VARCHAR, userName VARCHAR,signCounter INTEGER)");
  }
  
  public void recreateUserKeyTable(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS userkey");
    paramSQLiteDatabase.execSQL("CREATE TABLE userkey(_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,keyhandle VARCHAR(200) NOT NULL,pubkey VARCHAR(200) NOT NULL,privkey VARCHAR(200) NOT NULL) ");
  }
}
