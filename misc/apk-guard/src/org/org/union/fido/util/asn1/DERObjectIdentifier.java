package org.org.union.fido.util.asn1;

import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.math.BigInteger;

public class DERObjectIdentifier
  extends ASN1Object
{
  String identifier;
  
  public DERObjectIdentifier(String paramString)
  {
    if (isValidIdentifier(paramString))
    {
      identifier = paramString;
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder("string ");
    localStringBuilder.append(paramString);
    localStringBuilder.append(" not an OID");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  DERObjectIdentifier(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject1 = null;
    long l2 = 0L;
    int k = 0;
    int j;
    for (int i = 1; k != paramArrayOfByte.length; i = j)
    {
      int m = paramArrayOfByte[k] & 0xFF;
      if (l2 < 36028797018963968L)
      {
        long l1 = l2 * 128L + (m & 0x7F);
        localObject2 = localObject1;
        l2 = l1;
        j = i;
        if ((m & 0x80) != 0) {
          break label285;
        }
        l2 = l1;
        j = i;
        if (i != 0)
        {
          switch ((int)l1 / 40)
          {
          default: 
            localStringBuffer.append('2');
          case 1: 
            for (l2 = 80L;; l2 = 40L)
            {
              l1 -= l2;
              break;
              localStringBuffer.append('1');
            }
          }
          localStringBuffer.append('0');
          j = 0;
          l2 = l1;
        }
        localStringBuffer.append('.');
        localStringBuffer.append(l2);
        i = j;
      }
      else
      {
        localObject2 = localObject1;
        if (localObject1 == null) {
          localObject2 = BigInteger.valueOf(l2);
        }
        localObject1 = ((BigInteger)localObject2).shiftLeft(7).or(BigInteger.valueOf(m & 0x7F));
        localObject2 = localObject1;
        j = i;
        if ((m & 0x80) != 0) {
          break label285;
        }
        localStringBuffer.append('.');
        localStringBuffer.append(localObject1);
        localObject1 = null;
      }
      l2 = 0L;
      j = i;
      Object localObject2 = localObject1;
      label285:
      k += 1;
      localObject1 = localObject2;
    }
    identifier = localStringBuffer.toString();
  }
  
  public static DERObjectIdentifier getInstance(Object paramObject)
  {
    while ((paramObject != null) && (!(paramObject instanceof DERObjectIdentifier)))
    {
      if ((paramObject instanceof ASN1OctetString)) {
        return new DERObjectIdentifier(((ASN1OctetString)paramObject).getOctets());
      }
      if ((paramObject instanceof ASN1TaggedObject))
      {
        paramObject = ((ASN1TaggedObject)paramObject).getObject();
      }
      else
      {
        StringBuilder localStringBuilder = new StringBuilder("illegal object in getInstance: ");
        localStringBuilder.append(paramObject.getClass().getName());
        throw new IllegalArgumentException(localStringBuilder.toString());
      }
    }
    return (DERObjectIdentifier)paramObject;
  }
  
  public static DERObjectIdentifier getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  private static boolean isValidIdentifier(String paramString)
  {
    if (paramString.length() >= 3)
    {
      if (paramString.charAt(1) != '.') {
        return false;
      }
      int i = paramString.charAt(0);
      if (i >= 48)
      {
        if (i > 50) {
          return false;
        }
        i = paramString.length() - 1;
        boolean bool = false;
        while (i >= 2)
        {
          int j = paramString.charAt(i);
          if ((48 <= j) && (j <= 57))
          {
            bool = true;
          }
          else
          {
            if (j != 46) {
              break label98;
            }
            if (!bool) {
              return false;
            }
            bool = false;
          }
          i -= 1;
          continue;
          label98:
          return false;
        }
        return bool;
      }
    }
    return false;
  }
  
  private void writeField(OutputStream paramOutputStream, long paramLong)
  {
    if (paramLong >= 128L)
    {
      if (paramLong >= 16384L)
      {
        if (paramLong >= 2097152L)
        {
          if (paramLong >= 268435456L)
          {
            if (paramLong >= 34359738368L)
            {
              if (paramLong >= 4398046511104L)
              {
                if (paramLong >= 562949953421312L)
                {
                  if (paramLong >= 72057594037927936L) {
                    paramOutputStream.write((int)(paramLong >> 56) | 0x80);
                  }
                  paramOutputStream.write((int)(paramLong >> 49) | 0x80);
                }
                paramOutputStream.write((int)(paramLong >> 42) | 0x80);
              }
              paramOutputStream.write((int)(paramLong >> 35) | 0x80);
            }
            paramOutputStream.write((int)(paramLong >> 28) | 0x80);
          }
          paramOutputStream.write((int)(paramLong >> 21) | 0x80);
        }
        paramOutputStream.write((int)(paramLong >> 14) | 0x80);
      }
      paramOutputStream.write((int)(paramLong >> 7) | 0x80);
    }
    paramOutputStream.write((int)paramLong & 0x7F);
  }
  
  private void writeField(OutputStream paramOutputStream, BigInteger paramBigInteger)
  {
    int i = (paramBigInteger.bitLength() + 6) / 7;
    if (i == 0)
    {
      paramOutputStream.write(0);
      return;
    }
    byte[] arrayOfByte = new byte[i];
    int j = i - 1;
    i = j;
    while (i >= 0)
    {
      arrayOfByte[i] = ((byte)(paramBigInteger.intValue() & 0x7F | 0x80));
      paramBigInteger = paramBigInteger.shiftRight(7);
      i -= 1;
    }
    arrayOfByte[j] = ((byte)(arrayOfByte[j] & 0x7F));
    paramOutputStream.write(arrayOfByte);
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DERObjectIdentifier)) {
      return false;
    }
    return identifier.equals(identifier);
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    OIDTokenizer localOIDTokenizer = new OIDTokenizer(identifier);
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    DEROutputStream localDEROutputStream = new DEROutputStream(localByteArrayOutputStream);
    long l = Integer.parseInt(localOIDTokenizer.nextToken()) * 40 + Integer.parseInt(localOIDTokenizer.nextToken());
    writeField(localByteArrayOutputStream, l);
    for (;;)
    {
      if (!localOIDTokenizer.hasMoreTokens()) {
        break label114;
      }
      String str = localOIDTokenizer.nextToken();
      if (str.length() < 18)
      {
        l = Long.parseLong(str);
        break;
      }
      writeField(localByteArrayOutputStream, new BigInteger(str));
    }
    label114:
    localDEROutputStream.close();
    paramDEROutputStream.writeEncoded(6, localByteArrayOutputStream.toByteArray());
  }
  
  public String getId()
  {
    return identifier;
  }
  
  public int hashCode()
  {
    return identifier.hashCode();
  }
  
  public String toString()
  {
    return getId();
  }
}
