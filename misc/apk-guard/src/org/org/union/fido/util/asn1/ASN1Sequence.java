package org.org.union.fido.util.asn1;

import java.util.Enumeration;
import java.util.Vector;

public abstract class ASN1Sequence
  extends ASN1Object
{
  private Vector seq = new Vector();
  
  public ASN1Sequence() {}
  
  public static ASN1Sequence getInstance(Object paramObject)
  {
    if ((paramObject != null) && (!(paramObject instanceof ASN1Sequence)))
    {
      StringBuilder localStringBuilder = new StringBuilder("unknown object in getInstance: ");
      localStringBuilder.append(paramObject.getClass().getName());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return (ASN1Sequence)paramObject;
  }
  
  public static ASN1Sequence getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    if (paramBoolean) {
      if (!paramASN1TaggedObject.isExplicit()) {}
    }
    do
    {
      return (ASN1Sequence)paramASN1TaggedObject.getObject();
      throw new IllegalArgumentException("object implicit - explicit expected.");
      if (paramASN1TaggedObject.isExplicit())
      {
        if ((paramASN1TaggedObject instanceof BERTaggedObject)) {
          return new BERSequence(paramASN1TaggedObject.getObject());
        }
        return new DERSequence(paramASN1TaggedObject.getObject());
      }
    } while ((paramASN1TaggedObject.getObject() instanceof ASN1Sequence));
    StringBuilder localStringBuilder = new StringBuilder("unknown object in getInstance: ");
    localStringBuilder.append(paramASN1TaggedObject.getClass().getName());
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  protected void addObject(DEREncodable paramDEREncodable)
  {
    seq.addElement(paramDEREncodable);
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof ASN1Sequence)) {
      return false;
    }
    Object localObject = (ASN1Sequence)paramDERObject;
    if (size() != ((ASN1Sequence)localObject).size()) {
      return false;
    }
    paramDERObject = getObjects();
    localObject = ((ASN1Sequence)localObject).getObjects();
    while (paramDERObject.hasMoreElements())
    {
      DERObject localDERObject1 = ((DEREncodable)paramDERObject.nextElement()).getDERObject();
      DERObject localDERObject2 = ((DEREncodable)((Enumeration)localObject).nextElement()).getDERObject();
      if (localDERObject1 != localDERObject2)
      {
        if (localDERObject1 == null) {
          break label100;
        }
        if (!localDERObject1.equals(localDERObject2)) {
          return false;
        }
      }
    }
    return true;
    label100:
    return false;
  }
  
  abstract void encode(DEROutputStream paramDEROutputStream);
  
  public DEREncodable getObjectAt(int paramInt)
  {
    return (DEREncodable)seq.elementAt(paramInt);
  }
  
  public Enumeration getObjects()
  {
    return seq.elements();
  }
  
  public int hashCode()
  {
    Enumeration localEnumeration = getObjects();
    int i = size();
    while (localEnumeration.hasMoreElements())
    {
      Object localObject = localEnumeration.nextElement();
      int j = i * 17;
      i = j;
      if (localObject != null) {
        i = j ^ localObject.hashCode();
      }
    }
    return i;
  }
  
  public ASN1SequenceParser parser()
  {
    return new ASN1Sequence.1(this, this);
  }
  
  public int size()
  {
    return seq.size();
  }
  
  public String toString()
  {
    return seq.toString();
  }
}
