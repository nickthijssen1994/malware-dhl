package org.org.union.fido.util.asn1;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.org.union.fido.util.asn1.util.Arrays;

public class DERBitString
  extends ASN1Object
  implements DERString
{
  private static final char[] table = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
  protected byte[] data;
  protected int padBits;
  
  protected DERBitString(byte paramByte, int paramInt)
  {
    data = new byte[1];
    data[0] = paramByte;
    padBits = paramInt;
  }
  
  public DERBitString(DEREncodable paramDEREncodable)
  {
    try
    {
      paramDEREncodable = paramDEREncodable.getDERObject().getEncoded("DER");
      data = paramDEREncodable;
      padBits = 0;
      return;
    }
    catch (IOException paramDEREncodable)
    {
      StringBuilder localStringBuilder = new StringBuilder("Error processing object : ");
      localStringBuilder.append(paramDEREncodable.toString());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
  }
  
  public DERBitString(byte[] paramArrayOfByte)
  {
    this(paramArrayOfByte, 0);
  }
  
  public DERBitString(byte[] paramArrayOfByte, int paramInt)
  {
    data = paramArrayOfByte;
    padBits = paramInt;
  }
  
  protected static byte[] getBytes(int paramInt)
  {
    int i = 4;
    int j = 3;
    while ((j > 0) && ((255 << j * 8 & paramInt) == 0))
    {
      i -= 1;
      j -= 1;
    }
    byte[] arrayOfByte = new byte[i];
    j = 0;
    while (j < i)
    {
      arrayOfByte[j] = ((byte)(paramInt >> j * 8 & 0xFF));
      j += 1;
    }
    return arrayOfByte;
  }
  
  public static DERBitString getInstance(Object paramObject)
  {
    for (;;)
    {
      localObject = paramObject;
      if (paramObject == null) {
        break label119;
      }
      boolean bool = paramObject instanceof DERBitString;
      if (bool)
      {
        localObject = paramObject;
        break label119;
      }
      if ((paramObject instanceof ASN1OctetString))
      {
        paramObject = ((ASN1OctetString)paramObject).getOctets();
        int i = paramObject[0];
        localObject = new byte[paramObject.length - 1];
        System.arraycopy(paramObject, 1, localObject, 0, paramObject.length - 1);
        return new DERBitString((byte[])localObject, i);
      }
      if (!(paramObject instanceof ASN1TaggedObject)) {
        break;
      }
      paramObject = ((ASN1TaggedObject)paramObject).getObject();
    }
    Object localObject = new StringBuilder("illegal object in getInstance: ");
    ((StringBuilder)localObject).append(paramObject.getClass().getName());
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    label119:
    return (DERBitString)localObject;
  }
  
  public static DERBitString getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  protected static int getPadBits(int paramInt)
  {
    int i = 3;
    while (i >= 0)
    {
      if (i != 0)
      {
        int j = paramInt >> i * 8;
        if (j != 0)
        {
          paramInt = j & 0xFF;
          break label52;
        }
      }
      else if (paramInt != 0)
      {
        paramInt &= 0xFF;
        break label52;
      }
      i -= 1;
    }
    paramInt = 0;
    label52:
    if (paramInt == 0) {
      return 7;
    }
    i = 1;
    for (;;)
    {
      paramInt <<= 1;
      if ((paramInt & 0xFF) == 0) {
        break;
      }
      i += 1;
    }
    return 8 - i;
  }
  
  protected boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DERBitString)) {
      return false;
    }
    paramDERObject = (DERBitString)paramDERObject;
    return (padBits == padBits) && (Arrays.areEqual(data, data));
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    byte[] arrayOfByte = new byte[getBytes().length + 1];
    arrayOfByte[0] = ((byte)getPadBits());
    System.arraycopy(getBytes(), 0, arrayOfByte, 1, arrayOfByte.length - 1);
    paramDEROutputStream.writeEncoded(3, arrayOfByte);
  }
  
  public byte[] getBytes()
  {
    return data;
  }
  
  public int getPadBits()
  {
    return padBits;
  }
  
  public String getString()
  {
    StringBuffer localStringBuffer = new StringBuffer("#");
    Object localObject = new ByteArrayOutputStream();
    ASN1OutputStream localASN1OutputStream = new ASN1OutputStream((OutputStream)localObject);
    try
    {
      localASN1OutputStream.writeObject(this);
      localObject = ((ByteArrayOutputStream)localObject).toByteArray();
      int i = 0;
      while (i != localObject.length)
      {
        localStringBuffer.append(table[(localObject[i] >>> 4 & 0xF)]);
        localStringBuffer.append(table[(localObject[i] & 0xF)]);
        i += 1;
      }
      return localStringBuffer.toString();
    }
    catch (IOException localIOException)
    {
      for (;;) {}
    }
    throw new RuntimeException("internal error encoding BitString");
  }
  
  public int hashCode()
  {
    return padBits ^ Arrays.hashCode(data);
  }
  
  public int intValue()
  {
    int i = 0;
    int j = 0;
    for (;;)
    {
      byte[] arrayOfByte = data;
      if ((i == arrayOfByte.length) || (i == 4)) {
        break;
      }
      j |= (arrayOfByte[i] & 0xFF) << i * 8;
      i += 1;
    }
    return j;
  }
  
  public String toString()
  {
    return getString();
  }
}
