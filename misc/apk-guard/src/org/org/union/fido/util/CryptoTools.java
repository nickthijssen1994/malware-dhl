package org.org.union.fido.util;

import android.content.Context;
import android.os.Build.VERSION;
import android.security.KeyPairGeneratorSpec.Builder;
import android.security.keystore.KeyGenParameterSpec.Builder;
import android.text.TextUtils;
import java.math.BigInteger;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.RSAKeyGenParameterSpec;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.security.auth.x500.X500Principal;
import org.org.union.fido.bean.SecCheckResult;
import org.org.union.fido.util.asn1.ASN1Encodable;
import org.org.union.fido.util.asn1.ASN1EncodableVector;
import org.org.union.fido.util.asn1.DEREncodableVector;
import org.org.union.fido.util.asn1.DERInteger;
import org.org.union.fido.util.asn1.DERSequence;

public class CryptoTools
{
  static
  {
    try
    {
      System.loadLibrary("cnsse");
      return;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
    }
  }
  
  public CryptoTools() {}
  
  public static byte[] decrypt(String paramString1, String paramString2)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      try
      {
        SecretKey localSecretKey = getKeyInTee(paramString1);
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
        localCipher.init(2, localSecretKey, new IvParameterSpec(paramString1.substring(0, 16).getBytes()));
        paramString1 = localCipher.doFinal(StringTools.urlSafeBase64Dec(paramString2));
        return paramString1;
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] decrypt(byte[] paramArrayOfByte, PrivateKey paramPrivateKey)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      try
      {
        Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        localCipher.init(2, paramPrivateKey);
        localCipher.update(paramArrayOfByte);
        paramArrayOfByte = localCipher.doFinal();
        return paramArrayOfByte;
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static void delKeyInTee(String paramString)
  {
    try
    {
      KeyStore localKeyStore = KeyStore.getInstance("AndroidKeyStore");
      localKeyStore.load(null);
      localKeyStore.deleteEntry(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static byte[] doHash(byte[] paramArrayOfByte, String paramString)
  {
    try
    {
      paramString = MessageDigest.getInstance(paramString);
      paramString.update(paramArrayOfByte);
      paramArrayOfByte = paramString.digest();
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return null;
  }
  
  public static byte[] doSignData(PrivateKey paramPrivateKey, String paramString, byte[] paramArrayOfByte)
  {
    try
    {
      paramString = Signature.getInstance(paramString);
      paramString.initSign(paramPrivateKey);
      paramString.update(paramArrayOfByte);
      paramPrivateKey = paramString.sign();
      return paramPrivateKey;
    }
    catch (Exception paramPrivateKey)
    {
      paramPrivateKey.printStackTrace();
    }
    return null;
  }
  
  public static byte[] doSignDataTee(PrivateKey paramPrivateKey, String paramString, byte[] paramArrayOfByte)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      try
      {
        paramString = Signature.getInstance(paramString);
        paramString.initSign(paramPrivateKey);
        paramString.update(paramArrayOfByte);
        paramPrivateKey = paramString.sign();
        return paramPrivateKey;
      }
      catch (Exception paramPrivateKey)
      {
        paramPrivateKey.printStackTrace();
      }
    }
    return null;
  }
  
  public static String encrypt(String paramString, byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject = null;
    if (Build.VERSION.SDK_INT >= 23) {}
    try
    {
      localObject = getKeyInTee(paramString);
      Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
      localCipher.init(1, (Key)localObject, new IvParameterSpec(paramString.substring(0, 16).getBytes()));
      localObject = localCipher.doFinal(paramArrayOfByte);
      localStringBuffer.append(StringTools.urlSafeBase64Enc((byte[])localObject));
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return localStringBuffer.toString();
  }
  
  public static byte[] encrypt(byte[] paramArrayOfByte, PublicKey paramPublicKey)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      try
      {
        Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        localCipher.init(1, paramPublicKey);
        localCipher.update(paramArrayOfByte);
        paramArrayOfByte = localCipher.doFinal();
        return paramArrayOfByte;
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static KeyPair genAsymmetricKey(String paramString, int paramInt)
  {
    try
    {
      paramString = KeyPairGenerator.getInstance(paramString);
      paramString.initialize(paramInt);
      paramString = paramString.genKeyPair();
      return paramString;
    }
    catch (Exception paramString)
    {
      throw paramString;
    }
  }
  
  public static KeyPair genECKeyTee(String paramString1, String paramString2, boolean paramBoolean, int paramInt, Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= 23) {}
    try
    {
      Object localObject = new KeyGenParameterSpec.Builder(paramString2, 4);
      ((KeyGenParameterSpec.Builder)localObject).setDigests(new String[] { "SHA-256" });
      ((KeyGenParameterSpec.Builder)localObject).setAlgorithmParameterSpec(new ECGenParameterSpec(paramString1));
      if (paramBoolean)
      {
        ((KeyGenParameterSpec.Builder)localObject).setUserAuthenticationRequired(true);
        if (paramInt > 0) {
          ((KeyGenParameterSpec.Builder)localObject).setUserAuthenticationValidityDurationSeconds(paramInt);
        }
      }
      if (Build.VERSION.SDK_INT > 29) {
        ((KeyGenParameterSpec.Builder)localObject).setAttestationChallenge("change".getBytes());
      }
      paramString1 = KeyPairGenerator.getInstance("EC", "AndroidKeyStore");
      paramString1.initialize(((KeyGenParameterSpec.Builder)localObject).build());
      paramString1 = paramString1.generateKeyPair();
      break label116;
      paramString1 = null;
      label116:
      if ((Build.VERSION.SDK_INT >= 19) && (Build.VERSION.SDK_INT < 23))
      {
        paramString1 = new GregorianCalendar();
        localObject = new GregorianCalendar();
        ((Calendar)localObject).add(1, 100);
        paramContext = new KeyPairGeneratorSpec.Builder(paramContext).setAlias(paramString2);
        StringBuilder localStringBuilder = new StringBuilder("CN=");
        localStringBuilder.append(paramString2);
        paramString2 = paramContext.setSubject(new X500Principal(localStringBuilder.toString()));
        paramContext = BigInteger.ONE;
        paramString1 = paramString2.setSerialNumber(paramContext).setStartDate(paramString1.getTime()).setEndDate(((Calendar)localObject).getTime()).setKeySize(256).setKeyType("EC").build();
        paramString2 = KeyPairGenerator.getInstance("RSA", "AndroidKeyStore");
        paramString2.initialize(paramString1);
        paramString1 = paramString2.generateKeyPair();
        return paramString1;
      }
    }
    catch (Exception paramString1)
    {
      throw paramString1;
    }
    return paramString1;
  }
  
  public static KeyPair genRSAKeyTee(int paramInt1, String paramString, boolean paramBoolean, int paramInt2, Context paramContext)
  {
    int i = Build.VERSION.SDK_INT;
    Object localObject1 = null;
    if (i >= 23) {}
    try
    {
      localObject1 = new KeyGenParameterSpec.Builder(paramString, 4);
      ((KeyGenParameterSpec.Builder)localObject1).setDigests(new String[] { "SHA-256" });
      ((KeyGenParameterSpec.Builder)localObject1).setAlgorithmParameterSpec(new RSAKeyGenParameterSpec(paramInt1, null));
      ((KeyGenParameterSpec.Builder)localObject1).setSignaturePaddings(new String[] { "PKCS1" });
      if (paramBoolean)
      {
        ((KeyGenParameterSpec.Builder)localObject1).setUserAuthenticationRequired(true);
        if (paramInt2 > 0) {
          ((KeyGenParameterSpec.Builder)localObject1).setUserAuthenticationValidityDurationSeconds(paramInt2);
        }
      }
      Object localObject2 = KeyPairGenerator.getInstance("RSA", "AndroidKeyStore");
      ((KeyPairGenerator)localObject2).initialize(((KeyGenParameterSpec.Builder)localObject1).build());
      localObject1 = ((KeyPairGenerator)localObject2).generateKeyPair();
      if ((Build.VERSION.SDK_INT >= 18) && (Build.VERSION.SDK_INT < 23))
      {
        localObject1 = new GregorianCalendar();
        localObject2 = new GregorianCalendar();
        ((Calendar)localObject2).add(1, 100);
        paramContext = new KeyPairGeneratorSpec.Builder(paramContext).setAlias(paramString);
        StringBuilder localStringBuilder = new StringBuilder("CN=");
        localStringBuilder.append(paramString);
        paramString = paramContext.setSubject(new X500Principal(localStringBuilder.toString()));
        paramContext = BigInteger.ONE;
        paramString = paramString.setSerialNumber(paramContext).setStartDate(((Calendar)localObject1).getTime()).setEndDate(((Calendar)localObject2).getTime()).setKeySize(paramInt1).setKeyType("RSA").build();
        paramContext = KeyPairGenerator.getInstance("RSA", "AndroidKeyStore");
        paramContext.initialize(paramString);
        paramString = paramContext.generateKeyPair();
        return paramString;
      }
    }
    catch (Exception paramString)
    {
      throw paramString;
    }
    return localObject1;
  }
  
  public static byte[] genRandom(int paramInt)
  {
    Object localObject2 = null;
    Object localObject1;
    if (paramInt > 0)
    {
      byte[] arrayOfByte2;
      if (Build.VERSION.SDK_INT >= 23)
      {
        arrayOfByte2 = new byte[paramInt];
        localObject1 = localObject2;
      }
      try
      {
        SecureRandom localSecureRandom = SecureRandom.getInstance("SHA1PRNG");
        localObject1 = localObject2;
        arrayOfByte1 = localSecureRandom.generateSeed(paramInt);
        localObject2 = arrayOfByte1;
        localObject1 = localObject2;
        localSecureRandom.setSeed(arrayOfByte1);
        localObject1 = localObject2;
        localSecureRandom.nextBytes(arrayOfByte2);
        return arrayOfByte1;
      }
      catch (Exception localException)
      {
        byte[] arrayOfByte1;
        localException.printStackTrace();
        return localObject1;
      }
      arrayOfByte1 = new byte[paramInt];
      localObject1 = localObject2;
      SecureRandom.getInstance("SHA1PRNG").nextBytes(arrayOfByte1);
      return null;
    }
    return null;
  }
  
  public static Key genSymmetryKey(String paramString, int paramInt)
  {
    try
    {
      paramString = KeyGenerator.getInstance(paramString);
      paramString.init(paramInt);
      paramString = paramString.generateKey();
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  private static SecretKey genSymmetryKeyTee(String paramString, boolean paramBoolean, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 23) {}
    try
    {
      KeyGenerator localKeyGenerator = KeyGenerator.getInstance("AES", "AndroidKeyStore");
      paramString = new KeyGenParameterSpec.Builder(paramString, 3);
      paramString.setBlockModes(new String[] { "CBC" });
      paramString.setRandomizedEncryptionRequired(false);
      paramString.setEncryptionPaddings(new String[] { "PKCS7Padding" });
      if (paramBoolean)
      {
        paramString.setUserAuthenticationRequired(true);
        if (paramInt > 0) {
          paramString.setUserAuthenticationValidityDurationSeconds(paramInt);
        }
      }
      localKeyGenerator.init(paramString.build());
      paramString = localKeyGenerator.generateKey();
      return paramString;
    }
    catch (Exception paramString)
    {
      throw paramString;
    }
    return null;
  }
  
  public static Certificate[] getCertificateChain(String paramString)
  {
    try
    {
      KeyStore localKeyStore = KeyStore.getInstance("AndroidKeyStore");
      localKeyStore.load(null);
      paramString = localKeyStore.getCertificateChain(paramString);
      return paramString;
    }
    catch (Throwable paramString) {}
    return null;
  }
  
  public static byte[] getDERRSAPublicKey(KeyPair paramKeyPair)
  {
    try
    {
      paramKeyPair = paramKeyPair.getPublic();
      Object localObject = (RSAPublicKey)paramKeyPair;
      paramKeyPair = ((RSAPublicKey)localObject).getModulus();
      localObject = ((RSAPublicKey)localObject).getPublicExponent();
      ASN1EncodableVector localASN1EncodableVector = new ASN1EncodableVector();
      localASN1EncodableVector.add(new DERInteger(paramKeyPair));
      localASN1EncodableVector.add(new DERInteger((BigInteger)localObject));
      paramKeyPair = new DERSequence(localASN1EncodableVector).getEncoded("DER");
      return paramKeyPair;
    }
    catch (Exception paramKeyPair)
    {
      throw paramKeyPair;
    }
  }
  
  public static SecretKey getKeyInTee(String paramString)
  {
    Object localObject2 = null;
    if (Build.VERSION.SDK_INT >= 23) {
      try
      {
        Object localObject1 = KeyStore.getInstance("AndroidKeyStore");
        ((KeyStore)localObject1).load(null);
        localObject1 = ((KeyStore)localObject1).getKey(paramString, null);
        localObject1 = (SecretKey)localObject1;
        if (localObject1 == null) {
          try
          {
            paramString = genSymmetryKeyTee(paramString, false, 0);
            return paramString;
          }
          catch (Exception localException2)
          {
            paramString = (String)localObject1;
            localObject1 = localException2;
          }
        } else {
          return localObject1;
        }
      }
      catch (Exception localException1)
      {
        paramString = localException2;
        localException1.printStackTrace();
        return paramString;
      }
    }
    return null;
  }
  
  public static String getKeyString(Key paramKey)
  {
    paramKey = paramKey.getEncoded();
    if ((paramKey != null) && (paramKey.length != 0)) {
      return StringTools.urlSafeBase64Enc(paramKey);
    }
    paramKey = new StringBuilder("TEEPrivateKey");
    paramKey.append(Math.random());
    return paramKey.toString();
  }
  
  public static PrivateKey getPrivateKeyInTee(String paramString)
  {
    try
    {
      KeyStore localKeyStore = KeyStore.getInstance("AndroidKeyStore");
      localKeyStore.load(null);
      localKeyStore.containsAlias(paramString);
      paramString = localKeyStore.getKey(paramString, null);
      return (PrivateKey)paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static KeyPair getPrivateKeyPairInTee(String paramString)
  {
    try
    {
      KeyStore localKeyStore = KeyStore.getInstance("AndroidKeyStore");
      localKeyStore.load(null);
      Object localObject = localKeyStore.getKey(paramString, null);
      localObject = (PrivateKey)localObject;
      paramString = localKeyStore.getCertificate(paramString).getPublicKey();
      paramString = new KeyPair(paramString, (PrivateKey)localObject);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static PublicKey getPublicKeyInTee(String paramString)
  {
    try
    {
      KeyStore localKeyStore = KeyStore.getInstance("AndroidKeyStore");
      localKeyStore.load(null);
      paramString = localKeyStore.getCertificate(paramString).getPublicKey();
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static byte[] getRAWECPublicKey(KeyPair paramKeyPair)
  {
    try
    {
      paramKeyPair = paramKeyPair.getPublic();
      paramKeyPair = (ECPublicKey)paramKeyPair;
      Object localObject = paramKeyPair.getW();
      paramKeyPair = BigIntegerUtil.asUnsigned32ByteArray(((ECPoint)localObject).getAffineX());
      localObject = BigIntegerUtil.asUnsigned32ByteArray(((ECPoint)localObject).getAffineY());
      byte[] arrayOfByte = new byte[65];
      arrayOfByte[0] = 4;
      System.arraycopy(paramKeyPair, 0, arrayOfByte, 1, 32);
      System.arraycopy(localObject, 0, arrayOfByte, 33, 32);
      return arrayOfByte;
    }
    catch (Exception paramKeyPair)
    {
      throw paramKeyPair;
    }
  }
  
  public static byte[] getRAWRSAPublicKey(KeyPair paramKeyPair)
  {
    try
    {
      paramKeyPair = paramKeyPair.getPublic();
      Object localObject = (RSAPublicKey)paramKeyPair;
      paramKeyPair = BigIntegerUtil.asUnsignedNByteArray(((RSAPublicKey)localObject).getModulus(), 256);
      localObject = ((RSAPublicKey)localObject).getPublicExponent().toByteArray();
      int i = paramKeyPair.length;
      int j = localObject.length;
      byte[] arrayOfByte = Arrays.copyOf(paramKeyPair, i + j);
      i = paramKeyPair.length;
      j = localObject.length;
      System.arraycopy(localObject, 0, arrayOfByte, i, j);
      return arrayOfByte;
    }
    catch (Exception paramKeyPair)
    {
      throw paramKeyPair;
    }
  }
  
  public static byte[] hash(String paramString1, String paramString2)
  {
    if (StringTools.isValidateString(paramString1)) {
      return doHash(paramString1.getBytes(), paramString2);
    }
    return null;
  }
  
  public static String hash2Hex(String paramString)
  {
    if (StringTools.isValidateString(paramString)) {
      paramString = doHash(paramString.getBytes(), "SHA256");
    } else {
      paramString = null;
    }
    if ((paramString != null) && (paramString.length > 0))
    {
      StringBuilder localStringBuilder = new StringBuilder(paramString.length * 2);
      int j = paramString.length;
      int i = 0;
      while (i < j)
      {
        int k = paramString[i] & 0xFF;
        if (k < 16) {
          localStringBuilder.append("0");
        }
        localStringBuilder.append(Integer.toHexString(k));
        i += 1;
      }
      return localStringBuilder.toString();
    }
    return null;
  }
  
  public static boolean secretKeyDetection(String paramString)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString);
      if ((!bool) && (Build.VERSION.SDK_INT >= 23))
      {
        KeyStore localKeyStore = KeyStore.getInstance("AndroidKeyStore");
        localKeyStore.load(null);
        bool = localKeyStore.containsAlias(paramString);
        if (bool) {
          return true;
        }
      }
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return false;
  }
  
  public static byte[] signData(PrivateKey paramPrivateKey, String paramString1, String paramString2)
  {
    if (StringTools.isValidateString(paramString2)) {
      return doSignData(paramPrivateKey, paramString1, paramString2.getBytes());
    }
    return null;
  }
  
  public static byte[] signDataTee(PrivateKey paramPrivateKey, String paramString1, String paramString2)
  {
    if (StringTools.isValidateString(paramString2)) {
      return doSignDataTee(paramPrivateKey, paramString1, paramString2.getBytes());
    }
    return null;
  }
  
  public static SecretKey unwrap(byte[] paramArrayOfByte, PrivateKey paramPrivateKey)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      try
      {
        Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        localCipher.init(4, paramPrivateKey);
        paramArrayOfByte = localCipher.unwrap(paramArrayOfByte, "AES", 3);
        return (SecretKey)paramArrayOfByte;
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] wrap(SecretKey paramSecretKey, PublicKey paramPublicKey)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      try
      {
        Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        localCipher.init(3, paramPublicKey);
        paramSecretKey = localCipher.wrap(paramSecretKey);
        return paramSecretKey;
      }
      catch (Exception paramSecretKey)
      {
        paramSecretKey.printStackTrace();
      }
    }
    return null;
  }
  
  public native SecCheckResult secCheck(Context paramContext, String paramString1, Signature paramSignature, String paramString2, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3);
}
