package org.org.union.fido.util.asn1.pkcs;

import org.org.union.fido.util.asn1.ASN1Encodable;
import org.org.union.fido.util.asn1.ASN1EncodableVector;
import org.org.union.fido.util.asn1.ASN1Sequence;
import org.org.union.fido.util.asn1.DERBitString;
import org.org.union.fido.util.asn1.DEREncodableVector;
import org.org.union.fido.util.asn1.DERObject;
import org.org.union.fido.util.asn1.DERSequence;
import org.org.union.fido.util.asn1.x509.AlgorithmIdentifier;

public class CertificationRequest
  extends ASN1Encodable
{
  protected CertificationRequestInfo reqInfo = null;
  protected AlgorithmIdentifier sigAlgId = null;
  protected DERBitString sigBits = null;
  
  protected CertificationRequest() {}
  
  public CertificationRequest(ASN1Sequence paramASN1Sequence)
  {
    reqInfo = CertificationRequestInfo.getInstance(paramASN1Sequence.getObjectAt(0));
    sigAlgId = AlgorithmIdentifier.getInstance(paramASN1Sequence.getObjectAt(1));
    sigBits = ((DERBitString)paramASN1Sequence.getObjectAt(2));
  }
  
  public CertificationRequest(CertificationRequestInfo paramCertificationRequestInfo, AlgorithmIdentifier paramAlgorithmIdentifier, DERBitString paramDERBitString)
  {
    reqInfo = paramCertificationRequestInfo;
    sigAlgId = paramAlgorithmIdentifier;
    sigBits = paramDERBitString;
  }
  
  public static CertificationRequest getInstance(Object paramObject)
  {
    if ((paramObject instanceof CertificationRequest)) {
      return (CertificationRequest)paramObject;
    }
    if ((paramObject instanceof ASN1Sequence)) {
      return new CertificationRequest((ASN1Sequence)paramObject);
    }
    StringBuilder localStringBuilder = new StringBuilder("Invalid object: ");
    localStringBuilder.append(paramObject.getClass().getName());
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public CertificationRequestInfo getCertificationRequestInfo()
  {
    return reqInfo;
  }
  
  public DERBitString getSignature()
  {
    return sigBits;
  }
  
  public AlgorithmIdentifier getSignatureAlgorithm()
  {
    return sigAlgId;
  }
  
  public DERObject toASN1Object()
  {
    ASN1EncodableVector localASN1EncodableVector = new ASN1EncodableVector();
    localASN1EncodableVector.add(reqInfo);
    localASN1EncodableVector.add(sigAlgId);
    localASN1EncodableVector.add(sigBits);
    return new DERSequence(localASN1EncodableVector);
  }
}
