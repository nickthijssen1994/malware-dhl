package org.org.union.fido.util;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class Utility
{
  public Utility() {}
  
  public static byte[] byteMerger(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    byte[] arrayOfByte = new byte[paramArrayOfByte1.length + paramArrayOfByte2.length];
    System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
    System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, paramArrayOfByte1.length, paramArrayOfByte2.length);
    return arrayOfByte;
  }
  
  public static int byteToInt(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (paramArrayOfByte.length >= paramInt2)
    {
      int i = paramInt1 + 3;
      if (i < paramInt2) {
        return (paramArrayOfByte[paramInt1] & 0xFF) + (paramArrayOfByte[(paramInt1 + 1)] << 8 & 0xFF00) + (paramArrayOfByte[(paramInt1 + 2)] << 16 & 0xFF0000) + (paramArrayOfByte[i] << 24 & 0xFF000000);
      }
    }
    return 0;
  }
  
  public static long byteToLong(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (paramArrayOfByte.length >= paramInt2)
    {
      int i = paramInt1 + 7;
      if (i < paramInt2)
      {
        long l1 = paramArrayOfByte[i];
        long l2 = paramArrayOfByte[(paramInt1 + 6)];
        long l3 = paramArrayOfByte[(paramInt1 + 5)];
        long l4 = paramArrayOfByte[(paramInt1 + 4)];
        long l5 = paramArrayOfByte[(paramInt1 + 3)];
        long l6 = paramArrayOfByte[(paramInt1 + 2)];
        long l7 = paramArrayOfByte[(paramInt1 + 1)];
        return (paramArrayOfByte[(paramInt1 + 0)] & 0xFF) << 0 | (l1 & 0xFF) << 56 | (l2 & 0xFF) << 48 | (l3 & 0xFF) << 40 | (l4 & 0xFF) << 32 | (l5 & 0xFF) << 24 | (l6 & 0xFF) << 16 | (l7 & 0xFF) << 8;
      }
    }
    return 0L;
  }
  
  public static int byteToShort(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (paramArrayOfByte.length >= paramInt2)
    {
      int i = paramInt1 + 1;
      if (i < paramInt2) {
        return (paramArrayOfByte[paramInt1] & 0xFF) + (paramArrayOfByte[i] << 8 & 0xFF00);
      }
    }
    return 0;
  }
  
  public static String byteToStr(byte[] paramArrayOfByte)
  {
    int m = paramArrayOfByte.length;
    if (paramArrayOfByte.length >= m)
    {
      byte[] arrayOfByte = new byte[m + 0];
      int n = arrayOfByte.length;
      int k = 0;
      int j = 0;
      int i = 0;
      while (j < n)
      {
        arrayOfByte[i] = 0;
        j += 1;
        i += 1;
      }
      n = paramArrayOfByte.length;
      j = 0;
      i = k;
      while (i < n)
      {
        if ((j >= 0) && (j < m)) {
          arrayOfByte[(j + 0)] = paramArrayOfByte[j];
        } else {
          if (j >= m) {
            break;
          }
        }
        j += 1;
        i += 1;
      }
      return new String(arrayOfByte);
    }
    return null;
  }
  
  public static String byteToStr(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (paramArrayOfByte.length >= paramInt2)
    {
      byte[] arrayOfByte = new byte[paramInt2 - paramInt1];
      int m = arrayOfByte.length;
      int k = 0;
      int j = 0;
      int i = 0;
      while (j < m)
      {
        arrayOfByte[i] = 0;
        j += 1;
        i += 1;
      }
      m = paramArrayOfByte.length;
      j = 0;
      i = k;
      while (i < m)
      {
        if ((j >= paramInt1) && (j < paramInt2)) {
          arrayOfByte[(j - paramInt1)] = paramArrayOfByte[j];
        } else {
          if (j >= paramInt2) {
            break;
          }
        }
        j += 1;
        i += 1;
      }
      return new String(arrayOfByte);
    }
    return null;
  }
  
  public static int byteToTiny(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if ((paramArrayOfByte.length >= paramInt2) && (paramInt1 < paramInt2)) {
      return paramArrayOfByte[paramInt1] & 0xFF;
    }
    return 0;
  }
  
  public static String bytes2HexString(byte[] paramArrayOfByte)
  {
    String str = "";
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      Object localObject2 = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      Object localObject1 = localObject2;
      if (((String)localObject2).length() == 1)
      {
        localObject1 = new StringBuilder("0");
        ((StringBuilder)localObject1).append((String)localObject2);
        localObject1 = ((StringBuilder)localObject1).toString();
      }
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append(str);
      ((StringBuilder)localObject2).append(((String)localObject1).toUpperCase());
      str = ((StringBuilder)localObject2).toString();
      i += 1;
    }
    return str;
  }
  
  public static String bytes2String(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int j = paramArrayOfByte.length;
    int i = 0;
    while (i < j)
    {
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      Object localObject = str;
      if (str.length() == 1)
      {
        localObject = new StringBuilder("0");
        ((StringBuilder)localObject).append(str);
        localObject = ((StringBuilder)localObject).toString();
      }
      localStringBuilder.append((String)localObject);
      i += 1;
    }
    return localStringBuilder.toString();
  }
  
  public static void intToByte(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
  {
    paramArrayOfByte[paramInt1] = ((byte)(paramInt3 & 0xFF));
    paramArrayOfByte[(paramInt1 + 1)] = ((byte)((0xFF00 & paramInt3) >> 8));
    paramArrayOfByte[(paramInt1 + 2)] = ((byte)((0xFF0000 & paramInt3) >> 16));
    paramArrayOfByte[(paramInt1 + 3)] = ((byte)((0xFF000000 & paramInt3) >> 24));
  }
  
  public static void longToByte(byte[] paramArrayOfByte, int paramInt1, int paramInt2, long paramLong)
  {
    paramArrayOfByte[paramInt1] = ((byte)(int)(paramLong >> 0));
    paramArrayOfByte[(paramInt1 + 1)] = ((byte)(int)(paramLong >> 8));
    paramArrayOfByte[(paramInt1 + 2)] = ((byte)(int)(paramLong >> 16));
    paramArrayOfByte[(paramInt1 + 3)] = ((byte)(int)(paramLong >> 24));
    paramArrayOfByte[(paramInt1 + 4)] = ((byte)(int)(paramLong >> 32));
    paramArrayOfByte[(paramInt1 + 5)] = ((byte)(int)(paramLong >> 40));
    paramArrayOfByte[(paramInt1 + 6)] = ((byte)(int)(paramLong >> 48));
    paramArrayOfByte[(paramInt1 + 7)] = ((byte)(int)(paramLong >> 56));
  }
  
  public static void readAssestToSD(Context paramContext, String paramString)
  {
    try
    {
      boolean bool = new File(paramString).exists();
      if (bool) {
        return;
      }
      paramContext = paramContext.getResources().getAssets().open("fidoTable");
      paramString = new FileOutputStream(paramString);
      byte[] arrayOfByte = new byte['?'];
      for (;;)
      {
        int i = paramContext.read(arrayOfByte);
        if (i <= 0) {
          break;
        }
        paramString.write(arrayOfByte, 0, i);
      }
      paramString.flush();
      paramString.close();
      paramContext.close();
      return;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void shortToByte(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
  {
    paramArrayOfByte[paramInt1] = ((byte)(paramInt3 & 0xFF));
    paramArrayOfByte[(paramInt1 + 1)] = ((byte)((0xFF00 & paramInt3) >> 8));
  }
  
  public static void strToByte(byte[] paramArrayOfByte, int paramInt1, int paramInt2, String paramString)
  {
    if (StringTools.isValidateString(paramString)) {
      paramString = paramString.getBytes();
    } else {
      paramString = null;
    }
    if (paramString != null)
    {
      int k = paramString.length;
      int j = 0;
      int i = paramInt1;
      paramInt1 = j;
      while (paramInt1 < k)
      {
        paramArrayOfByte[i] = paramString[paramInt1];
        i += 1;
        if (i >= paramInt2) {
          break;
        }
        paramInt1 += 1;
      }
    }
  }
  
  public static byte[] strToByte(String paramString)
  {
    if (StringTools.isValidateString(paramString)) {
      return paramString.getBytes();
    }
    return null;
  }
  
  public static void tinyToByte(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
  {
    paramArrayOfByte[paramInt1] = ((byte)(paramInt3 & 0xFF));
    paramArrayOfByte[(paramInt1 + 1)] = ((byte)((0xFF00 & paramInt3) >> 8));
  }
}
