package org.org.union.fido.util.asn1;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;

public class DERGeneralizedTime
  extends ASN1Object
{
  String time;
  
  public DERGeneralizedTime(String paramString)
  {
    time = paramString;
    try
    {
      getDate();
      return;
    }
    catch (ParseException paramString)
    {
      StringBuilder localStringBuilder = new StringBuilder("invalid date string: ");
      localStringBuilder.append(paramString.getMessage());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
  }
  
  public DERGeneralizedTime(Date paramDate)
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss'Z'");
    localSimpleDateFormat.setTimeZone(new SimpleTimeZone(0, "Z"));
    time = localSimpleDateFormat.format(paramDate);
  }
  
  DERGeneralizedTime(byte[] paramArrayOfByte)
  {
    char[] arrayOfChar = new char[paramArrayOfByte.length];
    int i = 0;
    while (i != arrayOfChar.length)
    {
      arrayOfChar[i] = ((char)(paramArrayOfByte[i] & 0xFF));
      i += 1;
    }
    time = new String(arrayOfChar);
  }
  
  private String calculateGMTOffset()
  {
    String str = "+";
    Object localObject = TimeZone.getDefault();
    j = ((TimeZone)localObject).getRawOffset();
    i = j;
    if (j < 0)
    {
      str = "-";
      i = -j;
    }
    j = i / 3600000;
    int k = (i - j * 60 * 60 * 1000) / 60000;
    try
    {
      boolean bool = ((TimeZone)localObject).useDaylightTime();
      i = j;
      if (bool)
      {
        bool = ((TimeZone)localObject).inDaylightTime(getDate());
        i = j;
        if (bool)
        {
          bool = str.equals("+");
          if (bool) {
            i = 1;
          } else {
            i = -1;
          }
          i = j + i;
        }
      }
    }
    catch (ParseException localParseException)
    {
      for (;;)
      {
        i = j;
      }
    }
    localObject = new StringBuilder("GMT");
    ((StringBuilder)localObject).append(str);
    ((StringBuilder)localObject).append(convert(i));
    ((StringBuilder)localObject).append(":");
    ((StringBuilder)localObject).append(convert(k));
    return ((StringBuilder)localObject).toString();
  }
  
  private String convert(int paramInt)
  {
    if (paramInt < 10)
    {
      StringBuilder localStringBuilder = new StringBuilder("0");
      localStringBuilder.append(paramInt);
      return localStringBuilder.toString();
    }
    return Integer.toString(paramInt);
  }
  
  public static DERGeneralizedTime getInstance(Object paramObject)
  {
    if ((paramObject != null) && (!(paramObject instanceof DERGeneralizedTime)))
    {
      if ((paramObject instanceof ASN1OctetString)) {
        return new DERGeneralizedTime(((ASN1OctetString)paramObject).getOctets());
      }
      StringBuilder localStringBuilder = new StringBuilder("illegal object in getInstance: ");
      localStringBuilder.append(paramObject.getClass().getName());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return (DERGeneralizedTime)paramObject;
  }
  
  public static DERGeneralizedTime getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  private byte[] getOctets()
  {
    char[] arrayOfChar = time.toCharArray();
    byte[] arrayOfByte = new byte[arrayOfChar.length];
    int i = 0;
    while (i != arrayOfChar.length)
    {
      arrayOfByte[i] = ((byte)arrayOfChar[i]);
      i += 1;
    }
    return arrayOfByte;
  }
  
  private boolean hasFractionalSeconds()
  {
    return time.indexOf('.') == 14;
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DERGeneralizedTime)) {
      return false;
    }
    return time.equals(time);
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    paramDEROutputStream.writeEncoded(24, getOctets());
  }
  
  public Date getDate()
  {
    String str = time;
    SimpleDateFormat localSimpleDateFormat;
    if (str.endsWith("Z"))
    {
      if (hasFractionalSeconds()) {
        localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss.SSS'Z'");
      } else {
        localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss'Z'");
      }
      localObject1 = new SimpleTimeZone(0, "Z");
    }
    for (;;)
    {
      localSimpleDateFormat.setTimeZone((TimeZone)localObject1);
      break;
      if ((time.indexOf('-') <= 0) && (time.indexOf('+') <= 0))
      {
        if (hasFractionalSeconds()) {
          localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss.SSS");
        } else {
          localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        }
        localObject1 = new SimpleTimeZone(0, TimeZone.getDefault().getID());
      }
      else
      {
        str = getTime();
        if (hasFractionalSeconds()) {
          localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss.SSSz");
        } else {
          localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmssz");
        }
        localObject1 = new SimpleTimeZone(0, "Z");
      }
    }
    Object localObject1 = str;
    if (hasFractionalSeconds())
    {
      Object localObject2 = str.substring(14);
      int i = 1;
      while (i < ((String)localObject2).length())
      {
        int j = ((String)localObject2).charAt(i);
        if ((48 > j) || (j > 57)) {
          break;
        }
        i += 1;
      }
      localObject1 = str;
      if (i - 1 > 3)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(((String)localObject2).substring(0, 4));
        ((StringBuilder)localObject1).append(((String)localObject2).substring(i));
        localObject1 = ((StringBuilder)localObject1).toString();
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(str.substring(0, 14));
        ((StringBuilder)localObject2).append((String)localObject1);
        localObject1 = ((StringBuilder)localObject2).toString();
      }
    }
    return localSimpleDateFormat.parse((String)localObject1);
  }
  
  public String getTime()
  {
    Object localObject = time;
    if (((String)localObject).charAt(((String)localObject).length() - 1) == 'Z')
    {
      localObject = new StringBuilder();
      str = time;
      ((StringBuilder)localObject).append(str.substring(0, str.length() - 1));
      ((StringBuilder)localObject).append("GMT+00:00");
      return ((StringBuilder)localObject).toString();
    }
    int i = time.length() - 5;
    int j = time.charAt(i);
    if ((j != 45) && (j != 43))
    {
      i = time.length() - 3;
      j = time.charAt(i);
      if ((j != 45) && (j != 43))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(time);
        ((StringBuilder)localObject).append(calculateGMTOffset());
        return ((StringBuilder)localObject).toString();
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(time.substring(0, i));
      ((StringBuilder)localObject).append("GMT");
      ((StringBuilder)localObject).append(time.substring(i));
      ((StringBuilder)localObject).append(":00");
      return ((StringBuilder)localObject).toString();
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(time.substring(0, i));
    ((StringBuilder)localObject).append("GMT");
    String str = time;
    j = i + 3;
    ((StringBuilder)localObject).append(str.substring(i, j));
    ((StringBuilder)localObject).append(":");
    ((StringBuilder)localObject).append(time.substring(j));
    return ((StringBuilder)localObject).toString();
  }
  
  public String getTimeString()
  {
    return time;
  }
  
  public int hashCode()
  {
    return time.hashCode();
  }
}
