package org.org.union.fido.util.asn1;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;

public abstract class ASN1Set
  extends ASN1Object
{
  protected Vector set = new Vector();
  
  public ASN1Set() {}
  
  private byte[] getEncoded(DEREncodable paramDEREncodable)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    ASN1OutputStream localASN1OutputStream = new ASN1OutputStream(localByteArrayOutputStream);
    try
    {
      localASN1OutputStream.writeObject(paramDEREncodable);
      return localByteArrayOutputStream.toByteArray();
    }
    catch (IOException paramDEREncodable)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("cannot encode object added to SET");
  }
  
  public static ASN1Set getInstance(Object paramObject)
  {
    if ((paramObject != null) && (!(paramObject instanceof ASN1Set)))
    {
      StringBuilder localStringBuilder = new StringBuilder("unknown object in getInstance: ");
      localStringBuilder.append(paramObject.getClass().getName());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return (ASN1Set)paramObject;
  }
  
  public static ASN1Set getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      if (paramASN1TaggedObject.isExplicit()) {
        return (ASN1Set)paramASN1TaggedObject.getObject();
      }
      throw new IllegalArgumentException("object implicit - explicit expected.");
    }
    if (paramASN1TaggedObject.isExplicit()) {
      return new DERSet(paramASN1TaggedObject.getObject());
    }
    if ((paramASN1TaggedObject.getObject() instanceof ASN1Set)) {
      return (ASN1Set)paramASN1TaggedObject.getObject();
    }
    Object localObject = new ASN1EncodableVector();
    if ((paramASN1TaggedObject.getObject() instanceof ASN1Sequence))
    {
      paramASN1TaggedObject = ((ASN1Sequence)paramASN1TaggedObject.getObject()).getObjects();
      while (paramASN1TaggedObject.hasMoreElements()) {
        ((DEREncodableVector)localObject).add((DEREncodable)paramASN1TaggedObject.nextElement());
      }
      return new DERSet((DEREncodableVector)localObject, false);
    }
    localObject = new StringBuilder("unknown object in getInstance: ");
    ((StringBuilder)localObject).append(paramASN1TaggedObject.getClass().getName());
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  private boolean lessThanOrEqual(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    int j;
    int k;
    if (paramArrayOfByte1.length <= paramArrayOfByte2.length)
    {
      i = 0;
      while (i != paramArrayOfByte1.length)
      {
        j = paramArrayOfByte1[i] & 0xFF;
        k = paramArrayOfByte2[i] & 0xFF;
        if (k > j) {
          return true;
        }
        if (j > k) {
          return false;
        }
        i += 1;
      }
      return true;
    }
    int i = 0;
    while (i != paramArrayOfByte2.length)
    {
      j = paramArrayOfByte1[i] & 0xFF;
      k = paramArrayOfByte2[i] & 0xFF;
      if (k > j) {
        return true;
      }
      if (j > k) {
        return false;
      }
      i += 1;
    }
    return false;
  }
  
  protected void addObject(DEREncodable paramDEREncodable)
  {
    set.addElement(paramDEREncodable);
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof ASN1Set)) {
      return false;
    }
    Object localObject = (ASN1Set)paramDERObject;
    if (size() != ((ASN1Set)localObject).size()) {
      return false;
    }
    paramDERObject = getObjects();
    localObject = ((ASN1Set)localObject).getObjects();
    while (paramDERObject.hasMoreElements())
    {
      DERObject localDERObject1 = ((DEREncodable)paramDERObject.nextElement()).getDERObject();
      DERObject localDERObject2 = ((DEREncodable)((Enumeration)localObject).nextElement()).getDERObject();
      if (localDERObject1 != localDERObject2)
      {
        if (localDERObject1 == null) {
          break label100;
        }
        if (!localDERObject1.equals(localDERObject2)) {
          return false;
        }
      }
    }
    return true;
    label100:
    return false;
  }
  
  abstract void encode(DEROutputStream paramDEROutputStream);
  
  public DEREncodable getObjectAt(int paramInt)
  {
    return (DEREncodable)set.elementAt(paramInt);
  }
  
  public Enumeration getObjects()
  {
    return set.elements();
  }
  
  public int hashCode()
  {
    Enumeration localEnumeration = getObjects();
    int i = size();
    while (localEnumeration.hasMoreElements())
    {
      Object localObject = localEnumeration.nextElement();
      int j = i * 17;
      i = j;
      if (localObject != null) {
        i = j ^ localObject.hashCode();
      }
    }
    return i;
  }
  
  public ASN1SetParser parser()
  {
    return new ASN1Set.1(this, this);
  }
  
  public int size()
  {
    return set.size();
  }
  
  protected void sort()
  {
    if (set.size() > 1)
    {
      int m = set.size() - 1;
      int i = 1;
      while (i != 0)
      {
        Object localObject1 = set;
        int k = 0;
        localObject1 = getEncoded((DEREncodable)((Vector)localObject1).elementAt(0));
        int j = 0;
        i = 0;
        while (k != m)
        {
          Object localObject2 = set;
          int n = k + 1;
          localObject2 = getEncoded((DEREncodable)((Vector)localObject2).elementAt(n));
          if (lessThanOrEqual((byte[])localObject1, (byte[])localObject2))
          {
            localObject1 = localObject2;
          }
          else
          {
            localObject2 = set.elementAt(k);
            Vector localVector = set;
            localVector.setElementAt(localVector.elementAt(n), k);
            set.setElementAt(localObject2, n);
            j = k;
            i = 1;
          }
          k = n;
        }
        m = j;
      }
    }
  }
  
  public String toString()
  {
    return set.toString();
  }
}
