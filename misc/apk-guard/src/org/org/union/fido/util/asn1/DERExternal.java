package org.org.union.fido.util.asn1;

import java.io.ByteArrayOutputStream;

public class DERExternal
  extends ASN1Object
{
  private ASN1Object dataValueDescriptor;
  private DERObjectIdentifier directReference;
  private int encoding;
  private DERObject externalContent;
  private DERInteger indirectReference;
  
  public DERExternal(ASN1EncodableVector paramASN1EncodableVector)
  {
    int i = 0;
    Object localObject2 = paramASN1EncodableVector.get(0).getDERObject();
    Object localObject1 = localObject2;
    if ((localObject2 instanceof DERObjectIdentifier))
    {
      directReference = ((DERObjectIdentifier)localObject2);
      localObject1 = paramASN1EncodableVector.get(1).getDERObject();
      i = 1;
    }
    int j = i;
    localObject2 = localObject1;
    if ((localObject1 instanceof DERInteger))
    {
      indirectReference = ((DERInteger)localObject1);
      j = i + 1;
      localObject2 = paramASN1EncodableVector.get(j).getDERObject();
    }
    localObject1 = localObject2;
    if (!(localObject2 instanceof DERTaggedObject))
    {
      dataValueDescriptor = ((ASN1Object)localObject2);
      localObject1 = paramASN1EncodableVector.get(j + 1).getDERObject();
    }
    if ((localObject1 instanceof DERTaggedObject))
    {
      paramASN1EncodableVector = (DERTaggedObject)localObject1;
      setEncoding(paramASN1EncodableVector.getTagNo());
      externalContent = paramASN1EncodableVector.getObject();
      return;
    }
    throw new IllegalArgumentException("No tagged object found in vector. Structure doesn't seem to be of type External");
  }
  
  public DERExternal(DERObjectIdentifier paramDERObjectIdentifier, DERInteger paramDERInteger, ASN1Object paramASN1Object, int paramInt, DERObject paramDERObject)
  {
    setDirectReference(paramDERObjectIdentifier);
    setIndirectReference(paramDERInteger);
    setDataValueDescriptor(paramASN1Object);
    setEncoding(paramInt);
    setExternalContent(paramDERObject.getDERObject());
  }
  
  public DERExternal(DERObjectIdentifier paramDERObjectIdentifier, DERInteger paramDERInteger, ASN1Object paramASN1Object, DERTaggedObject paramDERTaggedObject)
  {
    this(paramDERObjectIdentifier, paramDERInteger, paramASN1Object, paramDERTaggedObject.getTagNo(), paramDERTaggedObject.getDERObject());
  }
  
  private void setDataValueDescriptor(ASN1Object paramASN1Object)
  {
    dataValueDescriptor = paramASN1Object;
  }
  
  private void setDirectReference(DERObjectIdentifier paramDERObjectIdentifier)
  {
    directReference = paramDERObjectIdentifier;
  }
  
  private void setEncoding(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt <= 2))
    {
      encoding = paramInt;
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder("invalid encoding value: ");
    localStringBuilder.append(paramInt);
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  private void setExternalContent(DERObject paramDERObject)
  {
    externalContent = paramDERObject;
  }
  
  private void setIndirectReference(DERInteger paramDERInteger)
  {
    indirectReference = paramDERInteger;
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DERExternal)) {
      return false;
    }
    if (this == paramDERObject) {
      return true;
    }
    paramDERObject = (DERExternal)paramDERObject;
    Object localObject1 = directReference;
    Object localObject2;
    if (localObject1 != null)
    {
      localObject2 = directReference;
      if (localObject2 == null) {
        break label117;
      }
      if (!((ASN1Object)localObject2).equals(localObject1)) {
        return false;
      }
    }
    localObject1 = indirectReference;
    if (localObject1 != null)
    {
      localObject2 = indirectReference;
      if (localObject2 == null) {
        break label117;
      }
      if (!((ASN1Object)localObject2).equals(localObject1)) {
        return false;
      }
    }
    localObject1 = dataValueDescriptor;
    if (localObject1 != null)
    {
      localObject2 = dataValueDescriptor;
      if (localObject2 == null) {
        break label117;
      }
      if (!((ASN1Object)localObject2).equals(localObject1)) {
        return false;
      }
    }
    return externalContent.equals(externalContent);
    label117:
    return false;
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    Object localObject = directReference;
    if (localObject != null) {
      localByteArrayOutputStream.write(((ASN1Encodable)localObject).getDEREncoded());
    }
    localObject = indirectReference;
    if (localObject != null) {
      localByteArrayOutputStream.write(((ASN1Encodable)localObject).getDEREncoded());
    }
    localObject = dataValueDescriptor;
    if (localObject != null) {
      localByteArrayOutputStream.write(((ASN1Encodable)localObject).getDEREncoded());
    }
    localByteArrayOutputStream.write(new DERTaggedObject(encoding, externalContent).getDEREncoded());
    paramDEROutputStream.writeEncoded(32, 8, localByteArrayOutputStream.toByteArray());
  }
  
  public ASN1Object getDataValueDescriptor()
  {
    return dataValueDescriptor;
  }
  
  public DERObjectIdentifier getDirectReference()
  {
    return directReference;
  }
  
  public int getEncoding()
  {
    return encoding;
  }
  
  public DERObject getExternalContent()
  {
    return externalContent;
  }
  
  public DERInteger getIndirectReference()
  {
    return indirectReference;
  }
  
  public int hashCode()
  {
    Object localObject = directReference;
    if (localObject != null) {
      j = ((DERObjectIdentifier)localObject).hashCode();
    } else {
      j = 0;
    }
    localObject = indirectReference;
    int i = j;
    if (localObject != null) {
      i = j ^ ((DERInteger)localObject).hashCode();
    }
    localObject = dataValueDescriptor;
    int j = i;
    if (localObject != null) {
      j = i ^ ((ASN1Object)localObject).hashCode();
    }
    return j ^ externalContent.hashCode();
  }
}
