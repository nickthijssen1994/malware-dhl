package org.org.union.fido.util;

import java.math.BigInteger;

public class BigIntegerUtil
{
  public BigIntegerUtil() {}
  
  public static byte[] asUnsigned32ByteArray(BigInteger paramBigInteger)
  {
    return asUnsignedNByteArray(paramBigInteger, 32);
  }
  
  public static byte[] asUnsignedNByteArray(BigInteger paramBigInteger, int paramInt)
  {
    if (paramBigInteger == null) {
      return null;
    }
    byte[] arrayOfByte = new byte[paramInt];
    int i = paramBigInteger.toByteArray().length;
    int j = paramInt + 1;
    if (i > j) {
      return null;
    }
    if (i == j)
    {
      if (paramBigInteger.toByteArray()[0] != 0) {
        return null;
      }
      System.arraycopy(paramBigInteger.toByteArray(), 1, arrayOfByte, 0, paramInt);
      return arrayOfByte;
    }
    System.arraycopy(paramBigInteger.toByteArray(), 0, arrayOfByte, paramInt - i, i);
    return arrayOfByte;
  }
  
  public static BigInteger toPositiveInteger(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return null;
    }
    byte[] arrayOfByte = paramArrayOfByte;
    if (paramArrayOfByte[0] < 0)
    {
      arrayOfByte = new byte[paramArrayOfByte.length + 1];
      arrayOfByte[0] = 0;
      System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 1, arrayOfByte.length - 1);
    }
    return new BigInteger(arrayOfByte);
  }
}
