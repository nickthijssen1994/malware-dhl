package org.org.union.fido.util.asn1.pkcs;

import org.org.union.fido.util.asn1.ASN1Encodable;
import org.org.union.fido.util.asn1.ASN1EncodableVector;
import org.org.union.fido.util.asn1.ASN1Sequence;
import org.org.union.fido.util.asn1.ASN1Set;
import org.org.union.fido.util.asn1.DEREncodableVector;
import org.org.union.fido.util.asn1.DERInteger;
import org.org.union.fido.util.asn1.DERObject;
import org.org.union.fido.util.asn1.DERSequence;
import org.org.union.fido.util.asn1.DERTaggedObject;
import org.org.union.fido.util.asn1.x509.SubjectPublicKeyInfo;
import org.org.union.fido.util.asn1.x509.X509Name;

public class CertificationRequestInfo
  extends ASN1Encodable
{
  ASN1Set attributes = null;
  X509Name subject;
  SubjectPublicKeyInfo subjectPKInfo;
  DERInteger version = new DERInteger(0);
  
  public CertificationRequestInfo(ASN1Sequence paramASN1Sequence)
  {
    version = ((DERInteger)paramASN1Sequence.getObjectAt(0));
    subject = X509Name.getInstance(paramASN1Sequence.getObjectAt(1));
    subjectPKInfo = SubjectPublicKeyInfo.getInstance(paramASN1Sequence.getObjectAt(2));
    if (paramASN1Sequence.size() > 3) {
      attributes = ASN1Set.getInstance((DERTaggedObject)paramASN1Sequence.getObjectAt(3), false);
    }
    if ((subject != null) && (version != null) && (subjectPKInfo != null)) {
      return;
    }
    throw new IllegalArgumentException("Not all mandatory fields set in CertificationRequestInfo generator.");
  }
  
  public CertificationRequestInfo(X509Name paramX509Name, SubjectPublicKeyInfo paramSubjectPublicKeyInfo, ASN1Set paramASN1Set)
  {
    subject = paramX509Name;
    subjectPKInfo = paramSubjectPublicKeyInfo;
    attributes = paramASN1Set;
    if ((paramX509Name != null) && (version != null) && (subjectPKInfo != null)) {
      return;
    }
    throw new IllegalArgumentException("Not all mandatory fields set in CertificationRequestInfo generator.");
  }
  
  public static CertificationRequestInfo getInstance(Object paramObject)
  {
    if ((paramObject instanceof CertificationRequestInfo)) {
      return (CertificationRequestInfo)paramObject;
    }
    if ((paramObject instanceof ASN1Sequence)) {
      return new CertificationRequestInfo((ASN1Sequence)paramObject);
    }
    StringBuilder localStringBuilder = new StringBuilder("unknown object in factory: ");
    localStringBuilder.append(paramObject.getClass().getName());
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public ASN1Set getAttributes()
  {
    return attributes;
  }
  
  public X509Name getSubject()
  {
    return subject;
  }
  
  public SubjectPublicKeyInfo getSubjectPublicKeyInfo()
  {
    return subjectPKInfo;
  }
  
  public DERInteger getVersion()
  {
    return version;
  }
  
  public DERObject toASN1Object()
  {
    ASN1EncodableVector localASN1EncodableVector = new ASN1EncodableVector();
    localASN1EncodableVector.add(version);
    localASN1EncodableVector.add(subject);
    localASN1EncodableVector.add(subjectPKInfo);
    ASN1Set localASN1Set = attributes;
    if (localASN1Set != null) {
      localASN1EncodableVector.add(new DERTaggedObject(false, 0, localASN1Set));
    }
    return new DERSequence(localASN1EncodableVector);
  }
}
