package org.org.union.fido.util.asn1.x509;

import org.org.union.fido.util.asn1.ASN1Encodable;
import org.org.union.fido.util.asn1.ASN1EncodableVector;
import org.org.union.fido.util.asn1.ASN1Sequence;
import org.org.union.fido.util.asn1.ASN1TaggedObject;
import org.org.union.fido.util.asn1.DEREncodable;
import org.org.union.fido.util.asn1.DEREncodableVector;
import org.org.union.fido.util.asn1.DERObject;
import org.org.union.fido.util.asn1.DERObjectIdentifier;
import org.org.union.fido.util.asn1.DERSequence;

public class AlgorithmIdentifier
  extends ASN1Encodable
{
  private DERObjectIdentifier objectId;
  private DEREncodable parameters;
  private boolean parametersDefined = false;
  
  public AlgorithmIdentifier(String paramString)
  {
    objectId = new DERObjectIdentifier(paramString);
  }
  
  public AlgorithmIdentifier(ASN1Sequence paramASN1Sequence)
  {
    if ((paramASN1Sequence.size() > 0) && (paramASN1Sequence.size() <= 2))
    {
      objectId = DERObjectIdentifier.getInstance(paramASN1Sequence.getObjectAt(0));
      if (paramASN1Sequence.size() == 2) {
        parametersDefined = true;
      }
      for (paramASN1Sequence = paramASN1Sequence.getObjectAt(1);; paramASN1Sequence = null)
      {
        parameters = paramASN1Sequence;
        return;
      }
    }
    StringBuilder localStringBuilder = new StringBuilder("Bad sequence size: ");
    localStringBuilder.append(paramASN1Sequence.size());
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public AlgorithmIdentifier(DERObjectIdentifier paramDERObjectIdentifier)
  {
    objectId = paramDERObjectIdentifier;
  }
  
  public AlgorithmIdentifier(DERObjectIdentifier paramDERObjectIdentifier, DEREncodable paramDEREncodable)
  {
    parametersDefined = true;
    objectId = paramDERObjectIdentifier;
    parameters = paramDEREncodable;
  }
  
  public static AlgorithmIdentifier getInstance(Object paramObject)
  {
    if ((paramObject != null) && (!(paramObject instanceof AlgorithmIdentifier)))
    {
      if ((paramObject instanceof DERObjectIdentifier)) {
        return new AlgorithmIdentifier((DERObjectIdentifier)paramObject);
      }
      if ((paramObject instanceof String)) {
        return new AlgorithmIdentifier((String)paramObject);
      }
      if ((paramObject instanceof ASN1Sequence)) {
        return new AlgorithmIdentifier((ASN1Sequence)paramObject);
      }
      StringBuilder localStringBuilder = new StringBuilder("unknown object in factory: ");
      localStringBuilder.append(paramObject.getClass().getName());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return (AlgorithmIdentifier)paramObject;
  }
  
  public static AlgorithmIdentifier getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(ASN1Sequence.getInstance(paramASN1TaggedObject, paramBoolean));
  }
  
  public DERObjectIdentifier getObjectId()
  {
    return objectId;
  }
  
  public DEREncodable getParameters()
  {
    return parameters;
  }
  
  public DERObject toASN1Object()
  {
    ASN1EncodableVector localASN1EncodableVector = new ASN1EncodableVector();
    localASN1EncodableVector.add(objectId);
    if (parametersDefined) {
      localASN1EncodableVector.add(parameters);
    }
    return new DERSequence(localASN1EncodableVector);
  }
}
