package org.org.union.fido.util;

import android.util.Base64;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;

public class StringTools
{
  public StringTools() {}
  
  public static final String combine(String[] paramArrayOfString, String paramString)
  {
    if ((paramArrayOfString != null) && (paramArrayOfString.length != 0))
    {
      String str1 = paramString;
      if (paramString == null) {
        str1 = "";
      }
      paramString = new StringBuffer();
      int i = 0;
      while (i < paramArrayOfString.length)
      {
        String str2 = paramArrayOfString[i];
        paramString.append(str1);
        paramString.append(str2);
        i += 1;
      }
      if (paramString.length() > 0) {
        paramString.delete(0, str1.length());
      }
      return paramString.toString();
    }
    return "";
  }
  
  public static String[] getArg(String paramString1, int paramInt, String paramString2)
  {
    String[] arrayOfString = new String[paramInt];
    int i = 0;
    while (i < paramInt)
    {
      if (i < paramInt - 1)
      {
        arrayOfString[i] = paramString1.substring(0, paramString1.indexOf(paramString2));
        paramString1 = paramString1.substring(paramString1.indexOf(paramString2) + 1, paramString1.length());
      }
      else
      {
        arrayOfString[i] = paramString1;
      }
      i += 1;
    }
    return arrayOfString;
  }
  
  public static String getFormatStr(String paramString, int paramInt)
  {
    if ((paramString != null) && (!paramString.equals("")))
    {
      int j = paramString.indexOf("E");
      int i = 0;
      if (j < 0)
      {
        paramInt = paramString.indexOf(".");
        if (paramInt < 0) {
          return paramString;
        }
        return paramString.substring(0, paramInt);
      }
      paramString = paramString.substring(0, j);
      j = paramString.indexOf(".");
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramString.substring(0, j));
      ((StringBuilder)localObject).append(paramString.substring(j + 1, paramString.length()));
      localObject = ((StringBuilder)localObject).toString();
      paramString = (String)localObject;
      j = ((String)localObject).length();
      while (i < paramInt - j)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString);
        ((StringBuilder)localObject).append("0");
        paramString = ((StringBuilder)localObject).toString();
        i += 1;
      }
      return paramString;
    }
    return "";
  }
  
  public static Vector getMultiRow(String paramString, int paramInt)
  {
    Vector localVector = new Vector();
    byte[] arrayOfByte = paramString.getBytes();
    int i1 = arrayOfByte.length;
    if (i1 <= paramInt)
    {
      localVector.add(paramString);
      return localVector;
    }
    int j = 0;
    while (j < i1)
    {
      int i;
      if (j + paramInt > i1) {
        i = i1 - j;
      } else {
        i = paramInt;
      }
      paramString = new byte[i];
      System.arraycopy(arrayOfByte, j, paramString, 0, i);
      int m = 0;
      int n;
      for (int k = 0; m < paramString.length; k = n)
      {
        n = k;
        if (paramString[m] < 0) {
          n = k + 1;
        }
        m += 1;
      }
      m = i;
      if (k % 2 == 1) {
        m = i - 1;
      }
      localVector.add(new String(arrayOfByte, j, m));
      j += m;
    }
    return localVector;
  }
  
  public static String[] getNameArg(String paramString)
  {
    paramString = new StringTokenizer(paramString, ";");
    int j = paramString.countTokens();
    String[] arrayOfString = new String[j];
    int i = 0;
    while (i < j)
    {
      arrayOfString[i] = paramString.nextToken();
      i += 1;
    }
    return arrayOfString;
  }
  
  public static String[][] getNameArg2(String paramString)
  {
    paramString = getNameArg(paramString);
    int k = paramString.length;
    int m = new StringTokenizer(paramString[0], ",").countTokens();
    String[][] arrayOfString = (String[][])Array.newInstance(String.class, new int[] { k, m });
    int i = 0;
    while (i < k)
    {
      StringTokenizer localStringTokenizer = new StringTokenizer(paramString[i], ",");
      int j = 0;
      while (j < m)
      {
        arrayOfString[i][j] = localStringTokenizer.nextToken();
        j += 1;
      }
      i += 1;
    }
    return arrayOfString;
  }
  
  public static String[][] getNameArg3(String paramString1, String paramString2, String paramString3)
  {
    paramString1 = splitStrFlag(paramString1, paramString2);
    int k = paramString1.length;
    int m = new StringTokenizer(paramString1[0], paramString3).countTokens();
    paramString2 = (String[][])Array.newInstance(String.class, new int[] { k, m });
    int i = 0;
    while (i < k)
    {
      StringTokenizer localStringTokenizer = new StringTokenizer(paramString1[i], paramString3);
      int j = 0;
      while (j < m)
      {
        paramString2[i][j] = localStringTokenizer.nextToken();
        j += 1;
      }
      i += 1;
    }
    return paramString2;
  }
  
  public static final boolean isBlankString(String paramString)
  {
    return (paramString == null) || (paramString.length() <= 0);
  }
  
  public static final boolean isDoubleByte(char paramChar)
  {
    return paramChar >>> '\b' == 0;
  }
  
  public static boolean isHexNumberRex(String paramString)
  {
    return paramString.matches("(?i)[0-9a-f]+");
  }
  
  public static final boolean isValidateString(String paramString)
  {
    return (paramString != null) && (paramString.trim().length() > 0);
  }
  
  public static final String lPad(String paramString1, int paramInt, String paramString2)
  {
    StringBuffer localStringBuffer = new StringBuffer(paramInt);
    int i = paramInt - paramString1.length();
    for (;;)
    {
      i -= 1;
      if (i < 0) {
        break;
      }
      localStringBuffer.append(paramString2);
    }
    localStringBuffer.append(paramString1);
    paramInt = localStringBuffer.length() - paramInt;
    if (paramInt > 0) {
      return localStringBuffer.substring(paramInt);
    }
    return localStringBuffer.toString();
  }
  
  public static final String lReplace(String paramString1, String paramString2, String paramString3)
  {
    Object localObject = paramString1;
    if (paramString1 != null)
    {
      localObject = new StringBuilder("^(");
      ((StringBuilder)localObject).append(paramString2);
      ((StringBuilder)localObject).append(")+");
      localObject = paramString1.replaceAll(((StringBuilder)localObject).toString(), paramString3);
    }
    return localObject;
  }
  
  public static final String lTrim(String paramString)
  {
    return lTrim(paramString, "");
  }
  
  public static final String lTrim(String paramString1, String paramString2)
  {
    String str = paramString1;
    if (paramString1 != null) {
      str = paramString1.replaceAll("^[\\s]+", paramString2);
    }
    return str;
  }
  
  public static int length(String paramString)
  {
    if (paramString == null) {
      return 0;
    }
    try
    {
      int i = new String(paramString.getBytes("GBK"), "8859_1").length();
      return i;
    }
    catch (UnsupportedEncodingException paramString)
    {
      for (;;) {}
    }
    return -1;
  }
  
  public static String objectToString(Object paramObject)
  {
    String str = new String();
    if (paramObject != null) {
      str = paramObject.toString();
    }
    return str;
  }
  
  public static final String rPad(String paramString1, int paramInt, String paramString2)
  {
    StringBuffer localStringBuffer = new StringBuffer(paramInt);
    localStringBuffer.append(paramString1);
    int i = paramInt - paramString1.length();
    for (;;)
    {
      i -= 1;
      if (i < 0) {
        break;
      }
      localStringBuffer.append(paramString2);
    }
    if (localStringBuffer.length() - paramInt > 0) {
      return localStringBuffer.substring(0, paramInt);
    }
    return localStringBuffer.toString();
  }
  
  public static final String rReplace(String paramString1, String paramString2, String paramString3)
  {
    Object localObject = paramString1;
    if (paramString1 != null)
    {
      localObject = new StringBuilder("(");
      ((StringBuilder)localObject).append(paramString2);
      ((StringBuilder)localObject).append(")+$");
      localObject = paramString1.replaceAll(((StringBuilder)localObject).toString(), paramString3);
    }
    return localObject;
  }
  
  public static final String rTrim(String paramString)
  {
    return rTrim(paramString, "");
  }
  
  public static final String rTrim(String paramString1, String paramString2)
  {
    String str = paramString1;
    if (paramString1 != null) {
      str = paramString1.replaceAll("[\\s]+$", paramString2);
    }
    return str;
  }
  
  public static final StringBuffer replace(StringBuffer paramStringBuffer, String paramString1, String paramString2)
  {
    if ((paramStringBuffer != null) && (paramStringBuffer.length() > 0))
    {
      if (isBlankString(paramString1)) {
        return paramStringBuffer;
      }
      int i = paramStringBuffer.indexOf(paramString1);
      int j = paramString1.length();
      while (i >= 0) {
        paramStringBuffer.replace(i, j, paramString2);
      }
    }
    return paramStringBuffer;
  }
  
  public static final String replaceIgnoreCase(String paramString1, String paramString2, String paramString3)
  {
    String str = paramString1;
    if (paramString1 != null)
    {
      if (isBlankString(paramString2)) {
        return paramString1;
      }
      str = paramString1.toLowerCase();
      paramString2 = paramString2.toLowerCase();
      int i = 0;
      int j = str.indexOf(paramString2, 0);
      int k = paramString2.length();
      char[] arrayOfChar = paramString1.toCharArray();
      paramString1 = new StringBuffer(paramString1.length());
      while (j >= 0)
      {
        paramString1.append(arrayOfChar, i, j - i);
        paramString1.append(paramString3);
        i = j + k;
        j = str.indexOf(paramString2, i);
      }
      paramString1.append(arrayOfChar, i, arrayOfChar.length - i);
      str = paramString1.toString();
    }
    return str;
  }
  
  public static String replaceStr(String paramString1, String paramString2, String paramString3)
  {
    Object localObject;
    for (int i = paramString1.lastIndexOf(paramString2); i >= 0; i = ((String)localObject).lastIndexOf(paramString2, i - 1))
    {
      if (i == 0)
      {
        localObject = new StringBuilder();
      }
      else
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString1.substring(0, i));
      }
      ((StringBuilder)localObject).append(paramString3);
      ((StringBuilder)localObject).append(paramString1.substring(i + 1, paramString1.length()));
      localObject = ((StringBuilder)localObject).toString();
      paramString1 = (String)localObject;
    }
    return paramString1;
  }
  
  public static String[] splitStrFlag(String paramString1, String paramString2)
  {
    paramString1 = new StringTokenizer(paramString1, paramString2);
    int j = paramString1.countTokens();
    paramString2 = new String[j];
    int i = 0;
    while (i < j)
    {
      paramString2[i] = paramString1.nextToken();
      i += 1;
    }
    return paramString2;
  }
  
  public static boolean stringEqual(String paramString1, String paramString2)
  {
    if (!isValidateString(paramString1)) {
      return false;
    }
    return paramString1.equals(paramString2);
  }
  
  public static boolean stringNullorEqual(String paramString1, String paramString2)
  {
    return (paramString1.equals(paramString2)) || (paramString1.isEmpty()) || (paramString1.equals(null)) || (paramString1 == "");
  }
  
  public static final String subString(String paramString, int paramInt)
  {
    String str = toValidateString(paramString);
    paramString = str;
    if (str.length() >= paramInt) {
      paramString = str.substring(0, paramInt);
    }
    return paramString;
  }
  
  public static String subStringByByte(String paramString, int paramInt)
  {
    if (paramString != null)
    {
      Object localObject = paramString.getBytes();
      if (localObject.length <= paramInt) {
        return paramString;
      }
      if (paramInt > 0)
      {
        localObject = new String((byte[])localObject, 0, paramInt);
        paramInt = ((String)localObject).length();
        int i = paramInt - 1;
        if (paramString.charAt(i) != ((String)localObject).charAt(i))
        {
          if (paramInt >= 2) {
            return ((String)localObject).substring(0, i);
          }
        }
        else {
          return localObject;
        }
      }
    }
    return null;
  }
  
  public static final String toHtml(String paramString)
  {
    if (isBlankString(paramString)) {
      return "";
    }
    char[] arrayOfChar = paramString.toCharArray();
    StringBuffer localStringBuffer = new StringBuffer(arrayOfChar.length);
    int i = 0;
    while (i < arrayOfChar.length)
    {
      char c = arrayOfChar[i];
      if (c == '\n') {
        paramString = "<br />";
      }
      for (;;)
      {
        localStringBuffer.append(paramString);
        break label88;
        if (c == '\t')
        {
          paramString = "&nbsp;&nbsp;&nbsp;&nbsp;";
        }
        else
        {
          if (c != ' ') {
            break;
          }
          paramString = "&nbsp;";
        }
      }
      localStringBuffer.append(c);
      label88:
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  public static final ArrayList toList(String[] paramArrayOfString)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramArrayOfString != null)
    {
      if (paramArrayOfString.length <= 0) {
        return localArrayList;
      }
      int i = 0;
      while (i < paramArrayOfString.length)
      {
        localArrayList.add(toValidateString(paramArrayOfString[i]));
        i += 1;
      }
    }
    return localArrayList;
  }
  
  public static final String toTitleCase(String paramString)
  {
    Object localObject = paramString;
    if (paramString != null)
    {
      if (paramString.length() <= 0) {
        return paramString;
      }
      localObject = new StringBuffer(paramString.length());
      StringBuffer localStringBuffer = new StringBuffer();
      paramString = new StringTokenizer(paramString, " ");
      while (paramString.hasMoreTokens())
      {
        localStringBuffer.append(paramString.nextToken());
        localStringBuffer.setCharAt(0, Character.toUpperCase(localStringBuffer.charAt(0)));
        ((StringBuffer)localObject).append(localStringBuffer.toString());
        ((StringBuffer)localObject).append(' ');
        localStringBuffer.delete(0, localStringBuffer.length());
      }
      localObject = ((StringBuffer)localObject).toString();
    }
    return localObject;
  }
  
  public static final String toToggleCase(String paramString)
  {
    String str = paramString;
    if (paramString != null)
    {
      if (paramString.length() <= 0) {
        return paramString;
      }
      paramString = paramString.toCharArray();
      int i = 0;
      while (i < paramString.length)
      {
        char c = paramString[i];
        if (Character.isUpperCase(c)) {
          c = Character.toLowerCase(c);
        } else {
          c = Character.toUpperCase(c);
        }
        paramString[i] = c;
        i += 1;
      }
      str = new String(paramString);
    }
    return str;
  }
  
  public static final String toValidateString(String paramString)
  {
    if (paramString != null) {
      return paramString.trim();
    }
    return "";
  }
  
  public static final String toValidateString(String paramString1, String paramString2)
  {
    if (paramString1 != null) {
      return paramString1.trim();
    }
    return paramString2;
  }
  
  public static String trim(String paramString)
  {
    if (paramString == null) {
      return "";
    }
    return paramString.trim();
  }
  
  public static final String trim(String paramString1, String paramString2, String paramString3)
  {
    StringBuilder localStringBuilder = new StringBuilder("(");
    localStringBuilder.append(paramString2);
    localStringBuilder.append(')');
    localStringBuilder.append('+');
    return paramString1.replaceAll(localStringBuilder.toString(), paramString3);
  }
  
  public static byte[] urlSafeBase64Dec(String paramString)
  {
    try
    {
      paramString = Base64.decode(paramString, 11);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static byte[] urlSafeBase64Dec4Byte(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = Base64.decode(paramArrayOfByte, 11);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return null;
  }
  
  public static String urlSafeBase64Enc(String paramString)
  {
    try
    {
      paramString = Base64.encodeToString(paramString.getBytes(), 11);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static String urlSafeBase64Enc(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = Base64.encodeToString(paramArrayOfByte, 11);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return null;
  }
  
  public static byte[] urlSafeBase64Enc2Byte(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = Base64.encode(paramArrayOfByte, 11);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return null;
  }
}
