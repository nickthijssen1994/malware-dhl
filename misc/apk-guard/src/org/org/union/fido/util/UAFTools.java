package org.org.union.fido.util;

import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Build.VERSION;
import android.util.Base64;
import com.jdjr.risk.jdcn.common.utils.FsGsonUtil;
import java.io.ByteArrayInputStream;
import java.security.KeyPair;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import org.org.union.fido.bean.Version;
import org.org.union.fido.bean.authenticator.RawKeyHandle;
import org.org.union.fido.bean.uafclient.FinalChallengeParams;
import org.org.union.fido.bean.uafclient.androidutils.ChannelBinding;
import org.org.union.fido.common.GlobalConfiguration;

public class UAFTools
{
  private static final String PAGE_KEY = "UAFTools";
  
  public UAFTools() {}
  
  public static String genFinalChallengeParams(String paramString1, String paramString2, String paramString3, ChannelBinding paramChannelBinding)
  {
    paramString1 = new FinalChallengeParams(paramString1, paramString2, paramString3, paramChannelBinding);
    try
    {
      paramString1 = new String(Base64.encode(FsGsonUtil.gsonString(paramString1).getBytes(), 10), "utf-8");
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static String genKHAccessToken(String paramString1, String paramString2, String paramString3, String paramString4, boolean paramBoolean)
  {
    str2 = "";
    String str1 = paramString1;
    if (paramBoolean) {}
    try
    {
      paramString1 = new StringBuffer(paramString1);
      paramString1.append(paramString2);
      paramString1.append(paramString3);
      paramString1.append(paramString4);
      str1 = paramString1.toString();
      paramString1 = StringTools.urlSafeBase64Enc(CryptoTools.hash(str1, "SHA256"));
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        paramString1 = str2;
      }
    }
    return StringTools.subStringByByte(paramString1, 32);
  }
  
  public static byte[] genSignature(int paramInt, PrivateKey paramPrivateKey, byte[] paramArrayOfByte)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      return genSignatureTEE(paramInt, paramPrivateKey, paramArrayOfByte);
    }
    return genSignatureREE(paramInt, paramPrivateKey, paramArrayOfByte);
  }
  
  private static byte[] genSignatureREE(int paramInt, PrivateKey paramPrivateKey, byte[] paramArrayOfByte)
  {
    String str;
    switch (paramInt)
    {
    default: 
      break;
    case 7: 
      str = "SM3withSM2";
      break;
    case 3: 
    case 4: 
      str = "SHA256withRSA";
      break;
    case 2: 
    case 6: 
      str = "SHA256withECDSA";
      return CryptoTools.doSignData(paramPrivateKey, str, paramArrayOfByte);
    }
    return null;
  }
  
  private static byte[] genSignatureTEE(int paramInt, PrivateKey paramPrivateKey, byte[] paramArrayOfByte)
  {
    if (paramInt != 99) {
      switch (paramInt)
      {
      default: 
        break;
      case 7: 
        return CryptoTools.doSignData(paramPrivateKey, "SM3withSM2", paramArrayOfByte);
      case 3: 
      case 4: 
        str = "SHA256withRSA/PSS";
        break;
      }
    }
    for (String str = "SHA256withECDSA";; str = "SHA256withRSA")
    {
      return CryptoTools.doSignDataTee(paramPrivateKey, str, paramArrayOfByte);
      return null;
    }
  }
  
  public static KeyPair genUAuthKeyPair(int paramInt, String paramString, Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      return genUAuthKeyPairTEE(paramInt, paramString, paramContext);
    }
    return null;
  }
  
  private static KeyPair genUAuthKeyPairREE(int paramInt)
  {
    return null;
  }
  
  private static KeyPair genUAuthKeyPairTEE(int paramInt, String paramString, Context paramContext)
  {
    if (paramInt != 99)
    {
      switch (paramInt)
      {
      default: 
        return null;
      }
      try
      {
        paramString = CryptoTools.genAsymmetricKey("SM2", 256);
        return paramString;
      }
      catch (Exception paramString) {}
      for (String str = "SECP256K1";; str = "SECP256R1")
      {
        paramString = CryptoTools.genECKeyTee(str, paramString, true, 0, paramContext);
        return paramString;
        paramString = CryptoTools.genRSAKeyTee(2048, paramString, true, 0, paramContext);
        return paramString;
      }
    }
    else
    {
      paramString = CryptoTools.genRSAKeyTee(1024, paramString, true, 0, paramContext);
      return paramString;
    }
    paramString.printStackTrace();
    return null;
  }
  
  public static String genUVI(String paramString1, String paramString2)
  {
    if ((StringTools.isValidateString(paramString1)) && (StringTools.isValidateString(paramString2)))
    {
      paramString2 = CryptoTools.hash2Hex(paramString2);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString1);
      localStringBuilder.append(paramString2);
      return CryptoTools.hash2Hex(localStringBuilder.toString());
    }
    return null;
  }
  
  public static RawKeyHandle generateDecryptedKeyHandle(Context paramContext, String paramString)
  {
    String str = GlobalConfiguration.SERI_NUM;
    try
    {
      boolean bool = CryptoTools.secretKeyDetection(str);
      if (bool) {
        paramContext = GlobalConfiguration.SERI_NUM;
      }
      do
      {
        paramContext = CryptoTools.decrypt(paramContext, paramString);
        break label78;
        str = GlobalConfiguration.getSeriNumFingerprint(paramContext);
        if (str != null)
        {
          bool = CryptoTools.secretKeyDetection(str);
          if (bool)
          {
            paramContext = CryptoTools.decrypt(str, paramString);
            break label78;
          }
        }
        str = GlobalConfiguration.getSeriNumSerial(paramContext);
        paramContext = str;
        if (str == null) {
          break;
        }
        bool = CryptoTools.secretKeyDetection(str);
      } while (bool);
      paramContext = null;
      label78:
      if (paramContext != null)
      {
        paramString = new RawKeyHandle();
        try
        {
          paramString.deserialize(paramContext);
          return paramString;
        }
        catch (Exception localException)
        {
          paramContext = paramString;
          paramString = localException;
        }
      }
      else
      {
        return null;
      }
    }
    catch (Exception paramString)
    {
      paramContext = null;
      paramString.printStackTrace();
    }
    return paramContext;
  }
  
  public static String generateEncryptedKeyHandleAhth(Context paramContext, RawKeyHandle paramRawKeyHandle)
  {
    try
    {
      paramRawKeyHandle = paramRawKeyHandle.serialize();
      String str = GlobalConfiguration.SERI_NUM;
      boolean bool = CryptoTools.secretKeyDetection(str);
      if (bool)
      {
        paramContext = GlobalConfiguration.SERI_NUM;
        paramContext = CryptoTools.encrypt(paramContext, paramRawKeyHandle);
        return paramContext;
      }
      str = GlobalConfiguration.getSeriNumFingerprint(paramContext);
      if (str != null)
      {
        bool = CryptoTools.secretKeyDetection(str);
        if (bool)
        {
          paramContext = CryptoTools.encrypt(str, paramRawKeyHandle);
          return paramContext;
        }
      }
      paramContext = GlobalConfiguration.getSeriNumSerial(paramContext);
      if (paramContext != null)
      {
        bool = CryptoTools.secretKeyDetection(paramContext);
        if (bool)
        {
          paramContext = CryptoTools.encrypt(paramContext, paramRawKeyHandle);
          return paramContext;
        }
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static String generateEncryptedKeyHandleReg(RawKeyHandle paramRawKeyHandle)
  {
    try
    {
      paramRawKeyHandle = paramRawKeyHandle.serialize();
      String str = GlobalConfiguration.SERI_NUM;
      paramRawKeyHandle = CryptoTools.encrypt(str, paramRawKeyHandle);
      return paramRawKeyHandle;
    }
    catch (Exception paramRawKeyHandle)
    {
      paramRawKeyHandle.printStackTrace();
    }
    return null;
  }
  
  public static Version getAsmVersion()
  {
    Version localVersion = new Version();
    major = Integer.valueOf(1);
    minor = Integer.valueOf(0);
    return localVersion;
  }
  
  public static String getCallerID(Context paramContext, int paramInt)
  {
    Object localObject = paramContext.getPackageManager().getPackagesForUid(paramInt);
    if (localObject == null) {
      return null;
    }
    try
    {
      paramContext = paramContext.getPackageManager();
      localObject = localObject[0];
      paramContext = paramContext.getPackageInfo((String)localObject, 64);
      paramContext = signatures[0];
      paramContext = paramContext.toByteArray();
      paramContext = new ByteArrayInputStream(paramContext);
      paramContext = CertificateFactory.getInstance("X509").generateCertificate(paramContext);
      paramContext = (X509Certificate)paramContext;
      paramContext = Base64.encodeToString(MessageDigest.getInstance("SHA1").digest(paramContext.getEncoded()), 3);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static Version getClientVersion()
  {
    Version localVersion = new Version();
    major = Integer.valueOf(1);
    minor = Integer.valueOf(0);
    return localVersion;
  }
  
  public static Version getUAFVersion()
  {
    Version localVersion = new Version();
    major = Integer.valueOf(1);
    minor = Integer.valueOf(0);
    return localVersion;
  }
  
  public static KeyPair getUAuthKeyPairTEE(int paramInt, String paramString1, String paramString2)
  {
    if (paramInt != 355) {
      switch (paramInt)
      {
      default: 
        return null;
      }
    }
    try
    {
      paramString1 = CryptoTools.getPrivateKeyPairInTee(paramString2);
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static PrivateKey getUAuthPrivateKey(int paramInt, String paramString1, String paramString2)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return getUAuthPrivateKeyTEE(paramInt, paramString1, paramString2);
    }
    return null;
  }
  
  public static PrivateKey getUAuthPrivateKeyREE(int paramInt, String paramString)
  {
    return null;
  }
  
  public static PrivateKey getUAuthPrivateKeyTEE(int paramInt, String paramString1, String paramString2)
  {
    if (paramInt != 355) {
      switch (paramInt)
      {
      default: 
        return null;
      }
    }
    try
    {
      paramString1 = CryptoTools.getPrivateKeyInTee(paramString2);
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static byte[] getUAuthPublicKey(int paramInt, KeyPair paramKeyPair)
  {
    if (paramInt != 355) {
      switch (paramInt)
      {
      default: 
        return null;
      }
    }
    for (;;)
    {
      try
      {
        paramKeyPair = paramKeyPair.getPublic();
        paramKeyPair = paramKeyPair.getEncoded();
        return paramKeyPair;
      }
      catch (Exception paramKeyPair) {}
      paramKeyPair = CryptoTools.getDERRSAPublicKey(paramKeyPair);
      return paramKeyPair;
      paramKeyPair = CryptoTools.getRAWRSAPublicKey(paramKeyPair);
      return paramKeyPair;
      paramKeyPair = paramKeyPair.getPublic();
      continue;
      paramKeyPair = CryptoTools.getRAWECPublicKey(paramKeyPair);
      return paramKeyPair;
      paramKeyPair = paramKeyPair.getPublic();
    }
    paramKeyPair.printStackTrace();
    return null;
  }
  
  public static String getVendorIDFromAAID(String paramString)
  {
    if (StringTools.isValidateString(paramString)) {
      return StringTools.splitStrFlag(paramString, "#")[0];
    }
    return null;
  }
  
  public static String mixKHATokenWithAppID(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString1);
    localStringBuilder.append(paramString2);
    return StringTools.subStringByByte(StringTools.urlSafeBase64Enc(CryptoTools.hash(localStringBuilder.toString(), "SHA256")), 32);
  }
}
