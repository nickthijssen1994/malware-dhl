package org.org.union.fido.util.asn1;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.SimpleTimeZone;

public class DERUTCTime
  extends ASN1Object
{
  String time;
  
  public DERUTCTime(String paramString)
  {
    time = paramString;
    try
    {
      getDate();
      return;
    }
    catch (ParseException paramString)
    {
      StringBuilder localStringBuilder = new StringBuilder("invalid date string: ");
      localStringBuilder.append(paramString.getMessage());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
  }
  
  public DERUTCTime(Date paramDate)
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyMMddHHmmss'Z'");
    localSimpleDateFormat.setTimeZone(new SimpleTimeZone(0, "Z"));
    time = localSimpleDateFormat.format(paramDate);
  }
  
  DERUTCTime(byte[] paramArrayOfByte)
  {
    char[] arrayOfChar = new char[paramArrayOfByte.length];
    int i = 0;
    while (i != arrayOfChar.length)
    {
      arrayOfChar[i] = ((char)(paramArrayOfByte[i] & 0xFF));
      i += 1;
    }
    time = new String(arrayOfChar);
  }
  
  public static DERUTCTime getInstance(Object paramObject)
  {
    if ((paramObject != null) && (!(paramObject instanceof DERUTCTime)))
    {
      if ((paramObject instanceof ASN1OctetString)) {
        return new DERUTCTime(((ASN1OctetString)paramObject).getOctets());
      }
      StringBuilder localStringBuilder = new StringBuilder("illegal object in getInstance: ");
      localStringBuilder.append(paramObject.getClass().getName());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return (DERUTCTime)paramObject;
  }
  
  public static DERUTCTime getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  private byte[] getOctets()
  {
    char[] arrayOfChar = time.toCharArray();
    byte[] arrayOfByte = new byte[arrayOfChar.length];
    int i = 0;
    while (i != arrayOfChar.length)
    {
      arrayOfByte[i] = ((byte)arrayOfChar[i]);
      i += 1;
    }
    return arrayOfByte;
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DERUTCTime)) {
      return false;
    }
    return time.equals(time);
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    paramDEROutputStream.writeEncoded(23, getOctets());
  }
  
  public Date getAdjustedDate()
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmssz");
    localSimpleDateFormat.setTimeZone(new SimpleTimeZone(0, "Z"));
    return localSimpleDateFormat.parse(getAdjustedTime());
  }
  
  public String getAdjustedTime()
  {
    String str = getTime();
    if (str.charAt(0) < '5') {}
    for (StringBuilder localStringBuilder = new StringBuilder("20");; localStringBuilder = new StringBuilder("19"))
    {
      localStringBuilder.append(str);
      return localStringBuilder.toString();
    }
  }
  
  public Date getDate()
  {
    return new SimpleDateFormat("yyMMddHHmmssz").parse(getTime());
  }
  
  public String getTime()
  {
    Object localObject2;
    Object localObject1;
    if ((time.indexOf('-') < 0) && (time.indexOf('+') < 0)) {
      if (time.length() == 11)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(time.substring(0, 10));
        localObject1 = "00GMT+00:00";
      }
    }
    for (;;)
    {
      ((StringBuilder)localObject2).append((String)localObject1);
      return ((StringBuilder)localObject2).toString();
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append(time.substring(0, 12));
      localObject1 = "GMT+00:00";
      continue;
      int j = time.indexOf('-');
      int i = j;
      if (j < 0) {
        i = time.indexOf('+');
      }
      localObject2 = time;
      localObject1 = localObject2;
      if (i == ((String)localObject2).length() - 3)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append("00");
        localObject1 = ((StringBuilder)localObject1).toString();
      }
      if (i == 10)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(((String)localObject1).substring(0, 10));
        ((StringBuilder)localObject2).append("00GMT");
        ((StringBuilder)localObject2).append(((String)localObject1).substring(10, 13));
        ((StringBuilder)localObject2).append(":");
        localObject1 = ((String)localObject1).substring(13, 15);
      }
      else
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(((String)localObject1).substring(0, 12));
        ((StringBuilder)localObject2).append("GMT");
        ((StringBuilder)localObject2).append(((String)localObject1).substring(12, 15));
        ((StringBuilder)localObject2).append(":");
        localObject1 = ((String)localObject1).substring(15, 17);
      }
    }
  }
  
  public int hashCode()
  {
    return time.hashCode();
  }
  
  public String toString()
  {
    return time;
  }
}
