package org.org.union.fido.util.cli;

import java.io.IOException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import javax.security.auth.x500.X500Principal;
import org.org.union.fido.util.X509Principal;
import org.org.union.fido.util.asn1.ASN1Encodable;
import org.org.union.fido.util.asn1.ASN1InputStream;
import org.org.union.fido.util.asn1.ASN1Object;
import org.org.union.fido.util.asn1.ASN1Sequence;
import org.org.union.fido.util.asn1.ASN1Set;
import org.org.union.fido.util.asn1.DERBitString;
import org.org.union.fido.util.asn1.DEREncodable;
import org.org.union.fido.util.asn1.DERObjectIdentifier;
import org.org.union.fido.util.asn1.pkcs.CertificationRequest;
import org.org.union.fido.util.asn1.pkcs.CertificationRequestInfo;
import org.org.union.fido.util.asn1.pkcs.PKCSObjectIdentifiers;
import org.org.union.fido.util.asn1.util.Strings;
import org.org.union.fido.util.asn1.x509.AlgorithmIdentifier;
import org.org.union.fido.util.asn1.x509.SubjectPublicKeyInfo;
import org.org.union.fido.util.asn1.x509.X509Name;

public class PKCS10CertificationRequest
  extends CertificationRequest
{
  private static Hashtable algorithms = new Hashtable();
  private static Hashtable keyAlgorithms;
  private static Set noParams;
  private static Hashtable oids;
  private static Hashtable params = new Hashtable();
  
  static
  {
    keyAlgorithms = new Hashtable();
    oids = new Hashtable();
    noParams = new HashSet();
    algorithms.put("MD2WITHRSAENCRYPTION", new DERObjectIdentifier("1.2.840.113549.1.1.2"));
    algorithms.put("MD2WITHRSA", new DERObjectIdentifier("1.2.840.113549.1.1.2"));
    algorithms.put("MD5WITHRSAENCRYPTION", new DERObjectIdentifier("1.2.840.113549.1.1.4"));
    algorithms.put("MD5WITHRSA", new DERObjectIdentifier("1.2.840.113549.1.1.4"));
    algorithms.put("RSAWITHMD5", new DERObjectIdentifier("1.2.840.113549.1.1.4"));
    algorithms.put("SHA1WITHRSAENCRYPTION", new DERObjectIdentifier("1.2.840.113549.1.1.5"));
    algorithms.put("SHA1WITHRSA", new DERObjectIdentifier("1.2.840.113549.1.1.5"));
    algorithms.put("SHA224WITHRSAENCRYPTION", PKCSObjectIdentifiers.sha224WithRSAEncryption);
    algorithms.put("SHA224WITHRSA", PKCSObjectIdentifiers.sha224WithRSAEncryption);
    algorithms.put("SHA256WITHRSAENCRYPTION", PKCSObjectIdentifiers.sha256WithRSAEncryption);
    algorithms.put("SHA256WITHRSA", PKCSObjectIdentifiers.sha256WithRSAEncryption);
    algorithms.put("SHA384WITHRSAENCRYPTION", PKCSObjectIdentifiers.sha384WithRSAEncryption);
    algorithms.put("SHA384WITHRSA", PKCSObjectIdentifiers.sha384WithRSAEncryption);
    algorithms.put("SHA512WITHRSAENCRYPTION", PKCSObjectIdentifiers.sha512WithRSAEncryption);
    algorithms.put("SHA512WITHRSA", PKCSObjectIdentifiers.sha512WithRSAEncryption);
    oids.put(new DERObjectIdentifier("1.2.840.113549.1.1.5"), "SHA1WITHRSA");
    oids.put(PKCSObjectIdentifiers.sha224WithRSAEncryption, "SHA224WITHRSA");
    oids.put(PKCSObjectIdentifiers.sha256WithRSAEncryption, "SHA256WITHRSA");
    oids.put(PKCSObjectIdentifiers.sha384WithRSAEncryption, "SHA384WITHRSA");
    oids.put(PKCSObjectIdentifiers.sha512WithRSAEncryption, "SHA512WITHRSA");
    oids.put(new DERObjectIdentifier("1.2.840.113549.1.1.4"), "MD5WITHRSA");
    oids.put(new DERObjectIdentifier("1.2.840.113549.1.1.2"), "MD2WITHRSA");
    oids.put(new DERObjectIdentifier("1.2.840.10040.4.3"), "SHA1WITHDSA");
    keyAlgorithms.put(PKCSObjectIdentifiers.rsaEncryption, "RSA");
  }
  
  public PKCS10CertificationRequest(String paramString, X500Principal paramX500Principal, PublicKey paramPublicKey, ASN1Set paramASN1Set, PrivateKey paramPrivateKey)
  {
    this(paramString, convertName(paramX500Principal), paramPublicKey, paramASN1Set, paramPrivateKey);
  }
  
  public PKCS10CertificationRequest(String paramString, X509Name paramX509Name, PublicKey paramPublicKey, ASN1Set paramASN1Set)
  {
    paramString = Strings.toUpperCase(paramString);
    DERObjectIdentifier localDERObjectIdentifier = (DERObjectIdentifier)algorithms.get(paramString);
    if (localDERObjectIdentifier != null) {
      if (paramX509Name != null) {
        if (paramPublicKey != null)
        {
          if (noParams.contains(localDERObjectIdentifier)) {}
          for (paramString = new AlgorithmIdentifier(localDERObjectIdentifier);; paramString = new AlgorithmIdentifier(localDERObjectIdentifier, null))
          {
            sigAlgId = paramString;
            break;
            if (params.containsKey(paramString))
            {
              sigAlgId = new AlgorithmIdentifier(localDERObjectIdentifier, (DEREncodable)params.get(paramString));
              break;
            }
          }
        }
      }
    }
    try
    {
      paramString = ASN1Object.fromByteArray(paramPublicKey.getEncoded());
      paramString = (ASN1Sequence)paramString;
      paramString = new CertificationRequestInfo(paramX509Name, new SubjectPublicKeyInfo(paramString), paramASN1Set);
      reqInfo = paramString;
      return;
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("can't encode public key");
    throw new IllegalArgumentException("public key must not be null");
    throw new IllegalArgumentException("subject must not be null");
    throw new IllegalArgumentException("Unknown signature type requested");
  }
  
  public PKCS10CertificationRequest(String paramString, X509Name paramX509Name, PublicKey paramPublicKey, ASN1Set paramASN1Set, PrivateKey paramPrivateKey)
  {
    Object localObject = Strings.toUpperCase(paramString);
    DERObjectIdentifier localDERObjectIdentifier = (DERObjectIdentifier)algorithms.get(localObject);
    if (localDERObjectIdentifier != null) {
      if (paramX509Name != null) {
        if (paramPublicKey != null)
        {
          if (noParams.contains(localDERObjectIdentifier)) {}
          for (localObject = new AlgorithmIdentifier(localDERObjectIdentifier);; localObject = new AlgorithmIdentifier(localDERObjectIdentifier, null))
          {
            sigAlgId = ((AlgorithmIdentifier)localObject);
            break;
            if (params.containsKey(localObject))
            {
              sigAlgId = new AlgorithmIdentifier(localDERObjectIdentifier, (DEREncodable)params.get(localObject));
              break;
            }
          }
        }
      }
    }
    try
    {
      paramPublicKey = ASN1Object.fromByteArray(paramPublicKey.getEncoded());
      paramPublicKey = (ASN1Sequence)paramPublicKey;
      paramX509Name = new CertificationRequestInfo(paramX509Name, new SubjectPublicKeyInfo(paramPublicKey), paramASN1Set);
      reqInfo = paramX509Name;
      paramString = Signature.getInstance(paramString);
      paramString.initSign(paramPrivateKey);
      paramX509Name = reqInfo;
      try
      {
        paramString.update(paramX509Name.getEncoded("DER"));
        sigBits = new DERBitString(paramString.sign());
        return;
      }
      catch (Exception paramString)
      {
        paramX509Name = new StringBuilder("exception encoding TBS cert request - ");
        paramX509Name.append(paramString);
        throw new IllegalArgumentException(paramX509Name.toString());
      }
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("can't encode public key");
    throw new IllegalArgumentException("public key must not be null");
    throw new IllegalArgumentException("subject must not be null");
    throw new IllegalArgumentException("Unknown signature type requested");
  }
  
  public PKCS10CertificationRequest(String paramString, X509Name paramX509Name, PublicKey paramPublicKey, ASN1Set paramASN1Set, Signature paramSignature)
  {
    paramString = Strings.toUpperCase(paramString);
    DERObjectIdentifier localDERObjectIdentifier = (DERObjectIdentifier)algorithms.get(paramString);
    if (localDERObjectIdentifier != null) {
      if (paramX509Name != null) {
        if (paramPublicKey != null)
        {
          if (noParams.contains(localDERObjectIdentifier)) {}
          for (paramString = new AlgorithmIdentifier(localDERObjectIdentifier);; paramString = new AlgorithmIdentifier(localDERObjectIdentifier, null))
          {
            sigAlgId = paramString;
            break;
            if (params.containsKey(paramString))
            {
              sigAlgId = new AlgorithmIdentifier(localDERObjectIdentifier, (DEREncodable)params.get(paramString));
              break;
            }
          }
        }
      }
    }
    try
    {
      paramString = ASN1Object.fromByteArray(paramPublicKey.getEncoded());
      paramString = (ASN1Sequence)paramString;
      paramString = new CertificationRequestInfo(paramX509Name, new SubjectPublicKeyInfo(paramString), paramASN1Set);
      reqInfo = paramString;
      paramString = reqInfo;
      try
      {
        paramSignature.update(paramString.getEncoded("DER"));
        sigBits = new DERBitString(paramSignature.sign());
        return;
      }
      catch (Exception paramString)
      {
        paramX509Name = new StringBuilder("exception encoding TBS cert request - ");
        paramX509Name.append(paramString);
        throw new IllegalArgumentException(paramX509Name.toString());
      }
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("can't encode public key");
    throw new IllegalArgumentException("public key must not be null");
    throw new IllegalArgumentException("subject must not be null");
    throw new IllegalArgumentException("Unknown signature type requested");
  }
  
  public PKCS10CertificationRequest(ASN1Sequence paramASN1Sequence)
  {
    super(paramASN1Sequence);
  }
  
  public PKCS10CertificationRequest(byte[] paramArrayOfByte)
  {
    super(toDERSequence(paramArrayOfByte));
  }
  
  private static X509Name convertName(X500Principal paramX500Principal)
  {
    try
    {
      paramX500Principal = new X509Principal(paramX500Principal.getEncoded());
      return paramX500Principal;
    }
    catch (IOException paramX500Principal)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("can't convert name");
  }
  
  private static ASN1Sequence toDERSequence(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = new ASN1InputStream(paramArrayOfByte).readObject();
      return (ASN1Sequence)paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("badly encoded request");
  }
  
  public byte[] getEncoded()
  {
    try
    {
      byte[] arrayOfByte = getEncoded("DER");
      return arrayOfByte;
    }
    catch (IOException localIOException)
    {
      throw new RuntimeException(localIOException.toString());
    }
  }
  
  public byte[] getReqInfoEncoded()
  {
    Object localObject = reqInfo;
    try
    {
      localObject = ((ASN1Encodable)localObject).getEncoded("DER");
      return localObject;
    }
    catch (Exception localException)
    {
      StringBuilder localStringBuilder = new StringBuilder("exception encoding TBS cert request - ");
      localStringBuilder.append(localException);
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
  }
  
  public void setSigBits(byte[] paramArrayOfByte)
  {
    sigBits = new DERBitString(paramArrayOfByte);
  }
}
