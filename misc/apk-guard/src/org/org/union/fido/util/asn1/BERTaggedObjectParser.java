package org.org.union.fido.util.asn1;

import java.io.IOException;
import java.io.InputStream;

public class BERTaggedObjectParser
  implements ASN1TaggedObjectParser
{
  private int _baseTag;
  private InputStream _contentStream;
  private boolean _indefiniteLength;
  private int _tagNumber;
  
  protected BERTaggedObjectParser(int paramInt1, int paramInt2, InputStream paramInputStream)
  {
    _baseTag = paramInt1;
    _tagNumber = paramInt2;
    _contentStream = paramInputStream;
    _indefiniteLength = (paramInputStream instanceof IndefiniteLengthInputStream);
  }
  
  private ASN1EncodableVector rLoadVector(InputStream paramInputStream)
  {
    try
    {
      paramInputStream = new ASN1StreamParser(paramInputStream).readVector();
      return paramInputStream;
    }
    catch (IOException paramInputStream)
    {
      throw new ASN1ParsingException(paramInputStream.getMessage(), paramInputStream);
    }
  }
  
  public DERObject getDERObject()
  {
    if (_indefiniteLength)
    {
      localObject = rLoadVector(_contentStream);
      if (((DEREncodableVector)localObject).size() == 1) {
        return new BERTaggedObject(true, _tagNumber, ((DEREncodableVector)localObject).get(0));
      }
      return new BERTaggedObject(false, _tagNumber, BERFactory.createSequence((ASN1EncodableVector)localObject));
    }
    if (isConstructed())
    {
      localObject = rLoadVector(_contentStream);
      if (((DEREncodableVector)localObject).size() == 1) {
        return new DERTaggedObject(true, _tagNumber, ((DEREncodableVector)localObject).get(0));
      }
      return new DERTaggedObject(false, _tagNumber, DERFactory.createSequence((ASN1EncodableVector)localObject));
    }
    Object localObject = (DefiniteLengthInputStream)_contentStream;
    int i = _tagNumber;
    try
    {
      localObject = new DERTaggedObject(false, i, new DEROctetString(((DefiniteLengthInputStream)localObject).toByteArray()));
      return localObject;
    }
    catch (IOException localIOException)
    {
      throw new IllegalStateException(localIOException.getMessage());
    }
  }
  
  public DEREncodable getObjectParser(int paramInt, boolean paramBoolean)
  {
    if (paramBoolean) {
      return new ASN1StreamParser(_contentStream).readObject();
    }
    if (paramInt != 4)
    {
      switch (paramInt)
      {
      default: 
        throw new RuntimeException("implicit tagging not implemented");
      case 17: 
        if (_indefiniteLength) {
          return new BERSetParser(new ASN1StreamParser(_contentStream));
        }
        return new DERSetParser(new ASN1StreamParser(_contentStream));
      }
      if (_indefiniteLength) {
        return new BERSequenceParser(new ASN1StreamParser(_contentStream));
      }
      return new DERSequenceParser(new ASN1StreamParser(_contentStream));
    }
    if ((!_indefiniteLength) && (!isConstructed())) {
      return new DEROctetStringParser((DefiniteLengthInputStream)_contentStream);
    }
    return new BEROctetStringParser(new ASN1StreamParser(_contentStream));
  }
  
  public int getTagNo()
  {
    return _tagNumber;
  }
  
  public boolean isConstructed()
  {
    return (_baseTag & 0x20) != 0;
  }
}
