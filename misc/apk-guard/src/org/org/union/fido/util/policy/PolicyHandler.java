package org.org.union.fido.util.policy;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.org.union.fido.bean.uafclient.policy.MatchCriteria;
import org.org.union.fido.bean.uafclient.policy.Policy;
import org.org.union.fido.bean.wiki.AuthenticatorInfo;
import org.org.union.fido.util.CommonTools;
import org.org.union.fido.util.UAFTools;

public class PolicyHandler
{
  public PolicyHandler() {}
  
  private static boolean acceptedCompare(MatchCriteria paramMatchCriteria, AuthenticatorInfo paramAuthenticatorInfo, List paramList, boolean paramBoolean)
  {
    String str1 = aaid;
    String str2 = UAFTools.getVendorIDFromAAID(str1);
    boolean bool1;
    if (CommonTools.isValidateList(paramMatchCriteria.getAaid()))
    {
      if ((!paramMatchCriteria.getAaid().contains(str1.toLowerCase())) && (!paramMatchCriteria.getAaid().contains(str1.toUpperCase()))) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      if ((bool1) && (paramBoolean) && ((isSecondFactorOnly) || (!isRoamingAuthenticator))) {
        if (CommonTools.isValidateList(paramList))
        {
          if (CommonTools.isValidateList(paramMatchCriteria.getKeyIDs()))
          {
            bool1 = CommonTools.ifElementContains(paramMatchCriteria.getKeyIDs(), paramList) & true;
            break label136;
          }
        }
        else
        {
          bool1 = false;
          break label136;
        }
      }
    }
    else
    {
      bool1 = true;
    }
    label136:
    if (CommonTools.isValidateList(paramMatchCriteria.getVendorID())) {
      paramBoolean = paramMatchCriteria.getVendorID().contains(str2);
    } else {
      paramBoolean = true;
    }
    int i;
    if ((!CommonTools.longEqualAccepted(paramMatchCriteria.getUserVerification(), userVerification)) && (((userVerification & 0x400) != 0L) || ((paramMatchCriteria.getUserVerification() & 0x400) != 0L) || ((userVerification & paramMatchCriteria.getUserVerification()) == 0L))) {
      i = 0;
    } else {
      i = 1;
    }
    boolean bool5 = CommonTools.intEqualAccepted(paramMatchCriteria.getKeyProtection(), keyProtection);
    boolean bool6 = CommonTools.intEqualAccepted(paramMatchCriteria.getMatcherProtection(), matcherProtection);
    boolean bool7 = CommonTools.longEqualAccepted(paramMatchCriteria.getAttachmentHint(), attachmentHint);
    boolean bool8 = CommonTools.intEqualAccepted(paramMatchCriteria.getTcDisplay(), tcDisplay);
    boolean bool2;
    if (CommonTools.isValidateList(paramMatchCriteria.getAuthenticationAlgorithms())) {
      bool2 = paramMatchCriteria.getAuthenticationAlgorithms().contains(Integer.valueOf(authenticationAlgorithm));
    } else {
      bool2 = true;
    }
    boolean bool3;
    if (CommonTools.isValidateList(paramMatchCriteria.getAssertionSchemes())) {
      bool3 = paramMatchCriteria.getAssertionSchemes().contains(assertionScheme);
    } else {
      bool3 = true;
    }
    boolean bool4;
    if (CommonTools.isValidateList(paramMatchCriteria.getAttestationTypes())) {
      bool4 = CommonTools.ifElementContains(paramMatchCriteria.getAttestationTypes(), attestationTypes);
    } else {
      bool4 = true;
    }
    return (bool1) && (paramBoolean) && (i != 0) && (bool5) && (bool6) && (bool7) && (bool8) && (bool2) && (bool3) && (bool4);
  }
  
  private static boolean acceptedCompare(MatchCriteria paramMatchCriteria, AuthenticatorInfo paramAuthenticatorInfo, List paramList1, boolean paramBoolean, List paramList2)
  {
    ArrayList localArrayList = new ArrayList();
    String str1 = aaid;
    String str2 = UAFTools.getVendorIDFromAAID(str1);
    boolean bool2 = CommonTools.isValidateList(paramMatchCriteria.getAaid());
    boolean bool6 = false;
    boolean bool1;
    if (bool2)
    {
      if ((!paramMatchCriteria.getAaid().contains(str1.toLowerCase())) && (!paramMatchCriteria.getAaid().contains(str1.toUpperCase()))) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      if ((bool1) && (paramBoolean) && ((isSecondFactorOnly) || (!isRoamingAuthenticator))) {
        if (CommonTools.isValidateList(paramList1))
        {
          if (CommonTools.isValidateList(paramMatchCriteria.getKeyIDs()))
          {
            bool1 = CommonTools.ifElementContains(paramMatchCriteria.getKeyIDs(), paramList1, paramMatchCriteria.getExts(), localArrayList) & true;
            break label158;
          }
        }
        else
        {
          bool1 = false;
          break label158;
        }
      }
    }
    else
    {
      bool1 = true;
    }
    label158:
    if (CommonTools.isValidateList(paramMatchCriteria.getVendorID())) {
      paramBoolean = paramMatchCriteria.getVendorID().contains(str2);
    } else {
      paramBoolean = true;
    }
    int i;
    if ((!CommonTools.longEqualAccepted(paramMatchCriteria.getUserVerification(), userVerification)) && (((userVerification & 0x400) != 0L) || ((paramMatchCriteria.getUserVerification() & 0x400) != 0L) || ((userVerification & paramMatchCriteria.getUserVerification()) == 0L))) {
      i = 0;
    } else {
      i = 1;
    }
    boolean bool7 = CommonTools.intEqualAccepted(paramMatchCriteria.getKeyProtection(), keyProtection);
    boolean bool8 = CommonTools.intEqualAccepted(paramMatchCriteria.getMatcherProtection(), matcherProtection);
    boolean bool9 = CommonTools.longEqualAccepted(paramMatchCriteria.getAttachmentHint(), attachmentHint);
    boolean bool10 = CommonTools.intEqualAccepted(paramMatchCriteria.getTcDisplay(), tcDisplay);
    if (CommonTools.isValidateList(paramMatchCriteria.getAuthenticationAlgorithms())) {
      bool2 = paramMatchCriteria.getAuthenticationAlgorithms().contains(Integer.valueOf(authenticationAlgorithm));
    } else {
      bool2 = true;
    }
    boolean bool3;
    if (CommonTools.isValidateList(paramMatchCriteria.getAssertionSchemes())) {
      bool3 = paramMatchCriteria.getAssertionSchemes().contains(assertionScheme);
    } else {
      bool3 = true;
    }
    boolean bool4;
    if (CommonTools.isValidateList(paramMatchCriteria.getAttestationTypes())) {
      bool4 = CommonTools.ifElementContains(paramMatchCriteria.getAttestationTypes(), attestationTypes);
    } else {
      bool4 = true;
    }
    boolean bool5 = bool6;
    if (bool1)
    {
      bool5 = bool6;
      if (paramBoolean)
      {
        bool5 = bool6;
        if (i != 0)
        {
          bool5 = bool6;
          if (bool7)
          {
            bool5 = bool6;
            if (bool8)
            {
              bool5 = bool6;
              if (bool9)
              {
                bool5 = bool6;
                if (bool10)
                {
                  bool5 = bool6;
                  if (bool2)
                  {
                    bool5 = bool6;
                    if (bool3)
                    {
                      bool5 = bool6;
                      if (bool4) {
                        bool5 = true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (bool5) {
      paramList2.addAll(localArrayList);
    }
    return bool5;
  }
  
  private static boolean compareRegister(Policy paramPolicy, AuthenticatorInfo paramAuthenticatorInfo, List paramList, boolean paramBoolean)
  {
    Object localObject = paramPolicy.getAccepted();
    paramPolicy = paramPolicy.getDisallowed();
    if (CommonTools.isValidateList(paramPolicy))
    {
      paramPolicy = paramPolicy.iterator();
      while (paramPolicy.hasNext()) {
        if (disallowedCompare(paramAuthenticatorInfo, (MatchCriteria)paramPolicy.next(), paramList, paramBoolean)) {
          return false;
        }
      }
    }
    if (!CommonTools.isValidateList((List)localObject)) {
      return true;
    }
    do
    {
      paramPolicy = ((List)localObject).iterator();
      while (!((Iterator)localObject).hasNext())
      {
        if (!paramPolicy.hasNext()) {
          break;
        }
        localObject = ((List)paramPolicy.next()).iterator();
      }
    } while (!acceptedCompare((MatchCriteria)((Iterator)localObject).next(), paramAuthenticatorInfo, paramList, paramBoolean));
    return true;
    return false;
  }
  
  private static boolean compareRegister(Policy paramPolicy, AuthenticatorInfo paramAuthenticatorInfo, List paramList1, boolean paramBoolean, List paramList2)
  {
    Object localObject = paramPolicy.getAccepted();
    paramPolicy = paramPolicy.getDisallowed();
    if (CommonTools.isValidateList(paramPolicy))
    {
      paramPolicy = paramPolicy.iterator();
      while (paramPolicy.hasNext()) {
        if (disallowedCompare(paramAuthenticatorInfo, (MatchCriteria)paramPolicy.next(), paramList1, paramBoolean)) {
          return false;
        }
      }
    }
    if (!CommonTools.isValidateList((List)localObject)) {
      return true;
    }
    do
    {
      paramPolicy = ((List)localObject).iterator();
      while (!((Iterator)localObject).hasNext())
      {
        if (!paramPolicy.hasNext()) {
          break;
        }
        localObject = ((List)paramPolicy.next()).iterator();
      }
    } while (!acceptedCompare((MatchCriteria)((Iterator)localObject).next(), paramAuthenticatorInfo, paramList1, paramBoolean, paramList2));
    return true;
    return false;
  }
  
  private static boolean disallowedCompare(AuthenticatorInfo paramAuthenticatorInfo, MatchCriteria paramMatchCriteria, List paramList, boolean paramBoolean)
  {
    String str1 = aaid;
    String str2 = UAFTools.getVendorIDFromAAID(str1);
    boolean bool1;
    if (CommonTools.isValidateList(paramMatchCriteria.getAaid()))
    {
      if ((!paramMatchCriteria.getAaid().contains(str1.toLowerCase())) && (!paramMatchCriteria.getAaid().contains(str1.toUpperCase()))) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      if ((bool1) && (!paramBoolean) && (CommonTools.isValidateList(paramMatchCriteria.getKeyIDs()))) {
        bool1 = CommonTools.ifElementContains(paramMatchCriteria.getKeyIDs(), paramList) & true;
      }
    }
    else
    {
      bool1 = false;
    }
    if (CommonTools.isValidateList(paramMatchCriteria.getVendorID())) {
      paramBoolean = paramMatchCriteria.getVendorID().contains(str2);
    } else {
      paramBoolean = false;
    }
    int i;
    if ((userVerification != paramMatchCriteria.getUserVerification()) && (((userVerification & 0x400) != 0L) || ((paramMatchCriteria.getUserVerification() & 0x400) != 0L) || ((userVerification & paramMatchCriteria.getUserVerification()) == 0L))) {
      i = 0;
    } else {
      i = 1;
    }
    boolean bool5 = CommonTools.intEqualDisallowed(paramMatchCriteria.getKeyProtection(), keyProtection);
    boolean bool6 = CommonTools.intEqualDisallowed(paramMatchCriteria.getMatcherProtection(), matcherProtection);
    boolean bool7 = CommonTools.longEqualDisallowed(paramMatchCriteria.getAttachmentHint(), attachmentHint);
    boolean bool8 = CommonTools.intEqualDisallowed(paramMatchCriteria.getTcDisplay(), tcDisplay);
    boolean bool2;
    if (CommonTools.isValidateList(paramMatchCriteria.getAuthenticationAlgorithms())) {
      bool2 = paramMatchCriteria.getAuthenticationAlgorithms().contains(Integer.valueOf(authenticationAlgorithm));
    } else {
      bool2 = false;
    }
    boolean bool3;
    if (CommonTools.isValidateList(paramMatchCriteria.getAssertionSchemes())) {
      bool3 = paramMatchCriteria.getAssertionSchemes().contains(assertionScheme);
    } else {
      bool3 = false;
    }
    boolean bool4;
    if (CommonTools.isValidateList(paramMatchCriteria.getAttestationTypes())) {
      bool4 = CommonTools.ifElementContains(paramMatchCriteria.getAttestationTypes(), attestationTypes);
    } else {
      bool4 = false;
    }
    if ((!bool1) && (!paramBoolean) && (i == 0) && (!bool5) && (!bool6) && (!bool7) && (!bool8) && (!bool2) && (!bool3)) {
      return bool4;
    }
    return true;
  }
  
  public static int getAcceptedAttestationTypes(Policy paramPolicy, AuthenticatorInfo paramAuthenticatorInfo)
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator1 = paramPolicy.getAccepted().iterator();
    if (localIterator1.hasNext())
    {
      Iterator localIterator2 = ((List)localIterator1.next()).iterator();
      label43:
      List localList;
      do
      {
        if (!localIterator2.hasNext()) {
          break;
        }
        paramPolicy = (MatchCriteria)localIterator2.next();
        localList = paramPolicy.getAaid();
        if (!CommonTools.isValidateList(localList)) {
          break label135;
        }
      } while (((!localList.contains(aaid.toLowerCase())) && (!localList.contains(aaid.toUpperCase()))) || (paramPolicy.getAttestationTypes() == null));
      label135:
      for (paramPolicy = paramPolicy.getAttestationTypes();; paramPolicy = attestationTypes)
      {
        localArrayList.addAll(paramPolicy);
        break label43;
        break;
      }
    }
    if (localArrayList.size() > 0) {
      return ((Short)localArrayList.get(0)).shortValue();
    }
    return 15880;
  }
  
  public static List getAcceptedKeyIDs(Policy paramPolicy, String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    paramPolicy = paramPolicy.getAccepted().iterator();
    while (paramPolicy.hasNext())
    {
      Iterator localIterator = ((List)paramPolicy.next()).iterator();
      while (localIterator.hasNext())
      {
        MatchCriteria localMatchCriteria = (MatchCriteria)localIterator.next();
        List localList = localMatchCriteria.getAaid();
        if ((CommonTools.isValidateList(localList)) && ((localList.contains(paramString.toLowerCase())) || (localList.contains(paramString.toUpperCase()))) && (localMatchCriteria.getKeyIDs() != null)) {
          localArrayList.addAll(localMatchCriteria.getKeyIDs());
        }
      }
    }
    return localArrayList;
  }
  
  public static AuthenticatorInfo getAllowedAuthenticator(Policy paramPolicy, AuthenticatorInfo paramAuthenticatorInfo, List paramList, boolean paramBoolean)
  {
    if (compareRegister(paramPolicy, paramAuthenticatorInfo, paramList, paramBoolean)) {
      return paramAuthenticatorInfo;
    }
    return null;
  }
  
  public static AuthenticatorInfo getAllowedAuthenticator(Policy paramPolicy, AuthenticatorInfo paramAuthenticatorInfo, List paramList1, boolean paramBoolean, List paramList2)
  {
    if (compareRegister(paramPolicy, paramAuthenticatorInfo, paramList1, paramBoolean, paramList2)) {
      return paramAuthenticatorInfo;
    }
    return null;
  }
}
