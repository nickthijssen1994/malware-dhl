package org.org.union.fido.util.asn1;

public abstract class ASN1TaggedObject
  extends ASN1Object
  implements ASN1TaggedObjectParser
{
  boolean empty = false;
  boolean explicit = true;
  DEREncodable obj = null;
  int tagNo;
  
  public ASN1TaggedObject(int paramInt, DEREncodable paramDEREncodable)
  {
    explicit = true;
    tagNo = paramInt;
    obj = paramDEREncodable;
  }
  
  public ASN1TaggedObject(boolean paramBoolean, int paramInt, DEREncodable paramDEREncodable)
  {
    if ((paramDEREncodable instanceof ASN1Choice)) {
      explicit = true;
    } else {
      explicit = paramBoolean;
    }
    tagNo = paramInt;
    obj = paramDEREncodable;
  }
  
  public static ASN1TaggedObject getInstance(Object paramObject)
  {
    if ((paramObject != null) && (!(paramObject instanceof ASN1TaggedObject)))
    {
      StringBuilder localStringBuilder = new StringBuilder("unknown object in getInstance: ");
      localStringBuilder.append(paramObject.getClass().getName());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return (ASN1TaggedObject)paramObject;
  }
  
  public static ASN1TaggedObject getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (ASN1TaggedObject)paramASN1TaggedObject.getObject();
    }
    throw new IllegalArgumentException("implicitly tagged tagged object");
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof ASN1TaggedObject)) {
      return false;
    }
    paramDERObject = (ASN1TaggedObject)paramDERObject;
    if ((tagNo == tagNo) && (empty == empty))
    {
      if (explicit != explicit) {
        return false;
      }
      DEREncodable localDEREncodable = obj;
      if (localDEREncodable == null)
      {
        if (obj != null) {
          return false;
        }
      }
      else if (!localDEREncodable.getDERObject().equals(obj.getDERObject())) {
        return false;
      }
      return true;
    }
    return false;
  }
  
  abstract void encode(DEROutputStream paramDEROutputStream);
  
  public DERObject getObject()
  {
    DEREncodable localDEREncodable = obj;
    if (localDEREncodable != null) {
      return localDEREncodable.getDERObject();
    }
    return null;
  }
  
  public DEREncodable getObjectParser(int paramInt, boolean paramBoolean)
  {
    if (paramInt != 4)
    {
      switch (paramInt)
      {
      default: 
        if (paramBoolean) {
          return getObject();
        }
        StringBuilder localStringBuilder = new StringBuilder("implicit tagging not implemented for tag: ");
        localStringBuilder.append(paramInt);
        throw new RuntimeException(localStringBuilder.toString());
      case 17: 
        return ASN1Set.getInstance(this, paramBoolean).parser();
      }
      return ASN1Sequence.getInstance(this, paramBoolean).parser();
    }
    return ASN1OctetString.getInstance(this, paramBoolean).parser();
  }
  
  public int getTagNo()
  {
    return tagNo;
  }
  
  public int hashCode()
  {
    int i = tagNo;
    DEREncodable localDEREncodable = obj;
    if (localDEREncodable != null) {
      return i ^ localDEREncodable.hashCode();
    }
    return i;
  }
  
  public boolean isEmpty()
  {
    return empty;
  }
  
  public boolean isExplicit()
  {
    return explicit;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("[");
    localStringBuilder.append(tagNo);
    localStringBuilder.append("]");
    localStringBuilder.append(obj);
    return localStringBuilder.toString();
  }
}
