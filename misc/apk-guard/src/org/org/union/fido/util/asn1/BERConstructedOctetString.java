package org.org.union.fido.util.asn1;

import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;

public class BERConstructedOctetString
  extends DEROctetString
{
  private static final int MAX_LENGTH = 1000;
  private Vector octs;
  
  public BERConstructedOctetString(Vector paramVector)
  {
    super(toBytes(paramVector));
    octs = paramVector;
  }
  
  public BERConstructedOctetString(DEREncodable paramDEREncodable)
  {
    super(paramDEREncodable.getDERObject());
  }
  
  public BERConstructedOctetString(DERObject paramDERObject)
  {
    super(paramDERObject);
  }
  
  public BERConstructedOctetString(byte[] paramArrayOfByte)
  {
    super(paramArrayOfByte);
  }
  
  private Vector generateOcts()
  {
    Vector localVector = new Vector();
    int j;
    for (int i = 0; i < string.length; i = j)
    {
      j = i + 1000;
      int k;
      if (j > string.length) {
        k = string.length;
      } else {
        k = j;
      }
      byte[] arrayOfByte = new byte[k - i];
      System.arraycopy(string, i, arrayOfByte, 0, arrayOfByte.length);
      localVector.addElement(new DEROctetString(arrayOfByte));
    }
    return localVector;
  }
  
  private static byte[] toBytes(Vector paramVector)
  {
    Object localObject = new ByteArrayOutputStream();
    int i = 0;
    for (;;)
    {
      if (i != paramVector.size()) {}
      try
      {
        ((ByteArrayOutputStream)localObject).write(((DEROctetString)paramVector.elementAt(i)).getOctets());
        i += 1;
      }
      catch (IOException paramVector)
      {
        localObject = new StringBuilder("exception converting octets ");
        ((StringBuilder)localObject).append(paramVector.toString());
        throw new IllegalArgumentException(((StringBuilder)localObject).toString());
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramVector.elementAt(i).getClass().getName());
        ((StringBuilder)localObject).append(" found in input should only contain DEROctetString");
        throw new IllegalArgumentException(((StringBuilder)localObject).toString());
        return ((ByteArrayOutputStream)localObject).toByteArray();
      }
      catch (ClassCastException localClassCastException)
      {
        for (;;) {}
      }
    }
  }
  
  public void encode(DEROutputStream paramDEROutputStream)
  {
    if ((!(paramDEROutputStream instanceof ASN1OutputStream)) && (!(paramDEROutputStream instanceof BEROutputStream)))
    {
      super.encode(paramDEROutputStream);
      return;
    }
    paramDEROutputStream.write(36);
    paramDEROutputStream.write(128);
    Enumeration localEnumeration = getObjects();
    while (localEnumeration.hasMoreElements()) {
      paramDEROutputStream.writeObject(localEnumeration.nextElement());
    }
    paramDEROutputStream.write(0);
    paramDEROutputStream.write(0);
  }
  
  public Enumeration getObjects()
  {
    Vector localVector = octs;
    if (localVector == null) {
      return generateOcts().elements();
    }
    return localVector.elements();
  }
  
  public byte[] getOctets()
  {
    return string;
  }
}
