package org.org.union.fido.util.asn1;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Vector;
import org.org.union.fido.util.asn1.util.Arrays;
import org.org.union.fido.util.asn1.util.encoders.Hex;

public abstract class ASN1OctetString
  extends ASN1Object
  implements ASN1OctetStringParser
{
  byte[] string;
  
  public ASN1OctetString(DEREncodable paramDEREncodable)
  {
    try
    {
      paramDEREncodable = paramDEREncodable.getDERObject().getEncoded("DER");
      string = paramDEREncodable;
      return;
    }
    catch (IOException paramDEREncodable)
    {
      StringBuilder localStringBuilder = new StringBuilder("Error processing object : ");
      localStringBuilder.append(paramDEREncodable.toString());
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
  }
  
  public ASN1OctetString(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte != null)
    {
      string = paramArrayOfByte;
      return;
    }
    throw new NullPointerException("string cannot be null");
  }
  
  public static ASN1OctetString getInstance(Object paramObject)
  {
    while ((paramObject != null) && (!(paramObject instanceof ASN1OctetString))) {
      if ((paramObject instanceof ASN1TaggedObject))
      {
        paramObject = ((ASN1TaggedObject)paramObject).getObject();
      }
      else
      {
        if ((paramObject instanceof ASN1Sequence))
        {
          localObject = new Vector();
          paramObject = ((ASN1Sequence)paramObject).getObjects();
          while (paramObject.hasMoreElements()) {
            ((Vector)localObject).addElement(paramObject.nextElement());
          }
          return new BERConstructedOctetString((Vector)localObject);
        }
        Object localObject = new StringBuilder("illegal object in getInstance: ");
        ((StringBuilder)localObject).append(paramObject.getClass().getName());
        throw new IllegalArgumentException(((StringBuilder)localObject).toString());
      }
    }
    return (ASN1OctetString)paramObject;
  }
  
  public static ASN1OctetString getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof ASN1OctetString)) {
      return false;
    }
    paramDERObject = (ASN1OctetString)paramDERObject;
    return Arrays.areEqual(string, string);
  }
  
  abstract void encode(DEROutputStream paramDEROutputStream);
  
  public InputStream getOctetStream()
  {
    return new ByteArrayInputStream(string);
  }
  
  public byte[] getOctets()
  {
    return string;
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(getOctets());
  }
  
  public ASN1OctetStringParser parser()
  {
    return this;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("#");
    localStringBuilder.append(new String(Hex.encode(string)));
    return localStringBuilder.toString();
  }
}
