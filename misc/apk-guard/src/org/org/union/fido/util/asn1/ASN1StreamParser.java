package org.org.union.fido.util.asn1;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

public class ASN1StreamParser
{
  private final InputStream _in;
  private final int _limit;
  
  public ASN1StreamParser(InputStream paramInputStream)
  {
    this(paramInputStream, findLimit(paramInputStream));
  }
  
  public ASN1StreamParser(InputStream paramInputStream, int paramInt)
  {
    _in = paramInputStream;
    _limit = paramInt;
  }
  
  public ASN1StreamParser(byte[] paramArrayOfByte)
  {
    this(new ByteArrayInputStream(paramArrayOfByte), paramArrayOfByte.length);
  }
  
  private static int findLimit(InputStream paramInputStream)
  {
    if ((paramInputStream instanceof DefiniteLengthInputStream)) {
      return ((DefiniteLengthInputStream)paramInputStream).getRemaining();
    }
    return Integer.MAX_VALUE;
  }
  
  private void set00Check(boolean paramBoolean)
  {
    InputStream localInputStream = _in;
    if ((localInputStream instanceof IndefiniteLengthInputStream)) {
      ((IndefiniteLengthInputStream)localInputStream).setEofOn00(paramBoolean);
    }
  }
  
  public DEREncodable readObject()
  {
    int i = _in.read();
    if (i == -1) {
      return null;
    }
    boolean bool = false;
    set00Check(false);
    int j = ASN1InputStream.readTagNumber(_in, i);
    if ((i & 0x20) != 0) {
      bool = true;
    }
    int k = ASN1InputStream.readLength(_in, _limit);
    if (k < 0)
    {
      if (bool)
      {
        localObject = new IndefiniteLengthInputStream(_in);
        if ((i & 0x40) != 0) {
          return new BERApplicationSpecificParser(j, new ASN1StreamParser((InputStream)localObject, _limit));
        }
        if ((i & 0x80) != 0) {
          return new BERTaggedObjectParser(i, j, (InputStream)localObject);
        }
        localObject = new ASN1StreamParser((InputStream)localObject, _limit);
        if (j != 4)
        {
          if (j != 8)
          {
            switch (j)
            {
            default: 
              localObject = new StringBuilder("unknown BER object encountered: 0x");
              ((StringBuilder)localObject).append(Integer.toHexString(j));
              throw new IOException(((StringBuilder)localObject).toString());
            case 17: 
              return new BERSetParser((ASN1StreamParser)localObject);
            }
            return new BERSequenceParser((ASN1StreamParser)localObject);
          }
          return new DERExternalParser((ASN1StreamParser)localObject);
        }
        return new BEROctetStringParser((ASN1StreamParser)localObject);
      }
      throw new IOException("indefinite length primitive encoding encountered");
    }
    Object localObject = new DefiniteLengthInputStream(_in, k);
    if ((i & 0x40) != 0) {
      return new DERApplicationSpecific(bool, j, ((DefiniteLengthInputStream)localObject).toByteArray());
    }
    if ((i & 0x80) != 0) {
      return new BERTaggedObjectParser(i, j, (InputStream)localObject);
    }
    if (bool)
    {
      if (j != 4)
      {
        if (j != 8)
        {
          switch (j)
          {
          default: 
            return new DERUnknownTag(true, j, ((DefiniteLengthInputStream)localObject).toByteArray());
          case 17: 
            return new DERSetParser(new ASN1StreamParser((InputStream)localObject));
          }
          return new DERSequenceParser(new ASN1StreamParser((InputStream)localObject));
        }
        return new DERExternalParser(new ASN1StreamParser((InputStream)localObject));
      }
      return new BEROctetStringParser(new ASN1StreamParser((InputStream)localObject));
    }
    if (j != 4) {
      return ASN1InputStream.createPrimitiveDERObject(j, ((DefiniteLengthInputStream)localObject).toByteArray());
    }
    return new DEROctetStringParser((DefiniteLengthInputStream)localObject);
  }
  
  ASN1EncodableVector readVector()
  {
    ASN1EncodableVector localASN1EncodableVector = new ASN1EncodableVector();
    for (;;)
    {
      DEREncodable localDEREncodable = readObject();
      if (localDEREncodable == null) {
        break;
      }
      localASN1EncodableVector.add(localDEREncodable.getDERObject());
    }
    return localASN1EncodableVector;
  }
}
