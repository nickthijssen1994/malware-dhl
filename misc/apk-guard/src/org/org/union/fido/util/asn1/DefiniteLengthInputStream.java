package org.org.union.fido.util.asn1;

import java.io.EOFException;
import java.io.InputStream;
import org.org.union.fido.util.asn1.util.shell.Streams;

class DefiniteLengthInputStream
  extends LimitedInputStream
{
  private static final byte[] EMPTY_BYTES = new byte[0];
  private final int _originalLength;
  private int _remaining;
  
  DefiniteLengthInputStream(InputStream paramInputStream, int paramInt)
  {
    super(paramInputStream);
    if (paramInt >= 0)
    {
      _originalLength = paramInt;
      _remaining = paramInt;
      if (paramInt == 0) {
        setParentEofDetect(true);
      }
    }
    else
    {
      throw new IllegalArgumentException("negative lengths not allowed");
    }
  }
  
  int getRemaining()
  {
    return _remaining;
  }
  
  public int read()
  {
    if (_remaining == 0) {
      return -1;
    }
    int i = _in.read();
    if (i >= 0)
    {
      int j = _remaining - 1;
      _remaining = j;
      if (j == 0)
      {
        setParentEofDetect(true);
        return i;
      }
    }
    else
    {
      StringBuilder localStringBuilder = new StringBuilder("DEF length ");
      localStringBuilder.append(_originalLength);
      localStringBuilder.append(" object truncated by ");
      localStringBuilder.append(_remaining);
      throw new EOFException(localStringBuilder.toString());
    }
    return i;
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    int i = _remaining;
    if (i == 0) {
      return -1;
    }
    paramInt2 = Math.min(paramInt2, i);
    paramInt1 = _in.read(paramArrayOfByte, paramInt1, paramInt2);
    if (paramInt1 >= 0)
    {
      paramInt2 = _remaining - paramInt1;
      _remaining = paramInt2;
      if (paramInt2 == 0)
      {
        setParentEofDetect(true);
        return paramInt1;
      }
    }
    else
    {
      paramArrayOfByte = new StringBuilder("DEF length ");
      paramArrayOfByte.append(_originalLength);
      paramArrayOfByte.append(" object truncated by ");
      paramArrayOfByte.append(_remaining);
      throw new EOFException(paramArrayOfByte.toString());
    }
    return paramInt1;
  }
  
  byte[] toByteArray()
  {
    int i = _remaining;
    if (i == 0) {
      return EMPTY_BYTES;
    }
    Object localObject = new byte[i];
    i -= Streams.readFully(_in, (byte[])localObject);
    _remaining = i;
    if (i == 0)
    {
      setParentEofDetect(true);
      return localObject;
    }
    localObject = new StringBuilder("DEF length ");
    ((StringBuilder)localObject).append(_originalLength);
    ((StringBuilder)localObject).append(" object truncated by ");
    ((StringBuilder)localObject).append(_remaining);
    throw new EOFException(((StringBuilder)localObject).toString());
  }
}
