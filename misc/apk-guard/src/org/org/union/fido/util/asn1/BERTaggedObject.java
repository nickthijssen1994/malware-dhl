package org.org.union.fido.util.asn1;

import java.io.FilterOutputStream;
import java.util.Enumeration;

public class BERTaggedObject
  extends DERTaggedObject
{
  public BERTaggedObject(int paramInt)
  {
    super(false, paramInt, new BERSequence());
  }
  
  public BERTaggedObject(int paramInt, DEREncodable paramDEREncodable)
  {
    super(paramInt, paramDEREncodable);
  }
  
  public BERTaggedObject(boolean paramBoolean, int paramInt, DEREncodable paramDEREncodable)
  {
    super(paramBoolean, paramInt, paramDEREncodable);
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    if ((!(paramDEROutputStream instanceof ASN1OutputStream)) && (!(paramDEROutputStream instanceof BEROutputStream)))
    {
      super.encode(paramDEROutputStream);
      return;
    }
    paramDEROutputStream.writeTag(160, tagNo);
    paramDEROutputStream.write(128);
    if (!empty)
    {
      if (!explicit)
      {
        Enumeration localEnumeration;
        if ((obj instanceof ASN1OctetString))
        {
          if ((obj instanceof BERConstructedOctetString)) {
            localEnumeration = ((BERConstructedOctetString)obj).getObjects();
          } else {
            localEnumeration = new BERConstructedOctetString(((ASN1OctetString)obj).getOctets()).getObjects();
          }
        }
        else if ((obj instanceof ASN1Sequence))
        {
          localEnumeration = ((ASN1Sequence)obj).getObjects();
        }
        else
        {
          if (!(obj instanceof ASN1Set)) {
            break label180;
          }
          localEnumeration = ((ASN1Set)obj).getObjects();
        }
        while (localEnumeration.hasMoreElements()) {
          paramDEROutputStream.writeObject(localEnumeration.nextElement());
        }
        label180:
        paramDEROutputStream = new StringBuilder("not implemented: ");
        paramDEROutputStream.append(obj.getClass().getName());
        throw new RuntimeException(paramDEROutputStream.toString());
      }
      paramDEROutputStream.writeObject(obj);
    }
    paramDEROutputStream.write(0);
    paramDEROutputStream.write(0);
  }
}
