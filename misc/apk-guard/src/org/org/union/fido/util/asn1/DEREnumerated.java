package org.org.union.fido.util.asn1;

import java.math.BigInteger;
import org.org.union.fido.util.asn1.util.Arrays;

public class DEREnumerated
  extends ASN1Object
{
  byte[] bytes;
  
  public DEREnumerated(int paramInt)
  {
    bytes = BigInteger.valueOf(paramInt).toByteArray();
  }
  
  public DEREnumerated(BigInteger paramBigInteger)
  {
    bytes = paramBigInteger.toByteArray();
  }
  
  public DEREnumerated(byte[] paramArrayOfByte)
  {
    bytes = paramArrayOfByte;
  }
  
  public static DEREnumerated getInstance(Object paramObject)
  {
    while ((paramObject != null) && (!(paramObject instanceof DEREnumerated)))
    {
      if ((paramObject instanceof ASN1OctetString)) {
        return new DEREnumerated(((ASN1OctetString)paramObject).getOctets());
      }
      if ((paramObject instanceof ASN1TaggedObject))
      {
        paramObject = ((ASN1TaggedObject)paramObject).getObject();
      }
      else
      {
        StringBuilder localStringBuilder = new StringBuilder("illegal object in getInstance: ");
        localStringBuilder.append(paramObject.getClass().getName());
        throw new IllegalArgumentException(localStringBuilder.toString());
      }
    }
    return (DEREnumerated)paramObject;
  }
  
  public static DEREnumerated getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DEREnumerated)) {
      return false;
    }
    paramDERObject = (DEREnumerated)paramDERObject;
    return Arrays.areEqual(bytes, bytes);
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    paramDEROutputStream.writeEncoded(10, bytes);
  }
  
  public BigInteger getValue()
  {
    return new BigInteger(bytes);
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(bytes);
  }
}
