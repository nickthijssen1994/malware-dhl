package org.org.union.fido.util.asn1;

import org.org.union.fido.util.asn1.util.Strings;

public class DERUTF8String
  extends ASN1Object
  implements DERString
{
  String string;
  
  public DERUTF8String(String paramString)
  {
    string = paramString;
  }
  
  DERUTF8String(byte[] paramArrayOfByte)
  {
    string = Strings.fromUTF8ByteArray(paramArrayOfByte);
  }
  
  public static DERUTF8String getInstance(Object paramObject)
  {
    while ((paramObject != null) && (!(paramObject instanceof DERUTF8String)))
    {
      if ((paramObject instanceof ASN1OctetString)) {
        return new DERUTF8String(((ASN1OctetString)paramObject).getOctets());
      }
      if ((paramObject instanceof ASN1TaggedObject))
      {
        paramObject = ((ASN1TaggedObject)paramObject).getObject();
      }
      else
      {
        StringBuilder localStringBuilder = new StringBuilder("illegal object in getInstance: ");
        localStringBuilder.append(paramObject.getClass().getName());
        throw new IllegalArgumentException(localStringBuilder.toString());
      }
    }
    return (DERUTF8String)paramObject;
  }
  
  public static DERUTF8String getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(paramASN1TaggedObject.getObject());
  }
  
  boolean asn1Equals(DERObject paramDERObject)
  {
    if (!(paramDERObject instanceof DERUTF8String)) {
      return false;
    }
    paramDERObject = (DERUTF8String)paramDERObject;
    return getString().equals(paramDERObject.getString());
  }
  
  void encode(DEROutputStream paramDEROutputStream)
  {
    paramDEROutputStream.writeEncoded(12, Strings.toUTF8ByteArray(string));
  }
  
  public String getString()
  {
    return string;
  }
  
  public int hashCode()
  {
    return getString().hashCode();
  }
  
  public String toString()
  {
    return string;
  }
}
