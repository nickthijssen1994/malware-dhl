package org.org.union.fido.util.asn1.x509;

import java.util.Enumeration;
import org.org.union.fido.util.asn1.ASN1Encodable;
import org.org.union.fido.util.asn1.ASN1EncodableVector;
import org.org.union.fido.util.asn1.ASN1InputStream;
import org.org.union.fido.util.asn1.ASN1Sequence;
import org.org.union.fido.util.asn1.ASN1TaggedObject;
import org.org.union.fido.util.asn1.DERBitString;
import org.org.union.fido.util.asn1.DEREncodable;
import org.org.union.fido.util.asn1.DEREncodableVector;
import org.org.union.fido.util.asn1.DERObject;
import org.org.union.fido.util.asn1.DERSequence;

public class SubjectPublicKeyInfo
  extends ASN1Encodable
{
  private AlgorithmIdentifier algId;
  private DERBitString keyData;
  
  public SubjectPublicKeyInfo(ASN1Sequence paramASN1Sequence)
  {
    if (paramASN1Sequence.size() == 2)
    {
      paramASN1Sequence = paramASN1Sequence.getObjects();
      algId = AlgorithmIdentifier.getInstance(paramASN1Sequence.nextElement());
      keyData = DERBitString.getInstance(paramASN1Sequence.nextElement());
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder("Bad sequence size: ");
    localStringBuilder.append(paramASN1Sequence.size());
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public SubjectPublicKeyInfo(AlgorithmIdentifier paramAlgorithmIdentifier, DEREncodable paramDEREncodable)
  {
    keyData = new DERBitString(paramDEREncodable);
    algId = paramAlgorithmIdentifier;
  }
  
  public SubjectPublicKeyInfo(AlgorithmIdentifier paramAlgorithmIdentifier, byte[] paramArrayOfByte)
  {
    keyData = new DERBitString(paramArrayOfByte);
    algId = paramAlgorithmIdentifier;
  }
  
  public static SubjectPublicKeyInfo getInstance(Object paramObject)
  {
    if ((paramObject instanceof SubjectPublicKeyInfo)) {
      return (SubjectPublicKeyInfo)paramObject;
    }
    if ((paramObject instanceof ASN1Sequence)) {
      return new SubjectPublicKeyInfo((ASN1Sequence)paramObject);
    }
    StringBuilder localStringBuilder = new StringBuilder("unknown object in factory: ");
    localStringBuilder.append(paramObject.getClass().getName());
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public static SubjectPublicKeyInfo getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean)
  {
    return getInstance(ASN1Sequence.getInstance(paramASN1TaggedObject, paramBoolean));
  }
  
  public AlgorithmIdentifier getAlgorithmId()
  {
    return algId;
  }
  
  public DERObject getPublicKey()
  {
    return new ASN1InputStream(keyData.getBytes()).readObject();
  }
  
  public DERBitString getPublicKeyData()
  {
    return keyData;
  }
  
  public DERObject toASN1Object()
  {
    ASN1EncodableVector localASN1EncodableVector = new ASN1EncodableVector();
    localASN1EncodableVector.add(algId);
    localASN1EncodableVector.add(keyData);
    return new DERSequence(localASN1EncodableVector);
  }
}
