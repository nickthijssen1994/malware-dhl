package org.org.union.fido;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Base64;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.jdcn.fido.http.HttpUtil;
import com.jdjr.risk.jdcn.common.utils.FsGsonUtil;
import com.wangyin.platform.CryptoUtils;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;
import org.org.union.fido.bean.Extension;
import org.org.union.fido.bean.uafclient.AuthenticationResponse;
import org.org.union.fido.bean.uafclient.Authenticator;
import org.org.union.fido.bean.uafclient.AuthenticatorRegistrationAssertion;
import org.org.union.fido.bean.uafclient.AuthenticatorSignAssertion;
import org.org.union.fido.bean.uafclient.AuthenticatorsSucBean;
import org.org.union.fido.bean.uafclient.DeregisterAuthenticator;
import org.org.union.fido.bean.uafclient.DiscoveryData;
import org.org.union.fido.bean.uafclient.ErrorCode;
import org.org.union.fido.bean.uafclient.Operation;
import org.org.union.fido.bean.uafclient.OperationHeader;
import org.org.union.fido.bean.uafclient.OperationRequest;
import org.org.union.fido.bean.uafclient.RegistrationResponse;
import org.org.union.fido.bean.uafclient.TrustedFacets;
import org.org.union.fido.bean.uafclient.UAFMessage;
import org.org.union.fido.bean.uafclient.androidutils.ChannelBinding;
import org.org.union.fido.bean.uafclient.policy.Policy;
import org.org.union.fido.bean.wiki.ASMRequest;
import org.org.union.fido.bean.wiki.ASMResponse;
import org.org.union.fido.bean.wiki.AuthenticateIn;
import org.org.union.fido.bean.wiki.AuthenticateOut;
import org.org.union.fido.bean.wiki.AuthenticatorInfo;
import org.org.union.fido.bean.wiki.CommitIn;
import org.org.union.fido.bean.wiki.DeregisterIn;
import org.org.union.fido.bean.wiki.GetInfoOut;
import org.org.union.fido.bean.wiki.RegisterIn;
import org.org.union.fido.bean.wiki.RegisterOut;
import org.org.union.fido.bean.wiki.Request;
import org.org.union.fido.common.GlobalConfiguration;
import org.org.union.fido.service.AsmService;
import org.org.union.fido.util.CommonTools;
import org.org.union.fido.util.CryptoTools;
import org.org.union.fido.util.StringTools;
import org.org.union.fido.util.UAFTools;
import org.org.union.fido.util.Utility;
import org.org.union.fido.util.management.HeaderValid;
import org.org.union.fido.util.management.RequestValid;
import org.org.union.fido.util.policy.PolicyHandler;

public class FidoSDK
  implements ErrorCode
{
  private static final String PAGE_KEY = "FidoSDK";
  private static volatile FidoSDK fidoSDK;
  private String appID = null;
  private String facet_id = null;
  private AsmService mAsmService;
  Context mContext;
  int sampleAuthIndex = 0;
  private org.org.union.fido.bean.uafclient.TrustApps trustApps;
  
  private FidoSDK(Context paramContext)
  {
    mContext = paramContext;
    mAsmService = new AsmService(paramContext);
    genFacetID();
    CryptoUtils.newInstance(paramContext).startAutoHandshake();
  }
  
  private List genExts(OperationRequest paramOperationRequest)
  {
    ArrayList localArrayList = new ArrayList();
    try
    {
      Object localObject = new JSONObject(new String(Base64.decode(paramOperationRequest.getHeader().getServerData(), 0)));
      paramOperationRequest = ((JSONObject)localObject).optString("downloadCer");
      Extension localExtension = new Extension();
      localExtension.setId("downloadCer");
      localExtension.setData("false");
      boolean bool = TextUtils.isEmpty(paramOperationRequest);
      if (!bool) {
        localExtension.setData(paramOperationRequest);
      }
      localArrayList.add(localExtension);
      localObject = ((JSONObject)localObject).optString("authType");
      localExtension = new Extension();
      localExtension.setId("authType");
      localExtension.setData("");
      bool = TextUtils.isEmpty(paramOperationRequest);
      if (!bool) {
        localExtension.setData((String)localObject);
      }
      localArrayList.add(localExtension);
      return localArrayList;
    }
    catch (Throwable paramOperationRequest) {}
    return localArrayList;
  }
  
  private String genFacetID()
  {
    Object localObject1 = (Activity)mContext;
    try
    {
      Object localObject2 = ((ContextWrapper)localObject1).getPackageName();
      if (localObject2 != null)
      {
        localObject1 = ((ContextWrapper)localObject1).getPackageManager().getPackageInfo((String)localObject2, 64);
        localObject1 = signatures[0];
        localObject1 = ((android.content.pm.Signature)localObject1).toByteArray();
        localObject1 = new ByteArrayInputStream((byte[])localObject1);
        localObject1 = CertificateFactory.getInstance("X509").generateCertificate((InputStream)localObject1);
        localObject1 = (X509Certificate)localObject1;
        localObject2 = MessageDigest.getInstance("SHA1");
        StringBuilder localStringBuilder = new StringBuilder("android:apk-key-hash:");
        localStringBuilder.append(Base64.encodeToString(((MessageDigest)localObject2).digest(((X509Certificate)localObject1).getEncoded()), 3));
        localObject1 = localStringBuilder.toString();
        facet_id = ((String)localObject1);
      }
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      localNoSuchAlgorithmException.printStackTrace();
    }
    catch (CertificateException localCertificateException)
    {
      localCertificateException.printStackTrace();
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      localNameNotFoundException.printStackTrace();
    }
    return facet_id;
  }
  
  public static final FidoSDK getInstance(Context paramContext)
  {
    if (fidoSDK == null) {
      try
      {
        if (fidoSDK == null)
        {
          fidoSDK = new FidoSDK(paramContext);
          GlobalConfiguration.getAuthenticatorInfo(paramContext);
          GlobalConfiguration.getSeriNumEID(paramContext);
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append(paramContext.getFilesDir().getPath());
          localStringBuilder.append("/fidoTable");
          Utility.readAssestToSD(paramContext, localStringBuilder.toString());
        }
      }
      catch (Throwable paramContext)
      {
        throw paramContext;
      }
    }
    fidoSDKmContext = paramContext;
    fidoSDKmAsmService.setmContext(paramContext);
    return fidoSDK;
  }
  
  private List getRegKeyIDs(AuthenticatorInfo paramAuthenticatorInfo, Policy paramPolicy)
  {
    new ArrayList();
    if (isRoamingAuthenticator) {
      return PolicyHandler.getAcceptedKeyIDs(paramPolicy, aaid);
    }
    return getRegistrationInfo(authenticatorIndex, appID);
  }
  
  private List getRegistrationInfo(short paramShort, String paramString)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a6 = a5\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  private void getTrustApps()
  {
    Object localObject = appID;
    try
    {
      localObject = HttpUtil.httpGet((String)localObject);
      if (localObject == null) {
        return;
      }
      int i = ((String)localObject).length();
      if (i <= 0) {
        return;
      }
      localObject = FsGsonUtil.gsonToBean((String)localObject, cn.com.union.fido.bean.uafclient.TrustApps.class);
      trustApps = ((org.org.union.fido.bean.uafclient.TrustApps)localObject);
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    trustApps = null;
    return;
  }
  
  public static boolean isFingersChange(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString1);
    localStringBuilder.append("004B#0001");
    localStringBuilder.append(paramString2);
    paramString1 = StringTools.urlSafeBase64Enc(CryptoTools.hash(localStringBuilder.toString(), "SHA256"));
    try
    {
      paramString2 = KeyStore.getInstance("AndroidKeyStore");
      paramString2.load(null);
      paramString1 = paramString2.getKey(paramString1, null);
      paramString1 = (PrivateKey)paramString1;
      java.security.Signature.getInstance("SHA256withRSA").initSign(paramString1);
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return true;
  }
  
  private short processingAuthenticationReq(String paramString1, String paramString2, UAFMessage paramUAFMessage1, UAFMessage paramUAFMessage2, Handler paramHandler1, Handler paramHandler2)
  {
    paramString2 = (org.org.union.fido.bean.uafclient.AuthenticationRequest)FsGsonUtil.gsonToBean(paramString1, cn.com.union.fido.bean.uafclient.AuthenticationRequest.class);
    short s = RequestValid.validOPRequest(paramString2);
    if (s != 0) {
      return s;
    }
    paramString1 = paramString2.getHeader();
    appID = paramString1.getAppID();
    if ((StringTools.isValidateString(appID)) && (!appID.equalsIgnoreCase(facet_id)))
    {
      getTrustApps();
    }
    else
    {
      appID = facet_id;
      trustApps = new org.org.union.fido.bean.uafclient.TrustApps();
      paramHandler1 = new ArrayList();
      paramHandler1.add(appID);
      paramUAFMessage2 = new TrustedFacets();
      paramUAFMessage2.setIds(paramHandler1);
      paramHandler1 = new ArrayList();
      paramHandler1.add(paramUAFMessage2);
      trustApps.setTrustedFacets(paramHandler1);
    }
    if (TextUtils.equals(Thread.currentThread().getName(), "JR_RISK_FIDO_INTERRUPT")) {
      return 24;
    }
    paramUAFMessage2 = trustApps;
    if (paramUAFMessage2 != null)
    {
      if (paramUAFMessage2.checkOrigin(facet_id))
      {
        paramUAFMessage2 = paramString2.getPolicy();
        paramHandler2 = GlobalConfiguration.authenticators;
        paramHandler1 = new ArrayList();
        if (paramHandler2 != null)
        {
          paramHandler2 = paramHandler2.iterator();
          while (paramHandler2.hasNext())
          {
            AuthenticatorInfo localAuthenticatorInfo = (AuthenticatorInfo)paramHandler2.next();
            localAuthenticatorInfo = PolicyHandler.getAllowedAuthenticator(paramUAFMessage2, localAuthenticatorInfo, getRegKeyIDs(localAuthenticatorInfo, paramString2.getPolicy()), true);
            if (localAuthenticatorInfo != null) {
              paramHandler1.add(localAuthenticatorInfo);
            }
          }
        }
        paramUAFMessage2 = new ArrayList();
        int i = paramHandler1.size();
        if (i <= 0) {
          return 5;
        }
        if (i > 1) {
          return 5;
        }
        paramHandler2 = (AuthenticatorInfo)paramHandler1.get(sampleAuthIndex);
        sampleAuthIndex = 0;
        paramHandler1 = new ChannelBinding();
        paramHandler1.fromJSON("{}");
        paramHandler1 = UAFTools.genFinalChallengeParams(appID, paramString2.getChallenge(), facet_id, paramHandler1);
        paramString2 = sendAuthentication2ASM(paramHandler2, paramString2, paramHandler1);
        i = statusCode;
        if (i == 0)
        {
          paramString2 = paramString2.getResponseData();
          if (paramString2 != null)
          {
            paramString2 = (AuthenticateOut)paramString2;
            paramHandler2 = new AuthenticatorSignAssertion();
            paramHandler2.setAssertion(assertion);
            paramHandler2.setAssertionScheme(assertionScheme);
            paramUAFMessage2.add(paramHandler2);
            paramString2 = new AuthenticationResponse();
            paramString2.setHeader(paramString1);
            paramString2.setFcParams(paramHandler1);
            paramString2.setAssertions(paramUAFMessage2);
            paramString1 = new ArrayList();
            paramString1.add(paramString2);
            uafProtocolMessage = FsGsonUtil.gsonString(paramString1);
            return 0;
          }
          return 255;
        }
        if (i == 2) {
          return 8;
        }
        if (i == 3) {
          return 3;
        }
        if (i == 4) {
          return 16;
        }
        if (i == 5) {
          return 17;
        }
        if (i == 6) {
          return 18;
        }
        if (i == 9) {
          return 19;
        }
        if (i == 16) {
          return 22;
        }
        if (i == 17) {
          return 32;
        }
        if (i == 18) {
          return 33;
        }
        if (i == 19) {
          return 34;
        }
        if (i == 20) {
          return 35;
        }
        if (i == 21) {
          return 36;
        }
        if (i == 22) {
          return 23;
        }
        if (i == 23) {
          return 24;
        }
        return 255;
      }
      return 7;
    }
    return 9;
  }
  
  private short processingDeregistrationReq(String paramString1, String paramString2, UAFMessage paramUAFMessage1, UAFMessage paramUAFMessage2, Handler paramHandler1, Handler paramHandler2)
  {
    paramString1 = (org.org.union.fido.bean.uafclient.DeregisterRequest)FsGsonUtil.gsonToBean(paramString1, cn.com.union.fido.bean.uafclient.DeregisterRequest.class);
    appID = paramString1.getHeader().getAppID();
    short s = RequestValid.validOPRequest(paramString1);
    if (s != 0) {
      return s;
    }
    if ((StringTools.isValidateString(appID)) && (!appID.equalsIgnoreCase(facet_id)))
    {
      getTrustApps();
    }
    else
    {
      appID = facet_id;
      trustApps = new org.org.union.fido.bean.uafclient.TrustApps();
      paramUAFMessage1 = new ArrayList();
      paramUAFMessage1.add(appID);
      paramString2 = new TrustedFacets();
      paramString2.setIds(paramUAFMessage1);
      paramUAFMessage1 = new ArrayList();
      paramUAFMessage1.add(paramString2);
      trustApps.setTrustedFacets(paramUAFMessage1);
    }
    paramString2 = trustApps;
    if (paramString2 != null)
    {
      if (paramString2.checkOrigin(facet_id))
      {
        paramString1 = paramString1.getAuthenticators().iterator();
        if (paramString1.hasNext())
        {
          paramString1 = (DeregisterAuthenticator)paramString1.next();
          if (sendDeregister2ASMlocateAuthenticatorgetAaidauthenticatorIndex, appID, paramString1.getKeyID()).statusCode == 0) {
            return 0;
          }
          return 255;
        }
        return 5;
      }
      return 7;
    }
    return 9;
  }
  
  private short processingRegistrationReq(String paramString1, String paramString2, UAFMessage paramUAFMessage1, UAFMessage paramUAFMessage2, Handler paramHandler1, Handler paramHandler2)
  {
    paramString2 = (org.org.union.fido.bean.uafclient.RegistrationRequest)FsGsonUtil.gsonToBean(paramString1, cn.com.union.fido.bean.uafclient.RegistrationRequest.class);
    short s = RequestValid.validOPRequest(paramString2);
    if (s != 0) {
      return s;
    }
    paramString1 = paramString2.getHeader();
    appID = paramString1.getAppID();
    if ((StringTools.isValidateString(appID)) && (!appID.equalsIgnoreCase(facet_id)))
    {
      getTrustApps();
    }
    else
    {
      appID = facet_id;
      trustApps = new org.org.union.fido.bean.uafclient.TrustApps();
      paramHandler1 = new ArrayList();
      paramHandler1.add(appID);
      paramUAFMessage2 = new TrustedFacets();
      paramUAFMessage2.setIds(paramHandler1);
      paramHandler1 = new ArrayList();
      paramHandler1.add(paramUAFMessage2);
      trustApps.setTrustedFacets(paramHandler1);
    }
    if (TextUtils.equals(Thread.currentThread().getName(), "JR_RISK_FIDO_INTERRUPT")) {
      return 24;
    }
    paramUAFMessage2 = trustApps;
    if (paramUAFMessage2 != null)
    {
      if (paramUAFMessage2.checkOrigin(facet_id))
      {
        paramUAFMessage2 = paramString2.getPolicy();
        paramHandler2 = GlobalConfiguration.authenticators;
        paramHandler1 = new ArrayList();
        Object localObject;
        if (paramHandler2 != null)
        {
          paramHandler2 = paramHandler2.iterator();
          while (paramHandler2.hasNext())
          {
            localObject = (AuthenticatorInfo)paramHandler2.next();
            localObject = PolicyHandler.getAllowedAuthenticator(paramUAFMessage2, (AuthenticatorInfo)localObject, getRegKeyIDs((AuthenticatorInfo)localObject, paramString2.getPolicy()), false);
            if (localObject != null) {
              paramHandler1.add(localObject);
            }
          }
        }
        paramUAFMessage2 = new ArrayList();
        int i = paramHandler1.size();
        if (i <= 0) {
          return 5;
        }
        if (i > 1) {
          return 5;
        }
        paramHandler1 = (AuthenticatorInfo)paramHandler1.get(sampleAuthIndex);
        sampleAuthIndex = 0;
        paramHandler2 = new ChannelBinding();
        paramHandler2.fromJSON("{}");
        paramHandler2 = UAFTools.genFinalChallengeParams(appID, paramString2.getChallenge(), facet_id, paramHandler2);
        paramString2 = sendRegister2ASM(paramHandler1, paramString2, paramHandler2);
        i = statusCode;
        if (i == 0)
        {
          paramString2 = paramString2.getResponseData();
          if (paramString2 != null)
          {
            paramString2 = (RegisterOut)paramString2;
            localObject = new AuthenticatorRegistrationAssertion();
            ((AuthenticatorRegistrationAssertion)localObject).setAssertion(assertion);
            ((AuthenticatorRegistrationAssertion)localObject).setAssertionScheme(assertionScheme);
            ((AuthenticatorRegistrationAssertion)localObject).setTcDisplayPNGCharacteristics(tcDisplayPNGCharacteristics);
            paramUAFMessage2.add(localObject);
            paramString2 = new RegistrationResponse();
            paramString2.setHeader(paramString1);
            paramString2.setFcParams(paramHandler2);
            paramString2.setAssertions(paramUAFMessage2);
            paramString1 = new ArrayList();
            paramString1.add(paramString2);
            uafProtocolMessage = FsGsonUtil.gsonString(paramString1);
            return 0;
          }
          return 255;
        }
        if (i == 2) {
          return 8;
        }
        if (i == 3) {
          return 3;
        }
        if (i == 4) {
          return 16;
        }
        if (i == 5) {
          return 17;
        }
        if (i == 6) {
          return 18;
        }
        if (i == 9) {
          return 19;
        }
        if (i == 16) {
          return 22;
        }
        if (i == 17) {
          return 32;
        }
        if (i == 18) {
          return 33;
        }
        if (i == 19) {
          return 34;
        }
        if (i == 20) {
          return 35;
        }
        if (i == 21) {
          return 36;
        }
        if (i == 22) {
          return 23;
        }
        if (i == 23) {
          return 24;
        }
        return 255;
      }
      return 7;
    }
    return 9;
  }
  
  private ASMResponse sendAuthentication2ASM(AuthenticatorInfo paramAuthenticatorInfo, org.org.union.fido.bean.uafclient.AuthenticationRequest paramAuthenticationRequest, String paramString)
  {
    ASMRequest localASMRequest = new ASMRequest();
    requestType = Request.Authenticate;
    asmVersion = UAFTools.getAsmVersion();
    authenticatorIndex = Short.valueOf(authenticatorIndex);
    Object localObject = genExts(paramAuthenticationRequest);
    if (localObject != null) {
      exts = ((List)localObject);
    }
    paramAuthenticatorInfo = PolicyHandler.getAcceptedKeyIDs(paramAuthenticationRequest.getPolicy(), aaid);
    localObject = new AuthenticateIn();
    appID = appID;
    keyIDs = paramAuthenticatorInfo;
    transaction = paramAuthenticationRequest.getTransaction();
    finalChallenge = paramString;
    args = localObject;
    if (TextUtils.equals(Thread.currentThread().getName(), "JR_RISK_FIDO_INTERRUPT"))
    {
      paramAuthenticatorInfo = new ASMResponse();
      statusCode = 23;
      return paramAuthenticatorInfo;
    }
    return mAsmService.process(localASMRequest);
  }
  
  private ASMResponse sendDeregister2ASM(short paramShort, String paramString1, String paramString2)
  {
    ASMRequest localASMRequest = new ASMRequest();
    requestType = Request.Deregister;
    asmVersion = UAFTools.getAsmVersion();
    authenticatorIndex = Short.valueOf(paramShort);
    DeregisterIn localDeregisterIn = new DeregisterIn();
    appID = paramString1;
    keyID = paramString2;
    args = localDeregisterIn;
    return mAsmService.process(localASMRequest);
  }
  
  private ASMResponse sendRegister2ASM(AuthenticatorInfo paramAuthenticatorInfo, org.org.union.fido.bean.uafclient.RegistrationRequest paramRegistrationRequest, String paramString)
  {
    ASMRequest localASMRequest = new ASMRequest();
    requestType = Request.Register;
    asmVersion = UAFTools.getAsmVersion();
    authenticatorIndex = Short.valueOf(authenticatorIndex);
    Object localObject = genExts(paramRegistrationRequest);
    if (localObject != null) {
      exts = ((List)localObject);
    }
    localObject = new RegisterIn();
    appID = appID;
    username = paramRegistrationRequest.getUsername();
    finalChallenge = paramString;
    attestationType = ((Short)attestationTypes.get(0)).shortValue();
    args = localObject;
    if (TextUtils.equals(Thread.currentThread().getName(), "JR_RISK_FIDO_INTERRUPT"))
    {
      paramAuthenticatorInfo = new ASMResponse();
      statusCode = 23;
      return paramAuthenticatorInfo;
    }
    return mAsmService.process(localASMRequest);
  }
  
  public void checkPolicy(UAFMessage paramUAFMessage, Handler paramHandler)
  {
    Object localObject1 = uafProtocolMessage;
    if (StringTools.isValidateString((String)localObject1))
    {
      paramUAFMessage = new ArrayList();
      localObject1 = FsGsonUtil.jsonToJsonArray((String)localObject1);
      int i = ((JsonArray)localObject1).size();
      short s3 = 5;
      if (i == 1)
      {
        Object localObject3 = ((JsonArray)localObject1).get(0).getAsJsonObject().toString();
        Object localObject2 = RequestValid.parseOPRequestMessage((String)localObject3);
        if (localObject2 != null)
        {
          localObject1 = ((OperationRequest)localObject2).getHeader();
          short s4 = HeaderValid.validOPHeader((OperationHeader)localObject1, facet_id);
          s1 = s4;
          short s2 = s1;
          if (s4 == 0)
          {
            Object localObject4 = ((OperationHeader)localObject1).getOp();
            if (((String)localObject4).equals(Operation.SECOND_CLASS.name()))
            {
              s2 = RequestValid.validOPRequest((org.org.union.fido.bean.uafclient.RegistrationRequest)FsGsonUtil.gsonToBean((String)localObject3, cn.com.union.fido.bean.uafclient.RegistrationRequest.class));
              s1 = s2;
              if (s2 == 0)
              {
                Object localObject6 = GlobalConfiguration.authenticators;
                Object localObject5 = ((OperationRequest)localObject2).getPolicy();
                appID = ((OperationHeader)localObject1).getAppID();
                if (!StringTools.isValidateString(appID)) {
                  appID = genFacetID();
                }
                if (localObject6 != null)
                {
                  localObject6 = ((List)localObject6).iterator();
                  while (((Iterator)localObject6).hasNext())
                  {
                    AuthenticatorInfo localAuthenticatorInfo = (AuthenticatorInfo)((Iterator)localObject6).next();
                    localAuthenticatorInfo = PolicyHandler.getAllowedAuthenticator((Policy)localObject5, localAuthenticatorInfo, getRegKeyIDs(localAuthenticatorInfo, (Policy)localObject5), false);
                    if (localAuthenticatorInfo != null) {
                      paramUAFMessage.add(localAuthenticatorInfo);
                    }
                  }
                }
                if (!CommonTools.isValidateList(paramUAFMessage))
                {
                  s1 = 5;
                }
                else
                {
                  s2 = Short.MIN_VALUE;
                  localObject5 = paramUAFMessage.iterator();
                  for (;;)
                  {
                    s1 = s2;
                    if (!((Iterator)localObject5).hasNext()) {
                      break;
                    }
                    s2 = (short)(s2 | (short)(int)nextuserVerification);
                  }
                }
              }
            }
            s2 = s1;
            if (((String)localObject4).equals(Operation.Auth.name()))
            {
              s1 = RequestValid.validOPRequest((org.org.union.fido.bean.uafclient.AuthenticationRequest)FsGsonUtil.gsonToBean((String)localObject3, cn.com.union.fido.bean.uafclient.AuthenticationRequest.class));
              if (s1 == 0)
              {
                localObject3 = GlobalConfiguration.authenticators;
                localObject2 = ((OperationRequest)localObject2).getPolicy();
                appID = ((OperationHeader)localObject1).getAppID();
                if (!StringTools.isValidateString(appID)) {
                  appID = genFacetID();
                }
                localObject1 = new ArrayList();
                if (localObject3 != null)
                {
                  localObject3 = ((List)localObject3).iterator();
                  while (((Iterator)localObject3).hasNext())
                  {
                    localObject4 = (AuthenticatorInfo)((Iterator)localObject3).next();
                    localObject4 = PolicyHandler.getAllowedAuthenticator((Policy)localObject2, (AuthenticatorInfo)localObject4, getRegKeyIDs((AuthenticatorInfo)localObject4, (Policy)localObject2), true, (List)localObject1);
                    if (localObject4 != null) {
                      paramUAFMessage.add(localObject4);
                    }
                  }
                }
                if (!CommonTools.isValidateList(paramUAFMessage))
                {
                  s1 = s3;
                }
                else
                {
                  if (((List)localObject1).size() == 2) {
                    s2 = 48;
                  } else {
                    s2 = s1;
                  }
                  s1 = s2;
                  if (((List)localObject1).size() == 1)
                  {
                    if (((Extension)((List)localObject1).get(0)).getData().equals("")) {
                      s2 = 0;
                    }
                    s1 = s2;
                    if (((Extension)((List)localObject1).get(0)).getData().equals("auth")) {
                      s1 = 49;
                    }
                    if (((Extension)((List)localObject1).get(0)).getData().equals("transaction")) {
                      s1 = 50;
                    }
                  }
                }
              }
              break label617;
            }
          }
          s1 = s2;
          break label617;
        }
      }
      short s1 = 6;
      label617:
      paramUAFMessage = new Message();
      localObject1 = new Bundle();
      ((Bundle)localObject1).putShort("ERROR", s1);
      paramUAFMessage.setData((Bundle)localObject1);
      paramHandler.sendMessage(paramUAFMessage);
    }
  }
  
  public void discover(Handler paramHandler1, Handler paramHandler2)
  {
    DiscoveryData localDiscoveryData = new DiscoveryData();
    ArrayList localArrayList1 = new ArrayList();
    localArrayList1.add(UAFTools.getUAFVersion());
    supportedUAFVersions = localArrayList1;
    clientVendor = "004B";
    clientVersion = UAFTools.getClientVersion();
    paramHandler2 = new ASMRequest();
    requestType = Request.GetInfo;
    paramHandler2 = mAsmService.process(paramHandler2).getResponseData();
    if (paramHandler2 != null) {
      paramHandler2 = Authenticators;
    } else {
      paramHandler2 = null;
    }
    ArrayList localArrayList2 = new ArrayList();
    paramHandler2 = paramHandler2.iterator();
    while (paramHandler2.hasNext())
    {
      AuthenticatorInfo localAuthenticatorInfo = (AuthenticatorInfo)paramHandler2.next();
      Authenticator localAuthenticator = new Authenticator();
      aaid = aaid;
      assertionScheme = assertionScheme;
      attachmentHint = attachmentHint;
      attestationTypes = attestationTypes;
      description = description;
      icon = icon;
      isSecondFactorOnly = isSecondFactorOnly;
      keyProtection = keyProtection;
      matcherProtection = matcherProtection;
      supportedExtensionIDs = supportedExtensionIDs;
      supportedUAFVersions = localArrayList1;
      tcDisplay = tcDisplay;
      tcDisplayContentType = tcDisplayContentType;
      tcDisplayPNGCharacteristics = tcDisplayPNGCharacteristics;
      title = title;
      userVerification = userVerification;
      localArrayList2.add(localAuthenticator);
    }
    availableAuthenticators = localArrayList2;
    paramHandler1.obtainMessage(0, localDiscoveryData).sendToTarget();
  }
  
  public int notifyUAFResult(UAFMessage paramUAFMessage)
  {
    paramUAFMessage = uafProtocolMessage;
    if (StringTools.isValidateString(paramUAFMessage))
    {
      paramUAFMessage = gsonToBeanauthenticatorsSucceeded;
      ASMRequest localASMRequest = new ASMRequest();
      asmVersion = UAFTools.getAsmVersion();
      requestType = Request.Commit;
      CommitIn localCommitIn = new CommitIn();
      aaid = paramUAFMessage.getAaid();
      keyID = paramUAFMessage.getKeyID();
      commit = true;
      args = localCommitIn;
      mAsmService.process(localASMRequest);
      return 0;
    }
    return 6;
  }
  
  public void processUAFOperation(UAFMessage paramUAFMessage, Handler paramHandler1, Handler paramHandler2)
  {
    UAFMessage localUAFMessage = new UAFMessage();
    short s = sendUAFMessage(paramUAFMessage, localUAFMessage, paramHandler1, paramHandler2);
    if (s == 0)
    {
      paramHandler1.obtainMessage(0, localUAFMessage).sendToTarget();
      return;
    }
    paramUAFMessage = new Message();
    paramHandler1 = new Bundle();
    paramHandler1.putShort("ERROR", s);
    paramUAFMessage.setData(paramHandler1);
    paramHandler2.sendMessage(paramUAFMessage);
  }
  
  public void release()
  {
    mContext = null;
    mAsmService.setmContext(null);
  }
  
  public short sendUAFMessage(UAFMessage paramUAFMessage1, UAFMessage paramUAFMessage2, Handler paramHandler1, Handler paramHandler2)
  {
    if (TextUtils.equals(Thread.currentThread().getName(), "JR_RISK_FIDO_INTERRUPT")) {
      return 24;
    }
    Object localObject1 = uafProtocolMessage;
    String str = additionalData;
    if (StringTools.isValidateString((String)localObject1))
    {
      localObject1 = FsGsonUtil.jsonToJsonArray((String)localObject1);
      if (((JsonArray)localObject1).size() == 1)
      {
        localObject1 = ((JsonArray)localObject1).get(0).getAsJsonObject().toString();
        Object localObject2 = RequestValid.parseOPRequestMessage((String)localObject1);
        if (localObject2 != null)
        {
          localObject2 = ((OperationRequest)localObject2).getHeader();
          short s2 = HeaderValid.validOPHeader((OperationHeader)localObject2, facet_id);
          short s1 = s2;
          if (s2 == 0)
          {
            localObject2 = ((OperationHeader)localObject2).getOp();
            if (((String)localObject2).equals(Operation.SECOND_CLASS.name())) {
              return processingRegistrationReq((String)localObject1, str, paramUAFMessage2, paramUAFMessage1, paramHandler1, paramHandler2);
            }
            if (((String)localObject2).equals(Operation.Auth.name())) {
              return processingAuthenticationReq((String)localObject1, str, paramUAFMessage2, paramUAFMessage1, paramHandler1, paramHandler2);
            }
            s1 = s2;
            if (((String)localObject2).equals(Operation.Dereg.name())) {
              s1 = processingDeregistrationReq((String)localObject1, str, paramUAFMessage2, paramUAFMessage1, paramHandler1, paramHandler2);
            }
          }
          return s1;
        }
      }
    }
    return 6;
  }
}
