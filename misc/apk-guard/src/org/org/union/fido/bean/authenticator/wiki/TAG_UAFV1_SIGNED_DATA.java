package org.org.union.fido.bean.authenticator.wiki;

import org.org.union.fido.util.CommonTools;
import org.org.union.fido.util.StringTools;
import org.org.union.fido.util.Utility;

public class TAG_UAFV1_SIGNED_DATA
{
  public String aaid;
  public byte authenticationMode;
  public short authenticatorVersion;
  public byte[] authnrNonce;
  public byte[] finalChallenge;
  public byte[] keyID;
  public String pass;
  public int signCounter;
  public short signatureAlgAndEncoding;
  public byte[] tcHash;
  
  public TAG_UAFV1_SIGNED_DATA() {}
  
  public void deserialize(byte[] paramArrayOfByte)
  {
    if (11787 == Utility.byteToShort(paramArrayOfByte, 0, 2))
    {
      i = Utility.byteToShort(paramArrayOfByte, 2, 4);
      if (i > 0)
      {
        i += 4;
        aaid = Utility.byteToStr(paramArrayOfByte, 4, i);
      }
      else
      {
        i = 4;
      }
    }
    else
    {
      i = 0;
    }
    int k = i + 2;
    int j = i;
    if (11790 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      j = i;
      if (Utility.byteToShort(paramArrayOfByte, k, i) > 0)
      {
        j = i + 2;
        authenticatorVersion = ((short)Utility.byteToShort(paramArrayOfByte, i, j));
        authenticationMode = paramArrayOfByte[j];
        i = j + 1;
        j = i + 2;
        signatureAlgAndEncoding = ((short)Utility.byteToShort(paramArrayOfByte, i, j));
      }
    }
    k = j + 2;
    int i = j;
    if (11791 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      j = k + 2;
      k = Utility.byteToShort(paramArrayOfByte, k, j);
      i = j;
      if (k > 0)
      {
        authnrNonce = new byte[k];
        System.arraycopy(paramArrayOfByte, j, authnrNonce, 0, k);
        i = j + k;
      }
    }
    k = i + 2;
    j = i;
    if (11786 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      k = Utility.byteToShort(paramArrayOfByte, k, i);
      j = i;
      if (k > 0)
      {
        finalChallenge = new byte[k];
        System.arraycopy(paramArrayOfByte, i, finalChallenge, 0, k);
        j = i + k;
      }
    }
    k = j + 2;
    i = j;
    if (11792 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      j = k + 2;
      k = Utility.byteToShort(paramArrayOfByte, k, j);
      i = j;
      if (k > 0)
      {
        tcHash = new byte[k];
        System.arraycopy(paramArrayOfByte, j, tcHash, 0, k);
        i = j + k;
      }
    }
    k = i + 2;
    j = i;
    if (11785 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      k = Utility.byteToShort(paramArrayOfByte, k, i);
      j = i;
      if (k > 0)
      {
        keyID = new byte[k];
        System.arraycopy(paramArrayOfByte, i, keyID, 0, k);
        j = i + k;
      }
    }
    k = j + 2;
    i = j;
    if (11789 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      j = k + 2;
      k = Utility.byteToShort(paramArrayOfByte, k, j);
      i = j;
      if (k > 0)
      {
        i = k + j;
        signCounter = Utility.byteToInt(paramArrayOfByte, j, i);
      }
    }
    j = i + 2;
    if (260 == Utility.byteToShort(paramArrayOfByte, i, j))
    {
      i = j + 2;
      j = Utility.byteToShort(paramArrayOfByte, j, i);
      if (j > 0) {
        pass = Utility.byteToStr(paramArrayOfByte, i, j + i);
      }
    }
  }
  
  public byte[] serialize()
  {
    byte[] arrayOfByte1 = new byte['?'];
    Utility.shortToByte(arrayOfByte1, 0, 2, 15876);
    Utility.shortToByte(arrayOfByte1, 4, 6, 11787);
    if (StringTools.isValidateString(aaid))
    {
      i = aaid.getBytes().length;
      Utility.shortToByte(arrayOfByte1, 6, 8, i);
      i += 8;
      Utility.strToByte(arrayOfByte1, 8, i, aaid);
    }
    else
    {
      Utility.shortToByte(arrayOfByte1, 6, 8, 0);
      i = 8;
    }
    int j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, 11790);
    int i = j + 2;
    j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, authenticatorVersion);
    arrayOfByte1[j] = authenticationMode;
    j += 1;
    int k = j + 2;
    Utility.shortToByte(arrayOfByte1, j, k, signatureAlgAndEncoding);
    Utility.shortToByte(arrayOfByte1, i - 2, i, k - i);
    j = k + 2;
    Utility.shortToByte(arrayOfByte1, k, j, 11791);
    if (CommonTools.isValidateByteArray(authnrNonce))
    {
      i = authnrNonce.length;
      k = j + 2;
      Utility.shortToByte(arrayOfByte1, j, k, i);
      System.arraycopy(authnrNonce, 0, arrayOfByte1, k, i);
      i = k + i;
    }
    else
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 0);
    }
    j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, 11786);
    if (CommonTools.isValidateByteArray(finalChallenge))
    {
      i = finalChallenge.length;
      k = j + 2;
      Utility.shortToByte(arrayOfByte1, j, k, i);
      System.arraycopy(finalChallenge, 0, arrayOfByte1, k, i);
      i = k + i;
    }
    else
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 0);
    }
    j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, 11792);
    if (CommonTools.isValidateByteArray(tcHash))
    {
      i = tcHash.length;
      k = j + 2;
      Utility.shortToByte(arrayOfByte1, j, k, i);
      System.arraycopy(tcHash, 0, arrayOfByte1, k, i);
      i = k + i;
    }
    else
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 0);
    }
    j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, 11785);
    if (CommonTools.isValidateByteArray(keyID))
    {
      i = keyID.length;
      k = j + 2;
      Utility.shortToByte(arrayOfByte1, j, k, i);
      System.arraycopy(keyID, 0, arrayOfByte1, k, i);
      i = k + i;
    }
    else
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 0);
    }
    j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, 11789);
    i = j + 2;
    Utility.shortToByte(arrayOfByte1, j, i, 4);
    j = i + 4;
    Utility.intToByte(arrayOfByte1, i, j, signCounter);
    i = j;
    if (StringTools.isValidateString(pass))
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 260);
      k = pass.getBytes().length;
      j = i + 2;
      Utility.shortToByte(arrayOfByte1, i, j, k);
      i = k + j;
      Utility.strToByte(arrayOfByte1, j, i, pass);
    }
    Utility.shortToByte(arrayOfByte1, 2, 4, i - 4);
    byte[] arrayOfByte2 = new byte[i];
    System.arraycopy(arrayOfByte1, 0, arrayOfByte2, 0, i);
    return arrayOfByte2;
  }
}
