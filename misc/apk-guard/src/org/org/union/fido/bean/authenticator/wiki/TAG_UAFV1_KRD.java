package org.org.union.fido.bean.authenticator.wiki;

import org.org.union.fido.util.CommonTools;
import org.org.union.fido.util.StringTools;
import org.org.union.fido.util.Utility;

public class TAG_UAFV1_KRD
{
  public String aaid;
  public byte authenticationMode;
  public short authenticatorVersion;
  public String content;
  public byte[] finalChallenge;
  public String keyID;
  public byte[] publicKey;
  public short publicKeyAlgAndEncoding;
  public int regCounter;
  public int signCounter;
  public short signatureAlgAndEncoding;
  
  public TAG_UAFV1_KRD() {}
  
  public void deserialize(byte[] paramArrayOfByte)
  {
    if (11787 == Utility.byteToShort(paramArrayOfByte, 0, 2))
    {
      j = Utility.byteToShort(paramArrayOfByte, 2, 4) + 4;
      aaid = Utility.byteToStr(paramArrayOfByte, 4, j);
    }
    else
    {
      j = 0;
    }
    int k = j + 2;
    int i = j;
    if (11790 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      i = k + 2;
      Utility.byteToShort(paramArrayOfByte, k, i);
      j = i + 2;
      authenticatorVersion = ((short)Utility.byteToShort(paramArrayOfByte, i, j));
      authenticationMode = paramArrayOfByte[j];
      i = j + 1;
      j = i + 2;
      signatureAlgAndEncoding = ((short)Utility.byteToShort(paramArrayOfByte, i, j));
      i = j + 2;
      publicKeyAlgAndEncoding = ((short)Utility.byteToShort(paramArrayOfByte, j, i));
    }
    k = i + 2;
    int j = i;
    if (11786 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      j = Utility.byteToShort(paramArrayOfByte, k, i);
      finalChallenge = new byte[j];
      System.arraycopy(paramArrayOfByte, i, finalChallenge, 0, j);
      j = i + j;
    }
    k = j + 2;
    i = j;
    if (11785 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      j = k + 2;
      i = Utility.byteToShort(paramArrayOfByte, k, j) + j;
      keyID = Utility.byteToStr(paramArrayOfByte, j, i);
    }
    k = i + 2;
    j = i;
    if (11789 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      Utility.byteToShort(paramArrayOfByte, k, i);
      k = i + 4;
      signCounter = Utility.byteToInt(paramArrayOfByte, i, k);
      j = k + 4;
      regCounter = Utility.byteToInt(paramArrayOfByte, k, j);
    }
    k = j + 2;
    i = j;
    if (11788 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      i = k + 2;
      j = Utility.byteToShort(paramArrayOfByte, k, i);
      publicKey = new byte[j];
      System.arraycopy(paramArrayOfByte, i, publicKey, 0, j);
      i += j;
    }
    j = i + 2;
    if (260 == Utility.byteToShort(paramArrayOfByte, i, j))
    {
      i = j + 2;
      content = Utility.byteToStr(paramArrayOfByte, i, Utility.byteToShort(paramArrayOfByte, j, i) + i);
    }
  }
  
  public byte[] serialize()
  {
    byte[] arrayOfByte1 = new byte['?'];
    Utility.shortToByte(arrayOfByte1, 0, 2, 15875);
    if (StringTools.isValidateString(aaid))
    {
      Utility.shortToByte(arrayOfByte1, 4, 6, 11787);
      i = aaid.getBytes().length;
      Utility.shortToByte(arrayOfByte1, 6, 8, i);
      i += 8;
      Utility.strToByte(arrayOfByte1, 8, i, aaid);
    }
    else
    {
      i = 4;
    }
    int j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, 11790);
    int i = j + 2;
    j = i + 2;
    Utility.shortToByte(arrayOfByte1, i, j, authenticatorVersion);
    arrayOfByte1[j] = authenticationMode;
    j += 1;
    int k = j + 2;
    Utility.shortToByte(arrayOfByte1, j, k, signatureAlgAndEncoding);
    j = k + 2;
    Utility.shortToByte(arrayOfByte1, k, j, publicKeyAlgAndEncoding);
    Utility.shortToByte(arrayOfByte1, i - 2, i, j - i);
    i = j;
    if (CommonTools.isValidateByteArray(finalChallenge))
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 11786);
      j = finalChallenge.length;
      k = i + 2;
      Utility.shortToByte(arrayOfByte1, i, k, j);
      System.arraycopy(finalChallenge, 0, arrayOfByte1, k, j);
      i = j + k;
    }
    j = i;
    if (StringTools.isValidateString(keyID))
    {
      j = i + 2;
      Utility.shortToByte(arrayOfByte1, i, j, 11785);
      k = keyID.getBytes().length;
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, k);
      j = k + i;
      Utility.strToByte(arrayOfByte1, i, j, keyID);
    }
    i = j + 2;
    Utility.shortToByte(arrayOfByte1, j, i, 11789);
    i += 2;
    k = i + 4;
    Utility.intToByte(arrayOfByte1, i, k, signCounter);
    j = k + 4;
    Utility.intToByte(arrayOfByte1, k, j, regCounter);
    Utility.shortToByte(arrayOfByte1, i - 2, i, j - i);
    i = j;
    if (CommonTools.isValidateByteArray(publicKey))
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte1, j, i, 11788);
      j = publicKey.length;
      k = i + 2;
      Utility.shortToByte(arrayOfByte1, i, k, j);
      System.arraycopy(publicKey, 0, arrayOfByte1, k, j);
      i = k + j;
    }
    if (StringTools.isValidateString(content))
    {
      j = i + 2;
      Utility.shortToByte(arrayOfByte1, i, j, 260);
      i = content.getBytes().length;
      k = j + 2;
      Utility.shortToByte(arrayOfByte1, j, k, i);
      i = k + i;
      Utility.strToByte(arrayOfByte1, k, i, content);
    }
    Utility.shortToByte(arrayOfByte1, 2, 4, i - 4);
    byte[] arrayOfByte2 = new byte[i];
    System.arraycopy(arrayOfByte1, 0, arrayOfByte2, 0, i);
    return arrayOfByte2;
  }
}
