package org.org.union.fido.bean.authenticator.wiki;

import java.util.Iterator;
import java.util.List;
import org.org.union.fido.util.Utility;

public class TAG_TC_DISPLAY_PNG_CHARACTERISTICS
{
  public byte bitDepth;
  public byte colorType;
  public byte compression;
  public byte filter;
  public int height;
  public byte interlace;
  public List<cn.com.union.fido.bean.authenticator.RgbPalletteEntry> plte;
  public int width;
  
  public TAG_TC_DISPLAY_PNG_CHARACTERISTICS() {}
  
  public void deserialize(byte[] paramArrayOfByte)
  {
    int j = paramArrayOfByte.length;
    width = Utility.byteToInt(paramArrayOfByte, 0, 4);
    height = Utility.byteToInt(paramArrayOfByte, 4, 8);
    bitDepth = paramArrayOfByte[8];
    colorType = paramArrayOfByte[9];
    compression = paramArrayOfByte[10];
    filter = paramArrayOfByte[11];
    interlace = paramArrayOfByte[12];
    int i = 13;
    while (i < j)
    {
      int k = i + 2;
      short s1 = (short)Utility.byteToShort(paramArrayOfByte, i, k);
      int m = k + 2;
      short s2 = (short)Utility.byteToShort(paramArrayOfByte, k, m);
      i = m + 2;
      org.org.union.fido.bean.authenticator.RgbPalletteEntry localRgbPalletteEntry = new org.org.union.fido.bean.authenticator.RgbPalletteEntry(s1, s2, (short)Utility.byteToShort(paramArrayOfByte, m, i));
      plte.add(localRgbPalletteEntry);
    }
  }
  
  public byte[] serialize()
  {
    byte[] arrayOfByte = new byte[48];
    Utility.intToByte(arrayOfByte, 0, 4, width);
    Utility.intToByte(arrayOfByte, 4, 8, height);
    arrayOfByte[8] = bitDepth;
    arrayOfByte[9] = colorType;
    arrayOfByte[10] = compression;
    arrayOfByte[11] = filter;
    arrayOfByte[12] = interlace;
    Object localObject = plte;
    int i = 13;
    int j = i;
    if (localObject != null)
    {
      j = i;
      if (((List)localObject).size() > 0)
      {
        localObject = plte.iterator();
        for (;;)
        {
          j = i;
          if (!((Iterator)localObject).hasNext()) {
            break;
          }
          org.org.union.fido.bean.authenticator.RgbPalletteEntry localRgbPalletteEntry = (org.org.union.fido.bean.authenticator.RgbPalletteEntry)((Iterator)localObject).next();
          j = i + 2;
          Utility.shortToByte(arrayOfByte, i, j, localRgbPalletteEntry.getR());
          int k = j + 2;
          Utility.shortToByte(arrayOfByte, j, k, localRgbPalletteEntry.getG());
          i = k + 2;
          Utility.shortToByte(arrayOfByte, k, i, localRgbPalletteEntry.getB());
        }
      }
    }
    localObject = new byte[j];
    System.arraycopy(arrayOfByte, 0, localObject, 0, j);
    return localObject;
  }
}
