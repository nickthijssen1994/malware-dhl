package org.org.union.fido.bean.authenticator.wiki;

import java.util.ArrayList;
import java.util.List;
import org.org.union.fido.util.CommonTools;
import org.org.union.fido.util.StringTools;
import org.org.union.fido.util.Utility;

public class TAG_AUTHENTICATOR_INFO
{
  public String aaid;
  public String assertionScheme;
  public List<Short> attestationType;
  public byte authenticatorIndex;
  public TAG_AUTHENTICATOR_METADATA authenticatorMetadata;
  public List<String> supportedExtensionID;
  public String tcDisplayContentType;
  public List<cn.com.union.fido.bean.authenticator.tag.TAG_TC_DISPLAY_PNG_CHARACTERISTICS> tcDisplayPNGCharacteristics;
  
  public TAG_AUTHENTICATOR_INFO() {}
  
  public void deserialize(byte[] paramArrayOfByte)
  {
    if (10253 == Utility.byteToShort(paramArrayOfByte, 0, 2))
    {
      authenticatorIndex = paramArrayOfByte[4];
      i = 5;
    }
    else
    {
      i = 0;
    }
    int k = i + 2;
    int j = i;
    if (11787 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      j = Utility.byteToShort(paramArrayOfByte, k, i) + i;
      aaid = Utility.byteToStr(paramArrayOfByte, i, j);
    }
    k = j + 2;
    int i = j;
    Object localObject;
    if (10249 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      j = k + 2;
      k = Utility.byteToShort(paramArrayOfByte, k, j);
      i = j;
      if (k > 0)
      {
        localObject = new byte[k];
        System.arraycopy(paramArrayOfByte, j, localObject, 0, k);
        authenticatorMetadata = new TAG_AUTHENTICATOR_METADATA();
        authenticatorMetadata.deserialize((byte[])localObject);
        i = j + k;
      }
    }
    k = i + 2;
    j = i;
    if (10252 == Utility.byteToShort(paramArrayOfByte, i, k))
    {
      i = k + 2;
      j = Utility.byteToShort(paramArrayOfByte, k, i) + i;
      tcDisplayContentType = Utility.byteToStr(paramArrayOfByte, i, j);
    }
    tcDisplayPNGCharacteristics = new ArrayList();
    while (10251 == Utility.byteToShort(paramArrayOfByte, j, j + 2))
    {
      j += 2;
      i = j + 2;
      k = Utility.byteToShort(paramArrayOfByte, j, i);
      j = i;
      if (k > 0)
      {
        localObject = new byte[k];
        System.arraycopy(paramArrayOfByte, i, localObject, 0, k);
        TAG_TC_DISPLAY_PNG_CHARACTERISTICS localTAG_TC_DISPLAY_PNG_CHARACTERISTICS = new TAG_TC_DISPLAY_PNG_CHARACTERISTICS();
        localTAG_TC_DISPLAY_PNG_CHARACTERISTICS.deserialize((byte[])localObject);
        tcDisplayPNGCharacteristics.add(localTAG_TC_DISPLAY_PNG_CHARACTERISTICS);
        j = i + k;
      }
    }
    k = j + 2;
    i = j;
    if (10250 == Utility.byteToShort(paramArrayOfByte, j, k))
    {
      j = k + 2;
      i = Utility.byteToShort(paramArrayOfByte, k, j) + j;
      assertionScheme = Utility.byteToStr(paramArrayOfByte, j, i);
    }
    attestationType = new ArrayList();
    while (10247 == Utility.byteToShort(paramArrayOfByte, i, i + 2))
    {
      i += 2;
      j = i + 2;
      i = Utility.byteToShort(paramArrayOfByte, i, j) + j;
      short s = (short)Utility.byteToShort(paramArrayOfByte, j, i);
      attestationType.add(Short.valueOf(s));
    }
    supportedExtensionID = new ArrayList();
    while (10258 == Utility.byteToShort(paramArrayOfByte, i, i + 2))
    {
      i += 2;
      j = i + 2;
      i = Utility.byteToShort(paramArrayOfByte, i, j) + j;
      localObject = Utility.byteToStr(paramArrayOfByte, j, i);
      supportedExtensionID.add(localObject);
    }
  }
  
  public byte[] serialize()
  {
    byte[] arrayOfByte = new byte['?'];
    Utility.shortToByte(arrayOfByte, 0, 2, 10253);
    Utility.shortToByte(arrayOfByte, 2, 4, 1);
    arrayOfByte[4] = authenticatorIndex;
    if (StringTools.isValidateString(aaid))
    {
      Utility.shortToByte(arrayOfByte, 5, 7, 11787);
      i = aaid.getBytes().length;
      Utility.shortToByte(arrayOfByte, 7, 9, i);
      i += 9;
      Utility.strToByte(arrayOfByte, 9, i, aaid);
    }
    else
    {
      i = 5;
    }
    int k = i + 2;
    Utility.shortToByte(arrayOfByte, i, k, 10249);
    Object localObject = authenticatorMetadata;
    if (localObject != null)
    {
      localObject = ((TAG_AUTHENTICATOR_METADATA)localObject).serialize();
      i = localObject.length;
      j = k + 2;
      Utility.shortToByte(arrayOfByte, k, j, i);
      System.arraycopy(localObject, 0, arrayOfByte, j, i);
      j += i;
    }
    else
    {
      j = k + 2;
      Utility.shortToByte(arrayOfByte, k, j, 0);
    }
    int i = j;
    if (StringTools.isValidateString(tcDisplayContentType))
    {
      i = j + 2;
      Utility.shortToByte(arrayOfByte, j, i, 10252);
      k = tcDisplayContentType.getBytes().length;
      j = i + 2;
      Utility.shortToByte(arrayOfByte, i, j, k);
      i = j + k;
      Utility.strToByte(arrayOfByte, j, i, tcDisplayContentType);
    }
    int m;
    if (CommonTools.isValidateList(tcDisplayPNGCharacteristics))
    {
      j = 0;
      for (;;)
      {
        k = i;
        if (j >= tcDisplayPNGCharacteristics.size()) {
          break;
        }
        localObject = (TAG_TC_DISPLAY_PNG_CHARACTERISTICS)tcDisplayPNGCharacteristics.get(j);
        k = i;
        if (localObject != null)
        {
          localObject = ((TAG_TC_DISPLAY_PNG_CHARACTERISTICS)localObject).serialize();
          k = i + 2;
          Utility.shortToByte(arrayOfByte, i, k, 10251);
          i = localObject.length;
          m = k + 2;
          Utility.shortToByte(arrayOfByte, k, m, i);
          System.arraycopy(localObject, 0, arrayOfByte, m, i);
          k = m + i;
        }
        j += 1;
        i = k;
      }
    }
    int j = i + 2;
    Utility.shortToByte(arrayOfByte, i, j, 10251);
    k = j + 2;
    Utility.shortToByte(arrayOfByte, j, k, 0);
    j = k;
    if (StringTools.isValidateString(assertionScheme))
    {
      i = k + 2;
      Utility.shortToByte(arrayOfByte, k, i, 10250);
      j = assertionScheme.getBytes().length;
      k = i + 2;
      Utility.shortToByte(arrayOfByte, i, k, j);
      j = k + j;
      Utility.strToByte(arrayOfByte, k, j, assertionScheme);
    }
    i = j;
    if (CommonTools.isValidateList(attestationType))
    {
      k = 0;
      for (;;)
      {
        i = j;
        if (k >= attestationType.size()) {
          break;
        }
        i = j + 2;
        Utility.shortToByte(arrayOfByte, j, i, 10247);
        m = i + 2;
        Utility.shortToByte(arrayOfByte, i, m, 2);
        j = m + 2;
        Utility.shortToByte(arrayOfByte, m, j, ((Short)attestationType.get(k)).shortValue());
        k += 1;
      }
    }
    k = i;
    if (CommonTools.isValidateList(supportedExtensionID))
    {
      j = 0;
      for (;;)
      {
        k = i;
        if (j >= supportedExtensionID.size()) {
          break;
        }
        k = i + 2;
        Utility.shortToByte(arrayOfByte, i, k, 10258);
        localObject = (String)supportedExtensionID.get(j);
        i = ((String)localObject).getBytes().length;
        m = k + 2;
        Utility.shortToByte(arrayOfByte, k, m, i);
        i = m + i;
        Utility.strToByte(arrayOfByte, m, i, (String)localObject);
        j += 1;
      }
    }
    localObject = new byte[k];
    System.arraycopy(arrayOfByte, 0, localObject, 0, k);
    return localObject;
  }
}
