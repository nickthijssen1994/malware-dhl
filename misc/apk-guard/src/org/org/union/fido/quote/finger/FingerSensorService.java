package org.org.union.fido.quote.finger;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.KeyguardManager;
import android.content.ContextWrapper;
import android.hardware.fingerprint.FingerprintManager;
import android.hardware.fingerprint.FingerprintManager.AuthenticationCallback;
import android.hardware.fingerprint.FingerprintManager.AuthenticationResult;
import android.os.Build.VERSION;
import android.os.CancellationSignal;
import com.jdcn.fido.utils.TrackerUtil;
import org.org.union.fido.bean.authenticator.command.RegisterResponse;
import org.org.union.fido.bean.authenticator.command.SignResponse;
import org.org.union.fido.bean.uafclient.Operation;
import org.org.union.fido.quote.FidoSignUtil;
import org.org.union.fido.quote.IAuthPresenter;
import org.org.union.fido.quote.IAuthSensorService;

@TargetApi(23)
public class FingerSensorService
  implements IAuthSensorService
{
  private FidoSignUtil fidoSignUtil = null;
  private CancellationSignal mCancellationSignal = new CancellationSignal();
  
  public FingerSensorService() {}
  
  private int isFinger(Activity paramActivity, FingerprintManager paramFingerprintManager, KeyguardManager paramKeyguardManager)
  {
    if (Build.VERSION.SDK_INT < 23) {
      return 26;
    }
    if (paramActivity.checkSelfPermission("android.permission.USE_FINGERPRINT") != 0) {
      return 27;
    }
    if (!paramFingerprintManager.isHardwareDetected()) {
      return 28;
    }
    if (!paramKeyguardManager.isKeyguardSecure()) {
      return 29;
    }
    if (!paramFingerprintManager.hasEnrolledFingerprints()) {
      return 30;
    }
    return 0;
  }
  
  public void endAuthenticator()
  {
    if (!mCancellationSignal.isCanceled()) {
      mCancellationSignal.cancel();
    }
  }
  
  public void startAuthenticator(Activity paramActivity, IAuthPresenter paramIAuthPresenter)
  {
    int j = 17;
    int i = j;
    if (paramActivity != null) {}
    try
    {
      FingerprintManager localFingerprintManager = (FingerprintManager)paramActivity.getSystemService("fingerprint");
      KeyguardManager localKeyguardManager = (KeyguardManager)paramActivity.getSystemService("keyguard");
      i = j;
      if (localFingerprintManager != null)
      {
        i = j;
        if (localKeyguardManager != null)
        {
          i = isFinger(paramActivity, localFingerprintManager, localKeyguardManager);
          if (i == 0) {
            new FingerSensorService.1(this, paramActivity, paramIAuthPresenter, localFingerprintManager).start();
          }
        }
      }
    }
    catch (Throwable paramActivity)
    {
      for (;;)
      {
        i = j;
      }
    }
    if (i != 0)
    {
      paramIAuthPresenter.handlerAuthResult(i, null);
      return;
    }
  }
  
  @TargetApi(23)
  class MyAuthenticationCallback
    extends FingerprintManager.AuthenticationCallback
  {
    private Activity activity;
    private IAuthPresenter fidoPresenter;
    
    private MyAuthenticationCallback(Activity paramActivity, IAuthPresenter paramIAuthPresenter)
    {
      activity = paramActivity;
      fidoPresenter = paramIAuthPresenter;
    }
    
    public void onAuthenticationAcquired(int paramInt)
    {
      fidoPresenter.authViewDisplay();
    }
    
    public void onAuthenticationError(int paramInt, CharSequence paramCharSequence)
    {
      if (paramInt != 5)
      {
        if (paramInt != 7) {
          paramInt = 17;
        } else {
          paramInt = 19;
        }
      }
      else {
        paramInt = 18;
      }
      fidoPresenter.handlerAuthResult(paramInt, null);
    }
    
    public void onAuthenticationFailed()
    {
      fidoPresenter.onAuthenticationFailed();
    }
    
    public void onAuthenticationHelp(int paramInt, CharSequence paramCharSequence)
    {
      fidoPresenter.onAuthenticationHelp(paramCharSequence);
    }
    
    public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult paramAuthenticationResult)
    {
      StringBuffer localStringBuffer = new StringBuffer();
      localStringBuffer.append(Build.VERSION.SDK_INT);
      if (fidoPresenter.getOpType().equals(Operation.SECOND_CLASS.name())) {
        try
        {
          RegisterResponse localRegisterResponse2 = fidoSignUtil.doRegProcess(activity, paramAuthenticationResult.getCryptoObject(), localStringBuffer.toString());
          RegisterResponse localRegisterResponse1 = localRegisterResponse2;
          if (localRegisterResponse2 == null)
          {
            localRegisterResponse1 = new RegisterResponse();
            statusCode = 32;
          }
          fidoPresenter.handlerAuthResult(16, localRegisterResponse1);
        }
        catch (Throwable localThrowable)
        {
          RegisterResponsestatusCode = 32;
          TrackerUtil.appendException("SCENE_REG_SIG_EXCEPTION", localThrowable);
        }
      }
      if (fidoPresenter.getOpType().equals(Operation.Auth.name()))
      {
        SignResponse localSignResponse = fidoSignUtil.doSignProcess(activity, paramAuthenticationResult.getCryptoObject(), localStringBuffer.toString());
        paramAuthenticationResult = localSignResponse;
        if (localSignResponse == null)
        {
          paramAuthenticationResult = new SignResponse();
          statusCode = 32;
        }
        fidoPresenter.handlerAuthResult(16, paramAuthenticationResult);
      }
    }
  }
}
