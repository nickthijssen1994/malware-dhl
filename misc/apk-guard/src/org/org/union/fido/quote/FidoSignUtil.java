package org.org.union.fido.quote;

import android.app.Activity;
import android.content.ContextWrapper;
import android.hardware.fingerprint.FingerprintManager.CryptoObject;
import android.os.Build.VERSION;
import android.util.Base64;
import com.jdcn.fido.utils.TrackerUtil;
import java.io.File;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.org.union.fido.bean.SecCheckResult;
import org.org.union.fido.bean.authenticator.command.RegisterCommand;
import org.org.union.fido.bean.authenticator.command.RegisterResponse;
import org.org.union.fido.bean.authenticator.command.SignCommand;
import org.org.union.fido.bean.authenticator.command.SignResponse;
import org.org.union.fido.bean.authenticator.wiki.TAG_ATTESTATION_BASIC_FULL;
import org.org.union.fido.bean.authenticator.wiki.TAG_ATTESTATION_BASIC_SURROGATE;
import org.org.union.fido.bean.authenticator.wiki.TAG_EXTENSION;
import org.org.union.fido.bean.authenticator.wiki.TAG_UAFV1_AUTH_ASSERTION;
import org.org.union.fido.bean.authenticator.wiki.TAG_UAFV1_KRD;
import org.org.union.fido.bean.authenticator.wiki.TAG_UAFV1_REG_ASSERTION;
import org.org.union.fido.bean.authenticator.wiki.TAG_UAFV1_SIGNED_DATA;
import org.org.union.fido.bean.authenticator.wiki.TAG_USERNAME_AND_KEYHANDLE;
import org.org.union.fido.bean.uafclient.Operation;
import org.org.union.fido.common.FingerAuthenticatorInfo;
import org.org.union.fido.helpers.SignCounterManager;
import org.org.union.fido.util.CryptoTools;
import org.org.union.fido.util.StringTools;
import org.org.union.fido.util.UAFTools;
import org.org.union.fido.util.Utility;
import org.org.union.fido.util.asn1.x509.X509Name;
import org.org.union.fido.util.cli.PKCS10CertificationRequest;

public class FidoSignUtil
{
  private RegisterCommand registerCommand = new RegisterCommand();
  private List<cn.com.union.fido.bean.authenticator.RawKeyHandle> remainingKeyhandleList = new ArrayList();
  private SignCommand signCommand = new SignCommand();
  
  public FidoSignUtil() {}
  
  private void getKeyHandle(Activity paramActivity, byte[] paramArrayOfByte)
  {
    signCommand.deserialize(paramArrayOfByte);
    remainingKeyhandleList = new ArrayList();
    paramArrayOfByte = signCommand.keyHandles.iterator();
    while (paramArrayOfByte.hasNext())
    {
      org.org.union.fido.bean.authenticator.RawKeyHandle localRawKeyHandle = UAFTools.generateDecryptedKeyHandle(paramActivity, (String)paramArrayOfByte.next());
      if ((localRawKeyHandle != null) && (KHAccessToken.equals(signCommand.khAccessToken))) {
        remainingKeyhandleList.add(localRawKeyHandle);
      }
    }
  }
  
  private PrivateKey getPrivateHandle(Activity paramActivity, IAuthPresenter paramIAuthPresenter)
  {
    Object localObject1;
    if (paramIAuthPresenter.getOpType().equals(Operation.SECOND_CLASS.name()))
    {
      registerCommand.deserialize(paramIAuthPresenter.getFidoCmd());
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(registerCommand.userName);
      ((StringBuilder)localObject1).append("004B#0001");
      ((StringBuilder)localObject1).append(registerCommand.extensions.get(1)).data);
      localObject1 = UAFTools.genUAuthKeyPair(2, StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject1).toString(), "SHA256")), paramActivity).getPrivate();
    }
    else
    {
      localObject1 = null;
    }
    Object localObject2 = localObject1;
    if (paramIAuthPresenter.getOpType().equals(Operation.Auth.name()))
    {
      getKeyHandle(paramActivity, paramIAuthPresenter.getFidoCmd());
      localObject2 = localObject1;
      if (remainingKeyhandleList.size() == 1)
      {
        paramActivity = (org.org.union.fido.bean.authenticator.RawKeyHandle)remainingKeyhandleList.get(0);
        paramIAuthPresenter = PrivateKey;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(Username);
        ((StringBuilder)localObject1).append("004B#0001");
        ((StringBuilder)localObject1).append(signCommand.extensions.get(1)).data);
        localObject2 = UAFTools.getUAuthPrivateKeyTEE(257, paramIAuthPresenter, StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject1).toString(), "SHA256")));
      }
    }
    return localObject2;
  }
  
  public RegisterResponse doRegProcess(Activity paramActivity, FingerprintManager.CryptoObject paramCryptoObject, String paramString)
  {
    Object localObject1 = new SignCounterManager(paramActivity);
    RegisterResponse localRegisterResponse = new RegisterResponse();
    Object localObject2 = FingerAuthenticatorInfo.attestationType;
    if ((localObject2 != null) && (((List)localObject2).indexOf(Short.valueOf(registerCommand.attestationType)) == -1))
    {
      statusCode = 7;
      return localRegisterResponse;
    }
    localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(registerCommand.userName);
    ((StringBuilder)localObject2).append("004B#0001");
    ((StringBuilder)localObject2).append(registerCommand.extensions.get(1)).data);
    Object localObject3 = UAFTools.getUAuthKeyPairTEE(257, null, StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject2).toString(), "SHA256")));
    localObject2 = UAFTools.getUAuthPublicKey(257, (KeyPair)localObject3);
    if (localObject3 == null) {
      return null;
    }
    String str = CryptoTools.getKeyString(((KeyPair)localObject3).getPrivate());
    Object localObject4 = new org.org.union.fido.bean.authenticator.RawKeyHandle();
    KHAccessToken = registerCommand.khAccessToken;
    PrivateKey = str;
    Username = registerCommand.userName;
    str = UAFTools.generateEncryptedKeyHandleReg((org.org.union.fido.bean.authenticator.RawKeyHandle)localObject4);
    TAG_UAFV1_KRD localTAG_UAFV1_KRD = new TAG_UAFV1_KRD();
    aaid = "004B#0001";
    authenticatorVersion = 1;
    authenticationMode = 1;
    signatureAlgAndEncoding = 2;
    publicKeyAlgAndEncoding = 257;
    finalChallenge = registerCommand.finalChallenge;
    Object localObject5 = CryptoTools.hash2Hex(str);
    if (localObject5 == null) {
      return null;
    }
    keyID = ((String)localObject5).substring(0, 32);
    int i = ((SignCounterManager)localObject1).updateOrAddCounter("004B#0001", keyID, registerCommand.userName);
    if (-1 == i) {
      return null;
    }
    signCounter = i;
    regCounter = 0;
    publicKey = ((byte[])localObject2);
    content = UAFTools.genUVI(keyID, paramString);
    localObject2 = localTAG_UAFV1_KRD.serialize();
    localObject1 = new TAG_UAFV1_REG_ASSERTION();
    Object localObject6;
    if (registerCommand.attestationType == 15879)
    {
      localObject5 = new ArrayList();
      try
      {
        paramString = paramCryptoObject.getSignature();
        i = Build.VERSION.SDK_INT;
        if (i > 29)
        {
          localObject6 = new StringBuilder();
          ((StringBuilder)localObject6).append(registerCommand.userName);
          ((StringBuilder)localObject6).append("004B#0001");
          ((StringBuilder)localObject6).append(registerCommand.extensions.get(1)).data);
          localObject6 = CryptoTools.getCertificateChain(StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject6).toString(), "SHA256")));
          if (localObject6 != null)
          {
            i = localObject6.length;
            if (i > 0)
            {
              int j = localObject6.length;
              i = 0;
              while (i < j)
              {
                ((List)localObject5).add(Base64.encodeToString(((X509Certificate)localObject6[i]).getEncoded(), 0));
                i += 1;
              }
              paramString.update((byte[])localObject2);
              paramString = paramString.sign();
              break label736;
            }
          }
          return null;
        }
        else
        {
          ((List)localObject5).add("MIIBnTCCAUGgAwIBAgIIC+S/RaEbr1EwDAYIKoEcz1UBg3UFADAeMQswCQYDVQQGEwJDTjEPMA0GA1UEAwwGRklET0NBMB4XDTE3MTExNzAxMzYxM1oXDTIyMTExNzAxMzYxM1owJTELMAkGA1UEBhMCQ04xFjAUBgNVBAMMDWFuZHJvaWRmaW5nZXIwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAATGRZ63XzzbA++OkWDPbzRg4MluvVxHk94k0hAV6Kh15xReq9QY1QXiMGiYp5gT/hY4C/xiVcan9N57Cd6em1oQo2AwXjAdBgNVHQ4EFgQU2pipUzxMHVWvQebA9J70riuyHlwwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBRIeUDXNcO6ji3GLLfkl02nPSZJojAOBgNVHQ8BAf8EBAMCBwAwDAYIKoEcz1UBg3UFAANIADBFAiEAuu4dQGMgCIur0pq82bxqN51t+sZGqFxa/rJ1Up5NbMsCICJbkt3VB9vt5pPWrEz+bzWM/BuvzNR7OEdDcnNuRxJ5");
          localObject6 = new StringBuilder();
          ((StringBuilder)localObject6).append(paramActivity.getFilesDir().getPath());
          ((StringBuilder)localObject6).append("/fidoTable");
          localObject6 = ((StringBuilder)localObject6).toString();
          CryptoTools localCryptoTools = new CryptoTools();
          Object localObject7 = new StringBuilder();
          ((StringBuilder)localObject7).append(registerCommand.userName);
          ((StringBuilder)localObject7).append("004B#0001");
          ((StringBuilder)localObject7).append(registerCommand.extensions.get(1)).data);
          localObject7 = StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject7).toString(), "SHA256"));
          byte[] arrayOfByte = Base64.decode("V-ZoTI0SC8XmUeQLuAijjco52P4VVFnn0gIT_FG6uxursprQa5PJGYZm2H138D0z".getBytes("ISO-8859-1"), 10);
          paramString = localCryptoTools.secCheck(paramActivity, (String)localObject6, paramString, (String)localObject7, arrayOfByte, null, (byte[])localObject2);
          if (paramString != null) {
            paramString = signedData;
          } else {
            paramString = null;
          }
        }
        label736:
        localObject6 = new TAG_ATTESTATION_BASIC_FULL();
        signature = paramString;
        certificate = ((List)localObject5);
        attestationBasicFull = ((TAG_ATTESTATION_BASIC_FULL)localObject6);
      }
      catch (Throwable paramActivity)
      {
        TrackerUtil.appendException("SCENE_REG_SIG_EXCEPTION", paramActivity);
        return null;
      }
    }
    if (registerCommand.attestationType == 15880)
    {
      try
      {
        paramString = paramCryptoObject.getSignature();
        paramCryptoObject = new StringBuilder();
        paramCryptoObject.append(paramActivity.getFilesDir().getPath());
        paramCryptoObject.append("/fidoTable");
        localObject5 = paramCryptoObject.toString();
        boolean bool = "true".equals(registerCommand.extensions.get(0)).data);
        if (bool)
        {
          paramCryptoObject = new StringBuilder("CN=");
          paramCryptoObject.append(Username);
          paramCryptoObject.append(",O=cfca");
          paramCryptoObject.append(System.currentTimeMillis());
          paramCryptoObject.append(",OU=cfca,C=CN");
          localObject4 = new X509Name(paramCryptoObject.toString());
          localObject3 = ((KeyPair)localObject3).getPublic();
          paramCryptoObject = null;
        }
        try
        {
          localObject3 = new PKCS10CertificationRequest("SHA256withRSA", (X509Name)localObject4, (PublicKey)localObject3, null);
          localObject4 = new CryptoTools();
          localObject6 = new StringBuilder();
          ((StringBuilder)localObject6).append(registerCommand.userName);
          ((StringBuilder)localObject6).append("004B#0001");
          ((StringBuilder)localObject6).append(registerCommand.extensions.get(1)).data);
          localObject6 = StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject6).toString(), "SHA256"));
          paramActivity = ((CryptoTools)localObject4).secCheck(paramActivity, (String)localObject5, paramString, (String)localObject6, Base64.decode("V-ZoTI0SC8XmUeQLuAijjco52P4VVFnn0gIT_FG6uxursprQa5PJGYZm2H138D0z".getBytes("ISO-8859-1"), 10), ((PKCS10CertificationRequest)localObject3).getReqInfoEncoded(), (byte[])localObject2);
          if (paramActivity != null)
          {
            paramCryptoObject = signedData;
            try
            {
              ((PKCS10CertificationRequest)localObject3).setSigBits(extraData);
              paramActivity = new TAG_EXTENSION();
              try
              {
                realm = "encrypt";
                data = new String(Base64.encode(((PKCS10CertificationRequest)localObject3).getEncoded(), 0));
                extension = paramActivity;
              }
              catch (Throwable localThrowable)
              {
                paramString = paramActivity;
                paramActivity = localThrowable;
              }
            }
            catch (Throwable paramActivity)
            {
              paramString = null;
            }
          }
          paramActivity = null;
        }
        catch (Throwable paramActivity)
        {
          break label1275;
        }
        paramCryptoObject = new CryptoTools();
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(registerCommand.userName);
        ((StringBuilder)localObject3).append("004B#0001");
        ((StringBuilder)localObject3).append(registerCommand.extensions.get(1)).data);
        localObject3 = StringTools.urlSafeBase64Enc(CryptoTools.hash(((StringBuilder)localObject3).toString(), "SHA256"));
        paramActivity = paramCryptoObject.secCheck(paramActivity, (String)localObject5, paramString, (String)localObject3, Base64.decode("V-ZoTI0SC8XmUeQLuAijjco52P4VVFnn0gIT_FG6uxursprQa5PJGYZm2H138D0z".getBytes("ISO-8859-1"), 10), null, localThrowable);
        if (paramActivity != null) {
          paramActivity = signedData;
        } else {
          paramActivity = null;
        }
        paramString = null;
        paramCryptoObject = paramActivity;
        paramActivity = paramString;
      }
      catch (Throwable paramActivity) {}
      label1275:
      paramCryptoObject = null;
      paramString = null;
      paramActivity.printStackTrace();
      paramActivity = paramString;
      paramString = new TAG_ATTESTATION_BASIC_SURROGATE();
      signature = paramCryptoObject;
      attestationBasicSurrogate = paramString;
      extension = paramActivity;
    }
    uafv1Krd = localTAG_UAFV1_KRD;
    statusCode = 0;
    assertion = ((TAG_UAFV1_REG_ASSERTION)localObject1).serialize();
    keyHandle = str;
    return localRegisterResponse;
  }
  
  public SignResponse doSignProcess(Activity paramActivity, FingerprintManager.CryptoObject paramCryptoObject, String paramString)
  {
    Object localObject3 = new SignCounterManager(paramActivity);
    SignResponse localSignResponse = new SignResponse();
    String str = signCommand.transactionContent;
    List localList = signCommand.extensions;
    if (remainingKeyhandleList.size() == 0)
    {
      statusCode = 2;
      return localSignResponse;
    }
    Object localObject1;
    Object localObject2;
    if (remainingKeyhandleList.size() > 1)
    {
      paramCryptoObject = new ArrayList();
      paramString = remainingKeyhandleList.iterator();
      while (paramString.hasNext())
      {
        localObject1 = (org.org.union.fido.bean.authenticator.RawKeyHandle)paramString.next();
        str = Username;
        localObject1 = UAFTools.generateEncryptedKeyHandleAhth(paramActivity, (org.org.union.fido.bean.authenticator.RawKeyHandle)localObject1);
        localObject2 = new TAG_USERNAME_AND_KEYHANDLE();
        keyHandle = ((String)localObject1);
        userName = str;
        paramCryptoObject.add(localObject2);
      }
      userNameAndKeyHandle = paramCryptoObject;
      return localSignResponse;
    }
    if (remainingKeyhandleList.size() == 1)
    {
      org.org.union.fido.bean.authenticator.RawKeyHandle localRawKeyHandle = (org.org.union.fido.bean.authenticator.RawKeyHandle)remainingKeyhandleList.get(0);
      paramActivity = UAFTools.generateEncryptedKeyHandleAhth(paramActivity, localRawKeyHandle);
      localObject1 = new TAG_UAFV1_SIGNED_DATA();
      authenticationMode = 1;
      if (StringTools.isValidateString(str))
      {
        tcHash = CryptoTools.hash(str, "SHA256");
        authenticationMode = 2;
      }
      localObject2 = new TAG_UAFV1_AUTH_ASSERTION();
      aaid = "004B#0001";
      authenticatorVersion = 1;
      signatureAlgAndEncoding = 2;
      authnrNonce = CryptoTools.genRandom(8);
      finalChallenge = signCommand.finalChallenge;
      int i = authenticationMode;
      str = null;
      if (i == 1) {
        tcHash = null;
      }
      paramActivity = CryptoTools.hash2Hex(paramActivity);
      if (paramActivity == null) {
        return null;
      }
      paramActivity = paramActivity.substring(0, 32);
      keyID = Utility.strToByte(paramActivity);
      i = ((SignCounterManager)localObject3).updateOrAddCounter("004B#0001", paramActivity, Username);
      if (-1 == i) {
        return null;
      }
      signCounter = i;
      pass = UAFTools.genUVI(paramActivity, paramString);
      paramActivity = ((TAG_UAFV1_SIGNED_DATA)localObject1).serialize();
      try
      {
        paramString = PrivateKey;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(Username);
        ((StringBuilder)localObject3).append("004B#0001");
        paramString = UAFTools.getUAuthKeyPairTEE(257, paramString, ((StringBuilder)localObject3).toString());
        paramCryptoObject = paramCryptoObject.getSignature();
        if (localList != null)
        {
          i = localList.size();
          if (i == 3)
          {
            boolean bool = Boolean.parseBoolean(get2data);
            if (bool)
            {
              paramActivity = new StringBuilder("CN=");
              paramActivity.append(Username);
              paramActivity.append(",O=cfca");
              paramActivity.append(System.currentTimeMillis());
              paramActivity.append(",OU=cfca,C=CN");
              paramActivity = new PKCS10CertificationRequest("SHA256withRSA", new X509Name(paramActivity.toString()), paramString.getPublic(), null, paramCryptoObject);
              paramCryptoObject = new TAG_EXTENSION();
              realm = "p10";
              data = new String(Base64.encode(paramActivity.getEncoded(), 0));
              paramActivity = null;
              break label622;
            }
            paramCryptoObject.update(paramActivity);
          }
        }
        for (;;)
        {
          paramActivity = paramCryptoObject.sign();
          paramCryptoObject = str;
          break;
          paramCryptoObject.update(paramActivity);
        }
        label622:
        signedData = ((TAG_UAFV1_SIGNED_DATA)localObject1);
        signature = paramActivity;
        extension = paramCryptoObject;
        assertion = ((TAG_UAFV1_AUTH_ASSERTION)localObject2).serialize();
        statusCode = 0;
        return localSignResponse;
      }
      catch (Throwable paramActivity)
      {
        TrackerUtil.appendException("SCENE_TRANS_SIG_EXCEPTION", paramActivity);
        return null;
      }
    }
    return localSignResponse;
  }
  
  public FingerprintManager.CryptoObject genCryptoObject(Activity paramActivity, IAuthPresenter paramIAuthPresenter)
  {
    Signature localSignature = Signature.getInstance("SHA256withECDSA");
    localSignature.initSign(getPrivateHandle(paramActivity, paramIAuthPresenter));
    return new FingerprintManager.CryptoObject(localSignature);
  }
}
