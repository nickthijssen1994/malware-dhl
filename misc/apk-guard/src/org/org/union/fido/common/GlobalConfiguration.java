package org.org.union.fido.common;

import android.content.Context;
import android.os.Build;
import android.provider.Settings.Secure;
import android.text.TextUtils;
import com.jdcn.fido.utils.FingerDeviceIdManger;
import java.util.Iterator;
import java.util.List;
import org.org.union.fido.bean.wiki.ASMRequest;
import org.org.union.fido.bean.wiki.ASMResponse;
import org.org.union.fido.bean.wiki.GetInfoOut;
import org.org.union.fido.bean.wiki.Request;
import org.org.union.fido.service.AsmService;
import org.org.union.fido.util.CryptoTools;
import org.org.union.fido.util.StringTools;

public class GlobalConfiguration
{
  public static String SERI_NUM;
  public static List<cn.com.union.fido.bean.asm.AuthenticatorInfo> authenticators;
  
  public GlobalConfiguration() {}
  
  public static void getAuthenticatorInfo(Context paramContext)
  {
    paramContext = new AsmService(paramContext);
    ASMRequest localASMRequest = new ASMRequest();
    requestType = Request.GetInfo;
    paramContext = paramContext.process(localASMRequest).getResponseData();
    if (paramContext != null) {
      authenticators = Authenticators;
    }
  }
  
  public static void getSeriNumEID(Context paramContext)
  {
    localObject1 = null;
    try
    {
      Object localObject2 = FingerDeviceIdManger.getOrGenerateDeviceId(paramContext);
      boolean bool = TextUtils.isEmpty((CharSequence)localObject2);
      paramContext = localObject1;
      if (!bool)
      {
        localObject2 = CryptoTools.hash((String)localObject2, "SHA256");
        paramContext = localObject1;
        if (localObject2 != null)
        {
          paramContext = localObject1;
          if (localObject2.length > 0)
          {
            int i = localObject2.length;
            paramContext = new StringBuilder(i * 2);
            int j = localObject2.length;
            i = 0;
            while (i < j)
            {
              int k = localObject2[i] & 0xFF;
              if (k < 16) {
                paramContext.append("0");
              }
              paramContext.append(Integer.toHexString(k));
              i += 1;
            }
            paramContext = paramContext.toString();
          }
        }
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext = localObject1;
      }
    }
    SERI_NUM = paramContext;
  }
  
  public static String getSeriNumFingerprint(Context paramContext)
  {
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(Settings.Secure.getString(paramContext.getContentResolver(), "android_id"));
      paramContext = Build.FINGERPRINT;
      localStringBuilder.append(paramContext);
      paramContext = CryptoTools.hash(localStringBuilder.toString(), "SHA256");
      if ((paramContext != null) && (paramContext.length > 0))
      {
        int i = paramContext.length;
        localStringBuilder = new StringBuilder(i * 2);
        int j = paramContext.length;
        i = 0;
        while (i < j)
        {
          int k = paramContext[i] & 0xFF;
          if (k < 16) {
            localStringBuilder.append("0");
          }
          localStringBuilder.append(Integer.toHexString(k));
          i += 1;
        }
        paramContext = localStringBuilder.toString();
        return paramContext;
      }
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getSeriNumSerial(Context paramContext)
  {
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(Settings.Secure.getString(paramContext.getContentResolver(), "android_id"));
      paramContext = Build.SERIAL;
      localStringBuilder.append(paramContext);
      paramContext = CryptoTools.hash(localStringBuilder.toString(), "SHA256");
      if ((paramContext != null) && (paramContext.length > 0))
      {
        int i = paramContext.length;
        localStringBuilder = new StringBuilder(i * 2);
        int j = paramContext.length;
        i = 0;
        while (i < j)
        {
          int k = paramContext[i] & 0xFF;
          if (k < 16) {
            localStringBuilder.append("0");
          }
          localStringBuilder.append(Integer.toHexString(k));
          i += 1;
        }
        paramContext = localStringBuilder.toString();
        return paramContext;
      }
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static org.org.union.fido.bean.wiki.AuthenticatorInfo locateAuthenticator(String paramString)
  {
    Object localObject2 = authenticators;
    Object localObject1 = null;
    if (localObject2 != null)
    {
      Iterator localIterator = ((List)localObject2).iterator();
      while (localIterator.hasNext())
      {
        localObject2 = (org.org.union.fido.bean.wiki.AuthenticatorInfo)localIterator.next();
        if ((StringTools.stringEqual(paramString.toLowerCase(), aaid)) || (StringTools.stringEqual(paramString.toUpperCase(), aaid))) {
          localObject1 = localObject2;
        }
      }
    }
    return null;
    return localObject1;
  }
  
  public static org.org.union.fido.bean.wiki.AuthenticatorInfo locateAuthenticator(short paramShort)
  {
    Object localObject2 = authenticators;
    Object localObject1 = null;
    if (localObject2 != null)
    {
      Iterator localIterator = ((List)localObject2).iterator();
      while (localIterator.hasNext())
      {
        localObject2 = (org.org.union.fido.bean.wiki.AuthenticatorInfo)localIterator.next();
        if (authenticatorIndex == paramShort) {
          localObject1 = localObject2;
        }
      }
    }
    return null;
    return localObject1;
  }
}
