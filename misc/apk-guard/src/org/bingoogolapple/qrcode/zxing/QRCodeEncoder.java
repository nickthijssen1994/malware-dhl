package org.bingoogolapple.qrcode.zxing;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Paint.FontMetrics;
import android.graphics.Paint.Style;
import android.text.TextUtils;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

public class QRCodeEncoder
{
  public static final Map<EncodeHintType, Object> HINTS = new EnumMap(EncodeHintType.class);
  
  static
  {
    HINTS.put(EncodeHintType.CHARACTER_SET, "utf-8");
    HINTS.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
    HINTS.put(EncodeHintType.MARGIN, Integer.valueOf(0));
  }
  
  private QRCodeEncoder() {}
  
  private static Bitmap addLogoToQRCode(Bitmap paramBitmap1, Bitmap paramBitmap2)
  {
    if (paramBitmap1 != null)
    {
      if (paramBitmap2 == null) {
        return paramBitmap1;
      }
      int i = paramBitmap1.getWidth();
      int j = paramBitmap1.getHeight();
      int k = paramBitmap2.getWidth();
      int m = paramBitmap2.getHeight();
      float f1 = i * 1.0F / 5.0F / k;
      Bitmap localBitmap = Bitmap.createBitmap(i, j, Bitmap.Config.ARGB_8888);
      try
      {
        Canvas localCanvas = new Canvas(localBitmap);
        localCanvas.drawBitmap(paramBitmap1, 0.0F, 0.0F, null);
        float f2 = i / 2;
        float f3 = j / 2;
        localCanvas.scale(f1, f1, f2, f3);
        f1 = (i - k) / 2;
        f2 = (j - m) / 2;
        localCanvas.drawBitmap(paramBitmap2, f1, f2, null);
        localCanvas.save();
        localCanvas.restore();
        return localBitmap;
      }
      catch (Exception paramBitmap1)
      {
        paramBitmap1.printStackTrace();
        return null;
      }
    }
    return paramBitmap1;
  }
  
  private static Bitmap showContent(Bitmap paramBitmap, String paramString, int paramInt)
  {
    if (!TextUtils.isEmpty(paramString))
    {
      if (paramBitmap == null) {
        return null;
      }
      Paint localPaint = new Paint();
      localPaint.setColor(-16777216);
      localPaint.setAntiAlias(true);
      localPaint.setStyle(Paint.Style.FILL);
      localPaint.setTextSize(paramInt);
      localPaint.setTextAlign(Paint.Align.CENTER);
      int i = (int)localPaint.measureText(paramString);
      Object localObject = localPaint.getFontMetrics();
      paramInt = (int)(bottom - top);
      float f = paramBitmap.getWidth() * 1.0F / i;
      if (f < 1.0F) {
        localPaint.setTextScaleX(f);
      }
      i = paramBitmap.getHeight();
      localObject = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight() + paramInt * 2, Bitmap.Config.ARGB_4444);
      Canvas localCanvas = new Canvas();
      localCanvas.drawColor(-1);
      localCanvas.setBitmap((Bitmap)localObject);
      localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, null);
      localCanvas.drawText(paramString, paramBitmap.getWidth() / 2, i + paramInt, localPaint);
      localCanvas.save();
      localCanvas.restore();
      return localObject;
    }
    return null;
  }
  
  public static Bitmap syncEncodeBarcode(String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    Object localObject1 = new HashMap();
    ((Map)localObject1).put(EncodeHintType.CHARACTER_SET, "utf-8");
    ((Map)localObject1).put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
    ((Map)localObject1).put(EncodeHintType.MARGIN, Integer.valueOf(0));
    Object localObject2;
    try
    {
      localObject2 = new MultiFormatWriter();
      BarcodeFormat localBarcodeFormat = BarcodeFormat.CODE_128;
      localObject2 = ((MultiFormatWriter)localObject2).encode(paramString, localBarcodeFormat, paramInt1, paramInt2, (Map)localObject1);
      localObject1 = new int[paramInt1 * paramInt2];
      int i = 0;
      while (i < paramInt2)
      {
        int j = 0;
        while (j < paramInt1)
        {
          boolean bool = ((BitMatrix)localObject2).get(j, i);
          if (bool) {
            localObject1[(i * paramInt1 + j)] = -16777216;
          } else {
            localObject1[(i * paramInt1 + j)] = -1;
          }
          j += 1;
        }
        i += 1;
      }
      localObject2 = Bitmap.Config.ARGB_8888;
      localObject2 = Bitmap.createBitmap(paramInt1, paramInt2, (Bitmap.Config)localObject2);
      ((Bitmap)localObject2).setPixels((int[])localObject1, 0, paramInt1, 0, 0, paramInt1, paramInt2);
      if (paramInt3 > 0)
      {
        paramString = showContent((Bitmap)localObject2, paramString, paramInt3);
        return paramString;
      }
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      return null;
    }
    return localObject2;
  }
  
  public static Bitmap syncEncodeQRCode(String paramString, int paramInt)
  {
    return syncEncodeQRCode(paramString, paramInt, -16777216, -1, null);
  }
  
  public static Bitmap syncEncodeQRCode(String paramString, int paramInt1, int paramInt2)
  {
    return syncEncodeQRCode(paramString, paramInt1, paramInt2, -1, null);
  }
  
  public static Bitmap syncEncodeQRCode(String paramString, int paramInt1, int paramInt2, int paramInt3, Bitmap paramBitmap)
  {
    try
    {
      Object localObject = new MultiFormatWriter();
      BarcodeFormat localBarcodeFormat = BarcodeFormat.QR_CODE;
      Map localMap = HINTS;
      localObject = ((MultiFormatWriter)localObject).encode(paramString, localBarcodeFormat, paramInt1, paramInt1, localMap);
      paramString = new int[paramInt1 * paramInt1];
      int i = 0;
      while (i < paramInt1)
      {
        int j = 0;
        while (j < paramInt1)
        {
          boolean bool = ((BitMatrix)localObject).get(j, i);
          if (bool) {
            paramString[(i * paramInt1 + j)] = paramInt2;
          } else {
            paramString[(i * paramInt1 + j)] = paramInt3;
          }
          j += 1;
        }
        i += 1;
      }
      localObject = Bitmap.Config.ARGB_8888;
      localObject = Bitmap.createBitmap(paramInt1, paramInt1, (Bitmap.Config)localObject);
      ((Bitmap)localObject).setPixels(paramString, 0, paramInt1, 0, 0, paramInt1, paramInt1);
      paramString = addLogoToQRCode((Bitmap)localObject, paramBitmap);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap syncEncodeQRCode(String paramString, int paramInt1, int paramInt2, Bitmap paramBitmap)
  {
    return syncEncodeQRCode(paramString, paramInt1, paramInt2, -1, paramBitmap);
  }
}
