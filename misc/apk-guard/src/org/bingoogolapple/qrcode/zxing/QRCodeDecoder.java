package org.bingoogolapple.qrcode.zxing;

import android.graphics.Bitmap;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.RGBLuminanceSource;
import com.google.zxing.Result;
import com.google.zxing.common.GlobalHistogramBinarizer;
import com.google.zxing.common.HybridBinarizer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import org.bingoogolapple.qrcode.core.Handler;

public class QRCodeDecoder
{
  static final Map<DecodeHintType, Object> ALL_HINT_MAP = new EnumMap(DecodeHintType.class);
  static final Map<DecodeHintType, Object> CODE_128_HINT_MAP;
  static final Map<DecodeHintType, Object> EAN_13_HINT_MAP;
  static final Map<DecodeHintType, Object> HIGH_FREQUENCY_HINT_MAP;
  static final Map<DecodeHintType, Object> ONE_DIMENSION_HINT_MAP;
  static final Map<DecodeHintType, Object> QR_CODE_HINT_MAP;
  static final Map<DecodeHintType, Object> TWO_DIMENSION_HINT_MAP;
  
  static
  {
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(BarcodeFormat.AZTEC);
    localArrayList.add(BarcodeFormat.CODABAR);
    localArrayList.add(BarcodeFormat.CODE_39);
    localArrayList.add(BarcodeFormat.CODE_93);
    localArrayList.add(BarcodeFormat.CODE_128);
    localArrayList.add(BarcodeFormat.DATA_MATRIX);
    localArrayList.add(BarcodeFormat.EAN_8);
    localArrayList.add(BarcodeFormat.EAN_13);
    localArrayList.add(BarcodeFormat.ITF);
    localArrayList.add(BarcodeFormat.MAXICODE);
    localArrayList.add(BarcodeFormat.PDF_417);
    localArrayList.add(BarcodeFormat.QR_CODE);
    localArrayList.add(BarcodeFormat.RSS_14);
    localArrayList.add(BarcodeFormat.RSS_EXPANDED);
    localArrayList.add(BarcodeFormat.UPC_A);
    localArrayList.add(BarcodeFormat.UPC_E);
    localArrayList.add(BarcodeFormat.UPC_EAN_EXTENSION);
    ALL_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, localArrayList);
    ALL_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    ALL_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
    ONE_DIMENSION_HINT_MAP = new EnumMap(DecodeHintType.class);
    localArrayList = new ArrayList();
    localArrayList.add(BarcodeFormat.CODABAR);
    localArrayList.add(BarcodeFormat.CODE_39);
    localArrayList.add(BarcodeFormat.CODE_93);
    localArrayList.add(BarcodeFormat.CODE_128);
    localArrayList.add(BarcodeFormat.EAN_8);
    localArrayList.add(BarcodeFormat.EAN_13);
    localArrayList.add(BarcodeFormat.ITF);
    localArrayList.add(BarcodeFormat.PDF_417);
    localArrayList.add(BarcodeFormat.RSS_14);
    localArrayList.add(BarcodeFormat.RSS_EXPANDED);
    localArrayList.add(BarcodeFormat.UPC_A);
    localArrayList.add(BarcodeFormat.UPC_E);
    localArrayList.add(BarcodeFormat.UPC_EAN_EXTENSION);
    ONE_DIMENSION_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, localArrayList);
    ONE_DIMENSION_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    ONE_DIMENSION_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
    TWO_DIMENSION_HINT_MAP = new EnumMap(DecodeHintType.class);
    localArrayList = new ArrayList();
    localArrayList.add(BarcodeFormat.AZTEC);
    localArrayList.add(BarcodeFormat.DATA_MATRIX);
    localArrayList.add(BarcodeFormat.MAXICODE);
    localArrayList.add(BarcodeFormat.QR_CODE);
    TWO_DIMENSION_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, localArrayList);
    TWO_DIMENSION_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    TWO_DIMENSION_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
    QR_CODE_HINT_MAP = new EnumMap(DecodeHintType.class);
    QR_CODE_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, Collections.singletonList(BarcodeFormat.QR_CODE));
    QR_CODE_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    QR_CODE_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
    CODE_128_HINT_MAP = new EnumMap(DecodeHintType.class);
    CODE_128_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, Collections.singletonList(BarcodeFormat.CODE_128));
    CODE_128_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    CODE_128_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
    EAN_13_HINT_MAP = new EnumMap(DecodeHintType.class);
    EAN_13_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, Collections.singletonList(BarcodeFormat.EAN_13));
    EAN_13_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    EAN_13_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
    HIGH_FREQUENCY_HINT_MAP = new EnumMap(DecodeHintType.class);
    localArrayList = new ArrayList();
    localArrayList.add(BarcodeFormat.QR_CODE);
    localArrayList.add(BarcodeFormat.UPC_A);
    localArrayList.add(BarcodeFormat.EAN_13);
    localArrayList.add(BarcodeFormat.CODE_128);
    HIGH_FREQUENCY_HINT_MAP.put(DecodeHintType.POSSIBLE_FORMATS, localArrayList);
    HIGH_FREQUENCY_HINT_MAP.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
    HIGH_FREQUENCY_HINT_MAP.put(DecodeHintType.CHARACTER_SET, "utf-8");
  }
  
  private QRCodeDecoder() {}
  
  public static String syncDecodeQRCode(Bitmap paramBitmap)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      Object localObject = new int[i * j];
      paramBitmap.getPixels((int[])localObject, 0, i, 0, 0, i, j);
      paramBitmap = new RGBLuminanceSource(i, j, (int[])localObject);
      try
      {
        localObject = new MultiFormatReader();
        BinaryBitmap localBinaryBitmap = new BinaryBitmap(new HybridBinarizer(paramBitmap));
        Map localMap = ALL_HINT_MAP;
        localObject = ((MultiFormatReader)localObject).decode(localBinaryBitmap, localMap).getText();
        return localObject;
      }
      catch (Exception localException1) {}
      localException2.printStackTrace();
    }
    catch (Exception localException2)
    {
      paramBitmap = null;
    }
    if (paramBitmap != null) {
      try
      {
        paramBitmap = new MultiFormatReader().decode(new BinaryBitmap(new GlobalHistogramBinarizer(paramBitmap)), ALL_HINT_MAP).getText();
        return paramBitmap;
      }
      catch (Throwable paramBitmap)
      {
        paramBitmap.printStackTrace();
      }
    }
    return null;
  }
  
  public static String syncDecodeQRCode(String paramString)
  {
    return syncDecodeQRCode(Handler.load(paramString));
  }
}
