package org.bingoogolapple.qrcode.core;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.text.Layout;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;

public class ScanBoxView
  extends View
{
  private int B;
  private StaticLayout C;
  private float E;
  private boolean G;
  private boolean H;
  private boolean M;
  private boolean N;
  private boolean V;
  private Paint a = new Paint();
  private boolean active;
  private TextPaint b;
  private float bottom;
  private Rect c;
  private int color;
  private Drawable d;
  private boolean data;
  private float density;
  private int e;
  private Bitmap f;
  private boolean g;
  private int h;
  private boolean header;
  private Bitmap height;
  private int i;
  private Bitmap icon;
  private Bitmap image;
  private Drawable j;
  private int k;
  private String l;
  private float left;
  private int m;
  private int mBorderColor;
  private int mColor;
  private int mMinWidth;
  private int mTextSize;
  private int mode;
  private int n;
  private int o;
  private boolean p;
  private String points;
  private QRCodeView position;
  private int q;
  private int r;
  private Bitmap right;
  private int s;
  private int t;
  private Bitmap title;
  private String top;
  private int u;
  private int v;
  private int w;
  private int width;
  private float x;
  private float y;
  private int z;
  
  public ScanBoxView(Context paramContext)
  {
    super(paramContext);
    a.setAntiAlias(true);
    o = Color.parseColor("#33FFFFFF");
    n = -1;
    i = Handler.dp(paramContext, 20.0F);
    s = Handler.dp(paramContext, 3.0F);
    q = Handler.dp(paramContext, 1.0F);
    m = -1;
    width = Handler.dp(paramContext, 90.0F);
    k = Handler.dp(paramContext, 200.0F);
    t = Handler.dp(paramContext, 140.0F);
    r = 0;
    p = false;
    d = null;
    f = null;
    e = Handler.dp(paramContext, 1.0F);
    mBorderColor = -1;
    mode = 1000;
    density = -1.0F;
    w = 1;
    h = 0;
    g = false;
    z = Handler.dp(paramContext, 2.0F);
    top = null;
    mMinWidth = Handler.init(paramContext, 14.0F);
    mColor = -1;
    V = false;
    u = Handler.dp(paramContext, 20.0F);
    G = false;
    color = Color.parseColor("#22000000");
    N = false;
    M = false;
    H = false;
    b = new TextPaint();
    b.setAntiAlias(true);
    B = Handler.dp(paramContext, 4.0F);
    active = false;
    data = false;
    header = false;
  }
  
  private void a()
  {
    int i1;
    Bitmap localBitmap;
    if (g)
    {
      if (right == null)
      {
        y += z;
        i1 = q;
        localBitmap = f;
        if (localBitmap != null) {
          i1 = localBitmap.getWidth();
        }
        if (M)
        {
          if ((y + i1 > c.right - left) || (y < c.left + left)) {
            z = (-z);
          }
        }
        else if (y + i1 > c.right - left) {
          y = (c.left + left + 0.5F);
        }
      }
      else
      {
        bottom += z;
        if (bottom > c.right - left) {
          bottom = (c.left + left + 0.5F);
        }
      }
    }
    else if (right == null)
    {
      x += z;
      i1 = q;
      localBitmap = f;
      if (localBitmap != null) {
        i1 = localBitmap.getHeight();
      }
      if (M)
      {
        if ((x + i1 > c.bottom - left) || (x < c.top + left)) {
          z = (-z);
        }
      }
      else if (x + i1 > c.bottom - left) {
        x = (c.top + left + 0.5F);
      }
    }
    else
    {
      E += z;
      if (E > c.bottom - left) {
        E = (c.top + left + 0.5F);
      }
    }
    postInvalidateDelayed(v, c.left, c.top, c.right, c.bottom);
  }
  
  private void a(Canvas paramCanvas)
  {
    if (!TextUtils.isEmpty(top))
    {
      if (C == null) {
        return;
      }
      Object localObject;
      TextPaint localTextPaint;
      String str;
      float f1;
      int i1;
      if (V)
      {
        if (N)
        {
          a.setColor(color);
          a.setStyle(Paint.Style.FILL);
          if (G)
          {
            localObject = new Rect();
            localTextPaint = b;
            str = top;
            localTextPaint.getTextBounds(str, 0, str.length(), (Rect)localObject);
            f1 = (paramCanvas.getWidth() - ((Rect)localObject).width()) / 2 - B;
            localObject = new RectF(f1, c.bottom + u - B, ((Rect)localObject).width() + f1 + B * 2, c.bottom + u + C.getHeight() + B);
            i1 = B;
            paramCanvas.drawRoundRect((RectF)localObject, i1, i1, a);
          }
          else
          {
            localObject = new RectF(c.left, c.bottom + u - B, c.right, c.bottom + u + C.getHeight() + B);
            i1 = B;
            paramCanvas.drawRoundRect((RectF)localObject, i1, i1, a);
          }
        }
        paramCanvas.save();
        if (G) {
          paramCanvas.translate(0.0F, c.bottom + u);
        } else {
          paramCanvas.translate(c.left + B, c.bottom + u);
        }
        C.draw(paramCanvas);
        paramCanvas.restore();
        return;
      }
      if (N)
      {
        a.setColor(color);
        a.setStyle(Paint.Style.FILL);
        if (G)
        {
          localObject = new Rect();
          localTextPaint = b;
          str = top;
          localTextPaint.getTextBounds(str, 0, str.length(), (Rect)localObject);
          f1 = (paramCanvas.getWidth() - ((Rect)localObject).width()) / 2 - B;
          localObject = new RectF(f1, c.top - u - C.getHeight() - B, ((Rect)localObject).width() + f1 + B * 2, c.top - u + B);
          i1 = B;
          paramCanvas.drawRoundRect((RectF)localObject, i1, i1, a);
        }
        else
        {
          localObject = new RectF(c.left, c.top - u - C.getHeight() - B, c.right, c.top - u + B);
          i1 = B;
          paramCanvas.drawRoundRect((RectF)localObject, i1, i1, a);
        }
      }
      paramCanvas.save();
      if (G) {
        paramCanvas.translate(0.0F, c.top - u - C.getHeight());
      } else {
        paramCanvas.translate(c.left + B, c.top - u - C.getHeight());
      }
      C.draw(paramCanvas);
      paramCanvas.restore();
    }
  }
  
  private void doDraw(Canvas paramCanvas)
  {
    int i1 = paramCanvas.getWidth();
    int i2 = paramCanvas.getHeight();
    if (o != 0)
    {
      a.setStyle(Paint.Style.FILL);
      a.setColor(o);
      float f1 = i1;
      paramCanvas.drawRect(0.0F, 0.0F, f1, c.top, a);
      paramCanvas.drawRect(0.0F, c.top, c.left, c.bottom + 1, a);
      paramCanvas.drawRect(c.right + 1, c.top, f1, c.bottom + 1, a);
      paramCanvas.drawRect(0.0F, c.bottom + 1, f1, i2, a);
    }
  }
  
  private void draw()
  {
    int i2 = getWidth();
    int i1 = k;
    i2 = (i2 - i1) / 2;
    int i3 = width;
    c = new Rect(i2, i3, i1 + i2, mTextSize + i3);
    float f1;
    if (g)
    {
      f1 = c.left + left + 0.5F;
      y = f1;
      bottom = f1;
    }
    else
    {
      f1 = c.top + left + 0.5F;
      x = f1;
      E = f1;
    }
    if ((position != null) && (isActive())) {
      position.onScanBoxRectChanged(new Rect(c));
    }
  }
  
  private void drawBackground(Canvas paramCanvas)
  {
    RectF localRectF;
    Rect localRect;
    if (g)
    {
      if (right != null)
      {
        localRectF = new RectF(c.left + left + 0.5F, c.top + left + r, bottom, c.bottom - left - r);
        localRect = new Rect((int)(right.getWidth() - localRectF.width()), 0, right.getWidth(), right.getHeight());
        if (left < 0)
        {
          left = 0;
          left = (right - localRect.width());
        }
        paramCanvas.drawBitmap(right, localRect, localRectF, a);
        return;
      }
      if (f != null)
      {
        localRectF = new RectF(y, c.top + left + r, y + f.getWidth(), c.bottom - left - r);
        paramCanvas.drawBitmap(f, null, localRectF, a);
        return;
      }
      a.setStyle(Paint.Style.FILL);
      a.setColor(m);
      paramCanvas.drawRect(y, c.top + left + r, y + q, c.bottom - left - r, a);
      return;
    }
    if (right != null)
    {
      localRectF = new RectF(c.left + left + r, c.top + left + 0.5F, c.right - left - r, E);
      localRect = new Rect(0, (int)(right.getHeight() - localRectF.height()), right.getWidth(), right.getHeight());
      if (top < 0)
      {
        top = 0;
        top = (bottom - localRect.height());
      }
      paramCanvas.drawBitmap(right, localRect, localRectF, a);
      return;
    }
    if (f != null)
    {
      localRectF = new RectF(c.left + left + r, x, c.right - left - r, x + f.getHeight());
      paramCanvas.drawBitmap(f, null, localRectF, a);
      return;
    }
    a.setStyle(Paint.Style.FILL);
    a.setColor(m);
    paramCanvas.drawRect(c.left + left + r, x, c.right - left - r, x + q, a);
  }
  
  private void drawBar(Canvas paramCanvas)
  {
    if (e > 0)
    {
      a.setStyle(Paint.Style.STROKE);
      a.setColor(mBorderColor);
      a.setStrokeWidth(e);
      paramCanvas.drawRect(c, a);
    }
  }
  
  private void init()
  {
    Drawable localDrawable = j;
    if (localDrawable != null) {
      height = ((BitmapDrawable)localDrawable).getBitmap();
    }
    if (height == null)
    {
      height = BitmapFactory.decodeResource(getResources(), R.mipmap.qrcode_default_grid_scan_line);
      height = Handler.createBitmap(height, m);
    }
    image = Handler.decode(height, 90);
    image = Handler.decode(image, 90);
    image = Handler.decode(image, 90);
    localDrawable = d;
    if (localDrawable != null) {
      icon = ((BitmapDrawable)localDrawable).getBitmap();
    }
    if (icon == null)
    {
      icon = BitmapFactory.decodeResource(getResources(), R.mipmap.qrcode_default_scan_line);
      icon = Handler.createBitmap(icon, m);
    }
    title = Handler.decode(icon, 90);
    width += h;
    left = (s * 1.0F / 2.0F);
    b.setTextSize(mMinWidth);
    b.setColor(mColor);
    setIsBarcode(g);
  }
  
  private void init(int paramInt, TypedArray paramTypedArray)
  {
    if (paramInt == R.styleable.QRCodeView_qrcv_topOffset)
    {
      width = paramTypedArray.getDimensionPixelSize(paramInt, width);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_cornerSize)
    {
      s = paramTypedArray.getDimensionPixelSize(paramInt, s);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_cornerLength)
    {
      i = paramTypedArray.getDimensionPixelSize(paramInt, i);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_scanLineSize)
    {
      q = paramTypedArray.getDimensionPixelSize(paramInt, q);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_rectWidth)
    {
      k = paramTypedArray.getDimensionPixelSize(paramInt, k);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_maskColor)
    {
      o = paramTypedArray.getColor(paramInt, o);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_cornerColor)
    {
      n = paramTypedArray.getColor(paramInt, n);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_scanLineColor)
    {
      m = paramTypedArray.getColor(paramInt, m);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_scanLineMargin)
    {
      r = paramTypedArray.getDimensionPixelSize(paramInt, r);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isShowDefaultScanLineDrawable)
    {
      p = paramTypedArray.getBoolean(paramInt, p);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_customScanLineDrawable)
    {
      d = paramTypedArray.getDrawable(paramInt);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_borderSize)
    {
      e = paramTypedArray.getDimensionPixelSize(paramInt, e);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_borderColor)
    {
      mBorderColor = paramTypedArray.getColor(paramInt, mBorderColor);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_animTime)
    {
      mode = paramTypedArray.getInteger(paramInt, mode);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_verticalBias)
    {
      density = paramTypedArray.getFloat(paramInt, density);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_cornerDisplayType)
    {
      w = paramTypedArray.getInteger(paramInt, w);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_toolbarHeight)
    {
      h = paramTypedArray.getDimensionPixelSize(paramInt, h);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_barcodeRectHeight)
    {
      t = paramTypedArray.getDimensionPixelSize(paramInt, t);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isBarcode)
    {
      g = paramTypedArray.getBoolean(paramInt, g);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_barCodeTipText)
    {
      l = paramTypedArray.getString(paramInt);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_qrCodeTipText)
    {
      points = paramTypedArray.getString(paramInt);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_tipTextSize)
    {
      mMinWidth = paramTypedArray.getDimensionPixelSize(paramInt, mMinWidth);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_tipTextColor)
    {
      mColor = paramTypedArray.getColor(paramInt, mColor);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isTipTextBelowRect)
    {
      V = paramTypedArray.getBoolean(paramInt, V);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_tipTextMargin)
    {
      u = paramTypedArray.getDimensionPixelSize(paramInt, u);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isShowTipTextAsSingleLine)
    {
      G = paramTypedArray.getBoolean(paramInt, G);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isShowTipBackground)
    {
      N = paramTypedArray.getBoolean(paramInt, N);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_tipBackgroundColor)
    {
      color = paramTypedArray.getColor(paramInt, color);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isScanLineReverse)
    {
      M = paramTypedArray.getBoolean(paramInt, M);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isShowDefaultGridScanLineDrawable)
    {
      H = paramTypedArray.getBoolean(paramInt, H);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_customGridScanLineDrawable)
    {
      j = paramTypedArray.getDrawable(paramInt);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isOnlyDecodeScanBoxArea)
    {
      active = paramTypedArray.getBoolean(paramInt, active);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isShowLocationPoint)
    {
      data = paramTypedArray.getBoolean(paramInt, data);
      return;
    }
    if (paramInt == R.styleable.QRCodeView_qrcv_isAutoZoom) {
      header = paramTypedArray.getBoolean(paramInt, header);
    }
  }
  
  private void onDraw()
  {
    if ((j == null) && (!H))
    {
      if ((d != null) || (p)) {
        if (g) {
          f = title;
        } else {
          f = icon;
        }
      }
    }
    else if (g) {
      right = image;
    } else {
      right = height;
    }
    if (g)
    {
      top = l;
      mTextSize = t;
      v = ((int)(mode * 1.0F * z / k));
    }
    else
    {
      top = points;
      mTextSize = k;
      v = ((int)(mode * 1.0F * z / mTextSize));
    }
    if (!TextUtils.isEmpty(top)) {
      if (G) {
        C = new StaticLayout(top, b, getInstancegetContextx, Layout.Alignment.ALIGN_CENTER, 1.0F, 0.0F, true);
      } else {
        C = new StaticLayout(top, b, k - B * 2, Layout.Alignment.ALIGN_CENTER, 1.0F, 0.0F, true);
      }
    }
    if (density != -1.0F)
    {
      int i1 = getInstancegetContexty - Handler.a(getContext());
      int i2 = h;
      if (i2 == 0) {
        width = ((int)(i1 * density - mTextSize / 2));
      } else {
        width = (i2 + (int)((i1 - i2) * density - mTextSize / 2));
      }
    }
    draw();
    postInvalidate();
  }
  
  private void update(Canvas paramCanvas)
  {
    if (left > 0.0F)
    {
      a.setStyle(Paint.Style.STROKE);
      a.setColor(n);
      a.setStrokeWidth(s);
      int i1 = w;
      if (i1 == 1)
      {
        paramCanvas.drawLine(c.left - left, c.top, c.left - left + i, c.top, a);
        paramCanvas.drawLine(c.left, c.top - left, c.left, c.top - left + i, a);
        paramCanvas.drawLine(c.right + left, c.top, c.right + left - i, c.top, a);
        paramCanvas.drawLine(c.right, c.top - left, c.right, c.top - left + i, a);
        paramCanvas.drawLine(c.left - left, c.bottom, c.left - left + i, c.bottom, a);
        paramCanvas.drawLine(c.left, c.bottom + left, c.left, c.bottom + left - i, a);
        paramCanvas.drawLine(c.right + left, c.bottom, c.right + left - i, c.bottom, a);
        paramCanvas.drawLine(c.right, c.bottom + left, c.right, c.bottom + left - i, a);
        return;
      }
      if (i1 == 2)
      {
        paramCanvas.drawLine(c.left, c.top + left, c.left + i, c.top + left, a);
        paramCanvas.drawLine(c.left + left, c.top, c.left + left, c.top + i, a);
        paramCanvas.drawLine(c.right, c.top + left, c.right - i, c.top + left, a);
        paramCanvas.drawLine(c.right - left, c.top, c.right - left, c.top + i, a);
        paramCanvas.drawLine(c.left, c.bottom - left, c.left + i, c.bottom - left, a);
        paramCanvas.drawLine(c.left + left, c.bottom, c.left + left, c.bottom - i, a);
        paramCanvas.drawLine(c.right, c.bottom - left, c.right - i, c.bottom - left, a);
        paramCanvas.drawLine(c.right - left, c.bottom, c.right - left, c.bottom - i, a);
      }
    }
  }
  
  public Rect draw(int paramInt)
  {
    if ((active) && (getVisibility() == 0))
    {
      Rect localRect = new Rect(c);
      float f3 = paramInt * 1.0F / getMeasuredHeight();
      float f1 = localRect.exactCenterX() * f3;
      float f2 = localRect.exactCenterY() * f3;
      float f5 = localRect.width() / 2.0F;
      float f4 = localRect.height() / 2.0F;
      f5 *= f3;
      f3 = f4 * f3;
      left = ((int)(f1 - f5));
      right = ((int)(f1 + f5));
      top = ((int)(f2 - f3));
      bottom = ((int)(f2 + f3));
      return localRect;
    }
    return null;
  }
  
  public int getAnimTime()
  {
    return mode;
  }
  
  public String getBarCodeTipText()
  {
    return l;
  }
  
  public int getBarcodeRectHeight()
  {
    return t;
  }
  
  public int getBorderColor()
  {
    return mBorderColor;
  }
  
  public int getBorderSize()
  {
    return e;
  }
  
  public int getCornerColor()
  {
    return n;
  }
  
  public int getCornerLength()
  {
    return i;
  }
  
  public int getCornerSize()
  {
    return s;
  }
  
  public Drawable getCustomScanLineDrawable()
  {
    return d;
  }
  
  public float getHalfCornerSize()
  {
    return left;
  }
  
  public boolean getIsBarcode()
  {
    return g;
  }
  
  public int getMaskColor()
  {
    return o;
  }
  
  public String getQRCodeTipText()
  {
    return points;
  }
  
  public int getRectHeight()
  {
    return mTextSize;
  }
  
  public int getRectWidth()
  {
    return k;
  }
  
  public Bitmap getScanLineBitmap()
  {
    return f;
  }
  
  public int getScanLineColor()
  {
    return m;
  }
  
  public int getScanLineMargin()
  {
    return r;
  }
  
  public int getScanLineSize()
  {
    return q;
  }
  
  public int getTipBackgroundColor()
  {
    return color;
  }
  
  public int getTipBackgroundRadius()
  {
    return B;
  }
  
  public String getTipText()
  {
    return top;
  }
  
  public int getTipTextColor()
  {
    return mColor;
  }
  
  public int getTipTextMargin()
  {
    return u;
  }
  
  public int getTipTextSize()
  {
    return mMinWidth;
  }
  
  public StaticLayout getTipTextSl()
  {
    return C;
  }
  
  public int getToolbarHeight()
  {
    return h;
  }
  
  public int getTopOffset()
  {
    return width;
  }
  
  public float getVerticalBias()
  {
    return density;
  }
  
  void init(QRCodeView paramQRCodeView, AttributeSet paramAttributeSet)
  {
    position = paramQRCodeView;
    paramQRCodeView = getContext().obtainStyledAttributes(paramAttributeSet, R.styleable.QRCodeView);
    int i2 = paramQRCodeView.getIndexCount();
    int i1 = 0;
    while (i1 < i2)
    {
      init(paramQRCodeView.getIndex(i1), paramQRCodeView);
      i1 += 1;
    }
    paramQRCodeView.recycle();
    init();
  }
  
  public boolean isActive()
  {
    return active;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    if (c == null) {
      return;
    }
    doDraw(paramCanvas);
    drawBar(paramCanvas);
    update(paramCanvas);
    drawBackground(paramCanvas);
    a(paramCanvas);
    a();
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    draw();
  }
  
  public boolean parseHeader()
  {
    return header;
  }
  
  public boolean recv()
  {
    return data;
  }
  
  public void setAnimTime(int paramInt)
  {
    mode = paramInt;
    onDraw();
  }
  
  public void setAutoZoom(boolean paramBoolean)
  {
    header = paramBoolean;
  }
  
  public void setBarCodeTipText(String paramString)
  {
    l = paramString;
    onDraw();
  }
  
  public void setBarcodeRectHeight(int paramInt)
  {
    t = paramInt;
    onDraw();
  }
  
  public void setBorderColor(int paramInt)
  {
    mBorderColor = paramInt;
    onDraw();
  }
  
  public void setBorderSize(int paramInt)
  {
    e = paramInt;
    onDraw();
  }
  
  public void setCornerColor(int paramInt)
  {
    n = paramInt;
    onDraw();
  }
  
  public void setCornerLength(int paramInt)
  {
    i = paramInt;
    onDraw();
  }
  
  public void setCornerSize(int paramInt)
  {
    s = paramInt;
    onDraw();
  }
  
  public void setCustomScanLineDrawable(Drawable paramDrawable)
  {
    d = paramDrawable;
    onDraw();
  }
  
  public void setHalfCornerSize(float paramFloat)
  {
    left = paramFloat;
    onDraw();
  }
  
  public void setIsBarcode(boolean paramBoolean)
  {
    g = paramBoolean;
    onDraw();
  }
  
  public void setMaskColor(int paramInt)
  {
    o = paramInt;
    onDraw();
  }
  
  public void setOnlyDecodeScanBoxArea(boolean paramBoolean)
  {
    active = paramBoolean;
    draw();
  }
  
  public void setQRCodeTipText(String paramString)
  {
    points = paramString;
    onDraw();
  }
  
  public void setRectHeight(int paramInt)
  {
    mTextSize = paramInt;
    onDraw();
  }
  
  public void setRectWidth(int paramInt)
  {
    k = paramInt;
    onDraw();
  }
  
  public void setScanLineBitmap(Bitmap paramBitmap)
  {
    f = paramBitmap;
    onDraw();
  }
  
  public void setScanLineColor(int paramInt)
  {
    m = paramInt;
    onDraw();
  }
  
  public void setScanLineMargin(int paramInt)
  {
    r = paramInt;
    onDraw();
  }
  
  public void setScanLineReverse(boolean paramBoolean)
  {
    M = paramBoolean;
    onDraw();
  }
  
  public void setScanLineSize(int paramInt)
  {
    q = paramInt;
    onDraw();
  }
  
  public void setShowDefaultGridScanLineDrawable(boolean paramBoolean)
  {
    H = paramBoolean;
    onDraw();
  }
  
  public void setShowDefaultScanLineDrawable(boolean paramBoolean)
  {
    p = paramBoolean;
    onDraw();
  }
  
  public void setShowLocationPoint(boolean paramBoolean)
  {
    data = paramBoolean;
  }
  
  public void setShowTipBackground(boolean paramBoolean)
  {
    N = paramBoolean;
    onDraw();
  }
  
  public void setShowTipTextAsSingleLine(boolean paramBoolean)
  {
    G = paramBoolean;
    onDraw();
  }
  
  public void setTipBackgroundColor(int paramInt)
  {
    color = paramInt;
    onDraw();
  }
  
  public void setTipBackgroundRadius(int paramInt)
  {
    B = paramInt;
    onDraw();
  }
  
  public void setTipText(String paramString)
  {
    if (g) {
      l = paramString;
    } else {
      points = paramString;
    }
    onDraw();
  }
  
  public void setTipTextBelowRect(boolean paramBoolean)
  {
    V = paramBoolean;
    onDraw();
  }
  
  public void setTipTextColor(int paramInt)
  {
    mColor = paramInt;
    b.setColor(mColor);
    onDraw();
  }
  
  public void setTipTextMargin(int paramInt)
  {
    u = paramInt;
    onDraw();
  }
  
  public void setTipTextSize(int paramInt)
  {
    mMinWidth = paramInt;
    b.setTextSize(mMinWidth);
    onDraw();
  }
  
  public void setTipTextSl(StaticLayout paramStaticLayout)
  {
    C = paramStaticLayout;
    onDraw();
  }
  
  public void setToolbarHeight(int paramInt)
  {
    h = paramInt;
    onDraw();
  }
  
  public void setTopOffset(int paramInt)
  {
    width = paramInt;
    onDraw();
  }
  
  public void setVerticalBias(float paramFloat)
  {
    density = paramFloat;
    onDraw();
  }
}
