package org.bingoogolapple.qrcode.core;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.PointF;
import android.graphics.Rect;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.AsyncTask;
import android.os.AsyncTask.Status;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;

public abstract class QRCodeView
  extends RelativeLayout
  implements Camera.PreviewCallback
{
  private static final int AMBIENT_BRIGHTNESS_DARK = 60;
  private static final long[] AMBIENT_BRIGHTNESS_DARK_LIST = { 255L, 255L, 255L, 255L };
  private static final int AMBIENT_BRIGHTNESS_WAIT_SCAN_TIME = 150;
  private static final int NO_CAMERA_ID = -1;
  private int mAmbientBrightnessDarkIndex = 0;
  private ValueAnimator mAutoZoomAnimator;
  protected BarcodeType mBarcodeType = BarcodeType.HIGH_FREQUENCY;
  protected Camera mCamera;
  protected int mCameraId = 0;
  protected CameraPreview mCameraPreview;
  protected a mDelegate;
  private long mLastAmbientBrightnessRecordTime = System.currentTimeMillis();
  private long mLastAutoZoomTime = 0L;
  private long mLastPreviewFrameTime = 0L;
  private PointF[] mLocationPoints;
  private Paint mPaint;
  protected ImageWorker.BitmapWorkerTask mProcessDataTask;
  protected ScanBoxView mScanBoxView;
  protected boolean mSpotAble = false;
  
  public QRCodeView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public QRCodeView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initView(paramContext, paramAttributeSet);
    setupReader();
  }
  
  private int findCameraIdByFacing(int paramInt)
  {
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    int i = 0;
    while (i < Camera.getNumberOfCameras()) {
      try
      {
        Camera.getCameraInfo(i, localCameraInfo);
        if (facing == paramInt) {
          return i;
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        i += 1;
      }
    }
    return -1;
  }
  
  private void handleAmbientBrightness(byte[] paramArrayOfByte, Camera paramCamera)
  {
    CameraPreview localCameraPreview = mCameraPreview;
    if (localCameraPreview != null)
    {
      if (!localCameraPreview.capture()) {
        return;
      }
      long l1 = System.currentTimeMillis();
      if (l1 - mLastAmbientBrightnessRecordTime < 150L) {
        return;
      }
      mLastAmbientBrightnessRecordTime = l1;
      long l2 = getParametersgetPreviewSizewidth * getParametersgetPreviewSizeheight;
      if (Math.abs(paramArrayOfByte.length - (float)l2 * 1.5F) < 1.0E-5F)
      {
        boolean bool = false;
        l1 = 0L;
        int i = 0;
        while (i < l2)
        {
          l1 += (paramArrayOfByte[i] & 0xFF);
          i += 10;
        }
        l1 /= l2 / 10;
        paramArrayOfByte = AMBIENT_BRIGHTNESS_DARK_LIST;
        i = paramArrayOfByte.length;
        i = mAmbientBrightnessDarkIndex % i;
        mAmbientBrightnessDarkIndex = i;
        paramArrayOfByte[i] = l1;
        mAmbientBrightnessDarkIndex += 1;
        int j = paramArrayOfByte.length;
        i = 0;
        while (i < j)
        {
          if (paramArrayOfByte[i] > 60L) {
            break label206;
          }
          i += 1;
        }
        bool = true;
        label206:
        paramArrayOfByte = new StringBuilder();
        paramArrayOfByte.append("?????????");
        paramArrayOfByte.append(l1);
        Handler.put(paramArrayOfByte.toString());
        paramArrayOfByte = mDelegate;
        if (paramArrayOfByte != null) {
          paramArrayOfByte.readFully(bool);
        }
      }
    }
  }
  
  private boolean handleAutoZoom(PointF[] paramArrayOfPointF, String paramString)
  {
    if (mCamera != null)
    {
      if (mScanBoxView == null) {
        return false;
      }
      if (paramArrayOfPointF != null)
      {
        if (paramArrayOfPointF.length < 1) {
          return false;
        }
        Object localObject = mAutoZoomAnimator;
        if ((localObject != null) && (((ValueAnimator)localObject).isRunning())) {
          return true;
        }
        if (System.currentTimeMillis() - mLastAutoZoomTime < 1200L) {
          return true;
        }
        localObject = mCamera.getParameters();
        if (!((Camera.Parameters)localObject).isZoomSupported()) {
          return false;
        }
        float f3 = 0x;
        float f1 = 0y;
        float f4 = 1x;
        float f2 = 1y;
        f3 = Math.abs(f3 - f4);
        f1 = Math.abs(f1 - f2);
        if ((int)Math.sqrt(f3 * f3 + f1 * f1) > mScanBoxView.getRectWidth() / 4) {
          return false;
        }
        int i = ((Camera.Parameters)localObject).getMaxZoom();
        int j = i / 4;
        post(new QRCodeView.3(this, ((Camera.Parameters)localObject).getZoom(), j, i, paramString));
        return true;
      }
    }
    return false;
  }
  
  private void initView(Context paramContext, AttributeSet paramAttributeSet)
  {
    mCameraPreview = new CameraPreview(paramContext);
    mCameraPreview.setDelegate(new QRCodeView.1(this));
    mScanBoxView = new ScanBoxView(paramContext);
    mScanBoxView.init(this, paramAttributeSet);
    mCameraPreview.setId(R.id.bgaqrcode_camera_preview);
    addView(mCameraPreview);
    paramContext = new RelativeLayout.LayoutParams(paramContext, paramAttributeSet);
    paramContext.addRule(6, mCameraPreview.getId());
    paramContext.addRule(8, mCameraPreview.getId());
    addView(mScanBoxView, paramContext);
    mPaint = new Paint();
    mPaint.setColor(getScanBoxView().getCornerColor());
    mPaint.setStyle(Paint.Style.FILL);
  }
  
  private void setOneShotPreviewCallback()
  {
    if ((mSpotAble) && (mCameraPreview.capture()))
    {
      Camera localCamera = mCamera;
      try
      {
        localCamera.setOneShotPreviewCallback(this);
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private void startAutoZoom(int paramInt1, int paramInt2, String paramString)
  {
    mAutoZoomAnimator = ValueAnimator.ofInt(new int[] { paramInt1, paramInt2 });
    mAutoZoomAnimator.addUpdateListener(new QRCodeView.4(this));
    mAutoZoomAnimator.addListener(new QRCodeView.5(this, paramString));
    mAutoZoomAnimator.setDuration(600L);
    mAutoZoomAnimator.setRepeatCount(0);
    mAutoZoomAnimator.start();
    mLastAutoZoomTime = System.currentTimeMillis();
  }
  
  private void startCameraById(int paramInt)
  {
    mCameraId = paramInt;
    try
    {
      Object localObject = Camera.open(paramInt);
      mCamera = ((Camera)localObject);
      localObject = mCameraPreview;
      Camera localCamera = mCamera;
      ((CameraPreview)localObject).setCamera(localCamera);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      a localA = mDelegate;
      if (localA != null) {
        localA.setOriginalText();
      }
    }
  }
  
  private PointF transform(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, boolean paramBoolean, int paramInt, Rect paramRect)
  {
    int i = getWidth();
    int j = getHeight();
    float f1;
    PointF localPointF2;
    PointF localPointF1;
    if (Handler.process(getContext()))
    {
      f1 = i;
      float f2 = f1 / paramFloat4;
      float f3 = j;
      localPointF2 = new PointF((paramFloat4 - paramFloat1) * f2, (paramFloat3 - paramFloat2) * (f3 / paramFloat3));
      y = (f3 - y);
      x = (f1 - x);
      localPointF1 = localPointF2;
      if (paramRect == null)
      {
        y += paramInt;
        localPointF1 = localPointF2;
      }
    }
    else
    {
      f1 = i;
      localPointF2 = new PointF(paramFloat1 * (f1 / paramFloat3), paramFloat2 * (j / paramFloat4));
      localPointF1 = localPointF2;
      if (paramBoolean)
      {
        x = (f1 - x);
        localPointF1 = localPointF2;
      }
    }
    if (paramRect != null)
    {
      y += top;
      x += left;
    }
    return localPointF1;
  }
  
  public void changeToScanBarcodeStyle()
  {
    if (!mScanBoxView.getIsBarcode()) {
      mScanBoxView.setIsBarcode(true);
    }
  }
  
  public void changeToScanQRCodeStyle()
  {
    if (mScanBoxView.getIsBarcode()) {
      mScanBoxView.setIsBarcode(false);
    }
  }
  
  public void closeFlashlight()
  {
    mCameraPreview.autoFocus();
  }
  
  public void decodeQRCode(Bitmap paramBitmap)
  {
    mProcessDataTask = new ImageWorker.BitmapWorkerTask(paramBitmap, this).onPositive();
  }
  
  public void decodeQRCode(String paramString)
  {
    mProcessDataTask = new ImageWorker.BitmapWorkerTask(paramString, this).onPositive();
  }
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    super.dispatchDraw(paramCanvas);
    if (isShowLocationPoint())
    {
      PointF[] arrayOfPointF = mLocationPoints;
      if (arrayOfPointF == null) {
        return;
      }
      int j = arrayOfPointF.length;
      int i = 0;
      while (i < j)
      {
        PointF localPointF = arrayOfPointF[i];
        paramCanvas.drawCircle(x, y, 10.0F, mPaint);
        i += 1;
      }
      mLocationPoints = null;
      postInvalidateDelayed(2000L);
    }
  }
  
  public CameraPreview getCameraPreview()
  {
    return mCameraPreview;
  }
  
  public boolean getIsScanBarcodeStyle()
  {
    return mScanBoxView.getIsBarcode();
  }
  
  public ScanBoxView getScanBoxView()
  {
    return mScanBoxView;
  }
  
  public void hiddenScanRect()
  {
    ScanBoxView localScanBoxView = mScanBoxView;
    if (localScanBoxView != null) {
      localScanBoxView.setVisibility(8);
    }
  }
  
  protected boolean isAutoZoom()
  {
    ScanBoxView localScanBoxView = mScanBoxView;
    return (localScanBoxView != null) && (localScanBoxView.parseHeader());
  }
  
  protected boolean isShowLocationPoint()
  {
    ScanBoxView localScanBoxView = mScanBoxView;
    return (localScanBoxView != null) && (localScanBoxView.recv());
  }
  
  public void onDestroy()
  {
    stopCamera();
    mDelegate = null;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    ValueAnimator localValueAnimator = mAutoZoomAnimator;
    if (localValueAnimator != null) {
      localValueAnimator.cancel();
    }
  }
  
  void onPostParseBitmapOrPicture(History paramHistory)
  {
    if (mDelegate != null)
    {
      if (paramHistory == null) {
        paramHistory = null;
      } else {
        paramHistory = searchQuery;
      }
      mDelegate.setSearchQuery(paramHistory);
    }
  }
  
  void onPostParseData(History paramHistory)
  {
    if (!mSpotAble) {
      return;
    }
    if (paramHistory == null) {
      paramHistory = null;
    } else {
      paramHistory = searchQuery;
    }
    if (TextUtils.isEmpty(paramHistory))
    {
      if (mCamera == null) {
        return;
      }
      paramHistory = mCamera;
      try
      {
        paramHistory.setOneShotPreviewCallback(this);
        return;
      }
      catch (Exception paramHistory)
      {
        paramHistory.printStackTrace();
        return;
      }
    }
    mSpotAble = false;
    if (mDelegate != null)
    {
      a localA = mDelegate;
      try
      {
        localA.setSearchQuery(paramHistory);
        return;
      }
      catch (Exception paramHistory)
      {
        paramHistory.printStackTrace();
      }
    }
  }
  
  public void onPreviewFrame(byte[] paramArrayOfByte, Camera paramCamera)
  {
    if (Handler.d())
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("?? onPreviewFrame ?????");
      ((StringBuilder)localObject).append(System.currentTimeMillis() - mLastPreviewFrameTime);
      Handler.put(((StringBuilder)localObject).toString());
      mLastPreviewFrameTime = System.currentTimeMillis();
    }
    Object localObject = mCameraPreview;
    if ((localObject != null) && (((CameraPreview)localObject).capture())) {
      try
      {
        handleAmbientBrightness(paramArrayOfByte, paramCamera);
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
    if (mSpotAble)
    {
      ImageWorker.BitmapWorkerTask localBitmapWorkerTask = mProcessDataTask;
      if (localBitmapWorkerTask != null)
      {
        if (localBitmapWorkerTask.getStatus() == AsyncTask.Status.PENDING) {
          return;
        }
        if (mProcessDataTask.getStatus() == AsyncTask.Status.RUNNING) {
          return;
        }
      }
      mProcessDataTask = new ImageWorker.BitmapWorkerTask(paramCamera, paramArrayOfByte, this, Handler.process(getContext())).onPositive();
    }
  }
  
  void onScanBoxRectChanged(Rect paramRect)
  {
    mCameraPreview.draw(paramRect);
  }
  
  public void openFlashlight()
  {
    QRCodeView.2 local2 = new QRCodeView.2(this);
    long l;
    if (mCameraPreview.capture()) {
      l = 0L;
    } else {
      l = 500L;
    }
    postDelayed(local2, l);
  }
  
  protected abstract History processBitmapData(Bitmap paramBitmap);
  
  protected abstract History processData(byte[] paramArrayOfByte, int paramInt1, int paramInt2, boolean paramBoolean);
  
  public void setDelegate(a paramA)
  {
    mDelegate = paramA;
  }
  
  protected abstract void setupReader();
  
  public void showScanRect()
  {
    ScanBoxView localScanBoxView = mScanBoxView;
    if (localScanBoxView != null) {
      localScanBoxView.setVisibility(0);
    }
  }
  
  public void startCamera()
  {
    startCamera(mCameraId);
  }
  
  public void startCamera(int paramInt)
  {
    if (mCamera == null)
    {
      if (Camera.getNumberOfCameras() == 0) {
        return;
      }
      int j = findCameraIdByFacing(paramInt);
      int i = j;
      if (j != -1)
      {
        startCameraById(j);
        return;
      }
      if (paramInt == 0) {
        i = findCameraIdByFacing(1);
      } else if (paramInt == 1) {
        i = findCameraIdByFacing(0);
      }
      if (i != -1) {
        startCameraById(i);
      }
    }
  }
  
  public void startSpot()
  {
    mSpotAble = true;
    startCamera();
    setOneShotPreviewCallback();
  }
  
  public void startSpotAndShowRect()
  {
    startSpot();
    showScanRect();
  }
  
  public void stopCamera()
  {
    try
    {
      stopSpotAndHiddenRect();
      if (mCamera != null)
      {
        Object localObject = mCameraPreview;
        ((CameraPreview)localObject).stopCameraPreview();
        localObject = mCameraPreview;
        ((CameraPreview)localObject).setCamera(null);
        localObject = mCamera;
        ((Camera)localObject).release();
        mCamera = null;
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void stopSpot()
  {
    mSpotAble = false;
    Object localObject = mProcessDataTask;
    if (localObject != null)
    {
      ((ImageWorker.BitmapWorkerTask)localObject).cancelTask();
      mProcessDataTask = null;
    }
    localObject = mCamera;
    if (localObject != null) {
      try
      {
        ((Camera)localObject).setOneShotPreviewCallback(null);
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public void stopSpotAndHiddenRect()
  {
    stopSpot();
    hiddenScanRect();
  }
  
  protected boolean transformToViewCoordinates(PointF[] paramArrayOfPointF, Rect paramRect, boolean paramBoolean, String paramString)
  {
    if (paramArrayOfPointF != null)
    {
      if (paramArrayOfPointF.length == 0) {
        return false;
      }
      Object localObject = mCamera;
      try
      {
        localObject = ((Camera)localObject).getParameters().getPreviewSize();
        boolean bool;
        if (mCameraId == 1) {
          bool = true;
        } else {
          bool = false;
        }
        int k = Handler.a(getContext());
        PointF[] arrayOfPointF = new PointF[paramArrayOfPointF.length];
        int m = paramArrayOfPointF.length;
        int i = 0;
        int j = 0;
        while (i < m)
        {
          PointF localPointF = paramArrayOfPointF[i];
          float f1 = x;
          float f2 = y;
          float f3 = width;
          float f4 = height;
          localPointF = transform(f1, f2, f3, f4, bool, k, paramRect);
          arrayOfPointF[j] = localPointF;
          j += 1;
          i += 1;
        }
        mLocationPoints = arrayOfPointF;
        postInvalidate();
        if (paramBoolean)
        {
          paramBoolean = handleAutoZoom(arrayOfPointF, paramString);
          return paramBoolean;
        }
        return false;
      }
      catch (Exception paramArrayOfPointF)
      {
        mLocationPoints = null;
        paramArrayOfPointF.printStackTrace();
      }
    }
    return false;
  }
  
  public abstract interface a
  {
    public abstract void readFully(boolean paramBoolean);
    
    public abstract void setOriginalText();
    
    public abstract void setSearchQuery(String paramString);
  }
}
