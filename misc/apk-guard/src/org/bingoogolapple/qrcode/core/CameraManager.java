package org.bingoogolapple.qrcode.core;

import android.content.Context;
import android.graphics.Point;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.Size;
import android.view.Display;
import android.view.WindowManager;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

final class CameraManager
{
  private Point camera;
  private Point cameraResolution;
  private final Context width;
  
  CameraManager(Context paramContext)
  {
    width = paramContext;
  }
  
  private static Point findBestPreviewSizeValue(Camera.Parameters paramParameters, Point paramPoint)
  {
    Point localPoint = findBestPreviewSizeValue(paramParameters.getSupportedPreviewSizes(), paramPoint);
    paramParameters = localPoint;
    if (localPoint == null) {
      paramParameters = new Point(x >> 3 << 3, y >> 3 << 3);
    }
    return paramParameters;
  }
  
  private static Point findBestPreviewSizeValue(List paramList, Point paramPoint)
  {
    paramList = paramList.iterator();
    int i = 0;
    int k = Integer.MAX_VALUE;
    int j = 0;
    int m;
    int n;
    for (;;)
    {
      m = i;
      n = j;
      if (!paramList.hasNext()) {
        break;
      }
      Camera.Size localSize = (Camera.Size)paramList.next();
      m = width;
      n = height;
      int i1 = Math.abs(m - x) + Math.abs(n - y);
      if (i1 == 0) {
        break;
      }
      if (i1 < k)
      {
        j = n;
        i = m;
        k = i1;
      }
    }
    if ((m > 0) && (n > 0)) {
      return new Point(m, n);
    }
    return null;
  }
  
  private static String findSettableValue(Collection paramCollection, String... paramVarArgs)
  {
    if (paramCollection != null)
    {
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        String str = paramVarArgs[i];
        if (paramCollection.contains(str)) {
          return str;
        }
        i += 1;
      }
    }
    return null;
  }
  
  private int setOrientation()
  {
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    int j = 0;
    Camera.getCameraInfo(0, localCameraInfo);
    WindowManager localWindowManager = (WindowManager)width.getSystemService("window");
    if (localWindowManager == null) {
      return 0;
    }
    int i = j;
    switch (localWindowManager.getDefaultDisplay().getRotation())
    {
    default: 
      i = j;
      break;
    case 3: 
      i = 270;
      break;
    case 2: 
      i = 180;
      break;
    case 1: 
      i = 90;
    }
    if (facing == 1) {
      return (360 - (orientation + i) % 360) % 360;
    }
    return (orientation - i + 360) % 360;
  }
  
  private void setTorch(Camera paramCamera, boolean paramBoolean)
  {
    Camera.Parameters localParameters = paramCamera.getParameters();
    String str;
    if (paramBoolean) {
      str = findSettableValue(localParameters.getSupportedFlashModes(), new String[] { "torch", "on" });
    } else {
      str = findSettableValue(localParameters.getSupportedFlashModes(), new String[] { "off" });
    }
    if (str != null) {
      localParameters.setFlashMode(str);
    }
    paramCamera.setParameters(localParameters);
  }
  
  private int[] toString(Camera paramCamera, float paramFloat)
  {
    int k = (int)(paramFloat * 1000.0F);
    Iterator localIterator = paramCamera.getParameters().getSupportedPreviewFpsRange().iterator();
    paramCamera = null;
    int i = Integer.MAX_VALUE;
    while (localIterator.hasNext())
    {
      int[] arrayOfInt = (int[])localIterator.next();
      int j = arrayOfInt[0];
      int m = arrayOfInt[1];
      j = Math.abs(k - j) + Math.abs(k - m);
      if (j < i)
      {
        paramCamera = arrayOfInt;
        i = j;
      }
    }
    return paramCamera;
  }
  
  void open(Camera paramCamera)
  {
    Point localPoint1 = Handler.getInstance(width);
    Point localPoint2 = new Point();
    x = x;
    y = y;
    if (Handler.process(width))
    {
      x = y;
      y = x;
    }
    cameraResolution = findBestPreviewSizeValue(paramCamera.getParameters(), localPoint2);
    if (Handler.process(width))
    {
      camera = new Point(cameraResolution.y, cameraResolution.x);
      return;
    }
    camera = cameraResolution;
  }
  
  void pause(Camera paramCamera)
  {
    setTorch(paramCamera, true);
  }
  
  void reconnect(Camera paramCamera)
  {
    setTorch(paramCamera, false);
  }
  
  void setDesiredCameraParameters(Camera paramCamera)
  {
    Camera.Parameters localParameters = paramCamera.getParameters();
    localParameters.setPreviewSize(cameraResolution.x, cameraResolution.y);
    int[] arrayOfInt = toString(paramCamera, 60.0F);
    if (arrayOfInt != null) {
      localParameters.setPreviewFpsRange(arrayOfInt[0], arrayOfInt[1]);
    }
    paramCamera.setDisplayOrientation(setOrientation());
    paramCamera.setParameters(localParameters);
  }
  
  Point stopPreview()
  {
    return camera;
  }
}
