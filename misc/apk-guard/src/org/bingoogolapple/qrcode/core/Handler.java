package org.bingoogolapple.qrcode.core;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.RectF;
import android.util.Log;
import android.util.TypedValue;
import android.view.Display;
import android.view.MotionEvent;
import android.view.WindowManager;

public class Handler
{
  private static boolean f;
  
  public static int a(Context paramContext)
  {
    TypedArray localTypedArray = paramContext.getTheme().obtainStyledAttributes(new int[] { 16843277 });
    boolean bool = localTypedArray.getBoolean(0, false);
    localTypedArray.recycle();
    if (bool) {
      return 0;
    }
    int i = paramContext.getResources().getIdentifier("status_bar_height", "dimen", "android");
    if (i > 0) {
      return paramContext.getResources().getDimensionPixelSize(i);
    }
    return 0;
  }
  
  static Rect a(float paramFloat1, float paramFloat2, float paramFloat3, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt1 = (int)(paramInt1 * paramFloat1 / 2.0F);
    paramInt2 = (int)(paramInt2 * paramFloat1 / 2.0F);
    paramInt3 = (int)(paramFloat2 / paramInt3 * 2000.0F - 1000.0F);
    paramInt4 = (int)(paramFloat3 / paramInt4 * 2000.0F - 1000.0F);
    RectF localRectF = new RectF(read(paramInt3 - paramInt1, 64536, 1000), read(paramInt4 - paramInt2, 64536, 1000), read(paramInt3 + paramInt1, 64536, 1000), read(paramInt4 + paramInt2, 64536, 1000));
    return new Rect(Math.round(left), Math.round(top), Math.round(right), Math.round(bottom));
  }
  
  public static void a(String paramString1, String paramString2)
  {
    if (f) {
      Log.d(paramString1, paramString2);
    }
  }
  
  static Bitmap createBitmap(Bitmap paramBitmap, int paramInt)
  {
    if (paramBitmap == null) {
      return null;
    }
    Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
    Canvas localCanvas = new Canvas(localBitmap);
    Paint localPaint = new Paint();
    localPaint.setColorFilter(new PorterDuffColorFilter(paramInt, PorterDuff.Mode.SRC_IN));
    localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
    return localBitmap;
  }
  
  public static void d(String paramString)
  {
    if (f) {
      Log.e("BGAQRCode", paramString);
    }
  }
  
  public static boolean d()
  {
    return f;
  }
  
  static Bitmap decode(Bitmap paramBitmap, int paramInt)
  {
    if (paramBitmap == null) {
      return null;
    }
    Matrix localMatrix = new Matrix();
    localMatrix.setRotate(paramInt, paramBitmap.getWidth() / 2.0F, paramBitmap.getHeight() / 2.0F);
    float f2;
    float f1;
    if (paramInt == 90)
    {
      f2 = paramBitmap.getHeight();
      f1 = 0.0F;
    }
    else
    {
      f2 = paramBitmap.getHeight();
      f1 = paramBitmap.getWidth();
    }
    Object localObject = new float[9];
    localMatrix.getValues((float[])localObject);
    localMatrix.postTranslate(f2 - localObject[2], f1 - localObject[5]);
    localObject = Bitmap.createBitmap(paramBitmap.getHeight(), paramBitmap.getWidth(), Bitmap.Config.ARGB_8888);
    Paint localPaint = new Paint();
    new Canvas((Bitmap)localObject).drawBitmap(paramBitmap, localMatrix, localPaint);
    return localObject;
  }
  
  public static int dp(Context paramContext, float paramFloat)
  {
    return (int)TypedValue.applyDimension(1, paramFloat, paramContext.getResources().getDisplayMetrics());
  }
  
  public static void draw(String paramString, Rect paramRect)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString);
    localStringBuilder.append(" centerX?");
    localStringBuilder.append(paramRect.centerX());
    localStringBuilder.append(" centerY?");
    localStringBuilder.append(paramRect.centerY());
    localStringBuilder.append(" width?");
    localStringBuilder.append(paramRect.width());
    localStringBuilder.append(" height?");
    localStringBuilder.append(paramRect.height());
    localStringBuilder.append(" rectHalfWidth?");
    localStringBuilder.append(paramRect.width() / 2);
    localStringBuilder.append(" rectHalfHeight?");
    localStringBuilder.append(paramRect.height() / 2);
    localStringBuilder.append(" left?");
    localStringBuilder.append(left);
    localStringBuilder.append(" top?");
    localStringBuilder.append(top);
    localStringBuilder.append(" right?");
    localStringBuilder.append(right);
    localStringBuilder.append(" bottom?");
    localStringBuilder.append(bottom);
    a("BGAQRCodeFocusArea", localStringBuilder.toString());
  }
  
  static Point getInstance(Context paramContext)
  {
    paramContext = ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay();
    Point localPoint = new Point();
    paramContext.getSize(localPoint);
    return localPoint;
  }
  
  public static int init(Context paramContext, float paramFloat)
  {
    return (int)TypedValue.applyDimension(2, paramFloat, paramContext.getResources().getDisplayMetrics());
  }
  
  public static Bitmap load(String paramString)
  {
    try
    {
      BitmapFactory.Options localOptions = new BitmapFactory.Options();
      int i = 1;
      inJustDecodeBounds = true;
      BitmapFactory.decodeFile(paramString, localOptions);
      int j = outHeight / 400;
      if (j > 0) {
        i = j;
      }
      inSampleSize = i;
      inJustDecodeBounds = false;
      paramString = BitmapFactory.decodeFile(paramString, localOptions);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static boolean process(Context paramContext)
  {
    paramContext = getInstance(paramContext);
    return y > x;
  }
  
  public static void put(String paramString)
  {
    a("BGAQRCode", paramString);
  }
  
  static int read(int paramInt1, int paramInt2, int paramInt3)
  {
    return Math.min(Math.max(paramInt1, paramInt2), paramInt3);
  }
  
  static float spacing(MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX(0) - paramMotionEvent.getX(1);
    float f2 = paramMotionEvent.getY(0) - paramMotionEvent.getY(1);
    return (float)Math.sqrt(f1 * f1 + f2 * f2);
  }
}
