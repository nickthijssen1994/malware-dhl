package org.bingoogolapple.qrcode.core;

import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Point;
import android.graphics.Rect;
import android.hardware.Camera;
import android.hardware.Camera.Area;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.Size;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.MeasureSpec;
import java.util.Collections;

public class CameraPreview
  extends SurfaceView
  implements SurfaceHolder.Callback
{
  private float a = 1.0F;
  private boolean b = false;
  private a button;
  private Camera mCamera;
  private boolean mSurfaceCreated = false;
  private boolean previewActive = false;
  private CameraManager this$0;
  
  public CameraPreview(Context paramContext)
  {
    super(paramContext);
    getHolder().addCallback(this);
  }
  
  private void initialize(float paramFloat1, float paramFloat2, int paramInt1, int paramInt2)
  {
    Object localObject1 = mCamera;
    try
    {
      localObject1 = ((Camera)localObject1).getParameters();
      localObject2 = ((Camera.Parameters)localObject1).getPreviewSize();
      int i = ((Camera.Parameters)localObject1).getMaxNumFocusAreas();
      if (i > 0)
      {
        Handler.put("????????");
        i = width;
        j = height;
        Rect localRect = Handler.a(1.0F, paramFloat1, paramFloat2, paramInt1, paramInt2, i, j);
        Handler.draw("????", localRect);
        ((Camera.Parameters)localObject1).setFocusAreas(Collections.singletonList(new Camera.Area(localRect, 1000)));
        ((Camera.Parameters)localObject1).setFocusMode("macro");
        i = 1;
      }
      else
      {
        Handler.put("?????????");
        i = 0;
      }
      int j = ((Camera.Parameters)localObject1).getMaxNumMeteringAreas();
      if (j > 0)
      {
        Handler.put("????????");
        i = width;
        j = height;
        localObject2 = Handler.a(1.5F, paramFloat1, paramFloat2, paramInt1, paramInt2, i, j);
        Handler.draw("????", (Rect)localObject2);
        ((Camera.Parameters)localObject1).setMeteringAreas(Collections.singletonList(new Camera.Area((Rect)localObject2, 1000)));
        i = 1;
      }
      else
      {
        Handler.put("?????????");
      }
      if (i != 0)
      {
        localObject2 = mCamera;
        ((Camera)localObject2).cancelAutoFocus();
        localObject2 = mCamera;
        ((Camera)localObject2).setParameters((Camera.Parameters)localObject1);
        localObject1 = mCamera;
        ((Camera)localObject1).autoFocus(new CameraPreview.1(this));
        return;
      }
      b = false;
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("???????");
      ((StringBuilder)localObject2).append(localException.getMessage());
      Handler.d(((StringBuilder)localObject2).toString());
      startPreview();
    }
  }
  
  private boolean open()
  {
    return (capture()) && (getContext().getPackageManager().hasSystemFeature("android.hardware.camera.flash"));
  }
  
  private void pause()
  {
    if (mCamera != null)
    {
      previewActive = true;
      try
      {
        Object localObject = getHolder();
        ((SurfaceHolder)localObject).setKeepScreenOn(true);
        Camera localCamera = mCamera;
        localCamera.setPreviewDisplay((SurfaceHolder)localObject);
        localObject = this$0;
        localCamera = mCamera;
        ((CameraManager)localObject).setDesiredCameraParameters(localCamera);
        localObject = mCamera;
        ((Camera)localObject).startPreview();
        if (button != null)
        {
          localObject = button;
          ((a)localObject).setOnCheckedChangeListener();
        }
        startPreview();
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private static void setZoom(boolean paramBoolean, Camera paramCamera)
  {
    Camera.Parameters localParameters = paramCamera.getParameters();
    if (localParameters.isZoomSupported())
    {
      int j = localParameters.getZoom();
      int i = j;
      if ((paramBoolean) && (j < localParameters.getMaxZoom()))
      {
        Handler.put("??");
        i = j + 1;
      }
      else if ((!paramBoolean) && (j > 0))
      {
        Handler.put("??");
        i = j - 1;
      }
      else
      {
        Handler.put("????????");
      }
      localParameters.setZoom(i);
      paramCamera.setParameters(localParameters);
      return;
    }
    Handler.put("?????");
  }
  
  private void startPreview()
  {
    b = false;
    Object localObject = mCamera;
    if (localObject == null) {
      return;
    }
    try
    {
      localObject = ((Camera)localObject).getParameters();
      ((Camera.Parameters)localObject).setFocusMode("continuous-picture");
      Camera localCamera = mCamera;
      localCamera.setParameters((Camera.Parameters)localObject);
      localObject = mCamera;
      ((Camera)localObject).cancelAutoFocus();
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    Handler.d("??????");
  }
  
  void autoFocus()
  {
    if (open()) {
      this$0.reconnect(mCamera);
    }
  }
  
  boolean capture()
  {
    return (mCamera != null) && (previewActive) && (mSurfaceCreated);
  }
  
  void draw(Rect paramRect)
  {
    if ((mCamera != null) && (paramRect != null) && (left > 0))
    {
      if (top <= 0) {
        return;
      }
      int n = paramRect.centerX();
      int i3 = n;
      int k = paramRect.centerY();
      int i2 = k;
      int j = paramRect.width() / 2;
      int i = paramRect.height() / 2;
      Handler.draw("???", paramRect);
      int i1 = j;
      int m = i;
      if (Handler.process(getContext()))
      {
        m = j;
        i1 = i;
        i3 = k;
        i2 = n;
      }
      paramRect = new Rect(i3 - i1, i2 - m, i3 + i1, i2 + m);
      Handler.draw("???", paramRect);
      Handler.put("?????????????");
      initialize(paramRect.centerX(), paramRect.centerY(), paramRect.width(), paramRect.height());
    }
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    int k = View.getDefaultSize(getSuggestedMinimumWidth(), paramInt1);
    paramInt1 = k;
    int m = View.getDefaultSize(getSuggestedMinimumHeight(), paramInt2);
    paramInt2 = m;
    Object localObject = this$0;
    int i = paramInt1;
    int j = paramInt2;
    if (localObject != null)
    {
      i = paramInt1;
      j = paramInt2;
      if (((CameraManager)localObject).stopPreview() != null)
      {
        localObject = this$0.stopPreview();
        i = x;
        j = y;
        float f1 = k;
        float f2 = m;
        float f3 = f1 * 1.0F / f2;
        float f4 = i;
        float f5 = j;
        float f6 = f4 * 1.0F / f5;
        if (f3 < f6)
        {
          i = (int)(f2 / (f5 * 1.0F / f4) + 0.5F);
          j = paramInt2;
        }
        else
        {
          j = (int)(f1 / f6 + 0.5F);
          i = paramInt1;
        }
      }
    }
    super.onMeasure(View.MeasureSpec.makeMeasureSpec(i, 1073741824), View.MeasureSpec.makeMeasureSpec(j, 1073741824));
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!capture()) {
      return super.onTouchEvent(paramMotionEvent);
    }
    float f2;
    float f1;
    int i;
    if ((paramMotionEvent.getPointerCount() == 1) && ((paramMotionEvent.getAction() & 0xFF) == 1))
    {
      if (b) {
        return true;
      }
      b = true;
      Handler.put("??????????");
      f2 = paramMotionEvent.getX();
      float f4 = f2;
      f1 = paramMotionEvent.getY();
      float f3 = f1;
      if (Handler.process(getContext()))
      {
        f3 = f2;
        f4 = f1;
      }
      i = Handler.dp(getContext(), 120.0F);
      initialize(f4, f3, i, i);
    }
    if (paramMotionEvent.getPointerCount() == 2)
    {
      i = paramMotionEvent.getAction() & 0xFF;
      if (i != 2)
      {
        if (i != 5) {
          return true;
        }
        a = Handler.spacing(paramMotionEvent);
        return true;
      }
      f1 = Handler.spacing(paramMotionEvent);
      f2 = a;
      if (f1 > f2)
      {
        setZoom(true, mCamera);
        return true;
      }
      if (f1 < f2) {
        setZoom(false, mCamera);
      }
    }
    return true;
  }
  
  void setCamera(Camera paramCamera)
  {
    mCamera = paramCamera;
    if (mCamera != null)
    {
      this$0 = new CameraManager(getContext());
      this$0.open(mCamera);
      if (previewActive)
      {
        requestLayout();
        return;
      }
      pause();
    }
  }
  
  void setDelegate(a paramA)
  {
    button = paramA;
  }
  
  void stopCameraPreview()
  {
    Camera localCamera = mCamera;
    if (localCamera != null)
    {
      previewActive = false;
      try
      {
        localCamera.cancelAutoFocus();
        localCamera = mCamera;
        localCamera.setOneShotPreviewCallback(null);
        localCamera = mCamera;
        localCamera.stopPreview();
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramSurfaceHolder.getSurface() == null) {
      return;
    }
    stopCameraPreview();
    pause();
  }
  
  public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
  {
    mSurfaceCreated = true;
  }
  
  public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
  {
    mSurfaceCreated = false;
    stopCameraPreview();
  }
  
  void takePicture()
  {
    if (open()) {
      this$0.pause(mCamera);
    }
  }
  
  abstract interface a
  {
    public abstract void setOnCheckedChangeListener();
  }
}
