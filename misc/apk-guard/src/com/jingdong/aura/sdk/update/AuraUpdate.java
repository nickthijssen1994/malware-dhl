package com.jingdong.aura.sdk.update;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.DisplayMetrics;
import com.jingdong.aura.sdk.update.b.c;
import com.jingdong.aura.sdk.update.b.f;
import com.jingdong.aura.sdk.update.b.g;
import com.jingdong.aura.sdk.update.b.k;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class AuraUpdate
{
  public AuraUpdate() {}
  
  public static void init(AuraUpdateConfig paramAuraUpdateConfig)
  {
    a localA = a.a();
    if (!f)
    {
      a = paramAuraUpdateConfig;
      k.a(a, "config is null");
      k.a(a.appKey, "appKey is null");
      k.a(a.appSecret, "appSecret is null");
      k.a(a.context, "context is null");
      k.a(a.bundleInfoProvider, "bundleInfoProvider is null");
      k.a(a.downloader, "downloader is null");
      ea = a.updateInteval;
      m = new com.jingdong.aura.sdk.update.report.a(a.reporter);
      l = new com.jingdong.aura.sdk.update.downloader.a(a.context, a.downloader);
      k = new File(a.context.getFilesDir(), "apkcenter");
      try
      {
        f.a(a.context.getResources().getDisplayMetrics().density);
      }
      catch (Throwable paramAuraUpdateConfig)
      {
        paramAuraUpdateConfig.printStackTrace();
      }
      com.jingdong.aura.sdk.provided.ui.a.a(a.toastUtils);
      paramAuraUpdateConfig = a.context;
      Object localObject = new StringBuilder("aura_update_");
      ((StringBuilder)localObject).append(a.appVersionCode);
      h = paramAuraUpdateConfig.getSharedPreferences(((StringBuilder)localObject).toString(), 0);
      i = a.context.getSharedPreferences("aura_update_config", 0);
      j = localA.a(a.appVersionCode);
      c.a(String.format("appId:%s, versionName:%s, versionCode:%s ,isAppUpgrade:%s", new Object[] { a.appKey, a.appVersionName, Integer.valueOf(a.appVersionCode), Boolean.valueOf(j) }));
      if (j)
      {
        c.b("App is upgrade, will clean download cache");
        g.a(k);
      }
      int i = a.appVersionCode;
      i.edit().putInt("last_version_code", i).apply();
      a.e();
      b = localA.d();
      StringBuilder localStringBuilder;
      if ((a.enableLog) && (b != null))
      {
        paramAuraUpdateConfig = b.iterator();
        while (paramAuraUpdateConfig.hasNext())
        {
          localObject = (AuraBundleResult)paramAuraUpdateConfig.next();
          localStringBuilder = new StringBuilder("?????? getProvidedBundleResult : ");
          localStringBuilder.append(updateId);
          localStringBuilder.append(" ,???? : ");
          localStringBuilder.append(((AuraBundleResult)localObject).getDownloadTypeStr());
          c.a(localStringBuilder.toString());
        }
      }
      c = localA.a(b, a.c());
      if ((a.enableLog) && (c != null))
      {
        paramAuraUpdateConfig = c.iterator();
        while (paramAuraUpdateConfig.hasNext())
        {
          localObject = (AuraBundleResult)paramAuraUpdateConfig.next();
          localStringBuilder = new StringBuilder("???????? mergeBundleResult : ");
          localStringBuilder.append(updateId);
          localStringBuilder.append(" ,???? : ");
          localStringBuilder.append(((AuraBundleResult)localObject).getDownloadTypeStr());
          c.a(localStringBuilder.toString());
        }
      }
      d = new com.jingdong.aura.sdk.update.updater.a();
      paramAuraUpdateConfig = new HandlerThread("AuraUpdate");
      paramAuraUpdateConfig.start();
      g = new Handler(paramAuraUpdateConfig.getLooper());
      g.post((Runnable)new a.1(localA));
      if ((c != null) && (c.size() > 0)) {
        l.a(c);
      }
      f = true;
    }
  }
  
  public static void initAuraServiceLoader()
  {
    a.a();
    a.e();
  }
  
  public static void requestUpdateBundles()
  {
    a.a().b();
  }
}
