package com.jingdong.aura.core.asm;

import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.os.Build.VERSION;
import com.jingdong.aura.core.asm.asm.a;
import com.jingdong.aura.core.asm.util.c;
import com.jingdong.aura.core.reflection.ClassWriter;
import com.jingdong.aura.core.reflection.Hack.e;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import dalvik.system.BaseDexClassLoader;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import org.osgi.framework.BundleException;

public final class Item
  extends BaseDexClassLoader
  implements c
{
  private static final HashSet<String> a;
  private static final StringBuffer b = Attribute.getInstance(com.jingdong.aura.core.b.f.class);
  private static final List<URL> list = new ArrayList();
  private i c;
  private final a j;
  
  static
  {
    a = new HashSet();
    a.add("com.jingdong.aura.core.framework");
    a.add("org.osgi.framework");
    a.add("org.osgi.service.packageadmin");
    a.add("org.osgi.service.startlevel");
  }
  
  public Item(i paramI, String paramString)
  {
    super(".", null, paramString, Object.class.getClassLoader());
    if (Build.VERSION.SDK_INT >= 25) {}
    try
    {
      Class localClass = Class.forName("com.android.internal.os.PathClassLoaderFactory");
      Method localMethod = localClass.getDeclaredMethod("createClassloaderNamespace", new Class[] { ClassLoader.class, Integer.TYPE, String.class, String.class, Boolean.TYPE });
      localMethod.setAccessible(true);
      localMethod.invoke(localClass, new Object[] { this, Integer.valueOf(this$0getApplicationInfotargetSdkVersion), paramString, paramString, Boolean.valueOf(true) });
    }
    catch (Throwable paramString)
    {
      for (;;) {}
    }
    c = paramI;
    j = paramI.p();
    if (j != null) {
      return;
    }
    paramString = new StringBuilder();
    paramString.append("Not Component valid bundle: ");
    paramString.append(paramI.n());
    throw ((Throwable)new BundleException(paramString.toString()));
  }
  
  private Class a(String paramString)
  {
    a localA = j;
    try
    {
      paramString = localA.a(paramString, this);
      return paramString;
    }
    catch (ClassNotFoundException paramString)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static void addItem(String paramString)
  {
    HashSet localHashSet = a;
    if (localHashSet == null) {
      return;
    }
    localHashSet.add(paramString);
  }
  
  private List get(String paramString, boolean paramBoolean)
  {
    return list;
  }
  
  private static String getClass(String paramString)
  {
    int i = paramString.lastIndexOf('.');
    if (i > -1) {
      return paramString.substring(0, i);
    }
    return "";
  }
  
  private List getList(String paramString, boolean paramBoolean)
  {
    a localA = j;
    try
    {
      paramString = localA.b(paramString);
      return paramString;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return list;
  }
  
  private static String getName(String paramString)
  {
    String str;
    if (!paramString.startsWith("/"))
    {
      str = paramString;
      if (!paramString.startsWith("\\")) {}
    }
    else
    {
      str = paramString.substring(1);
    }
    return str;
  }
  
  public i a()
  {
    return c;
  }
  
  protected Class findClass(String paramString)
  {
    if (a.contains(getClass(paramString))) {
      return com.jingdong.aura.core.asm.http.f.d().loadClass(paramString);
    }
    Object localObject1 = a(paramString);
    if (localObject1 != null) {
      return localObject1;
    }
    if (c != null)
    {
      localObject1 = com.jingdong.aura.core.data.f.get().get(c.n());
      if ((localObject1 != null) && (((List)localObject1).size() > 0))
      {
        int i = 0;
        while (i < ((List)localObject1).size())
        {
          for (;;)
          {
            try
            {
              localObject2 = ((List)localObject1).get(i);
              localObject2 = (String)localObject2;
              localObject2 = com.jingdong.aura.core.asm.http.f.d((String)localObject2);
              localObject2 = (i)localObject2;
              if (localObject2 != null) {}
            }
            catch (Exception localException2)
            {
              Object localObject2;
              continue;
            }
            try
            {
              try
              {
                ((i)localObject2).add();
              }
              catch (BundleException localBundleException) {}
            }
            catch (Exception localException3)
            {
              continue;
            }
            try
            {
              localBundleException.printStackTrace();
              localObject2 = ((i)localObject2).get().loadClass(paramString);
              if (localObject2 != null) {
                return localObject2;
              }
            }
            catch (Exception localException4) {}
          }
          i += 1;
        }
      }
    }
    try
    {
      localObject1 = com.jingdong.aura.core.asm.http.f.d().loadClass(paramString);
      if (localObject1 != null) {
        return localObject1;
      }
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Can't find class ");
      ((StringBuilder)localObject1).append(paramString);
      ((StringBuilder)localObject1).append(" in BundleClassLoader: ");
      ((StringBuilder)localObject1).append(c.n());
      throw new ClassNotFoundException(((StringBuilder)localObject1).toString());
    }
    catch (Exception localException1)
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Can't find class ");
      ((StringBuilder)localObject2).append(paramString);
      ((StringBuilder)localObject2).append(" in BundleClassLoader: ");
      ((StringBuilder)localObject2).append(c.n());
      throw new ClassNotFoundException(((StringBuilder)localObject2).toString(), localException1);
    }
  }
  
  public String findLibrary(String paramString)
  {
    Object localObject = System.mapLibraryName(paramString);
    localObject = j.a((String)localObject);
    if (localObject != null) {
      return ((File)localObject).getAbsolutePath();
    }
    localObject = ClassWriter.o;
    try
    {
      ClassLoader localClassLoader = com.jingdong.aura.core.asm.http.f.d();
      paramString = ((Hack.e)localObject).a(localClassLoader, new Object[] { paramString });
      return (String)paramString;
    }
    catch (Exception paramString)
    {
      b.e(paramString.getMessage(), paramString);
    }
    return null;
  }
  
  protected URL findResource(String paramString)
  {
    paramString = getName(paramString);
    List localList1 = getList(paramString, false);
    if (localList1.size() > 0) {
      return (URL)localList1.get(0);
    }
    List localList2 = get(paramString, false);
    localList1.addAll(get(paramString, true));
    if (localList2.size() > 0) {
      return (URL)localList2.get(0);
    }
    return null;
  }
  
  protected Enumeration findResources(String paramString)
  {
    return Collections.enumeration(getList(getName(paramString), true));
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("BundleClassLoader[Bundle");
    localStringBuilder.append(c);
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
}
