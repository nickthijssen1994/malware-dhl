package com.jingdong.aura.core.asm;

import java.util.Dictionary;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import org.osgi.framework.a;
import org.osgi.framework.d;
import org.osgi.framework.e;
import org.osgi.framework.f;

public final class Frame
  implements e
{
  private static long e;
  private static final HashSet<String> values = new HashSet();
  private Object a;
  private HashMap<a, Object> b;
  private a c;
  private f d;
  private final boolean f;
  private final Map<a, Integer> g;
  private final Dictionary<String, Object> v;
  
  static
  {
    values.add("service.id".toLowerCase(Locale.US));
    values.add("objectClass".toLowerCase(Locale.US));
  }
  
  public Frame(a paramA, Object paramObject, Dictionary paramDictionary, String[] paramArrayOfString)
  {
    int i = 0;
    g = new HashMap(0);
    b = null;
    if ((paramObject instanceof d))
    {
      f = true;
    }
    else
    {
      f = false;
      init(paramObject, paramArrayOfString);
    }
    c = paramA;
    a = paramObject;
    if (paramDictionary == null) {
      paramA = new Hashtable();
    } else {
      paramA = new Hashtable(paramDictionary.size());
    }
    v = paramA;
    if (paramDictionary != null)
    {
      paramA = paramDictionary.keys();
      while (paramA.hasMoreElements())
      {
        paramObject = (String)paramA.nextElement();
        v.put(paramObject, paramDictionary.get(paramObject));
      }
    }
    v.put("objectClass", paramArrayOfString);
    paramA = v;
    long l = e + 1L;
    e = l;
    paramA.put("service.id", Long.valueOf(l));
    if (paramDictionary == null) {
      paramA = null;
    } else {
      paramA = (Integer)paramDictionary.get("service.ranking");
    }
    paramObject = v;
    if (paramA != null) {
      i = paramA.intValue();
    }
    paramObject.put("service.ranking", Integer.valueOf(i));
    d = new FieldVisitor(this, null);
  }
  
  private void init(Object paramObject, String[] paramArrayOfString)
  {
    int i = 0;
    while (i < paramArrayOfString.length)
    {
      Object localObject1 = paramArrayOfString[i];
      try
      {
        boolean bool = Class.forName((String)localObject1, false, paramObject.getClass().getClassLoader()).isInstance(paramObject);
        if (bool)
        {
          i += 1;
        }
        else
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("Service ");
          ((StringBuilder)localObject1).append(paramObject.getClass().getName());
          ((StringBuilder)localObject1).append(" does not implement the interface ");
          localObject2 = paramArrayOfString[i];
          ((StringBuilder)localObject1).append((String)localObject2);
          localObject1 = new IllegalArgumentException(((StringBuilder)localObject1).toString());
          throw ((Throwable)localObject1);
        }
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Interface ");
        ((StringBuilder)localObject2).append(paramArrayOfString[i]);
        ((StringBuilder)localObject2).append(" implemented by service ");
        ((StringBuilder)localObject2).append(paramObject.getClass().getName());
        ((StringBuilder)localObject2).append(" cannot be located: ");
        ((StringBuilder)localObject2).append(localClassNotFoundException.getMessage());
        throw new IllegalArgumentException(((StringBuilder)localObject2).toString());
      }
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("ServiceReference{");
    localStringBuilder.append(a);
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
}
