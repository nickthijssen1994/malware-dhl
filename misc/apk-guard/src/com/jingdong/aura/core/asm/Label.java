package com.jingdong.aura.core.asm;

public final class Label
{
  private final short[] a;
  private final String c;
  private boolean f;
  private final Item h;
  
  private static boolean matches(String paramString1, short[] paramArrayOfShort1, String paramString2, short[] paramArrayOfShort2)
  {
    int i = paramString2.indexOf('*');
    if (i > -1)
    {
      if (i == 0) {
        return true;
      }
      paramString2 = paramString2.substring(0, i);
      if (!paramString2.endsWith(".")) {
        return false;
      }
      if (!paramString1.startsWith(paramString2.substring(0, paramString2.length() - 1))) {
        return false;
      }
    }
    else if (!paramString1.equals(paramString2))
    {
      return false;
    }
    if (paramArrayOfShort1 != null)
    {
      if (paramArrayOfShort2 == null) {
        return true;
      }
      i = 0;
      while (i < 3)
      {
        if (paramArrayOfShort1[i] > paramArrayOfShort2[i]) {
          return false;
        }
        i += 1;
      }
    }
    return true;
  }
  
  public String a()
  {
    if (a == null) {
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(a[0]);
    localStringBuilder.append(".");
    localStringBuilder.append(a[1]);
    localStringBuilder.append(".");
    localStringBuilder.append(a[2]);
    return localStringBuilder.toString();
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof Label)) {
      return false;
    }
    Label localLabel = (Label)paramObject;
    if (h == null) {
      return matches(c, a, c, a);
    }
    return paramObject.hashCode() == hashCode();
  }
  
  public int hashCode()
  {
    return c.hashCode();
  }
  
  public String toString()
  {
    if (a == null) {
      return c;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(c);
    localStringBuilder.append("; specification-version=");
    localStringBuilder.append(a());
    String str;
    if (f) {
      str = "";
    } else {
      str = " (UNRESOLVED)";
    }
    localStringBuilder.append(str);
    return localStringBuilder.toString();
  }
}
