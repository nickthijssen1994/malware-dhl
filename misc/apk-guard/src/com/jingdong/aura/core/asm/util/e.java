package com.jingdong.aura.core.asm.util;

import android.text.TextUtils;
import com.jingdong.aura.core.asm.asm.a;
import com.jingdong.aura.core.reflection.ClassWriter;
import com.jingdong.aura.core.reflection.Hack.e;
import dalvik.system.BaseDexClassLoader;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.util.List;
import org.osgi.framework.BundleException;

public class e
  extends DexClassLoader
  implements c
{
  private String b;
  private com.jingdong.aura.core.asm.i c;
  
  public e(com.jingdong.aura.core.asm.i paramI)
  {
    this(paramI.p().b().l().getAbsolutePath(), paramI.p().b().d().getAbsolutePath(), paramI.d(), Object.class.getClassLoader());
    b = paramI.d();
    c = paramI;
  }
  
  private e(String paramString1, String paramString2, String paramString3, ClassLoader paramClassLoader)
  {
    super(paramString1, paramString2, paramString3, Object.class.getClassLoader());
  }
  
  public com.jingdong.aura.core.asm.i a()
  {
    return c;
  }
  
  protected Class findClass(String paramString)
  {
    return super.findClass(paramString);
  }
  
  public String findLibrary(String paramString)
  {
    Object localObject = super.findLibrary(paramString);
    if ((!TextUtils.isEmpty((CharSequence)localObject)) && (new File((String)localObject).exists())) {
      return localObject;
    }
    localObject = new File(b, System.mapLibraryName(paramString));
    if (((File)localObject).exists()) {
      return ((File)localObject).getAbsolutePath();
    }
    localObject = ClassWriter.o;
    try
    {
      ClassLoader localClassLoader = com.jingdong.aura.core.asm.http.f.d();
      paramString = ((Hack.e)localObject).a(localClassLoader, new Object[] { paramString });
      return (String)paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  protected Class loadClass(String paramString, boolean paramBoolean)
  {
    try
    {
      localObject1 = super.loadClass(paramString, paramBoolean);
    }
    catch (Exception localException2)
    {
      Object localObject1;
      Object localObject2;
      List localList;
      int i;
      label157:
      for (;;) {}
    }
    localObject1 = null;
    if (localObject1 != null) {
      return localObject1;
    }
    localObject2 = localObject1;
    if (c != null)
    {
      localList = com.jingdong.aura.core.data.f.get().get(c.n());
      localObject2 = localObject1;
      if (localList != null)
      {
        localObject2 = localObject1;
        if (localList.size() > 0)
        {
          i = 0;
          for (;;)
          {
            localObject2 = localObject1;
            if (i >= localList.size()) {
              break;
            }
            for (;;)
            {
              try
              {
                localObject2 = localList.get(i);
                localObject2 = (String)localObject2;
                localObject2 = com.jingdong.aura.core.asm.http.f.d((String)localObject2);
                localObject2 = (com.jingdong.aura.core.asm.i)localObject2;
                if (localObject2 != null) {}
              }
              catch (Exception localException3)
              {
                continue;
              }
              try
              {
                try
                {
                  ((com.jingdong.aura.core.asm.i)localObject2).add();
                }
                catch (BundleException localBundleException) {}
              }
              catch (Exception localException4) {}
            }
            try
            {
              localBundleException.printStackTrace();
              localObject2 = ((com.jingdong.aura.core.asm.i)localObject2).get().loadClass(paramString);
              localObject1 = localObject2;
            }
            catch (Exception localException5)
            {
              break label157;
            }
            i += 1;
          }
        }
      }
    }
    if (localObject2 != null) {
      return localObject2;
    }
    try
    {
      localObject1 = com.jingdong.aura.core.asm.http.f.d().loadClass(paramString);
      if (localObject1 != null) {
        return localObject1;
      }
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Can't find class ");
      ((StringBuilder)localObject1).append(paramString);
      ((StringBuilder)localObject1).append(" in BundleClassLoaderV2: ");
      ((StringBuilder)localObject1).append(this);
      throw new ClassNotFoundException(((StringBuilder)localObject1).toString());
    }
    catch (Exception localException1)
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Can't find class ");
      ((StringBuilder)localObject2).append(paramString);
      ((StringBuilder)localObject2).append(" in BundleClassLoaderV2: ");
      ((StringBuilder)localObject2).append(this);
      throw new ClassNotFoundException(((StringBuilder)localObject2).toString(), localException1);
    }
  }
}
