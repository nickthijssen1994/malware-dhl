package com.jingdong.aura.core.asm.asm;

import com.jingdong.aura.core.util.Attribute;
import com.jingdong.aura.core.util.Log;
import com.jingdong.aura.wrapper.AuraConfig;
import java.io.File;
import java.util.SortedMap;
import java.util.TreeMap;

public class Item
{
  private static final String[] c = { "com.jd.lib.productdetail", "com.jd.lib.coupon", "com.jd.lib.mycoupon", "com.jd.lib.ordercenter", "com.jd.lib.live", "com.jd.mobiledd.sdk", "com.jd.lib.personal", "com.jd.lib.cart", "com.jd.lib.login", "com.jd.lib.settlement", "com.jd.lib.push", "com.jd.lib.category" };
  
  public static String a(File paramFile, long paramLong)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("package_");
    localStringBuilder.append(String.valueOf(paramLong));
    return read(new File(paramFile, localStringBuilder.toString()));
  }
  
  public static boolean a(long paramLong1, String paramString1, long paramLong2, String paramString2)
  {
    if (paramLong1 > paramLong2) {
      return true;
    }
    if (paramLong1 == paramLong2)
    {
      if (Attribute.a(paramString1)) {
        return false;
      }
      if (Attribute.a(paramString2)) {
        return true;
      }
      if (!paramString1.equals(paramString2)) {
        return true;
      }
    }
    return false;
  }
  
  public static boolean a(File paramFile)
  {
    if (paramFile != null)
    {
      if (!paramFile.exists()) {
        return false;
      }
      paramFile = paramFile.listFiles();
      if (paramFile == null) {
        return false;
      }
      int j = paramFile.length;
      int i = 0;
      File localFile;
      while (i < j)
      {
        localFile = paramFile[i];
        if ((localFile.isDirectory()) && (localFile.getName().startsWith("com.")) && (delete(localFile))) {
          return true;
        }
        i += 1;
      }
      int m = paramFile.length;
      j = 0;
      for (int k = 0; j < m; k = i)
      {
        localFile = paramFile[j];
        String str = localFile.getName();
        i = k;
        if (localFile.isDirectory())
        {
          i = k;
          if (str.startsWith("com."))
          {
            i = k;
            if (com.jingdong.aura.core.asm.http.f.d(str) == null)
            {
              i = k;
              if (a(str))
              {
                Log.d(localFile);
                k += 1;
                i = k;
                if (k >= 2) {
                  return true;
                }
              }
            }
          }
        }
        j += 1;
      }
      if (k > 0) {
        return true;
      }
    }
    return false;
  }
  
  private static boolean a(String paramString)
  {
    if (Attribute.a(paramString)) {
      return false;
    }
    String[] arrayOfString = AuraConfig.AUTO;
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      if (paramString.equals(arrayOfString[i])) {
        return false;
      }
      i += 1;
    }
    if (com.jingdong.aura.core.data.f.get().c(paramString)) {
      return false;
    }
    arrayOfString = c;
    j = arrayOfString.length;
    i = 0;
    while (i < j)
    {
      if (paramString.equals(arrayOfString[i])) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  private static boolean delete(File paramFile)
  {
    int j = 0;
    if (paramFile != null)
    {
      if (!paramFile.exists()) {
        return false;
      }
      paramFile = paramFile.listFiles();
      if (paramFile == null) {
        return false;
      }
      int k = paramFile.length;
      long l1 = -1L;
      int i = 0;
      File localFile;
      while (i < k)
      {
        localFile = paramFile[i];
        long l2 = l1;
        if (localFile.getName().startsWith("package"))
        {
          long l3 = Long.parseLong(Attribute.getKey(localFile.getName(), "_"));
          l2 = l1;
          if (l3 > l1) {
            l2 = l3;
          }
        }
        i += 1;
        l1 = l2;
      }
      if (-1L == l1) {
        return false;
      }
      k = paramFile.length;
      boolean bool1 = false;
      i = j;
      while (i < k)
      {
        localFile = paramFile[i];
        boolean bool2 = bool1;
        if (localFile.getName().startsWith("package"))
        {
          bool2 = bool1;
          if (Long.parseLong(Attribute.getKey(localFile.getName(), "_")) != l1)
          {
            Log.d(localFile);
            bool2 = true;
          }
        }
        i += 1;
        bool1 = bool2;
      }
      return bool1;
    }
    return false;
  }
  
  public static SortedMap doInBackground(File paramFile)
  {
    if (paramFile != null)
    {
      if (!paramFile.exists()) {
        return null;
      }
      TreeMap localTreeMap = new TreeMap();
      paramFile = paramFile.listFiles();
      if (paramFile == null) {
        return localTreeMap;
      }
      int j = paramFile.length;
      int i = 0;
      while (i < j)
      {
        Object localObject = paramFile[i];
        if (localObject.getName().startsWith("package"))
        {
          long l = Long.parseLong(Attribute.getKey(localObject.getName(), "_"));
          if (l > 0L) {
            localTreeMap.put(Long.valueOf(l), null);
          }
        }
        i += 1;
      }
      return localTreeMap;
    }
    return null;
  }
  
  public static long getValue(File paramFile)
  {
    if (paramFile != null)
    {
      if (!paramFile.exists()) {
        return 0L;
      }
      long l1 = -1L;
      paramFile = paramFile.listFiles();
      if (paramFile == null) {
        return 0L;
      }
      int j = paramFile.length;
      int i = 0;
      while (i < j)
      {
        Object localObject = paramFile[i];
        long l2 = l1;
        if (localObject.getName().startsWith("package"))
        {
          long l3 = Long.parseLong(Attribute.getKey(localObject.getName(), "_"));
          l2 = l1;
          if (l3 > l1) {
            l2 = l3;
          }
        }
        i += 1;
        l1 = l2;
      }
      return l1;
    }
    return 0L;
  }
  
  /* Error */
  private static String read(File paramFile)
  {
    // Byte code:
    //   0: new 56	java/io/File
    //   3: dup
    //   4: aload_0
    //   5: ldc -93
    //   7: invokespecial 63	java/io/File:<init>	(Ljava/io/File;Ljava/lang/String;)V
    //   10: astore_2
    //   11: aload_2
    //   12: invokevirtual 82	java/io/File:exists	()Z
    //   15: istore_1
    //   16: aconst_null
    //   17: astore_0
    //   18: iload_1
    //   19: ifeq +107 -> 126
    //   22: new 165	java/io/DataInputStream
    //   25: dup
    //   26: new 167	java/io/FileInputStream
    //   29: dup
    //   30: aload_2
    //   31: invokespecial 169	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   34: invokespecial 172	java/io/DataInputStream:<init>	(Ljava/io/InputStream;)V
    //   37: astore_2
    //   38: aload_2
    //   39: astore_0
    //   40: aload_2
    //   41: invokevirtual 175	java/io/DataInputStream:readUTF	()Ljava/lang/String;
    //   44: pop
    //   45: aload_2
    //   46: astore_0
    //   47: aload_2
    //   48: invokevirtual 175	java/io/DataInputStream:readUTF	()Ljava/lang/String;
    //   51: astore_3
    //   52: aload_2
    //   53: invokevirtual 178	java/io/DataInputStream:close	()V
    //   56: aload_3
    //   57: areturn
    //   58: astore_0
    //   59: aload_0
    //   60: invokevirtual 181	java/io/IOException:printStackTrace	()V
    //   63: aload_3
    //   64: areturn
    //   65: astore_3
    //   66: goto +14 -> 80
    //   69: astore_3
    //   70: aload_0
    //   71: astore_2
    //   72: aload_3
    //   73: astore_0
    //   74: goto +34 -> 108
    //   77: astore_3
    //   78: aconst_null
    //   79: astore_2
    //   80: aload_2
    //   81: astore_0
    //   82: aload_3
    //   83: invokevirtual 181	java/io/IOException:printStackTrace	()V
    //   86: aload_2
    //   87: ifnull +39 -> 126
    //   90: aload_2
    //   91: invokevirtual 178	java/io/DataInputStream:close	()V
    //   94: aconst_null
    //   95: areturn
    //   96: astore_0
    //   97: aload_0
    //   98: invokevirtual 181	java/io/IOException:printStackTrace	()V
    //   101: aconst_null
    //   102: areturn
    //   103: astore_3
    //   104: aload_0
    //   105: astore_2
    //   106: aload_3
    //   107: astore_0
    //   108: aload_2
    //   109: ifnull +15 -> 124
    //   112: aload_2
    //   113: invokevirtual 178	java/io/DataInputStream:close	()V
    //   116: goto +8 -> 124
    //   119: astore_2
    //   120: aload_2
    //   121: invokevirtual 181	java/io/IOException:printStackTrace	()V
    //   124: aload_0
    //   125: athrow
    //   126: aconst_null
    //   127: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	128	0	paramFile	File
    //   15	4	1	bool	boolean
    //   10	103	2	localObject	Object
    //   119	2	2	localIOException1	java.io.IOException
    //   51	13	3	str	String
    //   65	1	3	localIOException2	java.io.IOException
    //   69	4	3	localThrowable1	Throwable
    //   77	6	3	localIOException3	java.io.IOException
    //   103	4	3	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   52	56	58	java/io/IOException
    //   40	45	65	java/io/IOException
    //   47	52	65	java/io/IOException
    //   22	38	69	java/lang/Throwable
    //   22	38	77	java/io/IOException
    //   90	94	96	java/io/IOException
    //   40	45	103	java/lang/Throwable
    //   47	52	103	java/lang/Throwable
    //   82	86	103	java/lang/Throwable
    //   112	116	119	java/io/IOException
  }
}
