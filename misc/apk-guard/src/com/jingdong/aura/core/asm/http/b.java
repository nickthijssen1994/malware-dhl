package com.jingdong.aura.core.asm.http;

import com.jingdong.aura.core.asm.i;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.io.PrintStream;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import org.osgi.framework.BundleException;

final class b
  implements org.osgi.a.a.a, org.osgi.a.b.a, org.osgi.framework.a
{
  private static final StringBuffer b = Attribute.getInstance(com.jingdong.aura.core.b.b.e.class);
  private int a;
  private final org.osgi.framework.e[] colorSpaceDic;
  private final Dictionary<String, String> dictionary = new Hashtable();
  
  b()
  {
    dictionary.put("Bundle-Name", "System Bundle");
    dictionary.put("Bundle-Version", "1.2.36.15");
    dictionary.put("Bundle-Vendor", "Aura");
    com.jingdong.aura.core.asm.Frame localFrame = new com.jingdong.aura.core.asm.Frame(this, this, null, new String[] { org.osgi.a.b.a.class.getName(), org.osgi.a.a.a.class.getName() });
    com.jingdong.aura.core.util.Frame.get(f.getValue(), org.osgi.a.b.a.class.getName(), localFrame);
    com.jingdong.aura.core.util.Frame.get(f.getValue(), org.osgi.a.a.a.class.getName(), localFrame);
    f.getItem().add(localFrame);
    colorSpaceDic = ((org.osgi.framework.e[])new org.osgi.framework.e[] { localFrame });
  }
  
  public void a(int paramInt)
  {
    a = paramInt;
  }
  
  void a(org.osgi.framework.a[] paramArrayOfA, int paramInt, boolean paramBoolean)
  {
    if (f.m() != paramInt)
    {
      int i;
      if (paramInt > f.m()) {
        i = 1;
      } else {
        i = 0;
      }
      int j;
      if (i != 0) {
        j = paramInt - f.m();
      } else {
        j = f.m() - paramInt;
      }
      HashMap localHashMap = new HashMap(0);
      int k = 0;
      Object localObject1;
      int m;
      while (k < paramArrayOfA.length)
      {
        if ((paramArrayOfA[k] != f.j()) && ((paramBoolean) || (((i)paramArrayOfA[k]).j())))
        {
          localObject1 = (i)paramArrayOfA[k];
          if (i != 0) {
            m = ((i)localObject1).i() - f.m() - 1;
          } else {
            m = f.m() - ((i)localObject1).i();
          }
          if ((m >= 0) && (m < j)) {
            com.jingdong.aura.core.util.Frame.get(localHashMap, Integer.valueOf(m), localObject1);
          }
        }
        k += 1;
      }
      k = 0;
      while (k < j)
      {
        if (i != 0) {
          f.d(f.m() + 1);
        } else {
          f.d(f.m() - 1);
        }
        paramArrayOfA = (List)localHashMap.get(Integer.valueOf(k));
        if (paramArrayOfA != null)
        {
          paramArrayOfA = (i[])paramArrayOfA.toArray(new i[paramArrayOfA.size()]);
          m = 0;
          while (m < paramArrayOfA.length)
          {
            StringBuilder localStringBuilder;
            if (i != 0)
            {
              try
              {
                localObject1 = System.out;
                localStringBuilder = new StringBuilder();
                localStringBuilder.append("STARTING ");
                localStringBuilder.append(paramArrayOfA[m].n());
                ((PrintStream)localObject1).println(localStringBuilder.toString());
                paramArrayOfA[m].add();
              }
              catch (Throwable localThrowable)
              {
                localThrowable.printStackTrace();
                localThrowable.printStackTrace();
                f.f(2, f.j(), localThrowable);
              }
            }
            else if (paramArrayOfA[m].r() != 1)
            {
              Object localObject2 = System.out;
              localStringBuilder = new StringBuilder();
              localStringBuilder.append("STOPPING ");
              localStringBuilder.append(paramArrayOfA[m].n());
              ((PrintStream)localObject2).println(localStringBuilder.toString());
              localObject2 = paramArrayOfA[(paramArrayOfA.length - m - 1)];
              try
              {
                ((i)localObject2).a();
              }
              catch (BundleException localBundleException)
              {
                localBundleException.printStackTrace();
              }
            }
            m += 1;
          }
        }
        k += 1;
      }
      f.d(paramInt);
    }
  }
  
  public void l() {}
  
  public void m()
  {
    throw ((Throwable)new BundleException("Cannot uninstall the System Bundle"));
  }
  
  public String n()
  {
    return "System Bundle";
  }
  
  public String toString()
  {
    return "SystemBundle";
  }
}
