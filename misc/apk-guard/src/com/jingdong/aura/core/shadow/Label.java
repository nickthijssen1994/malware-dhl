package com.jingdong.aura.core.shadow;

import android.content.ComponentName;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.ComponentInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.text.TextUtils;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.b.a;
import com.jingdong.aura.core.runing.Item;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class Label
{
  private static HashMap<String, String> a = new HashMap();
  private static HashMap<String, List<String>> b = new HashMap();
  private static HashMap<String, String> c = new HashMap();
  
  public static void b(String paramString)
  {
    String str = (String)c.get(paramString);
    if (str != null)
    {
      c.remove(paramString);
      a.remove(str);
    }
  }
  
  public static String doInBackground(ActivityInfo paramActivityInfo)
  {
    String str1 = (String)c.get(name);
    if (str1 != null) {
      return str1;
    }
    Object localObject2 = getName(processName);
    String str2 = get(taskAffinity);
    Object localObject1 = new StringBuilder("com.jingdong.aura.shadow");
    if (!TextUtils.isEmpty((CharSequence)localObject2))
    {
      ((StringBuilder)localObject1).append("_");
      ((StringBuilder)localObject1).append((String)localObject2);
    }
    if (!TextUtils.isEmpty(str2))
    {
      ((StringBuilder)localObject1).append("_");
      ((StringBuilder)localObject1).append(str2);
    }
    str2 = getCode(launchMode);
    if (!TextUtils.isEmpty(str2))
    {
      ((StringBuilder)localObject1).append("_");
      ((StringBuilder)localObject1).append(str2);
    }
    ((StringBuilder)localObject1).append("_Activity");
    Object localObject3 = ((StringBuilder)localObject1).toString();
    localObject2 = (List)b.get(localObject3);
    localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject2 = doInBackground((String)localObject3);
      localObject1 = localObject2;
      b.put(localObject3, localObject2);
    }
    localObject3 = ((List)localObject1).iterator();
    do
    {
      localObject2 = str1;
      if (!((Iterator)localObject3).hasNext()) {
        break;
      }
      localObject2 = (String)((Iterator)localObject3).next();
    } while (a.get(localObject2) != null);
    if (localObject2 == null)
    {
      paramActivityInfo = new StringBuilder();
      localObject1 = ((List)localObject1).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (String)((Iterator)localObject1).next();
        Attribute.getInstance(a.class).e(String.format("shadow info:[%s -> %s]", new Object[] { a.get(localObject2), localObject2 }));
        paramActivityInfo.append(String.format("shadow info:[%s -> %s]\n", new Object[] { a.get(localObject2), localObject2 }));
      }
      MethodWriter.a("shadow_drain", "com.jingdong.aura", 0, paramActivityInfo.toString(), "ShadowWrapper");
      return "com.jingdong.aura.shadow_std_Activity0";
    }
    if (!str2.equals("std"))
    {
      a.put(localObject2, name);
      c.put(name, localObject2);
    }
    return localObject2;
  }
  
  private static List doInBackground(String paramString)
  {
    localArrayList = new ArrayList();
    Object localObject1 = Item.this$0.getPackageName();
    Object localObject2 = Item.this$0;
    try
    {
      localObject1 = ((ContextWrapper)localObject2).getPackageManager().getPackageInfo((String)localObject1, 1);
      int i = 0;
      while (i < activities.length)
      {
        localObject2 = activities[i];
        String str = name;
        boolean bool = str.startsWith(paramString);
        if (bool)
        {
          localObject2 = name;
          localArrayList.add(localObject2);
        }
        i += 1;
      }
      return localArrayList;
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static Intent execute(Intent paramIntent)
  {
    if (paramIntent.getComponent().getClassName().startsWith("com.jingdong.aura.shadow")) {
      return (Intent)paramIntent.getParcelableExtra("aura_shadow_origin_intent");
    }
    return null;
  }
  
  private static String get(String paramString)
  {
    if (paramString.equals(this$0getApplicationInfotaskAffinity)) {
      return null;
    }
    return paramString.replace(".", "_");
  }
  
  private static String getCode(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "std";
    case 3: 
      return "sins";
    case 2: 
      return "stk";
    case 1: 
      return "stp";
    }
    return "std";
  }
  
  private static String getName(String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = Item.this$0.getPackageName();
    }
    if (str.equals(Item.this$0.getPackageName())) {
      return null;
    }
    paramString = new StringBuilder();
    paramString.append(Item.this$0.getPackageName());
    paramString.append(":");
    paramString = paramString.toString();
    if (str.startsWith(paramString)) {
      return str.substring(paramString.length());
    }
    return str.replace(".", "_");
  }
  
  public static Intent newTask(Intent paramIntent)
  {
    return (Intent)paramIntent.getParcelableExtra("aura_bridge_to_intent");
  }
  
  public static Intent startActivity(Intent paramIntent)
  {
    ComponentName localComponentName = paramIntent.getComponent();
    if (localComponentName != null)
    {
      Intent localIntent = new Intent();
      localIntent.addFlags(paramIntent.getFlags());
      localIntent.setComponent(new ComponentName(localComponentName.getPackageName(), "com.jingdong.aura.core.shadow.BridgeActivity"));
      localIntent.putExtra("aura_bridge_to_intent", paramIntent);
      return localIntent;
    }
    return paramIntent;
  }
  
  public static Intent startActivity(Intent paramIntent, String paramString)
  {
    ComponentName localComponentName = paramIntent.getComponent();
    if (localComponentName != null)
    {
      Intent localIntent = new Intent();
      localIntent.addFlags(paramIntent.getFlags());
      localIntent.setComponent(new ComponentName(localComponentName.getPackageName(), paramString));
      localIntent.putExtra("aura_shadow_origin_intent", paramIntent);
      return localIntent;
    }
    return paramIntent;
  }
}
