package com.jingdong.aura.core.data;

import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.os.Build.VERSION;
import android.text.TextUtils;
import com.jingdong.aura.core.a.d;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.runing.Item;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class ClassWriter
{
  private static List<ZipFile> a = new ArrayList();
  private static StringBuffer b = Attribute.getInstance(d.class);
  private static List<String> p;
  private static List<String> q;
  private static String[] s = { "arm64-v8a", "armeabi-v7a", "armeabi" };
  
  static
  {
    p = new ArrayList();
  }
  
  public ClassWriter() {}
  
  public static String a()
  {
    init();
    Object localObject = q;
    if ((localObject != null) && (!((List)localObject).isEmpty()))
    {
      localObject = new StringBuilder("internalBundles[");
      Iterator localIterator = q.iterator();
      while (localIterator.hasNext())
      {
        ((StringBuilder)localObject).append((String)localIterator.next());
        ((StringBuilder)localObject).append(";");
      }
      ((StringBuilder)localObject).append("]");
      return ((StringBuilder)localObject).toString();
    }
    return "";
  }
  
  public static boolean a(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    init();
    List localList = q;
    return (localList != null) && (localList.contains(paramString));
  }
  
  public static String c()
  {
    init();
    Object localObject = p;
    if ((localObject != null) && (!((List)localObject).isEmpty()))
    {
      localObject = new StringBuilder("internalBundleSoPath[");
      Iterator localIterator = p.iterator();
      while (localIterator.hasNext())
      {
        ((StringBuilder)localObject).append((String)localIterator.next());
        ((StringBuilder)localObject).append(";");
      }
      ((StringBuilder)localObject).append("]");
      return ((StringBuilder)localObject).toString();
    }
    return "";
  }
  
  public static InputStream get(String paramString)
  {
    Iterator localIterator = a.iterator();
    while (localIterator.hasNext())
    {
      ZipFile localZipFile = (ZipFile)localIterator.next();
      String[] arrayOfString = s;
      int j = arrayOfString.length;
      int i = 0;
      while (i < j)
      {
        String str = arrayOfString[i];
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("lib");
        localStringBuilder.append(File.separator);
        localStringBuilder.append(str);
        localStringBuilder.append(File.separator);
        localStringBuilder.append(paramString);
        str = localStringBuilder.toString();
        if (localZipFile.getEntry(str) != null) {
          return localZipFile.getInputStream(localZipFile.getEntry(str));
        }
        i += 1;
      }
    }
    return null;
  }
  
  public static String get()
  {
    init();
    Object localObject = a;
    if ((localObject != null) && (!((List)localObject).isEmpty()))
    {
      localObject = new StringBuilder("internalSourceApks[");
      Iterator localIterator = a.iterator();
      while (localIterator.hasNext())
      {
        ZipFile localZipFile = (ZipFile)localIterator.next();
        ((StringBuilder)localObject).append(localZipFile.getName());
        ((StringBuilder)localObject).append(":");
        ((StringBuilder)localObject).append(new File(localZipFile.getName()).length());
        ((StringBuilder)localObject).append(";");
      }
      ((StringBuilder)localObject).append("]");
      return ((StringBuilder)localObject).toString();
    }
    return "";
  }
  
  public static void init()
  {
    try
    {
      int i;
      if (q != null)
      {
        i = q.size();
        if (i > 0) {
          return;
        }
      }
      ArrayList localArrayList1 = new ArrayList();
      ArrayList localArrayList2 = new ArrayList();
      try
      {
        Object localObject1 = new ArrayList();
        Object localObject2 = Item.this$0;
        localObject2 = ((ContextWrapper)localObject2).getApplicationInfo();
        localObject2 = sourceDir;
        ((List)localObject1).add(localObject2);
        if (Build.VERSION.SDK_INT >= 21)
        {
          localObject2 = Item.this$0;
          localObject2 = ((ContextWrapper)localObject2).getApplicationInfo();
          localObject2 = splitSourceDirs;
          if ((localObject2 != null) && (localObject2.length > 0)) {
            ((List)localObject1).addAll(Arrays.asList((Object[])localObject2));
          }
        }
        localObject1 = ((List)localObject1).iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject1).hasNext();
          if (!bool) {
            break;
          }
          localObject2 = ((Iterator)localObject1).next();
          localObject2 = (String)localObject2;
          localObject2 = new ZipFile((String)localObject2);
          Enumeration localEnumeration = ((ZipFile)localObject2).entries();
          for (;;)
          {
            bool = localEnumeration.hasMoreElements();
            if (!bool) {
              break;
            }
            Object localObject3 = localEnumeration.nextElement();
            localObject3 = (ZipEntry)localObject3;
            localObject3 = ((ZipEntry)localObject3).getName();
            String[] arrayOfString = s;
            int j = arrayOfString.length;
            i = 0;
            while (i < j)
            {
              Object localObject4 = arrayOfString[i];
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("lib/");
              localStringBuilder.append((String)localObject4);
              localStringBuilder.append("/libcom.");
              bool = ((String)localObject3).startsWith(localStringBuilder.toString());
              if (bool)
              {
                bool = ((String)localObject3).endsWith(".so");
                if (bool)
                {
                  localObject4 = p;
                  ((List)localObject4).add(localObject3);
                  localObject4 = put((String)localObject3);
                  bool = TextUtils.isEmpty((CharSequence)localObject4);
                  if (!bool) {
                    localArrayList1.add(localObject4);
                  }
                }
              }
              i += 1;
            }
          }
          localArrayList2.add(localObject2);
        }
        q = localArrayList1;
        a = localArrayList2;
      }
      catch (Exception localException)
      {
        b.i("Exception while get bundles in assets or lib", localException);
        MethodWriter.d("resolveInternalBundles", "resolveInternalBundles failed!", "resolveInternalBundles", localException);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private static String put(String paramString)
  {
    return paramString.substring(paramString.lastIndexOf(File.separatorChar) + 4, paramString.lastIndexOf(".so"));
  }
}
