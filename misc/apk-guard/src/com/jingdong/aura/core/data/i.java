package com.jingdong.aura.core.data;

import android.content.Context;
import android.content.res.AssetManager;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class i
{
  public static List a(InputStream paramInputStream)
  {
    if (paramInputStream != null) {
      try
      {
        byte[] arrayOfByte3 = new byte[paramInputStream.available()];
        paramInputStream.read(arrayOfByte3);
        byte[] arrayOfByte1 = arrayOfByte3;
        if (paramInputStream != null)
        {
          try
          {
            paramInputStream.close();
            arrayOfByte1 = arrayOfByte3;
          }
          catch (IOException paramInputStream)
          {
            paramInputStream.printStackTrace();
            arrayOfByte1 = arrayOfByte3;
          }
          arrayOfByte2 = null;
        }
      }
      catch (Throwable localThrowable)
      {
        if (paramInputStream != null) {
          try
          {
            paramInputStream.close();
          }
          catch (IOException paramInputStream)
          {
            paramInputStream.printStackTrace();
          }
        }
        throw localThrowable;
      }
    }
    byte[] arrayOfByte2;
    return a(arrayOfByte2);
  }
  
  static List a(List paramList1, List paramList2)
  {
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    paramList1 = paramList1.iterator();
    int i;
    Object localObject1;
    Object localObject2;
    for (;;)
    {
      boolean bool = paramList1.hasNext();
      i = 0;
      if (!bool) {
        break;
      }
      localObject1 = (h)paramList1.next();
      localObject2 = paramList2.iterator();
      while (((Iterator)localObject2).hasNext())
      {
        h localH = (h)((Iterator)localObject2).next();
        if (a.equals(a))
        {
          if (i >= i) {
            localArrayList1.add(localObject1);
          } else {
            localArrayList1.add(localH);
          }
          i = 1;
        }
      }
      if (i == 0) {
        localArrayList1.add(localObject1);
      }
    }
    localArrayList2.addAll(localArrayList1);
    paramList1 = paramList2.iterator();
    while (paramList1.hasNext())
    {
      paramList2 = (h)paramList1.next();
      localObject1 = localArrayList1.iterator();
      i = 0;
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (h)((Iterator)localObject1).next();
        if (a.equals(a)) {
          i = 1;
        }
      }
      if (i == 0) {
        localArrayList2.add(paramList2);
      }
    }
    return localArrayList2;
  }
  
  private static List a(byte[] paramArrayOfByte)
  {
    ArrayList localArrayList = new ArrayList();
    paramArrayOfByte = new JSONArray(new String(paramArrayOfByte));
    int i = 0;
    while (i < paramArrayOfByte.length())
    {
      JSONObject localJSONObject = paramArrayOfByte.optJSONObject(i);
      h localH = new h();
      a = localJSONObject.optString("pkgName");
      v = localJSONObject.optString("verName");
      i = localJSONObject.optLong("verCode");
      s = localJSONObject.optBoolean("hasSO");
      h = localJSONObject.optString("app", null);
      k = localJSONObject.optString("md5", null);
      l = localJSONObject.optString("md5_asec", null);
      c = localJSONObject.optLong("size");
      d = localJSONObject.optInt("bundleType");
      e = localJSONObject.optString("downloadUrl");
      b = new ArrayList();
      add(b, localJSONObject, "activity");
      add(b, localJSONObject, "receiver");
      add(b, localJSONObject, "service");
      add(b, localJSONObject, "provider");
      p = new ArrayList();
      add(p, localJSONObject, "receiver");
      r = new ArrayList();
      add(r, localJSONObject, "activity");
      q = new ArrayList();
      add(q, localJSONObject, "service");
      g = new ArrayList();
      add(g, localJSONObject, "provider");
      f = new ArrayList();
      add(f, localJSONObject, "manualComponents");
      n = new ArrayList();
      add(n, localJSONObject, "dependency");
      j = new ArrayList();
      add(j, localJSONObject, "auraDependentSo");
      localArrayList.add(localH);
      i += 1;
    }
    return localArrayList;
  }
  
  public static void a(Context paramContext, boolean paramBoolean)
  {
    ArrayList localArrayList2 = null;
    try
    {
      paramContext = a(paramContext.getAssets().open("aura.json"));
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      paramContext = null;
    }
    f.get().b(paramContext);
    if (paramBoolean)
    {
      f.get().add(paramContext);
      return;
    }
    ArrayList localArrayList1;
    try
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append(com.jingdong.aura.core.util.File.get().getAbsolutePath());
      ((StringBuilder)localObject).append("/aura/updateAura.json");
      java.io.File localFile = new java.io.File(((StringBuilder)localObject).toString());
      paramBoolean = localFile.exists();
      localObject = localArrayList2;
      if (paramBoolean) {
        localObject = a(new FileInputStream(localFile));
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      localArrayList1 = localArrayList2;
    }
    localArrayList2 = new ArrayList();
    if ((localArrayList1 != null) && (localArrayList1.size() > 0))
    {
      if ((paramContext != null) && (paramContext.size() > 0)) {
        localArrayList2.addAll(a(paramContext, localArrayList1));
      } else {
        localArrayList2.addAll(localArrayList1);
      }
    }
    else if ((paramContext != null) && (paramContext.size() > 0)) {
      localArrayList2.addAll(paramContext);
    }
    if (localArrayList2.size() > 0) {
      f.get().add(localArrayList2);
    }
  }
  
  private static void add(List paramList, JSONObject paramJSONObject, String paramString)
  {
    paramJSONObject = paramJSONObject.optJSONArray(paramString);
    if (paramJSONObject == null) {
      return;
    }
    int i = 0;
    while (i < paramJSONObject.length())
    {
      try
      {
        paramList.add(paramJSONObject.getString(i));
      }
      catch (JSONException paramString)
      {
        paramString.printStackTrace();
      }
      i += 1;
    }
  }
}
