package com.jingdong.aura.core.data;

import android.text.TextUtils;
import android.util.Log;
import com.jingdong.aura.core.a.a;
import com.jingdong.aura.core.a.a.a;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class f
{
  private static f c;
  private List<a.a> a;
  private List<a.a> f;
  private final String t = a.class.getSimpleName();
  
  private f() {}
  
  private void a(List paramList)
  {
    if (paramList != null) {
      try
      {
        boolean bool = paramList.isEmpty();
        if (bool) {
          return;
        }
        Object localObject1 = new JSONArray();
        paramList = paramList.iterator();
        for (;;)
        {
          bool = paramList.hasNext();
          if (!bool) {
            break;
          }
          Object localObject2 = paramList.next();
          Object localObject3 = (h)localObject2;
          localObject2 = new JSONObject();
          Object localObject4 = a;
          ((JSONObject)localObject2).put("pkgName", localObject4);
          localObject4 = v;
          ((JSONObject)localObject2).put("verName", localObject4);
          long l = i;
          ((JSONObject)localObject2).put("verCode", l);
          localObject4 = h;
          ((JSONObject)localObject2).put("app", localObject4);
          int i = d;
          ((JSONObject)localObject2).put("bundleType", i);
          l = c;
          ((JSONObject)localObject2).put("size", l);
          bool = s;
          ((JSONObject)localObject2).put("hasSO", bool);
          localObject4 = k;
          ((JSONObject)localObject2).put("md5", localObject4);
          localObject4 = e;
          bool = TextUtils.isEmpty((CharSequence)localObject4);
          if (!bool)
          {
            localObject4 = e;
            ((JSONObject)localObject2).put("downloadUrl", localObject4);
          }
          localObject4 = r;
          add((JSONObject)localObject2, (List)localObject4, "activity");
          localObject4 = q;
          add((JSONObject)localObject2, (List)localObject4, "service");
          localObject4 = g;
          add((JSONObject)localObject2, (List)localObject4, "provider");
          localObject4 = p;
          add((JSONObject)localObject2, (List)localObject4, "receiver");
          localObject4 = f;
          add((JSONObject)localObject2, (List)localObject4, "manualComponents");
          localObject4 = n;
          add((JSONObject)localObject2, (List)localObject4, "dependency");
          localObject3 = j;
          add((JSONObject)localObject2, (List)localObject3, "auraDependentSo");
          ((JSONArray)localObject1).put(localObject2);
        }
        paramList = new StringBuilder();
        paramList.append(com.jingdong.aura.core.util.File.get().getAbsolutePath());
        paramList.append("/aura/updateAura.json");
        paramList = paramList.toString();
        localObject1 = ((JSONArray)localObject1).toString();
        bool = TextUtils.isEmpty((CharSequence)localObject1);
        if (!bool)
        {
          localObject1 = new ByteArrayInputStream(((String)localObject1).getBytes());
          com.jingdong.aura.core.util.File.read((InputStream)localObject1, new java.io.File(paramList));
          return;
        }
      }
      catch (Exception paramList)
      {
        paramList.printStackTrace();
      }
    }
  }
  
  private static void add(JSONObject paramJSONObject, List paramList, String paramString)
  {
    if ((paramJSONObject != null) && (!TextUtils.isEmpty(paramString)))
    {
      if (paramList == null) {
        return;
      }
      JSONArray localJSONArray = new JSONArray();
      paramList = paramList.iterator();
      while (paramList.hasNext()) {
        localJSONArray.put((String)paramList.next());
      }
      paramJSONObject.put(paramString, localJSONArray);
    }
  }
  
  /* Error */
  public static f get()
  {
    // Byte code:
    //   0: ldc 20
    //   2: monitorenter
    //   3: ldc 20
    //   5: monitorenter
    //   6: getstatic 212	com/jingdong/aura/core/data/f:c	Lcom/jingdong/aura/core/data/f;
    //   9: ifnonnull +13 -> 22
    //   12: new 2	com/jingdong/aura/core/data/f
    //   15: dup
    //   16: invokespecial 213	com/jingdong/aura/core/data/f:<init>	()V
    //   19: putstatic 212	com/jingdong/aura/core/data/f:c	Lcom/jingdong/aura/core/data/f;
    //   22: getstatic 212	com/jingdong/aura/core/data/f:c	Lcom/jingdong/aura/core/data/f;
    //   25: astore_0
    //   26: ldc 20
    //   28: monitorexit
    //   29: ldc 20
    //   31: monitorexit
    //   32: aload_0
    //   33: areturn
    //   34: astore_0
    //   35: ldc 20
    //   37: monitorexit
    //   38: aload_0
    //   39: athrow
    //   40: astore_0
    //   41: ldc 20
    //   43: monitorexit
    //   44: aload_0
    //   45: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   25	8	0	localF	f
    //   34	5	0	localThrowable1	Throwable
    //   40	5	0	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   6	22	34	java/lang/Throwable
    //   22	29	34	java/lang/Throwable
    //   35	38	34	java/lang/Throwable
    //   3	6	40	java/lang/Throwable
    //   38	40	40	java/lang/Throwable
  }
  
  public h a(List paramList, String paramString)
  {
    if (paramList != null) {}
    for (;;)
    {
      int i;
      try
      {
        if (!paramList.isEmpty()) {
          break label81;
        }
      }
      catch (Throwable paramList)
      {
        h localH;
        boolean bool;
        throw paramList;
      }
      if (i < paramList.size())
      {
        localH = (h)paramList.get(i);
        bool = a.equals(paramString);
        if (bool) {
          return localH;
        }
        i += 1;
      }
      else
      {
        return null;
        return null;
        label81:
        i = 0;
      }
    }
  }
  
  public String a(String paramString)
  {
    try
    {
      if (a != null)
      {
        int i = a.size();
        if (i != 0)
        {
          if (paramString == null) {
            return null;
          }
          h localH;
          Iterator localIterator2;
          do
          {
            Iterator localIterator1 = a.iterator();
            while (!localIterator2.hasNext())
            {
              if (!localIterator1.hasNext()) {
                break;
              }
              localH = (h)localIterator1.next();
              localIterator2 = b.iterator();
              while (localIterator2.hasNext()) {
                if (((String)localIterator2.next()).equals(paramString))
                {
                  paramString = a;
                  return paramString;
                }
              }
              localIterator2 = f.iterator();
            }
          } while (!paramString.equals((String)localIterator2.next()));
          paramString = a;
          return paramString;
          return null;
        }
      }
      return null;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public List a()
  {
    Object localObject1 = this;
    try
    {
      Object localObject2 = f;
      f localF = this;
      if (localObject2 != null)
      {
        localObject1 = localF;
        localObject2 = f;
        localObject1 = localF;
        if (!((List)localObject2).isEmpty())
        {
          localObject1 = localF;
          localObject2 = new ArrayList();
          localObject1 = localF;
          Object localObject3 = f;
          localObject1 = localF;
          localObject3 = ((List)localObject3).iterator();
          for (;;)
          {
            localObject1 = localF;
            if (!((Iterator)localObject3).hasNext()) {
              break;
            }
            localObject1 = localF;
            h localH = (h)((Iterator)localObject3).next();
            localObject1 = localF;
            if (d == 2)
            {
              localObject1 = localF;
              HashMap localHashMap = new HashMap();
              localObject1 = localF;
              localHashMap.put("bundleName", a);
              localObject1 = localF;
              if (!TextUtils.isEmpty(l))
              {
                localObject1 = localF;
                localHashMap.put("md5", l);
              }
              else
              {
                localObject1 = localF;
                localHashMap.put("md5", k);
              }
              localObject1 = localF;
              StringBuilder localStringBuilder = new StringBuilder();
              localObject1 = localF;
              localStringBuilder.append(c);
              localObject1 = localF;
              localStringBuilder.append("");
              localObject1 = localF;
              localHashMap.put("size", localStringBuilder.toString());
              localObject1 = localF;
              localStringBuilder = new StringBuilder();
              localObject1 = localF;
              localStringBuilder.append(i);
              localObject1 = localF;
              localStringBuilder.append("");
              localObject1 = localF;
              localHashMap.put("versionCode", localStringBuilder.toString());
              localObject1 = localF;
              localHashMap.put("downloadUrl", e);
              localObject1 = localF;
              ((List)localObject2).add(localHashMap);
            }
          }
          return localObject2;
        }
      }
      return null;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void a(h paramH)
  {
    if (paramH == null) {
      return;
    }
    try
    {
      Object localObject2 = get().getItem();
      Object localObject1 = localObject2;
      if (localObject2 != null)
      {
        if (com.jingdong.aura.core.asm.http.f.d(a) != null) {
          localObject1 = new ArrayList((Collection)localObject2);
        }
        localObject2 = a;
        localObject2 = a((List)localObject1, (String)localObject2);
        if (localObject2 != null)
        {
          if (i > i)
          {
            d = d;
            e = e;
            ((List)localObject1).remove(localObject2);
            ((List)localObject1).add(paramH);
            a((List)localObject1);
          }
        }
        else
        {
          ((List)localObject1).add(paramH);
          a((List)localObject1);
        }
      }
      else
      {
        localObject1 = new ArrayList();
        ((List)localObject1).add(paramH);
        a = ((List)localObject1);
        a((List)localObject1);
      }
      return;
    }
    catch (Throwable paramH)
    {
      throw paramH;
    }
  }
  
  public long add(String paramString)
  {
    for (;;)
    {
      try
      {
        if (a != null)
        {
          if (!a.isEmpty()) {
            break label98;
          }
          continue;
          if (i < a.size())
          {
            h localH = (h)a.get(i);
            if (a.equals(paramString))
            {
              long l = i;
              return l;
            }
            i += 1;
            continue;
          }
          return -1L;
        }
        return -1L;
      }
      catch (Throwable paramString)
      {
        throw paramString;
      }
      label98:
      int i = 0;
    }
  }
  
  public boolean add(List paramList)
  {
    try
    {
      boolean bool;
      if ((a == null) && (paramList != null))
      {
        a = paramList;
        bool = true;
      }
      else
      {
        Log.i(t, "XXXXXBundleInfoList initialization failed.");
        bool = false;
      }
      return bool;
    }
    catch (Throwable paramList)
    {
      throw paramList;
    }
  }
  
  public List b(String paramString)
  {
    try
    {
      if ((a != null) && (a.size() != 0))
      {
        Iterator localIterator = a.iterator();
        while (localIterator.hasNext())
        {
          h localH = (h)localIterator.next();
          if (a.equals(paramString))
          {
            paramString = j;
            return paramString;
          }
        }
        return null;
      }
      return null;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public void b(List paramList)
  {
    if (paramList != null) {
      try
      {
        f = paramList;
      }
      catch (Throwable paramList)
      {
        throw paramList;
      }
    }
  }
  
  public boolean c(String paramString)
  {
    boolean bool = false;
    if (paramString == null) {
      return false;
    }
    for (;;)
    {
      try
      {
        if (a != null)
        {
          if (!a.isEmpty()) {
            break label111;
          }
          continue;
          if (i < a.size())
          {
            h localH = (h)a.get(i);
            if (a.equals(paramString))
            {
              i = d;
              if (i == 2) {
                bool = true;
              }
              return bool;
            }
            i += 1;
            continue;
          }
          return false;
        }
        return false;
      }
      catch (Throwable paramString)
      {
        throw paramString;
      }
      label111:
      int i = 0;
    }
  }
  
  public h d(String paramString)
  {
    return a(a, paramString);
  }
  
  public List doInBackground()
  {
    try
    {
      if ((a != null) && (!a.isEmpty()))
      {
        LinkedList localLinkedList = new LinkedList();
        int i = 0;
        while (i < a.size())
        {
          localLinkedList.add(a.get(i)).a);
          i += 1;
        }
        return localLinkedList;
      }
      return null;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public long f(String paramString)
  {
    paramString = d(paramString);
    if (paramString == null) {
      return 0L;
    }
    return c;
  }
  
  public List get(String paramString)
  {
    try
    {
      if ((a != null) && (a.size() != 0))
      {
        Iterator localIterator = a.iterator();
        while (localIterator.hasNext())
        {
          h localH = (h)localIterator.next();
          if (a.equals(paramString))
          {
            paramString = new ArrayList();
            if ((localH != null) && (n != null))
            {
              int i = 0;
              while (i < n.size())
              {
                if (!TextUtils.isEmpty((CharSequence)n.get(i))) {
                  paramString.add(n.get(i));
                }
                i += 1;
              }
            }
            return paramString;
          }
        }
        return null;
      }
      return null;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public List getItem()
  {
    try
    {
      if ((a != null) && (!a.isEmpty()))
      {
        List localList = a;
        return localList;
      }
      return null;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public String toString(String paramString)
  {
    paramString = value(paramString);
    if (paramString == null) {
      return null;
    }
    return k;
  }
  
  public h value(String paramString)
  {
    Object localObject = f;
    if (localObject != null)
    {
      if (((List)localObject).isEmpty()) {
        return null;
      }
      int i = 0;
      while (i < f.size())
      {
        localObject = (h)f.get(i);
        if (a.equals(paramString)) {
          return localObject;
        }
        i += 1;
      }
    }
    return null;
  }
}
