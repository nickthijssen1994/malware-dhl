package com.jingdong.aura.core.runing;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.Application;
import android.app.Instrumentation;
import android.app.Instrumentation.ActivityMonitor;
import android.app.Instrumentation.ActivityResult;
import android.app.UiAutomation;
import android.content.ComponentName;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageItemInfo;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.text.TextUtils;
import android.view.ContextThemeWrapper;
import android.view.KeyEvent;
import android.view.MotionEvent;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.asm.i;
import com.jingdong.aura.core.asm.util.c;
import com.jingdong.aura.core.reflection.ClassWriter;
import com.jingdong.aura.core.reflection.Hack.d;
import com.jingdong.aura.core.runing.resource.DelegateResourcesUtils;
import com.jingdong.aura.core.util.FakeActivity;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import com.jingdong.aura.wrapper.listener.AuraDebugTimeListener;
import com.jingdong.aura.wrapper.listener.AuraPageCallback;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.osgi.framework.BundleException;

public class Frame
  extends Instrumentation
{
  private static Map<String, Integer> a = new HashMap();
  private static final StringBuffer b = Attribute.getInstance(h.class);
  private Context c;
  private Instrumentation inst;
  
  public Frame(Instrumentation paramInstrumentation, Context paramContext)
  {
    c = paramContext;
    inst = paramInstrumentation;
  }
  
  private String a(String paramString1, String paramString2)
  {
    Object localObject2 = "";
    Object localObject1 = localObject2;
    try
    {
      paramString1 = com.jingdong.aura.core.asm.http.f.d(paramString1);
      i localI = (i)paramString1;
      if (localI != null)
      {
        localObject1 = localObject2;
        paramString1 = new StringBuilder();
        localObject1 = localObject2;
        paramString1.append("");
        localObject1 = localObject2;
        paramString1.append("versioncode:");
        localObject1 = localObject2;
        paramString1.append(localI.e());
        localObject1 = localObject2;
        paramString1.append(";");
        localObject1 = localObject2;
        localObject2 = paramString1.toString();
        paramString1 = (String)localObject2;
        localObject1 = paramString1;
        Object localObject3 = g.c(localI.n());
        boolean bool;
        if (localObject3 == null)
        {
          localObject1 = paramString1;
          paramString2 = new StringBuilder();
          localObject1 = paramString1;
          paramString2.append((String)localObject2);
          localObject1 = paramString1;
          paramString2.append("packageLite:null;");
          localObject1 = paramString1;
          paramString1 = paramString2.toString();
        }
        else
        {
          localObject1 = paramString1;
          Object localObject4 = new StringBuilder();
          localObject1 = paramString1;
          ((StringBuilder)localObject4).append((String)localObject2);
          localObject1 = paramString1;
          ((StringBuilder)localObject4).append("packageLite:not null,");
          localObject1 = paramString1;
          localObject2 = ((StringBuilder)localObject4).toString();
          paramString1 = (String)localObject2;
          localObject4 = c;
          localObject1 = paramString1;
          bool = ((Set)localObject4).contains(paramString2);
          if (!bool)
          {
            localObject3 = f;
            localObject1 = paramString1;
            bool = ((Set)localObject3).contains(paramString2);
            if (!bool)
            {
              localObject1 = paramString1;
              paramString2 = new StringBuilder();
              localObject1 = paramString1;
              paramString2.append((String)localObject2);
              localObject1 = paramString1;
              paramString2.append("not contain;");
              localObject1 = paramString1;
              paramString1 = paramString2.toString();
              break label333;
            }
          }
          localObject1 = paramString1;
          paramString2 = new StringBuilder();
          localObject1 = paramString1;
          paramString2.append((String)localObject2);
          localObject1 = paramString1;
          paramString2.append("contain;");
          localObject1 = paramString1;
          paramString1 = paramString2.toString();
        }
        label333:
        localObject1 = paramString1;
        paramString2 = localI.p().a();
        if (paramString2 != null)
        {
          localObject1 = paramString1;
          bool = paramString2.exists();
          if (bool)
          {
            localObject1 = paramString1;
            localObject2 = com.jingdong.aura.core.util.File.read(paramString2.getAbsolutePath());
            localObject1 = paramString1;
            localObject3 = new StringBuilder();
            localObject1 = paramString1;
            ((StringBuilder)localObject3).append(paramString1);
            localObject1 = paramString1;
            ((StringBuilder)localObject3).append("archiveFile:");
            localObject1 = paramString1;
            ((StringBuilder)localObject3).append(paramString2.getAbsolutePath());
            localObject1 = paramString1;
            ((StringBuilder)localObject3).append(";md5:");
            localObject1 = paramString1;
            ((StringBuilder)localObject3).append((String)localObject2);
            localObject1 = paramString1;
            ((StringBuilder)localObject3).append(";");
            localObject1 = paramString1;
            paramString1 = ((StringBuilder)localObject3).toString();
            break label504;
          }
        }
        localObject1 = paramString1;
        paramString2 = new StringBuilder();
        localObject1 = paramString1;
        paramString2.append(paramString1);
        localObject1 = paramString1;
        paramString2.append("archiveFile:null;md5:null;");
        localObject1 = paramString1;
        paramString1 = paramString2.toString();
        label504:
        localObject1 = paramString1;
        paramString2 = localI.get();
        localObject1 = paramString1;
        localObject2 = new StringBuilder();
        localObject1 = paramString1;
        ((StringBuilder)localObject2).append(paramString1);
        localObject1 = paramString1;
        ((StringBuilder)localObject2).append(";classloader:");
        if (paramString2 == null) {
          paramString2 = "null";
        } else {
          paramString2 = "not null";
        }
        localObject1 = paramString1;
        ((StringBuilder)localObject2).append(paramString2);
        localObject1 = paramString1;
        paramString1 = ((StringBuilder)localObject2).toString();
        return paramString1;
      }
      return "bundleImpl:null";
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return localObject1;
  }
  
  private void b(Activity paramActivity)
  {
    if (!com.jingdong.aura.core.asm.f.a()) {
      return;
    }
    if (com.jingdong.aura.core.asm.f.getSubMenu() != null) {
      com.jingdong.aura.core.asm.f.getSubMenu().afterCallActivityOnCreate(paramActivity);
    }
  }
  
  private void c(Activity paramActivity)
  {
    if (!com.jingdong.aura.core.asm.f.a()) {
      return;
    }
    if (com.jingdong.aura.core.asm.f.getSubMenu() != null) {
      com.jingdong.aura.core.asm.f.getSubMenu().beforeCallActivityOnCreate(paramActivity);
    }
  }
  
  private void c(Activity paramActivity, Bundle paramBundle, Exception paramException)
  {
    if (ClassWriter.left != null)
    {
      paramBundle = ClassWriter.left;
      try
      {
        paramActivity = paramBundle.get(paramActivity);
        paramActivity = (Resources)paramActivity;
        paramActivity = DelegateResourcesUtils.getAssetPathFromResources(paramActivity);
        paramBundle = new StringBuilder();
        paramBundle.append("(1)Paths in ContextThemeWrapper_mResources:");
        paramBundle.append(paramActivity);
        paramBundle.append(" paths in runtime:");
        paramBundle.append(DelegateResourcesUtils.getRuntimeAssetHistoryPaths());
        paramActivity = paramBundle.toString();
      }
      catch (Exception paramActivity)
      {
        paramBundle = new StringBuilder();
        paramBundle.append("(2)paths in runtime:");
        paramBundle.append(DelegateResourcesUtils.getRuntimeAssetHistoryPaths());
        paramBundle.append(" getAssetPath fail: ");
        paramBundle.append(paramActivity);
        paramActivity = paramBundle.toString();
      }
      throw new RuntimeException(paramActivity, paramException);
    }
    paramActivity = new StringBuilder();
    paramActivity.append("(3)ContextThemeWrapper_mResources is null paths in runtime:");
    paramActivity.append(DelegateResourcesUtils.getRuntimeAssetHistoryPaths());
    throw new RuntimeException(paramActivity.toString(), paramException);
  }
  
  private Activity execute(ClassLoader paramClassLoader, String paramString, Intent paramIntent)
  {
    Object localObject = ((ActivityManager)c.getSystemService("activity")).getRunningTasks(1);
    if ((localObject != null) && (((List)localObject).size() > 0) && (get0numActivities > 1) && (com.jingdong.aura.core.asm.f.close() != null))
    {
      if (paramIntent.getComponent() == null) {
        paramIntent.setClassName(c, paramString);
      }
      paramString = com.jingdong.aura.core.asm.f.close().isRedirectToLoadingDexPage(paramIntent);
    }
    else
    {
      paramString = null;
    }
    if (paramString == null) {
      return null;
    }
    paramIntent = paramString.getComponent().getClassName();
    localObject = b;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("redirectToLoadingDexPage to : ");
    localStringBuilder.append(paramIntent);
    ((StringBuffer)localObject).setText(localStringBuilder.toString());
    return inst.newActivity(paramClassLoader, paramIntent, paramString);
  }
  
  private Activity init(ClassLoader paramClassLoader, String paramString, Intent paramIntent)
  {
    Object localObject = ((ActivityManager)c.getSystemService("activity")).getRunningTasks(1);
    if ((localObject != null) && (((List)localObject).size() > 0) && (get0numActivities > 1) && (com.jingdong.aura.core.asm.f.close() != null))
    {
      if (paramIntent.getComponent() == null) {
        paramIntent.setClassName(c, paramString);
      }
      paramString = com.jingdong.aura.core.asm.f.close().getClassNotFoundPage(paramIntent);
    }
    else
    {
      paramString = null;
    }
    if (paramString == null) {
      return null;
    }
    paramIntent = paramString.getComponent().getClassName();
    localObject = b;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("redirectToClassNotFoundPage to : ");
    localStringBuilder.append(paramIntent);
    ((StringBuffer)localObject).setText(localStringBuilder.toString());
    return inst.newActivity(paramClassLoader, paramIntent, paramString);
  }
  
  private Activity init(ClassLoader paramClassLoader, String paramString1, Intent paramIntent, String paramString2, ArrayList paramArrayList)
  {
    Object localObject = com.jingdong.aura.core.asm.f.close().getProvidedBundleNotFoundPageName();
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      Intent localIntent = new Intent();
      localIntent.setComponent(new ComponentName(Item.this$0, (String)localObject));
      localObject = paramIntent.getData();
      paramIntent = paramIntent.getExtras();
      if (localObject != null) {
        localIntent.setData((Uri)localObject);
      }
      if (paramIntent != null) {
        localIntent.replaceExtras(paramIntent);
      }
      localIntent.setExtrasClassLoader(Item.a);
      localIntent.putExtra("aura_target_classname", paramString1);
      localIntent.putExtra("aura_target_bundlename", paramString2);
      localIntent.putStringArrayListExtra("aura_not_prepared_bundlename", paramArrayList);
      localIntent.addFlags(268435456);
      c.startActivity(localIntent);
      paramString1 = b;
      paramIntent = new StringBuilder();
      paramIntent.append("start provided not found page: ");
      paramIntent.append(localIntent.getComponent().getClassName());
      paramString1.setText(paramIntent.toString());
    }
    paramString1 = new Intent();
    paramString1.setClass(c, FakeActivity.class);
    paramIntent = paramString1.getComponent().getClassName();
    paramString2 = b;
    paramArrayList = new StringBuilder();
    paramArrayList.append("redirectToClassNotFoundPage to : ");
    paramArrayList.append(paramIntent);
    paramString2.setText(paramArrayList.toString());
    return inst.newActivity(paramClassLoader, paramIntent, paramString1);
  }
  
  public Instrumentation.ActivityMonitor addMonitor(IntentFilter paramIntentFilter, Instrumentation.ActivityResult paramActivityResult, boolean paramBoolean)
  {
    return inst.addMonitor(paramIntentFilter, paramActivityResult, paramBoolean);
  }
  
  public Instrumentation.ActivityMonitor addMonitor(String paramString, Instrumentation.ActivityResult paramActivityResult, boolean paramBoolean)
  {
    return inst.addMonitor(paramString, paramActivityResult, paramBoolean);
  }
  
  public void addMonitor(Instrumentation.ActivityMonitor paramActivityMonitor)
  {
    inst.addMonitor(paramActivityMonitor);
  }
  
  public void callActivityOnCreate(Activity paramActivity, Bundle paramBundle)
  {
    c(paramActivity);
    if (!Item.this$0.getPackageName().equals(paramActivity.getPackageName()))
    {
      inst.callActivityOnCreate(paramActivity, paramBundle);
      b(paramActivity);
      return;
    }
    DelegateResourcesUtils.updateConfiguration(paramActivity);
    Object localObject1 = new SupportActivity(paramActivity.getBaseContext(), paramActivity.getClass().getClassLoader());
    if ((ClassWriter.b != null) && (ClassWriter.b.p() != null)) {
      ClassWriter.b.get(paramActivity, localObject1);
    }
    ClassWriter.E.get(paramActivity, localObject1);
    if ((paramActivity.getClass().getClassLoader() instanceof c)) {
      try
      {
        localObject1 = paramActivity.getClass().getClassLoader();
        localObject1 = (c)localObject1;
        ((c)localObject1).a().add();
        boolean bool = com.jingdong.aura.core.asm.f.getOptionalIconsVisible();
        if (bool)
        {
          localObject3 = paramActivity.getIntent();
          localObject2 = paramActivity.getClassLoader();
          localObject1 = localObject2;
          if (localObject2 == null) {
            localObject1 = paramActivity.getClass().getClassLoader();
          }
          if ((localObject3 != null) && (localObject1 != null)) {
            ((Intent)localObject3).setExtrasClassLoader((ClassLoader)localObject1);
          }
        }
      }
      catch (BundleException localBundleException)
      {
        Object localObject2 = b;
        Object localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(localBundleException.getMessage());
        ((StringBuilder)localObject3).append(" Caused by: ");
        ((StringBuffer)localObject2).i(((StringBuilder)localObject3).toString(), localBundleException.getNestedException());
      }
    }
    try
    {
      DelegateResourcesUtils.ensureResourcesInjected(paramActivity);
      Instrumentation localInstrumentation = inst;
      localInstrumentation.callActivityOnCreate(paramActivity, paramBundle);
      b(paramActivity);
      return;
    }
    catch (Exception localException)
    {
      if ((!localException.toString().contains("android.content.res.Resources")) || (localException.toString().contains("OutOfMemoryError"))) {
        localException.printStackTrace();
      }
      c(paramActivity, paramBundle, localException);
    }
  }
  
  public void callActivityOnDestroy(Activity paramActivity)
  {
    inst.callActivityOnDestroy(paramActivity);
  }
  
  public void callActivityOnNewIntent(Activity paramActivity, Intent paramIntent)
  {
    inst.callActivityOnNewIntent(paramActivity, paramIntent);
  }
  
  public void callActivityOnPause(Activity paramActivity)
  {
    inst.callActivityOnPause(paramActivity);
  }
  
  public void callActivityOnPostCreate(Activity paramActivity, Bundle paramBundle)
  {
    inst.callActivityOnPostCreate(paramActivity, paramBundle);
  }
  
  public void callActivityOnRestart(Activity paramActivity)
  {
    inst.callActivityOnRestart(paramActivity);
  }
  
  public void callActivityOnRestoreInstanceState(Activity paramActivity, Bundle paramBundle)
  {
    inst.callActivityOnRestoreInstanceState(paramActivity, paramBundle);
  }
  
  public void callActivityOnResume(Activity paramActivity)
  {
    inst.callActivityOnResume(paramActivity);
  }
  
  public void callActivityOnSaveInstanceState(Activity paramActivity, Bundle paramBundle)
  {
    inst.callActivityOnSaveInstanceState(paramActivity, paramBundle);
  }
  
  public void callActivityOnStart(Activity paramActivity)
  {
    inst.callActivityOnStart(paramActivity);
  }
  
  public void callActivityOnStop(Activity paramActivity)
  {
    inst.callActivityOnStop(paramActivity);
  }
  
  public void callActivityOnUserLeaving(Activity paramActivity)
  {
    inst.callActivityOnUserLeaving(paramActivity);
  }
  
  public void callApplicationOnCreate(Application paramApplication)
  {
    inst.callApplicationOnCreate(paramApplication);
  }
  
  public boolean checkMonitorHit(Instrumentation.ActivityMonitor paramActivityMonitor, int paramInt)
  {
    return inst.checkMonitorHit(paramActivityMonitor, paramInt);
  }
  
  public void endPerformanceSnapshot()
  {
    inst.endPerformanceSnapshot();
  }
  
  public void finish(int paramInt, Bundle paramBundle)
  {
    inst.finish(paramInt, paramBundle);
  }
  
  public Bundle getAllocCounts()
  {
    return inst.getAllocCounts();
  }
  
  public Bundle getBinderCounts()
  {
    return inst.getBinderCounts();
  }
  
  public ComponentName getComponentName()
  {
    return inst.getComponentName();
  }
  
  public Context getContext()
  {
    return inst.getContext();
  }
  
  public Context getTargetContext()
  {
    return inst.getTargetContext();
  }
  
  public UiAutomation getUiAutomation()
  {
    return inst.getUiAutomation();
  }
  
  public boolean invokeContextMenuAction(Activity paramActivity, int paramInt1, int paramInt2)
  {
    return inst.invokeContextMenuAction(paramActivity, paramInt1, paramInt2);
  }
  
  public boolean invokeMenuActionSync(Activity paramActivity, int paramInt1, int paramInt2)
  {
    return inst.invokeMenuActionSync(paramActivity, paramInt1, paramInt2);
  }
  
  public boolean isProfiling()
  {
    return inst.isProfiling();
  }
  
  public Activity newActivity(Class paramClass, Context paramContext, IBinder paramIBinder, Application paramApplication, Intent paramIntent, ActivityInfo paramActivityInfo, CharSequence paramCharSequence, Activity paramActivity, String paramString, Object paramObject)
  {
    paramClass = inst.newActivity(paramClass, paramContext, paramIBinder, paramApplication, paramIntent, paramActivityInfo, paramCharSequence, paramActivity, paramString, paramObject);
    if ((Item.this$0.getPackageName().equals(packageName)) && (ClassWriter.left != null) && ((paramClass instanceof ContextThemeWrapper))) {
      ClassWriter.left.get(paramClass, Item.c);
    }
    return paramClass;
  }
  
  public Activity newActivity(ClassLoader paramClassLoader, String paramString, Intent paramIntent)
  {
    Object localObject1 = b;
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append("newActivity called. className = ");
    ((StringBuilder)localObject2).append(paramString);
    ((StringBuffer)localObject1).toString(((StringBuilder)localObject2).toString());
    localObject2 = execute(paramClassLoader, paramString, paramIntent);
    localObject1 = localObject2;
    if (localObject2 == null) {
      try
      {
        localObject1 = inst.newActivity(paramClassLoader, paramString, paramIntent);
      }
      catch (Throwable localThrowable)
      {
        b.e("newActivity() catched a throwable", localThrowable);
        localObject1 = com.jingdong.aura.core.data.f.get().a(paramString);
        if (localObject1 != null)
        {
          if (a.containsKey(localObject1))
          {
            localObject3 = a;
            ((Map)localObject3).put(localObject1, Integer.valueOf(((Integer)((Map)localObject3).get(localObject1)).intValue() + 1));
          }
          else
          {
            a.put(localObject1, Integer.valueOf(1));
          }
          org.osgi.framework.a localA = com.jingdong.aura.core.asm.http.f.d((String)localObject1);
          Object localObject3 = a((String)localObject1, paramString);
          if (localA != null) {
            try
            {
              localA.m();
            }
            catch (BundleException localBundleException)
            {
              b.e("uninstall bundle failed.", (Throwable)localBundleException);
            }
          }
          Object localObject4 = com.jingdong.aura.core.asm.f.run((String)localObject1);
          if ((localObject4 != null) && (((ArrayList)localObject4).size() > 0) && (!TextUtils.isEmpty(com.jingdong.aura.core.asm.f.close().getProvidedBundleNotFoundPageName())))
          {
            MethodWriter.d((String)localObject1, "newActivity failed. try to start provided not found page", "InstrumentaionHook.newActivity_4", localThrowable);
            return init(paramClassLoader, paramString, paramIntent, (String)localObject1, (ArrayList)localObject4);
          }
          localObject4 = new StringBuilder();
          ((StringBuilder)localObject4).append("newActivity failed. error count = ");
          ((StringBuilder)localObject4).append(a.get(localObject1));
          ((StringBuilder)localObject4).append(". ");
          ((StringBuilder)localObject4).append((String)localObject3);
          MethodWriter.d((String)localObject1, ((StringBuilder)localObject4).toString(), "InstrumentaionHook.newActivity_2", localThrowable);
          com.jingdong.aura.core.asm.http.f.b((String)localObject1);
        }
        else
        {
          MethodWriter.d((String)localObject1, "newActivity failed.", "InstrumentaionHook.newActivity_3", localThrowable);
        }
        localObject1 = init(paramClassLoader, paramString, paramIntent);
        if (localObject1 == null) {
          throw localThrowable;
        }
      }
    }
    if ((localObject1 != null) && ((localObject1 instanceof ContextThemeWrapper)) && ((paramClassLoader instanceof Label)) && (ClassWriter.left != null))
    {
      b.toString("hook contextThemeWrapper.mResources 1");
      ClassWriter.left.get(localObject1, Item.c);
    }
    b.toString("newActivity end.");
    return localObject1;
  }
  
  public Application newApplication(ClassLoader paramClassLoader, String paramString, Context paramContext)
  {
    return inst.newApplication(paramClassLoader, paramString, paramContext);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    inst.onCreate(paramBundle);
  }
  
  public void onDestroy()
  {
    inst.onDestroy();
  }
  
  public boolean onException(Object paramObject, Throwable paramThrowable)
  {
    return inst.onException(paramObject, paramThrowable);
  }
  
  public void onStart()
  {
    inst.onStart();
  }
  
  public void removeMonitor(Instrumentation.ActivityMonitor paramActivityMonitor)
  {
    inst.removeMonitor(paramActivityMonitor);
  }
  
  public void runOnMainSync(Runnable paramRunnable)
  {
    inst.runOnMainSync(paramRunnable);
  }
  
  public void sendCharacterSync(int paramInt)
  {
    inst.sendCharacterSync(paramInt);
  }
  
  public void sendKeyDownUpSync(int paramInt)
  {
    inst.sendKeyDownUpSync(paramInt);
  }
  
  public void sendKeySync(KeyEvent paramKeyEvent)
  {
    inst.sendKeySync(paramKeyEvent);
  }
  
  public void sendPointerSync(MotionEvent paramMotionEvent)
  {
    inst.sendPointerSync(paramMotionEvent);
  }
  
  public void sendStatus(int paramInt, Bundle paramBundle)
  {
    inst.sendStatus(paramInt, paramBundle);
  }
  
  public void sendStringSync(String paramString)
  {
    inst.sendStringSync(paramString);
  }
  
  public void sendTrackballEventSync(MotionEvent paramMotionEvent)
  {
    inst.sendTrackballEventSync(paramMotionEvent);
  }
  
  public void setAutomaticPerformanceSnapshots()
  {
    inst.setAutomaticPerformanceSnapshots();
  }
  
  public void setInTouchMode(boolean paramBoolean)
  {
    inst.setInTouchMode(paramBoolean);
  }
  
  public void start()
  {
    inst.start();
  }
  
  public Activity startActivitySync(Intent paramIntent)
  {
    return inst.startActivitySync(paramIntent);
  }
  
  public void startAllocCounting()
  {
    inst.startAllocCounting();
  }
  
  public void startPerformanceSnapshot()
  {
    inst.startPerformanceSnapshot();
  }
  
  public void startProfiling()
  {
    inst.startProfiling();
  }
  
  public void stopAllocCounting()
  {
    inst.stopAllocCounting();
  }
  
  public void stopProfiling()
  {
    inst.stopProfiling();
  }
  
  public void waitForIdle(Runnable paramRunnable)
  {
    inst.waitForIdle(paramRunnable);
  }
  
  public void waitForIdleSync()
  {
    inst.waitForIdleSync();
  }
  
  public Activity waitForMonitor(Instrumentation.ActivityMonitor paramActivityMonitor)
  {
    return inst.waitForMonitor(paramActivityMonitor);
  }
  
  public Activity waitForMonitorWithTimeout(Instrumentation.ActivityMonitor paramActivityMonitor, long paramLong)
  {
    return inst.waitForMonitorWithTimeout(paramActivityMonitor, paramLong);
  }
}
