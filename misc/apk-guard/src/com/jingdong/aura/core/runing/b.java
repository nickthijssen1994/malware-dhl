package com.jingdong.aura.core.runing;

import android.app.Application;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Looper;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.asm.http.f;
import com.jingdong.aura.core.asm.i;
import com.jingdong.aura.core.reflection.ClassWriter;
import com.jingdong.aura.core.reflection.Hack.e;
import com.jingdong.aura.core.runing.resource.Label;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.zip.ZipFile;
import org.osgi.framework.BundleEvent;

public class b
  implements org.osgi.framework.g
{
  private static final StringBuffer b = com.jingdong.aura.core.util.rss.Attribute.getInstance(b.class);
  
  public b() {}
  
  private void a(org.osgi.framework.a paramA)
  {
    paramA = (i)paramA;
    long l = System.currentTimeMillis();
    Object localObject = g.c(paramA.n());
    if (localObject != null)
    {
      localObject = x;
      if (com.jingdong.aura.core.util.Attribute.b((String)localObject)) {
        try
        {
          init((String)localObject, paramA.get()).onCreate();
        }
        catch (Throwable paramA)
        {
          b.i("Error to start application >>>", paramA);
        }
      }
    }
    paramA = b;
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("started() spend ");
    ((StringBuilder)localObject).append(System.currentTimeMillis() - l);
    ((StringBuilder)localObject).append(" milliseconds");
    paramA.i(((StringBuilder)localObject).toString());
  }
  
  private boolean a()
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    try
    {
      Object localObject = Class.forName("android.os.SystemProperties");
      localObject = ((Class)localObject).getDeclaredMethod("get", new Class[] { String.class });
      localObject = ((Method)localObject).invoke(null, new Object[] { "ro.lewa.version" });
      localObject = (String)localObject;
      boolean bool = com.jingdong.aura.core.util.Attribute.b((String)localObject);
      return bool;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return false;
  }
  
  private void b(org.osgi.framework.a paramA)
  {
    long l = System.currentTimeMillis();
    i localI = (i)paramA;
    StringBuffer localStringBuffer;
    StringBuilder localStringBuilder;
    if (g.c(paramA.n()) == null)
    {
      h localH = h.a(localI.p().a());
      localStringBuffer = b;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Bundle installation info ");
      localStringBuilder.append(paramA.n());
      localStringBuilder.append(":");
      localStringBuilder.append(c);
      localStringBuffer.i(localStringBuilder.toString());
      g.b(paramA.n(), localH);
    }
    try
    {
      boolean bool = write(localI.p().a());
      if (bool)
      {
        b.i("process resources");
        Label.a(Item.this$0, Item.c, localI.p().a().getAbsolutePath());
      }
      else
      {
        b.i("public bundle do not process resources");
      }
    }
    catch (Throwable localThrowable)
    {
      localStringBuffer = b;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not load resource in bundle ");
      localStringBuilder.append(localI.n());
      localStringBuffer.i(localStringBuilder.toString(), localThrowable);
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("loaded() spend ");
    ((StringBuilder)localObject).append(System.currentTimeMillis() - l);
    ((StringBuilder)localObject).append(" milliseconds");
    localObject = ((StringBuilder)localObject).toString();
    b.i((String)localObject);
    MethodWriter.a("AuraMaiDianBundleLoaded", paramA.n(), localI.e(), String.valueOf(System.currentTimeMillis() - l), "BundleLifecycleHandler.loaded");
  }
  
  private void c(org.osgi.framework.a paramA)
  {
    Application localApplication = (Application)g.c.get(paramA.n());
    if (localApplication != null)
    {
      localApplication.onTerminate();
      g.c.remove(paramA.n());
    }
  }
  
  protected static Application init(String paramString, ClassLoader paramClassLoader)
  {
    paramClassLoader = paramClassLoader.loadClass(paramString);
    if (paramClassLoader != null)
    {
      paramString = (Application)paramClassLoader.newInstance();
      ClassWriter.p.a(paramString, new Object[] { Item.this$0 });
      return paramString;
    }
    throw new ClassNotFoundException(paramString);
  }
  
  private void onCreate(org.osgi.framework.a paramA)
  {
    g.b(paramA.n());
  }
  
  private void onServiceConnected(org.osgi.framework.a paramA) {}
  
  private void restoreInstanceState(org.osgi.framework.a paramA) {}
  
  private boolean write(java.io.File paramFile)
  {
    boolean bool = true;
    Object localObject2 = null;
    Object localObject1 = null;
    try
    {
      paramFile = new ZipFile(paramFile);
      try
      {
        localObject1 = paramFile.getEntry("resources.arsc");
        if (localObject1 == null) {
          bool = false;
        }
        com.jingdong.aura.core.util.File.read(paramFile);
        return bool;
      }
      catch (Throwable localThrowable)
      {
        localObject1 = paramFile;
        paramFile = localThrowable;
        break label86;
      }
      catch (Exception localException1) {}
      localObject1 = paramFile;
    }
    catch (Throwable paramFile) {}catch (Exception localException2)
    {
      paramFile = localObject2;
    }
    b.e(localException2.getMessage(), localException2);
    com.jingdong.aura.core.util.File.read(paramFile);
    return true;
    label86:
    com.jingdong.aura.core.util.File.read((ZipFile)localObject1);
    throw paramFile;
  }
  
  public void bundleChanged(BundleEvent paramBundleEvent)
  {
    int i = paramBundleEvent.getType();
    if (i != 4)
    {
      if (i != 8)
      {
        if (i != 16)
        {
          switch (i)
          {
          default: 
            return;
          case 2: 
            if (a())
            {
              if (Looper.myLooper() == null) {
                Looper.prepare();
              }
              a(paramBundleEvent.getBundle());
              return;
            }
            if (f.g())
            {
              AttachmentView.1 local1 = new AttachmentView.1(this, null);
              if (Build.VERSION.SDK_INT > 11)
              {
                local1.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new org.osgi.framework.a[] { paramBundleEvent.getBundle() });
                return;
              }
              local1.execute(new org.osgi.framework.a[] { paramBundleEvent.getBundle() });
              return;
            }
            a(paramBundleEvent.getBundle());
            return;
          case 1: 
            restoreInstanceState(paramBundleEvent.getBundle());
            return;
          }
          b(paramBundleEvent.getBundle());
          return;
        }
        onCreate(paramBundleEvent.getBundle());
        return;
      }
      onServiceConnected(paramBundleEvent.getBundle());
      return;
    }
    c(paramBundleEvent.getBundle());
  }
}
