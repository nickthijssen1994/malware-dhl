package com.jingdong.aura.core.runing;

import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.text.TextUtils;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.asm.asm.a;
import com.jingdong.aura.core.asm.i;
import com.jingdong.aura.core.data.ClassWriter;
import com.jingdong.aura.core.data.d;
import com.jingdong.aura.core.util.Frame;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.osgi.framework.BundleException;

public class f
{
  private static StringBuffer b = com.jingdong.aura.core.util.rss.Attribute.getInstance(c.class);
  private static Hashtable<Integer, String> c = new Hashtable();
  private static int i = 0;
  
  public f() {}
  
  private static Class a(i paramI, String paramString, List paramList)
  {
    paramI.q().close();
    ClassLoader localClassLoader = paramI.get();
    try
    {
      paramI.add();
    }
    catch (BundleException localBundleException)
    {
      localBundleException.printStackTrace();
    }
    if (localClassLoader != null) {
      try
      {
        Class localClass = localClassLoader.loadClass(paramString);
        if (localClass != null) {
          return localClass;
        }
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        StringBuilder localStringBuilder2 = new StringBuilder();
        localStringBuilder2.append("Can't find class ");
        localStringBuilder2.append(paramString);
        localStringBuilder2.append(" in BundleClassLoader:");
        localStringBuilder2.append(paramI.n());
        localStringBuilder2.append("[");
        int j;
        if (paramList == null) {
          j = 0;
        } else {
          j = paramList.size();
        }
        localStringBuilder2.append(j);
        localStringBuilder2.append("]. classloader = ");
        if (localClassLoader == null) {
          paramI = "null";
        } else {
          paramI = "not null";
        }
        localStringBuilder2.append(paramI);
        localStringBuilder2.append(". packageversion ");
        localStringBuilder2.append(getVersion());
        throw new ClassNotFoundException(localStringBuilder2.toString(), localClassNotFoundException);
      }
    }
    StringBuilder localStringBuilder1 = new StringBuilder();
    localStringBuilder1.append("Can't find class ");
    localStringBuilder1.append(paramString);
    localStringBuilder1.append(" in BundleClassLoader: ");
    localStringBuilder1.append(paramI.n());
    localStringBuilder1.append(" [");
    localStringBuilder1.append(paramList.size());
    localStringBuilder1.append("]");
    if (localClassLoader == null) {
      paramI = "classloader is null";
    } else {
      paramI = "classloader not null";
    }
    localStringBuilder1.append(paramI);
    localStringBuilder1.append(" packageversion ");
    localStringBuilder1.append(getVersion());
    throw new ClassNotFoundException(localStringBuilder1.toString());
  }
  
  static Class a(String paramString)
  {
    List localList = com.jingdong.aura.core.asm.http.f.c();
    Iterator localIterator = null;
    Object localObject3 = null;
    Object localObject1 = localIterator;
    Object localObject2;
    if (localList != null)
    {
      localObject1 = localIterator;
      if (!localList.isEmpty())
      {
        localIterator = localList.iterator();
        do
        {
          localObject1 = localObject3;
          if (!localIterator.hasNext()) {
            break;
          }
          Object localObject4 = (i)localIterator.next();
          h localH = g.c(((i)localObject4).n());
          localObject1 = localObject3;
          if (localH != null) {
            if (!c.contains(paramString))
            {
              localObject1 = localObject3;
              if (!f.contains(paramString)) {}
            }
            else
            {
              try
              {
                localObject1 = a((i)localObject4, paramString, localList);
              }
              catch (Exception localException)
              {
                if (!Frame.a(paramString))
                {
                  localObject4 = new StringBuilder();
                  ((StringBuilder)localObject4).append("loadClassFromInstalledBundles failed ");
                  ((StringBuilder)localObject4).append(paramString);
                  MethodWriter.d("ClassNotFound", ((StringBuilder)localObject4).toString(), "loadClassFromInstalledBundles", localException);
                  localObject2 = localObject3;
                }
                else
                {
                  throw localObject2;
                }
              }
            }
          }
          localObject3 = localObject2;
        } while (localObject2 == null);
        return localObject2;
      }
    }
    if (localList != null)
    {
      localObject3 = localObject2;
      if (!localList.isEmpty()) {
        localIterator = com.jingdong.aura.core.asm.http.f.c().iterator();
      }
    }
    else
    {
      for (;;)
      {
        localObject3 = localObject2;
        if (!localIterator.hasNext()) {
          break;
        }
        localObject3 = (i)localIterator.next();
        ((i)localObject3).q().close();
        try
        {
          ((i)localObject3).add();
        }
        catch (BundleException localBundleException)
        {
          localBundleException.printStackTrace();
        }
        if (((i)localObject3).q().c())
        {
          localObject3 = ((i)localObject3).get();
          if (localObject3 != null)
          {
            try
            {
              localObject3 = ((ClassLoader)localObject3).loadClass(paramString);
              localObject2 = localObject3;
              if (localObject3 == null) {
                continue;
              }
              return localObject3;
            }
            catch (ClassNotFoundException localClassNotFoundException) {}
            return localObject2;
          }
        }
      }
    }
    return localClassNotFoundException;
  }
  
  private static void a(String paramString1, String paramString2)
  {
    Hashtable localHashtable = c;
    int j = i;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(" Not found class ");
    localStringBuilder.append(paramString1);
    localStringBuilder.append(" because ");
    localStringBuilder.append(paramString2);
    localHashtable.put(Integer.valueOf(j), localStringBuilder.toString());
    i += 1;
    i %= 10;
  }
  
  private static java.io.File add(String paramString)
  {
    String str = "lib".concat(paramString).concat(".so");
    Object localObject = get(str);
    if (localObject == null) {
      return null;
    }
    if (!exists(paramString, (java.io.File)localObject))
    {
      if (ClassWriter.a(paramString)) {
        return null;
      }
      localObject = b;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(" can not find the library ");
      localStringBuilder.append(str);
      localStringBuilder.append(" for bundle");
      localStringBuilder.append(paramString);
      ((StringBuffer)localObject).e(localStringBuilder.toString());
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("can not find the library ");
      ((StringBuilder)localObject).append(str);
      ((StringBuilder)localObject).append(" for bundle");
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append(" from ClassLoadFromBundle.loadOriginalBundle_3");
      throw new RuntimeException(((StringBuilder)localObject).toString());
    }
    return localObject;
  }
  
  public static void b(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    if ((!ClassWriter.a(paramString)) && (!com.jingdong.aura.core.data.f.get().c(paramString)))
    {
      a(paramString, "not found in mInternalBundles!");
      return;
    }
    close(paramString);
  }
  
  private static boolean c(String paramString)
  {
    if (!com.jingdong.aura.core.asm.f.a()) {
      return false;
    }
    if (paramString == null) {
      return false;
    }
    Object localObject1 = "lib".concat(paramString).concat(".so");
    Object localObject2 = com.jingdong.aura.core.asm.http.f.e("com.jingdong.aura.AppDirectory.debug");
    if (localObject2 == null) {
      return false;
    }
    localObject1 = new java.io.File(new java.io.File((String)localObject2, "lib"), (String)localObject1);
    if (!((java.io.File)localObject1).exists()) {
      return false;
    }
    localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append("disk size not enough from ClassLoadFromBundle.loadDebugBundleFile for bundle ");
    ((StringBuilder)localObject2).append(paramString);
    e(paramString, ((StringBuilder)localObject2).toString());
    try
    {
      long l = Frame.execute(Item.this$0, ((java.io.File)localObject1).getAbsolutePath());
      localObject2 = com.jingdong.aura.core.util.File.read(((java.io.File)localObject1).getAbsolutePath());
      com.jingdong.aura.core.asm.h.a().a(paramString, (java.io.File)localObject1, l, (String)localObject2);
      return true;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return false;
  }
  
  private static void close(String paramString)
  {
    List localList = com.jingdong.aura.core.data.f.get().get(paramString);
    if ((localList != null) && (localList.size() > 0))
    {
      int j = 0;
      while (j < localList.size())
      {
        close((String)localList.get(j));
        j += 1;
      }
    }
    if (com.jingdong.aura.core.asm.http.f.d(paramString) != null) {
      return;
    }
    if (c(paramString)) {
      return;
    }
    if (com.jingdong.aura.core.asm.h.a().d(paramString) == null) {
      f(paramString);
    }
  }
  
  public static void d(String paramString)
  {
    if (paramString == null) {
      return;
    }
    try
    {
      ClassWriter.init();
      localObject2 = d.a().b(paramString);
      Object localObject1 = localObject2;
      if (com.jingdong.aura.core.util.Attribute.a((String)localObject2)) {
        localObject1 = com.jingdong.aura.core.data.f.get().a(paramString);
      }
      if (TextUtils.isEmpty((CharSequence)localObject1))
      {
        localObject2 = b;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Failed to find the bundle in BundleInfoList for component ");
        localStringBuilder.append((String)localObject1);
        ((StringBuffer)localObject2).e(localStringBuilder.toString());
        a(paramString, "not found in BundleInfoList!");
        return;
      }
      b((String)localObject1);
      return;
    }
    catch (Throwable localThrowable)
    {
      Object localObject2;
      try
      {
        throw localThrowable;
      }
      catch (Exception localException)
      {
        if (!Frame.a(paramString))
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("checkInstallBundleIfNeed failed ");
          ((StringBuilder)localObject2).append(paramString);
          MethodWriter.d("ClassNotFound", ((StringBuilder)localObject2).toString(), "ClassLoadFromBundle", localException);
          return;
        }
        throw localException;
      }
    }
  }
  
  public static String doInBackground(String paramString)
  {
    int j = 0;
    while (j < c.size())
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append((String)c.get(Integer.valueOf(j)));
      ((StringBuilder)localObject).append("");
      localObject = ((StringBuilder)localObject).toString();
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString);
      localStringBuilder.append("");
      if (((String)localObject).contains(localStringBuilder.toString()))
      {
        paramString = new StringBuilder();
        paramString.append((String)c.get(Integer.valueOf(j)));
        paramString.append("");
        return paramString.toString();
      }
      j += 1;
    }
    return "";
  }
  
  private static void e(String paramString1, String paramString2)
  {
    if (com.jingdong.aura.core.asm.f.b(paramString1)) {
      return;
    }
    b.e("disk size not enough");
    throw new RuntimeException(paramString2);
  }
  
  /* Error */
  private static boolean exists(String paramString, java.io.File paramFile)
  {
    // Byte code:
    //   0: new 363	java/util/zip/ZipFile
    //   3: dup
    //   4: aload_1
    //   5: invokespecial 366	java/util/zip/ZipFile:<init>	(Ljava/io/File;)V
    //   8: astore_0
    //   9: aload_1
    //   10: invokevirtual 279	java/io/File:exists	()Z
    //   13: istore_2
    //   14: iload_2
    //   15: ifeq +38 -> 53
    //   18: aload_1
    //   19: invokevirtual 369	java/io/File:isFile	()Z
    //   22: istore_2
    //   23: iload_2
    //   24: ifeq +29 -> 53
    //   27: aload_1
    //   28: invokevirtual 372	java/io/File:canRead	()Z
    //   31: istore_2
    //   32: iload_2
    //   33: ifeq +20 -> 53
    //   36: aload_1
    //   37: invokevirtual 376	java/io/File:length	()J
    //   40: lstore_3
    //   41: lload_3
    //   42: lconst_0
    //   43: lcmp
    //   44: ifle +9 -> 53
    //   47: aload_0
    //   48: invokestatic 379	com/jingdong/aura/core/util/File:read	(Ljava/util/zip/ZipFile;)V
    //   51: iconst_1
    //   52: ireturn
    //   53: new 69	java/lang/StringBuilder
    //   56: dup
    //   57: invokespecial 70	java/lang/StringBuilder:<init>	()V
    //   60: astore 6
    //   62: aload_1
    //   63: invokevirtual 279	java/io/File:exists	()Z
    //   66: istore_2
    //   67: iload_2
    //   68: ifeq +11 -> 79
    //   71: ldc_w 381
    //   74: astore 5
    //   76: goto +8 -> 84
    //   79: ldc_w 383
    //   82: astore 5
    //   84: aload 6
    //   86: aload 5
    //   88: invokevirtual 76	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: pop
    //   92: aload_1
    //   93: invokevirtual 369	java/io/File:isFile	()Z
    //   96: istore_2
    //   97: iload_2
    //   98: ifeq +11 -> 109
    //   101: ldc_w 384
    //   104: astore 5
    //   106: goto +8 -> 114
    //   109: ldc_w 386
    //   112: astore 5
    //   114: aload 6
    //   116: aload 5
    //   118: invokevirtual 76	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   121: pop
    //   122: aload_1
    //   123: invokevirtual 372	java/io/File:canRead	()Z
    //   126: istore_2
    //   127: iload_2
    //   128: ifeq +11 -> 139
    //   131: ldc_w 387
    //   134: astore 5
    //   136: goto +8 -> 144
    //   139: ldc_w 389
    //   142: astore 5
    //   144: aload 6
    //   146: aload 5
    //   148: invokevirtual 76	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   151: pop
    //   152: aload 6
    //   154: aload_1
    //   155: invokevirtual 376	java/io/File:length	()J
    //   158: invokevirtual 392	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   161: pop
    //   162: aload 6
    //   164: invokevirtual 107	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   167: pop
    //   168: aload_0
    //   169: invokestatic 379	com/jingdong/aura/core/util/File:read	(Ljava/util/zip/ZipFile;)V
    //   172: iconst_0
    //   173: ireturn
    //   174: astore_1
    //   175: goto +6 -> 181
    //   178: astore_1
    //   179: aconst_null
    //   180: astore_0
    //   181: aload_0
    //   182: invokestatic 379	com/jingdong/aura/core/util/File:read	(Ljava/util/zip/ZipFile;)V
    //   185: aload_1
    //   186: athrow
    //   187: aconst_null
    //   188: astore_0
    //   189: aload_0
    //   190: invokestatic 379	com/jingdong/aura/core/util/File:read	(Ljava/util/zip/ZipFile;)V
    //   193: iconst_0
    //   194: ireturn
    //   195: astore_0
    //   196: goto -9 -> 187
    //   199: astore_1
    //   200: goto -11 -> 189
    //   203: astore_1
    //   204: goto -15 -> 189
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	207	0	paramString	String
    //   0	207	1	paramFile	java.io.File
    //   13	115	2	bool	boolean
    //   40	2	3	l	long
    //   74	73	5	str	String
    //   60	103	6	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   9	14	174	java/lang/Throwable
    //   18	23	174	java/lang/Throwable
    //   27	32	174	java/lang/Throwable
    //   36	41	174	java/lang/Throwable
    //   53	67	174	java/lang/Throwable
    //   84	97	174	java/lang/Throwable
    //   114	127	174	java/lang/Throwable
    //   144	168	174	java/lang/Throwable
    //   0	9	178	java/lang/Throwable
    //   0	9	195	java/lang/Exception
    //   9	14	199	java/lang/Exception
    //   18	23	199	java/lang/Exception
    //   27	32	199	java/lang/Exception
    //   36	41	199	java/lang/Exception
    //   53	67	203	java/lang/Exception
    //   84	97	203	java/lang/Exception
    //   114	127	203	java/lang/Exception
    //   144	168	203	java/lang/Exception
  }
  
  private static void f(String paramString)
  {
    java.io.File localFile;
    if (!com.jingdong.aura.core.data.f.get().c(paramString))
    {
      localFile = add(paramString);
      if (localFile == null)
      {
        f(paramString, "lib".concat(paramString).concat(".so"));
        return;
      }
    }
    else
    {
      localFile = null;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("disk size not enough from ClassLoadFromBundle.loadOriginalBundle_2 for bundle ");
    ((StringBuilder)localObject).append(paramString);
    e(paramString, ((StringBuilder)localObject).toString());
    try
    {
      localObject = com.jingdong.aura.core.data.f.get().d(paramString);
      long l;
      if (localObject != null)
      {
        l = i;
        localObject = k;
      }
      else
      {
        localObject = "";
        l = 0L;
      }
      com.jingdong.aura.core.asm.h.a().a(paramString, localFile, l, (String)localObject);
      return;
    }
    catch (Throwable localThrowable)
    {
      localObject = b;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("failed to install bundle ");
      localStringBuilder.append(paramString);
      ((StringBuffer)localObject).i(localStringBuilder.toString(), localThrowable);
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Aura failed to install bundle ");
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append(", from ClassLoadFromBundle.loadOriginalBundle_1 ");
      throw new RuntimeException(((StringBuilder)localObject).toString(), localThrowable);
    }
  }
  
  private static void f(String paramString1, String paramString2)
  {
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("disk size not enough from ClassLoadFromBundle.installFromApkZip for bundle");
    ((StringBuilder)localObject1).append(paramString1);
    e(paramString1, ((StringBuilder)localObject1).toString());
    try
    {
      localObject2 = com.jingdong.aura.core.data.f.get().d(paramString1);
      long l;
      if (localObject2 != null)
      {
        localObject1 = k;
        l = i;
      }
      else
      {
        localObject1 = "";
        l = 0L;
      }
      com.jingdong.aura.core.asm.h.a().a(paramString1, ClassWriter.get(paramString2), l, (String)localObject1);
      return;
    }
    catch (Exception paramString1)
    {
      localObject1 = b;
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Failed to install bundle ");
      ((StringBuilder)localObject2).append(paramString2);
      ((StringBuilder)localObject2).append(" from APK zipfile ");
      ((StringBuffer)localObject1).e(((StringBuilder)localObject2).toString(), paramString1);
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Failed to install bundle ");
      ((StringBuilder)localObject1).append(paramString2);
      ((StringBuilder)localObject1).append(" from APK zipfile ");
      throw new RuntimeException(((StringBuilder)localObject1).toString(), paramString1);
    }
  }
  
  private static java.io.File get(String paramString)
  {
    java.io.File localFile = null;
    if (paramString == null) {
      return null;
    }
    String str = com.jingdong.aura.core.asm.http.f.e("com.jingdong.aura.AppDirectory");
    if (str != null) {
      localFile = new java.io.File(new java.io.File(str, "lib"), paramString);
    }
    if ((localFile != null) && (localFile.exists())) {
      return localFile;
    }
    if ((Item.this$0 != null) && (Item.this$0.getApplicationInfo() != null) && (this$0getApplicationInfonativeLibraryDir != null)) {
      return new java.io.File(this$0getApplicationInfonativeLibraryDir, paramString);
    }
    return localFile;
  }
  
  private static int getVersion()
  {
    PackageInfo localPackageInfo2;
    try
    {
      PackageInfo localPackageInfo1 = Item.this$0.getPackageManager().getPackageInfo(Item.this$0.getPackageName(), 0);
    }
    catch (Throwable localThrowable)
    {
      b.i("Error to get PackageInfo >>>", localThrowable);
      localPackageInfo2 = new PackageInfo();
    }
    return versionCode;
  }
}
