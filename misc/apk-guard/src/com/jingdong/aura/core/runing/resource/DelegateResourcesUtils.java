package com.jingdong.aura.core.runing.resource;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.ContextThemeWrapper;
import com.jingdong.aura.core.asm.i;
import com.jingdong.aura.core.reflection.Frame;
import com.jingdong.aura.core.reflection.Hack.d;
import com.jingdong.aura.core.reflection.Hack.e;
import com.jingdong.aura.core.runing.Item;
import com.jingdong.aura.core.runing.SupportActivity;
import com.jingdong.aura.core.util.rss.Attribute;
import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class DelegateResourcesUtils
{
  private static final com.jingdong.aura.core.util.rss.StringBuffer b = Attribute.getInstance(DelegateResourcesUtils.class);
  private static boolean isIgnoreBrands = ;
  
  public DelegateResourcesUtils() {}
  
  public static Resources constructResources(AssetManager paramAssetManager, Resources paramResources, Label paramLabel)
  {
    if ((paramResources != null) && (paramResources.getClass().getName().equals("android.content.res.MiuiResources")) && (Build.VERSION.SDK_INT < 29))
    {
      paramLabel = Class.forName("android.content.res.MiuiResources").getDeclaredConstructor(new Class[] { AssetManager.class, DisplayMetrics.class, Configuration.class });
      paramLabel.setAccessible(true);
      return (Resources)paramLabel.newInstance(new Object[] { paramAssetManager, paramResources.getDisplayMetrics(), paramResources.getConfiguration() });
    }
    return paramLabel.b(paramAssetManager, paramResources);
  }
  
  public static void ensureResourcesInjected(Activity paramActivity)
  {
    updateConfiguration(paramActivity);
    SupportActivity localSupportActivity = new SupportActivity(paramActivity.getBaseContext(), paramActivity.getClass().getClassLoader());
    if (com.jingdong.aura.core.reflection.ClassWriter.left != null) {}
    try
    {
      validateActivityResource(paramActivity);
      com.jingdong.aura.core.reflection.ClassWriter.left.get(paramActivity, Item.c);
      if ((com.jingdong.aura.core.reflection.ClassWriter.b != null) && (com.jingdong.aura.core.reflection.ClassWriter.b.p() != null)) {
        com.jingdong.aura.core.reflection.ClassWriter.b.get(paramActivity, localSupportActivity);
      }
      com.jingdong.aura.core.reflection.ClassWriter.E.get(paramActivity, localSupportActivity);
      return;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
  }
  
  private static List getApkAssets(AssetManager paramAssetManager)
  {
    ArrayList localArrayList = new ArrayList();
    try
    {
      Object localObject1 = Class.forName("android.content.res.ApkAssets");
      localObject1 = ((Class)localObject1).getDeclaredMethod("getAssetPath", new Class[0]);
      ((Method)localObject1).setAccessible(true);
      Object localObject2 = Class.forName("android.content.res.AssetManager");
      localObject2 = ((Class)localObject2).getDeclaredMethod("getApkAssets", new Class[0]);
      ((Method)localObject2).setAccessible(true);
      paramAssetManager = ((Method)localObject2).invoke(paramAssetManager, new Object[0]);
      paramAssetManager = (Object[])paramAssetManager;
      int j = paramAssetManager.length;
      int i = 0;
      while (i < j)
      {
        localObject2 = paramAssetManager[i];
        localObject2 = ((Method)localObject1).invoke(localObject2, new Object[0]);
        localObject2 = (String)localObject2;
        boolean bool = TextUtils.isEmpty((CharSequence)localObject2);
        if (!bool) {
          localArrayList.add(localObject2);
        }
        i += 1;
      }
      return localArrayList;
    }
    catch (Exception paramAssetManager)
    {
      paramAssetManager.printStackTrace();
      localArrayList.clear();
    }
    return localArrayList;
  }
  
  public static String getAssetHistoryPaths(Set paramSet)
  {
    if ((paramSet != null) && (!paramSet.isEmpty()))
    {
      StringBuffer localStringBuffer = new StringBuffer();
      localStringBuffer.append("newDelegateResources [");
      paramSet = paramSet.iterator();
      while (paramSet.hasNext())
      {
        String str = (String)paramSet.next();
        localStringBuffer.append(str);
        localStringBuffer.append("(");
        localStringBuffer.append(getFileLength(str));
        localStringBuffer.append("),");
      }
      if (localStringBuffer.length() > 0) {
        localStringBuffer.setLength(localStringBuffer.length() - 1);
      }
      localStringBuffer.append("]");
      return localStringBuffer.toString();
    }
    return "newDelegateResources []";
  }
  
  public static List getAssetPathFromResources(Resources paramResources)
  {
    Object localObject = com.jingdong.aura.core.reflection.ClassWriter.K;
    try
    {
      paramResources = ((Hack.d)localObject).get(paramResources);
      paramResources = (AssetManager)paramResources;
      paramResources = getOriginAssetsPath(paramResources);
      return paramResources;
    }
    catch (Exception paramResources)
    {
      localObject = b;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("DelegateResource");
      localStringBuilder.append(paramResources.getCause());
      ((com.jingdong.aura.core.util.rss.StringBuffer)localObject).append(localStringBuilder.toString());
    }
    return null;
  }
  
  public static Configuration getConfigurationRecursive(Context paramContext, int paramInt)
  {
    if (paramInt >= 15) {
      return null;
    }
    paramInt += 1;
    if ((paramContext instanceof SupportActivity)) {
      return getConfigurationRecursive(((SupportActivity)paramContext).getBaseContext(), paramInt);
    }
    com.jingdong.aura.core.util.rss.StringBuffer localStringBuffer = b;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("getConfigurationRecursive successfully with depth ");
    localStringBuilder.append(paramInt);
    localStringBuffer.append(localStringBuilder.toString());
    return paramContext.getResources().getConfiguration();
  }
  
  public static int getFieldValueOfR(Class paramClass, String paramString)
  {
    if (paramClass != null) {}
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      if (paramClass != null)
      {
        boolean bool = paramClass.isAccessible();
        if (!bool) {
          paramClass.setAccessible(true);
        }
        paramClass = paramClass.get(null);
        paramClass = (Integer)paramClass;
        int i = paramClass.intValue();
        return i;
      }
    }
    catch (NoSuchFieldException paramClass)
    {
      for (;;) {}
    }
    catch (IllegalAccessException paramClass)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException paramClass)
    {
      for (;;) {}
    }
    return 0;
  }
  
  public static long getFileLength(String paramString)
  {
    if (paramString == null) {
      return -2L;
    }
    paramString = new File(paramString);
    if (!paramString.exists()) {
      return -4L;
    }
    return paramString.length();
  }
  
  public static List getOriginAssetsPath(AssetManager paramAssetManager)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return getApkAssets(paramAssetManager);
    }
    ArrayList localArrayList = new ArrayList();
    try
    {
      Object localObject = paramAssetManager.getClass();
      localObject = ((Class)localObject).getDeclaredMethod("getStringBlockCount", new Class[0]);
      ((Method)localObject).setAccessible(true);
      localObject = ((Method)localObject).invoke(paramAssetManager, new Object[0]);
      localObject = (Integer)localObject;
      int k = ((Integer)localObject).intValue();
      int i = 0;
      while (i < k)
      {
        localObject = paramAssetManager.getClass();
        Class localClass = Integer.TYPE;
        localObject = ((Class)localObject).getMethod("getCookieName", new Class[] { localClass });
        int j = i + 1;
        localObject = ((Method)localObject).invoke(paramAssetManager, new Object[] { Integer.valueOf(j) });
        localObject = (String)localObject;
        boolean bool = TextUtils.isEmpty((CharSequence)localObject);
        i = j;
        if (!bool)
        {
          localArrayList.add(localObject);
          i = j;
        }
      }
      return localArrayList;
    }
    catch (Exception paramAssetManager)
    {
      paramAssetManager.printStackTrace();
      localArrayList.clear();
    }
    return localArrayList;
  }
  
  /* Error */
  public static Configuration getRawConfiguration(Activity paramActivity)
  {
    // Byte code:
    //   0: invokestatic 354	java/lang/System:nanoTime	()J
    //   3: lstore_1
    //   4: aload_0
    //   5: ifnull +169 -> 174
    //   8: aload_0
    //   9: invokevirtual 110	android/content/ContextWrapper:getBaseContext	()Landroid/content/Context;
    //   12: iconst_0
    //   13: invokestatic 281	com/jingdong/aura/core/runing/resource/DelegateResourcesUtils:getConfigurationRecursive	(Landroid/content/Context;I)Landroid/content/res/Configuration;
    //   16: astore_0
    //   17: invokestatic 354	java/lang/System:nanoTime	()J
    //   20: lstore_3
    //   21: getstatic 26	com/jingdong/aura/core/runing/resource/DelegateResourcesUtils:b	Lcom/jingdong/aura/core/util/rss/StringBuffer;
    //   24: astore 5
    //   26: new 258	java/lang/StringBuilder
    //   29: dup
    //   30: invokespecial 259	java/lang/StringBuilder:<init>	()V
    //   33: astore 6
    //   35: aload 6
    //   37: ldc_w 356
    //   40: invokevirtual 264	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   43: pop
    //   44: aload 6
    //   46: lload_3
    //   47: lload_1
    //   48: lsub
    //   49: invokevirtual 359	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   52: pop
    //   53: aload 6
    //   55: ldc_w 361
    //   58: invokevirtual 264	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   61: pop
    //   62: aload 5
    //   64: aload 6
    //   66: invokevirtual 272	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   69: invokeinterface 277 2 0
    //   74: aload_0
    //   75: areturn
    //   76: astore_0
    //   77: goto +38 -> 115
    //   80: astore_0
    //   81: getstatic 26	com/jingdong/aura/core/runing/resource/DelegateResourcesUtils:b	Lcom/jingdong/aura/core/util/rss/StringBuffer;
    //   84: ldc_w 362
    //   87: aload_0
    //   88: invokeinterface 366 3 0
    //   93: invokestatic 354	java/lang/System:nanoTime	()J
    //   96: lload_1
    //   97: lsub
    //   98: lstore_1
    //   99: getstatic 26	com/jingdong/aura/core/runing/resource/DelegateResourcesUtils:b	Lcom/jingdong/aura/core/util/rss/StringBuffer;
    //   102: astore_0
    //   103: new 258	java/lang/StringBuilder
    //   106: dup
    //   107: invokespecial 259	java/lang/StringBuilder:<init>	()V
    //   110: astore 5
    //   112: goto +81 -> 193
    //   115: invokestatic 354	java/lang/System:nanoTime	()J
    //   118: lstore_3
    //   119: getstatic 26	com/jingdong/aura/core/runing/resource/DelegateResourcesUtils:b	Lcom/jingdong/aura/core/util/rss/StringBuffer;
    //   122: astore 5
    //   124: new 258	java/lang/StringBuilder
    //   127: dup
    //   128: invokespecial 259	java/lang/StringBuilder:<init>	()V
    //   131: astore 6
    //   133: aload 6
    //   135: ldc_w 356
    //   138: invokevirtual 264	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   141: pop
    //   142: aload 6
    //   144: lload_3
    //   145: lload_1
    //   146: lsub
    //   147: invokevirtual 359	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   150: pop
    //   151: aload 6
    //   153: ldc_w 361
    //   156: invokevirtual 264	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   159: pop
    //   160: aload 5
    //   162: aload 6
    //   164: invokevirtual 272	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   167: invokeinterface 277 2 0
    //   172: aload_0
    //   173: athrow
    //   174: invokestatic 354	java/lang/System:nanoTime	()J
    //   177: lload_1
    //   178: lsub
    //   179: lstore_1
    //   180: getstatic 26	com/jingdong/aura/core/runing/resource/DelegateResourcesUtils:b	Lcom/jingdong/aura/core/util/rss/StringBuffer;
    //   183: astore_0
    //   184: new 258	java/lang/StringBuilder
    //   187: dup
    //   188: invokespecial 259	java/lang/StringBuilder:<init>	()V
    //   191: astore 5
    //   193: aload 5
    //   195: ldc_w 356
    //   198: invokevirtual 264	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   201: pop
    //   202: aload 5
    //   204: lload_1
    //   205: invokevirtual 359	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   208: pop
    //   209: aload 5
    //   211: ldc_w 361
    //   214: invokevirtual 264	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   217: pop
    //   218: aload_0
    //   219: aload 5
    //   221: invokevirtual 272	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   224: invokeinterface 277 2 0
    //   229: aconst_null
    //   230: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	231	0	paramActivity	Activity
    //   3	202	1	l1	long
    //   20	125	3	l2	long
    //   24	196	5	localObject	Object
    //   33	130	6	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   81	93	76	java/lang/Throwable
    //   8	17	80	java/lang/Throwable
  }
  
  public static int getResIdentifier(String paramString1, String paramString2, String paramString3, Map paramMap)
  {
    String str2 = paramString1;
    String str1 = paramString2;
    if (paramString2 == null)
    {
      str2 = paramString1;
      str1 = paramString2;
      if (paramString3 == null)
      {
        str2 = paramString1.substring(paramString1.indexOf("/") + 1);
        str1 = paramString1.substring(paramString1.indexOf(":") + 1, paramString1.indexOf("/"));
      }
    }
    if (!TextUtils.isEmpty(str2))
    {
      if (TextUtils.isEmpty(str1)) {
        return 0;
      }
      paramString1 = com.jingdong.aura.core.asm.http.f.c();
      if (paramString1 != null)
      {
        if (paramString1.isEmpty()) {
          break label307;
        }
        paramString1 = com.jingdong.aura.core.asm.http.f.c().iterator();
        while (paramString1.hasNext())
        {
          Object localObject = (org.osgi.framework.a)paramString1.next();
          paramString2 = ((org.osgi.framework.a)localObject).n();
          paramString3 = new StringBuilder();
          paramString3.append(paramString2);
          paramString3.append(":");
          paramString3.append(str2);
          paramString3 = paramString3.toString();
          int i;
          if ((paramMap.isEmpty()) && (paramMap.containsKey(paramString3)))
          {
            i = ((Integer)paramMap.get(paramString3)).intValue();
            if (i != 0) {
              return i;
            }
          }
          localObject = (i)localObject;
          if (((i)localObject).p().c())
          {
            localObject = ((i)localObject).get();
            if (localObject == null) {}
          }
          try
          {
            paramString2 = new StringBuilder(paramString2);
            paramString2.append(".R$");
            paramString2.append(str1);
            i = getFieldValueOfR(((ClassLoader)localObject).loadClass(paramString2.toString()), str2);
            if (i != 0)
            {
              paramMap.put(paramString3, Integer.valueOf(i));
              return i;
            }
          }
          catch (ClassNotFoundException paramString2)
          {
            for (;;) {}
          }
        }
      }
    }
    return 0;
    label307:
    return 0;
  }
  
  public static String getRuntimeAssetHistoryPaths()
  {
    Label localLabel = Label.a();
    if (localLabel == null) {
      return "";
    }
    if ((localLabel instanceof ClassWriter)) {
      return getAssetHistoryPaths(f);
    }
    if ((localLabel instanceof MethodWriter)) {
      return getAssetHistoryPaths(f);
    }
    return "";
  }
  
  public static boolean isLowLevel()
  {
    if (Build.VERSION.SDK_INT <= 20) {
      return true;
    }
    return (Build.VERSION.SDK_INT <= 27) && (isIgnoreBrands);
  }
  
  public static void printAssetPath(String paramString, Set paramSet, com.jingdong.aura.core.util.rss.StringBuffer paramStringBuffer)
  {
    if (paramStringBuffer == null) {
      return;
    }
    if (paramStringBuffer.accept())
    {
      paramSet = new StringBuilder(getAssetHistoryPaths(paramSet));
      if (paramString != null)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(" Add new path:");
        localStringBuilder.append(paramString);
        paramSet.append(localStringBuilder.toString());
      }
      paramStringBuffer.append(paramSet.toString());
    }
  }
  
  public static void tryAddAssetPath(AssetManager paramAssetManager, String paramString)
  {
    Hack.e localE = com.jingdong.aura.core.reflection.ClassWriter.k;
    try
    {
      int i = Integer.parseInt(localE.a(paramAssetManager, new Object[] { paramString }).toString());
      if (i == 0)
      {
        i = 0;
        while (i < 3)
        {
          localE = com.jingdong.aura.core.reflection.ClassWriter.k;
          int j = Integer.parseInt(localE.a(paramAssetManager, new Object[] { paramString }).toString());
          if (j != 0) {
            return;
          }
          if (i == 3) {
            com.jingdong.aura.core.asm.MethodWriter.d("com.jingdong.aura", "Add asset path failed", "DelegateResources.tryAddAssetPath", null);
          }
          i += 1;
        }
      }
      return;
    }
    catch (NumberFormatException paramAssetManager)
    {
      paramAssetManager.printStackTrace();
      com.jingdong.aura.core.asm.MethodWriter.d("com.jingdong.aura", "", "DelegateResources.tryAddAssetPath_2", paramAssetManager);
    }
  }
  
  public static void updateConfiguration(Activity paramActivity)
  {
    if (!com.jingdong.aura.core.asm.f.add())
    {
      b.append("not update configuration!");
      return;
    }
    Configuration localConfiguration1 = Item.c.getConfiguration();
    Configuration localConfiguration2 = paramActivity.getBaseContext().getResources().getConfiguration();
    if (!localConfiguration1.equals(localConfiguration2))
    {
      b.append("update configuration");
      Item.c.updateConfiguration(localConfiguration2, paramActivity.getBaseContext().getResources().getDisplayMetrics());
      return;
    }
    b.append("configuration not changed");
  }
  
  public static void updateResources(Application paramApplication, AssetManager paramAssetManager, Resources paramResources)
  {
    if ((Item.c == null) || (Item.c.getAssets() != paramAssetManager) || (!(Item.c instanceof ResourcesWrapper)))
    {
      Item.c = paramResources;
      Frame.a(paramApplication, paramResources);
    }
  }
  
  private static boolean validateActivityResource(Activity paramActivity)
  {
    i localI = (i)com.jingdong.aura.core.asm.http.f.d(com.jingdong.aura.core.data.f.get().a(paramActivity.getLocalClassName()));
    String str1;
    if (localI != null) {
      str1 = localI.p().a().getAbsolutePath();
    } else {
      str1 = null;
    }
    if (com.jingdong.aura.core.reflection.ClassWriter.left != null) {
      paramActivity = (Resources)com.jingdong.aura.core.reflection.ClassWriter.left.get(paramActivity);
    } else {
      paramActivity = paramActivity.getResources();
    }
    Object localObject = Item.c;
    if (paramActivity == localObject) {
      return true;
    }
    List localList1 = getAssetPathFromResources(paramActivity);
    String str2 = getRuntimeAssetHistoryPaths();
    List localList2 = getAssetPathFromResources((Resources)localObject);
    if ((str1 != null) && (localList1 != null) && (!localList1.contains(str1)))
    {
      paramActivity = new StringBuilder();
      paramActivity.append("Activity Resources path not contains:");
      paramActivity.append(localI.p().a().getAbsolutePath());
      localObject = paramActivity.toString();
      paramActivity = (Activity)localObject;
      if (!str2.contains(str1))
      {
        paramActivity = new StringBuilder();
        paramActivity.append((String)localObject);
        paramActivity.append("paths in history not contains:");
        paramActivity.append(localI.p().a().getAbsolutePath());
        paramActivity = paramActivity.toString();
      }
      localObject = paramActivity;
      if (!localList2.contains(str1))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramActivity);
        ((StringBuilder)localObject).append("paths in runtime not contains:");
        ((StringBuilder)localObject).append(localI.p().a().getAbsolutePath());
        localObject = ((StringBuilder)localObject).toString();
      }
      paramActivity = (Activity)localObject;
      if (!localI.p().a().exists())
      {
        paramActivity = new StringBuilder();
        paramActivity.append((String)localObject);
        paramActivity.append("  Bundle archive file not exist:");
        paramActivity.append(localI.p().a().getAbsolutePath());
        paramActivity = paramActivity.toString();
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramActivity);
      ((StringBuilder)localObject).append(" Activity Resources paths length:");
      ((StringBuilder)localObject).append(localList1.size());
      paramActivity = ((StringBuilder)localObject).toString();
    }
    else
    {
      paramActivity = null;
    }
    if (paramActivity == null) {
      return true;
    }
    com.jingdong.aura.core.asm.MethodWriter.d(localI.n(), "", "InstrumentationHook.validateActivityResource", null);
    return false;
  }
}
