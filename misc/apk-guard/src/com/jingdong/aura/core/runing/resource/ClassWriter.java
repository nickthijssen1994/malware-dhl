package com.jingdong.aura.core.runing.resource;

import android.app.Application;
import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.text.TextUtils;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.asm.l;
import com.jingdong.aura.core.reflection.Hack.e;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

public class ClassWriter
  extends Label
{
  private final StringBuffer b = Attribute.getInstance(f.class);
  Set<String> f;
  ArrayList<AssetManager> n = new ArrayList();
  
  public ClassWriter() {}
  
  private AssetManager a(Application paramApplication, String paramString)
  {
    if (DelegateResourcesUtils.isLowLevel())
    {
      paramApplication = get(paramApplication, paramString);
      if (paramApplication == null)
      {
        DelegateResourcesUtils.printAssetPath(paramString, f, b);
        return null;
      }
      f = paramApplication;
      paramString = (AssetManager)AssetManager.class.newInstance();
      paramApplication = paramApplication.iterator();
      while (paramApplication.hasNext()) {
        DelegateResourcesUtils.tryAddAssetPath(paramString, (String)paramApplication.next());
      }
      return paramString;
    }
    Object localObject = paramApplication.getAssets();
    if (f == null)
    {
      f = a(paramApplication);
      paramString = (AssetManager)AssetManager.class.newInstance();
      localObject = f.iterator();
      for (;;)
      {
        paramApplication = paramString;
        if (!((Iterator)localObject).hasNext()) {
          break;
        }
        DelegateResourcesUtils.tryAddAssetPath(paramString, (String)((Iterator)localObject).next());
      }
    }
    paramApplication = (Application)localObject;
    if (!TextUtils.isEmpty(paramString))
    {
      paramApplication = (Application)localObject;
      if (!f.contains(paramString))
      {
        DelegateResourcesUtils.tryAddAssetPath((AssetManager)localObject, paramString);
        f.add(paramString);
        paramApplication = (Application)localObject;
      }
    }
    return paramApplication;
  }
  
  private Set a(Application paramApplication)
  {
    LinkedHashSet localLinkedHashSet = new LinkedHashSet();
    localLinkedHashSet.add(getApplicationInfosourceDir);
    try
    {
      Object localObject = DelegateResourcesUtils.getOriginAssetsPath(paramApplication.getResources().getAssets());
      paramApplication = new ArrayList();
      if (localObject != null)
      {
        localObject = ((List)localObject).iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject).hasNext();
          if (!bool) {
            break;
          }
          String str = (String)((Iterator)localObject).next();
          if (str != null)
          {
            bool = l.a(str);
            if (!bool)
            {
              bool = str.toLowerCase().contains("/system/framework");
              if (!bool)
              {
                bool = str.toLowerCase().contains("/system/app");
                if (!bool) {}
              }
              else
              {
                paramApplication.add(str);
              }
            }
          }
        }
      }
      localLinkedHashSet.addAll(paramApplication);
      return localLinkedHashSet;
    }
    catch (Throwable paramApplication)
    {
      b.i("get original asset path exception:", paramApplication);
      MethodWriter.d("com.jingdong.aura", "get original asset path exception", "DelegateResources.generateNewAssetPath", paramApplication);
    }
    return localLinkedHashSet;
  }
  
  private void a(String paramString)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString);
      if (!bool)
      {
        Object localObject = com.jingdong.aura.core.reflection.ClassWriter.k;
        if (localObject != null)
        {
          localObject = com.jingdong.aura.core.reflection.ClassWriter.l;
          if (localObject != null)
          {
            int i = Build.VERSION.SDK_INT;
            if (i > 20)
            {
              localObject = (AssetManager)AssetManager.class.newInstance();
              com.jingdong.aura.core.reflection.ClassWriter.k.a(localObject, new Object[] { paramString });
              com.jingdong.aura.core.reflection.ClassWriter.l.a(localObject, new Object[0]);
              n.add(localObject);
              return;
            }
          }
        }
      }
    }
    catch (Throwable paramString) {}
  }
  
  private void c(Application paramApplication, Resources paramResources, String paramString)
  {
    AssetManager localAssetManager = a(paramApplication, paramString);
    DelegateResourcesUtils.updateResources(paramApplication, localAssetManager, DelegateResourcesUtils.constructResources(localAssetManager, paramResources, this));
    a(paramString);
    DelegateResourcesUtils.printAssetPath(paramString, f, b);
  }
  
  private Set get(Application paramApplication, String paramString)
  {
    if (paramString != null)
    {
      localObject = f;
      if ((localObject != null) && (((Set)localObject).contains(paramString))) {
        return null;
      }
    }
    Object localObject = new LinkedHashSet();
    ((Set)localObject).add(getApplicationInfosourceDir);
    paramApplication = f;
    if (paramApplication != null) {
      ((Set)localObject).addAll(paramApplication);
    }
    if (paramString != null) {
      ((Set)localObject).add(paramString);
    }
    return localObject;
  }
  
  ResourcesWrapper b(AssetManager paramAssetManager, Resources paramResources)
  {
    return new Chart(paramAssetManager, paramResources);
  }
  
  protected void b(Application paramApplication, Resources paramResources, String paramString)
  {
    c(paramApplication, paramResources, paramString);
  }
}
