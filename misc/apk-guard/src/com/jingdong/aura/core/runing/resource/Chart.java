package com.jingdong.aura.core.runing.resource;

import android.content.res.AssetManager;
import android.content.res.Resources;
import com.jingdong.aura.core.reflection.Hack.e;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class Chart
  extends ResourcesWrapper
{
  private Map<String, Integer> data = new ConcurrentHashMap();
  
  Chart(AssetManager paramAssetManager, Resources paramResources)
  {
    super(paramAssetManager, paramResources);
  }
  
  public int getIdentifier(String paramString1, String paramString2, String paramString3)
  {
    int j = super.getIdentifier(paramString1, paramString2, paramString3);
    if (j != 0) {
      return j;
    }
    if (com.jingdong.aura.core.reflection.ClassWriter.u == null) {
      return DelegateResourcesUtils.getResIdentifier(paramString1, paramString2, paramString3, data);
    }
    Object localObject1 = Label.a();
    if (localObject1 != null)
    {
      if (!(localObject1 instanceof ClassWriter)) {
        return 0;
      }
      localObject1 = (ClassWriter)localObject1;
      int i = 0;
      while (i < n.size())
      {
        Object localObject2 = (AssetManager)n.get(i);
        Hack.e localE = com.jingdong.aura.core.reflection.ClassWriter.u;
        try
        {
          localObject2 = localE.a(localObject2, new Object[] { paramString1, paramString2, paramString3 });
          localObject2 = (Integer)localObject2;
          int k = ((Integer)localObject2).intValue();
          j = k;
        }
        catch (Exception localException)
        {
          for (;;) {}
        }
        if (j != 0) {
          return j;
        }
        i += 1;
      }
      return DelegateResourcesUtils.getResIdentifier(paramString1, paramString2, paramString3, data);
    }
    else
    {
      return 0;
    }
  }
}
