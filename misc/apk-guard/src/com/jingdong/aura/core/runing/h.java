package com.jingdong.aura.core.runing;

import android.content.res.XmlResourceParser;
import android.os.BaseBundle;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.xmlpull.v1.XmlPullParser;

public class h
{
  static StringBuffer b = Attribute.getInstance("PackageLite");
  public Bundle a = new Bundle();
  public final Set<String> c = new HashSet();
  public final Set<String> e = new HashSet();
  public final Set<String> f = new HashSet();
  public String i;
  public int index;
  public final Set<String> n = new HashSet();
  public final Set<String> p = new HashSet();
  public int pattern;
  public final Set<String> r = new HashSet();
  public final Set<String> s = new HashSet();
  public int v;
  public String x;
  public int y;
  public String z;
  
  h() {}
  
  public static com.jingdong.aura.core.data.h a(String paramString1, String paramString2)
  {
    if (paramString1 != null)
    {
      if (paramString2 == null) {
        return null;
      }
      Object localObject = new java.io.File(paramString1);
      if (((java.io.File)localObject).exists())
      {
        h localH = a((java.io.File)localObject);
        if (localH != null)
        {
          paramString1 = new com.jingdong.aura.core.data.h();
          a = i;
          v = z;
          i = y;
          s = unzip((java.io.File)localObject);
          h = x;
          k = paramString2;
          c = ((java.io.File)localObject).length();
          d = 2;
          e = null;
          b = new ArrayList();
          b.addAll(c);
          f = new ArrayList();
          f.addAll(f);
          r = new ArrayList();
          r.addAll(p);
          q = new ArrayList();
          q.addAll(r);
          g = new ArrayList();
          g.addAll(s);
          p = new ArrayList();
          p.addAll(n);
          n = new ArrayList();
          paramString2 = b;
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("bundleInfo =");
          ((StringBuilder)localObject).append(paramString1);
          paramString2.i(((StringBuilder)localObject).toString());
          paramString2 = a;
          if ((paramString2 != null) && (paramString2.get("dependency") != null))
          {
            paramString2 = a.get("dependency").toString();
            if (!TextUtils.isEmpty(paramString2))
            {
              paramString2 = paramString2.split(",");
              n.addAll(Arrays.asList(paramString2));
            }
          }
          j = new ArrayList();
          paramString2 = a;
          if ((paramString2 != null) && (paramString2.get("auraDependentSo") != null))
          {
            paramString2 = a.get("auraDependentSo").toString();
            if (!TextUtils.isEmpty(paramString2))
            {
              paramString2 = paramString2.split(",");
              j.addAll(Arrays.asList(paramString2));
            }
          }
          return paramString1;
        }
      }
    }
    return null;
  }
  
  /* Error */
  public static h a(java.io.File paramFile)
  {
    // Byte code:
    //   0: ldc -51
    //   2: invokevirtual 211	java/lang/Class:newInstance	()Ljava/lang/Object;
    //   5: astore_2
    //   6: aload_2
    //   7: checkcast 205	android/content/res/AssetManager
    //   10: astore 4
    //   12: ldc -51
    //   14: ldc -43
    //   16: iconst_1
    //   17: anewarray 207	java/lang/Class
    //   20: dup
    //   21: iconst_0
    //   22: ldc -72
    //   24: aastore
    //   25: invokevirtual 217	java/lang/Class:getMethod	(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   28: astore_2
    //   29: aload_0
    //   30: invokevirtual 220	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   33: astore_3
    //   34: aload_2
    //   35: aload 4
    //   37: iconst_1
    //   38: anewarray 4	java/lang/Object
    //   41: dup
    //   42: iconst_0
    //   43: aload_3
    //   44: aastore
    //   45: invokevirtual 226	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   48: astore_2
    //   49: aload_2
    //   50: checkcast 228	java/lang/Integer
    //   53: astore_2
    //   54: aload_2
    //   55: invokevirtual 232	java/lang/Integer:intValue	()I
    //   58: istore_1
    //   59: aload 4
    //   61: iload_1
    //   62: ldc -22
    //   64: invokevirtual 238	android/content/res/AssetManager:openXmlResourceParser	(ILjava/lang/String;)Landroid/content/res/XmlResourceParser;
    //   67: astore 5
    //   69: aload 5
    //   71: astore_2
    //   72: aload_2
    //   73: astore_3
    //   74: invokestatic 243	com/jingdong/aura/core/shadow/b:a	()Lcom/jingdong/aura/core/shadow/b;
    //   77: aload 4
    //   79: iload_1
    //   80: aload_0
    //   81: invokevirtual 220	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   84: invokevirtual 247	com/jingdong/aura/core/shadow/b:doInBackground	(Landroid/content/res/AssetManager;ILjava/lang/String;)V
    //   87: aload 5
    //   89: ifnull +56 -> 145
    //   92: aload_2
    //   93: astore_3
    //   94: aload 5
    //   96: invokestatic 251	com/jingdong/aura/core/runing/h:read	(Landroid/content/res/XmlResourceParser;)Lcom/jingdong/aura/core/runing/h;
    //   99: astore 6
    //   101: aload 6
    //   103: astore 4
    //   105: aload 6
    //   107: ifnonnull +14 -> 121
    //   110: aload_2
    //   111: astore_3
    //   112: new 2	com/jingdong/aura/core/runing/h
    //   115: dup
    //   116: invokespecial 252	com/jingdong/aura/core/runing/h:<init>	()V
    //   119: astore 4
    //   121: aload_2
    //   122: astore_3
    //   123: aload 5
    //   125: invokeinterface 257 1 0
    //   130: aload 5
    //   132: ifnull +193 -> 325
    //   135: aload 5
    //   137: invokeinterface 257 1 0
    //   142: aload 4
    //   144: areturn
    //   145: aload 5
    //   147: ifnull +181 -> 328
    //   150: goto +154 -> 304
    //   153: astore 4
    //   155: goto +13 -> 168
    //   158: astore_0
    //   159: aconst_null
    //   160: astore_3
    //   161: goto +152 -> 313
    //   164: astore 4
    //   166: aconst_null
    //   167: astore_2
    //   168: aload_2
    //   169: astore_3
    //   170: aload 4
    //   172: invokevirtual 260	java/lang/Exception:printStackTrace	()V
    //   175: aload_0
    //   176: ifnull +74 -> 250
    //   179: aload_2
    //   180: astore_3
    //   181: new 147	java/lang/StringBuilder
    //   184: dup
    //   185: invokespecial 148	java/lang/StringBuilder:<init>	()V
    //   188: astore 5
    //   190: aload_2
    //   191: astore_3
    //   192: aload 5
    //   194: ldc_w 262
    //   197: invokevirtual 154	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   200: pop
    //   201: aload_2
    //   202: astore_3
    //   203: aload 5
    //   205: aload_0
    //   206: invokevirtual 220	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   209: invokevirtual 154	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   212: pop
    //   213: aload_2
    //   214: astore_3
    //   215: aload 5
    //   217: ldc_w 264
    //   220: invokevirtual 154	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   223: pop
    //   224: aload_2
    //   225: astore_3
    //   226: aload 5
    //   228: aload_0
    //   229: invokevirtual 220	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   232: invokestatic 269	com/jingdong/aura/core/util/File:read	(Ljava/lang/String;)Ljava/lang/String;
    //   235: invokevirtual 154	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   238: pop
    //   239: aload_2
    //   240: astore_3
    //   241: aload 5
    //   243: invokevirtual 161	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   246: astore_0
    //   247: goto +40 -> 287
    //   250: aload_2
    //   251: astore_3
    //   252: new 147	java/lang/StringBuilder
    //   255: dup
    //   256: invokespecial 148	java/lang/StringBuilder:<init>	()V
    //   259: astore_0
    //   260: aload_2
    //   261: astore_3
    //   262: aload_0
    //   263: ldc_w 262
    //   266: invokevirtual 154	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   269: pop
    //   270: aload_2
    //   271: astore_3
    //   272: aload_0
    //   273: ldc_w 271
    //   276: invokevirtual 154	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   279: pop
    //   280: aload_2
    //   281: astore_3
    //   282: aload_0
    //   283: invokevirtual 161	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   286: astore_0
    //   287: aload_2
    //   288: astore_3
    //   289: ldc 30
    //   291: aload_0
    //   292: ldc_w 273
    //   295: aload 4
    //   297: invokestatic 278	com/jingdong/aura/core/asm/MethodWriter:d	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   300: aload_2
    //   301: ifnull +27 -> 328
    //   304: aload_2
    //   305: invokeinterface 257 1 0
    //   310: aconst_null
    //   311: areturn
    //   312: astore_0
    //   313: aload_3
    //   314: ifnull +9 -> 323
    //   317: aload_3
    //   318: invokeinterface 257 1 0
    //   323: aload_0
    //   324: athrow
    //   325: aload 4
    //   327: areturn
    //   328: aconst_null
    //   329: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	330	0	paramFile	java.io.File
    //   58	22	1	j	int
    //   5	300	2	localObject1	Object
    //   33	285	3	localObject2	Object
    //   10	133	4	localObject3	Object
    //   153	1	4	localException1	Exception
    //   164	162	4	localException2	Exception
    //   67	175	5	localObject4	Object
    //   99	7	6	localH	h
    // Exception table:
    //   from	to	target	type
    //   74	87	153	java/lang/Exception
    //   94	101	153	java/lang/Exception
    //   112	121	153	java/lang/Exception
    //   123	130	153	java/lang/Exception
    //   0	6	158	java/lang/Throwable
    //   6	12	158	java/lang/Throwable
    //   12	29	158	java/lang/Throwable
    //   29	34	158	java/lang/Throwable
    //   34	49	158	java/lang/Throwable
    //   54	69	158	java/lang/Throwable
    //   0	6	164	java/lang/Exception
    //   12	29	164	java/lang/Exception
    //   29	34	164	java/lang/Exception
    //   34	49	164	java/lang/Exception
    //   54	69	164	java/lang/Exception
    //   74	87	312	java/lang/Throwable
    //   94	101	312	java/lang/Throwable
    //   112	121	312	java/lang/Throwable
    //   123	130	312	java/lang/Throwable
    //   170	175	312	java/lang/Throwable
    //   181	190	312	java/lang/Throwable
    //   192	201	312	java/lang/Throwable
    //   203	213	312	java/lang/Throwable
    //   215	224	312	java/lang/Throwable
    //   226	239	312	java/lang/Throwable
    //   241	247	312	java/lang/Throwable
    //   252	260	312	java/lang/Throwable
    //   262	270	312	java/lang/Throwable
    //   272	280	312	java/lang/Throwable
    //   282	287	312	java/lang/Throwable
    //   289	300	312	java/lang/Throwable
  }
  
  private static void a(h paramH, String paramString1, String paramString2)
  {
    if (!TextUtils.isEmpty(paramString1))
    {
      if (TextUtils.isEmpty(paramString2)) {
        return;
      }
      int j = -1;
      int k = paramString1.hashCode();
      if (k != -1655966961)
      {
        if (k != -987494927)
        {
          if (k != -808719889)
          {
            if ((k == 1984153269) && (paramString1.equals("service"))) {
              j = 1;
            }
          }
          else if (paramString1.equals("receiver")) {
            j = 3;
          }
        }
        else if (paramString1.equals("provider")) {
          j = 2;
        }
      }
      else if (paramString1.equals("activity")) {
        j = 0;
      }
      switch (j)
      {
      default: 
        return;
      case 3: 
        n.add(paramString2);
        return;
      case 2: 
        s.add(paramString2);
        return;
      case 1: 
        r.add(paramString2);
        return;
      }
      p.add(paramString2);
    }
  }
  
  private static void a(h paramH, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet)
  {
    int i1 = 0;
    String str1 = null;
    paramXmlPullParser = null;
    int k = 0;
    String str2;
    Object localObject;
    int j;
    for (int m = 0;; m = j)
    {
      str2 = str1;
      localObject = paramXmlPullParser;
      if (k >= paramAttributeSet.getAttributeCount()) {
        break;
      }
      str2 = paramAttributeSet.getAttributeName(k);
      if (str2.equals("name"))
      {
        localObject = paramAttributeSet.getAttributeValue(k);
        j = m + 1;
      }
      else
      {
        localObject = paramXmlPullParser;
        j = m;
        if (str2.equals("value"))
        {
          str1 = paramAttributeSet.getAttributeValue(k);
          j = m + 1;
          localObject = paramXmlPullParser;
        }
      }
      if (j >= 2)
      {
        str2 = str1;
        break;
      }
      k += 1;
      paramXmlPullParser = (XmlPullParser)localObject;
    }
    if ((localObject != null) && (str2 != null))
    {
      if ((!"auraFragment".equals(localObject)) && (!"manualComponents".equals(localObject)))
      {
        a.putString((String)localObject, str2);
        return;
      }
      paramXmlPullParser = str2.split(",");
      k = paramXmlPullParser.length;
      j = i1;
      while (j < k)
      {
        paramAttributeSet = paramXmlPullParser[j];
        f.add(paramAttributeSet.trim());
        j += 1;
      }
    }
  }
  
  private static void a(h paramH, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, boolean paramBoolean, String paramString)
  {
    String str2 = i;
    int j = 0;
    while (j < paramAttributeSet.getAttributeCount())
    {
      if (paramAttributeSet.getAttributeName(j).equals("name"))
      {
        String str1 = paramAttributeSet.getAttributeValue(j);
        paramXmlPullParser = str1;
        if (str1.startsWith(".")) {
          paramXmlPullParser = str2.concat(str1);
        }
        a(paramH, paramString, paramXmlPullParser);
        c.add(paramXmlPullParser);
        if (paramBoolean) {
          e.add(paramXmlPullParser);
        }
      }
      j += 1;
    }
  }
  
  private static String get(String paramString, CharSequence paramCharSequence)
  {
    if ((paramCharSequence != null) && (paramCharSequence.length() > 0))
    {
      paramCharSequence = paramCharSequence.toString();
      int j = paramCharSequence.charAt(0);
      if (j == 46)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString);
        ((StringBuilder)localObject).append(paramCharSequence);
        return ((StringBuilder)localObject).toString().intern();
      }
      if (paramCharSequence.indexOf('.') < 0)
      {
        paramString = new StringBuilder(paramString);
        paramString.append('.');
        paramString.append(paramCharSequence);
        return paramString.toString().intern();
      }
      if ((j >= 97) && (j <= 122)) {
        return paramCharSequence.intern();
      }
      localObject = System.out;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Bad class name ");
      localStringBuilder.append(paramCharSequence);
      localStringBuilder.append(" in package ");
      localStringBuilder.append(paramString);
      ((PrintStream)localObject).println(localStringBuilder.toString());
      return null;
    }
    paramCharSequence = System.out;
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Empty class name in package ");
    ((StringBuilder)localObject).append(paramString);
    paramCharSequence.println(((StringBuilder)localObject).toString());
    return null;
  }
  
  private static void parse(XmlResourceParser paramXmlResourceParser, h paramH)
  {
    int j = 0;
    while (j < paramXmlResourceParser.getAttributeCount())
    {
      String str = paramXmlResourceParser.getAttributeName(j);
      if (str.equalsIgnoreCase("package")) {
        i = paramXmlResourceParser.getAttributeValue(j);
      }
      if (str.equals("versionCode")) {
        y = paramXmlResourceParser.getAttributeIntValue(j, 0);
      } else if (str.equals("versionName")) {
        z = paramXmlResourceParser.getAttributeValue(j);
      }
      j += 1;
    }
  }
  
  private static boolean parse(h paramH, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet)
  {
    String str1 = i;
    int j = 0;
    while (j < paramAttributeSet.getAttributeCount())
    {
      String str2 = paramAttributeSet.getAttributeName(j);
      if (str2.equals("name")) {
        x = get(str1, paramAttributeSet.getAttributeValue(j));
      } else if (str2.equals("icon")) {
        v = paramAttributeSet.getAttributeResourceValue(j, 0);
      } else if (str2.equals("label")) {
        index = paramAttributeSet.getAttributeResourceValue(j, 0);
      } else if (str2.equals("description")) {
        pattern = paramAttributeSet.getAttributeResourceValue(j, 0);
      }
      j += 1;
    }
    j = paramXmlPullParser.getDepth();
    for (;;)
    {
      int k = paramXmlPullParser.next();
      if ((k == 1) || ((k == 3) && (paramXmlPullParser.getDepth() <= j))) {
        break;
      }
      if ((k != 3) && (k != 4))
      {
        str1 = paramXmlPullParser.getName();
        if (str1.equals("activity")) {
          a(paramH, paramXmlPullParser, paramAttributeSet, false, str1);
        } else if (str1.equals("receiver")) {
          a(paramH, paramXmlPullParser, paramAttributeSet, true, str1);
        } else if (str1.equals("service")) {
          a(paramH, paramXmlPullParser, paramAttributeSet, true, str1);
        } else if (str1.equals("provider")) {
          a(paramH, paramXmlPullParser, paramAttributeSet, false, str1);
        } else if (!str1.equals("activity-alias")) {
          if (paramXmlPullParser.getName().equals("meta-data")) {
            a(paramH, paramXmlPullParser, paramAttributeSet);
          } else if (!str1.equals("uses-library")) {
            str1.equals("uses-package");
          }
        }
      }
    }
    return true;
  }
  
  protected static h read(XmlResourceParser paramXmlResourceParser)
  {
    int j = paramXmlResourceParser.next();
    h localH = new h();
    while (j != 1)
    {
      switch (j)
      {
      default: 
        break;
      case 2: 
        if (paramXmlResourceParser.getName().equals("manifest")) {
          parse(paramXmlResourceParser, localH);
        }
        if (paramXmlResourceParser.getName().equals("application"))
        {
          if (!parse(localH, paramXmlResourceParser, paramXmlResourceParser)) {
            return null;
          }
          return localH;
        }
        break;
      case 1: 
        paramXmlResourceParser.close();
      }
      j = paramXmlResourceParser.next();
    }
    return localH;
  }
  
  public static boolean unzip(java.io.File paramFile)
  {
    Object localObject3 = null;
    Enumeration localEnumeration = null;
    Object localObject1;
    try
    {
      paramFile = new ZipFile(paramFile);
      try
      {
        localEnumeration = paramFile.entries();
        boolean bool;
        do
        {
          Object localObject2;
          do
          {
            bool = localEnumeration.hasMoreElements();
            if (!bool) {
              break;
            }
            localObject2 = localEnumeration.nextElement();
            localObject2 = (ZipEntry)localObject2;
            localObject2 = ((ZipEntry)localObject2).getName();
          } while (localObject2 == null);
          bool = ((String)localObject2).endsWith(".so");
        } while (!bool);
        com.jingdong.aura.core.util.File.read(paramFile);
        return true;
        com.jingdong.aura.core.util.File.read(paramFile);
        return false;
      }
      catch (Throwable localThrowable1)
      {
        break label107;
      }
      catch (IOException localIOException1) {}
      localObject1 = paramFile;
    }
    catch (Throwable localThrowable2)
    {
      paramFile = localThrowable1;
      localObject1 = localThrowable2;
    }
    catch (IOException localIOException2)
    {
      paramFile = localObject3;
    }
    localIOException2.printStackTrace();
    com.jingdong.aura.core.util.File.read(paramFile);
    return false;
    label107:
    com.jingdong.aura.core.util.File.read(paramFile);
    throw ((Throwable)localObject1);
  }
}
