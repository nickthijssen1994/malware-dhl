package com.jingdong.aura.core.runing.resource;

import android.app.Application;
import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.text.TextUtils;
import com.jingdong.aura.core.asm.l;
import com.jingdong.aura.core.reflection.Frame;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

public class MethodWriter
  extends Label
{
  private final StringBuffer b = Attribute.getInstance(g.class);
  private List<String> e = null;
  Set<String> f;
  
  public MethodWriter() {}
  
  private Set a(Application paramApplication, String paramString)
  {
    if (paramString != null)
    {
      localObject1 = f;
      if ((localObject1 != null) && (((Set)localObject1).contains(paramString))) {
        return null;
      }
    }
    Object localObject1 = new LinkedHashSet();
    ((Set)localObject1).add(getApplicationInfosourceDir);
    try
    {
      boolean bool = DelegateResourcesUtils.isLowLevel();
      if (!bool)
      {
        Object localObject2 = e;
        if (localObject2 == null)
        {
          paramApplication = DelegateResourcesUtils.getOriginAssetsPath(paramApplication.getResources().getAssets());
          if (paramApplication != null)
          {
            e = new ArrayList();
            paramApplication = paramApplication.iterator();
            for (;;)
            {
              bool = paramApplication.hasNext();
              if (!bool) {
                break;
              }
              localObject2 = (String)paramApplication.next();
              if (localObject2 != null)
              {
                bool = l.a((String)localObject2);
                if (!bool) {
                  e.add(localObject2);
                }
              }
            }
          }
          paramApplication = e;
          if (paramApplication != null) {
            ((Set)localObject1).addAll(e);
          }
        }
      }
    }
    catch (Throwable paramApplication)
    {
      b.i("get original asset path exception:", paramApplication);
      com.jingdong.aura.core.asm.MethodWriter.d("com.jingdong.aura", "get original asset path exception", "DelegateResources.generateNewAssetPath", paramApplication);
    }
    paramApplication = f;
    if (paramApplication != null) {
      ((Set)localObject1).addAll(paramApplication);
    }
    if (paramString != null) {
      ((Set)localObject1).add(paramString);
    }
    return localObject1;
  }
  
  private void d(Application paramApplication, Resources paramResources, String paramString)
  {
    if ((f != null) && (!DelegateResourcesUtils.isLowLevel()))
    {
      if ((!TextUtils.isEmpty(paramString)) && (!f.contains(paramString)))
      {
        DelegateResourcesUtils.tryAddAssetPath(paramApplication.getAssets(), paramString);
        f.add(paramString);
      }
    }
    else
    {
      Object localObject = a(paramApplication, paramString);
      if (localObject == null)
      {
        DelegateResourcesUtils.printAssetPath(paramString, f, b);
        return;
      }
      f = ((Set)localObject);
      AssetManager localAssetManager = (AssetManager)AssetManager.class.newInstance();
      localObject = ((Set)localObject).iterator();
      while (((Iterator)localObject).hasNext()) {
        DelegateResourcesUtils.tryAddAssetPath(localAssetManager, (String)((Iterator)localObject).next());
      }
      paramResources = DelegateResourcesUtils.constructResources(localAssetManager, paramResources, this);
      com.jingdong.aura.core.runing.Item.c = paramResources;
      Frame.a(paramApplication, paramResources);
    }
    DelegateResourcesUtils.printAssetPath(paramString, f, b);
  }
  
  ResourcesWrapper b(AssetManager paramAssetManager, Resources paramResources)
  {
    return new AsynchronousValidationRequest(paramAssetManager, paramResources);
  }
  
  protected void b(Application paramApplication, Resources paramResources, String paramString)
  {
    d(paramApplication, paramResources, paramString);
  }
}
