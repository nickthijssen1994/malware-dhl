package com.jingdong.aura.core.runing;

import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.util.FakeProvider;
import com.jingdong.aura.core.util.FakeReceiver;
import com.jingdong.aura.core.util.FakeService;
import com.jingdong.aura.core.util.Frame;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import dalvik.system.PathClassLoader;
import java.util.Iterator;
import java.util.List;
import org.osgi.framework.a;

public class Label
  extends PathClassLoader
{
  private static final StringBuffer b = Attribute.getInstance(e.class);
  
  public Label(ClassLoader paramClassLoader)
  {
    super(".", paramClassLoader);
  }
  
  private String a()
  {
    StringBuilder localStringBuilder = new StringBuilder("installed bundles: ");
    Object localObject = com.jingdong.aura.core.asm.http.f.c();
    if ((localObject != null) && (!((List)localObject).isEmpty()))
    {
      localObject = com.jingdong.aura.core.asm.http.f.c().iterator();
      while (((Iterator)localObject).hasNext())
      {
        localStringBuilder.append(((a)((Iterator)localObject).next()).n());
        localStringBuilder.append(":");
      }
    }
    return localStringBuilder.toString();
  }
  
  protected Class findClass(String paramString)
  {
    Object localObject1 = b;
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append("will find class name = ");
    ((StringBuilder)localObject2).append(paramString);
    ((StringBuffer)localObject1).i(((StringBuilder)localObject2).toString());
    f.d(paramString);
    localObject1 = f.a(paramString);
    if (localObject1 != null) {
      return localObject1;
    }
    localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("Can't find class ");
    ((StringBuilder)localObject1).append(paramString);
    ((StringBuilder)localObject1).append(". ");
    ((StringBuilder)localObject1).append(a());
    ((StringBuilder)localObject1).append(" ");
    ((StringBuilder)localObject1).append(f.doInBackground(paramString));
    localObject1 = new ClassNotFoundException(((StringBuilder)localObject1).toString());
    if (Frame.get(paramString))
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("findClass receiver failed ");
      ((StringBuilder)localObject2).append(paramString);
      MethodWriter.d("ClassNotFound", ((StringBuilder)localObject2).toString(), "DelegateClassLoader.findClass", (Throwable)localObject1);
      return new FakeReceiver().getClass();
    }
    if (Frame.init(paramString))
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("findClass service failed ");
      ((StringBuilder)localObject2).append(paramString);
      MethodWriter.d("ClassNotFound", ((StringBuilder)localObject2).toString(), "DelegateClassLoader.findClass", (Throwable)localObject1);
      return new FakeService().getClass();
    }
    if (Frame.enable(paramString))
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("findClass provider failed ");
      ((StringBuilder)localObject2).append(paramString);
      MethodWriter.d("ClassNotFound", ((StringBuilder)localObject2).toString(), "DelegateClassLoader.findClass", (Throwable)localObject1);
      return new FakeProvider().getClass();
    }
    localObject2 = b;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Can't find class ");
    localStringBuilder.append(paramString);
    ((StringBuffer)localObject2).i(localStringBuilder.toString());
    throw ((Throwable)localObject1);
  }
  
  public Class loadClass(String paramString)
  {
    StringBuffer localStringBuffer = b;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("will loadClass class name = ");
    localStringBuilder.append(paramString);
    localStringBuffer.toString(localStringBuilder.toString());
    return super.loadClass(paramString);
  }
}
