package com.jingdong.aura.core.util;

import android.content.ContextWrapper;
import android.text.TextUtils;
import com.jingdong.aura.core.runing.Item;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipFile;

public class File
{
  public static String a(String paramString)
  {
    Object localObject = read(paramString);
    if (localObject == null) {
      return null;
    }
    paramString = new StringBuilder();
    localObject = ((String)localObject).getBytes();
    int i1 = localObject.length;
    int j;
    for (int i = 0; i < i1; i = j)
    {
      j = i + 1;
      int k;
      if (j >= i1) {
        k = j - i1;
      } else {
        k = j;
      }
      int n = i + 4;
      int m = n;
      if (n >= i1) {
        m = n - i1;
      }
      paramString.append("e70d12f4985ac3b6".charAt(localObject[i] + localObject[k] + localObject[m] & 0xF));
    }
    return paramString.toString();
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    if (!TextUtils.isEmpty(paramString1))
    {
      if (TextUtils.isEmpty(paramString2)) {
        return false;
      }
      if (new java.io.File(paramString1).exists())
      {
        if (!new java.io.File(paramString2).exists()) {
          return false;
        }
        paramString1 = read(paramString1);
        paramString2 = read(paramString2);
        if (!TextUtils.isEmpty(paramString1))
        {
          if (TextUtils.isEmpty(paramString2)) {
            return false;
          }
          return paramString1.equals(paramString2);
        }
      }
    }
    return false;
  }
  
  public static java.io.File get()
  {
    java.io.File localFile = Item.this$0.getFilesDir();
    Object localObject = localFile;
    if (localFile == null)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("/data/data/");
      ((StringBuilder)localObject).append(Item.this$0.getPackageName());
      ((StringBuilder)localObject).append("/files");
      localObject = new java.io.File(((StringBuilder)localObject).toString());
    }
    return localObject;
  }
  
  /* Error */
  public static String read(String paramString)
  {
    // Byte code:
    //   0: ldc 85
    //   2: invokestatic 91	java/security/MessageDigest:getInstance	(Ljava/lang/String;)Ljava/security/MessageDigest;
    //   5: astore 10
    //   7: new 45	java/io/File
    //   10: dup
    //   11: aload_0
    //   12: invokespecial 48	java/io/File:<init>	(Ljava/lang/String;)V
    //   15: astore 11
    //   17: aload 11
    //   19: invokevirtual 52	java/io/File:exists	()Z
    //   22: istore 4
    //   24: iload 4
    //   26: ifeq +293 -> 319
    //   29: aload 11
    //   31: invokevirtual 94	java/io/File:isFile	()Z
    //   34: istore 4
    //   36: iload 4
    //   38: ifne +5 -> 43
    //   41: aconst_null
    //   42: areturn
    //   43: new 96	java/io/FileInputStream
    //   46: dup
    //   47: aload 11
    //   49: invokespecial 99	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   52: astore 5
    //   54: aload 5
    //   56: invokevirtual 103	java/io/FileInputStream:getChannel	()Ljava/nio/channels/FileChannel;
    //   59: astore 9
    //   61: aload 9
    //   63: astore 8
    //   65: aload 5
    //   67: astore 6
    //   69: aload 8
    //   71: astore 7
    //   73: getstatic 109	java/nio/channels/FileChannel$MapMode:READ_ONLY	Ljava/nio/channels/FileChannel$MapMode;
    //   76: astore 12
    //   78: aload 5
    //   80: astore 6
    //   82: aload 8
    //   84: astore 7
    //   86: aload 10
    //   88: aload 9
    //   90: aload 12
    //   92: lconst_0
    //   93: aload 11
    //   95: invokevirtual 113	java/io/File:length	()J
    //   98: invokevirtual 119	java/nio/channels/FileChannel:map	(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
    //   101: invokevirtual 123	java/security/MessageDigest:update	(Ljava/nio/ByteBuffer;)V
    //   104: aload 5
    //   106: astore 6
    //   108: aload 8
    //   110: astore 7
    //   112: aload 10
    //   114: invokevirtual 126	java/security/MessageDigest:digest	()[B
    //   117: astore 10
    //   119: aload 5
    //   121: astore 6
    //   123: aload 8
    //   125: astore 7
    //   127: aload 10
    //   129: arraylength
    //   130: istore_1
    //   131: aload 5
    //   133: astore 6
    //   135: aload 8
    //   137: astore 7
    //   139: new 11	java/lang/StringBuilder
    //   142: dup
    //   143: iload_1
    //   144: iconst_2
    //   145: imul
    //   146: invokespecial 129	java/lang/StringBuilder:<init>	(I)V
    //   149: astore 11
    //   151: aload 5
    //   153: astore 6
    //   155: aload 8
    //   157: astore 7
    //   159: aload 10
    //   161: arraylength
    //   162: istore_2
    //   163: iconst_0
    //   164: istore_1
    //   165: iload_1
    //   166: iload_2
    //   167: if_icmpge +63 -> 230
    //   170: aload 10
    //   172: iload_1
    //   173: baload
    //   174: istore_3
    //   175: aload 5
    //   177: astore 6
    //   179: aload 8
    //   181: astore 7
    //   183: aload 11
    //   185: ldc -125
    //   187: iload_3
    //   188: iconst_4
    //   189: ishr
    //   190: bipush 15
    //   192: iand
    //   193: invokevirtual 27	java/lang/String:charAt	(I)C
    //   196: invokevirtual 31	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
    //   199: pop
    //   200: aload 5
    //   202: astore 6
    //   204: aload 8
    //   206: astore 7
    //   208: aload 11
    //   210: ldc -125
    //   212: iload_3
    //   213: bipush 15
    //   215: iand
    //   216: invokevirtual 27	java/lang/String:charAt	(I)C
    //   219: invokevirtual 31	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
    //   222: pop
    //   223: iload_1
    //   224: iconst_1
    //   225: iadd
    //   226: istore_1
    //   227: goto -62 -> 165
    //   230: aload 5
    //   232: astore 6
    //   234: aload 8
    //   236: astore 7
    //   238: aload 11
    //   240: invokevirtual 35	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   243: astore 10
    //   245: aload 9
    //   247: ifnull +16 -> 263
    //   250: aload 9
    //   252: invokevirtual 134	java/nio/channels/FileChannel:close	()V
    //   255: goto +8 -> 263
    //   258: astore_0
    //   259: aload_0
    //   260: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   263: aload 5
    //   265: invokevirtual 138	java/io/FileInputStream:close	()V
    //   268: aload 10
    //   270: areturn
    //   271: astore_0
    //   272: aload_0
    //   273: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   276: aload 10
    //   278: areturn
    //   279: astore 6
    //   281: aload 5
    //   283: astore 9
    //   285: aload 8
    //   287: astore 5
    //   289: aload 6
    //   291: astore 8
    //   293: goto +46 -> 339
    //   296: astore_0
    //   297: aconst_null
    //   298: astore 7
    //   300: goto +164 -> 464
    //   303: astore 8
    //   305: aconst_null
    //   306: astore 6
    //   308: aload 5
    //   310: astore 9
    //   312: aload 6
    //   314: astore 5
    //   316: goto +23 -> 339
    //   319: aconst_null
    //   320: areturn
    //   321: astore_0
    //   322: aconst_null
    //   323: astore 5
    //   325: aconst_null
    //   326: astore 7
    //   328: goto +136 -> 464
    //   331: astore 8
    //   333: aconst_null
    //   334: astore 9
    //   336: aconst_null
    //   337: astore 5
    //   339: aload 9
    //   341: astore 6
    //   343: aload 5
    //   345: astore 7
    //   347: aload 8
    //   349: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   352: aload 9
    //   354: astore 6
    //   356: aload 5
    //   358: astore 7
    //   360: new 11	java/lang/StringBuilder
    //   363: dup
    //   364: invokespecial 15	java/lang/StringBuilder:<init>	()V
    //   367: astore 10
    //   369: aload 9
    //   371: astore 6
    //   373: aload 5
    //   375: astore 7
    //   377: aload 10
    //   379: aload_0
    //   380: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   383: pop
    //   384: aload 9
    //   386: astore 6
    //   388: aload 5
    //   390: astore 7
    //   392: aload 10
    //   394: ldc -116
    //   396: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   399: pop
    //   400: aload 9
    //   402: astore 6
    //   404: aload 5
    //   406: astore 7
    //   408: ldc -114
    //   410: aload 10
    //   412: invokevirtual 35	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   415: ldc -112
    //   417: aload 8
    //   419: invokestatic 150	com/jingdong/aura/core/asm/MethodWriter:d	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   422: aload 5
    //   424: ifnull +16 -> 440
    //   427: aload 5
    //   429: invokevirtual 134	java/nio/channels/FileChannel:close	()V
    //   432: goto +8 -> 440
    //   435: astore_0
    //   436: aload_0
    //   437: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   440: aload 9
    //   442: ifnull +64 -> 506
    //   445: aload 9
    //   447: invokevirtual 138	java/io/FileInputStream:close	()V
    //   450: aconst_null
    //   451: areturn
    //   452: astore_0
    //   453: aload_0
    //   454: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   457: aconst_null
    //   458: areturn
    //   459: astore_0
    //   460: aload 6
    //   462: astore 5
    //   464: aload 7
    //   466: ifnull +18 -> 484
    //   469: aload 7
    //   471: invokevirtual 134	java/nio/channels/FileChannel:close	()V
    //   474: goto +10 -> 484
    //   477: astore 6
    //   479: aload 6
    //   481: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   484: aload 5
    //   486: ifnull +18 -> 504
    //   489: aload 5
    //   491: invokevirtual 138	java/io/FileInputStream:close	()V
    //   494: goto +10 -> 504
    //   497: astore 5
    //   499: aload 5
    //   501: invokevirtual 137	java/lang/Exception:printStackTrace	()V
    //   504: aload_0
    //   505: athrow
    //   506: aconst_null
    //   507: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	508	0	paramString	String
    //   130	97	1	i	int
    //   162	6	2	j	int
    //   174	42	3	k	int
    //   22	15	4	bool	boolean
    //   52	438	5	localObject1	Object
    //   497	3	5	localException1	Exception
    //   67	166	6	localObject2	Object
    //   279	11	6	localException2	Exception
    //   306	155	6	localObject3	Object
    //   477	3	6	localException3	Exception
    //   71	399	7	localObject4	Object
    //   63	229	8	localObject5	Object
    //   303	1	8	localException4	Exception
    //   331	87	8	localException5	Exception
    //   59	387	9	localObject6	Object
    //   5	406	10	localObject7	Object
    //   15	224	11	localObject8	Object
    //   76	15	12	localMapMode	java.nio.channels.FileChannel.MapMode
    // Exception table:
    //   from	to	target	type
    //   250	255	258	java/lang/Exception
    //   263	268	271	java/lang/Exception
    //   86	104	279	java/lang/Exception
    //   112	119	279	java/lang/Exception
    //   139	151	279	java/lang/Exception
    //   183	200	279	java/lang/Exception
    //   208	223	279	java/lang/Exception
    //   238	245	279	java/lang/Exception
    //   54	61	296	java/lang/Throwable
    //   54	61	303	java/lang/Exception
    //   0	7	321	java/lang/Throwable
    //   7	24	321	java/lang/Throwable
    //   29	36	321	java/lang/Throwable
    //   43	54	321	java/lang/Throwable
    //   0	7	331	java/lang/Exception
    //   7	24	331	java/lang/Exception
    //   29	36	331	java/lang/Exception
    //   43	54	331	java/lang/Exception
    //   427	432	435	java/lang/Exception
    //   445	450	452	java/lang/Exception
    //   73	78	459	java/lang/Throwable
    //   86	104	459	java/lang/Throwable
    //   112	119	459	java/lang/Throwable
    //   127	131	459	java/lang/Throwable
    //   139	151	459	java/lang/Throwable
    //   159	163	459	java/lang/Throwable
    //   183	200	459	java/lang/Throwable
    //   208	223	459	java/lang/Throwable
    //   238	245	459	java/lang/Throwable
    //   347	352	459	java/lang/Throwable
    //   360	369	459	java/lang/Throwable
    //   377	384	459	java/lang/Throwable
    //   392	400	459	java/lang/Throwable
    //   408	422	459	java/lang/Throwable
    //   469	474	477	java/lang/Exception
    //   489	494	497	java/lang/Exception
  }
  
  public static void read(InputStream paramInputStream, java.io.File paramFile)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a4 = a3\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static void read(ZipFile paramZipFile)
  {
    if (paramZipFile != null) {
      try
      {
        paramZipFile.close();
        return;
      }
      catch (IOException paramZipFile)
      {
        paramZipFile.printStackTrace();
      }
    }
  }
}
