package com.jingdong.aura.core.util;

import android.os.Build;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.util.Log;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class Label
{
  private static final String[] a = { "arm64-v8a", "armeabi-v7a", "armeabi" };
  private static final String[] c = { "armeabi-v7a", "armeabi" };
  private static Map<String, String> cache = new HashMap();
  private static final String[] color = { "arm64-v8a" };
  
  private static boolean a()
  {
    return b.a();
  }
  
  private static boolean a(String paramString, String[] paramArrayOfString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    if (paramArrayOfString != null)
    {
      if (paramArrayOfString.length <= 0) {
        return false;
      }
      int i = 0;
      while (i < paramArrayOfString.length)
      {
        if (paramString.equals(paramArrayOfString[i])) {
          return true;
        }
        i += 1;
      }
    }
    return false;
  }
  
  private static String doInBackground(String paramString, java.io.File paramFile)
  {
    String str1 = "armeabi";
    ArrayList localArrayList1 = new ArrayList();
    int i = Build.VERSION.SDK_INT;
    int k = 0;
    if (i >= 21)
    {
      paramString = Build.SUPPORTED_32_BIT_ABIS;
      if ((paramString != null) && (paramString.length > 0))
      {
        i = 0;
        for (;;)
        {
          localObject1 = c;
          if (i >= localObject1.length) {
            break;
          }
          if (a(localObject1[i], paramString)) {
            localArrayList1.add(c[i]);
          }
          i += 1;
        }
      }
    }
    int j;
    if (localArrayList1.size() <= 0)
    {
      i = 0;
      j = 0;
      for (;;)
      {
        paramString = c;
        if (i >= paramString.length) {
          break;
        }
        if (paramString[i].equals(Build.CPU_ABI)) {
          j = 1;
        }
        if (j != 0) {
          localArrayList1.add(c[i]);
        }
        i += 1;
      }
    }
    ArrayList localArrayList2 = new ArrayList();
    Object localObject1 = null;
    paramString = null;
    try
    {
      paramFile = new ZipFile(paramFile);
      try
      {
        paramString = paramFile.entries();
        boolean bool;
        for (;;)
        {
          bool = paramString.hasMoreElements();
          i = k;
          if (!bool) {
            break;
          }
          localObject1 = paramString.nextElement();
          localObject1 = (ZipEntry)localObject1;
          localObject1 = ((ZipEntry)localObject1).getName();
          i = ((String)localObject1).indexOf(String.format("%s", new Object[] { "lib/" }));
          if (i != -1)
          {
            Log.d("getPrimarySoFile", (String)localObject1);
            Object localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append("lib");
            String str2 = java.io.File.separator;
            ((StringBuilder)localObject2).append(str2);
            i = ((String)localObject1).indexOf(((StringBuilder)localObject2).toString());
            i += 4;
            localObject2 = java.io.File.separator;
            j = ((String)localObject1).indexOf((String)localObject2, i);
            if ((i > 0) && (j > 0) && (j > i))
            {
              localObject1 = ((String)localObject1).substring(i, j);
              bool = localArrayList2.contains(localObject1);
              if (!bool) {
                localArrayList2.add(localObject1);
              }
            }
          }
        }
        for (;;)
        {
          j = localArrayList1.size();
          paramString = str1;
          if (i >= j) {
            break;
          }
          bool = localArrayList2.contains(localArrayList1.get(i));
          if (bool)
          {
            paramString = localArrayList1.get(i);
            paramString = (String)paramString;
            break;
          }
          i += 1;
        }
        File.read(paramFile);
        return paramString;
      }
      catch (Throwable paramString)
      {
        break label461;
      }
      catch (Exception localException1) {}
      paramString = paramFile;
    }
    catch (Throwable localThrowable)
    {
      paramFile = paramString;
      paramString = localThrowable;
    }
    catch (Exception localException2)
    {
      paramFile = (java.io.File)localObject1;
    }
    localException2.printStackTrace();
    File.read(paramFile);
    return "armeabi";
    label461:
    File.read(paramFile);
    throw paramString;
  }
  
  public static String getName(String paramString, java.io.File paramFile)
  {
    if (paramString == null) {
      return "armeabi";
    }
    if (cache.containsKey(paramString)) {
      return (String)cache.get(paramString);
    }
    if (a()) {
      paramFile = toString(paramString, paramFile);
    } else {
      paramFile = doInBackground(paramString, paramFile);
    }
    cache.put(paramString, paramFile);
    return paramFile;
  }
  
  private static String toString(String paramString, java.io.File paramFile)
  {
    return color[0];
  }
}
