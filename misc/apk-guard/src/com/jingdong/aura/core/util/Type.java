package com.jingdong.aura.core.util;

import android.os.Build;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Type
{
  private static final StringBuffer b = Attribute.getInstance(k.class);
  private static Map<String, String> c = new HashMap();
  private static String name = System.getProperty("java.vm.version");
  private static String type;
  
  static
  {
    c.put("armeabi", "arm");
    c.put("armeabi-v7a", "arm");
    c.put("mips", "mips");
    c.put("mips64", "mips64");
    c.put("x86", "x86");
    c.put("x86_64", "x86_64");
    c.put("arm64-v8a", "arm64");
    type = (String)c.get(Build.CPU_ABI);
    c.clear();
    c = null;
  }
  
  public Type() {}
  
  public static String getType()
  {
    return type;
  }
  
  public static Boolean valueOf()
  {
    Object localObject = name;
    bool2 = false;
    bool1 = bool2;
    if (localObject != null)
    {
      localObject = Pattern.compile("(\\d+)\\.(\\d+)(\\.\\d+)?").matcher(name);
      bool1 = bool2;
      if (!((Matcher)localObject).matches()) {}
    }
    try
    {
      int i = Integer.parseInt(((Matcher)localObject).group(1));
      int j = Integer.parseInt(((Matcher)localObject).group(2));
      if (i <= 2)
      {
        bool1 = bool2;
        if (i == 2)
        {
          bool1 = bool2;
          if (j < 1) {}
        }
      }
      else
      {
        bool1 = true;
      }
    }
    catch (NumberFormatException localNumberFormatException)
    {
      for (;;)
      {
        bool1 = bool2;
      }
    }
    return Boolean.valueOf(bool1);
  }
}
