package com.jingdong.aura.core.util;

import java.util.ArrayList;
import java.util.List;

public class Attribute
{
  public static String[] EMPTY_STRING_ARRAY = new String[0];
  
  public static String a(Object[] paramArrayOfObject, String paramString)
  {
    if (paramArrayOfObject == null) {
      return null;
    }
    return toString(paramArrayOfObject, paramString, 0, paramArrayOfObject.length);
  }
  
  public static boolean a(String paramString)
  {
    return (paramString == null) || (paramString.length() == 0);
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      return paramString1.startsWith(paramString2);
    }
    return false;
  }
  
  public static boolean b(String paramString)
  {
    return (paramString != null) && (paramString.length() > 0);
  }
  
  public static boolean equals(String paramString1, String paramString2)
  {
    if (paramString1 == null) {
      return false;
    }
    return paramString1.equals(paramString2);
  }
  
  public static String getKey(String paramString1, String paramString2)
  {
    if (a(paramString1)) {
      return paramString1;
    }
    if (paramString2 == null) {
      return "";
    }
    int i = paramString1.indexOf(paramString2);
    if (i == -1) {
      return "";
    }
    return paramString1.substring(i + paramString2.length());
  }
  
  public static String[] split(String paramString1, String paramString2)
  {
    return splitWorker(paramString1, paramString2, -1, false);
  }
  
  private static String[] splitWorker(String paramString1, String paramString2, int paramInt, boolean paramBoolean)
  {
    if (paramString1 == null) {
      return null;
    }
    int m = paramString1.length();
    if (m == 0) {
      return EMPTY_STRING_ARRAY;
    }
    ArrayList localArrayList = new ArrayList();
    int i;
    int k;
    int j;
    int n;
    int i1;
    int i3;
    int i2;
    int i4;
    if (paramString2 == null)
    {
      i = 0;
      k = 0;
      j = 0;
      n = 0;
      i1 = 1;
      while (i < m) {
        if (Character.isWhitespace(paramString1.charAt(i)))
        {
          if (k == 0)
          {
            i3 = i;
            i2 = i1;
            if (!paramBoolean) {}
          }
          else
          {
            if (i1 == paramInt)
            {
              i = m;
              j = 0;
            }
            else
            {
              j = 1;
            }
            localArrayList.add(paramString1.substring(n, i));
            i2 = i1 + 1;
            k = 0;
            i3 = i;
          }
          n = i3 + 1;
          i = n;
          i1 = i2;
        }
        else
        {
          i += 1;
          k = 1;
          j = 0;
        }
      }
      i1 = i;
      i2 = k;
      i3 = j;
      i4 = n;
    }
    else
    {
      if (paramString2.length() == 1)
      {
        int i6 = paramString2.charAt(0);
        i = 0;
        j = 0;
        k = 0;
        n = 0;
        i5 = 1;
        for (;;)
        {
          i1 = i;
          i2 = j;
          i3 = k;
          i4 = n;
          if (i >= m) {
            break;
          }
          if (paramString1.charAt(i) == i6)
          {
            if (j == 0)
            {
              i2 = i;
              i1 = i5;
              if (!paramBoolean) {}
            }
            else
            {
              if (i5 == paramInt)
              {
                i = m;
                j = 0;
              }
              else
              {
                j = 1;
              }
              localArrayList.add(paramString1.substring(n, i));
              i1 = i5 + 1;
              n = 0;
              k = j;
              j = n;
              i2 = i;
            }
            n = i2 + 1;
            i = n;
            i5 = i1;
          }
          else
          {
            i += 1;
            j = 1;
            k = 0;
          }
        }
      }
      i = 0;
      j = 0;
      k = 0;
      n = 0;
      int i5 = 1;
      for (;;)
      {
        i1 = i;
        i2 = j;
        i3 = k;
        i4 = n;
        if (i >= m) {
          break;
        }
        if (paramString2.indexOf(paramString1.charAt(i)) >= 0)
        {
          if (j == 0)
          {
            i2 = i;
            i1 = i5;
            if (!paramBoolean) {}
          }
          else
          {
            if (i5 == paramInt)
            {
              i = m;
              j = 0;
            }
            else
            {
              j = 1;
            }
            localArrayList.add(paramString1.substring(n, i));
            i1 = i5 + 1;
            n = 0;
            k = j;
            j = n;
            i2 = i;
          }
          n = i2 + 1;
          i = n;
          i5 = i1;
        }
        else
        {
          i += 1;
          j = 1;
          k = 0;
        }
      }
    }
    if ((i2 != 0) || ((paramBoolean) && (i3 != 0))) {
      localArrayList.add(paramString1.substring(i4, i1));
    }
    return (String[])localArrayList.toArray(new String[localArrayList.size()]);
  }
  
  public static String toString(Object[] paramArrayOfObject, String paramString, int paramInt1, int paramInt2)
  {
    if (paramArrayOfObject == null) {
      return null;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    int j = paramInt2 - paramInt1;
    if (j <= 0) {
      return "";
    }
    if (paramArrayOfObject[paramInt1] == null) {
      i = 16;
    } else {
      i = paramArrayOfObject[paramInt1].toString().length();
    }
    paramString = new StringBuilder((i + str.length()) * j);
    int i = paramInt1;
    while (i < paramInt2)
    {
      if (i > paramInt1) {
        paramString.append(str);
      }
      if (paramArrayOfObject[i] != null) {
        paramString.append(paramArrayOfObject[i]);
      }
      i += 1;
    }
    return paramString.toString();
  }
  
  public static boolean write(String paramString1, String paramString2)
  {
    return (paramString1 != null) && (paramString2 != null) && (paramString1.indexOf(paramString2) >= 0);
  }
}
