package com.jingdong.aura.core.util;

import android.content.ContextWrapper;
import android.os.Process;
import com.jingdong.aura.core.runing.Item;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.io.File;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class i
{
  private static i a;
  static final StringBuffer b = Attribute.getInstance(a.class);
  private static String c;
  private Map<String, a.a> m = new ConcurrentHashMap();
  
  static
  {
    if (Item.this$0.getApplicationContext() != null) {
      c = Frame.read(Process.myPid());
    }
  }
  
  public i() {}
  
  private int a(String paramString)
  {
    Object localObject2 = Integer.valueOf(0);
    if (m.containsKey(paramString))
    {
      Object localObject1 = (e)m.get(paramString);
      int i = h - 1;
      h = i;
      Integer localInteger = Integer.valueOf(i);
      localObject1 = localInteger;
      localObject2 = localObject1;
      if (localInteger.intValue() <= 0)
      {
        m.remove(paramString);
        localObject2 = localObject1;
      }
    }
    return ((Integer)localObject2).intValue();
  }
  
  private int a(String paramString, FileLock paramFileLock, RandomAccessFile paramRandomAccessFile, FileChannel paramFileChannel)
  {
    if (m.containsKey(paramString))
    {
      paramString = (e)m.get(paramString);
      int i = h;
      h = (i + 1);
      paramString = Integer.valueOf(i);
    }
    else
    {
      Integer localInteger = Integer.valueOf(1);
      m.put(paramString, new e(this, paramFileLock, localInteger.intValue(), paramRandomAccessFile, paramFileChannel));
      paramString = localInteger;
    }
    return paramString.intValue();
  }
  
  public static i a()
  {
    if (a == null) {
      a = new i();
    }
    return a;
  }
  
  public void a(File paramFile)
  {
    File localFile = new File(paramFile.getParentFile().getAbsolutePath().concat("/lock"));
    if (!localFile.exists()) {
      return;
    }
    if (m.containsKey(localFile.getAbsolutePath()))
    {
      Object localObject3 = (e)m.get(localFile.getAbsolutePath());
      if (localObject3 != null)
      {
        Object localObject1 = a;
        Object localObject2 = f;
        localObject3 = c;
        try
        {
          int i = a(localFile.getAbsolutePath());
          if (i <= 0)
          {
            if (localObject1 != null)
            {
              boolean bool = ((FileLock)localObject1).isValid();
              if (bool) {
                ((FileLock)localObject1).release();
              }
            }
            if (localObject2 != null) {
              ((RandomAccessFile)localObject2).close();
            }
            if (localObject3 != null)
            {
              ((FileChannel)localObject3).close();
              return;
            }
          }
        }
        catch (Exception localException)
        {
          localObject1 = b;
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append(c);
          ((StringBuilder)localObject2).append(" FileLock ");
          ((StringBuilder)localObject2).append(paramFile.getParentFile().getAbsolutePath().concat("/lock"));
          ((StringBuilder)localObject2).append(" unlock FAIL! ");
          ((StringBuilder)localObject2).append(localException.getMessage());
          ((StringBuffer)localObject1).e(((StringBuilder)localObject2).toString());
        }
      }
    }
  }
  
  public boolean write(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    try
    {
      File localFile = new File(paramFile.getParentFile().getAbsolutePath().concat("/lock"));
      boolean bool = localFile.exists();
      if (!bool) {
        localFile.createNewFile();
      }
      localObject1 = new RandomAccessFile(localFile.getAbsolutePath(), "rw");
      localObject2 = ((RandomAccessFile)localObject1).getChannel();
      FileLock localFileLock = ((FileChannel)localObject2).lock();
      bool = localFileLock.isValid();
      if (!bool) {
        return false;
      }
      a(localFile.getAbsolutePath(), localFileLock, (RandomAccessFile)localObject1, (FileChannel)localObject2);
      return true;
    }
    catch (Exception localException)
    {
      Object localObject1 = b;
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append(c);
      ((StringBuilder)localObject2).append(" FileLock ");
      ((StringBuilder)localObject2).append(paramFile.getParentFile().getAbsolutePath().concat("/lock"));
      ((StringBuilder)localObject2).append(" Lock FAIL! ");
      ((StringBuilder)localObject2).append(localException.getMessage());
      ((StringBuffer)localObject1).e(((StringBuilder)localObject2).toString());
    }
    return false;
  }
}
