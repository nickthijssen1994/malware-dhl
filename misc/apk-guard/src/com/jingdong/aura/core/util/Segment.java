package com.jingdong.aura.core.util;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;

public class Segment
{
  static Map<String, ReentrantReadWriteLock> data = new HashMap();
  
  public static void close(String paramString)
  {
    Map localMap = data;
    try
    {
      paramString = (ReentrantReadWriteLock)data.get(paramString);
      if (paramString == null) {
        return;
      }
      paramString.writeLock().unlock();
      return;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public static void write(String paramString)
  {
    Map localMap = data;
    try
    {
      ReentrantReadWriteLock localReentrantReadWriteLock2 = (ReentrantReadWriteLock)data.get(paramString);
      ReentrantReadWriteLock localReentrantReadWriteLock1 = localReentrantReadWriteLock2;
      if (localReentrantReadWriteLock2 == null)
      {
        localReentrantReadWriteLock1 = new ReentrantReadWriteLock();
        data.put(paramString, localReentrantReadWriteLock1);
      }
      localReentrantReadWriteLock1.writeLock().lock();
      return;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
}
