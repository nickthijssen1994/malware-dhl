package com.jingdong.aura.core.nativelib;

import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.asm.f;
import com.jingdong.aura.core.util.Type;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;

public class AuraNative
{
  private static final StringBuffer b = Attribute.getInstance(AuraNative.class);
  private static boolean c = false;
  private static boolean o;
  
  static
  {
    try
    {
      System.loadLibrary("aura");
      c = true;
    }
    catch (UnsatisfiedLinkError localUnsatisfiedLinkError)
    {
      localUnsatisfiedLinkError.printStackTrace();
    }
    try
    {
      boolean bool = f.size();
      if (bool)
      {
        System.loadLibrary("aurautils");
        o = true;
        return;
      }
    }
    catch (Exception localException)
    {
      MethodWriter.d("AuraNative", "aurautils loaded failed", "AuraNative", localException);
    }
  }
  
  public AuraNative() {}
  
  public static boolean a(String paramString)
  {
    if (!o)
    {
      b.append("mIsLoadedAuraUtils is false, loade aurautils failed! ");
      return false;
    }
    try
    {
      boolean bool = verifySign(paramString);
      if (bool) {
        return true;
      }
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
      MethodWriter.d("AuraNative", "vefiySignByAura failed", "AuraNative.vefiySignByAura", paramString);
    }
    return false;
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    if ((c) && (f.getHeaderIcon()))
    {
      boolean bool1 = f.s();
      int i = f.r();
      try
      {
        boolean bool2 = Type.valueOf().booleanValue();
        if (!bool2)
        {
          compile(paramString1, paramString2, false, "", bool1, i);
          return true;
        }
        compile(paramString1, paramString2, true, Type.getType(), bool1, i);
        return true;
      }
      catch (Throwable paramString1)
      {
        b.i("Exception while try to compile code >>>", paramString1);
        return false;
      }
    }
    paramString1 = b;
    paramString2 = new StringBuilder();
    paramString2.append("not use AuraNative to opt dex. sIsLoadedNativeLibry = ");
    paramString2.append(c);
    paramString2.append(", AuraConfigInternal.getIsUseAuraDexOpt()");
    paramString2.append(f.getHeaderIcon());
    paramString1.append(paramString2.toString());
    return false;
  }
  
  private static native void compile(String paramString1, String paramString2, boolean paramBoolean1, String paramString3, boolean paramBoolean2, int paramInt);
  
  public static native boolean verifySign(String paramString);
}
