package com.jingdong.aura.core.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class AssertionArrayException
  extends Exception
{
  private static final long serialVersionUID = 1L;
  private List<Hack.HackDeclaration.HackAssertionException> mAssertionErr = new ArrayList();
  
  public AssertionArrayException(String paramString)
  {
    super(paramString);
  }
  
  public static AssertionArrayException mergeException(AssertionArrayException paramAssertionArrayException1, AssertionArrayException paramAssertionArrayException2)
  {
    if (paramAssertionArrayException1 == null) {
      return paramAssertionArrayException2;
    }
    if (paramAssertionArrayException2 == null) {
      return paramAssertionArrayException1;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramAssertionArrayException1.getMessage());
    ((StringBuilder)localObject).append(";");
    ((StringBuilder)localObject).append(paramAssertionArrayException2.getMessage());
    localObject = new AssertionArrayException(((StringBuilder)localObject).toString());
    ((AssertionArrayException)localObject).addException(paramAssertionArrayException1.getExceptions());
    ((AssertionArrayException)localObject).addException(paramAssertionArrayException2.getExceptions());
    return localObject;
  }
  
  public void addException(Hack.HackDeclaration.HackAssertionException paramHackAssertionException)
  {
    mAssertionErr.add(paramHackAssertionException);
  }
  
  public void addException(List paramList)
  {
    mAssertionErr.addAll(paramList);
  }
  
  public List getExceptions()
  {
    return mAssertionErr;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = mAssertionErr.iterator();
    for (;;)
    {
      if (localIterator.hasNext())
      {
        Hack.HackDeclaration.HackAssertionException localHackAssertionException = (Hack.HackDeclaration.HackAssertionException)localIterator.next();
        localStringBuilder.append(localHackAssertionException.toString());
        localStringBuilder.append(";");
        try
        {
          Object localObject1 = localHackAssertionException.getCause();
          boolean bool = localObject1 instanceof NoSuchFieldException;
          int j = 0;
          int i = 0;
          if (bool)
          {
            localObject1 = localHackAssertionException.getHackedClass().getDeclaredFields();
            localStringBuilder.append(localHackAssertionException.getHackedClass().getName());
            localStringBuilder.append(".");
            localStringBuilder.append(localHackAssertionException.getHackedFieldName());
            localStringBuilder.append(";");
            j = localObject1.length;
            while (i < j)
            {
              localHackAssertionException = localObject1[i];
              localStringBuilder.append(localHackAssertionException.getName());
              localStringBuilder.append("/");
              i += 1;
            }
          }
          localObject1 = localHackAssertionException.getCause();
          if ((localObject1 instanceof NoSuchMethodException))
          {
            localObject1 = localHackAssertionException.getHackedClass().getDeclaredMethods();
            localStringBuilder.append(localHackAssertionException.getHackedClass().getName());
            localStringBuilder.append("->");
            localStringBuilder.append(localHackAssertionException.getHackedMethodName());
            localStringBuilder.append(";");
            i = j;
            while (i < localObject1.length)
            {
              String str = localHackAssertionException.getHackedMethodName();
              Object localObject2 = localObject1[i];
              bool = str.equals(localObject2.getName());
              if (bool)
              {
                str = localObject1[i];
                localStringBuilder.append(str.toGenericString());
                localStringBuilder.append("/");
              }
              i += 1;
            }
          }
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
          localStringBuilder.append("@@@@");
        }
      }
    }
    return localStringBuilder.toString();
  }
}
