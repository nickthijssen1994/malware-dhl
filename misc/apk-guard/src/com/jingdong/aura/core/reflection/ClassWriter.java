package com.jingdong.aura.core.reflection;

import android.app.Application;
import android.app.Instrumentation;
import android.app.Service;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.os.Build.VERSION;
import android.view.ContextThemeWrapper;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import dalvik.system.DexClassLoader;
import java.util.ArrayList;
import java.util.Map;

public class ClassWriter
  extends Hack.HackDeclaration
  implements Hack.a
{
  public static Hack.d<Object, Instrumentation> A;
  public static Hack.e B;
  public static Hack.e C;
  public static Hack.d<ContextWrapper, Context> E;
  public static Hack.e F;
  public static Hack.d<Object, ArrayList<Application>> G;
  public static Hack.d<Object, Application> H;
  public static Hack.d<Object, Object> J;
  public static Hack.d<Resources, Object> K;
  public static Hack.d<Object, Object> L;
  public static Hack.d<Object, Object> N;
  public static Hack.e O;
  public static Hack.b<Application> a;
  public static Hack.b<Object> action;
  public static Hack.d<ContextThemeWrapper, Context> b;
  public static Hack.b<Object> c;
  public static Hack.d<Object, ArrayList<Object>> comments;
  public static Hack.b<ContextThemeWrapper> content;
  public static Hack.c context;
  public static Hack.b<Object> count;
  public static Hack.b<ClassLoader> d;
  public static Hack.b<Object> data;
  public static Hack.d<Object, ApplicationInfo> date;
  public static boolean e = false;
  public static Hack.d<Object, String> entries;
  public static boolean f;
  public static Hack.d<Object, Application> g;
  public static Hack.b<AssetManager> h;
  public static boolean i;
  public static Hack.b<Object> id;
  public static Hack.b<Object> index;
  public static Hack.c items;
  public static Hack.b<DexClassLoader> j;
  public static Hack.e k;
  public static Hack.d<ContextThemeWrapper, Resources.Theme> key;
  public static Hack.e l;
  public static Hack.d<ContextThemeWrapper, Resources> left;
  private static final StringBuffer log = Attribute.getInstance(b.class);
  public static Hack.d<Object, Object> m;
  public static Hack.d<Object, Map<String, Object>> mData;
  public static Hack.b<Object> n;
  public static Hack.b<Object> name;
  public static ArrayList<Hack.e> names = new ArrayList();
  public static Hack.e o;
  public static Hack.b<Object> order;
  public static Hack.e p;
  public static Hack.b<ContextWrapper> path;
  public static ArrayList<Hack.e> paths = new ArrayList();
  public static Hack.d<Object, ClassLoader> pos;
  public static Hack.e q;
  public static Hack.d<Object, Resources> r;
  public static Hack.b<Object> result;
  public static Hack.b<Object> s;
  public static Hack.d<Object, String> size;
  public static Hack.b<Object> t;
  public static Hack.b<Object> text;
  public static Hack.e this$0;
  public static Hack.b<Service> threshold;
  public static Hack.b<Object> title;
  public static Hack.b<Resources> type;
  public static Hack.e u;
  public static Hack.d<Object, Object> version;
  public static Hack.d<Object, Resources.Theme> w;
  public static Hack.d<Object, ClassLoader> x;
  public static Hack.d<Object, Resources> y;
  public static Hack.d<Object, String> z;
  private AssertionArrayException v = null;
  
  static
  {
    i = false;
    f = false;
  }
  
  public ClassWriter() {}
  
  public static void a()
  {
    q = c.a("currentActivityThread", new Class[0]);
    k = h.a("addAssetPath", new Class[] { String.class });
    p = a.a("attach", new Class[] { Context.class });
    o = d.a("findLibrary", new Class[] { String.class });
    Hack.b localB = n;
    if ((localB != null) && (localB.get() != null))
    {
      C = n.a("loadLex", new Class[] { String.class, Integer.TYPE });
      O = n.a("loadClass", new Class[] { String.class, ClassLoader.class });
      B = n.a("close", new Class[0]);
      F = j.a("findClass", new Class[] { String.class });
    }
    try
    {
      int i1 = Build.VERSION.SDK_INT;
      if (i1 > 20)
      {
        u = h.a("getResourceIdentifier", new Class[] { String.class, String.class, String.class });
        l = h.a("ensureStringBlocks", new Class[0]);
      }
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    this$0 = id.a("getComponentName", new Class[0]);
  }
  
  /* Error */
  public static boolean c()
  {
    // Byte code:
    //   0: getstatic 123	com/jingdong/aura/core/reflection/ClassWriter:f	Z
    //   3: ifeq +7 -> 10
    //   6: getstatic 121	com/jingdong/aura/core/reflection/ClassWriter:i	Z
    //   9: ireturn
    //   10: new 2	com/jingdong/aura/core/reflection/ClassWriter
    //   13: dup
    //   14: invokespecial 229	com/jingdong/aura/core/reflection/ClassWriter:<init>	()V
    //   17: astore_2
    //   18: aload_2
    //   19: invokestatic 234	com/jingdong/aura/core/reflection/Hack:b	(Lcom/jingdong/aura/core/reflection/Hack$a;)V
    //   22: getstatic 213	android/os/Build$VERSION:SDK_INT	I
    //   25: istore_0
    //   26: iload_0
    //   27: bipush 11
    //   29: if_icmpne +17 -> 46
    //   32: aload_2
    //   33: new 236	com/jingdong/aura/core/reflection/Hack$HackDeclaration$HackAssertionException
    //   36: dup
    //   37: ldc -18
    //   39: invokespecial 241	com/jingdong/aura/core/reflection/Hack$HackDeclaration$HackAssertionException:<init>	(Ljava/lang/String;)V
    //   42: invokevirtual 244	com/jingdong/aura/core/reflection/ClassWriter:b	(Lcom/jingdong/aura/core/reflection/Hack$HackDeclaration$HackAssertionException;)Z
    //   45: pop
    //   46: invokestatic 247	com/jingdong/aura/core/reflection/ClassWriter:onCreate	()V
    //   49: invokestatic 249	com/jingdong/aura/core/reflection/ClassWriter:get	()V
    //   52: invokestatic 252	com/jingdong/aura/core/reflection/ClassWriter:init	()V
    //   55: invokestatic 254	com/jingdong/aura/core/reflection/ClassWriter:a	()V
    //   58: aload_2
    //   59: getfield 138	com/jingdong/aura/core/reflection/ClassWriter:v	Lcom/jingdong/aura/core/reflection/AssertionArrayException;
    //   62: astore_3
    //   63: aload_3
    //   64: ifnonnull +21 -> 85
    //   67: iconst_1
    //   68: putstatic 121	com/jingdong/aura/core/reflection/ClassWriter:i	Z
    //   71: getstatic 121	com/jingdong/aura/core/reflection/ClassWriter:i	Z
    //   74: istore_1
    //   75: aconst_null
    //   76: invokestatic 234	com/jingdong/aura/core/reflection/Hack:b	(Lcom/jingdong/aura/core/reflection/Hack$a;)V
    //   79: iconst_1
    //   80: putstatic 123	com/jingdong/aura/core/reflection/ClassWriter:f	Z
    //   83: iload_1
    //   84: ireturn
    //   85: iconst_0
    //   86: putstatic 121	com/jingdong/aura/core/reflection/ClassWriter:i	Z
    //   89: aload_2
    //   90: getfield 138	com/jingdong/aura/core/reflection/ClassWriter:v	Lcom/jingdong/aura/core/reflection/AssertionArrayException;
    //   93: athrow
    //   94: astore_2
    //   95: goto +32 -> 127
    //   98: astore_2
    //   99: iconst_0
    //   100: putstatic 121	com/jingdong/aura/core/reflection/ClassWriter:i	Z
    //   103: getstatic 119	com/jingdong/aura/core/reflection/ClassWriter:log	Lcom/jingdong/aura/core/util/rss/StringBuffer;
    //   106: aload_2
    //   107: invokevirtual 258	java/lang/Throwable:getMessage	()Ljava/lang/String;
    //   110: invokeinterface 262 2 0
    //   115: aconst_null
    //   116: invokestatic 234	com/jingdong/aura/core/reflection/Hack:b	(Lcom/jingdong/aura/core/reflection/Hack$a;)V
    //   119: iconst_1
    //   120: putstatic 123	com/jingdong/aura/core/reflection/ClassWriter:f	Z
    //   123: getstatic 125	com/jingdong/aura/core/reflection/ClassWriter:e	Z
    //   126: ireturn
    //   127: aconst_null
    //   128: invokestatic 234	com/jingdong/aura/core/reflection/Hack:b	(Lcom/jingdong/aura/core/reflection/Hack$a;)V
    //   131: iconst_1
    //   132: putstatic 123	com/jingdong/aura/core/reflection/ClassWriter:f	Z
    //   135: aload_2
    //   136: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   25	5	0	i1	int
    //   74	10	1	bool	boolean
    //   17	73	2	localClassWriter	ClassWriter
    //   94	1	2	localThrowable1	Throwable
    //   98	38	2	localThrowable2	Throwable
    //   62	2	3	localAssertionArrayException	AssertionArrayException
    // Exception table:
    //   from	to	target	type
    //   99	115	94	java/lang/Throwable
    //   18	26	98	java/lang/Throwable
    //   32	46	98	java/lang/Throwable
    //   46	63	98	java/lang/Throwable
    //   67	75	98	java/lang/Throwable
    //   85	94	98	java/lang/Throwable
  }
  
  public static void get()
  {
    if (Build.VERSION.SDK_INT <= 20) {
      items = data.toString(new Class[] { String.class });
    } else {
      items = data.toString(new Class[0]);
    }
    context = result.toString(new Class[] { name.get(), index.get() });
  }
  
  public static void init()
  {
    A = c.toString("mInstrumentation").get(Instrumentation.class);
    G = c.toString("mAllApplications").read(ArrayList.class);
    H = c.toString("mInitialApplication").get(Application.class);
    mData = c.toString("mPackages").read(Map.class);
    m = c.get("sPackageManager").get(index.get());
    g = text.toString("mApplication").get(Application.class);
    y = text.toString("mResources").get(Resources.class);
    z = text.toString("mResDir").get(String.class);
    x = text.toString("mClassLoader").get(ClassLoader.class);
    pos = text.toString("mBaseClassLoader").get(ClassLoader.class);
    size = text.toString("mAppDir").get(String.class);
    r = name.toString("mResources").get(Resources.class);
    w = name.toString("mTheme").get(Resources.Theme.class);
    e = true;
    b = content.toString("mBase").get(Context.class);
    e = false;
    key = content.toString("mTheme").get(Resources.Theme.class);
    if (Build.VERSION.SDK_INT >= 17) {
      localObject = content;
    }
    try
    {
      localObject = ((Hack.b)localObject).get().getDeclaredField("mResources");
      if (localObject == null) {
        break label365;
      }
      localObject = content;
      localObject = ((Hack.b)localObject).toString("mResources").get(Resources.class);
      left = (Hack.d)localObject;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      StringBuilder localStringBuilder;
      for (;;) {}
    }
    Object localObject = log;
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("Not found ContextThemeWrapper.mResources on VERSION ");
    localStringBuilder.append(Build.VERSION.SDK_INT);
    ((StringBuffer)localObject).setText(localStringBuilder.toString());
    label365:
    E = path.toString("mBase").get(Context.class);
    K = type.toString("mAssets");
    if ((Build.VERSION.SDK_INT <= 25) && ((Build.VERSION.SDK_INT != 25) || (Build.VERSION.PREVIEW_SDK_INT <= 0))) {
      J = s.get("gDefault");
    } else {
      L = t.get("IActivityManagerSingleton");
    }
    N = count.toString("mInstance");
    entries = title.toString("packageName").read(String.class);
    comments = title.toString("activities").read(ArrayList.class);
    date = title.toString("applicationInfo").get(ApplicationInfo.class);
    version = action.toString("activity").get(order.get());
  }
  
  public static void onCreate()
  {
    if (Build.VERSION.SDK_INT <= 8) {
      text = Hack.valueOf("android.app.ActivityThread$PackageInfo");
    } else {
      text = Hack.valueOf("android.app.LoadedApk");
    }
    c = Hack.valueOf("android.app.ActivityThread");
    type = Hack.getString(Resources.class);
    a = Hack.getString(Application.class);
    h = Hack.getString(AssetManager.class);
    index = Hack.valueOf("android.content.pm.IPackageManager");
    threshold = Hack.getString(Service.class);
    name = Hack.valueOf("android.app.ContextImpl");
    path = Hack.getString(ContextWrapper.class);
    content = Hack.getString(ContextThemeWrapper.class);
    e = true;
    d = Hack.getString(ClassLoader.class);
    j = Hack.getString(DexClassLoader.class);
    n = Hack.valueOf("dalvik.system.LexFile");
    e = false;
    s = Hack.valueOf("android.app.ActivityManagerNative");
    t = Hack.valueOf("android.app.ActivityManager");
    count = Hack.valueOf("android.util.Singleton");
    data = Hack.valueOf("android.content.pm.PackageParser");
    id = Hack.valueOf("android.content.pm.PackageParser$Component");
    order = Hack.valueOf("android.content.pm.PackageParser$Activity");
    title = Hack.valueOf("android.content.pm.PackageParser$Package");
    action = Hack.valueOf("android.content.pm.PackageParser$ActivityIntentInfo");
    result = Hack.valueOf("android.app.ApplicationPackageManager");
  }
  
  public boolean b(Hack.HackDeclaration.HackAssertionException paramHackAssertionException)
  {
    if (!e)
    {
      if (v == null) {
        v = new AssertionArrayException("aura hack assert failed");
      }
      v.addException(paramHackAssertionException);
    }
    return true;
  }
}
