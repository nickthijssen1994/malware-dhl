package com.jingdong.aura.core.reflection;

import android.app.Application;
import android.app.Instrumentation;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import androidx.databinding.DataBinderMapperProxy;
import com.jingdong.aura.core.asm.MethodWriter;
import com.jingdong.aura.core.runing.Item;
import com.jingdong.aura.core.runing.MethodProxy;
import com.jingdong.aura.core.runing.resource.ResourcesWrapper;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Frame
{
  private static final StringBuffer a = Attribute.getInstance(a.class);
  private static Object b = null;
  private static Object result = null;
  
  public Frame() {}
  
  public static Object a()
  {
    if (b == null) {
      if (Thread.currentThread().getId() == Looper.getMainLooper().getThread().getId())
      {
        b = ClassWriter.q.a(null, new Object[0]);
      }
      else
      {
        Handler localHandler = new Handler(Looper.getMainLooper());
        Hack.e localE = ClassWriter.q;
        try
        {
          localHandler.post(new Plot.a());
          ClassWriter.q.wait();
        }
        catch (Throwable localThrowable)
        {
          throw localThrowable;
        }
      }
    }
    return b;
  }
  
  public static void a(Application paramApplication, Resources paramResources)
  {
    Object localObject3 = a();
    if (localObject3 != null)
    {
      Object localObject2 = get(paramApplication, localObject3, paramApplication.getPackageName());
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject3 = create(paramApplication, localObject3);
        localObject2 = localObject3;
        if (localObject3 != null)
        {
          localObject1 = localObject2;
          if (!((ClassLoader)ClassWriter.x.get(localObject3) instanceof com.jingdong.aura.core.runing.Label))
          {
            ClassWriter.x.get(localObject3, Item.a);
            localObject1 = localObject2;
          }
        }
        else
        {
          throw new RuntimeException("Failed to get ActivityThread.mLoadedApk");
        }
      }
      ClassWriter.y.get(localObject1, paramResources);
      ClassWriter.r.get(paramApplication.getBaseContext(), paramResources);
      ClassWriter.w.get(paramApplication.getBaseContext(), null);
      return;
    }
    throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
  }
  
  public static void a(String paramString, Application paramApplication)
  {
    paramString = a();
    if (paramString != null)
    {
      Object localObject = get(paramApplication, paramString, paramApplication.getPackageName());
      if (localObject != null)
      {
        ClassWriter.g.get(localObject, paramApplication);
        ClassWriter.H.get(paramString, paramApplication);
        return;
      }
      throw new Exception("Failed to get ActivityThread.mLoadedApk");
    }
    throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
  }
  
  public static DataBinderMapperProxy b()
  {
    try
    {
      Hack.d localD = new Hack.b(Class.forName("androidx.databinding.DataBindingUtil")).get("sMapper");
      DataBinderMapperProxy localDataBinderMapperProxy = new DataBinderMapperProxy(localD.get(null));
      localD.get(null, localDataBinderMapperProxy);
      return localDataBinderMapperProxy;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static Object create(Application paramApplication, Object paramObject)
  {
    try
    {
      ApplicationInfo localApplicationInfo = paramApplication.getPackageManager().getApplicationInfo(paramApplication.getPackageName(), 1152);
      paramApplication.getPackageManager();
      Object localObject = paramApplication.getResources();
      boolean bool = localObject instanceof ResourcesWrapper;
      if (bool)
      {
        localObject = localObject.getClass().getSuperclass().getSuperclass().getDeclaredMethod("getCompatibilityInfo", new Class[0]);
      }
      else
      {
        bool = localObject.getClass().getName().equals("android.content.res.MiuiResources");
        if (bool) {
          localObject = localObject.getClass().getSuperclass().getDeclaredMethod("getCompatibilityInfo", new Class[0]);
        } else {
          localObject = localObject.getClass().getDeclaredMethod("getCompatibilityInfo", new Class[0]);
        }
      }
      ((Method)localObject).setAccessible(true);
      Class localClass = Class.forName("android.content.res.CompatibilityInfo");
      paramApplication = ((Method)localObject).invoke(paramApplication.getResources(), new Object[0]);
      localObject = ClassWriter.c.get().getDeclaredMethod("getPackageInfoNoCheck", new Class[] { ApplicationInfo.class, localClass });
      ((Method)localObject).setAccessible(true);
      paramApplication = ((Method)localObject).invoke(paramObject, new Object[] { localApplicationInfo, paramApplication });
      result = paramApplication;
      return paramApplication;
    }
    catch (Throwable paramApplication)
    {
      paramApplication.printStackTrace();
      throw new RuntimeException(paramApplication);
    }
  }
  
  public static Instrumentation d()
  {
    Object localObject = a();
    if (localObject != null) {
      return (Instrumentation)ClassWriter.A.get(localObject);
    }
    throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
  }
  
  public static void d(Instrumentation paramInstrumentation)
  {
    Object localObject = a();
    if (localObject != null)
    {
      ClassWriter.A.get(localObject, paramInstrumentation);
      return;
    }
    throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
  }
  
  public static void execute()
  {
    Object localObject3 = a();
    if (localObject3 != null)
    {
      Object localObject2 = get(Item.this$0, localObject3, Item.this$0.getPackageName());
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject2 = create(Item.this$0, localObject3);
        localObject1 = localObject2;
        if (localObject2 == null) {
          throw new RuntimeException("can't create loadedApk");
        }
      }
      if (!((ClassLoader)ClassWriter.x.get(localObject1) instanceof com.jingdong.aura.core.runing.Label))
      {
        ClassWriter.x.get(localObject1, Item.a);
        ClassWriter.y.get(localObject1, Item.c);
      }
    }
    else
    {
      throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
    }
  }
  
  public static Handler get()
  {
    Object localObject1 = a();
    if (localObject1 != null)
    {
      Object localObject2 = ClassWriter.c;
      try
      {
        localObject2 = ((Hack.b)localObject2).toString("mH").get(Hack.valueOf("android.app.ActivityThread$H").get()).get(localObject1);
        localObject2 = (Handler)localObject2;
        Field localField = Handler.class.getDeclaredField("mCallback");
        localField.setAccessible(true);
        localField.set(localObject2, new SnackbarManager.1((Handler)localObject2, localObject1));
      }
      catch (Hack.HackDeclaration.HackAssertionException localHackAssertionException)
      {
        localHackAssertionException.printStackTrace();
      }
      return null;
    }
    throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
  }
  
  public static Object get(Application paramApplication, Object paramObject, String paramString)
  {
    paramApplication = (WeakReference)((Map)ClassWriter.mData.get(paramObject)).get(paramString);
    if ((paramApplication != null) && (paramApplication.get() != null))
    {
      result = paramApplication.get();
      return paramApplication.get();
    }
    return null;
  }
  
  private static void get(Message paramMessage)
  {
    try
    {
      int i = what;
      Object localObject1;
      Object localObject2;
      Object localObject3;
      if (i == 100)
      {
        localObject1 = obj;
        localObject2 = Class.forName("android.app.ActivityThread$ActivityClientRecord").getDeclaredField("intent");
        ((Field)localObject2).setAccessible(true);
        localObject3 = com.jingdong.aura.core.shadow.Label.execute((Intent)((Field)localObject2).get(localObject1));
        if (localObject3 != null) {
          ((Field)localObject2).set(localObject1, localObject3);
        }
      }
      i = what;
      if (i == 159)
      {
        i = Build.VERSION.SDK_INT;
        if (i >= 28)
        {
          localObject1 = obj;
          localObject2 = Class.forName("android.app.servertransaction.ClientTransaction").getDeclaredField("mActivityCallbacks");
          ((Field)localObject2).setAccessible(true);
          localObject3 = (List)((Field)localObject2).get(localObject1);
          localObject1 = Class.forName("android.app.servertransaction.LaunchActivityItem");
          localObject2 = ((Class)localObject1).getDeclaredField("mIntent");
          ((Field)localObject2).setAccessible(true);
          localObject3 = ((List)localObject3).iterator();
          for (;;)
          {
            boolean bool = ((Iterator)localObject3).hasNext();
            if (!bool) {
              break;
            }
            Object localObject4 = ((Iterator)localObject3).next();
            bool = ((Class)localObject1).isInstance(localObject4);
            if (bool)
            {
              Intent localIntent = com.jingdong.aura.core.shadow.Label.execute((Intent)((Field)localObject2).get(localObject4));
              if (localIntent != null) {
                ((Field)localObject2).set(localObject4, localIntent);
              }
            }
          }
        }
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("hackLaunchActivityMessage failed, message.what: ");
      ((StringBuilder)localObject2).append(what);
      MethodWriter.d("hackLaunchActivityMessage", ((StringBuilder)localObject2).toString(), "hackLaunchActivityMessage", localThrowable);
    }
  }
  
  public static void init()
  {
    Object localObject1 = new MethodProxy(Item.this$0.getBaseContext());
    Object localObject2 = ClassWriter.m.get(null);
    Context localContext = Item.this$0.getBaseContext();
    Item.index = (PackageManager)ClassWriter.context.get(new Object[] { localContext, localObject2 });
    ClassWriter.m.a(null, (StateMachineInvocationHandler)localObject1);
    try
    {
      localObject1 = Item.this$0.getPackageManager();
      localObject2 = Class.forName("android.app.ApplicationPackageManager").getDeclaredField("mPM");
      ((Field)localObject2).setAccessible(true);
      ((Field)localObject2).set(localObject1, ClassWriter.m.get(null));
      return;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
    }
  }
  
  public static void init(String paramString, ClassLoader paramClassLoader)
  {
    Object localObject2 = a();
    if (localObject2 != null)
    {
      Object localObject1 = get(Item.this$0, localObject2, paramString);
      paramString = localObject1;
      if (localObject1 == null) {
        paramString = create(Item.this$0, localObject2);
      }
      if (paramString != null)
      {
        ClassWriter.x.get(paramString, paramClassLoader);
        return;
      }
      throw new Exception("Failed to get ActivityThread.mLoadedApk");
    }
    throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
  }
}
