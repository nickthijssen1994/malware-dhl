package com.jingdong.aura.core.reflection;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public abstract class StateMachineInvocationHandler<T>
  implements InvocationHandler
{
  private T currentState;
  
  public StateMachineInvocationHandler() {}
  
  protected Object invoke()
  {
    return currentState;
  }
  
  public Object invoke(Object paramObject, Method paramMethod, Object[] paramArrayOfObject)
  {
    try
    {
      paramObject = paramMethod.invoke(invoke(), paramArrayOfObject);
      return paramObject;
    }
    catch (InvocationTargetException paramObject)
    {
      throw paramObject.getTargetException();
    }
    catch (IllegalAccessException paramObject)
    {
      paramObject.printStackTrace();
    }
    catch (IllegalArgumentException paramObject)
    {
      paramObject.printStackTrace();
    }
    return null;
  }
  
  void invoke(Object paramObject)
  {
    currentState = paramObject;
  }
}
