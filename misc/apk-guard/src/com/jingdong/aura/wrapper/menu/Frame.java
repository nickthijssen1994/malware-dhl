package com.jingdong.aura.wrapper.menu;

import android.os.AsyncTask;
import android.os.Build.VERSION;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.concurrent.Executor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.regex.Pattern;

public class Frame
  extends ThreadPoolExecutor
{
  private static final HashSet<Thread> a = new HashSet();
  static final Pattern b = Pattern.compile("cpu[0-9]+");
  private static final ThreadFactory d = new ModernAsyncTask.1();
  
  public static void a(Thread paramThread)
  {
    HashSet localHashSet = a;
    try
    {
      a.add(paramThread);
      return;
    }
    catch (Throwable paramThread)
    {
      throw paramThread;
    }
  }
  
  public static final boolean get(ThreadPoolExecutor paramThreadPoolExecutor)
  {
    if (Build.VERSION.SDK_INT >= 11) {}
    try
    {
      localObject = AsyncTask.class.getDeclaredField("THREAD_POOL_EXECUTOR");
      ((Field)localObject).setAccessible(true);
      ((Field)localObject).set(null, paramThreadPoolExecutor);
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        try
        {
          localObject = AsyncTask.class.getMethod("setDefaultExecutor", new Class[] { Executor.class });
          ((Method)localObject).setAccessible(true);
          ((Method)localObject).invoke(null, new Object[] { paramThreadPoolExecutor });
          return true;
        }
        catch (Exception localException2)
        {
          Object localObject;
          continue;
        }
        try
        {
          localObject = AsyncTask.class.getDeclaredField("sDefaultExecutor");
          ((Field)localObject).setAccessible(true);
          ((Field)localObject).set(null, paramThreadPoolExecutor);
          return true;
        }
        catch (Exception localException3)
        {
          continue;
        }
        try
        {
          localObject = AsyncTask.class.getDeclaredField("sExecutor");
          ((Field)localObject).setAccessible(true);
          ((Field)localObject).set(null, paramThreadPoolExecutor);
          return true;
        }
        catch (Exception paramThreadPoolExecutor) {}
        localException1 = localException1;
      }
    }
    return false;
  }
  
  public void execute(Runnable paramRunnable)
  {
    super.execute(new XMPPService.4(paramRunnable));
  }
}
