package com.jingdong.aura.wrapper.menu;

import android.app.Application;
import android.util.Log;
import com.jingdong.aura.core.asm.h;
import com.jingdong.aura.core.asm.i;
import com.jingdong.aura.core.util.rss.Attribute;
import com.jingdong.aura.core.util.rss.StringBuffer;
import com.jingdong.aura.wrapper.AuraConfig;
import com.jingdong.aura.wrapper.Handler;
import java.util.Iterator;
import java.util.List;
import org.osgi.framework.a;

public class c
{
  private static final StringBuffer a = Attribute.getInstance("OptDexProcess");
  private static c b;
  private Application c;
  private boolean f;
  
  c() {}
  
  private void a()
  {
    Iterator localIterator = h.a().b().iterator();
    while (localIterator.hasNext())
    {
      a localA = (a)localIterator.next();
      if ((localA != null) && (!a(AuraConfig.DELAY, localA.n()))) {
        try
        {
          ((i)localA).c();
        }
        catch (Throwable localThrowable)
        {
          Log.e("OptDexProcess", "Error while dexopt >>>", localThrowable);
        }
      }
    }
  }
  
  private boolean a(String[] paramArrayOfString, String paramString)
  {
    if (paramArrayOfString != null)
    {
      if (paramString == null) {
        return false;
      }
      int j = paramArrayOfString.length;
      int i = 0;
      while (i < j)
      {
        String str = paramArrayOfString[i];
        if ((str != null) && (str.equals(paramString))) {
          return true;
        }
        i += 1;
      }
    }
    return false;
  }
  
  private void b()
  {
    String[] arrayOfString = AuraConfig.DELAY;
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      Object localObject = arrayOfString[i];
      localObject = h.a().d((String)localObject);
      if (localObject != null) {
        try
        {
          ((i)localObject).c();
        }
        catch (Throwable localThrowable)
        {
          Log.e("OptDexProcess", "Error while dexopt >>>", localThrowable);
        }
      }
      i += 1;
    }
  }
  
  private void c()
  {
    String[] arrayOfString = AuraConfig.AUTO;
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      Object localObject = arrayOfString[i];
      localObject = h.a().d((String)localObject);
      if (localObject != null) {
        try
        {
          ((i)localObject).c();
        }
        catch (Throwable localThrowable)
        {
          Log.e("OptDexProcess", "Error while dexopt >>>", localThrowable);
        }
      }
      i += 1;
    }
  }
  
  private void close()
  {
    Handler.doInBackground(c);
    Handler.a(c);
  }
  
  /* Error */
  public static c read()
  {
    // Byte code:
    //   0: ldc 109
    //   2: monitorenter
    //   3: ldc 109
    //   5: monitorenter
    //   6: getstatic 111	com/jingdong/aura/wrapper/menu/c:b	Lcom/jingdong/aura/wrapper/menu/c;
    //   9: ifnonnull +13 -> 22
    //   12: new 2	com/jingdong/aura/wrapper/menu/c
    //   15: dup
    //   16: invokespecial 112	com/jingdong/aura/wrapper/menu/c:<init>	()V
    //   19: putstatic 111	com/jingdong/aura/wrapper/menu/c:b	Lcom/jingdong/aura/wrapper/menu/c;
    //   22: ldc 109
    //   24: monitorexit
    //   25: getstatic 111	com/jingdong/aura/wrapper/menu/c:b	Lcom/jingdong/aura/wrapper/menu/c;
    //   28: astore_0
    //   29: ldc 109
    //   31: monitorexit
    //   32: aload_0
    //   33: areturn
    //   34: astore_0
    //   35: ldc 109
    //   37: monitorexit
    //   38: aload_0
    //   39: athrow
    //   40: astore_0
    //   41: ldc 109
    //   43: monitorexit
    //   44: aload_0
    //   45: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   28	5	0	localC	c
    //   34	5	0	localThrowable1	Throwable
    //   40	5	0	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   6	22	34	java/lang/Throwable
    //   22	25	34	java/lang/Throwable
    //   35	38	34	java/lang/Throwable
    //   3	6	40	java/lang/Throwable
    //   25	29	40	java/lang/Throwable
    //   38	40	40	java/lang/Throwable
  }
  
  public void a(Application paramApplication)
  {
    c = paramApplication;
    f = true;
  }
  
  public void a(boolean paramBoolean1, boolean paramBoolean2)
  {
    try
    {
      if (!f)
      {
        a.e("Bundle Installer not initialized yet, process abort!");
        return;
      }
      long l;
      StringBuffer localStringBuffer;
      StringBuilder localStringBuilder;
      if (paramBoolean1)
      {
        l = System.currentTimeMillis();
        c();
        if (paramBoolean2) {
          close();
        }
        localStringBuffer = a;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("dexopt auto start bundles cost time = ");
        localStringBuilder.append(System.currentTimeMillis() - l);
        localStringBuilder.append(" ms");
        localStringBuffer.append(localStringBuilder.toString());
      }
      else
      {
        l = System.currentTimeMillis();
        a();
        localStringBuffer = a;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("dexopt bundles not delayed cost time = ");
        localStringBuilder.append(System.currentTimeMillis() - l);
        localStringBuilder.append(" ms");
        localStringBuffer.append(localStringBuilder.toString());
        if (paramBoolean2) {
          close();
        }
        l = System.currentTimeMillis();
        read().b();
        localStringBuffer = a;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("dexopt delayed bundles cost time = ");
        localStringBuilder.append(System.currentTimeMillis() - l);
        localStringBuilder.append(" ms");
        localStringBuffer.append(localStringBuilder.toString());
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
