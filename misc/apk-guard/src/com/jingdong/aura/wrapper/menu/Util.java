package com.jingdong.aura.wrapper.menu;

import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Debug;
import com.jingdong.aura.wrapper.a.b.c;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class Util
{
  private static final Executor THREAD_POOL_EXECUTOR;
  static final Queue<b.c> log = new LinkedList();
  private static final BlockingQueue<Runnable> sPoolWorkQueue = new LinkedBlockingQueue(128);
  
  static
  {
    ThreadPoolExecutor localThreadPoolExecutor = new ThreadPoolExecutor(8, 16, 1L, TimeUnit.SECONDS, sPoolWorkQueue, new AsyncServer.NamedThreadFactory(), new ThreadPoolExecutor.AbortPolicy());
    THREAD_POOL_EXECUTOR = localThreadPoolExecutor;
    Frame.get(localThreadPoolExecutor);
  }
  
  private static void log(Command paramCommand)
  {
    long l1 = System.nanoTime();
    long l2 = Debug.threadCpuTimeNanos();
    try
    {
      paramCommand.run();
      PrintStream localPrintStream1 = System.out;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Timing - ");
      localStringBuilder.append(Thread.currentThread().getName());
      localStringBuilder.append(" ");
      localStringBuilder.append(value);
      localStringBuilder.append(": ");
      long l3 = Debug.threadCpuTimeNanos();
      l3 = (l3 - l2) / 1000000L;
      localStringBuilder.append(l3);
      localStringBuilder.append("ms (cpu) / ");
      l3 = System.nanoTime();
      l3 = (l3 - l1) / 1000000L;
      localStringBuilder.append(l3);
      localStringBuilder.append("ms (real)");
      localPrintStream1.println(localStringBuilder.toString());
      return;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
      PrintStream localPrintStream2 = System.out;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Timing - ");
      localStringBuilder.append(Thread.currentThread().getName());
      localStringBuilder.append(" ");
      localStringBuilder.append(value);
      localStringBuilder.append(" (failed): ");
      localStringBuilder.append((Debug.threadCpuTimeNanos() - l2) / 1000000L);
      localStringBuilder.append("ms (cpu) / ");
      localStringBuilder.append((System.nanoTime() - l1) / 1000000L);
      localStringBuilder.append("ms (real)");
      localPrintStream2.println(localStringBuilder.toString());
      return;
      localPrintStream2 = System.out;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Exception in ");
      localStringBuilder.append(value);
      localPrintStream2.println(localStringBuilder.toString());
      localPrintStream2 = System.out;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Timing - ");
      localStringBuilder.append(Thread.currentThread().getName());
      localStringBuilder.append(" ");
      localStringBuilder.append(value);
      localStringBuilder.append(" (failed): ");
      localStringBuilder.append((Debug.threadCpuTimeNanos() - l2) / 1000000L);
      localStringBuilder.append("ms (cpu) / ");
      localStringBuilder.append((System.nanoTime() - l1) / 1000000L);
      localStringBuilder.append("ms (real)");
      localPrintStream2.println(localStringBuilder.toString());
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      for (;;) {}
    }
  }
  
  public static void onPostExecute(Command paramCommand)
  {
    paramCommand = new TileProviderMNM.IndexTask(paramCommand);
    if (Build.VERSION.SDK_INT < 11)
    {
      paramCommand.execute(new Void[0]);
      return;
    }
    paramCommand.executeOnExecutor(THREAD_POOL_EXECUTOR, new Void[0]);
  }
}
