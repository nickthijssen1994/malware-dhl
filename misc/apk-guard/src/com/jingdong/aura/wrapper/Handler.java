package com.jingdong.aura.wrapper;

import android.app.Application;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.Log;
import com.jingdong.aura.core.asm.f;
import java.io.File;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class Handler
{
  public static String a(String paramString)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("lib/");
    ((StringBuilder)localObject).append(f.q());
    ((StringBuilder)localObject).append("/lib");
    localObject = ((StringBuilder)localObject).toString();
    return paramString.substring(paramString.indexOf((String)localObject) + ((String)localObject).length(), paramString.indexOf(".so"));
  }
  
  public static void a(Application paramApplication)
  {
    System.setProperty("BUNDLES_INSTALLED", "true");
    paramApplication.sendBroadcast(new Intent("com.jingdong.aura.action.BUNDLES_INSTALLED"));
  }
  
  public static boolean a()
  {
    if (f.performShortcut()) {
      return false;
    }
    if (!ClassWriter.a()) {
      return false;
    }
    if (Build.VERSION.SDK_INT < 14) {
      return false;
    }
    return (Build.VERSION.SDK_INT < 14) || (Build.BRAND == null) || (!Build.BRAND.toLowerCase().contains("xiaomi")) || (Build.HARDWARE == null) || (!Build.HARDWARE.toLowerCase().contains("mt65"));
  }
  
  public static void doInBackground(Application paramApplication)
  {
    ConcurrentHashMap localConcurrentHashMap = new ConcurrentHashMap();
    localConcurrentHashMap.put(getPackageInfoversionName, "dexopt");
    Object localObject2 = paramApplication.getSharedPreferences("aura_config", 0);
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = paramApplication.getSharedPreferences("aura_config", 0);
    }
    paramApplication = ((SharedPreferences)localObject1).edit();
    localObject1 = localConcurrentHashMap.keySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (String)((Iterator)localObject1).next();
      paramApplication.putString((String)localObject2, (String)localConcurrentHashMap.get(localObject2));
    }
    paramApplication.commit();
  }
  
  public static String getFileName(String paramString)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("lib");
    ((StringBuilder)localObject).append(File.separator);
    ((StringBuilder)localObject).append(f.q());
    ((StringBuilder)localObject).append(File.separator);
    localObject = ((StringBuilder)localObject).toString();
    return paramString.substring(paramString.indexOf((String)localObject) + ((String)localObject).length());
  }
  
  public static PackageInfo getPackageInfo(Application paramApplication)
  {
    try
    {
      paramApplication = paramApplication.getPackageManager().getPackageInfo(paramApplication.getPackageName(), 0);
      return paramApplication;
    }
    catch (Throwable paramApplication)
    {
      Log.e("Utils", "Error to get PackageInfo >>>", paramApplication);
    }
    return new PackageInfo();
  }
  
  public static void init(Application paramApplication)
  {
    PackageInfo localPackageInfo = getPackageInfo(paramApplication);
    paramApplication = paramApplication.getSharedPreferences("aura_config", 0).edit();
    paramApplication.putInt("last_version_code", versionCode);
    paramApplication.putString("last_version_name", versionName);
    paramApplication.putString(versionName, "dexopt");
    paramApplication.commit();
  }
  
  public static boolean loadPreferences(Application paramApplication)
  {
    try
    {
      PackageInfo localPackageInfo = paramApplication.getPackageManager().getPackageInfo(paramApplication.getPackageName(), 0);
      int i = paramApplication.getSharedPreferences("aura_config", 0).getInt("last_version_code", 0);
      if (versionCode > i) {
        return true;
      }
    }
    catch (PackageManager.NameNotFoundException paramApplication)
    {
      paramApplication.printStackTrace();
    }
    return false;
  }
}
