package com.jingdong.aura.wrapper;

import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import com.jingdong.aura.core.asm.MethodWriter;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.security.cert.Certificate;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

public class ClassWriter
{
  private static int d;
  
  public static boolean a()
  {
    int i = d;
    if (i == -1)
    {
      String[] arrayOfString = new String[5];
      arrayOfString[0] = "/system/bin/";
      arrayOfString[1] = "/system/xbin/";
      arrayOfString[2] = "/system/sbin/";
      arrayOfString[3] = "/sbin/";
      arrayOfString[4] = "/vendor/bin/";
      int j = arrayOfString.length;
      i = 0;
      while (i < j)
      {
        if (new File(arrayOfString[i], "su").exists())
        {
          d = 1;
          return true;
        }
        i += 1;
      }
      return false;
    }
    return i == 1;
  }
  
  public static void create(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 64);
      paramContext = signatures[0];
      paramContext = encode(paramContext.toByteArray());
      b.b = paramContext;
      return;
    }
    catch (Throwable paramContext)
    {
      MethodWriter.d("com.jingdong.aura", "name not fount", "ApkUtils.initHostKey_1", paramContext);
      paramContext.printStackTrace();
      return;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      MethodWriter.d("com.jingdong.aura", "name not fount", "ApkUtils.initHostKey_1", paramContext);
      paramContext.printStackTrace();
    }
  }
  
  private static final String encode(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length > 0))
    {
      int i = 0;
      while (i < paramArrayOfByte.length)
      {
        String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
        if (str.length() < 2) {
          localStringBuilder.append(0);
        }
        localStringBuilder.append(str);
        i += 1;
      }
      return localStringBuilder.toString();
    }
    return null;
  }
  
  private static Certificate[] extract(JarFile paramJarFile, JarEntry paramJarEntry, byte[] paramArrayOfByte)
  {
    try
    {
      paramJarFile = new BufferedInputStream(paramJarFile.getInputStream(paramJarEntry));
      int i;
      do
      {
        i = paramJarFile.read(paramArrayOfByte, 0, paramArrayOfByte.length);
      } while (i != -1);
      paramJarFile.close();
      if (paramJarEntry != null)
      {
        paramJarFile = paramJarEntry.getCertificates();
        return paramJarFile;
      }
    }
    catch (Throwable paramJarFile) {}
    return null;
  }
  
  /* Error */
  public static final String get(String paramString)
  {
    // Byte code:
    //   0: new 127	java/util/jar/JarFile
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 156	java/util/jar/JarFile:<init>	(Ljava/lang/String;)V
    //   8: astore_0
    //   9: aload_0
    //   10: ldc -98
    //   12: invokevirtual 162	java/util/jar/JarFile:getJarEntry	(Ljava/lang/String;)Ljava/util/jar/JarEntry;
    //   15: astore_1
    //   16: aload_1
    //   17: ifnull +48 -> 65
    //   20: sipush 4096
    //   23: newarray byte
    //   25: astore_2
    //   26: aload_0
    //   27: aload_1
    //   28: aload_2
    //   29: invokestatic 164	com/jingdong/aura/wrapper/ClassWriter:extract	(Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;[B)[Ljava/security/cert/Certificate;
    //   32: astore_1
    //   33: aload_1
    //   34: ifnull +31 -> 65
    //   37: aload_1
    //   38: iconst_0
    //   39: aaload
    //   40: checkcast 166	java/security/cert/X509Certificate
    //   43: astore_1
    //   44: aload_1
    //   45: invokevirtual 169	java/security/cert/X509Certificate:getEncoded	()[B
    //   48: invokestatic 74	com/jingdong/aura/wrapper/ClassWriter:encode	([B)Ljava/lang/String;
    //   51: astore_1
    //   52: aload_0
    //   53: invokevirtual 170	java/util/jar/JarFile:close	()V
    //   56: aload_1
    //   57: areturn
    //   58: astore_0
    //   59: aload_0
    //   60: invokevirtual 171	java/io/IOException:printStackTrace	()V
    //   63: aload_1
    //   64: areturn
    //   65: aload_0
    //   66: invokevirtual 170	java/util/jar/JarFile:close	()V
    //   69: aconst_null
    //   70: areturn
    //   71: astore_0
    //   72: aload_0
    //   73: invokevirtual 171	java/io/IOException:printStackTrace	()V
    //   76: aconst_null
    //   77: areturn
    //   78: astore_1
    //   79: goto +6 -> 85
    //   82: astore_1
    //   83: aconst_null
    //   84: astore_0
    //   85: aload_1
    //   86: invokevirtual 94	java/lang/Throwable:printStackTrace	()V
    //   89: aconst_null
    //   90: areturn
    //   91: astore_1
    //   92: aload_0
    //   93: ifnull +15 -> 108
    //   96: aload_0
    //   97: invokevirtual 170	java/util/jar/JarFile:close	()V
    //   100: goto +8 -> 108
    //   103: astore_0
    //   104: aload_0
    //   105: invokevirtual 171	java/io/IOException:printStackTrace	()V
    //   108: aload_1
    //   109: athrow
    //   110: astore_0
    //   111: aconst_null
    //   112: areturn
    //   113: astore_0
    //   114: aconst_null
    //   115: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	116	0	paramString	String
    //   15	49	1	localObject	Object
    //   78	1	1	localThrowable1	Throwable
    //   82	4	1	localThrowable2	Throwable
    //   91	18	1	localThrowable3	Throwable
    //   25	4	2	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   52	56	58	java/io/IOException
    //   65	69	71	java/io/IOException
    //   9	16	78	java/lang/Throwable
    //   26	33	78	java/lang/Throwable
    //   44	52	78	java/lang/Throwable
    //   0	9	82	java/lang/Throwable
    //   85	89	91	java/lang/Throwable
    //   96	100	103	java/io/IOException
    //   0	9	110	java/io/IOException
    //   9	16	113	java/io/IOException
    //   26	33	113	java/io/IOException
    //   44	52	113	java/io/IOException
  }
}
