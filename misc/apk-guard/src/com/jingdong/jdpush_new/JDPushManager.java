package com.jingdong.jdpush_new;

import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.BaseBundle;
import android.os.Bundle;
import android.os.Message;
import android.os.Messenger;
import android.text.TextUtils;
import com.jd.push.common.util.CommonUtil;
import com.jd.push.common.util.LogUtils;
import com.jd.push.common.util.MakeDeviceTokenListener;
import com.jingdong.jdpush_new.util.PushUtil;

public class JDPushManager
{
  private static final String RESULT = "JDPushManager";
  private static ServiceConnection connection = (ServiceConnection)new JDPushManager.1();
  private static Messenger mRemoteMessenger;
  
  public JDPushManager() {}
  
  public static void bindClientId(Context paramContext, int paramInt, String paramString1, String paramString2)
  {
    String str = paramString2;
    if (TextUtils.isEmpty(paramString2)) {
      str = CommonUtil.makeDeviceToken(paramContext);
    }
    PushUtil.assembledData(paramContext, paramInt, paramString1, str, (short)1003);
  }
  
  public static void disConnect(Context paramContext)
  {
    ServiceConnection localServiceConnection = connection;
    try
    {
      paramContext.unbindService(localServiceConnection);
      return;
    }
    catch (Exception paramContext)
    {
      LogUtils.getInstance().e(RESULT, paramContext.getMessage());
    }
  }
  
  public static void getDeviceToken(Context paramContext, MakeDeviceTokenListener paramMakeDeviceTokenListener)
  {
    PushUtil.getDeviceToken(paramContext, paramMakeDeviceTokenListener);
  }
  
  private static void initLogcat(Context paramContext)
  {
    paramContext = CommonUtil.getLogCat(paramContext);
    LogUtils localLogUtils = LogUtils.getInstance();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("logCat=");
    localStringBuilder.append(paramContext);
    localLogUtils.e("initLogcat", localStringBuilder.toString());
    LogUtils.getInstance().setLogToLogCat(TextUtils.equals(paramContext, "1"));
  }
  
  public static void isConnected(Context paramContext)
  {
    if (mRemoteMessenger != null)
    {
      paramContext = Message.obtain(null, 9);
      paramContext.setData(new Bundle());
      Messenger localMessenger = mRemoteMessenger;
      try
      {
        localMessenger.send(paramContext);
        return;
      }
      catch (Exception paramContext) {}
    }
  }
  
  public static boolean isStart()
  {
    return mRemoteMessenger != null;
  }
  
  public static void reConnect(Context paramContext)
  {
    if (mRemoteMessenger != null)
    {
      localObject1 = Message.obtain(null, 7);
      localObject2 = new Bundle();
      ((BaseBundle)localObject2).putString("host", CommonUtil.getLongHost(paramContext));
      ((BaseBundle)localObject2).putInt("port", CommonUtil.getLongPort(paramContext));
      ((Message)localObject1).setData((Bundle)localObject2);
      paramContext = mRemoteMessenger;
    }
    try
    {
      paramContext.send((Message)localObject1);
      return;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    Object localObject1 = LogUtils.getInstance();
    paramContext = RESULT;
    Object localObject2 = "ip?????";
    break label81;
    localObject1 = LogUtils.getInstance();
    paramContext = RESULT;
    localObject2 = "??ip???...";
    label81:
    ((LogUtils)localObject1).e(paramContext, localObject2);
  }
  
  public static void recordOpenPushInfo(Context paramContext, String paramString)
  {
    PushUtil.recordOpenPushInfoAssembledData(paramContext, (short)1007, paramString);
  }
  
  public static void registDevToken(Context paramContext, int paramInt, String paramString)
  {
    PushUtil.registerDevTokenAssembledData(paramContext, paramInt, paramString, (short)1001);
  }
  
  public static void registerPush(Context paramContext)
  {
    initLogcat(paramContext);
    LogUtils.getInstance().d(RESULT, "====????====");
    if (CommonUtil.getAppID(paramContext) == null) {
      return;
    }
    if (CommonUtil.getAppSecret(paramContext) == null) {
      return;
    }
    for (;;)
    {
      try
      {
        localObject1 = mRemoteMessenger;
        if (localObject1 != null) {}
      }
      catch (Error localError)
      {
        Object localObject2;
        paramContext = LogUtils.getInstance();
        Object localObject1 = RESULT;
        String str1 = localError.toString();
        String str2;
        paramContext.e((String)localObject1, str2);
      }
      try
      {
        localObject1 = LogUtils.getInstance();
        localObject2 = RESULT;
        ((LogUtils)localObject1).e((String)localObject2, "??????");
        JDSPushService.start(paramContext);
        localObject1 = new Intent(paramContext, JDSPushService.class);
        localObject2 = connection;
        paramContext.bindService((Intent)localObject1, (ServiceConnection)localObject2, 1);
        return;
      }
      catch (Exception localException)
      {
        paramContext = LogUtils.getInstance();
        localObject1 = RESULT;
        str2 = localException.toString();
      }
    }
    paramContext = LogUtils.getInstance();
    localObject1 = RESULT;
    paramContext.e((String)localObject1, "????????????????");
    return;
  }
  
  public static void unBindClientId(Context paramContext, int paramInt, String paramString1, String paramString2)
  {
    String str = paramString2;
    if (TextUtils.isEmpty(paramString2)) {
      str = CommonUtil.makeDeviceToken(paramContext);
    }
    PushUtil.assembledData(paramContext, paramInt, paramString1, str, (short)1005);
  }
  
  public static void unBindDeviceToken(Context paramContext, int paramInt, String paramString)
  {
    PushUtil.removeDeviceToken(paramContext, paramInt, paramString, (short)1009);
  }
}
