package com.jingdong.jdpush_new.datahandle;

import android.content.Context;
import com.jd.push.common.eventbus.EventBus;
import com.jd.push.common.util.LogUtils;
import com.jd.push.common.util.NetWorkUtil;
import com.jd.push.common.util.PushMessageUtil;
import com.jingdong.jdpush_new.connect.PushSocket;
import com.jingdong.jdpush_new.entity.ConnectedEvent;
import com.jingdong.jdpush_new.entity.CustomerEvent;
import com.jingdong.jdpush_new.entity.MessageEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class JDPushEventHandler
{
  private static final String PAGE_KEY = "JDPushEventHandler";
  private static JDPushEventHandler handler;
  private ExecutorService mPostMsgPool = Executors.newSingleThreadExecutor();
  
  public JDPushEventHandler() {}
  
  private void connectSuccess(Context paramContext)
  {
    getInstance().sendJDMessage(4, (short)2001, null, paramContext);
  }
  
  public static JDPushEventHandler getInstance()
  {
    if (handler == null) {
      handler = new JDPushEventHandler();
    }
    return handler;
  }
  
  private void initService(Context paramContext)
  {
    LogUtils.getInstance().e("======", "initService...connect");
    PushSocket.getInstance().connect(paramContext);
  }
  
  private void netWorkChanged(Context paramContext)
  {
    int i = NetWorkUtil.getNetWorkType(paramContext);
    if ((i != 0) && (i != 1))
    {
      LogUtils.getInstance().e("======", "netWorkChanged...connect");
      PushSocket.getInstance().connect(paramContext);
      return;
    }
    HeartbeatManager.getInstance().openOrCloseHeartBeat(paramContext, false);
  }
  
  public void onEventAsync(ConnectedEvent paramConnectedEvent)
  {
    int i = paramConnectedEvent.getAction();
    boolean bool = PushSocket.getInstance().isConnected();
    String str = "0";
    if (bool) {
      str = "1";
    }
    if (i == 9) {
      PushMessageUtil.sendMsgToAppBroadcast(paramConnectedEvent.getContext(), 10, 7, str);
    }
  }
  
  public void onEventAsync(CustomerEvent paramCustomerEvent)
  {
    int i = paramCustomerEvent.getAction();
    paramCustomerEvent = paramCustomerEvent.getConetxt();
    switch (i)
    {
    default: 
      return;
    case 7: 
      PushSocket.getInstance().reConnect(paramCustomerEvent);
      return;
    }
    initService(paramCustomerEvent);
  }
  
  public void onEventAsync(MessageEvent paramMessageEvent)
  {
    int i = paramMessageEvent.getAction();
    short s = paramMessageEvent.getCommand();
    String str = paramMessageEvent.getMsgData();
    paramMessageEvent = paramMessageEvent.getConetxt();
    switch (i)
    {
    default: 
      return;
    case 3: 
      return;
    case 5: 
      netWorkChanged(paramMessageEvent);
      return;
    case 4: 
      JDPushMsgPackage.getInstance().sendMessage(paramMessageEvent, s, str);
      return;
    case 2: 
      connectSuccess(paramMessageEvent);
      return;
    }
    JDPushMsgParse.getInstance().parseMessage(paramMessageEvent, s, str);
  }
  
  public void register()
  {
    if (!EventBus.getDefault().isRegistered(handler)) {
      EventBus.getDefault().register(handler);
    }
  }
  
  public void sendJDMessage(int paramInt, Context paramContext)
  {
    mPostMsgPool.execute((Runnable)new JDPushEventHandler.3(this, paramInt, paramContext));
  }
  
  public void sendJDMessage(int paramInt, String paramString, Context paramContext)
  {
    mPostMsgPool.execute((Runnable)new JDPushEventHandler.5(this, paramInt, paramString, paramContext));
  }
  
  public void sendJDMessage(int paramInt, short paramShort, Context paramContext)
  {
    mPostMsgPool.execute((Runnable)new JDPushEventHandler.4(this, paramInt, paramShort, paramContext));
  }
  
  public void sendJDMessage(int paramInt, short paramShort, String paramString, Context paramContext)
  {
    mPostMsgPool.execute((Runnable)new JDPushEventHandler.6(this, paramInt, paramShort, paramString, paramContext));
  }
  
  public void sentConnectedEvent(int paramInt, Context paramContext)
  {
    mPostMsgPool.execute((Runnable)new JDPushEventHandler.2(this, paramInt, paramContext));
  }
  
  public void sentCustomerEvent(int paramInt, Context paramContext)
  {
    mPostMsgPool.execute((Runnable)new JDPushEventHandler.1(this, paramInt, paramContext));
  }
  
  public void unregister()
  {
    EventBus.getDefault().unregister(handler);
  }
}
