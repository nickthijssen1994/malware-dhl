package com.jingdong.jdpush_new.datahandle;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.text.TextUtils;
import com.jd.push.common.constant.Command;
import com.jd.push.common.constant.Constants;
import com.jd.push.common.util.CommonUtil;
import com.jd.push.common.util.DateUtils;
import com.jd.push.common.util.LogUtils;
import com.jd.push.common.util.PushMessageUtil;
import com.jd.push.common.util.PushSPUtil;
import com.jingdong.jdpush_new.db.AppInfoDbUtil;
import com.jingdong.jdpush_new.db.NecessaryPageDbUtil;
import com.jingdong.jdpush_new.db.RecordOpenPushInfoUtil;
import com.jingdong.jdpush_new.entity.dbEntity.AppInfo;
import com.jingdong.jdpush_new.entity.dbEntity.NecessaryMessage;
import com.jingdong.jdpush_new.entity.dbEntity.PushMsg;
import com.jingdong.jdpush_new.entity.dbEntity.RecordPushInfo;
import com.jingdong.jdpush_new.util.PushUtil;
import com.jingdong.jdpush_new.util.RetryUtil;
import java.util.Iterator;
import java.util.List;
import org.json.JSONException;
import org.json.JSONObject;

public class JDPushMsgParse
{
  private static final String LOGTAG = "JDPushMsgParse";
  private static JDPushMsgParse msgParse;
  private LogUtils mLog = LogUtils.getInstance();
  
  public JDPushMsgParse() {}
  
  private void doAfterAPPLogin(Context paramContext, String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    try
    {
      paramString = new JSONObject(paramString);
      int i = paramString.optInt("code");
      if (i == 0)
      {
        i = paramString.optInt("idleTime");
        HeartbeatManager.getInstance().setHeartStep(i);
        doAfterLoginSuccess(paramContext);
        return;
      }
      paramContext = mLog;
      paramString = LOGTAG;
      paramContext.e(paramString, "app login fail");
      return;
    }
    catch (JSONException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private void doAfterCreatClientId(Context paramContext, String paramString) {}
  
  private void doAfterHeartBeat(Context paramContext, String paramString)
  {
    mLog.d(LOGTAG, "?????? %s ", new Object[] { DateUtils.currentTime() });
    Constants.JD_PUSH_HEART_TIME -= 1;
  }
  
  private void doAfterLoginSuccess(Context paramContext)
  {
    HeartbeatManager.getInstance().openOrCloseHeartBeat(paramContext, true);
    sendRegistrationPage(paramContext);
    sendNecessaryPage(paramContext);
    sendRecordPushPage(paramContext);
  }
  
  public static JDPushMsgParse getInstance()
  {
    if (msgParse == null) {
      msgParse = new JDPushMsgParse();
    }
    return msgParse;
  }
  
  private boolean isAvailable(Context paramContext, String paramString)
  {
    paramContext = paramContext.getPackageManager().getInstalledPackages(0);
    int i = 0;
    while (i < paramContext.size())
    {
      if (getpackageName.equalsIgnoreCase(paramString)) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private void parseExtStation(Context paramContext, String paramString, short paramShort)
  {
    if (TextUtils.isEmpty(paramString))
    {
      LogUtils.getInstance().e(LOGTAG, "????????msg??");
      return;
    }
    LogUtils.getInstance().d(LOGTAG, "command:%s, msg:%s", new Object[] { Short.valueOf(paramShort), paramString });
    String str2 = null;
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      JSONObject localJSONObject = new JSONObject(paramString);
      localObject1 = localObject2;
      localObject2 = new PushMsg();
      try
      {
        ((PushMsg)localObject2).setAppId(String.valueOf(localJSONObject.optInt("appid")));
        ((PushMsg)localObject2).setTitle(localJSONObject.optString("title"));
        ((PushMsg)localObject2).setPayload(localJSONObject.optString("payload"));
        ((PushMsg)localObject2).setPackageName(localJSONObject.optString("packageName"));
        ((PushMsg)localObject2).setEcho(localJSONObject.optString("echo"));
        ((PushMsg)localObject2).setFlowId(localJSONObject.optString("flowId"));
        ((PushMsg)localObject2).setExtras(localJSONObject.optString("extras"));
        ((PushMsg)localObject2).setMsgId(localJSONObject.optString("msgId"));
        ((PushMsg)localObject2).setMsgType(localJSONObject.optInt("msgType"));
        ((PushMsg)localObject2).setDeviceTokenSrc(localJSONObject.optInt("deviceTokenSrc"));
        boolean bool = paramString.contains(CommonUtil.getPackageName(paramContext));
        if (bool)
        {
          localObject1 = LogUtils.getInstance();
          str2 = LOGTAG;
          ((LogUtils)localObject1).e(str2, "??????????? ----------- ");
          PushMessageUtil.sendMsgToAppBroadcast(paramContext, 11, 7, paramString);
        }
        paramString = JDPushEventHandler.getInstance();
        localObject1 = PushMsg.toJson((PushMsg)localObject2);
      }
      catch (Throwable paramString)
      {
        break label334;
      }
      catch (JSONException localJSONException1)
      {
        paramString = (String)localObject2;
        localObject2 = localJSONException1;
      }
      str1 = paramString;
    }
    catch (Throwable paramString)
    {
      localObject2 = localJSONException1;
    }
    catch (JSONException localJSONException2)
    {
      paramString = str2;
    }
    LogUtils.getInstance().e(LOGTAG, localJSONException2.toString());
    JDPushEventHandler localJDPushEventHandler = JDPushEventHandler.getInstance();
    String str1 = PushMsg.toJson(paramString);
    paramString = localJDPushEventHandler;
    paramString.sendJDMessage(4, (short)2010, str1, paramContext);
    return;
    label334:
    JDPushEventHandler.getInstance().sendJDMessage(4, (short)2010, PushMsg.toJson(localJDPushEventHandler), paramContext);
    throw paramString;
  }
  
  private void parseJDPushMsg(Context paramContext, String paramString, short paramShort)
  {
    if (TextUtils.isEmpty(paramString))
    {
      LogUtils.getInstance().e(LOGTAG, "????????msg??");
      return;
    }
    LogUtils.getInstance().d(LOGTAG, "command:%s, msg:%s", new Object[] { Short.valueOf(paramShort), paramString });
    Object localObject3 = null;
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      JSONObject localJSONObject = new JSONObject(paramString);
      localObject1 = localObject2;
      localObject2 = new PushMsg();
      try
      {
        ((PushMsg)localObject2).setAppId(String.valueOf(localJSONObject.optInt("appid")));
        ((PushMsg)localObject2).setTitle(localJSONObject.optString("title"));
        ((PushMsg)localObject2).setPayload(localJSONObject.optString("payload"));
        ((PushMsg)localObject2).setPackageName(localJSONObject.optString("packageName"));
        ((PushMsg)localObject2).setEcho(localJSONObject.optString("echo"));
        ((PushMsg)localObject2).setFlowId(localJSONObject.optString("flowId"));
        ((PushMsg)localObject2).setExtras(localJSONObject.optString("extras"));
        ((PushMsg)localObject2).setMsgId(localJSONObject.optString("msgId"));
        ((PushMsg)localObject2).setMsgType(localJSONObject.optInt("msgType"));
        ((PushMsg)localObject2).setDeviceTokenSrc(localJSONObject.optInt("deviceTokenSrc"));
        sendMsg(paramContext, paramString);
        paramString = JDPushEventHandler.getInstance();
        localObject1 = PushMsg.toJson((PushMsg)localObject2);
      }
      catch (Throwable paramString)
      {
        break label296;
      }
      catch (JSONException localJSONException1)
      {
        paramString = (String)localObject2;
        localObject2 = localJSONException1;
      }
      str = paramString;
    }
    catch (Throwable paramString)
    {
      localObject2 = localJSONException1;
    }
    catch (JSONException localJSONException2)
    {
      paramString = localObject3;
    }
    LogUtils.getInstance().e(LOGTAG, localJSONException2.toString());
    JDPushEventHandler localJDPushEventHandler = JDPushEventHandler.getInstance();
    String str = PushMsg.toJson(paramString);
    paramString = localJDPushEventHandler;
    paramString.sendJDMessage(4, (short)2006, str, paramContext);
    return;
    label296:
    JDPushEventHandler.getInstance().sendJDMessage(4, (short)2006, PushMsg.toJson(localJDPushEventHandler), paramContext);
    throw paramString;
  }
  
  private void parseJDStation(Context paramContext, String paramString, short paramShort)
  {
    if (TextUtils.isEmpty(paramString))
    {
      LogUtils.getInstance().e(LOGTAG, "????????msg??");
      return;
    }
    LogUtils.getInstance().d(LOGTAG, "command:%s, msg:%s", new Object[] { Short.valueOf(paramShort), paramString });
    String str2 = null;
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      JSONObject localJSONObject = new JSONObject(paramString);
      localObject1 = localObject2;
      localObject2 = new PushMsg();
      try
      {
        ((PushMsg)localObject2).setAppId(String.valueOf(localJSONObject.optInt("appid")));
        ((PushMsg)localObject2).setTitle(localJSONObject.optString("title"));
        ((PushMsg)localObject2).setPayload(localJSONObject.optString("payload"));
        ((PushMsg)localObject2).setPackageName(localJSONObject.optString("packageName"));
        ((PushMsg)localObject2).setEcho(localJSONObject.optString("echo"));
        ((PushMsg)localObject2).setFlowId(localJSONObject.optString("flowId"));
        ((PushMsg)localObject2).setExtras(localJSONObject.optString("extras"));
        ((PushMsg)localObject2).setMsgId(localJSONObject.optString("msgId"));
        ((PushMsg)localObject2).setMsgType(localJSONObject.optInt("msgType"));
        ((PushMsg)localObject2).setDeviceTokenSrc(localJSONObject.optInt("deviceTokenSrc"));
        boolean bool = paramString.contains(CommonUtil.getPackageName(paramContext));
        if (bool)
        {
          localObject1 = LogUtils.getInstance();
          str2 = LOGTAG;
          ((LogUtils)localObject1).e(str2, "??????????? ----------- ");
          PushMessageUtil.sendMsgToAppBroadcast(paramContext, 9, 7, paramString);
        }
        paramString = JDPushEventHandler.getInstance();
        localObject1 = PushMsg.toJson((PushMsg)localObject2);
      }
      catch (Throwable paramString)
      {
        break label334;
      }
      catch (JSONException localJSONException1)
      {
        paramString = (String)localObject2;
        localObject2 = localJSONException1;
      }
      str1 = paramString;
    }
    catch (Throwable paramString)
    {
      localObject2 = localJSONException1;
    }
    catch (JSONException localJSONException2)
    {
      paramString = str2;
    }
    LogUtils.getInstance().e(LOGTAG, localJSONException2.toString());
    JDPushEventHandler localJDPushEventHandler = JDPushEventHandler.getInstance();
    String str1 = PushMsg.toJson(paramString);
    paramString = localJDPushEventHandler;
    paramString.sendJDMessage(4, (short)2008, str1, paramContext);
    return;
    label334:
    JDPushEventHandler.getInstance().sendJDMessage(4, (short)2008, PushMsg.toJson(localJDPushEventHandler), paramContext);
    throw paramString;
  }
  
  private void sendMsg(Context paramContext, String paramString)
  {
    LogUtils localLogUtils = LogUtils.getInstance();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("sendmsg --- ");
    localStringBuilder.append(paramString);
    localLogUtils.e("pushDEBUg", localStringBuilder.toString());
    if (paramString.contains(CommonUtil.getPackageName(paramContext)))
    {
      LogUtils.getInstance().e(LOGTAG, "??????????? ----------- ");
      PushMessageUtil.sendMsgToAppBroadcast(paramContext, 2, 7, paramString);
    }
  }
  
  public void doAfterBindClient(Context paramContext, int paramInt, String paramString1, String paramString2)
  {
    try
    {
      int i = new JSONObject(paramString1).optInt("STATUS");
      if (i == 0)
      {
        paramString1 = mLog;
        Object localObject = LOGTAG;
        paramString1.d((String)localObject, "??ClientId??");
        paramString1 = NecessaryPageDbUtil.getInstance(paramContext);
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString2);
        ((StringBuilder)localObject).append(paramInt);
        paramString1 = paramString1.findPageByID(((StringBuilder)localObject).toString());
        if (paramString1 != null)
        {
          boolean bool = TextUtils.equals(paramString1.getStatus(), "1");
          if (bool)
          {
            paramString1.setStatus("0");
            NecessaryPageDbUtil.getInstance(paramContext).updateItem(paramString1);
          }
        }
      }
      else
      {
        paramContext = mLog;
        paramString1 = LOGTAG;
        paramContext.e(paramString1, "ERROR:?????status:%s", new Object[] { Integer.valueOf(i) });
        return;
      }
    }
    catch (JSONException paramContext)
    {
      mLog.e(LOGTAG, "ERROR:????,%s", new Object[] { paramContext.toString() });
    }
  }
  
  public void doAfterOpenMessage(Context paramContext, int paramInt, String paramString1, String paramString2)
  {
    try
    {
      paramString1 = new JSONObject(paramString1);
      paramInt = paramString1.optInt("STATUS");
      if (paramInt == 0)
      {
        paramString1 = paramString1.optString("msgId");
        paramString1 = RecordOpenPushInfoUtil.getInstance(paramContext).findRecordPushMsg(paramString1);
        if (paramString1 != null)
        {
          boolean bool = TextUtils.equals(paramString1.getStatus(), "1");
          if (bool)
          {
            paramString1.setStatus("0");
            RecordOpenPushInfoUtil.getInstance(paramContext).updateItem(paramString1);
          }
        }
      }
      else
      {
        paramContext = mLog;
        paramString1 = LOGTAG;
        paramContext.e(paramString1, "doAfterOpenMessage????");
        return;
      }
    }
    catch (JSONException paramContext)
    {
      paramString1 = mLog;
      paramString2 = LOGTAG;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("doAfterOpenMessage.ecp=");
      localStringBuilder.append(paramContext.getMessage());
      paramString1.e(paramString2, localStringBuilder.toString());
    }
  }
  
  public void doAfterRegistDT(Context paramContext, int paramInt, String paramString1, String paramString2)
  {
    for (;;)
    {
      try
      {
        paramString1 = new JSONObject(paramString1);
        int i = paramString1.optInt("STATUS");
        if (i != 0) {}
      }
      catch (JSONException paramContext)
      {
        boolean bool;
        paramString1 = mLog;
        paramString2 = LOGTAG;
        Object localObject = new StringBuilder();
        ((StringBuilder)localObject).append("doAfterRegistDT.ecp=");
        ((StringBuilder)localObject).append(paramContext.getMessage());
        paramString1.e(paramString2, ((StringBuilder)localObject).toString());
        return;
      }
      try
      {
        bool = paramString1.has("deviceToken");
        if (bool)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append(PushSPUtil.getInstance().get(paramContext, "usedToken", ""));
          ((StringBuilder)localObject).append("");
          localObject = ((StringBuilder)localObject).toString();
          bool = TextUtils.equals((CharSequence)localObject, paramString1.getString("deviceToken"));
          if (bool) {
            PushMessageUtil.sendMsgToAppBroadcast(paramContext, 8, 7, (String)localObject);
          }
        }
      }
      catch (Exception paramString1) {}
    }
    paramString1 = AppInfoDbUtil.getInstance(paramContext).findAppByAppid(paramString2);
    if ((paramString1 != null) && (paramInt == 7))
    {
      paramString1.setUpdateStatus("0");
      AppInfoDbUtil.getInstance(paramContext).updateItem(paramString1);
    }
    paramString1 = NecessaryPageDbUtil.getInstance(paramContext);
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramString2);
    ((StringBuilder)localObject).append(paramInt);
    ((StringBuilder)localObject).append(1001);
    paramString1 = paramString1.findPageByID(((StringBuilder)localObject).toString());
    if (paramString1 != null)
    {
      bool = TextUtils.equals(paramString1.getStatus(), "1");
      if (bool)
      {
        paramString1.setStatus("0");
        NecessaryPageDbUtil.getInstance(paramContext).updateItem(paramString1);
        return;
        paramContext = mLog;
        paramString1 = LOGTAG;
        paramContext.e(paramString1, "doAfterRegistDT????");
        return;
      }
    }
  }
  
  public void doAfterUnBindClientId(Context paramContext, int paramInt, String paramString1, String paramString2)
  {
    try
    {
      int i = new JSONObject(paramString1).optInt("STATUS");
      if (i == 0)
      {
        paramString1 = NecessaryPageDbUtil.getInstance(paramContext);
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(paramString2);
        localStringBuilder.append(paramInt);
        paramString1 = paramString1.findPageByID(localStringBuilder.toString());
        if (paramString1 != null)
        {
          boolean bool = TextUtils.equals(paramString1.getStatus(), "1");
          if (bool)
          {
            paramString1.setStatus("0");
            NecessaryPageDbUtil.getInstance(paramContext).updateItem(paramString1);
          }
        }
      }
      else
      {
        paramContext = mLog;
        paramString1 = LOGTAG;
        paramContext.e(paramString1, "doAfterUnBindClientId????");
        return;
      }
    }
    catch (JSONException paramContext)
    {
      paramString1 = mLog;
      paramString2 = LOGTAG;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("doAfterUnBindClientId.ecp=");
      localStringBuilder.append(paramContext.getMessage());
      paramString1.e(paramString2, localStringBuilder.toString());
    }
  }
  
  public void doAfterUnBindDT(String paramString) {}
  
  public void parseMessage(Context paramContext, short paramShort, String paramString)
  {
    if (Command.isValidRecCommand(paramShort))
    {
      mLog.e(LOGTAG, "parseMessage command: %s,msg: %s, %s ", new Object[] { Short.valueOf(paramShort), paramString, DateUtils.currentTime() });
      switch (paramShort)
      {
      default: 
        return;
      case 2003: 
      case 2006: 
      case 2008: 
        return;
      case 2009: 
        parseExtStation(paramContext, paramString, paramShort);
        return;
      case 2007: 
        parseJDStation(paramContext, paramString, paramShort);
        return;
      case 2005: 
        parseJDPushMsg(paramContext, paramString, paramShort);
        return;
      case 2004: 
        doAfterHeartBeat(paramContext, paramString);
        return;
      }
      doAfterAPPLogin(paramContext, paramString);
      return;
    }
    mLog.e(LOGTAG, "ERROR:????,command:%s,msg:%s", new Object[] { Short.valueOf(paramShort), paramString });
  }
  
  public void sendNecessaryPage(Context paramContext)
  {
    mLog.e(LOGTAG, "??????????????");
    try
    {
      Object localObject1 = NecessaryPageDbUtil.getInstance(paramContext).findAllNecessaryPage();
      if (localObject1 != null)
      {
        int i = ((List)localObject1).size();
        if (i <= 0) {
          return;
        }
        localObject1 = ((List)localObject1).iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject1).hasNext();
          if (!bool) {
            break;
          }
          Object localObject2 = ((Iterator)localObject1).next();
          localObject2 = (NecessaryMessage)localObject2;
          bool = TextUtils.equals(((NecessaryMessage)localObject2).getStatus(), "1");
          if (bool)
          {
            i = new JSONObject(((NecessaryMessage)localObject2).getMsgBody()).optInt("DEVMODLE");
            String str = ((NecessaryMessage)localObject2).getCommand();
            LogUtils localLogUtils = mLog;
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("sendNecessaryPage=");
            localStringBuilder.append(NecessaryMessage.toJson((NecessaryMessage)localObject2));
            localLogUtils.e("sendNecessaryPage", localStringBuilder.toString());
            RetryUtil.retryLogic(paramContext, Short.valueOf(str).shortValue(), NecessaryMessage.toJson((NecessaryMessage)localObject2), i);
          }
        }
      }
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public void sendRecordPushPage(Context paramContext)
  {
    mLog.e(LOGTAG, "????????");
    try
    {
      Object localObject1 = RecordOpenPushInfoUtil.getInstance(paramContext).findAllAppInfo();
      if (localObject1 != null)
      {
        int i = ((List)localObject1).size();
        if (i <= 0) {
          return;
        }
        localObject1 = ((List)localObject1).iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject1).hasNext();
          if (!bool) {
            break;
          }
          Object localObject2 = ((Iterator)localObject1).next();
          localObject2 = (RecordPushInfo)localObject2;
          bool = TextUtils.equals(((RecordPushInfo)localObject2).getStatus(), "1");
          if (bool)
          {
            i = new JSONObject(((RecordPushInfo)localObject2).getMsgBody()).optInt("DEVMODLE");
            String str = ((RecordPushInfo)localObject2).getCommad();
            LogUtils localLogUtils = mLog;
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("sendRecordPushPage=");
            localStringBuilder.append(RecordPushInfo.toJson((RecordPushInfo)localObject2));
            localLogUtils.e("sendRecordPushPage", localStringBuilder.toString());
            RetryUtil.retryLogic(paramContext, Short.valueOf(str).shortValue(), RecordPushInfo.toJson((RecordPushInfo)localObject2), i);
          }
        }
      }
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public void sendRegistrationPage(Context paramContext)
  {
    PushUtil.registerDevTokenAssembledData(paramContext, 7, CommonUtil.makeDeviceToken(paramContext), (short)1001);
  }
}
