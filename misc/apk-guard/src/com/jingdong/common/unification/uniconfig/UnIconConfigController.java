package com.jingdong.common.unification.uniconfig;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import android.graphics.NinePatch;
import android.text.TextUtils;
import com.jd.lib.un.business.a.a;
import com.jd.lib.un.utils.UnLibFileUtils;
import com.jd.lib.un.utils.UnSharedPreferencesUtils;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;
import rx.Observable;
import rx.schedulers.Schedulers;

public class UnIconConfigController
{
  private static UnIconConfigController controller;
  private static LinkedHashMap<String, IconConfigModel> iconCache = (LinkedHashMap)new UnIconConfigController.LRULinkedHashMap(10);
  private static Set<String> ninePatchIds;
  private int iconNotFoundTimes = 0;
  private Object syncObject = new Object();
  
  private UnIconConfigController()
  {
    ninePatchIds = new HashSet();
    ninePatchIds.add("tab_var_070");
    ninePatchIds.add("tab_var_071");
    ninePatchIds.add("tab_var_095");
    ninePatchIds.add("tab_var_108");
    ninePatchIds.add("tab_var_124");
    ninePatchIds.add("tab_var_126");
    ninePatchIds.add("search_var_006");
    ninePatchIds.add("detail_var_045");
  }
  
  private Bitmap createBitmap(IconConfigModel paramIconConfigModel, BitmapFactory.Options paramOptions)
  {
    paramIconConfigModel = path;
    try
    {
      paramIconConfigModel = BitmapFactory.decodeFile(paramIconConfigModel, paramOptions);
      return paramIconConfigModel;
    }
    catch (Exception paramIconConfigModel)
    {
      for (;;) {}
    }
    return null;
  }
  
  /* Error */
  public static UnIconConfigController getController()
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: getstatic 84	com/jingdong/common/unification/uniconfig/UnIconConfigController:controller	Lcom/jingdong/common/unification/uniconfig/UnIconConfigController;
    //   6: ifnull +12 -> 18
    //   9: getstatic 84	com/jingdong/common/unification/uniconfig/UnIconConfigController:controller	Lcom/jingdong/common/unification/uniconfig/UnIconConfigController;
    //   12: astore_0
    //   13: ldc 2
    //   15: monitorexit
    //   16: aload_0
    //   17: areturn
    //   18: ldc 2
    //   20: monitorenter
    //   21: getstatic 84	com/jingdong/common/unification/uniconfig/UnIconConfigController:controller	Lcom/jingdong/common/unification/uniconfig/UnIconConfigController;
    //   24: ifnonnull +13 -> 37
    //   27: new 2	com/jingdong/common/unification/uniconfig/UnIconConfigController
    //   30: dup
    //   31: invokespecial 85	com/jingdong/common/unification/uniconfig/UnIconConfigController:<init>	()V
    //   34: putstatic 84	com/jingdong/common/unification/uniconfig/UnIconConfigController:controller	Lcom/jingdong/common/unification/uniconfig/UnIconConfigController;
    //   37: getstatic 84	com/jingdong/common/unification/uniconfig/UnIconConfigController:controller	Lcom/jingdong/common/unification/uniconfig/UnIconConfigController;
    //   40: astore_0
    //   41: ldc 2
    //   43: monitorexit
    //   44: ldc 2
    //   46: monitorexit
    //   47: aload_0
    //   48: areturn
    //   49: astore_0
    //   50: ldc 2
    //   52: monitorexit
    //   53: aload_0
    //   54: athrow
    //   55: astore_0
    //   56: ldc 2
    //   58: monitorexit
    //   59: aload_0
    //   60: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   12	36	0	localUnIconConfigController	UnIconConfigController
    //   49	5	0	localThrowable1	Throwable
    //   55	5	0	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   21	37	49	java/lang/Throwable
    //   37	44	49	java/lang/Throwable
    //   50	53	49	java/lang/Throwable
    //   3	13	55	java/lang/Throwable
    //   18	21	55	java/lang/Throwable
    //   53	55	55	java/lang/Throwable
  }
  
  private String getNinePatchId(String paramString)
  {
    Set localSet = ninePatchIds;
    Object localObject = paramString;
    if (localSet != null)
    {
      localObject = paramString;
      if (localSet.contains(paramString))
      {
        float f = DpiUtil.getDensity(a.a().c());
        if (UnLog.D)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("dpi:");
          ((StringBuilder)localObject).append(f);
          UnLog.d("UniconConfigController", ((StringBuilder)localObject).toString());
        }
        localObject = paramString;
        if (f <= 2.0F)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append(paramString);
          ((StringBuilder)localObject).append("_2x");
          localObject = ((StringBuilder)localObject).toString();
        }
      }
    }
    if (UnLog.D)
    {
      paramString = new StringBuilder();
      paramString.append("id:");
      paramString.append((String)localObject);
      UnLog.d("UniconConfigController", paramString.toString());
    }
    return localObject;
  }
  
  private Bitmap scaleBitmap(Bitmap paramBitmap, String paramString)
  {
    if (paramBitmap == null) {
      return null;
    }
    if (NinePatch.isNinePatchChunk(paramBitmap.getNinePatchChunk())) {
      return paramBitmap;
    }
    float f1 = DpiUtil.getDensity(a.a().c());
    StringBuilder localStringBuilder;
    if (UnLog.D)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("dpi:");
      localStringBuilder.append(f1);
      UnLog.d("Uniocn", localStringBuilder.toString());
    }
    int i = DpiUtil.getWidth(a.a().c());
    float f2 = f1 / 3.0F;
    if (UnLog.D)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("scale:");
      localStringBuilder.append(f2);
      UnLog.d("Uniocn", localStringBuilder.toString());
    }
    f1 = f2;
    if (i == 480)
    {
      f1 = f2;
      if ("tab_100".equals(paramString)) {
        f1 = 0.46F;
      }
    }
    paramString = new Matrix();
    paramString.postScale(f1, f1);
    return Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), paramString, true);
  }
  
  public void clearAllData()
  {
    DataBaseController.getController().deleteAllData();
    UnSharedPreferencesUtils.putLong(a.a().c(), "uni_config_data_version", UnIconConfigHelper.getLastDataVersion());
    UnSharedPreferencesUtils.putLong(a.a().c(), "uni_config_download_data_version", 0L);
  }
  
  public void clearCache()
  {
    iconCache.clear();
  }
  
  public void download4NotFinish()
  {
    if (UnSharedPreferencesUtils.getLong(a.a().c(), "uni_config_download_data_version", 0L) == UnIconConfigHelper.getUniConfigDataVersion()) {
      return;
    }
    List localList = DataBaseController.getController().queryListNotDown();
    NetDataController.getController().multiDownload(localList);
  }
  
  public void execute() {}
  
  public boolean fileIsExists(IconConfigModel paramIconConfigModel)
  {
    if (!UnLibFileUtils.fileIsExists(path))
    {
      Observable.create(new UnIconConfigController.2(this, paramIconConfigModel)).observeOn(Schedulers.io());
      return false;
    }
    return true;
  }
  
  public Bitmap getBitmap(String paramString, BitmapFactory.Options paramOptions)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString);
      if (bool) {
        return null;
      }
      String str = getNinePatchId(paramString);
      Object localObject = (IconConfigModel)iconCache.get(str);
      if ((localObject != null) && (bitmap != null))
      {
        paramString = bitmap;
        return paramString;
      }
      if (localObject != null)
      {
        paramString = (String)localObject;
        if (!TextUtils.isEmpty(path)) {}
      }
      else
      {
        paramString = DataBaseController.getController().queryByIconId(str);
      }
      if ((paramString != null) && (!TextUtils.isEmpty(path)) && (fileIsExists(paramString)))
      {
        paramOptions = createBitmap(paramString, paramOptions);
      }
      else
      {
        localObject = DefaultDataController.getController();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(str);
        localStringBuilder.append(".png");
        paramOptions = ((DefaultDataController)localObject).getAssetsBitmap(localStringBuilder.toString(), null, paramOptions);
      }
      localObject = scaleBitmap(paramOptions, str);
      paramOptions = paramString;
      if (paramString == null)
      {
        paramOptions = new IconConfigModel();
        id = str;
      }
      bitmap = ((Bitmap)localObject);
      iconCache.put(str, paramOptions);
      return localObject;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public String getIconPath4DraweeView(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    Object localObject = (IconConfigModel)iconCache.get(paramString);
    if (localObject != null)
    {
      if (!TextUtils.isEmpty(cachePath)) {
        return cachePath;
      }
      if (!TextUtils.isEmpty(path))
      {
        paramString = new StringBuilder();
        paramString.append("file://");
        paramString.append(path);
        cachePath = paramString.toString();
        return cachePath;
      }
    }
    IconConfigModel localIconConfigModel2 = DataBaseController.getController().queryByIconId(paramString);
    IconConfigModel localIconConfigModel1 = localIconConfigModel2;
    if ((localIconConfigModel2 != null) && (!TextUtils.isEmpty(path)) && (fileIsExists(localIconConfigModel2)))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("file://");
      ((StringBuilder)localObject).append(path);
      localObject = ((StringBuilder)localObject).toString();
    }
    else
    {
      String str2 = DefaultDataController.getController().getIconPath(paramString);
      String str1 = str2;
      localObject = str1;
      if (TextUtils.isEmpty(str2))
      {
        localObject = str1;
        if (localIconConfigModel2 != null) {
          localObject = url;
        }
      }
    }
    if (localIconConfigModel2 == null)
    {
      localIconConfigModel1 = new IconConfigModel();
      id = paramString;
    }
    cachePath = ((String)localObject);
    iconCache.put(paramString, localIconConfigModel1);
    return localObject;
  }
  
  public String getTextColor(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    IconConfigModel localIconConfigModel2 = (IconConfigModel)iconCache.get(paramString);
    IconConfigModel localIconConfigModel1;
    if ((localIconConfigModel2 != null) && (config != null))
    {
      localIconConfigModel1 = localIconConfigModel2;
      if (!TextUtils.isEmpty(config.textColor)) {}
    }
    else
    {
      localIconConfigModel2 = DataBaseController.getController().queryByIconId(paramString);
      localIconConfigModel1 = localIconConfigModel2;
      iconCache.put(paramString, localIconConfigModel2);
    }
    if ((localIconConfigModel1 != null) && (config != null)) {
      return config.textColor;
    }
    return null;
  }
  
  public IconExtraConfigModel getTextConfig(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    IconConfigModel localIconConfigModel2 = (IconConfigModel)iconCache.get(paramString);
    IconConfigModel localIconConfigModel1;
    if ((localIconConfigModel2 != null) && (config != null))
    {
      localIconConfigModel1 = localIconConfigModel2;
      if (TextUtils.isEmpty(config.textColor))
      {
        localIconConfigModel1 = localIconConfigModel2;
        if (!TextUtils.isEmpty(config.edge)) {}
      }
    }
    else
    {
      localIconConfigModel2 = DataBaseController.getController().queryByIconId(paramString);
      localIconConfigModel1 = localIconConfigModel2;
      iconCache.put(paramString, localIconConfigModel2);
    }
    if ((localIconConfigModel1 != null) && (config != null)) {
      return config;
    }
    return null;
  }
  
  public void iconNotFound() {}
  
  public void requestData()
  {
    NetDataController.getController().requestToJson(new UnIconConfigController.1(this));
  }
  
  public void setIconNotFoundTimes(int paramInt)
  {
    try
    {
      iconNotFoundTimes = paramInt;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
