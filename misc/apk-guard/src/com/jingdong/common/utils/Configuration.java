package com.jingdong.common.utils;

import android.content.Context;
import android.content.res.AssetManager;
import android.text.TextUtils;
import com.jingdong.jdsdk.JdSdk;
import com.jingdong.sdk.oklog.OKLog;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class Configuration
{
  public static final String ALARM_NEED_WAKE_UP = "alarmNeedWakeUp";
  public static final String APPLICATION_SHORTCUT = "applicationShortcut";
  public static final String APPLICATION_UPGRADE = "applicationUpgrade";
  public static final String APP_START_COUNT = "appStartCount";
  public static final String ATTEMPTS = "attempts";
  public static final String ATTEMPTS_TIME = "attemptsTime";
  public static final String BARCODE_SCAN = "barCodeScan";
  public static final String BEFORE_INIT_TIP = "beforeInitTip";
  public static final String BROADCAST_FROM_CUTEVENT = "com.jingdong.app.mall.cutevent";
  public static final String BROADCAST_FROM_WXLOGIN = "com.jingdong.app.mall.wxloginreceiver";
  public static final String CASHIERDESK_BETA_HOST = "paybeta.m.jd.com";
  public static final String CASHIERDESK_HOST = "pay.m.jd.com";
  public static final String CBTMODE = "CBTMode";
  public static final String CDN_HOST = "cndHost";
  public static final String CHECK_NEW_VERSION = "checkNewVersion";
  public static final String CLIENT = "client";
  public static final String COMMUNITY_HOST = "go.m.jd.com";
  public static final String CONNECT_TIMEOUT = "connectTimeout";
  public static final String CONNECT_TIMEOUT_FOR_2G = "connectTimeoutFor2G";
  public static final String CONNECT_TIMEOUT_FOR_WIFI = "connectTimeoutForWIFI";
  public static final String COST_HINT = "costHint";
  public static final String CURRENT_APK_COMMENT = "currentApkComment";
  public static final String CURRENT_APK_MD5 = "currentApkMD5";
  public static final String CURRENT_APK_SIZE = "currentApkSize";
  public static final String DEFAULT_FIRST_GET_TOKEN_DELAY = "defaultFirstGetTokenDelay";
  public static final String DEFAULT_PUSH_MESSAGE_ALARM_DELAY = "defaultPushMessageAlarmDelay";
  public static final String DISCUSSUPLOADIMAGE_HEIGHT = "discussUploadImageHeight";
  public static final String DISCUSSUPLOADIMAGE_QUALITY = "discussUploadImageQuality";
  public static final String DISCUSSUPLOADIMAGE_WIDTH = "discussUploadImageWidth";
  public static final int D_MODEL_SPLIT_LEN = 25;
  public static final String HAS_INIT_TIP = "hasInitTip";
  public static final String HOST = "host";
  public static final String INIT_FIRST_POOL_SIZE = "initFirstPoolSize";
  public static final String INIT_SECOND_POOL_SIZE = "initSecondPoolSize";
  public static final String INIT_THIRD_POOL_SIZE = "initThirdPoolSize";
  public static final String IS_COOLMART = "isCoolMart";
  public static final String JLOG_VERSION = "JLogVersion";
  public static final String KEY_ABTEST_THRESHOLD = "keyAbTestBackFunctionIdAccessThresholdMS";
  public static final String KEY_DEVICE_THRESHOLD = "keyDeviceAccessThresholdMS";
  public static final String KEY_LAST_ACCESS_ABTEST = "keyLastAccessAbTestBackFunctionId";
  public static final String KEY_LAST_ACCESS_DEVICE = "keyLastAccessDevice";
  public static final String KEY_LAST_ACCESS_SERVERCONFIG = "keyLastAccessServerConfig";
  public static final String KEY_LAST_ACCESS_START = "keyLastAccessStart";
  public static final String KEY_LAST_ACCESS_VERSION = "keyLastAccessVersion";
  public static final String KEY_LAST_UPDATE = "keyLastUpdate";
  public static final String KEY_SERVERCONFIG_THRESHOLD = "keyServerConfigAccessThresholdMS";
  public static final String KEY_START_THRESHOLD = "keyAbTestBackFunctionIdAccessThresholdMS";
  public static final String KEY_TIME_STAMP = "keyTimestamp";
  public static final String KEY_UPDATE_INSTALL_NUM = "keyLastInstallShowNum";
  public static final String KEY_UPDATE_INTERVAL = "keyUpdateInterval";
  public static final String KEY_UPDATE_LIMIT = "keyLastShowLimit";
  public static final String KEY_UPDATE_NUM = "keyLastShowNum";
  public static final String KEY_UPDATE_WEB = "keyUpdateWeb";
  public static final String KEY_VERSION_THRESHOLD = "keyVersionAccessThresholdMS";
  public static final String LEAVE_TIME_GAP = "leaveTimeGap";
  public static final String LOCAL_FILE_CACHE = "localFileCache";
  public static final String LOCAL_MEMORY_CACHE = "localMemoryCache";
  public static final String LOCATION_TIP = "locationTip";
  public static final String MAX_FIRST_POOL_SIZE = "maxFirstPoolSize";
  public static final String MAX_SECOND_POOL_SIZE = "maxSecondPoolSize";
  public static final String MAX_THIRD_POOL_SIZE = "maxThirdPoolSize";
  public static final String MIAppId = "2882303761517506461";
  public static final String MIAppKey = "5601750626461";
  public static final String MSG_BOOT_COMPLETED = "msgBootCompleted";
  public static final String MSG_CENTER_HOST = "jpns.m.jd.com";
  public static final String MSG_CENTER_HOST_BETA = "jpns.m.jd.care";
  public static final String MSG_CENTER_HTTPS_HOST_BETA = "beta-jpns.m.jd.com";
  public static final String MSG_HOST = "msgHost";
  public static final String MSG_SET_SWITCH = "msgSwitch";
  public static final String MUST_USE_WIFI_MAC = "mustUseWifiMac";
  public static final String MZAppId = "110198";
  public static final String MZAppKey = "d9b0957b105346fd9c521e65b9af8d25";
  public static final String M_HOST = "mHost";
  public static final String NEW_MSG_CENTER_HOST = "msg.m.jd.com";
  public static final String NEW_MSG_CENTER_HOST_BETA = "msg.m.jd.care";
  public static final String NEW_MSG_CENTER_HTTPS_HOST_BETA = "beta-msg.m.jd.com";
  public static final String OPTIMIZE_COMBINE_API = "optCombineAPI";
  public static final String ORDER_HOST = "orderHost";
  public static final String OTHER_APP = "otherApp";
  public static final String PAI_HOST = "paiHost";
  public static final String PARTNER = "partner";
  public static final String PAY_APP_ID = "jd_android_app4";
  public static final String PAY_APP_ID_BETA = "android_app_beta";
  public static final String PAY_APP_KEY = "e53jfgRgd7Hk";
  public static final String PAY_APP_KEY_BETA = "6fg7weDfF6gh";
  public static final String PAY_URL_ADDRESS = "http://pay.m.jd.com/index.action";
  public static final String PAY_URL_ADDRESS_BETA = "http://paybeta.m.jd.com/index.action";
  public static final String PAY_URL_ADDRESS_TEST = "http://paytest.m.jd.com/index.action";
  public static final String PERSONAL_CONFIG_HOST = "cc.m.jd.com";
  public static final String PHOTOBUY_BETA_HOST = "photobuy.jd.care";
  public static final String PHOTOBUY_HOST = "photobuy.jd.local";
  public static final String PHOTO_SHUT = "photoShut";
  public static final String PLUG_HOST = "plugHost";
  public static final String PRINT_JLOG = "useJLog";
  public static final String PUSH_MSG_MODE = "msgMode";
  public static final String READ_TIMEOUT = "readTimeout";
  public static final String READ_TIMEOUT_FOR_WIFI = "readTimeoutForWIFI";
  public static final String REQUEST_METHOD = "requestMethod";
  public static final String ROUTINE_CHECK_DELAY_TIME = "routineCheckDelayTime";
  public static final String SETTLEMENT_GENAPPPAYID_PAY_URL_ADDRESS_BETA = "http://paybeta.m.jd.com/index.action";
  public static final String SETTLEMENT_PAY_URL_ADDRESS = "http://pay.m.jd.com/pay/indexForPre.action";
  public static final String SETTLEMENT_PAY_URL_ADDRESS_BETA = "http://paybeta.m.jd.com/pay/indexForPre.action";
  public static final String SLEF_BROADCAST_PERMISSION = "com.jingdong.app.mall.permission.self_broadcast";
  public static final String SPARSE_IMG_SWITCH = "sparseImgSwitch";
  public static final String SUB_UNION_ID = "subunionId";
  public static final String TEST_MODE = "testMode";
  public static final String TEST_RELEASE_HOST_MODE = "releaseHostMode";
  public static final String TOKEN_HOST = "tokenHost";
  public static final String UNIFORM_GLOBAL_HOST_BETA = "beta-api.jd.co.th";
  public static final String UNIFORM_GLOBAL_HOST_INTRA_BETA = "beta-intra.jd.co.th";
  public static final String UNIFORM_HOST = "api.m.jd.com";
  public static final String UNIFORM_HOST_BETA = "api.m.jd.care";
  public static final String UNIFORM_HOST_HTTPS_BETA = "beta-api.m.jd.com";
  public static final String UNIFORM_HOST_TEST = "android.m.jd.care/service";
  public static final String UNION_ID = "unionId";
  public static final String UPDATE_DELAY = "updateDelay";
  public static final String VOICE_SEARCH_SHUT = "voiseSearchShut";
  public static final boolean WX_CHECK_SIG = true;
  private static Map<String, String> localProperties;
  private static Properties properties;
  private static Map<String, String> v2Cache;
  
  public Configuration() {}
  
  public static Boolean getBooleanProperty(String paramString)
  {
    return getBooleanProperty(paramString, null);
  }
  
  public static Boolean getBooleanProperty(String paramString, Boolean paramBoolean)
  {
    paramString = getProperty(paramString);
    if (paramString == null) {
      return paramBoolean;
    }
    try
    {
      paramString = Boolean.valueOf(paramString);
      return paramString;
    }
    catch (Exception paramString) {}
    return paramBoolean;
  }
  
  public static String getExtraProperty(String paramString1, String paramString2)
  {
    if (v2Cache == null) {
      v2Cache = new HashMap();
    }
    if (v2Cache.containsKey(paramString1)) {
      return (String)v2Cache.get(paramString1);
    }
    v2Cache.put(paramString1, paramString2);
    if (OKLog.c)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("getExtraProperty, key=");
      localStringBuilder.append(paramString1);
      localStringBuilder.append(",result=");
      localStringBuilder.append(paramString2);
      OKLog.append("Configuration", localStringBuilder.toString());
    }
    return paramString2;
  }
  
  public static Integer getIntegerProperty(String paramString)
  {
    return getIntegerProperty(paramString, null);
  }
  
  public static Integer getIntegerProperty(String paramString, Integer paramInteger)
  {
    paramString = getProperty(paramString);
    if (paramString == null) {
      return paramInteger;
    }
    try
    {
      paramString = Integer.valueOf(paramString);
      return paramString;
    }
    catch (Exception paramString) {}
    return paramInteger;
  }
  
  public static Long getLongProperty(String paramString)
  {
    return getLongProperty(paramString, null);
  }
  
  public static Long getLongProperty(String paramString, Long paramLong)
  {
    paramString = getProperty(paramString);
    if (paramString == null) {
      return paramLong;
    }
    try
    {
      paramString = Long.valueOf(paramString);
      return paramString;
    }
    catch (Exception paramString) {}
    return paramLong;
  }
  
  public static Properties getProperties()
  {
    init();
    return properties;
  }
  
  public static String getProperty(String paramString)
  {
    return getProperty(paramString, null);
  }
  
  public static String getProperty(String paramString1, String paramString2)
  {
    
    if (TextUtils.equals(paramString1, "partner"))
    {
      if (OKLog.c) {
        return getExtraProperty(paramString1, "test");
      }
      return getExtraProperty(paramString1, "jingdong");
    }
    if (TextUtils.equals(paramString1, "unionId"))
    {
      paramString2 = getExtraProperty(paramString1, "50965");
    }
    else if (TextUtils.equals(paramString1, "subunionId"))
    {
      paramString2 = getExtraProperty(paramString1, "jingdong");
    }
    else
    {
      Object localObject = properties;
      if (localObject != null) {
        localObject = ((Properties)localObject).getProperty(paramString1);
      } else {
        localObject = null;
      }
      if (localObject == null) {
        paramString1 = (String)localProperties.get(paramString1);
      } else {
        paramString1 = (String)localObject;
      }
      if (paramString1 != null) {
        paramString2 = paramString1;
      }
    }
    if (OKLog.c)
    {
      paramString1 = new StringBuilder();
      paramString1.append("getProperty-->");
      paramString1.append(paramString2);
      OKLog.append("Configuration", paramString1.toString());
    }
    return paramString2;
  }
  
  private static void init()
  {
    for (;;)
    {
      try
      {
        localObject = localProperties;
        if (localObject != null) {
          return;
        }
        localProperties = new HashMap();
        localProperties.put("orderHost", "api.m.jd.com");
        localProperties.put("paiHost", "jdimg.m.jd.com");
        localProperties.put("host", "api.m.jd.com");
        localProperties.put("mHost", null);
        localProperties.put("plugHost", "jdmps.m.jd.com");
        localProperties.put("tokenHost", "api.m.jd.com");
        localProperties.put("msgHost", "jpns.m.jd.com");
        localProperties.put("cndHost", "cdngw.m.jd.com");
        localProperties.put("connectTimeout", "10000");
        localProperties.put("connectTimeoutFor2G", "20000");
        localProperties.put("connectTimeoutForWIFI", "10000");
        localProperties.put("readTimeout", "15000");
        localProperties.put("readTimeoutForWIFI", "10000");
        localProperties.put("attempts", "3");
        localProperties.put("attemptsTime", "0");
        localProperties.put("requestMethod", "post");
        localProperties.put("localMemoryCache", "false");
        localProperties.put("localFileCache", "false");
        localProperties.put("beforeInitTip", "false");
        localProperties.put("msgBootCompleted", "true");
        localProperties.put("msgSwitch", "true");
        localProperties.put("locationTip", "false");
        localProperties.put("sparseImgSwitch", "true");
        localProperties.put("initFirstPoolSize", "3");
        localProperties.put("maxFirstPoolSize", "3");
        localProperties.put("initSecondPoolSize", "0");
        localProperties.put("maxSecondPoolSize", "0");
        localProperties.put("initThirdPoolSize", "1");
        localProperties.put("maxThirdPoolSize", "1");
        localProperties.put("discussUploadImageWidth", "500");
        localProperties.put("discussUploadImageHeight", "500");
        localProperties.put("discussUploadImageQuality", "80");
        localProperties.put("routineCheckDelayTime", "2000");
        localProperties.put("leaveTimeGap", "86400000");
        localProperties.put("defaultFirstGetTokenDelay", "180000");
        localProperties.put("defaultPushMessageAlarmDelay", "600000");
        localProperties.put("testMode", "false");
        localProperties.put("useJLog", "true");
        localProperties.put("JLogVersion", "2");
        localProperties.put("CBTMode", "false");
        localProperties.put("checkNewVersion", "true");
        localProperties.put("otherApp", "true");
        localProperties.put("msgMode", "true");
        localProperties.put("updateDelay", "0");
        localProperties.put("client", "android");
        localProperties.put("applicationUpgrade", "true");
        localProperties.put("applicationShortcut", "true");
        localProperties.put("costHint", "false");
        localProperties.put("barCodeScan", "true");
        localProperties.put("photoShut", "false");
        localProperties.put("voiseSearchShut", "false");
        localProperties.put("isCoolMart", "false");
        localProperties.put("keyDeviceAccessThresholdMS", Long.toString(86400000L));
        localProperties.put("keyServerConfigAccessThresholdMS", Long.toString(86400000L));
        localProperties.put("keyVersionAccessThresholdMS", Long.toString(86400000L));
        localProperties.put("keyAbTestBackFunctionIdAccessThresholdMS", Long.toString(86400000L));
        localProperties.put("keyAbTestBackFunctionIdAccessThresholdMS", Long.toString(1800000L));
        localProperties.put("mustUseWifiMac", "false");
      }
      catch (Throwable localThrowable)
      {
        Object localObject;
        throw localThrowable;
      }
      try
      {
        localObject = new Properties();
        properties = (Properties)localObject;
        localObject = JdSdk.getInstance().getApplicationContext().getAssets().open("config.properties");
        if (localObject != null)
        {
          Properties localProperties1 = properties;
          localProperties1.load((InputStream)localObject);
        }
      }
      catch (Exception localException) {}
    }
  }
  
  public static boolean isBeta()
  {
    return JdSdk.getInstance().getBuildConfigDebug();
  }
}
