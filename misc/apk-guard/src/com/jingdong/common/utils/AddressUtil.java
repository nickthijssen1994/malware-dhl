package com.jingdong.common.utils;

import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jingdong.common.entity.AddressGlobal;
import com.jingdong.common.entity.DesCommonUtils;
import com.jingdong.common.entity.UserInfo;
import com.jingdong.jdsdk.utils.JdStringUtils;
import com.jingdong.jdsdk.utils.Md5Encrypt;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.platform.lib.openapi.OpenApiHelper;
import com.jingdong.sdk.platform.lib.openapi.login.ILoginUserBase;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;

public class AddressUtil
{
  private static final String ADDRESS_CHANGE = "AddressChange";
  private static final String ADDRESS_GLOBAL_ALL = "AddressGlobal";
  private static final String ADDRESS_GLOBAL_TAG = "Global_";
  private static final String PAGE_KEY = "AddressUtil";
  private static AddressUtil.AddressCallback mAddressCallback;
  
  public AddressUtil() {}
  
  public static void clearAddressChange()
  {
    try
    {
      SPUtils.putBoolean("AddressChange", false);
      return;
    }
    catch (Exception localException)
    {
      if (OKLog.c) {
        OKLog.setNode("AddressUtil", localException);
      }
    }
  }
  
  public static void clearAddressGlobal()
  {
    SPUtils.remove("AddressGlobal");
    SPUtils.remove(getGlobalUserKey());
    SPUtils.remove(getGlobalUserKeyMD5());
  }
  
  public static String decodeValue(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    try
    {
      boolean bool = JdStringUtils.isEncrypt(paramString);
      if (bool)
      {
        String str = DesCommonUtils.key;
        str = DesCommonUtils.decryptForDesCbc(paramString, str);
        bool = TextUtils.isEmpty(str);
        if (!bool) {
          return str;
        }
      }
    }
    catch (Exception localException)
    {
      OKLog.setNode("AddressUtil", localException);
    }
    return paramString;
  }
  
  public static String decodeValue(JSONObject paramJSONObject, String paramString)
  {
    if (paramJSONObject != null)
    {
      if (TextUtils.isEmpty(paramString)) {
        return "";
      }
      return decodeValue(paramJSONObject.optString(paramString));
    }
    return "";
  }
  
  /* Error */
  public static void encodeValue(JSONObject paramJSONObject, String paramString1, String paramString2)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnull +66 -> 67
    //   4: aload_1
    //   5: invokestatic 65	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   8: ifeq +4 -> 12
    //   11: return
    //   12: aload_2
    //   13: invokestatic 73	com/jingdong/jdsdk/utils/JdStringUtils:isEncrypt	(Ljava/lang/String;)Z
    //   16: istore_3
    //   17: iload_3
    //   18: ifeq +34 -> 52
    //   21: aload_2
    //   22: invokestatic 90	com/jingdong/common/utils/AddressUtil:decodeValue	(Ljava/lang/String;)Ljava/lang/String;
    //   25: astore_2
    //   26: getstatic 78	com/jingdong/common/entity/DesCommonUtils:key	Ljava/lang/String;
    //   29: astore 4
    //   31: aload_0
    //   32: aload_1
    //   33: aload_2
    //   34: aload 4
    //   36: invokestatic 95	com/jingdong/common/entity/DesCommonUtils:encryptForDesCbc	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   39: invokevirtual 99	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
    //   42: pop
    //   43: return
    //   44: aload_0
    //   45: aload_1
    //   46: aload_2
    //   47: invokevirtual 99	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
    //   50: pop
    //   51: return
    //   52: aload_0
    //   53: aload_1
    //   54: aload_2
    //   55: invokevirtual 99	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
    //   58: pop
    //   59: return
    //   60: astore_0
    //   61: ldc 19
    //   63: aload_0
    //   64: invokestatic 45	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   67: return
    //   68: astore 4
    //   70: goto -26 -> 44
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	73	0	paramJSONObject	JSONObject
    //   0	73	1	paramString1	String
    //   0	73	2	paramString2	String
    //   16	2	3	bool	boolean
    //   29	6	4	str	String
    //   68	1	4	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   12	17	60	java/lang/Exception
    //   21	26	60	java/lang/Exception
    //   44	51	60	java/lang/Exception
    //   52	59	60	java/lang/Exception
    //   31	43	68	java/lang/Exception
  }
  
  /* Error */
  public static AddressGlobal getAddressGlobal()
  {
    // Byte code:
    //   0: invokestatic 54	com/jingdong/common/utils/AddressUtil:getGlobalUserKey	()Ljava/lang/String;
    //   3: astore 10
    //   5: invokestatic 57	com/jingdong/common/utils/AddressUtil:getGlobalUserKeyMD5	()Ljava/lang/String;
    //   8: astore 11
    //   10: ldc 67
    //   12: astore_1
    //   13: aload 10
    //   15: ldc 67
    //   17: invokestatic 104	com/jingdong/common/utils/SPUtils:getString	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   20: astore 4
    //   22: aload 4
    //   24: astore_2
    //   25: aload_1
    //   26: astore_3
    //   27: aload 11
    //   29: ldc 67
    //   31: invokestatic 104	com/jingdong/common/utils/SPUtils:getString	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   34: astore 6
    //   36: aload 6
    //   38: astore_1
    //   39: aload_1
    //   40: astore_3
    //   41: ldc 13
    //   43: ldc 67
    //   45: invokestatic 104	com/jingdong/common/utils/SPUtils:getString	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   48: astore 9
    //   50: aload 9
    //   52: astore_3
    //   53: aload_1
    //   54: astore 8
    //   56: aload_2
    //   57: astore 7
    //   59: aload_3
    //   60: astore 5
    //   62: getstatic 41	com/jingdong/sdk/oklog/OKLog:c	Z
    //   65: ifeq +172 -> 237
    //   68: new 106	java/lang/StringBuilder
    //   71: dup
    //   72: invokespecial 107	java/lang/StringBuilder:<init>	()V
    //   75: astore 5
    //   77: aload 5
    //   79: ldc 109
    //   81: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   84: pop
    //   85: aload 5
    //   87: aload 10
    //   89: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   92: pop
    //   93: aload 5
    //   95: ldc 115
    //   97: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   100: pop
    //   101: aload 4
    //   103: invokestatic 65	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   106: istore_0
    //   107: iload_0
    //   108: ifeq +10 -> 118
    //   111: aload 6
    //   113: astore 4
    //   115: goto +3 -> 118
    //   118: aload 5
    //   120: aload 4
    //   122: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   125: pop
    //   126: ldc 19
    //   128: aload 5
    //   130: invokevirtual 118	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   133: invokestatic 121	com/jingdong/sdk/oklog/OKLog:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   136: new 106	java/lang/StringBuilder
    //   139: dup
    //   140: invokespecial 107	java/lang/StringBuilder:<init>	()V
    //   143: astore 4
    //   145: aload 4
    //   147: ldc 123
    //   149: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   152: pop
    //   153: aload 4
    //   155: aload 9
    //   157: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   160: pop
    //   161: ldc 19
    //   163: aload 4
    //   165: invokevirtual 118	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   168: invokestatic 121	com/jingdong/sdk/oklog/OKLog:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   171: aload_1
    //   172: astore 8
    //   174: aload_2
    //   175: astore 7
    //   177: aload_3
    //   178: astore 5
    //   180: goto +57 -> 237
    //   183: astore 5
    //   185: aload_2
    //   186: astore 4
    //   188: aload_3
    //   189: astore_2
    //   190: aload 5
    //   192: astore_3
    //   193: goto +28 -> 221
    //   196: astore 5
    //   198: aconst_null
    //   199: astore 6
    //   201: aload_3
    //   202: astore_1
    //   203: aload_2
    //   204: astore 4
    //   206: aload 6
    //   208: astore_2
    //   209: aload 5
    //   211: astore_3
    //   212: goto +9 -> 221
    //   215: astore_3
    //   216: aconst_null
    //   217: astore 4
    //   219: aconst_null
    //   220: astore_2
    //   221: ldc 19
    //   223: aload_3
    //   224: invokestatic 45	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   227: aload_2
    //   228: astore 5
    //   230: aload 4
    //   232: astore 7
    //   234: aload_1
    //   235: astore 8
    //   237: aload 8
    //   239: invokestatic 65	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   242: ifne +78 -> 320
    //   245: aload 8
    //   247: ldc 125
    //   249: invokestatic 131	com/jd/framework/json/JDJSON:parseObject	(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
    //   252: astore_1
    //   253: aload_1
    //   254: checkcast 125	com/jingdong/common/entity/AddressGlobal
    //   257: astore_2
    //   258: aload 10
    //   260: aload 11
    //   262: invokestatic 135	android/text/TextUtils:equals	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z
    //   265: istore_0
    //   266: aload_2
    //   267: astore_1
    //   268: iload_0
    //   269: ifne +150 -> 419
    //   272: aload_2
    //   273: astore_1
    //   274: aload_2
    //   275: ifnull +144 -> 419
    //   278: aload 10
    //   280: invokestatic 138	com/jingdong/common/utils/SPUtils:contains	(Ljava/lang/String;)Z
    //   283: istore_0
    //   284: aload_2
    //   285: astore_1
    //   286: iload_0
    //   287: ifeq +132 -> 419
    //   290: aload 10
    //   292: invokestatic 50	com/jingdong/common/utils/SPUtils:remove	(Ljava/lang/String;)V
    //   295: aload_2
    //   296: astore_1
    //   297: goto +122 -> 419
    //   300: astore_3
    //   301: aload_2
    //   302: astore_1
    //   303: aload_3
    //   304: astore_2
    //   305: goto +6 -> 311
    //   308: astore_2
    //   309: aconst_null
    //   310: astore_1
    //   311: ldc 19
    //   313: aload_2
    //   314: invokestatic 45	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   317: goto +102 -> 419
    //   320: aload 7
    //   322: invokestatic 65	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   325: ifne +92 -> 417
    //   328: aload 7
    //   330: ldc 125
    //   332: invokestatic 131	com/jd/framework/json/JDJSON:parseObject	(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
    //   335: astore_1
    //   336: aload_1
    //   337: checkcast 125	com/jingdong/common/entity/AddressGlobal
    //   340: astore_2
    //   341: aload_2
    //   342: astore_1
    //   343: aload_2
    //   344: ifnull +75 -> 419
    //   347: aload_2
    //   348: aload_2
    //   349: invokevirtual 142	com/jingdong/common/entity/AddressGlobal:getTimeStamp	()J
    //   352: invokestatic 146	com/jingdong/common/utils/AddressUtil:updateAddressGlobal	(Lcom/jingdong/common/entity/AddressGlobal;J)V
    //   355: aload 10
    //   357: aload 11
    //   359: invokestatic 135	android/text/TextUtils:equals	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z
    //   362: istore_0
    //   363: aload_2
    //   364: astore_1
    //   365: iload_0
    //   366: ifne +53 -> 419
    //   369: aload 10
    //   371: invokestatic 138	com/jingdong/common/utils/SPUtils:contains	(Ljava/lang/String;)Z
    //   374: istore_0
    //   375: aload_2
    //   376: astore_1
    //   377: iload_0
    //   378: ifeq +41 -> 419
    //   381: aload 10
    //   383: invokestatic 50	com/jingdong/common/utils/SPUtils:remove	(Ljava/lang/String;)V
    //   386: aload_2
    //   387: astore_1
    //   388: goto +31 -> 419
    //   391: astore_3
    //   392: goto +6 -> 398
    //   395: astore_3
    //   396: aconst_null
    //   397: astore_2
    //   398: aload_2
    //   399: astore_1
    //   400: getstatic 41	com/jingdong/sdk/oklog/OKLog:c	Z
    //   403: ifeq +16 -> 419
    //   406: ldc 19
    //   408: aload_3
    //   409: invokestatic 45	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   412: aload_2
    //   413: astore_1
    //   414: goto +5 -> 419
    //   417: aconst_null
    //   418: astore_1
    //   419: aload 5
    //   421: invokestatic 65	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   424: ifne +26 -> 450
    //   427: aload 5
    //   429: ldc 125
    //   431: invokestatic 131	com/jd/framework/json/JDJSON:parseObject	(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
    //   434: astore_2
    //   435: aload_2
    //   436: checkcast 125	com/jingdong/common/entity/AddressGlobal
    //   439: astore_2
    //   440: goto +12 -> 452
    //   443: astore_2
    //   444: ldc 19
    //   446: aload_2
    //   447: invokestatic 45	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   450: aconst_null
    //   451: astore_2
    //   452: invokestatic 152	com/jingdong/sdk/platform/lib/openapi/OpenApiHelper:getILoginUserBase	()Lcom/jingdong/sdk/platform/lib/openapi/login/ILoginUserBase;
    //   455: invokeinterface 158 1 0
    //   460: ifeq +117 -> 577
    //   463: aload_1
    //   464: ifnull +101 -> 565
    //   467: aload_2
    //   468: ifnull +97 -> 565
    //   471: aload_1
    //   472: invokevirtual 142	com/jingdong/common/entity/AddressGlobal:getTimeStamp	()J
    //   475: aload_2
    //   476: invokevirtual 142	com/jingdong/common/entity/AddressGlobal:getTimeStamp	()J
    //   479: lcmp
    //   480: iflt +44 -> 524
    //   483: getstatic 41	com/jingdong/sdk/oklog/OKLog:c	Z
    //   486: ifeq +99 -> 585
    //   489: new 106	java/lang/StringBuilder
    //   492: dup
    //   493: invokespecial 107	java/lang/StringBuilder:<init>	()V
    //   496: astore_2
    //   497: aload_2
    //   498: ldc -96
    //   500: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   503: pop
    //   504: aload_2
    //   505: aload_1
    //   506: invokevirtual 142	com/jingdong/common/entity/AddressGlobal:getTimeStamp	()J
    //   509: invokevirtual 163	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   512: pop
    //   513: ldc 19
    //   515: aload_2
    //   516: invokevirtual 118	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   519: invokestatic 121	com/jingdong/sdk/oklog/OKLog:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   522: aload_1
    //   523: areturn
    //   524: getstatic 41	com/jingdong/sdk/oklog/OKLog:c	Z
    //   527: ifeq +60 -> 587
    //   530: new 106	java/lang/StringBuilder
    //   533: dup
    //   534: invokespecial 107	java/lang/StringBuilder:<init>	()V
    //   537: astore_1
    //   538: aload_1
    //   539: ldc -91
    //   541: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   544: pop
    //   545: aload_1
    //   546: aload_2
    //   547: invokevirtual 142	com/jingdong/common/entity/AddressGlobal:getTimeStamp	()J
    //   550: invokevirtual 163	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   553: pop
    //   554: ldc 19
    //   556: aload_1
    //   557: invokevirtual 118	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   560: invokestatic 121	com/jingdong/sdk/oklog/OKLog:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   563: aload_2
    //   564: areturn
    //   565: aload_1
    //   566: ifnull +5 -> 571
    //   569: aload_1
    //   570: areturn
    //   571: aload_2
    //   572: ifnull +11 -> 583
    //   575: aload_2
    //   576: areturn
    //   577: aload_2
    //   578: ifnull +11 -> 589
    //   581: aload_2
    //   582: areturn
    //   583: aconst_null
    //   584: areturn
    //   585: aload_1
    //   586: areturn
    //   587: aload_2
    //   588: areturn
    //   589: aconst_null
    //   590: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   106	272	0	bool	boolean
    //   12	574	1	localObject1	Object
    //   24	281	2	localObject2	Object
    //   308	6	2	localException1	Exception
    //   340	100	2	localObject3	Object
    //   443	4	2	localException2	Exception
    //   451	137	2	localStringBuilder	StringBuilder
    //   26	186	3	localObject4	Object
    //   215	9	3	localException3	Exception
    //   300	4	3	localException4	Exception
    //   391	1	3	localException5	Exception
    //   395	14	3	localException6	Exception
    //   20	211	4	localObject5	Object
    //   60	119	5	localObject6	Object
    //   183	8	5	localException7	Exception
    //   196	14	5	localException8	Exception
    //   228	200	5	localObject7	Object
    //   34	173	6	str1	String
    //   57	272	7	localObject8	Object
    //   54	192	8	localObject9	Object
    //   48	108	9	str2	String
    //   3	379	10	str3	String
    //   8	350	11	str4	String
    // Exception table:
    //   from	to	target	type
    //   68	107	183	java/lang/Exception
    //   118	136	183	java/lang/Exception
    //   136	171	183	java/lang/Exception
    //   27	36	196	java/lang/Exception
    //   41	50	196	java/lang/Exception
    //   13	22	215	java/lang/Exception
    //   258	266	300	java/lang/Exception
    //   278	284	300	java/lang/Exception
    //   290	295	300	java/lang/Exception
    //   245	253	308	java/lang/Exception
    //   347	363	391	java/lang/Exception
    //   369	375	391	java/lang/Exception
    //   381	386	391	java/lang/Exception
    //   328	336	395	java/lang/Exception
    //   427	435	443	java/lang/Exception
  }
  
  public static AddressGlobal getAddressGlobalByAll()
  {
    Object localObject3 = null;
    Object localObject2;
    try
    {
      String str = SPUtils.getString("AddressGlobal", "");
      boolean bool = TextUtils.isEmpty(str);
      Object localObject1 = localObject3;
      if (!bool)
      {
        localObject1 = JDJSON.parseObject(str, AddressGlobal.class);
        localObject1 = (AddressGlobal)localObject1;
      }
    }
    catch (Exception localException)
    {
      OKLog.setNode("AddressUtil", localException);
      localObject2 = localObject3;
    }
    if (localObject2 != null) {
      localObject2.setIsUserAddress(Boolean.valueOf(false));
    }
    return localObject2;
  }
  
  public static int getAddressListSize(ArrayList paramArrayList)
  {
    if ((paramArrayList != null) && (paramArrayList.size() != 0)) {
      return paramArrayList.size();
    }
    return 0;
  }
  
  public static AddressGlobal getDefaultAddress(ArrayList paramArrayList)
  {
    if (paramArrayList != null)
    {
      if (paramArrayList.size() == 0) {
        return null;
      }
      paramArrayList = paramArrayList.iterator();
      while (paramArrayList.hasNext())
      {
        AddressGlobal localAddressGlobal = (AddressGlobal)paramArrayList.next();
        if ((localAddressGlobal != null) && (localAddressGlobal.getAddressDefault())) {
          return localAddressGlobal;
        }
      }
    }
    return null;
  }
  
  private static AddressGlobal getFirstNormalAddress(ArrayList paramArrayList)
  {
    if ((paramArrayList != null) && (paramArrayList.size() > 0))
    {
      paramArrayList = paramArrayList.iterator();
      while (paramArrayList.hasNext())
      {
        AddressGlobal localAddressGlobal = (AddressGlobal)paramArrayList.next();
        if (localAddressGlobal != null) {
          return localAddressGlobal;
        }
      }
    }
    return null;
  }
  
  public static String getGlobalUserKey()
  {
    String str = OpenApiHelper.getILoginUserBase().getLoginUserName();
    if (TextUtils.isEmpty(str)) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Global_");
    localStringBuilder.append(str);
    return localStringBuilder.toString();
  }
  
  public static String getGlobalUserKeyMD5()
  {
    String str = OpenApiHelper.getILoginUserBase().getLoginUserName();
    if (!TextUtils.isEmpty(str)) {}
    try
    {
      str = Md5Encrypt.md5(str);
    }
    catch (Exception localException)
    {
      StringBuilder localStringBuilder;
      for (;;) {}
    }
    str = "";
    break label33;
    str = "";
    label33:
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("Global_");
    localStringBuilder.append(str);
    return localStringBuilder.toString();
  }
  
  public static AddressGlobal getSelectedUserAddress(AddressGlobal paramAddressGlobal, ArrayList paramArrayList)
  {
    if (getAddressListSize(paramArrayList) <= 0) {
      return null;
    }
    if (isContainCurrentSelectedAddress(paramAddressGlobal, paramArrayList)) {
      return paramAddressGlobal;
    }
    AddressGlobal localAddressGlobal = getDefaultAddress(paramArrayList);
    paramAddressGlobal = localAddressGlobal;
    if (localAddressGlobal == null) {
      paramAddressGlobal = getFirstNormalAddress(paramArrayList);
    }
    return paramAddressGlobal;
  }
  
  public static UserInfo getUpdateUserInfo(AddressGlobal paramAddressGlobal)
  {
    if (paramAddressGlobal == null) {
      return null;
    }
    UserInfo localUserInfo = new UserInfo();
    localUserInfo.setUserAddress(paramAddressGlobal);
    return localUserInfo;
  }
  
  public static boolean isAddressChanged()
  {
    try
    {
      boolean bool = SPUtils.getBoolean("AddressChange", false);
      return bool;
    }
    catch (Exception localException)
    {
      OKLog.setNode("AddressUtil", localException);
    }
    return false;
  }
  
  public static boolean isContainCurrentSelectedAddress(AddressGlobal paramAddressGlobal, List paramList)
  {
    if (paramAddressGlobal == null) {
      return false;
    }
    if ((paramList != null) && (paramList.size() > 0))
    {
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        AddressGlobal localAddressGlobal = (AddressGlobal)paramList.next();
        if (((paramAddressGlobal.getId() != 0L) && (localAddressGlobal.getId() == paramAddressGlobal.getId())) || ((paramAddressGlobal.getId() != 0L) && (matchCurrentUserAddress(localAddressGlobal, paramAddressGlobal)))) {
          return true;
        }
      }
    }
    return false;
  }
  
  public static boolean matchCurrentUserAddress(AddressGlobal paramAddressGlobal1, AddressGlobal paramAddressGlobal2)
  {
    if (paramAddressGlobal1 != null)
    {
      if (paramAddressGlobal2 == null) {
        return false;
      }
      String str1 = paramAddressGlobal2.getName();
      String str2 = paramAddressGlobal2.getWhere();
      paramAddressGlobal2 = paramAddressGlobal2.getMobile();
      String str3 = paramAddressGlobal1.getName();
      String str4 = paramAddressGlobal1.getWhere();
      paramAddressGlobal1 = paramAddressGlobal1.getMobile();
      if ((!TextUtils.isEmpty(str1)) && (!TextUtils.isEmpty(str2)) && (!TextUtils.isEmpty(paramAddressGlobal2)) && (!TextUtils.isEmpty(str3)) && (!TextUtils.isEmpty(str4)))
      {
        if (TextUtils.isEmpty(paramAddressGlobal1)) {
          return false;
        }
        if ((TextUtils.equals(str1.trim(), str3.trim())) && (TextUtils.equals(str2.trim(), str4.trim())) && (TextUtils.equals(paramAddressGlobal2.trim(), paramAddressGlobal1.trim()))) {
          return true;
        }
      }
    }
    return false;
  }
  
  public static void onAddressChanged()
  {
    SPUtils.putBoolean("AddressChange", true);
  }
  
  public static void setAddressCallback(AddressUtil.AddressCallback paramAddressCallback)
  {
    mAddressCallback = paramAddressCallback;
  }
  
  public static void updateAddressByAll(AddressGlobal paramAddressGlobal)
  {
    AddressGlobal localAddressGlobal2 = getAddressGlobalByAll();
    AddressGlobal localAddressGlobal1 = localAddressGlobal2;
    if (localAddressGlobal2 == null) {
      localAddressGlobal1 = new AddressGlobal();
    }
    updateAddressGlobal(AddressGlobal.cloneAddressGlobal(paramAddressGlobal, localAddressGlobal1), 0L);
  }
  
  public static void updateAddressGlobal(AddressGlobal paramAddressGlobal)
  {
    updateAddressGlobal(paramAddressGlobal, System.currentTimeMillis());
  }
  
  private static void updateAddressGlobal(AddressGlobal paramAddressGlobal, long paramLong)
  {
    if (paramAddressGlobal == null) {
      return;
    }
    Object localObject = OpenApiHelper.getILoginUserBase().getLoginUserName();
    if ((paramAddressGlobal.getIsUserAddress()) && (!TextUtils.isEmpty((CharSequence)localObject)))
    {
      if (OKLog.c)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("1.???????? ADDRESS_GLOBAL_USER = ");
        localStringBuilder.append((String)localObject);
        localStringBuilder.append(" ?????=");
        localStringBuilder.append(paramAddressGlobal.getProvinceName());
        localStringBuilder.append(paramAddressGlobal.getCityName());
        localStringBuilder.append(paramAddressGlobal.getTownName());
        localStringBuilder.append(paramAddressGlobal.getAreaName());
        OKLog.append("AddressUtil", localStringBuilder.toString());
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("2.???????? ADDRESS_GLOBAL_USER = ");
        localStringBuilder.append((String)localObject);
        localStringBuilder.append(" ?????=");
        localStringBuilder.append(paramAddressGlobal.getWhere());
        OKLog.append("AddressUtil", localStringBuilder.toString());
      }
      SPUtils.putString(getGlobalUserKeyMD5(), paramAddressGlobal.toString());
    }
    else
    {
      if (OKLog.c)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("1.???????? ADDRESS_GLOBAL_ALL = AddressGlobal ?????=");
        ((StringBuilder)localObject).append(paramAddressGlobal.getIdProvince());
        ((StringBuilder)localObject).append("-");
        ((StringBuilder)localObject).append(paramAddressGlobal.getIdCity());
        ((StringBuilder)localObject).append("-");
        ((StringBuilder)localObject).append(paramAddressGlobal.getIdArea());
        ((StringBuilder)localObject).append("-");
        ((StringBuilder)localObject).append(paramAddressGlobal.getIdTown());
        OKLog.append("AddressUtil", ((StringBuilder)localObject).toString());
      }
      paramAddressGlobal.setWhere("");
      paramAddressGlobal.setIsUserAddress(Boolean.valueOf(false));
      SPUtils.putString("AddressGlobal", paramAddressGlobal.toString(paramLong));
    }
    localObject = mAddressCallback;
    if (localObject != null) {
      ((AddressUtil.AddressCallback)localObject).onSaveAddress(paramAddressGlobal);
    }
  }
}
