package com.jingdong.common.utils;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.os.BaseBundle;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.jingdong.appshare.R.drawable;
import com.jingdong.appshare.R.string;
import com.jingdong.common.entity.ShareInfo;
import com.jingdong.common.share.ShareActivity;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.utils.DPIUtil;
import com.jingdong.sdk.utils.security.Base64;
import java.io.ByteArrayOutputStream;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.crypto.Cipher;

public class ShareUtil
{
  public static final int ACTION_BACK = 3;
  public static final int ACTION_LOTTERY = 4;
  public static final int ACTION_OPEN = 2;
  public static final int ACTION_PANEL = 1;
  private static final String FILE_PROVIDER_AUTHORITY = "ShareUtil";
  public static final String HEIGHT_MODE = "height_mode";
  public static final int REQUEST_CODE = 1215;
  public static final int RESULT_BLOCK = 14;
  public static final int RESULT_CANCEL = 13;
  public static final int RESULT_CLOSE = 15;
  public static final int RESULT_ERROR = 12;
  public static final int RESULT_SUCCESS = 11;
  public static final String SEPARATOR_SIGN = "##";
  public static final String S_COPY_URL = "CopyURL";
  public static final String S_FACEBOOK = "Facebook";
  public static final String S_JCOMMANDWX = "jCommandWX";
  public static final String S_QQ_FRIENDS = "QQfriends";
  public static final String S_QQ_ZONE = "QQzone";
  public static final String S_QRCODE = "QRCode";
  public static final String S_SINA_WEIBO = "Sinaweibo";
  public static final String S_WX_FRIENDS = "Wxfriends";
  public static final String S_WX_MOMENTS = "Wxmoments";
  public static final String WIDTH_MODE = "width_mode";
  public static long mLastUsedTime;
  public static String shareActivityAction;
  
  public ShareUtil() {}
  
  public static String addShareUrlParam(String paramString1, String paramString2, String paramString3)
  {
    Object localObject = paramString1;
    if (!paramString1.contains(paramString2))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramString1);
      if (paramString1.contains("?")) {
        paramString1 = "&";
      } else {
        paramString1 = "?";
      }
      ((StringBuilder)localObject).append(paramString1);
      paramString1 = ((StringBuilder)localObject).toString();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramString1);
      ((StringBuilder)localObject).append(paramString2);
      ((StringBuilder)localObject).append("=");
      ((StringBuilder)localObject).append(paramString3);
      localObject = ((StringBuilder)localObject).toString();
    }
    return localObject;
  }
  
  public static void appidConfig(Application paramApplication, ConfigBuilder paramConfigBuilder)
  {
    if (paramApplication != null)
    {
      if (paramConfigBuilder == null) {
        return;
      }
      JdSdk.getInstance().setApplication(paramApplication);
      WeixinUtil.setAppId(weixinId);
      QQUtil.setAppId(qqId);
      WeiboUtil.setAppId(weiboId);
    }
  }
  
  public static void backShareActivity(Activity paramActivity, int paramInt, String paramString1, String paramString2)
  {
    Intent localIntent = new Intent(shareActivityAction);
    localIntent.putExtra("action", 3);
    localIntent.putExtra("result", paramInt);
    localIntent.putExtra("transaction", paramString1);
    localIntent.putExtra("msg", paramString2);
    paramActivity.startActivity(localIntent);
  }
  
  public static void clearJDTransferActivity(Activity paramActivity)
  {
    if ((paramActivity != null) && (!paramActivity.isFinishing()) && (paramActivity.toString().contains("JDTransferActivity"))) {
      paramActivity.finish();
    }
  }
  
  public static Bitmap createQRCode(String paramString)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      Object localObject3 = new Hashtable();
      Object localObject4 = EncodeHintType.CHARACTER_SET;
      localObject1 = localObject2;
      ((Hashtable)localObject3).put(localObject4, "utf-8");
      localObject1 = localObject2;
      localObject4 = new QRCodeWriter();
      BarcodeFormat localBarcodeFormat = BarcodeFormat.QR_CODE;
      localObject1 = localObject2;
      localObject3 = ((QRCodeWriter)localObject4).encode(paramString, localBarcodeFormat, DPIUtil.getWidthByDesignValue720(JdSdk.getInstance().getApplicationContext(), 256), DPIUtil.getWidthByDesignValue720(JdSdk.getInstance().getApplicationContext(), 256), (Map)localObject3);
      localObject1 = localObject2;
      int i2 = ((BitMatrix)localObject3).getWidth();
      localObject1 = localObject2;
      int i3 = ((BitMatrix)localObject3).getHeight();
      paramString = new int[i2 * i3];
      int i = 0;
      int k = 0;
      int m = 0;
      int j;
      while (i < i3)
      {
        j = 0;
        while (j < i2)
        {
          localObject1 = localObject2;
          boolean bool = ((BitMatrix)localObject3).get(j, i);
          if (bool)
          {
            i1 = k;
            n = m;
            if (k == 0)
            {
              i1 = k;
              n = m;
              if (m == 0)
              {
                n = i;
                i1 = j;
              }
            }
            paramString[(i * i2 + j)] = -16777216;
            k = i1;
            m = n;
          }
          else
          {
            paramString[(i * i2 + j)] = -1;
          }
          j += 1;
        }
        i += 1;
      }
      int n = i2 - k * 2;
      int i1 = i3 - m * 2;
      localObject3 = new int[n * i1];
      i = 0;
      while (i < i1)
      {
        j = 0;
        while (j < n)
        {
          localObject3[(i * n + j)] = paramString[((i + m) * i2 + j + k)];
          j += 1;
        }
        i += 1;
      }
      paramString = Bitmap.Config.ARGB_8888;
      localObject1 = localObject2;
      paramString = Bitmap.createBitmap(n, i1, paramString);
      localObject1 = paramString;
      paramString.setPixels((int[])localObject3, 0, n, 0, 0, n, i1);
      return paramString;
    }
    catch (Exception paramString)
    {
      if (OKLog.i) {
        paramString.printStackTrace();
      }
    }
    return localObject1;
  }
  
  public static void dealSharedPin(Bundle paramBundle) {}
  
  public static void dealSharedPin(Bundle paramBundle, String paramString)
  {
    if (paramBundle != null)
    {
      if (isColdDown()) {
        return;
      }
      paramBundle = paramBundle.getString("ShareTm", "");
      if (!TextUtils.isEmpty(paramBundle))
      {
        if (TextUtils.isEmpty(paramString)) {
          return;
        }
        paramString = encryptPin(paramString);
        if (TextUtils.isEmpty(paramString)) {
          return;
        }
        paramBundle = urlEncode(paramBundle);
        paramString = urlEncode(paramString);
        if (!TextUtils.isEmpty(paramBundle))
        {
          if (TextUtils.isEmpty(paramString)) {
            return;
          }
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("https://");
          localStringBuilder.append(HostConfiguration.getWmpHost());
          localStringBuilder.append("/relation/save?src=");
          localStringBuilder.append(paramBundle);
          localStringBuilder.append("&dest=");
          localStringBuilder.append(paramString);
          paramBundle = localStringBuilder.toString();
          if (OKLog.c) {
            OKLog.append("ShareUtil", paramBundle);
          }
        }
      }
    }
  }
  
  public static byte[] encryptByPublicKey(byte[] paramArrayOfByte, String paramString)
    throws Exception
  {
    paramString = new X509EncodedKeySpec(Base64.decode(paramString));
    paramString = KeyFactory.getInstance("RSA").generatePublic(paramString);
    Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    localCipher.init(1, paramString);
    int k = paramArrayOfByte.length;
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    int i = 0;
    int j = 0;
    for (;;)
    {
      int m = k - i;
      if (m <= 0) {
        break;
      }
      if (m > 117) {
        paramString = localCipher.doFinal(paramArrayOfByte, i, 117);
      } else {
        paramString = localCipher.doFinal(paramArrayOfByte, i, m);
      }
      localByteArrayOutputStream.write(paramString, 0, paramString.length);
      j += 1;
      i = j * 117;
    }
    paramArrayOfByte = localByteArrayOutputStream.toByteArray();
    localByteArrayOutputStream.close();
    return paramArrayOfByte;
  }
  
  public static String encryptPin(String paramString)
  {
    Object localObject;
    if ((!TextUtils.isEmpty(paramString)) && (paramString.length() >= 3)) {
      localObject = paramString.substring(0, 3);
    } else {
      localObject = "abc";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString);
    localStringBuilder.append(System.currentTimeMillis());
    localStringBuilder.append((String)localObject);
    paramString = localStringBuilder.toString();
    if (OKLog.c)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("encryptPin: ");
      ((StringBuilder)localObject).append(paramString);
      OKLog.append("ShareUtil", ((StringBuilder)localObject).toString());
    }
    try
    {
      paramString = encryptByPublicKey(paramString.getBytes("utf-8"), "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC4Xg//g1DKrpzNH71UFOZLH4MEi0DrBc/ODr5UjuMywf4vxPuZQOfSyN+XZCHDbMOSWvzFdOiR3DgP2lsYJn7RGfDVtFtyXpmdfO6L5qMZZ/rUEV/JF81ewNP/ho+iFjMEg0j9T69YlaMMM+jg6k5uhUJt8HsIpm5I3/8h1w6UvQIDAQAB");
      if ((paramString != null) && (paramString.length > 0))
      {
        paramString = Base64.encodeBytes(paramString);
        return paramString;
      }
    }
    catch (Exception paramString)
    {
      if (OKLog.i) {
        paramString.printStackTrace();
      }
    }
    return "";
  }
  
  public static String getShareUrl(String paramString1, String paramString2)
  {
    return addShareUrlParam(addShareUrlParam(addShareUrlParam(addShareUrlParam(addShareUrlParam(paramString1, "ad_od", "share"), "utm_source", "androidpingouapp"), "utm_medium", "pingouappshare"), "utm_campaign", "t_335139774"), "utm_term", paramString2);
  }
  
  public static String getShareUrlOnlyRes(String paramString1, String paramString2)
  {
    return addShareUrlParam(addShareUrlParam(addShareUrlParam(addShareUrlParam(paramString1, "utm_source", "androidpingouapp"), "utm_medium", "pingouappshare"), "utm_campaign", "t_335139774"), "utm_term", paramString2);
  }
  
  public static void init(Activity paramActivity)
  {
    setShareId(paramActivity);
    WeixinUtil.getWXApi();
    WeiboUtil.getWBShareApi();
    QQUtil.getTencentInstance();
  }
  
  public static boolean isColdDown()
  {
    long l = mLastUsedTime;
    if ((l > 0L) && (l + 1000L > System.currentTimeMillis())) {
      return true;
    }
    mLastUsedTime = System.currentTimeMillis();
    return false;
  }
  
  public static void lottery(Activity paramActivity, ShareInfo paramShareInfo, String paramString1, String paramString2) {}
  
  public static void open(Activity paramActivity, ShareInfo paramShareInfo)
  {
    startShareActivityForResult(paramActivity, paramShareInfo, 2, paramShareInfo.getShareLogoBytes());
  }
  
  public static void openClickCallback(Activity paramActivity, ShareInfo paramShareInfo, ClickCallbackListener paramClickCallbackListener)
  {
    startShareActivityForCallback(paramActivity, paramShareInfo, 2, paramShareInfo.getShareLogoBytes(), null, paramClickCallbackListener);
  }
  
  public static List packChannels(List paramList, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    ArrayList localArrayList1 = new ArrayList();
    localArrayList1.add(new Object[] { "jCommandWX", Integer.valueOf(R.drawable.share_to_jcommand_wx_icon), Integer.valueOf(R.string.share_to_jcommand_wx_icon) });
    if (paramBoolean3)
    {
      localArrayList1.add(new Object[] { "Wxfriends", Integer.valueOf(R.drawable.share_to_wx_friend_icon_image), Integer.valueOf(R.string.share_to_wx_friends) });
      localArrayList1.add(new Object[] { "Wxmoments", Integer.valueOf(R.drawable.share_to_wx_circle_icon_image), Integer.valueOf(R.string.share_to_wx_friends_circle) });
    }
    else
    {
      localArrayList1.add(new Object[] { "Wxfriends", Integer.valueOf(R.drawable.share_to_wx_friend_icon), Integer.valueOf(R.string.share_to_wx_friends) });
      localArrayList1.add(new Object[] { "Wxmoments", Integer.valueOf(R.drawable.share_to_wx_circle_icon), Integer.valueOf(R.string.share_to_wx_friends_circle) });
    }
    localArrayList1.add(new Object[] { "QQfriends", Integer.valueOf(R.drawable.share_to_qq_friend_icon), Integer.valueOf(R.string.share_to_qq_friends) });
    localArrayList1.add(new Object[] { "QQzone", Integer.valueOf(R.drawable.share_to_qzone_icon), Integer.valueOf(R.string.share_to_qzone) });
    localArrayList1.add(new Object[] { "Sinaweibo", Integer.valueOf(R.drawable.share_to_weibo_icon), Integer.valueOf(R.string.share_to_weibo) });
    localArrayList1.add(new Object[] { "CopyURL", Integer.valueOf(R.drawable.share_to_copy_icon), Integer.valueOf(R.string.share_to_copy) });
    localArrayList1.add(new Object[] { "QRCode", Integer.valueOf(R.drawable.share_to_qr_code_icon), Integer.valueOf(R.string.share_to_qr_code) });
    Application localApplication = JdSdk.getInstance().getApplication();
    ArrayList localArrayList2 = new ArrayList();
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      Object localObject = paramList.next();
      Iterator localIterator = localArrayList1.iterator();
      while (localIterator.hasNext())
      {
        Object[] arrayOfObject = (Object[])localIterator.next();
        if ((arrayOfObject[0].equals(localObject)) || ((paramBoolean1) && (arrayOfObject[0].toString().equals("QRCode"))))
        {
          HashMap localHashMap = new HashMap();
          localHashMap.put("channel", arrayOfObject[0]);
          localHashMap.put("image", arrayOfObject[1]);
          localHashMap.put("text", localApplication.getString(Integer.parseInt(arrayOfObject[2].toString())));
          localArrayList2.add(localHashMap);
        }
      }
    }
    return localArrayList2;
  }
  
  public static void panel(Activity paramActivity, ShareInfo paramShareInfo)
  {
    startShareActivityForResult(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes());
  }
  
  public static void panelClickCallback(Activity paramActivity, ShareInfo paramShareInfo, ClickCallbackListener paramClickCallbackListener)
  {
    startShareActivityForCallback(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes(), null, paramClickCallbackListener);
  }
  
  public static void sendShare(Activity paramActivity, ShareInfo paramShareInfo, CallbackListener paramCallbackListener)
  {
    if (paramCallbackListener != null)
    {
      startShareActivityForCallback(paramActivity, paramShareInfo, 2, paramShareInfo.getShareLogoBytes(), paramCallbackListener, null);
      return;
    }
    startShareActivityForResult(paramActivity, paramShareInfo, 2, paramShareInfo.getShareLogoBytes());
  }
  
  public static void sendShareCallBack(Activity paramActivity, ShareInfo paramShareInfo, CallbackListener paramCallbackListener, ClickCallbackListener paramClickCallbackListener)
  {
    if ((paramClickCallbackListener == null) && (paramCallbackListener == null))
    {
      startShareActivityForResult(paramActivity, paramShareInfo, 2, paramShareInfo.getShareLogoBytes());
      return;
    }
    startShareActivityForCallback(paramActivity, paramShareInfo, 2, paramShareInfo.getShareLogoBytes(), paramCallbackListener, paramClickCallbackListener);
  }
  
  public static void setHostCheckToast(String paramString)
  {
    if (paramString != null) {
      JdSdk.getInstance().setHostCheckToast(paramString);
    }
  }
  
  public static void setIsCheckHost(boolean paramBoolean)
  {
    JdSdk.getInstance().setIsCheckHost(paramBoolean);
  }
  
  public static void setShareId(Activity paramActivity)
  {
    String str = ShareTelephoneUtils.readMetaDataFromApplication(paramActivity, "WX_APPID");
    if ((!TextUtils.isEmpty(str)) && (str.length() > 3)) {
      WeixinUtil.APP_ID = str.substring(2);
    }
    str = ShareTelephoneUtils.readMetaDataFromApplication(paramActivity, "QQ_APPID");
    if ((!TextUtils.isEmpty(str)) && (str.length() > 3)) {
      QQUtil.APP_ID = str.substring(2);
    }
    paramActivity = ShareTelephoneUtils.readMetaDataFromApplication(paramActivity, "WB_APPID");
    if ((!TextUtils.isEmpty(paramActivity)) && (paramActivity.length() > 3)) {
      WeiboUtil.APP_ID = paramActivity.substring(2);
    }
  }
  
  public static void setWhiteHostList(List paramList)
  {
    if (paramList != null) {
      JdSdk.getInstance().setWhiteHostList(paramList);
    }
  }
  
  public static void showShareDialog(Activity paramActivity, ShareInfo paramShareInfo)
  {
    startShareActivityForResult(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes());
  }
  
  public static void showShareDialog(Activity paramActivity, ShareInfo paramShareInfo, CallbackListener paramCallbackListener)
  {
    if (paramCallbackListener != null)
    {
      startShareActivityForCallback(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes(), paramCallbackListener, null);
      return;
    }
    startShareActivityForResult(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes());
  }
  
  public static void showShareDialog(Activity paramActivity, ShareInfo paramShareInfo, CallbackListener paramCallbackListener, ClickCallbackListener paramClickCallbackListener)
  {
    if ((paramCallbackListener == null) && (paramClickCallbackListener == null))
    {
      startShareActivityForResult(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes());
      return;
    }
    startShareActivityForCallback(paramActivity, paramShareInfo, 1, paramShareInfo.getShareLogoBytes(), paramCallbackListener, paramClickCallbackListener);
  }
  
  public static String[] splitTransaction(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return new String[] { "", "" };
    }
    String[] arrayOfString = paramString.split("##");
    if (arrayOfString.length > 1) {
      return arrayOfString;
    }
    return new String[] { paramString, "" };
  }
  
  public static void startShareActivityForCallback(Activity paramActivity, ShareInfo paramShareInfo, int paramInt, byte[] paramArrayOfByte, CallbackListener paramCallbackListener, ClickCallbackListener paramClickCallbackListener)
  {
    if ((paramShareInfo != null) && (!paramShareInfo.isCustomQrcode()) && (isColdDown())) {
      return;
    }
    paramCallbackListener = new ShareCallbackListenerParcel(new ShareCallbackListenerBinder(paramCallbackListener, paramClickCallbackListener));
    paramClickCallbackListener = new Intent(paramActivity, ShareActivity.class);
    paramClickCallbackListener.putExtra("action", paramInt);
    paramClickCallbackListener.putExtra("shareInfo", paramShareInfo);
    paramClickCallbackListener.putExtra("bytes", paramArrayOfByte);
    paramClickCallbackListener.putExtra("parcel", paramCallbackListener);
    paramActivity.startActivityForResult(paramClickCallbackListener, 1215);
    clearJDTransferActivity(paramActivity);
  }
  
  public static void startShareActivityForResult(Activity paramActivity, ShareInfo paramShareInfo, int paramInt, byte[] paramArrayOfByte)
  {
    if (isColdDown()) {
      return;
    }
    Intent localIntent = new Intent(paramActivity, ShareActivity.class);
    localIntent.putExtra("action", paramInt);
    localIntent.putExtra("shareInfo", paramShareInfo);
    localIntent.putExtra("bytes", paramArrayOfByte);
    Log.d("ShareActivity", "startActivityForResult");
    paramActivity.startActivityForResult(localIntent, 1215);
    clearJDTransferActivity(paramActivity);
  }
  
  public static String urlDecode(String paramString)
  {
    if (paramString == null) {
      return "";
    }
    try
    {
      String str = URLDecoder.decode(paramString, "utf8");
      return str;
    }
    catch (Exception localException)
    {
      if (OKLog.i) {
        localException.printStackTrace();
      }
    }
    return paramString;
  }
  
  public static String urlEncode(String paramString)
  {
    if (paramString == null) {
      return "";
    }
    try
    {
      String str = URLEncoder.encode(paramString, "utf8");
      return str;
    }
    catch (Exception localException)
    {
      if (OKLog.i) {
        localException.printStackTrace();
      }
    }
    return paramString;
  }
  
  public static abstract interface CallbackListener
  {
    public abstract void onCancel();
    
    public abstract void onComplete(Object paramObject);
    
    public abstract void onError(String paramString);
  }
  
  public static abstract interface ClickCallbackListener
  {
    public abstract void onClick(String paramString1, String paramString2);
  }
  
  public static class ConfigBuilder
  {
    private String qqId;
    private String weiboId;
    private String weixinId;
    
    public ConfigBuilder() {}
    
    public static ConfigBuilder create()
    {
      return new ConfigBuilder();
    }
    
    public ConfigBuilder setQQId(String paramString)
    {
      qqId = paramString;
      return this;
    }
    
    public ConfigBuilder setWeiboId(String paramString)
    {
      weiboId = paramString;
      return this;
    }
    
    public ConfigBuilder setWeixinId(String paramString)
    {
      weixinId = paramString;
      return this;
    }
  }
}
