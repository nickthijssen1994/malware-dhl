package com.jingdong.common.utils;

import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.BaseBundle;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.permission.PermissionHelper;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class ShareTelephoneUtils
{
  static final String SDK_23_WIFI_MAC = "02:00:00:00:00:00";
  private static final String b = "ShareTelephoneUtils";
  
  public ShareTelephoneUtils() {}
  
  public static String getDeviceId()
  {
    return getDeviceId(JdSdk.getInstance().getApplication());
  }
  
  public static String getDeviceId(Context paramContext)
  {
    if (!PermissionHelper.hasGrantedPhoneState()) {
      return "";
    }
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  public static String getIMSI()
  {
    if (!PermissionHelper.hasGrantedPhoneState()) {
      return "";
    }
    try
    {
      String str = ((TelephonyManager)JdSdk.getInstance().getApplication().getSystemService("phone")).getSubscriberId();
      return str;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    return "";
  }
  
  public static void getLocalMacAddress(MacAddressListener paramMacAddressListener)
  {
    try
    {
      getLocalMacAddress(paramMacAddressListener, JdSdk.getInstance().getApplication());
      return;
    }
    catch (Throwable paramMacAddressListener)
    {
      throw paramMacAddressListener;
    }
  }
  
  /* Error */
  public static void getLocalMacAddress(MacAddressListener paramMacAddressListener, Context paramContext)
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: getstatic 77	com/jingdong/sdk/oklog/OKLog:c	Z
    //   6: ifeq +13 -> 19
    //   9: getstatic 21	com/jingdong/common/utils/ShareTelephoneUtils:b	Ljava/lang/String;
    //   12: astore_2
    //   13: aload_2
    //   14: ldc 79
    //   16: invokestatic 83	com/jingdong/sdk/oklog/OKLog:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   19: aload_1
    //   20: invokestatic 86	com/jingdong/common/utils/ShareTelephoneUtils:getMacAddressStr	(Landroid/content/Context;)Ljava/lang/String;
    //   23: astore_2
    //   24: getstatic 77	com/jingdong/sdk/oklog/OKLog:c	Z
    //   27: ifeq +40 -> 67
    //   30: getstatic 21	com/jingdong/common/utils/ShareTelephoneUtils:b	Ljava/lang/String;
    //   33: astore_3
    //   34: new 88	java/lang/StringBuilder
    //   37: dup
    //   38: invokespecial 89	java/lang/StringBuilder:<init>	()V
    //   41: astore 4
    //   43: aload 4
    //   45: ldc 91
    //   47: invokevirtual 94	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   50: pop
    //   51: aload 4
    //   53: aload_2
    //   54: invokevirtual 94	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   57: pop
    //   58: aload_3
    //   59: aload 4
    //   61: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   64: invokestatic 83	com/jingdong/sdk/oklog/OKLog:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   67: new 4	java/lang/Object
    //   70: dup
    //   71: invokespecial 17	java/lang/Object:<init>	()V
    //   74: astore_2
    //   75: new 99	com/jingdong/common/utils/ShareTelephoneUtils$1
    //   78: dup
    //   79: aload_1
    //   80: aload_2
    //   81: aload_0
    //   82: invokespecial 102	com/jingdong/common/utils/ShareTelephoneUtils$1:<init>	(Landroid/content/Context;Ljava/lang/Object;Lcom/jingdong/common/utils/MacAddressListener;)V
    //   85: astore_1
    //   86: aload_1
    //   87: checkcast 104	java/lang/Thread
    //   90: astore_1
    //   91: aload_1
    //   92: invokevirtual 107	java/lang/Thread:start	()V
    //   95: goto +22 -> 117
    //   98: astore_0
    //   99: goto +22 -> 121
    //   102: astore_1
    //   103: aload_0
    //   104: aconst_null
    //   105: invokeinterface 113 2 0
    //   110: getstatic 21	com/jingdong/common/utils/ShareTelephoneUtils:b	Ljava/lang/String;
    //   113: aload_1
    //   114: invokestatic 117	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   117: ldc 2
    //   119: monitorexit
    //   120: return
    //   121: ldc 2
    //   123: monitorexit
    //   124: aload_0
    //   125: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	126	0	paramMacAddressListener	MacAddressListener
    //   0	126	1	paramContext	Context
    //   12	69	2	localObject	Object
    //   33	26	3	str	String
    //   41	19	4	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   3	13	98	java/lang/Throwable
    //   13	19	98	java/lang/Throwable
    //   19	24	98	java/lang/Throwable
    //   24	34	98	java/lang/Throwable
    //   34	67	98	java/lang/Throwable
    //   67	75	98	java/lang/Throwable
    //   75	86	98	java/lang/Throwable
    //   91	95	98	java/lang/Throwable
    //   103	117	98	java/lang/Throwable
    //   13	19	102	java/lang/Exception
    //   19	24	102	java/lang/Exception
    //   34	67	102	java/lang/Exception
    //   67	75	102	java/lang/Exception
    //   75	86	102	java/lang/Exception
    //   91	95	102	java/lang/Exception
  }
  
  public static String getMacAddressStr(Context paramContext)
  {
    String str = "";
    if (paramContext != null)
    {
      localObject = str;
      try
      {
        paramContext = paramContext.getSystemService("wifi");
        paramContext = (WifiManager)paramContext;
        if (paramContext != null)
        {
          localObject = str;
          str = paramContext.getConnectionInfo().getMacAddress();
          paramContext = str;
          if (Build.VERSION.SDK_INT < 23)
          {
            localObject = paramContext;
            boolean bool = str.equals("02:00:00:00:00:00");
            if (!bool) {
              return str;
            }
          }
          localObject = paramContext;
          paramContext = getWifiMacAddressOver23();
          return paramContext;
        }
        localObject = str;
        paramContext = new IllegalStateException("Can't get WifiManager.");
        throw paramContext;
      }
      catch (Exception paramContext) {}
    }
    Object localObject = str;
    paramContext = new NullPointerException("getMacAddressStr(), context is null");
    throw paramContext;
    OKLog.setNode(b, paramContext);
    return localObject;
    return str;
  }
  
  public static String getSimSerialNumber(Context paramContext)
  {
    if (!PermissionHelper.hasGrantedPhoneState()) {
      return "";
    }
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimSerialNumber();
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  public static String getWifiMacAddressOver23()
  {
    try
    {
      Object localObject1 = Collections.list(NetworkInterface.getNetworkInterfaces()).iterator();
      boolean bool;
      do
      {
        bool = ((Iterator)localObject1).hasNext();
        if (!bool) {
          break;
        }
        localObject2 = ((Iterator)localObject1).next();
        localObject2 = (NetworkInterface)localObject2;
        bool = ((NetworkInterface)localObject2).getName().equalsIgnoreCase("wlan0");
      } while (!bool);
      localObject1 = ((NetworkInterface)localObject2).getHardwareAddress();
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = new StringBuilder();
      int j = localObject1.length;
      int i = 0;
      while (i < j)
      {
        byte b1 = localObject1[i];
        ((StringBuilder)localObject2).append(String.format("%02x:", new Object[] { Byte.valueOf(b1) }));
        i += 1;
      }
      i = ((StringBuilder)localObject2).length();
      if (i > 0)
      {
        i = ((StringBuilder)localObject2).length();
        ((StringBuilder)localObject2).deleteCharAt(i - 1);
      }
      localObject1 = ((StringBuilder)localObject2).toString();
      return localObject1;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    return "";
  }
  
  public static String readMetaDataFromApplication(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      paramContext = metaData;
      paramContext = paramContext.getString(paramString);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
}
