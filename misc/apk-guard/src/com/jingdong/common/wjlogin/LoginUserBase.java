package com.jingdong.common.wjlogin;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.BaseBundle;
import android.os.Bundle;
import android.view.View.OnClickListener;
import com.jingdong.cleanmvp.common.BaseEvent;
import com.jingdong.common.ui.JDCheckDialog;
import com.jingdong.common.ui.JDDialog;
import com.jingdong.common.ui.JDDialogFactory;
import com.jingdong.sdk.jdtoast.ToastUtils;
import com.jingdong.sdk.oklog.OKLog;
import com.thestore.main.core.app.AppContext;
import com.thestore.main.core.app.MyApplication;
import com.thestore.main.core.app.UserInfo;
import com.thestore.main.core.log.Lg;
import de.greenrobot.event.EventBus;
import jd.wjlogin_sdk.common.WJLoginHelper;
import jd.wjlogin_sdk.common.listener.OnDataCallback;
import jd.wjlogin_sdk.model.ErrorResult;
import jd.wjlogin_sdk.model.FailResult;
import jd.wjlogin_sdk.model.SuccessResult;

public abstract class LoginUserBase
{
  private static final String a = "LoginUserBase";
  
  public LoginUserBase() {}
  
  public static void checkYHDToken(final Activity paramActivity, int paramInt)
  {
    String str1 = UserInfo.getToken();
    String str2 = a;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("checkYHDToken yhdToken=");
    localStringBuilder.append(str1);
    Lg.d(new Object[] { str2, localStringBuilder.toString() });
    UserUtil.getWJLoginHelper().reqYHDSecondBindoken(str1, new OnDataCallback()
    {
      public void onError(ErrorResult paramAnonymousErrorResult)
      {
        Lg.d(new Object[] { LoginUserBase.a, "reqYHDBindLoginToken onError" });
        LoginUserBase.showTwoBtnDialog(paramActivity, "??????", "??????????????????", "????", "????", "refreshFail");
      }
      
      public void onFail(FailResult paramAnonymousFailResult)
      {
        throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
      }
      
      public void onSuccess(SuccessResult paramAnonymousSuccessResult)
      {
        paramAnonymousSuccessResult = LoginUserBase.a;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("reqYHDBindLoginToken onSuccess a2=");
        localStringBuilder.append(UserUtil.getWJLoginHelper().getA2());
        localStringBuilder.append("pin=");
        localStringBuilder.append(UserUtil.getWJLoginHelper().getPin());
        Lg.d(new Object[] { paramAnonymousSuccessResult, localStringBuilder.toString() });
        UserInfo.clearAll();
        LoginUserBase.saveInfoAfterLogin(val$flag);
        paramAnonymousSuccessResult = paramActivity;
        if (paramAnonymousSuccessResult != null) {
          paramAnonymousSuccessResult.finish();
        }
      }
    });
  }
  
  public static String getLoginAccount()
  {
    if (!hasLogin()) {
      return "";
    }
    try
    {
      Object localObject = UserUtil.getWJLoginHelper();
      if (localObject != null)
      {
        localObject = ((WJLoginHelper)localObject).getUserAccount();
        return localObject;
      }
    }
    catch (Throwable localThrowable) {}
    return "";
  }
  
  public static String getUserPin()
  {
    return UserUtil.getWJLoginHelper().getPin();
  }
  
  public static boolean hasLogin()
  {
    return UserUtil.getWJLoginHelper().hasLogin();
  }
  
  public static void init()
  {
    try
    {
      hasLogin();
      return;
    }
    catch (Throwable localThrowable)
    {
      if (OKLog.i) {
        OKLog.setNode(a, localThrowable);
      }
    }
  }
  
  public static void logoutOnlineInfo()
  {
    if (OKLog.c) {
      OKLog.append(a, "logoutOnlineInfo Called");
    }
    EventBus.getDefault().post(new LoginEvent("type_ready_logout"));
    UserUtil.getWJLoginHelper().clearLocalOnlineState();
  }
  
  public static void saveInfoAfterLogin()
  {
    saveInfoAfterLogin(0);
  }
  
  public static void saveInfoAfterLogin(int paramInt)
  {
    try
    {
      boolean bool = hasLogin();
      if (bool)
      {
        Object localObject = new Bundle();
        ((BaseBundle)localObject).putInt("type", paramInt);
        LoginEvent localLoginEvent = new LoginEvent("type_login");
        localLoginEvent.setBundle((Bundle)localObject);
        EventBus.getDefault().post(localLoginEvent);
        localObject = new Intent("com.jingdong.action.user.login.in");
        ((Intent)localObject).putExtra("type", paramInt);
        ((Intent)localObject).setPackage(AppContext.APP.getPackageName());
        AppContext.APP.sendBroadcast((Intent)localObject);
        return;
      }
    }
    catch (Throwable localThrowable)
    {
      if (OKLog.i) {
        OKLog.e(a, "saveInfoAfterLogin error: ", localThrowable);
      }
    }
  }
  
  private static void sendCancelBindEvent()
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("type", "cancelBind");
    LoginEvent localLoginEvent = new LoginEvent("type_cancel_bind");
    localLoginEvent.setBundle(localBundle);
    EventBus.getDefault().post(localLoginEvent);
  }
  
  private static void showTwoBtnDialog(Activity paramActivity, final String paramString1, final String paramString2, final String paramString3, final String paramString4, final String paramString5)
  {
    if ((paramActivity != null) && (!paramActivity.isFinishing()))
    {
      paramActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          JDCheckDialog localJDCheckDialog = JDDialogFactory.getInstance().createJdDialogWithStyle6(val$activity, paramString1, paramString2, paramString3, paramString4);
          localJDCheckDialog.setOnLeftButtonClickListener((View.OnClickListener)new LoginUserBase.2.1(this, localJDCheckDialog));
          localJDCheckDialog.setOnRightButtonClickListener((View.OnClickListener)new LoginUserBase.2.2(this, localJDCheckDialog));
          localJDCheckDialog.show();
        }
      });
      return;
    }
    ToastUtils.showToast((Context)AppContext.APP, "??????????");
  }
}
