package com.jingdong.common.share;

import android.app.Activity;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.util.Base64;
import android.util.Log;
import android.view.ContextThemeWrapper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListAdapter;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.drawable.RoundedBitmapDrawable;
import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.appshare.R.anim;
import com.jingdong.appshare.R.drawable;
import com.jingdong.appshare.R.id;
import com.jingdong.appshare.R.layout;
import com.jingdong.appshare.R.string;
import com.jingdong.common.entity.ShareImageInfo;
import com.jingdong.common.entity.ShareInfo;
import com.jingdong.common.permission.PermissionManager;
import com.jingdong.common.unification.statusbar.IStatusController;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import com.jingdong.common.utils.FileService;
import com.jingdong.common.utils.FileService.Directory;
import com.jingdong.common.utils.JdSdk;
import com.jingdong.common.utils.QQUtil;
import com.jingdong.common.utils.ShareCallbackListenerParcel;
import com.jingdong.common.utils.ShareUtil;
import com.jingdong.common.utils.ShareUtil.CallbackListener;
import com.jingdong.common.utils.ShareUtil.ClickCallbackListener;
import com.jingdong.common.utils.WeiboUtil;
import com.jingdong.common.utils.WeixinUtil;
import com.jingdong.sdk.jdtoast.ToastUtils;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.utils.DPIUtil;
import com.sina.weibo.sdk.api.share.BaseResponse;
import com.sina.weibo.sdk.api.share.IWeiboHandler.Response;
import com.sina.weibo.sdk.api.share.IWeiboShareAPI;
import com.tencent.tauth.Tencent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request.Builder;
import pub.devrel.easypermissions.EasyPermissions;
import pub.devrel.easypermissions.EasyPermissions.PermissionCallbacks;

public class ShareActivity
  extends AppCompatActivity
  implements IStatusController, IWeiboHandler.Response, EasyPermissions.PermissionCallbacks
{
  private static final int BYTE_LENGTH = 32768;
  private static final int BYTE_LENGTH_BIG = 10485760;
  private static final int BYTE_LENGTH_MP = 131072;
  private static final String CANCEL = "Cancel";
  private static final String CLICK_SHARE_VALUE_HB = "shareFromHb";
  private static final float IMAGE_SIZE = 240.0F;
  private static final float IMAGE_SIZE_BIG = 1080.0F;
  private static final float IMAGE_SIZE_MP = 720.0F;
  private static final String SHARE_BIG_IMAGE_NAME = "share_qrcode_image.png";
  public static final int SHARE_PERMISSION_CODE = 111;
  private static final String TAG = "ShareActivity";
  private Handler handler = new Handler(Looper.getMainLooper());
  private int mAction;
  private ShareActivity.BaseUiListener mBaseUiListener = new ShareActivity.BaseUiListener(this, null);
  private Bitmap mBitmapProduct;
  private String mBitmapSavedPath;
  private Bitmap mBitmapSubLogo;
  private ShareUtil.CallbackListener mCallbackListener;
  private List<Map<String, Object>> mChannelSet;
  private ShareUtil.ClickCallbackListener mClickCallbackListener;
  private long mDoShareMillis;
  private long mFinishMillis;
  private boolean mIsTimeout;
  private long mLotteryActivityId;
  private String mLotteryBizId;
  private String mLotteryRuleContent;
  private int mLotteryRuleType;
  private String mLotterySourceType;
  private String mLotteryToken;
  private boolean mLotteryXViewOpening = false;
  private RelativeLayout mRootView;
  private String mSelectedChannel = "";
  private Bitmap mShareBigBitmap;
  private String mShareEventFrom;
  private ShareInfo mShareInfo;
  private Runnable mShareRunnable;
  private String mSharedChannel;
  private String mSharedMsg;
  private int mSharedResult;
  private String mSharedUrl;
  private byte[] mThumbData;
  private Runnable mTimeoutRunnable = (Runnable)new ShareActivity.1(this);
  private Activity thisActivity;
  
  public ShareActivity() {}
  
  private Bitmap base64ToBitmap(String paramString)
  {
    String str2 = "";
    String str1 = str2;
    if (paramString != null)
    {
      paramString = paramString.split(",");
      str1 = str2;
      if (paramString.length >= 2) {
        str1 = paramString[1];
      }
    }
    paramString = Base64.decode(str1, 0);
    return BitmapFactory.decodeByteArray(paramString, 0, paramString.length);
  }
  
  private int calSizeFrom720(int paramInt)
  {
    return DPIUtil.getWidthByDesignValue720(thisActivity.getApplication(), paramInt);
  }
  
  private void callbackForResult()
  {
    int i = mSharedResult;
    if (i == 11)
    {
      mCallbackListener.onComplete(mSharedChannel);
      return;
    }
    if (i == 13)
    {
      mCallbackListener.onCancel();
      return;
    }
    if (i == 12) {
      mCallbackListener.onError(mSharedMsg);
    }
  }
  
  private boolean checkPayHost(String paramString1, String paramString2)
  {
    return (paramString2 != null) && ((paramString2.equalsIgnoreCase(paramString1)) || (paramString1.endsWith(paramString2)));
  }
  
  private void checkPermission()
  {
    String[] arrayOfString = new String[2];
    arrayOfString[0] = "android.permission.READ_EXTERNAL_STORAGE";
    arrayOfString[1] = "android.permission.WRITE_EXTERNAL_STORAGE";
    if (!PermissionManager.checkPermission((Activity)this, arrayOfString))
    {
      String str = getResources().getString(R.string.permission_dialog_msg_app_necessary_setting, new Object[] { "????" });
      PermissionManager.requestPermission((Activity)this, str, 111, arrayOfString);
      return;
    }
    shareToDo();
  }
  
  private boolean checkShareUrl(String paramString1, String paramString2)
  {
    if (!TextUtils.isEmpty(paramString1))
    {
      paramString1 = Uri.parse(paramString1);
      if ((paramString1 != null) && (isHttpOrHttps(paramString1.getScheme()))) {
        return checkPayHost(paramString1.getHost(), paramString2);
      }
    }
    return false;
  }
  
  private boolean closePanelAnimation(boolean paramBoolean)
  {
    Object localObject = mRootView;
    if ((localObject != null) && (((ViewGroup)localObject).getChildCount() == 1))
    {
      localObject = new TranslateAnimation(1, 0.0F, 1, 0.0F, 1, 0.0F, 1, 1.0F);
      ((Animation)localObject).setFillAfter(true);
      ((Animation)localObject).setDuration(200L);
      ((Animation)localObject).setAnimationListener((Animation.AnimationListener)new ShareActivity.14(this, paramBoolean));
      post((Runnable)new ShareActivity.15(this, (TranslateAnimation)localObject));
      return true;
    }
    return false;
  }
  
  private byte[] compressBitmap2Bytes(Bitmap paramBitmap, int paramInt)
  {
    byte[] arrayOfByte = new byte[0];
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    int i = 95;
    while (((arrayOfByte.length == 0) || (arrayOfByte.length > paramInt)) && (i > 0))
    {
      localByteArrayOutputStream.reset();
      paramBitmap.compress(Bitmap.CompressFormat.JPEG, i, localByteArrayOutputStream);
      arrayOfByte = localByteArrayOutputStream.toByteArray();
      i -= 10;
    }
    return arrayOfByte;
  }
  
  private View createShareBigImgView()
  {
    LinearLayout localLinearLayout = new LinearLayout(thisActivity);
    localLinearLayout.setLayoutParams(new ViewGroup.LayoutParams(DPIUtil.getWidth(thisActivity.getApplication()), -2));
    localLinearLayout.setOrientation(1);
    localLinearLayout.setBackgroundColor(-1);
    Object localObject1 = new RelativeLayout(thisActivity);
    ((View)localObject1).setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(thisActivity.getApplication()), calSizeFrom720(144)));
    ((View)localObject1).setPadding(calSizeFrom720(40), calSizeFrom720(50), calSizeFrom720(40), calSizeFrom720(40));
    localLinearLayout.addView((View)localObject1);
    Object localObject2 = new ImageView(thisActivity);
    ((View)localObject2).setId(R.id.img_1);
    ((ViewGroup)localObject1).addView((View)localObject2);
    Object localObject3 = mBitmapSubLogo;
    if ((localObject3 != null) && (((Bitmap)localObject3).getWidth() / mBitmapSubLogo.getHeight() < 4.26D))
    {
      ((View)localObject2).setLayoutParams(new RelativeLayout.LayoutParams(calSizeFrom720(146), calSizeFrom720(54)));
      ((ImageView)localObject2).setImageDrawable(ContextCompat.getDrawable(thisActivity, R.drawable.share_qr_logo_short));
      localObject2 = new RelativeLayout.LayoutParams(calSizeFrom720(10), calSizeFrom720(10));
      leftMargin = calSizeFrom720(14);
      rightMargin = calSizeFrom720(14);
      topMargin = calSizeFrom720(22);
      ((RelativeLayout.LayoutParams)localObject2).addRule(1, R.id.img_1);
      localObject3 = new TextView(thisActivity);
      ((View)localObject3).setId(R.id.id_image);
      ((View)localObject3).setLayoutParams((ViewGroup.LayoutParams)localObject2);
      ((View)localObject3).setBackgroundResource(R.drawable.button_b_02);
      ((ViewGroup)localObject1).addView((View)localObject3);
      localObject2 = new RelativeLayout.LayoutParams(calSizeFrom720(54) * mBitmapSubLogo.getWidth() / mBitmapSubLogo.getHeight(), calSizeFrom720(54));
      ((RelativeLayout.LayoutParams)localObject2).addRule(1, R.id.id_image);
      localObject3 = new ImageView(thisActivity);
      ((View)localObject3).setLayoutParams((ViewGroup.LayoutParams)localObject2);
      ((ImageView)localObject3).setScaleType(ImageView.ScaleType.FIT_CENTER);
      ((ImageView)localObject3).setImageBitmap(mBitmapSubLogo);
      ((ViewGroup)localObject1).addView((View)localObject3);
    }
    else
    {
      ((View)localObject2).setLayoutParams(new RelativeLayout.LayoutParams(calSizeFrom720(290), calSizeFrom720(54)));
      ((ImageView)localObject2).setImageDrawable(ContextCompat.getDrawable(thisActivity, R.drawable.share_qr_logo_long));
    }
    if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().slogan))
    {
      localObject2 = new RelativeLayout.LayoutParams(-2, calSizeFrom720(42));
      ((RelativeLayout.LayoutParams)localObject2).addRule(11, 1);
      topMargin = calSizeFrom720(12);
      localObject3 = new TextView(thisActivity);
      ((View)localObject3).setLayoutParams((ViewGroup.LayoutParams)localObject2);
      ((TextView)localObject3).setSingleLine(true);
      ((TextView)localObject3).setMaxWidth(calSizeFrom720(200));
      ((TextView)localObject3).setText(mShareInfo.getShareImageInfo().slogan);
      ((TextView)localObject3).setTextSize(0, calSizeFrom720(28));
      ((TextView)localObject3).setTextColor(-16777216);
      ((TextView)localObject3).setGravity(16);
      ((View)localObject3).setBackgroundResource(R.drawable.share_qr_slogan_bg);
      ((TextView)localObject3).setPadding(calSizeFrom720(23), 0, calSizeFrom720(10), 0);
      ((ViewGroup)localObject1).addView((View)localObject3);
    }
    localObject1 = new ImageView(thisActivity);
    ((View)localObject1).setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(thisActivity.getApplication()), DPIUtil.getWidth(thisActivity.getApplication()) * mBitmapProduct.getHeight() / mBitmapProduct.getWidth()));
    ((ImageView)localObject1).setScaleType(ImageView.ScaleType.FIT_CENTER);
    ((ImageView)localObject1).setImageBitmap(mBitmapProduct);
    localLinearLayout.addView((View)localObject1);
    if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().productTitle))
    {
      localObject1 = new TextView(thisActivity);
      ((View)localObject1).setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(thisActivity.getApplication()), -2));
      ((TextView)localObject1).setText(mShareInfo.getShareImageInfo().productTitle);
      ((TextView)localObject1).setPadding(calSizeFrom720(40), calSizeFrom720(20), calSizeFrom720(40), 0);
      ((TextView)localObject1).setTextSize(0, calSizeFrom720(32));
      ((TextView)localObject1).setTextColor(-16777216);
      ((TextView)localObject1).setLineSpacing(0.0F, 1.3F);
      ((TextView)localObject1).setMaxLines(5);
      ((TextView)localObject1).setEllipsize(TextUtils.TruncateAt.END);
      localLinearLayout.addView((View)localObject1);
    }
    if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().productDesc))
    {
      localObject1 = new TextView(thisActivity);
      ((View)localObject1).setLayoutParams(new LinearLayout.LayoutParams(DPIUtil.getWidth(thisActivity.getApplication()), -2));
      ((TextView)localObject1).setText(mShareInfo.getShareImageInfo().productDesc);
      ((TextView)localObject1).setPadding(calSizeFrom720(40), calSizeFrom720(20), calSizeFrom720(40), 0);
      ((TextView)localObject1).setTextSize(0, calSizeFrom720(30));
      ((TextView)localObject1).setTextColor(-6316129);
      ((TextView)localObject1).setLineSpacing(0.0F, 1.3F);
      ((TextView)localObject1).setMaxLines(10);
      ((TextView)localObject1).setEllipsize(TextUtils.TruncateAt.END);
      localLinearLayout.addView((View)localObject1);
    }
    localObject1 = ShareUtil.createQRCode(ShareUtil.getShareUrl(mShareInfo.getUrl(), "QRCode"));
    if (localObject1 == null) {
      return null;
    }
    localObject2 = new LinearLayout.LayoutParams(calSizeFrom720(256), calSizeFrom720(256));
    topMargin = calSizeFrom720(12);
    bottomMargin = calSizeFrom720(6);
    gravity = 17;
    localObject3 = new ImageView(thisActivity);
    ((View)localObject3).setLayoutParams((ViewGroup.LayoutParams)localObject2);
    ((ImageView)localObject3).setScaleType(ImageView.ScaleType.FIT_CENTER);
    ((ImageView)localObject3).setImageBitmap((Bitmap)localObject1);
    localLinearLayout.addView((View)localObject3);
    localObject1 = new LinearLayout.LayoutParams(-1, -2);
    gravity = 17;
    localObject2 = new TextView(thisActivity);
    ((View)localObject2).setLayoutParams((ViewGroup.LayoutParams)localObject1);
    ((TextView)localObject2).setText(getString(R.string.share_look_detail));
    ((TextView)localObject2).setPadding(0, calSizeFrom720(5), 0, 0);
    ((TextView)localObject2).setGravity(17);
    ((TextView)localObject2).setTextSize(0, calSizeFrom720(26));
    ((TextView)localObject2).setTextColor(-6316129);
    localLinearLayout.addView((View)localObject2);
    localObject2 = new TextView(thisActivity);
    ((View)localObject2).setLayoutParams((ViewGroup.LayoutParams)localObject1);
    ((TextView)localObject2).setText(getString(R.string.share_download_app));
    ((TextView)localObject2).setPadding(0, calSizeFrom720(5), 0, calSizeFrom720(50));
    ((TextView)localObject2).setGravity(17);
    ((TextView)localObject2).setTextSize(0, calSizeFrom720(26));
    ((TextView)localObject2).setTextColor(-6316129);
    localLinearLayout.addView((View)localObject2);
    return localLinearLayout;
  }
  
  private void dealResult()
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("dealResult: ");
    ((StringBuilder)localObject).append(this);
    Log.d("ShareActivity", ((StringBuilder)localObject).toString());
    if (mDoShareMillis + 30000L < System.currentTimeMillis()) {
      return;
    }
    if (mCallbackListener != null)
    {
      callbackForResult();
      return;
    }
    localObject = new Intent();
    ((Intent)localObject).putExtra("selectedChannel", mSelectedChannel);
    ((Intent)localObject).putExtra("sharedChannel", mSharedChannel);
    ((Intent)localObject).putExtra("sharedMsg", mSharedMsg);
    setResult(mSharedResult, (Intent)localObject);
  }
  
  private void doShare()
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("doshare: ");
    ((StringBuilder)localObject).append(this);
    Log.d("ShareActivity", ((StringBuilder)localObject).toString());
    mDoShareMillis = System.currentTimeMillis();
    if ("Wxfriends".equals(mSelectedChannel))
    {
      if (WeixinUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.16(this));
        shareToDo();
        return;
      }
      shareBlock();
      return;
    }
    if ("Wxmoments".equals(mSelectedChannel))
    {
      if (WeixinUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.17(this));
        shareToDo();
        return;
      }
      shareBlock();
      return;
    }
    StringBuilder localStringBuilder;
    if ("QQfriends".equals(mSelectedChannel))
    {
      if (QQUtil.check())
      {
        localObject = mBaseUiListener;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(mShareInfo.getTransaction());
        localStringBuilder.append("##");
        localStringBuilder.append("QQfriends");
        transaction = localStringBuilder.toString();
        QQUtil.shareToQQ(thisActivity, mShareInfo, mBaseUiListener);
        return;
      }
      shareBlock();
      return;
    }
    if ("QQzone".equals(mSelectedChannel))
    {
      if (QQUtil.check())
      {
        localObject = mBaseUiListener;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(mShareInfo.getTransaction());
        localStringBuilder.append("##");
        localStringBuilder.append("QQzone");
        transaction = localStringBuilder.toString();
        QQUtil.shareToQZone(thisActivity, mShareInfo, mBaseUiListener);
        return;
      }
      shareBlock();
      return;
    }
    if ("Sinaweibo".equals(mSelectedChannel))
    {
      if (WeiboUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.18(this));
        shareToDo();
        return;
      }
      shareBlock();
      return;
    }
    if ("CopyURL".equals(mSelectedChannel))
    {
      ((ClipboardManager)getApplicationContext().getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("Label", ShareUtil.getShareUrl(mShareInfo.getUrl(), "CopyURL")));
      ToastUtils.showToast(thisActivity, getString(R.string.share_copy_success));
      finish();
      return;
    }
    if ("QRCode".equals(mSelectedChannel))
    {
      if ((mShareInfo.getShareImageInfo() != null) && ((!TextUtils.isEmpty(mShareInfo.getShareImageInfo().productUrl)) || (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().productPath)) || (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directUrl)) || (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directContent)) || (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directPath))))
      {
        mIsTimeout = false;
        if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directPath))
        {
          mBitmapSavedPath = mShareInfo.getShareImageInfo().directPath;
          loadLocalBitmap();
          return;
        }
        if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directContent))
        {
          getImageFromBase64(mShareInfo.getShareImageInfo().directContent);
          return;
        }
        post(mTimeoutRunnable, 6000);
        if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directUrl))
        {
          downloadImage(ShareUtil.urlDecode(mShareInfo.getShareImageInfo().directUrl), 3);
          return;
        }
        if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().productPath))
        {
          mBitmapProduct = getBitmapFromFile(mShareInfo.getShareImageInfo().productPath, 1080.0F);
          onDownloadImageComplete();
        }
        else
        {
          downloadImage(ShareUtil.urlDecode(mShareInfo.getShareImageInfo().productUrl), 2);
        }
        downloadImage(ShareUtil.urlDecode(mShareInfo.getShareImageInfo().logoUrl), 1);
        return;
      }
      ToastUtils.showToast(thisActivity, getString(R.string.share_setting_none));
      finish();
      return;
    }
    finish();
  }
  
  private void doShareImage()
  {
    if (TextUtils.isEmpty(mBitmapSavedPath))
    {
      ToastUtils.showToast(thisActivity, getString(R.string.share_qr_error));
      finish();
      return;
    }
    if (mShareBigBitmap == null) {
      mShareBigBitmap = getBitmapFromFile(mBitmapSavedPath, 1080.0F);
    }
    if ((mShareBigBitmap != null) && (!isThumbDataWrong()))
    {
      mDoShareMillis = System.currentTimeMillis();
      if ("Wxfriends".equals(mSelectedChannel))
      {
        if (WeixinUtil.check())
        {
          WeixinUtil.doWXShare(mShareInfo, true, mThumbData, getBitmap4Share());
          return;
        }
        shareBlock();
        return;
      }
      if ("Wxmoments".equals(mSelectedChannel))
      {
        if (WeixinUtil.check())
        {
          WeixinUtil.doWXShare(mShareInfo, false, mThumbData, getBitmap4Share());
          return;
        }
        shareBlock();
        return;
      }
      if ("QQfriends".equals(mSelectedChannel))
      {
        if (QQUtil.check())
        {
          ShareActivity.BaseUiListener localBaseUiListener = mBaseUiListener;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append(mShareInfo.getTransaction());
          localStringBuilder.append("##");
          localStringBuilder.append("QQfriends");
          transaction = localStringBuilder.toString();
          QQUtil.shareToQQ(thisActivity, mShareInfo, mBitmapSavedPath, mBaseUiListener);
          return;
        }
        shareBlock();
        return;
      }
      finish();
      return;
    }
    ToastUtils.showToast(thisActivity, getString(R.string.share_qr_error));
    finish();
  }
  
  private void doShareImageDirect()
  {
    if ((!mSelectedChannel.equalsIgnoreCase("Wxfriends")) && (!mSelectedChannel.equalsIgnoreCase("Wxmoments")) && (!mSelectedChannel.equalsIgnoreCase("QQfriends")))
    {
      finish();
      return;
    }
    if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directPath))
    {
      mBitmapSavedPath = mShareInfo.getShareImageInfo().directPath;
      mShareBigBitmap = getBitmapFromFile(mBitmapSavedPath, 1080.0F);
      setBigImgThumbData();
      doShareImage();
      return;
    }
    if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directUrl))
    {
      mDoShareMillis = System.currentTimeMillis();
      post(mTimeoutRunnable, 6000);
      downloadImage(ShareUtil.urlDecode(mShareInfo.getShareImageInfo().directUrl), 3);
      return;
    }
    if (!TextUtils.isEmpty(mShareInfo.getShareImageInfo().directContent))
    {
      mDoShareMillis = System.currentTimeMillis();
      post(mTimeoutRunnable, 6000);
      getImageFromBase64(mShareInfo.getShareImageInfo().directContent);
      return;
    }
    finish();
  }
  
  private void doShareLottery()
  {
    mDoShareMillis = System.currentTimeMillis();
    if ("Wxfriends".equals(mSelectedChannel))
    {
      if (WeixinUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.19(this));
        return;
      }
      shareBlock();
      return;
    }
    if ("Wxmoments".equals(mSelectedChannel))
    {
      if (WeixinUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.20(this));
        return;
      }
      shareBlock();
      return;
    }
    if ("QQfriends".equals(mSelectedChannel))
    {
      if (QQUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.21(this));
        return;
      }
      shareBlock();
      return;
    }
    if ("QQzone".equals(mSelectedChannel))
    {
      if (QQUtil.check())
      {
        mShareRunnable = ((Runnable)new ShareActivity.22(this));
        return;
      }
      shareBlock();
    }
  }
  
  private void downloadImage(String paramString, int paramInt)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    ShooterOkhttp3Instrumentation.newCall((OkHttpClient)ShooterOkhttp3Instrumentation.newInstance(new OkHttpClient()), new Request.Builder().url(paramString).build()).enqueue((Callback)new ShareActivity.24(this, paramInt));
  }
  
  public static final String getBigImgPath()
  {
    FileService.Directory localDirectory = FileService.getDirectory(1);
    if (localDirectory != null)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(localDirectory.getPath());
      localStringBuilder.append("/");
      localStringBuilder.append("share_qrcode_image.png");
      return localStringBuilder.toString();
    }
    return "";
  }
  
  private Bitmap getBitmap4Share()
  {
    return getBitmapFromByteArray(compressBitmap2Bytes(mShareBigBitmap, 10485760), 1080.0F);
  }
  
  private Bitmap getBitmapFromByteArray(byte[] paramArrayOfByte, float paramFloat)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    inJustDecodeBounds = true;
    BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramArrayOfByte.length, localOptions);
    inSampleSize = ((int)Math.ceil(outWidth / paramFloat));
    inJustDecodeBounds = false;
    return BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramArrayOfByte.length, localOptions);
  }
  
  private Bitmap getBitmapFromFile(String paramString, float paramFloat)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    inJustDecodeBounds = true;
    BitmapFactory.decodeFile(paramString, localOptions);
    inSampleSize = ((int)Math.ceil(outWidth / paramFloat));
    inJustDecodeBounds = false;
    return BitmapFactory.decodeFile(paramString, localOptions);
  }
  
  private void getImageFromBase64(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    paramString = base64ToBitmap(paramString);
    if (paramString != null)
    {
      if (paramString.getByteCount() < 1) {
        return;
      }
      mShareBigBitmap = paramString;
      onDownloadImageCompleteDirect();
    }
  }
  
  private RoundedBitmapDrawable getRoundedDrawable()
  {
    RoundedBitmapDrawable localRoundedBitmapDrawable = RoundedBitmapDrawableFactory.create(thisActivity.getResources(), mShareBigBitmap);
    localRoundedBitmapDrawable.setCornerRadius(8.0F);
    return localRoundedBitmapDrawable;
  }
  
  private int hash(String paramString)
  {
    byte[] arrayOfByte = new byte[0];
    try
    {
      paramString = paramString.getBytes("utf-8");
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      paramString = arrayOfByte;
    }
    int k = paramString.length;
    int m = k >> 2;
    int i = k ^ 0x1F;
    int j = 0;
    while (j < m)
    {
      int n = (j << 2) + 0;
      int i1 = paramString[(n + 3)];
      int i2 = paramString[(n + 2)];
      int i3 = paramString[(n + 1)];
      n = (paramString[(n + 0)] & 0xFF | ((i1 << 8 | i2 & 0xFF) << 8 | i3 & 0xFF) << 8) * 1540483477;
      i = i * 1540483477 ^ (n ^ n >>> 24) * 1540483477;
      j += 1;
    }
    j = m << 2;
    k -= j;
    m = j + 0;
    j = i;
    if (k != 0)
    {
      j = i;
      if (k >= 3) {
        j = i ^ paramString[(m + 2)] << 16;
      }
      i = j;
      if (k >= 2) {
        i = j ^ paramString[(m + 1)] << 8;
      }
      j = i;
      if (k >= 1) {
        j = i ^ paramString[m];
      }
      j *= 1540483477;
    }
    i = (j >>> 13 ^ j) * 1540483477;
    return Math.abs(i ^ i >>> 15);
  }
  
  private void initData(Intent paramIntent)
  {
    mAction = paramIntent.getIntExtra("action", 0);
    mSharedResult = paramIntent.getIntExtra("result", 0);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("initData: ");
    localStringBuilder.append(mSharedResult);
    Log.d("ShareActivity", localStringBuilder.toString());
    mLotteryRuleType = paramIntent.getIntExtra("ruleType", 0);
    mLotteryActivityId = paramIntent.getLongExtra("activityId", 0L);
    if (paramIntent.hasExtra("bizId")) {
      mLotteryBizId = paramIntent.getStringExtra("bizId");
    }
    if (paramIntent.hasExtra("sourceType")) {
      mLotterySourceType = paramIntent.getStringExtra("sourceType");
    }
    if (paramIntent.hasExtra("ruleContent")) {
      mLotteryRuleContent = paramIntent.getStringExtra("ruleContent");
    }
    if (paramIntent.hasExtra("transaction")) {
      splitTransaction(paramIntent.getStringExtra("transaction"));
    }
    if (paramIntent.hasExtra("msg")) {
      mSharedMsg = paramIntent.getStringExtra("msg");
    }
    if (paramIntent.hasExtra("shareInfo")) {
      mShareInfo = ((ShareInfo)paramIntent.getParcelableExtra("shareInfo"));
    }
    if (paramIntent.hasExtra("bytes")) {
      mThumbData = paramIntent.getByteArrayExtra("bytes");
    }
    if (paramIntent.hasExtra("parcel"))
    {
      paramIntent = (ShareCallbackListenerParcel)paramIntent.getParcelableExtra("parcel");
      if (paramIntent != null)
      {
        mCallbackListener = paramIntent.getCallbackListener();
        mClickCallbackListener = paramIntent.getClickCallbackListener();
      }
    }
    paramIntent = mShareInfo;
    if ((paramIntent != null) && (!TextUtils.isEmpty(paramIntent.getEventFrom()))) {
      mShareEventFrom = mShareInfo.getEventFrom();
    }
  }
  
  private boolean isHttpOrHttps(String paramString)
  {
    return ("http".equalsIgnoreCase(paramString)) || ("https".equalsIgnoreCase(paramString));
  }
  
  private boolean isShareToMp()
  {
    return ("Wxfriends".equals(mSelectedChannel)) && (!TextUtils.isEmpty(mShareInfo.getMpId()));
  }
  
  private boolean isShareToMpUseLocalIcon()
  {
    if ((isShareToMp()) && (!TextUtils.isEmpty(mShareInfo.getMpLocalIconPath()))) {
      try
      {
        boolean bool = new File(mShareInfo.getMpLocalIconPath()).exists();
        return bool;
      }
      catch (Throwable localThrowable)
      {
        localThrowable.printStackTrace();
      }
    }
    return false;
  }
  
  private boolean isThumbDataWrong()
  {
    byte[] arrayOfByte = mThumbData;
    if (arrayOfByte != null)
    {
      if (arrayOfByte.length == 0) {
        return true;
      }
      if (isShareToMp()) {
        return mThumbData.length > 131072;
      }
      return mThumbData.length > 32768;
    }
    return true;
  }
  
  private boolean isUrlInWhiteList(String paramString)
  {
    Object localObject = JdSdk.getInstance().getWhiteHostList();
    if ((localObject != null) && (((ArrayList)localObject).size() > 0))
    {
      localObject = ((ArrayList)localObject).iterator();
      while (((Iterator)localObject).hasNext()) {
        if (checkShareUrl(paramString, (String)((Iterator)localObject).next())) {
          return true;
        }
      }
      return false;
    }
    return true;
  }
  
  private void loadLocalBitmap()
  {
    mShareBigBitmap = getBitmapFromFile(mBitmapSavedPath, 1080.0F);
    setBigImgThumbData();
    postShowShareBigImgPanel();
  }
  
  private void onChannelItemClick(int paramInt, String paramString1, String paramString2)
  {
    closePanelAnimation(false);
    if (mChannelSet.size() > paramInt) {
      mSelectedChannel = ((Map)mChannelSet.get(paramInt)).get("channel").toString();
    }
    Object localObject = mClickCallbackListener;
    if (localObject != null)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString1);
      localStringBuilder.append(mSelectedChannel);
      ((ShareUtil.ClickCallbackListener)localObject).onClick(localStringBuilder.toString(), mShareEventFrom);
    }
    localObject = paramString2;
    if ("Wxfriends".equals(mSelectedChannel))
    {
      localObject = paramString2;
      if ("Share_".equals(paramString1))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString2);
        ((StringBuilder)localObject).append("_");
        paramString2 = ((StringBuilder)localObject).toString();
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString2);
        if (TextUtils.isEmpty(mShareInfo.getMpId())) {
          paramString2 = "1";
        } else {
          paramString2 = "2";
        }
        ((StringBuilder)localObject).append(paramString2);
        localObject = ((StringBuilder)localObject).toString();
      }
    }
    paramString2 = new StringBuilder();
    paramString2.append(paramString1);
    paramString2.append(mSelectedChannel);
    setMta(paramString2.toString(), mShareInfo.getUrl(), (String)localObject);
  }
  
  private void onDownloadImageComplete()
  {
    if (mShareInfo == null) {
      return;
    }
    if (!TextUtils.isEmpty(mSelectedChannel))
    {
      if (!"QRCode".equals(mSelectedChannel)) {
        return;
      }
      if ((!TextUtils.isEmpty(mShareInfo.getShareImageInfo().logoUrl)) && (mBitmapSubLogo == null)) {
        return;
      }
      if (mBitmapProduct != null)
      {
        if (mIsTimeout) {
          return;
        }
        getHandler().removeCallbacks(mTimeoutRunnable);
        View localView = createShareBigImgView();
        if ((localView != null) && (saveBitmapFromView(localView)))
        {
          setBigImgThumbData();
          postShowShareBigImgPanel();
          return;
        }
        post((Runnable)new ShareActivity.26(this), 1500);
      }
    }
  }
  
  private void onDownloadImageCompleteDirect()
  {
    if (!mIsTimeout)
    {
      if (mShareBigBitmap == null) {
        return;
      }
      getHandler().removeCallbacks(mTimeoutRunnable);
      if (!saveShareBitmap())
      {
        post((Runnable)new ShareActivity.25(this), 1500);
        return;
      }
      setBigImgThumbData();
      if (!"QRCode".equalsIgnoreCase(mSelectedChannel))
      {
        doShareImage();
        return;
      }
      postShowShareBigImgPanel();
    }
  }
  
  private void postShowShareBigImgPanel()
  {
    post((Runnable)new ShareActivity.5(this), 250);
  }
  
  private boolean saveBitmapFromView(View paramView)
  {
    paramView.measure(View.MeasureSpec.makeMeasureSpec(0, 0), View.MeasureSpec.makeMeasureSpec(0, 0));
    paramView.layout(0, 0, paramView.getMeasuredWidth(), paramView.getMeasuredHeight());
    Bitmap localBitmap = Bitmap.createBitmap(paramView.getMeasuredWidth(), paramView.getMeasuredHeight(), Bitmap.Config.RGB_565);
    paramView.draw(new Canvas(localBitmap));
    paramView = mBitmapSubLogo;
    if (paramView != null)
    {
      paramView.recycle();
      mBitmapSubLogo = null;
    }
    paramView = mBitmapProduct;
    if (paramView != null)
    {
      paramView.recycle();
      mBitmapProduct = null;
    }
    mShareBigBitmap = scaleBitmap(localBitmap, 1080.0F);
    return saveShareBitmap();
  }
  
  private boolean saveShareBitmap()
  {
    Object localObject = mShareBigBitmap;
    if (localObject == null) {
      return false;
    }
    localObject = compressBitmap2Bytes((Bitmap)localObject, 10485760);
    mBitmapSavedPath = getBigImgPath();
    return FileService.saveToSDCard(FileService.getDirectory(1), "share_qrcode_image.png", (byte[])localObject);
  }
  
  private Bitmap scaleBitmap(Bitmap paramBitmap, float paramFloat)
  {
    Object localObject = paramBitmap;
    if (paramBitmap.getWidth() > paramFloat)
    {
      paramFloat /= paramBitmap.getWidth();
      localObject = new Matrix();
      ((Matrix)localObject).postScale(paramFloat, paramFloat);
      localObject = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject, true);
    }
    return localObject;
  }
  
  private void setBigImgThumbData()
  {
    Bitmap localBitmap = mShareBigBitmap;
    if (localBitmap == null) {
      return;
    }
    mThumbData = compressBitmap2Bytes(scaleBitmap(localBitmap, 240.0F), 32768);
  }
  
  private void setMta(String paramString1, String paramString2, String paramString3) {}
  
  private void setResultMta()
  {
    String str = mSelectedChannel;
    Object localObject = mShareInfo;
    if ((localObject != null) && (!TextUtils.isEmpty(((ShareInfo)localObject).getCpsUrl())))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(str);
      ((StringBuilder)localObject).append("_2_");
      ((StringBuilder)localObject).append(mLotterySourceType);
      str = ((StringBuilder)localObject).toString();
    }
    else
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(str);
      ((StringBuilder)localObject).append("_1_0");
      str = ((StringBuilder)localObject).toString();
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("setResultMta: ");
    ((StringBuilder)localObject).append(mSharedResult);
    Log.d("ShareActivity", ((StringBuilder)localObject).toString());
    int i = mSharedResult;
    if (i == 11)
    {
      setMta("Share_ShareSuccess", mSharedUrl, str);
      return;
    }
    if (i == 13)
    {
      setMta("Share_ShareCancel", mSharedUrl, str);
      return;
    }
    if (i == 12) {
      setMta("Share_ShareFail", mSharedUrl, str);
    }
  }
  
  private void setShareInfo()
  {
    if (TextUtils.isEmpty(mShareInfo.getTitle())) {
      mShareInfo.setTitle(getString(R.string.app_name));
    }
    if (TextUtils.isEmpty(mShareInfo.getSummary())) {
      mShareInfo.setSummary(getString(R.string.share_defaut_summary));
    }
    if (TextUtils.isEmpty(mShareInfo.getWxcontent()))
    {
      localShareInfo = mShareInfo;
      localShareInfo.setWxcontent(localShareInfo.getSummary());
    }
    if (TextUtils.isEmpty(mShareInfo.getWxMomentsContent()))
    {
      localShareInfo = mShareInfo;
      localShareInfo.setWxMomentsContent(localShareInfo.getSummary());
    }
    if (!TextUtils.isEmpty(mShareInfo.getUrl()))
    {
      localShareInfo = mShareInfo;
      localShareInfo.setUrl(localShareInfo.getUrl().replace("3.cn/Ceo4yH", "sq.jd.com/NvQBpa"));
    }
    ShareInfo localShareInfo = mShareInfo;
    localShareInfo.setTransaction(ShareUtil.urlEncode(localShareInfo.getUrl()));
  }
  
  private void shareBlock()
  {
    mSharedResult = 14;
    mSharedMsg = "check failed";
    dealResult();
    finish();
  }
  
  private void shareToDo()
  {
    if (mShareRunnable == null) {
      return;
    }
    if (!isThumbDataWrong())
    {
      mShareRunnable.run();
      return;
    }
    if (isShareToMpUseLocalIcon())
    {
      shareToMpWithLocalThumbData();
      return;
    }
    if (TextUtils.isEmpty(mShareInfo.getIconUrl()))
    {
      shareWithDefaultThumbData();
      return;
    }
    tryShareWithNetThumbData();
  }
  
  private void shareToMpWithLocalThumbData()
  {
    Object localObject = getBitmapFromFile(mShareInfo.getMpLocalIconPath(), 720.0F);
    if (localObject != null)
    {
      mThumbData = compressBitmap2Bytes((Bitmap)localObject, 131072);
      localObject = mShareRunnable;
      if (localObject != null) {
        ((Runnable)localObject).run();
      }
    }
    else
    {
      shareWithDefaultThumbData();
    }
  }
  
  private void shareWithDefaultThumbData()
  {
    if (mShareInfo.getEventFrom() != null) {
      localObject = mShareInfo.getEventFrom();
    } else {
      localObject = "";
    }
    int i;
    if (((String)localObject).equals("shareFromHb")) {
      i = R.drawable.share_wx_hb;
    } else {
      i = R.drawable.share_default_icon;
    }
    Object localObject = ContextCompat.getDrawable(thisActivity, i);
    if (localObject == null) {
      return;
    }
    mThumbData = compressBitmap2Bytes(((BitmapDrawable)localObject).getBitmap(), 32768);
    mShareRunnable.run();
  }
  
  private void shareWithNetThumbData()
  {
    String str;
    if ((isShareToMp()) && (!TextUtils.isEmpty(mShareInfo.getMpIconUrl()))) {
      str = mShareInfo.getMpIconUrl();
    } else {
      str = mShareInfo.getIconUrl();
    }
    ShooterOkhttp3Instrumentation.newCall((OkHttpClient)ShooterOkhttp3Instrumentation.newInstance(new OkHttpClient()), new Request.Builder().url(str).build()).enqueue((Callback)new ShareActivity.23(this));
  }
  
  private void showLotteryPanel()
  {
    showPanelAnimation(R.layout.share_layout_lottery);
    findViewById(R.id.share_lottery_rule).setOnClickListener((View.OnClickListener)new ShareActivity.11(this));
    findViewById(R.id.share_layout_cancel).setOnClickListener((View.OnClickListener)new ShareActivity.12(this));
    Object localObject = (GridView)findViewById(R.id.share_channels);
    int i;
    if (DPIUtil.getWidth(thisActivity.getApplication()) > DPIUtil.getHeight(thisActivity.getApplication())) {
      i = 5;
    } else {
      i = 4;
    }
    ((GridView)localObject).setNumColumns(i);
    ((GridView)localObject).setAdapter((ListAdapter)new ShareActivity.ChannelsAdapter(this));
    ((AdapterView)localObject).setOnItemClickListener((AdapterView.OnItemClickListener)new ShareActivity.13(this));
    if (!TextUtils.isEmpty(mLotteryRuleContent)) {
      ((TextView)findViewById(R.id.share_lottery_content)).setText(mLotteryRuleContent);
    }
    localObject = mShareInfo.getUrl();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("2_");
    localStringBuilder.append(mLotterySourceType);
    setMta("Share_SharePanelPop", (String)localObject, localStringBuilder.toString());
  }
  
  private void showPanel()
  {
    showPanelAnimation(R.layout.share_layout);
    findViewById(R.id.share_layout_cancel).setOnClickListener((View.OnClickListener)new ShareActivity.3(this));
    GridView localGridView = (GridView)findViewById(R.id.share_channels);
    List localList = mChannelSet;
    int i = 4;
    if ((localList != null) && (localList.size() < 4))
    {
      localGridView.setNumColumns(mChannelSet.size());
    }
    else
    {
      if (DPIUtil.getWidth(thisActivity.getApplication()) > DPIUtil.getHeight(thisActivity.getApplication())) {
        i = 5;
      }
      localGridView.setNumColumns(i);
    }
    localGridView.setAdapter((ListAdapter)new ShareActivity.ChannelsAdapter(this));
    localGridView.setOnItemClickListener((AdapterView.OnItemClickListener)new ShareActivity.4(this));
    setMta("Share_SharePanelPop", mShareInfo.getUrl(), "1_0");
  }
  
  private void showPanelAnimation(int paramInt)
  {
    TranslateAnimation localTranslateAnimation = new TranslateAnimation(1, 0.0F, 1, 0.0F, 1, 1.0F, 1, 0.0F);
    localTranslateAnimation.setFillAfter(true);
    localTranslateAnimation.setDuration(200L);
    View localView = getLayoutInflater().inflate(paramInt, null);
    mRootView.addView(localView);
    localView.startAnimation(localTranslateAnimation);
  }
  
  private void showShareBigImgPanel()
  {
    if (mShareBigBitmap == null) {
      return;
    }
    mSelectedChannel = "";
    showPanelAnimation(R.layout.share_layout_image);
    findViewById(R.id.share_layout_image).setOnClickListener((View.OnClickListener)new ShareActivity.6(this));
    findViewById(R.id.share_image_cancel).setOnClickListener((View.OnClickListener)new ShareActivity.7(this));
    findViewById(R.id.share_scroll_width).setOnTouchListener((View.OnTouchListener)new ShareActivity.8(this));
    findViewById(R.id.share_scroll_heigh).setOnTouchListener((View.OnTouchListener)new ShareActivity.9(this));
    Object localObject = (ImageView)findViewById(R.id.share_big_img_heigh);
    ImageView localImageView = (ImageView)findViewById(R.id.share_big_img_width);
    if (mShareInfo.getShareImageInfo() != null)
    {
      String str = mShareInfo.getShareImageInfo().imageContentMode;
      if (str != null)
      {
        if (str.equals("width_mode"))
        {
          findViewById(R.id.share_scroll_heigh).setVisibility(8);
          findViewById(R.id.share_scroll_width).setVisibility(0);
          if (Build.VERSION.SDK_INT < 21) {
            localImageView.setImageDrawable((Drawable)getRoundedDrawable());
          } else {
            localImageView.setImageBitmap(mShareBigBitmap);
          }
        }
        else
        {
          findViewById(R.id.share_scroll_width).setVisibility(8);
          findViewById(R.id.share_scroll_heigh).setVisibility(0);
          if (Build.VERSION.SDK_INT < 21) {
            ((ImageView)localObject).setImageDrawable((Drawable)getRoundedDrawable());
          } else {
            ((ImageView)localObject).setImageBitmap(mShareBigBitmap);
          }
        }
      }
      else
      {
        findViewById(R.id.share_scroll_width).setVisibility(8);
        findViewById(R.id.share_scroll_heigh).setVisibility(0);
        if (Build.VERSION.SDK_INT < 21) {
          ((ImageView)localObject).setImageDrawable((Drawable)getRoundedDrawable());
        } else {
          ((ImageView)localObject).setImageBitmap(mShareBigBitmap);
        }
      }
    }
    mChannelSet = ShareUtil.packChannels(Arrays.asList(new String[] { "Wxfriends", "Wxmoments" }), false, false, true);
    localObject = (GridView)findViewById(R.id.share_channels);
    ((GridView)localObject).setAdapter((ListAdapter)new ShareActivity.ChannelsAdapter(this));
    ((AdapterView)localObject).setOnItemClickListener((AdapterView.OnItemClickListener)new ShareActivity.10(this));
  }
  
  private void splitTransaction(String paramString)
  {
    paramString = ShareUtil.splitTransaction(paramString);
    mSharedUrl = ShareUtil.urlDecode(paramString[0]);
    mSharedChannel = paramString[1];
  }
  
  private void tryShareWithNetThumbData()
  {
    try
    {
      shareWithNetThumbData();
      return;
    }
    catch (Throwable localThrowable)
    {
      OKLog.setNode("ShareActivity", localThrowable);
      shareWithDefaultThumbData();
    }
  }
  
  public void finish()
  {
    Log.d("ShareActivity", "finish");
    if (mFinishMillis + 250L > System.currentTimeMillis()) {
      return;
    }
    mFinishMillis = System.currentTimeMillis();
    if (!closePanelAnimation(true))
    {
      if (mSharedResult == 0) {
        setResult(15, new Intent());
      }
      super.finish();
    }
    overridePendingTransition(R.anim.nothing, R.anim.nothing);
  }
  
  public Handler getHandler()
  {
    return handler;
  }
  
  public String getServerConfigValue()
  {
    return null;
  }
  
  public boolean isDisplayCutout()
  {
    return false;
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (QQUtil.getTencentInstance() != null)
    {
      QQUtil.getTencentInstance();
      Tencent.onActivityResultData(paramInt1, paramInt2, paramIntent, mBaseUiListener);
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    try
    {
      super.onCreate(paramBundle);
      Log.d("ShareActivity", "onCreate_start");
      int i = Build.VERSION.SDK_INT;
      if (i < 26) {
        setRequestedOrientation(3);
      }
      overridePendingTransition(R.anim.nothing, R.anim.nothing);
      if (paramBundle != null) {
        try
        {
          WeiboUtil.getWBShareApi().handleWeiboResponse(getIntent(), this);
        }
        catch (Exception paramBundle)
        {
          paramBundle.printStackTrace();
        }
      }
      paramBundle = getIntent();
      if (paramBundle == null)
      {
        ToastUtils.showToast(thisActivity, getString(R.string.share_setting_none));
        finish();
        return;
      }
      thisActivity = ((Activity)this);
      initData(paramBundle);
      i = mAction;
      if (i == 3)
      {
        setResultMta();
        finish();
        return;
      }
      paramBundle = mShareInfo;
      if (paramBundle != null)
      {
        paramBundle = mShareInfo.getShareImageInfo();
        boolean bool1;
        if (paramBundle == null)
        {
          bool1 = TextUtils.isEmpty(mShareInfo.getUrl());
          if (!bool1)
          {
            bool1 = mShareInfo.getUrl().startsWith("http");
            if (!bool1) {}
          }
        }
        else
        {
          bool1 = JdSdk.getInstance().getIsCheckHost();
          if (bool1)
          {
            bool1 = isUrlInWhiteList(mShareInfo.getUrl());
            if (!bool1)
            {
              paramBundle = JdSdk.getInstance().getHostCheckToast();
              bool1 = TextUtils.isEmpty(paramBundle);
              if (bool1) {
                ToastUtils.showToast(thisActivity, getString(R.string.share_host_setting_error));
              } else {
                ToastUtils.showToast(thisActivity, paramBundle);
              }
              finish();
              return;
            }
          }
          ShareUtil.init(thisActivity);
          UnStatusBarTintUtil.defaultSetTranslucent((Activity)this);
          setContentView(R.layout.activity_share);
          bool1 = UnStatusBarTintUtil.isEnable((Activity)this);
          if (bool1)
          {
            i = statusBarHint();
            UnStatusBarTintUtil.setStatusBar4Base((Activity)this, i);
          }
          mRootView = ((RelativeLayout)findViewById(R.id.share_activity));
          paramBundle = mRootView;
          paramBundle.setOnClickListener((View.OnClickListener)new ShareActivity.2(this));
          paramBundle = mShareInfo.getChannelsList();
          if (paramBundle != null)
          {
            bool1 = mShareInfo.getChannelsList().contains("QRCode");
            if (bool1)
            {
              j = 1;
              break label388;
            }
          }
          int j = 0;
          label388:
          paramBundle = mShareInfo.getShareImageInfo();
          if (paramBundle != null)
          {
            bool1 = TextUtils.isEmpty(mShareInfo.getShareImageInfo().productUrl);
            if (bool1)
            {
              bool1 = TextUtils.isEmpty(mShareInfo.getShareImageInfo().logoUrl);
              if (bool1)
              {
                i = 0;
                break label455;
              }
            }
            i = 1;
          }
          else
          {
            i = 0;
          }
          label455:
          paramBundle = mShareInfo.getShareImageInfo();
          if ((paramBundle != null) && (i != 0) && (j != 0)) {
            bool1 = true;
          } else {
            bool1 = false;
          }
          paramBundle = mShareInfo.getChannelsList();
          i = mAction;
          boolean bool2;
          if (i == 4) {
            bool2 = true;
          } else {
            bool2 = false;
          }
          mChannelSet = ShareUtil.packChannels(paramBundle, bool1, bool2, false);
          setShareInfo();
          i = mAction;
          if (i == 1)
          {
            i = mChannelSet.size();
            if (i == 0)
            {
              ToastUtils.showToast(thisActivity, getString(R.string.share_setting_none));
              finish();
              return;
            }
            showPanel();
          }
          else
          {
            i = mAction;
            if (i == 4)
            {
              i = mChannelSet.size();
              if (i == 0)
              {
                ToastUtils.showToast(thisActivity, getString(R.string.share_setting_none));
                finish();
                return;
              }
              showLotteryPanel();
            }
            else
            {
              i = mAction;
              if (i == 2)
              {
                i = mChannelSet.size();
                if (i != 1)
                {
                  ToastUtils.showToast(thisActivity, getString(R.string.share_setting_none));
                  finish();
                  return;
                }
                mSelectedChannel = ((Map)mChannelSet.get(0)).get("channel").toString();
                setMta("Share_SendDirect", mShareInfo.getUrl(), mSelectedChannel);
                bool1 = "QRCode".equalsIgnoreCase(mSelectedChannel);
                if (!bool1)
                {
                  paramBundle = mShareInfo.getShareImageInfo();
                  if (paramBundle != null)
                  {
                    doShareImageDirect();
                    break label765;
                  }
                }
                doShare();
              }
              else
              {
                finish();
              }
            }
          }
          label765:
          Log.d("ShareActivity", "onCreate_end");
          break label801;
        }
      }
      ToastUtils.showToast(thisActivity, getString(R.string.share_setting_none));
      finish();
      return;
    }
    catch (Throwable paramBundle)
    {
      paramBundle.printStackTrace();
      label801:
      UnStatusBarTintUtil.setStatusBarLightMode((Activity)this);
    }
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    Log.d("ShareActivity", "onDestroy");
  }
  
  protected void onNewIntent(Intent paramIntent)
  {
    try
    {
      super.onNewIntent(paramIntent);
      setIntent(paramIntent);
      WeiboUtil.getWBShareApi().handleWeiboResponse(getIntent(), this);
      return;
    }
    catch (Exception paramIntent)
    {
      paramIntent.printStackTrace();
    }
  }
  
  public void onPermissionsDenied(int paramInt, List paramList)
  {
    paramList = new StringBuilder();
    paramList.append("requestCode: ");
    paramList.append(paramInt);
    Log.d("ShareActivity", paramList.toString());
    if (paramInt == 111)
    {
      if (!ActivityCompat.shouldShowRequestPermissionRationale((Activity)this, "android.permission.READ_EXTERNAL_STORAGE")) {
        Toast.makeText((Context)this, "????????????????", 0).show();
      }
      finish();
    }
  }
  
  public void onPermissionsGranted(int paramInt, List paramList)
  {
    paramList = new StringBuilder();
    paramList.append("requestCode: ");
    paramList.append(paramInt);
    Log.d("ShareActivity", paramList.toString());
    if (paramInt == 111) {
      shareToDo();
    }
  }
  
  public void onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt)
  {
    super.onRequestPermissionsResult(paramInt, paramArrayOfString, paramArrayOfInt);
    EasyPermissions.a(paramInt, paramArrayOfString, paramArrayOfInt, new Object[] { this });
  }
  
  public void onResponse(BaseResponse paramBaseResponse)
  {
    switch (errCode)
    {
    default: 
      return;
    case 2: 
      setSharedResult(12, transaction, errMsg);
      return;
    case 1: 
      setSharedResult(13, transaction, errMsg);
      return;
    }
    setSharedResult(11, transaction, errMsg);
  }
  
  protected void onResume()
  {
    super.onResume();
    if (mLotteryXViewOpening) {
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("onResume: ");
    localStringBuilder.append(mSharedResult);
    Log.d("ShareActivity", localStringBuilder.toString());
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("onResume: ");
    localStringBuilder.append(this);
    Log.d("ShareActivity", localStringBuilder.toString());
    int i = mSharedResult;
    if ((i != 0) && ((i != 11) || (TextUtils.isEmpty(mShareInfo.getCpsUrl()))))
    {
      dealResult();
      finish();
      return;
    }
    if ((mRootView.getChildCount() == 0) && ((TextUtils.isEmpty(mSelectedChannel)) || (System.currentTimeMillis() > mDoShareMillis + 5000L)))
    {
      finish();
      return;
    }
    if ((!TextUtils.isEmpty(mSelectedChannel)) && (!mSelectedChannel.equals("QRCode"))) {
      finish();
    }
  }
  
  public void onStop()
  {
    super.onStop();
    Log.d("ShareActivity", "onStop");
  }
  
  public void post(Runnable paramRunnable)
  {
    if (!isFinishing()) {
      handler.post(paramRunnable);
    }
  }
  
  public void post(Runnable paramRunnable, int paramInt)
  {
    if (!isFinishing()) {
      handler.postDelayed(paramRunnable, paramInt);
    }
  }
  
  public void setSharedResult(int paramInt, String paramString1, String paramString2)
  {
    mSharedResult = paramInt;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("setSharedResult: ");
    localStringBuilder.append(mSharedResult);
    Log.d("ShareActivity", localStringBuilder.toString());
    mSharedMsg = paramString2;
    splitTransaction(paramString1);
    setResultMta();
  }
  
  public int statusBarHint()
  {
    return 1;
  }
  
  public boolean statusBarTransparentEnable()
  {
    return false;
  }
}
