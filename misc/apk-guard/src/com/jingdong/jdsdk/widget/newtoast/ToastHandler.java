package com.jingdong.jdsdk.widget.newtoast;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.widget.Toast;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;

final class ToastHandler
  extends Handler
{
  private static final int DELAY_TIMEOUT = 300;
  static final int LONG_DURATION_TIMEOUT = 3500;
  private static final int MAX_TOAST_CAPACITY = 3;
  static final int SHORT_DURATION_TIMEOUT = 2000;
  private static final int TYPE_CANCEL = 3;
  private static final int TYPE_CONTINUE = 2;
  private static final int TYPE_SHOW = 1;
  private volatile boolean isShow;
  private volatile Queue<CharSequence> mQueue;
  private final Toast mToast;
  
  ToastHandler(Toast paramToast)
  {
    super(Looper.getMainLooper());
    mToast = paramToast;
    mQueue = new ArrayBlockingQueue(3);
  }
  
  private static int getToastDuration(CharSequence paramCharSequence)
  {
    if (paramCharSequence.length() > 20) {
      return 3500;
    }
    return 2000;
  }
  
  void add(CharSequence paramCharSequence)
  {
    if (((mQueue.isEmpty()) || (!mQueue.contains(paramCharSequence))) && (!mQueue.offer(paramCharSequence)))
    {
      mQueue.poll();
      mQueue.offer(paramCharSequence);
    }
  }
  
  void cancel()
  {
    if (isShow)
    {
      isShow = false;
      sendEmptyMessage(3);
    }
  }
  
  public void handleMessage(Message paramMessage)
  {
    switch (what)
    {
    default: 
      return;
    case 3: 
      isShow = false;
      mQueue.clear();
      mToast.cancel();
      return;
    case 2: 
      mQueue.poll();
      if (!mQueue.isEmpty())
      {
        sendEmptyMessage(1);
        return;
      }
      break;
    case 1: 
      paramMessage = (CharSequence)mQueue.peek();
      if (paramMessage != null)
      {
        mToast.setText(paramMessage);
        mToast.show();
        sendEmptyMessageDelayed(2, getToastDuration(paramMessage) + 300);
        return;
      }
      break;
    }
    isShow = false;
  }
  
  void show()
  {
    if (!isShow)
    {
      isShow = true;
      sendEmptyMessageDelayed(1, 300L);
    }
  }
}
