package com.jingdong.app.mall.bundle.mobileConfig.asm;

import android.net.Uri;
import android.text.TextUtils;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class CharacterReference
{
  private static String decode(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    try
    {
      paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, "HmacSHA256");
      Mac localMac = Mac.getInstance("HmacSHA256");
      localMac.init(paramArrayOfByte2);
      paramArrayOfByte1 = encode(localMac.doFinal(paramArrayOfByte1));
      return paramArrayOfByte1;
    }
    catch (InvalidKeyException paramArrayOfByte1)
    {
      paramArrayOfByte1.printStackTrace();
    }
    catch (NoSuchAlgorithmException paramArrayOfByte1)
    {
      paramArrayOfByte1.printStackTrace();
    }
    return null;
  }
  
  public static String encode(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    while ((paramArrayOfByte != null) && (i < paramArrayOfByte.length))
    {
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      if (str.length() == 1) {
        localStringBuilder.append('0');
      }
      localStringBuilder.append(str);
      i += 1;
    }
    return localStringBuilder.toString().toLowerCase();
  }
  
  public static byte[] encode(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return paramString.getBytes();
  }
  
  public static String parse(String paramString1, String paramString2, String paramString3)
  {
    if (TextUtils.isEmpty(paramString1)) {
      return paramString1;
    }
    Uri localUri = Uri.parse(paramString1);
    Object localObject1 = paramString1;
    if (localUri != null)
    {
      localObject1 = localUri.getQueryParameterNames();
      Object localObject2 = new LinkedHashSet();
      ((LinkedHashSet)localObject2).addAll((Collection)localObject1);
      if ((!TextUtils.equals("{}", paramString2)) && (!((Set)localObject1).contains("body"))) {
        ((LinkedHashSet)localObject2).add("body");
      }
      localObject1 = paramString1;
      if (((LinkedHashSet)localObject2).size() > 0)
      {
        localObject1 = new TreeSet();
        localObject2 = ((LinkedHashSet)localObject2).iterator();
        while (((Iterator)localObject2).hasNext()) {
          ((TreeSet)localObject1).add((String)((Iterator)localObject2).next());
        }
        StringBuffer localStringBuffer = new StringBuffer();
        Iterator localIterator = ((TreeSet)localObject1).iterator();
        while (localIterator.hasNext())
        {
          String str2 = localIterator.next().toString();
          String str1 = localUri.getQueryParameter(str2);
          localObject1 = str1;
          localObject2 = localObject1;
          if (TextUtils.equals(str2, "body"))
          {
            localObject2 = localObject1;
            if (TextUtils.isEmpty(str1))
            {
              localObject2 = localObject1;
              if (!TextUtils.isEmpty(paramString2))
              {
                localObject2 = localObject1;
                if (!TextUtils.equals("{}", paramString2)) {
                  localObject2 = paramString2;
                }
              }
            }
          }
          if (!TextUtils.isEmpty((CharSequence)localObject2))
          {
            localStringBuffer.append((String)localObject2);
            localStringBuffer.append("&");
          }
        }
        localObject2 = localStringBuffer.toString();
        paramString2 = (String)localObject2;
        localObject1 = paramString2;
        if (((String)localObject2).endsWith("&"))
        {
          localObject1 = paramString2;
          if (((String)localObject2).length() > 1) {
            localObject1 = ((String)localObject2).substring(0, ((String)localObject2).length() - 1);
          }
        }
        paramString2 = decode(encode((String)localObject1), encode(paramString3));
        paramString3 = new StringBuilder();
        paramString3.append(paramString1);
        paramString3.append(String.format("&sign=%s", new Object[] { paramString2 }));
        localObject1 = paramString3.toString();
      }
    }
    return localObject1;
  }
}
