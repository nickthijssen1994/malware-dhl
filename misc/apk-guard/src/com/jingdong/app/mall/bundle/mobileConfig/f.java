package com.jingdong.app.mall.bundle.mobileConfig;

import android.app.Application;
import android.os.Build.VERSION;
import android.os.Handler;
import android.text.TextUtils;
import com.jingdong.app.mall.bundle.mobileConfig.asm.Attribute;
import com.jingdong.app.mall.bundle.mobileConfig.asm.e;
import com.jingdong.app.mall.bundle.mobileConfig.external.ConfigRequestParams;
import com.jingdong.app.mall.bundle.mobileConfig.external.IConfigFetcher;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;
import org.json.JSONObject;

public class f
{
  private static f INSTANCE;
  private static String TAG;
  private static String appName;
  private static e k = new e();
  private static String uid;
  private String A;
  private String a = "http://";
  private boolean b = false;
  private String c;
  private String d;
  private String e;
  boolean g = true;
  private Handler h;
  private IConfigFetcher i;
  private boolean l = false;
  private Map<String, Map<String, Map<String, String>>> m;
  private JDMobileConfig.IUserIdCallBack n;
  private String p;
  private CopyOnWriteArrayList<JDMoblieConfigListener> q = new CopyOnWriteArrayList();
  private int r;
  private String s;
  private Application this$0;
  private JDMobileConfig.IUUIDCallBack w;
  private String x;
  private String y;
  
  private f() {}
  
  private void a(JSONObject paramJSONObject)
  {
    Log.d("fetch data success");
    if (paramJSONObject == null)
    {
      Log.d("data is null!");
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("data:");
    localStringBuilder.append(paramJSONObject.toString());
    Log.d(localStringBuilder.toString());
    paramJSONObject = doInBackground(paramJSONObject);
    if (paramJSONObject != null)
    {
      m = paramJSONObject;
      boolean bool = Attribute.save(m);
      paramJSONObject = new StringBuilder();
      paramJSONObject.append("persistObject:");
      paramJSONObject.append(bool);
      Log.d(paramJSONObject.toString());
      h.post(new MonthByWeekFragment.2(this));
    }
  }
  
  private Map doInBackground(JSONObject paramJSONObject)
  {
    HashMap localHashMap1 = new HashMap();
    try
    {
      Iterator localIterator1 = paramJSONObject.keys();
      for (;;)
      {
        boolean bool = localIterator1.hasNext();
        if (!bool) {
          break;
        }
        Object localObject1 = localIterator1.next();
        localObject1 = (String)localObject1;
        Object localObject2 = paramJSONObject.getJSONObject((String)localObject1);
        HashMap localHashMap2 = new HashMap();
        if (localObject2 != null)
        {
          Iterator localIterator2 = ((JSONObject)localObject2).keys();
          for (;;)
          {
            bool = localIterator2.hasNext();
            if (!bool) {
              break;
            }
            Object localObject3 = localIterator2.next();
            localObject3 = (String)localObject3;
            JSONObject localJSONObject = ((JSONObject)localObject2).getJSONObject((String)localObject3);
            if (localJSONObject != null)
            {
              Iterator localIterator3 = localJSONObject.keys();
              HashMap localHashMap3 = new HashMap();
              for (;;)
              {
                bool = localIterator3.hasNext();
                if (!bool) {
                  break;
                }
                Object localObject4 = localIterator3.next();
                localObject4 = (String)localObject4;
                localHashMap3.put(localObject4, localJSONObject.optString((String)localObject4));
              }
              localHashMap2.put(localObject3, localHashMap3);
            }
          }
        }
        localHashMap1.put(localObject1, localHashMap2);
        localObject2 = TAG;
        android.util.Log.d((String)localObject2, (String)localObject1);
      }
      Log.d("jsonToMap success!");
      return localHashMap1;
    }
    catch (Exception paramJSONObject)
    {
      paramJSONObject.printStackTrace();
      Log.e("jsonToMap error!");
    }
    return null;
  }
  
  public static f get()
  {
    if (INSTANCE == null) {
      try
      {
        if (INSTANCE == null) {
          INSTANCE = new f();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return INSTANCE;
  }
  
  public String a(long paramLong)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(get().getItem());
    localStringBuilder.append(get().d());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.build());
    localStringBuilder.append(get().getWidth());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.a());
    localStringBuilder.append(paramLong);
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.clear());
    localStringBuilder.append(get().b());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.encode());
    localStringBuilder.append(get().e());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.f());
    localStringBuilder.append(get().m());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.getDescriptor());
    localStringBuilder.append(Build.VERSION.RELEASE);
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.h());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.c());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.d());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.getName());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.getResources());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.evaluate());
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.process());
    localStringBuilder.append(get().getName());
    localStringBuilder.append("\",\"");
    localStringBuilder.append(com.jingdong.app.mall.bundle.mobileConfig.asm.f.close());
    localStringBuilder.append("\":\"");
    localStringBuilder.append(get().c());
    localStringBuilder.append("\"}");
    return localStringBuilder.toString();
  }
  
  public boolean a()
  {
    if (k.a())
    {
      if (i == null)
      {
        Log.e("network fetcher is null, may not init yet, return!!");
        return false;
      }
      ConfigRequestParams localConfigRequestParams = new ConfigRequestParams(getName(), c());
      gatewayAppid = getWidth();
      gatewaySecKey = getParent();
      i.fetch(localConfigRequestParams, new NowPlayingFragment.9(this));
      return true;
    }
    return false;
  }
  
  public Map add(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString1))
    {
      Log.e("namespace is empty!");
      return null;
    }
    if (TextUtils.isEmpty(paramString2))
    {
      Log.e("configName is empty!");
      return null;
    }
    Map localMap = m;
    if (localMap == null)
    {
      Log.d("restored map is null");
      return null;
    }
    localMap = (Map)localMap.get(paramString1);
    if (localMap == null)
    {
      paramString2 = new StringBuilder();
      paramString2.append("no namespace found:");
      paramString2.append(paramString1);
      Log.d(paramString2.toString());
      return null;
    }
    paramString1 = (Map)localMap.get(paramString2);
    if (paramString1 == null)
    {
      paramString1 = new StringBuilder();
      paramString1.append("no configName found:");
      paramString1.append(paramString2);
      Log.d(paramString1.toString());
      return null;
    }
    return paramString1;
  }
  
  public void add(JDMoblieConfigListener paramJDMoblieConfigListener)
  {
    CopyOnWriteArrayList localCopyOnWriteArrayList = q;
    try
    {
      q.add(paramJDMoblieConfigListener);
      return;
    }
    catch (Throwable paramJDMoblieConfigListener)
    {
      throw paramJDMoblieConfigListener;
    }
  }
  
  public String b()
  {
    return p;
  }
  
  void b(String paramString)
  {
    e = paramString;
  }
  
  public String c()
  {
    JDMobileConfig.IUserIdCallBack localIUserIdCallBack = n;
    if (localIUserIdCallBack != null) {
      return localIUserIdCallBack.userId();
    }
    if (!TextUtils.isEmpty(c)) {
      return c;
    }
    return "";
  }
  
  void c(String paramString)
  {
    c = paramString;
  }
  
  public void clear()
  {
    if (!g)
    {
      Log.e("useLocalCache=false, so not restore local cache!");
      return;
    }
    try
    {
      Object localObject = Attribute.read();
      m = ((Map)localObject);
      Log.d("restoreConfig success");
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void clear(JDMoblieConfigListener paramJDMoblieConfigListener)
  {
    CopyOnWriteArrayList localCopyOnWriteArrayList = q;
    try
    {
      q.remove(paramJDMoblieConfigListener);
      return;
    }
    catch (Throwable paramJDMoblieConfigListener)
    {
      throw paramJDMoblieConfigListener;
    }
  }
  
  public String d()
  {
    return A;
  }
  
  public String e()
  {
    JDMobileConfig.IUUIDCallBack localIUUIDCallBack = w;
    if (localIUUIDCallBack != null) {
      return localIUUIDCallBack.uuid();
    }
    if (!TextUtils.isEmpty(e)) {
      return e;
    }
    if (!TextUtils.isEmpty(d)) {
      return d;
    }
    return "";
  }
  
  public Map f()
  {
    return m;
  }
  
  boolean g()
  {
    return b;
  }
  
  public String get(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    if (TextUtils.isEmpty(paramString1))
    {
      Log.e("namespace is empty!");
      return paramString4;
    }
    if (TextUtils.isEmpty(paramString2))
    {
      Log.e("configName is empty!");
      return paramString4;
    }
    if (TextUtils.isEmpty(paramString3))
    {
      Log.e("key is empty!");
      return paramString4;
    }
    if (m == null)
    {
      Log.d("restored map is null");
      return paramString4;
    }
    paramString1 = add(paramString1, paramString2);
    if (paramString1 == null)
    {
      paramString1 = new StringBuilder();
      paramString1.append("no configName found:");
      paramString1.append(paramString2);
      Log.d(paramString1.toString());
      return paramString4;
    }
    paramString1 = (String)paramString1.get(paramString3);
    if (paramString1 != null) {
      return paramString1;
    }
    return paramString4;
  }
  
  public Application getContext()
  {
    return this$0;
  }
  
  public String getItem()
  {
    return a;
  }
  
  public String getName()
  {
    return s;
  }
  
  public String getParent()
  {
    return y;
  }
  
  public String getWidth()
  {
    return x;
  }
  
  public int m()
  {
    return r;
  }
  
  void onCreate(JDMobileConfig.Builder paramBuilder)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a12 = a11\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
}
