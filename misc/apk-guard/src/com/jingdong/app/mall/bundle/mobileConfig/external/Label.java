package com.jingdong.app.mall.bundle.mobileConfig.external;

import android.text.TextUtils;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import com.jingdong.app.mall.bundle.mobileConfig.Log;
import com.jingdong.app.mall.bundle.mobileConfig.asm.CharacterReference;
import com.jingdong.app.mall.bundle.mobileConfig.f;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.json.JSONObject;

public class Label
  implements IConfigFetcher
{
  ExecutorService e;
  
  public Label() {}
  
  private ExecutorService b()
  {
    try
    {
      if (e == null) {
        e = Executors.newSingleThreadExecutor(new ConfigurablePriorityThreadFactory(this));
      }
      ExecutorService localExecutorService = e;
      return localExecutorService;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private String parse(long paramLong)
  {
    return CharacterReference.parse(f.get().a(paramLong), "", f.get().getParent());
  }
  
  void doInBackground(IConfigFetcherCallBack paramIConfigFetcherCallBack)
  {
    Log.d("start request data");
    StringBuilder localStringBuilder1 = new StringBuilder();
    Object localObject4 = null;
    Object localObject1 = null;
    Object localObject2 = localObject1;
    Object localObject3 = localObject4;
    for (;;)
    {
      try
      {
        String str = parse(System.currentTimeMillis());
        localObject2 = localObject1;
        localObject3 = localObject4;
        StringBuilder localStringBuilder2 = new StringBuilder();
        localObject2 = localObject1;
        localObject3 = localObject4;
        localStringBuilder2.append("request url:");
        localObject2 = localObject1;
        localObject3 = localObject4;
        localStringBuilder2.append(str);
        localObject2 = localObject1;
        localObject3 = localObject4;
        Log.d(localStringBuilder2.toString());
        localObject2 = localObject1;
        localObject3 = localObject4;
        localObject4 = ShooterUrlConnectionInstrumentation.openConnection(new URL(str).openConnection());
        localObject2 = localObject1;
        localObject3 = (HttpURLConnection)localObject4;
        try
        {
          ((HttpURLConnection)localObject3).setConnectTimeout(10000);
          ((HttpURLConnection)localObject3).setReadTimeout(15000);
          localObject2 = ((HttpURLConnection)localObject3).getHeaderFields();
          localObject1 = localObject3;
          if (localObject2 != null)
          {
            bool = ((Map)localObject2).containsKey("X-API-Sign-Message");
            localObject1 = localObject3;
            if (bool)
            {
              localObject1 = ((Map)localObject2).get("X-API-Sign-Message");
              localObject4 = (List)localObject1;
              localObject1 = localObject3;
              if (localObject4 != null)
              {
                bool = ((List)localObject4).contains("stale");
                localObject1 = localObject3;
                if (bool) {
                  Log.d("X-API-Sign-Message?stale, retry...");
                }
              }
            }
          }
        }
        catch (Throwable paramIConfigFetcherCallBack)
        {
          boolean bool;
          long l;
          localObject2 = localObject3;
        }
        catch (Exception localException1)
        {
          localObject1 = localObject3;
        }
      }
      catch (Throwable paramIConfigFetcherCallBack) {}catch (Exception localException2)
      {
        localObject1 = localObject3;
      }
      try
      {
        localObject2 = (String)((List)((Map)localObject2).get("X-API-Sign-Millis")).get(0);
        bool = TextUtils.isEmpty((CharSequence)localObject2);
        localObject1 = localObject3;
        if (bool) {
          continue;
        }
        l = Long.parseLong((String)localObject2);
        ((HttpURLConnection)localObject3).disconnect();
        Log.d("X-API-Sign-Message?stale, reconnection...");
        localObject1 = parse(l);
        localObject1 = (HttpURLConnection)ShooterUrlConnectionInstrumentation.openConnection(new URL((String)localObject1).openConnection());
      }
      catch (Throwable localThrowable) {}
    }
    Log.d("X-API-Sign-Message?stale, retry failed!!");
    localObject1 = localObject3;
    localObject2 = localObject1;
    localObject3 = localObject1;
    localObject4 = new BufferedInputStream(((HttpURLConnection)localObject1).getInputStream());
    localObject2 = localObject1;
    localObject3 = localObject1;
    localObject4 = new BufferedReader(new InputStreamReader((InputStream)localObject4));
    for (;;)
    {
      localObject2 = localObject1;
      localObject3 = localObject1;
      str = ((BufferedReader)localObject4).readLine();
      if (str == null) {
        break;
      }
      localObject2 = localObject1;
      localObject3 = localObject1;
      localStringBuilder1.append(str);
    }
    localObject2 = localObject1;
    localObject3 = localObject1;
    localObject4 = new StringBuilder();
    localObject2 = localObject1;
    localObject3 = localObject1;
    ((StringBuilder)localObject4).append("reponse data:");
    localObject2 = localObject1;
    localObject3 = localObject1;
    ((StringBuilder)localObject4).append(localStringBuilder1);
    localObject2 = localObject1;
    localObject3 = localObject1;
    Log.d(((StringBuilder)localObject4).toString());
    localObject2 = localObject1;
    localObject3 = localObject1;
    localObject4 = new JSONObject(localStringBuilder1.toString()).getJSONObject("data");
    if (paramIConfigFetcherCallBack != null)
    {
      localObject2 = localObject1;
      localObject3 = localObject1;
      paramIConfigFetcherCallBack.onSuccess((JSONObject)localObject4);
    }
    if (localObject1 != null)
    {
      break label606;
      localObject2 = localObject1;
      ((Exception)localException2).printStackTrace();
      if (paramIConfigFetcherCallBack != null)
      {
        localObject2 = localObject1;
        paramIConfigFetcherCallBack.onError((Exception)localException2);
      }
      if (localObject1 != null)
      {
        label606:
        ((HttpURLConnection)localObject1).disconnect();
        return;
        if (localObject2 != null) {
          ((HttpURLConnection)localObject2).disconnect();
        }
        throw paramIConfigFetcherCallBack;
      }
    }
  }
  
  public void fetch(ConfigRequestParams paramConfigRequestParams, IConfigFetcherCallBack paramIConfigFetcherCallBack)
  {
    try
    {
      b().execute(new Downloader(this, paramIConfigFetcherCallBack));
      return;
    }
    catch (Throwable paramConfigRequestParams)
    {
      paramConfigRequestParams.printStackTrace();
      if (paramIConfigFetcherCallBack != null) {
        paramIConfigFetcherCallBack.onError(new RuntimeException(paramConfigRequestParams));
      }
    }
  }
}
