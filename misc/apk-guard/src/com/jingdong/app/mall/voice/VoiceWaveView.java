package com.jingdong.app.mall.voice;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.util.AttributeSet;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import androidx.lifecycle.Lifecycle;
import androidx.lifecycle.LifecycleObserver;
import androidx.lifecycle.LifecycleOwner;
import com.jingdong.sdk.platform.lib.R.styleable;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class VoiceWaveView
  extends SurfaceView
  implements SurfaceHolder.Callback, LifecycleObserver
{
  private float centerY;
  private ScheduledExecutorService executorService = null;
  private int lineAlpha;
  private int lineColor;
  private float lineWidth;
  private double offsetSpace = 0.1D;
  private double offsetX = 1.0D;
  private Paint paint;
  private float sinPeriod = 1.0F;
  private double sinRange = 80.0D;
  private boolean surfaceAlive = false;
  private int taskPeriod = 10;
  private int viewWidth;
  
  public VoiceWaveView(Context paramContext)
  {
    super(paramContext);
    lineColor = -1;
    lineWidth = 2.0F;
    lineAlpha = 255;
    sinRange = 10.0D;
    sinPeriod = 10.0F;
    offsetSpace = 0.10000000149011612D;
    taskPeriod = 10;
    initConfig(paramContext);
  }
  
  public VoiceWaveView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    if (paramAttributeSet != null)
    {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.VoiceWaveView);
      if (paramAttributeSet != null)
      {
        lineColor = paramAttributeSet.getColor(R.styleable.VoiceWaveView_line_color_v, -1);
        lineWidth = paramAttributeSet.getDimension(R.styleable.VoiceWaveView_line_width_v, 2.0F);
        lineAlpha = paramAttributeSet.getInt(R.styleable.VoiceWaveView_line_alpha_v, 255);
        sinRange = paramAttributeSet.getInt(R.styleable.VoiceWaveView_range_v, 10);
        sinPeriod = paramAttributeSet.getFloat(R.styleable.VoiceWaveView_period_sin_v, 10.0F);
        offsetSpace = paramAttributeSet.getFloat(R.styleable.VoiceWaveView_period_x_v, 0.1F);
        taskPeriod = paramAttributeSet.getInt(R.styleable.VoiceWaveView_period_task_v, 10);
        paramAttributeSet.recycle();
      }
    }
    initConfig(paramContext);
  }
  
  private double degreeToRad(double paramDouble)
  {
    return paramDouble * 3.141592653589793D / 180.0D;
  }
  
  private Runnable getWaveTask()
  {
    return (Runnable)new VoiceWaveView.2(this);
  }
  
  private void initConfig(Context paramContext)
  {
    if ((paramContext instanceof LifecycleOwner)) {
      ((LifecycleOwner)paramContext).getLifecycle().addObserver(this);
    }
    getHolder().addCallback(this);
    setZOrderOnTop(true);
    getHolder().setFormat(-3);
  }
  
  public void setRange(double paramDouble)
  {
    double d = lineWidth / 2.0F;
    Double.isNaN(d);
    sinRange = (paramDouble - d);
    Object localObject = executorService;
    int i;
    if ((localObject != null) && (!((ScheduledExecutorService)localObject).isShutdown())) {
      i = 0;
    } else {
      i = 1;
    }
    if ((surfaceAlive) && (i != 0)) {
      try
      {
        localObject = new VoiceWaveView.3(this);
        localObject = (RejectedExecutionHandler)localObject;
        localObject = new ScheduledThreadPoolExecutor(1, (RejectedExecutionHandler)localObject);
        executorService = ((ScheduledExecutorService)localObject);
        localObject = executorService;
        Runnable localRunnable = getWaveTask();
        long l = taskPeriod;
        TimeUnit localTimeUnit = TimeUnit.MILLISECONDS;
        ((ScheduledExecutorService)localObject).scheduleWithFixedDelay(localRunnable, 10L, l, localTimeUnit);
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public void stopVoiceWave()
  {
    sinRange = 0.0D;
    Object localObject = executorService;
    try
    {
      ((ScheduledExecutorService)localObject).shutdown();
      if (surfaceAlive)
      {
        localObject = getHolder().lockCanvas();
        PorterDuff.Mode localMode = PorterDuff.Mode.CLEAR;
        ((Canvas)localObject).drawColor(0, localMode);
        getHolder().unlockCanvasAndPost((Canvas)localObject);
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3) {}
  
  public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
  {
    surfaceAlive = true;
    if (paint == null)
    {
      paint = new Paint();
      paint.setColor(lineColor);
      paint.setStrokeWidth(lineWidth);
      paint.setAlpha(lineAlpha);
      paint.setAntiAlias(true);
    }
    viewWidth = getWidth();
    centerY = (getHeight() / 2.0F);
    if (executorService == null) {
      try
      {
        paramSurfaceHolder = new VoiceWaveView.1(this);
        paramSurfaceHolder = (RejectedExecutionHandler)paramSurfaceHolder;
        paramSurfaceHolder = new ScheduledThreadPoolExecutor(1, paramSurfaceHolder);
        executorService = paramSurfaceHolder;
        paramSurfaceHolder = executorService;
        Runnable localRunnable = getWaveTask();
        long l = taskPeriod;
        TimeUnit localTimeUnit = TimeUnit.MILLISECONDS;
        paramSurfaceHolder.scheduleWithFixedDelay(localRunnable, 10L, l, localTimeUnit);
        return;
      }
      catch (Exception paramSurfaceHolder)
      {
        paramSurfaceHolder.printStackTrace();
      }
    }
  }
  
  public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
  {
    surfaceAlive = false;
  }
}
