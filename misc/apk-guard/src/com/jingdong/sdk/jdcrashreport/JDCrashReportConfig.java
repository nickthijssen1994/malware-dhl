package com.jingdong.sdk.jdcrashreport;

import android.content.Context;
import android.os.SystemClock;
import android.text.TextUtils;
import com.jingdong.sdk.jdcrashreport.a.b;
import com.jingdong.sdk.jdcrashreport.recover.RecoverView;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

public class JDCrashReportConfig
  implements Serializable
{
  private transient JDCrashReportConfig.RecoverInfo b;
  private String board = "";
  private boolean c = false;
  private transient Context context;
  private transient RecoverView d;
  private ArrayList<Pattern> data = null;
  private boolean e = false;
  private boolean i = false;
  private long l = 60000L;
  private String mAppVersion;
  private int mIconId;
  private boolean mIsAnimating = true;
  private long mLastTime;
  private long mStartTime;
  private boolean o = true;
  private String password = "";
  private String priority = "";
  private ArrayList<String> r = new ArrayList();
  private String userId = "";
  private String userName = "";
  
  private JDCrashReportConfig() {}
  
  private JDCrashReportConfig(Builder paramBuilder)
  {
    context = c;
    Object localObject;
    if (TextUtils.isEmpty(d)) {
      localObject = "";
    } else {
      localObject = d;
    }
    priority = ((String)localObject);
    if (TextUtils.isEmpty(versionName)) {
      localObject = b.d(context);
    } else {
      localObject = versionName;
    }
    mAppVersion = ((String)localObject);
    int j;
    if (id == -1) {
      j = b.e(context);
    } else {
      j = id;
    }
    mIconId = j;
    mLastTime = SystemClock.elapsedRealtime();
    mStartTime = SystemClock.uptimeMillis();
    mIsAnimating = storage;
    o = client;
    data = new ArrayList();
    try
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(context.getPackageName());
      ((StringBuilder)localObject).append("\\S+");
      localObject = Pattern.compile(((StringBuilder)localObject).toString(), 66);
      ArrayList localArrayList = data;
      if (localArrayList != null) {
        data.addAll(data);
      }
      data.add(localObject);
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    board = name;
    password = password;
    userId = userId;
    userName = userName;
    l = l;
    c = a;
    d = op;
    b = b;
    r.addAll(r);
  }
  
  JDCrashReportConfig.RecoverInfo.Callback a()
  {
    JDCrashReportConfig.RecoverInfo localRecoverInfo = b;
    if (localRecoverInfo != null) {
      return JDCrashReportConfig.RecoverInfo.b(localRecoverInfo);
    }
    return null;
  }
  
  void a(Class paramClass)
  {
    if (paramClass == null) {
      return;
    }
    if (JDCrashReportConfig.RecoverInfo.c(b).contains(paramClass)) {
      return;
    }
    JDCrashReportConfig.RecoverInfo.c(b).add(paramClass);
  }
  
  List b()
  {
    JDCrashReportConfig.RecoverInfo localRecoverInfo = b;
    if (localRecoverInfo != null) {
      return JDCrashReportConfig.RecoverInfo.c(localRecoverInfo);
    }
    return new ArrayList();
  }
  
  boolean c()
  {
    return i;
  }
  
  Context context()
  {
    return context;
  }
  
  void d(boolean paramBoolean)
  {
    i = paramBoolean;
  }
  
  String elementAt()
  {
    return board;
  }
  
  String getAppVersion()
  {
    return mAppVersion;
  }
  
  RecoverView getD()
  {
    return d;
  }
  
  public String getDeviceUniqueId()
  {
    return password;
  }
  
  int getIconId()
  {
    return mIconId;
  }
  
  String getPriority()
  {
    return priority;
  }
  
  long getSize()
  {
    return l;
  }
  
  long getStartTime()
  {
    return mStartTime;
  }
  
  List getSubItems()
  {
    return data;
  }
  
  Class getSubMenu()
  {
    JDCrashReportConfig.RecoverInfo localRecoverInfo = b;
    if (localRecoverInfo != null) {
      return JDCrashReportConfig.RecoverInfo.a(localRecoverInfo);
    }
    return null;
  }
  
  long getTime()
  {
    return mLastTime;
  }
  
  public String getUserId()
  {
    return userId;
  }
  
  public String getUts()
  {
    return userName;
  }
  
  boolean getWrapSelectorWheel()
  {
    return c;
  }
  
  boolean isAnimating()
  {
    return mIsAnimating;
  }
  
  boolean isDrawOutlineShadowsEnabled()
  {
    return e;
  }
  
  ArrayList m()
  {
    return r;
  }
  
  void next(boolean paramBoolean)
  {
    e = paramBoolean;
  }
  
  public void setApplicationContext(Context paramContext)
  {
    context = paramContext;
  }
  
  void setEntry(String paramString)
  {
    userName = paramString;
  }
  
  void setPassphrase(String paramString)
  {
    password = paramString;
  }
  
  void setUserid(String paramString)
  {
    userId = paramString;
  }
  
  boolean showsIcon()
  {
    return o;
  }
  
  public static class Builder
  {
    boolean a = false;
    JDCrashReportConfig.RecoverInfo b = new JDCrashReportConfig.RecoverInfo(null);
    Context c;
    boolean client = true;
    String d;
    ArrayList<Pattern> data;
    int id = -1;
    long l = 60000L;
    String name = "";
    RecoverView op;
    String password = "";
    ArrayList<String> r = new ArrayList();
    boolean storage = true;
    String userId = "";
    String userName = "";
    String versionName;
    
    public Builder() {}
    
    public Builder addFilters(String... paramVarArgs)
    {
      if (data == null) {
        data = new ArrayList();
      }
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        String str = paramVarArgs[i];
        data.add(Pattern.compile(str, 66));
        i += 1;
      }
      return this;
    }
    
    public JDCrashReportConfig build()
    {
      return new JDCrashReportConfig(this, null);
    }
    
    public Builder enableRecover(boolean paramBoolean)
    {
      a = paramBoolean;
      return this;
    }
    
    public Builder setAppId(String paramString)
    {
      if (!TextUtils.isEmpty(paramString))
      {
        name = paramString;
        return this;
      }
      throw new IllegalArgumentException("appId must not be empty");
    }
    
    public Builder setContext(Context paramContext)
    {
      if (paramContext != null)
      {
        c = b.c(paramContext);
        return this;
      }
      throw new IllegalArgumentException("JDCrashReport Given context is null");
    }
    
    public Builder setCustomRecoverView(RecoverView paramRecoverView)
    {
      op = paramRecoverView;
      return this;
    }
    
    public Builder setDeviceUniqueId(String paramString)
    {
      String str = paramString;
      if (TextUtils.isEmpty(paramString)) {
        str = "";
      }
      password = str;
      return this;
    }
    
    public Builder setEnableAnr(boolean paramBoolean)
    {
      storage = paramBoolean;
      return this;
    }
    
    public Builder setEnableNative(boolean paramBoolean)
    {
      client = paramBoolean;
      return this;
    }
    
    public Builder setPartner(String paramString)
    {
      d = paramString;
      return this;
    }
    
    public Builder setRecoverIgnoreExceptions(String[] paramArrayOfString)
    {
      r.clear();
      if (paramArrayOfString != null) {
        r.addAll(Arrays.asList(paramArrayOfString));
      }
      return this;
    }
    
    public Builder setRecoverInfo(JDCrashReportConfig.RecoverInfo paramRecoverInfo)
    {
      b = paramRecoverInfo;
      return this;
    }
    
    public Builder setReportDelay(int paramInt)
    {
      l = (paramInt * 1000);
      return this;
    }
    
    public Builder setUserId(String paramString)
    {
      String str = paramString;
      if (TextUtils.isEmpty(paramString)) {
        str = "";
      }
      userId = str;
      return this;
    }
    
    public Builder setUts(String paramString)
    {
      userName = paramString;
      return this;
    }
    
    public Builder setVersionCode(int paramInt)
    {
      id = paramInt;
      return this;
    }
    
    public Builder setVersionName(String paramString)
    {
      versionName = paramString;
      return this;
    }
  }
}
