package com.jingdong.sdk.lib.settlement.entity;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONArray;
import com.jd.framework.json.JDJSONObject;
import com.jd.framework.json.anotation.JSONField;
import com.jingdong.common.entity.settlement.AddressOverSea;
import com.jingdong.common.entity.settlement.AddressTagInfo;
import com.jingdong.common.utils.AddressUtil;
import com.jingdong.jdsdk.JdSdk;
import com.jingdong.jdsdk.utils.JSONArrayPoxy;
import com.jingdong.jdsdk.utils.JSONObjectProxy;
import com.jingdong.sdk.lib.settlement.R.string;
import com.jingdong.sdk.lib.settlement.entity.address.AddressBottomTagMap;
import com.jingdong.sdk.oklog.OKLog;
import java.io.Serializable;
import java.util.ArrayList;
import org.json.JSONObject;

public class NewEasyBuyAddress
  extends UserInfoCommon
  implements Serializable
{
  public static final Parcelable.Creator<NewEasyBuyAddress> CREATOR = (Parcelable.Creator)new NewEasyBuyAddress.1();
  private static final String PAGE_KEY = "NewEasyBuyAddress";
  public static final int PAYMENT_ID_OFF_LINE = 1;
  public static final int PAYMENT_ID_ON_LINE = 4;
  public static final int PAYMENT_ID_PICK = 200;
  public static final int PAYMENT_ID_PICK_3 = 3;
  public static final int PAYMENT_ID_POST = 2;
  private static final long serialVersionUID = 4420986013539080710L;
  public AddressBottomTagMap addressBottomTagMap;
  public String addressDetail;
  public String addressName;
  public AddressTagInfo addressTagMap;
  public String areaName;
  public Integer cityId;
  public String cityName;
  public int coord_type;
  public Integer countyId;
  public String countyName;
  public String email;
  public String fullAddress;
  public boolean isAreaWrong;
  @JSONField(name="addressDefault")
  public Boolean isDefaultAddr;
  @JSONField(name="defaultFirst")
  public Boolean isDefaultFirst;
  @JSONField(name="easyBuy")
  public Boolean isEasyBuy;
  @JSONField(name="isIdTown")
  public boolean isNoIdTown;
  public boolean isOperationVisible;
  public double latitude;
  public double longitude;
  public Long mId;
  public String mobile;
  public String mobileReal;
  public String name;
  public Integer paymentId;
  public String phone;
  public Integer pickId;
  public String pickName;
  public Integer provinceId;
  public Integer townId;
  public String townName;
  
  public NewEasyBuyAddress() {}
  
  protected NewEasyBuyAddress(Parcel paramParcel)
  {
    super(paramParcel);
    mId = ((Long)paramParcel.readValue(Long.class.getClassLoader()));
    isEasyBuy = ((Boolean)paramParcel.readValue(Boolean.class.getClassLoader()));
    isDefaultFirst = ((Boolean)paramParcel.readValue(Boolean.class.getClassLoader()));
    name = paramParcel.readString();
    addressName = paramParcel.readString();
    provinceId = ((Integer)paramParcel.readValue(Integer.class.getClassLoader()));
    cityId = ((Integer)paramParcel.readValue(Integer.class.getClassLoader()));
    countyId = ((Integer)paramParcel.readValue(Integer.class.getClassLoader()));
    townId = ((Integer)paramParcel.readValue(Integer.class.getClassLoader()));
    paymentId = ((Integer)paramParcel.readValue(Integer.class.getClassLoader()));
    pickId = ((Integer)paramParcel.readValue(Integer.class.getClassLoader()));
    pickName = paramParcel.readString();
    addressDetail = paramParcel.readString();
    fullAddress = paramParcel.readString();
    email = paramParcel.readString();
    phone = paramParcel.readString();
    mobile = paramParcel.readString();
    mobileReal = paramParcel.readString();
    isDefaultAddr = ((Boolean)paramParcel.readValue(Boolean.class.getClassLoader()));
    areaName = paramParcel.readString();
    cityName = paramParcel.readString();
    countyName = paramParcel.readString();
    townName = paramParcel.readString();
    longitude = paramParcel.readDouble();
    latitude = paramParcel.readDouble();
    coord_type = paramParcel.readInt();
    addressTagMap = ((AddressTagInfo)paramParcel.readParcelable(AddressTagInfo.class.getClassLoader()));
    addressBottomTagMap = ((AddressBottomTagMap)paramParcel.readParcelable(AddressBottomTagMap.class.getClassLoader()));
    int i = paramParcel.readByte();
    boolean bool2 = true;
    boolean bool1;
    if (i != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    isNoIdTown = bool1;
    if (paramParcel.readByte() != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    isAreaWrong = bool1;
    if (paramParcel.readByte() != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    isOperationVisible = bool1;
    if (paramParcel.readByte() != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    isForeignOverSea = bool1;
    areaCode = paramParcel.readString();
    if (paramParcel.readByte() != 0) {
      bool1 = bool2;
    } else {
      bool1 = false;
    }
    isGangAoTai = bool1;
  }
  
  public NewEasyBuyAddress(JDJSONObject paramJDJSONObject)
  {
    try
    {
      long l = paramJDJSONObject.optLong("id");
      mId = Long.valueOf(l);
      boolean bool = paramJDJSONObject.optBoolean("easyBuy");
      isEasyBuy = Boolean.valueOf(bool);
      bool = paramJDJSONObject.optBoolean("defaultFirst");
      isDefaultFirst = Boolean.valueOf(bool);
      Object localObject = paramJDJSONObject.optString("name");
      name = ((String)localObject);
      localObject = paramJDJSONObject.optString("addressName");
      addressName = ((String)localObject);
      int i = paramJDJSONObject.optInt("provinceId");
      provinceId = Integer.valueOf(i);
      i = paramJDJSONObject.optInt("cityId");
      cityId = Integer.valueOf(i);
      i = paramJDJSONObject.optInt("countyId");
      countyId = Integer.valueOf(i);
      i = paramJDJSONObject.optInt("townId");
      townId = Integer.valueOf(i);
      i = paramJDJSONObject.optInt("paymentId");
      paymentId = Integer.valueOf(i);
      i = paramJDJSONObject.optInt("pickId");
      pickId = Integer.valueOf(i);
      localObject = paramJDJSONObject.optString("pickName");
      pickName = ((String)localObject);
      localObject = paramJDJSONObject.optString("addressDetail");
      addressDetail = ((String)localObject);
      localObject = paramJDJSONObject.optString("fullAddress");
      fullAddress = ((String)localObject);
      localObject = paramJDJSONObject.optString("mobile");
      mobile = ((String)localObject);
      bool = paramJDJSONObject.optBoolean("addressDefault");
      isDefaultAddr = Boolean.valueOf(bool);
      bool = paramJDJSONObject.optBoolean("isAreaWrong");
      isAreaWrong = bool;
      bool = paramJDJSONObject.optBoolean("isIdTown");
      isNoIdTown = bool;
      bool = paramJDJSONObject.optBoolean("isOperationVisible");
      isOperationVisible = bool;
      localObject = paramJDJSONObject.optJSONObject("addressTagMap");
      if (localObject != null)
      {
        localObject = JDJSON.parseObject(((JDJSON)localObject).toString(), AddressTagInfo.class);
        addressTagMap = ((AddressTagInfo)localObject);
      }
      localObject = paramJDJSONObject.optJSONObject("addressBottomTagMap");
      if (localObject != null)
      {
        localObject = JDJSON.parseObject(((JDJSON)localObject).toString(), AddressBottomTagMap.class);
        addressBottomTagMap = ((AddressBottomTagMap)localObject);
      }
      setAreaExplainMsg(paramJDJSONObject.optString("areaExplainMsg"));
      setAreaExplainUrl(paramJDJSONObject.optString("areaExplainUrl"));
      localObject = paramJDJSONObject.optString("phone");
      phone = ((String)localObject);
      localObject = paramJDJSONObject.optString("email");
      email = ((String)localObject);
      localObject = paramJDJSONObject.optString("areaCode");
      areaCode = ((String)localObject);
      localObject = paramJDJSONObject.optString("postCode");
      postCode = ((String)localObject);
      localObject = paramJDJSONObject.optString("nameCode");
      nameCode = ((String)localObject);
      bool = paramJDJSONObject.optBoolean("isForeignOverSea");
      isForeignOverSea = bool;
      bool = paramJDJSONObject.optBoolean("isGangAoTai");
      isGangAoTai = bool;
      localObject = paramJDJSONObject.optString("latitudeString");
      latitudeString = ((String)localObject);
      paramJDJSONObject = paramJDJSONObject.optString("longitudeString");
      longitudeString = paramJDJSONObject;
      return;
    }
    catch (Exception paramJDJSONObject)
    {
      if (OKLog.i) {
        OKLog.setNode("NewEasyBuyAddress", paramJDJSONObject);
      }
    }
  }
  
  public NewEasyBuyAddress(JSONObjectProxy paramJSONObjectProxy)
  {
    try
    {
      Object localObject = paramJSONObjectProxy.getLongOrNull("id");
      mId = ((Long)localObject);
      localObject = paramJSONObjectProxy.getBooleanOrNull("easyBuy");
      isEasyBuy = ((Boolean)localObject);
      localObject = paramJSONObjectProxy.getBooleanOrNull("defaultFirst");
      isDefaultFirst = ((Boolean)localObject);
      localObject = paramJSONObjectProxy.getStringOrNull("name");
      name = ((String)localObject);
      localObject = paramJSONObjectProxy.getStringOrNull("addressName");
      addressName = ((String)localObject);
      localObject = paramJSONObjectProxy.getIntOrNull("provinceId");
      provinceId = ((Integer)localObject);
      localObject = paramJSONObjectProxy.getIntOrNull("cityId");
      cityId = ((Integer)localObject);
      localObject = paramJSONObjectProxy.getIntOrNull("countyId");
      countyId = ((Integer)localObject);
      localObject = paramJSONObjectProxy.getIntOrNull("townId");
      townId = ((Integer)localObject);
      localObject = paramJSONObjectProxy.getIntOrNull("paymentId");
      paymentId = ((Integer)localObject);
      localObject = paramJSONObjectProxy.getIntOrNull("pickId");
      pickId = ((Integer)localObject);
      localObject = paramJSONObjectProxy.getStringOrNull("pickName");
      pickName = ((String)localObject);
      localObject = paramJSONObjectProxy.getStringOrNull("addressDetail");
      addressDetail = ((String)localObject);
      localObject = paramJSONObjectProxy.getStringOrNull("fullAddress");
      fullAddress = ((String)localObject);
      localObject = paramJSONObjectProxy.getStringOrNull("mobile");
      mobile = ((String)localObject);
      boolean bool = paramJSONObjectProxy.optBoolean("addressDefault");
      isDefaultAddr = Boolean.valueOf(bool);
      bool = paramJSONObjectProxy.optBoolean("isAreaWrong");
      isAreaWrong = bool;
      bool = paramJSONObjectProxy.optBoolean("isIdTown");
      isNoIdTown = bool;
      bool = paramJSONObjectProxy.optBoolean("isOperationVisible");
      isOperationVisible = bool;
      localObject = paramJSONObjectProxy.optJSONObject("addressTagMap");
      if (localObject != null)
      {
        localObject = JDJSON.parseObject(((JSONObject)localObject).toString(), AddressTagInfo.class);
        addressTagMap = ((AddressTagInfo)localObject);
      }
      localObject = paramJSONObjectProxy.optJSONObject("addressBottomTagMap");
      if (localObject != null)
      {
        localObject = JDJSON.parseObject(((JSONObject)localObject).toString(), AddressBottomTagMap.class);
        addressBottomTagMap = ((AddressBottomTagMap)localObject);
      }
      setAreaExplainMsg(paramJSONObjectProxy.optString("areaExplainMsg"));
      setAreaExplainUrl(paramJSONObjectProxy.optString("areaExplainUrl"));
      localObject = paramJSONObjectProxy.optString("phone");
      phone = ((String)localObject);
      localObject = paramJSONObjectProxy.optString("email");
      email = ((String)localObject);
      localObject = paramJSONObjectProxy.optString("areaCode");
      areaCode = ((String)localObject);
      localObject = paramJSONObjectProxy.optString("postCode");
      postCode = ((String)localObject);
      localObject = paramJSONObjectProxy.optString("nameCode");
      nameCode = ((String)localObject);
      bool = paramJSONObjectProxy.optBoolean("isForeignOverSea");
      isForeignOverSea = bool;
      bool = paramJSONObjectProxy.optBoolean("isGangAoTai");
      isGangAoTai = bool;
      localObject = paramJSONObjectProxy.optString("latitudeString");
      latitudeString = ((String)localObject);
      paramJSONObjectProxy = paramJSONObjectProxy.optString("longitudeString");
      longitudeString = paramJSONObjectProxy;
      return;
    }
    catch (Exception paramJSONObjectProxy)
    {
      if (OKLog.i) {
        OKLog.setNode("NewEasyBuyAddress", paramJSONObjectProxy);
      }
    }
  }
  
  public static ArrayList parseList(JDJSONArray paramJDJSONArray)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramJDJSONArray == null) {
      return localArrayList;
    }
    int j = paramJDJSONArray.size();
    int i = 0;
    while (i < j)
    {
      JDJSONObject localJDJSONObject = paramJDJSONArray.optJSONObject(i);
      if (localJDJSONObject != null) {
        localArrayList.add(new NewEasyBuyAddress(localJDJSONObject));
      }
      i += 1;
    }
    return localArrayList;
  }
  
  public static String resolvePaymentName(int paramInt)
  {
    if ((paramInt != 1) && (paramInt != 200)) {
      return JdSdk.getInstance().getApplication().getString(R.string.online_payment);
    }
    return JdSdk.getInstance().getApplication().getString(R.string.cash_on_delivery);
  }
  
  public static ArrayList toList(JSONArrayPoxy paramJSONArrayPoxy)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramJSONArrayPoxy == null) {
      return localArrayList;
    }
    int i = 0;
    while (i < paramJSONArrayPoxy.length())
    {
      JSONObjectProxy localJSONObjectProxy = paramJSONArrayPoxy.getJSONObjectOrNull(i);
      if (localJSONObjectProxy != null) {
        localArrayList.add(new NewEasyBuyAddress(localJSONObjectProxy));
      }
      i += 1;
    }
    return localArrayList;
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public String getAddressDetail()
  {
    String str = addressDetail;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getAddressName()
  {
    String str = addressName;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getAreaName()
  {
    String str = areaName;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Integer getCityId()
  {
    Integer localInteger2 = cityId;
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null) {
      localInteger1 = Integer.valueOf(0);
    }
    return localInteger1;
  }
  
  public String getCityName()
  {
    String str = cityName;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Integer getCountyId()
  {
    Integer localInteger2 = countyId;
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null) {
      localInteger1 = Integer.valueOf(0);
    }
    return localInteger1;
  }
  
  public String getCountyName()
  {
    String str = countyName;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getEmail()
  {
    String str = email;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getFullAddress()
  {
    String str = fullAddress;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Long getId()
  {
    Long localLong2 = mId;
    Long localLong1 = localLong2;
    if (localLong2 == null) {
      localLong1 = Long.valueOf(0L);
    }
    return localLong1;
  }
  
  public Boolean getIsDefaultFirst()
  {
    Boolean localBoolean2 = isDefaultFirst;
    Boolean localBoolean1 = localBoolean2;
    if (localBoolean2 == null) {
      localBoolean1 = Boolean.valueOf(false);
    }
    return localBoolean1;
  }
  
  public Boolean getIsEasyBuy()
  {
    Boolean localBoolean2 = isEasyBuy;
    Boolean localBoolean1 = localBoolean2;
    if (localBoolean2 == null) {
      localBoolean1 = Boolean.valueOf(false);
    }
    return localBoolean1;
  }
  
  public String getMobile()
  {
    String str = mobile;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getName()
  {
    String str = name;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Integer getPaymentId()
  {
    Integer localInteger2 = paymentId;
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null) {
      localInteger1 = Integer.valueOf(0);
    }
    return localInteger1;
  }
  
  public String getPaymentName()
  {
    return resolvePaymentName(getPaymentId().intValue());
  }
  
  public String getPhone()
  {
    String str = phone;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Integer getPickId()
  {
    Integer localInteger2 = pickId;
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null) {
      localInteger1 = Integer.valueOf(0);
    }
    return localInteger1;
  }
  
  public String getPickName()
  {
    String str = pickName;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Integer getProvinceId()
  {
    Integer localInteger2 = provinceId;
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null) {
      localInteger1 = Integer.valueOf(0);
    }
    return localInteger1;
  }
  
  public String getShowFullAddress()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(getFullAddress());
    localStringBuilder.append(getTownName());
    localStringBuilder.append(" ");
    localStringBuilder.append(getAddressDetail());
    return localStringBuilder.toString();
  }
  
  public Integer getTownId()
  {
    Integer localInteger2 = townId;
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null) {
      localInteger1 = Integer.valueOf(0);
    }
    return localInteger1;
  }
  
  public String getTownName()
  {
    String str = townName;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public Boolean isDefaultAddr()
  {
    Boolean localBoolean2 = isDefaultAddr;
    Boolean localBoolean1 = localBoolean2;
    if (localBoolean2 == null) {
      localBoolean1 = Boolean.valueOf(false);
    }
    return localBoolean1;
  }
  
  public JSONObject toAddressJSON()
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("id", getId());
      localJSONObject.put("easyBuy", true);
      localJSONObject.put("defaultFirst", getIsDefaultFirst());
      localJSONObject.put("fullAddress", getFullAddress());
      localJSONObject.put("addressName", getAddressName());
      localJSONObject.put("name", getName());
      localJSONObject.put("provinceId", getProvinceId());
      localJSONObject.put("cityId", getCityId());
      localJSONObject.put("countyId", getCountyId());
      localJSONObject.put("townId", getTownId());
      localJSONObject.put("addressDetail", getAddressDetail());
      AddressUtil.encodeValue(localJSONObject, "mobile", getMobile());
      AddressUtil.encodeValue(localJSONObject, "phone", getPhone());
      localJSONObject.put("email", getEmail());
      localJSONObject.put("paymentId", getPaymentId());
      localJSONObject.put("pickId", getPickId());
      localJSONObject.put("pickName", getPickName());
      localJSONObject.put("addressDefault", isDefaultAddr());
      double d = longitude;
      localJSONObject.put("longitude", d);
      d = latitude;
      localJSONObject.put("latitude", d);
      int i = coord_type;
      localJSONObject.put("coord_type", i);
      if ((addressTagMap != null) && (!isForeignOverSea))
      {
        if (addressTagMap.addressTagId != 0)
        {
          i = addressTagMap.addressTagId;
          localJSONObject.put("retTag", i);
        }
        str = addressTagMap.addressTagName;
        boolean bool = TextUtils.isEmpty(str);
        if (!bool)
        {
          str = addressTagMap.addressTagName;
          localJSONObject.put("userDefinedTag", str);
        }
        i = addressTagMap.addressTagType;
        localJSONObject.put("tagSource", i);
      }
      String str = areaCode;
      localJSONObject.put("areaCode", str);
      str = postCode;
      localJSONObject.put("postCode", str);
      str = nameCode;
      localJSONObject.put("nameCode", str);
      return localJSONObject;
    }
    catch (Exception localException)
    {
      if (OKLog.i) {
        OKLog.setNode("NewEasyBuyAddress", localException);
      }
    }
    return localJSONObject;
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    super.writeToParcel(paramParcel, paramInt);
    paramParcel.writeValue(mId);
    paramParcel.writeValue(isEasyBuy);
    paramParcel.writeValue(isDefaultFirst);
    paramParcel.writeString(name);
    paramParcel.writeString(addressName);
    paramParcel.writeValue(provinceId);
    paramParcel.writeValue(cityId);
    paramParcel.writeValue(countyId);
    paramParcel.writeValue(townId);
    paramParcel.writeValue(paymentId);
    paramParcel.writeValue(pickId);
    paramParcel.writeString(pickName);
    paramParcel.writeString(addressDetail);
    paramParcel.writeString(fullAddress);
    paramParcel.writeString(email);
    paramParcel.writeString(phone);
    paramParcel.writeString(mobile);
    paramParcel.writeString(mobileReal);
    paramParcel.writeValue(isDefaultAddr);
    paramParcel.writeString(areaName);
    paramParcel.writeString(cityName);
    paramParcel.writeString(countyName);
    paramParcel.writeString(townName);
    paramParcel.writeDouble(longitude);
    paramParcel.writeDouble(latitude);
    paramParcel.writeInt(coord_type);
    paramParcel.writeParcelable((Parcelable)addressTagMap, paramInt);
    paramParcel.writeParcelable((Parcelable)addressBottomTagMap, paramInt);
    paramParcel.writeByte((byte)isNoIdTown);
    paramParcel.writeByte((byte)isAreaWrong);
    paramParcel.writeByte((byte)isOperationVisible);
    paramParcel.writeByte((byte)isForeignOverSea);
    paramParcel.writeString(areaCode);
    paramParcel.writeByte((byte)isGangAoTai);
  }
}
