package com.jingdong.sdk.lib.puppetlayout.ylayout;

import android.content.Context;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import com.getkeepsafe.relinker.b;
import com.jd.framework.json.JDJSONObject;
import com.jingdong.sdk.lib.puppetlayout.PuppetViewMannager;
import com.jingdong.sdk.lib.puppetlayout.R.id;
import com.jingdong.sdk.lib.puppetlayout.puppet.PuppetViewTree;
import com.jingdong.sdk.lib.puppetlayout.storage.NetManager;
import com.jingdong.sdk.lib.puppetlayout.storage.TemplateUtils;
import com.jingdong.sdk.lib.puppetlayout.util.MyLog;
import com.jingdong.sdk.lib.puppetlayout.ylayout.android.YogaLayout;
import com.jingdong.sdk.lib.puppetlayout.ylayout.callback.ActionCallback;
import com.jingdong.sdk.lib.puppetlayout.ylayout.callback.Callback;
import com.jingdong.sdk.lib.puppetlayout.ylayout.callback.CallbackManager;
import com.jingdong.sdk.lib.puppetlayout.ylayout.model.TemplateModel;
import java.io.StringReader;
import java.util.Set;

public class PuppetManager
{
  private static final PuppetManager ourInstance = new PuppetManager();
  public String apolloId = "";
  public String apolloSecret = "";
  public String appId = "";
  public String appName = "";
  public String auraSuffix;
  public Set<String> auraSuffixExcludeSet;
  public boolean cacheTemplates = false;
  public int cacheTemplatesCount = 20;
  public long cacheTemplatesTime = 86400000L;
  public boolean debug = false;
  private DefaultStyleListener defaultStyleListener = null;
  private int loadYLayoutState = -1;
  public String sdkClient = "plugin_android";
  public String sdkName = "style";
  public String sdkVersion = "71327c8";
  
  public PuppetManager() {}
  
  private boolean checkYlState(Context paramContext)
  {
    if (loadYLayoutState != 1) {
      try
      {
        b.a(paramContext, "c++_shared");
        b.a(paramContext, "ylayout");
        loadYLayoutState = 1;
      }
      catch (Throwable paramContext)
      {
        if (MyLog.D) {
          paramContext.printStackTrace();
        }
      }
      catch (NoClassDefFoundError paramContext)
      {
        if (MyLog.D) {
          paramContext.printStackTrace();
        }
        try
        {
          System.loadLibrary("c++_shared");
          System.loadLibrary("ylayout");
          loadYLayoutState = 1;
        }
        catch (Throwable paramContext)
        {
          if (MyLog.D) {
            paramContext.printStackTrace();
          }
        }
      }
    }
    return loadYLayoutState == 1;
  }
  
  private View createTemplateView(Context paramContext, TemplateModel paramTemplateModel, ViewGroup paramViewGroup)
  {
    if ((paramTemplateModel != null) && (!TextUtils.isEmpty(templateId))) {
      return PuppetViewMannager.getInstance().inflate(paramContext, paramViewGroup, null, paramTemplateModel, false);
    }
    return null;
  }
  
  public static PuppetManager getInstance()
  {
    return ourInstance;
  }
  
  private PuppetContext getPuppetContext(View paramView)
  {
    if (paramView == null) {
      return null;
    }
    paramView = paramView.getTag(R.id.com_jd_sdk_lib_puppetlayout_tree);
    if ((paramView != null) && ((paramView instanceof PuppetContext))) {
      return (PuppetContext)paramView;
    }
    return null;
  }
  
  public void bindViewAction(ViewGroup paramViewGroup, Callback paramCallback)
  {
    if (paramViewGroup != null)
    {
      if (paramCallback == null) {
        return;
      }
      try
      {
        paramViewGroup = paramViewGroup.getTag(R.id.com_jd_sdk_lib_puppetlayout_tree);
        if (paramViewGroup != null)
        {
          boolean bool = paramViewGroup instanceof PuppetContext;
          if (bool)
          {
            paramViewGroup = (PuppetContext)paramViewGroup;
            bool = paramCallback instanceof ActionCallback;
            if (bool)
            {
              manager.register("action", paramCallback);
              return;
            }
          }
        }
      }
      catch (Throwable paramViewGroup)
      {
        if (MyLog.D) {
          paramViewGroup.printStackTrace();
        }
      }
    }
  }
  
  public void bindViewData(View paramView, JDJSONObject paramJDJSONObject)
  {
    try
    {
      PuppetContext.bindView(paramView, paramJDJSONObject);
      return;
    }
    catch (Throwable paramView)
    {
      if (MyLog.D) {
        paramView.printStackTrace();
      }
    }
  }
  
  public void cancelCountdown(ViewGroup paramViewGroup)
  {
    if (paramViewGroup != null)
    {
      paramViewGroup = getPuppetContext(paramViewGroup);
      if (paramViewGroup != null) {
        paramViewGroup.cancelAllCountdown();
      }
    }
  }
  
  public ViewGroup createDdTemplateView(Context paramContext, String paramString, ViewGroup paramViewGroup)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString);
      if (bool) {
        return null;
      }
      bool = checkYlState(paramContext);
      if (!bool) {
        return null;
      }
      PuppetManager localPuppetManager = getInstance();
      paramString = localPuppetManager.obtainDdTemplate(paramContext, paramString);
      if (paramString == null) {
        return null;
      }
      paramContext = (ViewGroup)localPuppetManager.createTemplateView(paramContext, paramString, paramViewGroup);
      paramViewGroup = flexibleWidth;
      paramString = flexibleHeight;
      if (paramContext != null)
      {
        try
        {
          int i = R.id.com_jd_sdk_lib_puppetlayout_flexible_width;
          paramContext.setTag(i, Boolean.valueOf("1".equals(paramViewGroup)));
          i = R.id.com_jd_sdk_lib_puppetlayout_flexible_height;
          paramContext.setTag(i, Boolean.valueOf("1".equals(paramString)));
          paramContext.setTag(R.id.com_jd_sdk_lib_puppetlayout_actionmgr, new CallbackManager());
          bool = "1".equals(paramViewGroup);
          int j = -2;
          if (bool) {
            i = -2;
          } else {
            i = -1;
          }
          bool = "1".equals(paramString);
          if (!bool) {
            j = -1;
          }
          paramContext.setLayoutParams(new ViewGroup.LayoutParams(i, j));
          return paramContext;
        }
        catch (Throwable paramString)
        {
          bool = MyLog.D;
          if (!bool) {
            break label219;
          }
        }
        paramString.printStackTrace();
        return paramContext;
      }
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D)
      {
        paramContext.printStackTrace();
        return null;
        label219:
        return paramContext;
      }
    }
    return null;
  }
  
  public ViewGroup createTemplateView(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      paramContext = createTemplateView(paramContext, paramString1, paramString2, null);
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
    return null;
  }
  
  public ViewGroup createTemplateView(Context paramContext, String paramString1, String paramString2, ViewGroup paramViewGroup)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString1);
      if (!bool)
      {
        bool = TextUtils.isEmpty(paramString2);
        if (bool) {
          return null;
        }
        bool = checkYlState(paramContext);
        if (!bool) {
          return null;
        }
        PuppetManager localPuppetManager = getInstance();
        PuppetViewTree localPuppetViewTree = PuppetViewMannager.getInstance().getCachedViewTree(paramString1, paramString2);
        if (localPuppetViewTree != null)
        {
          paramContext = (ViewGroup)PuppetViewMannager.getInstance().inflate(paramContext, paramViewGroup, localPuppetViewTree, false);
          paramString2 = flexibleWidth;
          paramString1 = flexibleHeight;
        }
        else
        {
          paramString1 = localPuppetManager.obtainTemplate(paramContext, paramString1, paramString2);
          if (paramString1 == null) {
            return null;
          }
          paramContext = (ViewGroup)localPuppetManager.createTemplateView(paramContext, paramString1, paramViewGroup);
          paramString2 = flexibleWidth;
          paramString1 = flexibleHeight;
        }
        if (paramContext != null)
        {
          try
          {
            int i = R.id.com_jd_sdk_lib_puppetlayout_flexible_width;
            paramContext.setTag(i, Boolean.valueOf("1".equals(paramString2)));
            i = R.id.com_jd_sdk_lib_puppetlayout_flexible_height;
            paramContext.setTag(i, Boolean.valueOf("1".equals(paramString1)));
            paramContext.setTag(R.id.com_jd_sdk_lib_puppetlayout_actionmgr, new CallbackManager());
            bool = "1".equals(paramString2);
            int j = -2;
            if (bool) {
              i = -2;
            } else {
              i = -1;
            }
            bool = "1".equals(paramString1);
            if (!bool) {
              j = -1;
            }
            paramContext.setLayoutParams(new ViewGroup.LayoutParams(i, j));
            return paramContext;
          }
          catch (Throwable paramString1)
          {
            bool = MyLog.D;
            if (!bool) {
              break label280;
            }
          }
          paramString1.printStackTrace();
          return paramContext;
        }
      }
      else
      {
        return null;
      }
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D)
      {
        paramContext.printStackTrace();
        return null;
        label280:
        return paramContext;
      }
    }
    return null;
  }
  
  public boolean equals(ViewGroup paramViewGroup, String paramString1, String paramString2)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString1);
      if (!bool)
      {
        bool = TextUtils.isEmpty(paramString2);
        if (bool) {
          return false;
        }
        paramViewGroup = getPuppetContext(paramViewGroup);
        if (paramViewGroup != null)
        {
          bool = paramString1.equals(styleId);
          if (bool)
          {
            bool = paramString2.equals(styleVersion);
            if (bool) {
              return true;
            }
          }
        }
      }
      else
      {
        return false;
      }
    }
    catch (Throwable paramViewGroup)
    {
      if (MyLog.D) {
        paramViewGroup.printStackTrace();
      }
    }
    return false;
  }
  
  public void expo(ViewGroup paramViewGroup)
  {
    try
    {
      PuppetContext localPuppetContext = getPuppetContext(paramViewGroup);
      if (localPuppetContext != null)
      {
        localPuppetContext.expo(paramViewGroup);
        return;
      }
    }
    catch (Throwable paramViewGroup)
    {
      if (MyLog.D) {
        paramViewGroup.printStackTrace();
      }
    }
  }
  
  public void forceSyncTemplates(Context paramContext, Runnable paramRunnable1, Runnable paramRunnable2)
  {
    NetManager.getInstance().requestUpdateStyles(paramContext, null, null, null, null, null, paramRunnable1, paramRunnable2, true, -1);
  }
  
  public DefaultStyleListener getDefaultStyleListener()
  {
    return defaultStyleListener;
  }
  
  public int getMeasuredHeight(int paramInt, ViewGroup paramViewGroup, JDJSONObject paramJDJSONObject)
  {
    if (paramViewGroup == null) {
      return -1;
    }
    try
    {
      getInstance().bindViewData(paramViewGroup, paramJDJSONObject);
      paramViewGroup.measure(View.MeasureSpec.makeMeasureSpec(paramInt, 1073741824), View.MeasureSpec.makeMeasureSpec(0, 0));
      paramInt = paramViewGroup.getMeasuredHeight();
      return paramInt;
    }
    catch (Throwable paramViewGroup)
    {
      if (MyLog.D) {
        paramViewGroup.printStackTrace();
      }
    }
    return -1;
  }
  
  public float getRootHeight(View paramView)
  {
    int i;
    if ((paramView != null) && ((paramView instanceof YogaLayout))) {
      i = R.id.com_jd_sdk_lib_puppetlayout_root_height;
    }
    try
    {
      paramView = paramView.getTag(i);
      if ((paramView != null) && ((paramView instanceof Float)))
      {
        paramView = (Float)paramView;
        float f = paramView.floatValue();
        return f;
      }
    }
    catch (Exception paramView)
    {
      for (;;) {}
    }
    return -1.0F;
  }
  
  public float getRootWidth(View paramView)
  {
    int i;
    if ((paramView != null) && ((paramView instanceof YogaLayout))) {
      i = R.id.com_jd_sdk_lib_puppetlayout_root_width;
    }
    try
    {
      paramView = paramView.getTag(i);
      if ((paramView != null) && ((paramView instanceof Float)))
      {
        paramView = (Float)paramView;
        float f = paramView.floatValue();
        return f;
      }
    }
    catch (Exception paramView)
    {
      for (;;) {}
    }
    return -1.0F;
  }
  
  public boolean hasTemplate(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      boolean bool = checkYlState(paramContext);
      if (!bool) {
        return false;
      }
      bool = TextUtils.isEmpty(paramString1);
      if (!bool)
      {
        bool = TextUtils.isEmpty(paramString2);
        if (bool) {
          return false;
        }
        Object localObject = TemplateUtils.getTemplateXml(paramContext, paramString1, paramString2);
        paramContext = (Context)localObject;
        bool = TextUtils.isEmpty((CharSequence)localObject);
        localObject = paramContext;
        if (bool)
        {
          DefaultStyleListener localDefaultStyleListener = defaultStyleListener;
          localObject = paramContext;
          if (localDefaultStyleListener != null) {
            localObject = defaultStyleListener.getStyle(paramString1, paramString2);
          }
        }
        bool = TextUtils.isEmpty((CharSequence)localObject);
        return bool ^ true;
      }
      return false;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
    return false;
  }
  
  public void init(Context paramContext, String paramString1, String paramString2)
  {
    syncTemplates(paramContext);
  }
  
  public boolean isEditing(ViewGroup paramViewGroup)
  {
    try
    {
      paramViewGroup = getPuppetContext(paramViewGroup);
      if (paramViewGroup != null)
      {
        boolean bool = isEditing;
        if (bool) {
          return true;
        }
      }
    }
    catch (Throwable paramViewGroup)
    {
      if (MyLog.D) {
        paramViewGroup.printStackTrace();
      }
    }
    return false;
  }
  
  public boolean isFlexibleHeight(ViewGroup paramViewGroup)
  {
    return (paramViewGroup == null) || (((Boolean)paramViewGroup.getTag(R.id.com_jd_sdk_lib_puppetlayout_flexible_height)).booleanValue());
  }
  
  public boolean isFlexibleWidth(ViewGroup paramViewGroup)
  {
    return (paramViewGroup == null) || (((Boolean)paramViewGroup.getTag(R.id.com_jd_sdk_lib_puppetlayout_flexible_width)).booleanValue());
  }
  
  public boolean isNotDemo()
  {
    return "demodewdweqkwqjd".equalsIgnoreCase(appId) ^ true;
  }
  
  public void notifyRequestLayout(View paramView)
  {
    PuppetContext localPuppetContext = getPuppetContext(paramView);
    if ((localPuppetContext != null) && (isRequestLayoutOnBind))
    {
      if (Build.VERSION.SDK_INT >= 19)
      {
        if (paramView.isAttachedToWindow()) {
          paramView.requestLayout();
        }
      }
      else {
        paramView.requestLayout();
      }
      isRequestLayoutOnBind = false;
    }
  }
  
  public TemplateModel obtainDdTemplate(Context paramContext, String paramString)
  {
    String str = TemplateUtils.getDdTemplateXml(paramContext, paramString);
    paramContext = str;
    Context localContext = paramContext;
    if (TextUtils.isEmpty(str))
    {
      if (getInstance().getDefaultStyleListener() != null) {
        paramContext = getInstance().getDefaultStyleListener().getDdStyle(paramString);
      }
      localContext = paramContext;
      if (TextUtils.isEmpty(paramContext)) {
        return null;
      }
    }
    paramContext = new TemplateXmlParser();
    try
    {
      paramContext = paramContext.parse(new StringReader(localContext));
      contentLength = localContext.length();
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
    return null;
  }
  
  public TemplateModel obtainTemplate(Context paramContext, String paramString1, String paramString2)
  {
    String str = TemplateUtils.getTemplateXml(paramContext, paramString1, paramString2);
    paramContext = str;
    Context localContext = paramContext;
    if (TextUtils.isEmpty(str))
    {
      if (getInstance().getDefaultStyleListener() != null) {
        paramContext = getInstance().getDefaultStyleListener().getStyle(paramString1, paramString2);
      }
      localContext = paramContext;
      if (TextUtils.isEmpty(paramContext)) {
        return null;
      }
    }
    paramContext = new TemplateXmlParser();
    try
    {
      paramContext = paramContext.parse(new StringReader(localContext));
      contentLength = localContext.length();
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
    return null;
  }
  
  public void register(String paramString, Callback paramCallback) {}
  
  public void saveStyles(Context paramContext, String paramString)
  {
    try
    {
      syncTemplates(paramContext);
      return;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
  }
  
  public void setAuraSuffix(String paramString, Set paramSet)
  {
    auraSuffix = paramString;
    auraSuffixExcludeSet = paramSet;
  }
  
  public void setDebug(boolean paramBoolean)
  {
    debug = paramBoolean;
  }
  
  public void setDefaultStyleListener(DefaultStyleListener paramDefaultStyleListener)
  {
    defaultStyleListener = paramDefaultStyleListener;
  }
  
  public void setIsEditing(ViewGroup paramViewGroup, boolean paramBoolean)
  {
    try
    {
      PuppetContext localPuppetContext = getPuppetContext(paramViewGroup);
      if (localPuppetContext != null)
      {
        isEditing = paramBoolean;
        localPuppetContext.notifyEditingChanged(paramViewGroup);
        return;
      }
    }
    catch (Throwable paramViewGroup)
    {
      if (MyLog.D) {
        paramViewGroup.printStackTrace();
      }
    }
  }
  
  public void setParentHandler(ViewGroup paramViewGroup, ParentHandler paramParentHandler)
  {
    if (paramViewGroup != null)
    {
      if (paramParentHandler == null) {
        return;
      }
      try
      {
        paramViewGroup = paramViewGroup.getTag(R.id.com_jd_sdk_lib_puppetlayout_tree);
        if (paramViewGroup != null)
        {
          boolean bool = paramViewGroup instanceof PuppetContext;
          if (bool)
          {
            parentHandler = paramParentHandler;
            return;
          }
        }
      }
      catch (Throwable paramViewGroup)
      {
        if (MyLog.D) {
          paramViewGroup.printStackTrace();
        }
      }
    }
  }
  
  public void setRootHeight(View paramView, float paramFloat) {}
  
  public void setRootWidth(View paramView, float paramFloat) {}
  
  public void setViewDataTimestamp(ViewGroup paramViewGroup, long paramLong)
  {
    paramViewGroup = getPuppetContext(paramViewGroup);
    if (paramViewGroup != null) {
      dataTimestamp = paramLong;
    }
  }
  
  public void sync(Context paramContext)
  {
    try
    {
      syncTemplates(paramContext);
      return;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
  }
  
  public void sync(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    try
    {
      NetManager.getInstance().requestUpdateStyles(paramContext, paramString1, paramString2, paramString3, null, null, null, null, false, -1);
      return;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
  }
  
  public void sync(Context paramContext, String paramString1, String paramString2, String paramString3, int paramInt)
  {
    try
    {
      NetManager.getInstance().requestUpdateStyles(paramContext, paramString1, paramString2, paramString3, null, null, null, null, false, 2);
      return;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
  }
  
  public void sync(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    try
    {
      NetManager.getInstance().requestUpdateStyles(paramContext, paramString1, paramString2, paramString3, paramString4, paramString5, null, null, false, -1);
      return;
    }
    catch (Throwable paramContext)
    {
      if (MyLog.D) {
        paramContext.printStackTrace();
      }
    }
  }
  
  public void syncTemplates(Context paramContext)
  {
    syncTemplates(paramContext, null, null, (Runnable)new PuppetManager.1(this), null);
  }
  
  public void syncTemplates(Context paramContext, Runnable paramRunnable1, Runnable paramRunnable2)
  {
    syncTemplates(paramContext, null, null, paramRunnable1, paramRunnable2);
  }
  
  public void syncTemplates(Context paramContext, String paramString1, String paramString2)
  {
    syncTemplates(paramContext, paramString1, paramString2, null, null);
  }
  
  public void syncTemplates(Context paramContext, String paramString1, String paramString2, Runnable paramRunnable1, Runnable paramRunnable2)
  {
    NetManager.getInstance().requestUpdateStyles(paramContext, null, null, null, paramString1, paramString2, paramRunnable1, paramRunnable2, false, -1);
  }
  
  public void unregister(Callback paramCallback) {}
  
  public void unregister(String paramString) {}
}
