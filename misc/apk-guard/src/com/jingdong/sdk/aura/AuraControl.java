package com.jingdong.sdk.aura;

import android.app.Activity;
import android.app.Application;
import android.content.ContextWrapper;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;
import com.jingdong.aura.sdk.update.AuraUpdate;
import com.jingdong.aura.sdk.update.AuraUpdateConfig.Builder;
import com.jingdong.aura.sdk.update.downloader.DefaultDownloader;
import com.jingdong.aura.sdk.update.report.CommonReporter;
import com.jingdong.aura.sdk.update.updater.CommonBundleInfoProvider;
import com.jingdong.aura.wrapper.AuraConfig;
import com.jingdong.aura.wrapper.AuraInitializer;
import com.jingdong.aura.wrapper.listener.AuraEventListener;
import com.jingdong.jdsdk.auraSetting.AuraFragmentHelper;
import com.jingdong.jdsdk.auraSetting.AuraFragmentHelper.CommonAuraFragmentSetting;
import com.jingdong.sdk.uuid.UUID;
import com.thestore.main.core.app.UserInfo;
import java.io.File;
import java.util.HashMap;

public class AuraControl
{
  private static String BUNDLE_LIB_DIR_FORDEBUG;
  private static final String PAGE_KEY = "AuraControl";
  private static final String SYS_INFO_SYSTEM_ID = "storedSystemId";
  private static AuraInitializer mAureInitInstance;
  static final HashMap<String, String> pluginUpdateId2Name = new HashMap();
  
  static
  {
    pluginUpdateId2Name.put("address", "com.jd.lib.address");
    pluginUpdateId2Name.put("cart", "com.jd.lib.cart");
    pluginUpdateId2Name.put("ordercenter", "com.jd.lib.ordercenter");
    pluginUpdateId2Name.put("productdetail", "com.jd.lib.productdetail");
    pluginUpdateId2Name.put("search", "com.jd.lib.search");
    pluginUpdateId2Name.put("settlement", "com.jd.lib.settlement");
    pluginUpdateId2Name.put("shareorder", "com.jd.lib.shareorder");
    pluginUpdateId2Name.put("prime", "com.thestore.main.prime");
    pluginUpdateId2Name.put("cashier", "com.thestore.main.cashier");
    pluginUpdateId2Name.put("home", "com.thestore.main.home");
  }
  
  public AuraControl() {}
  
  public static void cleanAuraCache() {}
  
  private static SharedPreferences getAuraSharedPreferences(Application paramApplication)
  {
    return paramApplication.getSharedPreferences("aura_config", 0);
  }
  
  public static void init(Application paramApplication)
  {
    StringBuilder localStringBuilder;
    if (Build.VERSION.SDK_INT >= 29)
    {
      if (paramApplication.getExternalCacheDir() == null)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(paramApplication.getCodeCacheDir().getAbsolutePath());
        localStringBuilder.append("/aura");
        BUNDLE_LIB_DIR_FORDEBUG = localStringBuilder.toString();
      }
      else
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(paramApplication.getExternalCacheDir().getAbsolutePath());
        localStringBuilder.append("/aura");
        BUNDLE_LIB_DIR_FORDEBUG = localStringBuilder.toString();
      }
    }
    else
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(Environment.getExternalStorageDirectory().getAbsolutePath());
      localStringBuilder.append("/aura");
      BUNDLE_LIB_DIR_FORDEBUG = localStringBuilder.toString();
    }
    AuraConfig.setIsDebugBuildConfig(false);
    AuraConfig.enableLog(false);
    if (!ProcessUtil.isMainProcess(paramApplication))
    {
      Log.d("AuraControl", "isn't MainProcess, so init Aura to false");
      AuraConfig.setEnabled(false);
      return;
    }
    Log.d("AuraControl", "is MainProcess or push process");
    try
    {
      AuraConfig.setEnabled(true);
      boolean bool = isNewVersion(paramApplication);
      mAureInitInstance = new AuraInitializer(paramApplication, paramApplication.getPackageName(), bool);
      mAureInitInstance.init();
      mAureInitInstance.startUp(null);
      mAureInitInstance.preInstallBundles();
      bool = isSystemUpdate(paramApplication);
      if (bool) {
        cleanAuraCache();
      }
    }
    catch (Throwable localThrowable)
    {
      AuraConfig.setEnabled(false);
      localThrowable.printStackTrace();
    }
    AuraFragmentHelper.getInstance().setContext(paramApplication);
    AuraFragmentHelper.getInstance().registIAuraFragmentSetting(new AuraFragmentHelper.CommonAuraFragmentSetting()
    {
      public void ensureActivityResources(Activity paramAnonymousActivity)
      {
        AuraConfig.ensureActivityResources(paramAnonymousActivity);
      }
    });
  }
  
  public static void initAuraUpdate(Application paramApplication)
  {
    if (!ProcessUtil.isMainProcess(paramApplication))
    {
      Log.d("AuraControl", "isn't MainProcess,not init aura update");
      return;
    }
    Object localObject = "";
    for (;;)
    {
      try
      {
        String str = UserInfo.getPin();
        localObject = str;
      }
      catch (Throwable localThrowable)
      {
        continue;
      }
      try
      {
        AuraUpdate.init(new AuraUpdateConfig.Builder(paramApplication).setAppKey("8c2073f5b9c0453692cbf2f03c92ca93").setAppSecret("9e819c42aa359cad4137eb118568abec").setUserId((String)localObject).setUuid(UUID.readAndroidId(paramApplication)).enableLog(false).setBundleInfoProvider(new CommonBundleInfoProvider()
        {
          public String getBundleNameFromUpdateID(String paramAnonymousString)
          {
            return (String)AuraControl.pluginUpdateId2Name.get(paramAnonymousString);
          }
        }).setDownloader(new DefaultDownloader(paramApplication)).setReporter(new CommonReporter()
        {
          public void onException(String paramAnonymousString1, int paramAnonymousInt, String paramAnonymousString2, String paramAnonymousString3, Throwable paramAnonymousThrowable)
          {
            AuraControl.uploadCrash(paramAnonymousString1, paramAnonymousInt, paramAnonymousString2, paramAnonymousString3, paramAnonymousThrowable);
          }
          
          public void onTrace(String paramAnonymousString1, String paramAnonymousString2, int paramAnonymousInt, String paramAnonymousString3, String paramAnonymousString4) {}
        }).build());
        return;
      }
      catch (Throwable paramApplication)
      {
        uploadCrash("initAuraUpdate", 0, "initAuraUpdate failed", "", paramApplication);
        return;
      }
    }
  }
  
  private static boolean isNewVersion(Application paramApplication)
  {
    if (!ProcessUtil.isMainProcess(paramApplication)) {
      return false;
    }
    try
    {
      PackageInfo localPackageInfo = paramApplication.getPackageManager().getPackageInfo(paramApplication.getPackageName(), 0);
      int i = getAuraSharedPreferences(paramApplication).getInt("last_version_code", 0);
      int j = versionCode;
      if (j > i) {
        return true;
      }
    }
    catch (Throwable paramApplication)
    {
      uploadCrash("AuraControl.isNewVersion", 0, paramApplication.toString(), "", null);
      paramApplication.printStackTrace();
    }
    return false;
  }
  
  private static boolean isSystemUpdate(Application paramApplication)
  {
    if (!ProcessUtil.isMainProcess(paramApplication)) {
      return false;
    }
    String str1 = Build.DISPLAY;
    String str2 = getAuraSharedPreferences(paramApplication).getString("storedSystemId", "-1");
    if (TextUtils.isEmpty(str1)) {
      return false;
    }
    if ((!TextUtils.isEmpty(str2)) && (!"-1".equals(str2)))
    {
      if (str1.equals(str2)) {
        return false;
      }
      saveSystemId(paramApplication, str1);
      return true;
    }
    saveSystemId(paramApplication, str1);
    return false;
  }
  
  public static void loadBundle(String paramString)
    throws Exception
  {
    if (mAureInitInstance != null) {
      AuraInitializer.loadBundle(paramString);
    }
  }
  
  private static void saveSystemId(Application paramApplication, String paramString)
  {
    paramApplication = getAuraSharedPreferences(paramApplication).edit();
    paramApplication.putString("storedSystemId", paramString);
    try
    {
      paramApplication.apply();
      return;
    }
    catch (Exception paramApplication)
    {
      paramApplication.printStackTrace();
    }
  }
  
  private static void setListener()
  {
    AuraConfig.setAuraEventListener(new AuraEventListener()
    {
      public void onCloseAura(String paramAnonymousString1, int paramAnonymousInt, String paramAnonymousString2, String paramAnonymousString3) {}
      
      public void onTrace(String paramAnonymousString1, int paramAnonymousInt, String paramAnonymousString2, String paramAnonymousString3, Throwable paramAnonymousThrowable)
      {
        AuraControl.uploadCrash(paramAnonymousString1, paramAnonymousInt, paramAnonymousString2, paramAnonymousString3, paramAnonymousThrowable);
      }
      
      public void onTrace(String paramAnonymousString1, String paramAnonymousString2, int paramAnonymousInt, String paramAnonymousString3, String paramAnonymousString4) {}
    });
  }
  
  public static void uploadCrash(String paramString1, int paramInt, String paramString2, String paramString3, Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return;
    }
    try
    {
      paramThrowable = new StringBuilder();
      paramThrowable.append(paramString1);
      paramThrowable.append("_");
      paramThrowable.append(paramInt);
      paramThrowable.append("_");
      paramThrowable.append(paramString2);
      paramThrowable.append("_");
      paramThrowable.append(paramString3);
      paramThrowable.toString();
      return;
    }
    catch (Throwable paramString1)
    {
      paramString1.printStackTrace();
    }
  }
}
