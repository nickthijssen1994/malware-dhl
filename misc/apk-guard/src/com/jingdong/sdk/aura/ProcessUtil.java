package com.jingdong.sdk.aura;

import android.app.Application;
import android.content.Context;
import android.content.ContextWrapper;
import android.os.Process;
import android.text.TextUtils;

class ProcessUtil
{
  private static final String TAG = "ProcessUtil";
  private static String processName;
  
  ProcessUtil() {}
  
  private static String getPackageName(Application paramApplication)
  {
    return paramApplication.getPackageName();
  }
  
  /* Error */
  static String getProcessName(int paramInt)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aconst_null
    //   4: astore 5
    //   6: aconst_null
    //   7: astore 6
    //   9: new 32	java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial 33	java/lang/StringBuilder:<init>	()V
    //   16: astore_3
    //   17: aload_3
    //   18: ldc 35
    //   20: invokevirtual 39	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   23: pop
    //   24: aload_3
    //   25: iload_0
    //   26: invokevirtual 42	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   29: pop
    //   30: aload_3
    //   31: ldc 44
    //   33: invokevirtual 39	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   36: pop
    //   37: new 46	java/io/InputStreamReader
    //   40: dup
    //   41: new 48	java/io/FileInputStream
    //   44: dup
    //   45: aload_3
    //   46: invokevirtual 51	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   49: invokespecial 54	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   52: invokespecial 57	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   55: astore_3
    //   56: new 59	java/io/BufferedReader
    //   59: dup
    //   60: aload_3
    //   61: invokespecial 62	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   64: astore 4
    //   66: bipush 64
    //   68: newarray char
    //   70: astore 5
    //   72: aload 4
    //   74: aload 5
    //   76: invokevirtual 66	java/io/BufferedReader:read	([C)I
    //   79: pop
    //   80: aload 5
    //   82: arraylength
    //   83: istore_2
    //   84: iconst_0
    //   85: istore_0
    //   86: iconst_0
    //   87: istore_1
    //   88: iload_0
    //   89: iload_2
    //   90: if_icmpge +24 -> 114
    //   93: aload 5
    //   95: iload_0
    //   96: caload
    //   97: ifne +6 -> 103
    //   100: goto +14 -> 114
    //   103: iload_1
    //   104: iconst_1
    //   105: iadd
    //   106: istore_1
    //   107: iload_0
    //   108: iconst_1
    //   109: iadd
    //   110: istore_0
    //   111: goto -23 -> 88
    //   114: new 68	java/lang/String
    //   117: dup
    //   118: aload 5
    //   120: iconst_0
    //   121: iload_1
    //   122: invokespecial 71	java/lang/String:<init>	([CII)V
    //   125: astore 5
    //   127: aload_3
    //   128: invokevirtual 74	java/io/InputStreamReader:close	()V
    //   131: goto +10 -> 141
    //   134: astore_3
    //   135: ldc 8
    //   137: aload_3
    //   138: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   141: aload 4
    //   143: invokevirtual 81	java/io/BufferedReader:close	()V
    //   146: aload 5
    //   148: areturn
    //   149: astore 6
    //   151: aload 4
    //   153: astore 5
    //   155: aload 6
    //   157: astore 4
    //   159: goto +34 -> 193
    //   162: astore 6
    //   164: aload 4
    //   166: astore 5
    //   168: aload 6
    //   170: astore 4
    //   172: goto +33 -> 205
    //   175: astore 6
    //   177: aload 4
    //   179: astore 5
    //   181: aload 6
    //   183: astore 4
    //   185: goto +38 -> 223
    //   188: astore 4
    //   190: aconst_null
    //   191: astore 5
    //   193: aload 4
    //   195: astore 6
    //   197: goto +164 -> 361
    //   200: astore 4
    //   202: aconst_null
    //   203: astore 5
    //   205: aload_3
    //   206: astore 6
    //   208: aload 5
    //   210: astore_3
    //   211: aload 4
    //   213: astore 7
    //   215: goto +40 -> 255
    //   218: astore 4
    //   220: aconst_null
    //   221: astore 5
    //   223: aload_3
    //   224: astore 6
    //   226: aload 5
    //   228: astore_3
    //   229: aload 4
    //   231: astore 7
    //   233: goto +77 -> 310
    //   236: astore 6
    //   238: aconst_null
    //   239: astore 4
    //   241: aload 5
    //   243: astore_3
    //   244: aload 4
    //   246: astore 5
    //   248: goto +113 -> 361
    //   251: astore 7
    //   253: aconst_null
    //   254: astore_3
    //   255: aload 6
    //   257: astore 4
    //   259: aload_3
    //   260: astore 5
    //   262: ldc 8
    //   264: aload 7
    //   266: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   269: aload 6
    //   271: ifnull +20 -> 291
    //   274: aload 6
    //   276: invokevirtual 74	java/io/InputStreamReader:close	()V
    //   279: goto +12 -> 291
    //   282: astore 4
    //   284: ldc 8
    //   286: aload 4
    //   288: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   291: aload_3
    //   292: ifnull +61 -> 353
    //   295: aload_3
    //   296: invokevirtual 81	java/io/BufferedReader:close	()V
    //   299: goto +54 -> 353
    //   302: astore 7
    //   304: aconst_null
    //   305: astore_3
    //   306: aload 4
    //   308: astore 6
    //   310: aload 6
    //   312: astore 4
    //   314: aload_3
    //   315: astore 5
    //   317: ldc 8
    //   319: aload 7
    //   321: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   324: aload 6
    //   326: ifnull +20 -> 346
    //   329: aload 6
    //   331: invokevirtual 74	java/io/InputStreamReader:close	()V
    //   334: goto +12 -> 346
    //   337: astore 4
    //   339: ldc 8
    //   341: aload 4
    //   343: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   346: aload_3
    //   347: ifnull +6 -> 353
    //   350: goto -55 -> 295
    //   353: ldc 83
    //   355: areturn
    //   356: astore 6
    //   358: aload 4
    //   360: astore_3
    //   361: aload_3
    //   362: ifnull +17 -> 379
    //   365: aload_3
    //   366: invokevirtual 74	java/io/InputStreamReader:close	()V
    //   369: goto +10 -> 379
    //   372: astore_3
    //   373: ldc 8
    //   375: aload_3
    //   376: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   379: aload 5
    //   381: ifnull +8 -> 389
    //   384: aload 5
    //   386: invokevirtual 81	java/io/BufferedReader:close	()V
    //   389: aload 6
    //   391: athrow
    //   392: astore_3
    //   393: aload 5
    //   395: areturn
    //   396: astore_3
    //   397: goto -44 -> 353
    //   400: astore_3
    //   401: goto -12 -> 389
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	404	0	paramInt	int
    //   87	35	1	i	int
    //   83	8	2	j	int
    //   16	112	3	localObject1	Object
    //   134	72	3	localIOException1	java.io.IOException
    //   210	156	3	localObject2	Object
    //   372	4	3	localIOException2	java.io.IOException
    //   392	1	3	localIOException3	java.io.IOException
    //   396	1	3	localIOException4	java.io.IOException
    //   400	1	3	localIOException5	java.io.IOException
    //   1	183	4	localObject3	Object
    //   188	6	4	localThrowable1	Throwable
    //   200	12	4	localIOException6	java.io.IOException
    //   218	12	4	localFileNotFoundException1	java.io.FileNotFoundException
    //   239	19	4	localObject4	Object
    //   282	25	4	localIOException7	java.io.IOException
    //   312	1	4	localObject5	Object
    //   337	22	4	localIOException8	java.io.IOException
    //   4	390	5	localObject6	Object
    //   7	1	6	localObject7	Object
    //   149	7	6	localThrowable2	Throwable
    //   162	7	6	localIOException9	java.io.IOException
    //   175	7	6	localFileNotFoundException2	java.io.FileNotFoundException
    //   195	30	6	localObject8	Object
    //   236	39	6	localThrowable3	Throwable
    //   308	22	6	localIOException10	java.io.IOException
    //   356	34	6	localThrowable4	Throwable
    //   213	19	7	localObject9	Object
    //   251	14	7	localIOException11	java.io.IOException
    //   302	18	7	localFileNotFoundException3	java.io.FileNotFoundException
    // Exception table:
    //   from	to	target	type
    //   127	131	134	java/io/IOException
    //   66	72	149	java/lang/Throwable
    //   72	80	149	java/lang/Throwable
    //   80	84	149	java/lang/Throwable
    //   114	127	149	java/lang/Throwable
    //   72	80	162	java/io/IOException
    //   114	127	162	java/io/IOException
    //   72	80	175	java/io/FileNotFoundException
    //   114	127	175	java/io/FileNotFoundException
    //   56	66	188	java/lang/Throwable
    //   56	66	200	java/io/IOException
    //   56	66	218	java/io/FileNotFoundException
    //   9	56	236	java/lang/Throwable
    //   9	56	251	java/io/IOException
    //   274	279	282	java/io/IOException
    //   9	56	302	java/io/FileNotFoundException
    //   329	334	337	java/io/IOException
    //   262	269	356	java/lang/Throwable
    //   317	324	356	java/lang/Throwable
    //   365	369	372	java/io/IOException
    //   141	146	392	java/io/IOException
    //   295	299	396	java/io/IOException
    //   384	389	400	java/io/IOException
  }
  
  static String getProcessName(Context paramContext)
  {
    String str = processName;
    if (str != null) {
      return str;
    }
    processName = getProcessNameInternal(paramContext);
    return processName;
  }
  
  /* Error */
  private static String getProcessNameInternal(Context paramContext)
  {
    // Byte code:
    //   0: invokestatic 95	android/os/Process:myPid	()I
    //   3: istore_1
    //   4: aload_0
    //   5: ifnull +270 -> 275
    //   8: iload_1
    //   9: ifgt +6 -> 15
    //   12: goto +263 -> 275
    //   15: aload_0
    //   16: ldc 97
    //   18: invokevirtual 103	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   21: checkcast 105	android/app/ActivityManager
    //   24: astore_0
    //   25: aconst_null
    //   26: astore 7
    //   28: aload_0
    //   29: invokevirtual 109	android/app/ActivityManager:getRunningAppProcesses	()Ljava/util/List;
    //   32: invokeinterface 115 1 0
    //   37: astore 6
    //   39: aload 6
    //   41: invokeinterface 121 1 0
    //   46: istore 5
    //   48: iload 5
    //   50: ifeq +27 -> 77
    //   53: aload 6
    //   55: invokeinterface 125 1 0
    //   60: checkcast 127	android/app/ActivityManager$RunningAppProcessInfo
    //   63: astore_0
    //   64: aload_0
    //   65: getfield 131	android/app/ActivityManager$RunningAppProcessInfo:pid	I
    //   68: istore_2
    //   69: iload_2
    //   70: iload_1
    //   71: if_icmpne -32 -> 39
    //   74: goto +19 -> 93
    //   77: aconst_null
    //   78: astore_0
    //   79: goto +14 -> 93
    //   82: astore_0
    //   83: ldc 83
    //   85: ldc -123
    //   87: aload_0
    //   88: invokestatic 137	com/jingdong/sdk/oklog/OKLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   91: aconst_null
    //   92: astore_0
    //   93: aload_0
    //   94: ifnull +8 -> 102
    //   97: aload_0
    //   98: getfield 138	android/app/ActivityManager$RunningAppProcessInfo:processName	Ljava/lang/String;
    //   101: areturn
    //   102: sipush 128
    //   105: newarray byte
    //   107: astore 6
    //   109: new 32	java/lang/StringBuilder
    //   112: dup
    //   113: invokespecial 33	java/lang/StringBuilder:<init>	()V
    //   116: astore_0
    //   117: aload_0
    //   118: ldc 35
    //   120: invokevirtual 39	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   123: pop
    //   124: aload_0
    //   125: iload_1
    //   126: invokevirtual 42	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   129: pop
    //   130: aload_0
    //   131: ldc 44
    //   133: invokevirtual 39	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   136: pop
    //   137: new 48	java/io/FileInputStream
    //   140: dup
    //   141: aload_0
    //   142: invokevirtual 51	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   145: invokespecial 54	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   148: astore_0
    //   149: aload_0
    //   150: aload 6
    //   152: invokevirtual 141	java/io/FileInputStream:read	([B)I
    //   155: istore 4
    //   157: iload 4
    //   159: istore_2
    //   160: iload 4
    //   162: ifle +62 -> 224
    //   165: iconst_0
    //   166: istore_1
    //   167: iload_2
    //   168: istore_3
    //   169: iload_1
    //   170: iload 4
    //   172: if_icmpge +32 -> 204
    //   175: aload 6
    //   177: iload_1
    //   178: baload
    //   179: sipush 128
    //   182: if_icmpgt +20 -> 202
    //   185: aload 6
    //   187: iload_1
    //   188: baload
    //   189: ifgt +6 -> 195
    //   192: goto +10 -> 202
    //   195: iload_1
    //   196: iconst_1
    //   197: iadd
    //   198: istore_1
    //   199: goto -32 -> 167
    //   202: iload_1
    //   203: istore_3
    //   204: new 68	java/lang/String
    //   207: dup
    //   208: aload 6
    //   210: iconst_0
    //   211: iload_3
    //   212: invokespecial 144	java/lang/String:<init>	([BII)V
    //   215: astore 6
    //   217: aload_0
    //   218: invokevirtual 145	java/io/FileInputStream:close	()V
    //   221: aload 6
    //   223: areturn
    //   224: aload_0
    //   225: invokevirtual 145	java/io/FileInputStream:close	()V
    //   228: goto +33 -> 261
    //   231: astore 6
    //   233: goto +13 -> 246
    //   236: astore 6
    //   238: goto +26 -> 264
    //   241: astore 6
    //   243: aload 7
    //   245: astore_0
    //   246: ldc 8
    //   248: aload 6
    //   250: invokestatic 80	com/jingdong/sdk/oklog/OKLog:setNode	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   253: aload_0
    //   254: ifnull +7 -> 261
    //   257: aload_0
    //   258: invokevirtual 145	java/io/FileInputStream:close	()V
    //   261: ldc 83
    //   263: areturn
    //   264: aload_0
    //   265: ifnull +7 -> 272
    //   268: aload_0
    //   269: invokevirtual 145	java/io/FileInputStream:close	()V
    //   272: aload 6
    //   274: athrow
    //   275: ldc 83
    //   277: areturn
    //   278: astore_0
    //   279: aload 6
    //   281: areturn
    //   282: astore_0
    //   283: goto -22 -> 261
    //   286: astore_0
    //   287: goto -26 -> 261
    //   290: astore_0
    //   291: goto -19 -> 272
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	294	0	paramContext	Context
    //   3	200	1	i	int
    //   68	100	2	j	int
    //   168	44	3	k	int
    //   155	18	4	m	int
    //   46	3	5	bool	boolean
    //   37	185	6	localObject1	Object
    //   231	1	6	localThrowable1	Throwable
    //   236	1	6	localThrowable2	Throwable
    //   241	39	6	localThrowable3	Throwable
    //   26	218	7	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   28	39	82	java/lang/Throwable
    //   39	48	82	java/lang/Throwable
    //   53	69	82	java/lang/Throwable
    //   149	157	231	java/lang/Throwable
    //   204	217	231	java/lang/Throwable
    //   246	253	236	java/lang/Throwable
    //   109	149	241	java/lang/Throwable
    //   217	221	278	java/lang/Throwable
    //   224	228	282	java/lang/Throwable
    //   257	261	286	java/lang/Throwable
    //   268	272	290	java/lang/Throwable
  }
  
  static boolean isMainProcess(Application paramApplication)
  {
    return isProcess(paramApplication, getPackageName(paramApplication));
  }
  
  static boolean isProcess(Application paramApplication, String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    localObject = null;
    try
    {
      String str = getProcessName(paramApplication);
      paramApplication = str;
      if (str != null)
      {
        localObject = paramApplication;
        int i = str.length();
        if (i != 0) {}
      }
      else
      {
        paramApplication = "";
      }
    }
    catch (Throwable paramApplication)
    {
      for (;;)
      {
        paramApplication = (Application)localObject;
      }
    }
    localObject = paramApplication;
    if (TextUtils.isEmpty(paramApplication)) {
      localObject = getProcessName(Process.myPid()).trim();
    }
    return paramString.equals(localObject);
  }
}
