package com.jingdong.sdk.oklog.a;

import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.text.TextUtils;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.oklog.OKLogConfig;
import com.jingdong.sdk.oklog.reporter.AbsLogReporter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class f
  implements h
{
  private static final String c = System.getProperty("line.separator");
  private SlidingDrawer.SlidingHandler h;
  private AbsLogReporter y;
  
  public f(AbsLogReporter paramAbsLogReporter)
  {
    y = paramAbsLogReporter;
    HandlerThread localHandlerThread = new HandlerThread("OKLog-ReportHandler", 1);
    localHandlerThread.start();
    h = new SlidingDrawer.SlidingHandler(localHandlerThread.getLooper(), paramAbsLogReporter);
  }
  
  public static boolean add(String paramString)
  {
    if (OKLogConfig.LOG_WRAPPER_CLASS_NAMES != null)
    {
      String[] arrayOfString = OKLogConfig.LOG_WRAPPER_CLASS_NAMES;
      int j = arrayOfString.length;
      int i = 0;
      while (i < j)
      {
        if (arrayOfString[i].equals(paramString)) {
          return true;
        }
        i += 1;
      }
    }
    return false;
  }
  
  private String close()
  {
    StackTraceElement[] arrayOfStackTraceElement = Thread.currentThread().getStackTrace();
    return arrayOfStackTraceElement[Math.min(get(arrayOfStackTraceElement), arrayOfStackTraceElement.length)].getClassName();
  }
  
  private void d(String paramString, int paramInt, Throwable paramThrowable, Object... paramVarArgs)
  {
    AbsLogReporter localAbsLogReporter = y;
    if (localAbsLogReporter == null) {
      return;
    }
    if (!localAbsLogReporter.isReportable(paramInt)) {
      return;
    }
    paramVarArgs = a.a(paramVarArgs);
    if ((paramThrowable == null) && (TextUtils.isEmpty(paramVarArgs))) {
      return;
    }
    a(paramInt, paramString, paramVarArgs, paramThrowable);
  }
  
  private int get(StackTraceElement[] paramArrayOfStackTraceElement)
  {
    int i = 5;
    while (i < paramArrayOfStackTraceElement.length)
    {
      String str = paramArrayOfStackTraceElement[i].getClassName();
      if ((!add(str)) && (!str.equals(d.class.getName())) && (!str.equals(OKLogConfig.class.getName())) && (!str.equals(OKLog.class.getName()))) {
        return i;
      }
      i += 1;
    }
    return 0;
  }
  
  public void a(int paramInt, String paramString1, String paramString2, Throwable paramThrowable)
  {
    Object localObject = y;
    if (localObject == null) {
      return;
    }
    if (!((AbsLogReporter)localObject).isReportable(paramInt)) {
      return;
    }
    localObject = close();
    Message localMessage = h.obtainMessage();
    what = paramInt;
    obj = new Object[] { paramString1, paramString2, paramThrowable, localObject };
    h.sendMessage(localMessage);
  }
  
  public void a(e paramE) {}
  
  public void a(String paramString1, String paramString2)
  {
    if (y == null) {
      return;
    }
    if (TextUtils.isEmpty(paramString2))
    {
      a(paramString1, new Object[] { "Empty/Null json content" });
      return;
    }
    try
    {
      paramString2 = paramString2.trim();
      boolean bool = paramString2.startsWith("{");
      if (bool)
      {
        paramString2 = new JSONObject(paramString2).toString(2);
        a(paramString1, new Object[] { paramString2 });
        return;
      }
      bool = paramString2.startsWith("[");
      if (bool)
      {
        paramString2 = new JSONArray(paramString2).toString(2);
        a(paramString1, new Object[] { paramString2 });
        return;
      }
      e("Invalid Json", new Object[0]);
      return;
    }
    catch (JSONException paramString1)
    {
      for (;;) {}
    }
    e("Invalid Json", new Object[0]);
  }
  
  public void a(String paramString, Object... paramVarArgs)
  {
    d(paramString, 3, null, paramVarArgs);
  }
  
  public void d(Throwable paramThrowable, String paramString, Object... paramVarArgs)
  {
    d(paramString, 3, paramThrowable, paramVarArgs);
  }
  
  public void e(String paramString, Object... paramVarArgs)
  {
    d(paramString, 6, null, paramVarArgs);
  }
  
  public void e(Throwable paramThrowable, String paramString, Object... paramVarArgs)
  {
    d(paramString, 6, paramThrowable, paramVarArgs);
  }
  
  public void f(String paramString, Object... paramVarArgs)
  {
    d(paramString, 5, null, paramVarArgs);
  }
  
  public void f(Throwable paramThrowable, String paramString, Object... paramVarArgs)
  {
    d(paramString, 2, paramThrowable, paramVarArgs);
  }
  
  public void i(String paramString, Object... paramVarArgs)
  {
    d(paramString, 4, null, paramVarArgs);
  }
  
  public void i(Throwable paramThrowable, String paramString, Object... paramVarArgs)
  {
    d(paramString, 4, paramThrowable, paramVarArgs);
  }
  
  public void l(String paramString, Object... paramVarArgs)
  {
    d(paramString, 2, null, paramVarArgs);
  }
  
  public void l(Throwable paramThrowable, String paramString, Object... paramVarArgs)
  {
    d(paramString, 5, paramThrowable, paramVarArgs);
  }
}
