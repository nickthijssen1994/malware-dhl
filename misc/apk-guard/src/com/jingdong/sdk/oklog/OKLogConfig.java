package com.jingdong.sdk.oklog;

import android.app.Application;
import android.content.Context;
import com.jd.amon.sdk.JdBaseReporter.a;
import com.jd.amon.sdk.JdBaseReporter.e.b;
import com.jd.amon.sdk.JdBaseReporter.e.b.a;
import com.jd.amon.sdk.JdBaseReporter.e.b.b;
import com.jingdong.sdk.oklog.a.f;
import com.jingdong.sdk.oklog.a.h;
import com.jingdong.sdk.oklog.operations.OperationResult;
import com.jingdong.sdk.oklog.reporter.AbsLogReporter;

public class OKLogConfig
{
  private static boolean DEBUG;
  private static boolean INIT;
  private static OperationResult LOG_PROCESSOR;
  private static AbsLogReporter LOG_REPORTER;
  public static String[] LOG_WRAPPER_CLASS_NAMES;
  private static f MEM_PRINTER;
  public static long START_STAMP;
  public static Application o;
  
  public OKLogConfig() {}
  
  public OKLogConfig(Application paramApplication)
  {
    o = paramApplication;
  }
  
  private OKLogConfig(Builder paramBuilder)
  {
    DEBUG = debug;
    LOG_WRAPPER_CLASS_NAMES = logWrapperClassName;
    if (!a.a().b())
    {
      b localB = new b(appId);
      localB.c(uuid);
      localB.b(accountId);
      localB.a(accountIdConfig);
      localB.a(uuidConfig);
      localB.e(versionName);
      localB.f(versionCode);
      localB.d("1.6.4.2");
      a.a().a(o, localB, debug);
    }
  }
  
  static void c(String paramString1, String paramString2)
  {
    if (isReport()) {
      MEM_PRINTER.e(paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().e(paramString1, new Object[] { paramString2 });
    }
  }
  
  static void d(String paramString1, String paramString2)
  {
    if (isReport()) {
      MEM_PRINTER.l(paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().l(paramString1, new Object[] { paramString2 });
    }
  }
  
  static void d(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.d(paramThrowable, paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().d(paramThrowable, paramString1, new Object[] { paramString2 });
    }
  }
  
  static void d(String paramString, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.d(paramThrowable, paramString, new Object[0]);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().d(paramThrowable, paramString, new Object[0]);
    }
  }
  
  static void d(String paramString, Object... paramVarArgs)
  {
    if (isReport()) {
      MEM_PRINTER.a(paramString, paramVarArgs);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().a(paramString, paramVarArgs);
    }
  }
  
  static void e(String paramString1, String paramString2)
  {
    if (isReport()) {
      MEM_PRINTER.a(paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().a(paramString1, new Object[] { paramString2 });
    }
  }
  
  static void e(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.e(paramThrowable, paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().e(paramThrowable, paramString1, new Object[] { paramString2 });
    }
  }
  
  static void e(String paramString, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.e(paramThrowable, paramString, new Object[0]);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().e(paramThrowable, paramString, new Object[0]);
    }
  }
  
  static void e(String paramString, Object... paramVarArgs)
  {
    if (isReport()) {
      MEM_PRINTER.e(paramString, paramVarArgs);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().e(paramString, paramVarArgs);
    }
  }
  
  static void f(String paramString1, String paramString2)
  {
    if (isReport()) {
      MEM_PRINTER.f(paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().f(paramString1, new Object[] { paramString2 });
    }
  }
  
  static void f(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.f(paramThrowable, paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().f(paramThrowable, paramString1, new Object[] { paramString2 });
    }
  }
  
  static void f(String paramString, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.f(paramThrowable, paramString, new Object[0]);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().f(paramThrowable, paramString, new Object[0]);
    }
  }
  
  static void f(String paramString, Object... paramVarArgs)
  {
    if (isReport()) {
      MEM_PRINTER.f(paramString, paramVarArgs);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().f(paramString, paramVarArgs);
    }
  }
  
  private static h getPrinter()
  {
    OperationResult localOperationResult = LOG_PROCESSOR;
    if (localOperationResult == null) {
      return null;
    }
    return localOperationResult.erase();
  }
  
  static void i(String paramString1, String paramString2)
  {
    if (isReport()) {
      MEM_PRINTER.i(paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().i(paramString1, new Object[] { paramString2 });
    }
  }
  
  static void i(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.i(paramThrowable, paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().i(paramThrowable, paramString1, new Object[] { paramString2 });
    }
  }
  
  static void i(String paramString, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.i(paramThrowable, paramString, new Object[0]);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().i(paramThrowable, paramString, new Object[0]);
    }
  }
  
  static void i(String paramString, Object... paramVarArgs)
  {
    if (isReport()) {
      MEM_PRINTER.i(paramString, paramVarArgs);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().i(paramString, paramVarArgs);
    }
  }
  
  public static boolean isDebug()
  {
    return DEBUG;
  }
  
  private static boolean isReport()
  {
    AbsLogReporter localAbsLogReporter = LOG_REPORTER;
    return (localAbsLogReporter != null) && (MEM_PRINTER != null) && (localAbsLogReporter.isFeatureEnable());
  }
  
  static void json(String paramString1, String paramString2)
  {
    if (isReport()) {
      MEM_PRINTER.a(paramString1, paramString2);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().a(paramString1, paramString2);
    }
  }
  
  public static Builder newBuilder(Application paramApplication)
  {
    return new Builder(paramApplication);
  }
  
  static void w(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.l(paramThrowable, paramString1, new Object[] { paramString2 });
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().l(paramThrowable, paramString1, new Object[] { paramString2 });
    }
  }
  
  static void w(String paramString, Throwable paramThrowable)
  {
    if (isReport()) {
      MEM_PRINTER.l(paramThrowable, paramString, new Object[0]);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().l(paramThrowable, paramString, new Object[0]);
    }
  }
  
  static void w(String paramString, Object... paramVarArgs)
  {
    if (isReport()) {
      MEM_PRINTER.l(paramString, paramVarArgs);
    }
    if (isDebug())
    {
      if (getPrinter() == null) {
        return;
      }
      getPrinter().l(paramString, paramVarArgs);
    }
  }
  
  public OKLogConfig diskRecord(boolean paramBoolean, Context paramContext)
  {
    return diskRecord(paramBoolean, paramContext, 0);
  }
  
  public OKLogConfig diskRecord(boolean paramBoolean, Context paramContext, int paramInt)
  {
    return this;
  }
  
  public OKLogConfig setDebug(boolean paramBoolean)
  {
    return this;
  }
  
  public void start()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a3 = a2\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static class Builder
  {
    private String accountId;
    private b.a accountIdConfig;
    private String appId;
    public boolean debug;
    public String[] logWrapperClassName;
    private String uuid;
    private b.b uuidConfig;
    private String versionCode;
    private String versionName;
    
    public Builder(Application paramApplication)
    {
      OKLogConfig.o = paramApplication;
    }
    
    public OKLogConfig build()
    {
      return new OKLogConfig(this, null);
    }
    
    public Builder setAccountId(String paramString)
    {
      accountId = paramString;
      return this;
    }
    
    public Builder setAccountIdConfig(b.a paramA)
    {
      accountIdConfig = paramA;
      return this;
    }
    
    public Builder setAppId(String paramString)
    {
      appId = paramString;
      return this;
    }
    
    public Builder setDebug(boolean paramBoolean)
    {
      debug = paramBoolean;
      return this;
    }
    
    public Builder setLogWrapperClassFullNames(String[] paramArrayOfString)
    {
      logWrapperClassName = paramArrayOfString;
      return this;
    }
    
    public Builder setUuid(String paramString)
    {
      uuid = paramString;
      return this;
    }
    
    public Builder setUuidConfig(b.b paramB)
    {
      uuidConfig = paramB;
      return this;
    }
    
    public Builder setVersionCode(String paramString)
    {
      versionCode = paramString;
      return this;
    }
    
    public Builder setVersionName(String paramString)
    {
      versionName = paramString;
      return this;
    }
  }
}
