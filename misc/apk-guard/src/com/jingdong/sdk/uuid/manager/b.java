package com.jingdong.sdk.uuid.manager;

import android.content.Context;
import android.os.Process;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import com.jingdong.sdk.uuid.ByteVector;
import com.jingdong.sdk.uuid.ClassReader;
import com.jingdong.sdk.uuid.Label;
import com.jingdong.sdk.uuid.Request;
import com.jingdong.sdk.uuid.f;
import com.jingdong.sdk.uuid.l;

public class b
  implements l
{
  public b() {}
  
  private static String a(Request paramRequest)
  {
    try
    {
      Object localObject = paramRequest.getContext();
      if (localObject != null)
      {
        localObject = (TelephonyManager)paramRequest.getContext().getSystemService("phone");
        if (localObject != null)
        {
          int i = paramRequest.getContext().checkPermission("android.permission.READ_PHONE_STATE", Process.myPid(), Process.myUid());
          if (i != 0) {
            return "";
          }
          paramRequest = ((TelephonyManager)localObject).getDeviceId();
          return paramRequest;
        }
        throw new NullPointerException("Cannot get the telephony manager");
      }
      throw new NullPointerException("Context is null");
    }
    catch (Throwable paramRequest)
    {
      if ((paramRequest instanceof SecurityException)) {
        com.jingdong.sdk.uuid.b.a("No READ_PHONE_STATE Permission");
      }
      com.jingdong.sdk.uuid.b.e(paramRequest);
    }
    return "";
  }
  
  public Label a(ByteVector paramByteVector)
  {
    com.jingdong.sdk.uuid.b.a("Enter IMEIInterceptor intercept()");
    Request localRequest = paramByteVector.add();
    Object localObject = "";
    f.a(localRequest);
    String str1;
    if (localRequest.isDeviceCodeReadable())
    {
      String str2 = f.a().a("imei");
      str1 = str2;
      if (TextUtils.isEmpty(str2))
      {
        str2 = a(localRequest);
        str1 = str2;
        f.a().a("imei", str2);
        localRequest.fillingIdSlot("imei", str2);
      }
      if (!TextUtils.isEmpty(str1)) {
        if (localRequest.isWifiMacReadable())
        {
          localObject = ClassReader.a(localRequest);
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append(str1);
          ((StringBuilder)localObject).append("-");
          localObject = ((StringBuilder)localObject).toString();
        }
      }
    }
    else if (localRequest.isWifiMacReadable())
    {
      str1 = f.a().a("mac");
      localObject = str1;
      if (!TextUtils.isEmpty(str1))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("-");
        ((StringBuilder)localObject).append(str1);
        localObject = ((StringBuilder)localObject).toString();
      }
    }
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      boolean bool = ClassReader.a((String)localObject);
      if (bool) {
        f.a().add((String)localObject);
      }
      return new Label(localRequest, true).a((String)localObject).a(bool);
    }
    return paramByteVector.a(localRequest);
  }
}
