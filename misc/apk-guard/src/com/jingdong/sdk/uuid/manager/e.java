package com.jingdong.sdk.uuid.manager;

import android.content.Context;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build.VERSION;
import android.text.TextUtils;
import com.jingdong.sdk.uuid.ByteVector;
import com.jingdong.sdk.uuid.Label;
import com.jingdong.sdk.uuid.Request;
import com.jingdong.sdk.uuid.b;
import com.jingdong.sdk.uuid.f;
import com.jingdong.sdk.uuid.l;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class e
  implements l
{
  public e() {}
  
  public static String a(Context paramContext)
  {
    String str = "";
    if (paramContext != null)
    {
      localObject = str;
      try
      {
        paramContext = paramContext.getApplicationContext().getSystemService("wifi");
        paramContext = (WifiManager)paramContext;
        if (paramContext != null)
        {
          localObject = str;
          str = paramContext.getConnectionInfo().getMacAddress();
          paramContext = str;
          if ((Build.VERSION.SDK_INT < 23) && (str != null))
          {
            localObject = paramContext;
            boolean bool = str.equals("02:00:00:00:00:00");
            localObject = paramContext;
            if (!bool) {
              break label114;
            }
          }
          localObject = paramContext;
          paramContext = doInBackground();
          localObject = paramContext;
          break label114;
        }
        localObject = str;
        paramContext = new IllegalStateException("Can't get WifiManager.");
        throw paramContext;
      }
      catch (Exception paramContext) {}
    }
    Object localObject = str;
    paramContext = new NullPointerException("getMacAddressStr(), context is null");
    throw paramContext;
    b.e(paramContext);
    label114:
    return getValue((String)localObject);
  }
  
  private static String doInBackground()
  {
    try
    {
      Object localObject1 = Collections.list(NetworkInterface.getNetworkInterfaces()).iterator();
      boolean bool;
      do
      {
        bool = ((Iterator)localObject1).hasNext();
        if (!bool) {
          break;
        }
        localObject2 = ((Iterator)localObject1).next();
        localObject2 = (NetworkInterface)localObject2;
        bool = ((NetworkInterface)localObject2).getName().equalsIgnoreCase("wlan0");
      } while (!bool);
      localObject1 = ((NetworkInterface)localObject2).getHardwareAddress();
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = new StringBuilder();
      int j = localObject1.length;
      int i = 0;
      while (i < j)
      {
        byte b = localObject1[i];
        ((StringBuilder)localObject2).append(String.format("%02x:", new Object[] { Byte.valueOf(b) }));
        i += 1;
      }
      i = ((StringBuilder)localObject2).length();
      if (i > 0)
      {
        i = ((StringBuilder)localObject2).length();
        ((StringBuilder)localObject2).deleteCharAt(i - 1);
      }
      localObject1 = ((StringBuilder)localObject2).toString();
      return localObject1;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    return "";
  }
  
  private static String getValue(String paramString)
  {
    String str = paramString;
    if (!TextUtils.isEmpty(paramString)) {
      str = paramString.trim().replaceAll("-|\\.|:", "");
    }
    return str;
  }
  
  public Label a(ByteVector paramByteVector)
  {
    b.a("Enter WifiMacInterceptor intercept()");
    Request localRequest = paramByteVector.add();
    f.a(localRequest);
    if ((TextUtils.isEmpty(f.a().a("mac"))) && (localRequest.isWifiMacReadable()))
    {
      String str = a(localRequest.getContext());
      f.a().a("mac", str);
      localRequest.fillingIdSlot("mac", str);
    }
    return paramByteVector.a(localRequest);
  }
}
