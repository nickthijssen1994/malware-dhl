package com.jingdong.sdk.uuid;

import android.content.Context;
import android.text.TextUtils;
import java.util.Arrays;

public final class Request
{
  private static long sLastGenerateTime;
  private boolean deviceCodeReadable;
  private boolean fileCacheEnabled;
  private final a[] idSlot = { new a(), new a() };
  private final Context mContext;
  private boolean wifiMacReadable;
  
  private Request(Builder paramBuilder)
  {
    e.a(context);
    mContext = context;
    boolean bool;
    if (macMethodCalled) {
      bool = wifiMacReadable;
    } else {
      bool = e.a("wifi_mac_readable", false);
    }
    wifiMacReadable = bool;
    if (deviceCodeMethodCalled) {
      bool = deviceCodeReadable;
    } else {
      bool = e.a("device_code_readable", false);
    }
    deviceCodeReadable = bool;
    if (fileCacheMethodCalled) {
      bool = fileCacheEnabled;
    } else {
      bool = e.a("file_cache_enabled", false);
    }
    fileCacheEnabled = bool;
    if (logMethodCalled) {
      bool = isLoggable;
    } else {
      bool = e.a("loggable", false);
    }
    b.a(bool);
  }
  
  public void fillingIdSlot(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    boolean bool = TextUtils.equals(paramString1, "imei");
    int k = 0;
    Object localObject;
    if (bool)
    {
      localObject = idSlot;
      0e = paramString2;
    }
    for (paramString2 = localObject[0];; paramString2 = localObject[1])
    {
      f = paramString1;
      return;
      if (!TextUtils.equals(paramString1, "mac")) {
        break;
      }
      localObject = idSlot;
      1e = paramString2;
    }
    int i = 0;
    int j;
    for (;;)
    {
      localObject = idSlot;
      j = k;
      if (i >= localObject.length) {
        break;
      }
      if (TextUtils.equals(f, paramString1)) {
        return;
      }
      i += 1;
    }
    for (;;)
    {
      localObject = idSlot;
      if (j >= localObject.length) {
        break;
      }
      if (TextUtils.isEmpty(e))
      {
        localObject = idSlot;
        e = paramString2;
        f = paramString1;
        return;
      }
      localObject = new a(paramString1, paramString2);
      if (idSlot[j].compare((a)localObject) < 0) {
        idSlot[j] = localObject;
      }
      j += 1;
    }
  }
  
  public Context getContext()
  {
    return mContext;
  }
  
  public a[] getIdSlot()
  {
    return idSlot;
  }
  
  public void initSlot()
  {
    String[] arrayOfString = f.c;
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      String str = arrayOfString[i];
      fillingIdSlot(str, f.a().a(str));
      i += 1;
    }
  }
  
  public boolean isDeviceCodeReadable()
  {
    return deviceCodeReadable;
  }
  
  public boolean isFileCacheEnabled()
  {
    return fileCacheEnabled;
  }
  
  public boolean isWifiMacReadable()
  {
    return wifiMacReadable;
  }
  
  public boolean shouldReGenerate()
  {
    return System.currentTimeMillis() - sLastGenerateTime > 60000L;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Request: loggable=");
    localStringBuilder.append(b.e);
    localStringBuilder.append(", wifiMacReadable=");
    localStringBuilder.append(wifiMacReadable);
    localStringBuilder.append(", deviceCodeReadable=");
    localStringBuilder.append(deviceCodeReadable);
    localStringBuilder.append(", fileCacheEnabled=");
    localStringBuilder.append(fileCacheEnabled);
    localStringBuilder.append(", idSlot=");
    localStringBuilder.append(Arrays.toString(idSlot));
    return localStringBuilder.toString();
  }
  
  public static class Builder
  {
    Context context;
    boolean deviceCodeMethodCalled = false;
    boolean deviceCodeReadable;
    boolean fileCacheEnabled;
    boolean fileCacheMethodCalled = false;
    boolean isLoggable;
    boolean logMethodCalled = false;
    boolean macMethodCalled = false;
    int permissionMode;
    boolean wifiMacReadable;
    boolean withoutPermission;
    
    public Builder() {}
    
    public Request build()
    {
      return new Request(this, null);
    }
    
    public Builder setContext(Context paramContext)
    {
      if (paramContext != null)
      {
        context = paramContext;
        return this;
      }
      throw new NullPointerException("context == null");
    }
    
    public Builder setFileCacheEnabled(boolean paramBoolean)
    {
      fileCacheMethodCalled = true;
      fileCacheEnabled = paramBoolean;
      return this;
    }
    
    public Builder setImeiReadable(boolean paramBoolean)
    {
      deviceCodeMethodCalled = true;
      deviceCodeReadable = paramBoolean;
      return this;
    }
    
    public Builder setLogEnabled(boolean paramBoolean)
    {
      logMethodCalled = true;
      isLoggable = paramBoolean;
      return this;
    }
    
    public Builder setPermissionMode(int paramInt)
    {
      permissionMode = paramInt;
      return this;
    }
    
    public Builder setWifiMacReadable(boolean paramBoolean)
    {
      macMethodCalled = true;
      wifiMacReadable = paramBoolean;
      return this;
    }
    
    public Builder setWithoutPermission(boolean paramBoolean)
    {
      withoutPermission = paramBoolean;
      return this;
    }
  }
  
  static class a
    implements Comparable<a>
  {
    String e;
    String f;
    
    public a() {}
    
    public a(String paramString1, String paramString2)
    {
      f = paramString1;
      e = paramString2;
    }
    
    int a()
    {
      String str = f;
      int i = str.hashCode();
      if (i != 107855)
      {
        if (i != 3236040)
        {
          if (i != 115652350)
          {
            if ((i == 1131700202) && (str.equals("androidId")))
            {
              i = 2;
              break label95;
            }
          }
          else if (str.equals("randomUUID"))
          {
            i = 3;
            break label95;
          }
        }
        else if (str.equals("imei"))
        {
          i = 0;
          break label95;
        }
      }
      else if (str.equals("mac"))
      {
        i = 1;
        break label95;
      }
      i = -1;
      switch (i)
      {
      default: 
        return -1;
      case 3: 
        return 1000;
      case 2: 
        return 2000;
      case 1: 
        label95:
        return 3000;
      }
      return 4000;
    }
    
    public int compare(a paramA)
    {
      return a() - paramA.a();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Entity{key='");
      localStringBuilder.append(f);
      localStringBuilder.append('\'');
      localStringBuilder.append(", value='");
      localStringBuilder.append(e);
      localStringBuilder.append('\'');
      localStringBuilder.append('}');
      return localStringBuilder.toString();
    }
  }
}
