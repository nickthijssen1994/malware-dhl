package com.jingdong.sdk.uuid;

import android.content.Context;
import android.content.res.Resources;
import android.text.TextUtils;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class AesCrypto
{
  private static String AES_KEY;
  private static final int ITERATION_COUNT = 10;
  private static final int KEY_LENGTH = 128;
  private static final String digits = "0123456789ABCDEF";
  private static byte[] rawKey;
  
  public AesCrypto() {}
  
  private static void appendHex(StringBuffer paramStringBuffer, byte paramByte)
  {
    paramStringBuffer.append("0123456789ABCDEF".charAt(paramByte >> 4 & 0xF));
    paramStringBuffer.append("0123456789ABCDEF".charAt(paramByte & 0xF));
  }
  
  public static String decrypt(Context paramContext, String paramString)
  {
    try
    {
      getAesKey(paramContext);
      paramContext = new String(decrypt(getRawKey(paramContext, AES_KEY), toByte(paramString)));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  private static byte[] decrypt(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    IvParameterSpec localIvParameterSpec = new IvParameterSpec(rawKey);
    paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
    Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    localCipher.init(2, paramArrayOfByte1, localIvParameterSpec);
    return localCipher.doFinal(paramArrayOfByte2);
  }
  
  public static String encrypt(Context paramContext, String paramString)
  {
    try
    {
      getAesKey(paramContext);
      paramContext = toHex(encrypt(getRawKey(paramContext, AES_KEY), paramString.getBytes()));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return null;
  }
  
  private static byte[] encrypt(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    IvParameterSpec localIvParameterSpec = new IvParameterSpec(rawKey);
    paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
    Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    localCipher.init(1, paramArrayOfByte1, localIvParameterSpec);
    return localCipher.doFinal(paramArrayOfByte2);
  }
  
  public static void getAesKey(Context paramContext)
  {
    if (TextUtils.isEmpty(AES_KEY)) {
      AES_KEY = paramContext.getString(R.string.aes_seed);
    }
  }
  
  private static byte[] getRawKey(Context paramContext, String paramString)
  {
    if (paramContext == null) {
      return new byte[1];
    }
    byte[] arrayOfByte = rawKey;
    if (arrayOfByte != null) {
      return arrayOfByte;
    }
    paramContext = a.getAvatar().getBytes(paramContext);
    paramContext = new PBEKeySpec(paramString.toCharArray(), paramContext, 10, 128);
    rawKey = new SecretKeySpec(SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1").generateSecret(paramContext).getEncoded(), "AES").getEncoded();
    return rawKey;
  }
  
  private static byte[] toByte(String paramString)
  {
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    while (i < j)
    {
      int k = i * 2;
      arrayOfByte[i] = Integer.valueOf(paramString.substring(k, k + 2), 16).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  private static String toHex(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer(paramArrayOfByte.length * 2);
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      appendHex(localStringBuffer, paramArrayOfByte[i]);
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  public static class a
  {
    private a() {}
    
    public static a getAvatar()
    {
      return new a();
    }
    
    public byte[] getBytes(Context paramContext)
    {
      byte[] arrayOfByte1 = new byte[16];
      byte[] arrayOfByte2 = "!q@w".getBytes();
      paramContext = paramContext.getResources().getString(R.string.privateKeyP2).getBytes();
      byte[] arrayOfByte3 = Base64.read("JXReeQ==");
      byte[] arrayOfByte4 = new byte[arrayOfByte2.length];
      int i = 0;
      while (i < arrayOfByte2.length)
      {
        arrayOfByte4[i] = ((byte)((arrayOfByte2[i] + paramContext[i] + arrayOfByte3[i]) / 3));
        i += 1;
      }
      System.arraycopy(arrayOfByte2, 0, arrayOfByte1, 0, 4);
      System.arraycopy(paramContext, 0, arrayOfByte1, 4, 4);
      System.arraycopy(arrayOfByte3, 0, arrayOfByte1, 8, 4);
      System.arraycopy(arrayOfByte4, 0, arrayOfByte1, 12, 4);
      return arrayOfByte1;
    }
  }
}
