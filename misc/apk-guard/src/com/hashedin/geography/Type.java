package com.hashedin.geography;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public final class Type
{
  private static Object create(Class paramClass, Object paramObject, String paramString)
  {
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      paramClass.setAccessible(true);
      paramClass = paramClass.get(paramObject);
      return paramClass;
    }
    catch (NoSuchFieldException paramClass)
    {
      return null;
    }
    catch (IllegalAccessException paramClass)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException paramClass)
    {
      for (;;) {}
    }
  }
  
  private static Object create(Class paramClass, Object paramObject, String paramString, Object[] paramArrayOfObject, Class... paramVarArgs)
  {
    try
    {
      paramClass = paramClass.getDeclaredMethod(paramString, paramVarArgs);
      paramClass.setAccessible(true);
      paramClass = paramClass.invoke(paramObject, paramArrayOfObject);
      return paramClass;
    }
    catch (NoSuchMethodException paramClass)
    {
      return null;
    }
    catch (IllegalAccessException paramClass)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException paramClass)
    {
      for (;;) {}
    }
    catch (InvocationTargetException paramClass)
    {
      for (;;) {}
    }
  }
  
  public static Object create(String paramString1, Object paramObject, String paramString2)
  {
    try
    {
      paramString1 = create(Class.forName(paramString1), paramObject, paramString2);
      return paramString1;
    }
    catch (ClassNotFoundException paramString1)
    {
      return null;
    }
    catch (IllegalArgumentException paramString1)
    {
      for (;;) {}
    }
  }
  
  public static Object create(String paramString1, Object paramObject, String paramString2, Object[] paramArrayOfObject, Class... paramVarArgs)
  {
    Class[] arrayOfClass = paramVarArgs;
    if (paramVarArgs == null) {
      arrayOfClass = new Class[0];
    }
    try
    {
      paramString1 = create(Class.forName(paramString1), paramObject, paramString2, paramArrayOfObject, arrayOfClass);
      return paramString1;
    }
    catch (ClassNotFoundException paramString1) {}
    return null;
  }
  
  public static Object get(String paramString1, Object paramObject, String paramString2)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
      paramString1.setAccessible(true);
      paramString1 = paramString1.get(paramObject);
      return paramString1;
    }
    catch (SecurityException paramString1)
    {
      return null;
    }
    catch (NoSuchFieldException paramString1)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException paramString1)
    {
      for (;;) {}
    }
    catch (IllegalAccessException paramString1)
    {
      for (;;) {}
    }
    catch (ClassNotFoundException paramString1)
    {
      for (;;) {}
    }
  }
  
  private static boolean get(Class paramClass, Object paramObject1, String paramString, Object paramObject2)
  {
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      paramClass.setAccessible(true);
      paramClass.set(paramObject1, paramObject2);
      return true;
    }
    catch (NoSuchFieldException paramClass)
    {
      return false;
    }
    catch (IllegalAccessException paramClass)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException paramClass)
    {
      for (;;) {}
    }
  }
  
  public static boolean get(String paramString1, Object paramObject1, String paramString2, Object paramObject2)
  {
    try
    {
      get(Class.forName(paramString1), paramObject1, paramString2, paramObject2);
      return true;
    }
    catch (ClassNotFoundException paramString1)
    {
      return false;
    }
    catch (IllegalArgumentException paramString1)
    {
      for (;;) {}
    }
  }
}
