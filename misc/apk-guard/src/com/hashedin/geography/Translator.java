package com.hashedin.geography;

import java.io.InputStream;
import java.io.OutputStream;

public final class Translator
{
  public static void decode(String paramString, InputStream paramInputStream, OutputStream paramOutputStream)
  {
    paramString = paramString.toCharArray();
    int i = paramString[0];
    int j = paramString[1];
    int k = paramString[2];
    int i3 = paramString[3];
    int i4 = paramString[4];
    int i5 = paramString[5];
    int i6 = paramString[6];
    int i7 = paramString[7];
    int m = paramString[8];
    int n = paramString[9];
    int i1 = paramString[10];
    int i2 = paramString[11];
    paramString = new int[4];
    paramString[0] = (i | j << 16);
    paramString[1] = (i3 << 16 | k);
    paramString[2] = (i5 << 16 | i4);
    paramString[3] = (i7 << 16 | i6);
    int[] arrayOfInt1 = new int[27];
    i = 0;
    j = paramString[0];
    arrayOfInt1[0] = j;
    int[] arrayOfInt2 = new int[3];
    arrayOfInt2[0] = paramString[1];
    arrayOfInt2[1] = paramString[2];
    arrayOfInt2[2] = paramString[3];
    while (i < 26)
    {
      k = i % 3;
      arrayOfInt2[k] = ((arrayOfInt2[k] >>> 8 | arrayOfInt2[k] << 24) + j ^ i);
      j = (j << 3 | j >>> 29) ^ arrayOfInt2[k];
      i += 1;
      arrayOfInt1[i] = j;
    }
    paramString = new byte['?'];
    for (i = 0;; i = j)
    {
      i3 = paramInputStream.read(paramString);
      if (i3 < 0) {
        break;
      }
      k = 0;
      j = i;
      while (j < i + i3)
      {
        i4 = j % 8 / 4;
        paramString[k] = ((byte)(byte)((byte)(new int[] { n << 16 | m, i2 << 16 | i1 }[i4] >> (j % 4 << 3)) ^ paramString[k]));
        j += 1;
        k += 1;
      }
      paramOutputStream.write(paramString, 0, i3);
    }
  }
}
