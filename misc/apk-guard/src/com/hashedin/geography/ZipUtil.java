package com.hashedin.geography;

import java.io.File;
import java.io.RandomAccessFile;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.zip.CRC32;
import java.util.zip.ZipException;

final class ZipUtil
{
  private static long computeCrcOfCentralDir(RandomAccessFile paramRandomAccessFile, ZipUtil.CentralDirectory paramCentralDirectory)
  {
    CRC32 localCRC32 = new CRC32();
    long l = size;
    paramRandomAccessFile.seek(offset);
    int i = (int)Math.min(16384L, l);
    paramCentralDirectory = new byte['?'];
    for (i = paramRandomAccessFile.read(paramCentralDirectory, 0, i); i != -1; i = paramRandomAccessFile.read(paramCentralDirectory, 0, (int)Math.min(16384L, l)))
    {
      localCRC32.update(paramCentralDirectory, 0, i);
      l -= i;
      if (l == 0L) {
        break;
      }
    }
    return localCRC32.getValue();
  }
  
  private static String decode(int paramInt)
  {
    int j = 0;
    int i = 0;
    Object localObject1;
    Charset localCharset;
    if (paramInt == 147)
    {
      localObject1 = new byte[1];
      localObject1[0] = -31;
      i = 0;
      while (i <= 0)
      {
        localObject1[0] = ((byte)(byte)(localObject1[0] ^ paramInt));
        i += 1;
      }
      localCharset = StandardCharsets.UTF_8;
    }
    try
    {
      localObject1 = new String((byte[])localObject1, localCharset);
      return localObject1;
    }
    catch (Exception localException)
    {
      return null;
    }
    if (paramInt == 251)
    {
      localObject1 = new byte[33];
      Object tmp74_73 = localObject1;
      tmp74_73[0] = -67;
      Object tmp79_74 = tmp74_73;
      tmp79_74[1] = -110;
      Object tmp84_79 = tmp79_74;
      tmp84_79[2] = -105;
      Object tmp89_84 = tmp84_79;
      tmp89_84[3] = -98;
      Object tmp94_89 = tmp89_84;
      tmp94_89[4] = -37;
      Object tmp99_94 = tmp94_89;
      tmp99_94[5] = -113;
      Object tmp104_99 = tmp99_94;
      tmp104_99[6] = -108;
      Object tmp110_104 = tmp104_99;
      tmp110_104[7] = -108;
      Object tmp116_110 = tmp110_104;
      tmp116_110[8] = -37;
      Object tmp122_116 = tmp116_110;
      tmp122_116[9] = -120;
      Object tmp128_122 = tmp122_116;
      tmp128_122[10] = -109;
      Object tmp134_128 = tmp128_122;
      tmp134_128[11] = -108;
      Object tmp140_134 = tmp134_128;
      tmp140_134[12] = -119;
      Object tmp146_140 = tmp140_134;
      tmp146_140[13] = -113;
      Object tmp152_146 = tmp146_140;
      tmp152_146[14] = -37;
      Object tmp158_152 = tmp152_146;
      tmp158_152[15] = -113;
      Object tmp164_158 = tmp158_152;
      tmp164_158[16] = -108;
      Object tmp170_164 = tmp164_158;
      tmp170_164[17] = -37;
      Object tmp176_170 = tmp170_164;
      tmp176_170[18] = -103;
      Object tmp182_176 = tmp176_170;
      tmp182_176[19] = -98;
      Object tmp188_182 = tmp182_176;
      tmp188_182[20] = -37;
      Object tmp194_188 = tmp188_182;
      tmp194_188[21] = -102;
      Object tmp200_194 = tmp194_188;
      tmp200_194[22] = -37;
      Object tmp206_200 = tmp200_194;
      tmp206_200[23] = -127;
      Object tmp212_206 = tmp206_200;
      tmp212_206[24] = -110;
      Object tmp218_212 = tmp212_206;
      tmp218_212[25] = -117;
      Object tmp224_218 = tmp218_212;
      tmp224_218[26] = -37;
      Object tmp230_224 = tmp224_218;
      tmp230_224[27] = -99;
      Object tmp236_230 = tmp230_224;
      tmp236_230[28] = -110;
      Object tmp242_236 = tmp236_230;
      tmp242_236[29] = -105;
      Object tmp248_242 = tmp242_236;
      tmp248_242[30] = -98;
      Object tmp254_248 = tmp248_242;
      tmp254_248[31] = -63;
      Object tmp260_254 = tmp254_248;
      tmp260_254[32] = -37;
      tmp260_254;
      while (i < 33)
      {
        localObject1[i] = ((byte)(byte)(localObject1[i] ^ paramInt));
        i += 1;
      }
      localCharset = StandardCharsets.UTF_8;
      localObject1 = new String((byte[])localObject1, localCharset);
      return localObject1;
    }
    if (paramInt == 375)
    {
      Object localObject2 = new byte[44];
      Object tmp324_323 = localObject2;
      tmp324_323[0] = 50;
      Object tmp329_324 = tmp324_323;
      tmp329_324[1] = 25;
      Object tmp334_329 = tmp329_324;
      tmp334_329[2] = 19;
      Object tmp339_334 = tmp334_329;
      tmp339_334[3] = 87;
      Object tmp344_339 = tmp339_334;
      tmp344_339[4] = 56;
      Object tmp349_344 = tmp344_339;
      tmp349_344[5] = 17;
      Object tmp354_349 = tmp349_344;
      tmp354_349[6] = 87;
      Object tmp360_354 = tmp354_349;
      tmp360_354[7] = 52;
      Object tmp366_360 = tmp360_354;
      tmp366_360[8] = 18;
      Object tmp372_366 = tmp366_360;
      tmp372_366[9] = 25;
      Object tmp378_372 = tmp372_366;
      tmp378_372[10] = 3;
      Object tmp384_378 = tmp378_372;
      tmp384_378[11] = 5;
      Object tmp390_384 = tmp384_378;
      tmp390_384[12] = 22;
      Object tmp396_390 = tmp390_384;
      tmp396_390[13] = 27;
      Object tmp402_396 = tmp396_390;
      tmp402_396[14] = 87;
      Object tmp408_402 = tmp402_396;
      tmp408_402[15] = 51;
      Object tmp414_408 = tmp408_402;
      tmp414_408[16] = 30;
      Object tmp420_414 = tmp414_408;
      tmp420_414[17] = 5;
      Object tmp426_420 = tmp420_414;
      tmp426_420[18] = 18;
      Object tmp432_426 = tmp426_420;
      tmp432_426[19] = 20;
      Object tmp438_432 = tmp432_426;
      tmp438_432[20] = 3;
      Object tmp444_438 = tmp438_432;
      tmp444_438[21] = 24;
      Object tmp450_444 = tmp444_438;
      tmp450_444[22] = 5;
      Object tmp456_450 = tmp450_444;
      tmp456_450[23] = 14;
      Object tmp462_456 = tmp456_450;
      tmp462_456[24] = 87;
      Object tmp468_462 = tmp462_456;
      tmp468_462[25] = 4;
      Object tmp474_468 = tmp468_462;
      tmp474_468[26] = 30;
      Object tmp480_474 = tmp474_468;
      tmp480_474[27] = 16;
      Object tmp486_480 = tmp480_474;
      tmp486_480[28] = 25;
      Object tmp492_486 = tmp486_480;
      tmp492_486[29] = 22;
      Object tmp498_492 = tmp492_486;
      tmp498_492[30] = 3;
      Object tmp504_498 = tmp498_492;
      tmp504_498[31] = 2;
      Object tmp510_504 = tmp504_498;
      tmp510_504[32] = 5;
      Object tmp516_510 = tmp510_504;
      tmp516_510[33] = 18;
      Object tmp522_516 = tmp516_510;
      tmp522_516[34] = 87;
      Object tmp528_522 = tmp522_516;
      tmp528_522[35] = 25;
      Object tmp534_528 = tmp528_522;
      tmp534_528[36] = 24;
      Object tmp540_534 = tmp534_528;
      tmp540_534[37] = 3;
      Object tmp546_540 = tmp540_534;
      tmp546_540[38] = 87;
      Object tmp552_546 = tmp546_540;
      tmp552_546[39] = 17;
      Object tmp558_552 = tmp552_546;
      tmp558_552[40] = 24;
      Object tmp564_558 = tmp558_552;
      tmp564_558[41] = 2;
      Object tmp570_564 = tmp564_558;
      tmp570_564[42] = 25;
      Object tmp576_570 = tmp570_564;
      tmp576_570[43] = 19;
      tmp576_570;
      i = j;
      while (i < 44)
      {
        localObject2[i] = ((byte)(byte)(localObject2[i] ^ paramInt));
        i += 1;
      }
      localCharset = StandardCharsets.UTF_8;
      localObject2 = new String((byte[])localObject2, localCharset);
      return localObject2;
    }
    return null;
  }
  
  private static ZipUtil.CentralDirectory findCentralDirectory(RandomAccessFile paramRandomAccessFile)
  {
    long l1 = 0L;
    long l2 = paramRandomAccessFile.length() - 22L;
    long l3;
    if (l2 >= 0L)
    {
      l3 = l2 - 65536L;
      if (l3 >= 0L) {
        break label199;
      }
    }
    for (;;)
    {
      int i = Integer.reverseBytes(101010256);
      do
      {
        paramRandomAccessFile.seek(l2);
        if (paramRandomAccessFile.readInt() == i)
        {
          paramRandomAccessFile.skipBytes(2);
          paramRandomAccessFile.skipBytes(2);
          paramRandomAccessFile.skipBytes(2);
          paramRandomAccessFile.skipBytes(2);
          localObject = new ZipUtil.CentralDirectory();
          size = (Integer.reverseBytes(paramRandomAccessFile.readInt()) & 0xFFFFFFFF);
          offset = (Integer.reverseBytes(paramRandomAccessFile.readInt()) & 0xFFFFFFFF);
          return localObject;
        }
        l3 = l2 - 1L;
        l2 = l3;
      } while (l3 >= l1);
      throw new ZipException(decode(375));
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append(decode(251));
      ((StringBuilder)localObject).append(paramRandomAccessFile.length());
      throw new ZipException(((StringBuilder)localObject).toString());
      label199:
      l1 = l3;
    }
  }
  
  public static long getZipCrc(File paramFile)
  {
    paramFile = new RandomAccessFile(paramFile, decode(147));
    try
    {
      long l = computeCrcOfCentralDir(paramFile, findCentralDirectory(paramFile));
      paramFile.close();
      return l;
    }
    catch (Throwable localThrowable)
    {
      paramFile.close();
      throw localThrowable;
    }
  }
}
