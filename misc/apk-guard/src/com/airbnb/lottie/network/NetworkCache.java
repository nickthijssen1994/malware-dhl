package com.airbnb.lottie.network;

import android.content.Context;
import com.airbnb.lottie.utils.Logger;
import java.io.File;
import java.io.FileNotFoundException;

public class NetworkCache
{
  private final Context appContext;
  
  public NetworkCache(Context paramContext)
  {
    appContext = paramContext.getApplicationContext();
  }
  
  private static String filenameForUrl(String paramString, FileExtension paramFileExtension, boolean paramBoolean)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("lottie_cache_");
    localStringBuilder.append(paramString.replaceAll("\\W+", ""));
    if (paramBoolean) {
      paramString = paramFileExtension.tempExtension();
    } else {
      paramString = extension;
    }
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  private File getCachedFile(String paramString)
    throws FileNotFoundException
  {
    File localFile = new File(parentDir(), filenameForUrl(paramString, FileExtension.JSON, false));
    if (localFile.exists()) {
      return localFile;
    }
    paramString = new File(parentDir(), filenameForUrl(paramString, FileExtension.HTML, false));
    if (paramString.exists()) {
      return paramString;
    }
    return null;
  }
  
  private File parentDir()
  {
    File localFile = new File(appContext.getCacheDir(), "lottie_network_cache");
    if (localFile.isFile()) {
      localFile.delete();
    }
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    return localFile;
  }
  
  public void clear()
  {
    File localFile = parentDir();
    if (localFile.exists())
    {
      File[] arrayOfFile = localFile.listFiles();
      if ((arrayOfFile != null) && (arrayOfFile.length > 0))
      {
        arrayOfFile = localFile.listFiles();
        int j = arrayOfFile.length;
        int i = 0;
        while (i < j)
        {
          arrayOfFile[i].delete();
          i += 1;
        }
      }
      localFile.delete();
    }
  }
  
  /* Error */
  androidx.core.util.Pair fetch(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokespecial 104	com/airbnb/lottie/network/NetworkCache:getCachedFile	(Ljava/lang/String;)Ljava/io/File;
    //   5: astore_3
    //   6: aload_3
    //   7: ifnonnull +5 -> 12
    //   10: aconst_null
    //   11: areturn
    //   12: new 106	java/io/FileInputStream
    //   15: dup
    //   16: aload_3
    //   17: invokespecial 109	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   20: astore 4
    //   22: aload_3
    //   23: invokevirtual 112	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   26: ldc 114
    //   28: invokevirtual 118	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   31: ifeq +10 -> 41
    //   34: getstatic 80	com/airbnb/lottie/network/FileExtension:HTML	Lcom/airbnb/lottie/network/FileExtension;
    //   37: astore_2
    //   38: goto +7 -> 45
    //   41: getstatic 68	com/airbnb/lottie/network/FileExtension:JSON	Lcom/airbnb/lottie/network/FileExtension;
    //   44: astore_2
    //   45: new 24	java/lang/StringBuilder
    //   48: dup
    //   49: invokespecial 25	java/lang/StringBuilder:<init>	()V
    //   52: astore 5
    //   54: aload 5
    //   56: ldc 120
    //   58: invokevirtual 31	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   61: pop
    //   62: aload 5
    //   64: aload_1
    //   65: invokevirtual 31	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   68: pop
    //   69: aload 5
    //   71: ldc 122
    //   73: invokevirtual 31	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   76: pop
    //   77: aload 5
    //   79: aload_3
    //   80: invokevirtual 112	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   83: invokevirtual 31	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   86: pop
    //   87: aload 5
    //   89: invokevirtual 54	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   92: invokestatic 128	com/airbnb/lottie/utils/Logger:debug	(Ljava/lang/String;)V
    //   95: new 130	androidx/core/util/Pair
    //   98: dup
    //   99: aload_2
    //   100: aload 4
    //   102: invokespecial 133	androidx/core/util/Pair:<init>	(Ljava/lang/Object;Ljava/lang/Object;)V
    //   105: areturn
    //   106: astore_1
    //   107: aconst_null
    //   108: areturn
    //   109: astore_1
    //   110: aconst_null
    //   111: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	112	0	this	NetworkCache
    //   0	112	1	paramString	String
    //   37	63	2	localFileExtension	FileExtension
    //   5	75	3	localFile	File
    //   20	81	4	localFileInputStream	java.io.FileInputStream
    //   52	36	5	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   0	6	106	java/io/FileNotFoundException
    //   12	22	109	java/io/FileNotFoundException
  }
  
  void renameTempFile(String paramString, FileExtension paramFileExtension)
  {
    paramString = filenameForUrl(paramString, paramFileExtension, true);
    paramString = new File(parentDir(), paramString);
    paramFileExtension = new File(paramString.getAbsolutePath().replace(".temp", ""));
    boolean bool = paramString.renameTo(paramFileExtension);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Copying temp file to real file (");
    localStringBuilder.append(paramFileExtension);
    localStringBuilder.append(")");
    Logger.debug(localStringBuilder.toString());
    if (!bool)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Unable to rename cache file ");
      localStringBuilder.append(paramString.getAbsolutePath());
      localStringBuilder.append(" to ");
      localStringBuilder.append(paramFileExtension.getAbsolutePath());
      localStringBuilder.append(".");
      Logger.warning(localStringBuilder.toString());
    }
  }
  
  /* Error */
  File writeTempCacheFile(String paramString, java.io.InputStream paramInputStream, FileExtension paramFileExtension)
    throws java.io.IOException
  {
    // Byte code:
    //   0: aload_1
    //   1: aload_3
    //   2: iconst_1
    //   3: invokestatic 70	com/airbnb/lottie/network/NetworkCache:filenameForUrl	(Ljava/lang/String;Lcom/airbnb/lottie/network/FileExtension;Z)Ljava/lang/String;
    //   6: astore_1
    //   7: new 60	java/io/File
    //   10: dup
    //   11: aload_0
    //   12: invokespecial 64	com/airbnb/lottie/network/NetworkCache:parentDir	()Ljava/io/File;
    //   15: aload_1
    //   16: invokespecial 73	java/io/File:<init>	(Ljava/io/File;Ljava/lang/String;)V
    //   19: astore_3
    //   20: new 171	java/io/FileOutputStream
    //   23: dup
    //   24: aload_3
    //   25: invokespecial 172	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   28: astore_1
    //   29: sipush 1024
    //   32: newarray byte
    //   34: astore 5
    //   36: aload_2
    //   37: aload 5
    //   39: invokevirtual 178	java/io/InputStream:read	([B)I
    //   42: istore 4
    //   44: iload 4
    //   46: iconst_m1
    //   47: if_icmpeq +15 -> 62
    //   50: aload_1
    //   51: aload 5
    //   53: iconst_0
    //   54: iload 4
    //   56: invokevirtual 184	java/io/OutputStream:write	([BII)V
    //   59: goto -23 -> 36
    //   62: aload_1
    //   63: invokevirtual 187	java/io/OutputStream:flush	()V
    //   66: aload_1
    //   67: invokevirtual 190	java/io/OutputStream:close	()V
    //   70: aload_2
    //   71: invokevirtual 191	java/io/InputStream:close	()V
    //   74: aload_3
    //   75: areturn
    //   76: astore_3
    //   77: aload_1
    //   78: invokevirtual 190	java/io/OutputStream:close	()V
    //   81: aload_3
    //   82: athrow
    //   83: astore_1
    //   84: aload_2
    //   85: invokevirtual 191	java/io/InputStream:close	()V
    //   88: aload_1
    //   89: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	90	0	this	NetworkCache
    //   0	90	1	paramString	String
    //   0	90	2	paramInputStream	java.io.InputStream
    //   0	90	3	paramFileExtension	FileExtension
    //   42	13	4	i	int
    //   34	18	5	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   29	36	76	java/lang/Throwable
    //   36	44	76	java/lang/Throwable
    //   50	59	76	java/lang/Throwable
    //   62	66	76	java/lang/Throwable
    //   20	29	83	java/lang/Throwable
    //   66	70	83	java/lang/Throwable
    //   77	83	83	java/lang/Throwable
  }
}
