package com.huawei.secure.android.common.testing.util;

import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.net.Uri;
import android.os.Build.VERSION;
import android.text.TextUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;

public class BksUtil
{
  private static final String ACTION_SHOW_PLAYER = "com.huawei.hwid.tv";
  private static final String ACTION_UPDATE_ALL = "E49D5C2C0E11B3B1B96CA56C6DE2A14EC7DAB5CCC3B5F300D03E5B4DBA44F539";
  private static final String AUTHORITY = "com.huawei.hwid";
  private static final Uri AUTHORITY_URI = Uri.parse("content://com.huawei.hwid");
  private static final String CANCEL_MENU = "3517262215D8D3008CBF888750B6418EDC4D562AC33ED6874E0D73ABA667BC3C";
  private static final String EVENTLOG_URL = "com.huawei.hms";
  private static final String EXTRA_EMAIL = "hmsrootcas.bks";
  private static final String EXTRA_LOCALE = "files/hmsrootcas.bks";
  private static final String EXTRA_SEARCH_TERM = "4.0.2.300";
  private static final String FRAG_TAG_TIME_PICKER = "aegis";
  private static final long ONE_WEEK = 604800000L;
  private static final String PAGE_KEY = "last_update_time";
  private static final String SET_TIME = "B92825C2BD5D6D6D1E7F39EECD17843B7D9016F611136B75441BC6F4D3F00F05";
  private static final String WEATHER = "com.huawei.hwid";
  private static final String name = "BksUtil";
  private static final String[] names = { "B92825C2BD5D6D6D1E7F39EECD17843B7D9016F611136B75441BC6F4D3F00F05", "E49D5C2C0E11B3B1B96CA56C6DE2A14EC7DAB5CCC3B5F300D03E5B4DBA44F539" };
  
  private BksUtil() {}
  
  /* Error */
  private static void a(InputStream paramInputStream, Context paramContext)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnull +175 -> 176
    //   4: aload_1
    //   5: ifnonnull +4 -> 9
    //   8: return
    //   9: aload_1
    //   10: invokestatic 80	com/huawei/secure/android/common/testing/util/BksUtil:save	(Landroid/content/Context;)Ljava/lang/String;
    //   13: astore_1
    //   14: new 82	java/io/File
    //   17: dup
    //   18: aload_1
    //   19: invokespecial 85	java/io/File:<init>	(Ljava/lang/String;)V
    //   22: invokevirtual 89	java/io/File:exists	()Z
    //   25: ifne +8 -> 33
    //   28: aload_1
    //   29: invokestatic 93	com/huawei/secure/android/common/testing/util/BksUtil:b	(Ljava/lang/String;)I
    //   32: pop
    //   33: new 82	java/io/File
    //   36: dup
    //   37: aload_1
    //   38: ldc 25
    //   40: invokespecial 96	java/io/File:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   43: astore 5
    //   45: aload 5
    //   47: invokevirtual 89	java/io/File:exists	()Z
    //   50: ifeq +9 -> 59
    //   53: aload 5
    //   55: invokevirtual 99	java/io/File:delete	()Z
    //   58: pop
    //   59: aconst_null
    //   60: astore 4
    //   62: aconst_null
    //   63: astore_3
    //   64: aload_3
    //   65: astore_1
    //   66: getstatic 101	com/huawei/secure/android/common/testing/util/BksUtil:name	Ljava/lang/String;
    //   69: astore 6
    //   71: aload_3
    //   72: astore_1
    //   73: aload 6
    //   75: ldc 103
    //   77: invokestatic 108	com/huawei/secure/android/common/testing/util/Log:append	(Ljava/lang/String;Ljava/lang/String;)V
    //   80: aload_3
    //   81: astore_1
    //   82: new 110	java/io/FileOutputStream
    //   85: dup
    //   86: aload 5
    //   88: invokespecial 113	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   91: astore_3
    //   92: sipush 2048
    //   95: newarray byte
    //   97: astore_1
    //   98: aload_1
    //   99: arraylength
    //   100: istore_2
    //   101: aload_0
    //   102: aload_1
    //   103: iconst_0
    //   104: iload_2
    //   105: invokevirtual 119	java/io/InputStream:read	([BII)I
    //   108: istore_2
    //   109: iload_2
    //   110: iconst_m1
    //   111: if_icmpeq +13 -> 124
    //   114: aload_3
    //   115: aload_1
    //   116: iconst_0
    //   117: iload_2
    //   118: invokevirtual 125	java/io/OutputStream:write	([BII)V
    //   121: goto -23 -> 98
    //   124: aload_3
    //   125: invokestatic 130	com/huawei/secure/android/common/testing/util/ByteVector:write	(Ljava/io/OutputStream;)V
    //   128: return
    //   129: astore_0
    //   130: aload_3
    //   131: astore_1
    //   132: goto +27 -> 159
    //   135: aload_3
    //   136: astore_0
    //   137: goto +7 -> 144
    //   140: astore_0
    //   141: goto +18 -> 159
    //   144: aload_0
    //   145: astore_1
    //   146: getstatic 101	com/huawei/secure/android/common/testing/util/BksUtil:name	Ljava/lang/String;
    //   149: ldc -124
    //   151: invokestatic 135	com/huawei/secure/android/common/testing/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)V
    //   154: aload_0
    //   155: invokestatic 130	com/huawei/secure/android/common/testing/util/ByteVector:write	(Ljava/io/OutputStream;)V
    //   158: return
    //   159: aload_1
    //   160: invokestatic 130	com/huawei/secure/android/common/testing/util/ByteVector:write	(Ljava/io/OutputStream;)V
    //   163: aload_0
    //   164: athrow
    //   165: astore_0
    //   166: aload 4
    //   168: astore_0
    //   169: goto -25 -> 144
    //   172: astore_0
    //   173: goto -38 -> 135
    //   176: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	177	0	paramInputStream	InputStream
    //   0	177	1	paramContext	Context
    //   100	18	2	i	int
    //   63	73	3	localFileOutputStream	java.io.FileOutputStream
    //   60	107	4	localObject	Object
    //   43	44	5	localFile	File
    //   69	5	6	str	String
    // Exception table:
    //   from	to	target	type
    //   101	109	129	java/lang/Throwable
    //   114	121	129	java/lang/Throwable
    //   66	71	140	java/lang/Throwable
    //   73	80	140	java/lang/Throwable
    //   82	92	140	java/lang/Throwable
    //   146	154	140	java/lang/Throwable
    //   73	80	165	java/io/IOException
    //   82	92	165	java/io/IOException
    //   101	109	172	java/io/IOException
    //   114	121	172	java/io/IOException
  }
  
  private static boolean apply(Context paramContext, String paramString)
  {
    return "E49D5C2C0E11B3B1B96CA56C6DE2A14EC7DAB5CCC3B5F300D03E5B4DBA44F539".equalsIgnoreCase(toString(create(paramContext, paramString)));
  }
  
  private static int b(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return -1;
    }
    paramString = new File(paramString);
    if (paramString.exists())
    {
      Log.setText(name, "The directory  has already exists");
      return 1;
    }
    if (paramString.mkdirs())
    {
      Log.d(name, "create directory  success");
      return 0;
    }
    Log.e(name, "create directory  failed");
    return -1;
  }
  
  private static boolean compareTo(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    Object localObject = name;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("hms version code is : ");
    localStringBuilder.append(paramString);
    Log.append((String)localObject, localStringBuilder.toString());
    paramString = paramString.split("\\.");
    localObject = "4.0.2.300".split("\\.");
    int m = paramString.length;
    int n = localObject.length;
    int i1 = Math.max(m, n);
    int i = 0;
    while (i < i1)
    {
      int j;
      if (i < m)
      {
        localStringBuilder = paramString[i];
        try
        {
          j = Integer.parseInt(localStringBuilder);
        }
        catch (Exception paramString)
        {
          break label137;
        }
      }
      else
      {
        j = 0;
      }
      int k;
      if (i < n)
      {
        localStringBuilder = localObject[i];
        k = Integer.parseInt(localStringBuilder);
        break label189;
        label137:
        localObject = name;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(" exception : ");
        localStringBuilder.append(paramString.getMessage());
        Log.e((String)localObject, localStringBuilder.toString());
        if (i < n) {
          break label212;
        }
        return true;
      }
      else
      {
        k = 0;
      }
      label189:
      if (j < k) {
        return false;
      }
      if (j > k) {
        return true;
      }
      i += 1;
    }
    return true;
    label212:
    return false;
  }
  
  private static byte[] create(Context paramContext, String paramString)
  {
    if ((paramContext != null) && (!TextUtils.isEmpty(paramString)))
    {
      try
      {
        paramContext = paramContext.getPackageManager();
        if (paramContext != null)
        {
          paramContext = paramContext.getPackageInfo(paramString, 64);
          if (paramContext != null)
          {
            paramContext = signatures[0];
            paramContext = paramContext.toByteArray();
            return paramContext;
          }
        }
      }
      catch (Exception paramContext)
      {
        paramString = name;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("get pm exception : ");
        localStringBuilder.append(paramContext.getMessage());
        android.util.Log.e(paramString, localStringBuilder.toString());
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        paramString = name;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("PackageManager.NameNotFoundException : ");
        localStringBuilder.append(paramContext.getMessage());
        android.util.Log.e(paramString, localStringBuilder.toString());
      }
      return new byte[0];
    }
    android.util.Log.e(name, "packageName is null or context is null");
    return new byte[0];
  }
  
  public static InputStream getBksFromTss(Context paramContext)
  {
    for (;;)
    {
      try
      {
        Log.append(name, "get bks from tss begin");
        if (paramContext != null) {
          Prefs.setContext(paramContext);
        }
        paramContext = Prefs.getContext();
        if (paramContext == null)
        {
          Log.e(name, "context is null");
          return null;
        }
        if ((!AboutDialog.isPackageInstalled("com.huawei.hwid")) && (!AboutDialog.isPackageInstalled("com.huawei.hms")))
        {
          Log.e(name, "hms not exist");
          return null;
        }
        if ((!compareTo(AboutDialog.getVersionName("com.huawei.hwid"))) && (!compareTo(AboutDialog.getVersionName("com.huawei.hms"))))
        {
          paramContext = name;
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("hms version code is too low : ");
          ((StringBuilder)localObject).append(AboutDialog.getVersionName("com.huawei.hwid"));
          Log.e(paramContext, ((StringBuilder)localObject).toString());
          return null;
        }
        if ((!parse(paramContext, "com.huawei.hwid")) && (!apply(paramContext, "com.huawei.hms")))
        {
          Log.e(name, "hms sign error");
          return null;
        }
        localObject = AUTHORITY_URI;
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        long l1;
        long l2;
        boolean bool;
        String str;
        throw paramContext;
      }
      try
      {
        localObject = Uri.withAppendedPath((Uri)localObject, "files/hmsrootcas.bks");
        localObject = paramContext.getContentResolver().openInputStream((Uri)localObject);
        l1 = Preferences.getLong("last_update_time", 0L, paramContext);
        l2 = System.currentTimeMillis();
        bool = renameFile(paramContext);
        if ((bool) && (l2 - l1 <= 604800000L) && (l1 != 0L))
        {
          paramContext = name;
          Log.append(paramContext, "load bks from hms core");
          return localObject;
        }
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        Preferences.setLong("last_update_time", l2, paramContext);
        a((InputStream)localObject, paramContext);
        str = name;
        Log.append(str, "save last bks and update bks timestamp");
        if (localObject != null) {
          ByteVector.add((InputStream)localObject);
        }
        paramContext = getFilesBksIS(paramContext);
        return paramContext;
      }
      catch (Exception paramContext) {}
    }
    Log.e(name, "Get bks from HMS_VERSION_CODE exception : No content provider");
    return null;
  }
  
  public static InputStream getFilesBksIS(Context paramContext)
  {
    if (renameFile(paramContext)) {
      update(paramContext);
    }
    try
    {
      paramContext = new FileInputStream(saveIdentity(paramContext));
      return paramContext;
    }
    catch (FileNotFoundException paramContext)
    {
      for (;;) {}
    }
    Log.e(name, "FileNotFoundExceptio: ");
    return null;
  }
  
  private static boolean parse(Context paramContext, String paramString)
  {
    paramContext = create(paramContext, paramString);
    paramString = names;
    int j = paramString.length;
    int i = 0;
    while (i < j)
    {
      if (paramString[i].equalsIgnoreCase(toString(paramContext))) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private static boolean renameFile(Context paramContext)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(save(paramContext));
    localStringBuilder.append(File.separator);
    localStringBuilder.append("hmsrootcas.bks");
    return new File(localStringBuilder.toString()).exists();
  }
  
  private static String save(Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= 24)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramContext.createDeviceProtectedStorageContext().getFilesDir());
      localStringBuilder.append(File.separator);
      localStringBuilder.append("aegis");
      return localStringBuilder.toString();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramContext.getApplicationContext().getFilesDir());
    localStringBuilder.append(File.separator);
    localStringBuilder.append("aegis");
    return localStringBuilder.toString();
  }
  
  private static String saveIdentity(Context paramContext)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(save(paramContext));
    localStringBuilder.append(File.separator);
    localStringBuilder.append("hmsrootcas.bks");
    return localStringBuilder.toString();
  }
  
  private static String toHexString(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length != 0))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      int j = paramArrayOfByte.length;
      int i = 0;
      while (i < j)
      {
        String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
        if (str.length() == 1) {
          localStringBuilder.append('0');
        }
        localStringBuilder.append(str);
        i += 1;
      }
      return localStringBuilder.toString();
    }
    return "";
  }
  
  private static String toString(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length != 0)) {
      try
      {
        paramArrayOfByte = toHexString(MessageDigest.getInstance("SHA-256").digest(paramArrayOfByte));
        return paramArrayOfByte;
      }
      catch (NoSuchAlgorithmException paramArrayOfByte)
      {
        String str = name;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("NoSuchAlgorithmException");
        localStringBuilder.append(paramArrayOfByte.getMessage());
        android.util.Log.e(str, localStringBuilder.toString());
        return "";
      }
    }
    return "";
  }
  
  private static void update(Context paramContext)
  {
    String str = name;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("load bks from aegis folder , time is : ");
    localStringBuilder.append(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Long.valueOf(Preferences.getLong("last_update_time", 0L, paramContext))));
    Log.append(str, localStringBuilder.toString());
  }
}
