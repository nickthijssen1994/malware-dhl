package com.huawei.secure.android.common.testing;

import android.content.Context;
import android.text.TextUtils;
import android.webkit.SslErrorHandler;
import com.huawei.secure.android.common.testing.util.ByteVector;
import com.huawei.secure.android.common.testing.util.Log;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import okhttp3.Call;
import okhttp3.OkHttpClient.Builder;
import okhttp3.Request;
import okhttp3.Request.Builder;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.scheme.SocketFactory;
import org.apache.http.conn.ssl.X509HostnameVerifier;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class WebViewSSLCheckThread
  extends Thread
{
  private static final String TAG = "WebViewSSLCheckThread";
  private Callback callback;
  private org.apache.http.conn.ssl.SSLSocketFactory client;
  private Context context;
  private X509HostnameVerifier delegate;
  private HostnameVerifier hostnameVerifier;
  private javax.net.ssl.SSLSocketFactory sslSocketFactory;
  private SslErrorHandler this$0;
  private String uri;
  
  public WebViewSSLCheckThread() {}
  
  public WebViewSSLCheckThread(SslErrorHandler paramSslErrorHandler, String paramString, Context paramContext)
    throws CertificateException, NoSuchAlgorithmException, IOException, KeyManagementException, KeyStoreException, IllegalAccessException
  {
    setSslErrorHandler(paramSslErrorHandler);
    setUrl(paramString);
    setContext(paramContext);
    setSslSocketFactory(new SecureSSLSocketFactory(new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(paramContext)));
    setHostnameVerifier(SecureSSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
    try
    {
      setApacheSSLSocketFactory(new SecureApacheSSLSocketFactory(null, new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(paramContext)));
    }
    catch (UnrecoverableKeyException paramSslErrorHandler)
    {
      paramString = TAG;
      paramContext = new StringBuilder();
      paramContext.append("WebViewSSLCheckThread: UnrecoverableKeyException : ");
      paramContext.append(paramSslErrorHandler.getMessage());
      Log.e(paramString, paramContext.toString());
    }
    setApacheHostnameVerifier(SecureApacheSSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
  }
  
  public WebViewSSLCheckThread(SslErrorHandler paramSslErrorHandler, String paramString, javax.net.ssl.SSLSocketFactory paramSSLSocketFactory, HostnameVerifier paramHostnameVerifier)
  {
    setSslErrorHandler(paramSslErrorHandler);
    setUrl(paramString);
    setSslSocketFactory(paramSSLSocketFactory);
    setHostnameVerifier(paramHostnameVerifier);
  }
  
  public WebViewSSLCheckThread(SslErrorHandler paramSslErrorHandler, String paramString, org.apache.http.conn.ssl.SSLSocketFactory paramSSLSocketFactory, X509HostnameVerifier paramX509HostnameVerifier)
  {
    setSslErrorHandler(paramSslErrorHandler);
    setUrl(paramString);
    setApacheSSLSocketFactory(paramSSLSocketFactory);
    setApacheHostnameVerifier(paramX509HostnameVerifier);
  }
  
  public WebViewSSLCheckThread(SslErrorHandler paramSslErrorHandler, String paramString, org.apache.http.conn.ssl.SSLSocketFactory paramSSLSocketFactory, X509HostnameVerifier paramX509HostnameVerifier, Callback paramCallback, Context paramContext)
  {
    this$0 = paramSslErrorHandler;
    uri = paramString;
    client = paramSSLSocketFactory;
    delegate = paramX509HostnameVerifier;
    callback = paramCallback;
    context = paramContext;
  }
  
  public static void checkServerCertificateWithOK(SslErrorHandler paramSslErrorHandler, String paramString, Context paramContext)
  {
    checkServerCertificateWithOK(paramSslErrorHandler, paramString, paramContext, null);
  }
  
  public static void checkServerCertificateWithOK(SslErrorHandler paramSslErrorHandler, String paramString, Context paramContext, Callback paramCallback)
  {
    if ((paramSslErrorHandler != null) && (!TextUtils.isEmpty(paramString)) && (paramContext != null))
    {
      Object localObject1 = (OkHttpClient.Builder)ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder());
      try
      {
        Object localObject2 = new SecureSSLSocketFactory(new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(paramContext));
        ((SecureSSLSocketFactory)localObject2).setContext(paramContext);
        ((OkHttpClient.Builder)localObject1).sslSocketFactory((javax.net.ssl.SSLSocketFactory)localObject2, new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(paramContext));
        localObject2 = SecureSSLSocketFactory.STRICT_HOSTNAME_VERIFIER;
        ((OkHttpClient.Builder)localObject1).hostnameVerifier((HostnameVerifier)localObject2);
        localObject2 = new Request.Builder().url(paramString).build();
        localObject1 = ShooterOkhttp3Instrumentation.newCall(((OkHttpClient.Builder)localObject1).build(), (Request)localObject2);
        ((Call)localObject1).enqueue(new WebViewSSLCheckThread.1(paramCallback, paramContext, paramString, paramSslErrorHandler));
        return;
      }
      catch (Exception paramString)
      {
        paramContext = TAG;
        paramCallback = new StringBuilder();
        paramCallback.append("checkServerCertificateWithOK: exception : ");
        paramCallback.append(paramString.getMessage());
        Log.e(paramContext, paramCallback.toString());
        paramSslErrorHandler.cancel();
        return;
      }
    }
    Log.e(TAG, "checkServerCertificateWithOK: handler or url or context is null");
  }
  
  private void execute()
  {
    Log.append(TAG, "callbackProceed: ");
    Object localObject = callback;
    if (localObject != null)
    {
      ((Callback)localObject).onProceed(context, uri);
      return;
    }
    localObject = this$0;
    if (localObject != null) {
      ((SslErrorHandler)localObject).proceed();
    }
  }
  
  private void onCancel()
  {
    Log.append(TAG, "callbackCancel: ");
    Callback localCallback = callback;
    if (localCallback != null)
    {
      localCallback.onCancel(context, uri);
      return;
    }
    if (this$0 != null)
    {
      Log.append(TAG, "callbackCancel 2: ");
      this$0.cancel();
    }
  }
  
  public X509HostnameVerifier getApacheHostnameVerifier()
  {
    return delegate;
  }
  
  public org.apache.http.conn.ssl.SSLSocketFactory getApacheSSLSocketFactory()
  {
    return client;
  }
  
  public Callback getCallback()
  {
    return callback;
  }
  
  public Context getContext()
  {
    return context;
  }
  
  public HostnameVerifier getHostnameVerifier()
  {
    return hostnameVerifier;
  }
  
  public SslErrorHandler getSslErrorHandler()
  {
    return this$0;
  }
  
  public javax.net.ssl.SSLSocketFactory getSslSocketFactory()
  {
    return sslSocketFactory;
  }
  
  public String getUrl()
  {
    return uri;
  }
  
  public void run()
  {
    super.run();
    Object localObject4;
    boolean bool;
    Object localObject5;
    if ((client != null) && (delegate != null))
    {
      if ((this$0 != null) && (!TextUtils.isEmpty(uri))) {
        try
        {
          Object localObject1 = client;
          localObject4 = delegate;
          Log.e(TAG, "sslErrorHandler or url is null");
        }
        catch (Throwable localThrowable1)
        {
          try
          {
            ((org.apache.http.conn.ssl.SSLSocketFactory)localObject1).setHostnameVerifier((X509HostnameVerifier)localObject4);
            bool = client instanceof SecureApacheSSLSocketFactory;
            if (bool)
            {
              localObject1 = (SecureApacheSSLSocketFactory)client;
              localObject4 = context;
              ((SecureApacheSSLSocketFactory)localObject1).setContext((Context)localObject4);
            }
            localObject1 = new BasicHttpParams();
            localObject4 = (HttpParams)localObject1;
            HttpConnectionParams.setConnectionTimeout((HttpParams)localObject4, 30000);
            localObject4 = (HttpParams)localObject1;
            HttpConnectionParams.setSoTimeout((HttpParams)localObject4, 30000);
            localObject4 = new SchemeRegistry();
            localObject5 = client;
            ((SchemeRegistry)localObject4).register(new Scheme("https", (SocketFactory)localObject5, 443));
            localObject5 = PlainSocketFactory.getSocketFactory();
            localObject5 = (SocketFactory)localObject5;
            ((SchemeRegistry)localObject4).register(new Scheme("http", (SocketFactory)localObject5, 80));
            localObject5 = (HttpParams)localObject1;
            localObject4 = new ThreadSafeClientConnManager((HttpParams)localObject5, (SchemeRegistry)localObject4);
            localObject1 = (HttpParams)localObject1;
            localObject4 = new DefaultHttpClient((ClientConnectionManager)localObject4, (HttpParams)localObject1);
            localObject1 = new HttpGet();
            localObject5 = uri;
            ((HttpGet)localObject1).setURI(new URI((String)localObject5));
            localObject4 = (HttpClient)localObject4;
            localObject1 = ((HttpClient)localObject4).execute((HttpUriRequest)localObject1);
            localObject4 = TAG;
            localObject5 = new StringBuilder();
            ((StringBuilder)localObject5).append("status code is : ");
            ((StringBuilder)localObject5).append(((HttpResponse)localObject1).getStatusLine().getStatusCode());
            Log.append((String)localObject4, ((StringBuilder)localObject5).toString());
            ByteVector.read(null);
            execute();
            return;
          }
          catch (Exception localException1)
          {
            localObject4 = TAG;
            localObject5 = new StringBuilder();
            ((StringBuilder)localObject5).append("run: exception : ");
            ((StringBuilder)localObject5).append(localException1.getMessage());
            Log.e((String)localObject4, ((StringBuilder)localObject5).toString());
            onCancel();
            ByteVector.read(null);
            return;
          }
          localThrowable1 = localThrowable1;
          ByteVector.read(null);
          throw localException1;
        }
      }
      onCancel();
      return;
    }
    if ((sslSocketFactory != null) && (hostnameVerifier != null)) {
      try
      {
        Object localObject2 = uri;
        Throwable localThrowable3;
        Object localObject3;
        String str;
        StringBuilder localStringBuilder;
        onCancel();
      }
      catch (Throwable localThrowable2)
      {
        for (;;)
        {
          try
          {
            localObject2 = ShooterUrlConnectionInstrumentation.openConnection(new URL((String)localObject2).openConnection());
            localObject2 = (URLConnection)localObject2;
            bool = localObject2 instanceof HttpsURLConnection;
            if (bool)
            {
              localObject4 = (HttpsURLConnection)localObject2;
              localObject2 = localObject4;
            }
          }
          catch (Exception localException3)
          {
            localObject4 = null;
            localObject3 = localObject4;
            str = TAG;
            localObject3 = localObject4;
            localStringBuilder = new StringBuilder();
            localObject3 = localObject4;
            localStringBuilder.append("exception : ");
            localObject3 = localObject4;
            localStringBuilder.append(localException3.getMessage());
            localObject3 = localObject4;
            Log.e(str, localStringBuilder.toString());
            localObject3 = localObject4;
            onCancel();
            if (localObject4 == null) {
              return;
            }
          }
          try
          {
            localObject5 = sslSocketFactory;
            localObject2 = localObject4;
            try
            {
              ((HttpsURLConnection)localObject4).setSSLSocketFactory((javax.net.ssl.SSLSocketFactory)localObject5);
              localObject5 = hostnameVerifier;
              localObject2 = localObject4;
              ((HttpsURLConnection)localObject4).setHostnameVerifier((HostnameVerifier)localObject5);
              localObject2 = localObject4;
              ((HttpsURLConnection)localObject4).setRequestMethod("GET");
              localObject2 = localObject4;
              ((HttpsURLConnection)localObject4).setConnectTimeout(10000);
              localObject2 = localObject4;
              ((HttpsURLConnection)localObject4).setReadTimeout(20000);
              localObject2 = localObject4;
              ((HttpsURLConnection)localObject4).connect();
            }
            catch (Exception localException2)
            {
              continue;
            }
            localObject4 = null;
            if (localObject4 != null) {
              ((HttpsURLConnection)localObject4).disconnect();
            }
            execute();
            return;
          }
          catch (Throwable localThrowable4)
          {
            localObject4 = localObject3;
            if (localObject4 == null) {
              break label617;
            }
            ((HttpsURLConnection)localObject4).disconnect();
            throw localThrowable4;
          }
        }
        localThrowable2 = localThrowable2;
        localObject4 = null;
        localThrowable3 = localThrowable2;
        break label609;
        ((HttpsURLConnection)localObject4).disconnect();
        return;
      }
    }
    label609:
    label617:
    return;
  }
  
  public void setApacheHostnameVerifier(X509HostnameVerifier paramX509HostnameVerifier)
  {
    delegate = paramX509HostnameVerifier;
  }
  
  public void setApacheSSLSocketFactory(org.apache.http.conn.ssl.SSLSocketFactory paramSSLSocketFactory)
  {
    client = paramSSLSocketFactory;
  }
  
  public void setCallback(Callback paramCallback)
  {
    callback = paramCallback;
  }
  
  public void setContext(Context paramContext)
  {
    context = paramContext;
  }
  
  public void setHostnameVerifier(HostnameVerifier paramHostnameVerifier)
  {
    hostnameVerifier = paramHostnameVerifier;
  }
  
  public void setSslErrorHandler(SslErrorHandler paramSslErrorHandler)
  {
    this$0 = paramSslErrorHandler;
  }
  
  public void setSslSocketFactory(javax.net.ssl.SSLSocketFactory paramSSLSocketFactory)
  {
    sslSocketFactory = paramSSLSocketFactory;
  }
  
  public void setUrl(String paramString)
  {
    uri = paramString;
  }
  
  public abstract interface Callback
  {
    public abstract void onCancel(Context paramContext, String paramString);
    
    public abstract void onProceed(Context paramContext, String paramString);
  }
}
