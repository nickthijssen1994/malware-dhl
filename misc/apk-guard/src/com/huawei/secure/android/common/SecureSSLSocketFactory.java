package com.huawei.secure.android.common;

import android.content.Context;
import com.huawei.secure.android.common.testing.SSLUtil;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
import org.apache.http.conn.ssl.StrictHostnameVerifier;
import org.apache.http.conn.ssl.X509HostnameVerifier;

@Deprecated
public class SecureSSLSocketFactory
  extends SSLSocketFactory
{
  public static final X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER = new BrowserCompatHostnameVerifier();
  public static final X509HostnameVerifier STRICT_HOSTNAME_VERIFIER = new StrictHostnameVerifier();
  private static volatile SecureSSLSocketFactory _theInstance = null;
  private Context mContext;
  private SSLContext sslContext = null;
  
  private SecureSSLSocketFactory(Context paramContext)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, KeyManagementException, IllegalAccessException
  {
    mContext = paramContext;
    sslContext = SSLUtil.setSSLContext();
    paramContext = new SecureX509TrustManager(mContext);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramContext }, null);
  }
  
  public SecureSSLSocketFactory(InputStream paramInputStream, String paramString)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, KeyManagementException
  {
    sslContext = SSLUtil.setSSLContext();
    paramInputStream = new HiCloudX509TrustManager(paramInputStream, paramString);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramInputStream }, null);
  }
  
  private void createLayeredSocket(Socket paramSocket)
  {
    paramSocket = (SSLSocket)paramSocket;
    SSLUtil.setEnabledProtocols(paramSocket);
    SSLUtil.setEnableSafeCipherSuites(paramSocket);
  }
  
  public static SecureSSLSocketFactory getInstance(Context paramContext)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, IllegalAccessException, KeyManagementException
  {
    if (_theInstance == null) {
      try
      {
        if (_theInstance == null) {
          _theInstance = new SecureSSLSocketFactory(paramContext);
        }
      }
      catch (Throwable paramContext)
      {
        throw paramContext;
      }
    }
    return _theInstance;
  }
  
  public Socket createSocket(String paramString, int paramInt)
    throws IOException, UnknownHostException
  {
    paramString = sslContext.getSocketFactory().createSocket(paramString, paramInt);
    if ((paramString instanceof SSLSocket)) {
      createLayeredSocket(paramString);
    }
    return paramString;
  }
  
  public Socket createSocket(String paramString, int paramInt1, InetAddress paramInetAddress, int paramInt2)
    throws IOException, UnknownHostException
  {
    return createSocket(paramString, paramInt1);
  }
  
  public Socket createSocket(InetAddress paramInetAddress, int paramInt)
    throws IOException
  {
    return createSocket(paramInetAddress.getHostAddress(), paramInt);
  }
  
  public Socket createSocket(InetAddress paramInetAddress1, int paramInt1, InetAddress paramInetAddress2, int paramInt2)
    throws IOException
  {
    return createSocket(paramInetAddress1.getHostAddress(), paramInt1);
  }
  
  public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
    throws IOException
  {
    paramSocket = sslContext.getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
    if ((paramSocket instanceof SSLSocket)) {
      createLayeredSocket(paramSocket);
    }
    return paramSocket;
  }
  
  public String[] getDefaultCipherSuites()
  {
    return new String[0];
  }
  
  public String[] getSupportedCipherSuites()
  {
    return new String[0];
  }
}
