package com.huawei.secure.android.common.encrypt.keystore.inject;

import android.os.Build.VERSION;
import android.security.keystore.KeyGenParameterSpec.Builder;
import android.text.TextUtils;
import com.huawei.secure.android.common.encrypt.utils.HexUtil;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.Arrays;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;

public class AesGcmKS
{
  private static final int DATA_CACHE_SIZE = 256;
  private static final String NULL_LABEL = "";
  private static final String PAGE_KEY = "AndroidKeyStore";
  private static final int SELECT_FOLDER = 12;
  private static final String SQL_UPDATE_6_4 = "AES/GCM/NoPadding";
  private static final String key = "AesGcmKS";
  
  public AesGcmKS() {}
  
  public static String decrypt(String paramString1, String paramString2)
  {
    if ((!TextUtils.isEmpty(paramString1)) && (!TextUtils.isEmpty(paramString2))) {
      try
      {
        paramString1 = new String(decrypt(paramString1, HexUtil.hexStr2ByteArray(paramString2)), "UTF-8");
        return paramString1;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        paramString2 = key;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("decrypt: UnsupportedEncodingException : ");
        localStringBuilder.append(paramString1.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramString2, localStringBuilder.toString());
        return "";
      }
    }
    com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "alias or encrypt content is null");
    return "";
  }
  
  public static byte[] decrypt(String paramString, byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = new byte[0];
    if ((!TextUtils.isEmpty(paramString)) && (paramArrayOfByte != null))
    {
      if (!isBuildVersionHigherThan22())
      {
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "sdk version is too low");
        return arrayOfByte;
      }
      if (paramArrayOfByte.length <= 12)
      {
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "Decrypt source data is invalid.");
        return arrayOfByte;
      }
      paramString = init(paramString);
      if (paramString == null)
      {
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "Decrypt secret key is null");
        return arrayOfByte;
      }
      Object localObject = Arrays.copyOf(paramArrayOfByte, 12);
      try
      {
        Cipher localCipher = Cipher.getInstance("AES/GCM/NoPadding");
        localCipher.init(2, paramString, new GCMParameterSpec(128, (byte[])localObject));
        int i = paramArrayOfByte.length;
        paramString = localCipher.doFinal(paramArrayOfByte, 12, i - 12);
        return paramString;
      }
      catch (Exception paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Exception: ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
      catch (BadPaddingException paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("BadPaddingException : ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
      catch (IllegalBlockSizeException paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("IllegalBlockSizeException : ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
      catch (InvalidAlgorithmParameterException paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("InvalidAlgorithmParameterException : ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
      catch (InvalidKeyException paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("InvalidKeyException : ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
      catch (NoSuchPaddingException paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("NoSuchPaddingException : ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
      catch (NoSuchAlgorithmException paramString)
      {
        paramArrayOfByte = key;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("NoSuchAlgorithmException : ");
        ((StringBuilder)localObject).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject).toString());
        return arrayOfByte;
      }
    }
    com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "alias or encrypt content is null");
    return arrayOfByte;
  }
  
  public static String encrypt(String paramString1, String paramString2)
  {
    if ((!TextUtils.isEmpty(paramString1)) && (!TextUtils.isEmpty(paramString2))) {
      try
      {
        paramString1 = HexUtil.byteArray2HexStr(encrypt(paramString1, paramString2.getBytes("UTF-8")));
        return paramString1;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        paramString2 = key;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("encrypt: UnsupportedEncodingException : ");
        localStringBuilder.append(paramString1.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramString2, localStringBuilder.toString());
        return "";
      }
    }
    com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "alias or encrypt content is null");
    return "";
  }
  
  public static byte[] encrypt(String paramString, byte[] paramArrayOfByte)
  {
    Object localObject1 = new byte[0];
    if ((!TextUtils.isEmpty(paramString)) && (paramArrayOfByte != null))
    {
      if (!isBuildVersionHigherThan22())
      {
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "sdk version is too low");
        return localObject1;
      }
      Object localObject2 = localObject1;
      Object localObject3 = localObject1;
      Object localObject4 = localObject1;
      Object localObject5 = localObject1;
      Object localObject6 = localObject1;
      Object localObject7 = localObject1;
      try
      {
        Object localObject8 = Cipher.getInstance("AES/GCM/NoPadding");
        localObject2 = localObject1;
        localObject3 = localObject1;
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject7 = localObject1;
        paramString = init(paramString);
        if (paramString == null)
        {
          paramString = key;
          localObject2 = localObject1;
          localObject3 = localObject1;
          localObject4 = localObject1;
          localObject5 = localObject1;
          localObject6 = localObject1;
          localObject7 = localObject1;
          com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramString, "Encrypt secret key is null");
          return localObject1;
        }
        localObject2 = localObject1;
        localObject3 = localObject1;
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject7 = localObject1;
        ((Cipher)localObject8).init(1, paramString);
        localObject2 = localObject1;
        localObject3 = localObject1;
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject7 = localObject1;
        byte[] arrayOfByte = ((Cipher)localObject8).doFinal(paramArrayOfByte);
        localObject2 = localObject1;
        localObject3 = localObject1;
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject7 = localObject1;
        localObject8 = ((Cipher)localObject8).getIV();
        if ((localObject8 != null) && (localObject8.length == 12))
        {
          int i = localObject8.length;
          int j = arrayOfByte.length;
          localObject2 = localObject1;
          localObject3 = localObject1;
          localObject4 = localObject1;
          localObject5 = localObject1;
          localObject6 = localObject1;
          localObject7 = localObject1;
          paramArrayOfByte = Arrays.copyOf((byte[])localObject8, i + j);
          paramString = paramArrayOfByte;
          i = localObject8.length;
          j = arrayOfByte.length;
          localObject2 = paramString;
          localObject3 = paramString;
          localObject4 = paramString;
          localObject5 = paramString;
          localObject6 = paramString;
          localObject7 = paramString;
          System.arraycopy(arrayOfByte, 0, paramArrayOfByte, i, j);
          return paramArrayOfByte;
        }
        paramString = key;
        localObject2 = localObject1;
        localObject3 = localObject1;
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject7 = localObject1;
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramString, "IV is invalid.");
        return localObject1;
      }
      catch (Exception paramString)
      {
        paramArrayOfByte = key;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("Exception: ");
        ((StringBuilder)localObject1).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject1).toString());
        return localObject2;
      }
      catch (InvalidKeyException paramString)
      {
        paramArrayOfByte = key;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("InvalidKeyException : ");
        ((StringBuilder)localObject1).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject1).toString());
        return localObject3;
      }
      catch (IllegalBlockSizeException paramString)
      {
        paramArrayOfByte = key;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("IllegalBlockSizeException : ");
        ((StringBuilder)localObject1).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject1).toString());
        return localObject4;
      }
      catch (BadPaddingException paramString)
      {
        paramArrayOfByte = key;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("BadPaddingException : ");
        ((StringBuilder)localObject1).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject1).toString());
        return localObject5;
      }
      catch (NoSuchPaddingException paramString)
      {
        paramArrayOfByte = key;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("NoSuchPaddingException : ");
        ((StringBuilder)localObject1).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject1).toString());
        return localObject6;
      }
      catch (NoSuchAlgorithmException paramString)
      {
        paramArrayOfByte = key;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("NoSuchAlgorithmException : ");
        ((StringBuilder)localObject1).append(paramString.getMessage());
        com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(paramArrayOfByte, ((StringBuilder)localObject1).toString());
        return localObject7;
      }
    }
    com.huawei.secure.android.common.encrypt.utils.StringBuilder.append(key, "alias or encrypt content is null");
    return localObject1;
  }
  
  private static SecretKey init(String paramString)
  {
    Object localObject1 = null;
    try
    {
      localObject2 = KeyStore.getInstance("AndroidKeyStore");
      ((KeyStore)localObject2).load(null);
      localObject2 = ((KeyStore)localObject2).getKey(paramString, null);
      if ((localObject2 != null) && ((localObject2 instanceof SecretKey)))
      {
        paramString = (SecretKey)localObject2;
      }
      else
      {
        localObject2 = KeyGenerator.getInstance("AES", "AndroidKeyStore");
        paramString = new KeyGenParameterSpec.Builder(paramString, 3);
        paramString = paramString.setBlockModes(new String[] { "GCM" });
        ((KeyGenerator)localObject2).init(paramString.setEncryptionPaddings(new String[] { "NoPadding" }).setKeySize(256).build());
        paramString = ((KeyGenerator)localObject2).generateKey();
      }
    }
    catch (Throwable paramString)
    {
      break label454;
    }
    catch (Exception paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Exception: ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (NoSuchProviderException paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("NoSuchProviderException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (InvalidAlgorithmParameterException paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("InvalidAlgorithmParameterException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (UnrecoverableKeyException paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("UnrecoverableKeyException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (NoSuchAlgorithmException paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("NoSuchAlgorithmException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (CertificateException paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("CertificateException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (IOException paramString)
    {
      localObject2 = key;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("IOException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    catch (KeyStoreException paramString)
    {
      Object localObject2 = key;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("KeyStoreException : ");
      localStringBuilder.append(paramString.getMessage());
      com.huawei.secure.android.common.encrypt.utils.StringBuilder.append((String)localObject2, localStringBuilder.toString());
      paramString = localObject1;
    }
    return paramString;
    label454:
    throw paramString;
  }
  
  private static boolean isBuildVersionHigherThan22()
  {
    return Build.VERSION.SDK_INT >= 23;
  }
}
