package com.huawei.secure.android.common.testing.hostname;

import com.huawei.secure.android.common.testing.util.Log;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.net.ssl.SSLException;

public class AbstractVerifier
{
  private static final String[] BAD_COUNTRY_2LDS;
  private static final Pattern IPV4_PATTERN = Pattern.compile("^(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}$");
  
  static
  {
    BAD_COUNTRY_2LDS = new String[] { "ac", "co", "com", "ed", "edu", "go", "gouv", "gov", "info", "lg", "ne", "net", "or", "org" };
    Arrays.sort(BAD_COUNTRY_2LDS);
  }
  
  public AbstractVerifier() {}
  
  public static boolean acceptableCountryWildcard(String paramString)
  {
    int i = paramString.length();
    if ((i >= 7) && (i <= 9))
    {
      i -= 3;
      if (paramString.charAt(i) == '.')
      {
        paramString = paramString.substring(2, i);
        return Arrays.binarySearch(BAD_COUNTRY_2LDS, paramString) < 0;
      }
    }
    return true;
  }
  
  public static int countDots(String paramString)
  {
    int i = 0;
    int k;
    for (int j = 0; i < paramString.length(); j = k)
    {
      k = j;
      if (paramString.charAt(i) == '.') {
        k = j + 1;
      }
      i += 1;
    }
    return j;
  }
  
  public static String[] getCNs(X509Certificate paramX509Certificate)
  {
    paramX509Certificate = new DistinguishedNameParser(paramX509Certificate.getSubjectX500Principal()).find("cn");
    if (!paramX509Certificate.isEmpty())
    {
      String[] arrayOfString = new String[paramX509Certificate.size()];
      paramX509Certificate.toArray(arrayOfString);
      return arrayOfString;
    }
    return null;
  }
  
  public static String[] getDNSSubjectAlts(X509Certificate paramX509Certificate)
  {
    LinkedList localLinkedList = new LinkedList();
    try
    {
      paramX509Certificate = paramX509Certificate.getSubjectAlternativeNames();
    }
    catch (CertificateParsingException paramX509Certificate)
    {
      Log.log("", "Error parsing certificate.", paramX509Certificate);
      paramX509Certificate = null;
    }
    if (paramX509Certificate != null)
    {
      paramX509Certificate = paramX509Certificate.iterator();
      while (paramX509Certificate.hasNext())
      {
        List localList = (List)paramX509Certificate.next();
        if (((Integer)localList.get(0)).intValue() == 2) {
          localLinkedList.add((String)localList.get(1));
        }
      }
    }
    if (!localLinkedList.isEmpty())
    {
      paramX509Certificate = new String[localLinkedList.size()];
      localLinkedList.toArray(paramX509Certificate);
      return paramX509Certificate;
    }
    return null;
  }
  
  private static boolean isIPv4Address(String paramString)
  {
    return IPV4_PATTERN.matcher(paramString).matches();
  }
  
  public static final void verify(String paramString, X509Certificate paramX509Certificate, boolean paramBoolean)
    throws SSLException
  {
    String[] arrayOfString = getCNs(paramX509Certificate);
    paramX509Certificate = getDNSSubjectAlts(paramX509Certificate);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("cn is : ");
    localStringBuilder.append(Arrays.toString(arrayOfString));
    Log.d("", localStringBuilder.toString());
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("san is : ");
    localStringBuilder.append(Arrays.toString(paramX509Certificate));
    Log.d("", localStringBuilder.toString());
    verify(paramString, arrayOfString, paramX509Certificate, paramBoolean);
  }
  
  public static final void verify(String paramString, String[] paramArrayOfString1, String[] paramArrayOfString2, boolean paramBoolean)
    throws SSLException
  {
    Object localObject = new LinkedList();
    if ((paramArrayOfString1 != null) && (paramArrayOfString1.length > 0) && (paramArrayOfString1[0] != null)) {
      ((LinkedList)localObject).add(paramArrayOfString1[0]);
    }
    int i;
    if (paramArrayOfString2 != null)
    {
      int j = paramArrayOfString2.length;
      i = 0;
      while (i < j)
      {
        paramArrayOfString1 = paramArrayOfString2[i];
        if (paramArrayOfString1 != null) {
          ((LinkedList)localObject).add(paramArrayOfString1);
        }
        i += 1;
      }
    }
    if (!((LinkedList)localObject).isEmpty())
    {
      paramArrayOfString1 = new StringBuffer();
      paramArrayOfString2 = paramString.trim().toLowerCase(Locale.ENGLISH);
      localObject = ((LinkedList)localObject).iterator();
      boolean bool2 = false;
      boolean bool1;
      do
      {
        bool1 = bool2;
        if (!((Iterator)localObject).hasNext()) {
          break;
        }
        String str = ((String)((Iterator)localObject).next()).toLowerCase(Locale.ENGLISH);
        paramArrayOfString1.append(" <");
        paramArrayOfString1.append(str);
        paramArrayOfString1.append('>');
        if (((Iterator)localObject).hasNext()) {
          paramArrayOfString1.append(" OR");
        }
        bool2 = str.startsWith("*.");
        bool1 = true;
        if ((bool2) && (str.indexOf('.', 2) != -1) && (acceptableCountryWildcard(str)) && (!isIPv4Address(paramString))) {
          i = 1;
        } else {
          i = 0;
        }
        if (i != 0)
        {
          bool2 = paramArrayOfString2.endsWith(str.substring(1));
          if ((bool2) && (paramBoolean))
          {
            if (countDots(paramArrayOfString2) != countDots(str)) {
              bool1 = false;
            }
          }
          else {
            bool1 = bool2;
          }
        }
        else
        {
          bool1 = paramArrayOfString2.equals(str);
        }
        bool2 = bool1;
      } while (!bool1);
      if (bool1) {
        return;
      }
      paramArrayOfString2 = new StringBuilder();
      paramArrayOfString2.append("hostname in certificate didn't match: <");
      paramArrayOfString2.append(paramString);
      paramArrayOfString2.append("> !=");
      paramArrayOfString2.append(paramArrayOfString1);
      throw new SSLException(paramArrayOfString2.toString());
    }
    paramArrayOfString1 = new StringBuilder();
    paramArrayOfString1.append("Certificate for <");
    paramArrayOfString1.append(paramString);
    paramArrayOfString1.append("> doesn't contain CN or DNS subjectAlt");
    throw new SSLException(paramArrayOfString1.toString());
  }
}
