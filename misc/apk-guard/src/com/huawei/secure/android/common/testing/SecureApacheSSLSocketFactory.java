package com.huawei.secure.android.common.testing;

import android.content.Context;
import com.huawei.secure.android.common.testing.util.Log;
import com.huawei.secure.android.common.testing.util.Prefs;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
import org.apache.http.conn.ssl.StrictHostnameVerifier;
import org.apache.http.conn.ssl.X509HostnameVerifier;

public class SecureApacheSSLSocketFactory
  extends org.apache.http.conn.ssl.SSLSocketFactory
{
  public static final X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER = new BrowserCompatHostnameVerifier();
  public static final X509HostnameVerifier STRICT_HOSTNAME_VERIFIER = new StrictHostnameVerifier();
  private static final String TAG = com.huawei.secure.android.common.ssl.SecureApacheSSLSocketFactory.class.getSimpleName();
  private static volatile SecureApacheSSLSocketFactory cache = null;
  private String[] cipherSuites;
  private String[] mClientId;
  private String[] protocols;
  private Context sContext;
  private String[] server;
  private SSLSocket socket = null;
  private SSLContext sslContext;
  private X509TrustManager trustManager;
  
  private SecureApacheSSLSocketFactory(KeyStore paramKeyStore)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException
  {
    super(paramKeyStore);
  }
  
  private SecureApacheSSLSocketFactory(KeyStore paramKeyStore, Context paramContext)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException
  {
    super(paramKeyStore);
    if (paramContext == null)
    {
      Log.e(TAG, "SecureSSLSocketFactory: context is null");
      return;
    }
    setContext(paramContext);
    setSslContext(SSLUtil.setSSLContext());
    trustManager = SecureX509SingleInstance.getInstance(paramContext);
    sslContext.init(null, new X509TrustManager[] { trustManager }, null);
  }
  
  public SecureApacheSSLSocketFactory(KeyStore paramKeyStore, InputStream paramInputStream, String paramString)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException
  {
    super(paramKeyStore);
    sslContext = SSLUtil.setSSLContext();
    paramKeyStore = new HiCloudX509TrustManager(paramInputStream, paramString);
    setX509TrustManager(paramKeyStore);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramKeyStore }, null);
  }
  
  public SecureApacheSSLSocketFactory(KeyStore paramKeyStore, X509TrustManager paramX509TrustManager)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException
  {
    super(paramKeyStore);
    sslContext = SSLUtil.setSSLContext();
    setX509TrustManager(paramX509TrustManager);
    sslContext.init(null, new X509TrustManager[] { paramX509TrustManager }, null);
  }
  
  private void createLayeredSocket(Socket paramSocket)
  {
    boolean bool = com.huawei.secure.android.common.testing.util.SSLSocketFactory.isEmpty(protocols);
    int j = 1;
    int i;
    if (!bool)
    {
      Log.append(TAG, "set protocols");
      SSLUtil.setEnabledProtocols((SSLSocket)paramSocket, protocols);
      i = 1;
    }
    else
    {
      i = 0;
    }
    if ((com.huawei.secure.android.common.testing.util.SSLSocketFactory.isEmpty(server)) && (com.huawei.secure.android.common.testing.util.SSLSocketFactory.isEmpty(mClientId)))
    {
      j = 0;
    }
    else
    {
      Log.append(TAG, "set white cipher or black cipher");
      SSLSocket localSSLSocket = (SSLSocket)paramSocket;
      SSLUtil.setEnabledProtocols(localSSLSocket);
      if (!com.huawei.secure.android.common.testing.util.SSLSocketFactory.isEmpty(server)) {
        SSLUtil.setWhiteListCipherSuites(localSSLSocket, server);
      } else {
        SSLUtil.setBlackListCipherSuites(localSSLSocket, mClientId);
      }
    }
    if (i == 0)
    {
      Log.append(TAG, "set default protocols");
      SSLUtil.setEnabledProtocols((SSLSocket)paramSocket);
    }
    if (j == 0)
    {
      Log.append(TAG, "set default cipher suites");
      SSLUtil.setEnableSafeCipherSuites((SSLSocket)paramSocket);
    }
  }
  
  static void fetchData(X509TrustManager paramX509TrustManager)
  {
    Log.append(TAG, "sasf update socket factory trust manager");
    try
    {
      paramX509TrustManager = new SecureApacheSSLSocketFactory(null, paramX509TrustManager);
      cache = paramX509TrustManager;
      return;
    }
    catch (NoSuchAlgorithmException paramX509TrustManager)
    {
      for (;;) {}
    }
    catch (KeyManagementException paramX509TrustManager)
    {
      for (;;) {}
    }
    catch (UnrecoverableKeyException paramX509TrustManager)
    {
      for (;;) {}
    }
    catch (KeyStoreException paramX509TrustManager)
    {
      for (;;) {}
    }
    catch (CertificateException paramX509TrustManager)
    {
      for (;;) {}
    }
    catch (IOException paramX509TrustManager)
    {
      for (;;) {}
    }
    Log.e(TAG, "IOException");
    return;
    Log.e(TAG, "CertificateException");
    return;
    Log.e(TAG, "KeyStoreException");
    return;
    Log.e(TAG, "UnrecoverableKeyException");
    return;
    Log.e(TAG, "KeyManagementException");
    return;
    Log.e(TAG, "NoSuchAlgorithmException");
  }
  
  public static SecureApacheSSLSocketFactory getInstance(KeyStore paramKeyStore, Context paramContext)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalArgumentException
  {
    Prefs.setContext(paramContext);
    if (cache == null) {
      try
      {
        if (cache == null) {
          cache = new SecureApacheSSLSocketFactory(paramKeyStore, paramContext);
        }
      }
      catch (Throwable paramKeyStore)
      {
        throw paramKeyStore;
      }
    }
    return cache;
  }
  
  public Socket createSocket()
    throws IOException
  {
    Log.append(TAG, "createSocket: ");
    Socket localSocket = sslContext.getSocketFactory().createSocket();
    if ((localSocket instanceof SSLSocket))
    {
      createLayeredSocket(localSocket);
      socket = ((SSLSocket)localSocket);
      cipherSuites = ((String[])socket.getEnabledCipherSuites().clone());
    }
    return localSocket;
  }
  
  public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
    throws IOException
  {
    Log.append(TAG, "createSocket: socket host port autoClose");
    paramSocket = sslContext.getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
    if ((paramSocket instanceof SSLSocket))
    {
      createLayeredSocket(paramSocket);
      socket = ((SSLSocket)paramSocket);
      cipherSuites = ((String[])socket.getEnabledCipherSuites().clone());
    }
    return paramSocket;
  }
  
  public String[] getBlackCiphers()
  {
    return mClientId;
  }
  
  public X509Certificate[] getChain()
  {
    X509TrustManager localX509TrustManager = trustManager;
    if ((localX509TrustManager instanceof SecureX509TrustManager)) {
      return ((SecureX509TrustManager)localX509TrustManager).getChain();
    }
    return new X509Certificate[0];
  }
  
  public Context getContext()
  {
    return sContext;
  }
  
  public String[] getProtocols()
  {
    return protocols;
  }
  
  public SSLContext getSslContext()
  {
    return sslContext;
  }
  
  public SSLSocket getSslSocket()
  {
    return socket;
  }
  
  public String[] getSupportedCipherSuites()
  {
    String[] arrayOfString = cipherSuites;
    if (arrayOfString != null) {
      return arrayOfString;
    }
    return new String[0];
  }
  
  public String[] getWhiteCiphers()
  {
    return server;
  }
  
  public X509TrustManager getX509TrustManager()
  {
    return trustManager;
  }
  
  public void setBlackCiphers(String[] paramArrayOfString)
  {
    mClientId = paramArrayOfString;
  }
  
  public void setContext(Context paramContext)
  {
    sContext = paramContext.getApplicationContext();
  }
  
  public void setProtocols(String[] paramArrayOfString)
  {
    protocols = paramArrayOfString;
  }
  
  public void setSslContext(SSLContext paramSSLContext)
  {
    sslContext = paramSSLContext;
  }
  
  public void setSslSocket(SSLSocket paramSSLSocket)
  {
    socket = paramSSLSocket;
  }
  
  public void setWhiteCiphers(String[] paramArrayOfString)
  {
    server = paramArrayOfString;
  }
  
  public void setX509TrustManager(X509TrustManager paramX509TrustManager)
  {
    trustManager = paramX509TrustManager;
  }
}
