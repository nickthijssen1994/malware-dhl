package com.huawei.secure.android.common.util;

import android.text.TextUtils;
import android.util.Log;
import java.util.Locale;

public class EncodeUtil
{
  private static final String Debug = "EncodeUtil";
  private static final String[] URISave;
  private static final char[] hexTable = { 44, 46, 45 };
  
  static
  {
    URISave = new String['?'];
    for (char c = '\000'; c < '?'; c = (char)(c + '\001')) {
      if (((c >= '0') && (c <= '9')) || ((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
        URISave[c] = null;
      } else {
        URISave[c] = quote(c).intern();
      }
    }
  }
  
  public EncodeUtil() {}
  
  public static String decodeForJavaScript(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    try
    {
      localObject1 = new StringBuilder();
      paramString = new ByteVector(paramString);
      for (;;)
      {
        boolean bool = paramString.hasNext();
        if (!bool) {
          break;
        }
        localObject2 = parse(paramString);
        if (localObject2 != null) {
          ((StringBuilder)localObject1).append(localObject2);
        } else {
          ((StringBuilder)localObject1).append(paramString.get());
        }
      }
      paramString = ((StringBuilder)localObject1).toString();
      return paramString;
    }
    catch (Exception paramString)
    {
      Object localObject1 = Debug;
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("decode js: ");
      ((StringBuilder)localObject2).append(paramString.getMessage());
      Log.e((String)localObject1, ((StringBuilder)localObject2).toString());
    }
    return "";
  }
  
  public static String encodeForJavaScript(String paramString)
  {
    return encodeForJavaScript(paramString, hexTable);
  }
  
  public static String encodeForJavaScript(String paramString, char[] paramArrayOfChar)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    try
    {
      paramString = parse(paramArrayOfChar, paramString);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramArrayOfChar = Debug;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("encode js: ");
      localStringBuilder.append(paramString.getMessage());
      Log.e(paramArrayOfChar, localStringBuilder.toString());
    }
    return "";
  }
  
  private static String escape(char paramChar)
  {
    if (paramChar < '?') {
      return URISave[paramChar];
    }
    return quote(paramChar);
  }
  
  private static boolean matches(char paramChar, char[] paramArrayOfChar)
  {
    int j = paramArrayOfChar.length;
    int i = 0;
    while (i < j)
    {
      if (paramChar == paramArrayOfChar[i]) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private static Character parse(ByteVector paramByteVector)
  {
    paramByteVector.write();
    Character localCharacter1 = paramByteVector.get();
    if (localCharacter1 == null)
    {
      paramByteVector.reset();
      return null;
    }
    if (localCharacter1.charValue() != '\\')
    {
      paramByteVector.reset();
      return null;
    }
    localCharacter1 = paramByteVector.get();
    if (localCharacter1 == null)
    {
      paramByteVector.reset();
      return null;
    }
    if (localCharacter1.charValue() == 'b') {
      return Character.valueOf('\b');
    }
    if (localCharacter1.charValue() == 't') {
      return Character.valueOf('\t');
    }
    if (localCharacter1.charValue() == 'n') {
      return Character.valueOf('\n');
    }
    if (localCharacter1.charValue() == 'v') {
      return Character.valueOf('\013');
    }
    if (localCharacter1.charValue() == 'f') {
      return Character.valueOf('\f');
    }
    if (localCharacter1.charValue() == 'r') {
      return Character.valueOf('\r');
    }
    if (localCharacter1.charValue() == '"') {
      return Character.valueOf('"');
    }
    if (localCharacter1.charValue() == '\'') {
      return Character.valueOf('\'');
    }
    if (localCharacter1.charValue() == '\\') {
      return Character.valueOf('\\');
    }
    int k = Character.toLowerCase(localCharacter1.charValue());
    int j = 0;
    int i = 0;
    StringBuilder localStringBuilder;
    Character localCharacter2;
    if (k == 120)
    {
      localStringBuilder = new StringBuilder();
      while (i < 2)
      {
        localCharacter2 = paramByteVector.next();
        if (localCharacter2 != null)
        {
          localStringBuilder.append(localCharacter2);
          i += 1;
        }
        else
        {
          paramByteVector.reset();
          return null;
        }
      }
    }
    try
    {
      i = Integer.parseInt(localStringBuilder.toString(), 16);
      bool = Character.isValidCodePoint(i);
      if (!bool) {
        break label521;
      }
      c = (char)i;
      return Character.valueOf(c);
    }
    catch (NumberFormatException localNumberFormatException1)
    {
      boolean bool;
      char c;
      label521:
      for (;;) {}
    }
    paramByteVector.reset();
    return null;
    if (Character.toLowerCase(localCharacter1.charValue()) == 'u')
    {
      localStringBuilder = new StringBuilder();
      i = j;
      while (i < 4)
      {
        localCharacter2 = paramByteVector.next();
        if (localCharacter2 != null)
        {
          localStringBuilder.append(localCharacter2);
          i += 1;
        }
        else
        {
          paramByteVector.reset();
          return null;
        }
      }
    }
    try
    {
      i = Integer.parseInt(localStringBuilder.toString(), 16);
      bool = Character.isValidCodePoint(i);
      if (!bool) {
        break label539;
      }
      c = (char)i;
      return Character.valueOf(c);
    }
    catch (NumberFormatException localNumberFormatException2)
    {
      for (;;) {}
      return localNumberFormatException3;
    }
    paramByteVector.reset();
    return null;
    if (ByteVector.write(localCharacter1))
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(localCharacter1);
      localCharacter2 = paramByteVector.get();
      if (!ByteVector.write(localCharacter2))
      {
        paramByteVector.add(localCharacter2);
      }
      else
      {
        localStringBuilder.append(localCharacter2);
        localCharacter2 = paramByteVector.get();
        if (!ByteVector.write(localCharacter2)) {
          paramByteVector.add(localCharacter2);
        } else {
          localStringBuilder.append(localCharacter2);
        }
      }
      try
      {
        i = Integer.parseInt(localStringBuilder.toString(), 8);
        bool = Character.isValidCodePoint(i);
        if (!bool) {
          break label539;
        }
        c = (char)i;
        return Character.valueOf(c);
      }
      catch (NumberFormatException localNumberFormatException3)
      {
        for (;;) {}
      }
      paramByteVector.reset();
      return null;
      return localCharacter1;
    }
  }
  
  private static String parse(char[] paramArrayOfChar, Character paramCharacter)
  {
    if (matches(paramCharacter.charValue(), paramArrayOfChar))
    {
      paramArrayOfChar = new StringBuilder();
      paramArrayOfChar.append("");
      paramArrayOfChar.append(paramCharacter);
      return paramArrayOfChar.toString();
    }
    if (escape(paramCharacter.charValue()) == null)
    {
      paramArrayOfChar = new StringBuilder();
      paramArrayOfChar.append("");
      paramArrayOfChar.append(paramCharacter);
      return paramArrayOfChar.toString();
    }
    paramArrayOfChar = Integer.toHexString(paramCharacter.charValue());
    if (paramCharacter.charValue() < '?')
    {
      paramCharacter = new StringBuilder();
      paramCharacter.append("\\x");
      paramCharacter.append("00".substring(paramArrayOfChar.length()));
      paramCharacter.append(paramArrayOfChar.toUpperCase(Locale.ENGLISH));
      return paramCharacter.toString();
    }
    paramCharacter = new StringBuilder();
    paramCharacter.append("\\u");
    paramCharacter.append("0000".substring(paramArrayOfChar.length()));
    paramCharacter.append(paramArrayOfChar.toUpperCase(Locale.ENGLISH));
    return paramCharacter.toString();
  }
  
  private static String parse(char[] paramArrayOfChar, String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    while (i < paramString.length())
    {
      localStringBuilder.append(parse(paramArrayOfChar, Character.valueOf(paramString.charAt(i))));
      i += 1;
    }
    return localStringBuilder.toString();
  }
  
  private static String quote(char paramChar)
  {
    return Integer.toHexString(paramChar);
  }
}
