package com.huawei.secure.android.common.util;

import android.text.TextUtils;
import android.util.Log;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

public class ZipUtil
{
  private static final int BUFFER_SIZE = 4096;
  private static final int ENDHDR = 100;
  private static final String ENDSIG = "..\\";
  private static final String ROOT_DIR = "../";
  private static final int SIZE = 104857600;
  private static final String TAG = "ZipUtil";
  
  public ZipUtil() {}
  
  private static File a(String paramString)
  {
    read(paramString);
    return new File(paramString);
  }
  
  private static void a(File paramFile)
  {
    if (paramFile == null) {
      return;
    }
    if (paramFile.isFile())
    {
      c(paramFile);
      return;
    }
    if (paramFile.isDirectory())
    {
      File[] arrayOfFile = paramFile.listFiles();
      if ((arrayOfFile != null) && (arrayOfFile.length != 0))
      {
        int j = arrayOfFile.length;
        int i = 0;
        while (i < j)
        {
          a(arrayOfFile[i]);
          i += 1;
        }
        c(paramFile);
        return;
      }
      c(paramFile);
    }
  }
  
  private static boolean a(String paramString1, String paramString2, long paramLong, int paramInt)
    throws SecurityCommonException
  {
    if ((!TextUtils.isEmpty(paramString1)) && (!add(paramString1)))
    {
      if ((!TextUtils.isEmpty(paramString2)) && (!add(paramString2)))
      {
        if (write(paramString1, paramLong, paramInt)) {
          return true;
        }
        LogsUtil.a("ZipUtil", "zip file contains valid chars or too many files");
        throw new SecurityCommonException("unsecure zipfile!");
      }
      LogsUtil.a("ZipUtil", "target directory is not valid");
      return false;
    }
    LogsUtil.a("ZipUtil", "zip file is not valid");
    return false;
  }
  
  private static boolean add(String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      Log.e("ZipUtil", "isContainInvalidStr: name is null");
      return true;
    }
    if ((!paramString.contains("../")) && (!paramString.contains("..\\")) && (!paramString.contains("..")) && (!paramString.contains("./")) && (!paramString.contains(".\\.\\"))) {
      return paramString.contains("%00");
    }
    return true;
  }
  
  private static File c(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    return a(paramString);
  }
  
  private static void c(File paramFile)
  {
    if (paramFile == null) {
      return;
    }
    if (!paramFile.delete()) {
      LogsUtil.a("ZipUtil", "delete file error");
    }
  }
  
  private static void copyFile(FileInputStream paramFileInputStream, BufferedOutputStream paramBufferedOutputStream, ZipInputStream paramZipInputStream, FileOutputStream paramFileOutputStream)
  {
    IOUtil.closeSecure(paramFileInputStream);
    IOUtil.closeSecure(paramBufferedOutputStream);
    IOUtil.closeSecure(paramZipInputStream);
    IOUtil.closeSecure(paramFileOutputStream);
  }
  
  private static boolean copyFile(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    if (paramFile.exists()) {
      return paramFile.isFile();
    }
    if (!mkdir(paramFile.getParentFile())) {
      return false;
    }
    try
    {
      boolean bool = paramFile.createNewFile();
      return bool;
    }
    catch (IOException paramFile)
    {
      for (;;) {}
    }
    Log.e("ZipUtil", "createOrExistsFile IOException ");
    return false;
  }
  
  private static void createDir(File paramFile)
  {
    if (paramFile != null)
    {
      if (paramFile.exists()) {
        return;
      }
      if (!paramFile.mkdirs()) {
        LogsUtil.a("ZipUtil", "mkdirs error , files exists or IOException.");
      }
    }
  }
  
  private static List doInBackground(File paramFile1, File paramFile2, long paramLong, boolean paramBoolean)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a8 = a7\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  private static boolean mkdir(File paramFile)
  {
    return (paramFile != null) && (paramFile.exists() ? paramFile.isDirectory() : paramFile.mkdirs());
  }
  
  private static void read(String paramString)
  {
    if (!TextUtils.isEmpty(paramString))
    {
      if (!add(paramString)) {
        return;
      }
      Log.e("ZipUtil", "IllegalArgumentException--path is not a standard path");
      throw new IllegalArgumentException("path is not a standard path");
    }
  }
  
  private static String remove(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return paramString;
    }
    int i = paramString.lastIndexOf(File.separator);
    if (i == -1) {
      return paramString;
    }
    return paramString.substring(i + 1);
  }
  
  public static boolean unZip(String paramString1, String paramString2, long paramLong, int paramInt, boolean paramBoolean)
    throws SecurityCommonException
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a14 = a13\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static boolean unZip(String paramString1, String paramString2, boolean paramBoolean)
    throws SecurityCommonException
  {
    return unZip(paramString1, paramString2, 104857600L, 100, paramBoolean);
  }
  
  public static List unZipNew(String paramString1, String paramString2, long paramLong, int paramInt, boolean paramBoolean)
    throws SecurityCommonException
  {
    if (!a(paramString1, paramString2, paramLong, paramInt)) {
      return null;
    }
    String str = paramString2;
    if (paramString2.endsWith(File.separator))
    {
      str = paramString2;
      if (paramString2.length() > File.separator.length()) {
        str = paramString2.substring(0, paramString2.length() - File.separator.length());
      }
    }
    return doInBackground(c(paramString1), c(str), paramLong, paramBoolean);
  }
  
  public static List unZipNew(String paramString1, String paramString2, boolean paramBoolean)
    throws SecurityCommonException
  {
    return unZipNew(paramString1, paramString2, 104857600L, 100, paramBoolean);
  }
  
  private static boolean write(String paramString, long paramLong, int paramInt)
  {
    boolean bool2 = false;
    boolean bool1 = false;
    StringBuilder localStringBuilder = null;
    Object localObject1 = null;
    try
    {
      paramString = new ZipFile(paramString);
      try
      {
        localObject1 = paramString.entries();
        long l1 = 0L;
        int i = 0;
        long l2;
        do
        {
          boolean bool3 = ((Enumeration)localObject1).hasMoreElements();
          if (!bool3) {
            break label137;
          }
          Object localObject2 = ((Enumeration)localObject1).nextElement();
          localObject2 = (ZipEntry)localObject2;
          l2 = ((ZipEntry)localObject2).getSize();
          l1 += l2;
          i += 1;
          bool3 = add(((ZipEntry)localObject2).getName());
          if ((bool3) || (i >= paramInt) || (l1 > paramLong)) {
            break;
          }
          l2 = ((ZipEntry)localObject2).getSize();
        } while (l2 != -1L);
        LogsUtil.a("ZipUtil", "File name is invalid or too many files or too big");
        break label140;
        label137:
        bool1 = true;
      }
      catch (Throwable localThrowable)
      {
        label140:
        label147:
        localObject1 = paramString;
        paramString = localThrowable;
      }
      catch (IOException localIOException2) {}
    }
    catch (Throwable paramString) {}catch (IOException localIOException3)
    {
      paramString = localStringBuilder;
    }
    try
    {
      paramString.close();
      return bool1;
    }
    catch (IOException paramString)
    {
      break label147;
      break label147;
    }
    LogsUtil.a("ZipUtil", "close zipFile IOException ");
    return bool1;
    localObject1 = paramString;
    localStringBuilder = new StringBuilder();
    localObject1 = paramString;
    localStringBuilder.append("not a valid zip file, IOException : ");
    localObject1 = paramString;
    localStringBuilder.append(localIOException3.getMessage());
    localObject1 = paramString;
    LogsUtil.a("ZipUtil", localStringBuilder.toString());
    if (paramString != null)
    {
      try
      {
        paramString.close();
        return false;
      }
      catch (IOException paramString)
      {
        bool1 = bool2;
      }
      if (localObject1 != null) {}
      try
      {
        ((ZipFile)localObject1).close();
      }
      catch (IOException localIOException1)
      {
        for (;;) {}
      }
      LogsUtil.a("ZipUtil", "close zipFile IOException ");
      throw paramString;
    }
    return false;
  }
  
  private static boolean write(List paramList)
  {
    try
    {
      paramList = paramList.iterator();
      for (;;)
      {
        boolean bool = paramList.hasNext();
        if (!bool) {
          break;
        }
        localObject = paramList.next();
        localObject = (File)localObject;
        a((File)localObject);
      }
      return true;
    }
    catch (Exception paramList)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("unzip fail delete file failed");
      ((StringBuilder)localObject).append(paramList.getMessage());
      LogsUtil.a("ZipUtil", ((StringBuilder)localObject).toString());
    }
    return false;
  }
}
