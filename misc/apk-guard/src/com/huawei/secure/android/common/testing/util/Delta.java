package com.huawei.secure.android.common.testing.util;

import android.net.http.SslCertificate;
import android.os.Bundle;
import java.io.ByteArrayInputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Principal;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateExpiredException;
import java.security.cert.CertificateFactory;
import java.security.cert.CertificateNotYetValidException;
import java.security.cert.X509CRL;
import java.security.cert.X509CRLEntry;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class Delta
{
  private static final int TRANSACTION_getInfo = 5;
  private static final String original = "CertificateChainVerify";
  
  public Delta() {}
  
  public static X509Certificate verify(SslCertificate paramSslCertificate)
  {
    paramSslCertificate = SslCertificate.saveState(paramSslCertificate).getByteArray("x509-certificate");
    if (paramSslCertificate != null) {
      try
      {
        CertificateFactory localCertificateFactory = CertificateFactory.getInstance("X.509");
        paramSslCertificate = localCertificateFactory.generateCertificate(new ByteArrayInputStream(paramSslCertificate));
        return (X509Certificate)paramSslCertificate;
      }
      catch (CertificateException paramSslCertificate)
      {
        Log.log("CertificateChainVerify", "exception", paramSslCertificate);
      }
    }
    return null;
  }
  
  public static X509Certificate verify(String paramString)
  {
    try
    {
      localObject = CertificateFactory.getInstance("X509");
      paramString = ((CertificateFactory)localObject).generateCertificate(new ByteArrayInputStream(paramString.getBytes()));
      return (X509Certificate)paramString;
    }
    catch (CertificateException paramString)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("generateX509FromStr: CertificateException");
      ((StringBuilder)localObject).append(paramString.getMessage());
      Log.e("CertificateChainVerify", ((StringBuilder)localObject).toString());
    }
    return null;
  }
  
  public static boolean verify(X509Certificate paramX509Certificate)
  {
    if (paramX509Certificate == null) {
      return false;
    }
    if (paramX509Certificate.getBasicConstraints() == -1) {
      return false;
    }
    return paramX509Certificate.getKeyUsage()[5];
  }
  
  public static boolean verify(X509Certificate paramX509Certificate, String paramString)
  {
    if (!paramString.equals(paramX509Certificate.getSubjectDN().getName()))
    {
      Log.e("CertificateChainVerify", "verify: subject name is error");
      return false;
    }
    return true;
  }
  
  public static boolean verify(X509Certificate paramX509Certificate1, X509Certificate paramX509Certificate2)
  {
    PublicKey localPublicKey = paramX509Certificate1.getPublicKey();
    try
    {
      paramX509Certificate2.verify(localPublicKey);
      if (!verify(new X509Certificate[] { paramX509Certificate1, paramX509Certificate2 }))
      {
        Log.e("CertificateChainVerify", "verify: date not right");
        return false;
      }
      return true;
    }
    catch (SignatureException paramX509Certificate1)
    {
      paramX509Certificate2 = new StringBuilder();
      paramX509Certificate2.append("verify: publickey SignatureException ");
      paramX509Certificate2.append(paramX509Certificate1.getMessage());
      Log.e("CertificateChainVerify", paramX509Certificate2.toString());
      return false;
    }
    catch (NoSuchProviderException paramX509Certificate1)
    {
      paramX509Certificate2 = new StringBuilder();
      paramX509Certificate2.append("verify: publickey NoSuchProviderException ");
      paramX509Certificate2.append(paramX509Certificate1.getMessage());
      Log.e("CertificateChainVerify", paramX509Certificate2.toString());
      return false;
    }
    catch (NoSuchAlgorithmException paramX509Certificate1)
    {
      paramX509Certificate2 = new StringBuilder();
      paramX509Certificate2.append("verify: publickey NoSuchAlgorithmException ");
      paramX509Certificate2.append(paramX509Certificate1.getMessage());
      Log.e("CertificateChainVerify", paramX509Certificate2.toString());
      return false;
    }
    catch (InvalidKeyException paramX509Certificate1)
    {
      paramX509Certificate2 = new StringBuilder();
      paramX509Certificate2.append("verify: publickey InvalidKeyException ");
      paramX509Certificate2.append(paramX509Certificate1.getMessage());
      Log.e("CertificateChainVerify", paramX509Certificate2.toString());
      return false;
    }
    catch (CertificateException paramX509Certificate1)
    {
      paramX509Certificate2 = new StringBuilder();
      paramX509Certificate2.append("verify: publickey CertificateException ");
      paramX509Certificate2.append(paramX509Certificate1.getMessage());
      Log.e("CertificateChainVerify", paramX509Certificate2.toString());
    }
    return false;
  }
  
  public static boolean verify(X509Certificate paramX509Certificate, X509Certificate[] paramArrayOfX509Certificate)
    throws NoSuchProviderException, CertificateException, NoSuchAlgorithmException, InvalidKeyException, SignatureException
  {
    Object localObject1 = null;
    int i = 0;
    while (i < paramArrayOfX509Certificate.length)
    {
      Object localObject2 = paramArrayOfX509Certificate[i];
      Principal localPrincipal = ((X509Certificate)localObject2).getIssuerDN();
      localObject2 = ((X509Certificate)localObject2).getSubjectDN();
      if (localObject1 != null) {
        if (localPrincipal.equals(localObject1))
        {
          localObject1 = paramArrayOfX509Certificate[(i - 1)].getPublicKey();
          paramArrayOfX509Certificate[i].verify((PublicKey)localObject1);
        }
        else
        {
          Log.e("CertificateChainVerify", "verify: principalIssuer not match");
          return false;
        }
      }
      i += 1;
      localObject1 = localObject2;
    }
    if (!verify(paramX509Certificate, paramArrayOfX509Certificate[0])) {
      return false;
    }
    return verify(paramArrayOfX509Certificate);
  }
  
  public static boolean verify(X509Certificate paramX509Certificate, X509Certificate[] paramArrayOfX509Certificate, X509CRL paramX509CRL, String paramString)
    throws NoSuchAlgorithmException, CertificateException, NoSuchProviderException, InvalidKeyException, SignatureException
  {
    if (verify(paramX509Certificate, paramArrayOfX509Certificate)) {
      return false;
    }
    if (verify(paramArrayOfX509Certificate, paramX509CRL)) {
      return false;
    }
    if (!verify(paramArrayOfX509Certificate[(paramArrayOfX509Certificate.length - 1)], paramString)) {
      return false;
    }
    return verify(paramArrayOfX509Certificate);
  }
  
  public static boolean verify(List paramList)
  {
    int i = 0;
    while (i < paramList.size() - 1)
    {
      if (!verify((X509Certificate)paramList.get(i))) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public static boolean verify(X509Certificate[] paramArrayOfX509Certificate)
  {
    Object localObject = new Date();
    int j = paramArrayOfX509Certificate.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        break label79;
      }
      X509Certificate localX509Certificate = paramArrayOfX509Certificate[i];
      try
      {
        localX509Certificate.checkValidity((Date)localObject);
        i += 1;
      }
      catch (CertificateNotYetValidException paramArrayOfX509Certificate) {}catch (CertificateExpiredException paramArrayOfX509Certificate) {}
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("verifyCertificateDate: exception : ");
    ((StringBuilder)localObject).append(((CertificateException)paramArrayOfX509Certificate).getMessage());
    Log.e("CertificateChainVerify", ((StringBuilder)localObject).toString());
    return false;
    label79:
    return true;
  }
  
  public static boolean verify(X509Certificate[] paramArrayOfX509Certificate, X509CRL paramX509CRL)
  {
    ArrayList localArrayList = new ArrayList();
    int j = paramArrayOfX509Certificate.length;
    int i = 0;
    while (i < j)
    {
      localArrayList.add(paramArrayOfX509Certificate[i].getSerialNumber());
      i += 1;
    }
    if (paramX509CRL != null) {
      try
      {
        paramArrayOfX509Certificate = paramX509CRL.getRevokedCertificates();
        if (paramArrayOfX509Certificate != null)
        {
          boolean bool = paramArrayOfX509Certificate.isEmpty();
          if (!bool)
          {
            paramArrayOfX509Certificate = paramArrayOfX509Certificate.iterator();
            do
            {
              bool = paramArrayOfX509Certificate.hasNext();
              if (!bool) {
                break;
              }
              paramX509CRL = paramArrayOfX509Certificate.next();
              paramX509CRL = (X509CRLEntry)paramX509CRL;
              bool = localArrayList.contains(paramX509CRL.getSerialNumber());
            } while (!bool);
            Log.e("CertificateChainVerify", "verify: certificate revoked");
            return false;
          }
        }
      }
      catch (Exception paramArrayOfX509Certificate)
      {
        paramX509CRL = new StringBuilder();
        paramX509CRL.append("verify: revoked verify exception : ");
        paramX509CRL.append(paramArrayOfX509Certificate.getMessage());
        Log.e("CertificateChainVerify", paramX509CRL.toString());
        return false;
      }
    }
    return true;
  }
}
