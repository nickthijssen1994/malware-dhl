package com.huawei.secure.android.common;

import android.content.Context;
import com.huawei.secure.android.common.testing.SSLUtil;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
import org.apache.http.conn.ssl.StrictHostnameVerifier;
import org.apache.http.conn.ssl.X509HostnameVerifier;

@Deprecated
public class SecureApacheSSLSocketFactory
  extends org.apache.http.conn.ssl.SSLSocketFactory
{
  public static final X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER = new BrowserCompatHostnameVerifier();
  public static final X509HostnameVerifier STRICT_HOSTNAME_VERIFIER = new StrictHostnameVerifier();
  private static volatile SecureApacheSSLSocketFactory _theInstance = null;
  private Context mContext;
  private SSLContext sslContext;
  
  private SecureApacheSSLSocketFactory(KeyStore paramKeyStore)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException
  {
    super(paramKeyStore);
  }
  
  private SecureApacheSSLSocketFactory(KeyStore paramKeyStore, Context paramContext)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalAccessException
  {
    super(paramKeyStore);
    mContext = paramContext;
    sslContext = SSLUtil.setSSLContext();
    paramKeyStore = new SecureX509TrustManager(mContext);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramKeyStore }, null);
  }
  
  public SecureApacheSSLSocketFactory(KeyStore paramKeyStore, InputStream paramInputStream, String paramString)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException
  {
    super(paramKeyStore);
    sslContext = SSLUtil.setSSLContext();
    paramKeyStore = new HiCloudX509TrustManager(paramInputStream, paramString);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramKeyStore }, null);
  }
  
  private void createLayeredSocket(Socket paramSocket)
  {
    paramSocket = (SSLSocket)paramSocket;
    SSLUtil.setEnabledProtocols(paramSocket);
    SSLUtil.setEnableSafeCipherSuites(paramSocket);
  }
  
  public static SecureApacheSSLSocketFactory getInstance(KeyStore paramKeyStore, Context paramContext)
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException, CertificateException, IOException, IllegalAccessException
  {
    if (_theInstance == null) {
      try
      {
        if (_theInstance == null) {
          _theInstance = new SecureApacheSSLSocketFactory(paramKeyStore, paramContext);
        }
      }
      catch (Throwable paramKeyStore)
      {
        throw paramKeyStore;
      }
    }
    return _theInstance;
  }
  
  public Socket createSocket()
    throws IOException
  {
    Socket localSocket = sslContext.getSocketFactory().createSocket();
    createLayeredSocket(localSocket);
    return localSocket;
  }
  
  public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
    throws IOException
  {
    paramSocket = sslContext.getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
    createLayeredSocket(paramSocket);
    return paramSocket;
  }
}
