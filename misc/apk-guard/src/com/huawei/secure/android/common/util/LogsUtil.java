package com.huawei.secure.android.common.util;

import android.text.TextUtils;
import android.util.Log;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogsUtil
{
  private static final char N = '*';
  private static final Pattern PARAM_RE = Pattern.compile("[0-9]*[a-z|A-Z]*[?-?]*");
  private static final int TYPE_DIALOG = 2;
  
  public LogsUtil() {}
  
  public static void a(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.e(paramString1, toString(paramString2, false));
  }
  
  public static void addConnector(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.w(paramString1, toString(paramString2, false));
  }
  
  public static void addConnector(String paramString1, String paramString2, String paramString3)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.w(paramString1, format(paramString2, paramString3));
  }
  
  public static void addConnector(String paramString1, String paramString2, boolean paramBoolean)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.w(paramString1, toString(paramString2, paramBoolean));
  }
  
  public static void d(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.d(paramString1, toString(paramString2, false));
  }
  
  public static void d(String paramString1, String paramString2, String paramString3)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.d(paramString1, format(paramString2, paramString3));
  }
  
  public static void d(String paramString1, String paramString2, String paramString3, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.d(paramString1, format(paramString2, paramString3), format(paramThrowable));
  }
  
  public static void d(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.d(paramString1, toString(paramString2, false), format(paramThrowable));
  }
  
  public static void d(String paramString1, String paramString2, Throwable paramThrowable, boolean paramBoolean)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.d(paramString1, toString(paramString2, paramBoolean), format(paramThrowable));
  }
  
  public static void d(String paramString1, String paramString2, boolean paramBoolean)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.d(paramString1, toString(paramString2, paramBoolean));
  }
  
  public static void e(String paramString1, String paramString2, String paramString3)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.e(paramString1, format(paramString2, paramString3));
  }
  
  public static void e(String paramString1, String paramString2, String paramString3, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.e(paramString1, format(paramString2, paramString3), format(paramThrowable));
  }
  
  public static void e(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.e(paramString1, toString(paramString2, false), format(paramThrowable));
  }
  
  public static void e(String paramString1, String paramString2, Throwable paramThrowable, boolean paramBoolean)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.e(paramString1, toString(paramString2, paramBoolean), format(paramThrowable));
  }
  
  public static void e(String paramString1, String paramString2, boolean paramBoolean)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.e(paramString1, toString(paramString2, paramBoolean));
  }
  
  private static String encode(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return paramString;
    }
    paramString = paramString.toCharArray();
    int i = 0;
    while (i < paramString.length)
    {
      if (i % 2 == 0) {
        paramString[i] = 42;
      }
      i += 1;
    }
    return new String(paramString);
  }
  
  private static String format(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder(512);
    if (!TextUtils.isEmpty(paramString1)) {
      localStringBuilder.append(paramString1);
    }
    if (!TextUtils.isEmpty(paramString2)) {
      localStringBuilder.append(parse(paramString2));
    }
    return localStringBuilder.toString();
  }
  
  private static Throwable format(Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return null;
    }
    a localA1 = new a(paramThrowable);
    localA1.setStackTrace(paramThrowable.getStackTrace());
    localA1.setMessage(encode(paramThrowable.getMessage()));
    Throwable localThrowable = paramThrowable.getCause();
    a localA2;
    for (paramThrowable = localA1; localThrowable != null; paramThrowable = localA2)
    {
      localA2 = new a(localThrowable);
      localA2.setStackTrace(localThrowable.getStackTrace());
      localA2.setMessage(encode(localThrowable.getMessage()));
      paramThrowable.format(localA2);
      localThrowable = localThrowable.getCause();
    }
    return localA1;
  }
  
  public static void getInstallAppIntent(String paramString1, String paramString2, boolean paramBoolean)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.i(paramString1, toString(paramString2, paramBoolean));
  }
  
  public static void getMessage(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.w(paramString1, toString(paramString2, false), format(paramThrowable));
  }
  
  public static void getMessage(String paramString1, String paramString2, Throwable paramThrowable, boolean paramBoolean)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.w(paramString1, toString(paramString2, paramBoolean), format(paramThrowable));
  }
  
  public static void i(String paramString1, String paramString2, String paramString3)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.i(paramString1, format(paramString2, paramString3));
  }
  
  public static void i(String paramString1, String paramString2, String paramString3, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.i(paramString1, format(paramString2, paramString3), format(paramThrowable));
  }
  
  public static void i(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.i(paramString1, toString(paramString2, false), format(paramThrowable));
  }
  
  public static void i(String paramString1, String paramString2, Throwable paramThrowable, boolean paramBoolean)
  {
    if ((TextUtils.isEmpty(paramString2)) && (paramThrowable == null)) {
      return;
    }
    Log.i(paramString1, toString(paramString2, paramBoolean), format(paramThrowable));
  }
  
  public static void init(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString2)) {
      return;
    }
    Log.i(paramString1, toString(paramString2, false));
  }
  
  private static String parse(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return paramString;
    }
    int m = paramString.length();
    int j = 1;
    if (1 == m) {
      return String.valueOf('*');
    }
    StringBuilder localStringBuilder = new StringBuilder(m);
    int i = 0;
    while (i < m)
    {
      char c3 = paramString.charAt(i);
      char c1 = c3;
      int k = j;
      char c2 = c1;
      if (PARAM_RE.matcher(String.valueOf(c3)).matches())
      {
        if (j % 2 == 0) {
          c1 = '*';
        }
        k = j + 1;
        c2 = c1;
      }
      localStringBuilder.append(c2);
      i += 1;
      j = k;
    }
    return localStringBuilder.toString();
  }
  
  private static String toString(String paramString, boolean paramBoolean)
  {
    StringBuilder localStringBuilder = new StringBuilder(512);
    if (!TextUtils.isEmpty(paramString)) {
      if (paramBoolean) {
        localStringBuilder.append(parse(paramString));
      } else {
        localStringBuilder.append(paramString);
      }
    }
    return localStringBuilder.toString();
  }
  
  public static void w(String paramString1, String paramString2, String paramString3, Throwable paramThrowable)
  {
    if ((TextUtils.isEmpty(paramString2)) && (TextUtils.isEmpty(paramString3))) {
      return;
    }
    Log.w(paramString1, format(paramString2, paramString3), format(paramThrowable));
  }
  
  private static class a
    extends Throwable
  {
    private static final long serialVersionUID = 7129050843360571879L;
    private Throwable _exception;
    private Throwable exception;
    private String message;
    
    public a(Throwable paramThrowable)
    {
      exception = paramThrowable;
    }
    
    public void format(Throwable paramThrowable)
    {
      _exception = paramThrowable;
    }
    
    public Throwable getCause()
    {
      Throwable localThrowable = _exception;
      if (localThrowable == this) {
        return null;
      }
      return localThrowable;
    }
    
    public String getMessage()
    {
      return message;
    }
    
    public void setMessage(String paramString)
    {
      message = paramString;
    }
    
    public String toString()
    {
      Object localObject1 = exception;
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = localObject1.getClass().getName();
      localObject1 = localObject2;
      if (message != null)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append(": ");
        localObject1 = ((StringBuilder)localObject1).toString();
        if (message.startsWith((String)localObject1)) {
          return message;
        }
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append((String)localObject1);
        ((StringBuilder)localObject2).append(message);
        localObject1 = ((StringBuilder)localObject2).toString();
      }
      return localObject1;
    }
  }
}
