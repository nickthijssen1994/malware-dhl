package com.huawei.secure.android.common.testing.util;

import android.database.Cursor;
import android.text.TextUtils;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

public abstract class ByteVector
{
  private static final int DEFAULT_BLOCK_SIZE = 4096;
  private static final String b = "IOUtil";
  
  public ByteVector() {}
  
  public static void add(InputStream paramInputStream)
  {
    close(paramInputStream);
  }
  
  public static void b(File paramFile)
  {
    if ((paramFile != null) && (paramFile.exists()) && (!paramFile.delete())) {
      Log.e("IOUtil", "deleteSecure exception");
    }
  }
  
  public static void b(String paramString)
  {
    if (!TextUtils.isEmpty(paramString)) {
      b(new File(paramString));
    }
  }
  
  public static void close(Closeable paramCloseable)
  {
    if (paramCloseable != null)
    {
      try
      {
        paramCloseable.close();
        return;
      }
      catch (IOException paramCloseable)
      {
        for (;;) {}
      }
      Log.e("IOUtil", "closeSecure IOException");
      return;
    }
  }
  
  public static long copy(InputStream paramInputStream, OutputStream paramOutputStream)
    throws IOException
  {
    return copy(paramInputStream, paramOutputStream, new byte['?']);
  }
  
  public static long copy(InputStream paramInputStream, OutputStream paramOutputStream, byte[] paramArrayOfByte)
    throws IOException
  {
    int i;
    for (long l = 0L;; l += i)
    {
      i = paramInputStream.read(paramArrayOfByte);
      if (-1 == i) {
        break;
      }
      paramOutputStream.write(paramArrayOfByte, 0, i);
    }
    return l;
  }
  
  public static InputStream get(byte[] paramArrayOfByte)
    throws IOException
  {
    return new ByteArrayInputStream(paramArrayOfByte);
  }
  
  public static void getSize(Cursor paramCursor)
  {
    if (paramCursor != null) {
      paramCursor.close();
    }
  }
  
  public static void read(Reader paramReader)
  {
    close(paramReader);
  }
  
  public static byte[] read(InputStream paramInputStream)
    throws IOException
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    copy(paramInputStream, localByteArrayOutputStream);
    return localByteArrayOutputStream.toByteArray();
  }
  
  public static void write(OutputStream paramOutputStream)
  {
    close(paramOutputStream);
  }
  
  public static void write(Writer paramWriter)
  {
    close(paramWriter);
  }
}
