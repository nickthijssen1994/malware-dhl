package com.huawei.secure.android.common.webview;

import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.graphics.Bitmap;
import android.net.http.SslError;
import android.os.Message;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.ClientCertRequest;
import android.webkit.HttpAuthHandler;
import android.webkit.RenderProcessGoneDetail;
import android.webkit.SafeBrowsingResponse;
import android.webkit.SslErrorHandler;
import android.webkit.URLUtil;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import com.huawei.secure.android.common.util.LogsUtil;
import com.jd.sentry.performance.network.instrumentation.webview.ShooterWebViewClient;
import com.jd.sentry.performance.network.instrumentation.webview.ShooterWebviewInstrumentation;
import java.util.Arrays;
import java.util.Map;

public class SafeWebView
  extends WebView
{
  private static final String PAGE_KEY = "SafeWebView";
  private String[] codes;
  private String mUrl;
  private String[] mValue;
  private String[] parameters;
  private WebViewLoadCallBack srv;
  
  public SafeWebView(Context paramContext)
  {
    super(paramContext);
    initWebView();
  }
  
  public SafeWebView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    initWebView();
  }
  
  public SafeWebView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initWebView();
  }
  
  public SafeWebView(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    initWebView();
  }
  
  private void initWebView()
  {
    SafeWebSettings.initWebviewAndSettings(this);
    ShooterWebviewInstrumentation.setWebViewClient(this, null);
  }
  
  private boolean isHttpUrl(String paramString)
  {
    return URLUtil.isHttpUrl(paramString);
  }
  
  public String getDefaultErrorPage()
  {
    return mUrl;
  }
  
  public WebViewLoadCallBack getWebViewLoadCallBack()
  {
    return srv;
  }
  
  public String[] getWhitelist()
  {
    String[] arrayOfString = parameters;
    if (arrayOfString == null) {
      return null;
    }
    return (String[])Arrays.copyOf(arrayOfString, arrayOfString.length);
  }
  
  public String[] getWhitelistNotMathcSubDomain()
  {
    String[] arrayOfString = codes;
    if (arrayOfString == null) {
      return null;
    }
    return (String[])Arrays.copyOf(arrayOfString, arrayOfString.length);
  }
  
  public String[] getWhitelistWithPath()
  {
    String[] arrayOfString = mValue;
    if (arrayOfString == null) {
      return null;
    }
    return (String[])Arrays.copyOf(arrayOfString, arrayOfString.length);
  }
  
  public boolean isWhiteListUrl(String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      LogsUtil.a("SafeWebView", "url is null");
      return false;
    }
    if (!URLUtil.isNetworkUrl(paramString)) {
      return true;
    }
    String[] arrayOfString1 = getWhitelistWithPath();
    String[] arrayOfString2 = getWhitelistNotMathcSubDomain();
    String[] arrayOfString3 = getWhitelist();
    if ((arrayOfString1 != null) && (arrayOfString1.length != 0)) {
      return UriUtil.isUrlHostAndPathInWhitelist(paramString, arrayOfString1);
    }
    if ((arrayOfString2 != null) && (arrayOfString2.length != 0)) {
      return UriUtil.isUrlHostSameWhitelist(paramString, arrayOfString2);
    }
    return UriUtil.isUrlHostInWhitelist(paramString, arrayOfString3);
  }
  
  public void loadDataWithBaseURL(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    if (isHttpUrl(paramString1))
    {
      Log.e("SafeWebView", "loadDataWithBaseURL: http url , not safe");
      if (!TextUtils.isEmpty(mUrl))
      {
        super.loadDataWithBaseURL(mUrl, paramString2, paramString3, paramString4, paramString5);
        return;
      }
      if (getWebViewLoadCallBack() != null)
      {
        Log.e("SafeWebView", "WebViewLoadCallBack");
        getWebViewLoadCallBack().onCheckError(paramString1, WebViewLoadCallBack.ErrorCode.HTTP_URL);
      }
    }
    else
    {
      super.loadDataWithBaseURL(paramString1, paramString2, paramString3, paramString4, paramString5);
    }
  }
  
  public void loadUrl(String paramString)
  {
    if (isHttpUrl(paramString))
    {
      Log.e("SafeWebView", "loadUrl: http url , not safe");
      if (!TextUtils.isEmpty(mUrl))
      {
        super.loadUrl(mUrl);
        return;
      }
      if (getWebViewLoadCallBack() != null)
      {
        Log.e("SafeWebView", "WebViewLoadCallBack");
        getWebViewLoadCallBack().onCheckError(paramString, WebViewLoadCallBack.ErrorCode.HTTP_URL);
      }
    }
    else
    {
      super.loadUrl(paramString);
    }
  }
  
  public void loadUrl(String paramString, Map paramMap)
  {
    if (isHttpUrl(paramString))
    {
      Log.e("SafeWebView", "loadUrl: http url , not safe");
      if (!TextUtils.isEmpty(mUrl))
      {
        super.loadUrl(mUrl, paramMap);
        return;
      }
      if (getWebViewLoadCallBack() != null)
      {
        Log.e("SafeWebView", "WebViewLoadCallBack");
        getWebViewLoadCallBack().onCheckError(paramString, WebViewLoadCallBack.ErrorCode.HTTP_URL);
      }
    }
    else
    {
      super.loadUrl(paramString, paramMap);
    }
  }
  
  public final void onCheckError(WebView paramWebView, String paramString)
  {
    LogsUtil.e("SafeWebView", "onCheckError url is not in white list ", paramString);
    paramWebView.stopLoading();
    String str = getDefaultErrorPage();
    if (!TextUtils.isEmpty(str))
    {
      paramWebView.loadUrl(str);
      return;
    }
    if (getWebViewLoadCallBack() != null)
    {
      Log.e("SafeWebView", "onPageStarted WebViewLoadCallBack");
      getWebViewLoadCallBack().onCheckError(paramString, WebViewLoadCallBack.ErrorCode.URL_NOT_IN_WHITE_LIST);
    }
  }
  
  public void postUrl(String paramString, byte[] paramArrayOfByte)
  {
    if (isHttpUrl(paramString))
    {
      Log.e("SafeWebView", "postUrl: http url , not safe");
      if (!TextUtils.isEmpty(mUrl))
      {
        super.postUrl(mUrl, paramArrayOfByte);
        return;
      }
      if (getWebViewLoadCallBack() != null)
      {
        Log.e("SafeWebView", "WebViewLoadCallBack");
        getWebViewLoadCallBack().onCheckError(paramString, WebViewLoadCallBack.ErrorCode.HTTP_URL);
      }
    }
    else
    {
      super.postUrl(paramString, paramArrayOfByte);
    }
  }
  
  public void setDefaultErrorPage(String paramString)
  {
    mUrl = paramString;
  }
  
  public void setWebViewClient(WebViewClient paramWebViewClient)
  {
    super.setWebViewClient((WebViewClient)new c(paramWebViewClient, true, null));
  }
  
  public void setWebViewClient(WebViewClient paramWebViewClient, boolean paramBoolean)
  {
    ShooterWebviewInstrumentation.setWebViewClient(this, (WebViewClient)new c(paramWebViewClient, paramBoolean, null));
  }
  
  public void setWebViewLoadCallBack(WebViewLoadCallBack paramWebViewLoadCallBack)
  {
    srv = paramWebViewLoadCallBack;
  }
  
  public void setWhitelist(String[] paramArrayOfString)
  {
    if (paramArrayOfString == null) {
      paramArrayOfString = null;
    } else {
      paramArrayOfString = (String[])Arrays.copyOf(paramArrayOfString, paramArrayOfString.length);
    }
    parameters = paramArrayOfString;
  }
  
  public void setWhitelistNotMathcSubDomain(String[] paramArrayOfString)
  {
    if (paramArrayOfString == null) {
      paramArrayOfString = null;
    } else {
      paramArrayOfString = (String[])Arrays.copyOf(paramArrayOfString, paramArrayOfString.length);
    }
    codes = paramArrayOfString;
  }
  
  public void setWhitelistWithPath(String[] paramArrayOfString)
  {
    if (paramArrayOfString == null) {
      paramArrayOfString = null;
    } else {
      paramArrayOfString = (String[])Arrays.copyOf(paramArrayOfString, paramArrayOfString.length);
    }
    mValue = paramArrayOfString;
  }
  
  protected final void showNoticeWhenSSLErrorOccurred(String paramString1, String paramString2, String paramString3, String paramString4, SslErrorHandler paramSslErrorHandler)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getContext());
    if (!TextUtils.isEmpty(paramString1)) {
      localBuilder.setTitle(paramString1);
    }
    paramString1 = new b(paramSslErrorHandler);
    paramSslErrorHandler = new a(paramSslErrorHandler);
    localBuilder.setMessage(paramString2);
    localBuilder.setPositiveButton(paramString3, paramString1);
    localBuilder.setNegativeButton(paramString4, paramSslErrorHandler);
    localBuilder.create().show();
  }
  
  private static class a
    implements DialogInterface.OnClickListener
  {
    private final SslErrorHandler val$handler;
    
    a(SslErrorHandler paramSslErrorHandler)
    {
      val$handler = paramSslErrorHandler;
    }
    
    public void onClick(DialogInterface paramDialogInterface, int paramInt)
    {
      val$handler.cancel();
    }
  }
  
  private static class b
    implements DialogInterface.OnClickListener
  {
    private final SslErrorHandler val$handler;
    
    b(SslErrorHandler paramSslErrorHandler)
    {
      val$handler = paramSslErrorHandler;
    }
    
    public void onClick(DialogInterface paramDialogInterface, int paramInt)
    {
      val$handler.proceed();
    }
  }
  
  private final class c
    extends ShooterWebViewClient
  {
    private WebViewClient appView;
    private boolean bridge;
    
    private c(WebViewClient paramWebViewClient, boolean paramBoolean)
    {
      appView = paramWebViewClient;
      bridge = paramBoolean;
    }
    
    public void doUpdateVisitedHistory(WebView paramWebView, String paramString, boolean paramBoolean)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).doUpdateVisitedHistory(paramWebView, paramString, paramBoolean);
        return;
      }
      super.doUpdateVisitedHistory(paramWebView, paramString, paramBoolean);
    }
    
    public void onFormResubmission(WebView paramWebView, Message paramMessage1, Message paramMessage2)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onFormResubmission(paramWebView, paramMessage1, paramMessage2);
        return;
      }
      super.onFormResubmission(paramWebView, paramMessage1, paramMessage2);
    }
    
    public void onLoadResource(WebView paramWebView, String paramString)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onLoadResource(paramWebView, paramString);
        return;
      }
      super.onLoadResource(paramWebView, paramString);
    }
    
    public void onPageCommitVisible(WebView paramWebView, String paramString)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onPageCommitVisible(paramWebView, paramString);
        return;
      }
      super.onPageCommitVisible(paramWebView, paramString);
    }
    
    public void onPageFinished(WebView paramWebView, String paramString)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onPageFinished(paramWebView, paramString);
        return;
      }
      super.onPageFinished(paramWebView, paramString);
    }
    
    public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
    {
      WebViewClient localWebViewClient = appView;
      if ((localWebViewClient != null) && (!bridge))
      {
        ((ShooterWebViewClient)localWebViewClient).onPageStarted(paramWebView, paramString, paramBitmap);
        return;
      }
      if (!isWhiteListUrl(paramString))
      {
        onCheckError(paramWebView, paramString);
        return;
      }
      super.onPageStarted(paramWebView, paramString, paramBitmap);
    }
    
    public void onReceivedClientCertRequest(WebView paramWebView, ClientCertRequest paramClientCertRequest)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedClientCertRequest(paramWebView, paramClientCertRequest);
        return;
      }
      super.onReceivedClientCertRequest(paramWebView, paramClientCertRequest);
    }
    
    public void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedError(paramWebView, paramInt, paramString1, paramString2);
        return;
      }
      super.onReceivedError(paramWebView, paramInt, paramString1, paramString2);
    }
    
    public void onReceivedError(WebView paramWebView, WebResourceRequest paramWebResourceRequest, WebResourceError paramWebResourceError)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedError(paramWebView, paramWebResourceRequest, paramWebResourceError);
        return;
      }
      super.onReceivedError(paramWebView, paramWebResourceRequest, paramWebResourceError);
    }
    
    public void onReceivedHttpAuthRequest(WebView paramWebView, HttpAuthHandler paramHttpAuthHandler, String paramString1, String paramString2)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedHttpAuthRequest(paramWebView, paramHttpAuthHandler, paramString1, paramString2);
        return;
      }
      super.onReceivedHttpAuthRequest(paramWebView, paramHttpAuthHandler, paramString1, paramString2);
    }
    
    public void onReceivedHttpError(WebView paramWebView, WebResourceRequest paramWebResourceRequest, WebResourceResponse paramWebResourceResponse)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedHttpError(paramWebView, paramWebResourceRequest, paramWebResourceResponse);
        return;
      }
      super.onReceivedHttpError(paramWebView, paramWebResourceRequest, paramWebResourceResponse);
    }
    
    public void onReceivedLoginRequest(WebView paramWebView, String paramString1, String paramString2, String paramString3)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedLoginRequest(paramWebView, paramString1, paramString2, paramString3);
        return;
      }
      super.onReceivedLoginRequest(paramWebView, paramString1, paramString2, paramString3);
    }
    
    public void onReceivedSslError(WebView paramWebView, SslErrorHandler paramSslErrorHandler, SslError paramSslError)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onReceivedSslError(paramWebView, paramSslErrorHandler, paramSslError);
        return;
      }
      super.onReceivedSslError(paramWebView, paramSslErrorHandler, paramSslError);
    }
    
    public boolean onRenderProcessGone(WebView paramWebView, RenderProcessGoneDetail paramRenderProcessGoneDetail)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null) {
        return ((ShooterWebViewClient)localWebViewClient).onRenderProcessGone(paramWebView, paramRenderProcessGoneDetail);
      }
      return super.onRenderProcessGone(paramWebView, paramRenderProcessGoneDetail);
    }
    
    public void onSafeBrowsingHit(WebView paramWebView, WebResourceRequest paramWebResourceRequest, int paramInt, SafeBrowsingResponse paramSafeBrowsingResponse)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onSafeBrowsingHit(paramWebView, paramWebResourceRequest, paramInt, paramSafeBrowsingResponse);
        return;
      }
      super.onSafeBrowsingHit(paramWebView, paramWebResourceRequest, paramInt, paramSafeBrowsingResponse);
    }
    
    public void onScaleChanged(WebView paramWebView, float paramFloat1, float paramFloat2)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onScaleChanged(paramWebView, paramFloat1, paramFloat2);
        return;
      }
      super.onScaleChanged(paramWebView, paramFloat1, paramFloat2);
    }
    
    public void onTooManyRedirects(WebView paramWebView, Message paramMessage1, Message paramMessage2)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onTooManyRedirects(paramWebView, paramMessage1, paramMessage2);
        return;
      }
      super.onTooManyRedirects(paramWebView, paramMessage1, paramMessage2);
    }
    
    public void onUnhandledKeyEvent(WebView paramWebView, KeyEvent paramKeyEvent)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null)
      {
        ((ShooterWebViewClient)localWebViewClient).onUnhandledKeyEvent(paramWebView, paramKeyEvent);
        return;
      }
      super.onUnhandledKeyEvent(paramWebView, paramKeyEvent);
    }
    
    public WebResourceResponse shouldInterceptRequest(WebView paramWebView, WebResourceRequest paramWebResourceRequest)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null) {
        return ((ShooterWebViewClient)localWebViewClient).shouldInterceptRequest(paramWebView, paramWebResourceRequest);
      }
      return super.shouldInterceptRequest(paramWebView, paramWebResourceRequest);
    }
    
    public WebResourceResponse shouldInterceptRequest(WebView paramWebView, String paramString)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null) {
        return ((ShooterWebViewClient)localWebViewClient).shouldInterceptRequest(paramWebView, paramString);
      }
      return super.shouldInterceptRequest(paramWebView, paramString);
    }
    
    public boolean shouldOverrideKeyEvent(WebView paramWebView, KeyEvent paramKeyEvent)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null) {
        return ((ShooterWebViewClient)localWebViewClient).shouldOverrideKeyEvent(paramWebView, paramKeyEvent);
      }
      return super.shouldOverrideKeyEvent(paramWebView, paramKeyEvent);
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, WebResourceRequest paramWebResourceRequest)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null) {
        return ((ShooterWebViewClient)localWebViewClient).shouldOverrideUrlLoading(paramWebView, paramWebResourceRequest);
      }
      return super.shouldOverrideUrlLoading(paramWebView, paramWebResourceRequest);
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      WebViewClient localWebViewClient = appView;
      if (localWebViewClient != null) {
        return ((ShooterWebViewClient)localWebViewClient).shouldOverrideUrlLoading(paramWebView, paramString);
      }
      return super.shouldOverrideUrlLoading(paramWebView, paramString);
    }
  }
}
