package com.huawei.secure.android.common.util;

import android.app.Activity;
import android.view.Window;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedAction;

public class ScreenUtil
{
  private static final int MAX_SIZE = 524288;
  private static final String PAGE_KEY = "ScreenUtil";
  
  public ScreenUtil() {}
  
  public static void disableScreenshots(Activity paramActivity)
  {
    setStatusBarColor(paramActivity, 8192);
  }
  
  public static void enableScreenshots(Activity paramActivity)
  {
    showDialog(paramActivity, 8192);
  }
  
  public static void hideOverlayWindows(Activity paramActivity)
  {
    if ((paramActivity != null) && (!paramActivity.isFinishing()))
    {
      try
      {
        paramActivity = paramActivity.getWindow();
        Object localObject = Class.forName("android.view.Window");
        Class localClass = Integer.TYPE;
        localObject = ((Class)localObject).getDeclaredMethod("addPrivateFlags", new Class[] { localClass });
        AccessController.doPrivileged(new a((Method)localObject));
        ((Method)localObject).invoke(paramActivity, new Object[] { Integer.valueOf(524288) });
        return;
      }
      catch (ClassNotFoundException paramActivity)
      {
        for (;;) {}
      }
      catch (NoSuchMethodException paramActivity)
      {
        for (;;) {}
      }
      catch (InvocationTargetException paramActivity)
      {
        for (;;) {}
      }
      catch (IllegalAccessException paramActivity)
      {
        for (;;) {}
      }
      LogsUtil.a("ScreenUtil", "hideOverlayWindows IllegalAccessException");
      return;
      LogsUtil.a("ScreenUtil", "hideOverlayWindows InvocationTargetException");
      return;
      LogsUtil.a("ScreenUtil", "hideOverlayWindows NoSuchMethodException");
      return;
      LogsUtil.a("ScreenUtil", "hideOverlayWindows ClassNotFoundException");
      return;
    }
  }
  
  private static void setStatusBarColor(Activity paramActivity, int paramInt)
  {
    if ((paramActivity != null) && (!paramActivity.isFinishing()))
    {
      paramActivity.getWindow().addFlags(paramInt);
      return;
    }
    LogsUtil.a("", "activity is null");
  }
  
  private static void showDialog(Activity paramActivity, int paramInt)
  {
    if ((paramActivity != null) && (!paramActivity.isFinishing()))
    {
      paramActivity.getWindow().clearFlags(paramInt);
      return;
    }
    LogsUtil.a("", "activity is null");
  }
  
  private static class a
    implements PrivilegedAction
  {
    Method val$method;
    
    public a(Method paramMethod)
    {
      val$method = paramMethod;
    }
    
    public Object run()
    {
      Method localMethod = val$method;
      if (localMethod == null) {
        return null;
      }
      localMethod.setAccessible(true);
      return null;
    }
  }
}
