package com.huawei.secure.android.common.testing;

import android.content.Context;
import android.content.res.AssetManager;
import com.huawei.secure.android.common.testing.util.BksUtil;
import com.huawei.secure.android.common.testing.util.ByteVector;
import com.huawei.secure.android.common.testing.util.Log;
import com.huawei.secure.android.common.testing.util.Prefs;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class SecureX509TrustManager
  implements X509TrustManager
{
  private static final String ACTION_UPDATE_ALL = "bks";
  private static final String NULL_LABEL = "";
  public static final String PAGE_KEY = "hmsrootcas.bks";
  private static final String SQL_UPDATE_6_4 = "X509";
  private static final String SQL_UPDATE_6_5 = "AndroidCAStore";
  private static final String this$0 = "SecureX509TrustManager";
  private X509Certificate[] chain;
  protected List<X509TrustManager> mCommands = new ArrayList();
  
  public SecureX509TrustManager(Context paramContext)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, IllegalArgumentException
  {
    this(paramContext, false);
  }
  
  public SecureX509TrustManager(Context paramContext, boolean paramBoolean)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, IllegalArgumentException
  {
    if (paramContext != null)
    {
      Prefs.setContext(paramContext);
      if (paramBoolean) {
        init();
      }
      createReport(paramContext);
      if (!mCommands.isEmpty()) {
        return;
      }
      throw new CertificateException("X509TrustManager is empty");
    }
    throw new IllegalArgumentException("context is null");
  }
  
  public SecureX509TrustManager(InputStream paramInputStream, String paramString)
    throws IllegalArgumentException
  {
    init(paramInputStream, paramString);
  }
  
  public SecureX509TrustManager(InputStream paramInputStream, String paramString, boolean paramBoolean)
    throws IllegalArgumentException
  {
    init(paramInputStream, paramString);
    if (paramBoolean) {
      init();
    }
  }
  
  public SecureX509TrustManager(String paramString)
    throws IllegalArgumentException, FileNotFoundException
  {
    this(paramString, false);
  }
  
  public SecureX509TrustManager(String paramString, boolean paramBoolean)
    throws IllegalArgumentException, FileNotFoundException
  {
    Object localObject = null;
    try
    {
      paramString = new FileInputStream(paramString);
      try
      {
        init(paramString, "");
        ByteVector.add(paramString);
        if (!paramBoolean) {
          return;
        }
        init();
        return;
      }
      catch (Throwable localThrowable1) {}
      ByteVector.add(paramString);
    }
    catch (Throwable localThrowable2)
    {
      paramString = localObject;
    }
    throw localThrowable2;
  }
  
  private void createReport(Context paramContext)
    throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException
  {
    Log.append(this$0, "loadBksCA");
    InputStream localInputStream = BksUtil.getFilesBksIS(paramContext);
    if (localInputStream != null)
    {
      String str1 = this$0;
      try
      {
        Log.append(str1, " get bks not from assets");
        init(localInputStream);
      }
      catch (IOException localIOException) {}catch (CertificateException localCertificateException) {}catch (KeyStoreException localKeyStoreException) {}catch (NoSuchAlgorithmException localNoSuchAlgorithmException) {}
      String str2 = this$0;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("loadBksCA: exception : ");
      localStringBuilder.append(((Exception)localNoSuchAlgorithmException).getMessage());
      Log.e(str2, localStringBuilder.toString());
      i = 0;
      break label103;
    }
    int i = 1;
    label103:
    if ((i == 0) || (localInputStream == null))
    {
      Log.append(this$0, " get bks from assets ");
      init(paramContext.getAssets().open("hmsrootcas.bks"));
    }
  }
  
  private void init()
  {
    Log.append(this$0, "loadSystemCA");
    Object localObject2;
    try
    {
      Object localObject1 = KeyStore.getInstance("AndroidCAStore");
      ((KeyStore)localObject1).load(null, null);
      localObject2 = TrustManagerFactory.getInstance("X509");
      ((TrustManagerFactory)localObject2).init((KeyStore)localObject1);
      localObject1 = ((TrustManagerFactory)localObject2).getTrustManagers();
      int i = 0;
      while (i < localObject1.length)
      {
        if ((localObject1[i] instanceof X509TrustManager))
        {
          localObject2 = mCommands;
          localObject3 = (X509TrustManager)localObject1[i];
          ((List)localObject2).add(localObject3);
        }
        i += 1;
      }
      localObject2 = this$0;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException) {}catch (IOException localIOException) {}catch (CertificateException localCertificateException) {}catch (KeyStoreException localKeyStoreException) {}
    Object localObject3 = new StringBuilder();
    ((StringBuilder)localObject3).append("loadSystemCA: exception : ");
    ((StringBuilder)localObject3).append(((Exception)localKeyStoreException).getMessage());
    Log.e((String)localObject2, ((StringBuilder)localObject3).toString());
  }
  
  private void init(InputStream paramInputStream)
    throws NoSuchAlgorithmException, KeyStoreException, CertificateException, IOException
  {
    try
    {
      Object localObject = TrustManagerFactory.getInstance("X509");
      KeyStore localKeyStore = KeyStore.getInstance("bks");
      localKeyStore.load(paramInputStream, "".toCharArray());
      ((TrustManagerFactory)localObject).init(localKeyStore);
      localObject = ((TrustManagerFactory)localObject).getTrustManagers();
      int i = 0;
      for (;;)
      {
        int j = localObject.length;
        if (i >= j) {
          break;
        }
        boolean bool = localObject[i] instanceof X509TrustManager;
        if (bool) {
          mCommands.add((X509TrustManager)localObject[i]);
        }
        i += 1;
      }
      ByteVector.add(paramInputStream);
      return;
    }
    catch (Throwable localThrowable)
    {
      ByteVector.add(paramInputStream);
      throw localThrowable;
    }
  }
  
  private void init(InputStream paramInputStream, String paramString)
  {
    if ((paramInputStream != null) && (paramString != null))
    {
      Object localObject1;
      try
      {
        localObject1 = TrustManagerFactory.getInstance("X509");
        localObject2 = KeyStore.getInstance("bks");
        ((KeyStore)localObject2).load(paramInputStream, paramString.toCharArray());
        ((TrustManagerFactory)localObject1).init((KeyStore)localObject2);
        paramString = ((TrustManagerFactory)localObject1).getTrustManagers();
        int i = 0;
        for (;;)
        {
          int j = paramString.length;
          if (i >= j) {
            break;
          }
          boolean bool = paramString[i] instanceof X509TrustManager;
          if (bool)
          {
            localObject1 = mCommands;
            localObject2 = (X509TrustManager)paramString[i];
            ((List)localObject1).add(localObject2);
          }
          i += 1;
        }
        localObject1 = this$0;
      }
      catch (Throwable paramString)
      {
        break label168;
      }
      catch (NoSuchAlgorithmException paramString) {}catch (IOException paramString) {}catch (CertificateException paramString) {}catch (KeyStoreException paramString) {}
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("loadInputStream: exception : ");
      ((StringBuilder)localObject2).append(((Exception)paramString).getMessage());
      Log.e((String)localObject1, ((StringBuilder)localObject2).toString());
      ByteVector.add(paramInputStream);
      return;
      label168:
      ByteVector.add(paramInputStream);
      throw paramString;
    }
    throw new IllegalArgumentException("inputstream or trustPwd is null");
  }
  
  public void checkClientTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString)
    throws CertificateException
  {
    Log.append(this$0, "checkClientTrusted: ");
    Iterator localIterator = mCommands.iterator();
    while (localIterator.hasNext())
    {
      X509TrustManager localX509TrustManager = (X509TrustManager)localIterator.next();
      try
      {
        localX509TrustManager.checkServerTrusted(paramArrayOfX509Certificate, paramString);
        return;
      }
      catch (CertificateException localCertificateException)
      {
        String str = this$0;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("checkServerTrusted CertificateException");
        localStringBuilder.append(localCertificateException.getMessage());
        Log.e(str, localStringBuilder.toString());
      }
    }
    throw new CertificateException("checkServerTrusted CertificateException");
  }
  
  public void checkServerTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString)
    throws CertificateException
  {
    setChain(paramArrayOfX509Certificate);
    Object localObject1 = this$0;
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append("checkServerTrusted begin ,server ca chain size is : ");
    ((StringBuilder)localObject2).append(paramArrayOfX509Certificate.length);
    ((StringBuilder)localObject2).append(" ,auth type is : ");
    ((StringBuilder)localObject2).append(paramString);
    Log.append((String)localObject1, ((StringBuilder)localObject2).toString());
    int j = paramArrayOfX509Certificate.length;
    int i = 0;
    Object localObject3;
    while (i < j)
    {
      localObject1 = paramArrayOfX509Certificate[i];
      localObject2 = this$0;
      localObject3 = new StringBuilder();
      ((StringBuilder)localObject3).append("server ca chain: getSubjectDN is :");
      ((StringBuilder)localObject3).append(((X509Certificate)localObject1).getSubjectDN());
      ((StringBuilder)localObject3).append(" , getIssuerDN :");
      ((StringBuilder)localObject3).append(((X509Certificate)localObject1).getIssuerDN());
      Log.d((String)localObject2, ((StringBuilder)localObject3).toString());
      localObject2 = this$0;
      localObject3 = new StringBuilder();
      ((StringBuilder)localObject3).append("server ca chain is :");
      ((StringBuilder)localObject3).append(localObject1);
      Log.d((String)localObject2, ((StringBuilder)localObject3).toString());
      i += 1;
    }
    int k = mCommands.size();
    i = 0;
    while (i < k)
    {
      localObject1 = this$0;
      try
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("check server i : ");
        ((StringBuilder)localObject2).append(i);
        Log.append((String)localObject1, ((StringBuilder)localObject2).toString());
        localObject1 = mCommands;
        localObject1 = ((List)localObject1).get(i);
        localObject1 = (X509TrustManager)localObject1;
        localObject2 = ((X509TrustManager)localObject1).getAcceptedIssuers();
        if (localObject2 != null)
        {
          localObject3 = this$0;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("client root ca size is : ");
          j = localObject2.length;
          localStringBuilder.append(j);
          Log.append((String)localObject3, localStringBuilder.toString());
          j = 0;
          while (j < localObject2.length)
          {
            localObject3 = this$0;
            localStringBuilder = new StringBuilder();
            localStringBuilder.append("client root ca getIssuerDN :");
            Object localObject4 = localObject2[j];
            localStringBuilder.append(localObject4.getIssuerDN());
            Log.d((String)localObject3, localStringBuilder.toString());
            j += 1;
          }
        }
        ((X509TrustManager)localObject1).checkServerTrusted(paramArrayOfX509Certificate, paramString);
        localObject1 = this$0;
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("checkServerTrusted succeed ,root ca issuer is : ");
        localObject3 = paramArrayOfX509Certificate[(paramArrayOfX509Certificate.length - 1)];
        ((StringBuilder)localObject2).append(((X509Certificate)localObject3).getIssuerDN());
        Log.append((String)localObject1, ((StringBuilder)localObject2).toString());
        return;
      }
      catch (CertificateException localCertificateException)
      {
        localObject2 = this$0;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append("checkServerTrusted error :");
        ((StringBuilder)localObject3).append(localCertificateException.getMessage());
        ((StringBuilder)localObject3).append(" , time : ");
        ((StringBuilder)localObject3).append(i);
        Log.e((String)localObject2, ((StringBuilder)localObject3).toString());
        if (i == k - 1)
        {
          if ((paramArrayOfX509Certificate != null) && (paramArrayOfX509Certificate.length > 0))
          {
            paramString = this$0;
            localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append("root ca issuer : ");
            ((StringBuilder)localObject2).append(paramArrayOfX509Certificate[(paramArrayOfX509Certificate.length - 1)].getIssuerDN());
            Log.e(paramString, ((StringBuilder)localObject2).toString());
          }
          throw localCertificateException;
        }
        i += 1;
      }
    }
  }
  
  public X509Certificate[] getAcceptedIssuers()
  {
    try
    {
      Object localObject1 = new ArrayList();
      localObject2 = mCommands;
      localObject2 = ((List)localObject2).iterator();
      for (;;)
      {
        boolean bool = ((Iterator)localObject2).hasNext();
        if (!bool) {
          break;
        }
        localObject3 = ((Iterator)localObject2).next();
        localObject3 = (X509TrustManager)localObject3;
        ((ArrayList)localObject1).addAll(Arrays.asList(((X509TrustManager)localObject3).getAcceptedIssuers()));
      }
      int i = ((ArrayList)localObject1).size();
      localObject2 = new X509Certificate[i];
      localObject1 = ((ArrayList)localObject1).toArray((Object[])localObject2);
      return (X509Certificate[])localObject1;
    }
    catch (Exception localException)
    {
      Object localObject2 = this$0;
      Object localObject3 = new StringBuilder();
      ((StringBuilder)localObject3).append("getAcceptedIssuers exception : ");
      ((StringBuilder)localObject3).append(localException.getMessage());
      Log.e((String)localObject2, ((StringBuilder)localObject3).toString());
    }
    return new X509Certificate[0];
  }
  
  public X509Certificate[] getChain()
  {
    return chain;
  }
  
  public List getX509TrustManagers()
  {
    return mCommands;
  }
  
  public void setChain(X509Certificate[] paramArrayOfX509Certificate)
  {
    chain = paramArrayOfX509Certificate;
  }
  
  public void setX509TrustManagers(List paramList)
  {
    mCommands = paramList;
  }
}
