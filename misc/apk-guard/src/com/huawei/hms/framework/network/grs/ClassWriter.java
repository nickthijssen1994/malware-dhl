package com.huawei.hms.framework.network.grs;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.framework.common.ExecutorsUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.asm.i;
import com.huawei.hms.framework.network.grs.data.ByteVector;
import com.huawei.hms.framework.network.grs.data.Label;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class ClassWriter
{
  private static final String a = "d";
  private static ExecutorService pool = ExecutorsUtils.newCachedThreadPool("GRS_GrsClient-Init");
  private Label b;
  private Context c;
  private final Object d = new Object();
  private boolean e = false;
  private ByteVector g;
  private a j;
  private i l;
  private Future<Boolean> table;
  private GrsBaseInfo x;
  
  ClassWriter(Context paramContext, GrsBaseInfo paramGrsBaseInfo)
  {
    c = paramContext.getApplicationContext();
    toByteArray(paramGrsBaseInfo);
    if (!e)
    {
      paramContext = d;
      try
      {
        if (!e)
        {
          paramGrsBaseInfo = x;
          Context localContext = c;
          table = pool.submit(new Function(this, localContext, paramGrsBaseInfo));
        }
        return;
      }
      catch (Throwable paramGrsBaseInfo)
      {
        throw paramGrsBaseInfo;
      }
    }
  }
  
  ClassWriter(GrsBaseInfo paramGrsBaseInfo)
  {
    toByteArray(paramGrsBaseInfo);
  }
  
  private boolean get()
  {
    if (table != null)
    {
      Object localObject = table;
      TimeUnit localTimeUnit = TimeUnit.SECONDS;
      try
      {
        localObject = ((Future)localObject).get(10L, localTimeUnit);
        localObject = (Boolean)localObject;
        boolean bool = ((Boolean)localObject).booleanValue();
        return bool;
      }
      catch (Exception localException)
      {
        Logger.append(a, "init compute task occur unknown Exception", localException);
        return false;
        Logger.append(a, "init compute task timed out");
        return false;
      }
      catch (InterruptedException localInterruptedException)
      {
        Logger.append(a, "init compute task interrupted.", localInterruptedException);
        return false;
      }
      catch (ExecutionException localExecutionException)
      {
        Logger.append(a, "init compute task failed.", localExecutionException);
        return false;
        Logger.get(a, "init compute task canceled.");
        return false;
      }
      catch (CancellationException localCancellationException)
      {
        for (;;) {}
      }
      catch (TimeoutException localTimeoutException)
      {
        for (;;) {}
      }
    }
    return false;
  }
  
  private boolean get(long paramLong)
  {
    return System.currentTimeMillis() - paramLong <= 604800000L;
  }
  
  private void read(Map paramMap)
  {
    if ((paramMap != null) && (!paramMap.isEmpty()))
    {
      paramMap = paramMap.keySet().iterator();
      while (paramMap.hasNext())
      {
        String str1 = (String)paramMap.next();
        if (str1.endsWith("time"))
        {
          String str2 = g.get(str1, "");
          boolean bool = TextUtils.isEmpty(str2);
          long l2 = 0L;
          long l1 = l2;
          if (!bool)
          {
            l1 = l2;
            if (str2.matches("\\d+")) {
              try
              {
                l1 = Long.parseLong(str2);
              }
              catch (NumberFormatException localNumberFormatException)
              {
                Logger.append(a, "convert expire time from String to Long catch NumberFormatException.", localNumberFormatException);
                l1 = l2;
              }
            }
          }
          if (!get(l1))
          {
            Logger.get(a, "init interface auto clear some invalid sp's data.");
            String str3 = str1.substring(0, str1.length() - 4);
            g.put(str3);
            g.put(str1);
          }
        }
      }
      return;
    }
    Logger.d(a, "sp's content is empty.");
  }
  
  private void toByteArray(GrsBaseInfo paramGrsBaseInfo)
  {
    try
    {
      GrsBaseInfo localGrsBaseInfo = paramGrsBaseInfo.clone();
      x = localGrsBaseInfo;
      return;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      Logger.append(a, "GrsClient catch CloneNotSupportedException", localCloneNotSupportedException);
      x = paramGrsBaseInfo.copy();
    }
  }
  
  String a(String paramString1, String paramString2)
  {
    if ((x != null) && (paramString1 != null) && (paramString2 != null))
    {
      if (get()) {
        return j.a(paramString1, paramString2, c);
      }
      return null;
    }
    Logger.append(a, "invalid para!");
    return null;
  }
  
  Map a(String paramString)
  {
    if ((x != null) && (paramString != null))
    {
      if (get()) {
        return j.a(paramString, c);
      }
      return new HashMap();
    }
    Logger.append(a, "invalid para!");
    return new HashMap();
  }
  
  boolean a()
  {
    if (!get()) {
      return false;
    }
    GrsBaseInfo localGrsBaseInfo = x;
    if (localGrsBaseInfo != null)
    {
      Context localContext = c;
      if (localContext == null) {
        return false;
      }
      b.a(localGrsBaseInfo, localContext);
      return true;
    }
    return false;
  }
  
  void b(String paramString, IQueryUrlsCallBack paramIQueryUrlsCallBack)
  {
    if (paramIQueryUrlsCallBack == null)
    {
      Logger.append(a, "IQueryUrlsCallBack is must not null for process continue.");
      return;
    }
    if ((x != null) && (paramString != null))
    {
      if (get()) {
        j.a(paramString, paramIQueryUrlsCallBack, c);
      }
    }
    else {
      paramIQueryUrlsCallBack.onCallBackFail(-6);
    }
  }
  
  void b(String paramString1, String paramString2, IQueryUrlCallBack paramIQueryUrlCallBack)
  {
    if (paramIQueryUrlCallBack == null)
    {
      Logger.append(a, "IQueryUrlCallBack is must not null for process continue.");
      return;
    }
    if ((x != null) && (paramString1 != null) && (paramString2 != null))
    {
      if (get()) {
        j.a(paramString1, paramString2, paramIQueryUrlCallBack, c);
      }
    }
    else {
      paramIQueryUrlCallBack.onCallBackFail(-6);
    }
  }
  
  void c()
  {
    if (!get()) {
      return;
    }
    String str = x.getGrsParasKey(false, true, c);
    g.put(str);
    ByteVector localByteVector = g;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(str);
    localStringBuilder.append("time");
    localByteVector.put(localStringBuilder.toString());
    l.a(str);
  }
  
  boolean put(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (paramObject != null)
    {
      if (d.class != paramObject.getClass()) {
        return false;
      }
      if ((paramObject instanceof ClassWriter))
      {
        paramObject = (ClassWriter)paramObject;
        return x.compare(x);
      }
    }
    return false;
  }
}
