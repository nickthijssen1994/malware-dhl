package com.huawei.hms.framework.network.grs.asm;

import android.content.Context;
import com.huawei.hms.framework.common.ExceptionCode;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.common.StringUtils;
import com.huawei.hms.framework.common.hianalytics.HianalyticsHelper;
import com.huawei.hms.framework.common.hianalytics.LinkedHashMapPack;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.concurrent.ExecutorService;
import org.json.JSONArray;

public class ClassWriter
{
  private static LinkedHashMap a(h paramH)
  {
    LinkedHashMapPack localLinkedHashMapPack = new LinkedHashMapPack();
    Exception localException = paramH.i();
    if (localException != null)
    {
      localLinkedHashMapPack.put("error_code", ExceptionCode.getErrorCodeFromException(localException));
      localLinkedHashMapPack.add("exception_name", localException.getClass().getSimpleName());
      localLinkedHashMapPack.add("message", StringUtils.anonymizeMessage(localException.getMessage()));
    }
    else
    {
      localLinkedHashMapPack.put("error_code", paramH.b());
      localLinkedHashMapPack.put("exception_name", paramH.m());
    }
    try
    {
      localLinkedHashMapPack.add("domain", new URL(paramH.e()).getHost());
    }
    catch (MalformedURLException localMalformedURLException)
    {
      Logger.append("HaReportHelper", "report host MalformedURLException", localMalformedURLException);
    }
    localLinkedHashMapPack.put("req_start_time", paramH.f());
    localLinkedHashMapPack.put("req_end_time", paramH.getGroupId());
    localLinkedHashMapPack.put("req_total_time", paramH.getItemId());
    return localLinkedHashMapPack.getAll();
  }
  
  public static void put(ArrayList paramArrayList, long paramLong, JSONArray paramJSONArray, Context paramContext)
  {
    if ((paramContext != null) && (paramArrayList != null) && (paramArrayList.size() > 0) && (HianalyticsHelper.getInstance().isEnableReportNoSeed(paramContext))) {
      HianalyticsHelper.getInstance().getReportExecutor().execute(new AnnotationWriter(paramLong, paramContext, paramArrayList, paramJSONArray));
    }
  }
}
