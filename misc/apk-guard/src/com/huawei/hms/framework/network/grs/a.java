package com.huawei.hms.framework.network.grs;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.asm.h;
import com.huawei.hms.framework.network.grs.asm.i;
import com.huawei.hms.framework.network.grs.data.Label;
import com.huawei.hms.framework.network.grs.local.model.CountryCodeBean;
import com.huawei.hms.framework.network.grs.manager.b;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class a
{
  private static final String a = "a";
  private Label b;
  private GrsBaseInfo i;
  private i l;
  
  public a(GrsBaseInfo paramGrsBaseInfo, Label paramLabel, i paramI)
  {
    i = paramGrsBaseInfo;
    b = paramLabel;
    l = paramI;
  }
  
  public static CountryCodeBean a(Context paramContext, boolean paramBoolean)
  {
    return new CountryCodeBean(paramContext, paramBoolean);
  }
  
  private String a(String paramString1, String paramString2, com.huawei.hms.framework.network.grs.data.d paramD, Context paramContext)
  {
    paramD = b.a(i, paramString1, paramString2, paramD, paramContext);
    if (!TextUtils.isEmpty(paramD))
    {
      Logger.get(a, "get url from sp is not empty.");
      return paramD;
    }
    return b.a(paramContext.getPackageName(), i).b(i, paramString1, paramString2);
  }
  
  private Map a(String paramString, com.huawei.hms.framework.network.grs.data.d paramD, Context paramContext)
  {
    paramD = b.b(i, paramString, paramD, paramContext);
    if ((paramD != null) && (!paramD.isEmpty())) {
      return paramD;
    }
    return b.a(paramContext.getPackageName(), i).b(i, paramString);
  }
  
  private void b(String paramString, Map paramMap, IQueryUrlsCallBack paramIQueryUrlsCallBack, Context paramContext)
  {
    l.a(i, paramContext, new d(paramString, paramMap, paramIQueryUrlsCallBack), paramString);
  }
  
  public static String getValue(String paramString1, String paramString2, String paramString3)
  {
    if (TextUtils.isEmpty(paramString1)) {
      return "";
    }
    try
    {
      paramString1 = new JSONObject(paramString1).getJSONObject(paramString2).getString(paramString3);
      return paramString1;
    }
    catch (JSONException paramString1)
    {
      Logger.append(a, "Method{getServiceNameUrl} query url from SP occur an JSONException", paramString1);
    }
    return "";
  }
  
  public static Map getValue(String paramString)
  {
    HashMap localHashMap = new HashMap(16);
    if (TextUtils.isEmpty(paramString))
    {
      Logger.d(a, "isSpExpire jsonValue is null.");
      return localHashMap;
    }
    try
    {
      paramString = new JSONObject(paramString);
      Iterator localIterator = paramString.keys();
      for (;;)
      {
        boolean bool = localIterator.hasNext();
        if (!bool) {
          break;
        }
        String str = localIterator.next().toString();
        localHashMap.put(str, read(paramString.getJSONObject(str)));
      }
      return localHashMap;
    }
    catch (JSONException paramString)
    {
      Logger.append(a, "getServicesUrlsMap occur a JSONException", paramString);
    }
    return localHashMap;
  }
  
  public static Map put(String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    if (TextUtils.isEmpty(paramString1))
    {
      Logger.d(a, "isSpExpire jsonValue is null.");
      return localHashMap;
    }
    try
    {
      paramString1 = new JSONObject(paramString1).getJSONObject(paramString2);
      if (paramString1 == null)
      {
        paramString1 = a;
        Logger.d(paramString1, "getServiceNameUrls jsObject null.");
        return localHashMap;
      }
      paramString2 = paramString1.keys();
      for (;;)
      {
        boolean bool = paramString2.hasNext();
        if (!bool) {
          break;
        }
        String str = paramString2.next().toString();
        localHashMap.put(str, paramString1.get(str).toString());
      }
      return localHashMap;
    }
    catch (JSONException paramString1)
    {
      Logger.append(a, "Method{getServiceNameUrls} query url from SP occur an JSONException", paramString1);
    }
    return localHashMap;
  }
  
  public static Map read(JSONObject paramJSONObject)
  {
    HashMap localHashMap = new HashMap(16);
    try
    {
      Iterator localIterator = paramJSONObject.keys();
      for (;;)
      {
        boolean bool = localIterator.hasNext();
        if (!bool) {
          break;
        }
        String str = localIterator.next().toString();
        localHashMap.put(str, paramJSONObject.get(str).toString());
      }
      return localHashMap;
    }
    catch (JSONException paramJSONObject)
    {
      Logger.append(a, "getServiceUrls occur a JSONException", paramJSONObject);
    }
    return localHashMap;
  }
  
  public String a(Context paramContext, String paramString)
  {
    paramContext = l.a(i, paramContext, paramString);
    if (paramContext == null) {
      return "";
    }
    return paramContext.getTitle();
  }
  
  public String a(String paramString1, String paramString2, Context paramContext)
  {
    com.huawei.hms.framework.network.grs.data.d localD = new com.huawei.hms.framework.network.grs.data.d();
    String str = a(paramString1, paramString2, localD, paramContext);
    if (localD.c())
    {
      Logger.d(a, "get unexpired cache localUrl{%s}", new Object[] { str });
      return str;
    }
    paramString1 = getValue(a(paramContext, paramString1), paramString1, paramString2);
    if (!TextUtils.isEmpty(paramString1))
    {
      Logger.get(a, "get url is from remote server");
      return paramString1;
    }
    return str;
  }
  
  public Map a(String paramString, Context paramContext)
  {
    com.huawei.hms.framework.network.grs.data.d localD = new com.huawei.hms.framework.network.grs.data.d();
    Map localMap = a(paramString, localD, paramContext);
    if (localD.c()) {
      return localMap;
    }
    paramString = put(a(paramContext, paramString), paramString);
    if (!paramString.isEmpty()) {
      return paramString;
    }
    return localMap;
  }
  
  public void a(String paramString, IQueryUrlsCallBack paramIQueryUrlsCallBack, Context paramContext)
  {
    com.huawei.hms.framework.network.grs.data.d localD = new com.huawei.hms.framework.network.grs.data.d();
    Map localMap = a(paramString, localD, paramContext);
    if (localD.c())
    {
      if ((localMap != null) && (!localMap.isEmpty()))
      {
        paramIQueryUrlsCallBack.onCallBackSuccess(localMap);
        return;
      }
      paramIQueryUrlsCallBack.onCallBackFail(-5);
      return;
    }
    b(paramString, localMap, paramIQueryUrlsCallBack, paramContext);
  }
  
  public void a(String paramString1, String paramString2, IQueryUrlCallBack paramIQueryUrlCallBack, Context paramContext)
  {
    com.huawei.hms.framework.network.grs.data.d localD = new com.huawei.hms.framework.network.grs.data.d();
    String str = a(paramString1, paramString2, localD, paramContext);
    if (localD.c())
    {
      if (TextUtils.isEmpty(str))
      {
        paramIQueryUrlCallBack.onCallBackFail(-5);
        return;
      }
      paramIQueryUrlCallBack.onCallBackSuccess(str);
      return;
    }
    l.a(i, paramContext, new e(paramString1, paramString2, paramIQueryUrlCallBack, str), paramString1);
  }
}
