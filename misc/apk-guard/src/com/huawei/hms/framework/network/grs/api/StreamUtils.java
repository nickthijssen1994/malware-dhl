package com.huawei.hms.framework.network.grs.api;

import android.content.Context;
import android.content.res.AssetManager;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class StreamUtils
{
  private static final String TAG = "c";
  
  public static void closeStream(Closeable paramCloseable)
  {
    if (paramCloseable != null) {
      try
      {
        paramCloseable.close();
        return;
      }
      catch (IOException paramCloseable)
      {
        Logger.e(TAG, "closeQuietly IOException", paramCloseable);
      }
    }
  }
  
  public static void copy(InputStream paramInputStream)
  {
    closeStream(paramInputStream);
  }
  
  public static void copy(OutputStream paramOutputStream)
  {
    closeStream(paramOutputStream);
  }
  
  public static String read(String paramString, Context paramContext)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    localObject = null;
    localContext = null;
    localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      localInputStream = paramContext.getAssets().open(paramString);
      paramContext = localInputStream;
      arrayOfByte = new byte['?'];
      for (;;)
      {
        localContext = paramContext;
        localObject = paramContext;
        int i = localInputStream.read(arrayOfByte);
        if (i == -1) {
          break;
        }
        localContext = paramContext;
        localObject = paramContext;
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      localContext = paramContext;
      localObject = paramContext;
      localByteArrayOutputStream.flush();
      localContext = paramContext;
      localObject = paramContext;
      arrayOfByte = localByteArrayOutputStream.toByteArray();
      localContext = paramContext;
    }
    catch (Throwable paramString)
    {
      InputStream localInputStream;
      byte[] arrayOfByte;
      copy(localByteArrayOutputStream);
      copy(localContext);
      throw paramString;
    }
    catch (IOException paramContext)
    {
      for (;;)
      {
        label129:
        paramContext = (Context)localObject;
      }
    }
    try
    {
      localObject = new String(arrayOfByte, "UTF-8");
      copy(localByteArrayOutputStream);
      copy(localInputStream);
      return localObject;
    }
    catch (IOException localIOException)
    {
      break label129;
    }
    localContext = paramContext;
    Logger.w(TAG, "local config file is not exist.filename is {%s}", new Object[] { paramString });
    copy(localByteArrayOutputStream);
    copy(paramContext);
    return "";
  }
}
