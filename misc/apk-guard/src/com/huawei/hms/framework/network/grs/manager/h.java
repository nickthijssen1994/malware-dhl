package com.huawei.hms.framework.network.grs.manager;

import android.content.Context;
import android.content.res.AssetManager;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.api.StreamUtils;
import com.huawei.hms.framework.network.grs.local.model.ByteVector;
import com.huawei.hms.framework.network.grs.local.model.b;
import com.huawei.hms.framework.network.grs.local.model.f;
import com.huawei.hms.framework.network.grs.local.model.i;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public abstract class h
{
  protected Map<String, String> a = new ConcurrentHashMap(16);
  protected List<b> c;
  protected ByteVector d;
  protected boolean e = false;
  protected Set<String> f = new HashSet(16);
  
  public h() {}
  
  private Map a(List paramList, GrsBaseInfo paramGrsBaseInfo)
  {
    ConcurrentHashMap localConcurrentHashMap = new ConcurrentHashMap(16);
    localConcurrentHashMap.put("no_route_country", "no-country");
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      f localF = (f)paramList.next();
      if (localF.getValue().contains(paramGrsBaseInfo.getIssueCountry())) {
        localConcurrentHashMap.put(paramGrsBaseInfo.getIssueCountry(), localF.f());
      }
      if (localF.getValue().contains(paramGrsBaseInfo.getRegCountry())) {
        localConcurrentHashMap.put(paramGrsBaseInfo.getRegCountry(), localF.f());
      }
      if (localF.getValue().contains(paramGrsBaseInfo.getSerCountry())) {
        localConcurrentHashMap.put(paramGrsBaseInfo.getSerCountry(), localF.f());
      }
    }
    return localConcurrentHashMap;
  }
  
  private int copy(Context paramContext)
  {
    Object localObject = paramContext.getAssets();
    int i = -1;
    for (;;)
    {
      try
      {
        localObject = ((AssetManager)localObject).list("");
        if ((localObject == null) || (localObject.length <= 0)) {
          break label132;
        }
        int m = localObject.length;
        j = 0;
        i = -1;
        if (j < m) {
          localCharSequence = localObject[j];
        }
      }
      catch (IOException paramContext)
      {
        int j;
        CharSequence localCharSequence;
        boolean bool;
        int k;
        continue;
      }
      try
      {
        bool = Pattern.matches("^grs_sdk_global_route_config_[a-zA-Z]+\\.json$", localCharSequence);
        k = i;
        if (bool)
        {
          int n = read(StreamUtils.read(localCharSequence, paramContext));
          k = i;
          if (n != 0) {}
        }
      }
      catch (IOException paramContext)
      {
        continue;
      }
      try
      {
        Logger.get("AbstractLocalManager", "load SDK_CONFIG_FILE sucess.");
        k = 0;
        j += 1;
        i = k;
      }
      catch (IOException paramContext) {}
    }
    break label111;
    return i;
    label111:
    Logger.append("AbstractLocalManager", "list assets files fail,please check if according to our standard config json files.");
    return i;
    label132:
    return -1;
  }
  
  private int d(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return -1;
    }
    int i = c(paramString);
    if (i != 0) {
      return i;
    }
    i = b(paramString);
    if (i != 0) {
      return i;
    }
    return a(paramString);
  }
  
  private int read(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return -1;
    }
    List localList = c;
    if ((localList == null) || (localList.isEmpty()))
    {
      int i = update(paramString);
      if (i != 0) {
        return i;
      }
    }
    return getValue(paramString);
  }
  
  private int read(String paramString, Context paramContext)
  {
    if (d(StreamUtils.read(paramString, paramContext)) == 0)
    {
      Logger.get("AbstractLocalManager", "load APP_CONFIG_FILE success.");
      return 0;
    }
    return -1;
  }
  
  public abstract int a(String paramString);
  
  int a(String paramString, Context paramContext, boolean paramBoolean)
  {
    if ((read(paramString, paramContext) != 0) && (paramBoolean)) {
      return -1;
    }
    copy(paramContext);
    return 0;
  }
  
  public String a(GrsBaseInfo paramGrsBaseInfo, String paramString1, String paramString2)
  {
    paramGrsBaseInfo = a(paramGrsBaseInfo, paramString1);
    if (paramGrsBaseInfo == null)
    {
      Logger.w("AbstractLocalManager", "addresses not found by routeby in local config{%s}", new Object[] { paramString1 });
      return null;
    }
    return (String)paramGrsBaseInfo.get(paramString2);
  }
  
  public Map a(GrsBaseInfo paramGrsBaseInfo, String paramString)
  {
    if (!e) {
      return null;
    }
    Object localObject = d;
    if (localObject == null)
    {
      Logger.append("AbstractLocalManager", "application data is null.");
      return null;
    }
    localObject = ((ByteVector)localObject).a(paramString);
    if (localObject == null)
    {
      Logger.w("AbstractLocalManager", "service not found in local config{%s}", new Object[] { paramString });
      return null;
    }
    paramString = g.b(((i)localObject).b(), paramGrsBaseInfo);
    if (paramString == null)
    {
      Logger.w("AbstractLocalManager", "country not found by routeby in local config{%s}", new Object[] { ((i)localObject).b() });
      return null;
    }
    List localList = ((i)localObject).c();
    if ((localList != null) && (localList.size() != 0)) {
      paramGrsBaseInfo = a(localList, paramGrsBaseInfo);
    } else {
      paramGrsBaseInfo = a;
    }
    paramGrsBaseInfo = ((i)localObject).a((String)paramGrsBaseInfo.get(paramString));
    if (paramGrsBaseInfo == null) {
      return null;
    }
    return paramGrsBaseInfo.a();
  }
  
  public boolean a()
  {
    return e;
  }
  
  public boolean a(GrsBaseInfo paramGrsBaseInfo)
  {
    Object localObject = c;
    if ((localObject != null) && (!((List)localObject).isEmpty()))
    {
      a.put("no_route_country", "no-country");
      localObject = c.iterator();
      while (((Iterator)localObject).hasNext())
      {
        f localF = (f)((Iterator)localObject).next();
        if (localF.getValue().contains(paramGrsBaseInfo.getIssueCountry())) {
          a.put(paramGrsBaseInfo.getIssueCountry(), localF.f());
        }
        if (localF.getValue().contains(paramGrsBaseInfo.getRegCountry())) {
          a.put(paramGrsBaseInfo.getRegCountry(), localF.f());
        }
        if (localF.getValue().contains(paramGrsBaseInfo.getSerCountry())) {
          a.put(paramGrsBaseInfo.getSerCountry(), localF.f());
        }
      }
      return true;
    }
    return false;
  }
  
  public abstract int b(String paramString);
  
  public ByteVector b()
  {
    return d;
  }
  
  public abstract int c(String paramString);
  
  public abstract List c(JSONArray paramJSONArray, JSONObject paramJSONObject);
  
  protected void c(JSONArray paramJSONArray)
  {
    if (paramJSONArray != null)
    {
      if (paramJSONArray.length() == 0) {
        return;
      }
      int i = 0;
      while (i < paramJSONArray.length())
      {
        JSONObject localJSONObject = paramJSONArray.getJSONObject(i);
        i localI = new i();
        String str1 = localJSONObject.getString("name");
        localI.b(str1);
        if (!f.contains(str1))
        {
          f.add(str1);
          localI.c(localJSONObject.getString("routeBy"));
          JSONArray localJSONArray = localJSONObject.getJSONArray("servings");
          int j = 0;
          while (j < localJSONArray.length())
          {
            Object localObject2 = (JSONObject)localJSONArray.get(j);
            com.huawei.hms.framework.network.grs.local.model.h localH = new com.huawei.hms.framework.network.grs.local.model.h();
            localObject1 = "no-country";
            if (((JSONObject)localObject2).has("countryOrAreaGroup")) {}
            for (localObject1 = "countryOrAreaGroup";; localObject1 = "countryGroup")
            {
              localObject1 = ((JSONObject)localObject2).getString((String)localObject1);
              break label192;
              if (!((JSONObject)localObject2).has("countryGroup")) {
                break;
              }
            }
            Logger.d("AbstractLocalManager", "maybe this service routeBy is unconditional.");
            label192:
            localH.e((String)localObject1);
            localObject1 = ((JSONObject)localObject2).getJSONObject("addresses");
            localObject2 = new HashMap(16);
            Iterator localIterator = ((JSONObject)localObject1).keys();
            while (localIterator.hasNext())
            {
              String str2 = (String)localIterator.next();
              ((HashMap)localObject2).put(str2, ((JSONObject)localObject1).getString(str2));
            }
            localH.d((Map)localObject2);
            localI.a(localH.b(), localH);
            j += 1;
          }
          boolean bool = localJSONObject.has("countryOrAreaGroups");
          Object localObject1 = null;
          if (bool) {}
          for (localObject1 = "countryOrAreaGroups";; localObject1 = "countryGroups")
          {
            localObject1 = c(localJSONObject.getJSONArray((String)localObject1), null);
            break label360;
            if (!localJSONObject.has("countryGroups")) {
              break;
            }
          }
          Logger.get("AbstractLocalManager", "service use default countryOrAreaGroup");
          label360:
          localI.a((List)localObject1);
          if (d == null) {
            d = new ByteVector();
          }
          d.a(str1, localI);
        }
        i += 1;
      }
    }
  }
  
  public int getValue(String paramString)
  {
    try
    {
      c(new JSONObject(paramString).getJSONArray("services"));
      return 0;
    }
    catch (JSONException paramString)
    {
      Logger.append("AbstractLocalManager", "parse 2.0 services failed maybe because of json style.please check!", paramString);
    }
    return -1;
  }
  
  public int update(String paramString)
  {
    c = new ArrayList(16);
    try
    {
      Object localObject1 = new JSONObject(paramString);
      boolean bool = ((JSONObject)localObject1).has("countryOrAreaGroups");
      if (bool)
      {
        paramString = "countryOrAreaGroups";
      }
      else
      {
        bool = ((JSONObject)localObject1).has("countryGroups");
        if (!bool) {
          break label74;
        }
        paramString = "countryGroups";
      }
      paramString = ((JSONObject)localObject1).getJSONArray(paramString);
      break label84;
      label74:
      Logger.e("AbstractLocalManager", "maybe local config json is wrong because the default countryOrAreaGroups isn't config.");
      paramString = null;
      label84:
      if (paramString == null) {
        return -1;
      }
      int i = paramString.length();
      if (i != 0)
      {
        i = 0;
        for (;;)
        {
          int j = paramString.length();
          if (i >= j) {
            break label352;
          }
          Object localObject2 = paramString.getJSONObject(i);
          f localF = new f();
          localF.c(((JSONObject)localObject2).getString("id"));
          localF.e(((JSONObject)localObject2).getString("name"));
          localF.d(((JSONObject)localObject2).getString("description"));
          bool = ((JSONObject)localObject2).has("countriesOrAreas");
          if (bool)
          {
            localObject1 = "countriesOrAreas";
          }
          else
          {
            bool = ((JSONObject)localObject2).has("countries");
            if (!bool) {
              break label220;
            }
            localObject1 = "countries";
          }
          localObject1 = ((JSONObject)localObject2).getJSONArray((String)localObject1);
          break label231;
          label220:
          Logger.append("AbstractLocalManager", "current country or area group has not config countries or areas.");
          localObject1 = null;
          label231:
          localObject2 = new HashSet(16);
          if (localObject1 == null) {
            break;
          }
          j = ((JSONArray)localObject1).length();
          if (j == 0) {
            return -1;
          }
          j = 0;
          for (;;)
          {
            int k = ((JSONArray)localObject1).length();
            if (j >= k) {
              break;
            }
            Object localObject3 = ((JSONArray)localObject1).get(j);
            localObject3 = (String)localObject3;
            ((Set)localObject2).add(localObject3);
            j += 1;
          }
          localF.d((Set)localObject2);
          localObject1 = c;
          ((List)localObject1).add(localF);
          i += 1;
        }
        return -1;
      }
      return 0;
    }
    catch (JSONException paramString)
    {
      Logger.append("AbstractLocalManager", "parse countrygroup failed maybe json style is wrong.", paramString);
      return -1;
    }
    label352:
    return 0;
  }
}
