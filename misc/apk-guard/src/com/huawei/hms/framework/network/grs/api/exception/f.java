package com.huawei.hms.framework.network.grs.api.exception;

import android.os.Build.VERSION;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;

public abstract class f
{
  private static final String[] a = { "TLS_RSA", "CBC", "TEA", "SHA0", "MD2", "MD4", "RIPEMD", "NULL", "RC4", "DES", "DESX", "DES40", "RC2", "MD5", "ANON", "TLS_EMPTY_RENEGOTIATION_INFO_SCSV" };
  private static final String[] c = { "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA" };
  private static final String[] s = { "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384" };
  
  public static boolean a(SSLSocket paramSSLSocket)
  {
    if (paramSSLSocket == null) {
      return false;
    }
    if (Build.VERSION.SDK_INT > 19) {}
    for (String[] arrayOfString = s;; arrayOfString = c) {
      return create(paramSSLSocket, arrayOfString);
    }
  }
  
  public static boolean add(SSLSocket paramSSLSocket)
  {
    if (paramSSLSocket == null) {
      return false;
    }
    return apply(paramSSLSocket, a);
  }
  
  public static void apply(SSLSocket paramSSLSocket)
  {
    if (paramSSLSocket == null) {
      return;
    }
    if (Build.VERSION.SDK_INT >= 29) {
      paramSSLSocket.setEnabledProtocols(new String[] { "TLSv1.3", "TLSv1.2" });
    }
    int i = Build.VERSION.SDK_INT;
    String[] arrayOfString;
    if ((i >= 16) && (i < 29))
    {
      arrayOfString = new String[1];
      arrayOfString[0] = "TLSv1.2";
    }
    else
    {
      if (Build.VERSION.SDK_INT >= 16) {
        return;
      }
      arrayOfString = new String[1];
      arrayOfString[0] = "TLSv1";
    }
    paramSSLSocket.setEnabledProtocols(arrayOfString);
  }
  
  public static boolean apply(SSLSocket paramSSLSocket, String[] paramArrayOfString)
  {
    if (paramSSLSocket == null) {
      return false;
    }
    String[] arrayOfString = paramSSLSocket.getEnabledCipherSuites();
    ArrayList localArrayList = new ArrayList();
    int m = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      int k = 1;
      if (i >= m) {
        break;
      }
      String str1 = arrayOfString[i];
      String str2 = str1.toUpperCase(Locale.ENGLISH);
      int n = paramArrayOfString.length;
      int j = 0;
      while (j < n)
      {
        if (str2.contains(paramArrayOfString[j].toUpperCase(Locale.ENGLISH)))
        {
          j = k;
          break label97;
        }
        j += 1;
      }
      j = 0;
      label97:
      if (j == 0) {
        localArrayList.add(str1);
      }
      i += 1;
    }
    if (!localArrayList.isEmpty())
    {
      paramSSLSocket.setEnabledCipherSuites((String[])localArrayList.toArray(new String[localArrayList.size()]));
      return true;
    }
    return false;
  }
  
  public static SSLContext build()
  {
    int i = Build.VERSION.SDK_INT;
    String str;
    if (i >= 29) {
      str = "TLSv1.3";
    }
    for (;;)
    {
      return SSLContext.getInstance(str);
      if (i >= 16) {
        str = "TLSv1.2";
      } else {
        str = "TLS";
      }
    }
  }
  
  public static void clear(SSLSocket paramSSLSocket)
  {
    if (paramSSLSocket == null) {
      return;
    }
    if (!a(paramSSLSocket)) {
      add(paramSSLSocket);
    }
  }
  
  public static boolean create(SSLSocket paramSSLSocket, String[] paramArrayOfString)
  {
    if (paramSSLSocket == null) {
      return false;
    }
    String[] arrayOfString = paramSSLSocket.getEnabledCipherSuites();
    ArrayList localArrayList = new ArrayList();
    paramArrayOfString = Arrays.asList(paramArrayOfString);
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      String str = arrayOfString[i];
      if (paramArrayOfString.contains(str.toUpperCase(Locale.ENGLISH))) {
        localArrayList.add(str);
      }
      i += 1;
    }
    if (!localArrayList.isEmpty())
    {
      paramSSLSocket.setEnabledCipherSuites((String[])localArrayList.toArray(new String[localArrayList.size()]));
      return true;
    }
    return false;
  }
  
  public static void e(SSLSocket paramSSLSocket)
  {
    if (paramSSLSocket == null) {
      return;
    }
    apply(paramSSLSocket);
    clear(paramSSLSocket);
  }
}
