package com.huawei.hms.framework.network.grs.api.exception;

import android.content.Context;
import java.net.InetAddress;
import java.net.Socket;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
import org.apache.http.conn.ssl.StrictHostnameVerifier;
import org.apache.http.conn.ssl.X509HostnameVerifier;

public class CustomSSLSocketFactory
  extends SSLSocketFactory
{
  public static final X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER = new BrowserCompatHostnameVerifier();
  public static final X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER = new StrictHostnameVerifier();
  private static String[] c = null;
  private static volatile CustomSSLSocketFactory d = null;
  private SSLContext sslContext = null;
  private Context this$0;
  
  private CustomSSLSocketFactory(Context paramContext, String paramString)
  {
    this$0 = paramContext;
    sslContext = f.build();
    paramContext = new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(this$0, paramString);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramContext }, null);
  }
  
  public static CustomSSLSocketFactory a(Context paramContext, String paramString)
  {
    if (d == null) {
      try
      {
        if (d == null) {
          d = new CustomSSLSocketFactory(paramContext, paramString);
        }
      }
      catch (Throwable paramContext)
      {
        throw paramContext;
      }
    }
    return d;
  }
  
  public Socket createSocket(String paramString, int paramInt)
  {
    paramString = sslContext.getSocketFactory().createSocket(paramString, paramInt);
    if ((paramString instanceof SSLSocket)) {
      f.e((SSLSocket)paramString);
    }
    return paramString;
  }
  
  public Socket createSocket(String paramString, int paramInt1, InetAddress paramInetAddress, int paramInt2)
  {
    return createSocket(paramString, paramInt1);
  }
  
  public Socket createSocket(InetAddress paramInetAddress, int paramInt)
  {
    return createSocket(paramInetAddress.getHostAddress(), paramInt);
  }
  
  public Socket createSocket(InetAddress paramInetAddress1, int paramInt1, InetAddress paramInetAddress2, int paramInt2)
  {
    return createSocket(paramInetAddress1.getHostAddress(), paramInt1);
  }
  
  public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
  {
    paramSocket = sslContext.getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
    if ((paramSocket instanceof SSLSocket)) {
      f.e((SSLSocket)paramSocket);
    }
    return paramSocket;
  }
  
  public String[] getDefaultCipherSuites()
  {
    String[] arrayOfString = c;
    if (arrayOfString != null) {
      return (String[])arrayOfString.clone();
    }
    return new String[0];
  }
  
  public String[] getSupportedCipherSuites()
  {
    return new String[0];
  }
}
