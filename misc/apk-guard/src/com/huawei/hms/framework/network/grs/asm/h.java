package com.huawei.hms.framework.network.grs.asm;

import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.common.StringUtils;
import java.nio.ByteBuffer;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public class h
{
  private static final String a = "e";
  private long b;
  private Map<String, List<String>> c;
  private String d;
  private long e;
  private byte[] f;
  private String g = "";
  private long h;
  private String i = "";
  private Exception k;
  private int m = 0;
  private String mTitle;
  private long n = 0L;
  private int q;
  private int r = 9001;
  private String s = "";
  private int t = 2;
  
  public h(int paramInt, Map paramMap, byte[] paramArrayOfByte, long paramLong)
  {
    m = paramInt;
    c = paramMap;
    f = ByteBuffer.wrap(paramArrayOfByte).array();
    e = paramLong;
    setTitle();
  }
  
  public h(Exception paramException, long paramLong)
  {
    k = paramException;
    e = paramLong;
  }
  
  private void a()
  {
    if ((!c()) && (!l())) {
      return;
    }
    Map localMap = finish();
    try
    {
      boolean bool = c();
      if (bool) {
        write(localMap);
      }
      bool = l();
      if (bool)
      {
        a(localMap);
        return;
      }
    }
    catch (JSONException localJSONException)
    {
      Logger.append(a, "parseHeader catch JSONException", localJSONException);
    }
  }
  
  private void a(int paramInt)
  {
    t = paramInt;
  }
  
  private void a(long paramLong)
  {
    n = paramLong;
  }
  
  private void a(String paramString)
  {
    g = paramString;
  }
  
  private void a(Map paramMap)
  {
    if ((paramMap != null) && (paramMap.size() > 0))
    {
      long l2 = 0L;
      long l1 = l2;
      if (paramMap.containsKey("Retry-After"))
      {
        paramMap = (String)paramMap.get("Retry-After");
        l1 = l2;
        if (!TextUtils.isEmpty(paramMap)) {
          try
          {
            l1 = Long.parseLong(paramMap);
          }
          catch (NumberFormatException paramMap)
          {
            Logger.append(a, "getRetryAfter addHeadersToResult NumberFormatException", paramMap);
            l1 = l2;
          }
        }
      }
      l1 *= 1000L;
      Logger.d(a, "convert retry-afterTime{%s}", new Object[] { Long.valueOf(l1) });
      a(l1);
      return;
    }
    Logger.append(a, "getExpireTime {headers == null} or {headers.size() <= 0}");
  }
  
  private void c(String paramString)
  {
    s = paramString;
  }
  
  private void e(String paramString)
  {
    i = paramString;
  }
  
  private Map finish()
  {
    HashMap localHashMap = new HashMap(16);
    Object localObject = c;
    if ((localObject != null) && (((Map)localObject).size() > 0))
    {
      localObject = c.entrySet().iterator();
      while (((Iterator)localObject).hasNext())
      {
        Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
        localHashMap.put((String)localEntry.getKey(), ((List)localEntry.getValue()).get(0));
      }
      return localHashMap;
    }
    Logger.d(a, "parseRespHeaders {respHeaders == null} or {respHeaders.size() <= 0}");
    return localHashMap;
  }
  
  private void onCreateView()
  {
    if (!c())
    {
      Logger.get(a, "GRSSDK parse server body all failed.");
      a(2);
      return;
    }
    Object localObject = f;
    try
    {
      String str = StringUtils.byte2Str((byte[])localObject);
      JSONObject localJSONObject = new JSONObject(str);
      int j = -1;
      boolean bool = localJSONObject.has("isSuccess");
      if (bool)
      {
        localObject = "isSuccess";
      }
      else
      {
        bool = localJSONObject.has("resultCode");
        if (!bool) {
          break label93;
        }
        localObject = "resultCode";
      }
      j = localJSONObject.getInt((String)localObject);
      break label105;
      label93:
      localObject = a;
      Logger.e((String)localObject, "sth. wrong because server errorcode's key.");
      label105:
      a(j);
      if (j == 0)
      {
        bool = str.contains("services");
        if (bool)
        {
          i1 = 1;
          break label133;
        }
      }
      int i1 = 0;
      label133:
      if ((j != 1) && (i1 == 0))
      {
        a(2);
        bool = localJSONObject.has("errorCode");
        if (bool) {
          j = localJSONObject.getInt("errorCode");
        } else {
          j = 9001;
        }
        setTitle(j);
        bool = localJSONObject.has("errorDesc");
        if (bool) {
          localObject = localJSONObject.getString("errorDesc");
        } else {
          localObject = "";
        }
        c((String)localObject);
        return;
      }
      setTitle(localJSONObject.getJSONObject("services").toString());
      if (i1 != 0)
      {
        bool = localJSONObject.has("errorList");
        if (bool) {
          localObject = localJSONObject.getString("errorList");
        } else {
          localObject = "";
        }
        e((String)localObject);
        return;
      }
    }
    catch (JSONException localJSONException)
    {
      Logger.append(a, "GrsResponse GrsResponse(String result) JSONException", localJSONException);
      a(2);
    }
  }
  
  private void setTitle()
  {
    a();
    onCreateView();
  }
  
  private void setTitle(int paramInt)
  {
    r = paramInt;
  }
  
  private void setTitle(String paramString)
  {
    mTitle = paramString;
  }
  
  private void write(Map paramMap)
  {
    if ((paramMap != null) && (paramMap.size() > 0))
    {
      long l2;
      if (paramMap.containsKey("Cache-Control"))
      {
        paramMap = (String)paramMap.get("Cache-Control");
        if ((!TextUtils.isEmpty(paramMap)) && (paramMap.contains("max-age=")))
        {
          try
          {
            int j = paramMap.indexOf("max-age=");
            l2 = Long.parseLong(paramMap.substring(j + 8));
            l1 = l2;
            paramMap = a;
            try
            {
              Logger.d(paramMap, "Cache-Control value{%s}", new Object[] { Long.valueOf(l2) });
            }
            catch (NumberFormatException paramMap) {}
            Logger.append(a, "getExpireTime addHeadersToResult NumberFormatException", paramMap);
          }
          catch (NumberFormatException paramMap)
          {
            l1 = 0L;
          }
          break label305;
        }
      }
      else
      {
        if (paramMap.containsKey("Expires"))
        {
          Object localObject = (String)paramMap.get("Expires");
          Logger.d(a, "expires is{%s}", new Object[] { localObject });
          SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss 'GMT'", Locale.ROOT);
          String str = null;
          if (paramMap.containsKey("Date")) {
            str = (String)paramMap.get("Date");
          }
          try
          {
            localObject = localSimpleDateFormat.parse((String)localObject);
            boolean bool = TextUtils.isEmpty(str);
            if (bool) {
              paramMap = new Date();
            } else {
              paramMap = localSimpleDateFormat.parse(str);
            }
            l1 = ((Date)localObject).getTime();
            l2 = paramMap.getTime();
            l1 = (l1 - l2) / 1000L;
          }
          catch (ParseException paramMap)
          {
            Logger.append(a, "getExpireTime ParseException.", paramMap);
            break label303;
          }
        }
        Logger.get(a, "response headers neither contains Cache-Control nor Expires.");
      }
      label303:
      long l1 = 0L;
      label305:
      if (l1 > 0L)
      {
        l2 = l1;
        if (l1 <= 2592000L) {}
      }
      else
      {
        l2 = 86400L;
      }
      l1 = l2 * 1000L;
      Logger.d(a, "convert expireTime{%s}", new Object[] { Long.valueOf(l1) });
      a(String.valueOf(l1 + System.currentTimeMillis()));
      return;
    }
    Logger.append(a, "getExpireTime {headers == null} or {headers.size() <= 0}");
  }
  
  public int b()
  {
    return m;
  }
  
  public boolean c()
  {
    return m == 200;
  }
  
  public int d()
  {
    return t;
  }
  
  public void d(long paramLong)
  {
    b = paramLong;
  }
  
  public void d(String paramString)
  {
    d = paramString;
  }
  
  public String e()
  {
    return d;
  }
  
  public void e(int paramInt)
  {
    q = paramInt;
  }
  
  public void e(long paramLong)
  {
    h = paramLong;
  }
  
  public long f()
  {
    return h;
  }
  
  public long getCount()
  {
    return n;
  }
  
  public long getGroupId()
  {
    return b;
  }
  
  public String getId()
  {
    return g;
  }
  
  public long getItemId()
  {
    return e;
  }
  
  public String getTitle()
  {
    return mTitle;
  }
  
  public Exception i()
  {
    return k;
  }
  
  public boolean l()
  {
    return m == 503;
  }
  
  public int m()
  {
    return r;
  }
}
