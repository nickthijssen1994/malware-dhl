package com.huawei.hms.framework.network.grs.asm;

import android.content.Context;
import android.os.SystemClock;
import com.huawei.hms.framework.common.IoUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.api.support.HttpRequest;
import com.huawei.hms.framework.network.grs.c.e;
import com.huawei.hms.framework.network.grs.local.model.i;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.Callable;
import javax.net.ssl.HttpsURLConnection;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ByteVector
  extends com.huawei.hms.framework.network.grs.c.b
  implements Callable<e>
{
  private static final String a = "i";
  private GrsBaseInfo b;
  
  public ByteVector(String paramString1, int paramInt, k paramK, Context paramContext, String paramString2, GrsBaseInfo paramGrsBaseInfo)
  {
    super(paramString1, paramInt, paramK, paramContext, paramString2, paramGrsBaseInfo);
    b = paramGrsBaseInfo;
  }
  
  private String write()
  {
    Object localObject1 = new HashSet();
    com.huawei.hms.framework.network.grs.local.model.ByteVector localByteVector = com.huawei.hms.framework.network.grs.manager.b.a(getData().getPackageName(), b).a();
    if (localByteVector == null)
    {
      Logger.append(a, "get local assets appGrs is null.");
      return "";
    }
    Object localObject2 = localByteVector.get();
    JSONArray localJSONArray;
    if ((localObject2 != null) && (!((Map)localObject2).isEmpty()))
    {
      localObject2 = ((Map)localObject2).entrySet().iterator();
      while (((Iterator)localObject2).hasNext()) {
        ((Set)localObject1).add(((i)((Map.Entry)((Iterator)localObject2).next()).getValue()).a());
      }
      if (((Set)localObject1).isEmpty()) {
        return "";
      }
      localObject2 = new JSONObject();
      localJSONArray = new JSONArray();
      localObject1 = ((Set)localObject1).iterator();
      while (((Iterator)localObject1).hasNext()) {
        localJSONArray.put((String)((Iterator)localObject1).next());
      }
    }
    try
    {
      ((JSONObject)localObject2).put("services", localJSONArray);
      Logger.d(a, "post service list is:%s,and appName is:%s", new Object[] { ((JSONObject)localObject2).toString(), localByteVector.a() });
      return ((JSONObject)localObject2).toString();
    }
    catch (JSONException localJSONException)
    {
      for (;;) {}
    }
    return "";
    return "";
  }
  
  public h call()
  {
    Logger.get(a, "Post call execute");
    long l1 = 0L;
    long l4;
    try
    {
      l4 = SystemClock.elapsedRealtime();
      l2 = l4;
      try
      {
        l3 = System.currentTimeMillis();
        l1 = l3;
        HttpsURLConnection localHttpsURLConnection = HttpRequest.createConnection(getName(), getData(), e());
        Object localObject1 = null;
        InputStream localInputStream = null;
        if (localHttpsURLConnection == null)
        {
          localObject1 = a;
          l1 = l3;
          Logger.append((String)localObject1, "create HttpsURLConnection instance by url return null.");
          return null;
        }
        l1 = l3;
        localHttpsURLConnection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
        l1 = l3;
        localHttpsURLConnection.setRequestMethod("POST");
        l1 = l3;
        localHttpsURLConnection.setDoOutput(true);
        l1 = l3;
        localHttpsURLConnection.setDoInput(true);
        l1 = l3;
        localHttpsURLConnection.connect();
        l1 = l3;
        Object localObject3 = localHttpsURLConnection.getOutputStream();
        l1 = l3;
        ((OutputStream)localObject3).write(write().getBytes("UTF-8"));
        l1 = l3;
        ((OutputStream)localObject3).close();
        l1 = l3;
        int i = localHttpsURLConnection.getResponseCode();
        if (i == 200)
        {
          localObject1 = localInputStream;
          try
          {
            localInputStream = localHttpsURLConnection.getInputStream();
            localObject1 = localInputStream;
            localObject3 = IoUtils.toByteArray(localInputStream);
            l1 = l3;
            IoUtils.closeSecure(localInputStream);
            localObject1 = localObject3;
          }
          catch (Throwable localThrowable)
          {
            localObject1 = (InputStream)localObject1;
            l1 = l3;
            IoUtils.closeSecure((InputStream)localObject1);
            l1 = l3;
            throw localThrowable;
          }
        }
        l1 = l3;
        localObject3 = localHttpsURLConnection.getHeaderFields();
        l1 = l3;
        localHttpsURLConnection.disconnect();
        l1 = l3;
        long l6 = SystemClock.elapsedRealtime();
        l1 = l3;
        long l5 = System.currentTimeMillis();
        Object localObject2 = localObject1;
        if (localObject1 == null) {
          localObject2 = new byte[0];
        }
        localObject1 = (byte[])localObject2;
        l1 = l3;
        localObject1 = new h(i, (Map)localObject3, (byte[])localObject1, l6 - l4);
        a = ((h)localObject1);
        l1 = l3;
        l2 = l5;
      }
      catch (IOException localIOException1) {}
      l4 = SystemClock.elapsedRealtime();
    }
    catch (IOException localIOException2)
    {
      l2 = 0L;
    }
    long l3 = System.currentTimeMillis();
    Logger.append(a, "RequestCallableV2 run task catch IOException", localIOException2);
    a = new h((Exception)localIOException2, l4 - l2);
    long l2 = l3;
    a.d(getName());
    a.e(d());
    a.e(l1);
    a.d(l2);
    if (b() != null) {
      b().a(a);
    }
    return a;
  }
}
