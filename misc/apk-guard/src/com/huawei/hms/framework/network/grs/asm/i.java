package com.huawei.hms.framework.network.grs.asm;

import android.content.Context;
import com.huawei.hms.framework.common.ExecutorsUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.common.NetworkUtil;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.api.ByteVector;
import com.huawei.hms.framework.network.grs.c;
import java.util.Map;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

public class i
{
  private Map<String, com.huawei.hms.framework.network.grs.c.b.b> c = new ConcurrentHashMap(16);
  private final Object d = new Object();
  private ExecutorService e = ExecutorsUtils.newCachedThreadPool("GRS_RequestController-Task");
  private com.huawei.hms.framework.network.grs.data.Label i;
  
  public i() {}
  
  private void a(h paramH, c paramC)
  {
    if (paramC != null)
    {
      if (paramH == null)
      {
        Logger.d("RequestController", "GrsResponse is null");
        paramC.b();
        return;
      }
      Logger.d("RequestController", "GrsResponse is not null");
      paramC.a(paramH);
    }
  }
  
  public h a(GrsBaseInfo paramGrsBaseInfo, Context paramContext, String paramString)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("request to server with service name is: ");
    ((StringBuilder)localObject).append(paramString);
    Logger.debug("RequestController", ((StringBuilder)localObject).toString());
    String str = paramGrsBaseInfo.getGrsParasKey(false, true, paramContext);
    localObject = d;
    try
    {
      if (!NetworkUtil.isNetworkAvailable(paramContext)) {
        return null;
      }
      ByteVector localByteVector = com.huawei.hms.framework.network.grs.api.Label.b(str);
      com.huawei.hms.framework.network.grs.asm.digests.b localB = (com.huawei.hms.framework.network.grs.asm.digests.b)c.get(str);
      if ((localB != null) && (localB.a()))
      {
        paramGrsBaseInfo = localB.d();
      }
      else
      {
        if ((localByteVector != null) && (localByteVector.add())) {
          return null;
        }
        Logger.debug("RequestController", "hitGrsRequestBean == null or request block is released.");
        paramContext = e.submit(new ConnectionCacheImpl.ConnectionTask(this, paramGrsBaseInfo, paramContext, paramString));
        paramGrsBaseInfo = paramContext;
        c.put(str, new com.huawei.hms.framework.network.grs.asm.digests.b(paramContext));
      }
      try
      {
        paramGrsBaseInfo = paramGrsBaseInfo.get();
        return (h)paramGrsBaseInfo;
      }
      catch (InterruptedException paramGrsBaseInfo)
      {
        paramContext = "when check result, find InterruptedException, check others";
      }
      catch (ExecutionException paramGrsBaseInfo)
      {
        paramContext = "when check result, find ExecutionException, check others";
      }
      catch (CancellationException paramGrsBaseInfo)
      {
        paramContext = "when check result, find CancellationException, check others";
      }
      Logger.append("RequestController", paramContext, paramGrsBaseInfo);
      return null;
    }
    catch (Throwable paramGrsBaseInfo)
    {
      throw paramGrsBaseInfo;
    }
  }
  
  public void a(GrsBaseInfo paramGrsBaseInfo, Context paramContext, c paramC, String paramString)
  {
    e.execute(new a(this, paramGrsBaseInfo, paramContext, paramString, paramC));
  }
  
  public void a(String paramString)
  {
    Object localObject = d;
    try
    {
      c.remove(paramString);
      return;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public void b(com.huawei.hms.framework.network.grs.data.Label paramLabel)
  {
    i = paramLabel;
  }
}
