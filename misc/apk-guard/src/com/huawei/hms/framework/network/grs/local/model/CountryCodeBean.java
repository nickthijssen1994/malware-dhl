package com.huawei.hms.framework.network.grs.local.model;

import android.content.Context;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import com.huawei.hms.framework.common.CreateFileUtil;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.common.SystemPropUtils;
import java.util.Locale;

public class CountryCodeBean
{
  private static final String ANDRIOD_SYSTEMPROP = "android.os.SystemProperties";
  private static final int COUNTRYCODE_SIZE = 2;
  private static final String LOCALE_COUNTRYSYSTEMPROP = "ro.product.locale";
  private static final String LOCALE_REGION_COUNTRYSYSTEMPROP = "ro.product.locale.region";
  private static final String S = "CountryCodeBean";
  private static final String SPECIAL_COUNTRYCODE_CN = "cn";
  private static final String SPECIAL_COUNTRYCODE_EU = "eu";
  private static final String SPECIAL_COUNTRYCODE_LA = "la";
  private static final String VENDORCOUNTRY_SYSTEMPROP = "ro.hw.country";
  private String countryCode = "UNKNOWN";
  private String countrySource = "UNKNOWN";
  
  public CountryCodeBean(Context paramContext, boolean paramBoolean)
  {
    init(paramContext, paramBoolean);
    countryCode = countryCode.toUpperCase(Locale.ENGLISH);
  }
  
  private void checkCodeLenth()
  {
    String str = countryCode;
    if ((str == null) || (str.length() != 2))
    {
      countryCode = "UNKNOWN";
      countrySource = "UNKNOWN";
    }
  }
  
  private void getLocaleCountryCode()
  {
    if (CreateFileUtil.isPVersion()) {
      getRegionSettingCountryCode();
    } else {
      getProductCountryCode();
    }
    countrySource = "LOCALE_INFO";
  }
  
  private void getProductCountryCode()
  {
    countryCode = SystemPropUtils.getProperty("get", "ro.product.locale.region", "android.os.SystemProperties", "UNKNOWN");
    String str = S;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("countryCode by ro.product.locale.region is:");
    localStringBuilder.append(countryCode);
    Logger.get(str, localStringBuilder.toString());
    if ((TextUtils.isEmpty(countryCode)) || ("UNKNOWN".equals(countryCode)))
    {
      str = SystemPropUtils.getProperty("get", "ro.product.locale", "android.os.SystemProperties", "UNKNOWN");
      if (!TextUtils.isEmpty(str))
      {
        int i = str.lastIndexOf("-");
        if (i != -1)
        {
          countryCode = str.substring(i + 1);
          str = S;
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("countryCode by ro.product.locale is:");
          localStringBuilder.append(countryCode);
          Logger.get(str, localStringBuilder.toString());
        }
      }
    }
    if (!"cn".equalsIgnoreCase(countryCode)) {
      countryCode = "UNKNOWN";
    }
  }
  
  private void getRegionSettingCountryCode()
  {
    countryCode = Locale.getDefault().getCountry();
    String str = S;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("countryCode by system's region setting is: ");
    localStringBuilder.append(countryCode);
    Logger.get(str, localStringBuilder.toString());
    if (TextUtils.isEmpty(countryCode)) {
      countryCode = "UNKNOWN";
    }
  }
  
  private void getSimCountryCode(Context paramContext)
  {
    getSimCountryCode(paramContext, false);
  }
  
  private void getSimCountryCode(Context paramContext, boolean paramBoolean)
  {
    paramContext = (TelephonyManager)paramContext.getApplicationContext().getSystemService("phone");
    if (paramContext != null)
    {
      StringBuilder localStringBuilder;
      String str;
      if ((paramBoolean) && (paramContext.getPhoneType() != 2))
      {
        countryCode = paramContext.getNetworkCountryIso();
        countrySource = "NETWORK_COUNTRY";
        paramContext = S;
        localStringBuilder = new StringBuilder();
        str = "countryCode by NetworkCountryIso is: ";
      }
      else
      {
        countryCode = paramContext.getSimCountryIso();
        countrySource = "SIM_COUNTRY";
        paramContext = S;
        localStringBuilder = new StringBuilder();
        str = "countryCode by SimCountryIso is: ";
      }
      localStringBuilder.append(str);
      localStringBuilder.append(countryCode);
      Logger.get(paramContext, localStringBuilder.toString());
    }
    checkCodeLenth();
  }
  
  private void getVendorCountryCode()
  {
    countrySource = "VENDOR_COUNTRY";
    countryCode = SystemPropUtils.getProperty("get", "ro.hw.country", "android.os.SystemProperties", "UNKNOWN");
    String str = S;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("countryCode by ro.hw.country is: ");
    localStringBuilder.append(countryCode);
    Logger.get(str, localStringBuilder.toString());
    if ((!"eu".equalsIgnoreCase(countryCode)) && (!"la".equalsIgnoreCase(countryCode)))
    {
      checkCodeLenth();
      return;
    }
    countryCode = "UNKNOWN";
    countrySource = "UNKNOWN";
  }
  
  private void init(Context paramContext, boolean paramBoolean)
  {
    if (paramContext != null) {}
    try
    {
      getVendorCountryCode();
      paramBoolean = isCodeValidate();
      if (paramBoolean) {
        paramContext = S;
      }
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    try
    {
      Logger.get(paramContext, "get issue_country code from VENDOR_COUNTRY");
      return;
    }
    catch (Exception paramContext)
    {
      break label77;
    }
    getSimCountryCode(paramContext);
    paramBoolean = isCodeValidate();
    if (paramBoolean) {
      paramContext = S;
    }
    try
    {
      Logger.get(paramContext, "get issue_country code from SIM_COUNTRY");
      return;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    getLocaleCountryCode();
    paramBoolean = isCodeValidate();
    if (paramBoolean)
    {
      paramContext = S;
      try
      {
        Logger.get(paramContext, "get issue_country code from LOCALE_INFO");
        return;
      }
      catch (Exception paramContext)
      {
        label77:
        for (;;) {}
      }
      Logger.append(S, "get CountryCode error");
      return;
      throw new NullPointerException("context must be not null.Please provide app's Context");
    }
  }
  
  private boolean isCodeValidate()
  {
    return "UNKNOWN".equals(countryCode) ^ true;
  }
  
  public String getCountryCode()
  {
    return countryCode;
  }
  
  public String getCountrySource()
  {
    return countrySource;
  }
}
