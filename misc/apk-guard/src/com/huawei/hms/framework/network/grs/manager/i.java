package com.huawei.hms.framework.network.grs.manager;

import android.content.Context;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.local.model.ByteVector;
import com.huawei.hms.framework.network.grs.local.model.f;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class i
  extends h
{
  public i(Context paramContext)
  {
    if (a("grs_sdk_global_route_config.json", paramContext, false) == 0) {
      e = true;
    }
  }
  
  public int a(String paramString)
  {
    try
    {
      JSONObject localJSONObject1 = new JSONObject(paramString).getJSONObject("services");
      Iterator localIterator1 = localJSONObject1.keys();
      for (;;)
      {
        boolean bool = localIterator1.hasNext();
        int i = 0;
        if (!bool) {
          break;
        }
        paramString = localIterator1.next();
        String str = (String)paramString;
        com.huawei.hms.framework.network.grs.local.model.i localI = new com.huawei.hms.framework.network.grs.local.model.i();
        localI.b(str);
        paramString = f;
        bool = paramString.contains(str);
        if (!bool)
        {
          paramString = f;
          paramString.add(str);
          JSONObject localJSONObject2 = localJSONObject1.getJSONObject(str);
          localI.c(localJSONObject2.getString("routeBy"));
          JSONArray localJSONArray = localJSONObject2.getJSONArray("servings");
          for (;;)
          {
            int j = localJSONArray.length();
            if (i >= j) {
              break;
            }
            paramString = localJSONArray.get(i);
            Object localObject1 = (JSONObject)paramString;
            com.huawei.hms.framework.network.grs.local.model.h localH = new com.huawei.hms.framework.network.grs.local.model.h();
            paramString = "no-country";
            bool = ((JSONObject)localObject1).has("countryOrAreaGroup");
            if (bool)
            {
              paramString = "countryOrAreaGroup";
            }
            else
            {
              bool = ((JSONObject)localObject1).has("countryGroup");
              if (!bool) {
                break label215;
              }
              paramString = "countryGroup";
            }
            paramString = ((JSONObject)localObject1).getString(paramString);
            break label222;
            label215:
            Logger.d("LocalManagerV1", "maybe this service routeBy is unconditional.");
            label222:
            localH.e(paramString);
            paramString = ((JSONObject)localObject1).getJSONObject("addresses");
            localObject1 = new HashMap(16);
            Iterator localIterator2 = paramString.keys();
            for (;;)
            {
              bool = localIterator2.hasNext();
              if (!bool) {
                break;
              }
              Object localObject2 = localIterator2.next();
              localObject2 = (String)localObject2;
              ((HashMap)localObject1).put(localObject2, paramString.getString((String)localObject2));
            }
            localH.d((Map)localObject1);
            localI.a(localH.b(), localH);
            i += 1;
          }
          bool = localJSONObject2.has("countryOrAreaGroups");
          paramString = null;
          if (bool) {}
          for (paramString = "countryOrAreaGroups";; paramString = "countryGroups")
          {
            paramString = localJSONObject2.getJSONObject(paramString);
            break;
            bool = localJSONObject2.has("countryGroups");
            if (!bool) {
              break label385;
            }
          }
          paramString = c(null, paramString);
          break label392;
          label385:
          Logger.d("LocalManagerV1", "service use default countryOrAreaGroup");
          label392:
          localI.a(paramString);
          if (d == null)
          {
            paramString = new ByteVector();
            d = paramString;
          }
          paramString = d;
          paramString.a(str, localI);
        }
      }
      return 0;
    }
    catch (JSONException paramString)
    {
      Logger.append("LocalManagerV1", "parse 1.0 services failed maybe because of json style.please check!", paramString);
    }
    return -1;
  }
  
  public int b(String paramString)
  {
    d = new ByteVector();
    try
    {
      Object localObject = new JSONObject(paramString).getJSONObject("application");
      paramString = ((JSONObject)localObject).getString("name");
      long l = ((JSONObject)localObject).getLong("cacheControl");
      localObject = ((JSONObject)localObject).getJSONArray("services");
      ByteVector localByteVector = d;
      localByteVector.b(paramString);
      paramString = d;
      paramString.a(l);
      if (localObject != null)
      {
        int i = ((JSONArray)localObject).length();
        if (i == 0) {
          return -1;
        }
        return 0;
      }
      return -1;
    }
    catch (JSONException paramString)
    {
      Logger.append("LocalManagerV1", "parse appbean failed maybe json style is wrong.", paramString);
    }
    return -1;
  }
  
  public int c(String paramString)
  {
    c = new ArrayList(16);
    try
    {
      Object localObject1 = new JSONObject(paramString);
      boolean bool = ((JSONObject)localObject1).has("countryOrAreaGroups");
      if (bool)
      {
        paramString = "countryOrAreaGroups";
      }
      else
      {
        bool = ((JSONObject)localObject1).has("countryGroups");
        if (!bool) {
          break label70;
        }
        paramString = "countryGroups";
      }
      paramString = ((JSONObject)localObject1).getJSONObject(paramString);
      break label79;
      label70:
      Logger.e("LocalManagerV1", "maybe local config json is wrong because the default countryOrAreaGroups isn't config.");
      paramString = null;
      label79:
      if (paramString == null) {
        return -1;
      }
      int i = paramString.length();
      if (i != 0)
      {
        Iterator localIterator = paramString.keys();
        for (;;)
        {
          bool = localIterator.hasNext();
          if (!bool) {
            break label353;
          }
          localObject1 = localIterator.next();
          localObject1 = (String)localObject1;
          f localF = new f();
          localF.c((String)localObject1);
          Object localObject2 = paramString.getJSONObject((String)localObject1);
          localF.e(((JSONObject)localObject2).getString("name"));
          localF.d(((JSONObject)localObject2).getString("description"));
          bool = ((JSONObject)localObject2).has("countriesOrAreas");
          if (bool)
          {
            localObject1 = "countriesOrAreas";
          }
          else
          {
            bool = ((JSONObject)localObject2).has("countries");
            if (!bool) {
              break label229;
            }
            localObject1 = "countries";
          }
          localObject1 = ((JSONObject)localObject2).getJSONArray((String)localObject1);
          break label239;
          label229:
          Logger.append("LocalManagerV1", "current country or area group has not config countries or areas.");
          localObject1 = null;
          label239:
          localObject2 = new HashSet(16);
          if (localObject1 == null) {
            break;
          }
          i = ((JSONArray)localObject1).length();
          if (i == 0) {
            return -1;
          }
          i = 0;
          for (;;)
          {
            int j = ((JSONArray)localObject1).length();
            if (i >= j) {
              break;
            }
            Object localObject3 = ((JSONArray)localObject1).get(i);
            localObject3 = (String)localObject3;
            ((Set)localObject2).add(localObject3);
            i += 1;
          }
          localF.d((Set)localObject2);
          localObject1 = c;
          ((List)localObject1).add(localF);
        }
        return -1;
      }
      return 0;
    }
    catch (JSONException paramString)
    {
      Logger.append("LocalManagerV1", "parse countrygroup failed maybe json style is wrong.", paramString);
      return -1;
    }
    label353:
    return 0;
  }
  
  public List c(JSONArray paramJSONArray, JSONObject paramJSONObject)
  {
    if ((paramJSONObject != null) && (paramJSONObject.length() != 0)) {
      try
      {
        ArrayList localArrayList = new ArrayList(16);
        Iterator localIterator = paramJSONObject.keys();
        for (;;)
        {
          boolean bool = localIterator.hasNext();
          paramJSONArray = localArrayList;
          if (!bool) {
            return paramJSONArray;
          }
          paramJSONArray = localIterator.next();
          paramJSONArray = (String)paramJSONArray;
          f localF = new f();
          localF.c(paramJSONArray);
          Object localObject1 = paramJSONObject.getJSONObject(paramJSONArray);
          localF.e(((JSONObject)localObject1).getString("name"));
          localF.d(((JSONObject)localObject1).getString("description"));
          paramJSONArray = null;
          bool = ((JSONObject)localObject1).has("countriesOrAreas");
          if (bool)
          {
            paramJSONArray = "countriesOrAreas";
          }
          else
          {
            bool = ((JSONObject)localObject1).has("countries");
            if (!bool) {
              break label156;
            }
            paramJSONArray = "countries";
          }
          paramJSONArray = ((JSONObject)localObject1).getJSONArray(paramJSONArray);
          break label163;
          label156:
          Logger.append("LocalManagerV1", "current country or area group has not config countries or areas.");
          label163:
          localObject1 = new HashSet(16);
          if (paramJSONArray == null) {
            break;
          }
          int i = paramJSONArray.length();
          if (i == 0) {
            break;
          }
          i = 0;
          for (;;)
          {
            int j = paramJSONArray.length();
            if (i >= j) {
              break;
            }
            Object localObject2 = paramJSONArray.get(i);
            localObject2 = (String)localObject2;
            ((Set)localObject1).add(localObject2);
            i += 1;
          }
          localF.d((Set)localObject1);
          localArrayList.add(localF);
        }
        paramJSONArray = new ArrayList();
        return paramJSONArray;
      }
      catch (JSONException paramJSONArray)
      {
        Logger.append("LocalManagerV1", "parse countryGroups failed maybe json style is wrong.", paramJSONArray);
        return new ArrayList();
      }
    }
    paramJSONArray = new ArrayList();
    return paramJSONArray;
  }
}
