package com.huawei.hms.framework.network.grs.manager;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.GrsApp;
import com.huawei.hms.framework.network.grs.local.model.ByteVector;
import com.huawei.hms.framework.network.grs.local.model.f;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class d
  extends h
{
  public d(Context paramContext)
  {
    String str2 = GrsApp.getInstance().getAppConfigName();
    String str1 = str2;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("appConfigName is");
    localStringBuilder.append(str2);
    Logger.get("LocalManagerV2", localStringBuilder.toString());
    if (TextUtils.isEmpty(str2)) {
      str1 = "grs_app_global_route_config.json";
    }
    if (a(str1, paramContext, true) == 0) {
      e = true;
    }
  }
  
  public int a(String paramString)
  {
    return getValue(paramString);
  }
  
  public int b(String paramString)
  {
    d = new ByteVector();
    try
    {
      paramString = new JSONObject(paramString).getJSONArray("applications").getJSONObject(0);
      Object localObject = paramString.getString("name");
      ByteVector localByteVector = d;
      localByteVector.b((String)localObject);
      localObject = paramString.getJSONArray("services");
      if (localObject != null)
      {
        int i = ((JSONArray)localObject).length();
        if (i == 0) {
          return -1;
        }
        boolean bool = paramString.has("customservices");
        if (bool)
        {
          c(paramString.getJSONArray("customservices"));
          return 0;
        }
      }
      else
      {
        return -1;
      }
    }
    catch (JSONException paramString)
    {
      Logger.append("LocalManagerV2", "parse appbean failed maybe json style is wrong.", paramString);
      return -1;
    }
    return 0;
  }
  
  public int c(String paramString)
  {
    c = new ArrayList(16);
    try
    {
      Object localObject1 = new JSONObject(paramString);
      boolean bool = ((JSONObject)localObject1).has("countryOrAreaGroups");
      if (bool)
      {
        paramString = "countryOrAreaGroups";
      }
      else
      {
        bool = ((JSONObject)localObject1).has("countryGroups");
        if (!bool) {
          break label70;
        }
        paramString = "countryGroups";
      }
      paramString = ((JSONObject)localObject1).getJSONArray(paramString);
      break label79;
      label70:
      Logger.e("LocalManagerV2", "maybe local config json is wrong because the default countryOrAreaGroups isn't config.");
      paramString = null;
      label79:
      if (paramString == null) {
        return -1;
      }
      int i = paramString.length();
      if (i != 0)
      {
        i = 0;
        for (;;)
        {
          int j = paramString.length();
          if (i >= j) {
            break label339;
          }
          Object localObject2 = paramString.getJSONObject(i);
          f localF = new f();
          localF.c(((JSONObject)localObject2).getString("id"));
          localF.e(((JSONObject)localObject2).getString("name"));
          localF.d(((JSONObject)localObject2).getString("description"));
          bool = ((JSONObject)localObject2).has("countriesOrAreas");
          if (bool)
          {
            localObject1 = "countriesOrAreas";
          }
          else
          {
            bool = ((JSONObject)localObject2).has("countries");
            if (!bool) {
              break label209;
            }
            localObject1 = "countries";
          }
          localObject1 = ((JSONObject)localObject2).getJSONArray((String)localObject1);
          break label219;
          label209:
          Logger.append("LocalManagerV2", "current country or area group has not config countries or areas.");
          localObject1 = null;
          label219:
          localObject2 = new HashSet(16);
          if (localObject1 == null) {
            break;
          }
          j = ((JSONArray)localObject1).length();
          if (j == 0) {
            return -1;
          }
          j = 0;
          for (;;)
          {
            int k = ((JSONArray)localObject1).length();
            if (j >= k) {
              break;
            }
            Object localObject3 = ((JSONArray)localObject1).get(j);
            localObject3 = (String)localObject3;
            ((Set)localObject2).add(localObject3);
            j += 1;
          }
          localF.d((Set)localObject2);
          localObject1 = c;
          ((List)localObject1).add(localF);
          i += 1;
        }
        return -1;
      }
      return 0;
    }
    catch (JSONException paramString)
    {
      Logger.append("LocalManagerV2", "parse countrygroup failed maybe json style is wrong.", paramString);
      return -1;
    }
    label339:
    return 0;
  }
  
  public List c(JSONArray paramJSONArray, JSONObject paramJSONObject)
  {
    if ((paramJSONArray != null) && (paramJSONArray.length() != 0)) {
      try
      {
        ArrayList localArrayList = new ArrayList(16);
        int i = 0;
        for (;;)
        {
          int j = paramJSONArray.length();
          paramJSONObject = localArrayList;
          if (i >= j) {
            break label261;
          }
          Object localObject1 = paramJSONArray.getJSONObject(i);
          f localF = new f();
          localF.c(((JSONObject)localObject1).getString("id"));
          localF.e(((JSONObject)localObject1).getString("name"));
          localF.d(((JSONObject)localObject1).getString("description"));
          paramJSONObject = null;
          boolean bool = ((JSONObject)localObject1).has("countriesOrAreas");
          if (bool)
          {
            paramJSONObject = "countriesOrAreas";
          }
          else
          {
            bool = ((JSONObject)localObject1).has("countries");
            if (!bool) {
              break label143;
            }
            paramJSONObject = "countries";
          }
          paramJSONObject = ((JSONObject)localObject1).getJSONArray(paramJSONObject);
          break label150;
          label143:
          Logger.append("LocalManagerV2", "current country or area group has not config countries or areas.");
          label150:
          localObject1 = new HashSet(16);
          if (paramJSONObject == null) {
            break;
          }
          j = paramJSONObject.length();
          if (j == 0) {
            break;
          }
          j = 0;
          for (;;)
          {
            int k = paramJSONObject.length();
            if (j >= k) {
              break;
            }
            Object localObject2 = paramJSONObject.get(j);
            localObject2 = (String)localObject2;
            ((Set)localObject1).add(localObject2);
            j += 1;
          }
          localF.d((Set)localObject1);
          localArrayList.add(localF);
          i += 1;
        }
        paramJSONObject = new ArrayList();
        label261:
        return paramJSONObject;
      }
      catch (JSONException paramJSONArray)
      {
        Logger.append("LocalManagerV2", "parse countrygroup failed maybe json style is wrong.", paramJSONArray);
        return new ArrayList();
      }
    }
    return new ArrayList();
  }
}
