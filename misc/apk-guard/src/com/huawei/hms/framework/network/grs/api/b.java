package com.huawei.hms.framework.network.grs.api;

import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class b
{
  private static final Pattern PARAM_RE = Pattern.compile("[0-9]*[a-z|A-Z]*[?-?]*");
  private static final String b = "b";
  
  public static String c(String paramString)
  {
    return toString(paramString, "SHA-256");
  }
  
  private static String encode(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      if (str.length() == 1) {
        localStringBuffer.append("0");
      }
      localStringBuffer.append(str);
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  public static String parse(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return paramString;
    }
    int i = paramString.length();
    int j = 1;
    if (i == 1) {
      return "*";
    }
    StringBuffer localStringBuffer = new StringBuffer();
    i = 0;
    while (i < paramString.length())
    {
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramString.charAt(i));
      ((StringBuilder)localObject1).append("");
      String str = ((StringBuilder)localObject1).toString();
      localObject1 = str;
      int k = j;
      Object localObject2 = localObject1;
      if (PARAM_RE.matcher(str).matches())
      {
        if (j % 2 == 0) {
          localObject1 = "*";
        }
        k = j + 1;
        localObject2 = localObject1;
      }
      localStringBuffer.append(localObject2);
      i += 1;
      j = k;
    }
    return localStringBuffer.toString();
  }
  
  private static String toString(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = paramString1.getBytes("UTF-8");
    }
    catch (UnsupportedEncodingException paramString1)
    {
      label21:
      for (;;) {}
    }
    try
    {
      paramString1 = encode(MessageDigest.getInstance(paramString2).digest(paramString1));
      return paramString1;
    }
    catch (NoSuchAlgorithmException paramString1)
    {
      break label21;
    }
    paramString1 = b;
    for (paramString2 = "encrypt NoSuchAlgorithmException";; paramString2 = "encrypt UnsupportedEncodingException")
    {
      Logger.append(paramString1, paramString2);
      return null;
      paramString1 = b;
    }
  }
}
