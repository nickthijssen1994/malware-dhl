package com.huawei.hms.framework.network.grs;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

public class GrsBaseInfo
  implements Cloneable
{
  private static final String logTag = "GrsBaseInfo";
  private String androidVersion;
  private String appName;
  private String countrySource;
  private String deviceModel;
  private String issueCountry;
  private String regCountry;
  private String romVersion;
  private String serCountry;
  private String uid;
  private String versionName;
  
  public GrsBaseInfo() {}
  
  public GrsBaseInfo(Context paramContext)
  {
    issueCountry = GrsApp.getInstance().getIssueCountryCode(paramContext);
  }
  
  private StringBuffer getStringBuffer(StringBuffer paramStringBuffer, boolean paramBoolean, Context paramContext)
  {
    String str = getAndroidVersion();
    if (!TextUtils.isEmpty(str))
    {
      if (!TextUtils.isEmpty(paramStringBuffer.toString())) {
        paramStringBuffer.append("&");
      }
      paramStringBuffer.append("android_version");
      paramStringBuffer.append("=");
      paramStringBuffer.append(str);
    }
    str = getRomVersion();
    if (!TextUtils.isEmpty(str))
    {
      if (!TextUtils.isEmpty(paramStringBuffer.toString())) {
        paramStringBuffer.append("&");
      }
      paramStringBuffer.append("rom_version");
      paramStringBuffer.append("=");
      paramStringBuffer.append(str);
    }
    str = getDeviceModel();
    if (!TextUtils.isEmpty(str))
    {
      if (!TextUtils.isEmpty(paramStringBuffer.toString())) {
        paramStringBuffer.append("&");
      }
      paramStringBuffer.append("device_model");
      paramStringBuffer.append("=");
      paramStringBuffer.append(str);
    }
    paramContext = new com.huawei.hms.framework.network.grs.data.ByteVector(paramContext).read();
    if ((!TextUtils.isEmpty(paramContext)) && (!paramBoolean)) {
      try
      {
        paramContext = URLEncoder.encode(paramContext, "UTF-8");
        paramBoolean = TextUtils.isEmpty(paramStringBuffer.toString());
        if (!paramBoolean) {
          paramStringBuffer.append("&");
        }
        paramStringBuffer.append("cp");
        paramStringBuffer.append("=");
        paramStringBuffer.append(paramContext);
      }
      catch (UnsupportedEncodingException paramContext)
      {
        Logger.e(logTag, "cp UnsupportedEncodingException.", paramContext);
      }
    }
    paramContext = getCountrySource();
    if (!TextUtils.isEmpty(paramContext))
    {
      if (!TextUtils.isEmpty(paramStringBuffer.toString())) {
        paramStringBuffer.append("&");
      }
      paramStringBuffer.append("country_source");
      paramStringBuffer.append("=");
      paramStringBuffer.append(paramContext);
    }
    return paramStringBuffer;
  }
  
  private boolean isEqual(String paramString1, String paramString2)
  {
    if ((paramString1 == null) && (paramString2 == null)) {
      return true;
    }
    if (paramString1 != null)
    {
      if (paramString2 == null) {
        return false;
      }
      if (paramString1.equals(paramString2)) {
        return true;
      }
    }
    return false;
  }
  
  public GrsBaseInfo clone()
  {
    return (GrsBaseInfo)super.clone();
  }
  
  public boolean compare(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (paramObject != null)
    {
      if (GrsBaseInfo.class != paramObject.getClass()) {
        return false;
      }
      if ((paramObject instanceof GrsBaseInfo))
      {
        paramObject = (GrsBaseInfo)paramObject;
        return (isEqual(serCountry, serCountry)) && (isEqual(versionName, versionName)) && (isEqual(appName, appName)) && (isEqual(uid, uid)) && (isEqual(regCountry, regCountry)) && (isEqual(issueCountry, issueCountry)) && (isEqual(androidVersion, androidVersion)) && (isEqual(romVersion, romVersion)) && (isEqual(deviceModel, deviceModel)) && (isEqual(countrySource, countrySource));
      }
    }
    return false;
  }
  
  public GrsBaseInfo copy()
  {
    GrsBaseInfo localGrsBaseInfo = new GrsBaseInfo();
    localGrsBaseInfo.setAppName(appName);
    localGrsBaseInfo.setSerCountry(serCountry);
    localGrsBaseInfo.setRegCountry(regCountry);
    localGrsBaseInfo.setIssueCountry(issueCountry);
    localGrsBaseInfo.setCountrySource(countrySource);
    localGrsBaseInfo.setAndroidVersion(androidVersion);
    localGrsBaseInfo.setDeviceModel(deviceModel);
    localGrsBaseInfo.setRomVersion(romVersion);
    localGrsBaseInfo.setUid(uid);
    localGrsBaseInfo.setVersionName(versionName);
    return localGrsBaseInfo;
  }
  
  public String getAndroidVersion()
  {
    return androidVersion;
  }
  
  public String getAppName()
  {
    return appName;
  }
  
  public String getCountrySource()
  {
    return countrySource;
  }
  
  public String getDeviceModel()
  {
    return deviceModel;
  }
  
  public String getGrsParasKey(boolean paramBoolean1, boolean paramBoolean2, Context paramContext)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject = com.huawei.hms.framework.network.grs.manager.b.a(paramContext.getPackageName(), this).a();
    String str = "";
    if (localObject != null) {
      str = ((com.huawei.hms.framework.network.grs.local.model.ByteVector)localObject).a();
    }
    localObject = getAppName();
    if ((!TextUtils.isEmpty((CharSequence)localObject)) && (TextUtils.isEmpty(str)))
    {
      localStringBuffer.append("app_name");
      localStringBuffer.append("=");
      localStringBuffer.append((String)localObject);
    }
    paramContext = getGrsReqParamJoint(paramBoolean1, paramBoolean2, str, paramContext);
    if (!TextUtils.isEmpty(paramContext))
    {
      if (!TextUtils.isEmpty(localStringBuffer.toString())) {
        localStringBuffer.append("&");
      }
      localStringBuffer.append(paramContext);
    }
    return localStringBuffer.toString();
  }
  
  public String getGrsReqParamJoint(boolean paramBoolean1, boolean paramBoolean2, String paramString, Context paramContext)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    if ("1.0".equals(paramString))
    {
      Logger.d(logTag, "1.0 interface has no query param appname");
    }
    else
    {
      if (!TextUtils.isEmpty(paramString))
      {
        localStringBuffer.append("app_name");
        localStringBuffer.append("=");
      }
      for (;;)
      {
        localStringBuffer.append(paramString);
        break;
        if (TextUtils.isEmpty(getAppName())) {
          break;
        }
        localStringBuffer.append("app_name");
        localStringBuffer.append("=");
        paramString = getAppName();
      }
    }
    paramString = getVersionName();
    if (!TextUtils.isEmpty(paramString))
    {
      if (!TextUtils.isEmpty(localStringBuffer.toString())) {
        localStringBuffer.append("&");
      }
      localStringBuffer.append("app_version");
      localStringBuffer.append("=");
      localStringBuffer.append(paramString);
    }
    paramString = getUid();
    if (!TextUtils.isEmpty(paramString))
    {
      if (!TextUtils.isEmpty(localStringBuffer.toString())) {
        localStringBuffer.append("&");
      }
      localStringBuffer.append("uid");
      localStringBuffer.append("=");
      if (paramBoolean1) {}
      for (paramString = com.huawei.hms.framework.network.grs.api.b.parse(paramString);; paramString = com.huawei.hms.framework.network.grs.api.b.c(paramString))
      {
        localStringBuffer.append(paramString);
        break label235;
        if (!paramBoolean2) {
          break;
        }
      }
      localStringBuffer.append(paramString);
    }
    label235:
    paramString = getRegCountry();
    if ((!TextUtils.isEmpty(paramString)) && (!"UNKNOWN".equals(paramString)))
    {
      if (!TextUtils.isEmpty(localStringBuffer.toString())) {
        localStringBuffer.append("&");
      }
      localStringBuffer.append("reg_country");
      localStringBuffer.append("=");
      localStringBuffer.append(paramString);
    }
    paramString = getSerCountry();
    if ((!TextUtils.isEmpty(paramString)) && (!"UNKNOWN".equals(paramString)))
    {
      if (!TextUtils.isEmpty(localStringBuffer.toString())) {
        localStringBuffer.append("&");
      }
      localStringBuffer.append("ser_country");
      localStringBuffer.append("=");
      localStringBuffer.append(paramString);
    }
    paramString = getIssueCountry();
    if ((!TextUtils.isEmpty(paramString)) && (!"UNKNOWN".equals(paramString)))
    {
      if (!TextUtils.isEmpty(localStringBuffer.toString())) {
        localStringBuffer.append("&");
      }
      localStringBuffer.append("issue_country");
      localStringBuffer.append("=");
      localStringBuffer.append(paramString);
    }
    return getStringBuffer(localStringBuffer, paramBoolean2, paramContext).toString();
  }
  
  public String getIssueCountry()
  {
    return issueCountry;
  }
  
  public String getRegCountry()
  {
    return regCountry;
  }
  
  public String getRomVersion()
  {
    return romVersion;
  }
  
  public String getSerCountry()
  {
    return serCountry;
  }
  
  public String getUid()
  {
    return uid;
  }
  
  public String getVersionName()
  {
    return versionName;
  }
  
  public void setAndroidVersion(String paramString)
  {
    androidVersion = paramString;
  }
  
  public void setAppName(String paramString)
  {
    appName = paramString;
  }
  
  public void setCountrySource(String paramString)
  {
    countrySource = paramString;
  }
  
  public void setDeviceModel(String paramString)
  {
    deviceModel = paramString;
  }
  
  public void setIssueCountry(String paramString)
  {
    issueCountry = paramString;
  }
  
  public void setRegCountry(String paramString)
  {
    regCountry = paramString;
  }
  
  public void setRomVersion(String paramString)
  {
    romVersion = paramString;
  }
  
  public void setSerCountry(String paramString)
  {
    serCountry = paramString;
  }
  
  public void setUid(String paramString)
  {
    uid = paramString;
  }
  
  public void setVersionName(String paramString)
  {
    versionName = paramString;
  }
  
  public int uniqueCode()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(appName);
    localStringBuilder.append("#");
    localStringBuilder.append(serCountry);
    localStringBuilder.append("#");
    localStringBuilder.append(regCountry);
    localStringBuilder.append("#");
    localStringBuilder.append(issueCountry);
    return localStringBuilder.toString().hashCode();
  }
}
