package com.huawei.hms.framework.common;

import android.text.TextUtils;
import android.util.Log;
import java.io.IOException;
import java.util.Arrays;
import java.util.IllegalFormatException;
import org.json.JSONException;

public class Logger
{
  private static final boolean DEBUG = false;
  private static final int MAX_STACK_DEEP_LENGTH = 20;
  private static final int MAX_STACK_DEEP_LENGTH_NORMAL = 8;
  private static final String SPLIT = "|";
  private static final String TAG_NETWORKKIT_PRE = "NetworkKit_";
  private static final String TAG_NETWORK_SDK_PRE = "NetworkSdk_";
  private static ExtLogger extLogger;
  private static boolean println = false;
  private static final String tag = "NetworkKit_Logger";
  
  public Logger() {}
  
  public static void append(String paramString, Object paramObject)
  {
    println(5, paramString, paramObject);
  }
  
  public static void append(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isAPPLoggable(5)) {
      extLogger.w(complexAppTag(paramString1), complexMsg(paramString2, 5), getNewThrowable(paramThrowable));
    }
    if (println) {
      Log.w(complexTag(paramString1), complexMsg(paramString2, 5), getNewThrowable(paramThrowable));
    }
  }
  
  private static String complexAppTag(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("NetworkSdk_");
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  private static String complexMsg(String paramString, int paramInt)
  {
    if (!TextUtils.isEmpty(paramString))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(getCallMethodInfo(paramInt));
      localStringBuilder.append("|");
      localStringBuilder.append(paramString);
      return localStringBuilder.toString();
    }
    return getCallMethodInfo(paramInt);
  }
  
  private static String complexTag(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("NetworkKit_");
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  public static void d(String paramString, Object paramObject)
  {
    println(2, paramString, paramObject);
  }
  
  public static void d(String paramString1, String paramString2, Object... paramVarArgs)
  {
    println(2, paramString1, paramString2, paramVarArgs);
  }
  
  public static void debug(String paramString, Object paramObject)
  {
    println(3, paramString, paramObject);
  }
  
  public static void e(String paramString, Object paramObject)
  {
    println(6, paramString, paramObject);
  }
  
  public static void e(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (isAPPLoggable(6)) {
      extLogger.addLog(complexAppTag(paramString1), complexMsg(paramString2, 5), getNewThrowable(paramThrowable));
    }
    if (println) {
      Log.e(complexTag(paramString1), complexMsg(paramString2, 5), getNewThrowable(paramThrowable));
    }
  }
  
  public static void e(String paramString1, String paramString2, Object... paramVarArgs)
  {
    println(4, paramString1, paramString2, paramVarArgs);
  }
  
  public static void error(String paramString1, String paramString2, Object... paramVarArgs)
  {
    println(6, paramString1, paramString2, paramVarArgs);
  }
  
  private static void extLogPrintln(int paramInt, String paramString1, String paramString2)
  {
    switch (paramInt)
    {
    default: 
      return;
    case 6: 
      extLogger.setRemote(paramString1, paramString2);
      return;
    case 5: 
      extLogger.setCurrentTheme(paramString1, paramString2);
      return;
    case 4: 
      extLogger.retrieveToken(paramString1, paramString2);
      return;
    case 3: 
      extLogger.setThinkingInfo(paramString1, paramString2);
      return;
    }
    extLogger.releaseImage(paramString1, paramString2);
  }
  
  public static void get(String paramString, Object paramObject)
  {
    println(4, paramString, paramObject);
  }
  
  private static String getCallMethodInfo(int paramInt)
  {
    Object localObject = Thread.currentThread().getStackTrace();
    if (localObject.length > paramInt)
    {
      localObject = localObject[paramInt];
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(Thread.currentThread().getName());
      localStringBuilder.append("|");
      localStringBuilder.append(((StackTraceElement)localObject).getFileName());
      localStringBuilder.append("|");
      localStringBuilder.append(((StackTraceElement)localObject).getClassName());
      localStringBuilder.append("|");
      localStringBuilder.append(((StackTraceElement)localObject).getMethodName());
      localStringBuilder.append("|");
      localStringBuilder.append(((StackTraceElement)localObject).getLineNumber());
      return localStringBuilder.toString();
    }
    return "";
  }
  
  private static Throwable getNewThrowable(Throwable paramThrowable)
  {
    if (isLoggable(3)) {
      return paramThrowable;
    }
    if (paramThrowable == null) {
      return null;
    }
    ThrowableWrapper localThrowableWrapper1 = new ThrowableWrapper(paramThrowable, null);
    Throwable localThrowable = paramThrowable.getCause();
    ThrowableWrapper localThrowableWrapper2;
    for (paramThrowable = localThrowableWrapper1; localThrowable != null; paramThrowable = localThrowableWrapper2)
    {
      localThrowableWrapper2 = new ThrowableWrapper(localThrowable, null);
      paramThrowable.setCause(localThrowableWrapper2);
      localThrowable = localThrowable.getCause();
    }
    return localThrowableWrapper1;
  }
  
  public static void info(String paramString1, String paramString2, Object... paramVarArgs)
  {
    println(3, paramString1, paramString2, paramVarArgs);
  }
  
  public static boolean isAPPLoggable(int paramInt)
  {
    if (extLogger != null) {
      return Log.isLoggable("NetworkSdk_", paramInt);
    }
    return false;
  }
  
  public static boolean isLoggable(int paramInt)
  {
    return Log.isLoggable("NetworkKit_", paramInt);
  }
  
  private static int logPrintln(int paramInt, String paramString1, String paramString2)
  {
    if (isAPPLoggable(paramInt)) {
      extLogPrintln(paramInt, complexAppTag(paramString1), complexMsg(paramString2, 7));
    }
    if (println) {
      return Log.println(paramInt, complexTag(paramString1), complexMsg(paramString2, 7));
    }
    return 1;
  }
  
  public static void println(int paramInt, String paramString, Object paramObject)
  {
    if (paramInt < 3) {
      return;
    }
    if (isLoggable(paramInt))
    {
      if (paramObject == null) {
        paramObject = "null";
      } else {
        paramObject = paramObject.toString();
      }
      logPrintln(paramInt, paramString, paramObject);
    }
  }
  
  public static void println(int paramInt, String paramString1, String paramString2, Object... paramVarArgs)
  {
    if (paramInt < 3) {
      return;
    }
    if (paramString2 == null)
    {
      Log.w("NetworkKit_Logger", "format is null, not log");
      return;
    }
    try
    {
      boolean bool = isLoggable(paramInt);
      if (bool)
      {
        logPrintln(paramInt, paramString1, StringUtils.format(paramString2, paramVarArgs));
        return;
      }
    }
    catch (IllegalFormatException paramString1)
    {
      paramVarArgs = new StringBuilder();
      paramVarArgs.append("log format error");
      paramVarArgs.append(paramString2);
      append("NetworkKit_Logger", paramVarArgs.toString(), paramString1);
    }
  }
  
  public static void setExtLogger(ExtLogger paramExtLogger, boolean paramBoolean)
  {
    extLogger = paramExtLogger;
    println = paramBoolean;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("logger = ");
    localStringBuilder.append(paramExtLogger);
    localStringBuilder.append(paramBoolean);
    get("NetworkKit_Logger", localStringBuilder.toString());
  }
  
  public static void w(String paramString1, String paramString2, Object... paramVarArgs)
  {
    println(5, paramString1, paramString2, paramVarArgs);
  }
  
  private static class ThrowableWrapper
    extends Throwable
  {
    private static final long serialVersionUID = 7129050843360571879L;
    private String message;
    private Throwable ownerThrowable;
    private Throwable thisCause;
    
    private ThrowableWrapper(Throwable paramThrowable)
    {
      ownerThrowable = paramThrowable;
      StackTraceElement[] arrayOfStackTraceElement2 = paramThrowable.getStackTrace();
      StackTraceElement[] arrayOfStackTraceElement1 = arrayOfStackTraceElement2;
      int i;
      if ((!(paramThrowable instanceof IOException)) && (!(paramThrowable instanceof JSONException))) {
        i = 20;
      } else {
        i = 8;
      }
      if (arrayOfStackTraceElement2.length > i) {
        arrayOfStackTraceElement1 = (StackTraceElement[])Arrays.copyOf(arrayOfStackTraceElement2, i);
      }
      setStackTrace(arrayOfStackTraceElement1);
      setMessage(StringUtils.anonymizeMessage(paramThrowable.getMessage()));
    }
    
    private void setCause(Throwable paramThrowable)
    {
      thisCause = paramThrowable;
    }
    
    public Throwable getCause()
    {
      Throwable localThrowable = thisCause;
      if (localThrowable == this) {
        return null;
      }
      return localThrowable;
    }
    
    public String getMessage()
    {
      return message;
    }
    
    public void setMessage(String paramString)
    {
      message = paramString;
    }
    
    public String toString()
    {
      Object localObject1 = ownerThrowable;
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = localObject1.getClass().getName();
      localObject1 = localObject2;
      if (message != null)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append(": ");
        localObject1 = ((StringBuilder)localObject1).toString();
        if (message.startsWith((String)localObject1)) {
          return message;
        }
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append((String)localObject1);
        ((StringBuilder)localObject2).append(message);
        localObject1 = ((StringBuilder)localObject2).toString();
      }
      return localObject1;
    }
  }
}
