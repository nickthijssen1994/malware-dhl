package com.huawei.hms.framework.common;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.DhcpInfo;
import android.net.LinkProperties;
import android.net.Network;
import android.net.NetworkInfo;
import android.net.NetworkInfo.DetailedState;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build.VERSION;
import android.os.PowerManager;
import android.telephony.SignalStrength;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import com.huawei.android.os.BuildEx.VERSION;
import com.huawei.android.telephony.ServiceStateEx;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class NetworkUtil
{
  private static final int TYPE_WIFI_P2P = 13;
  private static final String gateway = "NetworkUtil";
  
  public NetworkUtil() {}
  
  public static String getDnsServerIps(Context paramContext)
  {
    return Arrays.toString(getDnsServerIpsFromConnectionManager(paramContext));
  }
  
  private static String[] getDnsServerIpsFromConnectionManager(Context paramContext)
  {
    LinkedList localLinkedList = new LinkedList();
    Object localObject1 = localLinkedList;
    if (Build.VERSION.SDK_INT >= 21)
    {
      localObject1 = localLinkedList;
      if (paramContext != null)
      {
        paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
        localObject1 = localLinkedList;
        if (paramContext != null)
        {
          Object localObject2;
          try
          {
            localObject2 = paramContext.getActiveNetworkInfo();
            localObject1 = localLinkedList;
            if (localObject2 == null) {
              break label118;
            }
            localObject1 = getDnsServerIpsFromLinkProperties(paramContext, (NetworkInfo)localObject2);
          }
          catch (RuntimeException paramContext)
          {
            localObject1 = gateway;
            localObject2 = new StringBuilder();
          }
          catch (SecurityException paramContext)
          {
            localObject1 = gateway;
            localObject2 = new StringBuilder();
          }
          ((StringBuilder)localObject2).append("getActiveNetworkInfo failed, exception:");
          ((StringBuilder)localObject2).append(paramContext.getClass().getSimpleName());
          Logger.get((String)localObject1, ((StringBuilder)localObject2).toString());
          localObject1 = localLinkedList;
        }
      }
    }
    label118:
    if (((LinkedList)localObject1).isEmpty()) {
      return new String[0];
    }
    return (String[])((LinkedList)localObject1).toArray(new String[((LinkedList)localObject1).size()]);
  }
  
  private static LinkedList getDnsServerIpsFromLinkProperties(ConnectivityManager paramConnectivityManager, NetworkInfo paramNetworkInfo)
  {
    LinkedList localLinkedList = new LinkedList();
    Network[] arrayOfNetwork = paramConnectivityManager.getAllNetworks();
    if (arrayOfNetwork != null)
    {
      if (arrayOfNetwork.length == 0) {
        return localLinkedList;
      }
      int j = arrayOfNetwork.length;
      int i = 0;
      while (i < j)
      {
        Network localNetwork = arrayOfNetwork[i];
        if (localNetwork != null)
        {
          Object localObject = null;
          try
          {
            NetworkInfo localNetworkInfo = paramConnectivityManager.getNetworkInfo(localNetwork);
            localObject = localNetworkInfo;
          }
          catch (NullPointerException localNullPointerException)
          {
            String str = gateway;
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("connectivityManager getNetworkInfo failed, exception:");
            localStringBuilder.append(localNullPointerException.getClass().getSimpleName());
            Logger.get(str, localStringBuilder.toString());
          }
          if ((localObject != null) && (((NetworkInfo)localObject).getType() == paramNetworkInfo.getType()))
          {
            localObject = paramConnectivityManager.getLinkProperties(localNetwork);
            if (localObject != null)
            {
              localObject = ((LinkProperties)localObject).getDnsServers().iterator();
              while (((Iterator)localObject).hasNext()) {
                localLinkedList.add(((InetAddress)((Iterator)localObject).next()).getHostAddress());
              }
            }
          }
        }
        i += 1;
      }
    }
    return localLinkedList;
  }
  
  public static String getHost(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    try
    {
      paramString = new URI(paramString);
      if (paramString.getPort() == -1) {
        return paramString.getHost();
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString.getHost());
      localStringBuilder.append(":");
      localStringBuilder.append(paramString.getPort());
      return localStringBuilder.toString();
    }
    catch (URISyntaxException paramString)
    {
      Logger.append(gateway, paramString.getClass().getSimpleName());
    }
    return "";
  }
  
  private static int getHwNetworkType(Context paramContext)
  {
    boolean bool = EmuiUtil.isEMUI();
    int n = 0;
    int i1 = 0;
    int i = 0;
    if (!bool) {
      return 0;
    }
    int j;
    int k;
    if (paramContext != null)
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext != null)
      {
        j = n;
        k = i1;
        try
        {
          m = BuildEx.VERSION.EMUI_SDK_INT;
          if (m < 21) {
            break label209;
          }
          m = i;
          j = n;
          k = i1;
        }
        catch (NoSuchMethodError paramContext)
        {
          for (;;)
          {
            int m;
            Object localObject;
            i = j;
          }
        }
        catch (NoClassDefFoundError paramContext)
        {
          for (;;)
          {
            label140:
            i = k;
          }
        }
        try
        {
          paramContext = paramContext.getServiceState();
          if (paramContext == null) {
            break label209;
          }
          m = i;
          j = n;
          k = i1;
          n = ServiceStateEx.getConfigRadioTechnology(paramContext);
          i = n;
          paramContext = gateway;
          m = i;
          j = i;
          k = i;
          localObject = new StringBuilder();
        }
        catch (SecurityException paramContext)
        {
          i = m;
          break label162;
        }
        try
        {
          ((StringBuilder)localObject).append("getHwNetworkType return networkType is:");
          ((StringBuilder)localObject).append(n);
          Logger.get(paramContext, ((StringBuilder)localObject).toString());
          return n;
        }
        catch (SecurityException paramContext)
        {
          break label162;
        }
        catch (NoSuchMethodError paramContext)
        {
          break label151;
        }
        catch (NoClassDefFoundError paramContext)
        {
          break label140;
        }
        paramContext = gateway;
        localObject = "NoClassDefFoundError occur in method getHwNetworkType.";
        break label170;
        label151:
        paramContext = gateway;
        localObject = "NoSuchMethodError occur in method getHwNetworkType.";
        break label170;
        label162:
        paramContext = gateway;
        localObject = "requires permission maybe missing.";
        label170:
        Logger.append(paramContext, localObject);
        return i;
      }
    }
    label209:
    return 0;
  }
  
  public static int getMobileRsrp(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = paramContext.getSystemService("phone");
      boolean bool = paramContext instanceof TelephonyManager;
      Object localObject = null;
      if (bool) {
        paramContext = (TelephonyManager)paramContext;
      } else {
        paramContext = null;
      }
      if (paramContext != null)
      {
        if (Build.VERSION.SDK_INT >= 28) {
          localObject = paramContext.createForSubscriptionId(SubscriptionManager.getDefaultDataSubscriptionId()).getSignalStrength();
        }
        if (localObject != null)
        {
          try
          {
            paramContext = SignalStrength.class.getDeclaredMethod("getDbm", new Class[0]);
            paramContext = paramContext.invoke(localObject, new Object[0]);
            paramContext = (Integer)paramContext;
            int i = paramContext.intValue();
            return i;
          }
          catch (NoSuchMethodException paramContext)
          {
            for (;;) {}
          }
          catch (IllegalAccessException paramContext)
          {
            for (;;) {}
          }
          catch (InvocationTargetException paramContext)
          {
            label123:
            for (;;) {}
          }
          paramContext = gateway;
          localObject = "getDbm: InvocationTargetException";
          break label123;
          paramContext = gateway;
          localObject = "getDbm: cannot access";
          break label123;
          paramContext = gateway;
          localObject = "getDbm: function not found";
          Logger.get(paramContext, localObject);
          return 0;
        }
      }
    }
    return 0;
  }
  
  public static int getMobileRsrpLevel(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = paramContext.getSystemService("phone");
      boolean bool = paramContext instanceof TelephonyManager;
      Object localObject = null;
      if (bool) {
        paramContext = (TelephonyManager)paramContext;
      } else {
        paramContext = null;
      }
      if (paramContext != null)
      {
        if (Build.VERSION.SDK_INT >= 28) {
          localObject = paramContext.getSignalStrength();
        }
        if (localObject != null)
        {
          try
          {
            paramContext = SignalStrength.class.getDeclaredMethod("getLteLevel", new Class[0]);
            paramContext = paramContext.invoke(localObject, new Object[0]);
            paramContext = (Integer)paramContext;
            int i = paramContext.intValue();
            return i;
          }
          catch (NoSuchMethodException paramContext)
          {
            for (;;) {}
          }
          catch (IllegalAccessException paramContext)
          {
            for (;;) {}
          }
          catch (InvocationTargetException paramContext)
          {
            label118:
            for (;;) {}
          }
          paramContext = gateway;
          localObject = "getDbm: InvocationTargetException";
          break label118;
          paramContext = gateway;
          localObject = "getDbm: cannot access";
          break label118;
          paramContext = gateway;
          localObject = "getDbm: function not found";
          Logger.get(paramContext, localObject);
          return 0;
        }
      }
    }
    return 0;
  }
  
  public static NetworkInfo getNetworkInfo(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
      if (paramContext != null) {
        try
        {
          paramContext = paramContext.getActiveNetworkInfo();
          return paramContext;
        }
        catch (RuntimeException paramContext)
        {
          String str = gateway;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("getActiveNetworkInfo failed, exception:");
          localStringBuilder.append(paramContext.getClass().getSimpleName());
          Logger.get(str, localStringBuilder.toString());
          return null;
        }
        catch (SecurityException paramContext) {}
      }
    }
    return null;
  }
  
  public static int getNetworkType(Context paramContext)
  {
    if (paramContext != null) {
      return getNetworkType(getNetworkInfo(paramContext), paramContext);
    }
    return 0;
  }
  
  public static int getNetworkType(NetworkInfo paramNetworkInfo)
  {
    if ((paramNetworkInfo != null) && (paramNetworkInfo.isConnected()))
    {
      int i = paramNetworkInfo.getType();
      if ((1 != i) && (13 != i))
      {
        if (i == 0)
        {
          int j = paramNetworkInfo.getSubtype();
          switch (j)
          {
          default: 
            i = 0;
            break;
          case 13: 
            i = 4;
            break;
          case 3: 
          case 5: 
          case 6: 
          case 8: 
          case 9: 
          case 10: 
          case 12: 
          case 14: 
          case 15: 
            i = 3;
            break;
          case 1: 
          case 2: 
          case 4: 
          case 7: 
          case 11: 
            i = 2;
          }
          if ((i == 0) && (Build.VERSION.SDK_INT >= 25))
          {
            if (j != 16) {
              if (j == 17) {
                break label229;
              }
            } else {
              return 2;
            }
          }
          else {
            return i;
          }
        }
        return 0;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return -1;
    }
    label229:
    return 3;
  }
  
  public static int getNetworkType(NetworkInfo paramNetworkInfo, Context paramContext)
  {
    if ((paramNetworkInfo != null) && (paramNetworkInfo.isConnected()))
    {
      int i = paramNetworkInfo.getType();
      if ((1 != i) && (13 != i))
      {
        if (i == 0)
        {
          i = getHwNetworkType(paramContext);
          int j = i;
          paramContext = gateway;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("getHwNetworkType return is: ");
          localStringBuilder.append(i);
          Logger.d(paramContext, localStringBuilder.toString());
          if (i == 0) {
            j = paramNetworkInfo.getSubtype();
          }
          if (j != 20) {
            switch (j)
            {
            default: 
              i = 0;
              break;
            case 13: 
              i = 4;
              break;
            case 3: 
            case 5: 
            case 6: 
            case 8: 
            case 9: 
            case 10: 
            case 12: 
            case 14: 
            case 15: 
              i = 3;
              break;
            case 1: 
            case 2: 
            case 4: 
            case 7: 
            case 11: 
              i = 2;
              break;
            }
          } else {
            i = 5;
          }
          if ((i == 0) && (Build.VERSION.SDK_INT >= 25))
          {
            if (j != 16) {
              if (j == 17) {
                break label286;
              }
            } else {
              return 2;
            }
          }
          else {
            return i;
          }
        }
        return 0;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return -1;
    }
    label286:
    return 3;
  }
  
  public static String getSSIDByNetWorkId(Context paramContext)
  {
    return "";
  }
  
  public static String getWifiGatewayIp(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = paramContext.getApplicationContext().getSystemService("wifi");
      if ((paramContext instanceof WifiManager)) {
        paramContext = (WifiManager)paramContext;
      } else {
        paramContext = null;
      }
      if (paramContext != null)
      {
        try
        {
          paramContext = paramContext.getDhcpInfo();
          if (paramContext == null) {
            break label156;
          }
          int n = gateway;
          i = (byte)(n & 0xFF);
          j = (byte)(n >> 8 & 0xFF);
          k = (byte)(n >> 16 & 0xFF);
          m = (byte)(n >> 24 & 0xFF);
        }
        catch (SecurityException paramContext)
        {
          int i;
          int j;
          int k;
          int m;
          label122:
          for (;;) {}
        }
        try
        {
          paramContext = InetAddress.getByAddress(new byte[] { i, j, k, m }).getHostAddress();
          return paramContext;
        }
        catch (Exception paramContext)
        {
          break label122;
        }
        Logger.get(gateway, "getWifiGatewayIp: can not get ip addr");
        return " ";
        Logger.get(gateway, "getWifiGatewayIp did not has permission!");
        return " ";
      }
    }
    label156:
    return " ";
  }
  
  public static int getWifiRssi(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = paramContext.getApplicationContext().getSystemService("wifi");
      if ((paramContext instanceof WifiManager)) {
        paramContext = (WifiManager)paramContext;
      } else {
        paramContext = null;
      }
      if (paramContext != null)
      {
        try
        {
          paramContext = paramContext.getConnectionInfo();
          if ((paramContext == null) || (paramContext.getBSSID() == null)) {
            break label72;
          }
          return paramContext.getRssi();
        }
        catch (SecurityException paramContext)
        {
          for (;;) {}
        }
        Logger.get(gateway, "getWifiRssiLevel did not has permission!");
        return 0;
      }
    }
    label72:
    return 0;
  }
  
  public static int getWifiRssiLevel(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = paramContext.getApplicationContext().getSystemService("wifi");
      if ((paramContext instanceof WifiManager)) {
        paramContext = (WifiManager)paramContext;
      } else {
        paramContext = null;
      }
      if (paramContext != null)
      {
        try
        {
          paramContext = paramContext.getConnectionInfo();
          if ((paramContext == null) || (paramContext.getBSSID() == null)) {
            break label76;
          }
          return WifiManager.calculateSignalLevel(paramContext.getRssi(), 5);
        }
        catch (SecurityException paramContext)
        {
          for (;;) {}
        }
        Logger.get(gateway, "getWifiRssiLevel did not has permission!");
        return 0;
      }
    }
    label76:
    return 0;
  }
  
  public static boolean isForeground(Context paramContext)
  {
    if (paramContext != null)
    {
      Object localObject2 = (ActivityManager)paramContext.getSystemService("activity");
      if (localObject2 != null)
      {
        Object localObject1 = null;
        try
        {
          localObject2 = ((ActivityManager)localObject2).getRunningAppProcesses();
          localObject1 = localObject2;
        }
        catch (Exception localException)
        {
          Logger.append(gateway, "activityManager getRunningAppProcesses occur exception: ", localException);
        }
        if (localObject1 != null)
        {
          localObject1 = ((List)localObject1).iterator();
          while (((Iterator)localObject1).hasNext())
          {
            ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)((Iterator)localObject1).next();
            String str = processName;
            if ((str != null) && (str.equals(paramContext.getPackageName())) && (importance == 100))
            {
              Logger.d(gateway, "isForeground true");
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  
  public static boolean isInteractive(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = paramContext.getSystemService("power");
      if ((paramContext instanceof PowerManager)) {
        paramContext = (PowerManager)paramContext;
      } else {
        paramContext = null;
      }
      if ((paramContext != null) && (Build.VERSION.SDK_INT >= 20)) {
        return paramContext.isInteractive();
      }
    }
    return false;
  }
  
  public static boolean isNetworkAvailable(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
      if (paramContext == null) {}
    }
    try
    {
      paramContext = paramContext.getActiveNetworkInfo();
      if (paramContext == null) {
        break label45;
      }
      boolean bool = paramContext.isConnected();
      return bool;
    }
    catch (SecurityException paramContext)
    {
      for (;;) {}
    }
    Logger.append(gateway, "networkIsConnected catch SecurityException");
    return true;
    label45:
    return false;
  }
  
  public static NetworkInfo.DetailedState networkStatus(Context paramContext)
  {
    NetworkInfo.DetailedState localDetailedState = NetworkInfo.DetailedState.IDLE;
    if (paramContext != null)
    {
      paramContext = paramContext.getSystemService("connectivity");
      if ((paramContext instanceof ConnectivityManager)) {
        paramContext = (ConnectivityManager)paramContext;
      } else {
        paramContext = null;
      }
      if (paramContext == null) {}
    }
    try
    {
      paramContext = paramContext.getActiveNetworkInfo();
      if (paramContext != null)
      {
        paramContext = paramContext.getDetailedState();
        return paramContext;
      }
      paramContext = gateway;
    }
    catch (SecurityException paramContext)
    {
      String str;
      return localDetailedState;
    }
    try
    {
      Logger.get(paramContext, "networkIsConnected netInfo is null!");
      return localDetailedState;
    }
    catch (SecurityException paramContext) {}
    paramContext = gateway;
    for (str = "networkStatus ConnectivityManager is null!";; str = "networkStatus Context is null!")
    {
      Logger.get(paramContext, str);
      return localDetailedState;
      paramContext = gateway;
    }
    return localDetailedState;
  }
  
  public static final class NetType
  {
    public static final int TYPE_2G = 2;
    public static final int TYPE_3G = 3;
    public static final int TYPE_4G = 4;
    public static final int TYPE_5G = 5;
    public static final int TYPE_NO_NETWORK = -1;
    public static final int TYPE_UNKNOWN = 0;
    public static final int TYPE_WIFI = 1;
    
    public NetType() {}
  }
}
