package com.huawei.hms.framework.common;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.AbstractExecutorService;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public class ExecutorsEnhance
{
  public ExecutorsEnhance() {}
  
  public static ExecutorService newSingleThreadExecutor(ThreadFactory paramThreadFactory)
  {
    return new FinalizableDelegatedExecutorService(new ThreadPoolExcutorEnhance(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue(), paramThreadFactory));
  }
  
  private static class DelegatedExecutorService
    extends AbstractExecutorService
  {
    private final ExecutorService delegate;
    
    DelegatedExecutorService(ExecutorService paramExecutorService)
    {
      delegate = paramExecutorService;
    }
    
    public boolean awaitTermination(long paramLong, TimeUnit paramTimeUnit)
    {
      return delegate.awaitTermination(paramLong, paramTimeUnit);
    }
    
    public void execute(Runnable paramRunnable)
    {
      delegate.execute(paramRunnable);
    }
    
    public List invokeAll(Collection paramCollection)
    {
      return delegate.invokeAll(paramCollection);
    }
    
    public List invokeAll(Collection paramCollection, long paramLong, TimeUnit paramTimeUnit)
    {
      return delegate.invokeAll(paramCollection, paramLong, paramTimeUnit);
    }
    
    public Object invokeAny(Collection paramCollection)
    {
      return delegate.invokeAny(paramCollection);
    }
    
    public Object invokeAny(Collection paramCollection, long paramLong, TimeUnit paramTimeUnit)
    {
      return delegate.invokeAny(paramCollection, paramLong, paramTimeUnit);
    }
    
    public boolean isShutdown()
    {
      return delegate.isShutdown();
    }
    
    public boolean isTerminated()
    {
      return delegate.isTerminated();
    }
    
    public void shutdown()
    {
      delegate.shutdown();
    }
    
    public List shutdownNow()
    {
      return delegate.shutdownNow();
    }
    
    public Future submit(Runnable paramRunnable)
    {
      return delegate.submit(paramRunnable);
    }
    
    public Future submit(Runnable paramRunnable, Object paramObject)
    {
      return delegate.submit(paramRunnable, paramObject);
    }
    
    public Future submit(Callable paramCallable)
    {
      return delegate.submit(paramCallable);
    }
  }
  
  private static class FinalizableDelegatedExecutorService
    extends ExecutorsEnhance.DelegatedExecutorService
  {
    FinalizableDelegatedExecutorService(ExecutorService paramExecutorService)
    {
      super();
    }
    
    protected void finalize()
    {
      super.shutdown();
    }
  }
}
