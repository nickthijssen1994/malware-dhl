package com.huawei.hms.framework.common;

import java.util.Collection;
import java.util.LinkedList;

public class LimitQueue<E>
  extends LinkedList<E>
{
  private static final long serialVersionUID = -4636313759149307798L;
  private boolean deduplication = false;
  private int limit;
  private final Object lock = new Object();
  
  public LimitQueue(int paramInt)
  {
    limit = paramInt;
  }
  
  public LimitQueue(int paramInt, boolean paramBoolean)
  {
    limit = paramInt;
    deduplication = paramBoolean;
  }
  
  public LimitQueue(Collection paramCollection, boolean paramBoolean)
  {
    this(paramCollection.size(), paramBoolean);
    addAll(paramCollection);
  }
  
  public boolean add(Object paramObject)
  {
    Object localObject = lock;
    try
    {
      if (deduplication) {
        super.remove(paramObject);
      }
      if (super.size() >= limit) {
        super.poll();
      }
      boolean bool = super.add(paramObject);
      return bool;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
  
  public boolean addAll(Collection paramCollection)
  {
    if (paramCollection.size() > limit) {
      return false;
    }
    if (deduplication) {
      super.removeAll(paramCollection);
    }
    int i = paramCollection.size() + super.size() - limit;
    while (i > 0)
    {
      super.poll();
      i -= 1;
    }
    return super.addAll(paramCollection);
  }
  
  public void clear()
  {
    Object localObject = lock;
    try
    {
      super.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getLimit()
  {
    return limit;
  }
  
  public boolean offer(Object paramObject)
  {
    Object localObject = lock;
    try
    {
      if (deduplication) {
        super.remove(paramObject);
      }
      if (super.size() >= limit) {
        super.poll();
      }
      boolean bool = super.offer(paramObject);
      return bool;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
  
  public Object peekLast()
  {
    Object localObject1 = lock;
    try
    {
      Object localObject2 = super.peekLast();
      return localObject2;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public Object poll()
  {
    Object localObject1 = lock;
    try
    {
      Object localObject2 = super.poll();
      return localObject2;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public Object remove()
  {
    Object localObject1 = lock;
    try
    {
      Object localObject2 = super.remove();
      return localObject2;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public Object remove(int paramInt)
  {
    Object localObject1 = lock;
    try
    {
      Object localObject2 = super.remove(paramInt);
      return localObject2;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean remove(Object paramObject)
  {
    Object localObject = lock;
    try
    {
      boolean bool = super.remove(paramObject);
      return bool;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
}
