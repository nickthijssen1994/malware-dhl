package com.huawei.hms.hatool;

import android.os.Build.VERSION;
import android.text.TextUtils;
import com.huawei.secure.android.common.encrypt.keystore.inject.AesGcmKS;
import com.huawei.secure.android.common.encrypt.utils.EncryptUtil;

public class ClassWriter
{
  public static ClassWriter items;
  public String b;
  public String c;
  
  public ClassWriter() {}
  
  public static ClassWriter get()
  {
    if (items == null) {
      put();
    }
    return items;
  }
  
  public static void put()
  {
    try
    {
      if (items == null) {
        items = new ClassWriter();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public String a()
  {
    if (TextUtils.isEmpty(c)) {
      c = c();
    }
    return c;
  }
  
  public final boolean a(String paramString)
  {
    Log.i("hmsSdk", "refresh sp aes key");
    if (TextUtils.isEmpty(paramString))
    {
      Log.i("hmsSdk", "refreshLocalKey(): encrypted key is empty");
      return false;
    }
    Context.put(b.f(), "Privacy_MY", "PrivacyData", paramString);
    Context.put(b.f(), "Privacy_MY", "flashKeyTime", System.currentTimeMillis());
    return true;
  }
  
  public void b()
  {
    String str = EncryptUtil.generateSecureRandomStr(16);
    if (a(get(str))) {
      c = str;
    }
  }
  
  public final String c()
  {
    String str = Context.getString(b.f(), "Privacy_MY", "PrivacyData", "");
    if (TextUtils.isEmpty(str))
    {
      str = EncryptUtil.generateSecureRandomStr(16);
      a(get(str));
      return str;
    }
    return c(str);
  }
  
  public final String c(String paramString)
  {
    String str2 = "";
    if (checkSystemIsSupported()) {
      str2 = AesGcmKS.decrypt("analytics_keystore", paramString);
    }
    String str1 = str2;
    if (TextUtils.isEmpty(str2))
    {
      Log.i("hmsSdk", "deCrypt work key first");
      paramString = JSONObject.toString(paramString, d());
      str2 = paramString;
      if (TextUtils.isEmpty(paramString))
      {
        str1 = EncryptUtil.generateSecureRandomStr(16);
        paramString = str1;
        a(get(str1));
        if (!checkSystemIsSupported()) {}
      }
      else
      {
        for (;;)
        {
          o.a();
          return paramString;
          str1 = paramString;
          if (!checkSystemIsSupported()) {
            break;
          }
          a(get(paramString));
          paramString = str2;
        }
      }
    }
    return str1;
  }
  
  public final boolean checkSystemIsSupported()
  {
    return Build.VERSION.SDK_INT >= 23;
  }
  
  public final String d()
  {
    if (TextUtils.isEmpty(b)) {
      b = new o().c();
    }
    return b;
  }
  
  public final String get(String paramString)
  {
    if (checkSystemIsSupported()) {
      return AesGcmKS.encrypt("analytics_keystore", paramString);
    }
    return JSONObject.get(paramString, d());
  }
}
