package com.huawei.hms.hatool;

import android.content.Context;
import android.text.TextUtils;
import java.util.LinkedHashMap;

public class g
{
  public h b;
  public String g;
  
  public g(String paramString)
  {
    g = paramString;
    b = new h(paramString);
    Item.b().a(g, b);
  }
  
  public void a(int paramInt)
  {
    Log.i("hmsSdk", "HiAnalyticsInstance.onReport() is execute.TAG: %s,TYPE: %d", new Object[] { g, Integer.valueOf(paramInt) });
    t.b().a(g, paramInt);
  }
  
  public void a(int paramInt, String paramString, LinkedHashMap paramLinkedHashMap)
  {
    Log.i("hmsSdk", "HiAnalyticsInstance.onEvent(int type, String eventId, Map<String, String> mapValue) is execute.TAG: %s,TYPE: %d", new Object[] { g, Integer.valueOf(paramInt) });
    if ((!PositionMetric.a(paramString)) && (c(paramInt)))
    {
      LinkedHashMap localLinkedHashMap = paramLinkedHashMap;
      if (!PositionMetric.set(paramLinkedHashMap))
      {
        paramLinkedHashMap = new StringBuilder();
        paramLinkedHashMap.append("onEvent() parameter mapValue will be cleared.TAG: ");
        paramLinkedHashMap.append(g);
        paramLinkedHashMap.append(", TYPE: ");
        paramLinkedHashMap.append(paramInt);
        Log.remove("hmsSdk", paramLinkedHashMap.toString());
        localLinkedHashMap = null;
      }
      t.b().a(g, paramInt, paramString, localLinkedHashMap);
      return;
    }
    paramString = new StringBuilder();
    paramString.append("onEvent() parameters check fail. Nothing will be recorded.TAG: ");
    paramString.append(g);
    paramString.append(", TYPE: ");
    paramString.append(paramInt);
    Log.remove("hmsSdk", paramString.toString());
  }
  
  public void a(Context paramContext, String paramString1, String paramString2)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("HiAnalyticsInstance.onEvent(eventId, mapValue) is execute.TAG : ");
    ((StringBuilder)localObject).append(g);
    Log.i("hmsSdk", ((StringBuilder)localObject).toString());
    if (paramContext == null)
    {
      Log.remove("hmsSdk", "context is null in onevent ");
      return;
    }
    if ((!PositionMetric.a(paramString1)) && (c(0)))
    {
      localObject = paramString2;
      if (!PositionMetric.add("value", paramString2, 65536))
      {
        paramString2 = new StringBuilder();
        paramString2.append("onEvent() parameter VALUE is overlong, content will be cleared.TAG: ");
        paramString2.append(g);
        Log.remove("hmsSdk", paramString2.toString());
        localObject = "";
      }
      t.b().a(g, paramContext, paramString1, (String)localObject);
      return;
    }
    paramContext = new StringBuilder();
    paramContext.append("onEvent() parameters check fail. Nothing will be recorded.TAG: ");
    paramContext.append(g);
    Log.remove("hmsSdk", paramContext.toString());
  }
  
  public void a(i paramI)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("HiAnalyticsInstanceImpl.setOperConf() is executed.TAG: ");
    localStringBuilder.append(g);
    Log.i("hmsSdk", localStringBuilder.toString());
    if (paramI == null)
    {
      b.a(null);
      Log.remove("hmsSdk", "HiAnalyticsInstanceImpl.setOperConf(): config for oper is null!");
      return;
    }
    b.a(paramI);
  }
  
  public final i b(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return null;
    case 3: 
      return b.a();
    case 2: 
      return b.b();
    case 1: 
      return b.k();
    }
    return b.c();
  }
  
  public void c(i paramI)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("HiAnalyticsInstanceImpl.setMaintConf() is executed.TAG : ");
    localStringBuilder.append(g);
    Log.i("hmsSdk", localStringBuilder.toString());
    if (paramI == null)
    {
      Log.remove("hmsSdk", "HiAnalyticsInstanceImpl.setMaintConf(): config for maint is null!");
      b.b(null);
      return;
    }
    b.b(paramI);
  }
  
  public final boolean c(int paramInt)
  {
    if (paramInt == 2)
    {
      if (!"_default_config_tag".equals(g))
      {
        Log.remove("hmsSdk", "verifyURL(): type: preins. Only default config can report Pre-install data.");
        return false;
      }
      return true;
    }
    Object localObject = b(paramInt);
    if ((localObject != null) && (!TextUtils.isEmpty(((i)localObject).c()))) {
      return true;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("verifyURL(): URL check failed. type: ");
    ((StringBuilder)localObject).append(paramInt);
    Log.remove("hmsSdk", ((StringBuilder)localObject).toString());
    return false;
  }
}
