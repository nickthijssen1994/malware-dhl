package com.huawei.hms.hatool;

import android.text.TextUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;

public class ClassReader
{
  public static Map a(android.content.Context paramContext, String paramString)
  {
    if (paramContext == null) {
      return null;
    }
    paramContext = Context.getValue(paramContext, paramString);
    a(paramContext);
    return b(paramContext);
  }
  
  public static Map a(android.content.Context paramContext, String paramString1, String paramString2)
  {
    paramContext = Context.getString(paramContext, paramString1, paramString2, "");
    paramString1 = new HashMap();
    a(paramString2, paramContext, paramString1);
    return paramString1;
  }
  
  public static void a(String paramString1, String paramString2, Map paramMap)
  {
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      try
      {
        boolean bool = TextUtils.isEmpty(paramString2);
        if (bool) {
          return;
        }
        paramString2 = new JSONArray(paramString2);
        if (paramString2.length() == 0) {
          return;
        }
        i = 0;
        if (i < paramString2.length()) {
          localFrame = new Frame();
        }
      }
      catch (JSONException paramString1)
      {
        int i;
        Frame localFrame;
        continue;
      }
      try
      {
        localFrame.c(paramString2.getJSONObject(i));
        localArrayList.add(localFrame);
      }
      catch (JSONException localJSONException)
      {
        continue;
      }
      Log.remove("hmsSdk", "JSON Exception happened when create data for report - readDataToRecord");
      i += 1;
    }
    paramMap.put(paramString1, localArrayList);
    return;
    Log.remove("hmsSdk", "When events turn to JSONArray,JSON Exception has happened");
  }
  
  public static void a(Map paramMap)
  {
    paramMap = paramMap.entrySet().iterator();
    Set localSet = k.get(b.run());
    while (paramMap.hasNext()) {
      if (!localSet.contains(((Map.Entry)paramMap.next()).getKey())) {
        paramMap.remove();
      }
    }
  }
  
  public static Map add(Map paramMap1, Map paramMap2)
  {
    if ((paramMap1.size() == 0) && (paramMap2.size() == 0)) {
      return new HashMap();
    }
    if (paramMap1.size() == 0) {
      return paramMap2;
    }
    if (paramMap2.size() == 0) {
      return paramMap1;
    }
    HashMap localHashMap = new HashMap();
    paramMap1 = paramMap1.entrySet().iterator();
    while (paramMap1.hasNext())
    {
      Object localObject = (Map.Entry)paramMap1.next();
      String str = (String)((Map.Entry)localObject).getKey();
      localObject = (List)((Map.Entry)localObject).getValue();
      List localList = (List)paramMap2.get(str);
      if ((localList != null) && (localList.size() > 0)) {
        ((List)localObject).addAll(localList);
      }
      localHashMap.put(str, localObject);
    }
    return localHashMap;
  }
  
  public static Map b(android.content.Context paramContext, String paramString1, String paramString2)
  {
    if ((!"alltype".equals(paramString2)) && (!TextUtils.isEmpty(paramString1)))
    {
      paramString2 = k.a(paramString1, paramString2);
      paramString1 = a(paramContext, "stat_v2_1", paramString2);
      paramString2 = a(paramContext, "cached_v2_1", paramString2);
      paramContext = paramString1;
      paramString1 = paramString2;
    }
    else
    {
      Log.i("hmsSdk", "read all event records");
      paramString2 = a(paramContext, "stat_v2_1");
      paramString1 = a(paramContext, "cached_v2_1");
      paramContext = paramString2;
    }
    return add(paramContext, paramString1);
  }
  
  public static Map b(Map paramMap)
  {
    HashMap localHashMap = new HashMap();
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      String str = (String)localEntry.getKey();
      if ((localEntry.getValue() instanceof String)) {
        a(str, (String)localEntry.getValue(), localHashMap);
      }
    }
    return localHashMap;
  }
}
