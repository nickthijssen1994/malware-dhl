package com.huawei.hms.hatool;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.BaseBundle;
import android.os.Build;
import android.provider.Settings.Secure;
import android.text.TextUtils;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public abstract class l
{
  public static Object a(String paramString1, String paramString2, Class[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    try
    {
      paramString1 = invoke(Class.forName(paramString1), paramString2, paramArrayOfClass, paramArrayOfObject);
      return paramString1;
    }
    catch (ClassNotFoundException paramString1)
    {
      for (;;) {}
    }
    catch (ServiceException paramString1)
    {
      label22:
      for (;;) {}
    }
    paramString1 = "invokeStaticFun(): Static function call Exception ";
    break label22;
    paramString1 = "invokeStaticFun() Not found class!";
    Log.e("hmsSdk", paramString1);
    return null;
  }
  
  public static String a()
  {
    return a("ro.build.version.emui", "");
  }
  
  public static String a(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString1)) {
      return paramString2;
    }
    String str = a("android.os.SystemProperties", paramString1, paramString2);
    if (TextUtils.isEmpty(str)) {
      return a("com.huawei.android.os.SystemPropertiesEx", paramString1, paramString2);
    }
    return str;
  }
  
  public static String a(String paramString1, String paramString2, String paramString3)
  {
    paramString1 = a(paramString1, "get", new Class[] { String.class, String.class }, new Object[] { paramString2, paramString3 });
    if (paramString1 != null) {
      return (String)paramString1;
    }
    return paramString3;
  }
  
  public static String b()
  {
    Object localObject2 = a("com.huawei.android.os.SystemPropertiesEx", "ro.huawei.build.display.id", "");
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("SystemPropertiesEx: get rom_ver: ");
    ((StringBuilder)localObject1).append((String)localObject2);
    Log.i("hmsSdk", ((StringBuilder)localObject1).toString());
    localObject1 = localObject2;
    if (TextUtils.isEmpty((CharSequence)localObject2))
    {
      localObject1 = Build.DISPLAY;
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("SystemProperties: get rom_ver: ");
      ((StringBuilder)localObject2).append((String)localObject1);
      Log.i("hmsSdk", ((StringBuilder)localObject2).toString());
    }
    return localObject1;
  }
  
  public static String getId(Context paramContext)
  {
    if (paramContext == null) {
      return "";
    }
    return Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
  }
  
  public static String getPackageName(Context paramContext)
  {
    if (paramContext == null) {
      return "";
    }
    return paramContext.getPackageName();
  }
  
  public static String getVersion(Context paramContext)
  {
    if (paramContext == null) {
      return "";
    }
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(getPackageName(paramContext), 0);
      return versionName;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    Log.e("hmsSdk", "getVersion(): The package name is not correct!");
    return "";
  }
  
  public static Object invoke(Class paramClass, String paramString, Class[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    if (paramClass != null) {
      if (paramArrayOfClass == null)
      {
        if (paramArrayOfObject != null) {
          throw new ServiceException("paramsType is null, but params is not null");
        }
      }
      else {
        if ((paramArrayOfObject != null) && (paramArrayOfClass.length != paramArrayOfObject.length)) {
          break label84;
        }
      }
    }
    try
    {
      paramClass = paramClass.getMethod(paramString, paramArrayOfClass);
    }
    catch (NoSuchMethodException paramClass)
    {
      label52:
      for (;;) {}
    }
    try
    {
      paramClass = paramClass.invoke(null, paramArrayOfObject);
      return paramClass;
    }
    catch (IllegalAccessException paramClass)
    {
      break label69;
    }
    catch (IllegalArgumentException paramClass)
    {
      break label63;
    }
    catch (InvocationTargetException paramClass)
    {
      break label52;
    }
    catch (NoSuchMethodException paramClass)
    {
      break label75;
    }
    paramClass = "invokeStaticFun(): Invocation Target Exception!";
    for (;;)
    {
      try
      {
        Log.e("hmsSdk", paramClass);
        return null;
      }
      catch (NoSuchMethodException paramClass)
      {
        label63:
        label69:
        continue;
      }
      paramClass = "invokeStaticFun(): Illegal Argument!";
      continue;
      paramClass = "invokeStaticFun(): method invoke Exception!";
    }
    label75:
    Log.e("hmsSdk", "invokeStaticFun(): cls.getMethod(),No Such Method !");
    return null;
    label84:
    paramClass = new StringBuilder();
    paramClass.append("paramsType len:");
    paramClass.append(paramArrayOfClass.length);
    paramClass.append(" should equal params.len:");
    paramClass.append(paramArrayOfObject.length);
    throw new ServiceException(paramClass.toString());
    throw new ServiceException("paramsType or params should be same");
    throw new ServiceException("class is null in invokeStaticFun");
  }
  
  public static String parse(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      if ((paramContext == null) || (metaData == null)) {
        break label78;
      }
      paramContext = metaData;
      paramContext = paramContext.get("CHANNEL");
      if (paramContext == null) {
        break label78;
      }
      paramContext = paramContext.toString();
      int i = paramContext.length();
      if (i > 256) {
        return "Unknown";
      }
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    Log.e("hmsSdk", "getChannel(): The packageName is not correct!");
    return "Unknown";
    label78:
    return "Unknown";
  }
}
