package com.huawei.hms.hatool;

import android.content.Context;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.AndroidRuntimeException;
import android.util.Pair;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class CopyOnWriteArrayList
  extends l
{
  public static Pair create(Context paramContext)
  {
    if (AtomicBoolean.execute(paramContext, "android.permission.READ_PHONE_STATE"))
    {
      Log.e("hmsSdk", "getMccAndMnc() Pair value is empty");
      return new Pair("", "");
    }
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    if (paramContext == null) {
      return new Pair("", "");
    }
    if (paramContext.getSimState() != 5) {
      return new Pair("", "");
    }
    paramContext = paramContext.getNetworkOperator();
    if ((!TextUtils.isEmpty(paramContext)) && (!TextUtils.equals(paramContext, "null")))
    {
      if (paramContext.length() > 3) {
        return new Pair(paramContext.substring(0, 3), paramContext.substring(3));
      }
      return new Pair("", "");
    }
    return new Pair("", "");
  }
  
  public static String get()
  {
    try
    {
      localObject = Class.forName("com.huawei.android.os.BuildEx");
    }
    catch (ClassNotFoundException localClassNotFoundException1)
    {
      Object localObject;
      String str;
      for (;;) {}
    }
    catch (AndroidRuntimeException localAndroidRuntimeException1)
    {
      for (;;) {}
    }
    catch (NoSuchMethodException localNoSuchMethodException1)
    {
      for (;;) {}
    }
    catch (IllegalAccessException localIllegalAccessException1)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException localIllegalArgumentException1)
    {
      for (;;) {}
    }
    catch (InvocationTargetException localInvocationTargetException1)
    {
      label41:
      label44:
      label50:
      label53:
      label59:
      label62:
      label68:
      label71:
      label77:
      label80:
      label86:
      label89:
      label92:
      for (;;) {}
    }
    try
    {
      localObject = ((Class)localObject).getMethod("getUDID", new Class[0]);
      localObject = ((Method)localObject).invoke(null, new Object[0]);
      localObject = (String)localObject;
    }
    catch (ClassNotFoundException localClassNotFoundException2)
    {
      break label86;
    }
    catch (AndroidRuntimeException localAndroidRuntimeException2)
    {
      break label77;
    }
    catch (NoSuchMethodException localNoSuchMethodException2)
    {
      break label68;
    }
    catch (IllegalAccessException localIllegalAccessException2)
    {
      break label59;
    }
    catch (IllegalArgumentException localIllegalArgumentException2)
    {
      break label50;
    }
    catch (InvocationTargetException localInvocationTargetException2)
    {
      break label41;
    }
    try
    {
      Log.i("hmsSdk", "getUDID success");
      return localObject;
    }
    catch (ClassNotFoundException localClassNotFoundException3)
    {
      break label89;
    }
    catch (AndroidRuntimeException localAndroidRuntimeException3)
    {
      break label80;
    }
    catch (NoSuchMethodException localNoSuchMethodException3)
    {
      break label71;
    }
    catch (IllegalAccessException localIllegalAccessException3)
    {
      break label62;
    }
    catch (IllegalArgumentException localIllegalArgumentException3)
    {
      break label53;
    }
    catch (InvocationTargetException localInvocationTargetException3)
    {
      break label44;
    }
    localObject = "";
    str = "getUDID method invoke failed : InvocationTargetException";
    break label92;
    localObject = "";
    str = "getUDID method invoke failed : Illegal ArgumentException";
    break label92;
    localObject = "";
    str = "getUDID method invoke failed : Illegal AccessException";
    break label92;
    localObject = "";
    str = "getUDID method invoke failed : NoSuchMethodException";
    break label92;
    localObject = "";
    str = "getUDID getudid failed, RuntimeException is AndroidRuntimeException";
    break label92;
    localObject = "";
    str = "getUDID method invoke failed";
    Log.e("hmsSdk", str);
    return localObject;
  }
  
  public static String get(Context paramContext)
  {
    String str = Build.SERIAL;
    if ((!TextUtils.isEmpty(str)) && (!str.equalsIgnoreCase("unknown"))) {
      return str;
    }
    return init(paramContext);
  }
  
  public static String getDeviceId(Context paramContext)
  {
    if (AtomicBoolean.execute(paramContext, "android.permission.READ_PHONE_STATE")) {
      return "";
    }
    try
    {
      paramContext = paramContext.getSystemService("phone");
      paramContext = (TelephonyManager)paramContext;
      if (paramContext == null) {
        break label49;
      }
      paramContext = paramContext.getDeviceId();
      return paramContext;
    }
    catch (SecurityException paramContext)
    {
      for (;;) {}
    }
    Log.d("hmsSdk", "getDeviceID Incorrect permissions!");
    return "";
    label49:
    return "";
  }
  
  public static String init(Context paramContext)
  {
    Log.w("hmsSdk", "getSerial : is executed.");
    if (paramContext == null) {
      return "";
    }
    if (AtomicBoolean.execute(paramContext, "android.permission.READ_PHONE_STATE")) {
      return "";
    }
    if (Build.VERSION.SDK_INT >= 26)
    {
      try
      {
        paramContext = Build.getSerial();
        return paramContext;
      }
      catch (SecurityException paramContext)
      {
        for (;;) {}
      }
      Log.e("hmsSdk", "getSerial() Incorrect permissions!");
      return "";
    }
    return "";
  }
}
