package com.huawei.hms.common.util;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.BaseBundle;
import android.text.TextUtils;
import com.huawei.agconnect.config.AGConnectServicesConfig;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.utils.HMSPackageManager;
import com.huawei.hms.utils.IOUtils;
import java.io.IOException;
import java.io.InputStream;

public class AGCUtils
{
  public AGCUtils() {}
  
  public static String evaluate(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (localPackageManager == null)
    {
      HMSLog.toString("AGCUtils", "In getMetaDataCpId, Failed to get 'PackageManager' instance.");
      return "";
    }
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext.getPackageName(), 128);
      paramContext = applicationInfo;
      if ((paramContext != null) && (metaData != null))
      {
        paramContext = metaData;
        paramContext = paramContext.get("com.huawei.hms.client.cpid");
        if (paramContext != null)
        {
          paramContext = String.valueOf(paramContext);
          boolean bool = paramContext.startsWith("cpid=");
          if (!bool) {
            return paramContext;
          }
          paramContext = paramContext.substring(5);
          return paramContext;
        }
      }
      HMSLog.append("AGCUtils", "In getMetaDataCpId, Failed to read meta data for the CpId.");
      return "";
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    HMSLog.toString("AGCUtils", "In getMetaDataCpId, Failed to read meta data for the CpId.");
    return "";
    return paramContext;
  }
  
  public static String get(Context paramContext, String paramString)
  {
    AGConnectServicesConfig localAGConnectServicesConfig = AGConnectServicesConfig.fromContext(paramContext);
    String str = "";
    Object localObject2 = null;
    Object localObject3 = null;
    Object localObject1 = null;
    try
    {
      Object localObject4 = paramContext.getResources().getAssets().open("agconnect-services.json");
      paramContext = (Context)localObject4;
      localObject1 = paramContext;
      localObject2 = paramContext;
      localObject3 = paramContext;
      localAGConnectServicesConfig.overlayWith((InputStream)localObject4);
      localObject1 = paramContext;
      localObject2 = paramContext;
      localObject3 = paramContext;
      localObject4 = localAGConnectServicesConfig.getString(paramString);
      localObject1 = localObject4;
    }
    catch (Throwable paramContext)
    {
      break label264;
    }
    catch (NullPointerException paramContext)
    {
      localObject1 = localObject2;
      localObject3 = new StringBuilder();
      localObject1 = localObject2;
      ((StringBuilder)localObject3).append("Get ");
      localObject1 = localObject2;
      ((StringBuilder)localObject3).append(paramString);
      localObject1 = localObject2;
      ((StringBuilder)localObject3).append(" with AGConnectServicesConfig failed: ");
      localObject1 = localObject2;
      ((StringBuilder)localObject3).append(paramContext);
      localObject1 = localObject2;
      HMSLog.toString("AGCUtils", ((StringBuilder)localObject3).toString());
      localObject1 = str;
      paramContext = (Context)localObject2;
    }
    catch (IOException paramContext)
    {
      localObject1 = localObject3;
      localObject2 = new StringBuilder();
      localObject1 = localObject3;
      ((StringBuilder)localObject2).append("Get ");
      localObject1 = localObject3;
      ((StringBuilder)localObject2).append(paramString);
      localObject1 = localObject3;
      ((StringBuilder)localObject2).append(" failed: ");
      localObject1 = localObject3;
      ((StringBuilder)localObject2).append(paramContext);
      localObject1 = localObject3;
      HMSLog.toString("AGCUtils", ((StringBuilder)localObject2).toString());
      paramContext = (Context)localObject3;
      localObject1 = str;
    }
    IOUtils.closeQuietly(paramContext);
    if (!TextUtils.isEmpty((CharSequence)localObject1)) {
      return localObject1;
    }
    paramContext = new StringBuilder();
    paramContext.append("The ");
    paramContext.append(paramString);
    paramContext.append(" is null.");
    HMSLog.toString("AGCUtils", paramContext.toString());
    return "";
    label264:
    IOUtils.closeQuietly((InputStream)localObject1);
    throw paramContext;
  }
  
  public static String getAppId(Context paramContext)
  {
    if (isDefaultSmsApp(paramContext)) {
      return get(paramContext, "client/app_id");
    }
    Object localObject = null;
    try
    {
      String str = AGConnectServicesConfig.fromContext(paramContext).getString("client/app_id");
      localObject = str;
    }
    catch (NullPointerException localNullPointerException)
    {
      for (;;) {}
    }
    HMSLog.toString("AGCUtils", "Get appId with AGConnectServicesConfig failed");
    if (!TextUtils.isEmpty((CharSequence)localObject)) {
      return localObject;
    }
    localObject = getName(paramContext);
    if (!TextUtils.isEmpty((CharSequence)localObject)) {
      return localObject;
    }
    return get(paramContext, "client/app_id");
  }
  
  public static String getCpId(Context paramContext)
  {
    if (isDefaultSmsApp(paramContext)) {
      return get(paramContext, "client/cp_id");
    }
    Object localObject = null;
    try
    {
      String str = AGConnectServicesConfig.fromContext(paramContext).getString("client/cp_id");
      localObject = str;
    }
    catch (NullPointerException localNullPointerException)
    {
      for (;;) {}
    }
    HMSLog.toString("AGCUtils", "Get cpid with AGConnectServicesConfig failed");
    if (!TextUtils.isEmpty((CharSequence)localObject)) {
      return localObject;
    }
    localObject = evaluate(paramContext);
    if (!TextUtils.isEmpty((CharSequence)localObject)) {
      return localObject;
    }
    return get(paramContext, "client/cp_id");
  }
  
  public static String getName(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (localPackageManager == null)
    {
      HMSLog.toString("AGCUtils", "In getMetaDataAppId, Failed to get 'PackageManager' instance.");
      return "";
    }
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext.getPackageName(), 128);
      paramContext = applicationInfo;
      if ((paramContext != null) && (metaData != null))
      {
        paramContext = metaData;
        paramContext = paramContext.get("com.huawei.hms.client.appid");
        if (paramContext != null)
        {
          paramContext = String.valueOf(paramContext);
          boolean bool = paramContext.startsWith("appid=");
          if (!bool) {
            return paramContext;
          }
          paramContext = paramContext.substring(6);
          return paramContext;
        }
      }
      HMSLog.toString("AGCUtils", "In getMetaDataAppId, Failed to read meta data for the AppID.");
      return "";
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    HMSLog.toString("AGCUtils", "In getMetaDataAppId, Failed to read meta data for the AppID.");
    return "";
    return paramContext;
  }
  
  public static boolean isDefaultSmsApp(Context paramContext)
  {
    return paramContext.getPackageName().equals(HMSPackageManager.getInstance(paramContext).getHMSPackageName());
  }
}
