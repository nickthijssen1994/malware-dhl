package com.huawei.hms.common.internal;

import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.os.Bundle;
import android.util.SparseArray;
import com.huawei.hms.configurations.HuaweiApiClient;

public class AutoLifecycleFragment
  extends Fragment
{
  private static final String PAGE_KEY = "HmsAutoLifecycleFrag";
  private final SparseArray<ClientInfo> mAutoClientInfoMap = new SparseArray();
  private boolean mStarted;
  
  public AutoLifecycleFragment() {}
  
  public static AutoLifecycleFragment getInstance(Activity paramActivity)
  {
    Preconditions.checkMainThread("Must be called on the main thread");
    AutoLifecycleFragment localAutoLifecycleFragment;
    try
    {
      localAutoLifecycleFragment = (AutoLifecycleFragment)paramActivity.getFragmentManager().findFragmentByTag("HmsAutoLifecycleFrag");
      paramActivity = paramActivity.getFragmentManager();
      if (localAutoLifecycleFragment == null)
      {
        localAutoLifecycleFragment = new AutoLifecycleFragment();
        paramActivity.beginTransaction().add(localAutoLifecycleFragment, "HmsAutoLifecycleFrag").commitAllowingStateLoss();
        paramActivity.executePendingTransactions();
        return localAutoLifecycleFragment;
      }
    }
    catch (ClassCastException paramActivity)
    {
      throw new IllegalStateException("Fragment with tag HmsAutoLifecycleFrag is not a AutoLifecycleFragment", paramActivity);
    }
    return localAutoLifecycleFragment;
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
  }
  
  public void onStart()
  {
    super.onStart();
    mStarted = true;
    int i = 0;
    while (i < mAutoClientInfoMap.size())
    {
      mAutoClientInfoMap.valueAt(i)).apiClient.connect(null);
      i += 1;
    }
  }
  
  public void onStop()
  {
    super.onStop();
    int i = 0;
    mStarted = false;
    while (i < mAutoClientInfoMap.size())
    {
      mAutoClientInfoMap.valueAt(i)).apiClient.disconnect();
      i += 1;
    }
  }
  
  public void startAutoMange(int paramInt, HuaweiApiClient paramHuaweiApiClient)
  {
    Preconditions.checkNotNull(paramHuaweiApiClient, "HuaweiApiClient instance cannot be null");
    boolean bool;
    if (mAutoClientInfoMap.indexOfKey(paramInt) < 0) {
      bool = true;
    } else {
      bool = false;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Already managing a HuaweiApiClient with this clientId: ");
    localStringBuilder.append(paramInt);
    Preconditions.checkState(bool, localStringBuilder.toString());
    mAutoClientInfoMap.put(paramInt, new ClientInfo(paramInt, paramHuaweiApiClient));
    if (mStarted) {
      paramHuaweiApiClient.connect(null);
    }
  }
  
  public void stopAutoManage(int paramInt)
  {
    ClientInfo localClientInfo = (ClientInfo)mAutoClientInfoMap.get(paramInt);
    mAutoClientInfoMap.remove(paramInt);
    if (localClientInfo != null) {
      localClientInfo.stopAutoManage();
    }
  }
  
  private class ClientInfo
  {
    public final HuaweiApiClient apiClient;
    public final int clientId;
    
    public ClientInfo(int paramInt, HuaweiApiClient paramHuaweiApiClient)
    {
      apiClient = paramHuaweiApiClient;
      clientId = paramInt;
    }
    
    public void stopAutoManage()
    {
      apiClient.disconnect();
    }
  }
}
