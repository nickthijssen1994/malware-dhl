package com.huawei.hms.common.internal;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.ListIterator;

public class BindResolveClients
{
  private static final Object LOCK_INST = new Object();
  private ArrayList<ResolveClientBean> mClientList = new ArrayList();
  
  private BindResolveClients() {}
  
  public static BindResolveClients getInstance()
  {
    return SingletonManager.INSTANCE;
  }
  
  boolean isClientRegistered(ResolveClientBean paramResolveClientBean)
  {
    Object localObject = LOCK_INST;
    try
    {
      boolean bool = mClientList.contains(paramResolveClientBean);
      return bool;
    }
    catch (Throwable paramResolveClientBean)
    {
      throw paramResolveClientBean;
    }
  }
  
  public void notifyClientReconnect()
  {
    Object localObject = LOCK_INST;
    try
    {
      ListIterator localListIterator = mClientList.listIterator();
      while (localListIterator.hasNext()) {
        ((ResolveClientBean)localListIterator.next()).clientReconnect();
      }
      mClientList.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  void register(ResolveClientBean paramResolveClientBean)
  {
    if (paramResolveClientBean == null) {
      return;
    }
    Object localObject = LOCK_INST;
    try
    {
      if (!mClientList.contains(paramResolveClientBean)) {
        mClientList.add(paramResolveClientBean);
      }
      return;
    }
    catch (Throwable paramResolveClientBean)
    {
      throw paramResolveClientBean;
    }
  }
  
  void unRegister(ResolveClientBean paramResolveClientBean)
  {
    if (paramResolveClientBean == null) {
      return;
    }
    Object localObject = LOCK_INST;
    try
    {
      if (mClientList.contains(paramResolveClientBean))
      {
        ListIterator localListIterator = mClientList.listIterator();
        while (localListIterator.hasNext()) {
          if (paramResolveClientBean.equals(localListIterator.next())) {
            localListIterator.remove();
          }
        }
      }
      return;
    }
    catch (Throwable paramResolveClientBean)
    {
      throw paramResolveClientBean;
    }
  }
  
  public void unRegisterAll()
  {
    Object localObject = LOCK_INST;
    try
    {
      mClientList.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private static class SingletonManager
  {
    private static final BindResolveClients INSTANCE = new BindResolveClients(null);
    
    private SingletonManager() {}
  }
}
