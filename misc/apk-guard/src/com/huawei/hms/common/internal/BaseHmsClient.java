package com.huawei.hms.common.internal;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.text.TextUtils;
import com.huawei.hms.adapter.AvailableAdapter;
import com.huawei.hms.adapter.AvailableAdapter.AvailableCallBack;
import com.huawei.hms.adapter.BinderAdapter;
import com.huawei.hms.adapter.BinderAdapter.BinderCallBack;
import com.huawei.hms.api.IPCTransport;
import com.huawei.hms.configurations.ConnectionResult;
import com.huawei.hms.configurations.HuaweiApiAvailability;
import com.huawei.hms.core.aidl.LocationBackend.Stub;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.ResolveResult;
import com.huawei.hms.support.mozilla.client.AidlApiClient;
import com.huawei.hms.support.mozilla.client.Result;
import com.huawei.hms.support.mozilla.client.Status;
import com.huawei.hms.support.mozilla.client.SubAppInfo;
import com.huawei.hms.update.manager.PackageNameManager;
import com.huawei.hms.update.manager.PackageNameManager.QueryPublishCallback;
import com.huawei.hms.utils.HMSPackageManager;
import com.huawei.hms.utils.Util;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class BaseHmsClient
  implements AidlApiClient
{
  private static final int BINDING = 5;
  private static final int CONNECTED = 3;
  private static final int DISCONNECTED = 1;
  private static final int DISCONNECTING = 4;
  private static final Object LOCK_CONNECT_TIMEOUT_HANDLER = new Object();
  private static final int MSG_CONN_TIMEOUT = 2;
  private static final String PAGE_KEY = "BaseHmsClient";
  private String mAppID;
  private BinderAdapter mBinderAdapter;
  private final ClientSettings mClientSettings;
  private final AtomicInteger mConnStatus = new AtomicInteger(1);
  private Handler mConnectTimeoutHandler = null;
  private final ConnectionCallbacks mConnectionCallbacks;
  private final OnConnectionFailedListener mConnectionFailedListener;
  private final Context mContext;
  private volatile com.huawei.hms.core.aidl.Object mService;
  protected String sessionId;
  
  public BaseHmsClient(Context paramContext, ClientSettings paramClientSettings, OnConnectionFailedListener paramOnConnectionFailedListener, ConnectionCallbacks paramConnectionCallbacks)
  {
    mContext = paramContext;
    mClientSettings = paramClientSettings;
    mAppID = mClientSettings.getAppID();
    mConnectionFailedListener = paramOnConnectionFailedListener;
    mConnectionCallbacks = paramConnectionCallbacks;
  }
  
  private void bindCoreService()
  {
    Object localObject2 = mClientSettings.getInnerHmsPkg();
    Object localObject1 = localObject2;
    HMSPackageManager.getInstance(mContext).refresh();
    if ("com.huawei.hms".equals(localObject2)) {
      localObject1 = HMSPackageManager.getInstance(mContext).getHMSPackageName();
    }
    Object localObject3 = getServiceAction();
    localObject2 = localObject3;
    if (((String)localObject1).equalsIgnoreCase(mContext.getPackageName()))
    {
      String str = Util.getServiceActionMetadata(mContext);
      localObject2 = localObject3;
      if (!TextUtils.isEmpty(str)) {
        localObject2 = str;
      }
    }
    localObject3 = new StringBuilder();
    ((StringBuilder)localObject3).append("enter bindCoreService, packageName is ");
    ((StringBuilder)localObject3).append((String)localObject1);
    ((StringBuilder)localObject3).append(", serviceAction is ");
    ((StringBuilder)localObject3).append((String)localObject2);
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject3).toString());
    mBinderAdapter = new BinderAdapter(mContext, (String)localObject2, (String)localObject1);
    mBinderAdapter.binder(new BinderAdapter.BinderCallBack()
    {
      public void onBinderFailed(int paramAnonymousInt)
      {
        onBinderFailed(paramAnonymousInt, null);
      }
      
      public void onBinderFailed(int paramAnonymousInt, Intent paramAnonymousIntent)
      {
        if (paramAnonymousIntent != null)
        {
          Activity localActivity = mClientSettings.getCpActivity();
          if (localActivity != null)
          {
            HMSLog.append("BaseHmsClient", "onBinderFailed: SDK try to resolve and reConnect!");
            localActivity.startActivity(paramAnonymousIntent);
            return;
          }
          HMSLog.append("BaseHmsClient", "onBinderFailed: return pendingIntent to kit and cp");
          paramAnonymousIntent = PendingIntent.getActivity(mContext, 11, paramAnonymousIntent, 134217728);
          BaseHmsClient.this.notifyFailed(new ConnectionResult(10, paramAnonymousIntent));
          BaseHmsClient.access$002(BaseHmsClient.this, null);
          return;
        }
        HMSLog.append("BaseHmsClient", "onBinderFailed: pendingIntent is null!");
        BaseHmsClient.this.notifyFailed(new ConnectionResult(10, null));
        BaseHmsClient.access$002(BaseHmsClient.this, null);
      }
      
      public void onNullBinding(ComponentName paramAnonymousComponentName)
      {
        BaseHmsClient.this.setConnectStatus(1);
        BaseHmsClient.this.notifyFailed(10);
      }
      
      public void onServiceConnected(ComponentName paramAnonymousComponentName, IBinder paramAnonymousIBinder)
      {
        HMSLog.append("BaseHmsClient", "Enter onServiceConnected.");
        BaseHmsClient.access$002(BaseHmsClient.this, LocationBackend.Stub.asInterface(paramAnonymousIBinder));
        if (mService == null)
        {
          HMSLog.toString("BaseHmsClient", "Failed to get service as interface, trying to unbind.");
          mBinderAdapter.unBind();
          BaseHmsClient.this.setConnectStatus(1);
          BaseHmsClient.this.notifyFailed(10);
          return;
        }
        onConnecting();
      }
      
      public void onServiceDisconnected(ComponentName paramAnonymousComponentName)
      {
        HMSLog.append("BaseHmsClient", "Enter onServiceDisconnected.");
        BaseHmsClient.this.setConnectStatus(1);
        if (mConnectionCallbacks != null) {
          mConnectionCallbacks.onConnectionSuspended(1);
        }
      }
    });
  }
  
  private void cancelConnDelayHandle()
  {
    Object localObject = LOCK_CONNECT_TIMEOUT_HANDLER;
    try
    {
      if (mConnectTimeoutHandler != null)
      {
        mConnectTimeoutHandler.removeMessages(2);
        mConnectTimeoutHandler = null;
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void checkAvailabilityAndConnect(int paramInt, boolean paramBoolean)
  {
    HMSLog.append("BaseHmsClient", "====== HMSSDK version: 50005300 ======");
    int i = mConnStatus.get();
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Enter connect, Connection Status: ");
    ((StringBuilder)localObject).append(i);
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
    if (!paramBoolean)
    {
      if ((i == 3) || (i == 5)) {
        return;
      }
      if (i == 4) {
        return;
      }
    }
    setConnectStatus(5);
    i = paramInt;
    if (getMinApkVersion() > paramInt) {
      i = getMinApkVersion();
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("connect minVersion:");
    ((StringBuilder)localObject).append(i);
    ((StringBuilder)localObject).append(" packageName:");
    ((StringBuilder)localObject).append(mClientSettings.getInnerHmsPkg());
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
    if (mContext.getPackageName().equals(mClientSettings.getInnerHmsPkg()))
    {
      HMSLog.append("BaseHmsClient", "service packageName is same, bind core service return");
      bindCoreService();
      return;
    }
    if (Util.isAvailableLibExist(mContext))
    {
      localObject = new AvailableAdapter(i);
      paramInt = ((AvailableAdapter)localObject).isHuaweiMobileServicesAvailable(mContext);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("check available result: ");
      localStringBuilder.append(paramInt);
      HMSLog.append("BaseHmsClient", localStringBuilder.toString());
      if (paramInt == 0)
      {
        bindCoreService();
        return;
      }
      if (((AvailableAdapter)localObject).isUserResolvableError(paramInt))
      {
        HMSLog.append("BaseHmsClient", "bindCoreService3.0 fail, start resolution now.");
        resolution((AvailableAdapter)localObject, paramInt);
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("bindCoreService3.0 fail: ");
      ((StringBuilder)localObject).append(paramInt);
      ((StringBuilder)localObject).append(" is not resolvable.");
      HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
      notifyFailed(paramInt);
      return;
    }
    paramInt = HuaweiApiAvailability.getInstance().isHuaweiMobileServicesAvailable(mContext, i);
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("HuaweiApiAvailability check available result: ");
    ((StringBuilder)localObject).append(paramInt);
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
    if (paramInt == 0)
    {
      bindCoreService();
      return;
    }
    notifyFailed(paramInt);
  }
  
  private void notifyFailed(int paramInt)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("notifyFailed result: ");
    ((StringBuilder)localObject).append(paramInt);
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
    localObject = mConnectionFailedListener;
    if (localObject != null) {
      ((OnConnectionFailedListener)localObject).onConnectionFailed(new ConnectionResult(paramInt));
    }
  }
  
  private void notifyFailed(ConnectionResult paramConnectionResult)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("notifyFailed result: ");
    ((StringBuilder)localObject).append(paramConnectionResult.getErrorCode());
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
    localObject = mConnectionFailedListener;
    if (localObject != null) {
      ((OnConnectionFailedListener)localObject).onConnectionFailed(paramConnectionResult);
    }
  }
  
  private void onDisconnectionResult(ResolveResult paramResolveResult)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Enter onDisconnectionResult, disconnect from server result: ");
    localStringBuilder.append(paramResolveResult.getStatus().getStatusCode());
    HMSLog.append("BaseHmsClient", localStringBuilder.toString());
    mBinderAdapter.unBind();
    setConnectStatus(1);
  }
  
  private void resolution(AvailableAdapter paramAvailableAdapter, int paramInt)
  {
    HMSLog.append("BaseHmsClient", "enter HmsCore resolution");
    if (!getClientSettings().isHasActivity())
    {
      PackageNameManager.getInstance(mContext).queryPackageName(new VoidOnConnectionFailed(paramInt));
      return;
    }
    Activity localActivity = Util.getActiveActivity(getClientSettings().getCpActivity(), getContext());
    if (localActivity != null)
    {
      paramAvailableAdapter.startResolution(localActivity, new AvailableAdapter.AvailableCallBack()
      {
        public void onComplete(int paramAnonymousInt)
        {
          if (paramAnonymousInt == 0)
          {
            BaseHmsClient.this.bindCoreService();
            return;
          }
          BaseHmsClient.this.notifyFailed(paramAnonymousInt);
        }
      });
      return;
    }
    notifyFailed(26);
  }
  
  private void setConnectStatus(int paramInt)
  {
    mConnStatus.set(paramInt);
  }
  
  protected final void checkConnected()
  {
    if (isConnected()) {
      return;
    }
    throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
  }
  
  public void connect(int paramInt)
  {
    checkAvailabilityAndConnect(paramInt, false);
  }
  
  public void connect(int paramInt, boolean paramBoolean)
  {
    checkAvailabilityAndConnect(paramInt, paramBoolean);
  }
  
  protected final void connectionConnected()
  {
    setConnectStatus(3);
    ConnectionCallbacks localConnectionCallbacks = mConnectionCallbacks;
    if (localConnectionCallbacks != null) {
      localConnectionCallbacks.onConnected();
    }
  }
  
  public void disconnect()
  {
    int i = mConnStatus.get();
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Enter disconnect, Connection Status: ");
    ((StringBuilder)localObject).append(i);
    HMSLog.append("BaseHmsClient", ((StringBuilder)localObject).toString());
    if (i != 1) {
      if (i != 3)
      {
        if (i != 4)
        {
          if (i != 5) {
            return;
          }
          cancelConnDelayHandle();
          setConnectStatus(4);
        }
      }
      else
      {
        localObject = mBinderAdapter;
        if (localObject != null) {
          ((BinderAdapter)localObject).unBind();
        }
        setConnectStatus(1);
      }
    }
  }
  
  public List getApiNameList()
  {
    return mClientSettings.getApiName();
  }
  
  public String getAppID()
  {
    return mAppID;
  }
  
  protected ClientSettings getClientSettings()
  {
    return mClientSettings;
  }
  
  public Context getContext()
  {
    return mContext;
  }
  
  public String getCpID()
  {
    return mClientSettings.getCpID();
  }
  
  public int getMinApkVersion()
  {
    return 30000000;
  }
  
  public String getPackageName()
  {
    return mClientSettings.getClientPackageName();
  }
  
  public com.huawei.hms.core.aidl.Object getService()
  {
    return mService;
  }
  
  public String getServiceAction()
  {
    return "com.huawei.hms.core.aidlservice";
  }
  
  public String getSessionId()
  {
    return sessionId;
  }
  
  public SubAppInfo getSubAppInfo()
  {
    return mClientSettings.getSubAppID();
  }
  
  public String getTransportName()
  {
    return IPCTransport.class.getName();
  }
  
  public boolean isConnected()
  {
    return (mConnStatus.get() == 3) || (mConnStatus.get() == 4);
  }
  
  public boolean isConnecting()
  {
    return mConnStatus.get() == 5;
  }
  
  public void onConnecting()
  {
    connectionConnected();
  }
  
  public static abstract interface ConnectionCallbacks
  {
    public static final int CAUSE_API_CLIENT_EXPIRED = 3;
    public static final int CAUSE_NETWORK_LOST = 2;
    public static final int CAUSE_SERVICE_DISCONNECTED = 1;
    
    public abstract void onConnected();
    
    public abstract void onConnectionSuspended(int paramInt);
  }
  
  public static abstract interface OnConnectionFailedListener
  {
    public abstract void onConnectionFailed(ConnectionResult paramConnectionResult);
  }
  
  private class VoidOnConnectionFailed
    implements PackageNameManager.QueryPublishCallback
  {
    private int errorCode;
    
    public VoidOnConnectionFailed(int paramInt)
    {
      errorCode = paramInt;
    }
    
    public void onQueryResult()
    {
      ConnectionResult localConnectionResult = new ConnectionResult(26, HuaweiApiAvailability.getInstance().getErrPendingIntent(mContext, errorCode, 0));
      BaseHmsClient.this.notifyFailed(localConnectionResult);
    }
  }
}
