package com.huawei.hms.common.internal;

import android.content.Context;
import android.os.Parcelable;
import android.text.TextUtils;
import com.huawei.hms.adapter.BaseAdapter;
import com.huawei.hms.adapter.BaseAdapter.BaseCallBack;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.support.model.HMSLog;
import java.lang.ref.WeakReference;
import org.json.JSONObject;

public abstract class HmsClient
  extends BaseHmsClient
  implements AnyClient
{
  private static final String PAGE_KEY = "HmsClient";
  
  public HmsClient(Context paramContext, ClientSettings paramClientSettings, BaseHmsClient.OnConnectionFailedListener paramOnConnectionFailedListener, BaseHmsClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    super(paramContext, paramClientSettings, paramOnConnectionFailedListener, paramConnectionCallbacks);
  }
  
  public void post(IMessageEntity paramIMessageEntity, String paramString, AnyClient.CallBack paramCallBack)
  {
    if (paramCallBack == null)
    {
      HMSLog.toString("HmsClient", "callback is invalid, discard.");
      return;
    }
    if (((paramIMessageEntity instanceof RequestHeader)) && (paramString != null))
    {
      if (!isConnected())
      {
        HMSLog.toString("HmsClient", "post failed for no connected.");
        paramCallBack.onCallback(new ResponseHeader(1, 907135001, "Not Connected"), new JSONObject().toString());
        return;
      }
      RequestHeader localRequestHeader = (RequestHeader)paramIMessageEntity;
      paramIMessageEntity = new StringBuilder();
      paramIMessageEntity.append("post msg ");
      paramIMessageEntity.append(localRequestHeader);
      HMSLog.append("HmsClient", paramIMessageEntity.toString());
      paramIMessageEntity = getClientSettings().getCpActivity();
      if (paramIMessageEntity == null) {
        paramIMessageEntity = new BaseAdapter(this);
      } else {
        paramIMessageEntity = new BaseAdapter(this, paramIMessageEntity);
      }
      paramIMessageEntity.baseRequest(localRequestHeader.toJson(), paramString, localRequestHeader.getParcelable(), new BaseAdapterCallBack(this, paramCallBack));
      return;
    }
    HMSLog.toString("HmsClient", "arguments is invalid.");
    paramCallBack.onCallback(new ResponseHeader(1, 907135000, "Args is invalid"), new JSONObject().toString());
  }
  
  public void updateSessionId(String paramString)
  {
    if (TextUtils.isEmpty(sessionId)) {
      sessionId = paramString;
    }
  }
  
  private static class BaseAdapterCallBack
    implements BaseAdapter.BaseCallBack
  {
    private final AnyClient.CallBack callback;
    private final WeakReference<HmsClient> hmsClient;
    
    BaseAdapterCallBack(HmsClient paramHmsClient, AnyClient.CallBack paramCallBack)
    {
      callback = paramCallBack;
      hmsClient = new WeakReference(paramHmsClient);
    }
    
    private void doCallback(String paramString1, String paramString2)
    {
      ResponseHeader localResponseHeader = new ResponseHeader();
      if (localResponseHeader.fromJson(paramString1))
      {
        paramString1 = new StringBuilder();
        paramString1.append("receive msg ");
        paramString1.append(localResponseHeader);
        HMSLog.append("HmsClient", paramString1.toString());
        updateSessionId(localResponseHeader.getSessionId());
        callback.onCallback(localResponseHeader, paramString2);
        return;
      }
      callback.onCallback(new ResponseHeader(1, 907135000, "response header json error"), new JSONObject().toString());
    }
    
    private void doCallback(String paramString1, String paramString2, Parcelable paramParcelable)
    {
      ResponseHeader localResponseHeader = new ResponseHeader();
      if (localResponseHeader.fromJson(paramString1))
      {
        localResponseHeader.setParcelable(paramParcelable);
        paramString1 = new StringBuilder();
        paramString1.append("receive msg ");
        paramString1.append(localResponseHeader);
        HMSLog.append("HmsClient", paramString1.toString());
        updateSessionId(localResponseHeader.getSessionId());
        callback.onCallback(localResponseHeader, paramString2);
        return;
      }
      callback.onCallback(new ResponseHeader(1, 907135000, "response header json error"), new JSONObject().toString());
    }
    
    private void updateSessionId(String paramString)
    {
      HmsClient localHmsClient = (HmsClient)hmsClient.get();
      if (localHmsClient != null) {
        localHmsClient.updateSessionId(paramString);
      }
    }
    
    public void onComplete(String paramString1, String paramString2, Parcelable paramParcelable)
    {
      if (paramParcelable == null)
      {
        doCallback(paramString1, paramString2);
        return;
      }
      doCallback(paramString1, paramString2, paramParcelable);
    }
    
    public void onError(String paramString)
    {
      ResponseHeader localResponseHeader = new ResponseHeader();
      if (localResponseHeader.fromJson(paramString))
      {
        paramString = new StringBuilder();
        paramString.append("receive msg ");
        paramString.append(localResponseHeader);
        HMSLog.append("HmsClient", paramString.toString());
        updateSessionId(localResponseHeader.getSessionId());
        callback.onCallback(localResponseHeader, new JSONObject().toString());
        return;
      }
      callback.onCallback(new ResponseHeader(1, 907135000, "response header json error"), new JSONObject().toString());
    }
  }
}
