package com.huawei.hms.common.internal;

import android.os.Parcelable;
import android.text.TextUtils;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.core.aidl.annotation.Packed;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.utils.JsonUtil;
import org.json.JSONException;
import org.json.JSONObject;

public class RequestHeader
  implements IMessageEntity
{
  private static final String TAG = "RequestHeader";
  @Packed
  private int apiLevel;
  @Packed
  private String api_name;
  @Packed
  private String app_id = "";
  @Packed
  private int kitSdkVersion;
  private Parcelable parcelable;
  @Packed
  private String pkg_name;
  @Packed
  private int sdk_version = 50005300;
  @Packed
  private String session_id;
  @Packed
  private String srv_name;
  @Packed
  private String transaction_id;
  @Packed
  private String version = "4.0";
  
  public RequestHeader() {}
  
  public boolean fromJson(String paramString)
  {
    try
    {
      paramString = new JSONObject(paramString);
      localObject = JsonUtil.getStringValue(paramString, "version");
      version = ((String)localObject);
      localObject = JsonUtil.getStringValue(paramString, "srv_name");
      srv_name = ((String)localObject);
      localObject = JsonUtil.getStringValue(paramString, "api_name");
      api_name = ((String)localObject);
      localObject = JsonUtil.getStringValue(paramString, "app_id");
      app_id = ((String)localObject);
      localObject = JsonUtil.getStringValue(paramString, "pkg_name");
      pkg_name = ((String)localObject);
      int i = JsonUtil.getIntValue(paramString, "sdk_version");
      sdk_version = i;
      i = JsonUtil.getIntValue(paramString, "kitSdkVersion");
      kitSdkVersion = i;
      i = JsonUtil.getIntValue(paramString, "apiLevel");
      apiLevel = i;
      localObject = JsonUtil.getStringValue(paramString, "session_id");
      session_id = ((String)localObject);
      paramString = JsonUtil.getStringValue(paramString, "transaction_id");
      transaction_id = paramString;
      return true;
    }
    catch (JSONException paramString)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("fromJson failed: ");
      ((StringBuilder)localObject).append(paramString.getMessage());
      HMSLog.toString("RequestHeader", ((StringBuilder)localObject).toString());
    }
    return false;
  }
  
  public String getActualAppID()
  {
    if (TextUtils.isEmpty(app_id)) {
      return "";
    }
    String[] arrayOfString = app_id.split("\\|");
    if (arrayOfString.length == 0) {
      return "";
    }
    if (arrayOfString.length == 1) {
      return arrayOfString[0];
    }
    return arrayOfString[1];
  }
  
  public int getApiLevel()
  {
    return apiLevel;
  }
  
  public String getApiName()
  {
    return api_name;
  }
  
  public String getAppID()
  {
    return app_id;
  }
  
  public int getKitSdkVersion()
  {
    return kitSdkVersion;
  }
  
  public Parcelable getParcelable()
  {
    return parcelable;
  }
  
  public String getPkgName()
  {
    return pkg_name;
  }
  
  public int getSdkVersion()
  {
    return sdk_version;
  }
  
  public String getSessionId()
  {
    return session_id;
  }
  
  public String getSrvName()
  {
    return srv_name;
  }
  
  public String getTransactionId()
  {
    return transaction_id;
  }
  
  public String getVersion()
  {
    return version;
  }
  
  public void setApiLevel(int paramInt)
  {
    apiLevel = paramInt;
  }
  
  public void setApiName(String paramString)
  {
    api_name = paramString;
  }
  
  public void setAppID(String paramString)
  {
    app_id = paramString;
  }
  
  public void setKitSdkVersion(int paramInt)
  {
    kitSdkVersion = paramInt;
  }
  
  public void setParcelable(Parcelable paramParcelable)
  {
    parcelable = paramParcelable;
  }
  
  public void setPkgName(String paramString)
  {
    pkg_name = paramString;
  }
  
  public void setSdkVersion(int paramInt)
  {
    sdk_version = paramInt;
  }
  
  public void setSessionId(String paramString)
  {
    session_id = paramString;
  }
  
  public void setSrvName(String paramString)
  {
    srv_name = paramString;
  }
  
  public void setTransactionId(String paramString)
  {
    transaction_id = paramString;
  }
  
  public void setVersion(String paramString)
  {
    version = paramString;
  }
  
  public String toJson()
  {
    JSONObject localJSONObject = new JSONObject();
    String str = version;
    try
    {
      localJSONObject.put("version", str);
      str = srv_name;
      localJSONObject.put("srv_name", str);
      str = api_name;
      localJSONObject.put("api_name", str);
      str = app_id;
      localJSONObject.put("app_id", str);
      str = pkg_name;
      localJSONObject.put("pkg_name", str);
      int i = sdk_version;
      localJSONObject.put("sdk_version", i);
      i = kitSdkVersion;
      localJSONObject.put("kitSdkVersion", i);
      i = apiLevel;
      localJSONObject.put("apiLevel", i);
      str = session_id;
      boolean bool = TextUtils.isEmpty(str);
      if (!bool)
      {
        str = session_id;
        localJSONObject.put("session_id", str);
      }
      str = transaction_id;
      localJSONObject.put("transaction_id", str);
    }
    catch (JSONException localJSONException)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("toJson failed: ");
      localStringBuilder.append(localJSONException.getMessage());
      HMSLog.toString("RequestHeader", localStringBuilder.toString());
    }
    return localJSONObject.toString();
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("api_name:");
    localStringBuilder.append(api_name);
    localStringBuilder.append(", app_id:");
    localStringBuilder.append(app_id);
    localStringBuilder.append(", pkg_name:");
    localStringBuilder.append(pkg_name);
    localStringBuilder.append(", sdk_version:");
    localStringBuilder.append(sdk_version);
    localStringBuilder.append(", session_id:*, transaction_id:");
    localStringBuilder.append(transaction_id);
    localStringBuilder.append(", kitSdkVersion:");
    localStringBuilder.append(kitSdkVersion);
    localStringBuilder.append(", apiLevel:");
    localStringBuilder.append(apiLevel);
    return localStringBuilder.toString();
  }
}
