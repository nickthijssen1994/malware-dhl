package com.huawei.hms.common.data;

import android.database.CharArrayBuffer;
import android.net.Uri;
import com.huawei.hms.common.internal.Objects;
import com.huawei.hms.common.internal.Preconditions;

public class DataBufferRef
{
  protected final DataHolder mDataHolder;
  protected int mDataRow;
  private int windowIndex;
  
  public DataBufferRef(DataHolder paramDataHolder, int paramInt)
  {
    Preconditions.checkNotNull(paramDataHolder, "dataHolder cannot be null");
    mDataHolder = paramDataHolder;
    getWindowIndex(paramInt);
  }
  
  protected void copyToBuffer(String paramString, CharArrayBuffer paramCharArrayBuffer)
  {
    mDataHolder.copyToBuffer(paramString, mDataRow, windowIndex, paramCharArrayBuffer);
  }
  
  public boolean equals(Object paramObject)
  {
    if ((paramObject instanceof DataBufferRef))
    {
      paramObject = (DataBufferRef)paramObject;
      if ((mDataRow == mDataRow) && (windowIndex == windowIndex) && (mDataHolder == mDataHolder)) {
        return true;
      }
    }
    return false;
  }
  
  protected boolean getBoolean(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_boolean");
    if (paramString != null) {
      return ((Boolean)paramString).booleanValue();
    }
    return false;
  }
  
  protected byte[] getByteArray(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_byte_array");
    if (paramString != null) {
      return (byte[])paramString;
    }
    return null;
  }
  
  protected int getDataRow()
  {
    return mDataRow;
  }
  
  protected double getDouble(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_double");
    if (paramString != null) {
      return ((Double)paramString).doubleValue();
    }
    return -1.0D;
  }
  
  protected float getFloat(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_float");
    if (paramString != null) {
      return ((Float)paramString).floatValue();
    }
    return -1.0F;
  }
  
  protected int getInteger(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_int");
    if (paramString != null) {
      return ((Integer)paramString).intValue();
    }
    return -1;
  }
  
  protected long getLong(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_long");
    if (paramString != null) {
      return ((Long)paramString).longValue();
    }
    return -1L;
  }
  
  protected String getString(String paramString)
  {
    paramString = mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_string");
    if (paramString != null) {
      return (String)paramString;
    }
    return "";
  }
  
  protected final void getWindowIndex(int paramInt)
  {
    boolean bool;
    if ((paramInt >= 0) && (paramInt < mDataHolder.getCount())) {
      bool = true;
    } else {
      bool = false;
    }
    Preconditions.checkArgument(bool, "rowNum is out of index");
    mDataRow = paramInt;
    windowIndex = mDataHolder.getWindowIndex(mDataRow);
  }
  
  public boolean hasColumn(String paramString)
  {
    return mDataHolder.hasColumn(paramString);
  }
  
  protected boolean hasNull(String paramString)
  {
    return mDataHolder.hasNull(paramString, mDataRow, windowIndex);
  }
  
  public int hashCode()
  {
    return Objects.hashCode(new Object[] { Integer.valueOf(mDataRow), Integer.valueOf(windowIndex), mDataHolder });
  }
  
  public boolean isDataValid()
  {
    return mDataHolder.isClosed() ^ true;
  }
  
  protected Uri parseUri(String paramString)
  {
    paramString = (String)mDataHolder.getValue(paramString, mDataRow, windowIndex, "type_string");
    if (paramString == null) {
      return null;
    }
    return Uri.parse(paramString);
  }
}
