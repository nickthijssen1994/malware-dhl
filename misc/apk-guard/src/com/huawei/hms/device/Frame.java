package com.huawei.hms.device;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.model.common.Base64;
import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Principal;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.json.JSONArray;
import org.json.JSONException;

public class Frame
{
  public static boolean a(X509Certificate paramX509Certificate)
  {
    if (paramX509Certificate == null) {
      return false;
    }
    if (paramX509Certificate.getBasicConstraints() == -1) {
      return false;
    }
    paramX509Certificate = paramX509Certificate.getKeyUsage();
    if (5 < paramX509Certificate.length) {
      return paramX509Certificate[5];
    }
    return false;
  }
  
  public static boolean a(X509Certificate paramX509Certificate, String paramString)
  {
    return a(paramX509Certificate, "OU", paramString);
  }
  
  public static boolean a(X509Certificate paramX509Certificate, String paramString1, String paramString2)
  {
    if ((paramX509Certificate != null) && (!TextUtils.isEmpty(paramString1)) && (!TextUtils.isEmpty(paramString2))) {
      return paramString2.equals(get(paramX509Certificate.getSubjectDN().getName(), paramString1));
    }
    return false;
  }
  
  public static boolean a(List paramList)
  {
    int i = 0;
    while (i < paramList.size() - 1)
    {
      if (!a((X509Certificate)paramList.get(i))) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public static List copy(String paramString)
  {
    return copy(get(paramString));
  }
  
  public static List copy(List paramList)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    paramList = paramList.iterator();
    while (paramList.hasNext()) {
      localArrayList.add(toString((String)paramList.next()));
    }
    return localArrayList;
  }
  
  public static boolean d(X509Certificate paramX509Certificate, String paramString)
  {
    return a(paramX509Certificate, "CN", paramString);
  }
  
  public static String get(String paramString1, String paramString2)
  {
    String str = paramString1.toUpperCase(Locale.getDefault());
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString2);
    localStringBuilder.append("=");
    int i = str.indexOf(localStringBuilder.toString());
    if (i == -1) {
      return null;
    }
    int j = paramString1.indexOf(",", i);
    if (j != -1) {
      return paramString1.substring(i + paramString2.length() + 1, j);
    }
    return paramString1.substring(i + paramString2.length() + 1);
  }
  
  /* Error */
  public static X509Certificate get(Context paramContext, String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnull +272 -> 273
    //   4: aload_1
    //   5: invokestatic 29	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   8: ifeq +6 -> 14
    //   11: goto +262 -> 273
    //   14: ldc -104
    //   16: invokestatic 158	java/security/KeyStore:getInstance	(Ljava/lang/String;)Ljava/security/KeyStore;
    //   19: astore 5
    //   21: aload_0
    //   22: invokevirtual 164	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   25: ldc -90
    //   27: invokevirtual 172	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   30: astore 4
    //   32: aload 4
    //   34: astore_0
    //   35: aload_0
    //   36: astore_3
    //   37: aload 5
    //   39: aload 4
    //   41: ldc -82
    //   43: invokevirtual 178	java/lang/String:toCharArray	()[C
    //   46: invokevirtual 182	java/security/KeyStore:load	(Ljava/io/InputStream;[C)V
    //   49: aload_0
    //   50: astore_3
    //   51: aload 5
    //   53: aload_1
    //   54: invokevirtual 186	java/security/KeyStore:containsAlias	(Ljava/lang/String;)Z
    //   57: istore_2
    //   58: iload_2
    //   59: ifne +52 -> 111
    //   62: aload_0
    //   63: astore_3
    //   64: new 109	java/lang/StringBuilder
    //   67: dup
    //   68: invokespecial 112	java/lang/StringBuilder:<init>	()V
    //   71: astore 5
    //   73: aload_0
    //   74: astore_3
    //   75: aload 5
    //   77: ldc -68
    //   79: invokevirtual 116	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   82: pop
    //   83: aload_0
    //   84: astore_3
    //   85: aload 5
    //   87: aload_1
    //   88: invokevirtual 116	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: pop
    //   92: aload_0
    //   93: astore_3
    //   94: ldc -66
    //   96: aload 5
    //   98: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   101: invokestatic 195	com/huawei/hms/support/model/HMSLog:toString	(Ljava/lang/String;Ljava/lang/String;)V
    //   104: aload 4
    //   106: invokestatic 201	com/huawei/hms/utils/IOUtils:closeQuietly	(Ljava/io/InputStream;)V
    //   109: aconst_null
    //   110: areturn
    //   111: aload_0
    //   112: astore_3
    //   113: aload 5
    //   115: aload_1
    //   116: invokevirtual 205	java/security/KeyStore:getCertificate	(Ljava/lang/String;)Ljava/security/cert/Certificate;
    //   119: astore_1
    //   120: aload_0
    //   121: astore_3
    //   122: aload_1
    //   123: instanceof 8
    //   126: istore_2
    //   127: iload_2
    //   128: ifeq +21 -> 149
    //   131: aload_1
    //   132: checkcast 8	java/security/cert/X509Certificate
    //   135: astore_1
    //   136: aload_0
    //   137: astore_3
    //   138: aload_1
    //   139: invokevirtual 208	java/security/cert/X509Certificate:checkValidity	()V
    //   142: aload 4
    //   144: invokestatic 201	com/huawei/hms/utils/IOUtils:closeQuietly	(Ljava/io/InputStream;)V
    //   147: aload_1
    //   148: areturn
    //   149: aload 4
    //   151: invokestatic 201	com/huawei/hms/utils/IOUtils:closeQuietly	(Ljava/io/InputStream;)V
    //   154: aconst_null
    //   155: areturn
    //   156: astore_3
    //   157: aload_0
    //   158: astore_1
    //   159: aload_3
    //   160: astore_0
    //   161: goto +51 -> 212
    //   164: astore_3
    //   165: aload_0
    //   166: astore_1
    //   167: aload_3
    //   168: astore_0
    //   169: goto +43 -> 212
    //   172: astore_3
    //   173: aload_0
    //   174: astore_1
    //   175: aload_3
    //   176: astore_0
    //   177: goto +35 -> 212
    //   180: astore_3
    //   181: aload_0
    //   182: astore_1
    //   183: aload_3
    //   184: astore_0
    //   185: goto +27 -> 212
    //   188: astore_0
    //   189: aconst_null
    //   190: astore_3
    //   191: goto +76 -> 267
    //   194: astore_0
    //   195: aconst_null
    //   196: astore_1
    //   197: goto +15 -> 212
    //   200: astore_0
    //   201: goto -6 -> 195
    //   204: astore_0
    //   205: goto -10 -> 195
    //   208: astore_0
    //   209: goto -14 -> 195
    //   212: aload_1
    //   213: astore_3
    //   214: new 109	java/lang/StringBuilder
    //   217: dup
    //   218: invokespecial 112	java/lang/StringBuilder:<init>	()V
    //   221: astore 4
    //   223: aload_1
    //   224: astore_3
    //   225: aload 4
    //   227: ldc -46
    //   229: invokevirtual 116	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   232: pop
    //   233: aload_1
    //   234: astore_3
    //   235: aload 4
    //   237: aload_0
    //   238: checkcast 212	java/lang/Exception
    //   241: invokevirtual 215	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   244: invokevirtual 116	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   247: pop
    //   248: aload_1
    //   249: astore_3
    //   250: ldc -66
    //   252: aload 4
    //   254: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   257: invokestatic 195	com/huawei/hms/support/model/HMSLog:toString	(Ljava/lang/String;Ljava/lang/String;)V
    //   260: aload_1
    //   261: invokestatic 201	com/huawei/hms/utils/IOUtils:closeQuietly	(Ljava/io/InputStream;)V
    //   264: aconst_null
    //   265: areturn
    //   266: astore_0
    //   267: aload_3
    //   268: invokestatic 201	com/huawei/hms/utils/IOUtils:closeQuietly	(Ljava/io/InputStream;)V
    //   271: aload_0
    //   272: athrow
    //   273: ldc -66
    //   275: ldc -39
    //   277: invokestatic 195	com/huawei/hms/support/model/HMSLog:toString	(Ljava/lang/String;Ljava/lang/String;)V
    //   280: aconst_null
    //   281: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	282	0	paramContext	Context
    //   0	282	1	paramString	String
    //   57	71	2	bool	boolean
    //   36	102	3	localContext	Context
    //   156	4	3	localNoSuchAlgorithmException	NoSuchAlgorithmException
    //   164	4	3	localCertificateException	CertificateException
    //   172	4	3	localIOException	java.io.IOException
    //   180	4	3	localKeyStoreException	java.security.KeyStoreException
    //   190	78	3	str	String
    //   30	223	4	localObject1	Object
    //   19	95	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   37	49	156	java/security/NoSuchAlgorithmException
    //   51	58	156	java/security/NoSuchAlgorithmException
    //   64	73	156	java/security/NoSuchAlgorithmException
    //   75	83	156	java/security/NoSuchAlgorithmException
    //   85	92	156	java/security/NoSuchAlgorithmException
    //   94	104	156	java/security/NoSuchAlgorithmException
    //   113	120	156	java/security/NoSuchAlgorithmException
    //   138	142	156	java/security/NoSuchAlgorithmException
    //   37	49	164	java/security/cert/CertificateException
    //   51	58	164	java/security/cert/CertificateException
    //   64	73	164	java/security/cert/CertificateException
    //   75	83	164	java/security/cert/CertificateException
    //   85	92	164	java/security/cert/CertificateException
    //   94	104	164	java/security/cert/CertificateException
    //   113	120	164	java/security/cert/CertificateException
    //   138	142	164	java/security/cert/CertificateException
    //   37	49	172	java/io/IOException
    //   51	58	172	java/io/IOException
    //   64	73	172	java/io/IOException
    //   75	83	172	java/io/IOException
    //   85	92	172	java/io/IOException
    //   94	104	172	java/io/IOException
    //   113	120	172	java/io/IOException
    //   138	142	172	java/io/IOException
    //   37	49	180	java/security/KeyStoreException
    //   51	58	180	java/security/KeyStoreException
    //   64	73	180	java/security/KeyStoreException
    //   75	83	180	java/security/KeyStoreException
    //   85	92	180	java/security/KeyStoreException
    //   94	104	180	java/security/KeyStoreException
    //   113	120	180	java/security/KeyStoreException
    //   138	142	180	java/security/KeyStoreException
    //   14	32	188	java/lang/Throwable
    //   14	32	194	java/security/NoSuchAlgorithmException
    //   14	32	200	java/security/cert/CertificateException
    //   14	32	204	java/io/IOException
    //   14	32	208	java/security/KeyStoreException
    //   37	49	266	java/lang/Throwable
    //   51	58	266	java/lang/Throwable
    //   64	73	266	java/lang/Throwable
    //   75	83	266	java/lang/Throwable
    //   85	92	266	java/lang/Throwable
    //   94	104	266	java/lang/Throwable
    //   113	120	266	java/lang/Throwable
    //   122	127	266	java/lang/Throwable
    //   138	142	266	java/lang/Throwable
    //   214	223	266	java/lang/Throwable
    //   225	233	266	java/lang/Throwable
    //   235	248	266	java/lang/Throwable
    //   250	260	266	java/lang/Throwable
  }
  
  public static List get(String paramString)
  {
    try
    {
      paramString = new JSONArray(paramString);
      int i = paramString.length();
      if (i <= 1)
      {
        paramString = Collections.emptyList();
        return paramString;
      }
      localObject = new ArrayList(paramString.length());
      i = 0;
      for (;;)
      {
        int j = paramString.length();
        if (i >= j) {
          break;
        }
        ((List)localObject).add(paramString.getString(i));
        i += 1;
      }
      return localObject;
    }
    catch (JSONException paramString)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Failed to getCertChain: ");
      ((StringBuilder)localObject).append(paramString.getMessage());
      HMSLog.toString("X509CertUtil", ((StringBuilder)localObject).toString());
    }
    return Collections.emptyList();
  }
  
  public static X509Certificate init(byte[] paramArrayOfByte)
  {
    try
    {
      localObject = CertificateFactory.getInstance("X.509");
      paramArrayOfByte = ((CertificateFactory)localObject).generateCertificate(new ByteArrayInputStream(paramArrayOfByte));
      return (X509Certificate)paramArrayOfByte;
    }
    catch (CertificateException paramArrayOfByte)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Failed to get cert: ");
      ((StringBuilder)localObject).append(paramArrayOfByte.getMessage());
      HMSLog.toString("X509CertUtil", ((StringBuilder)localObject).toString());
    }
    return null;
  }
  
  public static X509Certificate toString(Context paramContext)
  {
    return get(paramContext, "052root");
  }
  
  public static X509Certificate toString(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    try
    {
      paramString = init(Base64.decode(paramString));
      return paramString;
    }
    catch (IllegalArgumentException paramString)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("getCert failed : ");
      localStringBuilder.append(paramString.getMessage());
      HMSLog.toString("X509CertUtil", localStringBuilder.toString());
    }
    return null;
  }
  
  public static boolean verify(X509Certificate paramX509Certificate, List paramList)
  {
    if (paramList != null)
    {
      if (paramList.size() == 0) {
        return false;
      }
      if (paramX509Certificate == null)
      {
        HMSLog.toString("X509CertUtil", "rootCert is null,verify failed ");
        return false;
      }
      paramX509Certificate = paramX509Certificate.getPublicKey();
      Iterator localIterator = paramList.iterator();
      for (;;)
      {
        if (!localIterator.hasNext()) {
          break label133;
        }
        X509Certificate localX509Certificate = (X509Certificate)localIterator.next();
        if (localX509Certificate == null) {
          break label138;
        }
        try
        {
          localX509Certificate.verify(paramX509Certificate);
          paramX509Certificate = localX509Certificate.getPublicKey();
        }
        catch (SignatureException paramX509Certificate) {}catch (NoSuchProviderException paramX509Certificate) {}catch (InvalidKeyException paramX509Certificate) {}catch (NoSuchAlgorithmException paramX509Certificate) {}catch (CertificateException paramX509Certificate) {}
      }
      paramList = new StringBuilder();
      paramList.append("verify failed ");
      paramList.append(((GeneralSecurityException)paramX509Certificate).getMessage());
      HMSLog.toString("X509CertUtil", paramList.toString());
      return false;
      label133:
      return a(paramList);
    }
    label138:
    return false;
  }
  
  public static boolean verify(X509Certificate paramX509Certificate, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    try
    {
      Signature localSignature = Signature.getInstance(paramX509Certificate.getSigAlgName());
      localSignature.initVerify(paramX509Certificate.getPublicKey());
      localSignature.update(paramArrayOfByte1);
      boolean bool = localSignature.verify(paramArrayOfByte2);
      return bool;
    }
    catch (InvalidKeyException paramX509Certificate) {}catch (SignatureException paramX509Certificate) {}catch (NoSuchAlgorithmException paramX509Certificate) {}
    paramArrayOfByte1 = new StringBuilder();
    paramArrayOfByte1.append("failed checkSignature : ");
    paramArrayOfByte1.append(((GeneralSecurityException)paramX509Certificate).getMessage());
    HMSLog.toString("X509CertUtil", paramArrayOfByte1.toString());
    return false;
  }
  
  public static boolean write(X509Certificate paramX509Certificate, String paramString1, String paramString2)
  {
    try
    {
      boolean bool = verify(paramX509Certificate, paramString1.getBytes("UTF-8"), Base64.decode(paramString2));
      return bool;
    }
    catch (IllegalArgumentException paramX509Certificate) {}catch (UnsupportedEncodingException paramX509Certificate) {}
    paramString1 = new StringBuilder();
    paramString1.append(" plainText exception: ");
    paramString1.append(((Exception)paramX509Certificate).getMessage());
    HMSLog.toString("X509CertUtil", paramString1.toString());
    return false;
  }
}
