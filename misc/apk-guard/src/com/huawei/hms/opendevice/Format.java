package com.huawei.hms.opendevice;

import com.huawei.hms.support.model.HMSLog;
import java.io.UnsupportedEncodingException;

public abstract class Format
{
  public static final char[] value = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
  
  public static byte[] decode(String paramString)
  {
    arrayOfByte = new byte[paramString.length() / 2];
    try
    {
      paramString = paramString.getBytes("UTF-8");
      int j = 0;
      StringBuilder localStringBuilder;
      while (j < arrayOfByte.length)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("0x");
        int k = j * 2;
        int i = paramString[k];
        localStringBuilder.append(new String(new byte[] { i }, "UTF-8"));
        int m = Byte.decode(localStringBuilder.toString()).byteValue();
        m = (byte)(m << 4);
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("0x");
        i = paramString[(k + 1)];
        localStringBuilder.append(new String(new byte[] { i }, "UTF-8"));
        k = Byte.decode(localStringBuilder.toString()).byteValue();
        arrayOfByte[j] = ((byte)(m ^ k));
        j += 1;
      }
      return arrayOfByte;
    }
    catch (NumberFormatException paramString)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("hexString2ByteArray error");
      localStringBuilder.append(((NumberFormatException)paramString).getMessage());
      HMSLog.toString("BaseUtil", localStringBuilder.toString());
      return arrayOfByte;
    }
    catch (UnsupportedEncodingException paramString)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("hexString2ByteArray error");
      localStringBuilder.append(((UnsupportedEncodingException)paramString).getMessage());
      HMSLog.toString("BaseUtil", localStringBuilder.toString());
    }
  }
  
  public static String toString(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return null;
    }
    if (paramArrayOfByte.length == 0) {
      return "";
    }
    char[] arrayOfChar1 = new char[paramArrayOfByte.length * 2];
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      int j = paramArrayOfByte[i];
      int k = i * 2;
      char[] arrayOfChar2 = value;
      arrayOfChar1[k] = arrayOfChar2[((j & 0xF0) >> 4)];
      arrayOfChar1[(k + 1)] = arrayOfChar2[(j & 0xF)];
      i += 1;
    }
    return new String(arrayOfChar1);
  }
}
