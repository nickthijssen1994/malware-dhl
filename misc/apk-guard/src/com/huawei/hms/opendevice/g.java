package com.huawei.hms.opendevice;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.agconnect.config.AGConnectServicesConfig;
import com.huawei.hms.aaid.utils.PushPreferences;
import com.huawei.hms.android.HwBuildEx.VERSION;
import com.huawei.hms.android.SystemUtils;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.utils.PackageManagerHelper;
import com.huawei.hms.utils.Util;
import java.util.TimeZone;
import java.util.UUID;
import org.json.JSONException;
import org.json.JSONObject;

public class g
{
  public static void a(Context paramContext, String paramString)
  {
    new Widget(paramContext, paramString).start();
  }
  
  public static boolean c(Context paramContext)
  {
    int i = new PackageManagerHelper(paramContext).getPackageVersionCode("com.huawei.android.pushagent");
    paramContext = new StringBuilder();
    paramContext.append("NC version code: ");
    paramContext.append(i);
    HMSLog.d("ReportAaidToken", paramContext.toString());
    return ((90101400 <= i) && (i < 100000000)) || (i >= 100001301);
  }
  
  public static boolean c(Context paramContext, String paramString1, String paramString2)
  {
    paramContext = ClassWriter.a(paramContext);
    if (!paramContext.containsKey("reportAaidAndToken"))
    {
      HMSLog.d("ReportAaidToken", "It hasn't been reported, this time needs report.");
      return true;
    }
    paramContext = paramContext.getString("reportAaidAndToken");
    if (TextUtils.isEmpty(paramContext))
    {
      HMSLog.toString("ReportAaidToken", "It has been reported, but sp file is empty, this time needs report.");
      return true;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString2);
    localStringBuilder.append(paramString1);
    return paramContext.equals(HASH.digest(localStringBuilder.toString(), "SHA-256")) ^ true;
  }
  
  public static String create(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      localJSONObject1 = new JSONObject();
      localJSONObject2 = new JSONObject();
    }
    catch (JSONException paramContext)
    {
      JSONObject localJSONObject1;
      JSONObject localJSONObject2;
      JSONObject localJSONObject3;
      Object localObject1;
      Object localObject2;
      int i;
      label273:
      for (;;) {}
    }
    try
    {
      localJSONObject2.put("timezone", TimeZone.getDefault().getID());
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject2.put("country", SystemUtils.getLocalCountry());
      localJSONObject3 = new JSONObject();
      localObject1 = new PackageManagerHelper(paramContext);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localObject1 = ((PackageManagerHelper)localObject1).getPackageVersionName("com.huawei.android.pushagent");
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject3.put("agent_version", localObject1);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject3.put("hms_version", String.valueOf(Util.getHmsVersion(paramContext)));
      localObject1 = new JSONObject();
      localObject2 = WeatherConditionType.DRIZZLE_RAIN;
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      ((JSONObject)localObject1).put("dev_type", ((WeatherConditionType)localObject2).getPriority());
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      ((JSONObject)localObject1).put("dev_sub_type", "phone");
      localObject2 = IdeFinder.OS.UNIX;
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      ((JSONObject)localObject1).put("os_type", ((IdeFinder.OS)localObject2).getLineEnding());
      i = HwBuildEx.VERSION.EMUI_SDK_INT;
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      ((JSONObject)localObject1).put("os_version", String.valueOf(i));
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("id", UUID.randomUUID().toString());
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("global", localJSONObject2);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("push_agent", localJSONObject3);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("hardware", localObject1);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("aaid", paramString1);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("token", paramString2);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      paramString1 = AGConnectServicesConfig.fromContext(paramContext);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("app_id", paramString1.getString("client/app_id"));
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      paramContext = AGConnectServicesConfig.fromContext(paramContext);
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    try
    {
      localJSONObject1.put("region", paramContext.getString("region"));
      return localJSONObject1.toString();
    }
    catch (JSONException paramContext)
    {
      break label273;
    }
    HMSLog.toString("ReportAaidToken", "Catch JSONException.");
    return null;
  }
  
  public static void init(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    if (TextUtils.isEmpty(paramString1))
    {
      HMSLog.toString("ReportAaidToken", "Https response is empty.");
      return;
    }
    for (;;)
    {
      try
      {
        paramString1 = new JSONObject(paramString1);
      }
      catch (JSONException paramContext)
      {
        int i;
        boolean bool;
        continue;
      }
      catch (Exception paramContext)
      {
        label183:
        label192:
        continue;
      }
      try
      {
        i = paramString1.optInt("ret", 256);
        if (i == 0)
        {
          paramString1 = new StringBuilder();
          paramString1.append(paramString3);
          paramString1.append(paramString2);
          paramString1 = paramString1.toString();
        }
      }
      catch (JSONException paramContext)
      {
        continue;
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        paramString1 = HASH.digest(paramString1, "SHA-256");
        paramContext = ClassWriter.a(paramContext);
      }
      catch (JSONException paramContext)
      {
        continue;
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        bool = paramContext.saveString("reportAaidAndToken", paramString1);
      }
      catch (JSONException paramContext)
      {
        continue;
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        paramString1 = new StringBuilder();
      }
      catch (JSONException paramContext)
      {
        continue;
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        paramString1.append("Report success ");
        if (bool) {
          paramContext = "and save success.";
        } else {
          paramContext = "but save failure.";
        }
      }
      catch (JSONException paramContext) {}catch (Exception paramContext) {}
    }
    try
    {
      paramString1.append(paramContext);
      HMSLog.d("ReportAaidToken", paramString1.toString());
      return;
    }
    catch (JSONException paramContext)
    {
      break label192;
    }
    catch (Exception paramContext)
    {
      break label183;
    }
    try
    {
      paramContext = new StringBuilder();
    }
    catch (JSONException paramContext)
    {
      break label192;
    }
    catch (Exception paramContext)
    {
      break label183;
    }
    try
    {
      paramContext.append("Https response body's ret code: ");
      paramContext.append(i);
    }
    catch (JSONException paramContext)
    {
      break label192;
    }
    catch (Exception paramContext)
    {
      break label183;
    }
    try
    {
      paramContext.append(", error message: ");
    }
    catch (JSONException paramContext)
    {
      break label192;
    }
    catch (Exception paramContext)
    {
      break label183;
    }
    try
    {
      paramContext.append(paramString1.optString("msg"));
      HMSLog.toString("ReportAaidToken", paramContext.toString());
      return;
    }
    catch (JSONException paramContext)
    {
      break label192;
    }
    catch (Exception paramContext)
    {
      break label183;
    }
    HMSLog.toString("ReportAaidToken", "Exception occur.");
    return;
    HMSLog.toString("ReportAaidToken", "Has JSONException.");
  }
}
