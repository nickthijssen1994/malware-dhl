package com.huawei.hms.configurations;

import android.os.Bundle;
import com.huawei.hms.core.aidl.ByteVector;
import com.huawei.hms.core.aidl.ExtensionData;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.core.aidl.IPlayMedia_0_8;
import com.huawei.hms.core.aidl.RequestHeader;
import com.huawei.hms.core.aidl.c;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.client.AidlApiClient;
import com.huawei.hms.support.mozilla.client.ApiClient;
import com.huawei.hms.support.mozilla.transport.DatagramTransport;
import com.huawei.hms.support.mozilla.transport.DatagramTransport.CallBack;

public class IPCTransport
  implements DatagramTransport
{
  private final Class<? extends IMessageEntity> c;
  private final String d;
  private final IMessageEntity n;
  private int o;
  
  public IPCTransport(String paramString, IMessageEntity paramIMessageEntity, Class paramClass)
  {
    d = paramString;
    n = paramIMessageEntity;
    c = paramClass;
  }
  
  public IPCTransport(String paramString, IMessageEntity paramIMessageEntity, Class paramClass, int paramInt)
  {
    d = paramString;
    n = paramIMessageEntity;
    c = paramClass;
    o = paramInt;
  }
  
  private int a(ApiClient paramApiClient, IPlayMedia_0_8 paramIPlayMedia_0_8)
  {
    ExtensionData localExtensionData;
    if ((paramApiClient instanceof HuaweiApiClientImpl))
    {
      localExtensionData = new ExtensionData(d, ProtocolNegotiate.getInstance().getVersion());
      Object localObject = c.b(localExtensionData.b());
      localExtensionData.b(((ByteVector)localObject).create(n, new Bundle()));
      RequestHeader localRequestHeader = new RequestHeader();
      localRequestHeader.setAppID(paramApiClient.getAppID());
      localRequestHeader.setPackageName(paramApiClient.getPackageName());
      localRequestHeader.setSdkVersion(50005300);
      localRequestHeader.setApiNameList(((HuaweiApiClientImpl)paramApiClient).getApiNameList());
      localRequestHeader.setSessionId(paramApiClient.getSessionId());
      localRequestHeader.setApiLevel(o);
      c = ((ByteVector)localObject).create(localRequestHeader, new Bundle());
      paramApiClient = (HuaweiApiClientImpl)paramApiClient;
      try
      {
        localObject = paramApiClient.getService();
        if (localObject == null)
        {
          HMSLog.toString("IPCTransport", "HuaweiApiClient is not binded to service yet.");
          return 907135001;
        }
        paramApiClient.getService().a(localExtensionData, paramIPlayMedia_0_8);
        return 0;
      }
      catch (Exception paramApiClient)
      {
        paramIPlayMedia_0_8 = new StringBuilder();
        paramIPlayMedia_0_8.append("sync call ex:");
        paramIPlayMedia_0_8.append(paramApiClient);
        HMSLog.toString("IPCTransport", paramIPlayMedia_0_8.toString());
        return 907135001;
      }
    }
    if ((paramApiClient instanceof AidlApiClient))
    {
      paramApiClient = (AidlApiClient)paramApiClient;
      int i = ProtocolNegotiate.getInstance().getVersion();
      localExtensionData = new ExtensionData(d, i);
      localExtensionData.b(c.b(localExtensionData.b()).create(n, new Bundle()));
      try
      {
        paramApiClient.getService().a(localExtensionData, paramIPlayMedia_0_8);
        return 0;
      }
      catch (Exception paramApiClient)
      {
        paramIPlayMedia_0_8 = new StringBuilder();
        paramIPlayMedia_0_8.append("sync call ex:");
        paramIPlayMedia_0_8.append(paramApiClient);
        HMSLog.toString("IPCTransport", paramIPlayMedia_0_8.toString());
      }
    }
    return 907135001;
  }
  
  public final void post(ApiClient paramApiClient, DatagramTransport.CallBack paramCallBack)
  {
    send(paramApiClient, paramCallBack);
  }
  
  public final void send(ApiClient paramApiClient, DatagramTransport.CallBack paramCallBack)
  {
    int i = a(paramApiClient, new IPCCallback(c, paramCallBack));
    if (i != 0) {
      paramCallBack.onCallback(i, null);
    }
  }
}
