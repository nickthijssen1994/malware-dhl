package com.huawei.hms.configurations;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.RemoteException;
import android.text.TextUtils;
import com.huawei.hms.api.Api;
import com.huawei.hms.api.Api.ApiOptions;
import com.huawei.hms.api.IPCTransport;
import com.huawei.hms.common.internal.AutoLifecycleFragment;
import com.huawei.hms.common.jgit.ConnectionPostProcessor;
import com.huawei.hms.core.aidl.ByteVector;
import com.huawei.hms.core.aidl.ExtensionData;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.core.aidl.LocationBackend.Stub;
import com.huawei.hms.core.aidl.RequestHeader;
import com.huawei.hms.core.aidl.c;
import com.huawei.hms.support.api.entity.auth.PermissionInfo;
import com.huawei.hms.support.api.entity.auth.Scope;
import com.huawei.hms.support.api.entity.core.DisconnectResp;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.client.ApiClient;
import com.huawei.hms.support.mozilla.client.InnerApiClient;
import com.huawei.hms.support.mozilla.client.InnerPendingResult;
import com.huawei.hms.support.mozilla.client.PendingResult;
import com.huawei.hms.support.mozilla.client.Result;
import com.huawei.hms.support.mozilla.client.SubAppInfo;
import com.huawei.hms.support.mozilla.core.ConnectService;
import com.huawei.hms.support.mozilla.entity.core.CheckConnectInfo;
import com.huawei.hms.support.mozilla.entity.core.ConnectInfo;
import com.huawei.hms.support.mozilla.entity.core.DisconnectInfo;
import com.huawei.hms.support.mozilla.entity.core.JosBaseResp;
import com.huawei.hms.update.manager.HMSPublishStateHolder;
import com.huawei.hms.update.manager.PackageNameManager;
import com.huawei.hms.update.manager.PackageNameManager.QueryPublishCallback;
import com.huawei.hms.utils.Checker;
import com.huawei.hms.utils.HMSPackageManager;
import com.huawei.hms.utils.PackageManagerHelper;
import com.huawei.hms.utils.UIUtil;
import com.huawei.hms.utils.Util;
import com.huawei.updatesdk.UpdateSdkAPI;
import com.huawei.updatesdk.service.otaupdate.CheckUpdateCallBack;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class HuaweiApiClientImpl
  extends HuaweiApiClient
  implements ServiceConnection, InnerApiClient
{
  public static final String DEFAULT_ACCOUNT = "<<default account>>";
  public static final int SIGN_IN_MODE_OPTIONAL = 2;
  public static final int SIGN_IN_MODE_REQUIRED = 1;
  private static final Object e = new Object();
  private static final Object size = new Object();
  private SubAppInfo TAG;
  private List<PermissionInfo> added;
  private int connected = 0;
  private final Context context;
  private WeakReference<Activity> data;
  private HuaweiApiClient.ConnectionCallbacks err;
  private Handler h = null;
  private AtomicInteger id = new AtomicInteger(1);
  private String jid;
  private int last_position = -1;
  private final ReentrantLock lock = new ReentrantLock();
  private volatile com.huawei.hms.core.aidl.Object mService;
  private String mSessionId;
  private List<Scope> mediaPlayer;
  private String nick;
  private final Condition notEmpty = lock.newCondition();
  private Map<Api<?>, Api.ApiOptions> prefs;
  private ConnectionResult ready;
  private final Object session = new Object();
  private long socket = 0L;
  private boolean started = false;
  private WeakReference<Activity> state;
  private HuaweiApiClient.OnConnectionFailedListener this$0;
  private final String user;
  private CheckUpdateCallBack versionCode;
  private Handler y = null;
  private CheckUpdatelistener z = null;
  
  public HuaweiApiClientImpl(Context paramContext)
  {
    context = paramContext;
    user = Util.getAppId(paramContext);
    jid = user;
    nick = Util.getCpId(paramContext);
  }
  
  private int addAll()
  {
    Object localObject1 = getApiMap();
    int i = 0;
    if (localObject1 == null) {
      return 0;
    }
    localObject1 = ((Map)localObject1).keySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      Object localObject2 = ((TermSession)((Iterator)localObject1).next()).getApiName();
      if (!TextUtils.isEmpty((CharSequence)localObject2))
      {
        localObject2 = (Integer)HuaweiApiAvailability.getApiMap().get(localObject2);
        if (localObject2 != null)
        {
          int j = ((Integer)localObject2).intValue();
          if (j > i) {
            i = j;
          }
        }
      }
    }
    return i;
  }
  
  private void call()
  {
    Intent localIntent = new Intent("com.huawei.hms.core.aidlservice");
    HMSPackageManager.getInstance(context).refresh();
    localIntent.setPackage(HMSPackageManager.getInstance(context).getHMSPackageName());
    Object localObject = size;
    try
    {
      if (context.bindService(localIntent, this, 1))
      {
        show();
        return;
      }
      send(1);
      HMSLog.toString("HuaweiApiClientImpl", "In connect, bind core service fail");
      run();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void call(com.huawei.hms.support.mozilla.ResolveResult paramResolveResult)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Enter onDisconnectionResult, disconnect from server result: ");
    localStringBuilder.append(paramResolveResult.getStatus().getStatusCode());
    HMSLog.append("HuaweiApiClientImpl", localStringBuilder.toString());
    connect();
    send(1);
  }
  
  private void connect()
  {
    Util.unBindServiceCatchException(context, this);
    mService = null;
  }
  
  private void doDisconnect()
  {
    ConnectService.disconnect(this, updatePrefs()).setResultCallback(new g(null));
  }
  
  private void doInBackground(com.huawei.hms.support.mozilla.ResolveResult paramResolveResult)
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter onConnectionResult");
    if ((mService != null) && (id.get() == 2))
    {
      initialize(3);
      Object localObject = (com.huawei.hms.support.mozilla.entity.core.ConnectResp)paramResolveResult.getValue();
      if (localObject != null) {
        mSessionId = sessionId;
      }
      localObject = TAG;
      ConnectionPostProcessor localConnectionPostProcessor = null;
      if (localObject == null) {
        localObject = null;
      } else {
        localObject = ((SubAppInfo)localObject).getSubAppID();
      }
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        jid = ((String)localObject);
      }
      int i = paramResolveResult.getStatus().getStatusCode();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Enter onConnectionResult, connect to server result: ");
      ((StringBuilder)localObject).append(i);
      HMSLog.append("HuaweiApiClientImpl", ((StringBuilder)localObject).toString());
      if (com.huawei.hms.support.mozilla.client.Status.SUCCESS.equals(paramResolveResult.getStatus()))
      {
        if (paramResolveResult.getValue() != null) {
          ProtocolNegotiate.getInstance().negotiate(getValueprotocolVersion);
        }
        send(3);
        ready = null;
        paramResolveResult = err;
        if (paramResolveResult != null) {
          paramResolveResult.onConnected();
        }
        if (data != null) {
          writeGpxFile();
        }
        paramResolveResult = getApiMap().entrySet().iterator();
        while (paramResolveResult.hasNext())
        {
          localObject = (Map.Entry)paramResolveResult.next();
          if ((((TermSession)((Map.Entry)localObject).getKey()).getmConnetctPostList() != null) && (!((TermSession)((Map.Entry)localObject).getKey()).getmConnetctPostList().isEmpty()))
          {
            HMSLog.append("HuaweiApiClientImpl", "Enter onConnectionResult, get the ConnetctPostList ");
            localObject = ((TermSession)((Map.Entry)localObject).getKey()).getmConnetctPostList().iterator();
            while (((Iterator)localObject).hasNext())
            {
              localConnectionPostProcessor = (ConnectionPostProcessor)((Iterator)localObject).next();
              HMSLog.append("HuaweiApiClientImpl", "Enter onConnectionResult, processor.run");
              localConnectionPostProcessor.add(this, data);
            }
          }
        }
      }
      if ((paramResolveResult.getStatus() != null) && (paramResolveResult.getStatus().getStatusCode() == 1001))
      {
        connect();
        send(1);
        paramResolveResult = err;
        if (paramResolveResult != null) {
          paramResolveResult.onConnectionSuspended(3);
        }
      }
      else
      {
        connect();
        send(1);
        if (this$0 != null)
        {
          localObject = data;
          paramResolveResult = localConnectionPostProcessor;
          if (localObject != null)
          {
            paramResolveResult = localConnectionPostProcessor;
            if (((WeakReference)localObject).get() != null) {
              paramResolveResult = HuaweiApiAvailability.getInstance().getResolveErrorPendingIntent((Activity)data.get(), i);
            }
          }
          paramResolveResult = new ConnectionResult(i, paramResolveResult);
          this$0.onConnectionFailed(paramResolveResult);
          ready = paramResolveResult;
        }
      }
    }
    else
    {
      HMSLog.toString("HuaweiApiClientImpl", "Invalid onConnectionResult");
    }
  }
  
  private int execute()
  {
    int i = Util.getHmsVersion(context);
    if ((i != 0) && (i >= 20503000)) {
      return i;
    }
    i = addAll();
    if (set())
    {
      if (i < 20503000) {
        return 20503000;
      }
    }
    else if (i < 20600000) {
      return 20600000;
    }
    return i;
  }
  
  private void get(int paramInt)
  {
    Object localObject = data;
    if ((localObject != null) && (((WeakReference)localObject).get() != null))
    {
      localObject = HuaweiApiAvailability.getInstance().getResolveErrorPendingIntent((Activity)data.get(), paramInt);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("connect 2.0 fail: ");
      localStringBuilder.append(paramInt);
      HMSLog.append("HuaweiApiClientImpl", localStringBuilder.toString());
    }
    else
    {
      localObject = null;
    }
    localObject = new ConnectionResult(paramInt, (PendingIntent)localObject);
    this$0.onConnectionFailed((ConnectionResult)localObject);
    ready = ((ConnectionResult)localObject);
  }
  
  private ConnectInfo getLocationString()
  {
    Object localObject2 = new PackageManagerHelper(context).getPackageSignature(context.getPackageName());
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = "";
    }
    localObject2 = TAG;
    if (localObject2 == null) {
      localObject2 = null;
    } else {
      localObject2 = ((SubAppInfo)localObject2).getSubAppID();
    }
    return new ConnectInfo(getApiNameList(), mediaPlayer, (String)localObject1, (String)localObject2);
  }
  
  private void i()
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter sendConnectApiServceRequest.");
    ConnectService.connect(this, getLocationString()).setResultCallback(new f(null));
  }
  
  private void init()
  {
    Object localObject = e;
    try
    {
      if (h != null) {
        h.removeMessages(3);
      } else {
        h = new Handler(Looper.getMainLooper(), new HuaweiApiClientImpl.c(this));
      }
      boolean bool = h.sendEmptyMessageDelayed(3, 3000L);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("sendEmptyMessageDelayed for onConnectionResult 3 seconds. the result is : ");
      localStringBuilder.append(bool);
      HMSLog.d("HuaweiApiClientImpl", localStringBuilder.toString());
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void initialize(int paramInt)
  {
    if (paramInt == 2)
    {
      localObject = size;
      try
      {
        if (y != null)
        {
          y.removeMessages(paramInt);
          y = null;
        }
      }
      catch (Throwable localThrowable1)
      {
        throw localThrowable1;
      }
    }
    if (paramInt == 3)
    {
      localObject = e;
      try
      {
        if (h != null)
        {
          h.removeMessages(paramInt);
          h = null;
        }
      }
      catch (Throwable localThrowable2)
      {
        throw localThrowable2;
      }
    }
    Object localObject = size;
    try
    {
      if (y != null)
      {
        y.removeMessages(2);
        y = null;
      }
      return;
    }
    catch (Throwable localThrowable3)
    {
      throw localThrowable3;
    }
  }
  
  private void notifyProgress(int paramInt)
  {
    if (!Util.isAvailableLibExist(context))
    {
      get(paramInt);
      return;
    }
    if ((paramInt == 1) && (HMSPublishStateHolder.getPublishState() == 0))
    {
      WeakReference localWeakReference = new WeakReference(context);
      i localI = new i(paramInt);
      PackageNameManager.getInstance((Context)localWeakReference.get()).queryPackageName(localI);
      return;
    }
    get(paramInt);
  }
  
  private void putBoolean()
  {
    versionCode = new HuaweiApiClientImpl.a(this);
  }
  
  private void run()
  {
    connect();
    if (this$0 != null)
    {
      int i;
      if (UIUtil.isBackground(context)) {
        i = 7;
      } else {
        i = 6;
      }
      Object localObject2 = null;
      WeakReference localWeakReference = data;
      Object localObject1 = localObject2;
      if (localWeakReference != null)
      {
        localObject1 = localObject2;
        if (localWeakReference.get() != null) {
          localObject1 = HuaweiApiAvailability.getInstance().getResolveErrorPendingIntent((Activity)data.get(), i);
        }
      }
      localObject1 = new ConnectionResult(i, (PendingIntent)localObject1);
      this$0.onConnectionFailed((ConnectionResult)localObject1);
      ready = ((ConnectionResult)localObject1);
    }
  }
  
  private void send(int paramInt)
  {
    id.set(paramInt);
    if ((paramInt == 1) || (paramInt == 3) || (paramInt == 2))
    {
      lock.lock();
      try
      {
        notEmpty.signalAll();
        lock.unlock();
        return;
      }
      catch (Throwable localThrowable)
      {
        lock.unlock();
        throw localThrowable;
      }
    }
  }
  
  private boolean set()
  {
    Object localObject = prefs;
    if (localObject != null)
    {
      localObject = ((Map)localObject).keySet().iterator();
      while (((Iterator)localObject).hasNext()) {
        if ("HuaweiGame.API".equals(((TermSession)((Iterator)localObject).next()).getApiName())) {
          return true;
        }
      }
    }
    return false;
  }
  
  private void show()
  {
    Handler localHandler = y;
    if (localHandler != null) {
      localHandler.removeMessages(2);
    } else {
      y = new Handler(Looper.getMainLooper(), new HuaweiApiClientImpl.b(this));
    }
    y.sendEmptyMessageDelayed(2, 5000L);
  }
  
  private DisconnectInfo updatePrefs()
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject = prefs;
    if (localObject != null)
    {
      localObject = ((Map)localObject).keySet().iterator();
      while (((Iterator)localObject).hasNext()) {
        localArrayList.add(((TermSession)((Iterator)localObject).next()).getApiName());
      }
    }
    return new DisconnectInfo(mediaPlayer, localArrayList);
  }
  
  private void visitMaxs()
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter sendForceConnectApiServceRequest.");
    ConnectService.forceConnect(this, getLocationString()).setResultCallback(new f(null));
  }
  
  private void writeGpxFile()
  {
    if (started)
    {
      HMSLog.append("HuaweiApiClientImpl", "Connect notice has been shown.");
      return;
    }
    if (HuaweiApiAvailability.getInstance().isHuaweiMobileNoticeAvailable(context) == 0) {
      ConnectService.getNotice(this, 0, "5.0.5.300").setResultCallback(new h(null));
    }
  }
  
  public int asyncRequest(Bundle paramBundle, String paramString, int paramInt, com.huawei.hms.support.mozilla.client.ResultCallback paramResultCallback)
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter asyncRequest.");
    if ((paramResultCallback != null) && (paramString != null) && (paramBundle != null))
    {
      if (!innerIsConnected())
      {
        HMSLog.toString("HuaweiApiClientImpl", "client is unConnect.");
        return 907135003;
      }
      paramString = new ExtensionData(paramString, paramInt);
      ByteVector localByteVector = c.b(paramString.b());
      paramString.b(paramBundle);
      paramBundle = new RequestHeader(getAppID(), getPackageName(), 50005300, getSessionId());
      paramBundle.setApiNameList(getApiNameList());
      c = localByteVector.create(paramBundle, new Bundle());
      try
      {
        paramBundle = getService();
        paramBundle.a(paramString, new HuaweiApiClientImpl.d(this, paramResultCallback));
        return 0;
      }
      catch (RemoteException paramBundle)
      {
        paramString = new StringBuilder();
        paramString.append("remote exception:");
        paramString.append(paramBundle.getMessage());
        HMSLog.toString("HuaweiApiClientImpl", paramString.toString());
        return 907135001;
      }
    }
    HMSLog.toString("HuaweiApiClientImpl", "arguments is invalid.");
    return 907135000;
  }
  
  public void checkUpdate(Activity paramActivity, CheckUpdatelistener paramCheckUpdatelistener)
  {
    if (Util.isAvailableLibExist(context))
    {
      HMSLog.append("HuaweiApiClientImpl", "Enter checkUpdate");
      if (paramCheckUpdatelistener == null)
      {
        HMSLog.toString("HuaweiApiClientImpl", "listener is null!");
        return;
      }
      if ((paramActivity != null) && (!paramActivity.isFinishing()))
      {
        z = paramCheckUpdatelistener;
        if (versionCode == null) {
          putBoolean();
        }
        UpdateSdkAPI.checkClientOTAUpdate(paramActivity, versionCode, true, 0, true);
        return;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("checkUpdate, activity is illegal: ");
      localStringBuilder.append(paramActivity);
      HMSLog.toString("HuaweiApiClientImpl", localStringBuilder.toString());
      paramCheckUpdatelistener.onResult(-1);
      return;
    }
    HMSLog.append("HuaweiApiClientImpl", "available lib does not exist.");
  }
  
  public void connect(int paramInt)
  {
    connect(null);
  }
  
  public void connect(Activity paramActivity)
  {
    HMSLog.append("HuaweiApiClientImpl", "====== HMSSDK version: 50005300 ======");
    int i = id.get();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Enter connect, Connection Status: ");
    localStringBuilder.append(i);
    HMSLog.append("HuaweiApiClientImpl", localStringBuilder.toString());
    if ((i != 3) && (i != 5) && (i != 2))
    {
      if (i == 4) {
        return;
      }
      if (paramActivity != null)
      {
        data = new WeakReference(paramActivity);
        state = new WeakReference(paramActivity);
      }
      if (TextUtils.isEmpty(user)) {
        paramActivity = Util.getAppId(context);
      } else {
        paramActivity = user;
      }
      jid = paramActivity;
      i = execute();
      paramActivity = new StringBuilder();
      paramActivity.append("connect minVersion:");
      paramActivity.append(i);
      HMSLog.append("HuaweiApiClientImpl", paramActivity.toString());
      HuaweiApiAvailability.setServicesVersionCode(i);
      i = HuaweiMobileServicesUtil.isHuaweiMobileServicesAvailable(context, i);
      paramActivity = new StringBuilder();
      paramActivity.append("In connect, isHuaweiMobileServicesAvailable result: ");
      paramActivity.append(i);
      HMSLog.append("HuaweiApiClientImpl", paramActivity.toString());
      connected = HMSPackageManager.getInstance(context).getHmsVersionCode();
      if (i == 0)
      {
        send(5);
        if (mService == null)
        {
          call();
          return;
        }
        send(2);
        i();
        init();
        return;
      }
      if (this$0 != null) {
        notifyProgress(i);
      }
    }
  }
  
  public void connectForeground()
  {
    HMSLog.append("HuaweiApiClientImpl", "====== HMSSDK version: 50005300 ======");
    int i = id.get();
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Enter forceConnect, Connection Status: ");
    ((StringBuilder)localObject).append(i);
    HMSLog.append("HuaweiApiClientImpl", ((StringBuilder)localObject).toString());
    if ((i != 3) && (i != 5) && (i != 2))
    {
      if (i == 4) {
        return;
      }
      if (TextUtils.isEmpty(user)) {
        localObject = Util.getAppId(context);
      } else {
        localObject = user;
      }
      jid = ((String)localObject);
      visitMaxs();
    }
  }
  
  public void disableLifeCycleManagement(Activity paramActivity)
  {
    if (last_position >= 0)
    {
      paramActivity = AutoLifecycleFragment.getInstance(paramActivity);
      if (paramActivity == null) {
        return;
      }
      paramActivity.stopAutoManage(last_position);
      return;
    }
    throw new IllegalStateException("disableLifeCycleManagement failed");
  }
  
  public PendingResult discardAndReconnect()
  {
    return new e(null, null);
  }
  
  public void disconnect()
  {
    int i = id.get();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Enter disconnect, Connection Status: ");
    localStringBuilder.append(i);
    HMSLog.append("HuaweiApiClientImpl", localStringBuilder.toString());
    switch (i)
    {
    default: 
      
    case 5: 
      initialize(2);
      send(4);
      return;
    case 3: 
      send(4);
      doDisconnect();
      return;
    case 2: 
      send(4);
    }
  }
  
  public Map getApiMap()
  {
    return prefs;
  }
  
  public List getApiNameList()
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject = prefs;
    if (localObject != null)
    {
      localObject = ((Map)localObject).keySet().iterator();
      while (((Iterator)localObject).hasNext()) {
        localArrayList.add(((TermSession)((Iterator)localObject).next()).getApiName());
      }
    }
    return localArrayList;
  }
  
  public String getAppID()
  {
    return jid;
  }
  
  public ConnectionResult getConnectionResult(TermSession paramTermSession)
  {
    if (isConnected())
    {
      ready = null;
      return new ConnectionResult(0, null);
    }
    paramTermSession = ready;
    if (paramTermSession != null) {
      return paramTermSession;
    }
    return new ConnectionResult(13, null);
  }
  
  public Context getContext()
  {
    return context;
  }
  
  public String getCpID()
  {
    return nick;
  }
  
  public String getPackageName()
  {
    return context.getPackageName();
  }
  
  public List getPermissionInfos()
  {
    return added;
  }
  
  public List getScopes()
  {
    return mediaPlayer;
  }
  
  public com.huawei.hms.core.aidl.Object getService()
  {
    return mService;
  }
  
  public String getSessionId()
  {
    return mSessionId;
  }
  
  public final SubAppInfo getSubAppInfo()
  {
    return TAG;
  }
  
  public Activity getTopActivity()
  {
    WeakReference localWeakReference = state;
    if (localWeakReference == null) {
      return null;
    }
    return (Activity)localWeakReference.get();
  }
  
  public String getTransportName()
  {
    return IPCTransport.class.getName();
  }
  
  public boolean hasConnectedApi(TermSession paramTermSession)
  {
    return isConnected();
  }
  
  public boolean hasConnectionFailureListener(HuaweiApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
  {
    Checker.checkNonNull(paramOnConnectionFailedListener, "onConnectionFailedListener should not be null");
    Object localObject = session;
    try
    {
      return this$0 == paramOnConnectionFailedListener;
    }
    catch (Throwable paramOnConnectionFailedListener)
    {
      throw paramOnConnectionFailedListener;
    }
  }
  
  public boolean hasConnectionSuccessListener(HuaweiApiClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    Checker.checkNonNull(paramConnectionCallbacks, "connectionCallbacksListener should not be null");
    Object localObject = session;
    try
    {
      return err == paramConnectionCallbacks;
    }
    catch (Throwable paramConnectionCallbacks)
    {
      throw paramConnectionCallbacks;
    }
  }
  
  public ConnectionResult holdUpConnect()
  {
    if (Looper.myLooper() != Looper.getMainLooper()) {
      lock.lock();
    }
    for (;;)
    {
      try
      {
        connect(null);
        bool = isConnecting();
        if (bool) {
          localObject = notEmpty;
        }
      }
      catch (Throwable localThrowable)
      {
        boolean bool;
        Object localObject;
        lock.unlock();
        throw localThrowable;
      }
      try
      {
        ((Condition)localObject).await();
      }
      catch (InterruptedException localInterruptedException) {}
    }
    Thread.currentThread().interrupt();
    localObject = new ConnectionResult(15, null);
    lock.unlock();
    return localObject;
    bool = isConnected();
    if (bool)
    {
      ready = null;
      localObject = new ConnectionResult(0, null);
      lock.unlock();
      return localObject;
    }
    localObject = ready;
    if (localObject != null)
    {
      localObject = ready;
      lock.unlock();
      return localObject;
    }
    localObject = new ConnectionResult(13, null);
    lock.unlock();
    return localObject;
    throw new IllegalStateException("blockingConnect must not be called on the UI thread");
  }
  
  public ConnectionResult holdUpConnect(long paramLong, TimeUnit paramTimeUnit)
  {
    if (Looper.myLooper() != Looper.getMainLooper()) {
      lock.lock();
    }
    for (;;)
    {
      try
      {
        connect(null);
        paramLong = paramTimeUnit.toNanos(paramLong);
        bool = isConnecting();
        if (bool)
        {
          if (paramLong <= 0L)
          {
            disconnect();
            paramTimeUnit = new ConnectionResult(14, null);
            lock.unlock();
            return paramTimeUnit;
          }
          paramTimeUnit = notEmpty;
        }
      }
      catch (Throwable paramTimeUnit)
      {
        boolean bool;
        lock.unlock();
        throw paramTimeUnit;
      }
      try
      {
        paramLong = paramTimeUnit.awaitNanos(paramLong);
      }
      catch (InterruptedException paramTimeUnit) {}
    }
    Thread.currentThread().interrupt();
    paramTimeUnit = new ConnectionResult(15, null);
    lock.unlock();
    return paramTimeUnit;
    bool = isConnected();
    if (bool)
    {
      ready = null;
      paramTimeUnit = new ConnectionResult(0, null);
      lock.unlock();
      return paramTimeUnit;
    }
    paramTimeUnit = ready;
    if (paramTimeUnit != null)
    {
      paramTimeUnit = ready;
      lock.unlock();
      return paramTimeUnit;
    }
    paramTimeUnit = new ConnectionResult(13, null);
    lock.unlock();
    return paramTimeUnit;
    throw new IllegalStateException("blockingConnect must not be called on the UI thread");
  }
  
  public boolean innerIsConnected()
  {
    return (id.get() == 3) || (id.get() == 4);
  }
  
  public boolean isConnected()
  {
    if (connected == 0) {
      connected = HMSPackageManager.getInstance(context).getHmsVersionCode();
    }
    if (connected < 20504000)
    {
      long l = System.currentTimeMillis() - socket;
      if ((l > 0L) && (l < 300000L)) {
        return innerIsConnected();
      }
      if (innerIsConnected())
      {
        Object localObject = ((com.huawei.hms.support.mozilla.ResolveResult)ConnectService.checkconnect(this, new CheckConnectInfo()).awaitOnAnyThread(2000L, TimeUnit.MILLISECONDS)).getStatus();
        if (((com.huawei.hms.support.mozilla.client.Status)localObject).isSuccess())
        {
          socket = System.currentTimeMillis();
          return true;
        }
        int i = ((com.huawei.hms.support.mozilla.client.Status)localObject).getStatusCode();
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("isConnected is false, statuscode:");
        ((StringBuilder)localObject).append(i);
        HMSLog.append("HuaweiApiClientImpl", ((StringBuilder)localObject).toString());
        if (i != 907135004)
        {
          connect();
          send(1);
          socket = System.currentTimeMillis();
        }
      }
      return false;
    }
    return innerIsConnected();
  }
  
  public boolean isConnecting()
  {
    int i = id.get();
    return (i == 2) || (i == 5);
  }
  
  public void onPause(Activity paramActivity)
  {
    HMSLog.append("HuaweiApiClientImpl", "onPause");
  }
  
  public void onResume(Activity paramActivity)
  {
    if (paramActivity != null)
    {
      HMSLog.append("HuaweiApiClientImpl", "onResume");
      state = new WeakReference(paramActivity);
    }
  }
  
  public void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter onServiceConnected.");
    initialize(2);
    mService = LocationBackend.Stub.asInterface(paramIBinder);
    if (mService == null)
    {
      HMSLog.toString("HuaweiApiClientImpl", "In onServiceConnected, mCoreService must not be null.");
      connect();
      send(1);
      if (this$0 != null)
      {
        paramIBinder = null;
        WeakReference localWeakReference = data;
        paramComponentName = paramIBinder;
        if (localWeakReference != null)
        {
          paramComponentName = paramIBinder;
          if (localWeakReference.get() != null) {
            paramComponentName = HuaweiApiAvailability.getInstance().getResolveErrorPendingIntent((Activity)data.get(), 10);
          }
        }
        paramComponentName = new ConnectionResult(10, paramComponentName);
        this$0.onConnectionFailed(paramComponentName);
        ready = paramComponentName;
      }
    }
    else
    {
      if (id.get() == 5)
      {
        send(2);
        i();
        init();
        return;
      }
      if (id.get() != 3) {
        connect();
      }
    }
  }
  
  public void onServiceDisconnected(ComponentName paramComponentName)
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter onServiceDisconnected.");
    mService = null;
    send(1);
    paramComponentName = err;
    if (paramComponentName != null) {
      paramComponentName.onConnectionSuspended(1);
    }
  }
  
  public void print(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString) {}
  
  public void reconnect()
  {
    disconnect();
    connect(null);
  }
  
  public void removeConnectionFailureListener(HuaweiApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
  {
    Checker.checkNonNull(paramOnConnectionFailedListener, "onConnectionFailedListener should not be null");
    Object localObject = session;
    try
    {
      if (this$0 != paramOnConnectionFailedListener) {
        HMSLog.get("HuaweiApiClientImpl", "unregisterConnectionFailedListener: this onConnectionFailedListener has not been registered");
      } else {
        this$0 = null;
      }
      return;
    }
    catch (Throwable paramOnConnectionFailedListener)
    {
      throw paramOnConnectionFailedListener;
    }
  }
  
  public void removeConnectionSuccessListener(HuaweiApiClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    Checker.checkNonNull(paramConnectionCallbacks, "connectionCallbacksListener should not be null");
    Object localObject = session;
    try
    {
      if (err != paramConnectionCallbacks) {
        HMSLog.get("HuaweiApiClientImpl", "unregisterConnectionCallback: this connectionCallbacksListener has not been registered");
      } else {
        err = null;
      }
      return;
    }
    catch (Throwable paramConnectionCallbacks)
    {
      throw paramConnectionCallbacks;
    }
  }
  
  public void setApiMap(Map paramMap)
  {
    prefs = paramMap;
  }
  
  protected void setAutoLifecycleClientId(int paramInt)
  {
    last_position = paramInt;
  }
  
  public void setConnectionCallbacks(HuaweiApiClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    err = paramConnectionCallbacks;
  }
  
  public void setConnectionFailedListener(HuaweiApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
  {
    this$0 = paramOnConnectionFailedListener;
  }
  
  public void setHasShowNotice(boolean paramBoolean)
  {
    started = paramBoolean;
  }
  
  public void setPermissionInfos(List paramList)
  {
    added = paramList;
  }
  
  public void setScopes(List paramList)
  {
    mediaPlayer = paramList;
  }
  
  public boolean setSubAppInfo(SubAppInfo paramSubAppInfo)
  {
    HMSLog.append("HuaweiApiClientImpl", "Enter setSubAppInfo");
    if (paramSubAppInfo == null)
    {
      HMSLog.toString("HuaweiApiClientImpl", "subAppInfo is null");
      return false;
    }
    String str2 = paramSubAppInfo.getSubAppID();
    if (TextUtils.isEmpty(str2))
    {
      HMSLog.toString("HuaweiApiClientImpl", "subAppId is empty");
      return false;
    }
    String str1;
    if (TextUtils.isEmpty(user)) {
      str1 = Util.getAppId(context);
    } else {
      str1 = user;
    }
    if (str2.equals(str1))
    {
      HMSLog.toString("HuaweiApiClientImpl", "subAppId is host appid");
      return false;
    }
    TAG = new SubAppInfo(paramSubAppInfo);
    return true;
  }
  
  class e
    extends com.huawei.hms.support.api.PendingResultImpl<com.huawei.hms.support.api.client.Status, IMessageEntity>
  {
    public e(String paramString, IMessageEntity paramIMessageEntity)
    {
      super(paramString, paramIMessageEntity);
    }
    
    public com.huawei.hms.support.mozilla.client.Status onComplete(IMessageEntity paramIMessageEntity)
    {
      return new com.huawei.hms.support.mozilla.client.Status(0);
    }
  }
  
  class f
    implements com.huawei.hms.support.api.client.ResultCallback<com.huawei.hms.support.api.ResolveResult<com.huawei.hms.support.api.entity.core.ConnectResp>>
  {
    private f() {}
    
    public void onResult(com.huawei.hms.support.mozilla.ResolveResult paramResolveResult)
    {
      new Handler(Looper.getMainLooper()).post(new HuaweiApiClientImpl.f.a(this, paramResolveResult));
    }
  }
  
  class g
    implements com.huawei.hms.support.api.client.ResultCallback<com.huawei.hms.support.api.ResolveResult<DisconnectResp>>
  {
    private g() {}
    
    public void onResult(com.huawei.hms.support.mozilla.ResolveResult paramResolveResult)
    {
      new Handler(Looper.getMainLooper()).post(new HuaweiApiClientImpl.g.a(this, paramResolveResult));
    }
  }
  
  class h
    implements com.huawei.hms.support.api.client.ResultCallback<com.huawei.hms.support.api.ResolveResult<com.huawei.hms.support.api.entity.core.JosGetNoticeResp>>
  {
    private h() {}
    
    public void call(com.huawei.hms.support.mozilla.ResolveResult paramResolveResult)
    {
      if ((paramResolveResult != null) && (paramResolveResult.getStatus().isSuccess()))
      {
        Object localObject = (com.huawei.hms.support.mozilla.entity.core.JosGetNoticeResp)paramResolveResult.getValue();
        paramResolveResult = ((com.huawei.hms.support.mozilla.entity.core.JosGetNoticeResp)localObject).getNoticeIntent();
        if ((paramResolveResult != null) && (((JosBaseResp)localObject).getStatusCode() == 0))
        {
          HMSLog.append("HuaweiApiClientImpl", "get notice has intent.");
          localObject = Util.getValidActivity((Activity)HuaweiApiClientImpl.access$getData(HuaweiApiClientImpl.this).get(), getTopActivity());
          if (localObject == null)
          {
            HMSLog.toString("HuaweiApiClientImpl", "showNotice no valid activity!");
            return;
          }
          HuaweiApiClientImpl.access$setMIsConnected(HuaweiApiClientImpl.this, true);
          ((Activity)localObject).startActivity(paramResolveResult);
        }
      }
    }
  }
  
  class i
    implements PackageNameManager.QueryPublishCallback
  {
    private int j;
    
    public i(int paramInt)
    {
      j = paramInt;
    }
    
    public void onQueryResult()
    {
      HuaweiApiClientImpl.a(HuaweiApiClientImpl.this, j);
    }
  }
}
