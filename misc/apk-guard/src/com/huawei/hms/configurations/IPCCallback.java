package com.huawei.hms.configurations;

import android.os.RemoteException;
import android.text.TextUtils;
import com.huawei.hms.core.aidl.ByteVector;
import com.huawei.hms.core.aidl.ExtensionData;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.core.aidl.IPlayMedia_0_8.Stub;
import com.huawei.hms.core.aidl.ResponseHeader;
import com.huawei.hms.core.aidl.c;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.transport.DatagramTransport.CallBack;

public class IPCCallback
  extends IPlayMedia_0_8.Stub
{
  private final Class<? extends IMessageEntity> c;
  private final DatagramTransport.CallBack index;
  
  public IPCCallback(Class paramClass, DatagramTransport.CallBack paramCallBack)
  {
    c = paramClass;
    index = paramCallBack;
  }
  
  public void call(ExtensionData paramExtensionData)
    throws RemoteException
  {
    if ((paramExtensionData != null) && (!TextUtils.isEmpty(e)))
    {
      ByteVector localByteVector = c.b(paramExtensionData.b());
      Object localObject1 = null;
      Object localObject2;
      if (paramExtensionData.status() > 0)
      {
        IMessageEntity localIMessageEntity = newResponseInstance();
        localObject2 = localIMessageEntity;
        localObject1 = localObject2;
        if (localIMessageEntity != null)
        {
          localByteVector.get(paramExtensionData.getValue(), localIMessageEntity);
          localObject1 = localObject2;
        }
      }
      if (c != null)
      {
        localObject2 = new ResponseHeader();
        localByteVector.get(c, (IMessageEntity)localObject2);
        index.onCallback(((ResponseHeader)localObject2).getStatusCode(), localObject1);
        return;
      }
      index.onCallback(0, localObject1);
      return;
    }
    HMSLog.toString("IPCCallback", "In call, URI cannot be empty.");
    throw new RemoteException();
  }
  
  protected IMessageEntity newResponseInstance()
  {
    Object localObject = c;
    if (localObject != null)
    {
      try
      {
        localObject = ((Class)localObject).newInstance();
        return (IMessageEntity)localObject;
      }
      catch (InstantiationException localInstantiationException) {}catch (IllegalAccessException localIllegalAccessException) {}
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("In newResponseInstance, instancing exception.");
      localStringBuilder.append(((ReflectiveOperationException)localIllegalAccessException).getMessage());
      HMSLog.toString("IPCCallback", localStringBuilder.toString());
    }
    return null;
  }
}
