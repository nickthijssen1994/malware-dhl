package com.huawei.hms.configurations;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.view.View;
import com.huawei.hms.api.Api;
import com.huawei.hms.api.Api.ApiOptions;
import com.huawei.hms.common.internal.AutoLifecycleFragment;
import com.huawei.hms.common.internal.Preconditions;
import com.huawei.hms.support.api.entity.auth.PermissionInfo;
import com.huawei.hms.support.hianalytics.HiAnalyticsUtil;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.client.AidlApiClient;
import com.huawei.hms.support.mozilla.client.PendingResult;
import com.huawei.hms.support.mozilla.client.SubAppInfo;
import com.huawei.hms.utils.Checker;
import com.huawei.hms.utils.HMSBIInitializer;
import com.huawei.hms.utils.ResourceLoaderUtil;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public abstract class HuaweiApiClient
  implements AidlApiClient
{
  public HuaweiApiClient() {}
  
  public abstract void checkUpdate(Activity paramActivity, CheckUpdatelistener paramCheckUpdatelistener);
  
  public void connect(int paramInt)
  {
    throw new UnsupportedOperationException();
  }
  
  public abstract void connect(Activity paramActivity);
  
  public abstract void connectForeground();
  
  public abstract void disableLifeCycleManagement(Activity paramActivity);
  
  public abstract PendingResult discardAndReconnect();
  
  public abstract void disconnect();
  
  public abstract Map getApiMap();
  
  public abstract ConnectionResult getConnectionResult(TermSession paramTermSession);
  
  public abstract List getPermissionInfos();
  
  public abstract List getScopes();
  
  public abstract Activity getTopActivity();
  
  public abstract boolean hasConnectedApi(TermSession paramTermSession);
  
  public abstract boolean hasConnectionFailureListener(OnConnectionFailedListener paramOnConnectionFailedListener);
  
  public abstract boolean hasConnectionSuccessListener(ConnectionCallbacks paramConnectionCallbacks);
  
  public abstract ConnectionResult holdUpConnect();
  
  public abstract ConnectionResult holdUpConnect(long paramLong, TimeUnit paramTimeUnit);
  
  public abstract boolean isConnected();
  
  public abstract boolean isConnecting();
  
  public abstract void onPause(Activity paramActivity);
  
  public abstract void onResume(Activity paramActivity);
  
  public abstract void print(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString);
  
  public abstract void reconnect();
  
  public abstract void removeConnectionFailureListener(OnConnectionFailedListener paramOnConnectionFailedListener);
  
  public abstract void removeConnectionSuccessListener(ConnectionCallbacks paramConnectionCallbacks);
  
  public abstract void setConnectionCallbacks(ConnectionCallbacks paramConnectionCallbacks);
  
  public abstract void setConnectionFailedListener(OnConnectionFailedListener paramOnConnectionFailedListener);
  
  public abstract boolean setSubAppInfo(SubAppInfo paramSubAppInfo);
  
  public final class Builder
  {
    private final List<com.huawei.hms.support.api.entity.auth.Scope> actions = new ArrayList();
    private final Context activity;
    private int currentPage;
    private HuaweiApiClient.ConnectionCallbacks descriptor;
    private HuaweiApiClient.OnConnectionFailedListener fields;
    private final List<PermissionInfo> images = new ArrayList();
    private final Map<Api<?>, Api.ApiOptions> labels = new HashMap();
    private Activity pages;
    
    public Builder()
      throws NullPointerException
    {
      Checker.checkNonNull(this$1, "context must not be null.");
      activity = this$1.getApplicationContext();
      currentPage = -1;
      ResourceLoaderUtil.setmContext(activity);
      installReferrer(this$1);
    }
    
    private void changePath(HuaweiApiClient paramHuaweiApiClient)
    {
      AutoLifecycleFragment localAutoLifecycleFragment = AutoLifecycleFragment.getInstance(pages);
      if (localAutoLifecycleFragment == null)
      {
        HMSLog.toString("HuaweiApiClient.builder", "lifecycleFragment must not be NULL here");
        return;
      }
      localAutoLifecycleFragment.startAutoMange(currentPage, paramHuaweiApiClient);
    }
    
    private void installReferrer(Context paramContext)
    {
      HMSBIInitializer.getInstance(paramContext).initBI();
    }
    
    public Builder addApi(TermSession paramTermSession)
    {
      labels.put(paramTermSession, null);
      if ("HuaweiGame.API".equals(paramTermSession.getApiName()))
      {
        paramTermSession = HiAnalyticsUtil.getInstance();
        Context localContext = activity.getApplicationContext();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("|");
        localStringBuilder.append(System.currentTimeMillis());
        paramTermSession.onEvent(localContext, "15060106", localStringBuilder.toString());
      }
      return this;
    }
    
    public Builder addApi(TermSession paramTermSession, Api.ApiOptions.HasOptions paramHasOptions)
    {
      Checker.checkNonNull(paramTermSession, "Api must not be null");
      Checker.checkNonNull(paramHasOptions, "Null options are not permitted for this Api");
      labels.put(paramTermSession, paramHasOptions);
      if (paramTermSession.getOptions() != null)
      {
        List localList = paramTermSession.getOptions().getScopeList(paramHasOptions);
        actions.addAll(localList);
        paramTermSession = paramTermSession.getOptions().getPermissionInfoList(paramHasOptions);
        images.addAll(paramTermSession);
      }
      return this;
    }
    
    public Builder addApiWithScope(TermSession paramTermSession, Api.ApiOptions.HasOptions paramHasOptions, com.huawei.hms.support.mozilla.entity.auth.Scope... paramVarArgs)
    {
      Checker.checkNonNull(paramTermSession, "Api must not be null");
      Checker.checkNonNull(paramHasOptions, "Null options are not permitted for this Api");
      Checker.checkNonNull(paramVarArgs, "Scopes must not be null");
      labels.put(paramTermSession, paramHasOptions);
      if (paramTermSession.getOptions() != null)
      {
        List localList = paramTermSession.getOptions().getScopeList(paramHasOptions);
        actions.addAll(localList);
        paramTermSession = paramTermSession.getOptions().getPermissionInfoList(paramHasOptions);
        images.addAll(paramTermSession);
      }
      paramTermSession = new ArrayList(Arrays.asList(paramVarArgs));
      actions.addAll(paramTermSession);
      return this;
    }
    
    public Builder addApiWithScope(TermSession paramTermSession, com.huawei.hms.support.mozilla.entity.auth.Scope... paramVarArgs)
    {
      Checker.checkNonNull(paramTermSession, "Api must not be null");
      Checker.checkNonNull(paramVarArgs, "Scopes must not be null");
      labels.put(paramTermSession, null);
      paramTermSession = new ArrayList(Arrays.asList(paramVarArgs));
      actions.addAll(paramTermSession);
      return this;
    }
    
    public Builder addConnectionCallbacks(HuaweiApiClient.ConnectionCallbacks paramConnectionCallbacks)
    {
      Checker.checkNonNull(paramConnectionCallbacks, "listener must not be null.");
      descriptor = paramConnectionCallbacks;
      return this;
    }
    
    public Builder addOnConnectionFailedListener(HuaweiApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      Checker.checkNonNull(paramOnConnectionFailedListener, "listener must not be null.");
      fields = paramOnConnectionFailedListener;
      return this;
    }
    
    public Builder addScope(com.huawei.hms.support.mozilla.entity.auth.Scope paramScope)
    {
      Checker.checkNonNull(paramScope, "scope must not be null.");
      actions.add(paramScope);
      return this;
    }
    
    public Builder allowLifeCycleManagement(Activity paramActivity, int paramInt, HuaweiApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      if (paramInt >= 0)
      {
        currentPage = paramInt;
        pages = ((Activity)Preconditions.checkNotNull(paramActivity, "activity must not be Null."));
        return this;
      }
      throw new IllegalArgumentException("allowLifeCycleManagement id should be positive");
    }
    
    public Builder allowLifeCycleManagement(Activity paramActivity, HuaweiApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      return allowLifeCycleManagement(paramActivity, 0, paramOnConnectionFailedListener);
    }
    
    public Builder applyDefaultAccount()
    {
      return this;
    }
    
    public HuaweiApiClient build()
    {
      addApi(new TermSession("Core.API"));
      HuaweiApiClientImpl localHuaweiApiClientImpl = new HuaweiApiClientImpl(activity);
      localHuaweiApiClientImpl.setScopes(actions);
      localHuaweiApiClientImpl.setPermissionInfos(images);
      localHuaweiApiClientImpl.setApiMap(labels);
      localHuaweiApiClientImpl.setConnectionCallbacks(descriptor);
      localHuaweiApiClientImpl.setConnectionFailedListener(fields);
      localHuaweiApiClientImpl.setAutoLifecycleClientId(currentPage);
      if (currentPage >= 0) {
        changePath(localHuaweiApiClientImpl);
      }
      return localHuaweiApiClientImpl;
    }
    
    public Builder setAccountName(String paramString)
    {
      return this;
    }
    
    public Builder setHandler(Handler paramHandler)
    {
      return this;
    }
    
    public Builder setPopupsGravity(int paramInt)
    {
      return this;
    }
    
    public Builder setViewForPopups(View paramView)
    {
      return this;
    }
  }
  
  public abstract interface ConnectionCallbacks
  {
    public static final int CAUSE_API_CLIENT_EXPIRED = 3;
    public static final int CAUSE_NETWORK_LOST = 2;
    public static final int CAUSE_SERVICE_DISCONNECTED = 1;
    
    public abstract void onConnected();
    
    public abstract void onConnectionSuspended(int paramInt);
  }
  
  public abstract interface OnConnectionFailedListener
  {
    public abstract void onConnectionFailed(ConnectionResult paramConnectionResult);
  }
}
