package com.huawei.hms.configurations;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.IntentSender.SendIntentException;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import com.huawei.hms.common.internal.Objects;

public final class ConnectionResult
  implements Parcelable
{
  public static final int API_UNAVAILABLE = 1000;
  public static final int BINDFAIL_RESOLUTION_BACKGROUND = 7;
  public static final int BINDFAIL_RESOLUTION_REQUIRED = 6;
  public static final int CANCELED = 13;
  public static final Parcelable.Creator<com.huawei.hms.api.ConnectionResult> CREATOR = new a();
  public static final int DEVELOPER_ERROR = 10;
  public static final int DRIVE_EXTERNAL_STORAGE_REQUIRED = 9002;
  public static final int INTERNAL_ERROR = 8;
  public static final int INTERRUPTED = 15;
  public static final int INVALID_ACCOUNT = 5;
  public static final int LICENSE_CHECK_FAILED = 11;
  public static final int NETWORK_ERROR = 9000;
  public static final int RESOLUTION_REQUIRED = 9001;
  public static final int RESTRICTED_PROFILE = 9003;
  public static final int SERVICE_DISABLED = 3;
  public static final int SERVICE_INVALID = 9;
  public static final int SERVICE_MISSING = 1;
  public static final int SERVICE_MISSING_PERMISSION = 19;
  public static final int SERVICE_UNSUPPORTED = 21;
  public static final int SERVICE_UPDATING = 9004;
  public static final int SERVICE_VERSION_UPDATE_REQUIRED = 2;
  public static final int SIGN_IN_FAILED = 9005;
  public static final int SIGN_IN_REQUIRED = 4;
  public static final int SUCCESS = 0;
  public static final int TIMEOUT = 14;
  private int a = 1;
  private String c = null;
  private int d;
  private PendingIntent f = null;
  
  public ConnectionResult(int paramInt)
  {
    this(paramInt, null);
  }
  
  ConnectionResult(int paramInt1, int paramInt2, PendingIntent paramPendingIntent, String paramString)
  {
    a = paramInt1;
    d = paramInt2;
    f = paramPendingIntent;
    c = paramString;
  }
  
  public ConnectionResult(int paramInt, PendingIntent paramPendingIntent)
  {
    this(paramInt, paramPendingIntent, null);
  }
  
  public ConnectionResult(int paramInt, PendingIntent paramPendingIntent, String paramString)
  {
    this(1, paramInt, paramPendingIntent, paramString);
  }
  
  private ConnectionResult(Parcel paramParcel)
  {
    a = paramParcel.readInt();
    d = paramParcel.readInt();
    c = paramParcel.readString();
    paramParcel = (Parcelable)PendingIntent.CREATOR.createFromParcel(paramParcel);
    if (paramParcel != null) {
      f = ((PendingIntent)paramParcel);
    }
  }
  
  static String toString(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      break;
    case 4: 
    case 5: 
    case 12: 
    case 15: 
    case 16: 
    case 17: 
    case 18: 
    case 20: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("UNKNOWN_ERROR_CODE(");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(")");
      return localStringBuilder.toString();
    case 21: 
      return "API_VERSION_UPDATE_REQUIRED";
    case 19: 
      return "SERVICE_MISSING_PERMISSION";
    case 14: 
      return "TIMEOUT";
    case 13: 
      return "CANCELED";
    case 11: 
      return "LICENSE_CHECK_FAILED";
    case 10: 
      return "DEVELOPER_ERROR";
    case 9: 
      return "SERVICE_INVALID";
    case 8: 
      return "INTERNAL_ERROR";
    case 7: 
      return "NETWORK_ERROR";
    case 6: 
      return "RESOLUTION_REQUIRED";
    case 3: 
      return "SERVICE_DISABLED";
    case 2: 
      return "SERVICE_VERSION_UPDATE_REQUIRED";
    case 1: 
      return "SERVICE_MISSING";
    case 0: 
      return "SUCCESS";
    }
    return "UNKNOWN";
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    Object localObject;
    String str;
    if (((paramObject instanceof ConnectionResult)) && (a == a) && (d == d))
    {
      localObject = c;
      str = c;
    }
    try
    {
      boolean bool = ((String)localObject).equals(str);
      if (bool)
      {
        localObject = f;
        paramObject = f;
        bool = ((PendingIntent)localObject).equals(paramObject);
        if (bool) {
          return true;
        }
      }
      return false;
    }
    catch (Exception paramObject) {}
    return false;
  }
  
  public int getErrorCode()
  {
    return d;
  }
  
  public final String getErrorMessage()
  {
    return c;
  }
  
  public final PendingIntent getResolution()
  {
    return f;
  }
  
  public final boolean hasResolution()
  {
    return HuaweiApiAvailability.getInstance().isUserResolvableError(d, f);
  }
  
  public int hashCode()
  {
    return Objects.hashCode(new Object[] { Long.valueOf(a), Long.valueOf(getErrorCode()), getErrorMessage(), f });
  }
  
  public final boolean isSuccess()
  {
    return d == 0;
  }
  
  public final void startResolutionForResult(Activity paramActivity, int paramInt)
    throws IntentSender.SendIntentException
  {
    if (hasResolution()) {
      HuaweiApiAvailability.getInstance().resolveError(paramActivity, d, paramInt, f);
    }
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    paramParcel.writeInt(a);
    paramParcel.writeInt(d);
    paramParcel.writeString(c);
    f.writeToParcel(paramParcel, paramInt);
  }
  
  final class a
    implements Parcelable.Creator<com.huawei.hms.api.ConnectionResult>
  {
    a() {}
    
    public ConnectionResult createFromParcel(Parcel paramParcel)
    {
      return new ConnectionResult(paramParcel, null);
    }
    
    public ConnectionResult[] newArray(int paramInt)
    {
      return new ConnectionResult[paramInt];
    }
  }
}
