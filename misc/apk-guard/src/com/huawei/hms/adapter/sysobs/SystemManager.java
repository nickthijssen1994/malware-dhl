package com.huawei.hms.adapter.sysobs;

import android.content.Intent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class SystemManager
{
  public static SystemManager SFTP = new SystemManager();
  public static final Object lastLocation = new Object();
  public static SystemNotifier upnp = new a();
  
  public SystemManager() {}
  
  public static SystemManager getInstance()
  {
    return SFTP;
  }
  
  public static SystemNotifier getSystemNotifier()
  {
    return upnp;
  }
  
  public void notifyResolutionResult(Intent paramIntent, String paramString)
  {
    upnp.notifyObservers(paramIntent, paramString);
  }
  
  public void notifyUpdateResult(int paramInt)
  {
    upnp.notifyObservers(paramInt);
  }
  
  public static final class a
    implements SystemNotifier
  {
    public final List<SystemObserver> mObservers = new ArrayList();
    
    public a() {}
    
    public void notifyObservers(int paramInt)
    {
      Object localObject = SystemManager.update();
      try
      {
        Iterator localIterator = mObservers.iterator();
        while (localIterator.hasNext()) {
          if (((SystemObserver)localIterator.next()).onUpdateResult(paramInt)) {
            localIterator.remove();
          }
        }
        return;
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    
    public void notifyObservers(Intent paramIntent, String paramString)
    {
      Object localObject = SystemManager.update();
      try
      {
        Iterator localIterator = mObservers.iterator();
        while (localIterator.hasNext()) {
          if (((SystemObserver)localIterator.next()).onSolutionResult(paramIntent, paramString)) {
            localIterator.remove();
          }
        }
        return;
      }
      catch (Throwable paramIntent)
      {
        throw paramIntent;
      }
    }
    
    public void registerObserver(SystemObserver paramSystemObserver)
    {
      if (paramSystemObserver == null) {
        return;
      }
      if (!mObservers.contains(paramSystemObserver))
      {
        Object localObject = SystemManager.update();
        try
        {
          mObservers.add(paramSystemObserver);
          return;
        }
        catch (Throwable paramSystemObserver)
        {
          throw paramSystemObserver;
        }
      }
    }
    
    public void unRegisterObserver(SystemObserver paramSystemObserver)
    {
      Object localObject = SystemManager.update();
      try
      {
        mObservers.remove(paramSystemObserver);
        return;
      }
      catch (Throwable paramSystemObserver)
      {
        throw paramSystemObserver;
      }
    }
  }
}
