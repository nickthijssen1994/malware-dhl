package com.huawei.hms.adapter;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.os.Bundle;
import android.os.Parcelable;
import android.text.TextUtils;
import com.huawei.hms.activity.BridgeActivity;
import com.huawei.hms.adapter.sysobs.SystemManager;
import com.huawei.hms.adapter.sysobs.SystemNotifier;
import com.huawei.hms.adapter.sysobs.SystemObserver;
import com.huawei.hms.adapter.ui.BaseResolutionAdapter;
import com.huawei.hms.common.internal.RequestHeader;
import com.huawei.hms.common.internal.ResponseHeader;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.support.api.client.ResultCallback;
import com.huawei.hms.support.hianalytics.HiAnalyticsUtil;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.client.PendingResult;
import com.huawei.hms.support.mozilla.client.Result;
import com.huawei.hms.support.mozilla.client.Status;
import com.huawei.hms.utils.JsonUtil;
import com.huawei.hms.utils.Util;
import java.lang.ref.WeakReference;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class BaseAdapter
{
  private static final String TAG = "BaseAdapter";
  private WeakReference<Activity> activityWeakReference;
  private Context appContext;
  private BaseCallBack baseCallBackReplay;
  private BaseCallBack callback;
  private String jsonHeaderReplay;
  private String jsonObjectReplay;
  private WeakReference<com.huawei.hms.support.api.client.ApiClient> mFields;
  private SystemObserver observer;
  private Parcelable parcelableReplay;
  private RequestHeader requestHeader = new RequestHeader();
  private ResponseHeader responseHeader = new ResponseHeader();
  private String transactionId;
  
  public BaseAdapter(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient)
  {
    mFields = new WeakReference(paramApiClient);
  }
  
  public BaseAdapter(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, Activity paramActivity)
  {
    mFields = new WeakReference(paramApiClient);
    activityWeakReference = new WeakReference(paramActivity);
    appContext = paramActivity.getApplicationContext();
  }
  
  private PendingResult baseRequest(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, String paramString, CoreBaseRequest paramCoreBaseRequest)
  {
    return new MPendingResultImpl(paramApiClient, paramString, paramCoreBaseRequest);
  }
  
  private void biReportRequestEntryIpc(Context paramContext, RequestHeader paramRequestHeader)
  {
    Map localMap = HiAnalyticsUtil.getInstance().getMapFromRequestHeader(paramRequestHeader);
    localMap.put("direction", "req");
    localMap.put("version", HiAnalyticsUtil.versionCodeToName(String.valueOf(paramRequestHeader.getKitSdkVersion())));
    localMap.put("phoneType", Util.getSystemProperties("ro.logsystem.usertype", ""));
    HiAnalyticsUtil.getInstance().onNewEvent(paramContext, "HMS_SDK_BASE_CALL_AIDL", localMap);
  }
  
  private void biReportRequestEntrySolution(Context paramContext, RequestHeader paramRequestHeader)
  {
    Map localMap = HiAnalyticsUtil.getInstance().getMapFromRequestHeader(paramRequestHeader);
    localMap.put("direction", "req");
    localMap.put("version", HiAnalyticsUtil.versionCodeToName(String.valueOf(paramRequestHeader.getKitSdkVersion())));
    localMap.put("phoneType", Util.getSystemProperties("ro.logsystem.usertype", ""));
    HiAnalyticsUtil.getInstance().onNewEvent(paramContext, "HMS_SDK_BASE_START_RESOLUTION", localMap);
  }
  
  private void biReportRequestReturnIpc(Context paramContext, ResponseHeader paramResponseHeader)
  {
    HiAnalyticsUtil.getInstance();
    paramResponseHeader = HiAnalyticsUtil.getMapFromRequestHeader(paramResponseHeader);
    paramResponseHeader.put("direction", "rsp");
    paramResponseHeader.put("version", HiAnalyticsUtil.versionCodeToName(String.valueOf(requestHeader.getKitSdkVersion())));
    paramResponseHeader.put("phoneType", Util.getSystemProperties("ro.logsystem.usertype", ""));
    HiAnalyticsUtil.getInstance().onNewEvent(paramContext, "HMS_SDK_BASE_CALL_AIDL", paramResponseHeader);
  }
  
  private void biReportRequestReturnSolution(Context paramContext, ResponseHeader paramResponseHeader, long paramLong)
  {
    HiAnalyticsUtil.getInstance();
    paramResponseHeader = HiAnalyticsUtil.getMapFromRequestHeader(paramResponseHeader);
    paramResponseHeader.put("direction", "rsp");
    paramResponseHeader.put("waitTime", String.valueOf(paramLong));
    paramResponseHeader.put("version", HiAnalyticsUtil.versionCodeToName(String.valueOf(requestHeader.getKitSdkVersion())));
    paramResponseHeader.put("phoneType", Util.getSystemProperties("ro.logsystem.usertype", ""));
    HiAnalyticsUtil.getInstance().onNewEvent(paramContext, "HMS_SDK_BASE_START_RESOLUTION", paramResponseHeader);
  }
  
  private BaseCallBack getBaseCallBackReplay()
  {
    return baseCallBackReplay;
  }
  
  private BaseCallBack getCallBack()
  {
    BaseCallBack localBaseCallBack = callback;
    if (localBaseCallBack == null)
    {
      HMSLog.toString("BaseAdapter", "callback null");
      return null;
    }
    return localBaseCallBack;
  }
  
  private Activity getCpActivity()
  {
    if (activityWeakReference == null)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("activityWeakReference is ");
      ((StringBuilder)localObject).append(activityWeakReference);
      HMSLog.append("BaseAdapter", ((StringBuilder)localObject).toString());
      return null;
    }
    Object localObject = (com.huawei.hms.support.mozilla.client.ApiClient)mFields.get();
    if (localObject == null)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("tmpApi is ");
      localStringBuilder.append(localObject);
      HMSLog.append("BaseAdapter", localStringBuilder.toString());
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("activityWeakReference has ");
    localStringBuilder.append(activityWeakReference.get());
    HMSLog.append("BaseAdapter", localStringBuilder.toString());
    return Util.getActiveActivity((Activity)activityWeakReference.get(), ((com.huawei.hms.support.mozilla.client.ApiClient)localObject).getContext());
  }
  
  private String getJsonHeaderReplay()
  {
    return jsonHeaderReplay;
  }
  
  private String getJsonObjectReplay()
  {
    return jsonObjectReplay;
  }
  
  private Parcelable getParcelableReplay()
  {
    return parcelableReplay;
  }
  
  private String getResponseHeaderForError(int paramInt)
  {
    responseHeader.setTransactionId(requestHeader.getTransactionId());
    responseHeader.setAppID(requestHeader.getAppID());
    responseHeader.setApiName(requestHeader.getApiName());
    responseHeader.setSrvName(requestHeader.getSrvName());
    responseHeader.setPkgName(requestHeader.getPkgName());
    responseHeader.setStatusCode(1);
    responseHeader.setErrorCode(paramInt);
    responseHeader.setErrorReason("Core error");
    return responseHeader.toJson();
  }
  
  private void initObserver()
  {
    observer = new SystemObserver()
    {
      public boolean onSolutionResult(Intent paramAnonymousIntent, String paramAnonymousString)
      {
        if (TextUtils.isEmpty(paramAnonymousString))
        {
          HMSLog.toString("BaseAdapter", "onSolutionResult but id is null");
          paramAnonymousIntent = BaseAdapter.this.getCallBack();
          if (paramAnonymousIntent == null)
          {
            HMSLog.toString("BaseAdapter", "onSolutionResult baseCallBack null");
            return true;
          }
          paramAnonymousIntent.onError(BaseAdapter.this.getResponseHeaderForError(-6));
          return true;
        }
        if (paramAnonymousString.equals(transactionId))
        {
          Object localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("onSolutionResult + id is :");
          ((StringBuilder)localObject1).append(paramAnonymousString);
          HMSLog.append("BaseAdapter", ((StringBuilder)localObject1).toString());
          paramAnonymousString = BaseAdapter.this.getCallBack();
          if (paramAnonymousString == null)
          {
            HMSLog.toString("BaseAdapter", "onResult baseCallBack null");
            return true;
          }
          long l2 = 0L;
          if (paramAnonymousIntent == null)
          {
            HMSLog.toString("BaseAdapter", "onSolutionResult but data is null");
            paramAnonymousIntent = BaseAdapter.this.getResponseHeaderForError(-7);
            localObject1 = BaseAdapter.this;
            ((BaseAdapter)localObject1).biReportRequestReturnSolution(appContext, responseHeader, 0L);
            paramAnonymousString.onError(paramAnonymousIntent);
            return true;
          }
          int i;
          if (paramAnonymousIntent.hasExtra("kit_update_result"))
          {
            i = paramAnonymousIntent.getIntExtra("kit_update_result", 0);
            paramAnonymousIntent = new StringBuilder();
            paramAnonymousIntent.append("kit_update_result is ");
            paramAnonymousIntent.append(i);
            HMSLog.append("BaseAdapter", paramAnonymousIntent.toString());
            if (i == 1)
            {
              HMSLog.toString("BaseAdapter", "kit update success,replay request");
              BaseAdapter.this.replayRequest();
              return true;
            }
            HMSLog.toString("BaseAdapter", "kit update failed");
            paramAnonymousString.onError(BaseAdapter.this.getResponseHeaderForError(-10));
            return true;
          }
          HMSLog.toString("BaseAdapter", "onComplete for on activity result");
          localObject1 = paramAnonymousIntent.getStringExtra("json_header");
          String str = paramAnonymousIntent.getStringExtra("json_body");
          Object localObject2 = JsonUtil.getInfoFromJsonobject((String)localObject1, "status_code");
          Object localObject3 = JsonUtil.getInfoFromJsonobject((String)localObject1, "error_code");
          long l1 = l2;
          if (paramAnonymousIntent.hasExtra("HMS_FOREGROUND_RES_UI"))
          {
            paramAnonymousIntent = JsonUtil.getInfoFromJsonobject(paramAnonymousIntent.getStringExtra("HMS_FOREGROUND_RES_UI"), "uiDuration");
            l1 = l2;
            if ((paramAnonymousIntent instanceof Long)) {
              l1 = ((Long)paramAnonymousIntent).longValue();
            }
          }
          if (((localObject2 instanceof Integer)) && ((localObject3 instanceof Integer)))
          {
            i = ((Integer)localObject2).intValue();
            int j = ((Integer)localObject3).intValue();
            BaseAdapter.this.getResponseHeaderForError(j);
            responseHeader.setStatusCode(i);
            paramAnonymousIntent = BaseAdapter.this;
            paramAnonymousIntent.biReportRequestReturnSolution(appContext, responseHeader, l1);
          }
          else
          {
            BaseAdapter.this.getResponseHeaderForError(-8);
            paramAnonymousIntent = BaseAdapter.this;
            paramAnonymousIntent.biReportRequestReturnSolution(appContext, responseHeader, l1);
          }
          paramAnonymousString.onComplete((String)localObject1, str, null);
          return true;
        }
        return false;
      }
      
      public boolean onUpdateResult(int paramAnonymousInt)
      {
        return false;
      }
    };
  }
  
  private void replayRequest()
  {
    if (jsonHeaderReplay != null)
    {
      if (baseCallBackReplay == null) {
        return;
      }
      responseHeader = null;
      responseHeader = new ResponseHeader();
      baseRequest(getJsonHeaderReplay(), getJsonObjectReplay(), getParcelableReplay(), getBaseCallBackReplay());
    }
  }
  
  private void setBaseCallBackReplay(BaseCallBack paramBaseCallBack)
  {
    baseCallBackReplay = paramBaseCallBack;
  }
  
  private void setJsonHeaderReplay(String paramString)
  {
    jsonHeaderReplay = paramString;
  }
  
  private void setJsonObjectReplay(String paramString)
  {
    jsonObjectReplay = paramString;
  }
  
  private void setParcelableReplay(Parcelable paramParcelable)
  {
    parcelableReplay = paramParcelable;
  }
  
  private void setReplayData(String paramString1, String paramString2, Parcelable paramParcelable, BaseCallBack paramBaseCallBack)
  {
    setJsonHeaderReplay(paramString1);
    setJsonObjectReplay(paramString2);
    setParcelableReplay(paramParcelable);
    setBaseCallBackReplay(paramBaseCallBack);
  }
  
  private void startResolution(Activity paramActivity, Parcelable paramParcelable)
  {
    HMSLog.append("BaseAdapter", "startResolution");
    Object localObject = requestHeader;
    if (localObject != null) {
      biReportRequestEntrySolution(appContext, (RequestHeader)localObject);
    }
    if (observer == null) {
      initObserver();
    }
    SystemManager.getSystemNotifier().registerObserver(observer);
    localObject = BridgeActivity.getIntentStartBridgeActivity(paramActivity, BaseResolutionAdapter.class.getName());
    Bundle localBundle = new Bundle();
    localBundle.putParcelable("resolution", paramParcelable);
    ((Intent)localObject).putExtras(localBundle);
    ((Intent)localObject).putExtra("transaction_id", transactionId);
    paramActivity.startActivity((Intent)localObject);
  }
  
  public void baseRequest(String paramString1, String paramString2, Parcelable paramParcelable, BaseCallBack paramBaseCallBack)
  {
    setReplayData(paramString1, paramString2, paramParcelable, paramBaseCallBack);
    if (mFields == null)
    {
      HMSLog.toString("BaseAdapter", "client is null");
      paramBaseCallBack.onError(getResponseHeaderForError(-2));
      return;
    }
    callback = paramBaseCallBack;
    JsonUtil.jsonToEntity(paramString1, requestHeader);
    CoreBaseRequest localCoreBaseRequest = new CoreBaseRequest();
    localCoreBaseRequest.setJsonObject(paramString2);
    localCoreBaseRequest.setJsonHeader(paramString1);
    localCoreBaseRequest.setParcelable(paramParcelable);
    paramString1 = requestHeader.getApiName();
    if (TextUtils.isEmpty(paramString1))
    {
      HMSLog.toString("BaseAdapter", "get uri null");
      paramBaseCallBack.onError(getResponseHeaderForError(-5));
      return;
    }
    transactionId = requestHeader.getTransactionId();
    if (TextUtils.isEmpty(transactionId))
    {
      HMSLog.toString("BaseAdapter", "get transactionId null");
      paramBaseCallBack.onError(getResponseHeaderForError(-6));
      return;
    }
    paramString2 = new StringBuilder();
    paramString2.append("in baseRequest + uri is :");
    paramString2.append(paramString1);
    paramString2.append(", transactionId is : ");
    paramString2.append(transactionId);
    HMSLog.append("BaseAdapter", paramString2.toString());
    biReportRequestEntryIpc(appContext, requestHeader);
    baseRequest((com.huawei.hms.support.mozilla.client.ApiClient)mFields.get(), paramString1, localCoreBaseRequest).setResultCallback(new BaseRequestResultCallback());
  }
  
  public static abstract interface BaseCallBack
  {
    public abstract void onComplete(String paramString1, String paramString2, Parcelable paramParcelable);
    
    public abstract void onError(String paramString);
  }
  
  public class BaseRequestResultCallback
    implements ResultCallback<com.huawei.hms.support.api.ResolveResult<CoreBaseResponse>>
  {
    private AtomicBoolean isFirstRsp = new AtomicBoolean(true);
    
    public BaseRequestResultCallback() {}
    
    private void handleSolutionIntent(BaseAdapter.BaseCallBack paramBaseCallBack, CoreBaseResponse paramCoreBaseResponse)
    {
      HMSLog.append("BaseAdapter", "baseCallBack.onComplete");
      Object localObject = paramCoreBaseResponse.getPendingIntent();
      if (localObject != null)
      {
        paramBaseCallBack.onComplete(paramCoreBaseResponse.getJsonHeader(), paramCoreBaseResponse.getJsonBody(), (Parcelable)localObject);
        return;
      }
      localObject = paramCoreBaseResponse.getIntent();
      if (localObject != null)
      {
        paramBaseCallBack.onComplete(paramCoreBaseResponse.getJsonHeader(), paramCoreBaseResponse.getJsonBody(), (Parcelable)localObject);
        return;
      }
      paramBaseCallBack.onComplete(paramCoreBaseResponse.getJsonHeader(), paramCoreBaseResponse.getJsonBody(), null);
    }
    
    public void onResult(com.huawei.hms.support.mozilla.ResolveResult paramResolveResult)
    {
      BaseAdapter.BaseCallBack localBaseCallBack = BaseAdapter.this.getCallBack();
      if (localBaseCallBack == null)
      {
        HMSLog.toString("BaseAdapter", "onResult baseCallBack null");
        return;
      }
      if (paramResolveResult == null)
      {
        HMSLog.toString("BaseAdapter", "result null");
        localBaseCallBack.onError(BaseAdapter.this.getResponseHeaderForError(-1));
        return;
      }
      paramResolveResult = (CoreBaseResponse)paramResolveResult.getValue();
      if (paramResolveResult == null)
      {
        HMSLog.toString("BaseAdapter", "response null");
        localBaseCallBack.onError(BaseAdapter.this.getResponseHeaderForError(-1));
        return;
      }
      if (TextUtils.isEmpty(paramResolveResult.getJsonHeader()))
      {
        HMSLog.toString("BaseAdapter", "jsonHeader null");
        localBaseCallBack.onError(BaseAdapter.this.getResponseHeaderForError(-1));
        return;
      }
      JsonUtil.jsonToEntity(paramResolveResult.getJsonHeader(), responseHeader);
      Object localObject1;
      if (isFirstRsp.compareAndSet(true, false))
      {
        localObject1 = BaseAdapter.this;
        ((BaseAdapter)localObject1).biReportRequestReturnIpc(appContext, responseHeader);
      }
      if ("intent".equals(responseHeader.getResolution()))
      {
        localObject1 = BaseAdapter.this.getCpActivity();
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("activity is ");
        ((StringBuilder)localObject2).append(localObject1);
        HMSLog.append("BaseAdapter", ((StringBuilder)localObject2).toString());
        if ((localObject1 != null) && (!((Activity)localObject1).isFinishing()))
        {
          localObject2 = paramResolveResult.getPendingIntent();
          if (localObject2 != null)
          {
            if (Util.isAvailableLibExist(appContext))
            {
              BaseAdapter.this.startResolution((Activity)localObject1, (Parcelable)localObject2);
              return;
            }
            localBaseCallBack.onError(BaseAdapter.this.getResponseHeaderForError(-9));
            return;
          }
          paramResolveResult = paramResolveResult.getIntent();
          if (paramResolveResult != null)
          {
            if (Util.isAvailableLibExist(appContext))
            {
              BaseAdapter.this.startResolution((Activity)localObject1, paramResolveResult);
              return;
            }
            localBaseCallBack.onError(BaseAdapter.this.getResponseHeaderForError(-9));
            return;
          }
          HMSLog.toString("BaseAdapter", "hasResolution is true but NO_SOLUTION");
          localBaseCallBack.onError(BaseAdapter.this.getResponseHeaderForError(-4));
          return;
        }
        HMSLog.toString("BaseAdapter", "activity null");
        handleSolutionIntent(localBaseCallBack, paramResolveResult);
        return;
      }
      handleSolutionIntent(localBaseCallBack, paramResolveResult);
    }
  }
  
  private static class MPendingResultImpl
    extends com.huawei.hms.support.api.PendingResultImpl<com.huawei.hms.support.api.ResolveResult<CoreBaseResponse>, CoreBaseResponse>
  {
    public MPendingResultImpl(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, String paramString, IMessageEntity paramIMessageEntity)
    {
      super(paramString, paramIMessageEntity);
    }
    
    public com.huawei.hms.support.mozilla.ResolveResult onComplete(CoreBaseResponse paramCoreBaseResponse)
    {
      paramCoreBaseResponse = new com.huawei.hms.support.mozilla.ResolveResult(paramCoreBaseResponse);
      paramCoreBaseResponse.setStatus(Status.SUCCESS);
      return paramCoreBaseResponse;
    }
  }
}
