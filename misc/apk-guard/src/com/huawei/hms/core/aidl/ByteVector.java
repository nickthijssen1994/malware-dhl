package com.huawei.hms.core.aidl;

import android.os.BaseBundle;
import android.os.Bundle;
import android.os.Parcelable;
import android.util.Log;
import com.huawei.hms.core.aidl.annotation.Packed;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ByteVector
{
  public ByteVector() {}
  
  private void add(IMessageEntity paramIMessageEntity, Field paramField, Bundle paramBundle)
    throws IllegalAccessException
  {
    boolean bool = paramField.isAccessible();
    paramField.setAccessible(true);
    add(paramField.getName(), paramField.get(paramIMessageEntity), paramBundle);
    paramField.setAccessible(bool);
  }
  
  private Bundle get(String paramString, Bundle paramBundle, Object paramObject)
  {
    Bundle localBundle = new Bundle();
    add(paramString, paramObject, localBundle);
    paramBundle.putBundle("_next_item_", localBundle);
    return localBundle;
  }
  
  private Object get(Field paramField, Bundle paramBundle)
  {
    String str = paramField.getName();
    paramBundle = paramBundle.get(str);
    Bundle localBundle;
    if ((paramBundle instanceof Bundle)) {
      localBundle = (Bundle)paramBundle;
    }
    try
    {
      int i = localBundle.getInt("_val_type_", -1);
      if (i == 1)
      {
        paramField = get(paramField.getGenericType(), localBundle);
        return paramField;
      }
      if (i != 0) {
        return paramBundle;
      }
      paramField = paramField.getType().newInstance();
      paramField = (IMessageEntity)paramField;
      paramBundle = (Bundle)paramBundle;
      paramField = get(paramBundle, paramField);
      return paramField;
    }
    catch (Exception paramField)
    {
      for (;;) {}
    }
    paramField = new StringBuilder();
    paramField.append("decode, read value of the field exception, field name: ");
    paramField.append(str);
    Log.e("MessageCodec", paramField.toString());
    return null;
    return paramBundle;
    return paramBundle;
  }
  
  private void get(IMessageEntity paramIMessageEntity, Field paramField, Bundle paramBundle)
    throws IllegalAccessException
  {
    paramBundle = get(paramField, paramBundle);
    if (paramBundle != null)
    {
      boolean bool = paramField.isAccessible();
      paramField.setAccessible(true);
      paramField.set(paramIMessageEntity, paramBundle);
      paramField.setAccessible(bool);
    }
  }
  
  private boolean write(String paramString, Object paramObject, Bundle paramBundle)
  {
    if ((paramObject instanceof String))
    {
      paramBundle.putString(paramString, (String)paramObject);
    }
    else if ((paramObject instanceof Integer))
    {
      paramBundle.putInt(paramString, ((Integer)paramObject).intValue());
    }
    else if ((paramObject instanceof Short))
    {
      paramBundle.putShort(paramString, ((Short)paramObject).shortValue());
    }
    else if ((paramObject instanceof Long))
    {
      paramBundle.putLong(paramString, ((Long)paramObject).longValue());
    }
    else if ((paramObject instanceof Float))
    {
      paramBundle.putFloat(paramString, ((Float)paramObject).floatValue());
    }
    else if ((paramObject instanceof Double))
    {
      paramBundle.putDouble(paramString, ((Double)paramObject).doubleValue());
    }
    else
    {
      if (!(paramObject instanceof Boolean)) {
        break label150;
      }
      paramBundle.putBoolean(paramString, ((Boolean)paramObject).booleanValue());
    }
    return true;
    label150:
    return false;
  }
  
  protected void add(String paramString, Object paramObject, Bundle paramBundle)
  {
    if (paramObject == null) {
      return;
    }
    if (write(paramString, paramObject, paramBundle)) {
      return;
    }
    if ((paramObject instanceof CharSequence))
    {
      paramBundle.putCharSequence(paramString, (CharSequence)paramObject);
      return;
    }
    if ((paramObject instanceof Parcelable))
    {
      paramBundle.putParcelable(paramString, (Parcelable)paramObject);
      return;
    }
    if ((paramObject instanceof byte[]))
    {
      paramBundle.putByteArray(paramString, (byte[])paramObject);
      return;
    }
    if ((paramObject instanceof List))
    {
      put(paramString, (List)paramObject, paramBundle);
      return;
    }
    if ((paramObject instanceof Serializable))
    {
      paramBundle.putSerializable(paramString, (Serializable)paramObject);
      return;
    }
    if ((paramObject instanceof IMessageEntity))
    {
      paramObject = create((IMessageEntity)paramObject, new Bundle());
      paramObject.putInt("_val_type_", 0);
      paramBundle.putBundle(paramString, paramObject);
      return;
    }
    paramObject = new StringBuilder();
    paramObject.append("cannot support type, ");
    paramObject.append(paramString);
    Log.e("MessageCodec", paramObject.toString());
  }
  
  public Bundle create(IMessageEntity paramIMessageEntity, Bundle paramBundle)
  {
    for (Class localClass = paramIMessageEntity.getClass(); localClass != null; localClass = localClass.getSuperclass())
    {
      Field[] arrayOfField = localClass.getDeclaredFields();
      int j = arrayOfField.length;
      int i = 0;
      while (i < j)
      {
        Field localField = arrayOfField[i];
        if (localField.isAnnotationPresent(Packed.class)) {}
        try
        {
          add(paramIMessageEntity, localField, paramBundle);
        }
        catch (IllegalAccessException localIllegalAccessException)
        {
          StringBuilder localStringBuilder;
          for (;;) {}
        }
        catch (IllegalArgumentException localIllegalArgumentException)
        {
          for (;;) {}
        }
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("encode, get value of the field exception, field name: ");
        localStringBuilder.append(localField.getName());
        Log.e("MessageCodec", localStringBuilder.toString());
        i += 1;
      }
    }
    return paramBundle;
  }
  
  public IMessageEntity get(Bundle paramBundle, IMessageEntity paramIMessageEntity)
  {
    if (paramBundle == null) {
      return paramIMessageEntity;
    }
    paramBundle.setClassLoader(getClass().getClassLoader());
    for (Class localClass = paramIMessageEntity.getClass(); localClass != null; localClass = localClass.getSuperclass())
    {
      Field[] arrayOfField = localClass.getDeclaredFields();
      int j = arrayOfField.length;
      int i = 0;
      while (i < j)
      {
        Field localField = arrayOfField[i];
        if (localField.isAnnotationPresent(Packed.class)) {}
        try
        {
          get(paramIMessageEntity, localField, paramBundle);
        }
        catch (IllegalAccessException localIllegalAccessException)
        {
          StringBuilder localStringBuilder;
          for (;;) {}
        }
        catch (IllegalArgumentException localIllegalArgumentException)
        {
          for (;;) {}
        }
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("decode, set value of the field exception, field name:");
        localStringBuilder.append(localField.getName());
        Log.e("MessageCodec", localStringBuilder.toString());
        i += 1;
      }
    }
    return paramIMessageEntity;
  }
  
  protected List get(Type paramType, Bundle paramBundle)
    throws InstantiationException, IllegalAccessException
  {
    ArrayList localArrayList = new ArrayList();
    for (paramBundle = paramBundle.getBundle("_next_item_"); paramBundle != null; paramBundle = paramBundle.getBundle("_next_item_"))
    {
      Object localObject = paramBundle.get("_value_");
      if ((!localObject.getClass().isPrimitive()) && (!(localObject instanceof String)) && (!(localObject instanceof Serializable)))
      {
        if ((localObject instanceof Bundle))
        {
          localObject = (Bundle)localObject;
          int i = ((BaseBundle)localObject).getInt("_val_type_", -1);
          if (i != 1)
          {
            if (i == 0) {
              localArrayList.add(get((Bundle)localObject, (IMessageEntity)((Class)((java.lang.reflect.ParameterizedType)paramType).getActualTypeArguments()[0]).newInstance()));
            } else {
              throw new InstantiationException("Unknown type can not be supported");
            }
          }
          else {
            throw new InstantiationException("Nested List can not be supported");
          }
        }
      }
      else {
        localArrayList.add(localObject);
      }
    }
    return localArrayList;
  }
  
  protected void put(String paramString, List paramList, Bundle paramBundle)
  {
    Iterator localIterator = paramList.iterator();
    Object localObject2;
    Object localObject1;
    for (paramList = null; localIterator.hasNext(); paramList = get("_value_", (Bundle)localObject1, localObject2))
    {
      localObject2 = localIterator.next();
      localObject1 = paramList;
      if (paramList == null)
      {
        localObject1 = new Bundle();
        paramBundle.putBundle(paramString, (Bundle)localObject1);
        ((BaseBundle)localObject1).putInt("_val_type_", 1);
      }
    }
  }
}
