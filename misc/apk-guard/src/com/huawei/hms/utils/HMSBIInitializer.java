package com.huawei.hms.utils;

import android.content.Context;
import android.os.AsyncTask;
import android.text.TextUtils;
import com.huawei.hianalytics.process.HiAnalyticsConfig;
import com.huawei.hianalytics.process.HiAnalyticsConfig.Builder;
import com.huawei.hianalytics.process.HiAnalyticsInstance;
import com.huawei.hianalytics.process.HiAnalyticsInstance.Builder;
import com.huawei.hianalytics.process.HiAnalyticsManager;
import com.huawei.hms.framework.network.grs.GrsApp;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.GrsClient;
import com.huawei.hms.framework.network.grs.IQueryUrlCallBack;
import com.huawei.hms.hatool.HmsHiAnalyticsUtils;
import com.huawei.hms.stats.ClassWriter;
import com.huawei.hms.stats.Label;
import com.huawei.hms.support.model.HMSLog;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicBoolean;

public class HMSBIInitializer
{
  public static HiAnalyticsInstance contextNode;
  public static HMSBIInitializer sensorManager;
  public static final Object sync = new Object();
  public final Context a;
  public AtomicBoolean n = new AtomicBoolean(false);
  public boolean o;
  
  public HMSBIInitializer(Context paramContext)
  {
    a = paramContext;
    o = Label.a();
  }
  
  public static HMSBIInitializer getInstance(Context paramContext)
  {
    Object localObject = sync;
    try
    {
      if (sensorManager == null)
      {
        Context localContext = paramContext.getApplicationContext();
        if (localContext != null) {
          sensorManager = new HMSBIInitializer(localContext);
        } else {
          sensorManager = new HMSBIInitializer(paramContext);
        }
      }
      return sensorManager;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
  
  public final void addElement(String paramString)
  {
    HMSLog.append("HMSBIInitializer", "Start to query GRS");
    GrsBaseInfo localGrsBaseInfo = new GrsBaseInfo();
    localGrsBaseInfo.setIssueCountry(paramString);
    new GrsClient(a, localGrsBaseInfo).ayncGetGrsUrl("com.huawei.cloud.opensdkhianalytics", "ROOT", new a());
  }
  
  public HiAnalyticsInstance getAnalyticsInstance()
  {
    return contextNode;
  }
  
  public void initBI()
  {
    boolean bool;
    if (!o) {
      bool = HmsHiAnalyticsUtils.getInitFlag();
    } else {
      bool = HiAnalyticsManager.getInitFlag("hms_config_tag");
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Builder->biInitFlag :");
    ((StringBuilder)localObject).append(bool);
    HMSLog.append("HMSBIInitializer", ((StringBuilder)localObject).toString());
    if (bool) {
      return;
    }
    if (ClassWriter.a(a)) {
      return;
    }
    if (n.compareAndSet(false, true))
    {
      String str = GrsApp.getInstance().getIssueCountryCode(a);
      localObject = str;
      if (!TextUtils.isEmpty(str)) {
        localObject = str.toUpperCase(Locale.ENGLISH);
      }
      if ((!"UNKNOWN".equalsIgnoreCase((String)localObject)) && (!TextUtils.isEmpty((CharSequence)localObject)))
      {
        new b(null).execute(new String[] { localObject });
        return;
      }
      HMSLog.toString("HMSBIInitializer", "Failed to get device issue country");
      n.set(false);
    }
  }
  
  public boolean isInit()
  {
    if (!o) {
      return HmsHiAnalyticsUtils.getInitFlag();
    }
    return HiAnalyticsManager.getInitFlag("hms_config_tag");
  }
  
  public class a
    implements IQueryUrlCallBack
  {
    public a() {}
    
    public void onCallBackFail(int paramInt)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("get grs failed, the errorcode is ");
      localStringBuilder.append(paramInt);
      HMSLog.toString("HMSBIInitializer", localStringBuilder.toString());
      HMSBIInitializer.access$getN(HMSBIInitializer.this).set(false);
    }
    
    public void onCallBackSuccess(String paramString)
    {
      if (!TextUtils.isEmpty(paramString))
      {
        if (!HMSBIInitializer.c(HMSBIInitializer.this))
        {
          HmsHiAnalyticsUtils.init(HMSBIInitializer.access$getA(HMSBIInitializer.this), false, false, false, paramString, "com.huawei.hwid");
        }
        else
        {
          HiAnalyticsConfig localHiAnalyticsConfig = new HiAnalyticsConfig.Builder().setEnableImei(false).setEnableUDID(false).setEnableSN(false).setCollectURL(paramString).build();
          paramString = new HiAnalyticsConfig.Builder().setEnableImei(false).setEnableUDID(false).setEnableSN(false).setCollectURL(paramString).build();
          HMSBIInitializer.access$setRunning(new HiAnalyticsInstance.Builder(HMSBIInitializer.access$getA(HMSBIInitializer.this)).setOperConf(localHiAnalyticsConfig).setMaintConf(paramString).create("hms_config_tag"));
          HMSBIInitializer.getContextRef().setAppid("com.huawei.hwid");
        }
        HMSLog.append("HMSBIInitializer", "BI URL acquired successfully");
      }
      HMSBIInitializer.access$getN(HMSBIInitializer.this).set(false);
    }
  }
  
  public class b
    extends AsyncTask<String, Integer, Void>
  {
    public b() {}
    
    public Void execute(String... paramVarArgs)
    {
      HMSBIInitializer.sendFile(HMSBIInitializer.this, paramVarArgs[0]);
      return null;
    }
  }
}
