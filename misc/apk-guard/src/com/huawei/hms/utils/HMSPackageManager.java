package com.huawei.hms.utils;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ComponentInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.os.BaseBundle;
import android.text.TextUtils;
import android.util.Pair;
import com.huawei.hms.device.Frame;
import com.huawei.hms.support.model.HMSLog;
import java.security.cert.X509Certificate;
import java.util.Iterator;
import java.util.List;

public class HMSPackageManager
{
  public static final Object context = new Object();
  public static final Object mLock = new Object();
  public static HMSPackageManager sensorManager;
  public final Context c;
  public String id;
  public int inReplyToUserId;
  public String recipientId;
  public final PackageManagerHelper userId;
  
  public HMSPackageManager(Context paramContext)
  {
    c = paramContext;
    userId = new PackageManagerHelper(paramContext);
  }
  
  public static HMSPackageManager getInstance(Context paramContext)
  {
    Object localObject = mLock;
    try
    {
      if (sensorManager == null)
      {
        if (paramContext.getApplicationContext() != null) {
          sensorManager = new HMSPackageManager(paramContext.getApplicationContext());
        } else {
          sensorManager = new HMSPackageManager(paramContext);
        }
        sensorManager.getData();
      }
      return sensorManager;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
  
  public final boolean d(String paramString1, String paramString2, String paramString3)
  {
    if ((!TextUtils.isEmpty(paramString2)) && (!TextUtils.isEmpty(paramString3)))
    {
      paramString3 = Frame.copy(paramString3);
      if (paramString3.size() == 0)
      {
        HMSLog.toString("HMSPackageManager", "certChain is empty");
        return false;
      }
      if (!Frame.verify(Frame.toString(c), paramString3))
      {
        HMSLog.toString("HMSPackageManager", "failed to verify cert chain");
        return false;
      }
      paramString3 = (X509Certificate)paramString3.get(paramString3.size() - 1);
      if (!Frame.d(paramString3, "Huawei CBG HMS"))
      {
        HMSLog.toString("HMSPackageManager", "CN is invalid");
        return false;
      }
      if (!Frame.a(paramString3, "Huawei CBG Cloud Security Signer"))
      {
        HMSLog.toString("HMSPackageManager", "OU is invalid");
        return false;
      }
      if (!Frame.write(paramString3, paramString1, paramString2))
      {
        paramString2 = new StringBuilder();
        paramString2.append("signature is invalid: ");
        paramString2.append(paramString1);
        HMSLog.toString("HMSPackageManager", paramString2.toString());
        return false;
      }
      return true;
    }
    HMSLog.toString("HMSPackageManager", "args is invalid");
    return false;
  }
  
  public final Pair doInBackground()
  {
    Object localObject1 = c.getPackageManager().queryIntentServices(new Intent("com.huawei.hms.core.aidlservice"), 128);
    if (((List)localObject1).size() == 0) {
      return null;
    }
    localObject1 = ((List)localObject1).iterator();
    while (((Iterator)localObject1).hasNext())
    {
      Object localObject2 = (ResolveInfo)((Iterator)localObject1).next();
      String str1 = serviceInfo.applicationInfo.packageName;
      localObject2 = serviceInfo.metaData;
      if (localObject2 == null)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("skip package ");
        ((StringBuilder)localObject2).append(str1);
        ((StringBuilder)localObject2).append(" for metadata is null");
        HMSLog.toString("HMSPackageManager", ((StringBuilder)localObject2).toString());
      }
      else if (!((BaseBundle)localObject2).containsKey("hms_app_signer"))
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("skip package ");
        ((StringBuilder)localObject2).append(str1);
        ((StringBuilder)localObject2).append(" for no signer");
        HMSLog.toString("HMSPackageManager", ((StringBuilder)localObject2).toString());
      }
      else if (!((BaseBundle)localObject2).containsKey("hms_app_cert_chain"))
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("skip package ");
        ((StringBuilder)localObject2).append(str1);
        ((StringBuilder)localObject2).append(" for no cert chain");
        HMSLog.toString("HMSPackageManager", ((StringBuilder)localObject2).toString());
      }
      else
      {
        String str2 = userId.getPackageSignature(str1);
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(str1);
        localStringBuilder.append("&");
        localStringBuilder.append(str2);
        if (!d(localStringBuilder.toString(), ((BaseBundle)localObject2).getString("hms_app_signer"), ((BaseBundle)localObject2).getString("hms_app_cert_chain"))) {
          HMSLog.toString("HMSPackageManager", "checkSinger failed");
        } else {
          return new Pair(str1, str2);
        }
      }
    }
    return null;
  }
  
  public final void getData()
  {
    Object localObject1 = context;
    try
    {
      Object localObject2 = doInBackground();
      if (localObject2 == null)
      {
        HMSLog.toString("HMSPackageManager", "Failed to find HMS apk");
        recipientId = null;
        id = null;
        inReplyToUserId = 0;
        return;
      }
      recipientId = ((String)first);
      id = ((String)second);
      inReplyToUserId = userId.getPackageVersionCode(getHMSPackageName());
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Succeed to find HMS apk: ");
      ((StringBuilder)localObject2).append(recipientId);
      ((StringBuilder)localObject2).append(" version: ");
      ((StringBuilder)localObject2).append(inReplyToUserId);
      HMSLog.append("HMSPackageManager", ((StringBuilder)localObject2).toString());
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public String getHMSFingerprint()
  {
    String str = id;
    if (str == null) {
      return "B92825C2BD5D6D6D1E7F39EECD17843B7D9016F611136B75441BC6F4D3F00F05";
    }
    return str;
  }
  
  public String getHMSPackageName()
  {
    refresh();
    Object localObject = recipientId;
    if (localObject != null)
    {
      localObject = userId.getPackageStates((String)localObject);
      if (PackageManagerHelper.PackageStates.NOT_INSTALLED.equals(localObject))
      {
        HMSLog.append("HMSPackageManager", "The package name is not installed and needs to be refreshed again");
        getData();
      }
      localObject = recipientId;
      if (localObject != null) {
        return localObject;
      }
    }
    localObject = userId.getPackageStates("com.huawei.hwid");
    if ((!PackageManagerHelper.PackageStates.NOT_INSTALLED.equals(localObject)) && (userId.getPackageSignature("com.huawei.hwid").equalsIgnoreCase("B92825C2BD5D6D6D1E7F39EECD17843B7D9016F611136B75441BC6F4D3F00F05"))) {
      return "com.huawei.hwid";
    }
    return "com.huawei.hms";
  }
  
  public PackageManagerHelper.PackageStates getHMSPackageStates()
  {
    PackageManagerHelper.PackageStates localPackageStates1;
    if ((!TextUtils.isEmpty(recipientId)) && (!TextUtils.isEmpty(id)))
    {
      PackageManagerHelper.PackageStates localPackageStates2 = userId.getPackageStates(recipientId);
      localPackageStates1 = localPackageStates2;
      if (localPackageStates2 == PackageManagerHelper.PackageStates.ENABLED)
      {
        localPackageStates1 = localPackageStates2;
        if (!id.equals(userId.getPackageSignature(recipientId))) {
          return PackageManagerHelper.PackageStates.NOT_INSTALLED;
        }
      }
    }
    else
    {
      getData();
      localPackageStates1 = userId.getPackageStates(recipientId);
    }
    return localPackageStates1;
  }
  
  public int getHmsVersionCode()
  {
    return userId.getPackageVersionCode(getHMSPackageName());
  }
  
  public boolean hmsVerHigherThan(int paramInt)
  {
    if ((inReplyToUserId < paramInt) && (load()))
    {
      inReplyToUserId = userId.getPackageVersionCode(getHMSPackageName());
      return inReplyToUserId >= paramInt;
    }
    return true;
  }
  
  public boolean isApkUpdateNecessary(int paramInt)
  {
    int i = getHmsVersionCode();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("current versionCode:");
    localStringBuilder.append(i);
    localStringBuilder.append(", minimum version requirements: ");
    localStringBuilder.append(paramInt);
    HMSLog.append("HMSPackageManager", localStringBuilder.toString());
    return (load()) && (i < paramInt);
  }
  
  public final boolean load()
  {
    Object localObject = c.getPackageManager();
    if (localObject == null)
    {
      HMSLog.toString("HMSPackageManager", "In isMinApkVersionEffective, Failed to get 'PackageManager' instance.");
      return true;
    }
    try
    {
      localObject = ((PackageManager)localObject).getPackageInfo(getHMSPackageName(), 128);
      localObject = applicationInfo;
      if ((localObject == null) || (metaData == null)) {
        break label115;
      }
      localObject = metaData;
      boolean bool = ((BaseBundle)localObject).containsKey("com.huawei.hms.kit.api_level:hmscore");
      if (!bool) {
        break label115;
      }
      int i = getHmsVersionCode();
      if (i < 50000000)
      {
        i = getHmsVersionCode();
        if (i > 19999999) {
          break label115;
        }
      }
      HMSLog.append("HMSPackageManager", "MinApkVersion is disabled.");
      return false;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;) {}
    }
    HMSLog.toString("HMSPackageManager", "In isMinApkVersionEffective, Failed to read meta data for HMSCore API level.");
    return true;
    label115:
    return true;
  }
  
  public void refresh()
  {
    if ((TextUtils.isEmpty(recipientId)) || (TextUtils.isEmpty(id))) {
      getData();
    }
  }
}
