package com.huawei.hms.utils;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ProviderInfo;
import android.content.pm.Signature;
import android.text.TextUtils;
import com.huawei.hms.support.model.HMSLog;
import java.io.IOException;
import java.io.InputStream;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;

public class PackageManagerHelper
{
  public final PackageManager mPm;
  
  public PackageManagerHelper(Context paramContext)
  {
    mPm = paramContext.getPackageManager();
  }
  
  public String getPackageSignature(String paramString)
  {
    paramString = getSignature(paramString);
    if ((paramString != null) && (paramString.length != 0)) {
      return Hex.encodeHexString(SHA256.digest(paramString), true);
    }
    return null;
  }
  
  public PackageStates getPackageStates(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return PackageStates.NOT_INSTALLED;
    }
    PackageManager localPackageManager = mPm;
    try
    {
      paramString = localPackageManager.getApplicationInfo(paramString, 0);
      if (enabled) {
        return PackageStates.ENABLED;
      }
      return PackageStates.DISABLED;
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      for (;;) {}
    }
    return PackageStates.NOT_INSTALLED;
  }
  
  public int getPackageVersionCode(String paramString)
  {
    PackageManager localPackageManager = mPm;
    try
    {
      paramString = localPackageManager.getPackageInfo(paramString, 16);
      if (paramString != null) {
        return versionCode;
      }
      return 0;
    }
    catch (PackageManager.NameNotFoundException paramString) {}
    return 0;
  }
  
  public String getPackageVersionName(String paramString)
  {
    PackageManager localPackageManager = mPm;
    try
    {
      paramString = localPackageManager.getPackageInfo(paramString, 16);
      if ((paramString != null) && (versionName != null)) {
        return versionName;
      }
      return "";
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      for (;;) {}
    }
    return "";
  }
  
  public final byte[] getSignature(String paramString)
  {
    Object localObject = mPm;
    try
    {
      paramString = ((PackageManager)localObject).getPackageInfo(paramString, 64);
      if ((paramString != null) && (signatures != null) && (signatures.length > 0))
      {
        paramString = signatures[0];
        paramString = paramString.toByteArray();
        return paramString;
      }
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Failed to get application signature certificate fingerprint.");
      ((StringBuilder)localObject).append(paramString.getMessage());
      HMSLog.toString("PackageManagerHelper", ((StringBuilder)localObject).toString());
      HMSLog.toString("PackageManagerHelper", "Failed to get application signature certificate fingerprint.");
    }
    return new byte[0];
  }
  
  public boolean hasProvider(String paramString1, String paramString2)
  {
    Object localObject = mPm;
    try
    {
      paramString1 = ((PackageManager)localObject).getPackageInfo(paramString1, 8);
      if (paramString1 != null)
      {
        if (providers != null)
        {
          paramString1 = providers;
          int j = paramString1.length;
          int i = 0;
          while (i < j)
          {
            localObject = authority;
            boolean bool = paramString2.equals(localObject);
            if (bool) {
              return true;
            }
            i += 1;
          }
        }
      }
      else {
        return false;
      }
    }
    catch (PackageManager.NameNotFoundException paramString1) {}
    return false;
  }
  
  public boolean verifyPackageArchive(String paramString1, String paramString2, String paramString3)
  {
    Object localObject2 = mPm.getPackageArchiveInfo(paramString1, 64);
    if ((localObject2 != null) && (signatures.length > 0))
    {
      if (!paramString2.equals(packageName)) {
        return false;
      }
      Object localObject1 = null;
      paramString1 = null;
      paramString2 = null;
      localObject2 = signatures[0];
      try
      {
        localObject2 = IOUtils.toInputStream(((Signature)localObject2).toByteArray());
        paramString1 = (String)localObject2;
        paramString2 = paramString1;
        localObject1 = paramString1;
        boolean bool = paramString3.equalsIgnoreCase(Hex.encodeHexString(SHA256.digest(CertificateFactory.getInstance("X.509").generateCertificate((InputStream)localObject2).getEncoded()), true));
        IOUtils.closeQuietly((InputStream)localObject2);
        return bool;
      }
      catch (Throwable paramString1)
      {
        break label174;
      }
      catch (CertificateException paramString3)
      {
        paramString1 = (String)localObject1;
      }
      catch (IOException paramString3) {}
      paramString2 = paramString1;
      localObject1 = new StringBuilder();
      paramString2 = paramString1;
      ((StringBuilder)localObject1).append("Failed to get application signature certificate fingerprint.");
      paramString2 = paramString1;
      ((StringBuilder)localObject1).append(((Exception)paramString3).getMessage());
      paramString2 = paramString1;
      HMSLog.toString("PackageManagerHelper", ((StringBuilder)localObject1).toString());
      IOUtils.closeQuietly(paramString1);
      return false;
      label174:
      IOUtils.closeQuietly(paramString2);
      throw paramString1;
    }
    return false;
  }
  
  public static enum PackageStates {}
}
