package com.huawei.hms.aaid;

import android.app.Activity;
import android.content.Context;
import com.huawei.hms.aaid.constant.ErrorEnum;
import com.huawei.hms.aaid.entity.TokenReq;
import com.huawei.hms.aaid.entity.TokenResult;
import com.huawei.hms.aaid.plugin.ProxyCenter;
import com.huawei.hms.aaid.plugin.PushProxy;
import com.huawei.hms.aaid.task.PushClientBuilder;
import com.huawei.hms.aaid.utils.PushPreferences;
import com.huawei.hms.api.Api.ApiOptions.NoOptions;
import com.huawei.hms.common.ApiException;
import com.huawei.hms.common.HuaweiApi;
import com.huawei.hms.common.internal.Preconditions;
import com.huawei.hms.configurations.TermSession;
import com.huawei.hms.opendevice.Frame;
import com.huawei.hms.opendevice.JSONArray;
import com.huawei.hms.opendevice.b;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.provider.tasks.Task;
import com.huawei.provider.tasks.TaskCompletionSource;
import java.util.UUID;

@Deprecated
public class HmsInstanceIdEx
{
  public static final String TAG = "HmsInstanceIdEx";
  public PushPreferences b = null;
  public Context c = null;
  public HuaweiApi<Api.ApiOptions.NoOptions> d;
  
  public HmsInstanceIdEx(Context paramContext)
  {
    c = paramContext;
    b = new PushPreferences(paramContext, "aaid");
    TermSession localTermSession = new TermSession("HuaweiPush.API");
    if ((paramContext instanceof Activity)) {
      d = new HuaweiApi((Activity)paramContext, localTermSession, null, new PushClientBuilder());
    } else {
      d = new HuaweiApi(paramContext, localTermSession, null, new PushClientBuilder());
    }
    d.setKitSdkVersion(50004300);
  }
  
  public static HmsInstanceIdEx getInstance(Context paramContext)
  {
    Preconditions.checkNotNull(paramContext);
    return new HmsInstanceIdEx(paramContext);
  }
  
  public final Task close(Exception paramException)
  {
    TaskCompletionSource localTaskCompletionSource = new TaskCompletionSource();
    localTaskCompletionSource.setException(paramException);
    return localTaskCompletionSource.getTask();
  }
  
  public void deleteAAID(String paramString)
    throws ApiException
  {
    if (paramString != null) {}
    try
    {
      boolean bool = b.containsKey(paramString);
      if (!bool) {
        return;
      }
      PushPreferences localPushPreferences = b;
      localPushPreferences.removeKey(paramString);
      b.removeKey(makeKey(paramString));
      return;
    }
    catch (RuntimeException paramString)
    {
      for (;;) {}
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
  }
  
  public String getAAId(String paramString)
    throws ApiException
  {
    if (paramString != null) {}
    try
    {
      boolean bool = b.containsKey(paramString);
      if (bool)
      {
        paramString = b.getString(paramString);
        return paramString;
      }
      String str = UUID.randomUUID().toString();
      PushPreferences localPushPreferences = b;
      localPushPreferences.saveString(paramString, str);
      b.saveLong(makeKey(paramString), Long.valueOf(System.currentTimeMillis()));
      return str;
    }
    catch (RuntimeException paramString)
    {
      for (;;) {}
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
  }
  
  public long getCreationTime(String paramString)
    throws ApiException
  {
    if (paramString != null) {}
    try
    {
      boolean bool = b.containsKey(makeKey(paramString));
      if (!bool) {
        getAAId(paramString);
      }
      long l = b.getLong(makeKey(paramString));
      return l;
    }
    catch (RuntimeException paramString)
    {
      for (;;) {}
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
  }
  
  public Task getToken()
  {
    Object localObject1;
    if (ProxyCenter.getProxy() != null) {
      localObject1 = TAG;
    }
    try
    {
      HMSLog.append((String)localObject1, "use proxy get token, please check HmsMessageService.onNewToken receive result.");
      localObject1 = ProxyCenter.getProxy();
      localObject2 = c;
      ((PushProxy)localObject1).getToken((Context)localObject2, null, null);
      localObject1 = new TaskCompletionSource();
      ((TaskCompletionSource)localObject1).setResult(new TokenResult());
      localObject1 = ((TaskCompletionSource)localObject1).getTask();
      return localObject1;
    }
    catch (ApiException localApiException)
    {
      Object localObject2;
      return close(localApiException);
      String str = JSONArray.getString(c, "push.gettoken");
      try
      {
        localObject2 = c;
      }
      catch (RuntimeException localRuntimeException1)
      {
        Object localObject3;
        for (;;) {}
      }
      try
      {
        localObject2 = b.getType((Context)localObject2, null, null);
        localObject3 = c;
        ((TokenReq)localObject2).setAaid(HmsInstanceId.getInstance((Context)localObject3).getId());
        localObject3 = d;
      }
      catch (Exception localException2)
      {
        break label143;
      }
      try
      {
        localObject2 = ((HuaweiApi)localObject3).doWrite(new Frame("push.gettoken", (TokenReq)localObject2, c, str));
        return localObject2;
      }
      catch (RuntimeException localRuntimeException2)
      {
        break label167;
      }
      catch (Exception localException3)
      {
        break label143;
      }
      JSONArray.get(c, "push.gettoken", str, ErrorEnum.ERROR_INTERNAL_ERROR);
      return close(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
      JSONArray.get(c, "push.gettoken", str, ErrorEnum.ERROR_INTERNAL_ERROR);
      return close(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
    }
    catch (Exception localException1)
    {
      for (;;) {}
    }
    return close(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
  }
  
  public final String makeKey(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("creationTime");
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
}
