package com.huawei.hms.aaid;

import android.app.Activity;
import android.content.Context;
import android.os.Looper;
import android.text.TextUtils;
import com.huawei.hms.aaid.constant.ErrorEnum;
import com.huawei.hms.aaid.entity.DeleteTokenReq;
import com.huawei.hms.aaid.entity.TokenReq;
import com.huawei.hms.aaid.entity.TokenResult;
import com.huawei.hms.aaid.plugin.ProxyCenter;
import com.huawei.hms.aaid.plugin.PushProxy;
import com.huawei.hms.aaid.task.PushClientBuilder;
import com.huawei.hms.aaid.utils.BaseUtils;
import com.huawei.hms.aaid.utils.PushPreferences;
import com.huawei.hms.api.Api.ApiOptions.NoOptions;
import com.huawei.hms.common.ApiException;
import com.huawei.hms.common.HuaweiApi;
import com.huawei.hms.common.internal.Preconditions;
import com.huawei.hms.common.internal.TaskApiCall;
import com.huawei.hms.configurations.TermSession;
import com.huawei.hms.opendevice.ClassWriter;
import com.huawei.hms.opendevice.Downloader;
import com.huawei.hms.opendevice.Frame;
import com.huawei.hms.opendevice.JSONArray;
import com.huawei.hms.opendevice.Label;
import com.huawei.hms.opendevice.Window;
import com.huawei.hms.opendevice.b;
import com.huawei.hms.opendevice.f;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.provider.tasks.Task;
import com.huawei.provider.tasks.TaskCompletionSource;
import com.huawei.provider.tasks.Tasks;

public class HmsInstanceId
{
  public static final String i = "HmsInstanceId";
  public Context c;
  public HuaweiApi<Api.ApiOptions.NoOptions> d;
  public PushPreferences mPreferences;
  
  public HmsInstanceId(Context paramContext)
  {
    c = paramContext.getApplicationContext();
    mPreferences = new PushPreferences(paramContext, "aaid");
    TermSession localTermSession = new TermSession("HuaweiPush.API");
    if ((paramContext instanceof Activity)) {
      d = new HuaweiApi((Activity)paramContext, localTermSession, null, new PushClientBuilder());
    } else {
      d = new HuaweiApi(paramContext, localTermSession, null, new PushClientBuilder());
    }
    d.setKitSdkVersion(50004300);
  }
  
  public static HmsInstanceId getInstance(Context paramContext)
  {
    Preconditions.checkNotNull(paramContext);
    f.b(paramContext);
    return new HmsInstanceId(paramContext);
  }
  
  public final void b(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    if (Label.a(c))
    {
      String str = ClassWriter.a(c).getString("subjectId");
      if (TextUtils.isEmpty(str))
      {
        ClassWriter.a(c).saveString("subjectId", paramString);
        return;
      }
      if (!str.contains(paramString))
      {
        ClassWriter localClassWriter = ClassWriter.a(c);
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(str);
        localStringBuilder.append(",");
        localStringBuilder.append(paramString);
        localClassWriter.saveString("subjectId", localStringBuilder.toString());
      }
    }
    else
    {
      ClassWriter.a(c).removeKey("subjectId");
    }
  }
  
  public final void c(DeleteTokenReq paramDeleteTokenReq, int paramInt)
    throws ApiException
  {
    String str2 = paramDeleteTokenReq.getSubjectId();
    if (ProxyCenter.getProxy() != null)
    {
      HMSLog.append(i, "use proxy delete token");
      ProxyCenter.getProxy().deleteToken(c, str2, null);
      return;
    }
    String str1 = JSONArray.getString(c, "push.deletetoken");
    Object localObject = c;
    try
    {
      localObject = ClassWriter.a((Context)localObject).get(str2);
      boolean bool = paramDeleteTokenReq.isMultiSender();
      if (bool)
      {
        bool = TextUtils.isEmpty((CharSequence)localObject);
        if (!bool)
        {
          Context localContext = c;
          bool = ((String)localObject).equals(ClassWriter.a(localContext).get(null));
          if (!bool) {}
        }
        else
        {
          paramDeleteTokenReq = c;
          ClassWriter.a(paramDeleteTokenReq).removeKey(str2);
          paramDeleteTokenReq = i;
          HMSLog.append(paramDeleteTokenReq, "The local subject token is null");
          return;
        }
      }
      paramDeleteTokenReq.setToken((String)localObject);
      paramDeleteTokenReq = new Window("push.deletetoken", paramDeleteTokenReq, str1);
      paramDeleteTokenReq.setApiLevel(paramInt);
      localObject = d;
      Tasks.await(((HuaweiApi)localObject).doWrite(paramDeleteTokenReq));
      paramDeleteTokenReq = c;
      ClassWriter.a(paramDeleteTokenReq).a(str2);
      return;
    }
    catch (Exception paramDeleteTokenReq)
    {
      if ((((Exception)paramDeleteTokenReq).getCause() instanceof ApiException))
      {
        paramDeleteTokenReq = (ApiException)((Exception)paramDeleteTokenReq).getCause();
        JSONArray.get(c, "push.deletetoken", str1, paramDeleteTokenReq.getStatusCode());
        throw paramDeleteTokenReq;
      }
      JSONArray.get(c, "push.deletetoken", str1, ErrorEnum.ERROR_INTERNAL_ERROR);
      throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    }
  }
  
  public void deleteAAID()
    throws ApiException
  {
    showHelp();
    Object localObject = mPreferences;
    for (;;)
    {
      try
      {
        bool = ((PushPreferences)localObject).containsKey("aaid");
        if (!bool) {
          return;
        }
        localObject = mPreferences;
      }
      catch (ApiException localApiException)
      {
        boolean bool;
        Context localContext;
        throw localApiException;
      }
      catch (Exception localException1)
      {
        continue;
      }
      try
      {
        ((PushPreferences)localObject).removeKey("aaid");
        localObject = mPreferences;
      }
      catch (Exception localException2)
      {
        continue;
      }
      try
      {
        ((PushPreferences)localObject).removeKey("creationTime");
        localObject = c;
        bool = b.evaluate((Context)localObject);
        if (!bool) {
          return;
        }
        localObject = ProxyCenter.getProxy();
        if (localObject != null) {
          localObject = i;
        }
      }
      catch (Exception localException3) {}
    }
    try
    {
      HMSLog.append((String)localObject, "use proxy delete all token after delete AaId.");
      localObject = ProxyCenter.getProxy();
      localContext = c;
      ((PushProxy)localObject).deleteAllToken(localContext);
      return;
    }
    catch (Exception localException4)
    {
      break label131;
    }
    localObject = c;
    localObject = b.a((Context)localObject);
    ((DeleteTokenReq)localObject).setDeleteType(1);
    ((DeleteTokenReq)localObject).setMultiSender(false);
    c((DeleteTokenReq)localObject, 1);
    localObject = c;
    BaseUtils.deleteAllTokenCache((Context)localObject);
    return;
    label131:
    throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
  }
  
  public void deleteToken(String paramString)
    throws ApiException
  {
    showHelp();
    if (!TextUtils.isEmpty(paramString))
    {
      String str = b.getString(c);
      if (!TextUtils.isEmpty(str))
      {
        if (paramString.equals(str))
        {
          deleteToken(null, null);
          return;
        }
        paramString = b.c(c, paramString);
        paramString.setMultiSender(true);
        c(paramString, 2);
        return;
      }
      throw ErrorEnum.ERROR_MISSING_PROJECT_ID.toApiException();
    }
    throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
  }
  
  public void deleteToken(String paramString1, String paramString2)
    throws ApiException
  {
    showHelp();
    paramString1 = b.a(c, paramString1, paramString2);
    paramString1.setMultiSender(false);
    c(paramString1, 1);
  }
  
  public Task getAAID()
  {
    Object localObject = c;
    try
    {
      localObject = Tasks.callInBackground(new Downloader(((Context)localObject).getApplicationContext()));
      return localObject;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    localObject = new TaskCompletionSource();
    ((TaskCompletionSource)localObject).setException(ErrorEnum.ERROR_INTERNAL_ERROR.toApiException());
    return ((TaskCompletionSource)localObject).getTask();
  }
  
  public long getCreationTime()
  {
    PushPreferences localPushPreferences = mPreferences;
    try
    {
      boolean bool = localPushPreferences.containsKey("creationTime");
      if (!bool) {
        getAAID();
      }
      localPushPreferences = mPreferences;
    }
    catch (Exception localException1)
    {
      long l;
      label39:
      for (;;) {}
    }
    try
    {
      l = localPushPreferences.getLong("creationTime");
      return l;
    }
    catch (Exception localException2)
    {
      break label39;
    }
    return 0L;
  }
  
  public String getId()
  {
    return b.get(c);
  }
  
  public String getToken()
  {
    try
    {
      String str = getToken(null, null);
      return str;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public String getToken(String paramString)
    throws ApiException
  {
    showHelp();
    if (!TextUtils.isEmpty(paramString))
    {
      String str = b.getString(c);
      if (!TextUtils.isEmpty(str))
      {
        if (paramString.equals(str)) {
          return getToken(null, null);
        }
        paramString = b.a(c, paramString);
        paramString.setAaid(getId());
        paramString.setMultiSender(true);
        return toString(paramString, 2);
      }
      throw ErrorEnum.ERROR_MISSING_PROJECT_ID.toApiException();
    }
    throw ErrorEnum.ERROR_ARGUMENTS_INVALID.toApiException();
  }
  
  public String getToken(String paramString1, String paramString2)
    throws ApiException
  {
    showHelp();
    paramString1 = b.getType(c, paramString1, paramString2);
    paramString1.setAaid(getId());
    paramString1.setMultiSender(false);
    ClassWriter.a(c).saveString(c.getPackageName(), "1");
    return toString(paramString1, 1);
  }
  
  public final void showHelp()
    throws ApiException
  {
    if (Looper.getMainLooper() != Looper.myLooper()) {
      return;
    }
    throw ErrorEnum.ERROR_MAIN_THREAD.toApiException();
  }
  
  public final String toString(TokenReq paramTokenReq, int paramInt)
    throws ApiException
  {
    if (ProxyCenter.getProxy() != null)
    {
      HMSLog.append(i, "use proxy get token, please check HmsMessageService.onNewToken receive result.");
      ProxyCenter.getProxy().getToken(c, paramTokenReq.getSubjectId(), null);
      return null;
    }
    b(paramTokenReq.getSubjectId());
    String str = JSONArray.getString(c, "push.gettoken");
    Object localObject = i;
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("getToken req :");
      localStringBuilder.append(paramTokenReq.toString());
      HMSLog.d((String)localObject, localStringBuilder.toString());
      localObject = c;
      paramTokenReq = new Frame("push.gettoken", paramTokenReq, (Context)localObject, str);
      paramTokenReq.setApiLevel(paramInt);
      localObject = d;
      paramTokenReq = Tasks.await(((HuaweiApi)localObject).doWrite(paramTokenReq));
      paramTokenReq = (TokenResult)paramTokenReq;
      paramTokenReq = paramTokenReq.getToken();
      return paramTokenReq;
    }
    catch (Exception paramTokenReq)
    {
      if ((((Exception)paramTokenReq).getCause() instanceof ApiException))
      {
        paramTokenReq = (ApiException)((Exception)paramTokenReq).getCause();
        JSONArray.get(c, "push.gettoken", str, paramTokenReq.getStatusCode());
        throw paramTokenReq;
      }
      JSONArray.get(c, "push.gettoken", str, ErrorEnum.ERROR_INTERNAL_ERROR);
      throw ErrorEnum.ERROR_INTERNAL_ERROR.toApiException();
    }
  }
}
