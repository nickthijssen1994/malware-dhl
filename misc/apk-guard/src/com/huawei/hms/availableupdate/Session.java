package com.huawei.hms.availableupdate;

import android.content.Context;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.utils.IOUtils;
import com.huawei.secure.android.common.testing.SecureSSLSocketFactory;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import javax.net.ssl.HttpsURLConnection;

public class Session
  implements o
{
  public HttpURLConnection delegate;
  public volatile int state = -1;
  
  public Session() {}
  
  public void clear()
  {
    state = 1;
  }
  
  public void close()
  {
    state = -1;
    HttpURLConnection localHttpURLConnection = delegate;
    if (localHttpURLConnection != null) {
      localHttpURLConnection.disconnect();
    }
  }
  
  public final void connect(String paramString, Context paramContext)
    throws IOException
  {
    if (state == 0) {
      HMSLog.toString("HttpRequestHelper", "Not allowed to repeat open http(s) connection.");
    }
    delegate = ((HttpURLConnection)ShooterUrlConnectionInstrumentation.openConnection(new URL(paramString).openConnection()));
    if ((delegate instanceof HttpsURLConnection))
    {
      try
      {
        paramString = SecureSSLSocketFactory.getInstance(paramContext);
        if (paramString != null)
        {
          paramContext = (HttpsURLConnection)delegate;
          paramContext.setSSLSocketFactory(paramString);
        }
        paramContext = (HttpsURLConnection)delegate;
        paramContext.setSSLSocketFactory(paramString);
      }
      catch (IllegalAccessException paramString) {}catch (IllegalArgumentException paramString) {}catch (KeyStoreException paramString) {}catch (CertificateException paramString) {}catch (IOException paramString) {}catch (NoSuchAlgorithmException paramString) {}catch (KeyManagementException paramString) {}
      paramContext = new StringBuilder();
      paramContext.append("Failed to new TLSSocketFactory instance.");
      paramContext.append(((Exception)paramString).getMessage());
      HMSLog.toString("HttpRequestHelper", paramContext.toString());
      throw new IOException("Failed to create SSLSocketFactory.");
    }
    delegate.setConnectTimeout(30000);
    delegate.setReadTimeout(30000);
    delegate.setDoInput(true);
    delegate.setDoOutput(true);
    delegate.setUseCaches(false);
    delegate.setInstanceFollowRedirects(true);
    state = 0;
  }
  
  public int get(String paramString, OutputStream paramOutputStream, int paramInt1, int paramInt2, Context paramContext)
    throws IOException, ObjectMap
  {
    Object localObject3 = null;
    Object localObject2 = null;
    Object localObject1 = localObject3;
    try
    {
      connect(paramString, paramContext);
      localObject1 = localObject3;
      delegate.setRequestMethod("GET");
      if (paramInt1 > 0)
      {
        localObject1 = localObject3;
        paramString = delegate;
        localObject1 = localObject3;
        paramContext = new StringBuilder();
        localObject1 = localObject3;
        paramContext.append("bytes=");
        localObject1 = localObject3;
        paramContext.append(paramInt1);
        localObject1 = localObject3;
        paramContext.append("-");
        localObject1 = localObject3;
        paramContext.append(paramInt2);
        localObject1 = localObject3;
        paramString.addRequestProperty("Range", paramContext.toString());
      }
      localObject1 = localObject3;
      paramInt2 = delegate.getResponseCode();
      if ((paramInt1 <= 0) || (paramInt2 != 206))
      {
        paramString = localObject2;
        if (paramInt1 <= 0)
        {
          paramString = localObject2;
          if (paramInt2 != 200) {}
        }
      }
      else
      {
        localObject1 = localObject3;
        paramContext = delegate.getInputStream();
        paramString = paramContext;
        localObject1 = paramString;
        read(new BufferedInputStream(paramContext, 4096), paramOutputStream);
        localObject1 = paramString;
        paramOutputStream.flush();
      }
      IOUtils.closeQuietly(paramString);
      return paramInt2;
    }
    catch (Throwable paramString)
    {
      IOUtils.closeQuietly((InputStream)localObject1);
      throw paramString;
    }
  }
  
  public final void read(InputStream paramInputStream, OutputStream paramOutputStream)
    throws IOException, ObjectMap
  {
    byte[] arrayOfByte = new byte['?'];
    do
    {
      int i = paramInputStream.read(arrayOfByte);
      if (-1 == i) {
        break;
      }
      paramOutputStream.write(arrayOfByte, 0, i);
    } while (state != 1);
    throw new ObjectMap("HTTP(s) request was canceled.");
  }
}
