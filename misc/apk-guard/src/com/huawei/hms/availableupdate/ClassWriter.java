package com.huawei.hms.availableupdate;

import android.app.Activity;
import android.content.ContextWrapper;
import android.content.Intent;
import android.text.TextUtils;
import android.view.KeyEvent;
import com.huawei.hms.activity.IBridgeActivityDelegate;
import com.huawei.hms.android.SystemUtils;
import com.huawei.hms.common.util.AGCUtils;
import com.huawei.hms.support.hianalytics.HiAnalyticsUtils;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.update.labs.UpdateBean;
import com.huawei.hms.utils.NetWorkUtil;
import com.huawei.hms.utils.PackageManagerHelper;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public abstract class ClassWriter
  implements IBridgeActivityDelegate
{
  public String b = null;
  public String c = null;
  public UpdateBean d = null;
  public h e = null;
  public int f = 0;
  public int i = -1;
  public IBridgeActivityDelegate o;
  public boolean p = false;
  public WeakReference<Activity> v;
  
  public ClassWriter() {}
  
  public static String a(int paramInt)
  {
    if (paramInt != 0)
    {
      switch (paramInt)
      {
      default: 
        return "";
      case 7: 
        return p.class.getName();
      case 6: 
        return f0.class.getName();
      }
      return x.class.getName();
    }
    return e0.class.getName();
  }
  
  public void a()
  {
    h localH = e;
    if (localH == null) {
      return;
    }
    try
    {
      localH.b();
      e = null;
      return;
    }
    catch (IllegalStateException localIllegalStateException)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("In dismissDialog, Failed to dismiss the dialog.");
      localStringBuilder.append(localIllegalStateException.getMessage());
      HMSLog.toString("AbsUpdateWizard", localStringBuilder.toString());
    }
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    Activity localActivity = get();
    if (localActivity != null)
    {
      if (localActivity.isFinishing()) {
        return;
      }
      b(paramInt1, paramInt2);
      Intent localIntent = new Intent();
      localIntent.putExtra("intent.extra.DELEGATE_CLASS_OBJECT", getClass().getName());
      localIntent.putExtra("intent.extra.RESULT", paramInt1);
      localActivity.setResult(-1, localIntent);
      localActivity.finish();
    }
  }
  
  public void a(h paramH) {}
  
  public final void a(UpdateBean paramUpdateBean)
  {
    d = paramUpdateBean;
  }
  
  public abstract void a(Class paramClass);
  
  public final void a(ArrayList paramArrayList)
  {
    if ((paramArrayList != null) && (paramArrayList.size() > 0)) {
      paramArrayList = a(((Integer)paramArrayList.get(0)).intValue());
    } else {
      paramArrayList = null;
    }
    if (paramArrayList == null) {
      return;
    }
    try
    {
      paramArrayList = Class.forName(paramArrayList).asSubclass(IBridgeActivityDelegate.class).newInstance();
      paramArrayList = (IBridgeActivityDelegate)paramArrayList;
      o = paramArrayList;
      return;
    }
    catch (ClassNotFoundException paramArrayList) {}catch (IllegalAccessException paramArrayList) {}catch (InstantiationException paramArrayList) {}catch (ClassCastException paramArrayList) {}
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("getBridgeActivityDelegate error");
    localStringBuilder.append(((Exception)paramArrayList).getMessage());
    HMSLog.toString("AbsUpdateWizard", localStringBuilder.toString());
  }
  
  public boolean a(String paramString, int paramInt)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    Activity localActivity = get();
    if (localActivity != null)
    {
      if (localActivity.isFinishing()) {
        return false;
      }
      if (new PackageManagerHelper(localActivity).getPackageVersionCode(paramString) >= paramInt) {
        return true;
      }
    }
    return false;
  }
  
  public void b(int paramInt1, int paramInt2)
  {
    if (!SystemUtils.isChinaROM())
    {
      HMSLog.append("AbsUpdateWizard", "not ChinaROM ");
      return;
    }
    Activity localActivity = get();
    if (localActivity != null)
    {
      if (localActivity.isFinishing()) {
        return;
      }
      int j = new PackageManagerHelper(localActivity).getPackageVersionCode(c);
      HashMap localHashMap = new HashMap();
      localHashMap.put("package", localActivity.getPackageName());
      localHashMap.put("target_package", c);
      localHashMap.put("target_ver", String.valueOf(j));
      localHashMap.put("sdk_ver", String.valueOf(50005300));
      localHashMap.put("app_id", AGCUtils.getAppId(localActivity));
      localHashMap.put("trigger_api", "core.connnect");
      localHashMap.put("update_type", String.valueOf(paramInt2));
      localHashMap.put("net_type", String.valueOf(NetWorkUtil.getNetworkType(localActivity)));
      localHashMap.put("result", get(paramInt1, paramInt2));
      HiAnalyticsUtils.getInstance().onEvent(localActivity, "HMS_SDK_UPDATE", localHashMap);
    }
  }
  
  public void b(h paramH) {}
  
  public boolean c(boolean paramBoolean)
  {
    Activity localActivity = get();
    if (localActivity == null) {
      return false;
    }
    Object localObject = d.getTypeList();
    if (((ArrayList)localObject).size() > 0) {
      ((ArrayList)localObject).remove(0);
    }
    if (o == null) {
      a((ArrayList)localObject);
    }
    if (o != null)
    {
      p = true;
      d.setTypeList((ArrayList)localObject);
      d.setNeedConfirm(paramBoolean);
      localObject = o;
      if ((localObject instanceof ClassWriter)) {
        ((ClassWriter)localObject).a(d);
      }
      o.onBridgeActivityCreate(localActivity);
      return true;
    }
    return false;
  }
  
  public Activity get()
  {
    WeakReference localWeakReference = v;
    if (localWeakReference == null) {
      return null;
    }
    return (Activity)localWeakReference.get();
  }
  
  public final String get(int paramInt1, int paramInt2)
  {
    String str = String.valueOf(paramInt1);
    if (paramInt2 != 0)
    {
      if (paramInt2 != 5)
      {
        if (paramInt2 != 6) {
          return str;
        }
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("4000");
        localStringBuilder.append(str);
        return localStringBuilder.toString();
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("5000");
      localStringBuilder.append(str);
      return localStringBuilder.toString();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("0000");
    localStringBuilder.append(str);
    return localStringBuilder.toString();
  }
  
  public void onBridgeActivityCreate(Activity paramActivity)
  {
    v = new WeakReference(paramActivity);
    if (d == null)
    {
      paramActivity = paramActivity.getIntent();
      if (paramActivity == null) {
        return;
      }
      d = ((UpdateBean)paramActivity.getSerializableExtra("intent.extra.update.info"));
      if (d == null) {
        return;
      }
    }
    c = d.a();
    b = d.getClientAppName();
    f = d.get();
    d.b();
    o = null;
    p = false;
    i = -1;
  }
  
  public void onBridgeActivityDestroy()
  {
    v = null;
    a();
    if (p)
    {
      IBridgeActivityDelegate localIBridgeActivityDelegate = o;
      if (localIBridgeActivityDelegate != null) {
        localIBridgeActivityDelegate.onBridgeActivityDestroy();
      }
    }
  }
  
  public void onBridgeConfigurationChanged()
  {
    if (p)
    {
      localObject = o;
      if (localObject != null)
      {
        ((IBridgeActivityDelegate)localObject).onBridgeConfigurationChanged();
        return;
      }
    }
    Object localObject = e;
    if (localObject == null) {
      return;
    }
    localObject = localObject.getClass();
    e.b();
    e = null;
    a((Class)localObject);
  }
  
  public void onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if (p)
    {
      IBridgeActivityDelegate localIBridgeActivityDelegate = o;
      if (localIBridgeActivityDelegate != null) {
        localIBridgeActivityDelegate.onKeyUp(paramInt, paramKeyEvent);
      }
    }
  }
}
