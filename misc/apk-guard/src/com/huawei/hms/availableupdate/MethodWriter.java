package com.huawei.hms.availableupdate;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import android.view.KeyEvent;
import com.huawei.hms.activity.IBridgeActivityDelegate;
import com.huawei.hms.adapter.sysobs.SystemManager;
import com.huawei.hms.android.SystemUtils;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.update.labs.UpdateBean;
import com.huawei.hms.update.provider.UpdateProvider;
import com.huawei.hms.utils.FileUtil;
import com.huawei.hms.utils.HMSPackageManager;
import com.huawei.hms.utils.PackageManagerHelper;
import com.huawei.hms.utils.ResourceLoaderUtil;
import com.huawei.updatesdk.UpdateSdkAPI;
import com.huawei.updatesdk.service.appmgr.bean.ApkUpgradeInfo;
import java.io.File;

public class MethodWriter
  extends ClassWriter
  implements Item
{
  public c b;
  public g d;
  public int h = 0;
  
  public MethodWriter() {}
  
  public static void a(Item paramItem, int paramInt, g paramG)
  {
    if (paramItem != null) {
      new Handler(Looper.getMainLooper()).post(new f0.a(paramItem, paramInt, paramG));
    }
  }
  
  public static Uri getUri(Context paramContext, File paramFile)
  {
    PackageManagerHelper localPackageManagerHelper = new PackageManagerHelper(paramContext);
    String str = paramContext.getPackageName();
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(str);
    ((StringBuilder)localObject).append(".hms.update.provider");
    localObject = ((StringBuilder)localObject).toString();
    int i;
    if ((Build.VERSION.SDK_INT > 23) && ((getApplicationInfotargetSdkVersion > 23) || (localPackageManagerHelper.hasProvider(str, (String)localObject)))) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      return UpdateProvider.getUriForFile(paramContext, (String)localObject, paramFile);
    }
    return Uri.fromFile(paramFile);
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, File paramFile)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Enter onDownloadPackage, status: ");
    localStringBuilder.append(Segment.toString(paramInt1));
    localStringBuilder.append(", reveived: ");
    localStringBuilder.append(paramInt2);
    localStringBuilder.append(", total: ");
    localStringBuilder.append(paramInt3);
    HMSLog.append("UpdateWizard", localStringBuilder.toString());
    if (paramInt1 != 2000)
    {
      if (paramInt1 != 2100)
      {
        if (paramInt1 != 2101)
        {
          switch (paramInt1)
          {
          default: 
            return;
          case 2203: 
          case 2204: 
            a(d0.class);
            return;
          case 2202: 
            a(u.class);
            return;
          }
          a(c0.class);
        }
      }
      else
      {
        paramFile = e;
        if ((paramFile != null) && ((paramFile instanceof b)))
        {
          int i = 0;
          paramInt1 = i;
          if (paramInt2 >= 0)
          {
            paramInt1 = i;
            if (paramInt3 > 0) {
              paramInt1 = (int)(paramInt2 * 100L / paramInt3);
            }
          }
          h = paramInt1;
          ((b)e).b(paramInt1);
        }
      }
    }
    else
    {
      a();
      if (paramFile == null)
      {
        f();
        return;
      }
      if (FileUtil.verifyHash(d.a, paramFile))
      {
        onPostExecute(paramFile);
        return;
      }
      HMSLog.append("UpdateWizard", "Hash value mismatch for download file");
    }
  }
  
  public void a(int paramInt, g paramG)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Enter onCheckUpdate, status: ");
    localStringBuilder.append(Segment.toString(paramInt));
    HMSLog.append("UpdateWizard", localStringBuilder.toString());
    if (paramInt != 1000)
    {
      switch (paramInt)
      {
      default: 
        a(b0.class);
        return;
      }
      a(b0.class);
      return;
    }
    d = paramG;
    visit();
  }
  
  public final void a(Intent paramIntent, Item paramItem)
  {
    try
    {
      int i = paramIntent.getIntExtra("status", -99);
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("CheckUpdateCallBack status is ");
      ((StringBuilder)localObject1).append(i);
      HMSLog.append("UpdateWizard", ((StringBuilder)localObject1).toString());
      localObject1 = paramIntent.getStringExtra("failreason");
      Object localObject2;
      if (!TextUtils.isEmpty((CharSequence)localObject1))
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("checkTargetAppUpdate reason is ");
        ((StringBuilder)localObject2).append((String)localObject1);
        HMSLog.toString("UpdateWizard", ((StringBuilder)localObject2).toString());
      }
      if (i == 7)
      {
        paramIntent = paramIntent.getSerializableExtra("updatesdk_update_info");
        if ((paramIntent instanceof ApkUpgradeInfo))
        {
          localObject2 = (ApkUpgradeInfo)paramIntent;
          paramIntent = ((ApkUpgradeInfo)localObject2).getPackage_();
          i = ((ApkUpgradeInfo)localObject2).getVersionCode_();
          localObject1 = ((ApkUpgradeInfo)localObject2).getDownurl_();
          int j = ((ApkUpgradeInfo)localObject2).getSize_();
          localObject2 = ((ApkUpgradeInfo)localObject2).getSha256_();
          if ((!TextUtils.isEmpty(paramIntent)) && (paramIntent.equals(d.a())))
          {
            if (i < d.get())
            {
              paramIntent = new StringBuilder();
              paramIntent.append("CheckUpdateCallBack versionCode is ");
              paramIntent.append(i);
              paramIntent.append("bean.getClientVersionCode() is ");
              paramIntent.append(d.get());
              HMSLog.toString("UpdateWizard", paramIntent.toString());
              a(paramItem, 1203, null);
              return;
            }
            if ((!TextUtils.isEmpty((CharSequence)localObject1)) && (!TextUtils.isEmpty((CharSequence)localObject2)))
            {
              a(paramItem, 1000, new g(paramIntent, i, (String)localObject1, j, (String)localObject2));
              return;
            }
            a(paramItem, 1201, null);
            return;
          }
          a(paramItem, 1201, null);
        }
      }
      else
      {
        if (i == 3)
        {
          a(paramItem, 1202, null);
          return;
        }
        a(paramItem, 1201, null);
        return;
      }
    }
    catch (Exception paramIntent)
    {
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("intent has some error");
      ((StringBuilder)localObject1).append(((Exception)paramIntent).getMessage());
      HMSLog.toString("UpdateWizard", ((StringBuilder)localObject1).toString());
      a(paramItem, 1201, null);
    }
  }
  
  public void a(h paramH)
  {
    HMSLog.append("UpdateWizard", "Enter onCancel.");
    if ((paramH instanceof XYPlot))
    {
      c();
      return;
    }
    if ((paramH instanceof MyActivity))
    {
      e();
      c();
      return;
    }
    if ((paramH instanceof b))
    {
      e();
      a(v.class);
      return;
    }
    if ((paramH instanceof Structure))
    {
      a(w.class);
      b();
      return;
    }
    if ((paramH instanceof WeatherConditionFormat))
    {
      c();
      return;
    }
    if ((paramH instanceof Log))
    {
      c();
      return;
    }
    f();
  }
  
  public void a(Class paramClass)
  {
    if (!c(get())) {
      return;
    }
    a();
    try
    {
      paramClass = paramClass.newInstance();
      paramClass = (h)paramClass;
      localObject = b;
      boolean bool = TextUtils.isEmpty((CharSequence)localObject);
      if ((!bool) && ((paramClass instanceof XYPlot)))
      {
        localObject = ResourceLoaderUtil.getString("hms_update_title");
        b = ((String)localObject);
        localObject = (XYPlot)paramClass;
        String str = b;
        ((XYPlot)localObject).b(str);
      }
      if ((h > 0) && ((paramClass instanceof b)))
      {
        localObject = (b)paramClass;
        int i = h;
        ((b)localObject).a(i);
      }
      paramClass.a(this);
      e = paramClass;
      return;
    }
    catch (IllegalStateException paramClass) {}catch (IllegalAccessException paramClass) {}catch (InstantiationException paramClass) {}
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("In showDialog, Failed to show the dialog.");
    ((StringBuilder)localObject).append(((Exception)paramClass).getMessage());
    HMSLog.toString("UpdateWizard", ((StringBuilder)localObject).toString());
  }
  
  public final void b()
  {
    Activity localActivity = get();
    if ((localActivity != null) && (!localActivity.isFinishing()))
    {
      if (!c(localActivity)) {
        return;
      }
      e();
      b = new d(new e(localActivity));
      b.a(this, d);
      return;
    }
    a(c0.class);
  }
  
  public void b(h paramH)
  {
    HMSLog.append("UpdateWizard", "Enter onDoWork.");
    if ((paramH instanceof XYPlot))
    {
      paramH.b();
      a(q.class);
      c(this);
      return;
    }
    if ((paramH instanceof Structure))
    {
      paramH.b();
      c();
      return;
    }
    if ((paramH instanceof WeatherConditionFormat))
    {
      a(w.class);
      b();
      return;
    }
    if ((paramH instanceof Log))
    {
      a(w.class);
      b();
      return;
    }
    if ((paramH instanceof L))
    {
      f();
      return;
    }
    if ((paramH instanceof j))
    {
      f();
      return;
    }
    if ((paramH instanceof AppCompatDelegateImplV7)) {
      f();
    }
  }
  
  public void c()
  {
    a(13, i);
  }
  
  public final void c(Item paramItem)
  {
    if (paramItem == null) {
      return;
    }
    Activity localActivity = get();
    if ((localActivity != null) && (!localActivity.isFinishing()))
    {
      if (!c(localActivity)) {
        return;
      }
      UpdateSdkAPI.checkTargetAppUpdate(localActivity, d.a(), new f0.b(this, paramItem));
      return;
    }
    a(paramItem, 1201, null);
  }
  
  public final boolean c(Activity paramActivity)
  {
    if (HMSPackageManager.getInstance(paramActivity).isApkUpdateNecessary(d.get())) {
      return true;
    }
    a();
    SystemManager.getInstance().notifyUpdateResult(0);
    return false;
  }
  
  public final void e()
  {
    c localC = b;
    if (localC != null)
    {
      localC.a();
      b = null;
    }
  }
  
  public final void f()
  {
    if (!c(false))
    {
      a(8, i);
      return;
    }
    b(8, i);
  }
  
  public int getRequestCode()
  {
    return 2006;
  }
  
  public void onBridgeActivityCreate(Activity paramActivity)
  {
    super.onBridgeActivityCreate(paramActivity);
    if (d == null) {
      return;
    }
    i = 6;
    if (!c(paramActivity)) {
      return;
    }
    if ((d.isNeedConfirm()) && (!TextUtils.isEmpty(b)))
    {
      a(y.class);
      return;
    }
    a(q.class);
    c(this);
  }
  
  public void onBridgeActivityDestroy()
  {
    e();
    super.onBridgeActivityDestroy();
  }
  
  public boolean onBridgeActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (p)
    {
      IBridgeActivityDelegate localIBridgeActivityDelegate = o;
      if (localIBridgeActivityDelegate != null) {
        return localIBridgeActivityDelegate.onBridgeActivityResult(paramInt1, paramInt2, paramIntent);
      }
    }
    if ((i == 6) && (paramInt1 == getRequestCode()))
    {
      if (a(c, f)) {
        a(0, i);
      } else {
        f();
      }
      return true;
    }
    return false;
  }
  
  public void onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if (p)
    {
      IBridgeActivityDelegate localIBridgeActivityDelegate = o;
      if (localIBridgeActivityDelegate != null)
      {
        localIBridgeActivityDelegate.onKeyUp(paramInt, paramKeyEvent);
        return;
      }
    }
    if (4 == paramInt)
    {
      HMSLog.append("UpdateWizard", "In onKeyUp, Call finish.");
      paramKeyEvent = get();
      if ((paramKeyEvent != null) && (!paramKeyEvent.isFinishing()))
      {
        paramKeyEvent.setResult(0, null);
        paramKeyEvent.finish();
      }
    }
  }
  
  public final void onPostExecute(File paramFile)
  {
    Object localObject = get();
    if (localObject != null)
    {
      if (((Activity)localObject).isFinishing()) {
        return;
      }
      paramFile = getUri((Context)localObject, paramFile);
      if (paramFile == null)
      {
        HMSLog.toString("UpdateWizard", "In startInstaller, Failed to creates a Uri from a file.");
        f();
        return;
      }
      if (!c((Activity)localObject)) {
        return;
      }
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.setDataAndType(paramFile, "application/vnd.android.package-archive");
      localIntent.setFlags(3);
      localIntent.putExtra("android.intent.extra.NOT_UNKNOWN_SOURCE", true);
      try
      {
        ((Activity)localObject).startActivityForResult(localIntent, getRequestCode());
        return;
      }
      catch (ActivityNotFoundException paramFile)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("In startInstaller, Failed to start package installer.");
        ((StringBuilder)localObject).append(paramFile.getMessage());
        HMSLog.toString("UpdateWizard", ((StringBuilder)localObject).toString());
        f();
      }
    }
  }
  
  public final void visit()
  {
    Object localObject = get();
    if (localObject != null) {
      localObject = SystemUtils.getNetType(((ContextWrapper)localObject).getBaseContext());
    } else {
      localObject = "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("current network is ");
    localStringBuilder.append((String)localObject);
    HMSLog.append("UpdateWizard", localStringBuilder.toString());
    if ("WIFI".equals(localObject))
    {
      a(w.class);
      b();
      HMSLog.append("UpdateWizard", "current network is wifi");
      return;
    }
    a(t.class);
    HMSLog.append("UpdateWizard", "current network is not wifi");
  }
}
