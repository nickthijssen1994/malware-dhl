package com.huawei.hms.support.hianalytics;

import android.content.Context;
import android.text.TextUtils;
import com.huawei.hianalytics.process.HiAnalyticsManager;
import com.huawei.hianalytics.util.HiAnalyticTools;
import com.huawei.hms.hatool.HmsHiAnalyticsUtils;
import com.huawei.hms.stats.ClassWriter;
import com.huawei.hms.stats.Label;
import com.huawei.hms.stats.b;
import com.huawei.hms.support.model.HMSLog;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public class HiAnalyticsUtils
{
  public static final Object LOCK_INST = new Object();
  public static final Object LOCK_REPORT = new Object();
  public static final String PAGE_KEY = "HiAnalyticsUtils";
  public static HiAnalyticsUtils sInstance;
  public int count = 0;
  public boolean isHianalyticsExist = Label.a();
  
  public HiAnalyticsUtils() {}
  
  public static LinkedHashMap convertToLinkedHashMap(Map paramMap)
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    Iterator localIterator = paramMap.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      localLinkedHashMap.put(str, paramMap.get(str));
    }
    return localLinkedHashMap;
  }
  
  public static HiAnalyticsUtils getInstance()
  {
    Object localObject = LOCK_INST;
    try
    {
      if (sInstance == null) {
        sInstance = new HiAnalyticsUtils();
      }
      HiAnalyticsUtils localHiAnalyticsUtils = sInstance;
      return localHiAnalyticsUtils;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private String getReportJson(Map paramMap)
  {
    if (paramMap == null) {
      return null;
    }
    localJSONObject = new JSONObject();
    try
    {
      paramMap = paramMap.entrySet().iterator();
      Object localObject1;
      for (;;)
      {
        boolean bool = paramMap.hasNext();
        if (!bool) {
          break;
        }
        localObject1 = paramMap.next();
        localObject1 = (Map.Entry)localObject1;
        Object localObject2 = ((Map.Entry)localObject1).getKey();
        localObject2 = (String)localObject2;
        localJSONObject.put((String)localObject2, ((Map.Entry)localObject1).getValue());
      }
      return localJSONObject.toString();
    }
    catch (JSONException paramMap)
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("AnalyticsHelper create json exception");
      ((StringBuilder)localObject1).append(paramMap.getMessage());
      HMSLog.toString("HiAnalyticsUtils", ((StringBuilder)localObject1).toString());
    }
  }
  
  private void reportOnNeed(Context paramContext)
  {
    Object localObject = LOCK_REPORT;
    try
    {
      if (count < 60)
      {
        count += 1;
      }
      else
      {
        count = 0;
        if (!isHianalyticsExist)
        {
          HmsHiAnalyticsUtils.onReport();
        }
        else
        {
          b.c(paramContext, 0);
          b.c(paramContext, 1);
        }
      }
      return;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
  
  public static String versionCodeToName(String paramString)
  {
    if ((!TextUtils.isEmpty(paramString)) && ((paramString.length() == 8) || (paramString.length() == 9))) {}
    try
    {
      Integer.parseInt(paramString);
      StringBuilder localStringBuilder = new StringBuilder();
      int i = paramString.length();
      localStringBuilder.append(Integer.parseInt(paramString.substring(0, i - 7)));
      localStringBuilder.append(".");
      i = paramString.length();
      int j = paramString.length();
      localStringBuilder.append(Integer.parseInt(paramString.substring(i - 7, j - 5)));
      localStringBuilder.append(".");
      i = paramString.length();
      j = paramString.length();
      localStringBuilder.append(Integer.parseInt(paramString.substring(i - 5, j - 3)));
      localStringBuilder.append(".");
      i = paramString.length();
      localStringBuilder.append(Integer.parseInt(paramString.substring(i - 3)));
      paramString = localStringBuilder.toString();
      return paramString;
    }
    catch (NumberFormatException paramString)
    {
      for (;;) {}
    }
    return "";
    return "";
  }
  
  public void enableLog()
  {
    HMSLog.append("HiAnalyticsUtils", "Enable Log");
    if (!isHianalyticsExist)
    {
      HmsHiAnalyticsUtils.enableLog();
      return;
    }
    HMSLog.append("HiAnalyticsUtils", "cp needs to pass in the context, this method is not supported");
  }
  
  public void enableLog(Context paramContext)
  {
    HMSLog.append("HiAnalyticsUtils", "Enable Log");
    if (!isHianalyticsExist)
    {
      HmsHiAnalyticsUtils.enableLog();
      return;
    }
    HiAnalyticTools.enableLog(paramContext);
  }
  
  public boolean getInitFlag()
  {
    if (!isHianalyticsExist) {
      return HmsHiAnalyticsUtils.getInitFlag();
    }
    return HiAnalyticsManager.getInitFlag("hms_config_tag");
  }
  
  public boolean hasError(Context paramContext)
  {
    return ClassWriter.a(paramContext);
  }
  
  public void onBuoyEvent(Context paramContext, String paramString1, String paramString2)
  {
    if (hasError(paramContext)) {
      return;
    }
    if (paramContext != null) {
      onEvent2(paramContext, paramString1, paramString2);
    }
  }
  
  public void onEvent(Context paramContext, String paramString, Map paramMap)
  {
    if (hasError(paramContext)) {
      return;
    }
    String str = getReportJson(paramMap);
    if ((!TextUtils.isEmpty(str)) && (paramContext != null) && (getInitFlag()))
    {
      if (!isHianalyticsExist)
      {
        HmsHiAnalyticsUtils.onEvent(paramContext, paramString, str);
        HmsHiAnalyticsUtils.onEvent(1, paramString, convertToLinkedHashMap(paramMap));
      }
      else
      {
        b.c(paramContext, paramString, str);
        b.c(paramContext, 1, paramString, convertToLinkedHashMap(paramMap));
      }
      reportOnNeed(paramContext);
    }
  }
  
  public void onEvent2(Context paramContext, String paramString1, String paramString2)
  {
    if (hasError(paramContext)) {
      return;
    }
    if ((paramContext != null) && (getInitFlag()))
    {
      if (!isHianalyticsExist)
      {
        HmsHiAnalyticsUtils.onEvent(paramContext, paramString1, paramString2);
        return;
      }
      b.c(paramContext, paramString1, paramString2);
    }
  }
  
  public void onNewEvent(Context paramContext, String paramString, Map paramMap)
  {
    if (hasError(paramContext)) {
      return;
    }
    String str = getReportJson(paramMap);
    if ((!TextUtils.isEmpty(str)) && (paramContext != null) && (getInitFlag()))
    {
      if (!isHianalyticsExist)
      {
        HmsHiAnalyticsUtils.onEvent(paramContext, paramString, str);
        HmsHiAnalyticsUtils.onEvent(1, paramString, convertToLinkedHashMap(paramMap));
      }
      else
      {
        b.c(paramContext, paramString, str);
        b.c(paramContext, 1, paramString, convertToLinkedHashMap(paramMap));
      }
      reportOnNeed(paramContext);
    }
  }
  
  public void onReport(Context paramContext, String paramString, Map paramMap)
  {
    if (hasError(paramContext)) {
      return;
    }
    String str = getReportJson(paramMap);
    if ((!TextUtils.isEmpty(str)) && (paramContext != null) && (getInitFlag()))
    {
      HMSLog.append("HiAnalyticsUtils", "Report the data");
      if (!isHianalyticsExist)
      {
        HmsHiAnalyticsUtils.onEvent(paramContext, paramString, str);
        HmsHiAnalyticsUtils.onEvent(1, paramString, convertToLinkedHashMap(paramMap));
        HmsHiAnalyticsUtils.onReport();
        return;
      }
      b.c(paramContext, paramString, str);
      b.c(paramContext, 1, paramString, convertToLinkedHashMap(paramMap));
      b.c(paramContext, 0);
      b.c(paramContext, 1);
    }
  }
}
