package com.huawei.hms.support.mozilla.push.service;

import android.app.Notification.Builder;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import com.huawei.hms.push.Buffer;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.push.pushselfshow.SelfShow;
import com.huawei.hms.support.mozilla.push.utils.common.NotificationUtil;
import com.huawei.hms.utils.HMSPackageManager;
import com.huawei.hms.utils.PackageManagerHelper.PackageStates;
import com.huawei.hms.utils.ResourceLoaderUtil;
import java.util.Objects;

public class HmsMsgService
  extends Service
{
  public static final String PAGE_KEY = "HmsMsgService";
  
  public HmsMsgService() {}
  
  public static void invokeSelfShow(Context paramContext, Bundle paramBundle)
  {
    if (!NotificationUtil.areNotificationsEnabled(paramContext))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramContext.getPackageName());
      ((StringBuilder)localObject).append(" disable display notification.");
      HMSLog.append("HmsMsgService", ((StringBuilder)localObject).toString());
    }
    Object localObject = new Intent();
    ((Intent)localObject).setAction("com.huawei.push.msg.NOTIFY_MSG");
    ((Intent)localObject).putExtra("selfshow_info", Buffer.readByteArray(paramBundle, "selfshow_info"));
    ((Intent)localObject).putExtra("selfshow_token", Buffer.readByteArray(paramBundle, "selfshow_token"));
    ((Intent)localObject).setPackage(Buffer.processMessage(paramBundle, "push_package"));
    SelfShow.onReceive(paramContext, (Intent)localObject);
    HMSLog.append("HmsMsgService", "invokeSelfShow done");
  }
  
  public static void sendBroadcastToHms(Context paramContext, Bundle paramBundle)
  {
    try
    {
      localIntent = new Intent();
    }
    catch (SecurityException paramContext)
    {
      Intent localIntent;
      for (;;) {}
    }
    catch (Exception paramContext)
    {
      label113:
      label121:
      for (;;) {}
    }
    try
    {
      localIntent.setAction("com.huawei.android.push.intent.RECEIVE");
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    try
    {
      localIntent.putExtra("msg_data", Buffer.readByteArray(paramBundle, "msg_data"));
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    try
    {
      localIntent.putExtra("device_token", Buffer.readByteArray(paramBundle, "device_token"));
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    try
    {
      localIntent.putExtra("msgIdStr", Buffer.processMessage(paramBundle, "msgIdStr"));
      localIntent.setFlags(32);
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    try
    {
      localIntent.setPackage(Buffer.processMessage(paramBundle, "push_package"));
      paramBundle = new StringBuilder();
      paramBundle.append(paramContext.getPackageName());
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    try
    {
      paramBundle.append(".permission.PROCESS_PUSH_MSG");
      paramContext.sendBroadcast(localIntent, paramBundle.toString());
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    try
    {
      HMSLog.append("HmsMsgService", "send broadcast passby done");
      return;
    }
    catch (SecurityException paramContext)
    {
      break label121;
    }
    catch (Exception paramContext)
    {
      break label113;
    }
    HMSLog.append("HmsMsgService", "send broadcast Exception");
    return;
    HMSLog.append("HmsMsgService", "send broadcast SecurityException");
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    HMSLog.append("HmsMsgService", "onBind");
    Messenger localMessenger = new Messenger(new PushHandler());
    stopService(paramIntent);
    return localMessenger.getBinder();
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (Build.VERSION.SDK_INT >= 26) {
      stopForeground(true);
    }
  }
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    HMSLog.append("HmsMsgService", "Enter onStartCommand.");
    if (Build.VERSION.SDK_INT >= 26)
    {
      paramIntent = new NotificationChannel("HwPushChannelID", "pushKit", 3);
      paramIntent.enableVibration(false);
      NotificationManager localNotificationManager = (NotificationManager)getSystemService("notification");
      if (localNotificationManager != null) {
        localNotificationManager.createNotificationChannel(paramIntent);
      }
      paramIntent = new Notification.Builder(this, "HwPushChannelID");
      paramIntent.setAutoCancel(true);
      startForeground(1, paramIntent.build());
    }
    return 2;
  }
  
  public class PushHandler
    extends Handler
  {
    public PushHandler() {}
    
    public void handleMessage(Message paramMessage)
    {
      Bundle localBundle = paramMessage.getData();
      if (Build.VERSION.SDK_INT >= 21)
      {
        if ((Objects.equals(getApplicationContext().getPackageManager().getNameForUid(sendingUid), HMSPackageManager.getInstance(HmsMsgService.this).getHMSPackageName())) && (localBundle != null)) {
          if (HMSPackageManager.getInstance(HmsMsgService.this).getHMSPackageStates() != PackageManagerHelper.PackageStates.ENABLED)
          {
            HMSLog.append("HmsMsgService", "service not start by hms");
          }
          else
          {
            HMSLog.append("HmsMsgService", "chose push type");
            if (Objects.equals(Buffer.getString(localBundle, "push_action"), "com.huawei.push.msg.NOTIFY_MSG"))
            {
              if (ResourceLoaderUtil.getmContext() == null) {
                ResourceLoaderUtil.setmContext(getApplicationContext());
              }
              HMSLog.append("HmsMsgService", "invokeSelfShow");
              HmsMsgService.access$000(HmsMsgService.this, localBundle);
            }
            else if (Objects.equals(Buffer.getString(localBundle, "push_action"), "com.huawei.push.msg.PASSBY_MSG"))
            {
              HMSLog.append("HmsMsgService", "sendBroadcastToHms");
              HmsMsgService.access$100(HmsMsgService.this, localBundle);
            }
          }
        }
        super.handleMessage(paramMessage);
      }
    }
  }
}
