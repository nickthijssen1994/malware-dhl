package com.huawei.hms.support.mozilla.client;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentSender.SendIntentException;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import com.huawei.hms.core.aidl.annotation.Packed;
import java.util.Arrays;

public final class Status
  extends Result
  implements Parcelable
{
  public static final Parcelable.Creator<com.huawei.hms.support.api.client.Status> CREATOR = new Parcelable.Creator()
  {
    public Status createFromParcel(Parcel paramAnonymousParcel)
    {
      return new Status(paramAnonymousParcel.readInt(), paramAnonymousParcel.readString(), PendingIntent.readPendingIntentOrNullFromParcel(paramAnonymousParcel));
    }
    
    public Status[] newArray(int paramAnonymousInt)
    {
      return new Status[paramAnonymousInt];
    }
  };
  public static final Status CoreException;
  public static final Status FAILURE;
  public static final Status MessageNotFound;
  @Deprecated
  public static final Status RESULT_CANCELED;
  @Deprecated
  public static final Status RESULT_DEAD_CLIENT;
  @Deprecated
  public static final Status RESULT_INTERNAL_ERROR;
  @Deprecated
  public static final Status RESULT_INTERRUPTED;
  @Deprecated
  public static final Status RESULT_TIMEOUT;
  public static final Status SUCCESS = new Status(0);
  @Packed
  private Intent intent;
  @Packed
  private PendingIntent pendingIntent;
  @Packed
  private int statusCode;
  @Packed
  private String statusMessage;
  
  static
  {
    FAILURE = new Status(1);
    RESULT_CANCELED = new Status(16);
    RESULT_DEAD_CLIENT = new Status(18);
    RESULT_INTERNAL_ERROR = new Status(8);
    RESULT_INTERRUPTED = new Status(14);
    RESULT_TIMEOUT = new Status(15);
    MessageNotFound = new Status(404);
    CoreException = new Status(500);
  }
  
  public Status(int paramInt)
  {
    this(paramInt, null);
  }
  
  public Status(int paramInt, String paramString)
  {
    statusCode = paramInt;
    statusMessage = paramString;
  }
  
  public Status(int paramInt, String paramString, PendingIntent paramPendingIntent)
  {
    statusCode = paramInt;
    statusMessage = paramString;
    pendingIntent = paramPendingIntent;
  }
  
  public Status(int paramInt, String paramString, Intent paramIntent)
  {
    statusCode = paramInt;
    statusMessage = paramString;
    intent = paramIntent;
  }
  
  private static boolean equal(Object paramObject1, Object paramObject2)
  {
    return (paramObject1 == paramObject2) || ((paramObject1 != null) && (paramObject1.equals(paramObject2)));
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if ((paramObject instanceof Status))
    {
      paramObject = (Status)paramObject;
      return (statusCode == statusCode) && (equal(statusMessage, statusMessage)) && (equal(pendingIntent, pendingIntent));
    }
    return false;
  }
  
  public String getErrorString()
  {
    return getStatusMessage();
  }
  
  public PendingIntent getResolution()
  {
    return pendingIntent;
  }
  
  public Status getStatus()
  {
    return this;
  }
  
  public int getStatusCode()
  {
    return statusCode;
  }
  
  public String getStatusMessage()
  {
    return statusMessage;
  }
  
  public boolean hasResolution()
  {
    return (pendingIntent != null) || (intent != null);
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(new Object[] { Integer.valueOf(statusCode), statusMessage, pendingIntent });
  }
  
  public boolean isCanceled()
  {
    return false;
  }
  
  public boolean isInterrupted()
  {
    return false;
  }
  
  public boolean isSuccess()
  {
    return statusCode <= 0;
  }
  
  public void startResolutionForResult(Activity paramActivity, int paramInt)
    throws IntentSender.SendIntentException
  {
    if (hasResolution())
    {
      PendingIntent localPendingIntent = pendingIntent;
      if (localPendingIntent != null)
      {
        paramActivity.startIntentSenderForResult(localPendingIntent.getIntentSender(), paramInt, null, 0, 0, 0);
        return;
      }
      paramActivity.startActivityForResult(intent, paramInt);
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("{statusCode: ");
    localStringBuilder.append(statusCode);
    localStringBuilder.append(", statusMessage: ");
    localStringBuilder.append(statusMessage);
    localStringBuilder.append(", pendingIntent: ");
    localStringBuilder.append(pendingIntent);
    localStringBuilder.append(", }");
    return localStringBuilder.toString();
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    paramParcel.writeInt(statusCode);
    paramParcel.writeString(statusMessage);
    Object localObject = pendingIntent;
    if (localObject != null) {
      ((PendingIntent)localObject).writeToParcel(paramParcel, paramInt);
    }
    PendingIntent.writePendingIntentOrNullToParcel(pendingIntent, paramParcel);
    localObject = intent;
    if (localObject != null) {
      ((Intent)localObject).writeToParcel(paramParcel, paramInt);
    }
  }
}
