package com.huawei.hms.support.mozilla.push.pushselfshow;

import android.content.Context;
import android.content.Intent;
import com.huawei.hms.push.c;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.push.pushselfshow.click.SelfShowType;
import com.huawei.hms.support.mozilla.push.pushselfshow.entity.PushSelfShowMessage;
import com.huawei.hms.support.mozilla.push.pushselfshow.prepare.PushSelfShowThread;
import com.huawei.hms.support.mozilla.push.pushselfshow.utils.CommFun;

public class SelfShow
{
  public static final String PAGE_KEY = "PushSelfShowLog";
  
  public SelfShow() {}
  
  public static void handlePushMsg(Context paramContext, Intent paramIntent, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    String str = paramIntent.getStringExtra("selfshow_event_id");
    int i = paramIntent.getIntExtra("selfshow_notify_id", 0);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("get notifyId:");
    localStringBuilder.append(i);
    HMSLog.append("PushSelfShowLog", localStringBuilder.toString());
    paramArrayOfByte1 = new PushSelfShowMessage(paramArrayOfByte1, paramArrayOfByte2);
    if (!paramArrayOfByte1.parseMessage())
    {
      HMSLog.d("PushSelfShowLog", "parseMessage failed");
      return;
    }
    paramArrayOfByte2 = new StringBuilder();
    paramArrayOfByte2.append(" onReceive the msg id = ");
    paramArrayOfByte2.append(paramArrayOfByte1.getMsgId());
    paramArrayOfByte2.append(",and cmd is");
    paramArrayOfByte2.append(paramArrayOfByte1.getCmd());
    paramArrayOfByte2.append(",and the eventId is ");
    paramArrayOfByte2.append(str);
    HMSLog.append("PushSelfShowLog", paramArrayOfByte2.toString());
    if (str == null)
    {
      processSelfShowMsg(paramContext, paramIntent, paramArrayOfByte1);
      return;
    }
    processClickEvent(paramContext, paramIntent, str, paramArrayOfByte1, i);
  }
  
  public static void onReceive(Context paramContext, Intent paramIntent)
  {
    if ((paramContext != null) && (paramIntent != null)) {}
    for (;;)
    {
      try
      {
        localObject = paramIntent.getAction();
      }
      catch (RuntimeException paramContext)
      {
        Object localObject;
        boolean bool;
        byte[] arrayOfByte;
        int i;
        HMSLog.l("PushSelfShowLog", "onReceive RuntimeException.", paramContext);
        return;
      }
      catch (Exception paramContext)
      {
        label114:
        continue;
      }
      try
      {
        bool = "com.huawei.intent.action.PUSH".equals(localObject);
        if (bool) {}
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        bool = "com.huawei.push.msg.NOTIFY_MSG".equals(localObject);
        if (bool) {}
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        bool = "com.huawei.intent.action.PUSH_DELAY_NOTIFY".equals(localObject);
        if (!bool) {
          return;
        }
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        localObject = paramIntent.getByteArrayExtra("selfshow_info");
      }
      catch (Exception paramContext)
      {
        continue;
      }
      try
      {
        arrayOfByte = paramIntent.getByteArrayExtra("selfshow_token");
        i = localObject.length;
        if (i != 0)
        {
          i = arrayOfByte.length;
          if (i != 0)
          {
            handlePushMsg(paramContext, paramIntent, (byte[])localObject, arrayOfByte);
            return;
          }
        }
      }
      catch (Exception paramContext) {}
    }
    try
    {
      HMSLog.append("PushSelfShowLog", "self show info or token is null.");
      return;
    }
    catch (Exception paramContext)
    {
      break label114;
    }
    try
    {
      HMSLog.d("PushSelfShowLog", "enter SelfShowReceiver receiver, context or intent is null");
      return;
    }
    catch (Exception paramContext)
    {
      break label114;
    }
    HMSLog.d("PushSelfShowLog", "onReceive Exception.");
    return;
  }
  
  public static void processClickEvent(Context paramContext, Intent paramIntent, String paramString, PushSelfShowMessage paramPushSelfShowMessage, int paramInt)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("receive a selfshow user handle message eventId = ");
    localStringBuilder.append(paramString);
    HMSLog.d("PushSelfShowLog", localStringBuilder.toString());
    if (!"-1".equals(paramString)) {
      CommFun.cancelNotificationAlarm(paramContext, paramIntent);
    } else {
      CommFun.removeNotifiCationById(paramContext, paramInt);
    }
    if ("1".equals(paramString))
    {
      new SelfShowType(paramContext, paramPushSelfShowMessage).launchNotify();
      c.a(paramContext, "1", paramPushSelfShowMessage);
      return;
    }
    if ("2".equals(paramString))
    {
      c.a(paramContext, "2", paramPushSelfShowMessage);
      return;
    }
    HMSLog.d("PushSelfShowLog", "other event");
  }
  
  public static void processSelfShowMsg(Context paramContext, Intent paramIntent, PushSelfShowMessage paramPushSelfShowMessage)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("receive a selfshow message ,the type is");
    localStringBuilder.append(paramPushSelfShowMessage.getCmd());
    HMSLog.append("PushSelfShowLog", localStringBuilder.toString());
    if (!SelfShowType.supportCmd(paramPushSelfShowMessage.getCmd())) {
      return;
    }
    long l = CommFun.getAPDelayTime(paramPushSelfShowMessage.getAp());
    if (l == 0L)
    {
      new PushSelfShowThread(paramContext, paramPushSelfShowMessage).start();
      return;
    }
    HMSLog.d("PushSelfShowLog", "waiting ??");
    paramIntent.setPackage(paramContext.getPackageName());
    CommFun.setAPDelayAlarm(paramContext, paramIntent, l);
  }
}
