package com.huawei.hms.support.mozilla.push;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.BaseBundle;
import android.os.Bundle;
import android.text.TextUtils;
import com.huawei.hms.aaid.constant.ErrorEnum;
import com.huawei.hms.push.utils.JsonUtil;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.push.base.RemoteService;
import com.huawei.hms.support.mozilla.push.utils.CommFun;
import com.huawei.hms.support.mozilla.push.utils.common.ReceiverThreadPoolExecutor;
import com.huawei.hms.support.mozilla.push.utils.common.base.BaseUtil;
import com.huawei.hms.utils.ResourceLoaderUtil;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ThreadPoolExecutor;
import org.json.JSONException;
import org.json.JSONObject;

public final class PushReceiver
  extends BroadcastReceiver
{
  public static final String TAG = "PushReceiver";
  
  public PushReceiver() {}
  
  public static JSONObject getDataMsg(Intent paramIntent)
  {
    paramIntent = getMsgJson(paramIntent.getByteArrayExtra("msg_data"));
    JSONObject localJSONObject = getMsgContentJson(paramIntent);
    String str = JsonUtil.getString(localJSONObject, "data", null);
    if (CommFun.isOldMsg(localJSONObject, getPsContentJson(localJSONObject), str)) {
      return paramIntent;
    }
    if (TextUtils.isEmpty(str)) {
      return null;
    }
    try
    {
      paramIntent = new JSONObject(str);
      return paramIntent;
    }
    catch (JSONException paramIntent) {}
    return null;
  }
  
  public static JSONObject getMsgContentJson(JSONObject paramJSONObject)
  {
    if (paramJSONObject != null) {
      return paramJSONObject.optJSONObject("msgContent");
    }
    return null;
  }
  
  public static JSONObject getMsgJson(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = BaseUtil.byte2Str(paramArrayOfByte);
      paramArrayOfByte = new JSONObject(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (JSONException paramArrayOfByte)
    {
      for (;;) {}
    }
    HMSLog.get("PushReceiver", "JSONException:parse message body failed.");
    return null;
  }
  
  public static JSONObject getPsContentJson(JSONObject paramJSONObject)
  {
    if (paramJSONObject != null) {
      return paramJSONObject.optJSONObject("psContent");
    }
    return null;
  }
  
  private void handlePushMessageEvent(Context paramContext, Intent paramIntent)
  {
    try
    {
      boolean bool = paramIntent.hasExtra("msg_data");
      if (bool)
      {
        ThreadPoolExecutor localThreadPoolExecutor = ReceiverThreadPoolExecutor.getInstance();
        localThreadPoolExecutor.execute(new PushMessageThread(paramContext, paramIntent, null));
        return;
      }
    }
    catch (RuntimeException paramContext)
    {
      for (;;) {}
    }
    catch (Exception paramContext)
    {
      label40:
      label48:
      for (;;) {}
    }
    try
    {
      HMSLog.append("PushReceiver", "This push message dose not sent by hwpush.");
      return;
    }
    catch (RuntimeException paramContext)
    {
      break label48;
    }
    catch (Exception paramContext)
    {
      break label40;
    }
    HMSLog.toString("PushReceiver", "handlePushMessageEvent execute task error");
    return;
    HMSLog.toString("PushReceiver", "handlePushMessageEvent execute task runtime exception.");
  }
  
  private void handlePushTokenEvent(Context paramContext, Intent paramIntent)
  {
    try
    {
      boolean bool = paramIntent.hasExtra("device_token");
      if (bool)
      {
        ThreadPoolExecutor localThreadPoolExecutor = ReceiverThreadPoolExecutor.getInstance();
        localThreadPoolExecutor.execute(new PushTokenThread(paramContext, paramIntent, null));
        return;
      }
    }
    catch (RuntimeException paramContext)
    {
      for (;;) {}
    }
    catch (Exception paramContext)
    {
      label40:
      label48:
      for (;;) {}
    }
    try
    {
      HMSLog.append("PushReceiver", "This message dose not sent by hwpush.");
      return;
    }
    catch (RuntimeException paramContext)
    {
      break label48;
    }
    catch (Exception paramContext)
    {
      break label40;
    }
    HMSLog.toString("PushReceiver", "handlePushTokenEvent execute task error");
    return;
    HMSLog.toString("PushReceiver", "handlePushMessageEvent execute task runtime exception.");
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    if (paramIntent != null)
    {
      if (paramContext == null) {
        return;
      }
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("push receive broadcast message, Intent:");
      ((StringBuilder)localObject).append(paramIntent.getAction());
      ((StringBuilder)localObject).append(" pkgName:");
      ((StringBuilder)localObject).append(paramContext.getPackageName());
      HMSLog.append("PushReceiver", ((StringBuilder)localObject).toString());
      try
      {
        paramIntent.getStringExtra("TestIntent");
        localObject = paramIntent.getAction();
        if (ResourceLoaderUtil.getmContext() == null) {
          ResourceLoaderUtil.setmContext(paramContext.getApplicationContext());
        }
        if ("com.huawei.android.push.intent.REGISTRATION".equals(localObject))
        {
          handlePushTokenEvent(paramContext, paramIntent);
          return;
        }
        if ("com.huawei.android.push.intent.RECEIVE".equals(localObject))
        {
          handlePushMessageEvent(paramContext, paramIntent);
          return;
        }
        paramContext = new StringBuilder();
        paramContext.append("message can't be recognised:");
        paramContext.append(paramIntent.toUri(0));
        HMSLog.append("PushReceiver", paramContext.toString());
        return;
      }
      catch (Exception paramContext)
      {
        for (;;) {}
      }
      HMSLog.toString("PushReceiver", "intent has some error");
      return;
    }
  }
  
  public abstract interface BoundKey
  {
    public static final String DEVICE_TOKEN_KEY = "deviceToken";
  }
  
  public class PushMessageThread
    implements Runnable
  {
    public static final String INPUT_TYPE = "inputType";
    public static final int MESSAGE_PROXY_TYPE_DEFAULT = -1;
    public static final String MODULENAME = "moduleName";
    public static final String MODULE_NAME_PUSH = "Push";
    public static final String MSGID = "msgId";
    public static final String MSGTYPE = "msgType";
    public static final int MSGTYPE_DELIVERY = 1;
    public static final int MSG_FROM_BROADCAST = 1;
    public static final String MSG_ID_STR = "msgIdStr";
    public static final String STATUS = "status";
    public static final String TRANS_ID = "transactionId";
    public Intent intent;
    
    public PushMessageThread(Intent paramIntent)
    {
      intent = paramIntent;
    }
    
    public void run()
    {
      Object localObject = new Intent("com.huawei.push.action.MESSAGING_EVENT");
      ((Intent)localObject).setPackage(intent.getPackage());
      JSONObject localJSONObject = PushReceiver.access$200(intent);
      String str = JsonUtil.getString(localJSONObject, "moduleName", "");
      int k = JsonUtil.getInt(localJSONObject, "msgType", 0);
      int j = JsonUtil.getInt(localJSONObject, "status", 0);
      int i = j;
      if (ErrorEnum.SUCCESS.getInternalCode() != j) {
        i = ErrorEnum.ERROR_APP_SERVER_NOT_ONLINE.getInternalCode();
      }
      Bundle localBundle = new Bundle();
      if (("Push".equals(str)) && (k == 1))
      {
        localBundle.putString("message_type", "delivery");
        localBundle.putString("message_id", JsonUtil.getString(localJSONObject, "msgId", ""));
        localBundle.putInt("error", i);
        localBundle.putString("transaction_id", JsonUtil.getString(localJSONObject, "transactionId", ""));
      }
      else
      {
        if (intent.getExtras() != null) {
          localBundle.putAll(intent.getExtras());
        }
        localBundle.putString("message_type", "received_message");
        localBundle.putString("message_id", intent.getStringExtra("msgIdStr"));
        localBundle.putByteArray("message_body", intent.getByteArrayExtra("msg_data"));
        localBundle.putString("device_token", BaseUtil.byte2Str(intent.getByteArrayExtra("device_token")));
        localBundle.putInt("inputType", 1);
        localBundle.putInt("message_proxy_type", intent.getIntExtra("message_proxy_type", -1));
      }
      if (new RemoteService().startMsgService(PushReceiver.this, localBundle, (Intent)localObject))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("receive ");
        ((StringBuilder)localObject).append(intent.getAction());
        ((StringBuilder)localObject).append(" and start service success");
        HMSLog.append("PushReceiver", ((StringBuilder)localObject).toString());
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("receive ");
      ((StringBuilder)localObject).append(intent.getAction());
      ((StringBuilder)localObject).append(" and start service failed");
      HMSLog.toString("PushReceiver", ((StringBuilder)localObject).toString());
    }
  }
  
  public class PushTokenThread
    implements Runnable
  {
    public Intent intent;
    
    public PushTokenThread(Intent paramIntent)
    {
      intent = paramIntent;
    }
    
    public void run()
    {
      Object localObject1 = intent;
      try
      {
        localObject3 = ((Intent)localObject1).getByteArrayExtra("device_token");
        if (localObject3 != null) {
          if (localObject3.length != 0) {}
        }
      }
      catch (RejectedExecutionException localRejectedExecutionException1)
      {
        Object localObject3;
        Object localObject2;
        Object localObject4;
        boolean bool;
        for (;;) {}
      }
      catch (Exception localException1)
      {
        label285:
        label293:
        for (;;) {}
      }
      try
      {
        localObject1 = new StringBuilder();
      }
      catch (RejectedExecutionException localRejectedExecutionException2)
      {
        break label293;
      }
      catch (Exception localException2)
      {
        break label285;
      }
      try
      {
        ((StringBuilder)localObject1).append("receive a push token: ");
        localObject2 = PushReceiver.this;
        ((StringBuilder)localObject1).append(((Context)localObject2).getPackageName());
        HMSLog.append("PushReceiver", ((StringBuilder)localObject1).toString());
      }
      catch (RejectedExecutionException localRejectedExecutionException3)
      {
        break label293;
      }
      catch (Exception localException3)
      {
        break label285;
      }
      try
      {
        localObject1 = new Intent("com.huawei.push.action.MESSAGING_EVENT");
        localObject2 = intent;
        ((Intent)localObject1).setPackage(((Intent)localObject2).getPackage());
        localObject2 = new Bundle();
      }
      catch (RejectedExecutionException localRejectedExecutionException4)
      {
        break label293;
      }
      catch (Exception localException4)
      {
        break label285;
      }
      try
      {
        ((BaseBundle)localObject2).putString("message_type", "new_token");
      }
      catch (RejectedExecutionException localRejectedExecutionException5)
      {
        break label293;
      }
      catch (Exception localException5)
      {
        break label285;
      }
      try
      {
        ((BaseBundle)localObject2).putString("device_token", BaseUtil.byte2Str((byte[])localObject3));
        localObject3 = intent;
      }
      catch (RejectedExecutionException localRejectedExecutionException6)
      {
        break label293;
      }
      catch (Exception localException6)
      {
        break label285;
      }
      try
      {
        ((BaseBundle)localObject2).putString("transaction_id", ((Intent)localObject3).getStringExtra("transaction_id"));
        localObject3 = intent;
      }
      catch (RejectedExecutionException localRejectedExecutionException7)
      {
        break label293;
      }
      catch (Exception localException7)
      {
        break label285;
      }
      try
      {
        ((BaseBundle)localObject2).putString("subjectId", ((Intent)localObject3).getStringExtra("subjectId"));
        localObject3 = intent;
        localObject4 = ErrorEnum.SUCCESS;
      }
      catch (RejectedExecutionException localRejectedExecutionException8)
      {
        break label293;
      }
      catch (Exception localException8)
      {
        break label285;
      }
      try
      {
        ((BaseBundle)localObject2).putInt("error", ((Intent)localObject3).getIntExtra("error", ((ErrorEnum)localObject4).getInternalCode()));
        localObject3 = intent;
      }
      catch (RejectedExecutionException localRejectedExecutionException9)
      {
        break label293;
      }
      catch (Exception localException9)
      {
        break label285;
      }
      try
      {
        ((BaseBundle)localObject2).putString("belongId", ((Intent)localObject3).getStringExtra("belongId"));
        localObject3 = new RemoteService();
        localObject4 = PushReceiver.this;
        bool = ((RemoteService)localObject3).startMsgService((Context)localObject4, (Bundle)localObject2, (Intent)localObject1);
        if (bool) {
          return;
        }
      }
      catch (RejectedExecutionException localRejectedExecutionException10)
      {
        break label293;
      }
      catch (Exception localException10)
      {
        break label285;
      }
      try
      {
        localObject1 = new StringBuilder();
      }
      catch (RejectedExecutionException localRejectedExecutionException11)
      {
        break label293;
      }
      catch (Exception localException11)
      {
        break label285;
      }
      try
      {
        ((StringBuilder)localObject1).append("receive ");
        localObject2 = intent;
        ((StringBuilder)localObject1).append(((Intent)localObject2).getAction());
      }
      catch (RejectedExecutionException localRejectedExecutionException12)
      {
        break label293;
      }
      catch (Exception localException12)
      {
        break label285;
      }
      try
      {
        ((StringBuilder)localObject1).append(" and start service failed");
        HMSLog.toString("PushReceiver", ((StringBuilder)localObject1).toString());
        return;
      }
      catch (RejectedExecutionException localRejectedExecutionException13)
      {
        break label293;
      }
      catch (Exception localException13)
      {
        break label285;
      }
      try
      {
        HMSLog.append("PushReceiver", "get a deviceToken, but it is null or empty");
        return;
      }
      catch (RejectedExecutionException localRejectedExecutionException14)
      {
        break label293;
      }
      catch (Exception localException14)
      {
        break label285;
      }
      HMSLog.toString("PushReceiver", "handle push token error");
      return;
      HMSLog.toString("PushReceiver", "execute task error");
      return;
    }
  }
}
