package com.huawei.hms.support.mozilla.push.pushselfshow.entity;

import android.text.TextUtils;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.push.pushselfshow.prepare.NotifyStyle;
import com.huawei.hms.support.mozilla.push.utils.common.base.PushConst;
import java.nio.charset.Charset;
import org.json.JSONException;
import org.json.JSONObject;

public class PushSelfShowMessage
{
  public static final String ANALYTIC_INFO = "analyticInfo";
  public static final String APP_INTENT = "acn";
  public static final String APP_INTENT_URI = "intentUri";
  public static final String APP_PACKAGE_NAME = "appPackageName";
  public static final String ARG_URL = "url";
  public static final String AUTO_CANCEL = "autoCancel";
  public static final String AUTO_CLEAR = "autoClear";
  public static final String BIG_CONTENT = "bigContent";
  public static final String BIG_PIC = "bigPic";
  public static final String BIG_TITLE = "bigTitle";
  public static final String CONTENT = "content";
  public static final String DATA = "data";
  public static final String DISP_PKG_NAME = "dispPkgName";
  public static final String ICON = "icon";
  public static final int INTEGER_FOR_TRUE = 1;
  public static final String MSG_AP = "ap";
  public static final String MSG_CONTENT = "msgContent";
  public static final String MSG_ID = "msgId";
  public static final String MSG_TAG = "tag";
  public static final String NOTIFY_DETAIL = "notifyDetail";
  public static final String NOTIFY_GROUP = "group";
  public static final String NOTIFY_ICON = "notifyIcon";
  public static final String NOTIFY_ID = "notifyId";
  public static final String NOTIFY_SUMMARY = "notifySummary";
  public static final String NOTIFY_TITLE = "notifyTitle";
  public static final String PAGE_KEY = "PushSelfShowLog";
  public static final String PARAM = "param";
  public static final String PS_CONTENT = "psContent";
  public static final String RP_CONTENT_TYPE = "rpct";
  public static final String RP_TYPE = "rpt";
  public static final String RP_URL = "rpl";
  public static final String SQL_UPDATE_6_4 = "cmd";
  public static final String STYLE = "style";
  public static final String TICKER = "ticker";
  public static final String VISIBILITY = "visibility";
  public static final int VISIBILITY_PRIVATE = 0;
  public static final String WHEN = "when";
  public String analyticInfo = "";
  public String appLocale;
  public String appPackageName;
  public int autoCancel = 0;
  public int autoClear;
  public String bigContent = "";
  public String bigPicUrl = "";
  public String bigTitle = "";
  public String boardName;
  public String content = "";
  public String data = "";
  public String desc = "";
  public String dispPkgName = "";
  public String group = "";
  public String icon = "";
  public String intentUri;
  public String msg;
  public String msgId = "";
  public String msgTag = "";
  public String notifyIcon = "";
  public int notifyId;
  public String notifySummary = "";
  public String notifyTitle = "";
  public String rpct = "";
  public String site;
  public int style = NotifyStyle.STYLE_DEFAULT.ordinal();
  public String threadNumber;
  public String ticker;
  public String token;
  public String url;
  public int visibility = 0;
  public String when;
  
  public PushSelfShowMessage(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    msg = new String(paramArrayOfByte1, PushConst.UTF_8);
    token = new String(paramArrayOfByte2, PushConst.UTF_8);
  }
  
  private JSONObject getAdMsg(JSONObject paramJSONObject)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("msgContent", paramJSONObject);
    localJSONObject.put("group", group);
    localJSONObject.put("tag", msgTag);
    localJSONObject.put("autoCancel", autoCancel);
    localJSONObject.put("visibility", visibility);
    localJSONObject.put("when", when);
    return localJSONObject;
  }
  
  private JSONObject getMsgContent(JSONObject paramJSONObject1, JSONObject paramJSONObject2)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("dispPkgName", dispPkgName);
    localJSONObject.put("msgId", msgId);
    localJSONObject.put("ap", site);
    localJSONObject.put("notifyId", notifyId);
    localJSONObject.put("psContent", paramJSONObject1);
    localJSONObject.put("notifyDetail", paramJSONObject2);
    localJSONObject.put("ticker", ticker);
    localJSONObject.put("data", data);
    return localJSONObject;
  }
  
  private JSONObject getNotifyDetail()
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("style", style);
    localJSONObject.put("bigTitle", bigTitle);
    localJSONObject.put("bigContent", bigContent);
    localJSONObject.put("bigPic", bigPicUrl);
    return localJSONObject;
  }
  
  private JSONObject getParam()
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("autoClear", autoClear);
    localJSONObject.put("url", url);
    localJSONObject.put("rpl", boardName);
    localJSONObject.put("rpt", threadNumber);
    localJSONObject.put("rpct", rpct);
    localJSONObject.put("appPackageName", appPackageName);
    localJSONObject.put("acn", appLocale);
    localJSONObject.put("intentUri", intentUri);
    return localJSONObject;
  }
  
  private JSONObject getPsContentObject(JSONObject paramJSONObject)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("cmd", desc);
    localJSONObject.put("content", content);
    localJSONObject.put("notifyIcon", notifyIcon);
    localJSONObject.put("notifyTitle", notifyTitle);
    localJSONObject.put("notifySummary", notifySummary);
    localJSONObject.put("param", paramJSONObject);
    return localJSONObject;
  }
  
  private void parseAp(JSONObject paramJSONObject)
    throws JSONException
  {
    if (paramJSONObject.has("ap"))
    {
      paramJSONObject = paramJSONObject.getString("ap");
      StringBuilder localStringBuilder = new StringBuilder();
      boolean bool = TextUtils.isEmpty(paramJSONObject);
      int i = 0;
      if ((!bool) && (paramJSONObject.length() < 48))
      {
        int j = paramJSONObject.length();
        while (i < 48 - j)
        {
          localStringBuilder.append("0");
          i += 1;
        }
        localStringBuilder.append(paramJSONObject);
        site = localStringBuilder.toString();
        return;
      }
      site = paramJSONObject.substring(0, 48);
    }
  }
  
  private boolean parseApp(JSONObject paramJSONObject)
    throws JSONException
  {
    if (paramJSONObject == null) {
      return false;
    }
    if (paramJSONObject.has("acn")) {
      appLocale = paramJSONObject.getString("acn");
    }
    if (paramJSONObject.has("intentUri")) {
      intentUri = paramJSONObject.getString("intentUri");
    }
    if (paramJSONObject.has("appPackageName"))
    {
      appPackageName = paramJSONObject.getString("appPackageName");
      return true;
    }
    HMSLog.d("PushSelfShowLog", "appPackageName is null");
    return false;
  }
  
  private boolean parseMsgId(JSONObject paramJSONObject)
    throws JSONException
  {
    if (paramJSONObject.has("msgId"))
    {
      paramJSONObject = paramJSONObject.get("msgId");
      if ((paramJSONObject instanceof String)) {
        msgId = ((String)paramJSONObject);
      } else if ((paramJSONObject instanceof Integer)) {
        msgId = String.valueOf(((Integer)paramJSONObject).intValue());
      }
      return true;
    }
    HMSLog.append("PushSelfShowLog", "msgId == null");
    return false;
  }
  
  private boolean parseNotifyDetail(JSONObject paramJSONObject)
  {
    HMSLog.d("PushSelfShowLog", "enter parseNotifyParam");
    try
    {
      paramJSONObject = paramJSONObject.getJSONObject("notifyDetail");
      if (paramJSONObject == null) {
        return false;
      }
      boolean bool = paramJSONObject.has("style");
      if (bool)
      {
        int i = paramJSONObject.getInt("style");
        style = i;
      }
      String str = paramJSONObject.optString("bigTitle");
      bigTitle = str;
      str = paramJSONObject.optString("bigContent");
      bigContent = str;
      paramJSONObject = paramJSONObject.optString("icon");
      icon = paramJSONObject;
      return true;
    }
    catch (JSONException paramJSONObject)
    {
      HMSLog.append("PushSelfShowLog", paramJSONObject.toString());
    }
    return false;
  }
  
  private void parseOther(JSONObject paramJSONObject)
  {
    group = paramJSONObject.optString("group");
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("NOTIFY_GROUP:");
    localStringBuilder.append(group);
    HMSLog.d("PushSelfShowLog", localStringBuilder.toString());
    autoCancel = paramJSONObject.optInt("autoCancel", 1);
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("autoCancel: ");
    localStringBuilder.append(autoCancel);
    HMSLog.d("PushSelfShowLog", localStringBuilder.toString());
    visibility = paramJSONObject.optInt("visibility", 0);
    when = paramJSONObject.optString("when");
    msgTag = paramJSONObject.optString("tag");
  }
  
  private boolean parseParam(JSONObject paramJSONObject)
  {
    try
    {
      paramJSONObject = paramJSONObject.getJSONObject("param");
      boolean bool = paramJSONObject.has("autoClear");
      if (bool)
      {
        int i = paramJSONObject.getInt("autoClear");
        autoClear = i;
      }
      else
      {
        autoClear = 0;
      }
      String str = desc;
      bool = "app".equals(str);
      if (!bool)
      {
        str = desc;
        bool = "cosa".equals(str);
        if (!bool)
        {
          str = desc;
          bool = "url".equals(str);
          if (bool)
          {
            parseUrl(paramJSONObject);
            break label140;
          }
          str = desc;
          bool = "rp".equals(str);
          if (!bool) {
            break label140;
          }
          parseRp(paramJSONObject);
          break label140;
        }
      }
      parseApp(paramJSONObject);
      label140:
      return true;
    }
    catch (Exception paramJSONObject)
    {
      HMSLog.l("PushSelfShowLog", "ParseParam error ", paramJSONObject);
    }
    return false;
  }
  
  private boolean parsePsContent(JSONObject paramJSONObject)
    throws JSONException
  {
    if (paramJSONObject.has("psContent"))
    {
      paramJSONObject = paramJSONObject.getJSONObject("psContent");
      if (paramJSONObject == null) {
        return false;
      }
      desc = paramJSONObject.getString("cmd");
      content = paramJSONObject.optString("content");
      notifyIcon = paramJSONObject.optString("notifyIcon");
      notifyTitle = paramJSONObject.optString("notifyTitle");
      notifySummary = paramJSONObject.optString("notifySummary");
      ticker = paramJSONObject.optString("ticker");
      if ((paramJSONObject.has("notifyDetail")) && (!parseNotifyDetail(paramJSONObject))) {
        return false;
      }
      if (paramJSONObject.has("param")) {
        return parseParam(paramJSONObject);
      }
    }
    return false;
  }
  
  private boolean parseRp(JSONObject paramJSONObject)
    throws JSONException
  {
    if (paramJSONObject == null) {
      return false;
    }
    if (paramJSONObject.has("appPackageName")) {
      appPackageName = paramJSONObject.getString("appPackageName");
    }
    if ((paramJSONObject.has("rpt")) && (paramJSONObject.has("rpl")))
    {
      boardName = paramJSONObject.getString("rpl");
      threadNumber = paramJSONObject.getString("rpt");
      if (paramJSONObject.has("rpct")) {
        rpct = paramJSONObject.getString("rpct");
      }
      return true;
    }
    HMSLog.d("PushSelfShowLog", "rpl or rpt is null");
    return false;
  }
  
  private boolean parseUrl(JSONObject paramJSONObject)
    throws JSONException
  {
    if (paramJSONObject == null) {
      return false;
    }
    if (paramJSONObject.has("url"))
    {
      url = paramJSONObject.getString("url");
      if (paramJSONObject.has("appPackageName")) {
        appPackageName = paramJSONObject.getString("appPackageName");
      }
      if ((paramJSONObject.has("rpt")) && (paramJSONObject.has("rpl")))
      {
        boardName = paramJSONObject.getString("rpl");
        threadNumber = paramJSONObject.getString("rpt");
        if (paramJSONObject.has("rpct")) {
          rpct = paramJSONObject.getString("rpct");
        }
      }
      return true;
    }
    HMSLog.d("PushSelfShowLog", "url is null");
    return false;
  }
  
  public String getAcn()
  {
    return appLocale;
  }
  
  public String getAnalyticInfo()
  {
    return analyticInfo;
  }
  
  public String getAp()
  {
    return site;
  }
  
  public String getAppPackageName()
  {
    return appPackageName;
  }
  
  public int getAutoCancel()
  {
    return autoCancel;
  }
  
  public int getAutoClear()
  {
    return autoClear;
  }
  
  public String getBigContent()
  {
    return bigContent;
  }
  
  public String getBigPicUrl()
  {
    return bigPicUrl;
  }
  
  public String getBigTitle()
  {
    return bigTitle;
  }
  
  public String getCmd()
  {
    return desc;
  }
  
  public String getContent()
  {
    return content;
  }
  
  public String getData()
  {
    return data;
  }
  
  public String getDispPkgName()
  {
    return dispPkgName;
  }
  
  public String getGroup()
  {
    return group;
  }
  
  public String getIcon()
  {
    return icon;
  }
  
  public String getIntentUri()
  {
    return intentUri;
  }
  
  public String getMsg()
  {
    return msg;
  }
  
  public String getMsgCmd()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("cmd =");
    localStringBuilder.append(desc);
    HMSLog.d("PushSelfShowLog", localStringBuilder.toString());
    return desc;
  }
  
  public byte[] getMsgData()
  {
    try
    {
      Object localObject = getAdMsg(getMsgContent(getPsContentObject(getParam()), getNotifyDetail())).toString();
      Charset localCharset = PushConst.UTF_8;
      localObject = ((String)localObject).getBytes(localCharset);
      return localObject;
    }
    catch (JSONException localJSONException)
    {
      HMSLog.l("PushSelfShowLog", "getMsgData failed JSONException:", localJSONException);
    }
    return new byte[0];
  }
  
  public String getMsgId()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("msgId =");
    localStringBuilder.append(msgId);
    HMSLog.d("PushSelfShowLog", localStringBuilder.toString());
    return msgId;
  }
  
  public String getMsgTag()
  {
    return msgTag;
  }
  
  public String getNotifyIcon()
  {
    return notifyIcon;
  }
  
  public int getNotifyId()
  {
    return notifyId;
  }
  
  public String getNotifySummary()
  {
    return notifySummary;
  }
  
  public String getNotifyTitle()
  {
    return notifyTitle;
  }
  
  public String getRpct()
  {
    return rpct;
  }
  
  public String getRpl()
  {
    return boardName;
  }
  
  public String getRpt()
  {
    return threadNumber;
  }
  
  public int getStyle()
  {
    return style;
  }
  
  public String getTicker()
  {
    return ticker;
  }
  
  public byte[] getToken()
  {
    return token.getBytes(PushConst.UTF_8);
  }
  
  public String getUeid()
  {
    if (autoCancel == 1) {
      return getMsgId();
    }
    return String.valueOf(System.currentTimeMillis());
  }
  
  public String getUrl()
  {
    return url;
  }
  
  public int getVisibility()
  {
    return visibility;
  }
  
  public String getWhen()
  {
    return when;
  }
  
  public boolean parseMessage()
  {
    localObject = msg;
    try
    {
      bool = TextUtils.isEmpty((CharSequence)localObject);
      if (!bool) {}
    }
    catch (Exception localException)
    {
      try
      {
        str = ((JSONObject)localObject).optString("dispPkgName");
        dispPkgName = str;
        parseAp((JSONObject)localObject);
      }
      catch (JSONException localJSONException5)
      {
        boolean bool;
        for (;;) {}
      }
      try
      {
        i = ((JSONObject)localObject).optInt("notifyId", -1);
        notifyId = i;
      }
      catch (JSONException localJSONException6)
      {
        break label159;
      }
      try
      {
        str = ((JSONObject)localObject).optString("data");
        data = str;
      }
      catch (JSONException localJSONException7)
      {
        break label159;
      }
      try
      {
        str = ((JSONObject)localObject).optString("analyticInfo");
        analyticInfo = str;
        bool = parsePsContent((JSONObject)localObject);
        return bool;
      }
      catch (JSONException localJSONException8)
      {
        break label159;
      }
      localException = localException;
      HMSLog.d("PushSelfShowLog", ((Exception)localException).toString());
      return false;
      HMSLog.d("PushSelfShowLog", "parse message exception.");
      return false;
    }
    catch (JSONException localJSONException1)
    {
      for (;;) {}
    }
    try
    {
      HMSLog.d("PushSelfShowLog", "msg is null");
      return false;
    }
    catch (JSONException localJSONException2)
    {
      break label159;
    }
    localObject = msg;
    localObject = new JSONObject((String)localObject);
    parseOther((JSONObject)localObject);
    try
    {
      localObject = ((JSONObject)localObject).getJSONObject("msgContent");
      if (localObject != null) {}
    }
    catch (JSONException localJSONException3)
    {
      String str;
      int i;
      for (;;) {}
    }
    try
    {
      HMSLog.append("PushSelfShowLog", "msgObj == null");
      return false;
    }
    catch (JSONException localJSONException4)
    {
      break label159;
    }
    bool = parseMsgId((JSONObject)localObject);
    if (!bool) {
      return false;
    }
  }
  
  public void setContent(String paramString)
  {
    content = paramString;
  }
  
  public void setMsg(String paramString)
  {
    msg = paramString;
  }
  
  public void setMsgId(String paramString)
  {
    msgId = paramString;
  }
  
  public void setNotifyId(int paramInt)
  {
    notifyId = paramInt;
  }
}
