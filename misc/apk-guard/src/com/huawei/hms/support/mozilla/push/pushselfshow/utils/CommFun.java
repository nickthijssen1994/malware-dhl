package com.huawei.hms.support.mozilla.push.pushselfshow.utils;

import android.app.AlarmManager;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.ComponentInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.net.Uri;
import android.os.BaseBundle;
import android.os.Build.VERSION;
import android.text.TextUtils;
import com.huawei.hms.support.model.HMSLog;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class CommFun
{
  public static final long CLEAR_FILES_INTERVAL = 86400000L;
  public static final String PAGE_KEY = "PushSelfShowLog";
  
  public CommFun() {}
  
  public static void cancelNotificationAlarm(Context paramContext, Intent paramIntent)
  {
    try
    {
      int i = paramIntent.getIntExtra("selfshow_auto_clear_id", 0);
      paramIntent = new StringBuilder();
      paramIntent.append("setDelayAlarm(cancel) alarmNotityId ");
      paramIntent.append(i);
      HMSLog.d("PushSelfShowLog", paramIntent.toString());
      if (i == 0) {
        return;
      }
      paramIntent = new Intent("com.huawei.intent.action.PUSH_DELAY_NOTIFY");
      paramIntent.setPackage(paramContext.getPackageName()).setFlags(32);
      Object localObject = paramContext.getSystemService("alarm");
      localObject = (AlarmManager)localObject;
      paramContext = PendingIntent.getBroadcast(paramContext, i, paramIntent, 536870912);
      if ((paramContext != null) && (localObject != null))
      {
        HMSLog.d("PushSelfShowLog", "alarm cancel");
        ((AlarmManager)localObject).cancel(paramContext);
        return;
      }
      HMSLog.d("PushSelfShowLog", "alarm not exist");
      return;
    }
    catch (Exception paramContext)
    {
      paramIntent = new StringBuilder();
      paramIntent.append("cancelAlarm err:");
      paramIntent.append(((Exception)paramContext).toString());
      HMSLog.toString("PushSelfShowLog", paramIntent.toString());
    }
  }
  
  public static void delete(File paramFile)
    throws IOException
  {
    if (paramFile == null) {
      return;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("delete file ");
    ((StringBuilder)localObject).append(paramFile.getCanonicalPath());
    HMSLog.d("PushSelfShowLog", ((StringBuilder)localObject).toString());
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramFile.getCanonicalPath());
    ((StringBuilder)localObject).append(System.currentTimeMillis());
    localObject = new File(((StringBuilder)localObject).toString());
    if (!paramFile.renameTo((File)localObject)) {
      return;
    }
    if ((((File)localObject).isFile()) && (((File)localObject).delete())) {
      return;
    }
    if (((File)localObject).isDirectory())
    {
      paramFile = ((File)localObject).listFiles();
      if ((paramFile != null) && (paramFile.length != 0))
      {
        int j = paramFile.length;
        int i = 0;
        while (i < j)
        {
          delete(paramFile[i]);
          i += 1;
        }
        if (!((File)localObject).delete()) {
          HMSLog.d("PushSelfShowLog", "delete file unsuccess");
        }
      }
      else if (!((File)localObject).delete())
      {
        HMSLog.d("PushSelfShowLog", "delete file failed");
      }
    }
  }
  
  public static void deleteFileBefore(File paramFile)
  {
    HMSLog.d("PushSelfShowLog", "delete file before ");
    if ((paramFile != null) && (paramFile.exists()))
    {
      paramFile = paramFile.listFiles();
      if (paramFile != null)
      {
        if (paramFile.length == 0) {
          return;
        }
        long l1 = System.currentTimeMillis();
        int i = 0;
        while (i < paramFile.length)
        {
          File localFile = paramFile[i];
          try
          {
            long l2 = localFile.lastModified();
            if (l1 - l2 > 86400000L)
            {
              localStringBuilder = new StringBuilder();
              localStringBuilder.append("delete file before ");
              localStringBuilder.append(localFile.getCanonicalPath());
              HMSLog.append("PushSelfShowLog", localStringBuilder.toString());
              delete(localFile);
            }
          }
          catch (Exception localException)
          {
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("delete file failed.");
            localStringBuilder.append(((Exception)localException).toString());
            HMSLog.toString("PushSelfShowLog", localStringBuilder.toString());
          }
          i += 1;
        }
      }
    }
  }
  
  public static Boolean findActivityByIntent(Context paramContext, String paramString, Intent paramIntent)
  {
    try
    {
      paramContext = paramContext.getPackageManager().queryIntentActivities(paramIntent, 0);
      if (paramContext != null)
      {
        int i = paramContext.size();
        if (i > 0)
        {
          int j = paramContext.size();
          i = 0;
          while (i < j)
          {
            paramIntent = paramContext.get(i);
            if (activityInfo != null)
            {
              paramIntent = paramContext.get(i);
              paramIntent = activityInfo.applicationInfo.packageName;
              boolean bool = paramString.equals(paramIntent);
              if (bool) {
                return Boolean.valueOf(true);
              }
            }
            i += 1;
          }
        }
      }
      return Boolean.valueOf(false);
    }
    catch (Exception paramContext)
    {
      HMSLog.l("PushSelfShowLog", paramContext.toString(), paramContext);
    }
  }
  
  public static long getAPDelayTime(String paramString)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    try
    {
      paramString = new Date();
      int i = paramString.getHours();
      int j = paramString.getMinutes();
      j = i * 2 + j / 30;
      str = str.concat(str);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("startIndex is ");
      localStringBuilder.append(j);
      localStringBuilder.append(",ap is:");
      localStringBuilder.append(str);
      localStringBuilder.append(",length is:");
      localStringBuilder.append(str.length());
      HMSLog.append("PushSelfShowLog", localStringBuilder.toString());
      int k = str.length();
      i = j;
      while (i < k)
      {
        int m = str.charAt(i);
        if (m != 48)
        {
          k = paramString.getMinutes();
          long l = 60000L * ((i - j) * 30 - k % 30);
          paramString = new StringBuilder();
          paramString.append("startIndex is:");
          paramString.append(j);
          paramString.append(" i is:");
          paramString.append(i);
          paramString.append(" delay:");
          paramString.append(l);
          HMSLog.d("PushSelfShowLog", paramString.toString());
          if (l < 0L) {
            break;
          }
          return l;
        }
        i += 1;
      }
      return 0L;
    }
    catch (Exception paramString)
    {
      HMSLog.l("PushSelfShowLog", "error ", paramString);
    }
  }
  
  public static String getAppName(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getPackageManager();
      paramContext = paramContext.getApplicationLabel(paramContext.getApplicationInfo(paramString, 128)).toString();
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    paramContext = new StringBuilder();
    paramContext.append("get the app name of package:");
    paramContext.append(paramString);
    paramContext.append(" failed.");
    HMSLog.append("PushSelfShowLog", paramContext.toString());
    return null;
  }
  
  public static long getIntMetaValue(ResolveInfo paramResolveInfo, String paramString)
  {
    if (paramResolveInfo == null) {
      return -1L;
    }
    try
    {
      localObject = getStringMetaValue(paramResolveInfo, paramString);
      if (localObject != null)
      {
        int i = ((String)localObject).length();
        if (i == 0) {
          return -1L;
        }
        long l = Long.parseLong((String)localObject);
        return l;
      }
      return -1L;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      Object localObject;
      for (;;) {}
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramString);
    ((StringBuilder)localObject).append(" is not set in ");
    ((StringBuilder)localObject).append(getPkgName(paramResolveInfo));
    HMSLog.append("PushSelfShowLog", ((StringBuilder)localObject).toString());
    return -1L;
  }
  
  public static String getPkgName(ResolveInfo paramResolveInfo)
  {
    ServiceInfo localServiceInfo = serviceInfo;
    if (localServiceInfo != null) {
      return packageName;
    }
    return activityInfo.packageName;
  }
  
  public static String getStringMetaValue(ResolveInfo paramResolveInfo, String paramString)
  {
    ServiceInfo localServiceInfo = serviceInfo;
    if (localServiceInfo != null) {
      paramResolveInfo = metaData;
    } else {
      paramResolveInfo = activityInfo.metaData;
    }
    if (paramResolveInfo == null) {
      return null;
    }
    return paramResolveInfo.getString(paramString);
  }
  
  public static long getVersion(Context paramContext)
  {
    HMSLog.d("PushSelfShowLog", "enter getVersion()");
    long l1 = -1000L;
    try
    {
      PackageManager localPackageManager = paramContext.getPackageManager();
      paramContext = localPackageManager.queryBroadcastReceivers(new Intent("com.huawei.android.push.intent.REGISTER").setPackage(paramContext.getPackageName()), 640);
      if (paramContext != null)
      {
        int i = paramContext.size();
        if (i == 0) {
          return -1000L;
        }
        paramContext = paramContext.get(0);
        paramContext = (ResolveInfo)paramContext;
        long l2 = getIntMetaValue(paramContext, "CS_cloud_version");
        l1 = l2;
      }
      else
      {
        return -1000L;
      }
    }
    catch (Exception paramContext)
    {
      HMSLog.l("PushSelfShowLog", ((Exception)paramContext).toString(), paramContext);
      paramContext = new StringBuilder();
      paramContext.append("get the version is :");
      paramContext.append(l1);
      HMSLog.d("PushSelfShowLog", paramContext.toString());
    }
    return l1;
  }
  
  public static Intent hasActivity(Context paramContext, String paramString)
  {
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = paramContext.getLaunchIntentForPackage(paramString);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    paramContext = new StringBuilder();
    paramContext.append(paramString);
    paramContext.append("not have launch activity");
    HMSLog.get("PushSelfShowLog", paramContext.toString());
    return null;
  }
  
  public static boolean hasPermissionToStartActivity(Context paramContext, Intent paramIntent)
  {
    if (paramContext == null)
    {
      HMSLog.append("PushSelfShowLog", "context is null");
      return false;
    }
    if (paramIntent == null)
    {
      HMSLog.append("PushSelfShowLog", "intent is null");
      return false;
    }
    paramContext = paramContext.getPackageManager().queryIntentActivities(paramIntent, 640);
    if ((paramContext != null) && (paramContext.size() != 0))
    {
      boolean bool = get0activityInfo.exported;
      paramIntent = new StringBuilder();
      paramIntent.append("exportedFlag:");
      paramIntent.append(bool);
      HMSLog.append("PushSelfShowLog", paramIntent.toString());
      paramContext = get0activityInfo.permission;
      paramIntent = new StringBuilder();
      paramIntent.append("need permission:");
      paramIntent.append(paramContext);
      HMSLog.append("PushSelfShowLog", paramIntent.toString());
      if (!bool) {
        return false;
      }
      if (TextUtils.isEmpty(paramContext)) {
        return true;
      }
      HMSLog.toString("PushSelfShowLog", "does't have the permission to open this activity");
      return false;
    }
    HMSLog.toString("PushSelfShowLog", "no activity exist, may be system Err!! pkgName:");
    return false;
  }
  
  public static boolean isCurrentHMS(Context paramContext)
  {
    return "com.huawei.hwid".equals(paramContext.getPackageName());
  }
  
  public static boolean isCurrentPushApk(Context paramContext)
  {
    return "com.huawei.android.pushagent".equals(paramContext.getPackageName());
  }
  
  public static boolean isExistPushApk(Context paramContext)
  {
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = paramContext.getApplicationInfo("com.huawei.android.pushagent", 128);
      if (paramContext != null) {
        return true;
      }
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return false;
  }
  
  public static boolean isInstalled(Context paramContext, String paramString)
  {
    if (paramContext != null)
    {
      if (paramString == null) {
        break label79;
      }
      if ("".equals(paramString)) {
        return false;
      }
    }
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramString, 8192);
      if (paramContext == null) {
        return false;
      }
    }
    catch (Exception paramContext)
    {
      return false;
    }
    try
    {
      paramContext = new StringBuilder();
      paramContext.append(paramString);
    }
    catch (Exception paramContext)
    {
      return false;
    }
    try
    {
      paramContext.append(" is installed");
      HMSLog.d("PushSelfShowLog", paramContext.toString());
      return true;
    }
    catch (Exception paramContext) {}
    return false;
    label79:
    return false;
  }
  
  public static boolean isPreferredPkg(Context paramContext, String paramString)
  {
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    paramContext.getPackageManager().getPreferredActivities(localArrayList1, localArrayList2, paramString);
    return localArrayList2.size() > 0;
  }
  
  public static boolean isSelf(Context paramContext, String paramString)
  {
    return paramContext.getPackageName().equals(paramString);
  }
  
  public static boolean isSupportLargeIcon()
  {
    return Build.VERSION.SDK_INT >= 11;
  }
  
  public static ArrayList lsAppmarketSuportCMD(Context paramContext)
  {
    ArrayList localArrayList = new ArrayList();
    Intent localIntent = new Intent("android.intent.action.VIEW");
    localIntent.setData(Uri.parse("market://details?id="));
    paramContext = paramContext.getPackageManager();
    int i = 0;
    paramContext = paramContext.queryIntentActivities(localIntent, 0);
    if ((paramContext != null) && (paramContext.size() != 0))
    {
      int j = paramContext.size();
      while (i < j)
      {
        if (getactivityInfo != null) {
          localArrayList.add(getactivityInfo.applicationInfo.packageName);
        }
        i += 1;
      }
    }
    return localArrayList;
  }
  
  public static void removeNotifiCationById(Context paramContext, int paramInt)
  {
    if (paramContext == null)
    {
      HMSLog.toString("PushSelfShowLog", "context is null");
      return;
    }
    try
    {
      paramContext = paramContext.getSystemService("notification");
      paramContext = (NotificationManager)paramContext;
      if (paramContext != null)
      {
        paramContext.cancel(paramInt);
        return;
      }
    }
    catch (Exception paramContext)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("removeNotifiCationById err:");
      localStringBuilder.append(paramContext.toString());
      HMSLog.toString("PushSelfShowLog", localStringBuilder.toString());
    }
  }
  
  public static void setAPDelayAlarm(Context paramContext, Intent paramIntent, long paramLong)
  {
    try
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("enter setAPDelayAlarm(intent:");
      ((StringBuilder)localObject).append(paramIntent.toURI());
      ((StringBuilder)localObject).append(" interval:");
      ((StringBuilder)localObject).append(paramLong);
      ((StringBuilder)localObject).append("ms, context:");
      ((StringBuilder)localObject).append(paramContext);
      HMSLog.d("PushSelfShowLog", ((StringBuilder)localObject).toString());
      localObject = paramContext.getSystemService("alarm");
      localObject = (AlarmManager)localObject;
      if (localObject != null)
      {
        long l = System.currentTimeMillis();
        int i = (int)(l / 1000L);
        paramContext = PendingIntent.getBroadcast(paramContext, i, paramIntent, 0);
        l = System.currentTimeMillis();
        ((AlarmManager)localObject).set(0, l + paramLong, paramContext);
        return;
      }
    }
    catch (Exception paramContext)
    {
      paramIntent = new StringBuilder();
      paramIntent.append("set DelayAlarm error");
      paramIntent.append(((Exception)paramContext).toString());
      HMSLog.get("PushSelfShowLog", paramIntent.toString());
    }
  }
  
  public static void startBrowserActivity(Context paramContext, String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      HMSLog.append("PushSelfShowLog", "url is null.");
      return;
    }
    try
    {
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.setData(Uri.parse(paramString));
      localIntent.setFlags(402653184);
      Object localObject2 = paramContext.getPackageManager().queryIntentActivities(localIntent, 0);
      Object localObject1 = null;
      Iterator localIterator = ((List)localObject2).iterator();
      boolean bool;
      do
      {
        bool = localIterator.hasNext();
        paramString = (String)localObject1;
        if (!bool) {
          break;
        }
        paramString = localIterator.next();
        paramString = activityInfo.packageName;
        bool = isPreferredPkg(paramContext, paramString);
      } while (!bool);
      localObject1 = paramString;
      if (paramString == null)
      {
        localObject2 = ((List)localObject2).iterator();
        do
        {
          bool = ((Iterator)localObject2).hasNext();
          localObject1 = paramString;
          if (!bool) {
            break;
          }
          localObject1 = ((Iterator)localObject2).next();
          localObject1 = activityInfo.packageName;
          bool = "com.android.browser".equalsIgnoreCase((String)localObject1);
        } while (!bool);
      }
      if (localObject1 != null) {
        localIntent.setPackage((String)localObject1);
      }
      paramContext.startActivity(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramString = new StringBuilder();
      paramString.append("start browser activity failed, exception:");
      paramString.append(((Exception)paramContext).getMessage());
      HMSLog.toString("PushSelfShowLog", paramString.toString());
    }
  }
}
