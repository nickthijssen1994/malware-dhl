package com.huawei.hms.support.mozilla.push.utils;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.text.TextUtils;
import com.huawei.agconnect.config.AGConnectServicesConfig;
import com.huawei.hms.android.HwBuildEx.VERSION;
import com.huawei.hms.support.model.HMSLog;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.json.JSONObject;

public abstract class CommFun
{
  public static final int EMUI_8_0_1 = 15;
  public static final int EMUI_9_1 = 19;
  public static final Object LOCK = new Object();
  public static final String PAGE_KEY = "CommFun";
  public static final int PROFILE_NC_MIN_VERSION = 110001400;
  public static int existFrameworkPush = -1;
  
  public CommFun() {}
  
  public static boolean checkFrameworkPushExist(Context paramContext)
  {
    paramContext = new StringBuilder();
    paramContext.append("existFrameworkPush:");
    paramContext.append(existFrameworkPush);
    HMSLog.d("CommFun", paramContext.toString());
    try
    {
      paramContext = new StringBuilder();
      paramContext.append("/system/framework/");
      paramContext.append("hwpush.jar");
      paramContext = new File(paramContext.toString());
      boolean bool = isCustExistHwPush();
      if (bool)
      {
        HMSLog.d("CommFun", "push jarFile is exist");
      }
      else
      {
        bool = paramContext.isFile();
        if (!bool) {
          break label102;
        }
        HMSLog.d("CommFun", "push jarFile is exist");
      }
      return true;
      label102:
      return false;
    }
    catch (Exception paramContext)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("get Apk version faild ,Exception e= ");
      localStringBuilder.append(((Exception)paramContext).toString());
      HMSLog.toString("CommFun", localStringBuilder.toString());
    }
    return false;
  }
  
  public static String getApkVersionName(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
      return versionName;
    }
    catch (Exception paramContext)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("getApkVersionName error");
      localStringBuilder.append(paramContext.getMessage());
      HMSLog.toString("CommFun", localStringBuilder.toString());
      return "0.0";
      HMSLog.d("CommFun", "package not exist");
      return "0.0";
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
  }
  
  public static long getNCVersionCode(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager();
    }
    catch (Exception paramContext)
    {
      label19:
      for (;;) {}
    }
    try
    {
      paramContext = paramContext.getPackageInfo("com.huawei.android.pushagent", 0);
      return versionCode;
    }
    catch (Exception paramContext)
    {
      break label19;
    }
    HMSLog.toString("CommFun", "get nc versionCode error");
    return -1L;
  }
  
  public static String getProjectId(Context paramContext)
  {
    return AGConnectServicesConfig.fromContext(paramContext).getString("client/project_id");
  }
  
  public static boolean isCustExistHwPush()
  {
    try
    {
      localObject1 = Class.forName("huawei.cust.HwCfgFilePolicy");
    }
    catch (ClassNotFoundException localClassNotFoundException1)
    {
      Object localObject1;
      Object localObject2;
      int i;
      boolean bool;
      for (;;) {}
    }
    catch (SecurityException localSecurityException1)
    {
      for (;;) {}
    }
    catch (NoSuchFieldException localNoSuchFieldException1)
    {
      for (;;) {}
    }
    catch (NoSuchMethodException localNoSuchMethodException1)
    {
      for (;;) {}
    }
    catch (IllegalArgumentException localIllegalArgumentException1)
    {
      for (;;) {}
    }
    catch (IllegalAccessException localIllegalAccessException1)
    {
      for (;;) {}
    }
    catch (InvocationTargetException localInvocationTargetException1)
    {
      for (;;) {}
    }
    catch (IOException localIOException1)
    {
      label126:
      label135:
      label144:
      label153:
      label162:
      label171:
      label180:
      label189:
      for (;;) {}
    }
    try
    {
      localObject2 = ((Class)localObject1).getDeclaredField("CUST_TYPE_CONFIG").get(localObject1);
      localObject2 = (Integer)localObject2;
      i = ((Integer)localObject2).intValue();
      localObject2 = Integer.TYPE;
    }
    catch (ClassNotFoundException localClassNotFoundException2)
    {
      break label189;
    }
    catch (SecurityException localSecurityException2)
    {
      break label180;
    }
    catch (NoSuchFieldException localNoSuchFieldException2)
    {
      break label171;
    }
    catch (NoSuchMethodException localNoSuchMethodException2)
    {
      break label162;
    }
    catch (IllegalArgumentException localIllegalArgumentException2)
    {
      break label153;
    }
    catch (IllegalAccessException localIllegalAccessException2)
    {
      break label144;
    }
    catch (InvocationTargetException localInvocationTargetException2)
    {
      break label135;
    }
    catch (IOException localIOException2)
    {
      break label126;
    }
    try
    {
      localObject2 = ((Class)localObject1).getDeclaredMethod("getCfgFile", new Class[] { String.class, localObject2 });
    }
    catch (ClassNotFoundException localClassNotFoundException3)
    {
      break label189;
    }
    catch (SecurityException localSecurityException3)
    {
      break label180;
    }
    catch (NoSuchFieldException localNoSuchFieldException3)
    {
      break label171;
    }
    catch (NoSuchMethodException localNoSuchMethodException3)
    {
      break label162;
    }
    catch (IllegalArgumentException localIllegalArgumentException3)
    {
      break label153;
    }
    catch (IllegalAccessException localIllegalAccessException3)
    {
      break label144;
    }
    catch (InvocationTargetException localInvocationTargetException3)
    {
      break label135;
    }
    catch (IOException localIOException3)
    {
      break label126;
    }
    try
    {
      localObject1 = ((Method)localObject2).invoke(localObject1, new Object[] { "jars/hwpush.jar", Integer.valueOf(i) });
      localObject1 = (File)localObject1;
      if (localObject1 == null) {
        break label390;
      }
      bool = ((File)localObject1).exists();
      if (!bool) {
        break label390;
      }
    }
    catch (ClassNotFoundException localClassNotFoundException4)
    {
      break label189;
    }
    catch (SecurityException localSecurityException4)
    {
      break label180;
    }
    catch (NoSuchFieldException localNoSuchFieldException4)
    {
      break label171;
    }
    catch (NoSuchMethodException localNoSuchMethodException4)
    {
      break label162;
    }
    catch (IllegalArgumentException localIllegalArgumentException4)
    {
      break label153;
    }
    catch (IllegalAccessException localIllegalAccessException4)
    {
      break label144;
    }
    catch (InvocationTargetException localInvocationTargetException4)
    {
      break label135;
    }
    catch (IOException localIOException4)
    {
      break label126;
    }
    try
    {
      localObject2 = new StringBuilder();
    }
    catch (ClassNotFoundException localClassNotFoundException5)
    {
      break label189;
    }
    catch (SecurityException localSecurityException5)
    {
      break label180;
    }
    catch (NoSuchFieldException localNoSuchFieldException5)
    {
      break label171;
    }
    catch (NoSuchMethodException localNoSuchMethodException5)
    {
      break label162;
    }
    catch (IllegalArgumentException localIllegalArgumentException5)
    {
      break label153;
    }
    catch (IllegalAccessException localIllegalAccessException5)
    {
      break label144;
    }
    catch (InvocationTargetException localInvocationTargetException5)
    {
      break label135;
    }
    catch (IOException localIOException5)
    {
      break label126;
    }
    try
    {
      ((StringBuilder)localObject2).append("get push cust File path is ");
      ((StringBuilder)localObject2).append(((File)localObject1).getCanonicalPath());
      HMSLog.d("CommFun", ((StringBuilder)localObject2).toString());
      return true;
    }
    catch (ClassNotFoundException localClassNotFoundException6)
    {
      break label189;
    }
    catch (SecurityException localSecurityException6)
    {
      break label180;
    }
    catch (NoSuchFieldException localNoSuchFieldException6)
    {
      break label171;
    }
    catch (NoSuchMethodException localNoSuchMethodException6)
    {
      break label162;
    }
    catch (IllegalArgumentException localIllegalArgumentException6)
    {
      break label153;
    }
    catch (IllegalAccessException localIllegalAccessException6)
    {
      break label144;
    }
    catch (InvocationTargetException localInvocationTargetException6)
    {
      break label135;
    }
    catch (IOException localIOException6)
    {
      break label126;
    }
    HMSLog.toString("CommFun", "check jarFile exist but get not path");
    return false;
    HMSLog.toString("CommFun", "check cust exist push InvocationTargetException.");
    return false;
    HMSLog.toString("CommFun", "check cust exist push IllegalAccessException.");
    return false;
    HMSLog.toString("CommFun", "check cust exist push IllegalArgumentException.");
    return false;
    HMSLog.toString("CommFun", "check cust exist push NoSuchMethodException.");
    return false;
    HMSLog.toString("CommFun", "check cust exist push NoSuchFieldException.");
    return false;
    HMSLog.toString("CommFun", "check cust exist push SecurityException.");
    return false;
    HMSLog.toString("CommFun", "HwCfgFilePolicy ClassNotFoundException");
    return false;
    label390:
    return false;
  }
  
  public static boolean isEmui10Plus()
  {
    return HwBuildEx.VERSION.EMUI_SDK_INT >= 21;
  }
  
  public static boolean isEmui8Plus()
  {
    return HwBuildEx.VERSION.EMUI_SDK_INT >= 15;
  }
  
  public static boolean isEmui91Below()
  {
    return HwBuildEx.VERSION.EMUI_SDK_INT < 19;
  }
  
  public static boolean isFrameworkPushExist(Context paramContext)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("existFrameworkPush:");
    ((StringBuilder)localObject).append(existFrameworkPush);
    HMSLog.d("CommFun", ((StringBuilder)localObject).toString());
    localObject = LOCK;
    try
    {
      int i = existFrameworkPush;
      boolean bool = false;
      if (-1 != i)
      {
        if (1 == existFrameworkPush) {
          bool = true;
        }
        return bool;
      }
      if (checkFrameworkPushExist(paramContext)) {
        existFrameworkPush = 1;
      } else {
        existFrameworkPush = 0;
      }
      if (1 == existFrameworkPush) {
        return true;
      }
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
    return false;
  }
  
  public static boolean isInstalled(Context paramContext, String paramString)
  {
    if (paramContext != null) {
      if (TextUtils.isEmpty(paramString)) {
        return false;
      }
    }
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramString, 0);
      if (paramContext == null) {
        return false;
      }
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      return false;
    }
    try
    {
      paramContext = new StringBuilder();
      paramContext.append(paramString);
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      return false;
    }
    try
    {
      paramContext.append(" is installed");
      HMSLog.d("CommFun", paramContext.toString());
      return true;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return false;
    return false;
  }
  
  public static boolean isOldMsg(JSONObject paramJSONObject1, JSONObject paramJSONObject2, String paramString)
  {
    return (paramJSONObject1 == null) || ((TextUtils.isEmpty(paramString)) && (paramJSONObject2 == null));
  }
}
