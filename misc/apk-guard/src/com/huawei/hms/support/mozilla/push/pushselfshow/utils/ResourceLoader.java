package com.huawei.hms.support.mozilla.push.pushselfshow.utils;

import android.content.Context;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.os.BaseBundle;
import com.huawei.hms.support.model.HMSLog;
import java.lang.reflect.Field;

public class ResourceLoader
{
  public static final String TAG = "ResourceLoader";
  
  public ResourceLoader() {}
  
  public static int loadArrayResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "array", paramString);
  }
  
  public static int loadColorResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "color", paramString);
  }
  
  public static int loadDimenResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "dimen", paramString);
  }
  
  public static int loadDrawableResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "drawable", paramString);
  }
  
  public static int loadDrawableResourceIdByMetaDataName(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      if (paramContext == null) {
        break label43;
      }
      paramContext = metaData;
      if (paramContext == null) {
        break label43;
      }
      int i = paramContext.getInt(paramString);
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      label43:
      for (;;) {}
    }
    HMSLog.get("ResourceLoader", "load meta data resource failed.");
    return 0;
  }
  
  public static int loadIdResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "id", paramString);
  }
  
  public static int loadLayoutResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "layout", paramString);
  }
  
  public static int loadMenuResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "menu", paramString);
  }
  
  public static int loadPluralsResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "plurals", paramString);
  }
  
  public static int loadResourceId(Context paramContext, String paramString1, String paramString2)
  {
    int i;
    try
    {
      int j = paramContext.getResources().getIdentifier(paramString2, paramString1, paramContext.getPackageName());
      i = j;
      if (j != 0) {
        return i;
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramContext.getPackageName());
      localStringBuilder.append(".R$");
      localStringBuilder.append(paramString1);
      paramContext = Class.forName(localStringBuilder.toString()).getField(paramString2);
      j = Integer.parseInt(paramContext.get(paramContext.getName()).toString());
      i = j;
      if (j != 0) {
        return i;
      }
      paramContext = new StringBuilder();
      paramContext.append("Error-resourceType=");
      paramContext.append(paramString1);
      paramContext.append("--resourceName=");
      paramContext.append(paramString2);
      paramContext.append("--resourceId =");
      paramContext.append(j);
      HMSLog.append("ResourceLoader", paramContext.toString());
      return j;
    }
    catch (IllegalArgumentException paramContext)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("!!!! ResourceLoader: IllegalArgumentException-resourceType=");
      localStringBuilder.append(paramString1);
      localStringBuilder.append("--resourceName=");
      localStringBuilder.append(paramString2);
      HMSLog.l("ResourceLoader", localStringBuilder.toString(), paramContext);
    }
    catch (IllegalAccessException paramContext)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("!!!! ResourceLoader: IllegalAccessException-resourceType=");
      localStringBuilder.append(paramString1);
      localStringBuilder.append("--resourceName=");
      localStringBuilder.append(paramString2);
      HMSLog.l("ResourceLoader", localStringBuilder.toString(), paramContext);
    }
    catch (NumberFormatException paramContext)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("!!!! ResourceLoader: NumberFormatException-resourceType=");
      localStringBuilder.append(paramString1);
      localStringBuilder.append("--resourceName=");
      localStringBuilder.append(paramString2);
      HMSLog.l("ResourceLoader", localStringBuilder.toString(), paramContext);
    }
    catch (NoSuchFieldException paramContext)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("!!!! ResourceLoader: NoSuchFieldException-resourceType=");
      localStringBuilder.append(paramString1);
      localStringBuilder.append("--resourceName=");
      localStringBuilder.append(paramString2);
      HMSLog.l("ResourceLoader", localStringBuilder.toString(), paramContext);
    }
    catch (ClassNotFoundException paramContext)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("!!!! ResourceLoader: ClassNotFoundException-resourceType=");
      localStringBuilder.append(paramString1);
      localStringBuilder.append("--resourceName=");
      localStringBuilder.append(paramString2);
      HMSLog.l("ResourceLoader", localStringBuilder.toString(), paramContext);
    }
    return 0;
    return i;
  }
  
  public static int loadStringResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "string", paramString);
  }
  
  public static int loadStyleResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "style", paramString);
  }
  
  public static int loadXmlResourceId(Context paramContext, String paramString)
  {
    return loadResourceId(paramContext, "xml", paramString);
  }
}
