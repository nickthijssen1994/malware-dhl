package com.huawei.hms.support.mozilla.push.utils.common;

import android.app.AppOpsManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Build.VERSION;
import com.huawei.hms.aaid.utils.PushPreferences;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class NotificationUtil
{
  public static final String CHECK_OP_NO_THROW = "checkOpNoThrow";
  public static final String OP_POST_NOTIFICATION = "OP_POST_NOTIFICATION";
  
  public NotificationUtil() {}
  
  public static boolean areNotificationsEnabled(Context paramContext)
  {
    if (new PushPreferences(paramContext, "push_notify_flag").getBoolean("notify_msg_enable")) {
      return false;
    }
    int i = Build.VERSION.SDK_INT;
    if (i >= 24) {
      return areNotificationsEnabledKitKat(paramContext);
    }
    if (i >= 19) {
      return areNotificationsEnabledKitKat(paramContext);
    }
    return true;
  }
  
  public static boolean areNotificationsEnabledKitKat(Context paramContext)
  {
    AppOpsManager localAppOpsManager = (AppOpsManager)paramContext.getSystemService("appops");
    Object localObject1 = paramContext.getApplicationInfo();
    paramContext = paramContext.getApplicationContext().getPackageName();
    int i = uid;
    try
    {
      localObject1 = Class.forName(AppOpsManager.class.getName());
      Object localObject2 = Integer.TYPE;
      Class localClass = Integer.TYPE;
      int j;
      return true;
    }
    catch (ClassNotFoundException paramContext)
    {
      for (;;)
      {
        try
        {
          localObject2 = ((Class)localObject1).getMethod("checkOpNoThrow", new Class[] { localObject2, localClass, String.class });
        }
        catch (ClassNotFoundException paramContext)
        {
          return true;
        }
        catch (NoSuchMethodException paramContext)
        {
          return true;
        }
        catch (NoSuchFieldException paramContext)
        {
          return true;
        }
        catch (InvocationTargetException paramContext)
        {
          return true;
        }
        catch (IllegalAccessException paramContext)
        {
          return true;
        }
        catch (RuntimeException paramContext)
        {
          return true;
        }
        try
        {
          localObject1 = ((Class)localObject1).getDeclaredField("OP_POST_NOTIFICATION").get(Integer.class);
          localObject1 = (Integer)localObject1;
          j = ((Integer)localObject1).intValue();
          paramContext = ((Method)localObject2).invoke(localAppOpsManager, new Object[] { Integer.valueOf(j), Integer.valueOf(i), paramContext });
          paramContext = (Integer)paramContext;
          i = paramContext.intValue();
          return i == 0;
        }
        catch (ClassNotFoundException paramContext)
        {
          return true;
        }
        catch (NoSuchMethodException paramContext)
        {
          return true;
        }
        catch (NoSuchFieldException paramContext)
        {
          return true;
        }
        catch (InvocationTargetException paramContext)
        {
          return true;
        }
        catch (IllegalAccessException paramContext)
        {
          return true;
        }
        catch (RuntimeException paramContext) {}
      }
      paramContext = paramContext;
      return true;
    }
    catch (NoSuchMethodException paramContext)
    {
      return true;
    }
    catch (NoSuchFieldException paramContext)
    {
      return true;
    }
    catch (InvocationTargetException paramContext)
    {
      return true;
    }
    catch (IllegalAccessException paramContext)
    {
      return true;
    }
    catch (RuntimeException paramContext)
    {
      return true;
    }
  }
}
