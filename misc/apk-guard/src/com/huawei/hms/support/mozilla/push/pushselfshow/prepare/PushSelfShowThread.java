package com.huawei.hms.support.mozilla.push.pushselfshow.prepare;

import android.content.Context;
import android.content.Intent;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.push.pushselfshow.entity.PushSelfShowMessage;
import com.huawei.hms.support.mozilla.push.pushselfshow.utils.CommFun;

public class PushSelfShowThread
  extends Thread
{
  public static final String PAGE_KEY = "PushSelfShowLog";
  public Context mContext;
  public PushSelfShowMessage psMsg;
  
  public PushSelfShowThread(Context paramContext, PushSelfShowMessage paramPushSelfShowMessage)
  {
    mContext = paramContext;
    psMsg = paramPushSelfShowMessage;
  }
  
  private boolean checkCOSA(Context paramContext)
  {
    return CommFun.isInstalled(paramContext, psMsg.getAppPackageName());
  }
  
  public static Intent getIntentToStartActivity(Context paramContext, PushSelfShowMessage paramPushSelfShowMessage)
  {
    if (paramPushSelfShowMessage == null) {
      return null;
    }
    Object localObject2 = CommFun.hasActivity(paramContext, paramPushSelfShowMessage.getAppPackageName());
    Object localObject1 = localObject2;
    Object localObject3;
    if (paramPushSelfShowMessage.getIntentUri() != null)
    {
      try
      {
        localObject1 = Intent.parseUri(paramPushSelfShowMessage.getIntentUri(), 0);
        ((Intent)localObject1).setSelector(null);
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append("Intent.parseUri(msg.intentUri, 0)?");
        ((StringBuilder)localObject3).append(((Intent)localObject1).getAction());
        HMSLog.d("PushSelfShowLog", ((StringBuilder)localObject3).toString());
        boolean bool = CommFun.findActivityByIntent(paramContext, paramPushSelfShowMessage.getAppPackageName(), (Intent)localObject1).booleanValue();
        if (!bool) {
          break label195;
        }
        return localObject1;
      }
      catch (Exception paramContext)
      {
        paramPushSelfShowMessage = new StringBuilder();
        paramPushSelfShowMessage.append("intentUri error");
        paramPushSelfShowMessage.append(((Exception)paramContext).toString());
        HMSLog.get("PushSelfShowLog", paramPushSelfShowMessage.toString());
        return localObject2;
      }
    }
    else
    {
      localObject2 = localObject1;
      if (paramPushSelfShowMessage.getAcn() != null)
      {
        localObject3 = new Intent(paramPushSelfShowMessage.getAcn());
        localObject2 = localObject1;
        if (CommFun.findActivityByIntent(paramContext, paramPushSelfShowMessage.getAppPackageName(), (Intent)localObject3).booleanValue()) {
          localObject2 = localObject3;
        }
      }
      ((Intent)localObject2).setPackage(paramPushSelfShowMessage.getAppPackageName());
      return localObject2;
    }
    label195:
    return localObject2;
  }
  
  private boolean hasNoPermissionToStartActivity(Context paramContext, PushSelfShowMessage paramPushSelfShowMessage)
  {
    boolean bool2 = "cosa".equals(paramPushSelfShowMessage.getCmd());
    boolean bool1 = false;
    if (bool2)
    {
      paramPushSelfShowMessage = getIntentToStartActivity(paramContext, paramPushSelfShowMessage);
      if (paramPushSelfShowMessage == null)
      {
        HMSLog.d("PushSelfShowLog", "launchCosaApp,intent == null");
        bool1 = true;
      }
      if (!CommFun.hasPermissionToStartActivity(paramContext, paramPushSelfShowMessage))
      {
        HMSLog.append("PushSelfShowLog", "no permission to start activity");
        return true;
      }
    }
    else
    {
      return false;
    }
    return bool1;
  }
  
  private boolean notifyUser(Context paramContext)
  {
    if ("cosa".equals(psMsg.getCmd())) {
      return checkCOSA(paramContext);
    }
    return true;
  }
  
  public void run()
  {
    HMSLog.append("PushSelfShowLog", "enter run()");
    Context localContext = mContext;
    try
    {
      boolean bool = notifyUser(localContext);
      if (bool)
      {
        localContext = mContext;
        PushSelfShowMessage localPushSelfShowMessage = psMsg;
        bool = hasNoPermissionToStartActivity(localContext, localPushSelfShowMessage);
        if (bool) {
          return;
        }
        localContext = mContext;
        localPushSelfShowMessage = psMsg;
        PushNotification.showNotification(localContext, localPushSelfShowMessage);
        return;
      }
    }
    catch (Exception localException)
    {
      HMSLog.toString("PushSelfShowLog", localException.toString());
    }
  }
}
