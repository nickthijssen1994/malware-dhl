package com.huawei.hms.support.mozilla;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;
import android.util.Pair;
import com.huawei.hms.adapter.BaseAdapter.BaseRequestResultCallback;
import com.huawei.hms.common.internal.TransactionIdCreater;
import com.huawei.hms.core.aidl.AbstractMessageEntity;
import com.huawei.hms.core.aidl.IMessageEntity;
import com.huawei.hms.support.api.client.InnerPendingResult;
import com.huawei.hms.support.gentyref.GenericTypeReflector;
import com.huawei.hms.support.hianalytics.HiAnalyticsUtil;
import com.huawei.hms.support.model.HMSLog;
import com.huawei.hms.support.mozilla.client.ResultCallback;
import com.huawei.hms.support.mozilla.client.Status;
import com.huawei.hms.support.mozilla.client.SubAppInfo;
import com.huawei.hms.support.mozilla.transport.DatagramTransport;
import com.huawei.hms.utils.Util;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class PendingResultImpl<R extends com.huawei.hms.support.api.client.Result, T extends IMessageEntity>
  extends InnerPendingResult<R>
{
  private static final String PAGE_KEY = "PendingResultImpl";
  private CountDownLatch countLatch;
  private boolean isNeedReport = true;
  private WeakReference<com.huawei.hms.support.api.client.ApiClient> mObjects;
  private R result = null;
  private String text = null;
  private String transId = null;
  protected DatagramTransport transport = null;
  
  public PendingResultImpl(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, String paramString, IMessageEntity paramIMessageEntity)
  {
    init(paramApiClient, paramString, paramIMessageEntity, getResponseType(), 0);
  }
  
  public PendingResultImpl(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, String paramString, IMessageEntity paramIMessageEntity, int paramInt)
  {
    init(paramApiClient, paramString, paramIMessageEntity, getResponseType(), paramInt);
  }
  
  public PendingResultImpl(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, String paramString, IMessageEntity paramIMessageEntity, Class paramClass)
  {
    init(paramApiClient, paramString, paramIMessageEntity, paramClass, 0);
  }
  
  private void biReportEvent(int paramInt1, int paramInt2)
  {
    HMSLog.append("PendingResultImpl", "biReportEvent ====== ");
    com.huawei.hms.support.mozilla.client.ApiClient localApiClient = (com.huawei.hms.support.mozilla.client.ApiClient)mObjects.get();
    if ((localApiClient != null) && (text != null))
    {
      if (HiAnalyticsUtil.getInstance().hasError(localApiClient.getContext())) {
        return;
      }
      HashMap localHashMap = new HashMap();
      localHashMap.put("package", localApiClient.getPackageName());
      localHashMap.put("baseVersion", "5.0.5.300");
      if (paramInt2 == 1)
      {
        localHashMap.put("direction", "req");
      }
      else
      {
        localHashMap.put("direction", "rsp");
        localHashMap.put("result", String.valueOf(paramInt1));
        localObject1 = result;
        if ((localObject1 != null) && (((com.huawei.hms.support.mozilla.client.Result)localObject1).getStatus() != null)) {
          localHashMap.put("statusCode", String.valueOf(result.getStatus().getStatusCode()));
        }
      }
      localHashMap.put("version", "0");
      Object localObject3 = Util.getAppId(localApiClient.getContext());
      Object localObject1 = localObject3;
      Object localObject2 = localObject1;
      if (TextUtils.isEmpty((CharSequence)localObject3))
      {
        localObject3 = localApiClient.getSubAppInfo();
        localObject2 = localObject1;
        if (localObject3 != null) {
          localObject2 = ((SubAppInfo)localObject3).getSubAppID();
        }
      }
      localHashMap.put("appid", localObject2);
      if (TextUtils.isEmpty(transId))
      {
        transId = TransactionIdCreater.getId((String)localObject2, text);
        localHashMap.put("transId", transId);
      }
      else
      {
        localHashMap.put("transId", transId);
        transId = null;
      }
      localObject1 = text.split("\\.");
      if (localObject1.length >= 2)
      {
        localHashMap.put("service", localObject1[0]);
        localHashMap.put("apiName", localObject1[1]);
      }
      localHashMap.put("callTime", String.valueOf(System.currentTimeMillis()));
      localHashMap.put("phoneType", Util.getSystemProperties("ro.logsystem.usertype", ""));
      HiAnalyticsUtil.getInstance().onEvent(localApiClient.getContext(), "HMS_SDK_BASE_CALL_AIDL", localHashMap);
    }
  }
  
  private void init(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient, String paramString, IMessageEntity paramIMessageEntity, Class paramClass, int paramInt)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("init uri:");
    ((StringBuilder)localObject).append(paramString);
    HMSLog.append("PendingResultImpl", ((StringBuilder)localObject).toString());
    text = paramString;
    if (paramApiClient == null)
    {
      HMSLog.toString("PendingResultImpl", "client is null");
      return;
    }
    mObjects = new WeakReference(paramApiClient);
    countLatch = new CountDownLatch(1);
    try
    {
      paramApiClient = Class.forName(paramApiClient.getTransportName());
      localObject = Integer.TYPE;
      paramApiClient = paramApiClient.getConstructor(new Class[] { String.class, IMessageEntity.class, Class.class, localObject });
      paramApiClient = paramApiClient.newInstance(new Object[] { paramString, paramIMessageEntity, paramClass, Integer.valueOf(paramInt) });
      transport = ((DatagramTransport)paramApiClient);
      return;
    }
    catch (ClassNotFoundException paramApiClient) {}catch (NoSuchMethodException paramApiClient) {}catch (InvocationTargetException paramApiClient) {}catch (IllegalArgumentException paramApiClient) {}catch (IllegalAccessException paramApiClient) {}catch (InstantiationException paramApiClient) {}
    paramString = new StringBuilder();
    paramString.append("gen transport error:");
    paramString.append(((Exception)paramApiClient).getMessage());
    HMSLog.toString("PendingResultImpl", paramString.toString());
    paramString = new StringBuilder();
    paramString.append("Instancing transport exception, ");
    paramString.append(((Exception)paramApiClient).getMessage());
    throw new IllegalStateException(paramString.toString(), paramApiClient);
  }
  
  private void setResult(int paramInt, IMessageEntity paramIMessageEntity)
  {
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("setResult:");
    ((StringBuilder)localObject1).append(paramInt);
    HMSLog.append("PendingResultImpl", ((StringBuilder)localObject1).toString());
    if ((paramIMessageEntity instanceof AbstractMessageEntity)) {
      localObject1 = ((AbstractMessageEntity)paramIMessageEntity).getCommonStatus();
    } else {
      localObject1 = null;
    }
    if (paramInt == 0) {
      result = onComplete(paramIMessageEntity);
    } else {
      result = onError(paramInt);
    }
    if (isNeedReport) {
      biReportEvent(paramInt, 2);
    }
    paramIMessageEntity = result;
    if (paramIMessageEntity != null)
    {
      Object localObject2 = paramIMessageEntity.getStatus();
      if ((localObject2 != null) && (localObject1 != null))
      {
        paramInt = ((Status)localObject2).getStatusCode();
        paramIMessageEntity = ((Status)localObject2).getStatusMessage();
        int i = ((Status)localObject1).getStatusCode();
        localObject1 = ((Status)localObject1).getStatusMessage();
        if (paramInt != i)
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("rstStatus code (");
          ((StringBuilder)localObject2).append(paramInt);
          ((StringBuilder)localObject2).append(") is not equal commonStatus code (");
          ((StringBuilder)localObject2).append(i);
          ((StringBuilder)localObject2).append(")");
          HMSLog.toString("PendingResultImpl", ((StringBuilder)localObject2).toString());
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("rstStatus msg (");
          ((StringBuilder)localObject2).append(paramIMessageEntity);
          ((StringBuilder)localObject2).append(") is not equal commonStatus msg (");
          ((StringBuilder)localObject2).append((String)localObject1);
          ((StringBuilder)localObject2).append(")");
          HMSLog.toString("PendingResultImpl", ((StringBuilder)localObject2).toString());
          return;
        }
        if ((TextUtils.isEmpty(paramIMessageEntity)) && (!TextUtils.isEmpty((CharSequence)localObject1)))
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("rstStatus msg (");
          localStringBuilder.append(paramIMessageEntity);
          localStringBuilder.append(") is not equal commonStatus msg (");
          localStringBuilder.append((String)localObject1);
          localStringBuilder.append(")");
          HMSLog.append("PendingResultImpl", localStringBuilder.toString());
          result.setStatus(new Status(paramInt, (String)localObject1, ((Status)localObject2).getResolution()));
        }
      }
    }
  }
  
  public final com.huawei.hms.support.mozilla.client.Result await()
  {
    HMSLog.append("PendingResultImpl", "await");
    if (Looper.myLooper() != Looper.getMainLooper()) {
      return awaitOnAnyThread();
    }
    HMSLog.toString("PendingResultImpl", "await in main thread");
    throw new IllegalStateException("await must not be called on the UI thread");
  }
  
  public com.huawei.hms.support.mozilla.client.Result await(long paramLong, TimeUnit paramTimeUnit)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("await timeout:");
    localStringBuilder.append(paramLong);
    localStringBuilder.append(" unit:");
    localStringBuilder.append(paramTimeUnit.toString());
    HMSLog.append("PendingResultImpl", localStringBuilder.toString());
    if (Looper.myLooper() != Looper.getMainLooper()) {
      return awaitOnAnyThread(paramLong, paramTimeUnit);
    }
    HMSLog.append("PendingResultImpl", "await in main thread");
    throw new IllegalStateException("await must not be called on the UI thread");
  }
  
  public final com.huawei.hms.support.mozilla.client.Result awaitOnAnyThread()
  {
    HMSLog.append("PendingResultImpl", "awaitOnAnyThread");
    Object localObject = mObjects;
    if (localObject == null)
    {
      HMSLog.toString("PendingResultImpl", "api is null");
      setResult(907135003, null);
      return result;
    }
    localObject = (com.huawei.hms.support.mozilla.client.ApiClient)((WeakReference)localObject).get();
    if (!checkApiClient((com.huawei.hms.support.mozilla.client.ApiClient)localObject))
    {
      HMSLog.toString("PendingResultImpl", "client invalid");
      setResult(907135003, null);
      return result;
    }
    if (isNeedReport) {
      biReportEvent(0, 1);
    }
    transport.send((com.huawei.hms.support.mozilla.client.ApiClient)localObject, new PendingResultImpl.1(this));
    localObject = countLatch;
    try
    {
      ((CountDownLatch)localObject).await();
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;) {}
    }
    HMSLog.toString("PendingResultImpl", "await in anythread InterruptedException");
    setResult(907135001, null);
    return result;
  }
  
  public final com.huawei.hms.support.mozilla.client.Result awaitOnAnyThread(long paramLong, TimeUnit paramTimeUnit)
  {
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("awaitOnAnyThread timeout:");
    ((StringBuilder)localObject1).append(paramLong);
    ((StringBuilder)localObject1).append(" unit:");
    ((StringBuilder)localObject1).append(paramTimeUnit.toString());
    HMSLog.append("PendingResultImpl", ((StringBuilder)localObject1).toString());
    localObject1 = mObjects;
    if (localObject1 == null)
    {
      HMSLog.toString("PendingResultImpl", "api is null");
      setResult(907135003, null);
      return result;
    }
    Object localObject2 = (com.huawei.hms.support.mozilla.client.ApiClient)((WeakReference)localObject1).get();
    if (!checkApiClient((com.huawei.hms.support.mozilla.client.ApiClient)localObject2))
    {
      HMSLog.toString("PendingResultImpl", "client invalid");
      setResult(907135003, null);
      return result;
    }
    localObject1 = new AtomicBoolean();
    if (isNeedReport) {
      biReportEvent(0, 1);
    }
    transport.post((com.huawei.hms.support.mozilla.client.ApiClient)localObject2, new PendingResultImpl.2(this, (AtomicBoolean)localObject1));
    localObject2 = countLatch;
    try
    {
      boolean bool = ((CountDownLatch)localObject2).await(paramLong, paramTimeUnit);
      if (bool) {
        break label222;
      }
      ((AtomicBoolean)localObject1).set(true);
      setResult(907135004, null);
    }
    catch (InterruptedException paramTimeUnit)
    {
      for (;;) {}
    }
    HMSLog.toString("PendingResultImpl", "awaitOnAnyThread InterruptedException");
    setResult(907135001, null);
    label222:
    return result;
  }
  
  public void cancel() {}
  
  protected boolean checkApiClient(com.huawei.hms.support.mozilla.client.ApiClient paramApiClient)
  {
    return true;
  }
  
  protected Class getResponseType()
  {
    Type localType = getClass().getGenericSuperclass();
    if (localType != null)
    {
      localType = ((java.lang.reflect.ParameterizedType)localType).getActualTypeArguments()[1];
      if (localType != null) {
        return (Class)localType;
      }
    }
    return null;
  }
  
  public boolean isCanceled()
  {
    return false;
  }
  
  public abstract com.huawei.hms.support.mozilla.client.Result onComplete(IMessageEntity paramIMessageEntity);
  
  protected com.huawei.hms.support.mozilla.client.Result onError(int paramInt)
  {
    Object localObject = getClass().getGenericSuperclass();
    if (localObject != null) {
      localObject = ((java.lang.reflect.ParameterizedType)localObject).getActualTypeArguments()[0];
    } else {
      localObject = null;
    }
    if (localObject != null) {
      localObject = GenericTypeReflector.getType((Type)localObject);
    } else {
      localObject = null;
    }
    if (localObject != null) {
      try
      {
        localObject = ((Class)localObject).newInstance();
        result = ((com.huawei.hms.support.mozilla.client.Result)localObject);
        localObject = result;
        ((com.huawei.hms.support.mozilla.client.Result)localObject).setStatus(new Status(paramInt));
      }
      catch (Exception localException)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("on Error:");
        localStringBuilder.append(localException.getMessage());
        HMSLog.toString("PendingResultImpl", localStringBuilder.toString());
        return null;
      }
    }
    return result;
  }
  
  public final void setResultCallback(Looper paramLooper, ResultCallback paramResultCallback)
  {
    HMSLog.append("PendingResultImpl", "setResultCallback");
    Object localObject = paramLooper;
    if (paramLooper == null) {
      localObject = Looper.myLooper();
    }
    paramLooper = new CallbackHandler((Looper)localObject);
    localObject = mObjects;
    if (localObject == null)
    {
      HMSLog.toString("PendingResultImpl", "api is null");
      setResult(907135003, null);
      return;
    }
    localObject = (com.huawei.hms.support.mozilla.client.ApiClient)((WeakReference)localObject).get();
    if (!checkApiClient((com.huawei.hms.support.mozilla.client.ApiClient)localObject))
    {
      HMSLog.toString("PendingResultImpl", "client is invalid");
      setResult(907135003, null);
      paramLooper.post(paramResultCallback, result);
      return;
    }
    if (isNeedReport) {
      biReportEvent(0, 1);
    }
    transport.post((com.huawei.hms.support.mozilla.client.ApiClient)localObject, new PendingResultImpl.3(this, paramLooper, paramResultCallback));
  }
  
  public void setResultCallback(ResultCallback paramResultCallback)
  {
    isNeedReport = (paramResultCallback instanceof BaseAdapter.BaseRequestResultCallback ^ true);
    setResultCallback(Looper.getMainLooper(), paramResultCallback);
  }
  
  public void setResultCallback(ResultCallback paramResultCallback, long paramLong, TimeUnit paramTimeUnit)
  {
    setResultCallback(paramResultCallback);
  }
  
  public class CallbackHandler<R extends com.huawei.hms.support.api.client.Result>
    extends Handler
  {
    public CallbackHandler()
    {
      this();
    }
    
    public CallbackHandler()
    {
      super();
    }
    
    public void handleMessage(Message paramMessage)
    {
      if (what != 1) {
        return;
      }
      paramMessage = (Pair)obj;
      send((ResultCallback)first, (com.huawei.hms.support.mozilla.client.Result)second);
    }
    
    public void post(ResultCallback paramResultCallback, com.huawei.hms.support.mozilla.client.Result paramResult)
    {
      sendMessage(obtainMessage(1, new Pair(paramResultCallback, paramResult)));
    }
    
    protected void send(ResultCallback paramResultCallback, com.huawei.hms.support.mozilla.client.Result paramResult)
    {
      paramResultCallback.onResult(paramResult);
    }
  }
}
