package com.huawei.hms.push.utils;

import android.os.BaseBundle;
import android.os.Bundle;
import android.text.TextUtils;
import com.huawei.hms.support.model.HMSLog;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class JsonUtil
{
  public JsonUtil() {}
  
  public static void add(JSONObject paramJSONObject, String paramString, Object paramObject, Bundle paramBundle)
  {
    if (paramObject == null)
    {
      HMSLog.get("JsonUtil", "transfer jsonObject to bundle failed, defaultValue is null.");
      return;
    }
    Object localObject;
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      paramObject = localObject;
      if (TextUtils.isEmpty((CharSequence)localObject)) {
        paramObject = null;
      }
      paramBundle.putString(paramString, getString(paramJSONObject, paramString, paramObject));
      return;
    }
    if ((paramObject instanceof Integer))
    {
      paramBundle.putInt(paramString, getInt(paramJSONObject, paramString, ((Integer)paramObject).intValue()));
      return;
    }
    if ((paramObject instanceof int[]))
    {
      localObject = (int[])paramObject;
      paramObject = localObject;
      if (localObject.length == 0) {
        paramObject = null;
      }
      paramBundle.putIntArray(paramString, getIntArray(paramJSONObject, paramString, paramObject));
      return;
    }
    if ((paramObject instanceof long[]))
    {
      localObject = (long[])paramObject;
      paramObject = localObject;
      if (localObject.length == 0) {
        paramObject = null;
      }
      paramBundle.putLongArray(paramString, getLongArray(paramJSONObject, paramString, paramObject));
      return;
    }
    if ((paramObject instanceof String[]))
    {
      localObject = (String[])paramObject;
      paramObject = localObject;
      if (localObject.length == 0) {
        paramObject = null;
      }
      paramBundle.putStringArray(paramString, getStringArray(paramJSONObject, paramString, paramObject));
      return;
    }
    HMSLog.get("JsonUtil", "transfer jsonObject to bundle failed, invalid data type.");
  }
  
  public static int getInt(JSONObject paramJSONObject, String paramString, int paramInt)
  {
    if (paramJSONObject != null)
    {
      try
      {
        boolean bool = paramJSONObject.has(paramString);
        if (!bool) {
          return paramInt;
        }
        int i = paramJSONObject.getInt(paramString);
        return i;
      }
      catch (JSONException paramJSONObject)
      {
        for (;;) {}
      }
      paramJSONObject = new StringBuilder();
      paramJSONObject.append("JSONException: get ");
      paramJSONObject.append(paramString);
      paramJSONObject.append(" error.");
      HMSLog.get("JsonUtil", paramJSONObject.toString());
      return paramInt;
    }
    return paramInt;
  }
  
  public static int[] getIntArray(JSONObject paramJSONObject, String paramString, int[] paramArrayOfInt)
  {
    Object localObject2 = null;
    JSONArray localJSONArray = null;
    Object localObject1 = localJSONArray;
    if (paramJSONObject != null) {
      localObject1 = localObject2;
    }
    try
    {
      boolean bool = paramJSONObject.has(paramString);
      localObject1 = localJSONArray;
      if (!bool) {
        break label157;
      }
      localObject1 = localObject2;
      localJSONArray = paramJSONObject.getJSONArray(paramString);
      localObject1 = localObject2;
      int i = localJSONArray.length();
      paramJSONObject = new int[i];
      i = 0;
      for (;;)
      {
        localObject1 = paramJSONObject;
        int j = localJSONArray.length();
        localObject1 = paramJSONObject;
        if (i >= j) {
          break;
        }
        localObject1 = paramJSONObject;
        localObject2 = localJSONArray.get(i);
        localObject2 = (Integer)localObject2;
        localObject1 = paramJSONObject;
        j = ((Integer)localObject2).intValue();
        paramJSONObject[i] = j;
        i += 1;
      }
    }
    catch (JSONException paramJSONObject)
    {
      for (;;) {}
    }
    paramJSONObject = new StringBuilder();
    paramJSONObject.append("JSONException: get ");
    paramJSONObject.append(paramString);
    paramJSONObject.append(" error.");
    HMSLog.get("JsonUtil", paramJSONObject.toString());
    label157:
    if (localObject1 == null) {
      return paramArrayOfInt;
    }
    return localObject1;
  }
  
  public static JSONArray getIntJsonArray(int[] paramArrayOfInt)
  {
    JSONArray localJSONArray = new JSONArray();
    if (paramArrayOfInt != null)
    {
      if (paramArrayOfInt.length == 0) {
        return localJSONArray;
      }
      int j = paramArrayOfInt.length;
      int i = 0;
      while (i < j)
      {
        localJSONArray.put(paramArrayOfInt[i]);
        i += 1;
      }
    }
    return localJSONArray;
  }
  
  public static long[] getLongArray(JSONObject paramJSONObject, String paramString, long[] paramArrayOfLong)
  {
    Object localObject2 = null;
    JSONArray localJSONArray = null;
    Object localObject1 = localJSONArray;
    if (paramJSONObject != null) {
      localObject1 = localObject2;
    }
    try
    {
      boolean bool = paramJSONObject.has(paramString);
      localObject1 = localJSONArray;
      if (!bool) {
        break label140;
      }
      localObject1 = localObject2;
      localJSONArray = paramJSONObject.getJSONArray(paramString);
      localObject1 = localObject2;
      int i = localJSONArray.length();
      paramJSONObject = new long[i];
      i = 0;
      for (;;)
      {
        localObject1 = paramJSONObject;
        int j = localJSONArray.length();
        localObject1 = paramJSONObject;
        if (i >= j) {
          break;
        }
        localObject1 = paramJSONObject;
        long l = localJSONArray.getLong(i);
        paramJSONObject[i] = l;
        i += 1;
      }
    }
    catch (JSONException paramJSONObject)
    {
      for (;;) {}
    }
    paramJSONObject = new StringBuilder();
    paramJSONObject.append("JSONException: get ");
    paramJSONObject.append(paramString);
    paramJSONObject.append(" error.");
    HMSLog.get("JsonUtil", paramJSONObject.toString());
    label140:
    if (localObject1 == null) {
      return paramArrayOfLong;
    }
    return localObject1;
  }
  
  public static JSONArray getLongJsonArray(long[] paramArrayOfLong)
  {
    JSONArray localJSONArray = new JSONArray();
    if (paramArrayOfLong != null)
    {
      if (paramArrayOfLong.length == 0) {
        return localJSONArray;
      }
      int j = paramArrayOfLong.length;
      int i = 0;
      while (i < j)
      {
        localJSONArray.put(paramArrayOfLong[i]);
        i += 1;
      }
    }
    return localJSONArray;
  }
  
  public static String getString(JSONObject paramJSONObject, String paramString1, String paramString2)
  {
    if (paramJSONObject != null)
    {
      try
      {
        boolean bool = paramJSONObject.has(paramString1);
        if (!bool) {
          return paramString2;
        }
        Object localObject = paramJSONObject.get(paramString1);
        if (localObject == null) {
          return paramString2;
        }
        paramJSONObject = String.valueOf(paramJSONObject.get(paramString1));
        return paramJSONObject;
      }
      catch (JSONException paramJSONObject)
      {
        for (;;) {}
      }
      paramJSONObject = new StringBuilder();
      paramJSONObject.append("JSONException: get ");
      paramJSONObject.append(paramString1);
      paramJSONObject.append(" error.");
      HMSLog.get("JsonUtil", paramJSONObject.toString());
      return paramString2;
    }
    return paramString2;
  }
  
  public static String[] getStringArray(JSONObject paramJSONObject, String paramString, String[] paramArrayOfString)
  {
    Object localObject = null;
    if (paramJSONObject != null)
    {
      paramArrayOfString = localObject;
      try
      {
        boolean bool = paramJSONObject.has(paramString);
        if (!bool) {
          break label131;
        }
        paramArrayOfString = localObject;
        JSONArray localJSONArray = paramJSONObject.getJSONArray(paramString);
        paramArrayOfString = localObject;
        int i = localJSONArray.length();
        paramJSONObject = new String[i];
        i = 0;
        for (;;)
        {
          paramArrayOfString = paramJSONObject;
          int j = localJSONArray.length();
          if (i >= j) {
            break;
          }
          paramArrayOfString = paramJSONObject;
          localObject = localJSONArray.get(i);
          paramJSONObject[i] = ((String)localObject);
          i += 1;
        }
      }
      catch (JSONException paramJSONObject)
      {
        for (;;) {}
      }
      paramJSONObject = new StringBuilder();
      paramJSONObject.append("JSONException: get ");
      paramJSONObject.append(paramString);
      paramJSONObject.append(" error.");
      HMSLog.get("JsonUtil", paramJSONObject.toString());
      return paramArrayOfString;
    }
    label131:
    return null;
    return paramJSONObject;
  }
  
  public static JSONArray getStringJsonArray(String[] paramArrayOfString)
  {
    JSONArray localJSONArray = new JSONArray();
    if (paramArrayOfString != null)
    {
      if (paramArrayOfString.length == 0) {
        return localJSONArray;
      }
      int j = paramArrayOfString.length;
      int i = 0;
      while (i < j)
      {
        localJSONArray.put(paramArrayOfString[i]);
        i += 1;
      }
    }
    return localJSONArray;
  }
  
  public static void transferJsonObjectToBundle(JSONObject paramJSONObject, Bundle paramBundle, HashMap paramHashMap)
  {
    paramHashMap = paramHashMap.entrySet().iterator();
    while (paramHashMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramHashMap.next();
      add(paramJSONObject, (String)localEntry.getKey(), localEntry.getValue(), paramBundle);
    }
  }
}
