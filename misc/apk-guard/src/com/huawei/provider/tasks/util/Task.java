package com.huawei.provider.tasks.util;

import android.os.Looper;
import com.huawei.provider.tasks.TaskCompletionSource;
import com.huawei.provider.tasks.TaskExecutors;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;

public final class Task
{
  public Task() {}
  
  public static com.huawei.provider.tasks.Task call(Object paramObject)
  {
    TaskCompletionSource localTaskCompletionSource = new TaskCompletionSource();
    localTaskCompletionSource.setResult(paramObject);
    return localTaskCompletionSource.getTask();
  }
  
  public static com.huawei.provider.tasks.Task continueWith(Collection paramCollection)
  {
    return create(paramCollection).continueWith(new Task.5(paramCollection));
  }
  
  public static com.huawei.provider.tasks.Task create(Collection paramCollection)
  {
    if (paramCollection.isEmpty()) {
      return call(null);
    }
    Object localObject = paramCollection.iterator();
    while (((Iterator)localObject).hasNext()) {
      if ((com.huawei.provider.tasks.Task)((Iterator)localObject).next() == null) {
        throw new NullPointerException("task can not is null");
      }
    }
    localObject = new GitOperation();
    RssReader localRssReader = new RssReader(paramCollection.size(), (GitOperation)localObject);
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      com.huawei.provider.tasks.Task localTask = (com.huawei.provider.tasks.Task)paramCollection.next();
      localTask.addOnSuccessListener(TaskExecutors.immediate(), localRssReader);
      localTask.addOnFailureListener(TaskExecutors.immediate(), localRssReader);
      localTask.addOnCanceledListener(TaskExecutors.immediate(), localRssReader);
    }
    return localObject;
  }
  
  public static Object execute(com.huawei.provider.tasks.Task paramTask)
    throws ExecutionException
  {
    if (paramTask.isSuccessful()) {
      return paramTask.getResult();
    }
    throw new ExecutionException(paramTask.getException());
  }
  
  public static void subscribe(String paramString)
  {
    if (Looper.myLooper() != Looper.getMainLooper()) {
      return;
    }
    throw new IllegalStateException(paramString);
  }
  
  public static com.huawei.provider.tasks.Task then(Collection paramCollection)
  {
    return create(paramCollection).continueWith(new Task.8(paramCollection));
  }
  
  public final com.huawei.provider.tasks.Task call(Executor paramExecutor, Callable paramCallable)
  {
    TaskCompletionSource localTaskCompletionSource = new TaskCompletionSource();
    try
    {
      paramExecutor.execute(new FutureTask(this, localTaskCompletionSource, paramCallable));
    }
    catch (Exception paramExecutor)
    {
      localTaskCompletionSource.setException(paramExecutor);
    }
    return localTaskCompletionSource.getTask();
  }
}
