package com.huawei.provider.tasks.util;

import com.huawei.hmf.tasks.ExecuteResult;
import com.huawei.provider.tasks.OnCanceledListener;
import com.huawei.provider.tasks.Task;
import java.util.concurrent.Executor;

public final class b<TResult>
  implements ExecuteResult<TResult>
{
  private final Object a = new Object();
  private OnCanceledListener d;
  private Executor e;
  
  b(Executor paramExecutor, OnCanceledListener paramOnCanceledListener)
  {
    d = paramOnCanceledListener;
    e = paramExecutor;
  }
  
  public final void cancel()
  {
    Object localObject = a;
    try
    {
      d = null;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final void onComplete(Task paramTask)
  {
    if (paramTask.isCanceled()) {
      e.execute(new CallbackRunnable(this));
    }
  }
}
