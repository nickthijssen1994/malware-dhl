package com.huawei.provider.tasks.util;

import android.app.Activity;
import com.huawei.provider.tasks.Continuation;
import com.huawei.provider.tasks.OnCanceledListener;
import com.huawei.provider.tasks.OnCompleteListener;
import com.huawei.provider.tasks.OnFailureListener;
import com.huawei.provider.tasks.OnSuccessListener;
import com.huawei.provider.tasks.SuccessContinuation;
import com.huawei.provider.tasks.TaskExecutors;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Executor;

public final class GitOperation<TResult>
  extends com.huawei.hmf.tasks.Task<TResult>
{
  private Exception error;
  private List<com.huawei.hmf.tasks.ExecuteResult<TResult>> labels = new ArrayList();
  private volatile boolean mIsCanceled;
  private TResult result;
  private boolean status;
  private final Object this$0 = new Object();
  
  public GitOperation() {}
  
  private void execute()
  {
    Object localObject = this$0;
    try
    {
      Iterator localIterator = labels.iterator();
      while (localIterator.hasNext())
      {
        com.huawei.provider.tasks.ExecuteResult localExecuteResult = (com.huawei.provider.tasks.ExecuteResult)localIterator.next();
        try
        {
          localExecuteResult.onComplete(this);
        }
        catch (Exception localException)
        {
          throw new RuntimeException(localException);
        }
        catch (RuntimeException localRuntimeException)
        {
          throw localRuntimeException;
        }
      }
      labels = null;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private com.huawei.provider.tasks.Task handle(com.huawei.provider.tasks.ExecuteResult paramExecuteResult)
  {
    Object localObject = this$0;
    try
    {
      boolean bool = isComplete();
      if (!bool) {
        labels.add(paramExecuteResult);
      }
      if (bool)
      {
        paramExecuteResult.onComplete(this);
        return this;
      }
    }
    catch (Throwable paramExecuteResult)
    {
      throw paramExecuteResult;
    }
    return this;
  }
  
  public final com.huawei.provider.tasks.Task addOnCanceledListener(Activity paramActivity, OnCanceledListener paramOnCanceledListener)
  {
    paramOnCanceledListener = new b(TaskExecutors.uiThread(), paramOnCanceledListener);
    f.a(paramActivity, paramOnCanceledListener);
    return handle(paramOnCanceledListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnCanceledListener(OnCanceledListener paramOnCanceledListener)
  {
    return addOnCanceledListener(TaskExecutors.uiThread(), paramOnCanceledListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnCanceledListener(Executor paramExecutor, OnCanceledListener paramOnCanceledListener)
  {
    return handle(new b(paramExecutor, paramOnCanceledListener));
  }
  
  public final com.huawei.provider.tasks.Task addOnCompleteListener(Activity paramActivity, OnCompleteListener paramOnCompleteListener)
  {
    paramOnCompleteListener = new k(TaskExecutors.uiThread(), paramOnCompleteListener);
    f.a(paramActivity, paramOnCompleteListener);
    return handle(paramOnCompleteListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnCompleteListener(OnCompleteListener paramOnCompleteListener)
  {
    return addOnCompleteListener(TaskExecutors.uiThread(), paramOnCompleteListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnCompleteListener(Executor paramExecutor, OnCompleteListener paramOnCompleteListener)
  {
    return handle(new k(paramExecutor, paramOnCompleteListener));
  }
  
  public final com.huawei.provider.tasks.Task addOnFailureListener(Activity paramActivity, OnFailureListener paramOnFailureListener)
  {
    paramOnFailureListener = new FileCache(TaskExecutors.uiThread(), paramOnFailureListener);
    f.a(paramActivity, paramOnFailureListener);
    return handle(paramOnFailureListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnFailureListener(OnFailureListener paramOnFailureListener)
  {
    return addOnFailureListener(TaskExecutors.uiThread(), paramOnFailureListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnFailureListener(Executor paramExecutor, OnFailureListener paramOnFailureListener)
  {
    return handle(new FileCache(paramExecutor, paramOnFailureListener));
  }
  
  public final com.huawei.provider.tasks.Task addOnSuccessListener(Activity paramActivity, OnSuccessListener paramOnSuccessListener)
  {
    paramOnSuccessListener = new SyncCampaign(TaskExecutors.uiThread(), paramOnSuccessListener);
    f.a(paramActivity, paramOnSuccessListener);
    return handle(paramOnSuccessListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnSuccessListener(OnSuccessListener paramOnSuccessListener)
  {
    return addOnSuccessListener(TaskExecutors.uiThread(), paramOnSuccessListener);
  }
  
  public final com.huawei.provider.tasks.Task addOnSuccessListener(Executor paramExecutor, OnSuccessListener paramOnSuccessListener)
  {
    return handle(new SyncCampaign(paramExecutor, paramOnSuccessListener));
  }
  
  public final void cancel(Exception paramException)
  {
    Object localObject = this$0;
    try
    {
      if (status) {
        return;
      }
      status = true;
      error = paramException;
      this$0.notifyAll();
      execute();
      return;
    }
    catch (Throwable paramException)
    {
      throw paramException;
    }
  }
  
  public final void cancel(Object paramObject)
  {
    Object localObject = this$0;
    try
    {
      if (status) {
        return;
      }
      status = true;
      result = paramObject;
      this$0.notifyAll();
      execute();
      return;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
  
  public final boolean cancel()
  {
    Object localObject = this$0;
    try
    {
      if (status) {
        return false;
      }
      status = true;
      mIsCanceled = true;
      this$0.notifyAll();
      execute();
      return true;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final com.huawei.provider.tasks.Task continueWith(Continuation paramContinuation)
  {
    return continueWith(TaskExecutors.uiThread(), paramContinuation);
  }
  
  public final com.huawei.provider.tasks.Task continueWith(Executor paramExecutor, Continuation paramContinuation)
  {
    GitOperation localGitOperation = new GitOperation();
    addOnCompleteListener(paramExecutor, new LoginActivity.1(this, localGitOperation, paramContinuation));
    return localGitOperation;
  }
  
  public final com.huawei.provider.tasks.Task continueWithTask(Continuation paramContinuation)
  {
    return continueWithTask(TaskExecutors.uiThread(), paramContinuation);
  }
  
  public final com.huawei.provider.tasks.Task continueWithTask(Executor paramExecutor, Continuation paramContinuation)
  {
    GitOperation localGitOperation = new GitOperation();
    addOnCompleteListener(paramExecutor, new MainActivity.2(this, paramContinuation, localGitOperation));
    return localGitOperation;
  }
  
  public final Exception getException()
  {
    Object localObject = this$0;
    try
    {
      Exception localException = error;
      return localException;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final Object getResult()
  {
    Object localObject1 = this$0;
    try
    {
      if (error == null)
      {
        Object localObject2 = result;
        return localObject2;
      }
      throw new RuntimeException(error);
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final Object getResultThrowException(Class paramClass)
    throws Throwable
  {
    Object localObject = this$0;
    if (paramClass != null) {}
    try
    {
      if (paramClass.isInstance(error)) {
        throw ((Throwable)paramClass.cast(error));
      }
      if (error == null)
      {
        paramClass = result;
        return paramClass;
      }
      throw new RuntimeException(error);
    }
    catch (Throwable paramClass)
    {
      throw paramClass;
    }
  }
  
  public final boolean isCanceled()
  {
    return mIsCanceled;
  }
  
  public final boolean isComplete()
  {
    Object localObject = this$0;
    try
    {
      boolean bool = status;
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final boolean isSuccessful()
  {
    Object localObject = this$0;
    for (;;)
    {
      try
      {
        if ((status) && (!isCanceled()) && (error == null))
        {
          bool = true;
          return bool;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      boolean bool = false;
    }
  }
  
  public final com.huawei.provider.tasks.Task onSuccessTask(SuccessContinuation paramSuccessContinuation)
  {
    return onSuccessTask(TaskExecutors.uiThread(), paramSuccessContinuation);
  }
  
  public final com.huawei.provider.tasks.Task onSuccessTask(Executor paramExecutor, SuccessContinuation paramSuccessContinuation)
  {
    GitOperation localGitOperation = new GitOperation();
    addOnSuccessListener(paramExecutor, new CompressActionPolicy.5(this, paramSuccessContinuation, localGitOperation));
    addOnFailureListener(new MainActivity.1.1(this, localGitOperation));
    addOnCanceledListener(new Server(this, localGitOperation));
    return localGitOperation;
  }
}
