package com.huawei.provider.tasks.util;

import com.huawei.hmf.tasks.OnCanceledListener;
import com.huawei.hmf.tasks.OnFailureListener;
import com.huawei.hmf.tasks.OnSuccessListener;
import com.huawei.hmf.tasks.a.i;
import java.util.concurrent.ExecutionException;

final class RssReader<TResult>
  implements OnCanceledListener, OnFailureListener, OnSuccessListener<TResult>
{
  private final i<Void> b;
  private final int closed;
  private final Object first = new Object();
  private Exception in;
  private boolean s;
  private int this$0;
  
  RssReader(int paramInt, GitOperation paramGitOperation)
  {
    closed = paramInt;
    b = paramGitOperation;
  }
  
  private void close()
  {
    if (this$0 >= closed)
    {
      Exception localException = in;
      if (localException != null)
      {
        b.cancel(new ExecutionException("a task failed", localException));
        return;
      }
      if (s)
      {
        b.cancel();
        return;
      }
      b.cancel(null);
    }
  }
  
  public final void onCanceled()
  {
    Object localObject = first;
    try
    {
      this$0 += 1;
      s = true;
      close();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final void onFailure(Exception paramException)
  {
    Object localObject = first;
    try
    {
      this$0 += 1;
      in = paramException;
      close();
      return;
    }
    catch (Throwable paramException)
    {
      throw paramException;
    }
  }
  
  public final void onSuccess(Object paramObject)
  {
    paramObject = first;
    try
    {
      this$0 += 1;
      close();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
