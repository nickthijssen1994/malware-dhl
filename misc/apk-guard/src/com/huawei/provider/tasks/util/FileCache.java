package com.huawei.provider.tasks.util;

import com.huawei.hmf.tasks.ExecuteResult;
import com.huawei.provider.tasks.OnFailureListener;
import com.huawei.provider.tasks.Task;
import java.util.concurrent.Executor;

public final class FileCache<TResult>
  implements ExecuteResult<TResult>
{
  private Executor context;
  private OnFailureListener database;
  private final Object initLock = new Object();
  
  FileCache(Executor paramExecutor, OnFailureListener paramOnFailureListener)
  {
    database = paramOnFailureListener;
    context = paramExecutor;
  }
  
  public final void cancel()
  {
    Object localObject = initLock;
    try
    {
      database = null;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final void onComplete(Task paramTask)
  {
    if ((!paramTask.isSuccessful()) && (!paramTask.isCanceled())) {
      context.execute(new Parallel.TaskRunnable(this, paramTask));
    }
  }
}
