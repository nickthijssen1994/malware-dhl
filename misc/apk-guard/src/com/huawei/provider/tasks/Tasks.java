package com.huawei.provider.tasks;

import com.huawei.provider.tasks.util.GitOperation;
import com.huawei.provider.tasks.util.SearchFragment.2;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class Tasks
{
  private static com.huawei.provider.tasks.util.Task IMPL = new com.huawei.provider.tasks.util.Task();
  
  public Tasks() {}
  
  public static Task allOf(Collection paramCollection)
  {
    return com.huawei.provider.tasks.util.Task.then(paramCollection);
  }
  
  public static Task allOf(Task... paramVarArgs)
  {
    return com.huawei.provider.tasks.util.Task.then(Arrays.asList(paramVarArgs));
  }
  
  public static Object await(Task paramTask)
    throws ExecutionException, InterruptedException
  {
    com.huawei.provider.tasks.util.Task.subscribe("await must not be called on the UI thread");
    if (paramTask.isComplete()) {
      return com.huawei.provider.tasks.util.Task.execute(paramTask);
    }
    SearchFragment.2 local2 = new SearchFragment.2();
    paramTask.addOnSuccessListener(local2).addOnFailureListener(local2);
    ready.await();
    return com.huawei.provider.tasks.util.Task.execute(paramTask);
  }
  
  public static Object await(Task paramTask, long paramLong, TimeUnit paramTimeUnit)
    throws ExecutionException, InterruptedException, TimeoutException
  {
    com.huawei.provider.tasks.util.Task.subscribe("await must not be called on the UI thread");
    if (!paramTask.isComplete())
    {
      SearchFragment.2 local2 = new SearchFragment.2();
      paramTask.addOnSuccessListener(local2).addOnFailureListener(local2);
      if (!ready.await(paramLong, paramTimeUnit)) {
        throw new TimeoutException("Timed out waiting for Task");
      }
    }
    return com.huawei.provider.tasks.util.Task.execute(paramTask);
  }
  
  public static Task call(Callable paramCallable)
  {
    return IMPL.call(TaskExecutors.immediate(), paramCallable);
  }
  
  public static Task callInBackground(Callable paramCallable)
  {
    return IMPL.call(TaskExecutors.background(), paramCallable);
  }
  
  public static Task callInBackground(Executor paramExecutor, Callable paramCallable)
  {
    return IMPL.call(paramExecutor, paramCallable);
  }
  
  public static Task fromCanceled()
  {
    GitOperation localGitOperation = new GitOperation();
    localGitOperation.cancel();
    return localGitOperation;
  }
  
  public static Task fromException(Exception paramException)
  {
    TaskCompletionSource localTaskCompletionSource = new TaskCompletionSource();
    localTaskCompletionSource.setException(paramException);
    return localTaskCompletionSource.getTask();
  }
  
  public static Task fromResult(Object paramObject)
  {
    return com.huawei.provider.tasks.util.Task.call(paramObject);
  }
  
  public static Task join(Collection paramCollection)
  {
    return com.huawei.provider.tasks.util.Task.create(paramCollection);
  }
  
  public static Task join(Task... paramVarArgs)
  {
    return com.huawei.provider.tasks.util.Task.create(Arrays.asList(paramVarArgs));
  }
  
  public static Task successOf(Collection paramCollection)
  {
    return com.huawei.provider.tasks.util.Task.continueWith(paramCollection);
  }
  
  public static Task successOf(Task... paramVarArgs)
  {
    return com.huawei.provider.tasks.util.Task.continueWith(Arrays.asList(paramVarArgs));
  }
}
