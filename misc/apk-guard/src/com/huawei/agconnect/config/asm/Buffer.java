package com.huawei.agconnect.config.asm;

import android.content.Context;
import com.huawei.agconnect.config.AGConnectServicesConfig;
import com.huawei.agconnect.config.LazyInputStream;
import java.io.InputStream;

public class Buffer
  extends AGConnectServicesConfig
{
  private final Object buffer = new Object();
  private final String e;
  private LazyInputStream index;
  private volatile l offset;
  private final Context s;
  
  public Buffer(Context paramContext, String paramString)
  {
    s = paramContext;
    e = paramString;
  }
  
  private static String a(String paramString)
  {
    int k = paramString.length();
    int j = 0;
    int i = 0;
    if (k > 0) {
      for (;;)
      {
        j = i;
        if (paramString.charAt(i) != '/') {
          break;
        }
        i += 1;
      }
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append('/');
    localStringBuilder.append(paramString.substring(j));
    return localStringBuilder.toString();
  }
  
  private static LazyInputStream write(Context paramContext, InputStream paramInputStream)
  {
    return new ByteVector(paramContext, paramInputStream);
  }
  
  public boolean getBoolean(String paramString)
  {
    return getBoolean(paramString, false);
  }
  
  public boolean getBoolean(String paramString, boolean paramBoolean)
  {
    return Boolean.parseBoolean(getString(paramString, String.valueOf(paramBoolean)));
  }
  
  public int getInt(String paramString)
  {
    return getInt(paramString, 0);
  }
  
  public int getInt(String paramString, int paramInt)
  {
    try
    {
      int i = Integer.parseInt(getString(paramString, String.valueOf(paramInt)));
      return i;
    }
    catch (NumberFormatException paramString) {}
    return paramInt;
  }
  
  public String getString(String paramString)
  {
    return getString(paramString, null);
  }
  
  public String getString(String paramString1, String paramString2)
  {
    if (paramString1 != null)
    {
      if (offset == null)
      {
        Object localObject = buffer;
        try
        {
          if (offset == null) {
            if (index != null)
            {
              offset = new b(index.loadInputStream());
              index.close();
              index = null;
            }
            else
            {
              offset = new o(s, e);
            }
          }
        }
        catch (Throwable paramString1)
        {
          throw paramString1;
        }
      }
      paramString1 = a(paramString1);
      return offset.a(paramString1, paramString2);
    }
    throw new NullPointerException("path must not be null.");
  }
  
  public void overlayWith(LazyInputStream paramLazyInputStream)
  {
    index = paramLazyInputStream;
  }
  
  public void overlayWith(InputStream paramInputStream)
  {
    overlayWith(write(s, paramInputStream));
  }
}
