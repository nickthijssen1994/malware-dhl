package com.huawei.agconnect.config.asm;

import android.content.Context;
import android.util.Log;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

class o
  extends e
{
  private SecretKey a;
  private final Map<String, String> b = new HashMap();
  private final Object c = new Object();
  
  o(Context paramContext, String paramString)
  {
    super(paramContext, paramString);
    try
    {
      paramContext = a("/AD91D45E3E72DB6989DDCB13287E75061FABCB933D886E6C6ABEF0939B577138");
      paramString = a("/B314B3BF013DF5AC4134E880AF3D2B7C9FFBE8F0305EAC1C898145E2BCF1F21C");
      String str1 = a("/C767BD8FDF53E53D059BE95B09E2A71056F5F180AECC62836B287ACA5793421B");
      String str2 = a("/DCB3E6D4C2CF80F30D89CDBC412C964DA8381BB84668769391FBCC3E329AD0FD");
      if ((paramContext == null) || (paramString == null) || (str1 == null) || (str2 == null)) {
        return;
      }
      paramContext = Label.getKey(Attribute.getString(paramContext), Attribute.getString(paramString), Attribute.getString(str1), Attribute.getString(str2));
      a = paramContext;
      return;
    }
    catch (NoSuchAlgorithmException paramContext)
    {
      for (;;) {}
    }
    catch (InvalidKeySpecException paramContext)
    {
      for (;;) {}
    }
    Log.e("SecurityResourcesReader", "Exception when reading the 'K&I' for 'Config'.");
    a = null;
    return;
  }
  
  private String a(String paramString)
  {
    return super.a(paramString, null);
  }
  
  private static byte[] decrypt(SecretKey paramSecretKey, byte[] paramArrayOfByte)
    throws GeneralSecurityException
  {
    if ((paramSecretKey != null) && (paramArrayOfByte != null))
    {
      byte[] arrayOfByte = Arrays.copyOfRange(paramArrayOfByte, 1, 17);
      Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
      localCipher.init(2, paramSecretKey, new IvParameterSpec(arrayOfByte));
      return localCipher.doFinal(paramArrayOfByte, arrayOfByte.length + 1, paramArrayOfByte.length - arrayOfByte.length - 1);
    }
    throw new NullPointerException("key or cipherText must not be null.");
  }
  
  public String a(String paramString1, String paramString2)
  {
    if (a == null)
    {
      Log.e("SecurityResourcesReader", "KEY is null return def directly");
      return paramString2;
    }
    localObject1 = c;
    try
    {
      str = (String)b.get(paramString1);
      if (str != null) {
        return str;
      }
      str = a(paramString1);
      if (str == null) {
        return paramString2;
      }
      localObject2 = a;
    }
    catch (Throwable paramString1)
    {
      String str;
      Object localObject2;
      label114:
      throw paramString1;
    }
    try
    {
      str = new String(decrypt((SecretKey)localObject2, Attribute.getString(str)), "UTF-8");
      localObject2 = b;
      ((Map)localObject2).put(paramString1, str);
      return str;
    }
    catch (GeneralSecurityException paramString1)
    {
      break label114;
    }
    catch (UnsupportedEncodingException paramString1)
    {
      break label114;
    }
    Log.e("SecurityResourcesReader", "Exception when reading the 'V' for 'Config'.");
    return paramString2;
  }
}
