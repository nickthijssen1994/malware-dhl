package com.huawei.agconnect.core.spi;

import android.content.Context;
import android.util.Log;
import com.huawei.agconnect.AGConnectInstance;
import com.huawei.agconnect.core.Service;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public final class LongMap
{
  private Map<Class<?>, Service> keys = new HashMap();
  private Map<Class<?>, Object> values = new HashMap();
  
  LongMap(List paramList)
  {
    if (paramList == null) {
      return;
    }
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      Service localService = (Service)paramList.next();
      keys.put(localService.getInterface(), localService);
    }
  }
  
  private static Constructor newInstance(Class paramClass, Class... paramVarArgs)
  {
    paramClass = paramClass.getDeclaredConstructors();
    int m = paramClass.length;
    int j = 0;
    int k;
    for (int i = 0; j < m; i = k)
    {
      Constructor localConstructor = paramClass[j];
      Class[] arrayOfClass = localConstructor.getParameterTypes();
      k = i;
      if (arrayOfClass.length == paramVarArgs.length)
      {
        k = 0;
        while (k < paramVarArgs.length)
        {
          if (arrayOfClass[k] == paramVarArgs[k]) {
            i = 1;
          } else {
            i = 0;
          }
          k += 1;
        }
        k = i;
        if (i != 0) {
          return localConstructor;
        }
      }
      j += 1;
    }
    return null;
  }
  
  private Object parse(AGConnectInstance paramAGConnectInstance, Service paramService)
  {
    paramService = paramService.getType();
    if (paramService == null) {
      return null;
    }
    try
    {
      Constructor localConstructor = newInstance(paramService, new Class[] { Context.class, AGConnectInstance.class });
      if (localConstructor != null)
      {
        paramService = paramAGConnectInstance.getContext();
        paramAGConnectInstance = localConstructor.newInstance(new Object[] { paramService, paramAGConnectInstance });
        return paramAGConnectInstance;
      }
      localConstructor = newInstance(paramService, new Class[] { Context.class });
      if (localConstructor != null)
      {
        paramAGConnectInstance = paramAGConnectInstance.getContext();
        paramAGConnectInstance = localConstructor.newInstance(new Object[] { paramAGConnectInstance });
        return paramAGConnectInstance;
      }
      paramAGConnectInstance = paramService.newInstance();
      return paramAGConnectInstance;
    }
    catch (IllegalAccessException paramService)
    {
      paramAGConnectInstance = new StringBuilder();
      paramAGConnectInstance.append("Instantiate service exception ");
      paramService = paramService.getLocalizedMessage();
    }
    catch (InvocationTargetException paramService)
    {
      paramAGConnectInstance = new StringBuilder();
      paramAGConnectInstance.append("Instantiate service exception ");
      paramService = paramService.getLocalizedMessage();
    }
    catch (InstantiationException paramService)
    {
      paramAGConnectInstance = new StringBuilder();
      paramAGConnectInstance.append("Instantiate service exception ");
      paramService = paramService.getLocalizedMessage();
    }
    paramAGConnectInstance.append(paramService);
    Log.e("ServiceRepository", paramAGConnectInstance.toString());
    return null;
  }
  
  public Object get(AGConnectInstance paramAGConnectInstance, Class paramClass)
  {
    Service localService = (Service)keys.get(paramClass);
    if (localService == null) {
      return null;
    }
    if (localService.isSingleton())
    {
      Object localObject = values.get(paramClass);
      if (localObject != null) {
        return localObject;
      }
    }
    paramAGConnectInstance = parse(paramAGConnectInstance, localService);
    if ((paramAGConnectInstance != null) && (localService.isSingleton())) {
      values.put(paramClass, paramAGConnectInstance);
    }
    return paramAGConnectInstance;
  }
}
