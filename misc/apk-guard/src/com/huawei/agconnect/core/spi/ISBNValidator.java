package com.huawei.agconnect.core.spi;

import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.BaseBundle;
import android.os.Bundle;
import android.util.Log;
import com.huawei.agconnect.core.ServiceDiscovery;
import com.huawei.agconnect.core.ServiceRegistrar;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class ISBNValidator
{
  private Context context;
  
  ISBNValidator(Context paramContext)
  {
    context = paramContext;
  }
  
  private List create()
  {
    ArrayList localArrayList = new ArrayList();
    Bundle localBundle = getInstance();
    if (localBundle == null) {
      return localArrayList;
    }
    HashMap localHashMap = new HashMap(10);
    Iterator localIterator = localBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      if ("com.huawei.agconnect.core.ServiceRegistrar".equals(localBundle.getString(str)))
      {
        Object localObject2 = str.split(":");
        if (localObject2.length == 2)
        {
          str = localObject2[0];
          localObject2 = localObject2[1];
          try
          {
            localHashMap.put(str, Integer.valueOf((String)localObject2));
          }
          catch (NumberFormatException localNumberFormatException)
          {
            localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append("registrar configuration format error:");
            localObject1 = localNumberFormatException.getMessage();
            break label181;
          }
        }
        else if (localObject2.length == 1)
        {
          localHashMap.put(localObject2[0], Integer.valueOf(1000));
        }
        else
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("registrar configuration error, ");
          label181:
          ((StringBuilder)localObject2).append((String)localObject1);
          Log.e("ServiceRegistrarParser", ((StringBuilder)localObject2).toString());
        }
      }
    }
    Object localObject1 = new ArrayList(localHashMap.entrySet());
    Collections.sort((List)localObject1, new BeanSerializer.1(null));
    localObject1 = ((List)localObject1).iterator();
    while (((Iterator)localObject1).hasNext()) {
      localArrayList.add(((Map.Entry)((Iterator)localObject1).next()).getKey());
    }
    return localArrayList;
  }
  
  private Bundle getInstance()
  {
    Object localObject1 = context.getPackageManager();
    if (localObject1 == null) {
      return null;
    }
    Object localObject2 = context;
    try
    {
      localObject1 = ((PackageManager)localObject1).getServiceInfo(new ComponentName((Context)localObject2, ServiceDiscovery.class), 128);
      if (localObject1 == null)
      {
        Log.e("ServiceRegistrarParser", "Can not found ServiceDiscovery service.");
        return null;
      }
      return metaData;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("get ServiceDiscovery exception.");
      ((StringBuilder)localObject2).append(localNameNotFoundException.getLocalizedMessage());
      Log.e("ServiceRegistrarParser", ((StringBuilder)localObject2).toString());
    }
    return null;
  }
  
  private ServiceRegistrar getInstance(String paramString)
  {
    String str3;
    try
    {
      Class localClass = Class.forName(paramString);
      boolean bool = ServiceRegistrar.class.isAssignableFrom(localClass);
      if (!bool)
      {
        paramString = new StringBuilder();
        paramString.append(localClass);
        paramString.append(" must extends from ServiceRegistrar.");
        Log.e("ServiceRegistrarParser", paramString.toString());
        return null;
      }
      paramString = Class.forName(paramString).newInstance();
      return (ServiceRegistrar)paramString;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      paramString = new StringBuilder();
      paramString.append("instantiate service class exception ");
      String str1 = localIllegalAccessException.getLocalizedMessage();
    }
    catch (InstantiationException localInstantiationException)
    {
      paramString = new StringBuilder();
      paramString.append("instantiate service class exception ");
      String str2 = localInstantiationException.getLocalizedMessage();
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      paramString = new StringBuilder();
      paramString.append("Can not found service class, ");
      str3 = localClassNotFoundException.getMessage();
    }
    paramString.append(str3);
    Log.e("ServiceRegistrarParser", paramString.toString());
    return null;
  }
  
  public List validate()
  {
    Log.i("ServiceRegistrarParser", "getServices");
    Object localObject1 = create();
    ArrayList localArrayList = new ArrayList();
    localObject1 = ((List)localObject1).iterator();
    while (((Iterator)localObject1).hasNext())
    {
      Object localObject2 = getInstance((String)((Iterator)localObject1).next());
      if (localObject2 != null)
      {
        ((ServiceRegistrar)localObject2).initialize(context);
        localObject2 = ((ServiceRegistrar)localObject2).getServices(context);
        if (localObject2 != null) {
          localArrayList.addAll((Collection)localObject2);
        }
      }
    }
    localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("services:");
    ((StringBuilder)localObject1).append(Integer.valueOf(localArrayList.size()));
    Log.i("ServiceRegistrarParser", ((StringBuilder)localObject1).toString());
    return localArrayList;
  }
}
