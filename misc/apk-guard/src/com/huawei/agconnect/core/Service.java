package com.huawei.agconnect.core;

import com.huawei.agconnect.annotation.Singleton;
import java.lang.reflect.Modifier;

public class Service
{
  private boolean connected;
  private Class<?> mInterface;
  private Class<?> type;
  
  private Service(Class paramClass1, Class paramClass2)
  {
    mInterface = paramClass1;
    type = paramClass2;
  }
  
  public static Builder builder(Class paramClass)
  {
    return new Builder(paramClass, paramClass, null);
  }
  
  public static Builder builder(Class paramClass1, Class paramClass2)
  {
    return new Builder(paramClass1, paramClass2, null);
  }
  
  public Class getInterface()
  {
    return mInterface;
  }
  
  public Class getType()
  {
    return type;
  }
  
  public boolean isSingleton()
  {
    return connected;
  }
  
  public static class Builder
  {
    Class<?> baseUrl;
    private boolean params;
    Class<?> restUrl;
    
    private Builder(Class paramClass1, Class paramClass2)
    {
      if (paramClass1 != null)
      {
        if (paramClass2 != null)
        {
          if ((!paramClass2.isInterface()) && (Modifier.isPublic(paramClass2.getModifiers())))
          {
            baseUrl = paramClass1;
            restUrl = paramClass2;
            params = paramClass2.isAnnotationPresent(Singleton.class);
            return;
          }
          throw new IllegalArgumentException("the clazz parameter must be interface type and public");
        }
        throw new IllegalArgumentException("the clazz parameter cannot be NULL");
      }
      throw new IllegalArgumentException("the interface parameter cannot be NULL");
    }
    
    public Service build()
    {
      Service localService = new Service(baseUrl, restUrl, null);
      Service.init(localService, params);
      return localService;
    }
    
    public Builder isSingleton(boolean paramBoolean)
    {
      params = paramBoolean;
      return this;
    }
  }
}
