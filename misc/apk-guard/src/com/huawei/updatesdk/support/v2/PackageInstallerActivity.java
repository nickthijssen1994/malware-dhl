package com.huawei.updatesdk.support.v2;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.text.TextUtils;
import com.huawei.updatesdk.fileprovider.UpdateSdkFileProvider;
import com.huawei.updatesdk.org.android.asm.util.Label;
import com.huawei.updatesdk.org.android.remote.calendar.widget.Log;
import com.huawei.updatesdk.org.shared.log.d;
import com.huawei.updatesdk.text.view.Item;
import java.io.File;

public class PackageInstallerActivity
  extends Activity
{
  public PackageInstallerActivity() {}
  
  private Intent start(Context paramContext, String paramString)
  {
    Intent localIntent;
    if ((!TextUtils.isEmpty(paramString)) && (!paramString.contains("../")) && (!paramString.contains("..")) && (!paramString.contains("%00")) && (!paramString.contains(".\\.\\")) && (!paramString.contains("./")))
    {
      localIntent = new Intent();
      localIntent.setAction("android.intent.action.INSTALL_PACKAGE");
      if (Build.VERSION.SDK_INT >= 24)
      {
        localIntent.addFlags(1);
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(paramContext.getApplicationContext().getPackageName());
        localStringBuilder.append(".updateSdk.fileProvider");
        paramString = UpdateSdkFileProvider.getUriForFile(paramContext, localStringBuilder.toString(), new File(paramString));
      }
      else
      {
        paramString = Uri.fromFile(new File(paramString));
      }
      localIntent.setData(paramString);
      if (!(paramContext instanceof Activity))
      {
        localIntent.addFlags(268435456);
        return localIntent;
      }
    }
    else
    {
      throw new IllegalArgumentException("getNomalInstallIntent: Not a standard path");
    }
    return localIntent;
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (1000 == paramInt1) {
      if (paramInt2 == 0)
      {
        Item.a(7, 0);
      }
      else
      {
        paramInt1 = 55532;
        if (paramIntent != null) {
          paramInt1 = d.a(paramIntent).d("android.intent.extra.INSTALL_RESULT", 55532);
        }
        if ((paramInt1 != 0) && (paramInt1 != 1)) {
          Item.a(4, paramInt1);
        }
      }
    }
    finish();
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    requestWindowFeature(1);
    Label.a().a(getWindow());
    super.onCreate(paramBundle);
    paramBundle = getIntent();
    if (paramBundle == null) {
      finish();
    }
    Object localObject;
    for (paramBundle = "PackageInstallerActivity error intent";; paramBundle = "PackageInstallerActivity can not find filePath.")
    {
      Log.append("PackageInstallerActivity", paramBundle);
      return;
      localObject = d.a(paramBundle);
      paramBundle = ((d)localObject).a("install_path");
      localObject = ((d)localObject).a("install_packagename");
      if (!TextUtils.isEmpty(paramBundle)) {
        break;
      }
      Item.a(4, -3);
      finish();
    }
    try
    {
      localIntent = start(this, paramBundle);
      localIntent.putExtra("android.intent.extra.NOT_UNKNOWN_SOURCE", true);
      localIntent.putExtra("android.intent.extra.RETURN_RESULT", true);
    }
    catch (Exception paramBundle)
    {
      Intent localIntent;
      StringBuilder localStringBuilder;
      label185:
      for (;;) {}
    }
    try
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(" onCreate filePath:");
      localStringBuilder.append(paramBundle);
      localStringBuilder.append(",packageName:");
      localStringBuilder.append((String)localObject);
      localStringBuilder.append(",taskId:");
      localStringBuilder.append(getTaskId());
      Log.d("PackageInstallerActivity", localStringBuilder.toString());
      startActivityForResult(localIntent, 1000);
      return;
    }
    catch (Exception paramBundle)
    {
      break label185;
    }
    Log.append("PackageInstallerActivity", "can not start install action");
    Item.a(4, -2);
    finish();
  }
  
  protected void onDestroy()
  {
    finishActivity(1000);
    super.onDestroy();
  }
}
