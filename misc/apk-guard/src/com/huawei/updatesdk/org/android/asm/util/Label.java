package com.huawei.updatesdk.org.android.asm.util;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.FeatureInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.LocaleList;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.GrsClient;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

public class Label
{
  private static String b = null;
  private static Label c = new Label();
  private int a = 0;
  private int h = 0;
  
  private Label()
  {
    if (getInt("ro.maple.enable", 0) == 1) {
      a = 1;
    }
    h = getInt("ro.build.version.ark", 0);
  }
  
  public static Label a()
  {
    return c;
  }
  
  public static String a(Context paramContext, String paramString)
  {
    paramString = toString(paramContext, paramString);
    int i = 0;
    int k;
    for (int j = 0; (i < paramString.length()) && (j < 3); j = k)
    {
      k = j;
      if (paramString.charAt(i) == '.') {
        k = j + 1;
      }
      i += 1;
    }
    paramContext = paramString;
    if (3 == j) {
      paramContext = paramString.substring(0, i - 1);
    }
    return paramContext;
  }
  
  private static String a(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    try
    {
      paramString = paramString.substring(0, paramString.indexOf('.'));
      return paramString;
    }
    catch (Exception paramString)
    {
      com.huawei.updatesdk.org.android.remote.calendar.widget.Log.append("DeviceUtil", paramString.toString());
    }
    return null;
  }
  
  public static List a(Context paramContext)
  {
    ArrayList localArrayList = new ArrayList();
    if (Build.VERSION.SDK_INT >= 24)
    {
      paramContext = paramContext.getResources().getConfiguration().getLocales();
      int i = 0;
      while (i < paramContext.size())
      {
        String str = paramContext.get(i).getLanguage();
        if ((!TextUtils.isEmpty(str)) && (!localArrayList.contains(str))) {
          localArrayList.add(str);
        }
        i += 1;
      }
    }
    localArrayList.add(getResourcesgetConfigurationlocale.getLanguage());
    return localArrayList;
  }
  
  public static List a(List paramList, String[] paramArrayOfString)
  {
    ArrayList localArrayList = new ArrayList();
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      String str = (String)paramList.next();
      if (!a(str, paramArrayOfString)) {
        localArrayList.add(str);
      }
    }
    return localArrayList;
  }
  
  static boolean a(String paramString, String[] paramArrayOfString)
  {
    int i3 = paramArrayOfString.length;
    int j = 0;
    int m = 0;
    int k = 0;
    int i2;
    for (int i = 0; j < i3; i = i2)
    {
      String str = paramArrayOfString[j];
      int n;
      int i1;
      if (str.startsWith("config."))
      {
        n = 1;
        i1 = k;
      }
      else
      {
        n = m;
        i1 = k;
        if (!str.contains(".config."))
        {
          i1 = k + 1;
          n = m;
        }
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("config.");
      localStringBuilder.append(paramString);
      i2 = i;
      if (str.endsWith(localStringBuilder.toString())) {
        i2 = i + 1;
      }
      j += 1;
      m = n;
      k = i1;
    }
    return m + k == i;
  }
  
  static String b(Context paramContext)
  {
    if (b == null) {
      b = com.huawei.updatesdk.org.android.asm.ByteVector.a(getFeatures(paramContext), ",");
    }
    return b;
  }
  
  public static String b(Context paramContext, String paramString)
  {
    Object localObject2 = com.huawei.updatesdk.service.otaupdate.Frame.get().b();
    if (TextUtils.isEmpty((CharSequence)localObject2)) {}
    for (paramContext = "UpdateSDK accoutZone is empty, so url is default";; paramContext = "UpdateSDK Get url is default url")
    {
      android.util.Log.i("DeviceUtil", paramContext);
      return paramString;
      Object localObject1 = null;
      try
      {
        GrsBaseInfo localGrsBaseInfo = new GrsBaseInfo();
        localGrsBaseInfo.setSerCountry((String)localObject2);
        localObject2 = new GrsClient(paramContext, localGrsBaseInfo);
        boolean bool = com.huawei.updatesdk.service.otaupdate.Frame.get().a();
        if (bool) {
          paramContext = "com.huawei.apptouch.updatesdk";
        } else {
          paramContext = "com.huawei.updatesdk";
        }
        paramContext = ((GrsClient)localObject2).synGetGrsUrl(paramContext, "ROOT");
      }
      catch (Throwable paramContext)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("UpdateSDK Get url from GRS_SDK error: ");
        ((StringBuilder)localObject2).append(paramContext.toString());
        android.util.Log.w("DeviceUtil", ((StringBuilder)localObject2).toString());
        paramContext = localObject1;
      }
      if (!TextUtils.isEmpty(paramContext)) {
        break;
      }
    }
    paramString = new StringBuilder();
    paramString.append("UpdateSDK Get url from GRS_SDK Success!");
    paramString.append(a(paramContext));
    android.util.Log.i("DeviceUtil", paramString.toString());
    return paramContext;
  }
  
  public static String get()
  {
    try
    {
      Object localObject = Class.forName("com.huawei.system.BuildEx").getField("DISPLAY").get(null);
      if (localObject == null)
      {
        localObject = Build.DISPLAY;
        return localObject;
      }
      localObject = localObject.toString();
      return localObject;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;) {}
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      for (;;) {}
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      for (;;) {}
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    return Build.DISPLAY;
    return Build.DISPLAY;
    return Build.DISPLAY;
    return Build.DISPLAY;
  }
  
  public static String get(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = (String)Class.forName("android.os.SystemProperties").getMethod("get", new Class[] { String.class, String.class }).invoke(null, new Object[] { paramString1, paramString2 });
      return paramString1;
    }
    catch (Throwable paramString1)
    {
      com.huawei.updatesdk.org.android.remote.calendar.widget.Log.println("DeviceUtil", "Exception while getting system property: ", paramString1);
    }
    return paramString2;
  }
  
  private static List getFeatures(Context paramContext)
  {
    ArrayList localArrayList = new ArrayList();
    paramContext = paramContext.getPackageManager().getSystemAvailableFeatures();
    if (paramContext != null)
    {
      int j = paramContext.length;
      int i = 0;
      while (i < j)
      {
        String str = name;
        if (str != null) {
          localArrayList.add(com.huawei.updatesdk.org.android.asm.Frame.get(str));
        }
        i += 1;
      }
    }
    return localArrayList;
  }
  
  private static DisplayMetrics getInstance(Context paramContext)
  {
    paramContext = paramContext.getSystemService("window");
    if ((paramContext instanceof WindowManager)) {
      paramContext = (WindowManager)paramContext;
    } else {
      paramContext = null;
    }
    if (paramContext != null)
    {
      paramContext = paramContext.getDefaultDisplay();
      if (paramContext != null)
      {
        DisplayMetrics localDisplayMetrics = new DisplayMetrics();
        paramContext.getMetrics(localDisplayMetrics);
        return localDisplayMetrics;
      }
    }
    return null;
  }
  
  public static int getInt(String paramString, int paramInt)
  {
    try
    {
      int i = ((Integer)Class.forName("android.os.SystemProperties").getMethod("getInt", new Class[] { String.class, Integer.TYPE }).invoke(null, new Object[] { paramString, Integer.valueOf(paramInt) })).intValue();
      return i;
    }
    catch (Throwable paramString)
    {
      com.huawei.updatesdk.org.android.remote.calendar.widget.Log.println("DeviceUtil", "Exception while getting system property: ", paramString);
    }
    return paramInt;
  }
  
  public static String getName(Context paramContext)
  {
    paramContext = getInstance(paramContext);
    if (paramContext != null) {
      return String.valueOf(densityDpi);
    }
    return "";
  }
  
  public static String[] getString()
  {
    String[] arrayOfString1;
    if (Build.VERSION.SDK_INT >= 21)
    {
      String[] arrayOfString2 = Build.SUPPORTED_ABIS;
      arrayOfString1 = arrayOfString2;
      if (arrayOfString2 == null) {
        return new String[0];
      }
    }
    else
    {
      arrayOfString1 = new String[1];
      arrayOfString1[0] = Build.CPU_ABI;
    }
    return arrayOfString1;
  }
  
  public static String getVersion(Context paramContext)
  {
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 16);
      paramContext = versionName;
      localStringBuilder.append(paramContext);
      localStringBuilder.append("");
      paramContext = localStringBuilder.toString();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static int getVersionCode(Context paramContext)
  {
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 16);
      int i = versionCode;
      localStringBuilder.append(i);
      localStringBuilder.append("");
      i = Integer.parseInt(localStringBuilder.toString());
      return i;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    return 1;
  }
  
  public static boolean load(Context paramContext)
  {
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext.getPackageInfo("com.google.android.gsf.login", 16);
      paramContext.getPackageInfo("com.google.android.gsf", 16);
      paramContext = paramContext.getPackageInfo("com.google.android.gms", 16);
      return (applicationInfo.flags & 0x1) != 0;
    }
    catch (Exception paramContext)
    {
      com.huawei.updatesdk.org.android.remote.calendar.widget.Log.append("DeviceUtil", paramContext.getMessage());
    }
    return false;
  }
  
  public static String parse()
  {
    String str2 = "en";
    Object localObject1 = "";
    String str1 = "US";
    Locale localLocale = Locale.getDefault();
    Object localObject2 = localObject1;
    if (localLocale != null)
    {
      str2 = localLocale.getLanguage();
      if (Build.VERSION.SDK_INT >= 21) {
        localObject1 = localLocale.getScript();
      }
      str1 = localLocale.getCountry();
      localObject2 = localObject1;
    }
    if (TextUtils.isEmpty(localObject2))
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(str2);
      ((StringBuilder)localObject1).append("_");
      ((StringBuilder)localObject1).append(str1);
      return ((StringBuilder)localObject1).toString();
    }
    localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append(str2);
    ((StringBuilder)localObject1).append("_");
    ((StringBuilder)localObject1).append(localObject2);
    ((StringBuilder)localObject1).append("_");
    ((StringBuilder)localObject1).append(str1);
    return ((StringBuilder)localObject1).toString();
  }
  
  public static boolean reset()
  {
    return ("huawei".equalsIgnoreCase(Build.BRAND)) || ("huawei".equalsIgnoreCase(Build.MANUFACTURER));
  }
  
  public static String toString(Context paramContext)
  {
    paramContext = getInstance(paramContext);
    if (paramContext != null)
    {
      int i = widthPixels;
      int j = heightPixels;
      paramContext = new StringBuilder();
      paramContext.append(String.valueOf(i));
      paramContext.append("_");
      paramContext.append(String.valueOf(j));
      return paramContext.toString();
    }
    return "";
  }
  
  public static String toString(Context paramContext, String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "com.huawei.appmarket";
    }
    try
    {
      paramString = new StringBuilder();
      paramContext = paramContext.getPackageManager().getPackageInfo(str, 16);
      paramContext = versionName;
      paramString.append(paramContext);
      paramString.append("");
      paramContext = paramString.toString();
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  public void a(Window paramWindow)
  {
    if (com.huawei.updatesdk.text.hyphenation.ByteVector.putByte().b() >= 21)
    {
      if (paramWindow == null) {
        return;
      }
      Object localObject = paramWindow.getAttributes();
      try
      {
        paramWindow = Class.forName("com.huawei.android.view.WindowManagerEx$LayoutParamsEx");
        localObject = paramWindow.getConstructor(new Class[] { WindowManager.LayoutParams.class }).newInstance(new Object[] { localObject });
      }
      catch (Throwable paramWindow)
      {
        label88:
        for (;;) {}
      }
      try
      {
        paramWindow.getMethod("setDisplaySideMode", new Class[] { Integer.TYPE }).invoke(localObject, new Object[] { Integer.valueOf(1) });
        return;
      }
      catch (Throwable paramWindow)
      {
        break label88;
      }
      com.huawei.updatesdk.org.android.remote.calendar.widget.Log.append("DeviceUtil", "setWindowDisplaySideMode: exception");
      return;
    }
  }
  
  public int b()
  {
    return a;
  }
  
  public int getCount()
  {
    return h;
  }
}
