package com.huawei.updatesdk.org.android.book;

import android.content.Context;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

public class CustomSSLSocketFactory
  extends SSLSocketFactory
{
  private static volatile CustomSSLSocketFactory sSmackAndroid;
  private SSLContext sslContext = null;
  
  private CustomSSLSocketFactory(Context paramContext)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, KeyManagementException, IllegalArgumentException
  {
    paramContext = new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(paramContext);
    sslContext.init(null, (TrustManager[])new X509TrustManager[] { paramContext }, null);
  }
  
  public static CustomSSLSocketFactory init(Context paramContext)
    throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, IllegalAccessException, KeyManagementException, IllegalArgumentException
  {
    if (sSmackAndroid == null) {
      try
      {
        if (sSmackAndroid == null) {
          sSmackAndroid = new CustomSSLSocketFactory(paramContext);
        }
      }
      catch (Throwable paramContext)
      {
        throw paramContext;
      }
    }
    return sSmackAndroid;
  }
  
  public Socket createSocket(String paramString, int paramInt)
    throws IOException
  {
    paramString = sslContext.getSocketFactory().createSocket(paramString, paramInt);
    if ((paramString instanceof SSLSocket)) {
      TlsSniSocketFactory.createSocket((SSLSocket)paramString);
    }
    return paramString;
  }
  
  public Socket createSocket(String paramString, int paramInt1, InetAddress paramInetAddress, int paramInt2)
    throws IOException, UnknownHostException
  {
    return createSocket(paramString, paramInt1);
  }
  
  public Socket createSocket(InetAddress paramInetAddress, int paramInt)
    throws IOException
  {
    return createSocket(paramInetAddress.getHostAddress(), paramInt);
  }
  
  public Socket createSocket(InetAddress paramInetAddress1, int paramInt1, InetAddress paramInetAddress2, int paramInt2)
    throws IOException
  {
    return createSocket(paramInetAddress1.getHostAddress(), paramInt1);
  }
  
  public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
    throws IOException
  {
    paramSocket = sslContext.getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
    if ((paramSocket instanceof SSLSocket)) {
      TlsSniSocketFactory.createSocket((SSLSocket)paramSocket);
    }
    return paramSocket;
  }
  
  public String[] getDefaultCipherSuites()
  {
    return new String[0];
  }
  
  public String[] getSupportedCipherSuites()
  {
    return new String[0];
  }
}
