package com.huawei.updatesdk.org.android.asm;

import com.huawei.updatesdk.org.android.remote.calendar.widget.Log;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public abstract class TypeToken
{
  private static final String type = "f";
  
  public static Class get(Field paramField)
  {
    if (Map.class.isAssignableFrom(paramField.getType())) {}
    for (int i = 1;; i = 0)
    {
      return get(paramField, i);
      if (!List.class.isAssignableFrom(paramField.getType())) {
        break;
      }
    }
    return null;
  }
  
  private static Class get(Field paramField, int paramInt)
  {
    paramField = paramField.getGenericType();
    if ((paramField instanceof ParameterizedType))
    {
      paramField = ((ParameterizedType)paramField).getActualTypeArguments();
      if ((paramField != null) && (paramField.length > paramInt))
      {
        if ((paramField[paramInt] instanceof Class)) {
          return (Class)paramField[paramInt];
        }
        paramField = paramField[paramInt];
        try
        {
          paramField = paramField.toString();
          int i = paramField.indexOf("class ");
          paramInt = i;
          if (i < 0) {
            paramInt = 0;
          }
          int j = paramField.indexOf("<");
          i = j;
          if (j < 0) {
            i = paramField.length();
          }
          paramField = Class.forName(paramField.substring(paramInt, i));
          return paramField;
        }
        catch (ClassNotFoundException paramField)
        {
          String str = type;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("getType exception!");
          localStringBuilder.append(paramField.getMessage());
          Log.append(str, localStringBuilder.toString());
        }
      }
    }
    return null;
  }
  
  public static Field[] get(Class paramClass)
  {
    if (paramClass.getSuperclass() != null) {
      localObject = get(paramClass.getSuperclass());
    } else {
      localObject = null;
    }
    Field[] arrayOfField2 = paramClass.getDeclaredFields();
    Field[] arrayOfField1 = arrayOfField2;
    int i = 0;
    paramClass = arrayOfField1;
    if (localObject != null)
    {
      paramClass = arrayOfField1;
      if (localObject.length > 0)
      {
        paramClass = new Field[arrayOfField2.length + localObject.length];
        System.arraycopy(localObject, 0, paramClass, 0, localObject.length);
        System.arraycopy(arrayOfField2, 0, paramClass, localObject.length, arrayOfField2.length);
      }
    }
    Object localObject = new ArrayList();
    int j = paramClass.length;
    while (i < j)
    {
      arrayOfField1 = paramClass[i];
      if (arrayOfField1.getName().indexOf("$") < 0) {
        ((List)localObject).add(arrayOfField1);
      }
      i += 1;
    }
    if (((List)localObject).size() != paramClass.length)
    {
      paramClass = new Field[((List)localObject).size()];
      ((List)localObject).toArray(paramClass);
      return paramClass;
    }
    return paramClass;
  }
}
