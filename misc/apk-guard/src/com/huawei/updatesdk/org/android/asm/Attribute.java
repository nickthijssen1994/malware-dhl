package com.huawei.updatesdk.org.android.asm;

import android.text.TextUtils;
import com.huawei.updatesdk.org.android.remote.calendar.widget.Log;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.IllegalFormatException;
import java.util.Locale;

public abstract class Attribute
{
  public static byte[] decode(String paramString)
  {
    paramString = paramString.toCharArray();
    int m = paramString.length / 2;
    byte[] arrayOfByte = new byte[m];
    int i = 0;
    while (i < m)
    {
      int j = i * 2;
      int k = Character.digit(paramString[j], 16);
      k = Character.digit(paramString[(j + 1)], 16) | k << 4;
      j = k;
      if (k > 127) {
        j = k - 256;
      }
      arrayOfByte[i] = Byte.valueOf(String.valueOf(j)).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  public static String encode(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8").replace("+", "%20").replace("*", "%2A").replace("~", "%7E");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      Log.println("StringUtils", "encode2utf8 error", paramString);
    }
    return null;
  }
  
  public static String encode(byte[] paramArrayOfByte)
  {
    for (;;)
    {
      try
      {
        Object localObject = MessageDigest.getInstance("SHA-256");
        ((MessageDigest)localObject).update(paramArrayOfByte);
        paramArrayOfByte = new StringBuilder(256);
        localObject = ((MessageDigest)localObject).digest();
        int j = localObject.length;
        i = 0;
        if (i < j)
        {
          b = localObject[i];
          localLocale = Locale.ENGLISH;
        }
      }
      catch (NoSuchAlgorithmException paramArrayOfByte)
      {
        int i;
        byte b;
        Locale localLocale;
        continue;
      }
      catch (IllegalFormatException paramArrayOfByte)
      {
        continue;
      }
      catch (Exception paramArrayOfByte)
      {
        label104:
        continue;
      }
      try
      {
        paramArrayOfByte.append(String.format(localLocale, "%02X", new Object[] { Byte.valueOf(b) }));
        i += 1;
      }
      catch (NoSuchAlgorithmException paramArrayOfByte) {}catch (IllegalFormatException paramArrayOfByte) {}catch (Exception paramArrayOfByte) {}
    }
    paramArrayOfByte = paramArrayOfByte.toString();
    return paramArrayOfByte;
    paramArrayOfByte = "sha256EncryptStr error:Exception";
    break label104;
    paramArrayOfByte = "sha256EncryptStr error:IllegalFormatException";
    break label104;
    paramArrayOfByte = "sha256EncryptStr error:NoSuchAlgorithmException";
    Log.append("StringUtils", paramArrayOfByte);
    return null;
  }
  
  public static String getName(String paramString)
  {
    paramString = toString(paramString);
    if (paramString == null) {
      return null;
    }
    return paramString.toLowerCase(Locale.getDefault());
  }
  
  public static String toString(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    try
    {
      paramString = paramString.getBytes("UTF-8");
      return encode(paramString);
    }
    catch (UnsupportedEncodingException paramString)
    {
      for (;;) {}
    }
    Log.append("StringUtils", "can not getBytes");
    return null;
  }
  
  public static boolean write(String paramString)
  {
    return (paramString != null) && (paramString.trim().startsWith("{")) && (paramString.trim().endsWith("}"));
  }
}
