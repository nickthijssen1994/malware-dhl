package com.huawei.updatesdk.org.shared.book.util;

import com.huawei.updatesdk.org.android.asm.Attribute;
import com.huawei.updatesdk.org.android.asm.TypeToken;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class Frame
{
  public static final String CLIENT_API = "clientApi";
  private static final String END_FLAG = "_";
  private static String c;
  private String method_;
  private String ver_ = "1.1";
  
  public Frame() {}
  
  public static void b(String paramString)
  {
    c = paramString;
  }
  
  private String read(Field paramField)
    throws IllegalAccessException, IllegalArgumentException
  {
    paramField = paramField.get(this);
    if ((paramField != null) && ((paramField instanceof c))) {
      return ((c)paramField).toJson();
    }
    if (paramField != null) {
      return String.valueOf(paramField);
    }
    return null;
  }
  
  public String a()
    throws IllegalAccessException, IllegalArgumentException, ArrayIndexOutOfBoundsException
  {
    connect();
    Map localMap = create();
    String[] arrayOfString = new String[localMap.size()];
    localMap.keySet().toArray(arrayOfString);
    Arrays.sort(arrayOfString);
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    int j;
    do
    {
      String str = read((Field)localMap.get(arrayOfString[i]));
      if (str != null)
      {
        str = Attribute.encode(str);
        localStringBuilder.append(arrayOfString[i]);
        localStringBuilder.append("=");
        localStringBuilder.append(str);
        localStringBuilder.append("&");
      }
      j = i + 1;
      i = j;
    } while (j < arrayOfString.length);
    i = localStringBuilder.length();
    if (i > 0)
    {
      i -= 1;
      if (localStringBuilder.charAt(i) == '&') {
        localStringBuilder.deleteCharAt(i);
      }
    }
    return localStringBuilder.toString();
  }
  
  protected void connect() {}
  
  public void copy(String paramString)
  {
    method_ = paramString;
  }
  
  protected Map create()
  {
    HashMap localHashMap = new HashMap();
    Field[] arrayOfField = TypeToken.get(getClass());
    int j = arrayOfField.length;
    int i = 0;
    while (i < j)
    {
      Field localField = arrayOfField[i];
      localField.setAccessible(true);
      String str = localField.getName();
      if (str.endsWith("_")) {
        localHashMap.put(str.substring(0, str.length() - 1), localField);
      }
      i += 1;
    }
    return localHashMap;
  }
  
  public String d()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(c);
    localStringBuilder.append("clientApi");
    return localStringBuilder.toString();
  }
  
  public String get()
  {
    return method_;
  }
  
  public void push(String paramString)
  {
    ver_ = paramString;
  }
}
