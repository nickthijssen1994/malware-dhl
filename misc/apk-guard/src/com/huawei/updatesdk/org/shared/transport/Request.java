package com.huawei.updatesdk.org.shared.transport;

import android.text.TextUtils;
import com.huawei.updatesdk.org.android.asm.data.f;
import com.huawei.updatesdk.org.android.book.CustomSSLSocketFactory;
import com.huawei.updatesdk.org.shared.module.Item;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import javax.net.ssl.HttpsURLConnection;
import org.apache.http.conn.ssl.SSLSocketFactory;

public class Request
{
  private static volatile Request inputStream;
  
  public Request() {}
  
  public static String a()
  {
    String str = Item.next().getName();
    if (TextUtils.isEmpty(str)) {
      return "";
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(str);
    ((StringBuilder)localObject).append("/updatesdk");
    str = ((StringBuilder)localObject).toString();
    localObject = new File(str);
    if ((!((File)localObject).exists()) && (!((File)localObject).mkdirs())) {
      return "";
    }
    return str;
  }
  
  private Proxy close()
  {
    if (f.add(Item.next().getContext())) {
      return f.close();
    }
    return null;
  }
  
  public static Request getInputStream()
  {
    try
    {
      if (inputStream == null) {
        inputStream = new Request();
      }
      Request localRequest = inputStream;
      return localRequest;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public HttpURLConnection getInputStream(String paramString)
    throws IOException, CertificateException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException, IllegalAccessException
  {
    paramString = new URL(paramString);
    Object localObject = close();
    if (localObject == null) {
      paramString = paramString.openConnection();
    } else {
      paramString = paramString.openConnection((Proxy)localObject);
    }
    paramString = (HttpURLConnection)ShooterUrlConnectionInstrumentation.openConnection(paramString);
    paramString.setConnectTimeout(7000);
    paramString.setReadTimeout(10000);
    paramString.setUseCaches(false);
    paramString.setDoInput(true);
    paramString.setRequestProperty("Accept-Encoding", "identity");
    paramString.setInstanceFollowRedirects(true);
    if ((paramString instanceof HttpsURLConnection))
    {
      localObject = (HttpsURLConnection)paramString;
      ((HttpsURLConnection)localObject).setSSLSocketFactory(CustomSSLSocketFactory.init(Item.next().getContext()));
      ((HttpsURLConnection)localObject).setHostnameVerifier(SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
    }
    return paramString;
  }
}
