package com.huawei.updatesdk.org.shared.book.util;

import com.huawei.updatesdk.a.b.d.c.b;
import com.huawei.updatesdk.org.android.asm.TypeToken;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.security.AccessController;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public abstract class c
{
  private static final char COMMA = ',';
  private static final String END_FLAG = "_";
  private static final String instruments = "b";
  
  public c() {}
  
  private String arrayToJson(Object paramObject)
    throws IllegalAccessException, IllegalArgumentException
  {
    int j = Array.getLength(paramObject);
    if (j <= 0) {
      return "[]";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("[");
    int i = 0;
    while (i < j)
    {
      String str = valueToJson(Array.get(paramObject, i));
      if (str != null)
      {
        localStringBuilder.append(str);
        localStringBuilder.append(',');
      }
      i += 1;
    }
    formatJsonStr(localStringBuilder);
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
  
  private void formatJsonStr(StringBuilder paramStringBuilder)
  {
    int i = paramStringBuilder.length();
    if (i > 0)
    {
      int j = i - 1;
      if (paramStringBuilder.charAt(j) == ',') {
        paramStringBuilder.delete(j, i);
      }
    }
  }
  
  private boolean isPrimitiveObj(Object paramObject)
  {
    return ((paramObject instanceof Integer)) || ((paramObject instanceof Long)) || ((paramObject instanceof Boolean)) || ((paramObject instanceof Float)) || ((paramObject instanceof Byte)) || ((paramObject instanceof Character)) || ((paramObject instanceof Double)) || ((paramObject instanceof Short));
  }
  
  private Object jsonBeanFromJson(Class paramClass, Object paramObject)
    throws InstantiationException, IllegalAccessException, ClassNotFoundException, IllegalArgumentException, JSONException
  {
    paramClass = (c)paramClass.newInstance();
    paramClass.fromJson((JSONObject)paramObject);
    return paramClass;
  }
  
  private String mapToJson(Map paramMap)
    throws IllegalAccessException, IllegalArgumentException
  {
    if (paramMap.size() <= 0) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("{");
    paramMap = paramMap.entrySet().iterator();
    for (;;)
    {
      Object localObject = (Map.Entry)paramMap.next();
      String str = (String)((Map.Entry)localObject).getKey();
      localObject = valueToJson(((Map.Entry)localObject).getValue());
      if (localObject != null)
      {
        localStringBuilder.append("\"");
        localStringBuilder.append(str);
        localStringBuilder.append("\":");
        localStringBuilder.append((String)localObject);
      }
      if (!paramMap.hasNext()) {
        break;
      }
      if (localObject != null) {
        localStringBuilder.append(',');
      }
    }
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
  
  private void processValueError(Field paramField, Object paramObject)
  {
    if (paramObject != null)
    {
      if (!(paramObject instanceof String)) {
        return;
      }
      try
      {
        Object localObject = paramField.getType();
        boolean bool = ((Class)localObject).isPrimitive();
        if (!bool) {
          return;
        }
        localObject = ((Class)localObject).getName();
        bool = "int".equals(localObject);
        if (bool)
        {
          paramObject = (String)paramObject;
          int i = Integer.parseInt(paramObject);
          paramObject = Integer.valueOf(i);
        }
        for (;;)
        {
          paramField.set(this, paramObject);
          return;
          bool = "float".equals(localObject);
          if (bool)
          {
            paramObject = (String)paramObject;
            float f = Float.parseFloat(paramObject);
            paramObject = Float.valueOf(f);
          }
          else
          {
            bool = "long".equals(localObject);
            if (bool)
            {
              paramObject = (String)paramObject;
              long l = Long.parseLong(paramObject);
              paramObject = Long.valueOf(l);
            }
            else
            {
              bool = "boolean".equals(localObject);
              if (bool)
              {
                paramObject = (String)paramObject;
                bool = Boolean.parseBoolean(paramObject);
                paramObject = Boolean.valueOf(bool);
              }
              else
              {
                bool = "double".equals(localObject);
                if (bool)
                {
                  paramObject = (String)paramObject;
                  double d = Double.parseDouble(paramObject);
                  paramObject = Double.valueOf(d);
                }
                else
                {
                  bool = "short".equals(localObject);
                  if (bool)
                  {
                    paramObject = (String)paramObject;
                    short s = Short.parseShort(paramObject);
                    paramObject = Short.valueOf(s);
                  }
                  else
                  {
                    bool = "byte".equals(localObject);
                    if (bool)
                    {
                      paramObject = (String)paramObject;
                      byte b = Byte.parseByte(paramObject);
                      paramObject = Byte.valueOf(b);
                    }
                    else
                    {
                      bool = "char".equals(localObject);
                      if (!bool) {
                        break;
                      }
                      paramObject = (String)paramObject;
                      char c = paramObject.charAt(0);
                      paramObject = Character.valueOf(c);
                    }
                  }
                }
              }
            }
          }
        }
        return;
      }
      catch (IllegalAccessException paramField)
      {
        paramObject = instruments;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("processValueError Throwable:");
        ((StringBuilder)localObject).append(paramField.getMessage());
        com.huawei.updatesdk.org.android.remote.calendar.widget.Log.append(paramObject, ((StringBuilder)localObject).toString());
      }
    }
  }
  
  private Object valueFromJson(Class paramClass1, Class paramClass2, Object paramObject)
    throws IllegalAccessException, IllegalArgumentException, InstantiationException, ClassNotFoundException, JSONException
  {
    if ((!paramClass1.isPrimitive()) && (!paramClass1.equals(String.class)))
    {
      if (List.class.isAssignableFrom(paramClass1)) {
        return listFromJson(paramClass2, paramObject);
      }
      if (b.class.isAssignableFrom(paramClass1))
      {
        if (!paramClass1.equals(b.class)) {
          return jsonBeanFromJson(paramClass1, paramObject);
        }
        paramClass2 = new StringBuilder();
        paramClass2.append("error type, type:");
        paramClass2.append(paramClass1);
        throw new IllegalArgumentException(paramClass2.toString());
      }
      if (Map.class.isAssignableFrom(paramClass1)) {
        return mapFromJson(paramClass2, paramObject);
      }
      paramClass2 = new StringBuilder();
      paramClass2.append("unsupport type, Type:");
      paramClass2.append(paramClass1);
      throw new IllegalArgumentException(paramClass2.toString());
    }
    if (("float".equals(paramClass1.getName())) && ((paramObject instanceof Double))) {
      return Float.valueOf(((Double)paramObject).floatValue());
    }
    return paramObject;
  }
  
  private String valueToJson(Object paramObject)
    throws IllegalAccessException, IllegalArgumentException
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof String)) {
      return JSONObject.quote(paramObject.toString());
    }
    if (isPrimitiveObj(paramObject)) {
      return String.valueOf(paramObject);
    }
    if ((paramObject instanceof c)) {
      return ((c)paramObject).toJson();
    }
    if ((paramObject instanceof List)) {
      return listToJson((List)paramObject);
    }
    if ((paramObject instanceof Map)) {
      return mapToJson((Map)paramObject);
    }
    if (paramObject.getClass().isArray()) {
      return arrayToJson(paramObject);
    }
    return null;
  }
  
  public void fromJson(JSONObject paramJSONObject)
    throws IllegalArgumentException, IllegalAccessException, InstantiationException, ClassNotFoundException, JSONException
  {
    Field[] arrayOfField = TypeToken.get(getClass());
    Object localObject2 = null;
    int i = 0;
    while (i < arrayOfField.length)
    {
      AccessController.doPrivileged(new SystemReader.1(arrayOfField[i]));
      Object localObject1 = arrayOfField[i].getName();
      if (!((String)localObject1).endsWith("_"))
      {
        localObject1 = localObject2;
      }
      else
      {
        String str = ((String)localObject1).substring(0, ((String)localObject1).length() - 1);
        if (!paramJSONObject.has(str))
        {
          localObject1 = localObject2;
        }
        else
        {
          Object localObject4 = paramJSONObject.get(str);
          if (JSONObject.NULL.equals(localObject4))
          {
            localObject1 = localObject2;
          }
          else
          {
            Object localObject5 = arrayOfField[i];
            localObject1 = localObject2;
            try
            {
              localObject5 = ((Field)localObject5).getType();
              Field localField = arrayOfField[i];
              localObject1 = localObject2;
              localObject4 = valueFromJson((Class)localObject5, TypeToken.get(localField), localObject4);
              localObject2 = localObject4;
              localObject5 = arrayOfField[i];
              localObject1 = localObject2;
              ((Field)localObject5).set(this, localObject4);
              localObject1 = localObject2;
            }
            catch (Exception localException)
            {
              localObject4 = instruments;
              localObject5 = new StringBuilder();
              ((StringBuilder)localObject5).append(getClass().getName());
              ((StringBuilder)localObject5).append(".fromJson error, fieldName:");
              ((StringBuilder)localObject5).append(str);
              ((StringBuilder)localObject5).append(localException.toString());
              android.util.Log.e((String)localObject4, ((StringBuilder)localObject5).toString());
              processValueError(arrayOfField[i], localObject1);
            }
          }
        }
      }
      i += 1;
      Object localObject3 = localObject1;
    }
  }
  
  protected Object listFromJson(Class paramClass, Object paramObject)
    throws InstantiationException, IllegalAccessException, ClassNotFoundException, IllegalArgumentException, JSONException
  {
    if (paramClass != null)
    {
      if ((paramObject instanceof JSONArray))
      {
        ArrayList localArrayList = new ArrayList();
        paramObject = (JSONArray)paramObject;
        int i = 0;
        while (i < paramObject.length())
        {
          Object localObject = valueFromJson(paramClass, null, paramObject.get(i));
          if (localObject != null) {
            if (paramClass.equals(localObject.getClass()))
            {
              localArrayList.add(localObject);
            }
            else
            {
              String str = instruments;
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("listFromJson error, memberClass:");
              localStringBuilder.append(paramClass);
              localStringBuilder.append(", valueClass:");
              localStringBuilder.append(localObject.getClass());
              com.huawei.updatesdk.org.android.remote.calendar.widget.Log.append(str, localStringBuilder.toString());
            }
          }
          i += 1;
        }
        return localArrayList;
      }
      paramClass = new StringBuilder();
      paramClass.append("jsonobject is not JSONArray, jsonValue:");
      paramClass.append(paramObject);
      throw new IllegalArgumentException(paramClass.toString());
    }
    throw new IllegalArgumentException("generic type is null");
  }
  
  protected String listToJson(List paramList)
    throws IllegalAccessException, IllegalArgumentException
  {
    if (paramList.size() <= 0) {
      return "[]";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("[");
    int i = 0;
    while (i < paramList.size())
    {
      String str = valueToJson(paramList.get(i));
      if (str != null)
      {
        localStringBuilder.append(str);
        localStringBuilder.append(',');
      }
      i += 1;
    }
    formatJsonStr(localStringBuilder);
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
  
  protected Object mapFromJson(Class paramClass, Object paramObject)
    throws InstantiationException, IllegalAccessException, ClassNotFoundException, IllegalArgumentException, JSONException
  {
    if (paramClass != null)
    {
      if ((paramObject instanceof JSONObject))
      {
        LinkedHashMap localLinkedHashMap = new LinkedHashMap();
        paramObject = (JSONObject)paramObject;
        Iterator localIterator = paramObject.keys();
        while (localIterator.hasNext())
        {
          String str = (String)localIterator.next();
          Object localObject = valueFromJson(paramClass, null, paramObject.get(str));
          if (localObject != null) {
            if (paramClass.equals(localObject.getClass()))
            {
              localLinkedHashMap.put(str, localObject);
            }
            else
            {
              str = instruments;
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("mapFromJson error, memberClass:");
              localStringBuilder.append(paramClass);
              localStringBuilder.append(", valueClass:");
              localStringBuilder.append(localObject.getClass());
              com.huawei.updatesdk.org.android.remote.calendar.widget.Log.append(str, localStringBuilder.toString());
            }
          }
        }
        return localLinkedHashMap;
      }
      paramClass = new StringBuilder();
      paramClass.append("jsonobject is not JSONObject, jsonValue:");
      paramClass.append(paramObject);
      throw new IllegalArgumentException(paramClass.toString());
    }
    throw new IllegalArgumentException("generic type is null");
  }
  
  public String toJson()
    throws IllegalAccessException, IllegalArgumentException
  {
    Field[] arrayOfField = TypeToken.get(getClass());
    if (arrayOfField.length <= 0) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("{");
    int i = 0;
    while (i < arrayOfField.length)
    {
      AccessController.doPrivileged(new SystemReader.1(arrayOfField[i]));
      String str1 = arrayOfField[i].getName();
      if ((str1 != null) && (str1.endsWith("_")))
      {
        str1 = str1.substring(0, str1.length() - 1);
        String str2 = valueToJson(arrayOfField[i].get(this));
        if (str2 != null)
        {
          localStringBuilder.append("\"");
          localStringBuilder.append(str1);
          localStringBuilder.append("\":");
          localStringBuilder.append(str2);
          localStringBuilder.append(',');
        }
      }
      i += 1;
    }
    formatJsonStr(localStringBuilder);
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
}
