package com.huawei.updatesdk.text.speech.tts;

import android.os.AsyncTask;
import android.os.AsyncTask.Status;
import com.huawei.updatesdk.org.android.remote.calendar.widget.Log;
import com.huawei.updatesdk.org.shared.book.f;
import com.huawei.updatesdk.org.shared.book.util.a;
import com.huawei.updatesdk.text.http.HttpURLConnectionImpl;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ThreadPoolExecutor;

public class ByteVector
{
  private static List<AsyncTask> data = new CopyOnWriteArrayList();
  
  public static f a(HttpURLConnectionImpl paramHttpURLConnectionImpl, a paramA)
  {
    paramA = new f(paramHttpURLConnectionImpl, paramA);
    a(paramA, paramHttpURLConnectionImpl);
    return paramA;
  }
  
  private static void a(f paramF, HttpURLConnectionImpl paramHttpURLConnectionImpl)
  {
    paramHttpURLConnectionImpl = new StringBuilder();
    paramHttpURLConnectionImpl.append("executeTask, ActiveCount:");
    paramHttpURLConnectionImpl.append(l.d.getActiveCount());
    paramHttpURLConnectionImpl.append(", TaskCount:");
    paramHttpURLConnectionImpl.append(l.d.getTaskCount());
    Log.e("StoreAgent", paramHttpURLConnectionImpl.toString());
    paramF.add(l.d);
  }
  
  public static List get()
  {
    return data;
  }
  
  public static void write(AsyncTask paramAsyncTask)
  {
    if (paramAsyncTask == null) {
      return;
    }
    Iterator localIterator = data.iterator();
    while (localIterator.hasNext())
    {
      AsyncTask localAsyncTask = (AsyncTask)localIterator.next();
      if ((localAsyncTask != null) && ((localAsyncTask.getStatus() == AsyncTask.Status.FINISHED) || (localAsyncTask.isCancelled()))) {
        data.remove(paramAsyncTask);
      }
    }
    data.add(paramAsyncTask);
  }
}
