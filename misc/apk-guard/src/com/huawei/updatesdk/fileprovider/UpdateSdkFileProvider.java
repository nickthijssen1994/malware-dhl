package com.huawei.updatesdk.fileprovider;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.content.pm.ComponentInfo;
import android.content.pm.ProviderInfo;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.text.TextUtils;
import android.webkit.MimeTypeMap;
import com.huawei.updatesdk.org.android.remote.calendar.widget.Log;
import java.io.File;
import java.io.FileNotFoundException;

public class UpdateSdkFileProvider
  extends ContentProvider
{
  public static final String AUTHORITIES_SUFFIX = ".updateSdk.fileProvider";
  private static final String[] COLUMNS = { "_display_name", "_size" };
  private static final String PAGE_KEY = "UpdateSdkFileProvider";
  private static FileProvider.PathStrategy mWStrategy;
  private String authority;
  
  public UpdateSdkFileProvider() {}
  
  private static File buildPath(File paramFile, String... paramVarArgs)
  {
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      String str = paramVarArgs[i];
      File localFile = paramFile;
      if (str != null) {
        localFile = new File(paramFile, str);
      }
      i += 1;
      paramFile = localFile;
    }
    return paramFile;
  }
  
  private static Object[] copyOf(Object[] paramArrayOfObject, int paramInt)
  {
    Object[] arrayOfObject = new Object[paramInt];
    System.arraycopy(paramArrayOfObject, 0, arrayOfObject, 0, paramInt);
    return arrayOfObject;
  }
  
  private static String[] copyOf(String[] paramArrayOfString, int paramInt)
  {
    String[] arrayOfString = new String[paramInt];
    System.arraycopy(paramArrayOfString, 0, arrayOfString, 0, paramInt);
    return arrayOfString;
  }
  
  private static FileProvider.PathStrategy createWiseDistPathStrategy(Context paramContext, String paramString)
  {
    try
    {
      if (mWStrategy == null)
      {
        mWStrategy = new FileProvider.SimplePathStrategy(paramString);
        if (paramContext.getFilesDir() != null)
        {
          paramContext = buildPath(paramContext.getFilesDir(), new String[] { "/" });
          mWStrategy.addRoot("updatesdkapk", paramContext);
        }
      }
      paramContext = mWStrategy;
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
  
  public static Uri getUriForFile(Context paramContext, String paramString, File paramFile)
  {
    createWiseDistPathStrategy(paramContext, paramString);
    return mWStrategy.getUriForFile(paramFile);
  }
  
  public void attachInfo(Context paramContext, ProviderInfo paramProviderInfo)
  {
    super.attachInfo(paramContext, paramProviderInfo);
    if (!exported)
    {
      if (grantUriPermissions)
      {
        paramProviderInfo = authority;
        authority = paramProviderInfo;
        createWiseDistPathStrategy(paramContext, paramProviderInfo);
        return;
      }
      throw new SecurityException("WiseDist Provider must grant uri permissions");
    }
    throw new SecurityException("WiseDist Provider must not be exported");
  }
  
  public int delete(Uri paramUri, String paramString, String[] paramArrayOfString)
  {
    throw new UnsupportedOperationException("No external updates");
  }
  
  public String getType(Uri paramUri)
  {
    if ((paramUri != null) && (!TextUtils.isEmpty(paramUri.toString())) && (paramUri.toString().endsWith("apk")))
    {
      paramUri = MimeTypeMap.getSingleton().getMimeTypeFromExtension("apk");
      if (paramUri != null) {
        return paramUri;
      }
    }
    return "application/octet-stream";
  }
  
  public Uri insert(Uri paramUri, ContentValues paramContentValues)
  {
    throw new UnsupportedOperationException("No external inserts");
  }
  
  public boolean onCreate()
  {
    return true;
  }
  
  public ParcelFileDescriptor openFile(Uri paramUri, String paramString)
    throws FileNotFoundException
  {
    if (paramUri == null) {
      return null;
    }
    if (paramUri.getAuthority() != null)
    {
      if (!paramUri.getAuthority().equals(authority)) {
        return null;
      }
      paramUri = mWStrategy.getPath(paramUri);
      if (!paramUri.getName().endsWith("apk"))
      {
        Log.append("UpdateSdkFileProvider", "can not open this file.");
        return null;
      }
      return ParcelFileDescriptor.open(paramUri, 268435456);
    }
    return null;
  }
  
  public Cursor query(Uri paramUri, String[] paramArrayOfString1, String paramString1, String[] paramArrayOfString2, String paramString2)
  {
    paramString1 = mWStrategy.getPath(paramUri);
    paramUri = paramArrayOfString1;
    if (paramArrayOfString1 == null) {
      paramUri = COLUMNS;
    }
    paramArrayOfString2 = new String[paramUri.length];
    paramArrayOfString1 = new Object[paramUri.length];
    int m = paramUri.length;
    int j = 0;
    int k;
    for (int i = 0; j < m; i = k)
    {
      paramString2 = paramUri[j];
      if ("_display_name".equals(paramString2))
      {
        paramArrayOfString2[i] = "_display_name";
        k = i + 1;
        paramArrayOfString1[i] = paramString1.getName();
      }
      for (i = k;; i = k)
      {
        k = i;
        break;
        k = i;
        if (!"_size".equals(paramString2)) {
          break;
        }
        paramArrayOfString2[i] = "_size";
        k = i + 1;
        paramArrayOfString1[i] = Long.valueOf(paramString1.length());
      }
      j += 1;
    }
    paramUri = copyOf(paramArrayOfString2, i);
    paramArrayOfString1 = copyOf(paramArrayOfString1, i);
    paramUri = new MatrixCursor(paramUri, 1);
    paramUri.addRow(paramArrayOfString1);
    return paramUri;
  }
  
  public int update(Uri paramUri, ContentValues paramContentValues, String paramString, String[] paramArrayOfString)
  {
    throw new UnsupportedOperationException("No external updates");
  }
}
