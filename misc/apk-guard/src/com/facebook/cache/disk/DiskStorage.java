package com.facebook.cache.disk;

import com.facebook.binaryresource.BinaryResource;
import com.facebook.cache.common.WriterCallback;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public abstract interface DiskStorage
{
  public abstract void clearAll();
  
  public abstract boolean contains(String paramString, Object paramObject);
  
  public abstract DiskDumpInfo getDumpInfo();
  
  public abstract Collection getEntries();
  
  public abstract BinaryResource getResource(String paramString, Object paramObject);
  
  public abstract File getRootDir();
  
  public abstract String getStorageName();
  
  public abstract Inserter insert(String paramString, Object paramObject);
  
  public abstract boolean isEnabled();
  
  public abstract boolean isExternal();
  
  public abstract void purgeUnexpectedResources();
  
  public abstract long remove(Entry paramEntry);
  
  public abstract long remove(String paramString);
  
  public abstract boolean touch(String paramString, Object paramObject);
  
  public static class DiskDumpInfo
  {
    public List<DiskStorage.DiskDumpInfoEntry> entries = new ArrayList();
    public Map<String, Integer> typeCounts = new HashMap();
    
    public DiskDumpInfo() {}
  }
  
  public static class DiskDumpInfoEntry
  {
    public final String authority;
    public final String firstBits;
    public final String path;
    public final float size;
    public final String type;
    
    protected DiskDumpInfoEntry(String paramString1, String paramString2, String paramString3, float paramFloat, String paramString4)
    {
      authority = paramString1;
      path = paramString2;
      type = paramString3;
      size = paramFloat;
      firstBits = paramString4;
    }
  }
  
  public static abstract interface Entry
  {
    public abstract String getId();
    
    public abstract BinaryResource getResource();
    
    public abstract long getSize();
    
    public abstract long getTimestamp();
  }
  
  public static abstract interface Inserter
  {
    public abstract boolean cleanUp();
    
    public abstract BinaryResource commit(Object paramObject);
    
    public abstract void writeData(WriterCallback paramWriterCallback, Object paramObject);
  }
}
