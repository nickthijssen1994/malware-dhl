package com.facebook.drawee.generic;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import com.facebook.drawee.R.styleable;
import com.facebook.drawee.drawable.AutoRotateDrawable;
import com.facebook.drawee.drawable.ScalingUtils.ScaleType;
import com.facebook.imagepipeline.systrace.FrescoSystrace;

public class GenericDraweeHierarchyInflater
{
  public GenericDraweeHierarchyInflater() {}
  
  private static Drawable getDrawable(Context paramContext, TypedArray paramTypedArray, int paramInt)
  {
    paramInt = paramTypedArray.getResourceId(paramInt, 0);
    if (paramInt == 0) {
      return null;
    }
    return paramContext.getResources().getDrawable(paramInt);
  }
  
  private static RoundingParams getRoundingParams(GenericDraweeHierarchyBuilder paramGenericDraweeHierarchyBuilder)
  {
    if (paramGenericDraweeHierarchyBuilder.getRoundingParams() == null) {
      paramGenericDraweeHierarchyBuilder.setRoundingParams(new RoundingParams());
    }
    return paramGenericDraweeHierarchyBuilder.getRoundingParams();
  }
  
  private static ScalingUtils.ScaleType getScaleTypeFromXml(TypedArray paramTypedArray, int paramInt)
  {
    switch (paramTypedArray.getInt(paramInt, -2))
    {
    default: 
      throw new RuntimeException("XML attribute not specified!");
    case 8: 
      return ScalingUtils.ScaleType.FIT_BOTTOM_START;
    case 7: 
      return ScalingUtils.ScaleType.FOCUS_CROP;
    case 6: 
      return ScalingUtils.ScaleType.CENTER_CROP;
    case 5: 
      return ScalingUtils.ScaleType.CENTER_INSIDE;
    case 4: 
      return ScalingUtils.ScaleType.CENTER;
    case 3: 
      return ScalingUtils.ScaleType.FIT_END;
    case 2: 
      return ScalingUtils.ScaleType.FIT_CENTER;
    case 1: 
      return ScalingUtils.ScaleType.FIT_START;
    case 0: 
      return ScalingUtils.ScaleType.FIT_XY;
    }
    return null;
  }
  
  public static GenericDraweeHierarchyBuilder inflateBuilder(Context paramContext, AttributeSet paramAttributeSet)
  {
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.beginSection("GenericDraweeHierarchyBuilder#inflateBuilder");
    }
    paramContext = updateBuilder(new GenericDraweeHierarchyBuilder(paramContext.getResources()), paramContext, paramAttributeSet);
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.endSection();
    }
    return paramContext;
  }
  
  public static GenericDraweeHierarchy inflateHierarchy(Context paramContext, AttributeSet paramAttributeSet)
  {
    return inflateBuilder(paramContext, paramAttributeSet).build();
  }
  
  public static GenericDraweeHierarchyBuilder updateBuilder(GenericDraweeHierarchyBuilder paramGenericDraweeHierarchyBuilder, Context paramContext, AttributeSet paramAttributeSet)
  {
    if (paramAttributeSet != null)
    {
      TypedArray localTypedArray = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.GenericDraweeHierarchy);
      try
      {
        i1 = localTypedArray.getIndexCount();
        boolean bool1 = true;
        j = 0;
        n = 0;
        boolean bool8 = true;
        boolean bool2 = true;
        boolean bool3 = true;
        boolean bool4 = true;
        boolean bool5 = true;
        boolean bool6 = true;
        boolean bool7 = true;
        i = 0;
        int i2;
        for (;;)
        {
          paramAttributeSet = paramContext;
          if (n < i1) {
            try
            {
              i2 = localTypedArray.getIndex(n);
              k = R.styleable.GenericDraweeHierarchy_actualImageScaleType;
              boolean bool9;
              boolean bool10;
              boolean bool11;
              boolean bool12;
              boolean bool13;
              boolean bool14;
              boolean bool15;
              boolean bool16;
              if (i2 == k)
              {
                paramGenericDraweeHierarchyBuilder.setActualImageScaleType(getScaleTypeFromXml(localTypedArray, i2));
                bool9 = bool1;
                m = j;
                bool10 = bool8;
                bool11 = bool2;
                bool12 = bool3;
                bool13 = bool4;
                bool14 = bool5;
                bool15 = bool6;
                bool16 = bool7;
                k = i;
              }
              else
              {
                k = R.styleable.GenericDraweeHierarchy_placeholderImage;
                if (i2 == k)
                {
                  paramGenericDraweeHierarchyBuilder.setPlaceholderImage(getDrawable(paramAttributeSet, localTypedArray, i2));
                  bool9 = bool1;
                  m = j;
                  bool10 = bool8;
                  bool11 = bool2;
                  bool12 = bool3;
                  bool13 = bool4;
                  bool14 = bool5;
                  bool15 = bool6;
                  bool16 = bool7;
                  k = i;
                }
                else
                {
                  k = R.styleable.GenericDraweeHierarchy_pressedStateOverlayImage;
                  if (i2 == k)
                  {
                    paramGenericDraweeHierarchyBuilder.setPressedStateOverlay(getDrawable(paramAttributeSet, localTypedArray, i2));
                    bool9 = bool1;
                    m = j;
                    bool10 = bool8;
                    bool11 = bool2;
                    bool12 = bool3;
                    bool13 = bool4;
                    bool14 = bool5;
                    bool15 = bool6;
                    bool16 = bool7;
                    k = i;
                  }
                  else
                  {
                    k = R.styleable.GenericDraweeHierarchy_progressBarImage;
                    if (i2 == k)
                    {
                      paramGenericDraweeHierarchyBuilder.setProgressBarImage(getDrawable(paramAttributeSet, localTypedArray, i2));
                      bool9 = bool1;
                      m = j;
                      bool10 = bool8;
                      bool11 = bool2;
                      bool12 = bool3;
                      bool13 = bool4;
                      bool14 = bool5;
                      bool15 = bool6;
                      bool16 = bool7;
                      k = i;
                    }
                    else
                    {
                      k = R.styleable.GenericDraweeHierarchy_fadeDuration;
                      if (i2 == k)
                      {
                        paramGenericDraweeHierarchyBuilder.setFadeDuration(localTypedArray.getInt(i2, 0));
                        bool9 = bool1;
                        m = j;
                        bool10 = bool8;
                        bool11 = bool2;
                        bool12 = bool3;
                        bool13 = bool4;
                        bool14 = bool5;
                        bool15 = bool6;
                        bool16 = bool7;
                        k = i;
                      }
                      else
                      {
                        k = R.styleable.GenericDraweeHierarchy_viewAspectRatio;
                        if (i2 == k)
                        {
                          paramGenericDraweeHierarchyBuilder.setDesiredAspectRatio(localTypedArray.getFloat(i2, 0.0F));
                          bool9 = bool1;
                          m = j;
                          bool10 = bool8;
                          bool11 = bool2;
                          bool12 = bool3;
                          bool13 = bool4;
                          bool14 = bool5;
                          bool15 = bool6;
                          bool16 = bool7;
                          k = i;
                        }
                        else
                        {
                          k = R.styleable.GenericDraweeHierarchy_placeholderImageScaleType;
                          if (i2 == k)
                          {
                            paramGenericDraweeHierarchyBuilder.setPlaceholderImageScaleType(getScaleTypeFromXml(localTypedArray, i2));
                            bool9 = bool1;
                            m = j;
                            bool10 = bool8;
                            bool11 = bool2;
                            bool12 = bool3;
                            bool13 = bool4;
                            bool14 = bool5;
                            bool15 = bool6;
                            bool16 = bool7;
                            k = i;
                          }
                          else
                          {
                            k = R.styleable.GenericDraweeHierarchy_retryImage;
                            if (i2 == k)
                            {
                              paramGenericDraweeHierarchyBuilder.setRetryImage(getDrawable(paramAttributeSet, localTypedArray, i2));
                              bool9 = bool1;
                              m = j;
                              bool10 = bool8;
                              bool11 = bool2;
                              bool12 = bool3;
                              bool13 = bool4;
                              bool14 = bool5;
                              bool15 = bool6;
                              bool16 = bool7;
                              k = i;
                            }
                            else
                            {
                              k = R.styleable.GenericDraweeHierarchy_retryImageScaleType;
                              if (i2 == k)
                              {
                                paramGenericDraweeHierarchyBuilder.setRetryImageScaleType(getScaleTypeFromXml(localTypedArray, i2));
                                bool9 = bool1;
                                m = j;
                                bool10 = bool8;
                                bool11 = bool2;
                                bool12 = bool3;
                                bool13 = bool4;
                                bool14 = bool5;
                                bool15 = bool6;
                                bool16 = bool7;
                                k = i;
                              }
                              else
                              {
                                k = R.styleable.GenericDraweeHierarchy_failureImage;
                                if (i2 == k)
                                {
                                  paramGenericDraweeHierarchyBuilder.setFailureImage(getDrawable(paramAttributeSet, localTypedArray, i2));
                                  bool9 = bool1;
                                  m = j;
                                  bool10 = bool8;
                                  bool11 = bool2;
                                  bool12 = bool3;
                                  bool13 = bool4;
                                  bool14 = bool5;
                                  bool15 = bool6;
                                  bool16 = bool7;
                                  k = i;
                                }
                                else
                                {
                                  k = R.styleable.GenericDraweeHierarchy_failureImageScaleType;
                                  if (i2 == k)
                                  {
                                    paramGenericDraweeHierarchyBuilder.setFailureImageScaleType(getScaleTypeFromXml(localTypedArray, i2));
                                    bool9 = bool1;
                                    m = j;
                                    bool10 = bool8;
                                    bool11 = bool2;
                                    bool12 = bool3;
                                    bool13 = bool4;
                                    bool14 = bool5;
                                    bool15 = bool6;
                                    bool16 = bool7;
                                    k = i;
                                  }
                                  else
                                  {
                                    k = R.styleable.GenericDraweeHierarchy_progressBarImageScaleType;
                                    if (i2 == k)
                                    {
                                      paramGenericDraweeHierarchyBuilder.setProgressBarImageScaleType(getScaleTypeFromXml(localTypedArray, i2));
                                      bool9 = bool1;
                                      m = j;
                                      bool10 = bool8;
                                      bool11 = bool2;
                                      bool12 = bool3;
                                      bool13 = bool4;
                                      bool14 = bool5;
                                      bool15 = bool6;
                                      bool16 = bool7;
                                      k = i;
                                    }
                                    else
                                    {
                                      k = R.styleable.GenericDraweeHierarchy_progressBarAutoRotateInterval;
                                      if (i2 != k) {
                                        break label985;
                                      }
                                      m = localTypedArray.getInteger(i2, j);
                                      k = i;
                                      bool16 = bool7;
                                      bool15 = bool6;
                                      bool14 = bool5;
                                      bool13 = bool4;
                                      bool12 = bool3;
                                      bool11 = bool2;
                                      bool10 = bool8;
                                      bool9 = bool1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              label985:
              label1502:
              int i3;
              do
              {
                for (;;)
                {
                  bool1 = bool9;
                  j = m;
                  bool8 = bool10;
                  bool2 = bool11;
                  bool3 = bool12;
                  bool4 = bool13;
                  bool5 = bool14;
                  bool6 = bool15;
                  bool7 = bool16;
                  i = k;
                  break label1785;
                  k = R.styleable.GenericDraweeHierarchy_backgroundImage;
                  if (i2 == k)
                  {
                    paramGenericDraweeHierarchyBuilder.setBackground(getDrawable(paramAttributeSet, localTypedArray, i2));
                    bool9 = bool1;
                    m = j;
                    bool10 = bool8;
                    bool11 = bool2;
                    bool12 = bool3;
                    bool13 = bool4;
                    bool14 = bool5;
                    bool15 = bool6;
                    bool16 = bool7;
                    k = i;
                  }
                  else
                  {
                    k = R.styleable.GenericDraweeHierarchy_overlayImage;
                    if (i2 == k)
                    {
                      paramGenericDraweeHierarchyBuilder.setOverlay(getDrawable(paramAttributeSet, localTypedArray, i2));
                      bool9 = bool1;
                      m = j;
                      bool10 = bool8;
                      bool11 = bool2;
                      bool12 = bool3;
                      bool13 = bool4;
                      bool14 = bool5;
                      bool15 = bool6;
                      bool16 = bool7;
                      k = i;
                    }
                    else
                    {
                      k = R.styleable.GenericDraweeHierarchy_roundAsCircle;
                      if (i2 == k)
                      {
                        getRoundingParams(paramGenericDraweeHierarchyBuilder).setRoundAsCircle(localTypedArray.getBoolean(i2, false));
                        bool9 = bool1;
                        m = j;
                        bool10 = bool8;
                        bool11 = bool2;
                        bool12 = bool3;
                        bool13 = bool4;
                        bool14 = bool5;
                        bool15 = bool6;
                        bool16 = bool7;
                        k = i;
                      }
                      else
                      {
                        k = R.styleable.GenericDraweeHierarchy_roundedCornerRadius;
                        if (i2 == k)
                        {
                          k = localTypedArray.getDimensionPixelSize(i2, i);
                          bool9 = bool1;
                          m = j;
                          bool10 = bool8;
                          bool11 = bool2;
                          bool12 = bool3;
                          bool13 = bool4;
                          bool14 = bool5;
                          bool15 = bool6;
                          bool16 = bool7;
                        }
                        else
                        {
                          k = R.styleable.GenericDraweeHierarchy_roundTopLeft;
                          if (i2 == k) {
                            bool8 = localTypedArray.getBoolean(i2, bool8);
                          }
                          for (;;)
                          {
                            bool9 = bool1;
                            m = j;
                            bool10 = bool8;
                            bool11 = bool2;
                            bool12 = bool3;
                            bool13 = bool4;
                            bool14 = bool5;
                            bool15 = bool6;
                            bool16 = bool7;
                            k = i;
                            break;
                            k = R.styleable.GenericDraweeHierarchy_roundTopRight;
                            if (i2 == k)
                            {
                              bool3 = localTypedArray.getBoolean(i2, bool3);
                            }
                            else
                            {
                              k = R.styleable.GenericDraweeHierarchy_roundBottomLeft;
                              if (i2 == k)
                              {
                                bool7 = localTypedArray.getBoolean(i2, bool7);
                              }
                              else
                              {
                                k = R.styleable.GenericDraweeHierarchy_roundBottomRight;
                                if (i2 == k)
                                {
                                  bool5 = localTypedArray.getBoolean(i2, bool5);
                                }
                                else
                                {
                                  k = R.styleable.GenericDraweeHierarchy_roundTopStart;
                                  if (i2 == k)
                                  {
                                    bool2 = localTypedArray.getBoolean(i2, bool2);
                                  }
                                  else
                                  {
                                    k = R.styleable.GenericDraweeHierarchy_roundTopEnd;
                                    if (i2 == k)
                                    {
                                      bool4 = localTypedArray.getBoolean(i2, bool4);
                                    }
                                    else
                                    {
                                      k = R.styleable.GenericDraweeHierarchy_roundBottomStart;
                                      if (i2 == k)
                                      {
                                        bool1 = localTypedArray.getBoolean(i2, bool1);
                                      }
                                      else
                                      {
                                        k = R.styleable.GenericDraweeHierarchy_roundBottomEnd;
                                        if (i2 != k) {
                                          break label1502;
                                        }
                                        bool6 = localTypedArray.getBoolean(i2, bool6);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          k = R.styleable.GenericDraweeHierarchy_roundWithOverlayColor;
                          if (i2 == k)
                          {
                            getRoundingParams(paramGenericDraweeHierarchyBuilder).setOverlayColor(localTypedArray.getColor(i2, 0));
                            bool9 = bool1;
                            m = j;
                            bool10 = bool8;
                            bool11 = bool2;
                            bool12 = bool3;
                            bool13 = bool4;
                            bool14 = bool5;
                            bool15 = bool6;
                            bool16 = bool7;
                            k = i;
                          }
                          else
                          {
                            k = R.styleable.GenericDraweeHierarchy_roundingBorderWidth;
                            if (i2 == k)
                            {
                              getRoundingParams(paramGenericDraweeHierarchyBuilder).setBorderWidth(localTypedArray.getDimensionPixelSize(i2, 0));
                              bool9 = bool1;
                              m = j;
                              bool10 = bool8;
                              bool11 = bool2;
                              bool12 = bool3;
                              bool13 = bool4;
                              bool14 = bool5;
                              bool15 = bool6;
                              bool16 = bool7;
                              k = i;
                            }
                            else
                            {
                              k = R.styleable.GenericDraweeHierarchy_roundingBorderColor;
                              if (i2 != k) {
                                break;
                              }
                              getRoundingParams(paramGenericDraweeHierarchyBuilder).setBorderColor(localTypedArray.getColor(i2, 0));
                              bool9 = bool1;
                              m = j;
                              bool10 = bool8;
                              bool11 = bool2;
                              bool12 = bool3;
                              bool13 = bool4;
                              bool14 = bool5;
                              bool15 = bool6;
                              bool16 = bool7;
                              k = i;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                i3 = R.styleable.GenericDraweeHierarchy_roundingBorderPadding;
                bool9 = bool1;
                m = j;
                bool10 = bool8;
                bool11 = bool2;
                bool12 = bool3;
                bool13 = bool4;
                bool14 = bool5;
                bool15 = bool6;
                bool16 = bool7;
                k = i;
              } while (i2 != i3);
              getRoundingParams(paramGenericDraweeHierarchyBuilder).setPadding(localTypedArray.getDimensionPixelSize(i2, 0));
              label1785:
              n += 1;
            }
            catch (Throwable paramGenericDraweeHierarchyBuilder)
            {
              break label1996;
            }
          }
        }
        localTypedArray.recycle();
        if ((Build.VERSION.SDK_INT >= 17) && (paramContext.getResources().getConfiguration().getLayoutDirection() == 1))
        {
          if ((bool8) && (bool4)) {
            k = 1;
          } else {
            k = 0;
          }
          if ((bool3) && (bool2)) {
            n = 1;
          } else {
            n = 0;
          }
          if ((bool5) && (bool1)) {
            m = 1;
          } else {
            m = 0;
          }
          if ((bool7) && (bool6)) {
            i2 = 1;
          } else {
            i2 = 0;
          }
          i1 = m;
          m = k;
          k = i2;
        }
        else
        {
          if ((bool8) && (bool2)) {
            m = 1;
          } else {
            m = 0;
          }
          if ((bool3) && (bool4)) {
            n = 1;
          } else {
            n = 0;
          }
          if ((bool5) && (bool6)) {
            i1 = 1;
          } else {
            i1 = 0;
          }
          if ((bool7) && (bool1)) {
            k = 1;
          } else {
            k = 0;
          }
        }
      }
      catch (Throwable paramGenericDraweeHierarchyBuilder)
      {
        label1996:
        localTypedArray.recycle();
        if (Build.VERSION.SDK_INT >= 17) {
          paramContext.getResources().getConfiguration().getLayoutDirection();
        }
        throw paramGenericDraweeHierarchyBuilder;
      }
    }
    int n = 1;
    int i = 0;
    int m = 1;
    int i1 = 1;
    int j = 0;
    int k = 1;
    if ((paramGenericDraweeHierarchyBuilder.getProgressBarImage() != null) && (j > 0)) {
      paramGenericDraweeHierarchyBuilder.setProgressBarImage(new AutoRotateDrawable(paramGenericDraweeHierarchyBuilder.getProgressBarImage(), j));
    }
    if (i > 0)
    {
      paramContext = getRoundingParams(paramGenericDraweeHierarchyBuilder);
      float f1;
      if (m != 0) {
        f1 = i;
      } else {
        f1 = 0.0F;
      }
      float f2;
      if (n != 0) {
        f2 = i;
      } else {
        f2 = 0.0F;
      }
      float f3;
      if (i1 != 0) {
        f3 = i;
      } else {
        f3 = 0.0F;
      }
      float f4;
      if (k != 0) {
        f4 = i;
      } else {
        f4 = 0.0F;
      }
      paramContext.setCornersRadii(f1, f2, f3, f4);
    }
    return paramGenericDraweeHierarchyBuilder;
  }
}
