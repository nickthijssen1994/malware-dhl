package com.facebook.drawee.span;

import android.content.Context;
import android.graphics.Rect;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.Callback;
import android.os.SystemClock;
import android.text.SpannableStringBuilder;
import android.view.View;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.lifecycle.AttachDetachListener;
import com.facebook.drawee.controller.AbstractDraweeController;
import com.facebook.drawee.controller.BaseControllerListener;
import com.facebook.drawee.interfaces.DraweeController;
import com.facebook.drawee.interfaces.DraweeHierarchy;
import com.facebook.drawee.view.DraweeHolder;
import com.facebook.imagepipeline.image.ImageInfo;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class DraweeSpanStringBuilder
  extends SpannableStringBuilder
  implements AttachDetachListener
{
  public static final int UNSET_SIZE = -1;
  private Drawable mBoundDrawable;
  private View mBoundView;
  private final DrawableCallback mDrawableCallback = new DrawableCallback(null);
  private DraweeSpanChangedListener mDraweeSpanChangedListener;
  private final Set<DraweeSpan> mDraweeSpans = new HashSet();
  
  public DraweeSpanStringBuilder() {}
  
  public DraweeSpanStringBuilder(CharSequence paramCharSequence)
  {
    super(paramCharSequence);
  }
  
  public DraweeSpanStringBuilder(CharSequence paramCharSequence, int paramInt1, int paramInt2)
  {
    super(paramCharSequence, paramInt1, paramInt2);
  }
  
  protected void bindToDrawable(Drawable paramDrawable)
  {
    unbindFromPreviousComponent();
    mBoundDrawable = paramDrawable;
  }
  
  protected void bindToView(View paramView)
  {
    unbindFromPreviousComponent();
    mBoundView = paramView;
  }
  
  public Set getDraweeSpans()
  {
    return mDraweeSpans;
  }
  
  public boolean hasDraweeSpans()
  {
    return mDraweeSpans.isEmpty() ^ true;
  }
  
  void onAttach()
  {
    Iterator localIterator = mDraweeSpans.iterator();
    while (localIterator.hasNext()) {
      ((DraweeSpan)localIterator.next()).onAttach();
    }
  }
  
  public void onAttachToView(View paramView)
  {
    bindToView(paramView);
    onAttach();
  }
  
  void onDetach()
  {
    Iterator localIterator = mDraweeSpans.iterator();
    while (localIterator.hasNext()) {
      ((DraweeSpan)localIterator.next()).onDetach();
    }
  }
  
  public void onDetachFromView(View paramView)
  {
    unbindFromView(paramView);
    onDetach();
  }
  
  public void setDraweeSpanChangedListener(DraweeSpanChangedListener paramDraweeSpanChangedListener)
  {
    mDraweeSpanChangedListener = paramDraweeSpanChangedListener;
  }
  
  public void setImageSpan(Context paramContext, DraweeHierarchy paramDraweeHierarchy, DraweeController paramDraweeController, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean, int paramInt5)
  {
    paramContext = DraweeHolder.create(paramDraweeHierarchy, paramContext);
    paramContext.setController(paramDraweeController);
    setImageSpan(paramContext, paramInt1, paramInt2, paramInt3, paramInt4, paramBoolean, paramInt5);
  }
  
  public void setImageSpan(Context paramContext, DraweeHierarchy paramDraweeHierarchy, DraweeController paramDraweeController, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, int paramInt4)
  {
    setImageSpan(paramContext, paramDraweeHierarchy, paramDraweeController, paramInt1, paramInt1, paramInt2, paramInt3, paramBoolean, paramInt4);
  }
  
  public void setImageSpan(DraweeHolder paramDraweeHolder, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean, int paramInt5)
  {
    if (paramInt2 >= length()) {
      return;
    }
    Object localObject = paramDraweeHolder.getTopLevelDrawable();
    if (localObject != null)
    {
      if (((Drawable)localObject).getBounds().isEmpty()) {
        ((Drawable)localObject).setBounds(0, 0, paramInt3, paramInt4);
      }
      ((Drawable)localObject).setCallback(mDrawableCallback);
    }
    localObject = new DraweeSpan(paramDraweeHolder, paramInt5);
    paramDraweeHolder = paramDraweeHolder.getController();
    if ((paramDraweeHolder instanceof AbstractDraweeController)) {
      ((AbstractDraweeController)paramDraweeHolder).addControllerListener(new DrawableChangedListener((DraweeSpan)localObject, paramBoolean, paramInt4));
    }
    mDraweeSpans.add(localObject);
    setSpan(localObject, paramInt1, paramInt2 + 1, 33);
  }
  
  public void setImageSpan(DraweeHolder paramDraweeHolder, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, int paramInt4)
  {
    setImageSpan(paramDraweeHolder, paramInt1, paramInt1, paramInt2, paramInt3, paramBoolean, paramInt4);
  }
  
  protected void unbindFromDrawable(Drawable paramDrawable)
  {
    if (paramDrawable != mBoundDrawable) {
      return;
    }
    mBoundDrawable = null;
  }
  
  protected void unbindFromPreviousComponent()
  {
    Object localObject = mBoundView;
    if (localObject != null) {
      unbindFromView((View)localObject);
    }
    localObject = mBoundDrawable;
    if (localObject != null) {
      unbindFromDrawable((Drawable)localObject);
    }
  }
  
  protected void unbindFromView(View paramView)
  {
    if (paramView != mBoundView) {
      return;
    }
    mBoundView = null;
  }
  
  private class DrawableCallback
    implements Drawable.Callback
  {
    private DrawableCallback() {}
    
    public void invalidateDrawable(Drawable paramDrawable)
    {
      if (mBoundView != null)
      {
        mBoundView.invalidate();
        return;
      }
      if (mBoundDrawable != null) {
        mBoundDrawable.invalidateSelf();
      }
    }
    
    public void scheduleDrawable(Drawable paramDrawable, Runnable paramRunnable, long paramLong)
    {
      if (mBoundView != null)
      {
        long l = SystemClock.uptimeMillis();
        mBoundView.postDelayed(paramRunnable, paramLong - l);
        return;
      }
      if (mBoundDrawable != null) {
        mBoundDrawable.scheduleSelf(paramRunnable, paramLong);
      }
    }
    
    public void unscheduleDrawable(Drawable paramDrawable, Runnable paramRunnable)
    {
      if (mBoundView != null)
      {
        mBoundView.removeCallbacks(paramRunnable);
        return;
      }
      if (mBoundDrawable != null) {
        mBoundDrawable.unscheduleSelf(paramRunnable);
      }
    }
  }
  
  private class DrawableChangedListener
    extends BaseControllerListener<ImageInfo>
  {
    private final DraweeSpan mDraweeSpan;
    private final boolean mEnableResizing;
    private final int mFixedHeight;
    
    public DrawableChangedListener(DraweeSpan paramDraweeSpan)
    {
      this(paramDraweeSpan, false);
    }
    
    public DrawableChangedListener(DraweeSpan paramDraweeSpan, boolean paramBoolean)
    {
      this(paramDraweeSpan, paramBoolean, -1);
    }
    
    public DrawableChangedListener(DraweeSpan paramDraweeSpan, boolean paramBoolean, int paramInt)
    {
      Preconditions.checkNotNull(paramDraweeSpan);
      mDraweeSpan = paramDraweeSpan;
      mEnableResizing = paramBoolean;
      mFixedHeight = paramInt;
    }
    
    public void onFinalImageSet(String paramString, ImageInfo paramImageInfo, Animatable paramAnimatable, Drawable paramDrawable)
    {
      if ((mEnableResizing) && (paramImageInfo != null) && (mDraweeSpan.getDraweeHolder().getTopLevelDrawable() != null))
      {
        paramString = mDraweeSpan.getDraweeHolder().getTopLevelDrawable();
        paramAnimatable = paramString.getBounds();
        int i = mFixedHeight;
        if (i != -1)
        {
          i = (int)(i / paramImageInfo.getHeight() * paramImageInfo.getWidth());
          if ((paramAnimatable.width() == i) && (paramAnimatable.height() == mFixedHeight)) {
            return;
          }
          paramString.setBounds(0, 0, i, mFixedHeight);
          if (mDraweeSpanChangedListener == null) {
            return;
          }
        }
        else
        {
          if ((paramAnimatable.width() == paramImageInfo.getWidth()) && (paramAnimatable.height() == paramImageInfo.getHeight())) {
            return;
          }
          paramString.setBounds(0, 0, paramImageInfo.getWidth(), paramImageInfo.getHeight());
          if (mDraweeSpanChangedListener == null) {
            return;
          }
        }
        mDraweeSpanChangedListener.onDraweeSpanChanged(DraweeSpanStringBuilder.this);
      }
    }
  }
  
  public static abstract interface DraweeSpanChangedListener
  {
    public abstract void onDraweeSpanChanged(DraweeSpanStringBuilder paramDraweeSpanStringBuilder);
  }
}
