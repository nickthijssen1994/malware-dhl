package com.facebook.drawee.backends.pipeline;

import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import android.util.DisplayMetrics;
import com.facebook.cache.common.SimpleCacheKey;
import com.facebook.cache.disk.FileCache;
import com.facebook.common.logging.FLog;
import com.facebook.drawee.view.SimpleDraweeView;
import com.facebook.imagepipeline.core.ImagePipeline;
import com.facebook.imagepipeline.core.ImagePipelineConfig;
import com.facebook.imagepipeline.core.ImagePipelineFactory;
import com.facebook.imagepipeline.core.NativeCodeSetup;
import com.facebook.imagepipeline.systrace.FrescoSystrace;
import com.facebook.soloader.nativeloader.NativeLoader;
import com.facebook.soloader.nativeloader.SystemDelegate;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Fresco
{
  private static final Class<?> TAG = Fresco.class;
  public static boolean isLog;
  private static Context mContext;
  private static PipelineDraweeControllerBuilderSupplier sDraweeControllerBuilderSupplier;
  private static volatile boolean sIsInitialized;
  
  private Fresco() {}
  
  public static void clearDiskCache()
  {
    getImagePipelineFactory().getMainFileCache().clearAll();
  }
  
  public static void clearMemoryCache()
  {
    getImagePipeline().clearMemoryCaches();
  }
  
  public static void destory() {}
  
  public static Context getContext()
  {
    return mContext;
  }
  
  public static File getDiskCacheDir()
  {
    return getImagePipelineFactory().getMainFileCache().getRootDir();
  }
  
  public static DisplayMetrics getDisplayMetrics()
  {
    return mContext.getResources().getDisplayMetrics();
  }
  
  public static PipelineDraweeControllerBuilderSupplier getDraweeControllerBuilderSupplier()
  {
    return sDraweeControllerBuilderSupplier;
  }
  
  public static ImagePipeline getImagePipeline()
  {
    return getImagePipelineFactory().getImagePipeline();
  }
  
  public static ImagePipelineFactory getImagePipelineFactory()
  {
    return ImagePipelineFactory.getInstance();
  }
  
  public static boolean hasBeenInitialized()
  {
    return sIsInitialized;
  }
  
  public static void initialize(Context paramContext, ImagePipelineConfig paramImagePipelineConfig, DraweeConfig paramDraweeConfig, boolean paramBoolean)
  {
    initialize(paramContext, paramImagePipelineConfig, paramDraweeConfig, paramBoolean, true);
  }
  
  public static void initialize(Context paramContext, ImagePipelineConfig paramImagePipelineConfig, DraweeConfig paramDraweeConfig, boolean paramBoolean1, boolean paramBoolean2)
  {
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.beginSection("Fresco#initialize");
    }
    if (sIsInitialized) {
      FLog.w(TAG, "Fresco has already been initialized! `Fresco.initialize(...)` should only be called 1 single time to avoid memory leaks!");
    } else {
      sIsInitialized = true;
    }
    NativeCodeSetup.setUseNativeCode(paramBoolean2);
    if (!NativeLoader.isInitialized()) {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.beginSection("Fresco.initialize->SoLoader.init");
      }
    }
    try
    {
      try
      {
        Object localObject = Class.forName("com.facebook.imagepipeline.nativecode.NativeCodeInitializer");
        localObject = ((Class)localObject).getMethod("init", new Class[] { Context.class });
        ((Method)localObject).invoke(null, new Object[] { paramContext });
        if (!FrescoSystrace.isTracing()) {
          break label197;
        }
      }
      catch (Throwable paramContext)
      {
        break label186;
      }
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      for (;;) {}
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;) {}
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;) {}
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;) {}
    }
    NativeLoader.init(new SystemDelegate());
    if (FrescoSystrace.isTracing())
    {
      break label180;
      NativeLoader.init(new SystemDelegate());
      if (FrescoSystrace.isTracing())
      {
        break label180;
        NativeLoader.init(new SystemDelegate());
        if (FrescoSystrace.isTracing())
        {
          break label180;
          NativeLoader.init(new SystemDelegate());
          if (FrescoSystrace.isTracing())
          {
            label180:
            FrescoSystrace.endSection();
            break label197;
            label186:
            if (FrescoSystrace.isTracing()) {
              FrescoSystrace.endSection();
            }
            throw paramContext;
          }
        }
      }
    }
    label197:
    paramContext = paramContext.getApplicationContext();
    mContext = paramContext;
    isLog = paramBoolean1;
    if (paramImagePipelineConfig == null) {
      ImagePipelineFactory.initialize(paramContext);
    } else {
      ImagePipelineFactory.initialize(paramImagePipelineConfig);
    }
    initializeDrawee(paramContext, paramDraweeConfig);
    if (FrescoSystrace.isTracing())
    {
      FrescoSystrace.endSection();
      return;
    }
  }
  
  public static void initialize(Context paramContext, ImagePipelineConfig paramImagePipelineConfig, boolean paramBoolean)
  {
    initialize(paramContext, paramImagePipelineConfig, null, paramBoolean, true);
  }
  
  public static void initialize(Context paramContext, ImagePipelineConfig paramImagePipelineConfig, boolean paramBoolean1, boolean paramBoolean2)
  {
    initialize(paramContext, paramImagePipelineConfig, null, paramBoolean1, paramBoolean2);
  }
  
  public static void initialize(Context paramContext, boolean paramBoolean)
  {
    initialize(paramContext, null, null, paramBoolean, true);
  }
  
  public static void initialize(Context paramContext, boolean paramBoolean1, boolean paramBoolean2)
  {
    initialize(paramContext, null, null, paramBoolean1, paramBoolean2);
  }
  
  private static void initializeDrawee(Context paramContext, DraweeConfig paramDraweeConfig)
  {
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.beginSection("Fresco.initializeDrawee");
    }
    sDraweeControllerBuilderSupplier = new PipelineDraweeControllerBuilderSupplier(paramContext, paramDraweeConfig);
    SimpleDraweeView.initialize(sDraweeControllerBuilderSupplier);
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.endSection();
    }
  }
  
  public static PipelineDraweeControllerBuilder newDraweeControllerBuilder()
  {
    return sDraweeControllerBuilderSupplier.getFolder();
  }
  
  public static void removeDiskCache(Uri paramUri)
  {
    paramUri = new SimpleCacheKey(paramUri.toString());
    getImagePipelineFactory().getMainFileCache().remove(paramUri);
  }
  
  public static void removeMemoryCache(Uri paramUri)
  {
    getImagePipeline().evictFromMemoryCache(paramUri);
  }
  
  public static void shutDown()
  {
    sDraweeControllerBuilderSupplier = null;
    SimpleDraweeView.shutDown();
    ImagePipelineFactory.shutDown();
  }
  
  public static class JDImageNetworkException
    extends Throwable
  {
    public String dnsIp;
    public boolean isDomainRequest;
    public String requestUrl;
    
    public JDImageNetworkException() {}
    
    public JDImageNetworkException(Throwable paramThrowable, boolean paramBoolean, String paramString1, String paramString2)
    {
      super();
      isDomainRequest = paramBoolean;
      requestUrl = paramString1;
      dnsIp = paramString2;
    }
  }
}
