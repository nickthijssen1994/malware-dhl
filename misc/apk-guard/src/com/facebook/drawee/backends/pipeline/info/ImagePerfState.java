package com.facebook.drawee.backends.pipeline.info;

import com.facebook.fresco.cache.common.DimensionsInfo;
import com.facebook.imagepipeline.image.ImageInfo;
import com.facebook.imagepipeline.request.ImageRequest;
import javax.annotation.Nullable;

public class ImagePerfState
{
  @Nullable
  private Object mCallerContext;
  @Nullable
  private String mComponentTag;
  private long mControllerCancelTimeMs = -1L;
  private long mControllerFailureTimeMs = -1L;
  private long mControllerFinalImageSetTimeMs = -1L;
  @Nullable
  private ImageRequest[] mControllerFirstAvailableImageRequests;
  @Nullable
  private String mControllerId;
  @Nullable
  private ImageRequest mControllerImageRequest;
  private long mControllerIntermediateImageSetTimeMs = -1L;
  @Nullable
  private ImageRequest mControllerLowResImageRequest;
  private long mControllerSubmitTimeMs = -1L;
  @Nullable
  private DimensionsInfo mDimensionsInfo;
  @Nullable
  private Throwable mErrorThrowable;
  private long mImageDrawTimeMs = -1L;
  @Nullable
  private ImageInfo mImageInfo;
  private int mImageLoadStatus = -1;
  private int mImageOrigin = 1;
  @Nullable
  private ImageRequest mImageRequest;
  private long mImageRequestEndTimeMs = -1L;
  private long mImageRequestStartTimeMs = -1L;
  private long mInvisibilityEventTimeMs = -1L;
  private boolean mIsPrefetch;
  private int mOnScreenHeightPx = -1;
  private int mOnScreenWidthPx = -1;
  @Nullable
  private String mRequestId;
  @Nullable
  private String mUltimateProducerName;
  private long mVisibilityEventTimeMs = -1L;
  private int mVisibilityState = -1;
  
  public ImagePerfState() {}
  
  public DimensionsInfo getDimensionsInfo()
  {
    return mDimensionsInfo;
  }
  
  public long getImageDrawTimeMs()
  {
    return mImageDrawTimeMs;
  }
  
  public int getImageLoadStatus()
  {
    return mImageLoadStatus;
  }
  
  public void reset()
  {
    mRequestId = null;
    mImageRequest = null;
    mCallerContext = null;
    mImageInfo = null;
    mControllerImageRequest = null;
    mControllerLowResImageRequest = null;
    mControllerFirstAvailableImageRequests = null;
    mImageOrigin = 1;
    mUltimateProducerName = null;
    mIsPrefetch = false;
    mOnScreenWidthPx = -1;
    mOnScreenHeightPx = -1;
    mErrorThrowable = null;
    mImageLoadStatus = -1;
    mVisibilityState = -1;
    mComponentTag = null;
    mDimensionsInfo = null;
    resetPointsTimestamps();
  }
  
  public void resetPointsTimestamps()
  {
    mImageRequestStartTimeMs = -1L;
    mImageRequestEndTimeMs = -1L;
    mControllerSubmitTimeMs = -1L;
    mControllerFinalImageSetTimeMs = -1L;
    mControllerFailureTimeMs = -1L;
    mControllerCancelTimeMs = -1L;
    mVisibilityEventTimeMs = -1L;
    mInvisibilityEventTimeMs = -1L;
    mImageDrawTimeMs = -1L;
  }
  
  public void setCallerContext(Object paramObject)
  {
    mCallerContext = paramObject;
  }
  
  public void setComponentTag(String paramString)
  {
    mComponentTag = paramString;
  }
  
  public void setControllerCancelTimeMs(long paramLong)
  {
    mControllerCancelTimeMs = paramLong;
  }
  
  public void setControllerFailureTimeMs(long paramLong)
  {
    mControllerFailureTimeMs = paramLong;
  }
  
  public void setControllerFinalImageSetTimeMs(long paramLong)
  {
    mControllerFinalImageSetTimeMs = paramLong;
  }
  
  public void setControllerId(String paramString)
  {
    mControllerId = paramString;
  }
  
  public void setControllerImageRequests(ImageRequest paramImageRequest1, ImageRequest paramImageRequest2, ImageRequest[] paramArrayOfImageRequest)
  {
    mControllerImageRequest = paramImageRequest1;
    mControllerLowResImageRequest = paramImageRequest2;
    mControllerFirstAvailableImageRequests = paramArrayOfImageRequest;
  }
  
  public void setControllerIntermediateImageSetTimeMs(long paramLong)
  {
    mControllerIntermediateImageSetTimeMs = paramLong;
  }
  
  public void setControllerSubmitTimeMs(long paramLong)
  {
    mControllerSubmitTimeMs = paramLong;
  }
  
  public void setDimensionsInfo(DimensionsInfo paramDimensionsInfo)
  {
    mDimensionsInfo = paramDimensionsInfo;
  }
  
  public void setErrorThrowable(Throwable paramThrowable)
  {
    mErrorThrowable = paramThrowable;
  }
  
  public void setImageDrawTimeMs(long paramLong)
  {
    mImageDrawTimeMs = paramLong;
  }
  
  public void setImageInfo(ImageInfo paramImageInfo)
  {
    mImageInfo = paramImageInfo;
  }
  
  public void setImageLoadStatus(int paramInt)
  {
    mImageLoadStatus = paramInt;
  }
  
  public void setImageOrigin(int paramInt)
  {
    mImageOrigin = paramInt;
  }
  
  public void setImageRequest(ImageRequest paramImageRequest)
  {
    mImageRequest = paramImageRequest;
  }
  
  public void setImageRequestEndTimeMs(long paramLong)
  {
    mImageRequestEndTimeMs = paramLong;
  }
  
  public void setImageRequestStartTimeMs(long paramLong)
  {
    mImageRequestStartTimeMs = paramLong;
  }
  
  public void setInvisibilityEventTimeMs(long paramLong)
  {
    mInvisibilityEventTimeMs = paramLong;
  }
  
  public void setOnScreenHeight(int paramInt)
  {
    mOnScreenHeightPx = paramInt;
  }
  
  public void setOnScreenWidth(int paramInt)
  {
    mOnScreenWidthPx = paramInt;
  }
  
  public void setPrefetch(boolean paramBoolean)
  {
    mIsPrefetch = paramBoolean;
  }
  
  public void setRequestId(String paramString)
  {
    mRequestId = paramString;
  }
  
  public void setUltimateProducerName(String paramString)
  {
    mUltimateProducerName = paramString;
  }
  
  public void setVisibilityEventTimeMs(long paramLong)
  {
    mVisibilityEventTimeMs = paramLong;
  }
  
  public void setVisible(boolean paramBoolean)
  {
    int i;
    if (paramBoolean) {
      i = 1;
    } else {
      i = 2;
    }
    mVisibilityState = i;
  }
  
  public ImagePerfData snapshot()
  {
    return new ImagePerfData(mControllerId, mRequestId, mImageRequest, mCallerContext, mImageInfo, mControllerImageRequest, mControllerLowResImageRequest, mControllerFirstAvailableImageRequests, mControllerSubmitTimeMs, mControllerIntermediateImageSetTimeMs, mControllerFinalImageSetTimeMs, mControllerFailureTimeMs, mControllerCancelTimeMs, mImageRequestStartTimeMs, mImageRequestEndTimeMs, mImageOrigin, mUltimateProducerName, mIsPrefetch, mOnScreenWidthPx, mOnScreenHeightPx, mErrorThrowable, mVisibilityState, mVisibilityEventTimeMs, mInvisibilityEventTimeMs, mComponentTag, mImageDrawTimeMs, mDimensionsInfo);
  }
}
