package com.facebook.common.references;

import android.graphics.Bitmap;
import com.facebook.common.internal.Objects;
import com.facebook.common.internal.Objects.ToStringHelper;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.internal.VisibleForTesting;
import com.facebook.common.logging.FLog;
import java.util.IdentityHashMap;
import java.util.Map;
import javax.annotation.concurrent.GuardedBy;

@VisibleForTesting
public class SharedReference<T>
{
  @GuardedBy("itself")
  private static final Map<Object, Integer> sLiveObjects = new IdentityHashMap();
  @GuardedBy("this")
  private int mRefCount;
  private final ResourceReleaser<T> mResourceReleaser;
  @GuardedBy("this")
  private T mValue;
  
  public SharedReference(Object paramObject, ResourceReleaser paramResourceReleaser)
  {
    mValue = Preconditions.checkNotNull(paramObject);
    mResourceReleaser = ((ResourceReleaser)Preconditions.checkNotNull(paramResourceReleaser));
    mRefCount = 1;
    addLiveReference(paramObject);
  }
  
  private static void addLiveReference(Object paramObject)
  {
    if (CloseableReference.useGc())
    {
      if ((paramObject instanceof Bitmap)) {
        return;
      }
      if ((paramObject instanceof HasBitmap)) {
        return;
      }
    }
    Map localMap = sLiveObjects;
    try
    {
      Integer localInteger = (Integer)sLiveObjects.get(paramObject);
      if (localInteger == null) {
        sLiveObjects.put(paramObject, Integer.valueOf(1));
      } else {
        sLiveObjects.put(paramObject, Integer.valueOf(localInteger.intValue() + 1));
      }
      return;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
  
  private int decreaseRefCount()
  {
    for (;;)
    {
      try
      {
        ensureValid();
        if (mRefCount > 0)
        {
          bool = true;
          Preconditions.checkArgument(bool);
          mRefCount -= 1;
          int i = mRefCount;
          return i;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      boolean bool = false;
    }
  }
  
  private void ensureValid()
  {
    if (isValid(this)) {
      return;
    }
    throw new NullReferenceException();
  }
  
  public static boolean isValid(SharedReference paramSharedReference)
  {
    return (paramSharedReference != null) && (paramSharedReference.isValid());
  }
  
  private static void removeLiveReference(Object paramObject)
  {
    Map localMap = sLiveObjects;
    try
    {
      Integer localInteger = (Integer)sLiveObjects.get(paramObject);
      if (localInteger == null) {
        FLog.wtf("SharedReference", "No entry in sLiveObjects for value of type %s", new Object[] { paramObject.getClass() });
      } else if (localInteger.intValue() == 1) {
        sLiveObjects.remove(paramObject);
      } else {
        sLiveObjects.put(paramObject, Integer.valueOf(localInteger.intValue() - 1));
      }
      return;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
  
  public static String reportData()
  {
    return Objects.toStringHelper("SharedReference").addValue("live_objects_count", sLiveObjects.size()).toString();
  }
  
  public void addReference()
  {
    try
    {
      ensureValid();
      mRefCount += 1;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  /* Error */
  public boolean addReferenceIfValid()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokevirtual 100	com/facebook/common/references/SharedReference:isValid	()Z
    //   6: ifeq +13 -> 19
    //   9: aload_0
    //   10: invokevirtual 144	com/facebook/common/references/SharedReference:addReference	()V
    //   13: iconst_1
    //   14: istore_1
    //   15: aload_0
    //   16: monitorexit
    //   17: iload_1
    //   18: ireturn
    //   19: iconst_0
    //   20: istore_1
    //   21: goto -6 -> 15
    //   24: astore_2
    //   25: aload_0
    //   26: monitorexit
    //   27: aload_2
    //   28: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	29	0	this	SharedReference
    //   14	7	1	bool	boolean
    //   24	4	2	localThrowable	Throwable
    // Exception table:
    //   from	to	target	type
    //   2	13	24	java/lang/Throwable
  }
  
  public void deleteReference()
  {
    if (decreaseRefCount() == 0) {
      try
      {
        Object localObject = mValue;
        mValue = null;
        mResourceReleaser.release(localObject);
        removeLiveReference(localObject);
        return;
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
  }
  
  /* Error */
  public boolean deleteReferenceIfValid()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokevirtual 100	com/facebook/common/references/SharedReference:isValid	()Z
    //   6: ifeq +13 -> 19
    //   9: aload_0
    //   10: invokevirtual 155	com/facebook/common/references/SharedReference:deleteReference	()V
    //   13: iconst_1
    //   14: istore_1
    //   15: aload_0
    //   16: monitorexit
    //   17: iload_1
    //   18: ireturn
    //   19: iconst_0
    //   20: istore_1
    //   21: goto -6 -> 15
    //   24: astore_2
    //   25: aload_0
    //   26: monitorexit
    //   27: aload_2
    //   28: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	29	0	this	SharedReference
    //   14	7	1	bool	boolean
    //   24	4	2	localThrowable	Throwable
    // Exception table:
    //   from	to	target	type
    //   2	13	24	java/lang/Throwable
  }
  
  public Object get()
  {
    try
    {
      Object localObject = mValue;
      return localObject;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getRefCountTestOnly()
  {
    try
    {
      int i = mRefCount;
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean isValid()
  {
    try
    {
      int i = mRefCount;
      boolean bool;
      if (i > 0) {
        bool = true;
      } else {
        bool = false;
      }
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static class NullReferenceException
    extends RuntimeException
  {
    public NullReferenceException()
    {
      super();
    }
  }
}
