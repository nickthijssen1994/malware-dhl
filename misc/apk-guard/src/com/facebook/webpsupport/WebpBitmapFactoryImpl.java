package com.facebook.webpsupport;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import com.facebook.common.internal.DoNotStrip;
import com.facebook.common.webp.BitmapCreator;
import com.facebook.common.webp.WebpBitmapFactory;
import com.facebook.common.webp.WebpBitmapFactory.WebpErrorLogger;
import com.facebook.common.webp.WebpSupportStatus;
import com.facebook.imagepipeline.nativecode.StaticWebpNativeLoader;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;

@DoNotStrip
public class WebpBitmapFactoryImpl
  implements WebpBitmapFactory
{
  private static final int HEADER_SIZE = 20;
  public static final boolean IN_BITMAP_SUPPORTED;
  private static final int IN_TEMP_BUFFER_SIZE = 8192;
  private static BitmapCreator mBitmapCreator;
  private static WebpBitmapFactory.WebpErrorLogger mWebpErrorLogger;
  
  static
  {
    boolean bool;
    if (Build.VERSION.SDK_INT >= 11) {
      bool = true;
    } else {
      bool = false;
    }
    IN_BITMAP_SUPPORTED = bool;
  }
  
  public WebpBitmapFactoryImpl() {}
  
  private static Bitmap createBitmap(int paramInt1, int paramInt2, BitmapFactory.Options paramOptions)
  {
    if ((IN_BITMAP_SUPPORTED) && (paramOptions != null) && (inBitmap != null) && (inBitmap.isMutable())) {
      return inBitmap;
    }
    return mBitmapCreator.createNakedBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
  }
  
  private static byte[] getInTempStorageFromOptions(BitmapFactory.Options paramOptions)
  {
    if ((paramOptions != null) && (inTempStorage != null)) {
      return inTempStorage;
    }
    return new byte['?'];
  }
  
  private static float getScaleFromOptions(BitmapFactory.Options paramOptions)
  {
    float f = 1.0F;
    if (paramOptions != null)
    {
      int i = inSampleSize;
      if (i > 1) {
        f = 1.0F / i;
      }
      if (inScaled)
      {
        i = inDensity;
        int j = inTargetDensity;
        int k = inScreenDensity;
        if ((i != 0) && (j != 0) && (i != k)) {
          return j / i;
        }
      }
    }
    else
    {
      return 1.0F;
    }
    return f;
  }
  
  private static byte[] getWebpHeader(InputStream paramInputStream, BitmapFactory.Options paramOptions)
  {
    paramInputStream.mark(20);
    if ((paramOptions != null) && (inTempStorage != null) && (inTempStorage.length >= 20)) {
      paramOptions = inTempStorage;
    } else {
      paramOptions = new byte[20];
    }
    try
    {
      paramInputStream.read(paramOptions, 0, 20);
      paramInputStream.reset();
      return paramOptions;
    }
    catch (IOException paramInputStream)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static Bitmap hookDecodeByteArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    return hookDecodeByteArray(paramArrayOfByte, paramInt1, paramInt2, null);
  }
  
  public static Bitmap hookDecodeByteArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2, BitmapFactory.Options paramOptions)
  {
    
    if ((WebpSupportStatus.sIsWebpSupportRequired) && (WebpSupportStatus.isWebpHeader(paramArrayOfByte, paramInt1, paramInt2)))
    {
      paramArrayOfByte = nativeDecodeByteArray(paramArrayOfByte, paramInt1, paramInt2, paramOptions, getScaleFromOptions(paramOptions), getInTempStorageFromOptions(paramOptions));
      if (paramArrayOfByte == null) {
        sendWebpErrorLog("webp_direct_decode_array");
      }
      setWebpBitmapOptions(paramArrayOfByte, paramOptions);
      return paramArrayOfByte;
    }
    paramArrayOfByte = originalDecodeByteArray(paramArrayOfByte, paramInt1, paramInt2, paramOptions);
    if (paramArrayOfByte == null) {
      sendWebpErrorLog("webp_direct_decode_array_failed_on_no_webp");
    }
    return paramArrayOfByte;
  }
  
  public static Bitmap hookDecodeFile(String paramString)
  {
    return hookDecodeFile(paramString, null);
  }
  
  /* Error */
  public static Bitmap hookDecodeFile(String paramString, BitmapFactory.Options paramOptions)
  {
    // Byte code:
    //   0: new 152	java/io/FileInputStream
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 154	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   8: astore_0
    //   9: aload_0
    //   10: aconst_null
    //   11: aload_1
    //   12: invokestatic 158	com/facebook/webpsupport/WebpBitmapFactoryImpl:hookDecodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   15: astore_1
    //   16: aload_0
    //   17: invokevirtual 161	java/io/InputStream:close	()V
    //   20: aload_1
    //   21: areturn
    //   22: astore_2
    //   23: aload_2
    //   24: athrow
    //   25: astore_1
    //   26: aload_2
    //   27: ifnull +10 -> 37
    //   30: aload_0
    //   31: invokevirtual 161	java/io/InputStream:close	()V
    //   34: goto +7 -> 41
    //   37: aload_0
    //   38: invokevirtual 161	java/io/InputStream:close	()V
    //   41: aload_1
    //   42: athrow
    //   43: astore_0
    //   44: aconst_null
    //   45: areturn
    //   46: astore_0
    //   47: aload_1
    //   48: areturn
    //   49: astore_0
    //   50: goto -9 -> 41
    //   53: astore_0
    //   54: aconst_null
    //   55: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	56	0	paramString	String
    //   0	56	1	paramOptions	BitmapFactory.Options
    //   22	5	2	localThrowable	Throwable
    // Exception table:
    //   from	to	target	type
    //   9	16	22	java/lang/Throwable
    //   23	25	25	java/lang/Throwable
    //   0	9	43	java/lang/Exception
    //   16	20	46	java/lang/Exception
    //   30	34	49	java/lang/Throwable
    //   37	41	53	java/lang/Exception
    //   41	43	53	java/lang/Exception
  }
  
  public static Bitmap hookDecodeFileDescriptor(FileDescriptor paramFileDescriptor)
  {
    return hookDecodeFileDescriptor(paramFileDescriptor, null, null);
  }
  
  /* Error */
  public static Bitmap hookDecodeFileDescriptor(FileDescriptor paramFileDescriptor, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    // Byte code:
    //   0: invokestatic 109	com/facebook/imagepipeline/nativecode/StaticWebpNativeLoader:ensure	()V
    //   3: aload_0
    //   4: lconst_0
    //   5: iconst_0
    //   6: invokestatic 170	com/facebook/webpsupport/WebpBitmapFactoryImpl:nativeSeek	(Ljava/io/FileDescriptor;JZ)J
    //   9: lstore_3
    //   10: lload_3
    //   11: ldc2_w 171
    //   14: lcmp
    //   15: ifeq +135 -> 150
    //   18: new 152	java/io/FileInputStream
    //   21: dup
    //   22: aload_0
    //   23: invokespecial 175	java/io/FileInputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   26: invokestatic 179	com/facebook/webpsupport/WebpBitmapFactoryImpl:wrapToMarkSupportedStream	(Ljava/io/InputStream;)Ljava/io/InputStream;
    //   29: astore 7
    //   31: aload 7
    //   33: aload_2
    //   34: invokestatic 181	com/facebook/webpsupport/WebpBitmapFactoryImpl:getWebpHeader	(Ljava/io/InputStream;Landroid/graphics/BitmapFactory$Options;)[B
    //   37: astore 6
    //   39: getstatic 114	com/facebook/common/webp/WebpSupportStatus:sIsWebpSupportRequired	Z
    //   42: istore 5
    //   44: iload 5
    //   46: ifeq +60 -> 106
    //   49: aload 6
    //   51: iconst_0
    //   52: bipush 20
    //   54: invokestatic 118	com/facebook/common/webp/WebpSupportStatus:isWebpHeader	([BII)Z
    //   57: istore 5
    //   59: iload 5
    //   61: ifeq +45 -> 106
    //   64: aload 7
    //   66: aload_2
    //   67: aload_2
    //   68: invokestatic 120	com/facebook/webpsupport/WebpBitmapFactoryImpl:getScaleFromOptions	(Landroid/graphics/BitmapFactory$Options;)F
    //   71: aload_2
    //   72: invokestatic 122	com/facebook/webpsupport/WebpBitmapFactoryImpl:getInTempStorageFromOptions	(Landroid/graphics/BitmapFactory$Options;)[B
    //   75: invokestatic 185	com/facebook/webpsupport/WebpBitmapFactoryImpl:nativeDecodeStream	(Ljava/io/InputStream;Landroid/graphics/BitmapFactory$Options;F[B)Landroid/graphics/Bitmap;
    //   78: astore 6
    //   80: aload 6
    //   82: astore_0
    //   83: aload 6
    //   85: ifnonnull +8 -> 93
    //   88: ldc -69
    //   90: invokestatic 132	com/facebook/webpsupport/WebpBitmapFactoryImpl:sendWebpErrorLog	(Ljava/lang/String;)V
    //   93: aload_1
    //   94: invokestatic 191	com/facebook/webpsupport/WebpBitmapFactoryImpl:setPaddingDefaultValues	(Landroid/graphics/Rect;)V
    //   97: aload 6
    //   99: aload_2
    //   100: invokestatic 136	com/facebook/webpsupport/WebpBitmapFactoryImpl:setWebpBitmapOptions	(Landroid/graphics/Bitmap;Landroid/graphics/BitmapFactory$Options;)V
    //   103: goto +32 -> 135
    //   106: aload_0
    //   107: lload_3
    //   108: iconst_1
    //   109: invokestatic 170	com/facebook/webpsupport/WebpBitmapFactoryImpl:nativeSeek	(Ljava/io/FileDescriptor;JZ)J
    //   112: pop2
    //   113: aload_0
    //   114: aload_1
    //   115: aload_2
    //   116: invokestatic 194	com/facebook/webpsupport/WebpBitmapFactoryImpl:originalDecodeFileDescriptor	(Ljava/io/FileDescriptor;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   119: astore_2
    //   120: aload_2
    //   121: astore_1
    //   122: aload_1
    //   123: astore_0
    //   124: aload_2
    //   125: ifnonnull +10 -> 135
    //   128: ldc -60
    //   130: invokestatic 132	com/facebook/webpsupport/WebpBitmapFactoryImpl:sendWebpErrorLog	(Ljava/lang/String;)V
    //   133: aload_1
    //   134: astore_0
    //   135: aload 7
    //   137: invokevirtual 161	java/io/InputStream:close	()V
    //   140: aload_0
    //   141: areturn
    //   142: astore_0
    //   143: aload 7
    //   145: invokevirtual 161	java/io/InputStream:close	()V
    //   148: aload_0
    //   149: athrow
    //   150: new 152	java/io/FileInputStream
    //   153: dup
    //   154: aload_0
    //   155: invokespecial 175	java/io/FileInputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   158: aload_1
    //   159: aload_2
    //   160: invokestatic 158	com/facebook/webpsupport/WebpBitmapFactoryImpl:hookDecodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   163: astore_0
    //   164: aload_1
    //   165: invokestatic 191	com/facebook/webpsupport/WebpBitmapFactoryImpl:setPaddingDefaultValues	(Landroid/graphics/Rect;)V
    //   168: aload_0
    //   169: areturn
    //   170: astore_1
    //   171: aload_0
    //   172: areturn
    //   173: astore_1
    //   174: goto -26 -> 148
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	177	0	paramFileDescriptor	FileDescriptor
    //   0	177	1	paramRect	Rect
    //   0	177	2	paramOptions	BitmapFactory.Options
    //   9	99	3	l	long
    //   42	18	5	bool	boolean
    //   37	61	6	localObject	Object
    //   29	115	7	localInputStream	InputStream
    // Exception table:
    //   from	to	target	type
    //   31	44	142	java/lang/Throwable
    //   49	59	142	java/lang/Throwable
    //   64	80	142	java/lang/Throwable
    //   88	93	142	java/lang/Throwable
    //   93	103	142	java/lang/Throwable
    //   106	120	142	java/lang/Throwable
    //   128	133	142	java/lang/Throwable
    //   135	140	170	java/lang/Throwable
    //   143	148	173	java/lang/Throwable
  }
  
  public static Bitmap hookDecodeResource(Resources paramResources, int paramInt)
  {
    return hookDecodeResource(paramResources, paramInt, null);
  }
  
  public static Bitmap hookDecodeResource(Resources paramResources, int paramInt, BitmapFactory.Options paramOptions)
  {
    Object localObject2 = new TypedValue();
    Object localObject1 = null;
    try
    {
      localInputStream = paramResources.openRawResource(paramInt, (TypedValue)localObject2);
      try
      {
        localObject2 = hookDecodeResourceStream(paramResources, (TypedValue)localObject2, localInputStream, null, paramOptions);
        paramResources = (Resources)localObject2;
        if (localInputStream != null) {}
        try
        {
          localInputStream.close();
        }
        catch (Throwable localThrowable2)
        {
          for (;;) {}
        }
      }
      catch (Throwable localThrowable1)
      {
        try
        {
          localInputStream.close();
          paramResources = (Resources)localObject2;
        }
        catch (Exception paramResources)
        {
          for (;;)
          {
            paramResources = localThrowable1;
          }
        }
        localThrowable1 = localThrowable1;
        try
        {
          throw localThrowable1;
        }
        catch (Throwable paramResources)
        {
          if (localInputStream != null) {
            if (localThrowable1 == null) {}
          }
        }
      }
    }
    catch (Exception paramResources)
    {
      for (;;)
      {
        InputStream localInputStream;
        label82:
        paramResources = localObject1;
      }
    }
    try
    {
      localInputStream.close();
      throw paramResources;
    }
    catch (Exception paramResources)
    {
      paramResources = localObject1;
      break label82;
    }
    if ((IN_BITMAP_SUPPORTED) && (paramResources == null) && (paramOptions != null))
    {
      if (inBitmap == null) {
        return paramResources;
      }
      throw new IllegalArgumentException("Problem decoding into existing bitmap");
    }
    return paramResources;
  }
  
  public static Bitmap hookDecodeResourceStream(Resources paramResources, TypedValue paramTypedValue, InputStream paramInputStream, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    BitmapFactory.Options localOptions = paramOptions;
    if (paramOptions == null) {
      localOptions = new BitmapFactory.Options();
    }
    if ((inDensity == 0) && (paramTypedValue != null))
    {
      int i = density;
      if (i == 0) {
        i = 160;
      }
      while (i != 65535)
      {
        inDensity = i;
        break;
      }
    }
    if ((inTargetDensity == 0) && (paramResources != null)) {
      inTargetDensity = getDisplayMetricsdensityDpi;
    }
    return hookDecodeStream(paramInputStream, paramRect, localOptions);
  }
  
  public static Bitmap hookDecodeStream(InputStream paramInputStream)
  {
    return hookDecodeStream(paramInputStream, null, null);
  }
  
  public static Bitmap hookDecodeStream(InputStream paramInputStream, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    StaticWebpNativeLoader.ensure();
    paramInputStream = wrapToMarkSupportedStream(paramInputStream);
    byte[] arrayOfByte = getWebpHeader(paramInputStream, paramOptions);
    if ((WebpSupportStatus.sIsWebpSupportRequired) && (WebpSupportStatus.isWebpHeader(arrayOfByte, 0, 20)))
    {
      paramInputStream = nativeDecodeStream(paramInputStream, paramOptions, getScaleFromOptions(paramOptions), getInTempStorageFromOptions(paramOptions));
      if (paramInputStream == null) {
        sendWebpErrorLog("webp_direct_decode_stream");
      }
      setWebpBitmapOptions(paramInputStream, paramOptions);
      setPaddingDefaultValues(paramRect);
      return paramInputStream;
    }
    paramInputStream = originalDecodeStream(paramInputStream, paramRect, paramOptions);
    if (paramInputStream == null) {
      sendWebpErrorLog("webp_direct_decode_stream_failed_on_no_webp");
    }
    return paramInputStream;
  }
  
  private static native Bitmap nativeDecodeByteArray(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, BitmapFactory.Options paramOptions, float paramFloat, byte[] paramArrayOfByte2);
  
  private static native Bitmap nativeDecodeStream(InputStream paramInputStream, BitmapFactory.Options paramOptions, float paramFloat, byte[] paramArrayOfByte);
  
  private static native long nativeSeek(FileDescriptor paramFileDescriptor, long paramLong, boolean paramBoolean);
  
  private static Bitmap originalDecodeByteArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    return BitmapFactory.decodeByteArray(paramArrayOfByte, paramInt1, paramInt2);
  }
  
  private static Bitmap originalDecodeByteArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2, BitmapFactory.Options paramOptions)
  {
    return BitmapFactory.decodeByteArray(paramArrayOfByte, paramInt1, paramInt2, paramOptions);
  }
  
  private static Bitmap originalDecodeFile(String paramString)
  {
    return BitmapFactory.decodeFile(paramString);
  }
  
  private static Bitmap originalDecodeFile(String paramString, BitmapFactory.Options paramOptions)
  {
    return BitmapFactory.decodeFile(paramString, paramOptions);
  }
  
  private static Bitmap originalDecodeFileDescriptor(FileDescriptor paramFileDescriptor)
  {
    return BitmapFactory.decodeFileDescriptor(paramFileDescriptor);
  }
  
  private static Bitmap originalDecodeFileDescriptor(FileDescriptor paramFileDescriptor, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    return BitmapFactory.decodeFileDescriptor(paramFileDescriptor, paramRect, paramOptions);
  }
  
  private static Bitmap originalDecodeResource(Resources paramResources, int paramInt)
  {
    return BitmapFactory.decodeResource(paramResources, paramInt);
  }
  
  private static Bitmap originalDecodeResource(Resources paramResources, int paramInt, BitmapFactory.Options paramOptions)
  {
    return BitmapFactory.decodeResource(paramResources, paramInt, paramOptions);
  }
  
  private static Bitmap originalDecodeResourceStream(Resources paramResources, TypedValue paramTypedValue, InputStream paramInputStream, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    return BitmapFactory.decodeResourceStream(paramResources, paramTypedValue, paramInputStream, paramRect, paramOptions);
  }
  
  private static Bitmap originalDecodeStream(InputStream paramInputStream)
  {
    return BitmapFactory.decodeStream(paramInputStream);
  }
  
  private static Bitmap originalDecodeStream(InputStream paramInputStream, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    return BitmapFactory.decodeStream(paramInputStream, paramRect, paramOptions);
  }
  
  private static void sendWebpErrorLog(String paramString)
  {
    WebpBitmapFactory.WebpErrorLogger localWebpErrorLogger = mWebpErrorLogger;
    if (localWebpErrorLogger != null) {
      localWebpErrorLogger.onWebpErrorLog(paramString, "decoding_failure");
    }
  }
  
  private static void setBitmapSize(BitmapFactory.Options paramOptions, int paramInt1, int paramInt2)
  {
    if (paramOptions != null)
    {
      outWidth = paramInt1;
      outHeight = paramInt2;
    }
  }
  
  private static void setDensityFromOptions(Bitmap paramBitmap, BitmapFactory.Options paramOptions)
  {
    if (paramBitmap != null)
    {
      if (paramOptions == null) {
        return;
      }
      int i = inDensity;
      if (i != 0)
      {
        paramBitmap.setDensity(i);
        int j = inTargetDensity;
        if (j != 0)
        {
          if (i == j) {
            return;
          }
          if (i == inScreenDensity) {
            return;
          }
          if (!inScaled) {
            return;
          }
          paramBitmap.setDensity(j);
        }
      }
      else if ((IN_BITMAP_SUPPORTED) && (inBitmap != null))
      {
        paramBitmap.setDensity(160);
      }
    }
  }
  
  private static boolean setOutDimensions(BitmapFactory.Options paramOptions, int paramInt1, int paramInt2)
  {
    if ((paramOptions != null) && (inJustDecodeBounds))
    {
      outWidth = paramInt1;
      outHeight = paramInt2;
      return true;
    }
    return false;
  }
  
  private static void setPaddingDefaultValues(Rect paramRect)
  {
    if (paramRect != null)
    {
      top = -1;
      left = -1;
      bottom = -1;
      right = -1;
    }
  }
  
  private static void setWebpBitmapOptions(Bitmap paramBitmap, BitmapFactory.Options paramOptions)
  {
    setDensityFromOptions(paramBitmap, paramOptions);
    if (paramOptions != null) {
      outMimeType = "image/webp";
    }
  }
  
  private static boolean shouldPremultiply(BitmapFactory.Options paramOptions)
  {
    if ((Build.VERSION.SDK_INT >= 19) && (paramOptions != null)) {
      return inPremultiplied;
    }
    return true;
  }
  
  private static InputStream wrapToMarkSupportedStream(InputStream paramInputStream)
  {
    if (!paramInputStream.markSupported()) {
      return new BufferedInputStream(paramInputStream, 20);
    }
    return paramInputStream;
  }
  
  public Bitmap decodeByteArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2, BitmapFactory.Options paramOptions)
  {
    return hookDecodeByteArray(paramArrayOfByte, paramInt1, paramInt2, paramOptions);
  }
  
  public Bitmap decodeFile(String paramString, BitmapFactory.Options paramOptions)
  {
    return hookDecodeFile(paramString, paramOptions);
  }
  
  public Bitmap decodeFileDescriptor(FileDescriptor paramFileDescriptor, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    return hookDecodeFileDescriptor(paramFileDescriptor, paramRect, paramOptions);
  }
  
  public Bitmap decodeStream(InputStream paramInputStream, Rect paramRect, BitmapFactory.Options paramOptions)
  {
    return hookDecodeStream(paramInputStream, paramRect, paramOptions);
  }
  
  public void setBitmapCreator(BitmapCreator paramBitmapCreator)
  {
    mBitmapCreator = paramBitmapCreator;
  }
  
  public void setWebpErrorLogger(WebpBitmapFactory.WebpErrorLogger paramWebpErrorLogger)
  {
    mWebpErrorLogger = paramWebpErrorLogger;
  }
}
