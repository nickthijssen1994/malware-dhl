package com.facebook.fresco.animation.bitmap.wrapper;

import android.graphics.Bitmap;
import android.graphics.Rect;
import com.facebook.common.logging.FLog;
import com.facebook.common.references.CloseableReference;
import com.facebook.fresco.animation.bitmap.BitmapFrameCache;
import com.facebook.fresco.animation.bitmap.BitmapFrameRenderer;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend;
import com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor;
import com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor.Callback;

public class AnimatedDrawableBackendFrameRenderer
  implements BitmapFrameRenderer
{
  private static final Class<?> TAG = AnimatedDrawableBackendFrameRenderer.class;
  private AnimatedDrawableBackend mAnimatedDrawableBackend;
  private AnimatedImageCompositor mAnimatedImageCompositor;
  private final BitmapFrameCache mBitmapFrameCache;
  private final AnimatedImageCompositor.Callback mCallback = new AnimatedImageCompositor.Callback()
  {
    public CloseableReference getCachedBitmap(int paramAnonymousInt)
    {
      return mBitmapFrameCache.getCachedFrame(paramAnonymousInt);
    }
    
    public void onIntermediateResult(int paramAnonymousInt, Bitmap paramAnonymousBitmap) {}
  };
  
  public AnimatedDrawableBackendFrameRenderer(BitmapFrameCache paramBitmapFrameCache, AnimatedDrawableBackend paramAnimatedDrawableBackend)
  {
    mBitmapFrameCache = paramBitmapFrameCache;
    mAnimatedDrawableBackend = paramAnimatedDrawableBackend;
    mAnimatedImageCompositor = new AnimatedImageCompositor(mAnimatedDrawableBackend, mCallback);
  }
  
  public int getIntrinsicHeight()
  {
    return mAnimatedDrawableBackend.getHeight();
  }
  
  public int getIntrinsicWidth()
  {
    return mAnimatedDrawableBackend.getWidth();
  }
  
  public boolean renderFrame(int paramInt, Bitmap paramBitmap)
  {
    AnimatedImageCompositor localAnimatedImageCompositor = mAnimatedImageCompositor;
    try
    {
      localAnimatedImageCompositor.renderFrame(paramInt, paramBitmap);
      return true;
    }
    catch (IllegalStateException paramBitmap)
    {
      FLog.e(TAG, paramBitmap, "Rendering of frame unsuccessful. Frame number: %d", new Object[] { Integer.valueOf(paramInt) });
    }
    return false;
  }
  
  public void setBounds(Rect paramRect)
  {
    paramRect = mAnimatedDrawableBackend.forNewBounds(paramRect);
    if (paramRect != mAnimatedDrawableBackend)
    {
      mAnimatedDrawableBackend = paramRect;
      mAnimatedImageCompositor = new AnimatedImageCompositor(mAnimatedDrawableBackend, mCallback);
    }
  }
}
