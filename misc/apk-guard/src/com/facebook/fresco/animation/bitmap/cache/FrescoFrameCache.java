package com.facebook.fresco.animation.bitmap.cache;

import android.util.SparseArray;
import com.facebook.common.logging.FLog;
import com.facebook.common.references.CloseableReference;
import com.facebook.fresco.animation.bitmap.BitmapFrameCache;
import com.facebook.fresco.animation.bitmap.BitmapFrameCache.FrameCacheListener;
import com.facebook.imagepipeline.animated.impl.AnimatedFrameCache;
import com.facebook.imagepipeline.image.CloseableBitmap;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.image.CloseableStaticBitmap;
import com.facebook.imagepipeline.image.ImmutableQualityInfo;
import com.facebook.imageutils.BitmapUtil;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;

public class FrescoFrameCache
  implements BitmapFrameCache
{
  private static final Class<?> BYTE = FrescoFrameCache.class;
  private final AnimatedFrameCache mAnimatedFrameCache;
  private final boolean mEnableBitmapReusing;
  @Nullable
  @GuardedBy("this")
  private CloseableReference<CloseableImage> mLastRenderedItem;
  @GuardedBy("this")
  private final SparseArray<CloseableReference<CloseableImage>> mPreparedPendingFrames;
  
  public FrescoFrameCache(AnimatedFrameCache paramAnimatedFrameCache, boolean paramBoolean)
  {
    mAnimatedFrameCache = paramAnimatedFrameCache;
    mEnableBitmapReusing = paramBoolean;
    mPreparedPendingFrames = new SparseArray();
  }
  
  static CloseableReference convertToBitmapReferenceAndClose(CloseableReference paramCloseableReference)
  {
    try
    {
      boolean bool = CloseableReference.isValid(paramCloseableReference);
      if (bool)
      {
        bool = paramCloseableReference.get() instanceof CloseableStaticBitmap;
        if (bool)
        {
          Object localObject = (CloseableStaticBitmap)paramCloseableReference.get();
          if (localObject != null)
          {
            localObject = ((CloseableStaticBitmap)localObject).cloneUnderlyingBitmapReference();
            CloseableReference.closeSafely(paramCloseableReference);
            return localObject;
          }
        }
      }
      CloseableReference.closeSafely(paramCloseableReference);
      return null;
    }
    catch (Throwable localThrowable)
    {
      CloseableReference.closeSafely(paramCloseableReference);
      throw localThrowable;
    }
  }
  
  private static CloseableReference createImageReference(CloseableReference paramCloseableReference)
  {
    return CloseableReference.of(new CloseableStaticBitmap(paramCloseableReference, ImmutableQualityInfo.FULL_QUALITY, 0));
  }
  
  private static int getBitmapSizeBytes(CloseableReference paramCloseableReference)
  {
    if (!CloseableReference.isValid(paramCloseableReference)) {
      return 0;
    }
    return getBitmapSizeBytes((CloseableImage)paramCloseableReference.get());
  }
  
  private static int getBitmapSizeBytes(CloseableImage paramCloseableImage)
  {
    if (!(paramCloseableImage instanceof CloseableBitmap)) {
      return 0;
    }
    return BitmapUtil.getSizeInBytes(((CloseableBitmap)paramCloseableImage).getUnderlyingBitmap());
  }
  
  private int getPreparedPendingFramesSizeBytes()
  {
    int i = 0;
    int j = 0;
    try
    {
      while (i < mPreparedPendingFrames.size())
      {
        int k = getBitmapSizeBytes((CloseableReference)mPreparedPendingFrames.valueAt(i));
        j += k;
        i += 1;
      }
      return j;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void removePreparedReference(int paramInt)
  {
    try
    {
      CloseableReference localCloseableReference = (CloseableReference)mPreparedPendingFrames.get(paramInt);
      if (localCloseableReference != null)
      {
        mPreparedPendingFrames.delete(paramInt);
        CloseableReference.closeSafely(localCloseableReference);
        FLog.v(BYTE, "removePreparedReference(%d) removed. Pending frames: %s", Integer.valueOf(paramInt), mPreparedPendingFrames);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void clear()
  {
    try
    {
      CloseableReference.closeSafely(mLastRenderedItem);
      mLastRenderedItem = null;
      int i = 0;
      while (i < mPreparedPendingFrames.size())
      {
        CloseableReference.closeSafely((CloseableReference)mPreparedPendingFrames.valueAt(i));
        i += 1;
      }
      mPreparedPendingFrames.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean contains(int paramInt)
  {
    try
    {
      boolean bool = mAnimatedFrameCache.contains(paramInt);
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public CloseableReference getBitmapToReuseForFrame(int paramInt1, int paramInt2, int paramInt3)
  {
    try
    {
      boolean bool = mEnableBitmapReusing;
      if (!bool) {
        return null;
      }
      CloseableReference localCloseableReference = convertToBitmapReferenceAndClose(mAnimatedFrameCache.getForReuse());
      return localCloseableReference;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public CloseableReference getCachedFrame(int paramInt)
  {
    try
    {
      CloseableReference localCloseableReference = convertToBitmapReferenceAndClose(mAnimatedFrameCache.cache(paramInt));
      return localCloseableReference;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public CloseableReference getFallbackFrame(int paramInt)
  {
    try
    {
      CloseableReference localCloseableReference = convertToBitmapReferenceAndClose(CloseableReference.cloneOrNull(mLastRenderedItem));
      return localCloseableReference;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getSizeInBytes()
  {
    try
    {
      int i = getBitmapSizeBytes(mLastRenderedItem);
      int j = getPreparedPendingFramesSizeBytes();
      return i + j;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  /* Error */
  public void onFramePrepared(int paramInt1, CloseableReference paramCloseableReference, int paramInt2)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_2
    //   3: invokestatic 167	com/facebook/common/internal/Preconditions:checkNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
    //   6: pop
    //   7: aconst_null
    //   8: astore 4
    //   10: aload_2
    //   11: invokestatic 169	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:createImageReference	(Lcom/facebook/common/references/CloseableReference;)Lcom/facebook/common/references/CloseableReference;
    //   14: astore 5
    //   16: aload 5
    //   18: astore_2
    //   19: aload 5
    //   21: ifnonnull +11 -> 32
    //   24: aload 5
    //   26: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   29: aload_0
    //   30: monitorexit
    //   31: return
    //   32: aload_2
    //   33: astore 4
    //   35: aload_0
    //   36: getfield 34	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mAnimatedFrameCache	Lcom/facebook/imagepipeline/animated/impl/AnimatedFrameCache;
    //   39: iload_1
    //   40: aload 5
    //   42: invokevirtual 172	com/facebook/imagepipeline/animated/impl/AnimatedFrameCache:cache	(ILcom/facebook/common/references/CloseableReference;)Lcom/facebook/common/references/CloseableReference;
    //   45: astore 6
    //   47: aload_2
    //   48: astore 4
    //   50: aload 6
    //   52: invokestatic 51	com/facebook/common/references/CloseableReference:isValid	(Lcom/facebook/common/references/CloseableReference;)Z
    //   55: ifeq +52 -> 107
    //   58: aload_2
    //   59: astore 4
    //   61: aload_0
    //   62: getfield 41	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mPreparedPendingFrames	Landroid/util/SparseArray;
    //   65: iload_1
    //   66: invokevirtual 113	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   69: checkcast 47	com/facebook/common/references/CloseableReference
    //   72: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   75: aload_2
    //   76: astore 4
    //   78: aload_0
    //   79: getfield 41	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mPreparedPendingFrames	Landroid/util/SparseArray;
    //   82: iload_1
    //   83: aload 6
    //   85: invokevirtual 176	android/util/SparseArray:put	(ILjava/lang/Object;)V
    //   88: aload_2
    //   89: astore 4
    //   91: getstatic 27	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:BYTE	Ljava/lang/Class;
    //   94: ldc -78
    //   96: iload_1
    //   97: invokestatic 124	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   100: aload_0
    //   101: getfield 41	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mPreparedPendingFrames	Landroid/util/SparseArray;
    //   104: invokestatic 130	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
    //   107: aload 5
    //   109: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   112: aload_0
    //   113: monitorexit
    //   114: return
    //   115: astore_2
    //   116: aload 4
    //   118: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   121: aload_2
    //   122: athrow
    //   123: astore_2
    //   124: aload_0
    //   125: monitorexit
    //   126: aload_2
    //   127: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	128	0	this	FrescoFrameCache
    //   0	128	1	paramInt1	int
    //   0	128	2	paramCloseableReference	CloseableReference
    //   0	128	3	paramInt2	int
    //   8	109	4	localCloseableReference1	CloseableReference
    //   14	94	5	localCloseableReference2	CloseableReference
    //   45	39	6	localCloseableReference3	CloseableReference
    // Exception table:
    //   from	to	target	type
    //   10	16	115	java/lang/Throwable
    //   35	47	115	java/lang/Throwable
    //   50	58	115	java/lang/Throwable
    //   61	75	115	java/lang/Throwable
    //   78	88	115	java/lang/Throwable
    //   91	107	115	java/lang/Throwable
    //   2	7	123	java/lang/Throwable
    //   24	29	123	java/lang/Throwable
    //   107	112	123	java/lang/Throwable
    //   116	123	123	java/lang/Throwable
  }
  
  /* Error */
  public void onFrameRendered(int paramInt1, CloseableReference paramCloseableReference, int paramInt2)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_2
    //   3: invokestatic 167	com/facebook/common/internal/Preconditions:checkNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
    //   6: pop
    //   7: aload_0
    //   8: iload_1
    //   9: invokespecial 181	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:removePreparedReference	(I)V
    //   12: aconst_null
    //   13: astore 4
    //   15: aload_2
    //   16: invokestatic 169	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:createImageReference	(Lcom/facebook/common/references/CloseableReference;)Lcom/facebook/common/references/CloseableReference;
    //   19: astore 5
    //   21: aload 5
    //   23: astore_2
    //   24: aload 5
    //   26: ifnull +30 -> 56
    //   29: aload_2
    //   30: astore 4
    //   32: aload_0
    //   33: getfield 133	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mLastRenderedItem	Lcom/facebook/common/references/CloseableReference;
    //   36: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   39: aload_2
    //   40: astore 4
    //   42: aload_0
    //   43: aload_0
    //   44: getfield 34	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mAnimatedFrameCache	Lcom/facebook/imagepipeline/animated/impl/AnimatedFrameCache;
    //   47: iload_1
    //   48: aload 5
    //   50: invokevirtual 172	com/facebook/imagepipeline/animated/impl/AnimatedFrameCache:cache	(ILcom/facebook/common/references/CloseableReference;)Lcom/facebook/common/references/CloseableReference;
    //   53: putfield 133	com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache:mLastRenderedItem	Lcom/facebook/common/references/CloseableReference;
    //   56: aload 5
    //   58: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   61: aload_0
    //   62: monitorexit
    //   63: return
    //   64: astore_2
    //   65: aload 4
    //   67: invokestatic 65	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
    //   70: aload_2
    //   71: athrow
    //   72: astore_2
    //   73: aload_0
    //   74: monitorexit
    //   75: aload_2
    //   76: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	77	0	this	FrescoFrameCache
    //   0	77	1	paramInt1	int
    //   0	77	2	paramCloseableReference	CloseableReference
    //   0	77	3	paramInt2	int
    //   13	53	4	localCloseableReference1	CloseableReference
    //   19	38	5	localCloseableReference2	CloseableReference
    // Exception table:
    //   from	to	target	type
    //   15	21	64	java/lang/Throwable
    //   32	39	64	java/lang/Throwable
    //   42	56	64	java/lang/Throwable
    //   2	12	72	java/lang/Throwable
    //   56	61	72	java/lang/Throwable
    //   65	72	72	java/lang/Throwable
  }
  
  public void setFrameCacheListener(BitmapFrameCache.FrameCacheListener paramFrameCacheListener) {}
}
