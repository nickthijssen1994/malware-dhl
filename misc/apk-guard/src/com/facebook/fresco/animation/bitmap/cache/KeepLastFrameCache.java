package com.facebook.fresco.animation.bitmap.cache;

import android.graphics.Bitmap;
import com.facebook.common.references.CloseableReference;
import com.facebook.fresco.animation.bitmap.BitmapFrameCache;
import com.facebook.fresco.animation.bitmap.BitmapFrameCache.FrameCacheListener;
import com.facebook.imageutils.BitmapUtil;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;

public class KeepLastFrameCache
  implements BitmapFrameCache
{
  private static final int FRAME_NUMBER_UNSET = -1;
  @Nullable
  private BitmapFrameCache.FrameCacheListener mFrameCacheListener;
  @Nullable
  @GuardedBy("this")
  private CloseableReference<Bitmap> mLastBitmapReference;
  private int mLastFrameNumber = -1;
  
  public KeepLastFrameCache() {}
  
  private void closeAndResetLastBitmapReference()
  {
    try
    {
      if ((mFrameCacheListener != null) && (mLastFrameNumber != -1)) {
        mFrameCacheListener.onFrameEvicted(this, mLastFrameNumber);
      }
      CloseableReference.closeSafely(mLastBitmapReference);
      mLastBitmapReference = null;
      mLastFrameNumber = -1;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void clear()
  {
    try
    {
      closeAndResetLastBitmapReference();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean contains(int paramInt)
  {
    try
    {
      if (paramInt == mLastFrameNumber)
      {
        bool = CloseableReference.isValid(mLastBitmapReference);
        if (bool)
        {
          bool = true;
          break label29;
        }
      }
      boolean bool = false;
      label29:
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  /* Error */
  public CloseableReference getBitmapToReuseForFrame(int paramInt1, int paramInt2, int paramInt3)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 39	com/facebook/fresco/animation/bitmap/cache/KeepLastFrameCache:mLastBitmapReference	Lcom/facebook/common/references/CloseableReference;
    //   6: invokestatic 60	com/facebook/common/references/CloseableReference:cloneOrNull	(Lcom/facebook/common/references/CloseableReference;)Lcom/facebook/common/references/CloseableReference;
    //   9: astore 4
    //   11: aload_0
    //   12: invokespecial 48	com/facebook/fresco/animation/bitmap/cache/KeepLastFrameCache:closeAndResetLastBitmapReference	()V
    //   15: aload_0
    //   16: monitorexit
    //   17: aload 4
    //   19: areturn
    //   20: astore 4
    //   22: aload_0
    //   23: invokespecial 48	com/facebook/fresco/animation/bitmap/cache/KeepLastFrameCache:closeAndResetLastBitmapReference	()V
    //   26: aload 4
    //   28: athrow
    //   29: astore 4
    //   31: aload_0
    //   32: monitorexit
    //   33: aload 4
    //   35: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	36	0	this	KeepLastFrameCache
    //   0	36	1	paramInt1	int
    //   0	36	2	paramInt2	int
    //   0	36	3	paramInt3	int
    //   9	9	4	localCloseableReference	CloseableReference
    //   20	7	4	localThrowable1	Throwable
    //   29	5	4	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   2	11	20	java/lang/Throwable
    //   11	15	29	java/lang/Throwable
    //   22	29	29	java/lang/Throwable
  }
  
  public CloseableReference getCachedFrame(int paramInt)
  {
    try
    {
      if (mLastFrameNumber == paramInt)
      {
        CloseableReference localCloseableReference = CloseableReference.cloneOrNull(mLastBitmapReference);
        return localCloseableReference;
      }
      return null;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public CloseableReference getFallbackFrame(int paramInt)
  {
    try
    {
      CloseableReference localCloseableReference = CloseableReference.cloneOrNull(mLastBitmapReference);
      return localCloseableReference;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getSizeInBytes()
  {
    try
    {
      int i;
      if (mLastBitmapReference == null) {
        i = 0;
      } else {
        i = BitmapUtil.getSizeInBytes((Bitmap)mLastBitmapReference.get());
      }
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void onFramePrepared(int paramInt1, CloseableReference paramCloseableReference, int paramInt2) {}
  
  public void onFrameRendered(int paramInt1, CloseableReference paramCloseableReference, int paramInt2)
  {
    if (paramCloseableReference != null) {}
    try
    {
      if (mLastBitmapReference != null)
      {
        boolean bool = ((Bitmap)paramCloseableReference.get()).equals(mLastBitmapReference.get());
        if (bool) {
          return;
        }
      }
      CloseableReference.closeSafely(mLastBitmapReference);
      if ((mFrameCacheListener != null) && (mLastFrameNumber != -1)) {
        mFrameCacheListener.onFrameEvicted(this, mLastFrameNumber);
      }
      mLastBitmapReference = CloseableReference.cloneOrNull(paramCloseableReference);
      if (mFrameCacheListener != null) {
        mFrameCacheListener.onFrameCached(this, paramInt1);
      }
      mLastFrameNumber = paramInt1;
      return;
    }
    catch (Throwable paramCloseableReference)
    {
      throw paramCloseableReference;
    }
  }
  
  public void setFrameCacheListener(BitmapFrameCache.FrameCacheListener paramFrameCacheListener)
  {
    mFrameCacheListener = paramFrameCacheListener;
  }
}
