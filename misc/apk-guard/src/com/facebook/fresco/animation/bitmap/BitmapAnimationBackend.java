package com.facebook.fresco.animation.bitmap;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import com.facebook.common.logging.FLog;
import com.facebook.common.references.CloseableReference;
import com.facebook.fresco.animation.backend.AnimationBackend;
import com.facebook.fresco.animation.backend.AnimationBackendDelegateWithInactivityCheck.InactivityListener;
import com.facebook.fresco.animation.backend.AnimationInformation;
import com.facebook.fresco.animation.bitmap.preparation.BitmapFramePreparationStrategy;
import com.facebook.fresco.animation.bitmap.preparation.BitmapFramePreparer;
import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import javax.annotation.Nullable;

public class BitmapAnimationBackend
  implements AnimationBackend, AnimationBackendDelegateWithInactivityCheck.InactivityListener
{
  private static final Class<?> BYTE = BitmapAnimationBackend.class;
  public static final int FRAME_TYPE_CACHED = 0;
  public static final int FRAME_TYPE_CREATED = 2;
  public static final int FRAME_TYPE_FALLBACK = 3;
  public static final int FRAME_TYPE_REUSED = 1;
  public static final int FRAME_TYPE_UNKNOWN = -1;
  private final AnimationInformation mAnimationInformation;
  private Bitmap.Config mBitmapConfig = Bitmap.Config.ARGB_8888;
  private final BitmapFrameCache mBitmapFrameCache;
  @Nullable
  private final BitmapFramePreparationStrategy mBitmapFramePreparationStrategy;
  @Nullable
  private final BitmapFramePreparer mBitmapFramePreparer;
  private final BitmapFrameRenderer mBitmapFrameRenderer;
  private int mBitmapHeight;
  private int mBitmapWidth;
  @Nullable
  private Rect mBounds;
  @Nullable
  private FrameListener mFrameListener;
  private final Paint mPaint;
  private final PlatformBitmapFactory mPlatformBitmapFactory;
  
  public BitmapAnimationBackend(PlatformBitmapFactory paramPlatformBitmapFactory, BitmapFrameCache paramBitmapFrameCache, AnimationInformation paramAnimationInformation, BitmapFrameRenderer paramBitmapFrameRenderer, BitmapFramePreparationStrategy paramBitmapFramePreparationStrategy, BitmapFramePreparer paramBitmapFramePreparer)
  {
    mPlatformBitmapFactory = paramPlatformBitmapFactory;
    mBitmapFrameCache = paramBitmapFrameCache;
    mAnimationInformation = paramAnimationInformation;
    mBitmapFrameRenderer = paramBitmapFrameRenderer;
    mBitmapFramePreparationStrategy = paramBitmapFramePreparationStrategy;
    mBitmapFramePreparer = paramBitmapFramePreparer;
    mPaint = new Paint(6);
    updateBitmapDimensions();
  }
  
  private boolean drawBitmapAndCache(int paramInt1, CloseableReference paramCloseableReference, Canvas paramCanvas, int paramInt2)
  {
    if (!CloseableReference.isValid(paramCloseableReference)) {
      return false;
    }
    if (mBounds == null) {
      paramCanvas.drawBitmap((Bitmap)paramCloseableReference.get(), 0.0F, 0.0F, mPaint);
    } else {
      paramCanvas.drawBitmap((Bitmap)paramCloseableReference.get(), null, mBounds, mPaint);
    }
    if (paramInt2 != 3) {
      mBitmapFrameCache.onFrameRendered(paramInt1, paramCloseableReference, paramInt2);
    }
    paramCloseableReference = mFrameListener;
    if (paramCloseableReference != null) {
      paramCloseableReference.onFrameDrawn(this, paramInt1, paramInt2);
    }
    return true;
  }
  
  private boolean drawFrameOrFallback(Canvas paramCanvas, int paramInt1, int paramInt2)
  {
    int i = 2;
    Object localObject2 = null;
    Object localObject1;
    switch (paramInt2)
    {
    default: 
      CloseableReference.closeSafely(null);
      return false;
    case 3: 
      localObject1 = localObject2;
    }
    try
    {
      CloseableReference localCloseableReference = mBitmapFrameCache.getFallbackFrame(paramInt1);
      localObject2 = localCloseableReference;
      localObject1 = localObject2;
      boolean bool1 = drawBitmapAndCache(paramInt1, localCloseableReference, paramCanvas, 3);
      paramInt2 = -1;
      localObject1 = localObject2;
      break label339;
      localObject1 = localObject2;
      try
      {
        localCloseableReference = mPlatformBitmapFactory.createBitmap(mBitmapWidth, mBitmapHeight, mBitmapConfig);
        localObject2 = localCloseableReference;
        localObject1 = localObject2;
        bool1 = renderFrameInBitmap(paramInt1, localCloseableReference);
        if (bool1)
        {
          localObject1 = localObject2;
          bool1 = drawBitmapAndCache(paramInt1, localCloseableReference, paramCanvas, 2);
          if (bool1)
          {
            bool1 = true;
            break label177;
          }
        }
        bool1 = false;
        label177:
        paramInt2 = 3;
        localObject1 = localObject2;
      }
      catch (RuntimeException paramCanvas)
      {
        localObject1 = localObject2;
        FLog.w(BYTE, "Failed to create frame bitmap", paramCanvas);
        CloseableReference.closeSafely(null);
        return false;
      }
      localObject1 = localObject2;
      localCloseableReference = mBitmapFrameCache.getBitmapToReuseForFrame(paramInt1, mBitmapWidth, mBitmapHeight);
      localObject2 = localCloseableReference;
      localObject1 = localObject2;
      bool1 = renderFrameInBitmap(paramInt1, localCloseableReference);
      if (bool1)
      {
        localObject1 = localObject2;
        bool1 = drawBitmapAndCache(paramInt1, localCloseableReference, paramCanvas, 1);
        if (bool1)
        {
          bool1 = true;
          paramInt2 = i;
          localObject1 = localObject2;
          break label339;
        }
      }
      bool1 = false;
      paramInt2 = i;
      localObject1 = localObject2;
      break label339;
      localObject1 = localObject2;
      localCloseableReference = mBitmapFrameCache.getCachedFrame(paramInt1);
      localObject2 = localCloseableReference;
      localObject1 = localObject2;
      bool1 = drawBitmapAndCache(paramInt1, localCloseableReference, paramCanvas, 0);
      paramInt2 = 1;
      localObject1 = localObject2;
      label339:
      CloseableReference.closeSafely(localObject1);
      boolean bool2 = bool1;
      if (!bool1)
      {
        if (paramInt2 == -1) {
          return bool1;
        }
        bool2 = drawFrameOrFallback(paramCanvas, paramInt1, paramInt2);
      }
      return bool2;
    }
    catch (Throwable paramCanvas)
    {
      CloseableReference.closeSafely(localObject1);
      throw paramCanvas;
    }
  }
  
  private boolean renderFrameInBitmap(int paramInt, CloseableReference paramCloseableReference)
  {
    if (!CloseableReference.isValid(paramCloseableReference)) {
      return false;
    }
    boolean bool = mBitmapFrameRenderer.renderFrame(paramInt, (Bitmap)paramCloseableReference.get());
    if (!bool) {
      CloseableReference.closeSafely(paramCloseableReference);
    }
    return bool;
  }
  
  private void updateBitmapDimensions()
  {
    mBitmapWidth = mBitmapFrameRenderer.getIntrinsicWidth();
    int i = mBitmapWidth;
    int j = -1;
    Rect localRect;
    if (i == -1)
    {
      localRect = mBounds;
      if (localRect == null) {
        i = -1;
      } else {
        i = localRect.width();
      }
      mBitmapWidth = i;
    }
    mBitmapHeight = mBitmapFrameRenderer.getIntrinsicHeight();
    if (mBitmapHeight == -1)
    {
      localRect = mBounds;
      if (localRect == null) {
        i = j;
      } else {
        i = localRect.height();
      }
      mBitmapHeight = i;
    }
  }
  
  public void clear()
  {
    mBitmapFrameCache.clear();
  }
  
  public boolean drawFrame(Drawable paramDrawable, Canvas paramCanvas, int paramInt)
  {
    paramDrawable = mFrameListener;
    if (paramDrawable != null) {
      paramDrawable.onDrawFrameStart(this, paramInt);
    }
    boolean bool = drawFrameOrFallback(paramCanvas, paramInt, 0);
    if (!bool)
    {
      paramDrawable = mFrameListener;
      if (paramDrawable != null) {
        paramDrawable.onFrameDropped(this, paramInt);
      }
    }
    paramDrawable = mBitmapFramePreparationStrategy;
    if (paramDrawable != null)
    {
      paramCanvas = mBitmapFramePreparer;
      if (paramCanvas != null) {
        paramDrawable.prepareFrames(paramCanvas, mBitmapFrameCache, this, paramInt);
      }
    }
    return bool;
  }
  
  public int getFrameCount()
  {
    return mAnimationInformation.getFrameCount();
  }
  
  public int getFrameDurationMs(int paramInt)
  {
    return mAnimationInformation.getFrameDurationMs(paramInt);
  }
  
  public int getIntrinsicHeight()
  {
    return mBitmapHeight;
  }
  
  public int getIntrinsicWidth()
  {
    return mBitmapWidth;
  }
  
  public int getLoopCount()
  {
    return mAnimationInformation.getLoopCount();
  }
  
  public int getSizeInBytes()
  {
    return mBitmapFrameCache.getSizeInBytes();
  }
  
  public void onInactive()
  {
    clear();
  }
  
  public void setAlpha(int paramInt)
  {
    mPaint.setAlpha(paramInt);
  }
  
  public void setBitmapConfig(Bitmap.Config paramConfig)
  {
    mBitmapConfig = paramConfig;
  }
  
  public void setBounds(Rect paramRect)
  {
    mBounds = paramRect;
    mBitmapFrameRenderer.setBounds(paramRect);
    updateBitmapDimensions();
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    mPaint.setColorFilter(paramColorFilter);
  }
  
  public void setFrameListener(FrameListener paramFrameListener)
  {
    mFrameListener = paramFrameListener;
  }
  
  public static abstract interface FrameListener
  {
    public abstract void onDrawFrameStart(BitmapAnimationBackend paramBitmapAnimationBackend, int paramInt);
    
    public abstract void onFrameDrawn(BitmapAnimationBackend paramBitmapAnimationBackend, int paramInt1, int paramInt2);
    
    public abstract void onFrameDropped(BitmapAnimationBackend paramBitmapAnimationBackend, int paramInt);
  }
  
  @Retention(RetentionPolicy.SOURCE)
  public static @interface FrameType {}
}
