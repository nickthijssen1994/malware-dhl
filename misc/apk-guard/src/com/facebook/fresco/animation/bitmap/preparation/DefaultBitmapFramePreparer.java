package com.facebook.fresco.animation.bitmap.preparation;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.util.SparseArray;
import com.facebook.common.logging.FLog;
import com.facebook.common.references.CloseableReference;
import com.facebook.fresco.animation.backend.AnimationBackend;
import com.facebook.fresco.animation.bitmap.BitmapFrameCache;
import com.facebook.fresco.animation.bitmap.BitmapFrameRenderer;
import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
import java.util.concurrent.ExecutorService;

public class DefaultBitmapFramePreparer
  implements BitmapFramePreparer
{
  private static final Class<?> SET = DefaultBitmapFramePreparer.class;
  private final Bitmap.Config mBitmapConfig;
  private final BitmapFrameRenderer mBitmapFrameRenderer;
  private final ExecutorService mExecutorService;
  private final SparseArray<Runnable> mPendingFrameDecodeJobs;
  private final PlatformBitmapFactory mPlatformBitmapFactory;
  
  public DefaultBitmapFramePreparer(PlatformBitmapFactory paramPlatformBitmapFactory, BitmapFrameRenderer paramBitmapFrameRenderer, Bitmap.Config paramConfig, ExecutorService paramExecutorService)
  {
    mPlatformBitmapFactory = paramPlatformBitmapFactory;
    mBitmapFrameRenderer = paramBitmapFrameRenderer;
    mBitmapConfig = paramConfig;
    mExecutorService = paramExecutorService;
    mPendingFrameDecodeJobs = new SparseArray();
  }
  
  private static int getUniqueId(AnimationBackend paramAnimationBackend, int paramInt)
  {
    return paramAnimationBackend.hashCode() * 31 + paramInt;
  }
  
  public boolean prepareFrame(BitmapFrameCache paramBitmapFrameCache, AnimationBackend paramAnimationBackend, int paramInt)
  {
    int i = getUniqueId(paramAnimationBackend, paramInt);
    SparseArray localSparseArray = mPendingFrameDecodeJobs;
    try
    {
      if (mPendingFrameDecodeJobs.get(i) != null)
      {
        FLog.v(SET, "Already scheduled decode job for frame %d", Integer.valueOf(paramInt));
        return true;
      }
      if (paramBitmapFrameCache.contains(paramInt))
      {
        FLog.v(SET, "Frame %d is cached already.", Integer.valueOf(paramInt));
        return true;
      }
      paramBitmapFrameCache = new FrameDecodeRunnable(paramAnimationBackend, paramBitmapFrameCache, paramInt, i);
      mPendingFrameDecodeJobs.put(i, paramBitmapFrameCache);
      mExecutorService.execute(paramBitmapFrameCache);
      return true;
    }
    catch (Throwable paramBitmapFrameCache)
    {
      throw paramBitmapFrameCache;
    }
  }
  
  private class FrameDecodeRunnable
    implements Runnable
  {
    private final AnimationBackend mAnimationBackend;
    private final BitmapFrameCache mBitmapFrameCache;
    private final int mFrameNumber;
    private final int mHashCode;
    
    public FrameDecodeRunnable(AnimationBackend paramAnimationBackend, BitmapFrameCache paramBitmapFrameCache, int paramInt1, int paramInt2)
    {
      mAnimationBackend = paramAnimationBackend;
      mBitmapFrameCache = paramBitmapFrameCache;
      mFrameNumber = paramInt1;
      mHashCode = paramInt2;
    }
    
    private boolean prepareFrameAndCache(int paramInt1, int paramInt2)
    {
      Object localObject1 = null;
      Object localObject2;
      switch (paramInt2)
      {
      default: 
        CloseableReference.closeSafely(null);
        return false;
      case 2: 
        localObject2 = localObject1;
      }
      try
      {
        try
        {
          CloseableReference localCloseableReference = mPlatformBitmapFactory.createBitmap(mAnimationBackend.getIntrinsicWidth(), mAnimationBackend.getIntrinsicHeight(), mBitmapConfig);
          i = -1;
          localObject1 = localCloseableReference;
        }
        catch (RuntimeException localRuntimeException)
        {
          localObject2 = localObject1;
          FLog.w(DefaultBitmapFramePreparer.SET, "Failed to create frame bitmap", localRuntimeException);
          CloseableReference.closeSafely(null);
          return false;
        }
        localObject2 = localObject1;
        localObject1 = mBitmapFrameCache.getBitmapToReuseForFrame(paramInt1, mAnimationBackend.getIntrinsicWidth(), mAnimationBackend.getIntrinsicHeight());
        int i = 2;
        localObject2 = localObject1;
        boolean bool2 = renderFrameAndCache(paramInt1, (CloseableReference)localObject1, paramInt2);
        CloseableReference.closeSafely((CloseableReference)localObject1);
        boolean bool1 = bool2;
        if (!bool2)
        {
          if (i == -1) {
            return bool2;
          }
          bool1 = prepareFrameAndCache(paramInt1, i);
        }
        return bool1;
      }
      catch (Throwable localThrowable)
      {
        CloseableReference.closeSafely(localObject2);
        throw localThrowable;
      }
    }
    
    private boolean renderFrameAndCache(int paramInt1, CloseableReference paramCloseableReference, int paramInt2)
    {
      if (!CloseableReference.isValid(paramCloseableReference)) {
        return false;
      }
      if (!mBitmapFrameRenderer.renderFrame(paramInt1, (Bitmap)paramCloseableReference.get())) {
        return false;
      }
      FLog.v(DefaultBitmapFramePreparer.SET, "Frame %d ready.", Integer.valueOf(mFrameNumber));
      SparseArray localSparseArray = mPendingFrameDecodeJobs;
      try
      {
        mBitmapFrameCache.onFramePrepared(mFrameNumber, paramCloseableReference, paramInt2);
        return true;
      }
      catch (Throwable paramCloseableReference)
      {
        throw paramCloseableReference;
      }
    }
    
    /* Error */
    public void run()
    {
      // Byte code:
      //   0: aload_0
      //   1: getfield 29	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mBitmapFrameCache	Lcom/facebook/fresco/animation/bitmap/BitmapFrameCache;
      //   4: aload_0
      //   5: getfield 31	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mFrameNumber	I
      //   8: invokeinterface 138 2 0
      //   13: istore_1
      //   14: iload_1
      //   15: ifeq +50 -> 65
      //   18: invokestatic 73	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$000	()Ljava/lang/Class;
      //   21: ldc -116
      //   23: aload_0
      //   24: getfield 31	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mFrameNumber	I
      //   27: invokestatic 121	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
      //   30: invokestatic 125	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
      //   33: aload_0
      //   34: getfield 22	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:this$0	Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;
      //   37: invokestatic 129	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$100	(Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;)Landroid/util/SparseArray;
      //   40: astore_2
      //   41: aload_2
      //   42: monitorenter
      //   43: aload_0
      //   44: getfield 22	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:this$0	Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;
      //   47: invokestatic 129	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$100	(Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;)Landroid/util/SparseArray;
      //   50: aload_0
      //   51: getfield 33	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mHashCode	I
      //   54: invokevirtual 146	android/util/SparseArray:remove	(I)V
      //   57: aload_2
      //   58: monitorexit
      //   59: return
      //   60: astore_3
      //   61: aload_2
      //   62: monitorexit
      //   63: aload_3
      //   64: athrow
      //   65: aload_0
      //   66: aload_0
      //   67: getfield 31	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mFrameNumber	I
      //   70: iconst_1
      //   71: invokespecial 93	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:prepareFrameAndCache	(II)Z
      //   74: istore_1
      //   75: iload_1
      //   76: ifeq +21 -> 97
      //   79: invokestatic 73	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$000	()Ljava/lang/Class;
      //   82: ldc -108
      //   84: aload_0
      //   85: getfield 31	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mFrameNumber	I
      //   88: invokestatic 121	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
      //   91: invokestatic 125	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
      //   94: goto +25 -> 119
      //   97: invokestatic 73	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$000	()Ljava/lang/Class;
      //   100: ldc -106
      //   102: iconst_1
      //   103: anewarray 4	java/lang/Object
      //   106: dup
      //   107: iconst_0
      //   108: aload_0
      //   109: getfield 31	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mFrameNumber	I
      //   112: invokestatic 121	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
      //   115: aastore
      //   116: invokestatic 154	com/facebook/common/logging/FLog:e	(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)V
      //   119: aload_0
      //   120: getfield 22	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:this$0	Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;
      //   123: invokestatic 129	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$100	(Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;)Landroid/util/SparseArray;
      //   126: astore_2
      //   127: aload_2
      //   128: monitorenter
      //   129: aload_0
      //   130: getfield 22	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:this$0	Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;
      //   133: invokestatic 129	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$100	(Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;)Landroid/util/SparseArray;
      //   136: aload_0
      //   137: getfield 33	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mHashCode	I
      //   140: invokevirtual 146	android/util/SparseArray:remove	(I)V
      //   143: aload_2
      //   144: monitorexit
      //   145: return
      //   146: astore_3
      //   147: aload_2
      //   148: monitorexit
      //   149: aload_3
      //   150: athrow
      //   151: astore_3
      //   152: aload_0
      //   153: getfield 22	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:this$0	Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;
      //   156: invokestatic 129	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$100	(Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;)Landroid/util/SparseArray;
      //   159: astore_2
      //   160: aload_2
      //   161: monitorenter
      //   162: aload_0
      //   163: getfield 22	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:this$0	Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;
      //   166: invokestatic 129	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer:access$100	(Lcom/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer;)Landroid/util/SparseArray;
      //   169: aload_0
      //   170: getfield 33	com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer$FrameDecodeRunnable:mHashCode	I
      //   173: invokevirtual 146	android/util/SparseArray:remove	(I)V
      //   176: aload_2
      //   177: monitorexit
      //   178: aload_3
      //   179: athrow
      //   180: astore_3
      //   181: aload_2
      //   182: monitorexit
      //   183: aload_3
      //   184: athrow
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	185	0	this	FrameDecodeRunnable
      //   13	63	1	bool	boolean
      //   40	142	2	localSparseArray	SparseArray
      //   60	4	3	localThrowable1	Throwable
      //   146	4	3	localThrowable2	Throwable
      //   151	28	3	localThrowable3	Throwable
      //   180	4	3	localThrowable4	Throwable
      // Exception table:
      //   from	to	target	type
      //   43	59	60	java/lang/Throwable
      //   61	63	60	java/lang/Throwable
      //   129	145	146	java/lang/Throwable
      //   147	149	146	java/lang/Throwable
      //   0	14	151	java/lang/Throwable
      //   18	33	151	java/lang/Throwable
      //   65	75	151	java/lang/Throwable
      //   79	94	151	java/lang/Throwable
      //   97	119	151	java/lang/Throwable
      //   162	178	180	java/lang/Throwable
      //   181	183	180	java/lang/Throwable
    }
  }
}
