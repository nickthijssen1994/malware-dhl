package com.facebook.fresco.animation.factory;

import android.content.Context;
import android.graphics.Bitmap.Config;
import android.graphics.Rect;
import com.facebook.cache.common.CacheKey;
import com.facebook.common.executors.DefaultSerialExecutorService;
import com.facebook.common.executors.UiThreadImmediateExecutorService;
import com.facebook.common.internal.DoNotStrip;
import com.facebook.common.internal.Supplier;
import com.facebook.common.time.RealtimeSinceBootClock;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend;
import com.facebook.imagepipeline.animated.base.AnimatedImageResult;
import com.facebook.imagepipeline.animated.factory.AnimatedFactory;
import com.facebook.imagepipeline.animated.factory.AnimatedImageFactory;
import com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl;
import com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendImpl;
import com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider;
import com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil;
import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
import com.facebook.imagepipeline.cache.CountingMemoryCache;
import com.facebook.imagepipeline.common.ImageDecodeOptions;
import com.facebook.imagepipeline.core.ExecutorSupplier;
import com.facebook.imagepipeline.decoder.ImageDecoder;
import com.facebook.imagepipeline.drawable.DrawableFactory;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.image.QualityInfo;
import javax.annotation.Nullable;
import javax.annotation.concurrent.NotThreadSafe;

@DoNotStrip
@NotThreadSafe
public class AnimatedFactoryV2Impl
  implements AnimatedFactory
{
  private static final int NUMBER_OF_FRAMES_TO_PREPARE = 3;
  @Nullable
  private AnimatedDrawableBackendProvider mAnimatedDrawableBackendProvider;
  @Nullable
  private DrawableFactory mAnimatedDrawableFactory;
  @Nullable
  private AnimatedDrawableUtil mAnimatedDrawableUtil;
  @Nullable
  private AnimatedImageFactory mAnimatedImageFactory;
  private final CountingMemoryCache<CacheKey, CloseableImage> mBackingCache;
  private final boolean mDownscaleFrameToDrawableDimensions;
  private final ExecutorSupplier mExecutorSupplier;
  private final PlatformBitmapFactory mPlatformBitmapFactory;
  
  public AnimatedFactoryV2Impl(PlatformBitmapFactory paramPlatformBitmapFactory, ExecutorSupplier paramExecutorSupplier, CountingMemoryCache paramCountingMemoryCache, boolean paramBoolean)
  {
    mPlatformBitmapFactory = paramPlatformBitmapFactory;
    mExecutorSupplier = paramExecutorSupplier;
    mBackingCache = paramCountingMemoryCache;
    mDownscaleFrameToDrawableDimensions = paramBoolean;
  }
  
  private AnimatedImageFactory buildAnimatedImageFactory()
  {
    new AnimatedImageFactoryImpl(new AnimatedDrawableBackendProvider()
    {
      public AnimatedDrawableBackend getMap(AnimatedImageResult paramAnonymousAnimatedImageResult, Rect paramAnonymousRect)
      {
        return new AnimatedDrawableBackendImpl(AnimatedFactoryV2Impl.this.getAnimatedDrawableUtil(), paramAnonymousAnimatedImageResult, paramAnonymousRect, mDownscaleFrameToDrawableDimensions);
      }
    }, mPlatformBitmapFactory);
  }
  
  private ExperimentalBitmapAnimationDrawableFactory createDrawableFactory()
  {
    Supplier local3 = new Supplier()
    {
      public Integer getFolder()
      {
        return Integer.valueOf(2);
      }
    };
    DefaultSerialExecutorService localDefaultSerialExecutorService = new DefaultSerialExecutorService(mExecutorSupplier.forDecode());
    Supplier local4 = new Supplier()
    {
      public Integer getFolder()
      {
        return Integer.valueOf(3);
      }
    };
    return new ExperimentalBitmapAnimationDrawableFactory(getAnimatedDrawableBackendProvider(), UiThreadImmediateExecutorService.getInstance(), localDefaultSerialExecutorService, RealtimeSinceBootClock.getSocketFactory(), mPlatformBitmapFactory, mBackingCache, local3, local4);
  }
  
  private AnimatedDrawableBackendProvider getAnimatedDrawableBackendProvider()
  {
    if (mAnimatedDrawableBackendProvider == null) {
      mAnimatedDrawableBackendProvider = new AnimatedDrawableBackendProvider()
      {
        public AnimatedDrawableBackend getMap(AnimatedImageResult paramAnonymousAnimatedImageResult, Rect paramAnonymousRect)
        {
          return new AnimatedDrawableBackendImpl(AnimatedFactoryV2Impl.this.getAnimatedDrawableUtil(), paramAnonymousAnimatedImageResult, paramAnonymousRect, mDownscaleFrameToDrawableDimensions);
        }
      };
    }
    return mAnimatedDrawableBackendProvider;
  }
  
  private AnimatedDrawableUtil getAnimatedDrawableUtil()
  {
    if (mAnimatedDrawableUtil == null) {
      mAnimatedDrawableUtil = new AnimatedDrawableUtil();
    }
    return mAnimatedDrawableUtil;
  }
  
  private AnimatedImageFactory getAnimatedImageFactory()
  {
    if (mAnimatedImageFactory == null) {
      mAnimatedImageFactory = buildAnimatedImageFactory();
    }
    return mAnimatedImageFactory;
  }
  
  public DrawableFactory getAnimatedDrawableFactory(Context paramContext)
  {
    if (mAnimatedDrawableFactory == null) {
      mAnimatedDrawableFactory = createDrawableFactory();
    }
    return mAnimatedDrawableFactory;
  }
  
  public ImageDecoder getGifDecoder(final Bitmap.Config paramConfig)
  {
    new ImageDecoder()
    {
      public CloseableImage decode(EncodedImage paramAnonymousEncodedImage, int paramAnonymousInt, QualityInfo paramAnonymousQualityInfo, ImageDecodeOptions paramAnonymousImageDecodeOptions)
      {
        return AnimatedFactoryV2Impl.this.getAnimatedImageFactory().decodeGif(paramAnonymousEncodedImage, paramAnonymousImageDecodeOptions, paramConfig);
      }
    };
  }
  
  public ImageDecoder getWebPDecoder(final Bitmap.Config paramConfig)
  {
    new ImageDecoder()
    {
      public CloseableImage decode(EncodedImage paramAnonymousEncodedImage, int paramAnonymousInt, QualityInfo paramAnonymousQualityInfo, ImageDecodeOptions paramAnonymousImageDecodeOptions)
      {
        return AnimatedFactoryV2Impl.this.getAnimatedImageFactory().decodeWebP(paramAnonymousEncodedImage, paramAnonymousImageDecodeOptions, paramConfig);
      }
    };
  }
}
