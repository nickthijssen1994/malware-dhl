package com.facebook.react.devsupport;

import android.app.Dialog;
import android.content.Context;
import android.net.Uri;
import android.net.Uri.Builder;
import android.os.AsyncTask;
import android.text.SpannedString;
import android.text.method.LinkMovementMethod;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.facebook.common.logging.FLog;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.R.id;
import com.facebook.react.R.layout;
import com.facebook.react.R.style;
import com.facebook.react.common.MapBuilder;
import com.facebook.react.devsupport.interfaces.DevSupportManager;
import com.facebook.react.devsupport.interfaces.StackFrame;
import javax.annotation.Nullable;
import okhttp3.Call;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request.Builder;
import okhttp3.RequestBody;
import org.json.JSONObject;

class RedBoxDialog
  extends Dialog
  implements AdapterView.OnItemClickListener
{
  private boolean isReporting = false;
  private Button mCopyToClipboardButton;
  private final DevSupportManager mDevSupportManager;
  private Button mDismissButton;
  private final DoubleTapReloadRecognizer mDoubleTapReloadRecognizer;
  @Nullable
  private View mLineSeparator;
  @Nullable
  private ProgressBar mLoadingIndicator;
  @Nullable
  private final RedBoxHandler mRedBoxHandler;
  private Button mReloadJsButton;
  @Nullable
  private Button mReportButton;
  private View.OnClickListener mReportButtonOnClickListener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      if ((mRedBoxHandler != null) && (mRedBoxHandler.isReportEnabled()))
      {
        if (isReporting) {
          return;
        }
        RedBoxDialog.access$002(RedBoxDialog.this, true);
        ((TextView)Assertions.assertNotNull(mReportTextView)).setText("Reporting...");
        ((TextView)Assertions.assertNotNull(mReportTextView)).setVisibility(0);
        ((ProgressBar)Assertions.assertNotNull(mLoadingIndicator)).setVisibility(0);
        ((View)Assertions.assertNotNull(mLineSeparator)).setVisibility(0);
        ((Button)Assertions.assertNotNull(mReportButton)).setEnabled(false);
        String str1 = (String)Assertions.assertNotNull(mDevSupportManager.getLastErrorTitle());
        StackFrame[] arrayOfStackFrame = (StackFrame[])Assertions.assertNotNull(mDevSupportManager.getLastErrorStack());
        String str2 = mDevSupportManager.getSourceUrl();
        mRedBoxHandler.reportRedbox(paramAnonymousView.getContext(), str1, arrayOfStackFrame, str2, (RedBoxHandler.ReportCompletedListener)Assertions.assertNotNull(mReportCompletedListener));
      }
    }
  };
  private RedBoxHandler.ReportCompletedListener mReportCompletedListener = new RedBoxHandler.ReportCompletedListener()
  {
    public void onReportError(SpannedString paramAnonymousSpannedString)
    {
      RedBoxDialog.access$002(RedBoxDialog.this, false);
      ((Button)Assertions.assertNotNull(mReportButton)).setEnabled(true);
      ((ProgressBar)Assertions.assertNotNull(mLoadingIndicator)).setVisibility(8);
      ((TextView)Assertions.assertNotNull(mReportTextView)).setText(paramAnonymousSpannedString);
    }
    
    public void onReportSuccess(SpannedString paramAnonymousSpannedString)
    {
      RedBoxDialog.access$002(RedBoxDialog.this, false);
      ((Button)Assertions.assertNotNull(mReportButton)).setEnabled(true);
      ((ProgressBar)Assertions.assertNotNull(mLoadingIndicator)).setVisibility(8);
      ((TextView)Assertions.assertNotNull(mReportTextView)).setText(paramAnonymousSpannedString);
    }
  };
  @Nullable
  private TextView mReportTextView;
  private ListView mStackView;
  
  protected RedBoxDialog(Context paramContext, DevSupportManager paramDevSupportManager, RedBoxHandler paramRedBoxHandler)
  {
    super(paramContext, R.style.Theme_Catalyst_RedBox);
    requestWindowFeature(1);
    setContentView(R.layout.redbox_view);
    mDevSupportManager = paramDevSupportManager;
    mDoubleTapReloadRecognizer = new DoubleTapReloadRecognizer();
    mRedBoxHandler = paramRedBoxHandler;
    mStackView = ((ListView)findViewById(R.id.rn_redbox_stack));
    mStackView.setOnItemClickListener(this);
    mReloadJsButton = ((Button)findViewById(R.id.rn_redbox_reload_button));
    mReloadJsButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        mDevSupportManager.handleReloadJS();
      }
    });
    mDismissButton = ((Button)findViewById(R.id.rn_redbox_dismiss_button));
    mDismissButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        dismiss();
      }
    });
    mCopyToClipboardButton = ((Button)findViewById(R.id.rn_redbox_copy_button));
    mCopyToClipboardButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = mDevSupportManager.getLastErrorTitle();
        StackFrame[] arrayOfStackFrame = mDevSupportManager.getLastErrorStack();
        Assertions.assertNotNull(paramAnonymousView);
        Assertions.assertNotNull(arrayOfStackFrame);
        new RedBoxDialog.CopyToHostClipBoardTask(mDevSupportManager, null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new String[] { StackTraceHelper.formatStackTrace(paramAnonymousView, arrayOfStackFrame) });
      }
    });
    paramContext = mRedBoxHandler;
    if ((paramContext != null) && (paramContext.isReportEnabled()))
    {
      mLoadingIndicator = ((ProgressBar)findViewById(R.id.rn_redbox_loading_indicator));
      mLineSeparator = findViewById(R.id.rn_redbox_line_separator);
      mReportTextView = ((TextView)findViewById(R.id.rn_redbox_report_label));
      mReportTextView.setMovementMethod(LinkMovementMethod.getInstance());
      mReportTextView.setHighlightColor(0);
      mReportButton = ((Button)findViewById(R.id.rn_redbox_report_button));
      mReportButton.setOnClickListener(mReportButtonOnClickListener);
    }
  }
  
  public void onItemClick(AdapterView paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    new OpenStackFrameTask(mDevSupportManager, null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new StackFrame[] { (StackFrame)mStackView.getAdapter().getItem(paramInt) });
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 82)
    {
      mDevSupportManager.showDevOptionsDialog();
      return true;
    }
    if (mDoubleTapReloadRecognizer.didDoubleTapR(paramInt, getCurrentFocus())) {
      mDevSupportManager.handleReloadJS();
    }
    return super.onKeyUp(paramInt, paramKeyEvent);
  }
  
  public void resetReporting()
  {
    RedBoxHandler localRedBoxHandler = mRedBoxHandler;
    if (localRedBoxHandler != null)
    {
      if (!localRedBoxHandler.isReportEnabled()) {
        return;
      }
      isReporting = false;
      ((TextView)Assertions.assertNotNull(mReportTextView)).setVisibility(8);
      ((ProgressBar)Assertions.assertNotNull(mLoadingIndicator)).setVisibility(8);
      ((View)Assertions.assertNotNull(mLineSeparator)).setVisibility(8);
      ((Button)Assertions.assertNotNull(mReportButton)).setVisibility(0);
      ((Button)Assertions.assertNotNull(mReportButton)).setEnabled(true);
    }
  }
  
  public void setExceptionDetails(String paramString, StackFrame[] paramArrayOfStackFrame)
  {
    mStackView.setAdapter(new StackAdapter(paramString, paramArrayOfStackFrame));
  }
  
  private static class CopyToHostClipBoardTask
    extends AsyncTask<String, Void, Void>
  {
    private final DevSupportManager mDevSupportManager;
    
    private CopyToHostClipBoardTask(DevSupportManager paramDevSupportManager)
    {
      mDevSupportManager = paramDevSupportManager;
    }
    
    protected Void doInBackground(String... paramVarArgs)
    {
      Object localObject1 = mDevSupportManager;
      try
      {
        localObject1 = Uri.parse(((DevSupportManager)localObject1).getSourceUrl()).buildUpon().path("/copy-to-clipboard").query(null).build().toString();
        int j = paramVarArgs.length;
        int i = 0;
        while (i < j)
        {
          Object localObject2 = paramVarArgs[i];
          OkHttpClient localOkHttpClient = new OkHttpClient();
          localObject2 = RequestBody.create(null, (String)localObject2);
          localOkHttpClient.newCall(new Request.Builder().url((String)localObject1).post((RequestBody)localObject2).build()).execute();
          i += 1;
        }
        return null;
      }
      catch (Exception paramVarArgs)
      {
        FLog.e("ReactNative", "Could not copy to the host clipboard", paramVarArgs);
      }
    }
  }
  
  private static class OpenStackFrameTask
    extends AsyncTask<StackFrame, Void, Void>
  {
    private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
    private final DevSupportManager mDevSupportManager;
    
    private OpenStackFrameTask(DevSupportManager paramDevSupportManager)
    {
      mDevSupportManager = paramDevSupportManager;
    }
    
    private static JSONObject stackFrameToJson(StackFrame paramStackFrame)
    {
      return new JSONObject(MapBuilder.get("file", paramStackFrame.getFile(), "methodName", paramStackFrame.getMethod(), "lineNumber", Integer.valueOf(paramStackFrame.getLine()), "column", Integer.valueOf(paramStackFrame.getColumn())));
    }
    
    protected Void doInBackground(StackFrame... paramVarArgs)
    {
      Object localObject1 = mDevSupportManager;
      try
      {
        localObject1 = Uri.parse(((DevSupportManager)localObject1).getSourceUrl()).buildUpon().path("/open-stack-frame").query(null).build().toString();
        OkHttpClient localOkHttpClient = new OkHttpClient();
        int j = paramVarArgs.length;
        int i = 0;
        while (i < j)
        {
          Object localObject2 = paramVarArgs[i];
          localObject2 = stackFrameToJson((StackFrame)localObject2).toString();
          MediaType localMediaType = JSON;
          localObject2 = RequestBody.create(localMediaType, (String)localObject2);
          localOkHttpClient.newCall(new Request.Builder().url((String)localObject1).post((RequestBody)localObject2).build()).execute();
          i += 1;
        }
        return null;
      }
      catch (Exception paramVarArgs)
      {
        FLog.e("ReactNative", "Could not open stack frame", paramVarArgs);
      }
    }
  }
  
  private static class StackAdapter
    extends BaseAdapter
  {
    private static final int VIEW_TYPE_COUNT = 2;
    private static final int VIEW_TYPE_STACKFRAME = 1;
    private static final int VIEW_TYPE_TITLE = 0;
    private final StackFrame[] mStack;
    private final String mTitle;
    
    public StackAdapter(String paramString, StackFrame[] paramArrayOfStackFrame)
    {
      mTitle = paramString;
      mStack = paramArrayOfStackFrame;
    }
    
    public boolean areAllItemsEnabled()
    {
      return false;
    }
    
    public int getCount()
    {
      return mStack.length + 1;
    }
    
    public Object getItem(int paramInt)
    {
      if (paramInt == 0) {
        return mTitle;
      }
      return mStack[(paramInt - 1)];
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public int getItemViewType(int paramInt)
    {
      if (paramInt == 0) {
        return 0;
      }
      return 1;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramInt == 0)
      {
        if (paramView != null) {
          paramView = (TextView)paramView;
        } else {
          paramView = (TextView)LayoutInflater.from(paramViewGroup.getContext()).inflate(R.layout.redbox_item_title, paramViewGroup, false);
        }
        paramView.setText(mTitle);
        return paramView;
      }
      View localView = paramView;
      if (paramView == null)
      {
        paramView = LayoutInflater.from(paramViewGroup.getContext()).inflate(R.layout.redbox_item_frame, paramViewGroup, false);
        localView = paramView;
        paramView.setTag(new FrameViewHolder(paramView, null));
      }
      paramView = mStack[(paramInt - 1)];
      paramViewGroup = (FrameViewHolder)localView.getTag();
      mMethodView.setText(paramView.getMethod());
      mFileView.setText(StackTraceHelper.formatFrameSource(paramView));
      return localView;
    }
    
    public int getViewTypeCount()
    {
      return 2;
    }
    
    public boolean isEnabled(int paramInt)
    {
      return paramInt > 0;
    }
    
    private static class FrameViewHolder
    {
      private final TextView mFileView;
      private final TextView mMethodView;
      
      private FrameViewHolder(View paramView)
      {
        mMethodView = ((TextView)paramView.findViewById(R.id.rn_frame_method));
        mFileView = ((TextView)paramView.findViewById(R.id.rn_frame_file));
      }
    }
  }
}
