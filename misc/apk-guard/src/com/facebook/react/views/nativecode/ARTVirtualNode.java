package com.facebook.react.views.nativecode;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.util.DisplayMetrics;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.DisplayMetricsHolder;
import com.facebook.react.uimanager.ReactShadowNodeImpl;
import javax.annotation.Nullable;

public abstract class ARTVirtualNode
  extends ReactShadowNodeImpl
{
  protected static final float MIN_OPACITY_FOR_DRAW = 0.01F;
  private static final float[] sMatrixData = new float[9];
  private static final float[] sRawMatrix = new float[9];
  @Nullable
  private Matrix mMatrix = new Matrix();
  protected float mOpacity = 1.0F;
  protected final float mScale = getWindowDisplayMetricsdensity;
  
  public ARTVirtualNode() {}
  
  public abstract void draw(Canvas paramCanvas, Paint paramPaint, float paramFloat);
  
  public boolean isVirtual()
  {
    return true;
  }
  
  protected void restoreCanvas(Canvas paramCanvas)
  {
    paramCanvas.restore();
  }
  
  protected final void saveAndSetupCanvas(Canvas paramCanvas)
  {
    paramCanvas.save();
    Matrix localMatrix = mMatrix;
    if (localMatrix != null) {
      paramCanvas.concat(localMatrix);
    }
  }
  
  public void setOpacity(float paramFloat)
  {
    mOpacity = paramFloat;
    markUpdated();
  }
  
  public void setTransform(ReadableArray paramReadableArray)
  {
    if (paramReadableArray != null)
    {
      int i = PropHelper.toFloatArray(paramReadableArray, sMatrixData);
      if (i == 6) {
        setupMatrix();
      } else if (i != -1) {
        throw new JSApplicationIllegalArgumentException("Transform matrices must be of size 6");
      }
    }
    else
    {
      mMatrix = null;
    }
    markUpdated();
  }
  
  protected void setupMatrix()
  {
    float[] arrayOfFloat1 = sRawMatrix;
    float[] arrayOfFloat2 = sMatrixData;
    arrayOfFloat1[0] = arrayOfFloat2[0];
    arrayOfFloat1[1] = arrayOfFloat2[2];
    float f1 = arrayOfFloat2[4];
    float f2 = mScale;
    arrayOfFloat1[2] = (f1 * f2);
    arrayOfFloat1[3] = arrayOfFloat2[1];
    arrayOfFloat1[4] = arrayOfFloat2[3];
    arrayOfFloat2[5] *= f2;
    arrayOfFloat1[6] = 0.0F;
    arrayOfFloat1[7] = 0.0F;
    arrayOfFloat1[8] = 1.06535322E9F;
    if (mMatrix == null) {
      mMatrix = new Matrix();
    }
    mMatrix.setValues(sRawMatrix);
  }
}
