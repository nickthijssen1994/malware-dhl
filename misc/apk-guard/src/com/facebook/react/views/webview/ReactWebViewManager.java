package com.facebook.react.views.webview;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Picture;
import android.net.Uri;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.webkit.ConsoleMessage;
import android.webkit.CookieManager;
import android.webkit.GeolocationPermissions.Callback;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebView.PictureListener;
import android.webkit.WebViewClient;
import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.MapBuilder;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.uimanager.events.ContentSizeChangeEvent;
import com.facebook.react.uimanager.events.Event;
import com.facebook.react.uimanager.events.EventDispatcher;
import com.facebook.react.views.webview.events.TopLoadingErrorEvent;
import com.facebook.react.views.webview.events.TopLoadingFinishEvent;
import com.facebook.react.views.webview.events.TopLoadingStartEvent;
import com.facebook.react.views.webview.events.TopMessageEvent;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import org.json.JSONException;
import org.json.JSONObject;

@ReactModule(name="RCTWebView")
public class ReactWebViewManager
  extends SimpleViewManager<WebView>
{
  protected static final String BLANK_URL = "about:blank";
  protected static final String BRIDGE_NAME = "__REACT_WEB_VIEW_BRIDGE";
  public static final int COMMAND_GO_BACK = 1;
  public static final int COMMAND_GO_FORWARD = 2;
  public static final int COMMAND_INJECT_JAVASCRIPT = 6;
  public static final int COMMAND_POST_MESSAGE = 5;
  public static final int COMMAND_RELOAD = 3;
  public static final int COMMAND_STOP_LOADING = 4;
  protected static final String HTML_ENCODING = "UTF-8";
  protected static final String HTML_MIME_TYPE = "text/html";
  protected static final String HTTP_METHOD_POST = "POST";
  private static final String INTENT_URL_PREFIX = "intent://";
  public static final String REACT_CLASS = "RCTWebView";
  @Nullable
  protected WebView.PictureListener mPictureListener;
  protected WebViewConfig mWebViewConfig;
  
  public ReactWebViewManager()
  {
    mWebViewConfig = new WebViewConfig()
    {
      public void configWebView(WebView paramAnonymousWebView) {}
    };
  }
  
  public ReactWebViewManager(WebViewConfig paramWebViewConfig)
  {
    mWebViewConfig = paramWebViewConfig;
  }
  
  protected static void dispatchEvent(WebView paramWebView, Event paramEvent)
  {
    ((UIManagerModule)((ReactContext)paramWebView.getContext()).getNativeModule(UIManagerModule.class)).getEventDispatcher().dispatchEvent(paramEvent);
  }
  
  protected void addEventEmitters(ThemedReactContext paramThemedReactContext, WebView paramWebView)
  {
    if (paramWebView == null) {
      return;
    }
    paramWebView.setWebViewClient(new ReactWebViewClient());
  }
  
  protected ReactWebView createReactWebViewInstance(ThemedReactContext paramThemedReactContext)
  {
    return new ReactWebView(paramThemedReactContext);
  }
  
  protected WebView createViewInstance(ThemedReactContext paramThemedReactContext)
  {
    try
    {
      ReactWebView localReactWebView = createReactWebViewInstance(paramThemedReactContext);
      localReactWebView.setWebChromeClient(new WebChromeClient()
      {
        public boolean onConsoleMessage(ConsoleMessage paramAnonymousConsoleMessage)
        {
          return true;
        }
        
        public void onGeolocationPermissionsShowPrompt(String paramAnonymousString, GeolocationPermissions.Callback paramAnonymousCallback)
        {
          paramAnonymousCallback.invoke(paramAnonymousString, true, false);
        }
      });
      paramThemedReactContext.addLifecycleEventListener(localReactWebView);
      mWebViewConfig.configWebView(localReactWebView);
      paramThemedReactContext = localReactWebView.getSettings();
      paramThemedReactContext.setBuiltInZoomControls(true);
      paramThemedReactContext.setDisplayZoomControls(false);
      paramThemedReactContext.setDomStorageEnabled(true);
      paramThemedReactContext.setAllowFileAccess(false);
      paramThemedReactContext.setAllowContentAccess(false);
      paramThemedReactContext.setAllowFileAccessFromFileURLs(false);
      setAllowUniversalAccessFromFileURLs(localReactWebView, false);
      setMixedContentMode(localReactWebView, "never");
      localReactWebView.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
      setGeolocationEnabled(localReactWebView, Boolean.valueOf(false));
      return localReactWebView;
    }
    catch (Exception paramThemedReactContext)
    {
      FLog.e("ReactWebViewManager", String.valueOf(paramThemedReactContext));
    }
    return null;
  }
  
  public Map getCommandsMap()
  {
    return MapBuilder.of("goBack", Integer.valueOf(1), "goForward", Integer.valueOf(2), "reload", Integer.valueOf(3), "stopLoading", Integer.valueOf(4), "postMessage", Integer.valueOf(5), "injectJavaScript", Integer.valueOf(6));
  }
  
  public String getName()
  {
    return "RCTWebView";
  }
  
  protected WebView.PictureListener getPictureListener()
  {
    if (mPictureListener == null) {
      mPictureListener = new WebView.PictureListener()
      {
        public void onNewPicture(WebView paramAnonymousWebView, Picture paramAnonymousPicture)
        {
          ReactWebViewManager.dispatchEvent(paramAnonymousWebView, new ContentSizeChangeEvent(paramAnonymousWebView.getId(), paramAnonymousWebView.getWidth(), paramAnonymousWebView.getContentHeight()));
        }
      };
    }
    return mPictureListener;
  }
  
  public void onDropViewInstance(WebView paramWebView)
  {
    super.onDropViewInstance(paramWebView);
    ThemedReactContext localThemedReactContext = (ThemedReactContext)paramWebView.getContext();
    paramWebView = (ReactWebView)paramWebView;
    localThemedReactContext.removeLifecycleEventListener(paramWebView);
    paramWebView.cleanupCallbacksAndDestroy();
  }
  
  public void receiveCommand(WebView paramWebView, int paramInt, ReadableArray paramReadableArray)
  {
    switch (paramInt)
    {
    default: 
      return;
    case 6: 
      ((ReactWebView)paramWebView).evaluateJavascriptWithFallback(paramReadableArray.getString(0));
      return;
    case 5: 
      paramWebView = (ReactWebView)paramWebView;
      try
      {
        JSONObject localJSONObject = new JSONObject();
        localJSONObject.put("data", paramReadableArray.getString(0));
        paramReadableArray = new StringBuilder();
        paramReadableArray.append("(function () {var event;var data = ");
        paramReadableArray.append(localJSONObject.toString());
        paramReadableArray.append(";try {event = new MessageEvent('message', data);} catch (e) {event = document.createEvent('MessageEvent');event.initMessageEvent('message', true, true, data.data, data.origin, data.lastEventId, data.source);}document.dispatchEvent(event);})();");
        paramWebView.evaluateJavascriptWithFallback(paramReadableArray.toString());
        return;
      }
      catch (JSONException paramWebView)
      {
        throw new RuntimeException(paramWebView);
      }
    case 4: 
      paramWebView.stopLoading();
      return;
    case 3: 
      paramWebView.reload();
      return;
    case 2: 
      paramWebView.goForward();
      return;
    }
    paramWebView.goBack();
  }
  
  public void setAllowFileAccess(WebView paramWebView, Boolean paramBoolean)
  {
    paramWebView = paramWebView.getSettings();
    boolean bool;
    if ((paramBoolean != null) && (paramBoolean.booleanValue())) {
      bool = true;
    } else {
      bool = false;
    }
    paramWebView.setAllowFileAccess(bool);
  }
  
  public void setAllowUniversalAccessFromFileURLs(WebView paramWebView, boolean paramBoolean)
  {
    paramWebView.getSettings().setAllowUniversalAccessFromFileURLs(paramBoolean);
  }
  
  public void setDomStorageEnabled(WebView paramWebView, boolean paramBoolean)
  {
    paramWebView.getSettings().setDomStorageEnabled(paramBoolean);
  }
  
  public void setGeolocationEnabled(WebView paramWebView, Boolean paramBoolean)
  {
    paramWebView = paramWebView.getSettings();
    boolean bool;
    if ((paramBoolean != null) && (paramBoolean.booleanValue())) {
      bool = true;
    } else {
      bool = false;
    }
    paramWebView.setGeolocationEnabled(bool);
  }
  
  public void setInjectedJavaScript(WebView paramWebView, String paramString)
  {
    ((ReactWebView)paramWebView).setInjectedJavaScript(paramString);
  }
  
  public void setJavaScriptEnabled(WebView paramWebView, boolean paramBoolean)
  {
    paramWebView.getSettings().setJavaScriptEnabled(paramBoolean);
  }
  
  public void setMediaPlaybackRequiresUserAction(WebView paramWebView, boolean paramBoolean)
  {
    paramWebView.getSettings().setMediaPlaybackRequiresUserGesture(paramBoolean);
  }
  
  public void setMessagingEnabled(WebView paramWebView, boolean paramBoolean)
  {
    ((ReactWebView)paramWebView).setMessagingEnabled(paramBoolean);
  }
  
  public void setMixedContentMode(WebView paramWebView, String paramString)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      if ((paramString != null) && (!"never".equals(paramString)))
      {
        if ("always".equals(paramString))
        {
          paramWebView.getSettings().setMixedContentMode(0);
          return;
        }
        if ("compatibility".equals(paramString)) {
          paramWebView.getSettings().setMixedContentMode(2);
        }
      }
      else
      {
        paramWebView.getSettings().setMixedContentMode(1);
      }
    }
  }
  
  public void setOnContentSizeChange(WebView paramWebView, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      paramWebView.setPictureListener(getPictureListener());
      return;
    }
    paramWebView.setPictureListener(null);
  }
  
  public void setOriginWhitelist(WebView paramWebView, ReadableArray paramReadableArray)
  {
    paramWebView = ((ReactWebView)paramWebView).getReactWebViewClient();
    if ((paramWebView != null) && (paramReadableArray != null))
    {
      LinkedList localLinkedList = new LinkedList();
      int i = 0;
      while (i < paramReadableArray.size())
      {
        localLinkedList.add(Pattern.compile(paramReadableArray.getString(i)));
        i += 1;
      }
      paramWebView.setOriginWhitelist(localLinkedList);
    }
  }
  
  public void setSaveFormDataDisabled(WebView paramWebView, boolean paramBoolean)
  {
    paramWebView.getSettings().setSaveFormData(paramBoolean ^ true);
  }
  
  public void setScalesPageToFit(WebView paramWebView, boolean paramBoolean)
  {
    paramWebView.getSettings().setUseWideViewPort(paramBoolean ^ true);
  }
  
  public void setSource(WebView paramWebView, ReadableMap paramReadableMap)
  {
    String str1;
    if (paramReadableMap != null)
    {
      if (paramReadableMap.hasKey("html"))
      {
        localObject = paramReadableMap.getString("html");
        if (paramReadableMap.hasKey("baseUrl"))
        {
          paramWebView.loadDataWithBaseURL(paramReadableMap.getString("baseUrl"), (String)localObject, "text/html", "UTF-8", null);
          return;
        }
        paramWebView.loadData((String)localObject, "text/html", "UTF-8");
        return;
      }
      if (paramReadableMap.hasKey("uri"))
      {
        str1 = paramReadableMap.getString("uri");
        localObject = paramWebView.getUrl();
        if ((localObject != null) && (((String)localObject).equals(str1))) {
          return;
        }
        if ((paramReadableMap.hasKey("method")) && (paramReadableMap.getString("method").equalsIgnoreCase("POST")))
        {
          localObject = null;
          if (paramReadableMap.hasKey("body")) {
            paramReadableMap = paramReadableMap.getString("body");
          }
        }
      }
    }
    try
    {
      localObject = paramReadableMap.getBytes("UTF-8");
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      ReadableMapKeySetIterator localReadableMapKeySetIterator;
      for (;;) {}
    }
    Object localObject = paramReadableMap.getBytes();
    paramReadableMap = (ReadableMap)localObject;
    if (localObject == null) {
      paramReadableMap = new byte[0];
    }
    paramWebView.postUrl(str1, paramReadableMap);
    return;
    localObject = new HashMap();
    if (paramReadableMap.hasKey("headers"))
    {
      paramReadableMap = paramReadableMap.getMap("headers");
      localReadableMapKeySetIterator = paramReadableMap.keySetIterator();
      while (localReadableMapKeySetIterator.hasNextKey())
      {
        String str2 = localReadableMapKeySetIterator.nextKey();
        if ("user-agent".equals(str2.toLowerCase(Locale.ENGLISH)))
        {
          if (paramWebView.getSettings() != null) {
            paramWebView.getSettings().setUserAgentString(paramReadableMap.getString(str2));
          }
        }
        else {
          ((HashMap)localObject).put(str2, paramReadableMap.getString(str2));
        }
      }
    }
    paramWebView.loadUrl(str1, (Map)localObject);
    return;
    paramWebView.loadUrl("about:blank");
  }
  
  public void setThirdPartyCookiesEnabled(WebView paramWebView, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      CookieManager.getInstance().setAcceptThirdPartyCookies(paramWebView, paramBoolean);
    }
  }
  
  public void setUrlPrefixesForDefaultIntent(WebView paramWebView, ReadableArray paramReadableArray)
  {
    paramWebView = ((ReactWebView)paramWebView).getReactWebViewClient();
    if ((paramWebView != null) && (paramReadableArray != null)) {
      paramWebView.setUrlPrefixesForDefaultIntent(paramReadableArray);
    }
  }
  
  public void setUserAgent(WebView paramWebView, String paramString)
  {
    if (paramString != null) {
      paramWebView.getSettings().setUserAgentString(paramString);
    }
  }
  
  public void sethardwareAccelerationEnabledExperimental(WebView paramWebView, boolean paramBoolean)
  {
    if (!paramBoolean) {
      paramWebView.setLayerType(1, null);
    }
  }
  
  protected static class ReactWebView
    extends WebView
    implements LifecycleEventListener
  {
    @Nullable
    protected String injectedJS;
    @Nullable
    protected ReactWebViewManager.ReactWebViewClient mReactWebViewClient;
    protected boolean messagingEnabled = false;
    
    public ReactWebView(ThemedReactContext paramThemedReactContext)
    {
      super();
    }
    
    public void callInjectedJavaScript()
    {
      if (getSettings().getJavaScriptEnabled())
      {
        Object localObject = injectedJS;
        if ((localObject != null) && (!TextUtils.isEmpty((CharSequence)localObject)))
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("(function() {\n");
          ((StringBuilder)localObject).append(injectedJS);
          ((StringBuilder)localObject).append(";\n})();");
          evaluateJavascriptWithFallback(((StringBuilder)localObject).toString());
        }
      }
    }
    
    protected void cleanupCallbacksAndDestroy()
    {
      setWebViewClient(null);
      destroy();
    }
    
    protected ReactWebViewBridge createReactWebViewBridge(ReactWebView paramReactWebView)
    {
      return new ReactWebViewBridge(paramReactWebView);
    }
    
    protected void evaluateJavascriptWithFallback(String paramString)
    {
      if (Build.VERSION.SDK_INT >= 19)
      {
        evaluateJavascript(paramString, null);
        return;
      }
      try
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("javascript:");
        localStringBuilder.append(URLEncoder.encode(paramString, "UTF-8"));
        loadUrl(localStringBuilder.toString());
        return;
      }
      catch (UnsupportedEncodingException paramString)
      {
        throw new RuntimeException(paramString);
      }
    }
    
    public ReactWebViewManager.ReactWebViewClient getReactWebViewClient()
    {
      return mReactWebViewClient;
    }
    
    public void linkBridge()
    {
      if (messagingEnabled) {
        evaluateJavascriptWithFallback("(window.originalPostMessage = window.postMessage,window.postMessage = function(data) {__REACT_WEB_VIEW_BRIDGE.postMessage(String(data));})");
      }
    }
    
    public void onHostDestroy()
    {
      cleanupCallbacksAndDestroy();
    }
    
    public void onHostPause() {}
    
    public void onHostResume() {}
    
    public void onMessage(String paramString)
    {
      ReactWebViewManager.dispatchEvent(this, new TopMessageEvent(getId(), paramString));
    }
    
    public void setInjectedJavaScript(String paramString)
    {
      injectedJS = paramString;
    }
    
    public void setMessagingEnabled(boolean paramBoolean)
    {
      if (messagingEnabled == paramBoolean) {
        return;
      }
      messagingEnabled = paramBoolean;
      if (paramBoolean)
      {
        addJavascriptInterface(createReactWebViewBridge(this), "__REACT_WEB_VIEW_BRIDGE");
        linkBridge();
        return;
      }
      removeJavascriptInterface("__REACT_WEB_VIEW_BRIDGE");
    }
    
    public void setWebViewClient(WebViewClient paramWebViewClient)
    {
      super.setWebViewClient(paramWebViewClient);
      mReactWebViewClient = ((ReactWebViewManager.ReactWebViewClient)paramWebViewClient);
    }
    
    protected class ReactWebViewBridge
    {
      ReactWebViewManager.ReactWebView mContext;
      
      ReactWebViewBridge(ReactWebViewManager.ReactWebView paramReactWebView)
      {
        mContext = paramReactWebView;
      }
      
      public void postMessage(String paramString)
      {
        mContext.onMessage(paramString);
      }
    }
  }
  
  protected static class ReactWebViewClient
    extends WebViewClient
  {
    protected boolean mLastLoadFailed = false;
    @Nullable
    protected List<Pattern> mOriginWhitelist;
    @Nullable
    protected ReadableArray mUrlPrefixesForDefaultIntent;
    
    protected ReactWebViewClient() {}
    
    private void launchIntent(Context paramContext, String paramString)
    {
      Object localObject;
      if (paramString.startsWith("intent://")) {
        try
        {
          Intent localIntent = Intent.parseUri(paramString, 1);
        }
        catch (URISyntaxException localURISyntaxException)
        {
          FLog.e("ReactNative", "Can't parse intent:// URI", localURISyntaxException);
        }
      } else {
        localObject = null;
      }
      if (localObject != null)
      {
        ((Intent)localObject).addCategory("android.intent.category.BROWSABLE");
        ((Intent)localObject).setComponent(null);
        ((Intent)localObject).setSelector(null);
        if (paramContext.getPackageManager().resolveActivity((Intent)localObject, 65536) != null) {
          paramContext.startActivity((Intent)localObject);
        } else {
          localObject = new Intent("android.intent.action.VIEW", Uri.parse(((Intent)localObject).getStringExtra("browser_fallback_url")));
        }
      }
      else
      {
        localObject = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      }
      try
      {
        ((Intent)localObject).setFlags(268435456);
        ((Intent)localObject).addCategory("android.intent.category.BROWSABLE");
        paramContext.startActivity((Intent)localObject);
        return;
      }
      catch (ActivityNotFoundException paramContext)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("activity not found to handle uri scheme for: ");
        ((StringBuilder)localObject).append(paramString);
        FLog.w("ReactNative", ((StringBuilder)localObject).toString(), paramContext);
      }
    }
    
    private boolean shouldHandleURL(List paramList, String paramString)
    {
      Object localObject = Uri.parse(paramString);
      if (((Uri)localObject).getScheme() != null) {
        paramString = ((Uri)localObject).getScheme();
      } else {
        paramString = "";
      }
      if (((Uri)localObject).getAuthority() != null) {
        localObject = ((Uri)localObject).getAuthority();
      } else {
        localObject = "";
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString);
      localStringBuilder.append("://");
      localStringBuilder.append((String)localObject);
      paramString = localStringBuilder.toString();
      paramList = paramList.iterator();
      while (paramList.hasNext()) {
        if (((Pattern)paramList.next()).matcher(paramString).matches()) {
          return true;
        }
      }
      return false;
    }
    
    protected WritableMap createWebViewEvent(WebView paramWebView, String paramString)
    {
      WritableMap localWritableMap = Arguments.createMap();
      localWritableMap.putDouble("target", paramWebView.getId());
      localWritableMap.putString("url", paramString);
      boolean bool;
      if ((!mLastLoadFailed) && (paramWebView.getProgress() != 100)) {
        bool = true;
      } else {
        bool = false;
      }
      localWritableMap.putBoolean("loading", bool);
      localWritableMap.putString("title", paramWebView.getTitle());
      localWritableMap.putBoolean("canGoBack", paramWebView.canGoBack());
      localWritableMap.putBoolean("canGoForward", paramWebView.canGoForward());
      return localWritableMap;
    }
    
    protected void emitFinishEvent(WebView paramWebView, String paramString)
    {
      ReactWebViewManager.dispatchEvent(paramWebView, new TopLoadingFinishEvent(paramWebView.getId(), createWebViewEvent(paramWebView, paramString)));
    }
    
    public void onPageFinished(WebView paramWebView, String paramString)
    {
      super.onPageFinished(paramWebView, paramString);
      if (!mLastLoadFailed)
      {
        ReactWebViewManager.ReactWebView localReactWebView = (ReactWebViewManager.ReactWebView)paramWebView;
        localReactWebView.callInjectedJavaScript();
        localReactWebView.linkBridge();
        emitFinishEvent(paramWebView, paramString);
      }
    }
    
    public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
    {
      super.onPageStarted(paramWebView, paramString, paramBitmap);
      mLastLoadFailed = false;
      ReactWebViewManager.dispatchEvent(paramWebView, new TopLoadingStartEvent(paramWebView.getId(), createWebViewEvent(paramWebView, paramString)));
    }
    
    public void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
    {
      super.onReceivedError(paramWebView, paramInt, paramString1, paramString2);
      mLastLoadFailed = true;
      emitFinishEvent(paramWebView, paramString2);
      paramString2 = createWebViewEvent(paramWebView, paramString2);
      paramString2.putDouble("code", paramInt);
      paramString2.putString("description", paramString1);
      ReactWebViewManager.dispatchEvent(paramWebView, new TopLoadingErrorEvent(paramWebView.getId(), paramString2));
    }
    
    public void setOriginWhitelist(List paramList)
    {
      mOriginWhitelist = paramList;
    }
    
    public void setUrlPrefixesForDefaultIntent(ReadableArray paramReadableArray)
    {
      mUrlPrefixesForDefaultIntent = paramReadableArray;
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      if (paramString.equals("about:blank")) {
        return false;
      }
      Object localObject = mUrlPrefixesForDefaultIntent;
      if ((localObject != null) && (((ReadableArray)localObject).size() > 0))
      {
        localObject = mUrlPrefixesForDefaultIntent.toArrayList().iterator();
        while (((Iterator)localObject).hasNext()) {
          if (paramString.startsWith((String)((Iterator)localObject).next()))
          {
            launchIntent(paramWebView.getContext(), paramString);
            return true;
          }
        }
      }
      localObject = mOriginWhitelist;
      if ((localObject != null) && (shouldHandleURL((List)localObject, paramString))) {
        return false;
      }
      launchIntent(paramWebView.getContext(), paramString);
      return true;
    }
  }
}
