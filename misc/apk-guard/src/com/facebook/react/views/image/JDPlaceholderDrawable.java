package com.facebook.react.views.image;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.text.TextUtils;
import com.facebook.common.logging.FLog;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

class JDPlaceholderDrawable
  extends Drawable
{
  private static final String LOGTAG = "JDPlaceholderDrawable";
  private static Map<String, Bitmap> sBitmapHolder = new ConcurrentHashMap();
  private Context mContext;
  private Bitmap mCustomBitmap;
  private int mResId;
  private String mType = filterType(paramString);
  private Paint paint = new Paint();
  
  JDPlaceholderDrawable(String paramString, int paramInt, Context paramContext)
  {
    mResId = paramInt;
    mContext = paramContext;
    prepareBitmap();
  }
  
  private void drawBackground(Canvas paramCanvas, Rect paramRect)
  {
    paramRect = mType;
    if (paramRect == null) {
      return;
    }
    int i = -1;
    switch (paramRect.hashCode())
    {
    default: 
      break;
    case 1501259505: 
      if (paramRect.equals("gray_middle")) {
        i = 3;
      }
      break;
    case 1439558699: 
      if (paramRect.equals("gray_small")) {
        i = 4;
      }
      break;
    case 1179257992: 
      if (paramRect.equals("gray_banner")) {
        i = 0;
      }
      break;
    case 258335745: 
      if (paramRect.equals("white_logo")) {
        i = 6;
      }
      break;
    case 108743972: 
      if (paramRect.equals("gray_big")) {
        i = 2;
      }
      break;
    case -575127183: 
      if (paramRect.equals("white_small")) {
        i = 9;
      }
      break;
    case -824460693: 
      if (paramRect.equals("white_middle")) {
        i = 8;
      }
      break;
    case -923600377: 
      if (paramRect.equals("gray_logo")) {
        i = 1;
      }
      break;
    case -1146462206: 
      if (paramRect.equals("white_banner")) {
        i = 5;
      }
      break;
    case -1654244374: 
      if (paramRect.equals("white_big")) {
        i = 7;
      }
      break;
    }
    switch (i)
    {
    default: 
      return;
    case 5: 
    case 6: 
    case 7: 
    case 8: 
    case 9: 
      paramCanvas.drawColor(Color.parseColor("#ffffff"));
      return;
    }
    paramCanvas.drawColor(Color.parseColor("#f8f8f8"));
  }
  
  private void drawJDDrawable(Canvas paramCanvas, Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Rect localRect1 = getBounds();
    Rect localRect2 = new Rect(0, 0, i, j);
    float f1;
    float f2;
    RectF localRectF;
    if (localRect1.width() < localRect1.height())
    {
      f1 = right / 6;
      f2 = i * f1 / j;
      localRectF = new RectF(right / 2 - right * i / j / 2 + f2 * 8.0F / 10.0F, bottom / 2 - right / 2 + f1, right / 2 + right * i / j / 2 - f2, bottom / 2 + right / 2 - f1 * 8.0F / 10.0F);
    }
    else
    {
      f1 = bottom / 6;
      f2 = i * f1 / j;
      localRectF = new RectF(right / 2 - bottom * i / j / 2 + f2 * 8.0F / 10.0F, f1, right / 2 + bottom * i / j / 2 - f2, bottom / 2 + bottom / 2 - 8.0F * f1 / 10.0F);
    }
    drawBackground(paramCanvas, localRect1);
    paramCanvas.drawBitmap(paramBitmap, localRect2, localRectF, paint);
  }
  
  private void drawJDDrawableBanner(Canvas paramCanvas, Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Rect localRect1 = getBounds();
    Rect localRect2 = new Rect(0, 0, i, j);
    float f1;
    float f2;
    RectF localRectF;
    if (localRect1.width() < localRect1.height() * i / j)
    {
      f1 = right / 30;
      f2 = i * f1 / j;
      localRectF = new RectF(f2 * 8.0F / 10.0F, bottom / 2 - right * j / i / 2 + f1, right / 2 + right / 2 - f2, bottom / 2 + right * j / i / 2 - f1 * 8.0F / 10.0F);
    }
    else
    {
      f1 = bottom / 30;
      f2 = i * f1 / j;
      localRectF = new RectF(right / 2 - bottom * i / j / 2 + f2 * 8.0F / 10.0F, f1, right / 2 + bottom * i / j / 2 - f2, bottom / 2 + bottom / 2 - 8.0F * f1 / 10.0F);
    }
    drawBackground(paramCanvas, localRect1);
    paramCanvas.drawBitmap(paramBitmap, localRect2, localRectF, paint);
  }
  
  private void drawJDDrawableMini(Canvas paramCanvas, Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Rect localRect1 = getBounds();
    Rect localRect2 = new Rect(0, 0, i, j);
    float f1;
    float f2;
    RectF localRectF;
    if (localRect1.width() < localRect1.height())
    {
      f1 = right / 4;
      f2 = i * f1 / j;
      localRectF = new RectF(right / 2 - right * i / j / 2 + f2, bottom / 2 - right / 2 + f1, right / 2 + right * i / j / 2 - f2, bottom / 2 + right / 2 - f1);
    }
    else
    {
      f1 = bottom / 4;
      f2 = i * f1 / j;
      localRectF = new RectF(right / 2 - bottom * i / j / 2 + f2, f1, right / 2 + bottom * i / j / 2 - f2, bottom / 2 + bottom / 2 - f1);
    }
    drawBackground(paramCanvas, localRect1);
    paramCanvas.drawBitmap(paramBitmap, localRect2, localRectF, paint);
  }
  
  private void drawJDDrawableOrigin(Canvas paramCanvas, Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Rect localRect1 = getBounds();
    Rect localRect2 = new Rect(0, 0, i, j);
    RectF localRectF = new RectF(left, top, right, bottom);
    drawBackground(paramCanvas, localRect1);
    paramCanvas.drawBitmap(paramBitmap, localRect2, localRectF, paint);
  }
  
  private void drawJDDrawableRaw(Canvas paramCanvas, Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Rect localRect = getBounds();
    float f1 = right - localRect.width() / 2;
    float f2 = bottom - localRect.height() / 2;
    drawBackground(paramCanvas, localRect);
    paramCanvas.drawBitmap(paramBitmap, f1 - i / 2, f2 - j / 2, paint);
  }
  
  private String filterType(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    int i = -1;
    switch (paramString.hashCode())
    {
    default: 
      break;
    case 1501259505: 
      if (paramString.equals("gray_middle")) {
        i = 3;
      }
      break;
    case 1439558699: 
      if (paramString.equals("gray_small")) {
        i = 4;
      }
      break;
    case 1179257992: 
      if (paramString.equals("gray_banner")) {
        i = 0;
      }
      break;
    case 258335745: 
      if (paramString.equals("white_logo")) {
        i = 6;
      }
      break;
    case 108743972: 
      if (paramString.equals("gray_big")) {
        i = 2;
      }
      break;
    case -575127183: 
      if (paramString.equals("white_small")) {
        i = 9;
      }
      break;
    case -824460693: 
      if (paramString.equals("white_middle")) {
        i = 8;
      }
      break;
    case -923600377: 
      if (paramString.equals("gray_logo")) {
        i = 1;
      }
      break;
    case -1146462206: 
      if (paramString.equals("white_banner")) {
        i = 5;
      }
      break;
    case -1654244374: 
      if (paramString.equals("white_big")) {
        i = 7;
      }
      break;
    }
    switch (i)
    {
    default: 
      return null;
    }
    return paramString;
  }
  
  private Bitmap getBitmapFromResId(int paramInt)
  {
    if (paramInt <= 0) {
      return null;
    }
    Object localObject1 = mContext;
    Object localObject2;
    try
    {
      localObject1 = ((Context)localObject1).getResources().getDrawable(paramInt);
      localObject1 = (BitmapDrawable)localObject1;
    }
    catch (Exception localException)
    {
      FLog.e(LOGTAG, localException.toString());
      localObject2 = null;
    }
    if (localObject2 == null) {
      return null;
    }
    return localObject2.getBitmap();
  }
  
  private void prepareBitmap()
  {
    if (mResId <= 0) {
      return;
    }
    if (TextUtils.isEmpty(mType))
    {
      mCustomBitmap = getBitmapFromResId(mResId);
      return;
    }
    if (sBitmapHolder == null) {
      sBitmapHolder = new ConcurrentHashMap();
    }
    if (sBitmapHolder.get(mType) == null) {
      sBitmapHolder.put(mType, getBitmapFromResId(mResId));
    }
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (TextUtils.isEmpty(mType))
    {
      drawJDDrawableOrigin(paramCanvas, mCustomBitmap);
      return;
    }
    Object localObject = sBitmapHolder;
    if (localObject == null) {
      return;
    }
    localObject = (Bitmap)((Map)localObject).get(mType);
    String str = mType;
    int i = -1;
    switch (str.hashCode())
    {
    default: 
      break;
    case 1501259505: 
      if (str.equals("gray_middle")) {
        i = 1;
      }
      break;
    case 1439558699: 
      if (str.equals("gray_small")) {
        i = 8;
      }
      break;
    case 1179257992: 
      if (str.equals("gray_banner")) {
        i = 4;
      }
      break;
    case 258335745: 
      if (str.equals("white_logo")) {
        i = 7;
      }
      break;
    case 108743972: 
      if (str.equals("gray_big")) {
        i = 0;
      }
      break;
    case -575127183: 
      if (str.equals("white_small")) {
        i = 9;
      }
      break;
    case -824460693: 
      if (str.equals("white_middle")) {
        i = 3;
      }
      break;
    case -923600377: 
      if (str.equals("gray_logo")) {
        i = 6;
      }
      break;
    case -1146462206: 
      if (str.equals("white_banner")) {
        i = 5;
      }
      break;
    case -1654244374: 
      if (str.equals("white_big")) {
        i = 2;
      }
      break;
    }
    switch (i)
    {
    default: 
      return;
    case 8: 
    case 9: 
      drawJDDrawable(paramCanvas, (Bitmap)localObject);
      return;
    case 4: 
    case 5: 
    case 6: 
    case 7: 
      drawJDDrawableBanner(paramCanvas, (Bitmap)localObject);
      return;
    }
    drawJDDrawable(paramCanvas, (Bitmap)localObject);
  }
  
  public int getOpacity()
  {
    return 0;
  }
  
  public void setAlpha(int paramInt) {}
  
  public void setColorFilter(ColorFilter paramColorFilter) {}
  
  static abstract interface PlaceholderType
  {
    public static final String GRAY_BANNER = "gray_banner";
    public static final String GRAY_BIG = "gray_big";
    public static final String GRAY_LOGO = "gray_logo";
    public static final String GRAY_MID = "gray_middle";
    public static final String GRAY_SMALL = "gray_small";
    public static final String WHITE_BANNER = "white_banner";
    public static final String WHITE_BIG = "white_big";
    public static final String WHITE_LOGO = "white_logo";
    public static final String WHITE_MID = "white_middle";
    public static final String WHITE_SMALL = "white_small";
  }
}
