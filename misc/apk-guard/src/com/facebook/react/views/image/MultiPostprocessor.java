package com.facebook.react.views.image;

import android.graphics.Bitmap;
import com.facebook.cache.common.CacheKey;
import com.facebook.cache.common.MultiCacheKey;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
import com.facebook.imagepipeline.request.Postprocessor;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class MultiPostprocessor
  implements Postprocessor
{
  private final List<Postprocessor> mPostprocessors;
  
  private MultiPostprocessor(List paramList)
  {
    mPostprocessors = new LinkedList(paramList);
  }
  
  public static Postprocessor from(List paramList)
  {
    switch (paramList.size())
    {
    default: 
      return new MultiPostprocessor(paramList);
    case 1: 
      return (Postprocessor)paramList.get(0);
    }
    return null;
  }
  
  public String getName()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = mPostprocessors.iterator();
    while (localIterator.hasNext())
    {
      Postprocessor localPostprocessor = (Postprocessor)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append(",");
      }
      localStringBuilder.append(localPostprocessor.getName());
    }
    localStringBuilder.insert(0, "MultiPostProcessor (");
    localStringBuilder.append(")");
    return localStringBuilder.toString();
  }
  
  public CacheKey getPostprocessorCacheKey()
  {
    LinkedList localLinkedList = new LinkedList();
    Iterator localIterator = mPostprocessors.iterator();
    while (localIterator.hasNext()) {
      localLinkedList.push(((Postprocessor)localIterator.next()).getPostprocessorCacheKey());
    }
    return new MultiCacheKey(localLinkedList);
  }
  
  public CloseableReference process(Bitmap paramBitmap, PlatformBitmapFactory paramPlatformBitmapFactory)
  {
    Object localObject1 = null;
    Object localObject2 = null;
    try
    {
      Iterator localIterator = mPostprocessors.iterator();
      Object localObject3;
      for (CloseableReference localCloseableReference = null;; localCloseableReference = ((CloseableReference)localObject3).clone())
      {
        localObject1 = localObject2;
        boolean bool = localIterator.hasNext();
        if (!bool) {
          break;
        }
        localObject1 = localObject2;
        Postprocessor localPostprocessor = (Postprocessor)localIterator.next();
        if (localCloseableReference != null)
        {
          localObject1 = localObject2;
          localObject3 = (Bitmap)localCloseableReference.get();
        }
        else
        {
          localObject3 = paramBitmap;
        }
        localObject1 = localObject2;
        localObject3 = localPostprocessor.process((Bitmap)localObject3, paramPlatformBitmapFactory);
        localObject2 = localObject3;
        localObject1 = localObject2;
        CloseableReference.closeSafely(localCloseableReference);
        localObject1 = localObject2;
      }
      localObject1 = localObject2;
      paramBitmap = localObject2.clone();
      CloseableReference.closeSafely(localObject2);
      return paramBitmap;
    }
    catch (Throwable paramBitmap)
    {
      CloseableReference.closeSafely(localObject1);
      throw paramBitmap;
    }
  }
}
