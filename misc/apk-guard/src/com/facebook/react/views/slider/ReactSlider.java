package com.facebook.react.views.slider;

import android.content.Context;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.view.View;
import android.widget.AbsSeekBar;
import android.widget.ProgressBar;
import android.widget.SeekBar;

public class ReactSlider
  extends SeekBar
{
  private static int DEFAULT_TOTAL_STEPS;
  private double mMaxValue = 0.0D;
  private double mMinValue = 0.0D;
  private double mStep = 0.0D;
  private double mStepCalculated = 0.0D;
  private double mValue = 0.0D;
  
  public ReactSlider(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    disableStateListAnimatorIfNeeded();
  }
  
  private void disableStateListAnimatorIfNeeded()
  {
    if ((Build.VERSION.SDK_INT >= 23) && (Build.VERSION.SDK_INT < 26)) {
      super.setStateListAnimator(null);
    }
  }
  
  private double getStepValue()
  {
    double d = mStep;
    if (d > 0.0D) {
      return d;
    }
    return mStepCalculated;
  }
  
  private int getTotalSteps()
  {
    return (int)Math.ceil((mMaxValue - mMinValue) / getStepValue());
  }
  
  private void updateAll()
  {
    if (mStep == 0.0D)
    {
      double d1 = mMaxValue;
      double d2 = mMinValue;
      double d3 = DEFAULT_TOTAL_STEPS;
      Double.isNaN(d3);
      mStepCalculated = ((d1 - d2) / d3);
    }
    setMax(getTotalSteps());
    updateValue();
  }
  
  private void updateValue()
  {
    double d1 = mValue;
    double d2 = mMinValue;
    d1 = (d1 - d2) / (mMaxValue - d2);
    d2 = getTotalSteps();
    Double.isNaN(d2);
    setProgress((int)Math.round(d1 * d2));
  }
  
  void setMaxValue(double paramDouble)
  {
    mMaxValue = paramDouble;
    updateAll();
  }
  
  void setMinValue(double paramDouble)
  {
    mMinValue = paramDouble;
    updateAll();
  }
  
  void setStep(double paramDouble)
  {
    mStep = paramDouble;
    updateAll();
  }
  
  void setValue(double paramDouble)
  {
    mValue = paramDouble;
    updateValue();
  }
  
  public double toRealProgress(int paramInt)
  {
    if (paramInt == getMax()) {
      return mMaxValue;
    }
    double d1 = paramInt;
    double d2 = getStepValue();
    Double.isNaN(d1);
    return d1 * d2 + mMinValue;
  }
}
