package com.facebook.react.modules.storage;

import android.content.Context;
import android.database.sqlite.SQLiteClosable;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import com.facebook.common.logging.FLog;
import javax.annotation.Nullable;

public class ReactDatabaseSupplier
  extends SQLiteOpenHelper
{
  public static final String DATABASE_NAME = "RKStorage";
  private static final int DATABASE_VERSION = 1;
  static final String KEY_COLUMN = "key";
  private static final int SLEEP_TIME_MS = 30;
  static final String TABLE_CATALYST = "catalystLocalStorage";
  static final String VALUE_COLUMN = "value";
  static final String VERSION_TABLE_CREATE = "CREATE TABLE catalystLocalStorage (key TEXT PRIMARY KEY, value TEXT NOT NULL)";
  @Nullable
  private static ReactDatabaseSupplier sReactDatabaseSupplierInstance;
  @Nullable
  private SQLiteDatabase db;
  private Context mContext;
  private long mMaximumDatabaseSize = 6291456L;
  
  private ReactDatabaseSupplier(Context paramContext)
  {
    super(paramContext, "RKStorage", null, 1);
    mContext = paramContext;
  }
  
  private void closeDatabase()
  {
    try
    {
      if ((db != null) && (db.isOpen()))
      {
        db.close();
        db = null;
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private boolean deleteDatabase()
  {
    try
    {
      closeDatabase();
      boolean bool = mContext.deleteDatabase("RKStorage");
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static void deleteInstance()
  {
    sReactDatabaseSupplierInstance = null;
  }
  
  public static ReactDatabaseSupplier getInstance(Context paramContext)
  {
    if (sReactDatabaseSupplierInstance == null) {
      sReactDatabaseSupplierInstance = new ReactDatabaseSupplier(paramContext.getApplicationContext());
    }
    return sReactDatabaseSupplierInstance;
  }
  
  void clear()
  {
    try
    {
      openDatabase().delete("catalystLocalStorage", null, null);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void clearAndCloseDatabase()
    throws RuntimeException
  {
    try
    {
      clear();
      closeDatabase();
      FLog.d("ReactNative", "Cleaned RKStorage");
      return;
    }
    catch (Throwable localThrowable)
    {
      break label51;
      if (deleteDatabase())
      {
        FLog.d("ReactNative", "Deleted Local Database RKStorage");
        return;
      }
      throw new RuntimeException("Clearing and deleting database RKStorage failed");
      throw localThrowable;
    }
    catch (Exception localException)
    {
      label51:
      for (;;) {}
    }
  }
  
  boolean ensureDatabase()
  {
    int i;
    label119:
    for (;;)
    {
      try
      {
        if (db != null)
        {
          boolean bool = db.isOpen();
          if (bool) {
            return true;
          }
        }
        i = 0;
        if (i < 2) {
          if (i <= 0) {}
        }
      }
      catch (Throwable localThrowable)
      {
        SQLiteDatabase localSQLiteDatabase;
        throw localThrowable;
      }
      try
      {
        deleteDatabase();
        localSQLiteDatabase = getWritableDatabase();
        db = localSQLiteDatabase;
      }
      catch (SQLiteException localSQLiteException)
      {
        continue;
      }
      try
      {
        Thread.sleep(30L);
      }
      catch (InterruptedException localInterruptedException)
      {
        continue;
        i += 1;
      }
      Thread.currentThread().interrupt();
      break label119;
      if (db == null)
      {
        FLog.d("ReactNative", "ensureDatabase db == null");
        return false;
      }
      db.setMaximumSize(mMaximumDatabaseSize);
      return true;
    }
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("CREATE TABLE catalystLocalStorage (key TEXT PRIMARY KEY, value TEXT NOT NULL)");
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
  {
    if (paramInt1 != paramInt2)
    {
      deleteDatabase();
      onCreate(paramSQLiteDatabase);
    }
  }
  
  public SQLiteDatabase openDatabase()
  {
    try
    {
      ensureDatabase();
      SQLiteDatabase localSQLiteDatabase = db;
      return localSQLiteDatabase;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void setMaximumSize(long paramLong)
  {
    try
    {
      mMaximumDatabaseSize = paramLong;
      if (db != null) {
        db.setMaximumSize(mMaximumDatabaseSize);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
