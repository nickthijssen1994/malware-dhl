package com.facebook.react.modules.camera;

import android.content.ContentResolver;
import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.database.Cursor;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.media.MediaMetadataRetriever;
import android.media.MediaScannerConnection.OnScanCompletedListener;
import android.net.Uri;
import android.os.AsyncTask;
import android.provider.MediaStore.Files;
import android.text.TextUtils;
import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.GuardedAsyncTask;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.io.IOException;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nullable;

@ReactModule(name="CameraRollManager")
public class CameraRollManager
  extends ReactContextBaseJavaModule
{
  private static final String ASSET_TYPE_ALL = "All";
  private static final String ASSET_TYPE_PHOTOS = "Photos";
  private static final String ASSET_TYPE_VIDEOS = "Videos";
  private static final String ERROR_UNABLE_TO_FILTER = "E_UNABLE_TO_FILTER";
  private static final String ERROR_UNABLE_TO_LOAD = "E_UNABLE_TO_LOAD";
  private static final String ERROR_UNABLE_TO_LOAD_PERMISSION = "E_UNABLE_TO_LOAD_PERMISSION";
  private static final String ERROR_UNABLE_TO_SAVE = "E_UNABLE_TO_SAVE";
  public static final String NAME = "CameraRollManager";
  private static final String[] PROJECTION = { "_id", "mime_type", "bucket_display_name", "datetaken", "width", "height", "longitude", "latitude", "_data" };
  private static final String SELECTION_BUCKET = "bucket_display_name = ?";
  private static final String SELECTION_DATE_TAKEN = "datetaken < ?";
  
  public CameraRollManager(ReactApplicationContext paramReactApplicationContext)
  {
    super(paramReactApplicationContext);
  }
  
  private static void putBasicNodeInfo(Cursor paramCursor, WritableMap paramWritableMap, int paramInt1, int paramInt2, int paramInt3)
  {
    paramWritableMap.putString("type", paramCursor.getString(paramInt1));
    paramWritableMap.putString("group_name", paramCursor.getString(paramInt2));
    double d = paramCursor.getLong(paramInt3);
    Double.isNaN(d);
    paramWritableMap.putDouble("timestamp", d / 1000.0D);
  }
  
  private static void putEdges(ContentResolver paramContentResolver, Cursor paramCursor, WritableMap paramWritableMap, int paramInt)
  {
    WritableNativeArray localWritableNativeArray = new WritableNativeArray();
    paramCursor.moveToFirst();
    int j = paramCursor.getColumnIndex("_id");
    int n = paramCursor.getColumnIndex("mime_type");
    int i1 = paramCursor.getColumnIndex("bucket_display_name");
    int i2 = paramCursor.getColumnIndex("datetaken");
    int i3 = paramCursor.getColumnIndex("width");
    int i4 = paramCursor.getColumnIndex("height");
    int i5 = paramCursor.getColumnIndex("longitude");
    int k = paramCursor.getColumnIndex("latitude");
    int i6 = paramCursor.getColumnIndex("_data");
    int m;
    for (int i = 0; (i < paramInt) && (!paramCursor.isAfterLast()); i = m + 1)
    {
      WritableNativeMap localWritableNativeMap1 = new WritableNativeMap();
      WritableNativeMap localWritableNativeMap2 = new WritableNativeMap();
      m = i;
      if (putImageInfo(paramContentResolver, paramCursor, localWritableNativeMap2, j, i3, i4, i6))
      {
        putBasicNodeInfo(paramCursor, localWritableNativeMap2, n, i1, i2);
        putLocationInfo(paramCursor, localWritableNativeMap2, i5, k);
        localWritableNativeMap1.putMap("node", localWritableNativeMap2);
        localWritableNativeArray.pushMap(localWritableNativeMap1);
      }
      else
      {
        m = i - 1;
      }
      paramCursor.moveToNext();
    }
    paramWritableMap.putArray("edges", localWritableNativeArray);
  }
  
  private static boolean putImageInfo(ContentResolver paramContentResolver, Cursor paramCursor, WritableMap paramWritableMap, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    WritableNativeMap localWritableNativeMap = new WritableNativeMap();
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("file://");
    ((StringBuilder)localObject).append(paramCursor.getString(paramInt4));
    localObject = Uri.parse(((StringBuilder)localObject).toString());
    localWritableNativeMap.putString("uri", ((Uri)localObject).toString());
    float f4 = paramCursor.getInt(paramInt2);
    float f3 = paramCursor.getInt(paramInt3);
    paramCursor = URLConnection.guessContentTypeFromName(((Uri)localObject).toString());
    float f2 = f4;
    float f1 = f3;
    if (paramCursor != null)
    {
      f2 = f4;
      f1 = f3;
      if (paramCursor.startsWith("video")) {
        try
        {
          paramCursor = paramContentResolver.openAssetFileDescriptor((Uri)localObject, "r");
          MediaMetadataRetriever localMediaMetadataRetriever = new MediaMetadataRetriever();
          localMediaMetadataRetriever.setDataSource(paramCursor.getFileDescriptor());
          if (f4 > 0.0F)
          {
            f2 = f4;
            f1 = f3;
            if (f3 > 0.0F) {
              break label203;
            }
          }
          try
          {
            paramInt1 = Integer.parseInt(localMediaMetadataRetriever.extractMetadata(18));
            f2 = paramInt1;
            paramInt1 = Integer.parseInt(localMediaMetadataRetriever.extractMetadata(19));
            f1 = paramInt1;
            label203:
            paramInt1 = Integer.parseInt(localMediaMetadataRetriever.extractMetadata(9));
            paramInt1 /= 1000;
            localWritableNativeMap.putInt("playableDuration", paramInt1);
            localMediaMetadataRetriever.release();
            paramCursor.close();
          }
          catch (Throwable paramContentResolver) {}catch (NumberFormatException paramContentResolver)
          {
            paramWritableMap = new StringBuilder();
            paramWritableMap.append("Number format exception occurred while trying to fetch video metadata for ");
            paramWritableMap.append(((Uri)localObject).toString());
            FLog.e("ReactNative", paramWritableMap.toString(), paramContentResolver);
            localMediaMetadataRetriever.release();
            paramCursor.close();
            return false;
          }
          localMediaMetadataRetriever.release();
          paramCursor.close();
          throw paramContentResolver;
        }
        catch (Exception paramContentResolver)
        {
          paramCursor = new StringBuilder();
          paramCursor.append("Could not get video metadata for ");
          paramCursor.append(((Uri)localObject).toString());
          FLog.e("ReactNative", paramCursor.toString(), paramContentResolver);
          return false;
        }
      }
    }
    if (f2 > 0.0F)
    {
      f3 = f2;
      f2 = f1;
      if (f1 > 0.0F) {
        break label418;
      }
    }
    try
    {
      paramContentResolver = paramContentResolver.openAssetFileDescriptor((Uri)localObject, "r");
      paramCursor = new BitmapFactory.Options();
      inJustDecodeBounds = true;
      BitmapFactory.decodeFileDescriptor(paramContentResolver.getFileDescriptor(), null, paramCursor);
      f3 = outWidth;
      f2 = outHeight;
      paramContentResolver.close();
      label418:
      localWritableNativeMap.putDouble("width", f3);
      localWritableNativeMap.putDouble("height", f2);
      paramWritableMap.putMap("image", localWritableNativeMap);
      return true;
    }
    catch (IOException paramContentResolver)
    {
      paramCursor = new StringBuilder();
      paramCursor.append("Could not get width/height for ");
      paramCursor.append(((Uri)localObject).toString());
      FLog.e("ReactNative", paramCursor.toString(), paramContentResolver);
    }
    return false;
  }
  
  private static void putLocationInfo(Cursor paramCursor, WritableMap paramWritableMap, int paramInt1, int paramInt2)
  {
    double d1 = paramCursor.getDouble(paramInt1);
    double d2 = paramCursor.getDouble(paramInt2);
    if ((d1 > 0.0D) || (d2 > 0.0D))
    {
      paramCursor = new WritableNativeMap();
      paramCursor.putDouble("longitude", d1);
      paramCursor.putDouble("latitude", d2);
      paramWritableMap.putMap("location", paramCursor);
    }
  }
  
  private static void putPageInfo(Cursor paramCursor, WritableMap paramWritableMap, int paramInt)
  {
    WritableNativeMap localWritableNativeMap = new WritableNativeMap();
    boolean bool;
    if (paramInt < paramCursor.getCount()) {
      bool = true;
    } else {
      bool = false;
    }
    localWritableNativeMap.putBoolean("has_next_page", bool);
    if (paramInt < paramCursor.getCount())
    {
      paramCursor.moveToPosition(paramInt - 1);
      localWritableNativeMap.putString("end_cursor", paramCursor.getString(paramCursor.getColumnIndex("datetaken")));
    }
    paramWritableMap.putMap("page_info", localWritableNativeMap);
  }
  
  public String getName()
  {
    return "CameraRollManager";
  }
  
  public void getPhotos(ReadableMap paramReadableMap, Promise paramPromise)
  {
    int i = paramReadableMap.getInt("first");
    String str1;
    if (paramReadableMap.hasKey("after")) {
      str1 = paramReadableMap.getString("after");
    } else {
      str1 = null;
    }
    String str2;
    if (paramReadableMap.hasKey("groupName")) {
      str2 = paramReadableMap.getString("groupName");
    } else {
      str2 = null;
    }
    String str3;
    if (paramReadableMap.hasKey("assetType")) {
      str3 = paramReadableMap.getString("assetType");
    } else {
      str3 = "Photos";
    }
    ReadableArray localReadableArray;
    if (paramReadableMap.hasKey("mimeTypes")) {
      localReadableArray = paramReadableMap.getArray("mimeTypes");
    } else {
      localReadableArray = null;
    }
    if (!paramReadableMap.hasKey("groupTypes"))
    {
      new GetMediaTask(getReactApplicationContext(), i, str1, str2, localReadableArray, str3, paramPromise, null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
      return;
    }
    throw new JSApplicationIllegalArgumentException("groupTypes is not supported on Android");
  }
  
  public void saveToCameraRoll(String paramString1, String paramString2, Promise paramPromise)
  {
    new SaveToCameraRoll(getReactApplicationContext(), Uri.parse(paramString1), paramPromise).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
  }
  
  private static class GetMediaTask
    extends GuardedAsyncTask<Void, Void>
  {
    @Nullable
    private final String mAfter;
    private final String mAssetType;
    private final Context mContext;
    private final int mFirst;
    @Nullable
    private final String mGroupName;
    @Nullable
    private final ReadableArray mMimeTypes;
    private final Promise mPromise;
    
    private GetMediaTask(ReactContext paramReactContext, int paramInt, String paramString1, String paramString2, ReadableArray paramReadableArray, String paramString3, Promise paramPromise)
    {
      super();
      mContext = paramReactContext;
      mFirst = paramInt;
      mAfter = paramString1;
      mGroupName = paramString2;
      mMimeTypes = paramReadableArray;
      mPromise = paramPromise;
      mAssetType = paramString3;
    }
    
    protected void doInBackgroundGuarded(Void... paramVarArgs)
    {
      Object localObject3 = new StringBuilder("1");
      Object localObject4 = new ArrayList();
      if (!TextUtils.isEmpty(mAfter))
      {
        ((StringBuilder)localObject3).append(" AND datetaken < ?");
        ((List)localObject4).add(mAfter);
      }
      if (!TextUtils.isEmpty(mGroupName))
      {
        ((StringBuilder)localObject3).append(" AND bucket_display_name = ?");
        ((List)localObject4).add(mGroupName);
      }
      if (mAssetType.equals("Photos"))
      {
        ((StringBuilder)localObject3).append(" AND media_type = 1");
      }
      else if (mAssetType.equals("Videos"))
      {
        ((StringBuilder)localObject3).append(" AND media_type = 3");
      }
      else
      {
        if (!mAssetType.equals("All")) {
          break label459;
        }
        ((StringBuilder)localObject3).append(" AND media_type IN (3,1)");
      }
      paramVarArgs = mMimeTypes;
      int i;
      if ((paramVarArgs != null) && (paramVarArgs.size() > 0))
      {
        ((StringBuilder)localObject3).append(" AND mime_type IN (");
        i = 0;
        while (i < mMimeTypes.size())
        {
          ((StringBuilder)localObject3).append("?,");
          ((List)localObject4).add(mMimeTypes.getString(i));
          i += 1;
        }
        ((StringBuilder)localObject3).replace(((StringBuilder)localObject3).length() - 1, ((StringBuilder)localObject3).length(), ")");
      }
      paramVarArgs = new WritableNativeMap();
      Object localObject1 = mContext.getContentResolver();
      try
      {
        Object localObject2 = MediaStore.Files.getContentUri("external");
        String[] arrayOfString = CameraRollManager.PROJECTION;
        localObject3 = ((StringBuilder)localObject3).toString();
        i = ((List)localObject4).size();
        Object localObject5 = new String[i];
        localObject4 = ((List)localObject4).toArray((Object[])localObject5);
        localObject4 = (String[])localObject4;
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append("datetaken DESC, date_modified DESC LIMIT ");
        i = mFirst;
        ((StringBuilder)localObject5).append(i + 1);
        localObject2 = ((ContentResolver)localObject1).query((Uri)localObject2, arrayOfString, (String)localObject3, (String[])localObject4, ((StringBuilder)localObject5).toString());
        if (localObject2 == null)
        {
          paramVarArgs = mPromise;
          paramVarArgs.reject("E_UNABLE_TO_LOAD", "Could not get media");
          return;
        }
        try
        {
          CameraRollManager.putEdges((ContentResolver)localObject1, (Cursor)localObject2, paramVarArgs, mFirst);
          CameraRollManager.putPageInfo((Cursor)localObject2, paramVarArgs, mFirst);
          ((Cursor)localObject2).close();
          localObject1 = mPromise;
          ((Promise)localObject1).resolve(paramVarArgs);
          return;
        }
        catch (Throwable localThrowable)
        {
          ((Cursor)localObject2).close();
          localObject2 = mPromise;
          ((Promise)localObject2).resolve(paramVarArgs);
          throw localThrowable;
        }
        paramVarArgs = mPromise;
      }
      catch (SecurityException paramVarArgs)
      {
        mPromise.reject("E_UNABLE_TO_LOAD_PERMISSION", "Could not get media: need READ_EXTERNAL_STORAGE permission", paramVarArgs);
        return;
      }
      label459:
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Invalid filter option: '");
      localStringBuilder.append(mAssetType);
      localStringBuilder.append("'. Expected one of '");
      localStringBuilder.append("Photos");
      localStringBuilder.append("', '");
      localStringBuilder.append("Videos");
      localStringBuilder.append("' or '");
      localStringBuilder.append("All");
      localStringBuilder.append("'.");
      paramVarArgs.reject("E_UNABLE_TO_FILTER", localStringBuilder.toString());
    }
  }
  
  private static class SaveToCameraRoll
    extends GuardedAsyncTask<Void, Void>
  {
    private final Context mContext;
    private final Promise mPromise;
    private final Uri mUri;
    
    public SaveToCameraRoll(ReactContext paramReactContext, Uri paramUri, Promise paramPromise)
    {
      super();
      mContext = paramReactContext;
      mUri = paramUri;
      mPromise = paramPromise;
    }
    
    /* Error */
    protected void doInBackgroundGuarded(Void... paramVarArgs)
    {
      // Byte code:
      //   0: new 43	java/io/File
      //   3: dup
      //   4: aload_0
      //   5: getfield 25	com/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll:mUri	Landroid/net/Uri;
      //   8: invokevirtual 49	android/net/Uri:getPath	()Ljava/lang/String;
      //   11: invokespecial 52	java/io/File:<init>	(Ljava/lang/String;)V
      //   14: astore 8
      //   16: aconst_null
      //   17: astore 7
      //   19: aconst_null
      //   20: astore 6
      //   22: getstatic 58	android/os/Environment:DIRECTORY_DCIM	Ljava/lang/String;
      //   25: astore_1
      //   26: aload_1
      //   27: invokestatic 62	android/os/Environment:getExternalStoragePublicDirectory	(Ljava/lang/String;)Ljava/io/File;
      //   30: astore 9
      //   32: aload 9
      //   34: invokevirtual 66	java/io/File:mkdirs	()Z
      //   37: pop
      //   38: aload 9
      //   40: invokevirtual 69	java/io/File:isDirectory	()Z
      //   43: istore_3
      //   44: iload_3
      //   45: ifne +19 -> 64
      //   48: aload_0
      //   49: getfield 27	com/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll:mPromise	Lcom/facebook/react/bridge/Promise;
      //   52: astore_1
      //   53: aload_1
      //   54: ldc 71
      //   56: ldc 73
      //   58: invokeinterface 79 3 0
      //   63: return
      //   64: new 43	java/io/File
      //   67: dup
      //   68: aload 9
      //   70: aload 8
      //   72: invokevirtual 82	java/io/File:getName	()Ljava/lang/String;
      //   75: invokespecial 85	java/io/File:<init>	(Ljava/io/File;Ljava/lang/String;)V
      //   78: astore 4
      //   80: aload 8
      //   82: invokevirtual 82	java/io/File:getName	()Ljava/lang/String;
      //   85: astore 5
      //   87: aload 5
      //   89: astore_1
      //   90: aload 5
      //   92: bipush 46
      //   94: invokevirtual 91	java/lang/String:indexOf	(I)I
      //   97: istore_2
      //   98: iload_2
      //   99: iflt +36 -> 135
      //   102: aload 5
      //   104: iconst_0
      //   105: aload 5
      //   107: bipush 46
      //   109: invokevirtual 94	java/lang/String:lastIndexOf	(I)I
      //   112: invokevirtual 98	java/lang/String:substring	(II)Ljava/lang/String;
      //   115: astore_1
      //   116: aload 5
      //   118: aload 5
      //   120: bipush 46
      //   122: invokevirtual 94	java/lang/String:lastIndexOf	(I)I
      //   125: invokevirtual 101	java/lang/String:substring	(I)Ljava/lang/String;
      //   128: astore 5
      //   130: iconst_0
      //   131: istore_2
      //   132: goto +9 -> 141
      //   135: ldc 103
      //   137: astore 5
      //   139: iconst_0
      //   140: istore_2
      //   141: aload 4
      //   143: invokevirtual 106	java/io/File:createNewFile	()Z
      //   146: istore_3
      //   147: iload_3
      //   148: ifne +65 -> 213
      //   151: new 108	java/lang/StringBuilder
      //   154: dup
      //   155: invokespecial 111	java/lang/StringBuilder:<init>	()V
      //   158: astore 4
      //   160: aload 4
      //   162: aload_1
      //   163: invokevirtual 115	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   166: pop
      //   167: aload 4
      //   169: ldc 117
      //   171: invokevirtual 115	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   174: pop
      //   175: aload 4
      //   177: iload_2
      //   178: invokevirtual 120	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   181: pop
      //   182: aload 4
      //   184: aload 5
      //   186: invokevirtual 115	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   189: pop
      //   190: new 43	java/io/File
      //   193: dup
      //   194: aload 9
      //   196: aload 4
      //   198: invokevirtual 123	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   201: invokespecial 85	java/io/File:<init>	(Ljava/io/File;Ljava/lang/String;)V
      //   204: astore 4
      //   206: iload_2
      //   207: iconst_1
      //   208: iadd
      //   209: istore_2
      //   210: goto -69 -> 141
      //   213: new 125	java/io/FileInputStream
      //   216: dup
      //   217: aload 8
      //   219: invokespecial 128	java/io/FileInputStream:<init>	(Ljava/io/File;)V
      //   222: invokevirtual 132	java/io/FileInputStream:getChannel	()Ljava/nio/channels/FileChannel;
      //   225: astore 5
      //   227: new 134	java/io/FileOutputStream
      //   230: dup
      //   231: aload 4
      //   233: invokespecial 135	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
      //   236: invokevirtual 136	java/io/FileOutputStream:getChannel	()Ljava/nio/channels/FileChannel;
      //   239: astore 6
      //   241: aload 6
      //   243: astore_1
      //   244: aload 6
      //   246: aload 5
      //   248: lconst_0
      //   249: aload 5
      //   251: invokevirtual 142	java/nio/channels/FileChannel:size	()J
      //   254: invokevirtual 146	java/nio/channels/FileChannel:transferFrom	(Ljava/nio/channels/ReadableByteChannel;JJ)J
      //   257: pop2
      //   258: aload 5
      //   260: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   263: aload 6
      //   265: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   268: aload_0
      //   269: getfield 23	com/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll:mContext	Landroid/content/Context;
      //   272: astore 7
      //   274: aload 4
      //   276: invokevirtual 152	java/io/File:getAbsolutePath	()Ljava/lang/String;
      //   279: astore 4
      //   281: new 10	com/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll$1
      //   284: dup
      //   285: aload_0
      //   286: invokespecial 155	com/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll$1:<init>	(Lcom/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll;)V
      //   289: astore 8
      //   291: aload 7
      //   293: iconst_1
      //   294: anewarray 87	java/lang/String
      //   297: dup
      //   298: iconst_0
      //   299: aload 4
      //   301: aastore
      //   302: aconst_null
      //   303: aload 8
      //   305: invokestatic 161	android/media/MediaScannerConnection:scanFile	(Landroid/content/Context;[Ljava/lang/String;[Ljava/lang/String;Landroid/media/MediaScannerConnection$OnScanCompletedListener;)V
      //   308: aload 5
      //   310: ifnull +28 -> 338
      //   313: aload 5
      //   315: invokevirtual 164	java/nio/channels/FileChannel:isOpen	()Z
      //   318: ifeq +20 -> 338
      //   321: aload 5
      //   323: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   326: goto +12 -> 338
      //   329: astore_1
      //   330: ldc -90
      //   332: ldc -88
      //   334: aload_1
      //   335: invokestatic 174	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      //   338: aload 6
      //   340: ifnull +193 -> 533
      //   343: aload 6
      //   345: invokevirtual 164	java/nio/channels/FileChannel:isOpen	()Z
      //   348: ifeq +185 -> 533
      //   351: aload 6
      //   353: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   356: return
      //   357: astore 4
      //   359: goto +112 -> 471
      //   362: astore 4
      //   364: goto +36 -> 400
      //   367: astore 4
      //   369: aconst_null
      //   370: astore_1
      //   371: goto +100 -> 471
      //   374: astore 4
      //   376: aconst_null
      //   377: astore_1
      //   378: goto +22 -> 400
      //   381: astore 4
      //   383: aconst_null
      //   384: astore_1
      //   385: aload 7
      //   387: astore 5
      //   389: goto +82 -> 471
      //   392: astore 4
      //   394: aconst_null
      //   395: astore_1
      //   396: aload 6
      //   398: astore 5
      //   400: aload_0
      //   401: getfield 27	com/facebook/react/modules/camera/CameraRollManager$SaveToCameraRoll:mPromise	Lcom/facebook/react/bridge/Promise;
      //   404: aload 4
      //   406: invokeinterface 177 2 0
      //   411: aload 5
      //   413: ifnull +30 -> 443
      //   416: aload 5
      //   418: invokevirtual 164	java/nio/channels/FileChannel:isOpen	()Z
      //   421: ifeq +22 -> 443
      //   424: aload 5
      //   426: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   429: goto +14 -> 443
      //   432: astore 4
      //   434: ldc -90
      //   436: ldc -88
      //   438: aload 4
      //   440: invokestatic 174	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      //   443: aload_1
      //   444: ifnull +89 -> 533
      //   447: aload_1
      //   448: invokevirtual 164	java/nio/channels/FileChannel:isOpen	()Z
      //   451: ifeq +82 -> 533
      //   454: aload_1
      //   455: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   458: return
      //   459: astore_1
      //   460: ldc -90
      //   462: ldc -77
      //   464: aload_1
      //   465: invokestatic 174	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      //   468: return
      //   469: astore 4
      //   471: aload 5
      //   473: ifnull +30 -> 503
      //   476: aload 5
      //   478: invokevirtual 164	java/nio/channels/FileChannel:isOpen	()Z
      //   481: ifeq +22 -> 503
      //   484: aload 5
      //   486: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   489: goto +14 -> 503
      //   492: astore 5
      //   494: ldc -90
      //   496: ldc -88
      //   498: aload 5
      //   500: invokestatic 174	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      //   503: aload_1
      //   504: ifnull +26 -> 530
      //   507: aload_1
      //   508: invokevirtual 164	java/nio/channels/FileChannel:isOpen	()Z
      //   511: ifeq +19 -> 530
      //   514: aload_1
      //   515: invokevirtual 149	java/nio/channels/FileChannel:close	()V
      //   518: goto +12 -> 530
      //   521: astore_1
      //   522: ldc -90
      //   524: ldc -77
      //   526: aload_1
      //   527: invokestatic 174	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      //   530: aload 4
      //   532: athrow
      //   533: return
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	534	0	this	SaveToCameraRoll
      //   0	534	1	paramVarArgs	Void[]
      //   97	113	2	i	int
      //   43	105	3	bool	boolean
      //   78	222	4	localObject1	Object
      //   357	1	4	localThrowable1	Throwable
      //   362	1	4	localIOException1	IOException
      //   367	1	4	localThrowable2	Throwable
      //   374	1	4	localIOException2	IOException
      //   381	1	4	localThrowable3	Throwable
      //   392	13	4	localIOException3	IOException
      //   432	7	4	localIOException4	IOException
      //   469	62	4	localThrowable4	Throwable
      //   85	400	5	localObject2	Object
      //   492	7	5	localIOException5	IOException
      //   20	377	6	localFileChannel	java.nio.channels.FileChannel
      //   17	369	7	localContext	Context
      //   14	290	8	localObject3	Object
      //   30	165	9	localFile	java.io.File
      // Exception table:
      //   from	to	target	type
      //   321	326	329	java/io/IOException
      //   244	268	357	java/lang/Throwable
      //   268	274	357	java/lang/Throwable
      //   274	281	357	java/lang/Throwable
      //   281	308	357	java/lang/Throwable
      //   244	268	362	java/io/IOException
      //   274	281	362	java/io/IOException
      //   281	308	362	java/io/IOException
      //   227	241	367	java/lang/Throwable
      //   227	241	374	java/io/IOException
      //   26	44	381	java/lang/Throwable
      //   53	63	381	java/lang/Throwable
      //   64	87	381	java/lang/Throwable
      //   90	98	381	java/lang/Throwable
      //   102	130	381	java/lang/Throwable
      //   141	147	381	java/lang/Throwable
      //   151	206	381	java/lang/Throwable
      //   213	227	381	java/lang/Throwable
      //   26	44	392	java/io/IOException
      //   53	63	392	java/io/IOException
      //   64	87	392	java/io/IOException
      //   90	98	392	java/io/IOException
      //   102	130	392	java/io/IOException
      //   141	147	392	java/io/IOException
      //   151	206	392	java/io/IOException
      //   213	227	392	java/io/IOException
      //   424	429	432	java/io/IOException
      //   351	356	459	java/io/IOException
      //   454	458	459	java/io/IOException
      //   400	411	469	java/lang/Throwable
      //   484	489	492	java/io/IOException
      //   514	518	521	java/io/IOException
    }
  }
}
