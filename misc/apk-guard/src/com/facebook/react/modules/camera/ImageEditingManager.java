package com.facebook.react.modules.camera;

import android.annotation.SuppressLint;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory.Options;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Rect;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.text.TextUtils;
import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.GuardedAsyncTask;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.module.annotations.ReactModule;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@ReactModule(name="ImageEditingManager")
public class ImageEditingManager
  extends ReactContextBaseJavaModule
{
  private static final int COMPRESS_QUALITY = 90;
  @SuppressLint({"InlinedApi"})
  private static final String[] EXIF_ATTRIBUTES = { "FNumber", "DateTime", "DateTimeDigitized", "ExposureTime", "Flash", "FocalLength", "GPSAltitude", "GPSAltitudeRef", "GPSDateStamp", "GPSLatitude", "GPSLatitudeRef", "GPSLongitude", "GPSLongitudeRef", "GPSProcessingMethod", "GPSTimeStamp", "ImageLength", "ImageWidth", "ISOSpeedRatings", "Make", "Model", "Orientation", "SubSecTime", "SubSecTimeDigitized", "SubSecTimeOriginal", "WhiteBalance" };
  private static final List<String> LOCAL_URI_PREFIXES = Arrays.asList(new String[] { "file://", "content://" });
  protected static final String NAME = "ImageEditingManager";
  private static final String TEMP_FILE_PREFIX = "ReactNative_cropped_image_";
  
  public ImageEditingManager(ReactApplicationContext paramReactApplicationContext)
  {
    super(paramReactApplicationContext);
    new CleanTask(getReactApplicationContext(), null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
  }
  
  private static void copyExif(Context paramContext, Uri paramUri, File paramFile)
    throws IOException
  {
    paramContext = getFileFromUri(paramContext, paramUri);
    if (paramContext == null)
    {
      paramContext = new StringBuilder();
      paramContext.append("Couldn't get real path for uri: ");
      paramContext.append(paramUri);
      FLog.warn("ReactNative", paramContext.toString());
      return;
    }
    paramContext = new ExifInterface(paramContext.getAbsolutePath());
    paramUri = new ExifInterface(paramFile.getAbsolutePath());
    paramFile = EXIF_ATTRIBUTES;
    int j = paramFile.length;
    int i = 0;
    while (i < j)
    {
      String str1 = paramFile[i];
      String str2 = paramContext.getAttribute(str1);
      if (str2 != null) {
        paramUri.setAttribute(str1, str2);
      }
      i += 1;
    }
    paramUri.saveAttributes();
  }
  
  private static File createTempFile(Context paramContext, String paramString)
    throws IOException
  {
    File localFile2 = paramContext.getExternalCacheDir();
    File localFile1 = localFile2;
    paramContext = paramContext.getCacheDir();
    if ((localFile2 == null) && (paramContext == null)) {
      throw new IOException("No cache directory available");
    }
    if (localFile2 != null) {
      if (paramContext == null) {
        paramContext = localFile1;
      } else if (localFile2.getFreeSpace() > paramContext.getFreeSpace()) {
        paramContext = localFile1;
      }
    }
    return File.createTempFile("ReactNative_cropped_image_", getFileExtensionForType(paramString), paramContext);
  }
  
  private static Bitmap.CompressFormat getCompressFormatForType(String paramString)
  {
    if ("image/png".equals(paramString)) {
      return Bitmap.CompressFormat.PNG;
    }
    if ("image/webp".equals(paramString)) {
      return Bitmap.CompressFormat.WEBP;
    }
    return Bitmap.CompressFormat.JPEG;
  }
  
  private static int getDecodeSampleSize(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i = 1;
    int j;
    if ((paramInt2 > paramInt3) || (paramInt1 > paramInt4))
    {
      paramInt2 /= 2;
      j = paramInt1 / 2;
      paramInt1 = i;
    }
    while ((j / paramInt1 >= paramInt3) && (paramInt2 / paramInt1 >= paramInt4))
    {
      paramInt1 *= 2;
      continue;
      return 1;
    }
    return paramInt1;
  }
  
  private static String getFileExtensionForType(String paramString)
  {
    if ("image/png".equals(paramString)) {
      return ".png";
    }
    if ("image/webp".equals(paramString)) {
      return ".webp";
    }
    return ".jpg";
  }
  
  private static File getFileFromUri(Context paramContext, Uri paramUri)
  {
    if (paramUri.getScheme().equals("file")) {
      return new File(paramUri.getPath());
    }
    if (paramUri.getScheme().equals("content"))
    {
      paramContext = paramContext.getContentResolver().query(paramUri, new String[] { "_data" }, null, null, null);
      if (paramContext != null) {
        try
        {
          boolean bool = paramContext.moveToFirst();
          if (bool)
          {
            paramUri = paramContext.getString(0);
            bool = TextUtils.isEmpty(paramUri);
            if (!bool)
            {
              paramUri = new File(paramUri);
              paramContext.close();
              return paramUri;
            }
          }
          paramContext.close();
        }
        catch (Throwable paramUri)
        {
          paramContext.close();
          throw paramUri;
        }
      }
    }
    return null;
  }
  
  private static boolean isLocalUri(String paramString)
  {
    Iterator localIterator = LOCAL_URI_PREFIXES.iterator();
    while (localIterator.hasNext()) {
      if (paramString.startsWith((String)localIterator.next())) {
        return true;
      }
    }
    return false;
  }
  
  private static void writeCompressedBitmapToFile(Bitmap paramBitmap, String paramString, File paramFile)
    throws IOException
  {
    paramFile = new FileOutputStream(paramFile);
    try
    {
      paramBitmap.compress(getCompressFormatForType(paramString), 90, paramFile);
      paramFile.close();
      return;
    }
    catch (Throwable paramBitmap)
    {
      paramFile.close();
      throw paramBitmap;
    }
  }
  
  public void cropImage(String paramString, ReadableMap paramReadableMap, Callback paramCallback1, Callback paramCallback2)
  {
    boolean bool = paramReadableMap.hasKey("offset");
    ReadableMap localReadableMap2 = null;
    ReadableMap localReadableMap1;
    if (bool) {
      localReadableMap1 = paramReadableMap.getMap("offset");
    } else {
      localReadableMap1 = null;
    }
    if (paramReadableMap.hasKey("size")) {
      localReadableMap2 = paramReadableMap.getMap("size");
    }
    if ((localReadableMap1 != null) && (localReadableMap2 != null) && (localReadableMap1.hasKey("x")) && (localReadableMap1.hasKey("y")) && (localReadableMap2.hasKey("width")) && (localReadableMap2.hasKey("height")))
    {
      if ((paramString != null) && (!paramString.isEmpty()))
      {
        paramString = new CropTask(getReactApplicationContext(), paramString, (int)localReadableMap1.getDouble("x"), (int)localReadableMap1.getDouble("y"), (int)localReadableMap2.getDouble("width"), (int)localReadableMap2.getDouble("height"), paramCallback1, paramCallback2, null);
        if (paramReadableMap.hasKey("displaySize"))
        {
          paramReadableMap = paramReadableMap.getMap("displaySize");
          paramString.setTargetSize((int)paramReadableMap.getDouble("width"), (int)paramReadableMap.getDouble("height"));
        }
        paramString.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
        return;
      }
      throw new JSApplicationIllegalArgumentException("Please specify a URI");
    }
    throw new JSApplicationIllegalArgumentException("Please specify offset and size");
  }
  
  public Map getConstants()
  {
    return Collections.emptyMap();
  }
  
  public String getName()
  {
    return "ImageEditingManager";
  }
  
  public void onCatalystInstanceDestroy()
  {
    new CleanTask(getReactApplicationContext(), null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
  }
  
  private static class CleanTask
    extends GuardedAsyncTask<Void, Void>
  {
    private final Context mContext;
    
    private CleanTask(ReactContext paramReactContext)
    {
      super();
      mContext = paramReactContext;
    }
    
    private void cleanDirectory(File paramFile)
    {
      paramFile = paramFile.listFiles(new FilenameFilter()
      {
        public boolean accept(File paramAnonymousFile, String paramAnonymousString)
        {
          return paramAnonymousString.startsWith("ReactNative_cropped_image_");
        }
      });
      if (paramFile != null)
      {
        int j = paramFile.length;
        int i = 0;
        while (i < j)
        {
          paramFile[i].delete();
          i += 1;
        }
      }
    }
    
    protected void doInBackgroundGuarded(Void... paramVarArgs)
    {
      cleanDirectory(mContext.getCacheDir());
      paramVarArgs = mContext.getExternalCacheDir();
      if (paramVarArgs != null) {
        cleanDirectory(paramVarArgs);
      }
    }
  }
  
  private static class CropTask
    extends GuardedAsyncTask<Void, Void>
  {
    final Context mContext;
    final Callback mError;
    final int mHeight;
    final Callback mSuccess;
    int mTargetHeight = 0;
    int mTargetWidth = 0;
    final String mUri;
    final int mWidth;
    final int mX;
    final int mY;
    
    private CropTask(ReactContext paramReactContext, String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4, Callback paramCallback1, Callback paramCallback2)
    {
      super();
      if ((paramInt1 >= 0) && (paramInt2 >= 0) && (paramInt3 > 0) && (paramInt4 > 0))
      {
        mContext = paramReactContext;
        mUri = paramString;
        mX = paramInt1;
        mY = paramInt2;
        mWidth = paramInt3;
        mHeight = paramInt4;
        mSuccess = paramCallback1;
        mError = paramCallback2;
        return;
      }
      throw new JSApplicationIllegalArgumentException(String.format("Invalid crop rectangle: [%d, %d, %d, %d]", new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), Integer.valueOf(paramInt3), Integer.valueOf(paramInt4) }));
    }
    
    private Bitmap crop(BitmapFactory.Options paramOptions)
      throws IOException
    {
      InputStream localInputStream = openBitmapInputStream();
      BitmapRegionDecoder localBitmapRegionDecoder = BitmapRegionDecoder.newInstance(localInputStream, false);
      try
      {
        int i = mX;
        int j = mY;
        int k = mX;
        int m = mWidth;
        int n = mY;
        int i1 = mHeight;
        paramOptions = localBitmapRegionDecoder.decodeRegion(new Rect(i, j, k + m, n + i1), paramOptions);
        if (localInputStream != null) {
          localInputStream.close();
        }
        localBitmapRegionDecoder.recycle();
        return paramOptions;
      }
      catch (Throwable paramOptions)
      {
        if (localInputStream != null) {
          localInputStream.close();
        }
        localBitmapRegionDecoder.recycle();
        throw paramOptions;
      }
    }
    
    /* Error */
    private Bitmap cropAndResize(int paramInt1, int paramInt2, BitmapFactory.Options paramOptions)
      throws IOException
    {
      // Byte code:
      //   0: aload_3
      //   1: invokestatic 115	com/facebook/infer/annotation/Assertions:assertNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
      //   4: pop
      //   5: new 117	android/graphics/BitmapFactory$Options
      //   8: dup
      //   9: invokespecial 119	android/graphics/BitmapFactory$Options:<init>	()V
      //   12: astore 13
      //   14: aload 13
      //   16: iconst_1
      //   17: putfield 123	android/graphics/BitmapFactory$Options:inJustDecodeBounds	Z
      //   20: aload_0
      //   21: invokespecial 82	com/facebook/react/modules/camera/ImageEditingManager$CropTask:openBitmapInputStream	()Ljava/io/InputStream;
      //   24: astore 12
      //   26: aload 12
      //   28: aconst_null
      //   29: aload 13
      //   31: invokestatic 129	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
      //   34: pop
      //   35: aload 12
      //   37: ifnull +8 -> 45
      //   40: aload 12
      //   42: invokevirtual 103	java/io/InputStream:close	()V
      //   45: aload_0
      //   46: getfield 41	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mWidth	I
      //   49: istore 10
      //   51: iload 10
      //   53: i2f
      //   54: fstore 4
      //   56: aload_0
      //   57: getfield 43	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mHeight	I
      //   60: istore 11
      //   62: fload 4
      //   64: iload 11
      //   66: i2f
      //   67: fdiv
      //   68: fstore 7
      //   70: iload_1
      //   71: i2f
      //   72: fstore 5
      //   74: iload_2
      //   75: i2f
      //   76: fstore 6
      //   78: fload 5
      //   80: fload 6
      //   82: fdiv
      //   83: fstore 4
      //   85: fload 7
      //   87: fload 4
      //   89: fcmpl
      //   90: ifle +50 -> 140
      //   93: iload 11
      //   95: i2f
      //   96: fload 4
      //   98: fmul
      //   99: fstore 4
      //   101: iload 11
      //   103: i2f
      //   104: fstore 5
      //   106: aload_0
      //   107: getfield 37	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mX	I
      //   110: i2f
      //   111: iload 10
      //   113: i2f
      //   114: fload 4
      //   116: fsub
      //   117: fconst_2
      //   118: fdiv
      //   119: fadd
      //   120: fstore 7
      //   122: aload_0
      //   123: getfield 39	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mY	I
      //   126: i2f
      //   127: fstore 8
      //   129: fload 6
      //   131: iload 11
      //   133: i2f
      //   134: fdiv
      //   135: fstore 6
      //   137: goto +59 -> 196
      //   140: iload 10
      //   142: i2f
      //   143: fstore 9
      //   145: iload 10
      //   147: i2f
      //   148: fload 4
      //   150: fdiv
      //   151: fstore 4
      //   153: aload_0
      //   154: getfield 37	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mX	I
      //   157: i2f
      //   158: fstore 7
      //   160: aload_0
      //   161: getfield 39	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mY	I
      //   164: i2f
      //   165: fstore 6
      //   167: iload 11
      //   169: i2f
      //   170: fload 4
      //   172: fsub
      //   173: fconst_2
      //   174: fdiv
      //   175: fload 6
      //   177: fadd
      //   178: fstore 8
      //   180: fload 5
      //   182: iload 10
      //   184: i2f
      //   185: fdiv
      //   186: fstore 6
      //   188: fload 4
      //   190: fstore 5
      //   192: fload 9
      //   194: fstore 4
      //   196: aload_3
      //   197: aload_0
      //   198: getfield 41	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mWidth	I
      //   201: aload_0
      //   202: getfield 43	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mHeight	I
      //   205: iload_1
      //   206: iload_2
      //   207: invokestatic 133	com/facebook/react/modules/camera/ImageEditingManager:access$600	(IIII)I
      //   210: putfield 136	android/graphics/BitmapFactory$Options:inSampleSize	I
      //   213: aload 13
      //   215: iconst_0
      //   216: putfield 123	android/graphics/BitmapFactory$Options:inJustDecodeBounds	Z
      //   219: aload_0
      //   220: invokespecial 82	com/facebook/react/modules/camera/ImageEditingManager$CropTask:openBitmapInputStream	()Ljava/io/InputStream;
      //   223: astore 12
      //   225: aload 12
      //   227: aconst_null
      //   228: aload_3
      //   229: invokestatic 129	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
      //   232: astore 13
      //   234: aload 13
      //   236: ifnull +111 -> 347
      //   239: aload 12
      //   241: ifnull +8 -> 249
      //   244: aload 12
      //   246: invokevirtual 103	java/io/InputStream:close	()V
      //   249: fload 7
      //   251: aload_3
      //   252: getfield 136	android/graphics/BitmapFactory$Options:inSampleSize	I
      //   255: i2f
      //   256: fdiv
      //   257: f2d
      //   258: invokestatic 142	java/lang/Math:floor	(D)D
      //   261: d2i
      //   262: istore_1
      //   263: fload 8
      //   265: aload_3
      //   266: getfield 136	android/graphics/BitmapFactory$Options:inSampleSize	I
      //   269: i2f
      //   270: fdiv
      //   271: f2d
      //   272: invokestatic 142	java/lang/Math:floor	(D)D
      //   275: d2i
      //   276: istore_2
      //   277: fload 4
      //   279: aload_3
      //   280: getfield 136	android/graphics/BitmapFactory$Options:inSampleSize	I
      //   283: i2f
      //   284: fdiv
      //   285: f2d
      //   286: invokestatic 142	java/lang/Math:floor	(D)D
      //   289: d2i
      //   290: istore 10
      //   292: fload 5
      //   294: aload_3
      //   295: getfield 136	android/graphics/BitmapFactory$Options:inSampleSize	I
      //   298: i2f
      //   299: fdiv
      //   300: f2d
      //   301: invokestatic 142	java/lang/Math:floor	(D)D
      //   304: d2i
      //   305: istore 11
      //   307: fload 6
      //   309: aload_3
      //   310: getfield 136	android/graphics/BitmapFactory$Options:inSampleSize	I
      //   313: i2f
      //   314: fmul
      //   315: fstore 4
      //   317: new 144	android/graphics/Matrix
      //   320: dup
      //   321: invokespecial 145	android/graphics/Matrix:<init>	()V
      //   324: astore_3
      //   325: aload_3
      //   326: fload 4
      //   328: fload 4
      //   330: invokevirtual 149	android/graphics/Matrix:setScale	(FF)V
      //   333: aload 13
      //   335: iload_1
      //   336: iload_2
      //   337: iload 10
      //   339: iload 11
      //   341: aload_3
      //   342: iconst_1
      //   343: invokestatic 155	android/graphics/Bitmap:createBitmap	(Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;
      //   346: areturn
      //   347: new 157	java/lang/StringBuilder
      //   350: dup
      //   351: invokespecial 158	java/lang/StringBuilder:<init>	()V
      //   354: astore_3
      //   355: aload_3
      //   356: ldc -96
      //   358: invokevirtual 164	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   361: pop
      //   362: aload_3
      //   363: aload_0
      //   364: getfield 35	com/facebook/react/modules/camera/ImageEditingManager$CropTask:mUri	Ljava/lang/String;
      //   367: invokevirtual 164	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   370: pop
      //   371: new 76	java/io/IOException
      //   374: dup
      //   375: aload_3
      //   376: invokevirtual 168	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   379: invokespecial 169	java/io/IOException:<init>	(Ljava/lang/String;)V
      //   382: athrow
      //   383: astore_3
      //   384: aload 12
      //   386: ifnull +8 -> 394
      //   389: aload 12
      //   391: invokevirtual 103	java/io/InputStream:close	()V
      //   394: aload_3
      //   395: athrow
      //   396: astore_3
      //   397: aload 12
      //   399: ifnull +8 -> 407
      //   402: aload 12
      //   404: invokevirtual 103	java/io/InputStream:close	()V
      //   407: aload_3
      //   408: athrow
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	409	0	this	CropTask
      //   0	409	1	paramInt1	int
      //   0	409	2	paramInt2	int
      //   0	409	3	paramOptions	BitmapFactory.Options
      //   54	275	4	f1	float
      //   72	221	5	f2	float
      //   76	232	6	f3	float
      //   68	182	7	f4	float
      //   127	137	8	f5	float
      //   143	50	9	f6	float
      //   49	289	10	i	int
      //   60	280	11	j	int
      //   24	379	12	localInputStream	InputStream
      //   12	322	13	localObject	Object
      // Exception table:
      //   from	to	target	type
      //   225	234	383	java/lang/Throwable
      //   347	383	383	java/lang/Throwable
      //   26	35	396	java/lang/Throwable
    }
    
    private InputStream openBitmapInputStream()
      throws IOException
    {
      if (ImageEditingManager.isLocalUri(mUri)) {
        localObject = mContext.getContentResolver().openInputStream(Uri.parse(mUri));
      } else {
        localObject = new URL(mUri).openConnection().getInputStream();
      }
      if (localObject != null) {
        return localObject;
      }
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Cannot open bitmap: ");
      ((StringBuilder)localObject).append(mUri);
      throw new IOException(((StringBuilder)localObject).toString());
    }
    
    protected void doInBackgroundGuarded(Void... paramVarArgs)
    {
      try
      {
        Object localObject = new BitmapFactory.Options();
        int i;
        if ((mTargetWidth > 0) && (mTargetHeight > 0)) {
          i = 1;
        } else {
          i = 0;
        }
        if (i != 0)
        {
          i = mTargetWidth;
          int j = mTargetHeight;
          paramVarArgs = cropAndResize(i, j, (BitmapFactory.Options)localObject);
        }
        else
        {
          paramVarArgs = crop((BitmapFactory.Options)localObject);
        }
        String str = outMimeType;
        if (str != null)
        {
          boolean bool = str.isEmpty();
          if (!bool)
          {
            localObject = mContext;
            localObject = ImageEditingManager.createTempFile((Context)localObject, str);
            ImageEditingManager.writeCompressedBitmapToFile(paramVarArgs, str, (File)localObject);
            bool = str.equals("image/jpeg");
            if (bool)
            {
              paramVarArgs = mContext;
              str = mUri;
              ImageEditingManager.copyExif(paramVarArgs, Uri.parse(str), (File)localObject);
            }
            paramVarArgs = mSuccess;
            localObject = Uri.fromFile((File)localObject).toString();
            paramVarArgs.invoke(new Object[] { localObject });
            return;
          }
        }
        paramVarArgs = new IOException("Could not determine MIME type");
        throw paramVarArgs;
      }
      catch (Exception paramVarArgs)
      {
        mError.invoke(new Object[] { paramVarArgs.getMessage() });
      }
    }
    
    public void setTargetSize(int paramInt1, int paramInt2)
    {
      if ((paramInt1 > 0) && (paramInt2 > 0))
      {
        mTargetWidth = paramInt1;
        mTargetHeight = paramInt2;
        return;
      }
      throw new JSApplicationIllegalArgumentException(String.format("Invalid target size: [%d, %d]", new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    }
  }
}
