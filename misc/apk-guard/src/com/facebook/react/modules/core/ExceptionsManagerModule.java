package com.facebook.react.modules.core;

import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.BaseJavaModule;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.common.JavascriptException;
import com.facebook.react.devsupport.interfaces.DevSupportManager;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.util.JSStackTrace;

@ReactModule(name="ExceptionsManager")
public class ExceptionsManagerModule
  extends BaseJavaModule
{
  public static final String NAME = "ExceptionsManager";
  private final DevSupportManager mDevSupportManager;
  
  public ExceptionsManagerModule(DevSupportManager paramDevSupportManager)
  {
    mDevSupportManager = paramDevSupportManager;
  }
  
  private void showOrThrowError(String paramString, ReadableArray paramReadableArray, int paramInt)
  {
    if (mDevSupportManager.getDevSupportEnabled())
    {
      mDevSupportManager.showNewJSError(paramString, paramReadableArray, paramInt);
      return;
    }
    throw new JavascriptException(JSStackTrace.format(paramString, paramReadableArray));
  }
  
  public void dismissRedbox()
  {
    if (mDevSupportManager.getDevSupportEnabled()) {
      mDevSupportManager.hideRedboxDialog();
    }
  }
  
  public String getName()
  {
    return "ExceptionsManager";
  }
  
  public void reportFatalException(String paramString, ReadableArray paramReadableArray, int paramInt)
  {
    showOrThrowError(paramString, paramReadableArray, paramInt);
  }
  
  public void reportSoftException(String paramString, ReadableArray paramReadableArray, int paramInt)
  {
    if (mDevSupportManager.getDevSupportEnabled())
    {
      mDevSupportManager.showNewJSError(paramString, paramReadableArray, paramInt);
      return;
    }
    FLog.e("ReactNative", JSStackTrace.format(paramString, paramReadableArray));
  }
  
  public void updateExceptionMessage(String paramString, ReadableArray paramReadableArray, int paramInt)
  {
    if (mDevSupportManager.getDevSupportEnabled()) {
      mDevSupportManager.updateJSError(paramString, paramReadableArray, paramInt);
    }
  }
}
