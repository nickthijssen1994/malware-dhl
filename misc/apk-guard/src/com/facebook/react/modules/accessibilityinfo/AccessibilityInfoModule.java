package com.facebook.react.modules.accessibilityinfo;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.ContextWrapper;
import android.os.Build.VERSION;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener;
import com.facebook.react.bridge.BaseJavaModule;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter;
import javax.annotation.Nullable;

@ReactModule(name="AccessibilityInfo")
public class AccessibilityInfoModule
  extends ReactContextBaseJavaModule
  implements LifecycleEventListener
{
  private static final String EVENT_NAME = "touchExplorationDidChange";
  public static final String NAME = "AccessibilityInfo";
  @Nullable
  private AccessibilityManager mAccessibilityManager;
  private boolean mEnabled = false;
  @Nullable
  private ReactTouchExplorationStateChangeListener mTouchExplorationStateChangeListener;
  
  public AccessibilityInfoModule(ReactApplicationContext paramReactApplicationContext)
  {
    super(paramReactApplicationContext);
    mAccessibilityManager = ((AccessibilityManager)paramReactApplicationContext.getApplicationContext().getSystemService("accessibility"));
    mEnabled = mAccessibilityManager.isTouchExplorationEnabled();
    if (Build.VERSION.SDK_INT >= 19) {
      mTouchExplorationStateChangeListener = new ReactTouchExplorationStateChangeListener(null);
    }
  }
  
  private void updateAndSendChangeEvent(boolean paramBoolean)
  {
    if (mEnabled != paramBoolean)
    {
      mEnabled = paramBoolean;
      ((DeviceEventManagerModule.RCTDeviceEventEmitter)getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("touchExplorationDidChange", Boolean.valueOf(mEnabled));
    }
  }
  
  public String getName()
  {
    return "AccessibilityInfo";
  }
  
  public void initialize()
  {
    getReactApplicationContext().addLifecycleEventListener(this);
    updateAndSendChangeEvent(mAccessibilityManager.isTouchExplorationEnabled());
  }
  
  public void isTouchExplorationEnabled(Callback paramCallback)
  {
    paramCallback.invoke(new Object[] { Boolean.valueOf(mEnabled) });
  }
  
  public void onCatalystInstanceDestroy()
  {
    super.onCatalystInstanceDestroy();
    getReactApplicationContext().removeLifecycleEventListener(this);
  }
  
  public void onHostDestroy() {}
  
  public void onHostPause()
  {
    if (Build.VERSION.SDK_INT >= 19) {
      mAccessibilityManager.removeTouchExplorationStateChangeListener(mTouchExplorationStateChangeListener);
    }
  }
  
  public void onHostResume()
  {
    if (Build.VERSION.SDK_INT >= 19) {
      mAccessibilityManager.addTouchExplorationStateChangeListener(mTouchExplorationStateChangeListener);
    }
    updateAndSendChangeEvent(mAccessibilityManager.isTouchExplorationEnabled());
  }
  
  @TargetApi(19)
  private class ReactTouchExplorationStateChangeListener
    implements AccessibilityManager.TouchExplorationStateChangeListener
  {
    private ReactTouchExplorationStateChangeListener() {}
    
    public void onTouchExplorationStateChanged(boolean paramBoolean)
    {
      AccessibilityInfoModule.this.updateAndSendChangeEvent(paramBoolean);
    }
  }
}
