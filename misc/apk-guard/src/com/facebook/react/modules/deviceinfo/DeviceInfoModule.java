package com.facebook.react.modules.deviceinfo;

import android.content.Context;
import android.content.ContextWrapper;
import android.content.res.Configuration;
import android.content.res.Resources;
import com.facebook.react.bridge.BaseJavaModule;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter;
import com.facebook.react.uimanager.DisplayMetricsHolder;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;

@ReactModule(name="DeviceInfo")
public class DeviceInfoModule
  extends BaseJavaModule
  implements LifecycleEventListener
{
  public static final String NAME = "DeviceInfo";
  private float mFontScale;
  @Nullable
  private ReactApplicationContext mReactApplicationContext = null;
  
  public DeviceInfoModule(Context paramContext)
  {
    DisplayMetricsHolder.initDisplayMetricsIfNotInitialized(paramContext);
    mFontScale = getResourcesgetConfigurationfontScale;
  }
  
  public DeviceInfoModule(ReactApplicationContext paramReactApplicationContext)
  {
    this(paramReactApplicationContext);
    mReactApplicationContext.addLifecycleEventListener(this);
  }
  
  public void emitUpdateDimensionsEvent()
  {
    ReactApplicationContext localReactApplicationContext = mReactApplicationContext;
    if (localReactApplicationContext == null) {
      return;
    }
    ((DeviceEventManagerModule.RCTDeviceEventEmitter)localReactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("didUpdateDimensions", DisplayMetricsHolder.getDisplayMetricsNativeMap(mFontScale));
  }
  
  public Map getConstants()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("Dimensions", DisplayMetricsHolder.getDisplayMetricsMap(mFontScale));
    return localHashMap;
  }
  
  public String getName()
  {
    return "DeviceInfo";
  }
  
  public void onHostDestroy() {}
  
  public void onHostPause() {}
  
  public void onHostResume()
  {
    ReactApplicationContext localReactApplicationContext = mReactApplicationContext;
    if (localReactApplicationContext == null) {
      return;
    }
    float f = getResourcesgetConfigurationfontScale;
    if (mFontScale != f)
    {
      mFontScale = f;
      emitUpdateDimensionsEvent();
    }
  }
}
