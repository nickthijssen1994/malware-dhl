package com.facebook.react.modules.blob;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.os.ParcelFileDescriptor.AutoCloseOutputStream;
import com.facebook.react.ReactApplication;
import com.facebook.react.ReactInstanceManager;
import com.facebook.react.ReactNativeHost;
import com.facebook.react.bridge.ReactContext;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;

public final class BlobProvider
  extends ContentProvider
{
  public BlobProvider() {}
  
  public int delete(Uri paramUri, String paramString, String[] paramArrayOfString)
  {
    return 0;
  }
  
  public String getType(Uri paramUri)
  {
    return null;
  }
  
  public Uri insert(Uri paramUri, ContentValues paramContentValues)
  {
    return null;
  }
  
  public boolean onCreate()
  {
    return true;
  }
  
  public ParcelFileDescriptor openFile(Uri paramUri, String paramString)
    throws FileNotFoundException
  {
    if (paramString.equals("r"))
    {
      paramString = getContext().getApplicationContext();
      if ((paramString instanceof ReactApplication)) {
        paramString = (BlobModule)((ReactApplication)paramString).getReactNativeHost().getReactInstanceManager().getCurrentReactContext().getNativeModule(BlobModule.class);
      } else {
        paramString = null;
      }
      if (paramString != null)
      {
        paramString = paramString.resolve(paramUri);
        if (paramString == null) {}
      }
    }
    try
    {
      localObject = ParcelFileDescriptor.createPipe();
      paramUri = localObject[0];
      localObject = new ParcelFileDescriptor.AutoCloseOutputStream(localObject[1]);
    }
    catch (IOException paramUri)
    {
      Object localObject;
      return null;
    }
    try
    {
      ((OutputStream)localObject).write(paramString);
      ((OutputStream)localObject).close();
      return paramUri;
    }
    catch (IOException paramUri) {}
    paramString = new StringBuilder();
    paramString.append("Cannot open ");
    paramString.append(paramUri.toString());
    paramString.append(", blob not found.");
    throw new FileNotFoundException(paramString.toString());
    throw new RuntimeException("No blob module associated with BlobProvider");
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Cannot open ");
    ((StringBuilder)localObject).append(paramUri.toString());
    ((StringBuilder)localObject).append(" in mode '");
    ((StringBuilder)localObject).append(paramString);
    ((StringBuilder)localObject).append("'");
    throw new FileNotFoundException(((StringBuilder)localObject).toString());
    return null;
  }
  
  public Cursor query(Uri paramUri, String[] paramArrayOfString1, String paramString1, String[] paramArrayOfString2, String paramString2)
  {
    return null;
  }
  
  public int update(Uri paramUri, ContentValues paramContentValues, String paramString, String[] paramArrayOfString)
  {
    return 0;
  }
}
