package com.facebook.react;

import android.app.Activity;
import android.app.Application;
import com.facebook.react.bridge.JSBundleLoader;
import com.facebook.react.bridge.JSIModulePackage;
import com.facebook.react.bridge.JavaScriptExecutorFactory;
import com.facebook.react.bridge.NativeModuleCallExceptionHandler;
import com.facebook.react.bridge.NotThreadSafeBridgeIdleDebugListener;
import com.facebook.react.common.LifecycleState;
import com.facebook.react.devsupport.RedBoxHandler;
import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener;
import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;
import com.facebook.react.packagerconnection.RequestHandler;
import com.facebook.react.uimanager.UIImplementationProvider;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

public class ReactInstanceManagerBuilder
{
  @Nullable
  private Application mApplication;
  @Nullable
  private NotThreadSafeBridgeIdleDebugListener mBridgeIdleDebugListener;
  @Nullable
  private Activity mCurrentActivity;
  @Nullable
  private Map<String, RequestHandler> mCustomPackagerCommandHandlers;
  @Nullable
  private DefaultHardwareBackBtnHandler mDefaultHardwareBackBtnHandler;
  @Nullable
  private DevBundleDownloadListener mDevBundleDownloadListener;
  @Nullable
  private LifecycleState mInitialLifecycleState;
  @Nullable
  private String mJSBundleAssetCommonUrl;
  @Nullable
  private String mJSBundleAssetUrl;
  @Nullable
  private JSBundleLoader mJSBundleLoader;
  @Nullable
  private JSIModulePackage mJSIModulesPackage;
  @Nullable
  private String mJSMainModulePath;
  @Nullable
  private JavaScriptExecutorFactory mJavaScriptExecutorFactory;
  private boolean mLazyViewManagersEnabled;
  private int mMinNumShakes = 1;
  private int mMinTimeLeftInFrameForNonBatchedOperationMs = -1;
  @Nullable
  private NativeModuleCallExceptionHandler mNativeModuleCallExceptionHandler;
  private final List<ReactPackage> mPackages = new ArrayList();
  @Nullable
  private RedBoxHandler mRedBoxHandler;
  @Nullable
  private UIImplementationProvider mUIImplementationProvider;
  private boolean mUseDeveloperSupport;
  
  ReactInstanceManagerBuilder() {}
  
  public ReactInstanceManagerBuilder addPackage(ReactPackage paramReactPackage)
  {
    mPackages.add(paramReactPackage);
    return this;
  }
  
  public ReactInstanceManagerBuilder addPackages(List paramList)
  {
    mPackages.addAll(paramList);
    return this;
  }
  
  public ReactInstanceManager build()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a15 = a14\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public ReactInstanceManagerBuilder setApplication(Application paramApplication)
  {
    mApplication = paramApplication;
    return this;
  }
  
  public ReactInstanceManagerBuilder setBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener)
  {
    mBridgeIdleDebugListener = paramNotThreadSafeBridgeIdleDebugListener;
    return this;
  }
  
  public ReactInstanceManagerBuilder setBundleAssetName(String paramString)
  {
    if (paramString == null)
    {
      paramString = null;
    }
    else
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("assets://");
      localStringBuilder.append(paramString);
      paramString = localStringBuilder.toString();
    }
    mJSBundleAssetUrl = paramString;
    mJSBundleLoader = null;
    return this;
  }
  
  public ReactInstanceManagerBuilder setCurrentActivity(Activity paramActivity)
  {
    mCurrentActivity = paramActivity;
    return this;
  }
  
  public ReactInstanceManagerBuilder setCustomPackagerCommandHandlers(Map paramMap)
  {
    mCustomPackagerCommandHandlers = paramMap;
    return this;
  }
  
  public ReactInstanceManagerBuilder setDefaultHardwareBackBtnHandler(DefaultHardwareBackBtnHandler paramDefaultHardwareBackBtnHandler)
  {
    mDefaultHardwareBackBtnHandler = paramDefaultHardwareBackBtnHandler;
    return this;
  }
  
  public ReactInstanceManagerBuilder setDevBundleDownloadListener(DevBundleDownloadListener paramDevBundleDownloadListener)
  {
    mDevBundleDownloadListener = paramDevBundleDownloadListener;
    return this;
  }
  
  public ReactInstanceManagerBuilder setInitialLifecycleState(LifecycleState paramLifecycleState)
  {
    mInitialLifecycleState = paramLifecycleState;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJSBundleFile(String paramString)
  {
    if (paramString.startsWith("assets://"))
    {
      mJSBundleAssetUrl = paramString;
      mJSBundleLoader = null;
      return this;
    }
    return setJSBundleLoader(JSBundleLoader.createFileLoader(paramString));
  }
  
  public ReactInstanceManagerBuilder setJSBundleLoader(JSBundleLoader paramJSBundleLoader)
  {
    mJSBundleLoader = paramJSBundleLoader;
    mJSBundleAssetUrl = null;
    mJSBundleAssetCommonUrl = null;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJSIModulesPackage(JSIModulePackage paramJSIModulePackage)
  {
    mJSIModulesPackage = paramJSIModulePackage;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJSMainModulePath(String paramString)
  {
    mJSMainModulePath = paramString;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJavaScriptExecutorFactory(JavaScriptExecutorFactory paramJavaScriptExecutorFactory)
  {
    mJavaScriptExecutorFactory = paramJavaScriptExecutorFactory;
    return this;
  }
  
  public ReactInstanceManagerBuilder setLazyViewManagersEnabled(boolean paramBoolean)
  {
    mLazyViewManagersEnabled = paramBoolean;
    return this;
  }
  
  public ReactInstanceManagerBuilder setMinNumShakes(int paramInt)
  {
    mMinNumShakes = paramInt;
    return this;
  }
  
  public ReactInstanceManagerBuilder setMinTimeLeftInFrameForNonBatchedOperationMs(int paramInt)
  {
    mMinTimeLeftInFrameForNonBatchedOperationMs = paramInt;
    return this;
  }
  
  public ReactInstanceManagerBuilder setNativeModuleCallExceptionHandler(NativeModuleCallExceptionHandler paramNativeModuleCallExceptionHandler)
  {
    mNativeModuleCallExceptionHandler = paramNativeModuleCallExceptionHandler;
    return this;
  }
  
  public ReactInstanceManagerBuilder setRedBoxHandler(RedBoxHandler paramRedBoxHandler)
  {
    mRedBoxHandler = paramRedBoxHandler;
    return this;
  }
  
  public ReactInstanceManagerBuilder setSeperateBundleAssetName(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder1 = null;
    if (paramString1 == null)
    {
      paramString1 = null;
    }
    else
    {
      StringBuilder localStringBuilder2 = new StringBuilder();
      localStringBuilder2.append("assets://");
      localStringBuilder2.append(paramString1);
      paramString1 = localStringBuilder2.toString();
    }
    if (paramString2 == null)
    {
      paramString2 = localStringBuilder1;
    }
    else
    {
      localStringBuilder1 = new StringBuilder();
      localStringBuilder1.append("assets://");
      localStringBuilder1.append(paramString2);
      paramString2 = localStringBuilder1.toString();
    }
    return setSeperateBundleFileName(paramString1, paramString2);
  }
  
  public ReactInstanceManagerBuilder setSeperateBundleCommonAsset(String paramString1, String paramString2)
  {
    if (paramString2 == null)
    {
      paramString2 = null;
    }
    else
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("assets://");
      localStringBuilder.append(paramString2);
      paramString2 = localStringBuilder.toString();
    }
    return setSeperateBundleFileName(paramString1, paramString2);
  }
  
  public ReactInstanceManagerBuilder setSeperateBundleFileName(String paramString1, String paramString2)
  {
    if (paramString2.startsWith("assets://"))
    {
      mJSBundleAssetUrl = paramString1;
      mJSBundleAssetCommonUrl = paramString2;
      mJSBundleLoader = null;
      return this;
    }
    return setJSBundleLoader(JSBundleLoader.createFileLoader(paramString1, paramString1, paramString2, false));
  }
  
  public ReactInstanceManagerBuilder setUIImplementationProvider(UIImplementationProvider paramUIImplementationProvider)
  {
    mUIImplementationProvider = paramUIImplementationProvider;
    return this;
  }
  
  public ReactInstanceManagerBuilder setUseDeveloperSupport(boolean paramBoolean)
  {
    mUseDeveloperSupport = paramBoolean;
    return this;
  }
}
