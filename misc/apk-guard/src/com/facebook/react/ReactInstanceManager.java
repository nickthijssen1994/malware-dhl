package com.facebook.react;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Process;
import android.util.Log;
import android.view.View;
import android.view.View.OnAttachStateChangeListener;
import android.view.ViewGroup;
import android.view.Window;
import androidx.core.view.ViewCompat;
import com.facebook.common.logging.FLog;
import com.facebook.debug.holder.Printer;
import com.facebook.debug.holder.PrinterHolder;
import com.facebook.debug.tags.ReactDebugOverlayTags;
import com.facebook.infer.annotation.Assertions;
import com.facebook.infer.annotation.ThreadConfined;
import com.facebook.infer.annotation.ThreadSafe;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.CatalystInstanceImpl.Builder;
import com.facebook.react.bridge.JSBundleLoader;
import com.facebook.react.bridge.JSIModulePackage;
import com.facebook.react.bridge.JavaJSExecutor.Factory;
import com.facebook.react.bridge.JavaScriptExecutor;
import com.facebook.react.bridge.JavaScriptExecutorFactory;
import com.facebook.react.bridge.NativeDeltaClient;
import com.facebook.react.bridge.NativeModuleCallExceptionHandler;
import com.facebook.react.bridge.NativeModuleRegistry;
import com.facebook.react.bridge.NotThreadSafeBridgeIdleDebugListener;
import com.facebook.react.bridge.ProxyJavaScriptExecutor.Factory;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.queue.ReactQueueConfigurationSpec;
import com.facebook.react.common.LifecycleState;
import com.facebook.react.devsupport.DevSupportManagerFactory;
import com.facebook.react.devsupport.ReactInstanceManagerDevHelper;
import com.facebook.react.devsupport.RedBoxHandler;
import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener;
import com.facebook.react.devsupport.interfaces.DevSupportManager;
import com.facebook.react.devsupport.interfaces.PackagerStatusCallback;
import com.facebook.react.modules.appregistry.AppRegistry;
import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter;
import com.facebook.react.modules.core.ReactChoreographer;
import com.facebook.react.modules.debug.interfaces.DeveloperSettings;
import com.facebook.react.modules.fabric.ReactFabric;
import com.facebook.react.uimanager.DisplayMetricsHolder;
import com.facebook.react.uimanager.UIImplementationProvider;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.soloader.SoLoader;
import com.facebook.systrace.Systrace;
import com.facebook.systrace.SystraceMessage;
import com.facebook.systrace.SystraceMessage.Builder;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nullable;

@ThreadSafe
public class ReactInstanceManager
{
  private static final String PAGE_KEY = "ReactInstanceManager";
  private final Context mApplicationContext;
  private final Set<ReactRootView> mAttachedRootViews = Collections.synchronizedSet(new HashSet());
  @Nullable
  private final NotThreadSafeBridgeIdleDebugListener mBridgeIdleDebugListener;
  @Nullable
  private final JSBundleLoader mBundleLoader;
  @Nullable
  private volatile Thread mCreateReactContextThread;
  @Nullable
  private Activity mCurrentActivity;
  @Nullable
  private volatile ReactContext mCurrentReactContext;
  @Nullable
  @ThreadConfined("UI")
  private DefaultHardwareBackBtnHandler mDefaultBackButtonImpl;
  private final DevSupportManager mDevSupportManager;
  private volatile boolean mHasStartedCreatingInitialContext = false;
  private volatile Boolean mHasStartedDestroying = Boolean.valueOf(false);
  private volatile Object mHasStartedDestroyingLock = new Object();
  @Nullable
  private final JSIModulePackage mJSIModulePackage;
  @Nullable
  private final String mJSMainModulePath;
  private final JavaScriptExecutorFactory mJavaScriptExecutorFactory;
  private volatile LifecycleState mLifecycleState;
  private final MemoryPressureRouter mMemoryPressureRouter;
  @Nullable
  private final NativeModuleCallExceptionHandler mNativeModuleCallExceptionHandler;
  private final List<ReactPackage> mPackages;
  @Nullable
  @ThreadConfined("UI")
  private ReactContextInitParams mPendingReactContextInitParams;
  private final Object mReactContextLock = new Object();
  private final Collection<ReactInstanceEventListener> mReactInstanceEventListeners = Collections.synchronizedSet(new HashSet());
  private ReactInstanceProgressListener mReactInstanceProgressListener;
  private final boolean mUseDeveloperSupport;
  private List<ViewManager> mViewManagers;
  
  ReactInstanceManager(Context paramContext, Activity paramActivity, DefaultHardwareBackBtnHandler paramDefaultHardwareBackBtnHandler, JavaScriptExecutorFactory paramJavaScriptExecutorFactory, JSBundleLoader paramJSBundleLoader, String paramString, List paramList, boolean paramBoolean1, NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener, LifecycleState paramLifecycleState, UIImplementationProvider paramUIImplementationProvider, NativeModuleCallExceptionHandler paramNativeModuleCallExceptionHandler, RedBoxHandler paramRedBoxHandler, boolean paramBoolean2, DevBundleDownloadListener paramDevBundleDownloadListener, int paramInt1, int paramInt2, JSIModulePackage paramJSIModulePackage, Map paramMap)
  {
    Log.d("ReactNative", "ReactInstanceManager.ctor()");
    initializeSoLoaderIfNecessary(paramContext);
    DisplayMetricsHolder.initDisplayMetricsIfNotInitialized(paramContext);
    mApplicationContext = paramContext;
    mCurrentActivity = paramActivity;
    mDefaultBackButtonImpl = paramDefaultHardwareBackBtnHandler;
    mJavaScriptExecutorFactory = paramJavaScriptExecutorFactory;
    mBundleLoader = paramJSBundleLoader;
    mJSMainModulePath = paramString;
    mPackages = new ArrayList();
    mUseDeveloperSupport = paramBoolean1;
    Systrace.beginSection(0L, "ReactInstanceManager.initDevSupportManager");
    mDevSupportManager = DevSupportManagerFactory.create(paramContext, createDevHelperInterface(), mJSMainModulePath, paramBoolean1, paramRedBoxHandler, paramDevBundleDownloadListener, paramInt1, paramMap);
    Systrace.endSection(0L);
    mBridgeIdleDebugListener = paramNotThreadSafeBridgeIdleDebugListener;
    mLifecycleState = paramLifecycleState;
    mMemoryPressureRouter = new MemoryPressureRouter(paramContext);
    mNativeModuleCallExceptionHandler = paramNativeModuleCallExceptionHandler;
    paramContext = mPackages;
    try
    {
      PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.RN_CORE, "RNCore: Use Split Packages");
      mPackages.add(new CoreModulesPackage(this, new DefaultHardwareBackBtnHandler()
      {
        public void invokeDefaultOnBackPressed()
        {
          ReactInstanceManager.this.invokeDefaultOnBackPressed();
        }
      }, paramUIImplementationProvider, paramBoolean2, paramInt2));
      if (mUseDeveloperSupport) {
        mPackages.add(new DebugCorePackage());
      }
      mPackages.addAll(paramList);
      mJSIModulePackage = paramJSIModulePackage;
      ReactChoreographer.initialize();
      if (mUseDeveloperSupport)
      {
        mDevSupportManager.startInspector();
        return;
      }
    }
    catch (Throwable paramActivity)
    {
      throw paramActivity;
    }
  }
  
  private void attachRootViewToInstance(ReactRootView paramReactRootView)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a5 = a4\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static ReactInstanceManagerBuilder builder()
  {
    return new ReactInstanceManagerBuilder();
  }
  
  private ReactInstanceManagerDevHelper createDevHelperInterface()
  {
    new ReactInstanceManagerDevHelper()
    {
      public Activity getCurrentActivity()
      {
        return mCurrentActivity;
      }
      
      public void onJSBundleLoadedFromServer(NativeDeltaClient paramAnonymousNativeDeltaClient)
      {
        ReactInstanceManager.this.onJSBundleLoadedFromServer(paramAnonymousNativeDeltaClient);
      }
      
      public void onReloadWithJSDebugger(JavaJSExecutor.Factory paramAnonymousFactory)
      {
        ReactInstanceManager.this.onReloadWithJSDebugger(paramAnonymousFactory);
      }
      
      public void toggleElementInspector()
      {
        ReactInstanceManager.this.toggleElementInspector();
      }
    };
  }
  
  private ReactApplicationContext createReactContext(JavaScriptExecutor paramJavaScriptExecutor, JSBundleLoader paramJSBundleLoader)
  {
    Log.d("ReactNative", "ReactInstanceManager.createReactContext()");
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_REACT_CONTEXT_START, paramJavaScriptExecutor.getName());
    ReactApplicationContext localReactApplicationContext = new ReactApplicationContext(mApplicationContext);
    Object localObject = mNativeModuleCallExceptionHandler;
    if (localObject == null) {
      localObject = mDevSupportManager;
    }
    localReactApplicationContext.setNativeModuleCallExceptionHandler((NativeModuleCallExceptionHandler)localObject);
    NativeModuleRegistry localNativeModuleRegistry = processPackages(localReactApplicationContext, mPackages, false);
    paramJavaScriptExecutor = new CatalystInstanceImpl.Builder().setReactQueueConfigurationSpec(ReactQueueConfigurationSpec.createDefault()).setJSExecutor(paramJavaScriptExecutor).setRegistry(localNativeModuleRegistry).setJSBundleLoader(paramJSBundleLoader).setNativeModuleCallExceptionHandler((NativeModuleCallExceptionHandler)localObject);
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_CATALYST_INSTANCE_START);
    Systrace.beginSection(0L, "createCatalystInstance");
    try
    {
      paramJavaScriptExecutor = paramJavaScriptExecutor.build();
      Systrace.endSection(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_CATALYST_INSTANCE_END);
      paramJSBundleLoader = mJSIModulePackage;
      if (paramJSBundleLoader != null) {
        paramJavaScriptExecutor.addJSIModules(paramJSBundleLoader.getJSIModules(localReactApplicationContext, paramJavaScriptExecutor.getJavaScriptContextHolder()));
      }
      paramJSBundleLoader = mBridgeIdleDebugListener;
      if (paramJSBundleLoader != null) {
        paramJavaScriptExecutor.addBridgeIdleDebugListener(paramJSBundleLoader);
      }
      if (Systrace.isTracing(0L)) {
        paramJavaScriptExecutor.setGlobalVariable("__RCTProfileIsProfiling", "true");
      }
      ReactMarker.logMarker(ReactMarkerConstants.PRE_RUN_JS_BUNDLE_START);
      Systrace.beginSection(0L, "runJSBundle");
      paramJavaScriptExecutor.runJSBundle();
      Systrace.endSection(0L);
      localReactApplicationContext.initializeWithInstance(paramJavaScriptExecutor);
      return localReactApplicationContext;
    }
    catch (Throwable paramJavaScriptExecutor)
    {
      Systrace.endSection(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_CATALYST_INSTANCE_END);
      throw paramJavaScriptExecutor;
    }
  }
  
  private void detachViewFromInstance(ReactRootView paramReactRootView, CatalystInstance paramCatalystInstance)
  {
    Log.d("ReactNative", "ReactInstanceManager.detachViewFromInstance()");
    UiThreadUtil.assertOnUiThread();
    if (paramReactRootView.getUIManagerType() == 2)
    {
      ((ReactFabric)paramCatalystInstance.getJSModule(ReactFabric.class)).unmountComponentAtNode(paramReactRootView.getId());
      return;
    }
    ((AppRegistry)paramCatalystInstance.getJSModule(AppRegistry.class)).unmountApplicationComponentAtRootTag(paramReactRootView.getId());
  }
  
  private static void initializeSoLoaderIfNecessary(Context paramContext)
  {
    SoLoader.init(paramContext, false);
  }
  
  private void invokeDefaultOnBackPressed()
  {
    UiThreadUtil.assertOnUiThread();
    DefaultHardwareBackBtnHandler localDefaultHardwareBackBtnHandler = mDefaultBackButtonImpl;
    if (localDefaultHardwareBackBtnHandler != null) {
      localDefaultHardwareBackBtnHandler.invokeDefaultOnBackPressed();
    }
  }
  
  private void moveReactContextToCurrentLifecycleState()
  {
    try
    {
      if (mLifecycleState == LifecycleState.RESUMED) {
        moveToResumedLifecycleState(true);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void moveToBeforeCreateLifecycleState()
  {
    try
    {
      ReactContext localReactContext = getCurrentReactContext();
      if (localReactContext != null)
      {
        if (mLifecycleState == LifecycleState.RESUMED)
        {
          localReactContext.onHostPause();
          mLifecycleState = LifecycleState.BEFORE_RESUME;
        }
        if (mLifecycleState == LifecycleState.BEFORE_RESUME) {
          localReactContext.onHostDestroy();
        }
      }
      mLifecycleState = LifecycleState.BEFORE_CREATE;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void moveToBeforeResumeLifecycleState()
  {
    try
    {
      ReactContext localReactContext = getCurrentReactContext();
      if (localReactContext != null) {
        if (mLifecycleState == LifecycleState.BEFORE_CREATE)
        {
          localReactContext.onHostResume(mCurrentActivity);
          localReactContext.onHostPause();
        }
        else if (mLifecycleState == LifecycleState.RESUMED)
        {
          localReactContext.onHostPause();
        }
      }
      mLifecycleState = LifecycleState.BEFORE_RESUME;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void moveToResumedLifecycleState(boolean paramBoolean)
  {
    try
    {
      ReactContext localReactContext = getCurrentReactContext();
      if ((localReactContext != null) && ((paramBoolean) || (mLifecycleState == LifecycleState.BEFORE_RESUME) || (mLifecycleState == LifecycleState.BEFORE_CREATE))) {
        localReactContext.onHostResume(mCurrentActivity);
      }
      mLifecycleState = LifecycleState.RESUMED;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private void onJSBundleLoadedFromServer(NativeDeltaClient paramNativeDeltaClient)
  {
    Log.d("ReactNative", "ReactInstanceManager.onJSBundleLoadedFromServer()");
    if (paramNativeDeltaClient == null) {
      paramNativeDeltaClient = JSBundleLoader.createCachedBundleFromNetworkLoader(mDevSupportManager.getSourceUrl(), mDevSupportManager.getDownloadedJSBundleFile());
    } else {
      paramNativeDeltaClient = JSBundleLoader.createDeltaFromNetworkLoader(mDevSupportManager.getSourceUrl(), paramNativeDeltaClient);
    }
    recreateReactContextInBackground(mJavaScriptExecutorFactory, paramNativeDeltaClient);
  }
  
  private void onReloadWithJSDebugger(JavaJSExecutor.Factory paramFactory)
  {
    Log.d("ReactNative", "ReactInstanceManager.onReloadWithJSDebugger()");
    recreateReactContextInBackground(new ProxyJavaScriptExecutor.Factory(paramFactory), JSBundleLoader.createRemoteDebuggerBundleLoader(mDevSupportManager.getJSBundleURLForRemoteDebugging(), mDevSupportManager.getSourceUrl()));
  }
  
  private void processPackage(ReactPackage paramReactPackage, NativeModuleRegistryBuilder paramNativeModuleRegistryBuilder)
  {
    SystraceMessage.beginSection(0L, "processPackage").attribute("className", paramReactPackage.getClass().getSimpleName()).flush();
    boolean bool = paramReactPackage instanceof ReactPackageLogger;
    if (bool) {
      ((ReactPackageLogger)paramReactPackage).startProcessPackage();
    }
    paramNativeModuleRegistryBuilder.processPackage(paramReactPackage);
    if (bool) {
      ((ReactPackageLogger)paramReactPackage).endProcessPackage();
    }
    SystraceMessage.endSection(0L).flush();
  }
  
  /* Error */
  private NativeModuleRegistry processPackages(ReactApplicationContext paramReactApplicationContext, List paramList, boolean paramBoolean)
  {
    // Byte code:
    //   0: new 606	com/facebook/react/NativeModuleRegistryBuilder
    //   3: dup
    //   4: aload_1
    //   5: aload_0
    //   6: invokespecial 618	com/facebook/react/NativeModuleRegistryBuilder:<init>	(Lcom/facebook/react/bridge/ReactApplicationContext;Lcom/facebook/react/ReactInstanceManager;)V
    //   9: astore 4
    //   11: getstatic 621	com/facebook/react/bridge/ReactMarkerConstants:PROCESS_PACKAGES_START	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   14: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   17: aload_0
    //   18: getfield 168	com/facebook/react/ReactInstanceManager:mPackages	Ljava/util/List;
    //   21: astore_1
    //   22: aload_1
    //   23: monitorenter
    //   24: aload_2
    //   25: invokeinterface 625 1 0
    //   30: astore_2
    //   31: aload_2
    //   32: invokeinterface 631 1 0
    //   37: ifeq +80 -> 117
    //   40: aload_2
    //   41: invokeinterface 635 1 0
    //   46: checkcast 637	com/facebook/react/ReactPackage
    //   49: astore 5
    //   51: iload_3
    //   52: ifeq +20 -> 72
    //   55: aload_0
    //   56: getfield 168	com/facebook/react/ReactInstanceManager:mPackages	Ljava/util/List;
    //   59: aload 5
    //   61: invokeinterface 640 2 0
    //   66: ifeq +6 -> 72
    //   69: goto -38 -> 31
    //   72: lconst_0
    //   73: ldc_w 642
    //   76: invokestatic 178	com/facebook/systrace/Systrace:beginSection	(JLjava/lang/String;)V
    //   79: iload_3
    //   80: ifeq +15 -> 95
    //   83: aload_0
    //   84: getfield 168	com/facebook/react/ReactInstanceManager:mPackages	Ljava/util/List;
    //   87: aload 5
    //   89: invokeinterface 240 2 0
    //   94: pop
    //   95: aload_0
    //   96: aload 5
    //   98: aload 4
    //   100: invokespecial 644	com/facebook/react/ReactInstanceManager:processPackage	(Lcom/facebook/react/ReactPackage;Lcom/facebook/react/NativeModuleRegistryBuilder;)V
    //   103: lconst_0
    //   104: invokestatic 194	com/facebook/systrace/Systrace:endSection	(J)V
    //   107: goto -76 -> 31
    //   110: astore_2
    //   111: lconst_0
    //   112: invokestatic 194	com/facebook/systrace/Systrace:endSection	(J)V
    //   115: aload_2
    //   116: athrow
    //   117: aload_1
    //   118: monitorexit
    //   119: getstatic 647	com/facebook/react/bridge/ReactMarkerConstants:PROCESS_PACKAGES_END	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   122: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   125: getstatic 650	com/facebook/react/bridge/ReactMarkerConstants:BUILD_NATIVE_MODULE_REGISTRY_START	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   128: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   131: lconst_0
    //   132: ldc_w 652
    //   135: invokestatic 178	com/facebook/systrace/Systrace:beginSection	(JLjava/lang/String;)V
    //   138: aload 4
    //   140: invokevirtual 655	com/facebook/react/NativeModuleRegistryBuilder:build	()Lcom/facebook/react/bridge/NativeModuleRegistry;
    //   143: astore_1
    //   144: lconst_0
    //   145: invokestatic 194	com/facebook/systrace/Systrace:endSection	(J)V
    //   148: getstatic 658	com/facebook/react/bridge/ReactMarkerConstants:BUILD_NATIVE_MODULE_REGISTRY_END	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   151: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   154: aload_1
    //   155: areturn
    //   156: astore_1
    //   157: lconst_0
    //   158: invokestatic 194	com/facebook/systrace/Systrace:endSection	(J)V
    //   161: getstatic 658	com/facebook/react/bridge/ReactMarkerConstants:BUILD_NATIVE_MODULE_REGISTRY_END	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   164: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   167: aload_1
    //   168: athrow
    //   169: astore_2
    //   170: aload_1
    //   171: monitorexit
    //   172: aload_2
    //   173: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	174	0	this	ReactInstanceManager
    //   0	174	1	paramReactApplicationContext	ReactApplicationContext
    //   0	174	2	paramList	List
    //   0	174	3	paramBoolean	boolean
    //   9	130	4	localNativeModuleRegistryBuilder	NativeModuleRegistryBuilder
    //   49	48	5	localReactPackage	ReactPackage
    // Exception table:
    //   from	to	target	type
    //   83	95	110	java/lang/Throwable
    //   95	103	110	java/lang/Throwable
    //   138	144	156	java/lang/Throwable
    //   24	31	169	java/lang/Throwable
    //   31	51	169	java/lang/Throwable
    //   55	69	169	java/lang/Throwable
    //   72	79	169	java/lang/Throwable
    //   103	107	169	java/lang/Throwable
    //   111	117	169	java/lang/Throwable
    //   117	119	169	java/lang/Throwable
    //   170	172	169	java/lang/Throwable
  }
  
  private void recreateReactContextInBackground(JavaScriptExecutorFactory paramJavaScriptExecutorFactory, JSBundleLoader paramJSBundleLoader)
  {
    Log.d("ReactNative", "ReactInstanceManager.recreateReactContextInBackground()");
    UiThreadUtil.assertOnUiThread();
    paramJavaScriptExecutorFactory = new ReactContextInitParams(paramJavaScriptExecutorFactory, paramJSBundleLoader);
    if (mCreateReactContextThread == null)
    {
      runCreateReactContextOnNewThread(paramJavaScriptExecutorFactory);
      return;
    }
    mPendingReactContextInitParams = paramJavaScriptExecutorFactory;
  }
  
  private void recreateReactContextInBackgroundFromBundleLoader()
  {
    Log.d("ReactNative", "ReactInstanceManager.recreateReactContextInBackgroundFromBundleLoader()");
    PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.RN_CORE, "RNCore: load from BundleLoader");
    recreateReactContextInBackground(mJavaScriptExecutorFactory, mBundleLoader);
  }
  
  private void recreateReactContextInBackgroundInner()
  {
    Log.d("ReactNative", "ReactInstanceManager.recreateReactContextInBackgroundInner()");
    PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.RN_CORE, "RNCore: recreateReactContextInBackground");
    UiThreadUtil.assertOnUiThread();
    if ((mUseDeveloperSupport) && (mJSMainModulePath != null))
    {
      final DeveloperSettings localDeveloperSettings = mDevSupportManager.getDevSettings();
      if ((mDevSupportManager.hasUpToDateJSBundleInCache()) && (!localDeveloperSettings.isRemoteJSDebugEnabled()))
      {
        onJSBundleLoadedFromServer(null);
        return;
      }
      if (!Systrace.isTracing(0L))
      {
        if (mBundleLoader == null)
        {
          mDevSupportManager.handleReloadJS();
          return;
        }
        mDevSupportManager.isPackagerRunning(new PackagerStatusCallback()
        {
          public void onPackagerStatusFetched(final boolean paramAnonymousBoolean)
          {
            UiThreadUtil.runOnUiThread(new Runnable()
            {
              public void run()
              {
                if (paramAnonymousBoolean)
                {
                  mDevSupportManager.handleReloadJS();
                  return;
                }
                val$devSettings.setRemoteJSDebugEnabled(false);
                ReactInstanceManager.this.recreateReactContextInBackgroundFromBundleLoader();
              }
            });
          }
        });
        return;
      }
    }
    recreateReactContextInBackgroundFromBundleLoader();
  }
  
  /* Error */
  private void runCreateReactContextOnNewThread(final ReactContextInitParams paramReactContextInitParams)
  {
    // Byte code:
    //   0: ldc -122
    //   2: ldc_w 696
    //   5: invokestatic 142	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   8: pop
    //   9: invokestatic 470	com/facebook/react/bridge/UiThreadUtil:assertOnUiThread	()V
    //   12: aload_0
    //   13: getfield 116	com/facebook/react/ReactInstanceManager:mAttachedRootViews	Ljava/util/Set;
    //   16: astore_2
    //   17: aload_2
    //   18: monitorenter
    //   19: aload_0
    //   20: getfield 118	com/facebook/react/ReactInstanceManager:mReactContextLock	Ljava/lang/Object;
    //   23: astore_3
    //   24: aload_3
    //   25: monitorenter
    //   26: aload_0
    //   27: getfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   30: ifnull +16 -> 46
    //   33: aload_0
    //   34: aload_0
    //   35: getfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   38: invokespecial 702	com/facebook/react/ReactInstanceManager:tearDownReactContext	(Lcom/facebook/react/bridge/ReactContext;)V
    //   41: aload_0
    //   42: aconst_null
    //   43: putfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   46: aload_3
    //   47: monitorexit
    //   48: aload_2
    //   49: monitorexit
    //   50: aload_0
    //   51: new 704	java/lang/Thread
    //   54: dup
    //   55: aconst_null
    //   56: new 16	com/facebook/react/ReactInstanceManager$5
    //   59: dup
    //   60: aload_0
    //   61: aload_1
    //   62: invokespecial 706	com/facebook/react/ReactInstanceManager$5:<init>	(Lcom/facebook/react/ReactInstanceManager;Lcom/facebook/react/ReactInstanceManager$ReactContextInitParams;)V
    //   65: ldc_w 708
    //   68: invokespecial 711	java/lang/Thread:<init>	(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V
    //   71: putfield 283	com/facebook/react/ReactInstanceManager:mCreateReactContextThread	Ljava/lang/Thread;
    //   74: getstatic 714	com/facebook/react/bridge/ReactMarkerConstants:REACT_CONTEXT_THREAD_START	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   77: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   80: aload_0
    //   81: getfield 283	com/facebook/react/ReactInstanceManager:mCreateReactContextThread	Ljava/lang/Thread;
    //   84: invokevirtual 717	java/lang/Thread:start	()V
    //   87: return
    //   88: astore_1
    //   89: aload_3
    //   90: monitorexit
    //   91: aload_1
    //   92: athrow
    //   93: astore_1
    //   94: aload_2
    //   95: monitorexit
    //   96: aload_1
    //   97: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	98	0	this	ReactInstanceManager
    //   0	98	1	paramReactContextInitParams	ReactContextInitParams
    //   16	79	2	localSet	Set
    //   23	67	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   26	46	88	java/lang/Throwable
    //   46	48	88	java/lang/Throwable
    //   89	91	88	java/lang/Throwable
    //   19	26	93	java/lang/Throwable
    //   48	50	93	java/lang/Throwable
    //   91	93	93	java/lang/Throwable
    //   94	96	93	java/lang/Throwable
  }
  
  /* Error */
  private void setupReactContext(final ReactApplicationContext paramReactApplicationContext)
  {
    // Byte code:
    //   0: ldc -122
    //   2: ldc_w 719
    //   5: invokestatic 142	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   8: pop
    //   9: getstatic 722	com/facebook/react/bridge/ReactMarkerConstants:PRE_SETUP_REACT_CONTEXT_END	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   12: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   15: getstatic 725	com/facebook/react/bridge/ReactMarkerConstants:SETUP_REACT_CONTEXT_START	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   18: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   21: lconst_0
    //   22: ldc_w 726
    //   25: invokestatic 178	com/facebook/systrace/Systrace:beginSection	(JLjava/lang/String;)V
    //   28: aload_0
    //   29: getfield 116	com/facebook/react/ReactInstanceManager:mAttachedRootViews	Ljava/util/Set;
    //   32: astore_3
    //   33: aload_3
    //   34: monitorenter
    //   35: aload_0
    //   36: getfield 118	com/facebook/react/ReactInstanceManager:mReactContextLock	Ljava/lang/Object;
    //   39: astore 4
    //   41: aload 4
    //   43: monitorenter
    //   44: aload_0
    //   45: aload_1
    //   46: invokestatic 732	com/facebook/infer/annotation/Assertions:assertNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
    //   49: checkcast 367	com/facebook/react/bridge/ReactContext
    //   52: putfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   55: aload 4
    //   57: monitorexit
    //   58: aload_1
    //   59: invokevirtual 736	com/facebook/react/bridge/ReactContext:getCatalystInstance	()Lcom/facebook/react/bridge/CatalystInstance;
    //   62: invokestatic 732	com/facebook/infer/annotation/Assertions:assertNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
    //   65: checkcast 420	com/facebook/react/bridge/CatalystInstance
    //   68: astore 4
    //   70: aload 4
    //   72: invokeinterface 737 1 0
    //   77: aload_0
    //   78: getfield 190	com/facebook/react/ReactInstanceManager:mDevSupportManager	Lcom/facebook/react/devsupport/interfaces/DevSupportManager;
    //   81: aload_1
    //   82: invokeinterface 740 2 0
    //   87: aload_0
    //   88: getfield 204	com/facebook/react/ReactInstanceManager:mMemoryPressureRouter	Lcom/facebook/react/MemoryPressureRouter;
    //   91: aload 4
    //   93: invokevirtual 744	com/facebook/react/MemoryPressureRouter:addMemoryPressureListener	(Lcom/facebook/react/bridge/MemoryPressureListener;)V
    //   96: aload_0
    //   97: invokespecial 746	com/facebook/react/ReactInstanceManager:moveReactContextToCurrentLifecycleState	()V
    //   100: getstatic 749	com/facebook/react/bridge/ReactMarkerConstants:ATTACH_MEASURED_ROOT_VIEWS_START	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   103: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   106: aload_0
    //   107: getfield 116	com/facebook/react/ReactInstanceManager:mAttachedRootViews	Ljava/util/Set;
    //   110: invokeinterface 752 1 0
    //   115: astore 4
    //   117: aload 4
    //   119: invokeinterface 631 1 0
    //   124: istore_2
    //   125: iload_2
    //   126: ifeq +20 -> 146
    //   129: aload_0
    //   130: aload 4
    //   132: invokeinterface 635 1 0
    //   137: checkcast 472	com/facebook/react/ReactRootView
    //   140: invokespecial 754	com/facebook/react/ReactInstanceManager:attachRootViewToInstance	(Lcom/facebook/react/ReactRootView;)V
    //   143: goto -26 -> 117
    //   146: getstatic 757	com/facebook/react/bridge/ReactMarkerConstants:ATTACH_MEASURED_ROOT_VIEWS_END	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   149: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   152: aload_3
    //   153: monitorexit
    //   154: aload_0
    //   155: getfield 120	com/facebook/react/ReactInstanceManager:mReactInstanceEventListeners	Ljava/util/Collection;
    //   158: invokeinterface 762 1 0
    //   163: anewarray 33	com/facebook/react/ReactInstanceManager$ReactInstanceEventListener
    //   166: astore_3
    //   167: new 22	com/facebook/react/ReactInstanceManager$6
    //   170: dup
    //   171: aload_0
    //   172: aload_0
    //   173: getfield 120	com/facebook/react/ReactInstanceManager:mReactInstanceEventListeners	Ljava/util/Collection;
    //   176: aload_3
    //   177: invokeinterface 766 2 0
    //   182: checkcast 768	[Lcom/facebook/react/ReactInstanceManager$ReactInstanceEventListener;
    //   185: aload_1
    //   186: invokespecial 771	com/facebook/react/ReactInstanceManager$6:<init>	(Lcom/facebook/react/ReactInstanceManager;[Lcom/facebook/react/ReactInstanceManager$ReactInstanceEventListener;Lcom/facebook/react/bridge/ReactApplicationContext;)V
    //   189: invokestatic 775	com/facebook/react/bridge/UiThreadUtil:runOnUiThread	(Ljava/lang/Runnable;)V
    //   192: lconst_0
    //   193: invokestatic 194	com/facebook/systrace/Systrace:endSection	(J)V
    //   196: getstatic 778	com/facebook/react/bridge/ReactMarkerConstants:SETUP_REACT_CONTEXT_END	Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   199: invokestatic 409	com/facebook/react/bridge/ReactMarker:logMarker	(Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   202: aload_1
    //   203: new 24	com/facebook/react/ReactInstanceManager$7
    //   206: dup
    //   207: aload_0
    //   208: invokespecial 779	com/facebook/react/ReactInstanceManager$7:<init>	(Lcom/facebook/react/ReactInstanceManager;)V
    //   211: invokevirtual 782	com/facebook/react/bridge/ReactContext:runOnJSQueueThread	(Ljava/lang/Runnable;)V
    //   214: aload_1
    //   215: new 26	com/facebook/react/ReactInstanceManager$8
    //   218: dup
    //   219: aload_0
    //   220: invokespecial 783	com/facebook/react/ReactInstanceManager$8:<init>	(Lcom/facebook/react/ReactInstanceManager;)V
    //   223: invokevirtual 786	com/facebook/react/bridge/ReactContext:runOnNativeModulesQueueThread	(Ljava/lang/Runnable;)V
    //   226: return
    //   227: astore_1
    //   228: aload 4
    //   230: monitorexit
    //   231: aload_1
    //   232: athrow
    //   233: astore_1
    //   234: aload_3
    //   235: monitorexit
    //   236: aload_1
    //   237: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	238	0	this	ReactInstanceManager
    //   0	238	1	paramReactApplicationContext	ReactApplicationContext
    //   124	2	2	bool	boolean
    //   32	203	3	localObject1	Object
    //   39	190	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   44	58	227	java/lang/Throwable
    //   228	231	227	java/lang/Throwable
    //   35	44	233	java/lang/Throwable
    //   58	117	233	java/lang/Throwable
    //   117	125	233	java/lang/Throwable
    //   129	143	233	java/lang/Throwable
    //   146	154	233	java/lang/Throwable
    //   231	233	233	java/lang/Throwable
    //   234	236	233	java/lang/Throwable
  }
  
  private void tearDownReactContext(ReactContext paramReactContext)
  {
    Log.d("ReactNative", "ReactInstanceManager.tearDownReactContext()");
    UiThreadUtil.assertOnUiThread();
    if (mLifecycleState == LifecycleState.RESUMED) {
      paramReactContext.onHostPause();
    }
    Set localSet = mAttachedRootViews;
    try
    {
      Iterator localIterator = mAttachedRootViews.iterator();
      while (localIterator.hasNext())
      {
        ReactRootView localReactRootView = (ReactRootView)localIterator.next();
        localReactRootView.removeAllViews();
        localReactRootView.setId(-1);
      }
      paramReactContext.destroy();
      mDevSupportManager.onReactInstanceDestroyed(paramReactContext);
      mMemoryPressureRouter.removeMemoryPressureListener(paramReactContext.getCatalystInstance());
      return;
    }
    catch (Throwable paramReactContext)
    {
      throw paramReactContext;
    }
  }
  
  private void toggleElementInspector()
  {
    ReactContext localReactContext = getCurrentReactContext();
    if (localReactContext != null) {
      ((DeviceEventManagerModule.RCTDeviceEventEmitter)localReactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("toggleElementInspector", null);
    }
  }
  
  public void addReactInstanceEventListener(ReactInstanceEventListener paramReactInstanceEventListener)
  {
    mReactInstanceEventListeners.add(paramReactInstanceEventListener);
  }
  
  public void addReactInstanceProgressListener(ReactInstanceProgressListener paramReactInstanceProgressListener)
  {
    mReactInstanceProgressListener = paramReactInstanceProgressListener;
  }
  
  public void attachRootView(ReactRootView paramReactRootView)
  {
    UiThreadUtil.assertOnUiThread();
    mAttachedRootViews.add(paramReactRootView);
    paramReactRootView.removeAllViews();
    paramReactRootView.setId(-1);
    ReactContext localReactContext = getCurrentReactContext();
    if ((mCreateReactContextThread == null) && (localReactContext != null)) {
      attachRootViewToInstance(paramReactRootView);
    }
  }
  
  public void createReactContextInBackground()
  {
    Log.d("ReactNative", "ReactInstanceManager.createReactContextInBackground()");
    Assertions.assertCondition(mHasStartedCreatingInitialContext ^ true, "createReactContextInBackground should only be called when creating the react application for the first time. When reloading JS, e.g. from a new file, explicitlyuse recreateReactContextInBackground");
    mHasStartedCreatingInitialContext = true;
    recreateReactContextInBackgroundInner();
  }
  
  public ViewManager createViewManager(String paramString)
  {
    Object localObject1 = mReactContextLock;
    try
    {
      ReactApplicationContext localReactApplicationContext = (ReactApplicationContext)getCurrentReactContext();
      if ((localReactApplicationContext != null) && (localReactApplicationContext.hasActiveCatalystInstance()))
      {
        localObject1 = mPackages;
        try
        {
          Iterator localIterator = mPackages.iterator();
          while (localIterator.hasNext())
          {
            Object localObject2 = (ReactPackage)localIterator.next();
            if ((localObject2 instanceof ViewManagerOnDemandReactPackage))
            {
              localObject2 = ((ViewManagerOnDemandReactPackage)localObject2).createViewManager(localReactApplicationContext, paramString);
              if (localObject2 != null) {
                return localObject2;
              }
            }
          }
          return null;
        }
        catch (Throwable paramString)
        {
          throw paramString;
        }
      }
      return null;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  /* Error */
  public void destroy()
  {
    // Byte code:
    //   0: invokestatic 470	com/facebook/react/bridge/UiThreadUtil:assertOnUiThread	()V
    //   3: invokestatic 212	com/facebook/debug/holder/PrinterHolder:getPrinter	()Lcom/facebook/debug/holder/Printer;
    //   6: getstatic 218	com/facebook/debug/tags/ReactDebugOverlayTags:RN_CORE	Lcom/facebook/debug/debugoverlay/model/DebugOverlayTag;
    //   9: ldc_w 843
    //   12: invokeinterface 226 3 0
    //   17: aload_0
    //   18: iconst_1
    //   19: invokestatic 128	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   22: putfield 130	com/facebook/react/ReactInstanceManager:mHasStartedDestroying	Ljava/lang/Boolean;
    //   25: aload_0
    //   26: getfield 170	com/facebook/react/ReactInstanceManager:mUseDeveloperSupport	Z
    //   29: ifeq +22 -> 51
    //   32: aload_0
    //   33: getfield 190	com/facebook/react/ReactInstanceManager:mDevSupportManager	Lcom/facebook/react/devsupport/interfaces/DevSupportManager;
    //   36: iconst_0
    //   37: invokeinterface 846 2 0
    //   42: aload_0
    //   43: getfield 190	com/facebook/react/ReactInstanceManager:mDevSupportManager	Lcom/facebook/react/devsupport/interfaces/DevSupportManager;
    //   46: invokeinterface 849 1 0
    //   51: aload_0
    //   52: invokespecial 851	com/facebook/react/ReactInstanceManager:moveToBeforeCreateLifecycleState	()V
    //   55: aload_0
    //   56: getfield 283	com/facebook/react/ReactInstanceManager:mCreateReactContextThread	Ljava/lang/Thread;
    //   59: ifnull +8 -> 67
    //   62: aload_0
    //   63: aconst_null
    //   64: putfield 283	com/facebook/react/ReactInstanceManager:mCreateReactContextThread	Ljava/lang/Thread;
    //   67: aload_0
    //   68: getfield 204	com/facebook/react/ReactInstanceManager:mMemoryPressureRouter	Lcom/facebook/react/MemoryPressureRouter;
    //   71: aload_0
    //   72: getfield 153	com/facebook/react/ReactInstanceManager:mApplicationContext	Landroid/content/Context;
    //   75: invokevirtual 853	com/facebook/react/MemoryPressureRouter:destroy	(Landroid/content/Context;)V
    //   78: aload_0
    //   79: getfield 118	com/facebook/react/ReactInstanceManager:mReactContextLock	Ljava/lang/Object;
    //   82: astore_1
    //   83: aload_1
    //   84: monitorenter
    //   85: aload_0
    //   86: getfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   89: ifnull +15 -> 104
    //   92: aload_0
    //   93: getfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   96: invokevirtual 799	com/facebook/react/bridge/ReactContext:destroy	()V
    //   99: aload_0
    //   100: aconst_null
    //   101: putfield 698	com/facebook/react/ReactInstanceManager:mCurrentReactContext	Lcom/facebook/react/bridge/ReactContext;
    //   104: aload_1
    //   105: monitorexit
    //   106: aload_0
    //   107: iconst_0
    //   108: putfield 122	com/facebook/react/ReactInstanceManager:mHasStartedCreatingInitialContext	Z
    //   111: aload_0
    //   112: aconst_null
    //   113: putfield 155	com/facebook/react/ReactInstanceManager:mCurrentActivity	Landroid/app/Activity;
    //   116: invokestatic 859	com/facebook/react/views/imagehelper/ResourceDrawableIdHelper:getInstance	()Lcom/facebook/react/views/imagehelper/ResourceDrawableIdHelper;
    //   119: invokevirtual 862	com/facebook/react/views/imagehelper/ResourceDrawableIdHelper:clear	()V
    //   122: aload_0
    //   123: iconst_0
    //   124: invokestatic 128	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   127: putfield 130	com/facebook/react/ReactInstanceManager:mHasStartedDestroying	Ljava/lang/Boolean;
    //   130: aload_0
    //   131: getfield 132	com/facebook/react/ReactInstanceManager:mHasStartedDestroyingLock	Ljava/lang/Object;
    //   134: astore_1
    //   135: aload_1
    //   136: monitorenter
    //   137: aload_0
    //   138: getfield 132	com/facebook/react/ReactInstanceManager:mHasStartedDestroyingLock	Ljava/lang/Object;
    //   141: invokevirtual 865	java/lang/Object:notifyAll	()V
    //   144: aload_1
    //   145: monitorexit
    //   146: return
    //   147: astore_2
    //   148: aload_1
    //   149: monitorexit
    //   150: aload_2
    //   151: athrow
    //   152: astore_2
    //   153: aload_1
    //   154: monitorexit
    //   155: aload_2
    //   156: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	157	0	this	ReactInstanceManager
    //   82	72	1	localObject	Object
    //   147	4	2	localThrowable1	Throwable
    //   152	4	2	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   137	146	147	java/lang/Throwable
    //   148	150	147	java/lang/Throwable
    //   85	104	152	java/lang/Throwable
    //   104	106	152	java/lang/Throwable
    //   153	155	152	java/lang/Throwable
  }
  
  public void detachRootView(ReactRootView paramReactRootView)
  {
    UiThreadUtil.assertOnUiThread();
    Set localSet = mAttachedRootViews;
    try
    {
      if (mAttachedRootViews.contains(paramReactRootView))
      {
        ReactContext localReactContext = getCurrentReactContext();
        mAttachedRootViews.remove(paramReactRootView);
        if ((localReactContext != null) && (localReactContext.hasActiveCatalystInstance())) {
          detachViewFromInstance(paramReactRootView, localReactContext.getCatalystInstance());
        }
      }
      return;
    }
    catch (Throwable paramReactRootView)
    {
      throw paramReactRootView;
    }
  }
  
  public ReactContext getCurrentReactContext()
  {
    Object localObject = mReactContextLock;
    try
    {
      ReactContext localReactContext = mCurrentReactContext;
      return localReactContext;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public DevSupportManager getDevSupportManager()
  {
    return mDevSupportManager;
  }
  
  public String getJsExecutorName()
  {
    return mJavaScriptExecutorFactory.toString();
  }
  
  public LifecycleState getLifecycleState()
  {
    return mLifecycleState;
  }
  
  public MemoryPressureRouter getMemoryPressureRouter()
  {
    return mMemoryPressureRouter;
  }
  
  public List getOrCreateViewManagers(ReactApplicationContext paramReactApplicationContext)
  {
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_VIEW_MANAGERS_START);
    Systrace.beginSection(0L, "createAllViewManagers");
    try
    {
      List localList = mViewManagers;
      if (localList == null)
      {
        localList = mPackages;
        try
        {
          if (mViewManagers == null)
          {
            mViewManagers = new ArrayList();
            Iterator localIterator = mPackages.iterator();
            while (localIterator.hasNext())
            {
              ReactPackage localReactPackage = (ReactPackage)localIterator.next();
              mViewManagers.addAll(localReactPackage.createViewManagers(paramReactApplicationContext));
            }
            paramReactApplicationContext = mViewManagers;
            Systrace.endSection(0L);
            ReactMarker.logMarker(ReactMarkerConstants.CREATE_VIEW_MANAGERS_END);
            return paramReactApplicationContext;
          }
        }
        catch (Throwable paramReactApplicationContext)
        {
          throw paramReactApplicationContext;
        }
      }
      paramReactApplicationContext = mViewManagers;
      Systrace.endSection(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_VIEW_MANAGERS_END);
      return paramReactApplicationContext;
    }
    catch (Throwable paramReactApplicationContext)
    {
      Systrace.endSection(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_VIEW_MANAGERS_END);
      throw paramReactApplicationContext;
    }
  }
  
  public List getViewManagerNames()
  {
    Systrace.beginSection(0L, "ReactInstanceManager.getViewManagerNames");
    Object localObject1 = mReactContextLock;
    try
    {
      Object localObject2 = (ReactApplicationContext)getCurrentReactContext();
      if ((localObject2 != null) && (((ReactContext)localObject2).hasActiveCatalystInstance()))
      {
        localObject1 = mPackages;
        try
        {
          HashSet localHashSet = new HashSet();
          Iterator localIterator = mPackages.iterator();
          while (localIterator.hasNext())
          {
            Object localObject3 = (ReactPackage)localIterator.next();
            SystraceMessage.beginSection(0L, "ReactInstanceManager.getViewManagerName").attribute("Package", localObject3.getClass().getSimpleName()).flush();
            if ((localObject3 instanceof ViewManagerOnDemandReactPackage))
            {
              localObject3 = ((ViewManagerOnDemandReactPackage)localObject3).getViewManagerNames((ReactApplicationContext)localObject2);
              if (localObject3 != null) {
                localHashSet.addAll((Collection)localObject3);
              }
            }
            SystraceMessage.endSection(0L).flush();
          }
          Systrace.endSection(0L);
          localObject2 = new ArrayList(localHashSet);
          return localObject2;
        }
        catch (Throwable localThrowable1)
        {
          throw localThrowable1;
        }
      }
      return null;
    }
    catch (Throwable localThrowable2)
    {
      throw localThrowable2;
    }
  }
  
  public boolean hasStartedCreatingInitialContext()
  {
    return mHasStartedCreatingInitialContext;
  }
  
  public void onActivityResult(Activity paramActivity, int paramInt1, int paramInt2, Intent paramIntent)
  {
    ReactContext localReactContext = getCurrentReactContext();
    if (localReactContext != null) {
      localReactContext.onActivityResult(paramActivity, paramInt1, paramInt2, paramIntent);
    }
  }
  
  public void onBackPressed()
  {
    UiThreadUtil.assertOnUiThread();
    ReactContext localReactContext = mCurrentReactContext;
    if (localReactContext == null)
    {
      FLog.warn("ReactNative", "Instance detached from instance manager");
      invokeDefaultOnBackPressed();
      return;
    }
    ((DeviceEventManagerModule)localReactContext.getNativeModule(DeviceEventManagerModule.class)).emitHardwareBackPressed();
  }
  
  public void onHostDestroy()
  {
    
    if (mUseDeveloperSupport) {
      mDevSupportManager.setDevSupportEnabled(false);
    }
    moveToBeforeCreateLifecycleState();
    mCurrentActivity = null;
  }
  
  public void onHostDestroy(Activity paramActivity)
  {
    if (paramActivity == mCurrentActivity) {
      onHostDestroy();
    }
  }
  
  public void onHostPause()
  {
    UiThreadUtil.assertOnUiThread();
    mDefaultBackButtonImpl = null;
    if (mUseDeveloperSupport) {
      mDevSupportManager.setDevSupportEnabled(false);
    }
    moveToBeforeResumeLifecycleState();
  }
  
  public void onHostPause(Activity paramActivity)
  {
    Assertions.assertNotNull(mCurrentActivity);
    boolean bool;
    if (paramActivity == mCurrentActivity) {
      bool = true;
    } else {
      bool = false;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Pausing an activity that is not the current activity, this is incorrect! Current activity: ");
    localStringBuilder.append(mCurrentActivity.getClass().getSimpleName());
    localStringBuilder.append(" Paused activity: ");
    localStringBuilder.append(paramActivity.getClass().getSimpleName());
    Assertions.assertCondition(bool, localStringBuilder.toString());
    onHostPause();
  }
  
  public void onHostResume(final Activity paramActivity)
  {
    UiThreadUtil.assertOnUiThread();
    mCurrentActivity = paramActivity;
    if (mUseDeveloperSupport)
    {
      paramActivity = mCurrentActivity.getWindow().getDecorView();
      if (!ViewCompat.isAttachedToWindow(paramActivity)) {
        paramActivity.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener()
        {
          public void onViewAttachedToWindow(View paramAnonymousView)
          {
            paramActivity.removeOnAttachStateChangeListener(this);
            mDevSupportManager.setDevSupportEnabled(true);
          }
          
          public void onViewDetachedFromWindow(View paramAnonymousView) {}
        });
      } else {
        mDevSupportManager.setDevSupportEnabled(true);
      }
    }
    moveToResumedLifecycleState(false);
  }
  
  public void onHostResume(Activity paramActivity, DefaultHardwareBackBtnHandler paramDefaultHardwareBackBtnHandler)
  {
    UiThreadUtil.assertOnUiThread();
    mDefaultBackButtonImpl = paramDefaultHardwareBackBtnHandler;
    onHostResume(paramActivity);
  }
  
  public void onLoadingFinished()
  {
    ReactInstanceProgressListener localReactInstanceProgressListener = mReactInstanceProgressListener;
    if (localReactInstanceProgressListener != null) {
      localReactInstanceProgressListener.onReactLoadFinish();
    }
  }
  
  public void onNewIntent(Intent paramIntent)
  {
    UiThreadUtil.assertOnUiThread();
    ReactContext localReactContext = getCurrentReactContext();
    if (localReactContext == null)
    {
      FLog.warn("ReactNative", "Instance detached from instance manager");
      return;
    }
    String str = paramIntent.getAction();
    Uri localUri = paramIntent.getData();
    if (("android.intent.action.VIEW".equals(str)) && (localUri != null)) {
      ((DeviceEventManagerModule)localReactContext.getNativeModule(DeviceEventManagerModule.class)).emitNewIntentReceived(localUri);
    }
    localReactContext.onNewIntent(mCurrentActivity, paramIntent);
  }
  
  public void recreateReactContextInBackground()
  {
    Assertions.assertCondition(mHasStartedCreatingInitialContext, "recreateReactContextInBackground should only be called after the initial createReactContextInBackground call.");
    recreateReactContextInBackgroundInner();
  }
  
  public void removeReactInstanceEventListener(ReactInstanceEventListener paramReactInstanceEventListener)
  {
    mReactInstanceEventListeners.remove(paramReactInstanceEventListener);
  }
  
  public void removeReactInstanceProgressListener()
  {
    mReactInstanceProgressListener = null;
  }
  
  public void showDevOptionsDialog()
  {
    UiThreadUtil.assertOnUiThread();
    mDevSupportManager.showDevOptionsDialog();
  }
  
  private class ReactContextInitParams
  {
    private final JSBundleLoader mJsBundleLoader;
    private final JavaScriptExecutorFactory mJsExecutorFactory;
    
    public ReactContextInitParams(JavaScriptExecutorFactory paramJavaScriptExecutorFactory, JSBundleLoader paramJSBundleLoader)
    {
      mJsExecutorFactory = ((JavaScriptExecutorFactory)Assertions.assertNotNull(paramJavaScriptExecutorFactory));
      mJsBundleLoader = ((JSBundleLoader)Assertions.assertNotNull(paramJSBundleLoader));
    }
    
    public JSBundleLoader getJsBundleLoader()
    {
      return mJsBundleLoader;
    }
    
    public JavaScriptExecutorFactory getJsExecutorFactory()
    {
      return mJsExecutorFactory;
    }
  }
  
  public static abstract interface ReactInstanceEventListener
  {
    public abstract void onReactContextInitialized(ReactContext paramReactContext);
  }
  
  public static abstract interface ReactInstanceProgressListener
  {
    public abstract void onReactLoadCancel();
    
    public abstract void onReactLoadFinish();
    
    public abstract void onReactLoadStart();
  }
}
