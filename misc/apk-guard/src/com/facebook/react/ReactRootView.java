package com.facebook.react;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.WindowManager;
import com.facebook.common.logging.FLog;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.UIManager;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter;
import com.facebook.react.modules.deviceinfo.DeviceInfoModule;
import com.facebook.react.uimanager.DisplayMetricsHolder;
import com.facebook.react.uimanager.IllegalViewOperationException;
import com.facebook.react.uimanager.JSTouchDispatcher;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.uimanager.RootView;
import com.facebook.react.uimanager.UIImplementation;
import com.facebook.react.uimanager.UIManagerHelper;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.common.MeasureSpecProvider;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.react.uimanager.events.EventDispatcher;
import com.facebook.systrace.Systrace;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

public class ReactRootView
  extends SizeMonitoringFrameLayout
  implements RootView, MeasureSpecProvider
{
  private final ReactAndroidHWInputDeviceHelper mAndroidHWInputDeviceHelper = new ReactAndroidHWInputDeviceHelper(this);
  @Nullable
  private Bundle mAppProperties;
  @Nullable
  private CustomGlobalLayoutListener mCustomGlobalLayoutListener;
  private int mHeightMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, 0);
  @Nullable
  private String mInitialUITemplate;
  private boolean mIsAttachedToInstance;
  @Nullable
  private String mJSModuleName;
  @Nullable
  private JSTouchDispatcher mJSTouchDispatcher;
  private boolean mLayoutfinished = false;
  private MtaCallback mMtaCallback;
  @Nullable
  private ReactInstanceManager mReactInstanceManager;
  private boolean mReported = false;
  @Nullable
  private ReactRootViewEventListener mRootViewEventListener;
  private int mRootViewTag;
  private boolean mShouldLogContentAppeared;
  private int mUIManagerType = 1;
  private boolean mWasMeasured = false;
  private int mWidthMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, 0);
  private WindowChangeListener mWindowChangeListener;
  
  public ReactRootView(Context paramContext)
  {
    super(paramContext);
    init();
  }
  
  public ReactRootView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init();
  }
  
  public ReactRootView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    init();
  }
  
  private void attachToReactInstanceManager()
  {
    Systrace.beginSection(0L, "attachToReactInstanceManager");
    try
    {
      boolean bool = mIsAttachedToInstance;
      if (bool)
      {
        Systrace.endSection(0L);
        return;
      }
      mIsAttachedToInstance = true;
      ((ReactInstanceManager)Assertions.assertNotNull(mReactInstanceManager)).attachRootView(this);
      getViewTreeObserver().addOnGlobalLayoutListener(getCustomGlobalLayoutListener());
      Systrace.endSection(0L);
      return;
    }
    catch (Throwable localThrowable)
    {
      Systrace.endSection(0L);
      throw localThrowable;
    }
  }
  
  private void dispatchJSTouchEvent(MotionEvent paramMotionEvent)
  {
    Object localObject = mReactInstanceManager;
    if ((localObject != null) && (mIsAttachedToInstance) && (((ReactInstanceManager)localObject).getCurrentReactContext() != null))
    {
      if (mJSTouchDispatcher == null)
      {
        FLog.warn("ReactNative", "Unable to dispatch touch to JS before the dispatcher is available");
        return;
      }
      localObject = ((UIManagerModule)mReactInstanceManager.getCurrentReactContext().getNativeModule(UIManagerModule.class)).getEventDispatcher();
      mJSTouchDispatcher.handleTouchEvent(paramMotionEvent, (EventDispatcher)localObject);
      return;
    }
    FLog.warn("ReactNative", "Unable to dispatch touch to JS as the catalyst instance has not been attached");
  }
  
  private void enableLayoutCalculation()
  {
    Object localObject = mReactInstanceManager;
    if (localObject == null)
    {
      FLog.warn("ReactNative", "Unable to enable layout calculation for uninitialized ReactInstanceManager");
      return;
    }
    localObject = ((ReactInstanceManager)localObject).getCurrentReactContext();
    if (localObject != null) {
      ((UIManagerModule)((ReactContext)localObject).getCatalystInstance().getNativeModule(UIManagerModule.class)).getUIImplementation().enableLayoutCalculationForRootNode(getRootViewTag());
    }
  }
  
  private CustomGlobalLayoutListener getCustomGlobalLayoutListener()
  {
    if (mCustomGlobalLayoutListener == null) {
      mCustomGlobalLayoutListener = new CustomGlobalLayoutListener();
    }
    return mCustomGlobalLayoutListener;
  }
  
  private void init()
  {
    setClipChildren(false);
  }
  
  private void removeOnGlobalLayoutListener()
  {
    getViewTreeObserver().removeOnGlobalLayoutListener(getCustomGlobalLayoutListener());
  }
  
  private void updateRootLayoutSpecs(int paramInt1, int paramInt2)
  {
    Object localObject = mReactInstanceManager;
    if (localObject == null)
    {
      FLog.warn("ReactNative", "Unable to update root layout specs for uninitialized ReactInstanceManager");
      return;
    }
    localObject = ((ReactInstanceManager)localObject).getCurrentReactContext();
    if (localObject != null) {
      UIManagerHelper.getUIManager((ReactContext)localObject, getUIManagerType()).updateRootLayoutSpecs(getRootViewTag(), paramInt1, paramInt2);
    }
  }
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    try
    {
      super.dispatchDraw(paramCanvas);
      return;
    }
    catch (StackOverflowError paramCanvas)
    {
      handleException(paramCanvas);
    }
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if ((localReactInstanceManager != null) && (mIsAttachedToInstance) && (localReactInstanceManager.getCurrentReactContext() != null))
    {
      mAndroidHWInputDeviceHelper.handleKeyEvent(paramKeyEvent);
      return super.dispatchKeyEvent(paramKeyEvent);
    }
    FLog.warn("ReactNative", "Unable to handle key event as the catalyst instance has not been attached");
    return super.dispatchKeyEvent(paramKeyEvent);
  }
  
  protected void finalize()
    throws Throwable
  {
    super.finalize();
    Assertions.assertCondition(mIsAttachedToInstance ^ true, "The application this ReactRootView was rendering was not unmounted before the ReactRootView was garbage collected. This usually means that your application is leaking large amounts of memory. To solve this, make sure to call ReactRootView#unmountReactApplication in the onDestroy() of your hosting Activity or in the onDestroyView() of your hosting Fragment.");
  }
  
  public Bundle getAppProperties()
  {
    return mAppProperties;
  }
  
  public int getHeightMeasureSpec()
  {
    if ((!mWasMeasured) && (getLayoutParams() != null) && (getLayoutParamsheight > 0)) {
      return View.MeasureSpec.makeMeasureSpec(getLayoutParamsheight, 1073741824);
    }
    return mHeightMeasureSpec;
  }
  
  public String getInitialUITemplate()
  {
    return mInitialUITemplate;
  }
  
  String getJSModuleName()
  {
    return (String)Assertions.assertNotNull(mJSModuleName);
  }
  
  public ReactInstanceManager getReactInstanceManager()
  {
    return mReactInstanceManager;
  }
  
  public int getRootViewTag()
  {
    return mRootViewTag;
  }
  
  public int getUIManagerType()
  {
    return mUIManagerType;
  }
  
  public int getWidthMeasureSpec()
  {
    if ((!mWasMeasured) && (getLayoutParams() != null) && (getLayoutParamswidth > 0)) {
      return View.MeasureSpec.makeMeasureSpec(getLayoutParamswidth, 1073741824);
    }
    return mWidthMeasureSpec;
  }
  
  public void handleException(Throwable paramThrowable)
  {
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if ((localReactInstanceManager != null) && (localReactInstanceManager.getCurrentReactContext() != null))
    {
      paramThrowable = new IllegalViewOperationException(paramThrowable.getMessage(), this, paramThrowable);
      mReactInstanceManager.getCurrentReactContext().handleException(paramThrowable);
      return;
    }
    throw new RuntimeException(paramThrowable);
  }
  
  public void onAttachedToReactInstance()
  {
    mJSTouchDispatcher = new JSTouchDispatcher(this);
    ReactRootViewEventListener localReactRootViewEventListener = mRootViewEventListener;
    if (localReactRootViewEventListener != null) {
      localReactRootViewEventListener.onAttachedToReactInstance(this);
    }
    mLayoutfinished = true;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    if (mIsAttachedToInstance)
    {
      removeOnGlobalLayoutListener();
      getViewTreeObserver().addOnGlobalLayoutListener(getCustomGlobalLayoutListener());
    }
  }
  
  public void onChildStartedNativeGesture(MotionEvent paramMotionEvent)
  {
    Object localObject = mReactInstanceManager;
    if ((localObject != null) && (mIsAttachedToInstance) && (((ReactInstanceManager)localObject).getCurrentReactContext() != null))
    {
      if (mJSTouchDispatcher == null)
      {
        FLog.warn("ReactNative", "Unable to dispatch touch to JS before the dispatcher is available");
        return;
      }
      localObject = ((UIManagerModule)mReactInstanceManager.getCurrentReactContext().getNativeModule(UIManagerModule.class)).getEventDispatcher();
      mJSTouchDispatcher.onChildStartedNativeGesture(paramMotionEvent, (EventDispatcher)localObject);
      return;
    }
    FLog.warn("ReactNative", "Unable to dispatch touch to JS as the catalyst instance has not been attached");
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (mIsAttachedToInstance) {
      removeOnGlobalLayoutListener();
    }
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
  {
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if ((localReactInstanceManager != null) && (mIsAttachedToInstance) && (localReactInstanceManager.getCurrentReactContext() != null))
    {
      mAndroidHWInputDeviceHelper.clearFocus();
      super.onFocusChanged(paramBoolean, paramInt, paramRect);
      return;
    }
    FLog.warn("ReactNative", "Unable to handle focus changed event as the catalyst instance has not been attached");
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    dispatchJSTouchEvent(paramMotionEvent);
    return super.onInterceptTouchEvent(paramMotionEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if ((mLayoutfinished) && (!mReported))
    {
      ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
      if (localReactInstanceManager != null) {
        localReactInstanceManager.onLoadingFinished();
      }
      mReported = true;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    Systrace.beginSection(0L, "ReactRootView.onMeasure");
    try
    {
      mWidthMeasureSpec = paramInt1;
      mHeightMeasureSpec = paramInt2;
      int i = View.MeasureSpec.getMode(paramInt1);
      int j = 0;
      int k;
      int m;
      int n;
      if ((i != Integer.MIN_VALUE) && (i != 0))
      {
        i = View.MeasureSpec.getSize(paramInt1);
      }
      else
      {
        i = 0;
        paramInt1 = 0;
        for (;;)
        {
          k = getChildCount();
          if (i >= k) {
            break;
          }
          localObject = getChildAt(i);
          k = ((View)localObject).getLeft();
          m = ((View)localObject).getMeasuredWidth();
          n = ((View)localObject).getPaddingLeft();
          int i1 = ((View)localObject).getPaddingRight();
          paramInt1 = Math.max(paramInt1, k + m + n + i1);
          i += 1;
        }
        i = paramInt1;
      }
      paramInt1 = View.MeasureSpec.getMode(paramInt2);
      if ((paramInt1 != Integer.MIN_VALUE) && (paramInt1 != 0))
      {
        j = View.MeasureSpec.getSize(paramInt2);
      }
      else
      {
        paramInt1 = 0;
        paramInt2 = j;
        for (;;)
        {
          k = getChildCount();
          j = paramInt1;
          if (paramInt2 >= k) {
            break;
          }
          localObject = getChildAt(paramInt2);
          j = ((View)localObject).getTop();
          k = ((View)localObject).getMeasuredHeight();
          m = ((View)localObject).getPaddingTop();
          n = ((View)localObject).getPaddingBottom();
          paramInt1 = Math.max(paramInt1, j + k + m + n);
          paramInt2 += 1;
        }
      }
      setMeasuredDimension(i, j);
      mWasMeasured = true;
      Object localObject = mReactInstanceManager;
      if (localObject != null)
      {
        boolean bool = mIsAttachedToInstance;
        if (!bool)
        {
          attachToReactInstanceManager();
          enableLayoutCalculation();
          break label290;
        }
      }
      enableLayoutCalculation();
      updateRootLayoutSpecs(mWidthMeasureSpec, mHeightMeasureSpec);
      label290:
      Systrace.endSection(0L);
      return;
    }
    catch (Throwable localThrowable)
    {
      Systrace.endSection(0L);
      throw localThrowable;
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    dispatchJSTouchEvent(paramMotionEvent);
    super.onTouchEvent(paramMotionEvent);
    return true;
  }
  
  public void onViewAdded(View paramView)
  {
    super.onViewAdded(paramView);
    if (mShouldLogContentAppeared)
    {
      mShouldLogContentAppeared = false;
      if (mJSModuleName != null) {
        ReactMarker.logMarker(ReactMarkerConstants.CONTENT_APPEARED, mJSModuleName, mRootViewTag);
      }
    }
  }
  
  public void requestChildFocus(View paramView1, View paramView2)
  {
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if ((localReactInstanceManager != null) && (mIsAttachedToInstance) && (localReactInstanceManager.getCurrentReactContext() != null))
    {
      mAndroidHWInputDeviceHelper.onFocusChanged(paramView2);
      super.requestChildFocus(paramView1, paramView2);
      return;
    }
    FLog.warn("ReactNative", "Unable to handle child focus changed event as the catalyst instance has not been attached");
    super.requestChildFocus(paramView1, paramView2);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    if (getParent() != null) {
      getParent().requestDisallowInterceptTouchEvent(paramBoolean);
    }
  }
  
  /* Error */
  void runApplication()
  {
    // Byte code:
    //   0: lconst_0
    //   1: ldc_w 453
    //   4: invokestatic 113	com/facebook/systrace/Systrace:beginSection	(JLjava/lang/String;)V
    //   7: aload_0
    //   8: getfield 95	com/facebook/react/ReactRootView:mReactInstanceManager	Lcom/facebook/react/ReactInstanceManager;
    //   11: astore_3
    //   12: aload_3
    //   13: ifnull +221 -> 234
    //   16: aload_0
    //   17: getfield 99	com/facebook/react/ReactRootView:mIsAttachedToInstance	Z
    //   20: istore_2
    //   21: iload_2
    //   22: ifne +6 -> 28
    //   25: goto +209 -> 234
    //   28: aload_0
    //   29: getfield 95	com/facebook/react/ReactRootView:mReactInstanceManager	Lcom/facebook/react/ReactInstanceManager;
    //   32: invokevirtual 150	com/facebook/react/ReactInstanceManager:getCurrentReactContext	()Lcom/facebook/react/bridge/ReactContext;
    //   35: astore_3
    //   36: aload_3
    //   37: ifnonnull +8 -> 45
    //   40: lconst_0
    //   41: invokestatic 117	com/facebook/systrace/Systrace:endSection	(J)V
    //   44: return
    //   45: aload_0
    //   46: iconst_0
    //   47: putfield 78	com/facebook/react/ReactRootView:mLayoutfinished	Z
    //   50: aload_0
    //   51: iconst_0
    //   52: putfield 80	com/facebook/react/ReactRootView:mReported	Z
    //   55: aload_3
    //   56: invokevirtual 189	com/facebook/react/bridge/ReactContext:getCatalystInstance	()Lcom/facebook/react/bridge/CatalystInstance;
    //   59: astore_3
    //   60: new 455	com/facebook/react/bridge/WritableNativeMap
    //   63: dup
    //   64: invokespecial 457	com/facebook/react/bridge/WritableNativeMap:<init>	()V
    //   67: astore 4
    //   69: aload 4
    //   71: ldc_w 459
    //   74: aload_0
    //   75: invokevirtual 200	com/facebook/react/ReactRootView:getRootViewTag	()I
    //   78: i2d
    //   79: invokevirtual 463	com/facebook/react/bridge/WritableNativeMap:putDouble	(Ljava/lang/String;D)V
    //   82: aload_0
    //   83: invokevirtual 465	com/facebook/react/ReactRootView:getAppProperties	()Landroid/os/Bundle;
    //   86: astore 5
    //   88: aload 5
    //   90: ifnull +88 -> 178
    //   93: aload 5
    //   95: invokestatic 471	com/facebook/react/bridge/Arguments:fromBundle	(Landroid/os/Bundle;)Lcom/facebook/react/bridge/WritableMap;
    //   98: astore 5
    //   100: aload 5
    //   102: ldc_w 473
    //   105: invokeinterface 479 2 0
    //   110: istore_2
    //   111: iload_2
    //   112: ifne +56 -> 168
    //   115: new 481	java/lang/StringBuilder
    //   118: dup
    //   119: invokespecial 482	java/lang/StringBuilder:<init>	()V
    //   122: astore 6
    //   124: aload 6
    //   126: ldc_w 484
    //   129: invokevirtual 488	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   132: pop
    //   133: aload 6
    //   135: aload_0
    //   136: invokevirtual 490	com/facebook/react/ReactRootView:getJSModuleName	()Ljava/lang/String;
    //   139: invokevirtual 488	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   142: pop
    //   143: aload 6
    //   145: aload_0
    //   146: invokevirtual 200	com/facebook/react/ReactRootView:getRootViewTag	()I
    //   149: invokevirtual 493	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   152: pop
    //   153: aload 5
    //   155: ldc_w 473
    //   158: aload 6
    //   160: invokevirtual 496	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   163: invokeinterface 501 3 0
    //   168: aload 4
    //   170: ldc_w 503
    //   173: aload 5
    //   175: invokevirtual 507	com/facebook/react/bridge/WritableNativeMap:putMap	(Ljava/lang/String;Lcom/facebook/react/bridge/WritableMap;)V
    //   178: aload_0
    //   179: invokevirtual 225	com/facebook/react/ReactRootView:getUIManagerType	()I
    //   182: istore_1
    //   183: iload_1
    //   184: iconst_2
    //   185: if_icmpne +12 -> 197
    //   188: aload 4
    //   190: ldc_w 509
    //   193: iconst_1
    //   194: invokevirtual 513	com/facebook/react/bridge/WritableNativeMap:putBoolean	(Ljava/lang/String;Z)V
    //   197: aload_0
    //   198: iconst_1
    //   199: putfield 419	com/facebook/react/ReactRootView:mShouldLogContentAppeared	Z
    //   202: aload_0
    //   203: invokevirtual 490	com/facebook/react/ReactRootView:getJSModuleName	()Ljava/lang/String;
    //   206: astore 5
    //   208: aload_3
    //   209: ldc_w 515
    //   212: invokeinterface 519 2 0
    //   217: checkcast 515	com/facebook/react/modules/appregistry/AppRegistry
    //   220: aload 5
    //   222: aload 4
    //   224: invokeinterface 521 3 0
    //   229: lconst_0
    //   230: invokestatic 117	com/facebook/systrace/Systrace:endSection	(J)V
    //   233: return
    //   234: lconst_0
    //   235: invokestatic 117	com/facebook/systrace/Systrace:endSection	(J)V
    //   238: return
    //   239: astore_3
    //   240: lconst_0
    //   241: invokestatic 117	com/facebook/systrace/Systrace:endSection	(J)V
    //   244: aload_3
    //   245: athrow
    //   246: astore 5
    //   248: goto -70 -> 178
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	251	0	this	ReactRootView
    //   182	4	1	i	int
    //   20	92	2	bool	boolean
    //   11	198	3	localObject1	Object
    //   239	6	3	localThrowable	Throwable
    //   67	156	4	localWritableNativeMap	com.facebook.react.bridge.WritableNativeMap
    //   86	135	5	localObject2	Object
    //   246	1	5	localException	Exception
    //   122	37	6	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   7	12	239	java/lang/Throwable
    //   16	21	239	java/lang/Throwable
    //   28	36	239	java/lang/Throwable
    //   45	88	239	java/lang/Throwable
    //   93	111	239	java/lang/Throwable
    //   115	168	239	java/lang/Throwable
    //   168	178	239	java/lang/Throwable
    //   178	183	239	java/lang/Throwable
    //   188	197	239	java/lang/Throwable
    //   197	229	239	java/lang/Throwable
    //   168	178	246	java/lang/Exception
  }
  
  void sendEvent(String paramString, WritableMap paramWritableMap)
  {
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if (localReactInstanceManager != null) {
      ((DeviceEventManagerModule.RCTDeviceEventEmitter)localReactInstanceManager.getCurrentReactContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit(paramString, paramWritableMap);
    }
  }
  
  public void setAppProperties(Bundle paramBundle)
  {
    UiThreadUtil.assertOnUiThread();
    mAppProperties = paramBundle;
    if (getRootViewTag() != 0) {
      runApplication();
    }
  }
  
  public void setEventListener(ReactRootViewEventListener paramReactRootViewEventListener)
  {
    mRootViewEventListener = paramReactRootViewEventListener;
  }
  
  public void setExposureMta()
  {
    JDReactData.newInstance();
    if (JDReactData.getData() != null)
    {
      JDReactData.newInstance();
      if (JDReactData.getData().isEmpty()) {
        return;
      }
      if (mMtaCallback != null)
      {
        if (mJSModuleName == null) {
          return;
        }
        Object localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("");
        ((StringBuilder)localObject1).append(getJSModuleName());
        ((StringBuilder)localObject1).append(getRootViewTag());
        localObject1 = ((StringBuilder)localObject1).toString();
        ArrayList localArrayList = new ArrayList();
        int i = 0;
        Object localObject4;
        for (;;)
        {
          JDReactData.newInstance();
          if (i >= JDReactData.getData().size()) {
            break;
          }
          JDReactData.newInstance();
          localObject2 = (ReadableMap)JDReactData.getData().get(i);
          if ((((ReadableMap)localObject2).hasKey("rootView")) && (((ReadableMap)localObject2).hasKey("event_id")) && (((ReadableMap)localObject2).hasKey("event_param")) && (((ReadableMap)localObject2).hasKey("separator")) && (((String)localObject1).equals(((ReadableMap)localObject2).getString("rootView"))))
          {
            localObject3 = ((ReadableMap)localObject2).getString("event_id");
            int j = 0;
            int m;
            for (int k = 0; j < localArrayList.size(); k = m)
            {
              localObject4 = (String)((Map)localArrayList.get(j)).get("event_id");
              m = k;
              if (localObject3 != null)
              {
                m = k;
                if (((String)localObject3).equals(localObject4))
                {
                  localObject4 = (Map)localArrayList.get(j);
                  m = k;
                  if (localObject4 != null)
                  {
                    m = k;
                    if (((Map)localObject4).get("event_param") != null)
                    {
                      m = k;
                      if (((ReadableMap)localObject2).getString("separator") != null)
                      {
                        m = k;
                        if (((ReadableMap)localObject2).getString("event_param") != null)
                        {
                          StringBuilder localStringBuilder = new StringBuilder();
                          localStringBuilder.append((String)((Map)localObject4).get("event_param"));
                          localStringBuilder.append(((ReadableMap)localObject2).getString("separator"));
                          localStringBuilder.append(((ReadableMap)localObject2).getString("event_param"));
                          ((Map)localObject4).put("event_param", localStringBuilder.toString());
                          m = 1;
                        }
                      }
                    }
                  }
                }
              }
              j += 1;
            }
            if ((k == 0) && (((ReadableMap)localObject2).getString("event_id") != null) && (((ReadableMap)localObject2).getString("event_param") != null))
            {
              localObject3 = new HashMap();
              ((Map)localObject3).put("event_id", ((ReadableMap)localObject2).getString("event_id"));
              ((Map)localObject3).put("event_param", ((ReadableMap)localObject2).getString("event_param"));
              localObject2 = new StringBuilder();
              ((StringBuilder)localObject2).append("");
              ((StringBuilder)localObject2).append(i);
              ((Map)localObject3).put("index", ((StringBuilder)localObject2).toString());
              localArrayList.add(localObject3);
            }
          }
          i += 1;
        }
        JDReactData.newInstance();
        if (JDReactData.getData() != null)
        {
          localObject2 = localArrayList.iterator();
          while (((Iterator)localObject2).hasNext())
          {
            localObject3 = (Map)((Iterator)localObject2).next();
            localObject4 = mMtaCallback;
            JDReactData.newInstance();
            ((MtaCallback)localObject4).setExposureMta((ReadableMap)JDReactData.getData().get(Integer.parseInt((String)((Map)localObject3).get("index"))), (String)((Map)localObject3).get("event_param"));
          }
        }
        Object localObject2 = Collections.synchronizedList(new ArrayList());
        JDReactData.newInstance();
        ((List)localObject2).addAll(JDReactData.getData());
        Object localObject3 = ((List)localObject2).iterator();
        while (((Iterator)localObject3).hasNext())
        {
          localObject4 = (ReadableMap)((Iterator)localObject3).next();
          if ((((ReadableMap)localObject4).hasKey("rootView")) && (((String)localObject1).equals(((ReadableMap)localObject4).getString("rootView")))) {
            ((Iterator)localObject3).remove();
          }
        }
        JDReactData.newInstance();
        JDReactData.getData().clear();
        if ((localObject2 != null) && (!((List)localObject2).isEmpty()))
        {
          JDReactData.newInstance();
          JDReactData.getData().addAll((Collection)localObject2);
        }
        JDReactData.newInstance();
        if (JDReactData.getData() != null)
        {
          JDReactData.newInstance();
          if (JDReactData.getData().isEmpty())
          {
            JDReactData.newInstance();
            JDReactData.cleanAll();
          }
        }
        localArrayList.clear();
      }
    }
  }
  
  public void setIsFabric(boolean paramBoolean)
  {
    int i;
    if (paramBoolean) {
      i = 2;
    } else {
      i = 1;
    }
    mUIManagerType = i;
  }
  
  public void setMtaCallback(MtaCallback paramMtaCallback)
  {
    mMtaCallback = paramMtaCallback;
  }
  
  public void setRootViewTag(int paramInt)
  {
    mRootViewTag = paramInt;
  }
  
  public void setWindowChangeListener(WindowChangeListener paramWindowChangeListener)
  {
    mWindowChangeListener = paramWindowChangeListener;
  }
  
  void simulateAttachForTesting()
  {
    mIsAttachedToInstance = true;
    mJSTouchDispatcher = new JSTouchDispatcher(this);
  }
  
  public void startReactApplication(ReactInstanceManager paramReactInstanceManager, String paramString)
  {
    startReactApplication(paramReactInstanceManager, paramString, null);
  }
  
  public void startReactApplication(ReactInstanceManager paramReactInstanceManager, String paramString, Bundle paramBundle)
  {
    startReactApplication(paramReactInstanceManager, paramString, paramBundle, null);
  }
  
  public void startReactApplication(ReactInstanceManager paramReactInstanceManager, String paramString1, Bundle paramBundle, String paramString2)
  {
    Systrace.beginSection(0L, "startReactApplication");
    try
    {
      UiThreadUtil.assertOnUiThread();
      ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
      if (localReactInstanceManager == null) {
        bool = true;
      } else {
        bool = false;
      }
      Assertions.assertCondition(bool, "This root view has already been attached to a catalyst instance manager");
      mReactInstanceManager = paramReactInstanceManager;
      mJSModuleName = paramString1;
      mAppProperties = paramBundle;
      mInitialUITemplate = paramString2;
      boolean bool = mReactInstanceManager.hasStartedCreatingInitialContext();
      if (!bool) {
        mReactInstanceManager.createReactContextInBackground();
      }
      attachToReactInstanceManager();
      Systrace.endSection(0L);
      return;
    }
    catch (Throwable paramReactInstanceManager)
    {
      Systrace.endSection(0L);
      throw paramReactInstanceManager;
    }
  }
  
  public void unmountReactApplication()
  {
    setExposureMta();
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if ((localReactInstanceManager != null) && (mIsAttachedToInstance))
    {
      localReactInstanceManager.detachRootView(this);
      mReactInstanceManager = null;
      mIsAttachedToInstance = false;
    }
    mShouldLogContentAppeared = false;
  }
  
  public void updateScreenSize()
  {
    ReactInstanceManager localReactInstanceManager = mReactInstanceManager;
    if (localReactInstanceManager != null)
    {
      if (localReactInstanceManager.getCurrentReactContext() == null) {
        return;
      }
      DisplayMetricsHolder.setScreenDisplayMetrics(null);
      DisplayMetricsHolder.initDisplayMetricsIfNotInitialized(getContext().getApplicationContext());
      ((DeviceInfoModule)mReactInstanceManager.getCurrentReactContext().getNativeModule(DeviceInfoModule.class)).emitUpdateDimensionsEvent();
    }
  }
  
  private class CustomGlobalLayoutListener
    implements ViewTreeObserver.OnGlobalLayoutListener
  {
    private int mDeviceRotation = 0;
    private int mKeyboardHeight = 0;
    private final int mMinKeyboardHeightDetected;
    private DisplayMetrics mScreenMetrics = new DisplayMetrics();
    private final Rect mVisibleViewArea;
    private DisplayMetrics mWindowMetrics = new DisplayMetrics();
    
    CustomGlobalLayoutListener()
    {
      DisplayMetricsHolder.initDisplayMetricsIfNotInitialized(getContext().getApplicationContext());
      mVisibleViewArea = new Rect();
      mMinKeyboardHeightDetected = ((int)PixelUtil.toPixelFromDIP(60.0F));
    }
    
    private boolean areMetricsEqual(DisplayMetrics paramDisplayMetrics1, DisplayMetrics paramDisplayMetrics2)
    {
      if (Build.VERSION.SDK_INT >= 17) {
        return paramDisplayMetrics1.equals(paramDisplayMetrics2);
      }
      return (widthPixels == widthPixels) && (heightPixels == heightPixels) && (density == density) && (densityDpi == densityDpi) && (scaledDensity == scaledDensity) && (xdpi == xdpi) && (ydpi == ydpi);
    }
    
    private void checkForDeviceDimensionsChanges()
    {
      Object localObject = DisplayMetricsHolder.getWindowDisplayMetrics();
      int i = heightPixels;
      int j = widthPixels;
      DisplayMetricsHolder.initDisplayMetrics(getContext());
      if ((!areMetricsEqual(mWindowMetrics, DisplayMetricsHolder.getWindowDisplayMetrics())) || (!areMetricsEqual(mScreenMetrics, DisplayMetricsHolder.getScreenDisplayMetrics())))
      {
        mWindowMetrics.setTo(DisplayMetricsHolder.getWindowDisplayMetrics());
        mScreenMetrics.setTo(DisplayMetricsHolder.getScreenDisplayMetrics());
        emitUpdateDimensionsEvent();
        if ((mWindowChangeListener != null) && ((j != getWindowDisplayMetricswidthPixels) || (i != getWindowDisplayMetricsheightPixels)) && (j != getWindowDisplayMetricsheightPixels))
        {
          if (i == getWindowDisplayMetricswidthPixels) {
            return;
          }
          if (j == getWindowDisplayMetricswidthPixels) {
            return;
          }
          if ((TextUtils.equals(Build.MODEL, "EML-AL00")) && (Build.VERSION.SDK_INT == 27) && (Math.abs(j - getWindowDisplayMetricswidthPixels) <= 40)) {
            return;
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("test:");
          ((StringBuilder)localObject).append(j);
          ((StringBuilder)localObject).append(" ");
          ((StringBuilder)localObject).append(getWindowDisplayMetricsheightPixels);
          ((StringBuilder)localObject).append("  ");
          ((StringBuilder)localObject).append(i);
          ((StringBuilder)localObject).append("  ");
          ((StringBuilder)localObject).append(getWindowDisplayMetricswidthPixels);
          Log.e("kris", ((StringBuilder)localObject).toString());
          if (Math.abs(getWindowDisplayMetricsheightPixels - i) < 80) {
            mWindowChangeListener.onWindowChange(getWindowDisplayMetricswidthPixels, getWindowDisplayMetricsheightPixels);
          }
        }
      }
    }
    
    private void checkForDeviceOrientationChanges()
    {
      int i = ((WindowManager)getContext().getSystemService("window")).getDefaultDisplay().getRotation();
      if (mDeviceRotation == i) {
        return;
      }
      mDeviceRotation = i;
      emitOrientationChanged(i);
    }
    
    private void checkForKeyboardEvents()
    {
      getRootView().getWindowVisibleDisplayFrame(mVisibleViewArea);
      int i = getWindowDisplayMetricsheightPixels - mVisibleViewArea.bottom;
      if ((mKeyboardHeight != i) && (i > mMinKeyboardHeightDetected))
      {
        mKeyboardHeight = i;
        WritableMap localWritableMap1 = Arguments.createMap();
        WritableMap localWritableMap2 = Arguments.createMap();
        localWritableMap2.putDouble("screenY", PixelUtil.toDIPFromPixel(mVisibleViewArea.bottom));
        localWritableMap2.putDouble("screenX", PixelUtil.toDIPFromPixel(mVisibleViewArea.left));
        localWritableMap2.putDouble("width", PixelUtil.toDIPFromPixel(mVisibleViewArea.width()));
        localWritableMap2.putDouble("height", PixelUtil.toDIPFromPixel(mKeyboardHeight));
        localWritableMap1.putMap("endCoordinates", localWritableMap2);
        sendEvent("keyboardDidShow", localWritableMap1);
        return;
      }
      if ((mKeyboardHeight != 0) && (i <= mMinKeyboardHeightDetected))
      {
        mKeyboardHeight = 0;
        sendEvent("keyboardDidHide", null);
      }
    }
    
    private void emitOrientationChanged(int paramInt)
    {
      boolean bool = true;
      String str;
      double d;
      switch (paramInt)
      {
      default: 
        return;
      case 3: 
        str = "landscape-secondary";
        d = 90.0D;
        break;
      case 2: 
        str = "portrait-secondary";
        d = 180.0D;
        bool = false;
        break;
      case 1: 
        str = "landscape-primary";
        d = -90.0D;
        break;
      case 0: 
        str = "portrait-primary";
        d = 0.0D;
        bool = false;
      }
      WritableMap localWritableMap = Arguments.createMap();
      localWritableMap.putString("name", str);
      localWritableMap.putDouble("rotationDegrees", d);
      localWritableMap.putBoolean("isLandscape", bool);
      sendEvent("namedOrientationDidChange", localWritableMap);
    }
    
    private void emitUpdateDimensionsEvent()
    {
      if (mReactInstanceManager == null) {
        return;
      }
      ((DeviceInfoModule)mReactInstanceManager.getCurrentReactContext().getNativeModule(DeviceInfoModule.class)).emitUpdateDimensionsEvent();
    }
    
    public void onGlobalLayout()
    {
      if ((mReactInstanceManager != null) && (mIsAttachedToInstance))
      {
        if (mReactInstanceManager.getCurrentReactContext() == null) {
          return;
        }
        checkForKeyboardEvents();
        checkForDeviceOrientationChanges();
        checkForDeviceDimensionsChanges();
      }
    }
  }
  
  public static abstract interface MtaCallback
  {
    public abstract void setExposureMta(ReadableMap paramReadableMap, String paramString);
  }
  
  public static abstract interface ReactRootViewEventListener
  {
    public abstract void onAttachedToReactInstance(ReactRootView paramReactRootView);
  }
  
  public static abstract interface WindowChangeListener
  {
    public abstract void onWindowChange(int paramInt1, int paramInt2);
  }
}
