package com.facebook.react;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.jstasks.HeadlessJsTaskConfig;
import com.facebook.react.jstasks.HeadlessJsTaskContext;
import com.facebook.react.jstasks.HeadlessJsTaskEventListener;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import javax.annotation.Nullable;

public abstract class HeadlessJsTaskService
  extends Service
  implements HeadlessJsTaskEventListener
{
  @Nullable
  private static PowerManager.WakeLock sWakeLock;
  private final Set<Integer> mActiveTasks = new CopyOnWriteArraySet();
  
  public HeadlessJsTaskService() {}
  
  public static void acquireWakeLockNow(Context paramContext)
  {
    PowerManager.WakeLock localWakeLock = sWakeLock;
    if ((localWakeLock == null) || (!localWakeLock.isHeld()))
    {
      sWakeLock = ((PowerManager)Assertions.assertNotNull((PowerManager)paramContext.getSystemService("power"))).newWakeLock(1, HeadlessJsTaskService.class.getSimpleName());
      sWakeLock.setReferenceCounted(false);
      sWakeLock.acquire();
    }
  }
  
  private void invokeStartTask(final ReactContext paramReactContext, final HeadlessJsTaskConfig paramHeadlessJsTaskConfig)
  {
    paramReactContext = HeadlessJsTaskContext.getInstance(paramReactContext);
    paramReactContext.addTaskEventListener(this);
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        int i = paramReactContext.startTask(paramHeadlessJsTaskConfig);
        mActiveTasks.add(Integer.valueOf(i));
      }
    });
  }
  
  protected ReactNativeHost getReactNativeHost()
  {
    return ((ReactApplication)getApplication()).getReactNativeHost();
  }
  
  protected HeadlessJsTaskConfig getTaskConfig(Intent paramIntent)
  {
    return null;
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (getReactNativeHost().hasInstance())
    {
      localObject = getReactNativeHost().getReactInstanceManager().getCurrentReactContext();
      if (localObject != null) {
        HeadlessJsTaskContext.getInstance((ReactContext)localObject).removeTaskEventListener(this);
      }
    }
    Object localObject = sWakeLock;
    if (localObject != null) {
      ((PowerManager.WakeLock)localObject).release();
    }
  }
  
  public void onHeadlessJsTaskFinish(int paramInt)
  {
    mActiveTasks.remove(Integer.valueOf(paramInt));
    if (mActiveTasks.size() == 0) {
      stopSelf();
    }
  }
  
  public void onHeadlessJsTaskStart(int paramInt) {}
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    paramIntent = getTaskConfig(paramIntent);
    if (paramIntent != null)
    {
      startTask(paramIntent);
      return 3;
    }
    return 2;
  }
  
  protected void startTask(final HeadlessJsTaskConfig paramHeadlessJsTaskConfig)
  {
    UiThreadUtil.assertOnUiThread();
    acquireWakeLockNow(this);
    final ReactInstanceManager localReactInstanceManager = getReactNativeHost().getReactInstanceManager();
    ReactContext localReactContext = localReactInstanceManager.getCurrentReactContext();
    if (localReactContext == null)
    {
      localReactInstanceManager.addReactInstanceEventListener(new ReactInstanceManager.ReactInstanceEventListener()
      {
        public void onReactContextInitialized(ReactContext paramAnonymousReactContext)
        {
          HeadlessJsTaskService.this.invokeStartTask(paramAnonymousReactContext, paramHeadlessJsTaskConfig);
          localReactInstanceManager.removeReactInstanceEventListener(this);
        }
      });
      if (!localReactInstanceManager.hasStartedCreatingInitialContext()) {
        localReactInstanceManager.createReactContextInBackground();
      }
    }
    else
    {
      invokeStartTask(localReactContext, paramHeadlessJsTaskConfig);
    }
  }
}
