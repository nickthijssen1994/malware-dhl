package com.facebook.react.fabric.mounting;

import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewParent;
import androidx.annotation.Nullable;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.SoftAssertions;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.fabric.nativecode.EventEmitterWrapper;
import com.facebook.react.uimanager.IllegalViewOperationException;
import com.facebook.react.uimanager.ReactStylesDiffMap;
import com.facebook.react.uimanager.RootView;
import com.facebook.react.uimanager.RootViewManager;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.uimanager.ViewManagerRegistry;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.yoga.YogaMeasureMode;
import java.util.concurrent.ConcurrentHashMap;

public class MountingManager
{
  private final RootViewManager mRootViewManager = new RootViewManager();
  private final ConcurrentHashMap<Integer, ViewState> mTagToViewState = new ConcurrentHashMap();
  private final ViewManagerRegistry mViewManagerRegistry;
  private final ContextBasedViewPool mViewPool;
  
  public MountingManager(ViewManagerRegistry paramViewManagerRegistry)
  {
    mViewManagerRegistry = paramViewManagerRegistry;
    mViewPool = new ContextBasedViewPool(paramViewManagerRegistry);
  }
  
  private void dropView(View paramView)
  {
    UiThreadUtil.assertOnUiThread();
    int j = paramView.getId();
    Object localObject2 = getViewState(j);
    ViewManager localViewManager = mViewManager;
    if ((!mIsRoot) && (localViewManager != null)) {
      localViewManager.onDropViewInstance(paramView);
    }
    if (((paramView instanceof ViewGroup)) && ((localViewManager instanceof ViewGroupManager)))
    {
      localObject1 = (ViewGroup)paramView;
      localObject2 = getViewGroupManager((ViewState)localObject2);
      int i = ((ViewGroupManager)localObject2).getChildCount((ViewGroup)localObject1) - 1;
      while (i >= 0)
      {
        View localView = ((ViewGroupManager)localObject2).getChildAt((ViewGroup)localObject1, i);
        if (mTagToViewState.get(Integer.valueOf(localView.getId())) != null) {
          dropView(localView);
        }
        ((ViewGroupManager)localObject2).removeViewAt((ViewGroup)localObject1, i);
        i -= 1;
      }
    }
    mTagToViewState.remove(Integer.valueOf(j));
    Object localObject1 = paramView.getContext();
    mViewPool.returnToPool((ThemedReactContext)localObject1, ((ViewManager)Assertions.assertNotNull(localViewManager)).getName(), paramView);
  }
  
  private static ViewGroupManager getViewGroupManager(ViewState paramViewState)
  {
    if (mViewManager != null) {
      return (ViewGroupManager)mViewManager;
    }
    throw new IllegalStateException("Unable to find ViewManager");
  }
  
  private ViewState getViewState(int paramInt)
  {
    Object localObject = (ViewState)mTagToViewState.get(Integer.valueOf(paramInt));
    if (localObject != null) {
      return localObject;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unable to find viewState for tag ");
    ((StringBuilder)localObject).append(paramInt);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public void addRootView(int paramInt, SizeMonitoringFrameLayout paramSizeMonitoringFrameLayout)
  {
    if (paramSizeMonitoringFrameLayout.getId() == -1)
    {
      mTagToViewState.put(Integer.valueOf(paramInt), new ViewState(paramInt, paramSizeMonitoringFrameLayout, mRootViewManager, true, null));
      paramSizeMonitoringFrameLayout.setId(paramInt);
      return;
    }
    throw new IllegalViewOperationException("Trying to add a root view with an explicit id already set. React Native uses the id field to track react tags and will overwrite this field. If that is fine, explicitly overwrite the id field to View.NO_ID before calling addRootView.");
  }
  
  public void addViewAt(int paramInt1, int paramInt2, int paramInt3)
  {
    UiThreadUtil.assertOnUiThread();
    Object localObject = getViewState(paramInt1);
    ViewGroup localViewGroup = (ViewGroup)mView;
    View localView = getViewStatemView;
    if (localView != null)
    {
      getViewGroupManager((ViewState)localObject).addView(localViewGroup, localView, paramInt3);
      return;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unable to find view for tag ");
    ((StringBuilder)localObject).append(paramInt2);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public void createView(ThemedReactContext paramThemedReactContext, String paramString, int paramInt, boolean paramBoolean)
  {
    
    if (!paramBoolean)
    {
      ViewManager localViewManager = mViewManagerRegistry.loadClass(paramString);
      paramString = mViewPool.getOrCreateView(paramString, paramThemedReactContext);
      paramThemedReactContext = paramString;
      paramString.setId(paramInt);
      paramString = localViewManager;
    }
    else
    {
      paramThemedReactContext = null;
      paramString = null;
    }
    mTagToViewState.put(Integer.valueOf(paramInt), new ViewState(paramInt, paramThemedReactContext, paramString, null));
  }
  
  public void deleteView(int paramInt)
  {
    UiThreadUtil.assertOnUiThread();
    View localView = getViewStatemView;
    if (localView != null)
    {
      dropView(localView);
      return;
    }
    mTagToViewState.remove(Integer.valueOf(paramInt));
  }
  
  public EventEmitterWrapper getEventEmitter(int paramInt)
  {
    ViewState localViewState = (ViewState)mTagToViewState.get(Integer.valueOf(paramInt));
    if (localViewState == null) {
      return null;
    }
    return mEventEmitter;
  }
  
  public long measure(ReactContext paramReactContext, String paramString, ReadableNativeMap paramReadableNativeMap1, ReadableNativeMap paramReadableNativeMap2, float paramFloat1, YogaMeasureMode paramYogaMeasureMode1, float paramFloat2, YogaMeasureMode paramYogaMeasureMode2)
  {
    return mViewManagerRegistry.loadClass(paramString).measure(paramReactContext, paramReadableNativeMap1, paramReadableNativeMap2, paramFloat1, paramYogaMeasureMode1, paramFloat2, paramYogaMeasureMode2);
  }
  
  public void preallocateView(ThemedReactContext paramThemedReactContext, String paramString)
  {
    mViewPool.createView(paramThemedReactContext, paramString);
  }
  
  public void receiveCommand(int paramInt1, int paramInt2, ReadableArray paramReadableArray)
  {
    ViewState localViewState = getViewState(paramInt1);
    if (mViewManager != null)
    {
      if (mView != null)
      {
        mViewManager.receiveCommand(mView, paramInt2, paramReadableArray);
        return;
      }
      paramReadableArray = new StringBuilder();
      paramReadableArray.append("Unable to find viewState view for tag ");
      paramReadableArray.append(paramInt1);
      throw new IllegalStateException(paramReadableArray.toString());
    }
    paramReadableArray = new StringBuilder();
    paramReadableArray.append("Unable to find viewState manager for tag ");
    paramReadableArray.append(paramInt1);
    throw new IllegalStateException(paramReadableArray.toString());
  }
  
  public void removeRootView(int paramInt)
  {
    UiThreadUtil.assertOnUiThread();
    ViewState localViewState = (ViewState)mTagToViewState.get(Integer.valueOf(paramInt));
    if ((localViewState == null) || (!mIsRoot))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("View with tag ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" is not registered as a root view");
      SoftAssertions.assertUnreachable(localStringBuilder.toString());
    }
    if (mView != null) {
      dropView(mView);
    }
  }
  
  public void removeViewAt(int paramInt1, int paramInt2)
  {
    UiThreadUtil.assertOnUiThread();
    Object localObject = getViewState(paramInt1);
    ViewGroup localViewGroup = (ViewGroup)mView;
    if (localViewGroup != null)
    {
      getViewGroupManager((ViewState)localObject).removeViewAt(localViewGroup, paramInt2);
      return;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unable to find view for tag ");
    ((StringBuilder)localObject).append(paramInt1);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public void updateEventEmitter(int paramInt, EventEmitterWrapper paramEventEmitterWrapper)
  {
    UiThreadUtil.assertOnUiThread();
    getViewStatemEventEmitter = paramEventEmitterWrapper;
  }
  
  public void updateLayout(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    UiThreadUtil.assertOnUiThread();
    Object localObject = getViewState(paramInt1);
    if (mIsRoot) {
      return;
    }
    localObject = mView;
    if (localObject != null)
    {
      ((View)localObject).measure(View.MeasureSpec.makeMeasureSpec(paramInt4, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt5, 1073741824));
      ViewParent localViewParent = ((View)localObject).getParent();
      if ((localViewParent instanceof RootView)) {
        localViewParent.requestLayout();
      }
      ((View)localObject).layout(paramInt2, paramInt3, paramInt4 + paramInt2, paramInt5 + paramInt3);
      return;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unable to find View for tag: ");
    ((StringBuilder)localObject).append(paramInt1);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public void updateLocalData(int paramInt, ReadableMap paramReadableMap)
  {
    UiThreadUtil.assertOnUiThread();
    ViewState localViewState = getViewState(paramInt);
    if (mCurrentProps != null)
    {
      if ((mCurrentLocalData != null) && (paramReadableMap.hasKey("hash")) && (mCurrentLocalData.getDouble("hash") == paramReadableMap.getDouble("hash")) && (mCurrentLocalData.toString().equals(paramReadableMap.toString()))) {
        return;
      }
      mCurrentLocalData = paramReadableMap;
      paramReadableMap = mViewManager;
      if (paramReadableMap != null)
      {
        Object localObject = paramReadableMap.updateLocalData(mView, mCurrentProps, new ReactStylesDiffMap(mCurrentLocalData));
        if (localObject != null) {
          paramReadableMap.updateExtraData(mView, localObject);
        }
      }
      else
      {
        paramReadableMap = new StringBuilder();
        paramReadableMap.append("Unable to find ViewManager for tag: ");
        paramReadableMap.append(paramInt);
        throw new IllegalStateException(paramReadableMap.toString());
      }
    }
    else
    {
      paramReadableMap = new StringBuilder();
      paramReadableMap.append("Can not update local data to view without props: ");
      paramReadableMap.append(paramInt);
      throw new IllegalStateException(paramReadableMap.toString());
    }
  }
  
  public void updateProps(int paramInt, ReadableMap paramReadableMap)
  {
    if (paramReadableMap == null) {
      return;
    }
    UiThreadUtil.assertOnUiThread();
    ViewState localViewState = getViewState(paramInt);
    mCurrentProps = new ReactStylesDiffMap(paramReadableMap);
    paramReadableMap = mView;
    if (paramReadableMap != null)
    {
      ((ViewManager)Assertions.assertNotNull(mViewManager)).updateProperties(paramReadableMap, mCurrentProps);
      return;
    }
    paramReadableMap = new StringBuilder();
    paramReadableMap.append("Unable to find view for tag ");
    paramReadableMap.append(paramInt);
    throw new IllegalStateException(paramReadableMap.toString());
  }
  
  private static class ViewState
  {
    public ReadableMap mCurrentLocalData;
    public ReactStylesDiffMap mCurrentProps;
    public EventEmitterWrapper mEventEmitter;
    final boolean mIsRoot;
    final int mReactTag;
    @Nullable
    final View mView;
    @Nullable
    final ViewManager mViewManager;
    
    private ViewState(int paramInt, View paramView, ViewManager paramViewManager)
    {
      this(paramInt, paramView, paramViewManager, false);
    }
    
    private ViewState(int paramInt, View paramView, ViewManager paramViewManager, boolean paramBoolean)
    {
      mReactTag = paramInt;
      mView = paramView;
      mIsRoot = paramBoolean;
      mViewManager = paramViewManager;
    }
  }
}
