package com.facebook.react.fabric;

import android.annotation.SuppressLint;
import android.os.SystemClock;
import android.view.View;
import androidx.annotation.GuardedBy;
import com.facebook.common.logging.FLog;
import com.facebook.infer.annotation.Assertions;
import com.facebook.infer.annotation.ThreadConfined;
import com.facebook.react.bridge.GuardedRunnable;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.NativeMap;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.UIManager;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.fabric.mounting.LayoutMetricsConversions;
import com.facebook.react.fabric.mounting.MountingManager;
import com.facebook.react.fabric.mounting.mountitems.BatchMountItem;
import com.facebook.react.fabric.mounting.mountitems.CreateMountItem;
import com.facebook.react.fabric.mounting.mountitems.DeleteMountItem;
import com.facebook.react.fabric.mounting.mountitems.DispatchCommandMountItem;
import com.facebook.react.fabric.mounting.mountitems.InsertMountItem;
import com.facebook.react.fabric.mounting.mountitems.MountItem;
import com.facebook.react.fabric.mounting.mountitems.PreAllocateViewMountItem;
import com.facebook.react.fabric.mounting.mountitems.RemoveMountItem;
import com.facebook.react.fabric.mounting.mountitems.UpdateEventEmitterMountItem;
import com.facebook.react.fabric.mounting.mountitems.UpdateLayoutMountItem;
import com.facebook.react.fabric.mounting.mountitems.UpdateLocalDataMountItem;
import com.facebook.react.fabric.mounting.mountitems.UpdatePropsMountItem;
import com.facebook.react.fabric.nativecode.Binding;
import com.facebook.react.fabric.nativecode.EventBeatManager;
import com.facebook.react.fabric.nativecode.EventEmitterWrapper;
import com.facebook.react.fabric.nativecode.FabricSoLoader;
import com.facebook.react.modules.core.ReactChoreographer;
import com.facebook.react.modules.core.ReactChoreographer.CallbackType;
import com.facebook.react.uimanager.ReactRootViewTagGenerator;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.ViewManagerPropertyUpdater;
import com.facebook.react.uimanager.ViewManagerRegistry;
import com.facebook.react.uimanager.common.MeasureSpecProvider;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.react.uimanager.events.EventDispatcher;
import com.facebook.yoga.YogaMeasureMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@SuppressLint({"MissingNativeLoadLibrary"})
public class FabricUIManager
  implements LifecycleEventListener, UIManager
{
  private static final String logTag = "FabricUIManager";
  private static final Map<String, String> sComponentNames = new HashMap();
  private long mBatchedExecutionTime = 0L;
  private Binding mBinding;
  private long mCommitStartTime = 0L;
  @ThreadConfined("UI")
  private final DispatchUIFrameCallback mDispatchUIFrameCallback;
  private long mDispatchViewUpdatesTime = 0L;
  private final EventBeatManager mEventBeatManager;
  private final EventDispatcher mEventDispatcher;
  private long mFinishTransactionTime = 0L;
  @ThreadConfined("UI")
  private boolean mIsMountingEnabled = true;
  private long mLayoutTime = 0L;
  @GuardedBy("mMountItemsLock")
  private List<MountItem> mMountItems = new ArrayList();
  private final Object mMountItemsLock = new Object();
  private final MountingManager mMountingManager;
  private long mNonBatchedExecutionTime = 0L;
  @GuardedBy("mPreMountItemsLock")
  private List<MountItem> mPreMountItems = new ArrayList();
  private final Object mPreMountItemsLock = new Object();
  private final ReactApplicationContext mReactApplicationContext;
  private final ConcurrentHashMap<Integer, ThemedReactContext> mReactContextForRootTag = new ConcurrentHashMap();
  private long mRunStartTime = 0L;
  
  static
  {
    FabricSoLoader.staticInit();
    sComponentNames.put("View", "RCTView");
    sComponentNames.put("Image", "RCTImageView");
    sComponentNames.put("ScrollView", "RCTScrollView");
    sComponentNames.put("ReactPerformanceLoggerFlag", "ReactPerformanceLoggerFlag");
    sComponentNames.put("Paragraph", "RCTText");
    sComponentNames.put("Text", "RCText");
    sComponentNames.put("RawText", "RCTRawText");
    sComponentNames.put("ActivityIndicatorView", "AndroidProgressBar");
    sComponentNames.put("ShimmeringView", "RKShimmeringView");
    sComponentNames.put("TemplateView", "RCTTemplateView");
  }
  
  public FabricUIManager(ReactApplicationContext paramReactApplicationContext, ViewManagerRegistry paramViewManagerRegistry, EventDispatcher paramEventDispatcher, EventBeatManager paramEventBeatManager)
  {
    mDispatchUIFrameCallback = new DispatchUIFrameCallback(paramReactApplicationContext, null);
    mReactApplicationContext = paramReactApplicationContext;
    mMountingManager = new MountingManager(paramViewManagerRegistry);
    mEventDispatcher = paramEventDispatcher;
    mEventBeatManager = paramEventBeatManager;
    mReactApplicationContext.addLifecycleEventListener(this);
  }
  
  private MountItem createBatchMountItem(MountItem[] paramArrayOfMountItem, int paramInt)
  {
    return new BatchMountItem(paramArrayOfMountItem, paramInt);
  }
  
  private MountItem createMountItem(String paramString, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Object localObject = (String)sComponentNames.get(paramString);
    if (localObject != null)
    {
      paramString = (ThemedReactContext)mReactContextForRootTag.get(Integer.valueOf(paramInt1));
      if (paramString != null) {
        return new CreateMountItem(paramString, (String)localObject, paramInt2, paramBoolean);
      }
      paramString = new StringBuilder();
      paramString.append("Unable to find ReactContext for root: ");
      paramString.append(paramInt1);
      throw new IllegalArgumentException(paramString.toString());
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unable to find component with name ");
    ((StringBuilder)localObject).append(paramString);
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  private MountItem deleteMountItem(int paramInt)
  {
    return new DeleteMountItem(paramInt);
  }
  
  /* Error */
  private void flushMountItems()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 137	com/facebook/react/fabric/FabricUIManager:mIsMountingEnabled	Z
    //   4: ifne +12 -> 16
    //   7: ldc -1
    //   9: ldc_w 257
    //   12: invokestatic 263	com/facebook/common/logging/FLog:warn	(Ljava/lang/String;Ljava/lang/String;)V
    //   15: return
    //   16: aload_0
    //   17: getfield 128	com/facebook/react/fabric/FabricUIManager:mPreMountItemsLock	Ljava/lang/Object;
    //   20: astore 6
    //   22: aload 6
    //   24: monitorenter
    //   25: aload_0
    //   26: getfield 135	com/facebook/react/fabric/FabricUIManager:mPreMountItems	Ljava/util/List;
    //   29: astore 7
    //   31: aload_0
    //   32: new 130	java/util/ArrayList
    //   35: dup
    //   36: invokespecial 131	java/util/ArrayList:<init>	()V
    //   39: putfield 135	com/facebook/react/fabric/FabricUIManager:mPreMountItems	Ljava/util/List;
    //   42: aload 6
    //   44: monitorexit
    //   45: invokestatic 269	android/os/SystemClock:uptimeMillis	()J
    //   48: lstore_1
    //   49: aload_0
    //   50: lload_1
    //   51: putfield 139	com/facebook/react/fabric/FabricUIManager:mRunStartTime	J
    //   54: aload_0
    //   55: getfield 126	com/facebook/react/fabric/FabricUIManager:mMountItemsLock	Ljava/lang/Object;
    //   58: astore 8
    //   60: aload 8
    //   62: monitorenter
    //   63: aload_0
    //   64: getfield 133	com/facebook/react/fabric/FabricUIManager:mMountItems	Ljava/util/List;
    //   67: astore 6
    //   69: aload_0
    //   70: new 130	java/util/ArrayList
    //   73: dup
    //   74: invokespecial 131	java/util/ArrayList:<init>	()V
    //   77: putfield 133	com/facebook/react/fabric/FabricUIManager:mMountItems	Ljava/util/List;
    //   80: aload 8
    //   82: monitorexit
    //   83: invokestatic 269	android/os/SystemClock:uptimeMillis	()J
    //   86: lstore_1
    //   87: new 221	java/lang/StringBuilder
    //   90: dup
    //   91: invokespecial 222	java/lang/StringBuilder:<init>	()V
    //   94: astore 8
    //   96: aload 8
    //   98: ldc_w 271
    //   101: invokevirtual 228	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   104: pop
    //   105: aload 8
    //   107: aload 7
    //   109: invokeinterface 277 1 0
    //   114: invokevirtual 231	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   117: pop
    //   118: aload 8
    //   120: ldc_w 279
    //   123: invokevirtual 228	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   126: pop
    //   127: lconst_0
    //   128: aload 8
    //   130: invokevirtual 237	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   133: invokestatic 285	com/facebook/systrace/Systrace:beginSection	(JLjava/lang/String;)V
    //   136: aload 7
    //   138: invokeinterface 289 1 0
    //   143: astore 7
    //   145: aload 7
    //   147: invokeinterface 295 1 0
    //   152: istore 5
    //   154: iload 5
    //   156: ifeq +37 -> 193
    //   159: aload 7
    //   161: invokeinterface 299 1 0
    //   166: astore 8
    //   168: aload 8
    //   170: checkcast 301	com/facebook/react/fabric/mounting/mountitems/MountItem
    //   173: astore 8
    //   175: aload_0
    //   176: getfield 165	com/facebook/react/fabric/FabricUIManager:mMountingManager	Lcom/facebook/react/fabric/mounting/MountingManager;
    //   179: astore 9
    //   181: aload 8
    //   183: aload 9
    //   185: invokeinterface 305 2 0
    //   190: goto -45 -> 145
    //   193: invokestatic 269	android/os/SystemClock:uptimeMillis	()J
    //   196: lstore_3
    //   197: aload_0
    //   198: lload_3
    //   199: lload_1
    //   200: lsub
    //   201: putfield 143	com/facebook/react/fabric/FabricUIManager:mNonBatchedExecutionTime	J
    //   204: lconst_0
    //   205: invokestatic 309	com/facebook/systrace/Systrace:endSection	(J)V
    //   208: new 221	java/lang/StringBuilder
    //   211: dup
    //   212: invokespecial 222	java/lang/StringBuilder:<init>	()V
    //   215: astore 7
    //   217: aload 7
    //   219: ldc_w 311
    //   222: invokevirtual 228	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   225: pop
    //   226: aload 7
    //   228: aload 6
    //   230: invokeinterface 277 1 0
    //   235: invokevirtual 231	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   238: pop
    //   239: aload 7
    //   241: ldc_w 279
    //   244: invokevirtual 228	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   247: pop
    //   248: lconst_0
    //   249: aload 7
    //   251: invokevirtual 237	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   254: invokestatic 285	com/facebook/systrace/Systrace:beginSection	(JLjava/lang/String;)V
    //   257: invokestatic 269	android/os/SystemClock:uptimeMillis	()J
    //   260: lstore_1
    //   261: aload 6
    //   263: invokeinterface 289 1 0
    //   268: astore 6
    //   270: aload 6
    //   272: invokeinterface 295 1 0
    //   277: istore 5
    //   279: iload 5
    //   281: ifeq +37 -> 318
    //   284: aload 6
    //   286: invokeinterface 299 1 0
    //   291: astore 7
    //   293: aload 7
    //   295: checkcast 301	com/facebook/react/fabric/mounting/mountitems/MountItem
    //   298: astore 7
    //   300: aload_0
    //   301: getfield 165	com/facebook/react/fabric/FabricUIManager:mMountingManager	Lcom/facebook/react/fabric/mounting/MountingManager;
    //   304: astore 8
    //   306: aload 7
    //   308: aload 8
    //   310: invokeinterface 305 2 0
    //   315: goto -45 -> 270
    //   318: invokestatic 269	android/os/SystemClock:uptimeMillis	()J
    //   321: lstore_3
    //   322: aload_0
    //   323: lload_3
    //   324: lload_1
    //   325: lsub
    //   326: putfield 141	com/facebook/react/fabric/FabricUIManager:mBatchedExecutionTime	J
    //   329: lconst_0
    //   330: invokestatic 309	com/facebook/systrace/Systrace:endSection	(J)V
    //   333: return
    //   334: astore 6
    //   336: aload 8
    //   338: monitorexit
    //   339: aload 6
    //   341: athrow
    //   342: astore 7
    //   344: aload 6
    //   346: monitorexit
    //   347: aload 7
    //   349: athrow
    //   350: astore 6
    //   352: ldc -1
    //   354: ldc_w 313
    //   357: aload 6
    //   359: invokestatic 317	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   362: aload_0
    //   363: iconst_0
    //   364: putfield 137	com/facebook/react/fabric/FabricUIManager:mIsMountingEnabled	Z
    //   367: aload 6
    //   369: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	370	0	this	FabricUIManager
    //   48	277	1	l1	long
    //   196	128	3	l2	long
    //   152	128	5	bool	boolean
    //   20	265	6	localObject1	Object
    //   334	11	6	localThrowable1	Throwable
    //   350	18	6	localException	Exception
    //   29	278	7	localObject2	Object
    //   342	6	7	localThrowable2	Throwable
    //   58	279	8	localObject3	Object
    //   179	5	9	localMountingManager	MountingManager
    // Exception table:
    //   from	to	target	type
    //   63	83	334	java/lang/Throwable
    //   336	339	334	java/lang/Throwable
    //   25	45	342	java/lang/Throwable
    //   344	347	342	java/lang/Throwable
    //   45	49	350	java/lang/Exception
    //   83	87	350	java/lang/Exception
    //   87	145	350	java/lang/Exception
    //   145	154	350	java/lang/Exception
    //   159	168	350	java/lang/Exception
    //   181	190	350	java/lang/Exception
    //   193	197	350	java/lang/Exception
    //   204	208	350	java/lang/Exception
    //   208	270	350	java/lang/Exception
    //   270	279	350	java/lang/Exception
    //   284	293	350	java/lang/Exception
    //   306	315	350	java/lang/Exception
    //   318	322	350	java/lang/Exception
    //   329	333	350	java/lang/Exception
    //   339	342	350	java/lang/Exception
    //   347	350	350	java/lang/Exception
  }
  
  private MountItem insertMountItem(int paramInt1, int paramInt2, int paramInt3)
  {
    return new InsertMountItem(paramInt1, paramInt2, paramInt3);
  }
  
  private long measure(String paramString, ReadableNativeMap paramReadableNativeMap1, ReadableNativeMap paramReadableNativeMap2, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    MountingManager localMountingManager = mMountingManager;
    ReactApplicationContext localReactApplicationContext = mReactApplicationContext;
    float f2 = paramInt1;
    float f3 = paramInt2;
    float f1 = LayoutMetricsConversions.getYogaSize(f2, f3);
    YogaMeasureMode localYogaMeasureMode = LayoutMetricsConversions.getYogaMeasureMode(f2, f3);
    f2 = paramInt3;
    f3 = paramInt4;
    return localMountingManager.measure(localReactApplicationContext, paramString, paramReadableNativeMap1, paramReadableNativeMap2, f1, localYogaMeasureMode, LayoutMetricsConversions.getYogaSize(f2, f3), LayoutMetricsConversions.getYogaMeasureMode(f2, f3));
  }
  
  private void preallocateView(int paramInt, String paramString)
  {
    if (UiThreadUtil.isOnUiThread()) {
      return;
    }
    Object localObject = mPreMountItemsLock;
    try
    {
      ThemedReactContext localThemedReactContext = (ThemedReactContext)Assertions.assertNotNull(mReactContextForRootTag.get(Integer.valueOf(paramInt)));
      paramString = (String)sComponentNames.get(paramString);
      Assertions.assertNotNull(paramString);
      mPreMountItems.add(new PreAllocateViewMountItem(localThemedReactContext, paramInt, paramString));
      return;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  private MountItem removeMountItem(int paramInt1, int paramInt2, int paramInt3)
  {
    return new RemoveMountItem(paramInt1, paramInt2, paramInt3);
  }
  
  private void scheduleMountItems(MountItem paramMountItem, long paramLong1, long paramLong2, long paramLong3)
  {
    mCommitStartTime = paramLong1;
    mLayoutTime = paramLong2;
    mFinishTransactionTime = (SystemClock.uptimeMillis() - paramLong3);
    mDispatchViewUpdatesTime = SystemClock.uptimeMillis();
    Object localObject = mMountItemsLock;
    try
    {
      mMountItems.add(paramMountItem);
      if (UiThreadUtil.isOnUiThread())
      {
        flushMountItems();
        return;
      }
    }
    catch (Throwable paramMountItem)
    {
      throw paramMountItem;
    }
  }
  
  private MountItem updateEventEmitterMountItem(int paramInt, Object paramObject)
  {
    return new UpdateEventEmitterMountItem(paramInt, (EventEmitterWrapper)paramObject);
  }
  
  private MountItem updateLayoutMountItem(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    return new UpdateLayoutMountItem(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5);
  }
  
  private MountItem updateLocalDataMountItem(int paramInt, ReadableNativeMap paramReadableNativeMap)
  {
    return new UpdateLocalDataMountItem(paramInt, paramReadableNativeMap);
  }
  
  private MountItem updatePropsMountItem(int paramInt, ReadableNativeMap paramReadableNativeMap)
  {
    return new UpdatePropsMountItem(paramInt, paramReadableNativeMap);
  }
  
  public int addRootView(SizeMonitoringFrameLayout paramSizeMonitoringFrameLayout, WritableMap paramWritableMap, String paramString)
  {
    int i = ReactRootViewTagGenerator.getNextRootViewTag();
    ThemedReactContext localThemedReactContext = new ThemedReactContext(mReactApplicationContext, paramSizeMonitoringFrameLayout.getContext());
    mMountingManager.addRootView(i, paramSizeMonitoringFrameLayout);
    mReactContextForRootTag.put(Integer.valueOf(i), localThemedReactContext);
    mBinding.startSurface(i, (NativeMap)paramWritableMap);
    paramSizeMonitoringFrameLayout = (MeasureSpecProvider)paramSizeMonitoringFrameLayout;
    updateRootLayoutSpecs(i, paramSizeMonitoringFrameLayout.getWidthMeasureSpec(), paramSizeMonitoringFrameLayout.getHeightMeasureSpec());
    if (paramString != null) {
      mBinding.renderTemplateToSurface(i, paramString);
    }
    return i;
  }
  
  public void clearJSResponder() {}
  
  public void dispatchCommand(int paramInt1, int paramInt2, ReadableArray paramReadableArray)
  {
    Object localObject = mMountItemsLock;
    try
    {
      mMountItems.add(new DispatchCommandMountItem(paramInt1, paramInt2, paramReadableArray));
      return;
    }
    catch (Throwable paramReadableArray)
    {
      throw paramReadableArray;
    }
  }
  
  public Map getPerformanceCounters()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("CommitStartTime", Long.valueOf(mCommitStartTime));
    localHashMap.put("LayoutTime", Long.valueOf(mLayoutTime));
    localHashMap.put("DispatchViewUpdatesTime", Long.valueOf(mDispatchViewUpdatesTime));
    localHashMap.put("RunStartTime", Long.valueOf(mRunStartTime));
    localHashMap.put("BatchedExecutionTime", Long.valueOf(mBatchedExecutionTime));
    localHashMap.put("NonBatchedExecutionTime", Long.valueOf(mNonBatchedExecutionTime));
    localHashMap.put("FinishFabricTransactionTime", Long.valueOf(mFinishTransactionTime));
    return localHashMap;
  }
  
  public void initialize()
  {
    mEventDispatcher.registerEventEmitter(2, new FabricEventEmitter(this));
    mEventDispatcher.addBatchEventDispatchedListener(mEventBeatManager);
  }
  
  public void onCatalystInstanceDestroy()
  {
    mEventDispatcher.removeBatchEventDispatchedListener(mEventBeatManager);
    mEventDispatcher.unregisterEventEmitter(2);
    mBinding.unregister();
    ViewManagerPropertyUpdater.clear();
  }
  
  public void onHostDestroy() {}
  
  public void onHostPause()
  {
    ReactChoreographer.getInstance().removeFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, mDispatchUIFrameCallback);
  }
  
  public void onHostResume()
  {
    ReactChoreographer.getInstance().postFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, mDispatchUIFrameCallback);
  }
  
  public void onRequestEventBeat()
  {
    mEventDispatcher.dispatchAllEvents();
  }
  
  public void profileNextBatch() {}
  
  public void receiveEvent(int paramInt, String paramString, WritableMap paramWritableMap)
  {
    Object localObject = mMountingManager.getEventEmitter(paramInt);
    if (localObject == null)
    {
      paramWritableMap = logTag;
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Unable to invoke event: ");
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append(" for reactTag: ");
      ((StringBuilder)localObject).append(paramInt);
      FLog.d(paramWritableMap, ((StringBuilder)localObject).toString());
      return;
    }
    ((EventEmitterWrapper)localObject).invoke(paramString, paramWritableMap);
  }
  
  public void removeRootView(int paramInt)
  {
    mMountingManager.removeRootView(paramInt);
    mReactContextForRootTag.remove(Integer.valueOf(paramInt));
  }
  
  public void setBinding(Binding paramBinding)
  {
    mBinding = paramBinding;
  }
  
  public void setJSResponder(int paramInt, boolean paramBoolean) {}
  
  public void updateRootLayoutSpecs(final int paramInt1, final int paramInt2, final int paramInt3)
  {
    ReactApplicationContext localReactApplicationContext = mReactApplicationContext;
    localReactApplicationContext.runOnJSQueueThread(new GuardedRunnable(localReactApplicationContext)
    {
      public void runGuarded()
      {
        mBinding.setConstraints(paramInt1, LayoutMetricsConversions.getMinSize(paramInt2), LayoutMetricsConversions.getMaxSize(paramInt2), LayoutMetricsConversions.getMinSize(paramInt3), LayoutMetricsConversions.getMaxSize(paramInt3));
      }
    });
  }
  
  private class DispatchUIFrameCallback
    extends GuardedFrameCallback
  {
    private DispatchUIFrameCallback(ReactContext paramReactContext)
    {
      super();
    }
    
    public void doFrameGuarded(long paramLong)
    {
      if (!mIsMountingEnabled)
      {
        FLog.warn("ReactNative", "Not flushing pending UI operations because of previously thrown Exception");
        return;
      }
      FabricUIManager localFabricUIManager = FabricUIManager.this;
      try
      {
        localFabricUIManager.flushMountItems();
        ReactChoreographer.getInstance().postFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, mDispatchUIFrameCallback);
        return;
      }
      catch (Throwable localThrowable) {}catch (Exception localException)
      {
        FLog.i("ReactNative", "Exception thrown when executing UIFrameGuarded", localException);
        FabricUIManager.access$202(FabricUIManager.this, false);
        throw localException;
      }
      ReactChoreographer.getInstance().postFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, mDispatchUIFrameCallback);
      throw localException;
    }
  }
}
