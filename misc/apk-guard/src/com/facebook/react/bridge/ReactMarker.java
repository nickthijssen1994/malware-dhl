package com.facebook.react.bridge;

import com.facebook.proguard.annotations.DoNotStrip;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@DoNotStrip
public class ReactMarker
{
  private static final List<MarkerListener> sListeners = new ArrayList();
  
  public ReactMarker() {}
  
  public static void addListener(MarkerListener paramMarkerListener)
  {
    List localList = sListeners;
    try
    {
      if (!sListeners.contains(paramMarkerListener)) {
        sListeners.add(paramMarkerListener);
      }
      return;
    }
    catch (Throwable paramMarkerListener)
    {
      throw paramMarkerListener;
    }
  }
  
  public static void clearMarkerListeners()
  {
    List localList = sListeners;
    try
    {
      sListeners.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static void logMarker(ReactMarkerConstants paramReactMarkerConstants)
  {
    logMarker(paramReactMarkerConstants, null, 0);
  }
  
  public static void logMarker(ReactMarkerConstants paramReactMarkerConstants, int paramInt)
  {
    logMarker(paramReactMarkerConstants, null, paramInt);
  }
  
  public static void logMarker(ReactMarkerConstants paramReactMarkerConstants, String paramString)
  {
    logMarker(paramReactMarkerConstants, paramString, 0);
  }
  
  public static void logMarker(ReactMarkerConstants paramReactMarkerConstants, String paramString, int paramInt)
  {
    List localList = sListeners;
    try
    {
      Iterator localIterator = sListeners.iterator();
      while (localIterator.hasNext()) {
        ((MarkerListener)localIterator.next()).logMarker(paramReactMarkerConstants, paramString, paramInt);
      }
      return;
    }
    catch (Throwable paramReactMarkerConstants)
    {
      throw paramReactMarkerConstants;
    }
  }
  
  public static void logMarker(String paramString)
  {
    logMarker(paramString, null);
  }
  
  public static void logMarker(String paramString, int paramInt)
  {
    logMarker(paramString, null, paramInt);
  }
  
  public static void logMarker(String paramString1, String paramString2)
  {
    logMarker(paramString1, paramString2, 0);
  }
  
  public static void logMarker(String paramString1, String paramString2, int paramInt)
  {
    logMarker(ReactMarkerConstants.valueOf(paramString1), paramString2, paramInt);
  }
  
  public static void removeListener(MarkerListener paramMarkerListener)
  {
    List localList = sListeners;
    try
    {
      sListeners.remove(paramMarkerListener);
      return;
    }
    catch (Throwable paramMarkerListener)
    {
      throw paramMarkerListener;
    }
  }
  
  public static abstract interface MarkerListener
  {
    public abstract void logMarker(ReactMarkerConstants paramReactMarkerConstants, String paramString, int paramInt);
  }
}
