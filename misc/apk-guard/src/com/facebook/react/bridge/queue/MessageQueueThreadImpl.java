package com.facebook.react.bridge.queue;

import android.os.Handler;
import android.os.Looper;
import android.os.Process;
import android.os.SystemClock;
import android.util.Pair;
import com.facebook.common.logging.FLog;
import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.SoftAssertions;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.common.futures.SimpleSettableFuture;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

@DoNotStrip
public class MessageQueueThreadImpl
  implements MessageQueueThread
{
  private final String mAssertionErrorMessage;
  private final MessageQueueThreadHandler mHandler;
  private volatile boolean mIsFinished = false;
  private final Looper mLooper;
  private final String mName;
  private MessageQueueThreadPerfStats mPerfStats;
  
  private MessageQueueThreadImpl(String paramString, Looper paramLooper, QueueThreadExceptionHandler paramQueueThreadExceptionHandler)
  {
    this(paramString, paramLooper, paramQueueThreadExceptionHandler, null);
  }
  
  private MessageQueueThreadImpl(String paramString, Looper paramLooper, QueueThreadExceptionHandler paramQueueThreadExceptionHandler, MessageQueueThreadPerfStats paramMessageQueueThreadPerfStats)
  {
    mName = paramString;
    mLooper = paramLooper;
    mHandler = new MessageQueueThreadHandler(paramLooper, paramQueueThreadExceptionHandler);
    mPerfStats = paramMessageQueueThreadPerfStats;
    paramString = new StringBuilder();
    paramString.append("Expected to be called from the '");
    paramString.append(getName());
    paramString.append("' thread!");
    mAssertionErrorMessage = paramString.toString();
  }
  
  private static void assignToPerfStats(MessageQueueThreadPerfStats paramMessageQueueThreadPerfStats, long paramLong1, long paramLong2)
  {
    wallTime = paramLong1;
    cpuTime = paramLong2;
  }
  
  public static MessageQueueThreadImpl create(MessageQueueThreadSpec paramMessageQueueThreadSpec, QueueThreadExceptionHandler paramQueueThreadExceptionHandler)
  {
    switch (5.$SwitchMap$com$facebook$react$bridge$queue$MessageQueueThreadSpec$ThreadType[paramMessageQueueThreadSpec.getThreadType().ordinal()])
    {
    default: 
      paramQueueThreadExceptionHandler = new StringBuilder();
      paramQueueThreadExceptionHandler.append("Unknown thread type: ");
      paramQueueThreadExceptionHandler.append(paramMessageQueueThreadSpec.getThreadType());
      throw new RuntimeException(paramQueueThreadExceptionHandler.toString());
    case 2: 
      return startNewBackgroundThread(paramMessageQueueThreadSpec.getName(), paramMessageQueueThreadSpec.getStackSize(), paramQueueThreadExceptionHandler);
    }
    return createForMainThread(paramMessageQueueThreadSpec.getName(), paramQueueThreadExceptionHandler);
  }
  
  private static MessageQueueThreadImpl createForMainThread(String paramString, QueueThreadExceptionHandler paramQueueThreadExceptionHandler)
  {
    paramString = new MessageQueueThreadImpl(paramString, Looper.getMainLooper(), paramQueueThreadExceptionHandler);
    if (UiThreadUtil.isOnUiThread())
    {
      Process.setThreadPriority(-4);
      return paramString;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        Process.setThreadPriority(-4);
      }
    });
    return paramString;
  }
  
  private static MessageQueueThreadImpl startNewBackgroundThread(String paramString, long paramLong, QueueThreadExceptionHandler paramQueueThreadExceptionHandler)
  {
    Object localObject = new SimpleSettableFuture();
    Runnable local4 = new Runnable()
    {
      public void run()
      {
        Process.setThreadPriority(-4);
        Looper.prepare();
        MessageQueueThreadPerfStats localMessageQueueThreadPerfStats = new MessageQueueThreadPerfStats();
        MessageQueueThreadImpl.assignToPerfStats(localMessageQueueThreadPerfStats, SystemClock.uptimeMillis(), SystemClock.currentThreadTimeMillis());
        val$dataFuture.set(new Pair(Looper.myLooper(), localMessageQueueThreadPerfStats));
        Looper.loop();
      }
    };
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("mqt_");
    localStringBuilder.append(paramString);
    new Thread(null, local4, localStringBuilder.toString(), paramLong).start();
    localObject = (Pair)((SimpleSettableFuture)localObject).getOrThrow();
    return new MessageQueueThreadImpl(paramString, (Looper)first, paramQueueThreadExceptionHandler, (MessageQueueThreadPerfStats)second);
  }
  
  public void assertIsOnThread()
  {
    SoftAssertions.assertCondition(isOnThread(), mAssertionErrorMessage);
  }
  
  public void assertIsOnThread(String paramString)
  {
    boolean bool = isOnThread();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(mAssertionErrorMessage);
    localStringBuilder.append(" ");
    localStringBuilder.append(paramString);
    SoftAssertions.assertCondition(bool, localStringBuilder.toString());
  }
  
  public Future callOnQueue(final Callable paramCallable)
  {
    final SimpleSettableFuture localSimpleSettableFuture = new SimpleSettableFuture();
    runOnQueue(new Runnable()
    {
      public void run()
      {
        SimpleSettableFuture localSimpleSettableFuture = localSimpleSettableFuture;
        Callable localCallable = paramCallable;
        try
        {
          localSimpleSettableFuture.set(localCallable.call());
          return;
        }
        catch (Exception localException)
        {
          localSimpleSettableFuture.setException(localException);
        }
      }
    });
    return localSimpleSettableFuture;
  }
  
  public Looper getLooper()
  {
    return mLooper;
  }
  
  public String getName()
  {
    return mName;
  }
  
  public MessageQueueThreadPerfStats getPerfStats()
  {
    return mPerfStats;
  }
  
  public boolean isOnThread()
  {
    return mLooper.getThread() == Thread.currentThread();
  }
  
  public void quitSynchronous()
  {
    mIsFinished = true;
    mLooper.quit();
    if (mLooper.getThread() != Thread.currentThread()) {
      localObject = mLooper;
    }
    try
    {
      ((Looper)localObject).getThread().join();
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;) {}
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Got interrupted waiting to join thread ");
    ((StringBuilder)localObject).append(mName);
    throw new RuntimeException(((StringBuilder)localObject).toString());
    localObject = mHandler;
    if (localObject != null)
    {
      ((MessageQueueThreadHandler)localObject).destroy();
      return;
    }
  }
  
  public void resetPerfStats()
  {
    assignToPerfStats(mPerfStats, -1L, -1L);
    runOnQueue(new Runnable()
    {
      public void run()
      {
        long l1 = SystemClock.uptimeMillis();
        long l2 = SystemClock.currentThreadTimeMillis();
        MessageQueueThreadImpl.assignToPerfStats(mPerfStats, l1, l2);
      }
    });
  }
  
  public void runOnQueue(Runnable paramRunnable)
  {
    if (mIsFinished)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Tried to enqueue runnable on already finished thread: '");
      localStringBuilder.append(getName());
      localStringBuilder.append("... dropping Runnable.");
      FLog.warn("ReactNative", localStringBuilder.toString());
    }
    mHandler.post(paramRunnable);
  }
}
