package com.facebook.react.bridge;

import androidx.core.util.Pools.SimplePool;
import javax.annotation.Nullable;

public class DynamicFromMap
  implements Dynamic
{
  private static final ThreadLocal<Pools.SimplePool<DynamicFromMap>> sPool = new ThreadLocal()
  {
    protected Pools.SimplePool initialValue()
    {
      return new Pools.SimplePool(10);
    }
  };
  @Nullable
  private ReadableMap mMap;
  @Nullable
  private String mName;
  
  private DynamicFromMap() {}
  
  public static DynamicFromMap create(ReadableMap paramReadableMap, String paramString)
  {
    DynamicFromMap localDynamicFromMap2 = (DynamicFromMap)((Pools.SimplePool)sPool.get()).acquire();
    DynamicFromMap localDynamicFromMap1 = localDynamicFromMap2;
    if (localDynamicFromMap2 == null) {
      localDynamicFromMap1 = new DynamicFromMap();
    }
    mMap = paramReadableMap;
    mName = paramString;
    return localDynamicFromMap1;
  }
  
  public ReadableArray asArray()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getArray(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public boolean asBoolean()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getBoolean(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public double asDouble()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getDouble(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public int asInt()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getInt(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public ReadableMap asMap()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getMap(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public String asString()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getString(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public ReadableType getType()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.getType(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public boolean isNull()
  {
    ReadableMap localReadableMap = mMap;
    if (localReadableMap != null)
    {
      String str = mName;
      if (str != null) {
        return localReadableMap.isNull(str);
      }
    }
    throw new IllegalStateException("This dynamic value has been recycled");
  }
  
  public void recycle()
  {
    mMap = null;
    mName = null;
    Object localObject = sPool;
    try
    {
      localObject = ((ThreadLocal)localObject).get();
      localObject = (Pools.SimplePool)localObject;
      ((Pools.SimplePool)localObject).release(this);
      return;
    }
    catch (Exception localException) {}
  }
}
