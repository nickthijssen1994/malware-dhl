package com.facebook.react.bridge;

import com.facebook.debug.holder.Printer;
import com.facebook.debug.holder.PrinterHolder;
import com.facebook.debug.tags.ReactDebugOverlayTags;
import com.facebook.infer.annotation.Assertions;
import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.module.model.ReactModuleInfo;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import com.facebook.systrace.SystraceMessage;
import com.facebook.systrace.SystraceMessage.Builder;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import javax.inject.Provider;

@DoNotStrip
public class ModuleHolder
{
  private static final AtomicInteger sInstanceKeyCounter = new AtomicInteger(1);
  @GuardedBy("this")
  private boolean mInitializable;
  private final int mInstanceKey = sInstanceKeyCounter.getAndIncrement();
  @GuardedBy("this")
  private boolean mIsCreating;
  @GuardedBy("this")
  private boolean mIsInitializing;
  @Nullable
  @GuardedBy("this")
  private NativeModule mModule;
  private final String mName;
  @Nullable
  private Provider<? extends NativeModule> mProvider;
  private final ReactModuleInfo mReactModuleInfo;
  
  public ModuleHolder(NativeModule paramNativeModule)
  {
    mName = paramNativeModule.getName();
    mReactModuleInfo = new ReactModuleInfo(paramNativeModule.getName(), paramNativeModule.getClass().getSimpleName(), paramNativeModule.canOverrideExistingModule(), true, true, CxxModuleWrapper.class.isAssignableFrom(paramNativeModule.getClass()), TurboModule.class.isAssignableFrom(paramNativeModule.getClass()));
    mModule = paramNativeModule;
    PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.NATIVE_MODULE, "NativeModule init: %s", new Object[] { mName });
  }
  
  public ModuleHolder(ReactModuleInfo paramReactModuleInfo, Provider paramProvider)
  {
    mName = paramReactModuleInfo.name();
    mProvider = paramProvider;
    mReactModuleInfo = paramReactModuleInfo;
    if (paramReactModuleInfo.needsEagerInit()) {
      mModule = create();
    }
  }
  
  private NativeModule create()
  {
    NativeModule localNativeModule = mModule;
    int i = 1;
    boolean bool;
    if (localNativeModule == null) {
      bool = true;
    } else {
      bool = false;
    }
    SoftAssertions.assertCondition(bool, "Creating an already created module.");
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_MODULE_START, mName, mInstanceKey);
    SystraceMessage.beginSection(0L, "ModuleHolder.createModule").attribute("name", mName).flush();
    PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.NATIVE_MODULE, "NativeModule init: %s", new Object[] { mName });
    for (;;)
    {
      try
      {
        localNativeModule = (NativeModule)((Provider)Assertions.assertNotNull(mProvider)).get();
        mProvider = null;
        try
        {
          mModule = localNativeModule;
          if ((mInitializable) && (!mIsInitializing))
          {
            if (i != 0) {
              doInitialize(localNativeModule);
            }
            ReactMarker.logMarker(ReactMarkerConstants.CREATE_MODULE_END, mName, mInstanceKey);
            SystraceMessage.endSection(0L).flush();
            return localNativeModule;
          }
        }
        catch (Throwable localThrowable1)
        {
          throw localThrowable1;
        }
        i = 0;
      }
      catch (Throwable localThrowable2)
      {
        ReactMarker.logMarker(ReactMarkerConstants.CREATE_MODULE_END, mName, mInstanceKey);
        SystraceMessage.endSection(0L).flush();
        throw localThrowable2;
      }
    }
  }
  
  private void doInitialize(NativeModule paramNativeModule)
  {
    SystraceMessage.beginSection(0L, "ModuleHolder.initialize").attribute("name", mName).flush();
    ReactMarker.logMarker(ReactMarkerConstants.INITIALIZE_MODULE_START, mName, mInstanceKey);
    for (;;)
    {
      try
      {
        try
        {
          boolean bool = mInitializable;
          i = 1;
          if ((bool) && (!mIsInitializing))
          {
            mIsInitializing = true;
            if (i != 0)
            {
              paramNativeModule.initialize();
              try
              {
                mIsInitializing = false;
              }
              catch (Throwable paramNativeModule)
              {
                throw paramNativeModule;
              }
            }
            ReactMarker.logMarker(ReactMarkerConstants.INITIALIZE_MODULE_END, mName, mInstanceKey);
            SystraceMessage.endSection(0L).flush();
            return;
          }
        }
        catch (Throwable paramNativeModule)
        {
          throw paramNativeModule;
        }
        int i = 0;
      }
      catch (Throwable paramNativeModule)
      {
        ReactMarker.logMarker(ReactMarkerConstants.INITIALIZE_MODULE_END, mName, mInstanceKey);
        SystraceMessage.endSection(0L).flush();
        throw paramNativeModule;
      }
    }
  }
  
  public void destroy()
  {
    try
    {
      if (mModule != null) {
        mModule.onCatalystInstanceDestroy();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean getCanOverrideExistingModule()
  {
    return mReactModuleInfo.canOverrideExistingModule();
  }
  
  public String getClassName()
  {
    return mReactModuleInfo.className();
  }
  
  public boolean getHasConstants()
  {
    return mReactModuleInfo.hasConstants();
  }
  
  public NativeModule getModule()
  {
    for (;;)
    {
      try
      {
        NativeModule localNativeModule1;
        if (mModule != null)
        {
          localNativeModule1 = mModule;
          return localNativeModule1;
        }
        boolean bool = mIsCreating;
        i = 1;
        if (bool) {
          break label122;
        }
        mIsCreating = true;
        if (i != 0)
        {
          localNativeModule1 = create();
          try
          {
            mIsCreating = false;
            notifyAll();
            return localNativeModule1;
          }
          catch (Throwable localThrowable1)
          {
            throw localThrowable1;
          }
        }
        try
        {
          if (mModule == null)
          {
            bool = mIsCreating;
            if (!bool) {}
          }
        }
        catch (Throwable localThrowable2)
        {
          NativeModule localNativeModule2;
          throw localThrowable2;
        }
      }
      catch (Throwable localThrowable3)
      {
        throw localThrowable3;
      }
      try
      {
        wait();
      }
      catch (InterruptedException localInterruptedException) {}
      localNativeModule2 = (NativeModule)Assertions.assertNotNull(mModule);
      return localNativeModule2;
      continue;
      label122:
      int i = 0;
    }
  }
  
  public String getName()
  {
    return mName;
  }
  
  boolean hasInstance()
  {
    try
    {
      NativeModule localNativeModule = mModule;
      boolean bool;
      if (localNativeModule != null) {
        bool = true;
      } else {
        bool = false;
      }
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean isCxxModule()
  {
    return mReactModuleInfo.isCxxModule();
  }
  
  public boolean isTurboModule()
  {
    return mReactModuleInfo.isTurboModule();
  }
  
  void markInitializable()
  {
    for (int i = 1;; i = 0)
    {
      try
      {
        mInitializable = true;
        NativeModule localNativeModule = mModule;
        boolean bool = false;
        if (localNativeModule == null) {
          break label59;
        }
        if (!mIsInitializing) {
          bool = true;
        }
        Assertions.assertCondition(bool);
        localNativeModule = mModule;
        if (i != 0)
        {
          doInitialize(localNativeModule);
          return;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      return;
      label59:
      Object localObject = null;
    }
  }
}
