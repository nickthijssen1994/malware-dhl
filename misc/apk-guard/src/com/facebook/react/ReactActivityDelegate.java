package com.facebook.react;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.KeyEvent;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.Callback;
import com.facebook.react.devsupport.DoubleTapReloadRecognizer;
import com.facebook.react.devsupport.interfaces.DevSupportManager;
import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;
import com.facebook.react.modules.core.PermissionListener;
import javax.annotation.Nullable;

public class ReactActivityDelegate
{
  @Nullable
  private final Activity mActivity;
  @Nullable
  private DoubleTapReloadRecognizer mDoubleTapReloadRecognizer;
  @Nullable
  private final String mMainComponentName;
  @Nullable
  private PermissionListener mPermissionListener;
  @Nullable
  private Callback mPermissionsCallback;
  @Nullable
  private ReactRootView mReactRootView;
  
  public ReactActivityDelegate(Activity paramActivity, String paramString)
  {
    mActivity = paramActivity;
    mMainComponentName = paramString;
  }
  
  public ReactActivityDelegate(ReactActivity paramReactActivity, String paramString)
  {
    mActivity = paramReactActivity;
    mMainComponentName = paramString;
  }
  
  protected ReactRootView createRootView()
  {
    return new ReactRootView(getContext());
  }
  
  protected Context getContext()
  {
    return (Context)Assertions.assertNotNull(mActivity);
  }
  
  protected Bundle getLaunchOptions()
  {
    return null;
  }
  
  protected Activity getPlainActivity()
  {
    return (Activity)getContext();
  }
  
  public ReactInstanceManager getReactInstanceManager()
  {
    return getReactNativeHost().getReactInstanceManager();
  }
  
  protected ReactNativeHost getReactNativeHost()
  {
    return ((ReactApplication)getPlainActivity().getApplication()).getReactNativeHost();
  }
  
  protected void loadApp(String paramString)
  {
    if (mReactRootView == null)
    {
      mReactRootView = createRootView();
      mReactRootView.startReactApplication(getReactNativeHost().getReactInstanceManager(), paramString, getLaunchOptions());
      getPlainActivity().setContentView(mReactRootView);
      return;
    }
    throw new IllegalStateException("Cannot loadApp while app is already running.");
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (getReactNativeHost().hasInstance()) {
      getReactNativeHost().getReactInstanceManager().onActivityResult(getPlainActivity(), paramInt1, paramInt2, paramIntent);
    }
  }
  
  public boolean onBackPressed()
  {
    if (getReactNativeHost().hasInstance())
    {
      getReactNativeHost().getReactInstanceManager().onBackPressed();
      return true;
    }
    return false;
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    paramBundle = mMainComponentName;
    if (paramBundle != null) {
      loadApp(paramBundle);
    }
    mDoubleTapReloadRecognizer = new DoubleTapReloadRecognizer();
  }
  
  protected void onDestroy()
  {
    ReactRootView localReactRootView = mReactRootView;
    if (localReactRootView != null)
    {
      localReactRootView.unmountReactApplication();
      mReactRootView = null;
    }
    if (getReactNativeHost().hasInstance()) {
      getReactNativeHost().getReactInstanceManager().onHostDestroy(getPlainActivity());
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((getReactNativeHost().hasInstance()) && (getReactNativeHost().getUseDeveloperSupport()) && (paramInt == 90))
    {
      paramKeyEvent.startTracking();
      return true;
    }
    return false;
  }
  
  public boolean onKeyLongPress(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((getReactNativeHost().hasInstance()) && (getReactNativeHost().getUseDeveloperSupport()) && (paramInt == 90))
    {
      getReactNativeHost().getReactInstanceManager().showDevOptionsDialog();
      return true;
    }
    return false;
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((getReactNativeHost().hasInstance()) && (getReactNativeHost().getUseDeveloperSupport()))
    {
      if (paramInt == 82)
      {
        getReactNativeHost().getReactInstanceManager().showDevOptionsDialog();
        return true;
      }
      if (((DoubleTapReloadRecognizer)Assertions.assertNotNull(mDoubleTapReloadRecognizer)).didDoubleTapR(paramInt, getPlainActivity().getCurrentFocus()))
      {
        getReactNativeHost().getReactInstanceManager().getDevSupportManager().handleReloadJS();
        return true;
      }
    }
    return false;
  }
  
  public boolean onNewIntent(Intent paramIntent)
  {
    if (getReactNativeHost().hasInstance())
    {
      getReactNativeHost().getReactInstanceManager().onNewIntent(paramIntent);
      return true;
    }
    return false;
  }
  
  protected void onPause()
  {
    if (getReactNativeHost().hasInstance()) {
      getReactNativeHost().getReactInstanceManager().onHostPause(getPlainActivity());
    }
  }
  
  public void onRequestPermissionsResult(final int paramInt, final String[] paramArrayOfString, final int[] paramArrayOfInt)
  {
    mPermissionsCallback = new Callback()
    {
      public void invoke(Object... paramAnonymousVarArgs)
      {
        if ((mPermissionListener != null) && (mPermissionListener.onRequestPermissionsResult(paramInt, paramArrayOfString, paramArrayOfInt))) {
          ReactActivityDelegate.access$002(ReactActivityDelegate.this, null);
        }
      }
    };
  }
  
  protected void onResume()
  {
    if (getReactNativeHost().hasInstance()) {
      getReactNativeHost().getReactInstanceManager().onHostResume(getPlainActivity(), (DefaultHardwareBackBtnHandler)getPlainActivity());
    }
    Callback localCallback = mPermissionsCallback;
    if (localCallback != null)
    {
      localCallback.invoke(new Object[0]);
      mPermissionsCallback = null;
    }
  }
  
  public void requestPermissions(String[] paramArrayOfString, int paramInt, PermissionListener paramPermissionListener)
  {
    mPermissionListener = paramPermissionListener;
    getPlainActivity().requestPermissions(paramArrayOfString, paramInt);
  }
}
