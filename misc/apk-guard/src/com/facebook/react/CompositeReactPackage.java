package com.facebook.react;

import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;

public class CompositeReactPackage
  implements ReactPackage, ViewManagerOnDemandReactPackage
{
  private final List<ReactPackage> mChildReactPackages = new ArrayList();
  
  public CompositeReactPackage(ReactPackage paramReactPackage1, ReactPackage paramReactPackage2, ReactPackage... paramVarArgs)
  {
    mChildReactPackages.add(paramReactPackage1);
    mChildReactPackages.add(paramReactPackage2);
    Collections.addAll(mChildReactPackages, paramVarArgs);
  }
  
  public List createNativeModules(ReactApplicationContext paramReactApplicationContext)
  {
    HashMap localHashMap = new HashMap();
    Iterator localIterator1 = mChildReactPackages.iterator();
    while (localIterator1.hasNext())
    {
      Iterator localIterator2 = ((ReactPackage)localIterator1.next()).createNativeModules(paramReactApplicationContext).iterator();
      while (localIterator2.hasNext())
      {
        NativeModule localNativeModule = (NativeModule)localIterator2.next();
        localHashMap.put(localNativeModule.getName(), localNativeModule);
      }
    }
    return new ArrayList(localHashMap.values());
  }
  
  public ViewManager createViewManager(ReactApplicationContext paramReactApplicationContext, String paramString)
  {
    Object localObject1 = mChildReactPackages;
    localObject1 = ((List)localObject1).listIterator(((List)localObject1).size());
    while (((ListIterator)localObject1).hasPrevious())
    {
      Object localObject2 = (ReactPackage)((ListIterator)localObject1).previous();
      if ((localObject2 instanceof ViewManagerOnDemandReactPackage))
      {
        localObject2 = ((ViewManagerOnDemandReactPackage)localObject2).createViewManager(paramReactApplicationContext, paramString);
        if (localObject2 != null) {
          return localObject2;
        }
      }
    }
    return null;
  }
  
  public List createViewManagers(ReactApplicationContext paramReactApplicationContext)
  {
    HashMap localHashMap = new HashMap();
    Iterator localIterator1 = mChildReactPackages.iterator();
    while (localIterator1.hasNext())
    {
      Iterator localIterator2 = ((ReactPackage)localIterator1.next()).createViewManagers(paramReactApplicationContext).iterator();
      while (localIterator2.hasNext())
      {
        ViewManager localViewManager = (ViewManager)localIterator2.next();
        localHashMap.put(localViewManager.getName(), localViewManager);
      }
    }
    return new ArrayList(localHashMap.values());
  }
  
  public List getViewManagerNames(ReactApplicationContext paramReactApplicationContext)
  {
    HashSet localHashSet = new HashSet();
    Iterator localIterator = mChildReactPackages.iterator();
    while (localIterator.hasNext())
    {
      Object localObject = (ReactPackage)localIterator.next();
      if ((localObject instanceof ViewManagerOnDemandReactPackage))
      {
        localObject = ((ViewManagerOnDemandReactPackage)localObject).getViewManagerNames(paramReactApplicationContext);
        if (localObject != null) {
          localHashSet.addAll((Collection)localObject);
        }
      }
    }
    return new ArrayList(localHashSet);
  }
}
