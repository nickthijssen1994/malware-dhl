package com.facebook.react.uimanager;

import android.util.DisplayMetrics;
import android.view.View;
import androidx.core.view.ViewCompat;
import com.facebook.react.R.id;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.util.ReactFindViewUtil;

public abstract class BaseViewManager<T extends View, C extends LayoutShadowNode>
  extends ViewManager<T, C>
{
  private static final float CAMERA_DISTANCE_NORMALIZATION_MULTIPLIER = (float)Math.sqrt(5.0D);
  private static final int PERSPECTIVE_ARRAY_INVERTED_CAMERA_DISTANCE_INDEX = 2;
  private static final String PROP_ACCESSIBILITY_COMPONENT_TYPE = "accessibilityComponentType";
  private static final String PROP_ACCESSIBILITY_HINT = "accessibilityHint";
  private static final String PROP_ACCESSIBILITY_LABEL = "accessibilityLabel";
  private static final String PROP_ACCESSIBILITY_LIVE_REGION = "accessibilityLiveRegion";
  private static final String PROP_ACCESSIBILITY_ROLE = "accessibilityRole";
  private static final String PROP_ACCESSIBILITY_STATES = "accessibilityStates";
  private static final String PROP_BACKGROUND_COLOR = "backgroundColor";
  private static final String PROP_ELEVATION = "elevation";
  private static final String PROP_IMPORTANT_FOR_ACCESSIBILITY = "importantForAccessibility";
  public static final String PROP_NATIVE_ID = "nativeID";
  private static final String PROP_RENDER_TO_HARDWARE_TEXTURE = "renderToHardwareTextureAndroid";
  private static final String PROP_ROTATION = "rotation";
  private static final String PROP_SCALE_X = "scaleX";
  private static final String PROP_SCALE_Y = "scaleY";
  public static final String PROP_TEST_ID = "testID";
  private static final String PROP_TRANSFORM = "transform";
  private static final String PROP_TRANSLATE_X = "translateX";
  private static final String PROP_TRANSLATE_Y = "translateY";
  private static final String PROP_Z_INDEX = "zIndex";
  private static MatrixMathHelper.MatrixDecompositionContext sMatrixDecompositionContext = new MatrixMathHelper.MatrixDecompositionContext();
  private static double[] sTransformDecompositionArray = new double[16];
  
  public BaseViewManager() {}
  
  private static void resetTransformProperty(View paramView)
  {
    paramView.setTranslationX(PixelUtil.toPixelFromDIP(0.0F));
    paramView.setTranslationY(PixelUtil.toPixelFromDIP(0.0F));
    paramView.setRotation(0.0F);
    paramView.setRotationX(0.0F);
    paramView.setRotationY(0.0F);
    paramView.setScaleX(1.0F);
    paramView.setScaleY(1.0F);
    paramView.setCameraDistance(0.0F);
  }
  
  private static void setTransformProperty(View paramView, ReadableArray paramReadableArray)
  {
    TransformHelper.processTransform(paramReadableArray, sTransformDecompositionArray);
    MatrixMathHelper.decomposeMatrix(sTransformDecompositionArray, sMatrixDecompositionContext);
    paramView.setTranslationX(PixelUtil.toPixelFromDIP((float)sMatrixDecompositionContexttranslation[0]));
    paramView.setTranslationY(PixelUtil.toPixelFromDIP((float)sMatrixDecompositionContexttranslation[1]));
    paramView.setRotation((float)sMatrixDecompositionContextrotationDegrees[2]);
    paramView.setRotationX((float)sMatrixDecompositionContextrotationDegrees[0]);
    paramView.setRotationY((float)sMatrixDecompositionContextrotationDegrees[1]);
    paramView.setScaleX((float)sMatrixDecompositionContextscale[0]);
    paramView.setScaleY((float)sMatrixDecompositionContextscale[1]);
    paramReadableArray = sMatrixDecompositionContextperspective;
    if (paramReadableArray.length > 2)
    {
      float f2 = (float)paramReadableArray[2];
      float f1 = f2;
      if (f2 == 0.0F) {
        f1 = 7.8125E-4F;
      }
      f1 = -1.0F / f1;
      f2 = getScreenDisplayMetricsdensity;
      paramView.setCameraDistance(f2 * f2 * f1 * CAMERA_DISTANCE_NORMALIZATION_MULTIPLIER);
    }
  }
  
  private void updateViewAccessibility(View paramView)
  {
    AccessibilityDelegateUtil.setDelegate(paramView);
  }
  
  protected void onAfterUpdateTransaction(View paramView)
  {
    super.onAfterUpdateTransaction(paramView);
    updateViewAccessibility(paramView);
  }
  
  public void setAccessibilityComponentType(View paramView, String paramString)
  {
    AccessibilityHelper.updateAccessibilityComponentType(paramView, paramString);
  }
  
  public void setAccessibilityHint(View paramView, String paramString)
  {
    paramView.setTag(R.id.accessibility_hint, paramString);
  }
  
  public void setAccessibilityLabel(View paramView, String paramString)
  {
    paramView.setContentDescription(paramString);
  }
  
  public void setAccessibilityLiveRegion(View paramView, String paramString)
  {
    if ((paramString != null) && (!paramString.equals("none")))
    {
      if (paramString.equals("polite"))
      {
        ViewCompat.setAccessibilityLiveRegion(paramView, 1);
        return;
      }
      if (paramString.equals("assertive")) {
        ViewCompat.setAccessibilityLiveRegion(paramView, 2);
      }
    }
    else
    {
      ViewCompat.setAccessibilityLiveRegion(paramView, 0);
    }
  }
  
  public void setAccessibilityRole(View paramView, String paramString)
  {
    if (paramString == null) {
      return;
    }
    paramView.setTag(R.id.accessibility_role, AccessibilityDelegateUtil.AccessibilityRole.fromValue(paramString));
  }
  
  public void setBackgroundColor(View paramView, int paramInt)
  {
    paramView.setBackgroundColor(paramInt);
  }
  
  public void setElevation(View paramView, float paramFloat)
  {
    ViewCompat.setElevation(paramView, PixelUtil.toPixelFromDIP(paramFloat));
  }
  
  public void setImportantForAccessibility(View paramView, String paramString)
  {
    if ((paramString != null) && (!paramString.equals("auto")))
    {
      if (paramString.equals("yes"))
      {
        ViewCompat.setImportantForAccessibility(paramView, 1);
        return;
      }
      if (paramString.equals("no"))
      {
        ViewCompat.setImportantForAccessibility(paramView, 2);
        return;
      }
      if (paramString.equals("no-hide-descendants")) {
        ViewCompat.setImportantForAccessibility(paramView, 4);
      }
    }
    else
    {
      ViewCompat.setImportantForAccessibility(paramView, 0);
    }
  }
  
  public void setNativeId(View paramView, String paramString)
  {
    paramView.setTag(R.id.view_tag_native_id, paramString);
    ReactFindViewUtil.notifyViewRendered(paramView);
  }
  
  public void setOpacity(View paramView, float paramFloat)
  {
    paramView.setAlpha(paramFloat);
  }
  
  public void setRenderToHardwareTexture(View paramView, boolean paramBoolean)
  {
    int i;
    if (paramBoolean) {
      i = 2;
    } else {
      i = 0;
    }
    paramView.setLayerType(i, null);
  }
  
  public void setRotation(View paramView, float paramFloat)
  {
    paramView.setRotation(paramFloat);
  }
  
  public void setScaleX(View paramView, float paramFloat)
  {
    paramView.setScaleX(paramFloat);
  }
  
  public void setScaleY(View paramView, float paramFloat)
  {
    paramView.setScaleY(paramFloat);
  }
  
  public void setTestId(View paramView, String paramString)
  {
    paramView.setTag(R.id.react_test_id, paramString);
    paramView.setTag(paramString);
  }
  
  public void setTransform(View paramView, ReadableArray paramReadableArray)
  {
    if (paramReadableArray == null)
    {
      resetTransformProperty(paramView);
      return;
    }
    setTransformProperty(paramView, paramReadableArray);
  }
  
  public void setTranslateX(View paramView, float paramFloat)
  {
    paramView.setTranslationX(PixelUtil.toPixelFromDIP(paramFloat));
  }
  
  public void setTranslateY(View paramView, float paramFloat)
  {
    paramView.setTranslationY(PixelUtil.toPixelFromDIP(paramFloat));
  }
  
  public void setViewStates(View paramView, ReadableArray paramReadableArray)
  {
    paramView.setSelected(false);
    paramView.setEnabled(true);
    if (paramReadableArray == null) {
      return;
    }
    int i = 0;
    while (i < paramReadableArray.size())
    {
      String str = paramReadableArray.getString(i);
      if (str.equals("selected")) {
        paramView.setSelected(true);
      } else if (str.equals("disabled")) {
        paramView.setEnabled(false);
      }
      i += 1;
    }
  }
  
  public void setZIndex(View paramView, float paramFloat)
  {
    ViewGroupManager.setViewZIndex(paramView, Math.round(paramFloat));
    paramView = paramView.getParent();
    if ((paramView != null) && ((paramView instanceof ReactZIndexedViewGroup))) {
      ((ReactZIndexedViewGroup)paramView).updateDrawingOrder();
    }
  }
}
