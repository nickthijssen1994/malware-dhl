package com.facebook.react.uimanager;

import android.view.MotionEvent;
import android.view.ViewGroup;
import com.facebook.common.logging.FLog;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.uimanager.events.EventDispatcher;
import com.facebook.react.uimanager.events.TouchEvent;
import com.facebook.react.uimanager.events.TouchEventCoalescingKeyHelper;
import com.facebook.react.uimanager.events.TouchEventType;

public class JSTouchDispatcher
{
  private boolean mChildIsHandlingNativeGesture = false;
  private long mGestureStartTime = Long.MIN_VALUE;
  private final ViewGroup mRootViewGroup;
  private final float[] mTargetCoordinates = new float[2];
  private int mTargetTag = -1;
  private final TouchEventCoalescingKeyHelper mTouchEventCoalescingKeyHelper = new TouchEventCoalescingKeyHelper();
  
  public JSTouchDispatcher(ViewGroup paramViewGroup)
  {
    mRootViewGroup = paramViewGroup;
  }
  
  private void dispatchCancelEvent(MotionEvent paramMotionEvent, EventDispatcher paramEventDispatcher)
  {
    if (mTargetTag == -1)
    {
      FLog.warn("ReactNative", "Can't cancel already finished gesture. Is a child View trying to start a gesture from an UP/CANCEL event?");
      return;
    }
    Assertions.assertCondition(mChildIsHandlingNativeGesture ^ true, "Expected to not have already sent a cancel for this gesture");
    paramEventDispatcher = (EventDispatcher)Assertions.assertNotNull(paramEventDispatcher);
    int i = mTargetTag;
    TouchEventType localTouchEventType = TouchEventType.CANCEL;
    long l = mGestureStartTime;
    float[] arrayOfFloat = mTargetCoordinates;
    paramEventDispatcher.dispatchEvent(TouchEvent.obtain(i, localTouchEventType, paramMotionEvent, l, arrayOfFloat[0], arrayOfFloat[1], mTouchEventCoalescingKeyHelper));
  }
  
  private int findTargetTagAndSetCoordinates(MotionEvent paramMotionEvent)
  {
    return TouchTargetHelper.findTargetTagAndCoordinatesForTouch(paramMotionEvent.getX(), paramMotionEvent.getY(), mRootViewGroup, mTargetCoordinates, null);
  }
  
  public void handleTouchEvent(MotionEvent paramMotionEvent, EventDispatcher paramEventDispatcher)
  {
    int i = paramMotionEvent.getAction() & 0xFF;
    TouchEventType localTouchEventType;
    long l;
    float[] arrayOfFloat;
    if (i == 0)
    {
      if (mTargetTag != -1) {
        FLog.e("ReactNative", "Got DOWN touch before receiving UP or CANCEL from last gesture");
      }
      mChildIsHandlingNativeGesture = false;
      mGestureStartTime = paramMotionEvent.getEventTime();
      mTargetTag = findTargetTagAndSetCoordinates(paramMotionEvent);
      i = mTargetTag;
      localTouchEventType = TouchEventType.START;
      l = mGestureStartTime;
      arrayOfFloat = mTargetCoordinates;
      paramEventDispatcher.dispatchEvent(TouchEvent.obtain(i, localTouchEventType, paramMotionEvent, l, arrayOfFloat[0], arrayOfFloat[1], mTouchEventCoalescingKeyHelper));
      return;
    }
    if (mChildIsHandlingNativeGesture) {
      return;
    }
    int j = mTargetTag;
    if (j == -1)
    {
      FLog.e("ReactNative", "Unexpected state: received touch event but didn't get starting ACTION_DOWN for this gesture before");
      return;
    }
    if (i == 1)
    {
      findTargetTagAndSetCoordinates(paramMotionEvent);
      i = mTargetTag;
      localTouchEventType = TouchEventType.PENCIL;
      l = mGestureStartTime;
      arrayOfFloat = mTargetCoordinates;
      paramEventDispatcher.dispatchEvent(TouchEvent.obtain(i, localTouchEventType, paramMotionEvent, l, arrayOfFloat[0], arrayOfFloat[1], mTouchEventCoalescingKeyHelper));
      mTargetTag = -1;
      mGestureStartTime = Long.MIN_VALUE;
      return;
    }
    if (i == 2)
    {
      findTargetTagAndSetCoordinates(paramMotionEvent);
      i = mTargetTag;
      localTouchEventType = TouchEventType.MOVE;
      l = mGestureStartTime;
      arrayOfFloat = mTargetCoordinates;
      paramEventDispatcher.dispatchEvent(TouchEvent.obtain(i, localTouchEventType, paramMotionEvent, l, arrayOfFloat[0], arrayOfFloat[1], mTouchEventCoalescingKeyHelper));
      return;
    }
    if (i == 5)
    {
      localTouchEventType = TouchEventType.START;
      l = mGestureStartTime;
      arrayOfFloat = mTargetCoordinates;
      paramEventDispatcher.dispatchEvent(TouchEvent.obtain(j, localTouchEventType, paramMotionEvent, l, arrayOfFloat[0], arrayOfFloat[1], mTouchEventCoalescingKeyHelper));
      return;
    }
    if (i == 6)
    {
      localTouchEventType = TouchEventType.PENCIL;
      l = mGestureStartTime;
      arrayOfFloat = mTargetCoordinates;
      paramEventDispatcher.dispatchEvent(TouchEvent.obtain(j, localTouchEventType, paramMotionEvent, l, arrayOfFloat[0], arrayOfFloat[1], mTouchEventCoalescingKeyHelper));
      return;
    }
    if (i == 3)
    {
      if (mTouchEventCoalescingKeyHelper.hasCoalescingKey(paramMotionEvent.getDownTime())) {
        dispatchCancelEvent(paramMotionEvent, paramEventDispatcher);
      } else {
        FLog.e("ReactNative", "Received an ACTION_CANCEL touch event for which we have no corresponding ACTION_DOWN");
      }
      mTargetTag = -1;
      mGestureStartTime = Long.MIN_VALUE;
      return;
    }
    paramMotionEvent = new StringBuilder();
    paramMotionEvent.append("Warning : touch event was ignored. Action=");
    paramMotionEvent.append(i);
    paramMotionEvent.append(" Target=");
    paramMotionEvent.append(mTargetTag);
    FLog.warn("ReactNative", paramMotionEvent.toString());
  }
  
  public void onChildStartedNativeGesture(MotionEvent paramMotionEvent, EventDispatcher paramEventDispatcher)
  {
    if (mChildIsHandlingNativeGesture) {
      return;
    }
    dispatchCancelEvent(paramMotionEvent, paramEventDispatcher);
    mChildIsHandlingNativeGesture = true;
    mTargetTag = -1;
  }
}
