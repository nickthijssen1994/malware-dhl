package com.facebook.react.uimanager;

import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import com.facebook.react.views.view.ReactViewGroup;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.WeakHashMap;

public abstract class ViewGroupManager<T extends ViewGroup>
  extends BaseViewManager<T, LayoutShadowNode>
{
  private static WeakHashMap<View, Integer> mZIndexHash = new WeakHashMap();
  
  public ViewGroupManager() {}
  
  public static Integer getViewZIndex(View paramView)
  {
    return (Integer)mZIndexHash.get(paramView);
  }
  
  public static void reorderChildrenByZIndex(ViewGroup paramViewGroup)
  {
    if ((paramViewGroup != null) && ((paramViewGroup instanceof ReactViewGroup)) && (((ReactViewGroup)paramViewGroup).getZindexflag()))
    {
      Object localObject = mZIndexHash.values().iterator();
      int j;
      do
      {
        boolean bool = ((Iterator)localObject).hasNext();
        j = 0;
        if (!bool) {
          break;
        }
      } while (((Integer)((Iterator)localObject).next()).intValue() == 0);
      int i = 1;
      break label71;
      i = 0;
      label71:
      if (i == 0) {
        return;
      }
      localObject = new ArrayList();
      i = 0;
      while (i < paramViewGroup.getChildCount())
      {
        ((ArrayList)localObject).add(paramViewGroup.getChildAt(i));
        i += 1;
      }
      Collections.sort((List)localObject, new Comparator()
      {
        public int compare(View paramAnonymousView1, View paramAnonymousView2)
        {
          Integer localInteger = (Integer)ViewGroupManager.mZIndexHash.get(paramAnonymousView1);
          paramAnonymousView1 = localInteger;
          if (localInteger == null) {
            paramAnonymousView1 = Integer.valueOf(0);
          }
          localInteger = (Integer)ViewGroupManager.mZIndexHash.get(paramAnonymousView2);
          paramAnonymousView2 = localInteger;
          if (localInteger == null) {
            paramAnonymousView2 = Integer.valueOf(0);
          }
          return paramAnonymousView1.intValue() - paramAnonymousView2.intValue();
        }
      });
      i = j;
      while (i < ((ArrayList)localObject).size())
      {
        ((View)((ArrayList)localObject).get(i)).bringToFront();
        i += 1;
      }
      paramViewGroup.invalidate();
    }
  }
  
  public static void setViewZIndex(View paramView, int paramInt)
  {
    mZIndexHash.put(paramView, Integer.valueOf(paramInt));
    paramView = (ViewGroup)paramView.getParent();
    if (paramView != null) {
      reorderChildrenByZIndex(paramView);
    }
  }
  
  public void addView(ViewGroup paramViewGroup, View paramView, int paramInt)
  {
    if ((paramViewGroup != null) && ((paramViewGroup instanceof ScrollView)) && (paramViewGroup.getChildCount() >= 1)) {
      return;
    }
    paramViewGroup.addView(paramView, paramInt);
    reorderChildrenByZIndex(paramViewGroup);
  }
  
  public void addViews(ViewGroup paramViewGroup, List paramList)
  {
    int j = paramList.size();
    int i = 0;
    while (i < j)
    {
      addView(paramViewGroup, (View)paramList.get(i), i);
      i += 1;
    }
  }
  
  public LayoutShadowNode createShadowNodeInstance()
  {
    return new LayoutShadowNode();
  }
  
  public View getChildAt(ViewGroup paramViewGroup, int paramInt)
  {
    return paramViewGroup.getChildAt(paramInt);
  }
  
  public int getChildCount(ViewGroup paramViewGroup)
  {
    return paramViewGroup.getChildCount();
  }
  
  public Class getShadowNodeClass()
  {
    return LayoutShadowNode.class;
  }
  
  public boolean needsCustomLayoutForChildren()
  {
    return false;
  }
  
  public void removeAllViews(ViewGroup paramViewGroup)
  {
    int i = getChildCount(paramViewGroup) - 1;
    while (i >= 0)
    {
      removeViewAt(paramViewGroup, i);
      i -= 1;
    }
  }
  
  public void removeView(ViewGroup paramViewGroup, View paramView)
  {
    int i = 0;
    while (i < getChildCount(paramViewGroup))
    {
      if (getChildAt(paramViewGroup, i) == paramView)
      {
        removeViewAt(paramViewGroup, i);
        return;
      }
      i += 1;
    }
  }
  
  public void removeViewAt(ViewGroup paramViewGroup, int paramInt)
  {
    paramViewGroup.removeViewAt(paramInt);
  }
  
  public boolean shouldPromoteGrandchildren()
  {
    return false;
  }
  
  public void updateExtraData(ViewGroup paramViewGroup, Object paramObject) {}
}
