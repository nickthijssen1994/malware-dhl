package com.facebook.react.uimanager;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Point;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.WritableNativeMap;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;

public class DisplayMetricsHolder
{
  @Nullable
  private static DisplayMetrics sScreenDisplayMetrics;
  @Nullable
  private static DisplayMetrics sWindowDisplayMetrics;
  
  public DisplayMetricsHolder() {}
  
  /* Error */
  public static Point getAppSize(Context paramContext)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnull +41 -> 42
    //   4: new 19	android/graphics/Point
    //   7: dup
    //   8: invokespecial 20	android/graphics/Point:<init>	()V
    //   11: astore_1
    //   12: aload_0
    //   13: ldc 22
    //   15: invokevirtual 28	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   18: astore_0
    //   19: aload_0
    //   20: checkcast 30	android/view/WindowManager
    //   23: astore_0
    //   24: aload_0
    //   25: invokeinterface 34 1 0
    //   30: aload_1
    //   31: invokevirtual 40	android/view/Display:getSize	(Landroid/graphics/Point;)V
    //   34: aload_1
    //   35: areturn
    //   36: astore_0
    //   37: aconst_null
    //   38: areturn
    //   39: astore_0
    //   40: aload_1
    //   41: areturn
    //   42: aconst_null
    //   43: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	44	0	paramContext	Context
    //   11	30	1	localPoint	Point
    // Exception table:
    //   from	to	target	type
    //   4	12	36	java/lang/Exception
    //   12	19	39	java/lang/Exception
    //   24	34	39	java/lang/Exception
  }
  
  public static Map getDisplayMetricsMap(double paramDouble)
  {
    boolean bool;
    if ((sWindowDisplayMetrics == null) && (sScreenDisplayMetrics == null)) {
      bool = false;
    } else {
      bool = true;
    }
    Assertions.assertNotNull(Boolean.valueOf(bool), "DisplayMetricsHolder must be initialized with initDisplayMetricsIfNotInitialized or initDisplayMetrics");
    HashMap localHashMap = new HashMap();
    localHashMap.put("windowPhysicalPixels", getPhysicalPixelsMap(sWindowDisplayMetrics, paramDouble));
    localHashMap.put("screenPhysicalPixels", getPhysicalPixelsMap(sScreenDisplayMetrics, paramDouble));
    return localHashMap;
  }
  
  public static WritableNativeMap getDisplayMetricsNativeMap(double paramDouble)
  {
    boolean bool;
    if ((sWindowDisplayMetrics == null) && (sScreenDisplayMetrics == null)) {
      bool = false;
    } else {
      bool = true;
    }
    Assertions.assertNotNull(Boolean.valueOf(bool), "DisplayMetricsHolder must be initialized with initDisplayMetricsIfNotInitialized or initDisplayMetrics");
    WritableNativeMap localWritableNativeMap = new WritableNativeMap();
    localWritableNativeMap.putMap("windowPhysicalPixels", getPhysicalPixelsNativeMap(sWindowDisplayMetrics, paramDouble));
    localWritableNativeMap.putMap("screenPhysicalPixels", getPhysicalPixelsNativeMap(sScreenDisplayMetrics, paramDouble));
    return localWritableNativeMap;
  }
  
  private static Map getPhysicalPixelsMap(DisplayMetrics paramDisplayMetrics, double paramDouble)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("width", Integer.valueOf(widthPixels));
    localHashMap.put("height", Integer.valueOf(heightPixels));
    localHashMap.put("scale", Float.valueOf(density));
    localHashMap.put("fontScale", Double.valueOf(paramDouble));
    localHashMap.put("densityDpi", Integer.valueOf(densityDpi));
    return localHashMap;
  }
  
  private static WritableNativeMap getPhysicalPixelsNativeMap(DisplayMetrics paramDisplayMetrics, double paramDouble)
  {
    WritableNativeMap localWritableNativeMap = new WritableNativeMap();
    localWritableNativeMap.putInt("width", widthPixels);
    localWritableNativeMap.putInt("height", heightPixels);
    localWritableNativeMap.putDouble("scale", density);
    localWritableNativeMap.putDouble("fontScale", paramDouble);
    localWritableNativeMap.putDouble("densityDpi", densityDpi);
    return localWritableNativeMap;
  }
  
  public static DisplayMetrics getScreenDisplayMetrics()
  {
    return sScreenDisplayMetrics;
  }
  
  public static DisplayMetrics getWindowDisplayMetrics()
  {
    return sWindowDisplayMetrics;
  }
  
  public static void initDisplayMetrics(Context paramContext)
  {
    Object localObject2 = paramContext.getResources().getDisplayMetrics();
    Object localObject1 = getAppSize(paramContext);
    if (localObject1 != null)
    {
      heightPixels = y;
      widthPixels = x;
    }
    setWindowDisplayMetrics((DisplayMetrics)localObject2);
    localObject1 = new DisplayMetrics();
    ((DisplayMetrics)localObject1).setTo((DisplayMetrics)localObject2);
    paramContext = (WindowManager)paramContext.getSystemService("window");
    Assertions.assertNotNull(paramContext, "WindowManager is null!");
    paramContext = paramContext.getDefaultDisplay();
    if (Build.VERSION.SDK_INT >= 17) {
      paramContext.getRealMetrics((DisplayMetrics)localObject1);
    }
    try
    {
      localObject2 = Display.class.getMethod("getRawHeight", new Class[0]);
      Object localObject3 = Display.class.getMethod("getRawWidth", new Class[0]);
      localObject3 = ((Method)localObject3).invoke(paramContext, new Object[0]);
      localObject3 = (Integer)localObject3;
      int i = ((Integer)localObject3).intValue();
      widthPixels = i;
      paramContext = ((Method)localObject2).invoke(paramContext, new Object[0]);
      paramContext = (Integer)paramContext;
      i = paramContext.intValue();
      heightPixels = i;
      setScreenDisplayMetrics((DisplayMetrics)localObject1);
      return;
    }
    catch (NoSuchMethodException paramContext) {}catch (IllegalAccessException paramContext) {}catch (InvocationTargetException paramContext) {}
    throw new RuntimeException("Error getting real dimensions for API level < 17", paramContext);
  }
  
  public static void initDisplayMetricsIfNotInitialized(Context paramContext)
  {
    if (getScreenDisplayMetrics() != null) {
      return;
    }
    initDisplayMetrics(paramContext);
  }
  
  public static void setScreenDisplayMetrics(DisplayMetrics paramDisplayMetrics)
  {
    sScreenDisplayMetrics = paramDisplayMetrics;
  }
  
  public static void setWindowDisplayMetrics(DisplayMetrics paramDisplayMetrics)
  {
    sWindowDisplayMetrics = paramDisplayMetrics;
  }
}
