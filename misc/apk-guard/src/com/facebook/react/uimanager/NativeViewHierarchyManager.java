package com.facebook.react.uimanager;

import android.content.Context;
import android.content.res.Resources;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.PopupMenu;
import android.widget.PopupMenu.OnDismissListener;
import android.widget.PopupMenu.OnMenuItemClickListener;
import com.facebook.common.logging.FLog;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.R.id;
import com.facebook.react.animation.Animation;
import com.facebook.react.animation.AnimationListener;
import com.facebook.react.animation.AnimationRegistry;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.SoftAssertions;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.touch.JSResponderHandler;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.react.uimanager.layoutanimation.LayoutAnimationController;
import com.facebook.react.uimanager.layoutanimation.LayoutAnimationListener;
import com.facebook.systrace.Systrace;
import com.facebook.systrace.SystraceMessage;
import com.facebook.systrace.SystraceMessage.Builder;
import javax.annotation.concurrent.NotThreadSafe;

@NotThreadSafe
public class NativeViewHierarchyManager
{
  private static final String appName = "NativeViewHierarchyManager";
  private final AnimationRegistry mAnimationRegistry = new AnimationRegistry();
  private final JSResponderHandler mJSResponderHandler = new JSResponderHandler();
  private boolean mLayoutAnimationEnabled;
  private final LayoutAnimationController mLayoutAnimator = new LayoutAnimationController();
  private PopupMenu mPopupMenu;
  private final SparseBooleanArray mRootTags;
  private final RootViewManager mRootViewManager;
  private final SparseArray<ViewManager> mTagsToViewManagers;
  private final SparseArray<View> mTagsToViews;
  private final ViewManagerRegistry mViewManagers;
  
  public NativeViewHierarchyManager(ViewManagerRegistry paramViewManagerRegistry)
  {
    this(paramViewManagerRegistry, new RootViewManager());
  }
  
  public NativeViewHierarchyManager(ViewManagerRegistry paramViewManagerRegistry, RootViewManager paramRootViewManager)
  {
    mViewManagers = paramViewManagerRegistry;
    mTagsToViews = new SparseArray();
    mTagsToViewManagers = new SparseArray();
    mRootTags = new SparseBooleanArray();
    mRootViewManager = paramRootViewManager;
  }
  
  private boolean arrayContains(int[] paramArrayOfInt, int paramInt)
  {
    if (paramArrayOfInt == null) {
      return false;
    }
    int j = paramArrayOfInt.length;
    int i = 0;
    while (i < j)
    {
      if (paramArrayOfInt[i] == paramInt) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private static String constructManageChildrenErrorMessage(ViewGroup paramViewGroup, ViewGroupManager paramViewGroupManager, int[] paramArrayOfInt1, ViewAtIndex[] paramArrayOfViewAtIndex, int[] paramArrayOfInt2)
  {
    StringBuilder localStringBuilder1 = new StringBuilder();
    int i;
    int j;
    int k;
    if (paramViewGroup != null)
    {
      StringBuilder localStringBuilder2 = new StringBuilder();
      localStringBuilder2.append("View tag:");
      localStringBuilder2.append(paramViewGroup.getId());
      localStringBuilder2.append("\n");
      localStringBuilder1.append(localStringBuilder2.toString());
      localStringBuilder2 = new StringBuilder();
      localStringBuilder2.append("  children(");
      localStringBuilder2.append(paramViewGroupManager.getChildCount(paramViewGroup));
      localStringBuilder2.append("): [\n");
      localStringBuilder1.append(localStringBuilder2.toString());
      i = 0;
      while (i < paramViewGroupManager.getChildCount(paramViewGroup))
      {
        j = 0;
        for (;;)
        {
          k = i + j;
          if ((k >= paramViewGroupManager.getChildCount(paramViewGroup)) || (j >= 16)) {
            break;
          }
          localStringBuilder2 = new StringBuilder();
          localStringBuilder2.append(paramViewGroupManager.getChildAt(paramViewGroup, k).getId());
          localStringBuilder2.append(",");
          localStringBuilder1.append(localStringBuilder2.toString());
          j += 1;
        }
        localStringBuilder1.append("\n");
        i += 16;
      }
      localStringBuilder1.append(" ],\n");
    }
    if (paramArrayOfInt1 != null)
    {
      paramViewGroup = new StringBuilder();
      paramViewGroup.append("  indicesToRemove(");
      paramViewGroup.append(paramArrayOfInt1.length);
      paramViewGroup.append("): [\n");
      localStringBuilder1.append(paramViewGroup.toString());
      i = 0;
      while (i < paramArrayOfInt1.length)
      {
        j = 0;
        for (;;)
        {
          k = i + j;
          if ((k >= paramArrayOfInt1.length) || (j >= 16)) {
            break;
          }
          paramViewGroup = new StringBuilder();
          paramViewGroup.append(paramArrayOfInt1[k]);
          paramViewGroup.append(",");
          localStringBuilder1.append(paramViewGroup.toString());
          j += 1;
        }
        localStringBuilder1.append("\n");
        i += 16;
      }
      localStringBuilder1.append(" ],\n");
    }
    if (paramArrayOfViewAtIndex != null)
    {
      paramViewGroup = new StringBuilder();
      paramViewGroup.append("  viewsToAdd(");
      paramViewGroup.append(paramArrayOfViewAtIndex.length);
      paramViewGroup.append("): [\n");
      localStringBuilder1.append(paramViewGroup.toString());
      i = 0;
      while (i < paramArrayOfViewAtIndex.length)
      {
        j = 0;
        for (;;)
        {
          k = i + j;
          if ((k >= paramArrayOfViewAtIndex.length) || (j >= 16)) {
            break;
          }
          paramViewGroup = new StringBuilder();
          paramViewGroup.append("[");
          paramViewGroup.append(mIndex);
          paramViewGroup.append(",");
          paramViewGroup.append(mTag);
          paramViewGroup.append("],");
          localStringBuilder1.append(paramViewGroup.toString());
          j += 1;
        }
        localStringBuilder1.append("\n");
        i += 16;
      }
      localStringBuilder1.append(" ],\n");
    }
    if (paramArrayOfInt2 != null)
    {
      paramViewGroup = new StringBuilder();
      paramViewGroup.append("  tagsToDelete(");
      paramViewGroup.append(paramArrayOfInt2.length);
      paramViewGroup.append("): [\n");
      localStringBuilder1.append(paramViewGroup.toString());
      i = 0;
      while (i < paramArrayOfInt2.length)
      {
        j = 0;
        for (;;)
        {
          k = i + j;
          if ((k >= paramArrayOfInt2.length) || (j >= 16)) {
            break;
          }
          paramViewGroup = new StringBuilder();
          paramViewGroup.append(paramArrayOfInt2[k]);
          paramViewGroup.append(",");
          localStringBuilder1.append(paramViewGroup.toString());
          j += 1;
        }
        localStringBuilder1.append("\n");
        i += 16;
      }
      localStringBuilder1.append(" ]\n");
    }
    return localStringBuilder1.toString();
  }
  
  private static String constructSetChildrenErrorMessage(ViewGroup paramViewGroup, ViewGroupManager paramViewGroupManager, ReadableArray paramReadableArray)
  {
    ViewAtIndex[] arrayOfViewAtIndex = new ViewAtIndex[paramReadableArray.size()];
    int i = 0;
    while (i < paramReadableArray.size())
    {
      arrayOfViewAtIndex[i] = new ViewAtIndex(paramReadableArray.getInt(i), i);
      i += 1;
    }
    return constructManageChildrenErrorMessage(paramViewGroup, paramViewGroupManager, null, arrayOfViewAtIndex, null);
  }
  
  private ThemedReactContext getReactContextForView(int paramInt)
  {
    Object localObject = (View)mTagsToViews.get(paramInt);
    if (localObject != null) {
      return (ThemedReactContext)((View)localObject).getContext();
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Could not find view with tag ");
    ((StringBuilder)localObject).append(paramInt);
    throw new JSApplicationIllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  private void updateInstanceHandle(View paramView, long paramLong)
  {
    UiThreadUtil.assertOnUiThread();
    paramView.setTag(R.id.view_tag_instance_handle, Long.valueOf(paramLong));
  }
  
  private void updateLayout(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if ((mLayoutAnimationEnabled) && (mLayoutAnimator.shouldAnimateLayout(paramView)))
    {
      mLayoutAnimator.applyLayoutUpdate(paramView, paramInt1, paramInt2, paramInt3, paramInt4);
      return;
    }
    paramView.layout(paramInt1, paramInt2, paramInt3 + paramInt1, paramInt4 + paramInt2);
  }
  
  public void addRootView(int paramInt, SizeMonitoringFrameLayout paramSizeMonitoringFrameLayout, ThemedReactContext paramThemedReactContext)
  {
    try
    {
      addRootViewGroup(paramInt, paramSizeMonitoringFrameLayout, paramThemedReactContext);
      return;
    }
    catch (Throwable paramSizeMonitoringFrameLayout)
    {
      throw paramSizeMonitoringFrameLayout;
    }
  }
  
  protected final void addRootViewGroup(int paramInt, ViewGroup paramViewGroup, ThemedReactContext paramThemedReactContext)
  {
    try
    {
      if (paramViewGroup.getId() != -1)
      {
        paramThemedReactContext = appName;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Trying to add a root view with an explicit id (");
        localStringBuilder.append(paramViewGroup.getId());
        localStringBuilder.append(") already set. React Native uses the id field to track react tags and will overwrite this field. If that is fine, explicitly overwrite the id field to View.NO_ID before calling addRootView.");
        FLog.e(paramThemedReactContext, localStringBuilder.toString());
      }
      mTagsToViews.put(paramInt, paramViewGroup);
      mTagsToViewManagers.put(paramInt, mRootViewManager);
      mRootTags.put(paramInt, true);
      paramViewGroup.setId(paramInt);
      return;
    }
    catch (Throwable paramViewGroup)
    {
      throw paramViewGroup;
    }
  }
  
  public void clearJSResponder()
  {
    mJSResponderHandler.clearJSResponder();
  }
  
  void clearLayoutAnimation()
  {
    mLayoutAnimator.reset();
  }
  
  void configureLayoutAnimation(ReadableMap paramReadableMap)
  {
    mLayoutAnimator.initializeFromConfig(paramReadableMap);
  }
  
  /* Error */
  public void createView(ThemedReactContext paramThemedReactContext, int paramInt, String paramString, ReactStylesDiffMap paramReactStylesDiffMap)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 192	com/facebook/react/bridge/UiThreadUtil:assertOnUiThread	()V
    //   5: lconst_0
    //   6: ldc_w 268
    //   9: invokestatic 274	com/facebook/systrace/SystraceMessage:beginSection	(JLjava/lang/String;)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   12: ldc_w 276
    //   15: iload_2
    //   16: invokevirtual 282	com/facebook/systrace/SystraceMessage$Builder:attribute	(Ljava/lang/String;I)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   19: ldc_w 284
    //   22: aload_3
    //   23: invokevirtual 287	com/facebook/systrace/SystraceMessage$Builder:attribute	(Ljava/lang/String;Ljava/lang/Object;)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   26: invokevirtual 290	com/facebook/systrace/SystraceMessage$Builder:flush	()V
    //   29: aload_0
    //   30: getfield 67	com/facebook/react/uimanager/NativeViewHierarchyManager:mViewManagers	Lcom/facebook/react/uimanager/ViewManagerRegistry;
    //   33: aload_3
    //   34: invokevirtual 296	com/facebook/react/uimanager/ViewManagerRegistry:loadClass	(Ljava/lang/String;)Lcom/facebook/react/uimanager/ViewManager;
    //   37: astore_3
    //   38: aload_3
    //   39: aload_1
    //   40: aload_0
    //   41: getfield 55	com/facebook/react/uimanager/NativeViewHierarchyManager:mJSResponderHandler	Lcom/facebook/react/touch/JSResponderHandler;
    //   44: invokevirtual 301	com/facebook/react/uimanager/ViewManager:createView	(Lcom/facebook/react/uimanager/ThemedReactContext;Lcom/facebook/react/touch/JSResponderHandler;)Landroid/view/View;
    //   47: astore_1
    //   48: aload_1
    //   49: ifnonnull +10 -> 59
    //   52: lconst_0
    //   53: invokestatic 307	com/facebook/systrace/Systrace:endSection	(J)V
    //   56: aload_0
    //   57: monitorexit
    //   58: return
    //   59: aload_0
    //   60: getfield 72	com/facebook/react/uimanager/NativeViewHierarchyManager:mTagsToViews	Landroid/util/SparseArray;
    //   63: iload_2
    //   64: aload_1
    //   65: invokevirtual 245	android/util/SparseArray:put	(ILjava/lang/Object;)V
    //   68: aload_0
    //   69: getfield 74	com/facebook/react/uimanager/NativeViewHierarchyManager:mTagsToViewManagers	Landroid/util/SparseArray;
    //   72: iload_2
    //   73: aload_3
    //   74: invokevirtual 245	android/util/SparseArray:put	(ILjava/lang/Object;)V
    //   77: aload_1
    //   78: iload_2
    //   79: invokevirtual 252	android/view/View:setId	(I)V
    //   82: aload 4
    //   84: ifnull +10 -> 94
    //   87: aload_3
    //   88: aload_1
    //   89: aload 4
    //   91: invokevirtual 311	com/facebook/react/uimanager/ViewManager:updateProperties	(Landroid/view/View;Lcom/facebook/react/uimanager/ReactStylesDiffMap;)V
    //   94: lconst_0
    //   95: invokestatic 307	com/facebook/systrace/Systrace:endSection	(J)V
    //   98: aload_0
    //   99: monitorexit
    //   100: return
    //   101: astore_1
    //   102: lconst_0
    //   103: invokestatic 307	com/facebook/systrace/Systrace:endSection	(J)V
    //   106: aload_1
    //   107: athrow
    //   108: astore_1
    //   109: aload_0
    //   110: monitorexit
    //   111: aload_1
    //   112: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	113	0	this	NativeViewHierarchyManager
    //   0	113	1	paramThemedReactContext	ThemedReactContext
    //   0	113	2	paramInt	int
    //   0	113	3	paramString	String
    //   0	113	4	paramReactStylesDiffMap	ReactStylesDiffMap
    // Exception table:
    //   from	to	target	type
    //   29	48	101	java/lang/Throwable
    //   59	82	101	java/lang/Throwable
    //   87	94	101	java/lang/Throwable
    //   2	29	108	java/lang/Throwable
    //   52	56	108	java/lang/Throwable
    //   94	98	108	java/lang/Throwable
    //   102	108	108	java/lang/Throwable
  }
  
  public void dismissPopupMenu()
  {
    PopupMenu localPopupMenu = mPopupMenu;
    if (localPopupMenu != null) {
      localPopupMenu.dismiss();
    }
  }
  
  public void dispatchCommand(int paramInt1, int paramInt2, ReadableArray paramReadableArray)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      View localView = (View)mTagsToViews.get(paramInt1);
      if (localView == null)
      {
        paramReadableArray = new StringBuilder();
        paramReadableArray.append("Trying to send command to a non-existing view with tag ");
        paramReadableArray.append(paramInt1);
        FLog.e("dispatchCommand", paramReadableArray.toString());
        return;
      }
      resolveViewManager(paramInt1).receiveCommand(localView, paramInt2, paramReadableArray);
      return;
    }
    catch (Throwable paramReadableArray)
    {
      throw paramReadableArray;
    }
  }
  
  protected void dropView(View paramView)
  {
    Object localObject1 = this;
    for (;;)
    {
      Object localObject3;
      int i;
      try
      {
        UiThreadUtil.assertOnUiThread();
        localObject1 = this;
        localObject3 = mTagsToViewManagers;
        localObject2 = this;
        localObject1 = localObject2;
        localObject3 = ((SparseArray)localObject3).get(paramView.getId());
        if (localObject3 == null) {
          return;
        }
        localObject1 = localObject2;
        if (!mRootTags.get(paramView.getId()))
        {
          localObject1 = localObject2;
          ((NativeViewHierarchyManager)localObject2).resolveViewManager(paramView.getId()).onDropViewInstance(paramView);
        }
        localObject1 = localObject2;
        localObject3 = mTagsToViewManagers;
        localObject1 = localObject2;
        Object localObject4 = (ViewManager)((SparseArray)localObject3).get(paramView.getId());
        localObject3 = localObject2;
        localObject1 = localObject2;
        if ((paramView instanceof ViewGroup))
        {
          localObject3 = localObject2;
          localObject1 = localObject2;
          if ((localObject4 instanceof ViewGroupManager))
          {
            localObject1 = localObject2;
            ViewGroup localViewGroup = (ViewGroup)paramView;
            localObject1 = localObject2;
            localObject4 = (ViewGroupManager)localObject4;
            localObject1 = localObject2;
            i = ((ViewGroupManager)localObject4).getChildCount(localViewGroup) - 1;
            if (i >= 0)
            {
              localObject1 = localObject2;
              View localView = ((ViewGroupManager)localObject4).getChildAt(localViewGroup, i);
              if (localView == null)
              {
                localObject1 = localObject2;
                FLog.e(appName, "Unable to drop null child view");
                localObject3 = localObject2;
                break label318;
              }
              localObject1 = localObject2;
              SparseArray localSparseArray = mTagsToViews;
              localObject1 = localObject2;
              localObject3 = localObject2;
              if (localSparseArray.get(localView.getId()) == null) {
                break label318;
              }
              localObject1 = localObject2;
              ((NativeViewHierarchyManager)localObject2).dropView(localView);
              localObject3 = localObject2;
              break label318;
            }
            localObject1 = localObject2;
            ((ViewGroupManager)localObject4).removeAllViews(localViewGroup);
            localObject3 = localObject2;
          }
        }
        localObject1 = localObject3;
        localObject2 = mTagsToViews;
        localObject1 = localObject3;
        ((SparseArray)localObject2).remove(paramView.getId());
        localObject1 = localObject3;
        localObject2 = mTagsToViewManagers;
        localObject1 = localObject3;
        ((SparseArray)localObject2).remove(paramView.getId());
        return;
      }
      catch (Throwable paramView)
      {
        throw paramView;
      }
      label318:
      i -= 1;
      Object localObject2 = localObject3;
    }
  }
  
  public int findTargetTagForTouch(int paramInt, float paramFloat1, float paramFloat2)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      Object localObject = (View)mTagsToViews.get(paramInt);
      if (localObject != null)
      {
        paramInt = TouchTargetHelper.findTargetTagForTouch(paramFloat1, paramFloat2, (ViewGroup)localObject);
        return paramInt;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Could not find view with tag ");
      ((StringBuilder)localObject).append(paramInt);
      throw new JSApplicationIllegalArgumentException(((StringBuilder)localObject).toString());
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public AnimationRegistry getAnimationRegistry()
  {
    return mAnimationRegistry;
  }
  
  public long getInstanceHandle(int paramInt)
  {
    Object localObject = (View)mTagsToViews.get(paramInt);
    if (localObject != null)
    {
      localObject = (Long)((View)localObject).getTag(R.id.view_tag_instance_handle);
      if (localObject != null) {
        return ((Long)localObject).longValue();
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Unable to find instanceHandle for tag: ");
      ((StringBuilder)localObject).append(paramInt);
      throw new IllegalViewOperationException(((StringBuilder)localObject).toString());
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unable to find view for tag: ");
    ((StringBuilder)localObject).append(paramInt);
    throw new IllegalViewOperationException(((StringBuilder)localObject).toString());
  }
  
  public void manageChildren(int paramInt, final int[] paramArrayOfInt1, ViewAtIndex[] paramArrayOfViewAtIndex, int[] paramArrayOfInt2)
  {
    int i;
    int j;
    int k;
    try
    {
      UiThreadUtil.assertOnUiThread();
      localObject = (View)mTagsToViews.get(paramInt);
      boolean bool = localObject instanceof ViewGroup;
      if (!bool) {
        return;
      }
      localObject = (ViewGroup)localObject;
      localViewGroupManager = (ViewGroupManager)resolveViewManager(paramInt);
      i = localViewGroupManager.getChildCount((ViewGroup)localObject);
      if (paramArrayOfInt1 == null) {
        break label374;
      }
      j = paramArrayOfInt1.length - 1;
    }
    catch (Throwable paramArrayOfInt1)
    {
      Object localObject;
      final ViewGroupManager localViewGroupManager;
      int m;
      View localView;
      label193:
      throw paramArrayOfInt1;
    }
    if (k >= localViewGroupManager.getChildCount((ViewGroup)localObject))
    {
      k = i;
      if (mRootTags.get(paramInt))
      {
        m = localViewGroupManager.getChildCount((ViewGroup)localObject);
        k = i;
        if (m != 0) {}
      }
    }
    else if (k >= i)
    {
      k = i;
    }
    else
    {
      localView = localViewGroupManager.getChildAt((ViewGroup)localObject, k);
      if ((!mLayoutAnimationEnabled) || (!mLayoutAnimator.shouldAnimateLayout(localView)) || (!arrayContains(paramArrayOfInt2, localView.getId())))
      {
        localViewGroupManager.removeViewAt((ViewGroup)localObject, k);
        break label361;
        if (paramInt >= paramArrayOfViewAtIndex.length) {
          break label393;
        }
        paramArrayOfInt1 = paramArrayOfViewAtIndex[paramInt];
        localView = (View)mTagsToViews.get(mTag);
        if (localView == null) {
          break label386;
        }
        localViewGroupManager.addView((ViewGroup)localObject, localView, mIndex);
        break label386;
      }
    }
    for (;;)
    {
      if (paramInt < paramArrayOfInt2.length)
      {
        i = paramArrayOfInt2[paramInt];
        paramArrayOfInt1 = (View)mTagsToViews.get(i);
        if (paramArrayOfInt1 != null) {
          if ((mLayoutAnimationEnabled) && (mLayoutAnimator.shouldAnimateLayout(paramArrayOfInt1))) {
            mLayoutAnimator.deleteView(paramArrayOfInt1, new LayoutAnimationListener()
            {
              public void onAnimationEnd()
              {
                localViewGroupManager.removeView(val$viewToManage, paramArrayOfInt1);
                dropView(paramArrayOfInt1);
              }
            });
          } else {
            dropView(paramArrayOfInt1);
          }
        }
        paramInt += 1;
      }
      else
      {
        label361:
        label374:
        label386:
        label393:
        do
        {
          return;
          for (;;)
          {
            if (j < 0) {
              break label374;
            }
            k = paramArrayOfInt1[j];
            if (k >= 0) {
              break;
            }
            k = i;
            j -= 1;
            i = k;
          }
          i = 0;
          if (paramArrayOfViewAtIndex != null)
          {
            paramInt = 0;
            break label193;
            paramInt += 1;
            break label193;
          }
        } while (paramArrayOfInt2 == null);
        paramInt = i;
      }
    }
  }
  
  public void measure(int paramInt, int[] paramArrayOfInt)
  {
    Object localObject1 = this;
    try
    {
      UiThreadUtil.assertOnUiThread();
      localObject1 = this;
      Object localObject2 = mTagsToViews;
      NativeViewHierarchyManager localNativeViewHierarchyManager = this;
      localObject1 = localNativeViewHierarchyManager;
      localObject2 = (View)((SparseArray)localObject2).get(paramInt);
      if (localObject2 != null)
      {
        localObject1 = localNativeViewHierarchyManager;
        View localView = (View)RootViewUtil.getRootView((View)localObject2);
        if (localView != null)
        {
          localObject1 = localNativeViewHierarchyManager;
          localView.getLocationInWindow(paramArrayOfInt);
          paramInt = paramArrayOfInt[0];
          int i = paramArrayOfInt[1];
          localObject1 = localNativeViewHierarchyManager;
          ((View)localObject2).getLocationInWindow(paramArrayOfInt);
          paramArrayOfInt[0] -= paramInt;
          paramArrayOfInt[1] -= i;
          localObject1 = localNativeViewHierarchyManager;
          paramArrayOfInt[2] = ((View)localObject2).getWidth();
          localObject1 = localNativeViewHierarchyManager;
          paramArrayOfInt[3] = ((View)localObject2).getHeight();
          return;
        }
        localObject1 = localNativeViewHierarchyManager;
        paramArrayOfInt = new StringBuilder();
        localObject1 = localNativeViewHierarchyManager;
        paramArrayOfInt.append("Native view ");
        localObject1 = localNativeViewHierarchyManager;
        paramArrayOfInt.append(paramInt);
        localObject1 = localNativeViewHierarchyManager;
        paramArrayOfInt.append(" is no longer on screen");
        localObject1 = localNativeViewHierarchyManager;
        throw new NoSuchNativeViewException(paramArrayOfInt.toString());
      }
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt = new StringBuilder();
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt.append("No native view for ");
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt.append(paramInt);
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt.append(" currently exists");
      localObject1 = localNativeViewHierarchyManager;
      throw new NoSuchNativeViewException(paramArrayOfInt.toString());
    }
    catch (Throwable paramArrayOfInt)
    {
      throw paramArrayOfInt;
    }
  }
  
  public void measureInWindow(int paramInt, int[] paramArrayOfInt)
  {
    Object localObject1 = this;
    try
    {
      UiThreadUtil.assertOnUiThread();
      localObject1 = this;
      Object localObject2 = mTagsToViews;
      NativeViewHierarchyManager localNativeViewHierarchyManager = this;
      localObject1 = localNativeViewHierarchyManager;
      localObject2 = (View)((SparseArray)localObject2).get(paramInt);
      if (localObject2 != null)
      {
        localObject1 = localNativeViewHierarchyManager;
        ((View)localObject2).getLocationOnScreen(paramArrayOfInt);
        localObject1 = localNativeViewHierarchyManager;
        Resources localResources = ((View)localObject2).getContext().getResources();
        localObject1 = localNativeViewHierarchyManager;
        paramInt = localResources.getIdentifier("status_bar_height", "dimen", "android");
        if (paramInt > 0)
        {
          localObject1 = localNativeViewHierarchyManager;
          paramInt = (int)localResources.getDimension(paramInt);
          paramArrayOfInt[1] -= paramInt;
        }
        localObject1 = localNativeViewHierarchyManager;
        paramArrayOfInt[2] = ((View)localObject2).getWidth();
        localObject1 = localNativeViewHierarchyManager;
        paramArrayOfInt[3] = ((View)localObject2).getHeight();
        return;
      }
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt = new StringBuilder();
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt.append("No native view for ");
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt.append(paramInt);
      localObject1 = localNativeViewHierarchyManager;
      paramArrayOfInt.append(" currently exists");
      localObject1 = localNativeViewHierarchyManager;
      throw new NoSuchNativeViewException(paramArrayOfInt.toString());
    }
    catch (Throwable paramArrayOfInt)
    {
      throw paramArrayOfInt;
    }
  }
  
  public void removeRootView(int paramInt)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      if (!mRootTags.get(paramInt))
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("View with tag ");
        localStringBuilder.append(paramInt);
        localStringBuilder.append(" is not registered as a root view");
        SoftAssertions.assertUnreachable(localStringBuilder.toString());
      }
      dropView((View)mTagsToViews.get(paramInt));
      mRootTags.delete(paramInt);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final View resolveView(int paramInt)
  {
    try
    {
      Object localObject = (View)mTagsToViews.get(paramInt);
      if (localObject != null) {
        return localObject;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Trying to resolve view with tag ");
      ((StringBuilder)localObject).append(paramInt);
      ((StringBuilder)localObject).append(" which doesn't exist");
      throw new IllegalViewOperationException(((StringBuilder)localObject).toString());
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final ViewManager resolveViewManager(int paramInt)
  {
    try
    {
      Object localObject = (ViewManager)mTagsToViewManagers.get(paramInt);
      if (localObject != null) {
        return localObject;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("ViewManager for tag ");
      ((StringBuilder)localObject).append(paramInt);
      ((StringBuilder)localObject).append(" could not be found");
      throw new IllegalViewOperationException(((StringBuilder)localObject).toString());
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void sendAccessibilityEvent(int paramInt1, int paramInt2)
  {
    Object localObject = (View)mTagsToViews.get(paramInt1);
    if (localObject != null)
    {
      AccessibilityHelper.sendAccessibilityEvent((View)localObject, paramInt2);
      return;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Could not find view with tag ");
    ((StringBuilder)localObject).append(paramInt1);
    throw new JSApplicationIllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  public void setChildren(int paramInt, ReadableArray paramReadableArray)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      ViewGroup localViewGroup = (ViewGroup)mTagsToViews.get(paramInt);
      ViewGroupManager localViewGroupManager = (ViewGroupManager)resolveViewManager(paramInt);
      paramInt = 0;
      while (paramInt < paramReadableArray.size())
      {
        Object localObject = (View)mTagsToViews.get(paramReadableArray.getInt(paramInt));
        if (localObject != null)
        {
          localViewGroupManager.addView(localViewGroup, (View)localObject, paramInt);
          paramInt += 1;
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Trying to add unknown view tag: ");
          ((StringBuilder)localObject).append(paramReadableArray.getInt(paramInt));
          ((StringBuilder)localObject).append("\n detail: ");
          ((StringBuilder)localObject).append(constructSetChildrenErrorMessage(localViewGroup, localViewGroupManager, paramReadableArray));
          throw new IllegalViewOperationException(((StringBuilder)localObject).toString());
        }
      }
      return;
    }
    catch (Throwable paramReadableArray)
    {
      throw paramReadableArray;
    }
  }
  
  public void setJSResponder(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (!paramBoolean) {}
    try
    {
      mJSResponderHandler.setJSResponder(paramInt2, null);
      return;
    }
    catch (Throwable localThrowable)
    {
      View localView;
      StringBuilder localStringBuilder;
      throw localThrowable;
    }
    localView = (View)mTagsToViews.get(paramInt1);
    if ((paramInt2 != paramInt1) && ((localView instanceof ViewParent)))
    {
      mJSResponderHandler.setJSResponder(paramInt2, (ViewParent)localView);
      return;
    }
    if (mRootTags.get(paramInt1))
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Cannot block native responder on ");
      localStringBuilder.append(paramInt1);
      localStringBuilder.append(" that is a root view");
      SoftAssertions.assertUnreachable(localStringBuilder.toString());
    }
    mJSResponderHandler.setJSResponder(paramInt2, localView.getParent());
  }
  
  public void setLayoutAnimationEnabled(boolean paramBoolean)
  {
    mLayoutAnimationEnabled = paramBoolean;
  }
  
  public void showPopupMenu(int paramInt, ReadableArray paramReadableArray, Callback paramCallback1, Callback paramCallback2)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      View localView = (View)mTagsToViews.get(paramInt);
      if (localView == null)
      {
        paramReadableArray = new StringBuilder();
        paramReadableArray.append("Can't display popup. Could not find view with tag ");
        paramReadableArray.append(paramInt);
        paramCallback2.invoke(new Object[] { paramReadableArray.toString() });
        return;
      }
      mPopupMenu = new PopupMenu(getReactContextForView(paramInt), localView);
      paramCallback2 = mPopupMenu.getMenu();
      paramInt = 0;
      while (paramInt < paramReadableArray.size())
      {
        paramCallback2.add(0, 0, paramInt, paramReadableArray.getString(paramInt));
        paramInt += 1;
      }
      paramReadableArray = new PopupMenuCallbackHandler(paramCallback1, null);
      mPopupMenu.setOnMenuItemClickListener(paramReadableArray);
      mPopupMenu.setOnDismissListener(paramReadableArray);
      mPopupMenu.show();
      return;
    }
    catch (Throwable paramReadableArray)
    {
      throw paramReadableArray;
    }
  }
  
  void startAnimationForNativeView(int paramInt, Animation paramAnimation, final Callback paramCallback)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      View localView = (View)mTagsToViews.get(paramInt);
      final int i = paramAnimation.getAnimationID();
      if (localView != null)
      {
        paramAnimation.setAnimationListener(new AnimationListener()
        {
          public void onCancel()
          {
            Assertions.assertNotNull(mAnimationRegistry.removeAnimation(i), "Animation was already removed somehow!");
            Callback localCallback = paramCallback;
            if (localCallback != null) {
              localCallback.invoke(new Object[] { Boolean.valueOf(false) });
            }
          }
          
          public void onFinished()
          {
            Assertions.assertNotNull(mAnimationRegistry.removeAnimation(i), "Animation was already removed somehow!");
            Callback localCallback = paramCallback;
            if (localCallback != null) {
              localCallback.invoke(new Object[] { Boolean.valueOf(true) });
            }
          }
        });
        paramAnimation.start(localView);
        return;
      }
      paramAnimation = new StringBuilder();
      paramAnimation.append("View with tag ");
      paramAnimation.append(paramInt);
      paramAnimation.append(" not found");
      throw new IllegalViewOperationException(paramAnimation.toString());
    }
    catch (Throwable paramAnimation)
    {
      throw paramAnimation;
    }
  }
  
  public void updateInstanceHandle(int paramInt, long paramLong)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      try
      {
        updateInstanceHandle(resolveView(paramInt), paramLong);
      }
      catch (IllegalViewOperationException localIllegalViewOperationException)
      {
        String str = appName;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Unable to update properties for view tag ");
        localStringBuilder.append(paramInt);
        FLog.e(str, localStringBuilder.toString(), localIllegalViewOperationException);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void updateLayout(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
  {
    label186:
    for (;;)
    {
      try
      {
        UiThreadUtil.assertOnUiThread();
        SystraceMessage.beginSection(0L, "NativeViewHierarchyManager_updateLayout").attribute("parentTag", paramInt1).attribute("tag", paramInt2).flush();
        try
        {
          View localView = resolveView(paramInt2);
          localView.measure(View.MeasureSpec.makeMeasureSpec(paramInt5, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt6, 1073741824));
          Object localObject1 = localView.getParent();
          if ((localObject1 instanceof RootView)) {
            ((ViewParent)localObject1).requestLayout();
          }
          if (!mRootTags.get(paramInt1))
          {
            localObject1 = (ViewManager)mTagsToViewManagers.get(paramInt1);
            if (!(localObject1 instanceof ViewGroupManager)) {
              break label186;
            }
            localObject1 = (ViewGroupManager)localObject1;
            if ((localObject1 != null) && (!((ViewGroupManager)localObject1).needsCustomLayoutForChildren())) {
              updateLayout(localView, paramInt3, paramInt4, paramInt5, paramInt6);
            }
          }
          else
          {
            updateLayout(localView, paramInt3, paramInt4, paramInt5, paramInt6);
          }
          Systrace.endSection(0L);
          return;
        }
        catch (Throwable localThrowable1)
        {
          Systrace.endSection(0L);
          throw localThrowable1;
        }
        Object localObject2 = null;
      }
      catch (Throwable localThrowable2)
      {
        throw localThrowable2;
      }
    }
  }
  
  public void updateProperties(int paramInt, ReactStylesDiffMap paramReactStylesDiffMap)
  {
    try
    {
      UiThreadUtil.assertOnUiThread();
      try
      {
        localObject1 = resolveViewManager(paramInt);
        localObject2 = resolveView(paramInt);
        if (paramReactStylesDiffMap != null) {
          ((ViewManager)localObject1).updateProperties((View)localObject2, paramReactStylesDiffMap);
        }
      }
      catch (IllegalViewOperationException paramReactStylesDiffMap)
      {
        Object localObject1 = appName;
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Unable to update properties for view tag ");
        ((StringBuilder)localObject2).append(paramInt);
        FLog.e((String)localObject1, ((StringBuilder)localObject2).toString(), paramReactStylesDiffMap);
      }
      return;
    }
    catch (Throwable paramReactStylesDiffMap)
    {
      throw paramReactStylesDiffMap;
    }
  }
  
  /* Error */
  public void updateViewExtraData(int paramInt, Object paramObject)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 192	com/facebook/react/bridge/UiThreadUtil:assertOnUiThread	()V
    //   5: aload_0
    //   6: iload_1
    //   7: invokevirtual 328	com/facebook/react/uimanager/NativeViewHierarchyManager:resolveViewManager	(I)Lcom/facebook/react/uimanager/ViewManager;
    //   10: astore_3
    //   11: aload_3
    //   12: aload_0
    //   13: iload_1
    //   14: invokevirtual 571	com/facebook/react/uimanager/NativeViewHierarchyManager:resolveView	(I)Landroid/view/View;
    //   17: aload_2
    //   18: invokevirtual 609	com/facebook/react/uimanager/ViewManager:updateExtraData	(Landroid/view/View;Ljava/lang/Object;)V
    //   21: aload_0
    //   22: monitorexit
    //   23: return
    //   24: astore_2
    //   25: aload_0
    //   26: monitorexit
    //   27: aload_2
    //   28: athrow
    //   29: astore_2
    //   30: goto -9 -> 21
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	33	0	this	NativeViewHierarchyManager
    //   0	33	1	paramInt	int
    //   0	33	2	paramObject	Object
    //   10	2	3	localViewManager	ViewManager
    // Exception table:
    //   from	to	target	type
    //   2	11	24	java/lang/Throwable
    //   11	21	24	java/lang/Throwable
    //   11	21	29	com/facebook/react/uimanager/IllegalViewOperationException
  }
  
  private static class PopupMenuCallbackHandler
    implements PopupMenu.OnDismissListener, PopupMenu.OnMenuItemClickListener
  {
    boolean mConsumed = false;
    final Callback mSuccess;
    
    private PopupMenuCallbackHandler(Callback paramCallback)
    {
      mSuccess = paramCallback;
    }
    
    public void onDismiss(PopupMenu paramPopupMenu)
    {
      if (!mConsumed)
      {
        mSuccess.invoke(new Object[] { "dismissed" });
        mConsumed = true;
      }
    }
    
    public boolean onMenuItemClick(MenuItem paramMenuItem)
    {
      if (!mConsumed)
      {
        mSuccess.invoke(new Object[] { "itemSelected", Integer.valueOf(paramMenuItem.getOrder()) });
        mConsumed = true;
        return true;
      }
      return false;
    }
  }
}
