package com.facebook.yoga2;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class YogaNode
  implements Cloneable
{
  private static final int BORDER = 4;
  private static final int MARGIN = 1;
  private static final int PADDING = 2;
  private YogaBaselineFunction mBaselineFunction;
  private float mBorderBottom = 0.0F;
  private float mBorderLeft = 0.0F;
  private float mBorderRight = 0.0F;
  private float mBorderTop = 0.0F;
  private List<YogaNode> mChildren;
  private Object mData;
  private boolean mDoesLegacyStretchFlagAffectsLayout = false;
  private int mEdgeSetFlag = 0;
  private boolean mHasNewLayout = true;
  private boolean mHasSetPosition = false;
  private float mHeight = 1.0E21F;
  private int mLayoutDirection = 0;
  private float mLeft = 1.0E21F;
  private float mMarginBottom = 0.0F;
  private float mMarginLeft = 0.0F;
  private float mMarginRight = 0.0F;
  private float mMarginTop = 0.0F;
  private YogaMeasureFunction mMeasureFunction;
  private long mNativePointer;
  private YogaNode mOwner;
  private float mPaddingBottom = 0.0F;
  private float mPaddingLeft = 0.0F;
  private float mPaddingRight = 0.0F;
  private float mPaddingTop = 0.0F;
  private float mTop = 1.0E21F;
  private float mWidth = 1.0E21F;
  
  static
  {
    YogaApp.loadLib();
  }
  
  public YogaNode()
  {
    mNativePointer = jni_YGNodeNew();
    if (mNativePointer != 0L) {
      return;
    }
    throw new IllegalStateException("Failed to allocate native memory");
  }
  
  public YogaNode(YogaConfig paramYogaConfig)
  {
    mNativePointer = jni_YGNodeNewWithConfig(mNativePointer);
    if (mNativePointer != 0L) {
      return;
    }
    throw new IllegalStateException("Failed to allocate native memory");
  }
  
  private void clearChildren()
  {
    mChildren = null;
    jni_YGNodeClearChildren(mNativePointer);
  }
  
  private native void jni_YGNodeCalculateLayout(long paramLong, float paramFloat1, float paramFloat2);
  
  private native void jni_YGNodeClearChildren(long paramLong);
  
  private native long jni_YGNodeClone(long paramLong, Object paramObject);
  
  private native void jni_YGNodeCopyStyle(long paramLong1, long paramLong2);
  
  private static native void jni_YGNodeFree(long paramLong);
  
  static native int jni_YGNodeGetInstanceCount();
  
  private native void jni_YGNodeInsertChild(long paramLong1, long paramLong2, int paramInt);
  
  private native void jni_YGNodeInsertSharedChild(long paramLong1, long paramLong2, int paramInt);
  
  private native boolean jni_YGNodeIsDirty(long paramLong);
  
  private native void jni_YGNodeMarkDirty(long paramLong);
  
  private native void jni_YGNodeMarkDirtyAndPropogateToDescendants(long paramLong);
  
  private native long jni_YGNodeNew();
  
  private native long jni_YGNodeNewWithConfig(long paramLong);
  
  private native void jni_YGNodePrint(long paramLong);
  
  private native void jni_YGNodeRemoveChild(long paramLong1, long paramLong2);
  
  private native void jni_YGNodeReset(long paramLong);
  
  private native void jni_YGNodeSetHasBaselineFunc(long paramLong, boolean paramBoolean);
  
  private native void jni_YGNodeSetHasMeasureFunc(long paramLong, boolean paramBoolean);
  
  private native void jni_YGNodeSetOwner(long paramLong1, long paramLong2);
  
  private native int jni_YGNodeStyleGetAlignContent(long paramLong);
  
  private native int jni_YGNodeStyleGetAlignItems(long paramLong);
  
  private native int jni_YGNodeStyleGetAlignSelf(long paramLong);
  
  private native float jni_YGNodeStyleGetAspectRatio(long paramLong);
  
  private native float jni_YGNodeStyleGetBorder(long paramLong, int paramInt);
  
  private native int jni_YGNodeStyleGetDirection(long paramLong);
  
  private native int jni_YGNodeStyleGetDisplay(long paramLong);
  
  private native Object jni_YGNodeStyleGetFlexBasis(long paramLong);
  
  private native int jni_YGNodeStyleGetFlexDirection(long paramLong);
  
  private native float jni_YGNodeStyleGetFlexGrow(long paramLong);
  
  private native float jni_YGNodeStyleGetFlexShrink(long paramLong);
  
  private native Object jni_YGNodeStyleGetHeight(long paramLong);
  
  private native int jni_YGNodeStyleGetJustifyContent(long paramLong);
  
  private native Object jni_YGNodeStyleGetMargin(long paramLong, int paramInt);
  
  private native Object jni_YGNodeStyleGetMaxHeight(long paramLong);
  
  private native Object jni_YGNodeStyleGetMaxWidth(long paramLong);
  
  private native Object jni_YGNodeStyleGetMinHeight(long paramLong);
  
  private native Object jni_YGNodeStyleGetMinWidth(long paramLong);
  
  private native int jni_YGNodeStyleGetOverflow(long paramLong);
  
  private native Object jni_YGNodeStyleGetPadding(long paramLong, int paramInt);
  
  private native Object jni_YGNodeStyleGetPosition(long paramLong, int paramInt);
  
  private native int jni_YGNodeStyleGetPositionType(long paramLong);
  
  private native Object jni_YGNodeStyleGetWidth(long paramLong);
  
  private native void jni_YGNodeStyleSetAlignContent(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetAlignItems(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetAlignSelf(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetAspectRatio(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetBorder(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetDirection(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetDisplay(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetFlex(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetFlexBasis(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetFlexBasisAuto(long paramLong);
  
  private native void jni_YGNodeStyleSetFlexBasisPercent(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetFlexDirection(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetFlexGrow(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetFlexShrink(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetFlexWrap(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetHeight(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetHeightAuto(long paramLong);
  
  private native void jni_YGNodeStyleSetHeightPercent(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetJustifyContent(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetMargin(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetMarginAuto(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetMarginPercent(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetMaxHeight(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMaxHeightPercent(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMaxWidth(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMaxWidthPercent(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMinHeight(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMinHeightPercent(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMinWidth(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetMinWidthPercent(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetOverflow(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetPadding(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetPaddingPercent(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetPosition(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetPositionPercent(long paramLong, int paramInt, float paramFloat);
  
  private native void jni_YGNodeStyleSetPositionType(long paramLong, int paramInt);
  
  private native void jni_YGNodeStyleSetWidth(long paramLong, float paramFloat);
  
  private native void jni_YGNodeStyleSetWidthAuto(long paramLong);
  
  private native void jni_YGNodeStyleSetWidthPercent(long paramLong, float paramFloat);
  
  private final long replaceChild(YogaNode paramYogaNode, int paramInt)
  {
    List localList = mChildren;
    if (localList != null)
    {
      localList.remove(paramInt);
      mChildren.add(paramInt, paramYogaNode);
      mOwner = this;
      return mNativePointer;
    }
    throw new IllegalStateException("Cannot replace child. YogaNode does not have children");
  }
  
  public void addChildAt(YogaNode paramYogaNode, int paramInt)
  {
    if (mOwner == null)
    {
      if (mChildren == null) {
        mChildren = new ArrayList(4);
      }
      mChildren.add(paramInt, paramYogaNode);
      mOwner = this;
      jni_YGNodeInsertChild(mNativePointer, mNativePointer, paramInt);
      return;
    }
    throw new IllegalStateException("Child already has a parent, it must be removed first.");
  }
  
  public void addSharedChildAt(YogaNode paramYogaNode, int paramInt)
  {
    if (mChildren == null) {
      mChildren = new ArrayList(4);
    }
    mChildren.add(paramInt, paramYogaNode);
    mOwner = null;
    jni_YGNodeInsertSharedChild(mNativePointer, mNativePointer, paramInt);
  }
  
  public final float baseline(float paramFloat1, float paramFloat2)
  {
    return mBaselineFunction.baseline(this, paramFloat1, paramFloat2);
  }
  
  public void calculateLayout(float paramFloat1, float paramFloat2)
  {
    jni_YGNodeCalculateLayout(mNativePointer, paramFloat1, paramFloat2);
  }
  
  public YogaNode clone()
  {
    YogaNode localYogaNode;
    try
    {
      Object localObject1 = super.clone();
      localYogaNode = (YogaNode)localObject1;
      long l1 = mNativePointer;
      l1 = jni_YGNodeClone(l1, localYogaNode);
      boolean bool;
      Object localObject2;
      if (mChildren != null)
      {
        localObject1 = mChildren;
        localObject1 = ((List)localObject1).iterator();
        for (;;)
        {
          bool = ((Iterator)localObject1).hasNext();
          if (!bool) {
            break;
          }
          localObject2 = ((Iterator)localObject1).next();
          localObject2 = (YogaNode)localObject2;
          long l2 = mNativePointer;
          ((YogaNode)localObject2).jni_YGNodeSetOwner(l2, 0L);
          mOwner = null;
        }
      }
      mNativePointer = l1;
      mOwner = null;
      if (mChildren != null)
      {
        localObject1 = (ArrayList)mChildren;
        localObject1 = ((ArrayList)localObject1).clone();
        localObject1 = (List)localObject1;
      }
      else
      {
        localObject1 = null;
      }
      mChildren = ((List)localObject1);
      if (mChildren != null)
      {
        localObject1 = mChildren;
        localObject1 = ((List)localObject1).iterator();
        for (;;)
        {
          bool = ((Iterator)localObject1).hasNext();
          if (!bool) {
            break;
          }
          localObject2 = ((Iterator)localObject1).next();
          mOwner = null;
        }
      }
      return localYogaNode;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      throw new RuntimeException(localCloneNotSupportedException);
    }
    return localYogaNode;
  }
  
  public YogaNode cloneWithNewChildren()
  {
    try
    {
      Object localObject = super.clone();
      localObject = (YogaNode)localObject;
      long l = mNativePointer;
      l = jni_YGNodeClone(l, localObject);
      mOwner = null;
      mNativePointer = l;
      ((YogaNode)localObject).clearChildren();
      return localObject;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      throw new RuntimeException(localCloneNotSupportedException);
    }
  }
  
  public void copyStyle(YogaNode paramYogaNode)
  {
    jni_YGNodeCopyStyle(mNativePointer, mNativePointer);
  }
  
  public void dirty()
  {
    jni_YGNodeMarkDirty(mNativePointer);
  }
  
  public void dirtyAllDescendants()
  {
    jni_YGNodeMarkDirtyAndPropogateToDescendants(mNativePointer);
  }
  
  protected void finalize()
    throws Throwable
  {
    try
    {
      freeNatives();
      super.finalize();
      return;
    }
    catch (Throwable localThrowable)
    {
      super.finalize();
      throw localThrowable;
    }
  }
  
  public void freeNatives()
  {
    long l = mNativePointer;
    if (l > 0L)
    {
      mNativePointer = 0L;
      jni_YGNodeFree(l);
    }
  }
  
  public YogaAlign getAlignContent()
  {
    return YogaAlign.fromInt(jni_YGNodeStyleGetAlignContent(mNativePointer));
  }
  
  public YogaAlign getAlignItems()
  {
    return YogaAlign.fromInt(jni_YGNodeStyleGetAlignItems(mNativePointer));
  }
  
  public YogaAlign getAlignSelf()
  {
    return YogaAlign.fromInt(jni_YGNodeStyleGetAlignSelf(mNativePointer));
  }
  
  public float getAspectRatio()
  {
    return jni_YGNodeStyleGetAspectRatio(mNativePointer);
  }
  
  public float getBorder(YogaEdge paramYogaEdge)
  {
    if ((mEdgeSetFlag & 0x4) != 4) {
      return 1.0E21F;
    }
    return jni_YGNodeStyleGetBorder(mNativePointer, paramYogaEdge.intValue());
  }
  
  public YogaNode getChildAt(int paramInt)
  {
    List localList = mChildren;
    if (localList != null) {
      return (YogaNode)localList.get(paramInt);
    }
    throw new IllegalStateException("YogaNode does not have children");
  }
  
  public int getChildCount()
  {
    List localList = mChildren;
    if (localList == null) {
      return 0;
    }
    return localList.size();
  }
  
  public Object getData()
  {
    return mData;
  }
  
  public YogaDisplay getDisplay()
  {
    return YogaDisplay.fromInt(jni_YGNodeStyleGetDisplay(mNativePointer));
  }
  
  public boolean getDoesLegacyStretchFlagAffectsLayout()
  {
    return mDoesLegacyStretchFlagAffectsLayout;
  }
  
  public YogaValue getFlexBasis()
  {
    return (YogaValue)jni_YGNodeStyleGetFlexBasis(mNativePointer);
  }
  
  public YogaFlexDirection getFlexDirection()
  {
    return YogaFlexDirection.fromInt(jni_YGNodeStyleGetFlexDirection(mNativePointer));
  }
  
  public float getFlexGrow()
  {
    return jni_YGNodeStyleGetFlexGrow(mNativePointer);
  }
  
  public float getFlexShrink()
  {
    return jni_YGNodeStyleGetFlexShrink(mNativePointer);
  }
  
  public YogaValue getHeight()
  {
    return (YogaValue)jni_YGNodeStyleGetHeight(mNativePointer);
  }
  
  public YogaJustify getJustifyContent()
  {
    return YogaJustify.fromInt(jni_YGNodeStyleGetJustifyContent(mNativePointer));
  }
  
  public float getLayoutBorder(YogaEdge paramYogaEdge)
  {
    switch (1.$SwitchMap$com$facebook$yoga2$YogaEdge[paramYogaEdge.ordinal()])
    {
    default: 
      throw new IllegalArgumentException("Cannot get layout border of multi-edge shorthands");
    case 6: 
      if (getLayoutDirection() == YogaDirection.None) {
        return mBorderLeft;
      }
      return mBorderRight;
    case 5: 
      if (getLayoutDirection() == YogaDirection.None) {
        return mBorderRight;
      }
      return mBorderLeft;
    case 4: 
      return mBorderBottom;
    case 3: 
      return mBorderRight;
    case 2: 
      return mBorderTop;
    }
    return mBorderLeft;
  }
  
  public YogaDirection getLayoutDirection()
  {
    return YogaDirection.fromInt(mLayoutDirection);
  }
  
  public float getLayoutHeight()
  {
    return mHeight;
  }
  
  public float getLayoutMargin(YogaEdge paramYogaEdge)
  {
    switch (1.$SwitchMap$com$facebook$yoga2$YogaEdge[paramYogaEdge.ordinal()])
    {
    default: 
      throw new IllegalArgumentException("Cannot get layout margins of multi-edge shorthands");
    case 6: 
      if (getLayoutDirection() == YogaDirection.None) {
        return mMarginLeft;
      }
      return mMarginRight;
    case 5: 
      if (getLayoutDirection() == YogaDirection.None) {
        return mMarginRight;
      }
      return mMarginLeft;
    case 4: 
      return mMarginBottom;
    case 3: 
      return mMarginRight;
    case 2: 
      return mMarginTop;
    }
    return mMarginLeft;
  }
  
  public float getLayoutPadding(YogaEdge paramYogaEdge)
  {
    switch (1.$SwitchMap$com$facebook$yoga2$YogaEdge[paramYogaEdge.ordinal()])
    {
    default: 
      throw new IllegalArgumentException("Cannot get layout paddings of multi-edge shorthands");
    case 6: 
      if (getLayoutDirection() == YogaDirection.None) {
        return mPaddingLeft;
      }
      return mPaddingRight;
    case 5: 
      if (getLayoutDirection() == YogaDirection.None) {
        return mPaddingRight;
      }
      return mPaddingLeft;
    case 4: 
      return mPaddingBottom;
    case 3: 
      return mPaddingRight;
    case 2: 
      return mPaddingTop;
    }
    return mPaddingLeft;
  }
  
  public float getLayoutWidth()
  {
    return mWidth;
  }
  
  public float getLayoutX()
  {
    return mLeft;
  }
  
  public float getLayoutY()
  {
    return mTop;
  }
  
  public YogaValue getMargin(YogaEdge paramYogaEdge)
  {
    if ((mEdgeSetFlag & 0x1) != 1) {
      return YogaValue.UNDEFINED;
    }
    return (YogaValue)jni_YGNodeStyleGetMargin(mNativePointer, paramYogaEdge.intValue());
  }
  
  public YogaValue getMaxHeight()
  {
    return (YogaValue)jni_YGNodeStyleGetMaxHeight(mNativePointer);
  }
  
  public YogaValue getMaxWidth()
  {
    return (YogaValue)jni_YGNodeStyleGetMaxWidth(mNativePointer);
  }
  
  public YogaValue getMinHeight()
  {
    return (YogaValue)jni_YGNodeStyleGetMinHeight(mNativePointer);
  }
  
  public YogaValue getMinWidth()
  {
    return (YogaValue)jni_YGNodeStyleGetMinWidth(mNativePointer);
  }
  
  public YogaOverflow getOverflow()
  {
    return YogaOverflow.fromInt(jni_YGNodeStyleGetOverflow(mNativePointer));
  }
  
  public YogaNode getOwner()
  {
    return mOwner;
  }
  
  public YogaValue getPadding(YogaEdge paramYogaEdge)
  {
    if ((mEdgeSetFlag & 0x2) != 2) {
      return YogaValue.UNDEFINED;
    }
    return (YogaValue)jni_YGNodeStyleGetPadding(mNativePointer, paramYogaEdge.intValue());
  }
  
  public YogaNode getParent()
  {
    return getOwner();
  }
  
  public YogaValue getPosition(YogaEdge paramYogaEdge)
  {
    if (!mHasSetPosition) {
      return YogaValue.UNDEFINED;
    }
    return (YogaValue)jni_YGNodeStyleGetPosition(mNativePointer, paramYogaEdge.intValue());
  }
  
  public YogaPositionType getPositionType()
  {
    return YogaPositionType.fromInt(jni_YGNodeStyleGetPositionType(mNativePointer));
  }
  
  public YogaDirection getStyleDirection()
  {
    return YogaDirection.fromInt(jni_YGNodeStyleGetDirection(mNativePointer));
  }
  
  public YogaValue getWidth()
  {
    return (YogaValue)jni_YGNodeStyleGetWidth(mNativePointer);
  }
  
  public boolean hasNewLayout()
  {
    return mHasNewLayout;
  }
  
  public int indexOf(YogaNode paramYogaNode)
  {
    List localList = mChildren;
    if (localList == null) {
      return -1;
    }
    return localList.indexOf(paramYogaNode);
  }
  
  public boolean isDirty()
  {
    return jni_YGNodeIsDirty(mNativePointer);
  }
  
  public boolean isMeasureDefined()
  {
    return mMeasureFunction != null;
  }
  
  public void markLayoutSeen()
  {
    mHasNewLayout = false;
  }
  
  public final long measure(float paramFloat1, int paramInt1, float paramFloat2, int paramInt2)
  {
    if (isMeasureDefined()) {
      return mMeasureFunction.measure(this, paramFloat1, YogaMeasureMode.fromInt(paramInt1), paramFloat2, YogaMeasureMode.fromInt(paramInt2));
    }
    throw new RuntimeException("Measure function isn't defined!");
  }
  
  public void print()
  {
    jni_YGNodePrint(mNativePointer);
  }
  
  public YogaNode removeChildAt(int paramInt)
  {
    Object localObject = mChildren;
    if (localObject != null)
    {
      localObject = (YogaNode)((List)localObject).remove(paramInt);
      mOwner = null;
      jni_YGNodeRemoveChild(mNativePointer, mNativePointer);
      return localObject;
    }
    throw new IllegalStateException("Trying to remove a child of a YogaNode that does not have children");
  }
  
  public void reset()
  {
    mEdgeSetFlag = 0;
    mHasSetPosition = false;
    mHasNewLayout = true;
    mWidth = 1.0E21F;
    mHeight = 1.0E21F;
    mTop = 1.0E21F;
    mLeft = 1.0E21F;
    mMarginLeft = 0.0F;
    mMarginTop = 0.0F;
    mMarginRight = 0.0F;
    mMarginBottom = 0.0F;
    mPaddingLeft = 0.0F;
    mPaddingTop = 0.0F;
    mPaddingRight = 0.0F;
    mPaddingBottom = 0.0F;
    mBorderLeft = 0.0F;
    mBorderTop = 0.0F;
    mBorderRight = 0.0F;
    mBorderBottom = 0.0F;
    mLayoutDirection = 0;
    mMeasureFunction = null;
    mBaselineFunction = null;
    mData = null;
    mDoesLegacyStretchFlagAffectsLayout = false;
    jni_YGNodeReset(mNativePointer);
  }
  
  public void setAlignContent(YogaAlign paramYogaAlign)
  {
    jni_YGNodeStyleSetAlignContent(mNativePointer, paramYogaAlign.intValue());
  }
  
  public void setAlignItems(YogaAlign paramYogaAlign)
  {
    jni_YGNodeStyleSetAlignItems(mNativePointer, paramYogaAlign.intValue());
  }
  
  public void setAlignSelf(YogaAlign paramYogaAlign)
  {
    jni_YGNodeStyleSetAlignSelf(mNativePointer, paramYogaAlign.intValue());
  }
  
  public void setAspectRatio(float paramFloat)
  {
    jni_YGNodeStyleSetAspectRatio(mNativePointer, paramFloat);
  }
  
  public void setBaselineFunction(YogaBaselineFunction paramYogaBaselineFunction)
  {
    mBaselineFunction = paramYogaBaselineFunction;
    long l = mNativePointer;
    boolean bool;
    if (paramYogaBaselineFunction != null) {
      bool = true;
    } else {
      bool = false;
    }
    jni_YGNodeSetHasBaselineFunc(l, bool);
  }
  
  public void setBorder(YogaEdge paramYogaEdge, float paramFloat)
  {
    mEdgeSetFlag |= 0x4;
    jni_YGNodeStyleSetBorder(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setData(Object paramObject)
  {
    mData = paramObject;
  }
  
  public void setDirection(YogaDirection paramYogaDirection)
  {
    jni_YGNodeStyleSetDirection(mNativePointer, paramYogaDirection.intValue());
  }
  
  public void setDisplay(YogaDisplay paramYogaDisplay)
  {
    jni_YGNodeStyleSetDisplay(mNativePointer, paramYogaDisplay.intValue());
  }
  
  public void setFlex(float paramFloat)
  {
    jni_YGNodeStyleSetFlex(mNativePointer, paramFloat);
  }
  
  public void setFlexBasis(float paramFloat)
  {
    jni_YGNodeStyleSetFlexBasis(mNativePointer, paramFloat);
  }
  
  public void setFlexBasisAuto()
  {
    jni_YGNodeStyleSetFlexBasisAuto(mNativePointer);
  }
  
  public void setFlexBasisPercent(float paramFloat)
  {
    jni_YGNodeStyleSetFlexBasisPercent(mNativePointer, paramFloat);
  }
  
  public void setFlexDirection(YogaFlexDirection paramYogaFlexDirection)
  {
    jni_YGNodeStyleSetFlexDirection(mNativePointer, paramYogaFlexDirection.intValue());
  }
  
  public void setFlexGrow(float paramFloat)
  {
    jni_YGNodeStyleSetFlexGrow(mNativePointer, paramFloat);
  }
  
  public void setFlexShrink(float paramFloat)
  {
    jni_YGNodeStyleSetFlexShrink(mNativePointer, paramFloat);
  }
  
  public void setHeight(float paramFloat)
  {
    jni_YGNodeStyleSetHeight(mNativePointer, paramFloat);
  }
  
  public void setHeightAuto()
  {
    jni_YGNodeStyleSetHeightAuto(mNativePointer);
  }
  
  public void setHeightPercent(float paramFloat)
  {
    jni_YGNodeStyleSetHeightPercent(mNativePointer, paramFloat);
  }
  
  public void setJustifyContent(YogaJustify paramYogaJustify)
  {
    jni_YGNodeStyleSetJustifyContent(mNativePointer, paramYogaJustify.intValue());
  }
  
  public void setMargin(YogaEdge paramYogaEdge, float paramFloat)
  {
    mEdgeSetFlag |= 0x1;
    jni_YGNodeStyleSetMargin(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setMarginAuto(YogaEdge paramYogaEdge)
  {
    mEdgeSetFlag |= 0x1;
    jni_YGNodeStyleSetMarginAuto(mNativePointer, paramYogaEdge.intValue());
  }
  
  public void setMarginPercent(YogaEdge paramYogaEdge, float paramFloat)
  {
    mEdgeSetFlag |= 0x1;
    jni_YGNodeStyleSetMarginPercent(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setMaxHeight(float paramFloat)
  {
    jni_YGNodeStyleSetMaxHeight(mNativePointer, paramFloat);
  }
  
  public void setMaxHeightPercent(float paramFloat)
  {
    jni_YGNodeStyleSetMaxHeightPercent(mNativePointer, paramFloat);
  }
  
  public void setMaxWidth(float paramFloat)
  {
    jni_YGNodeStyleSetMaxWidth(mNativePointer, paramFloat);
  }
  
  public void setMaxWidthPercent(float paramFloat)
  {
    jni_YGNodeStyleSetMaxWidthPercent(mNativePointer, paramFloat);
  }
  
  public void setMeasureFunction(YogaMeasureFunction paramYogaMeasureFunction)
  {
    mMeasureFunction = paramYogaMeasureFunction;
    long l = mNativePointer;
    boolean bool;
    if (paramYogaMeasureFunction != null) {
      bool = true;
    } else {
      bool = false;
    }
    jni_YGNodeSetHasMeasureFunc(l, bool);
  }
  
  public void setMinHeight(float paramFloat)
  {
    jni_YGNodeStyleSetMinHeight(mNativePointer, paramFloat);
  }
  
  public void setMinHeightPercent(float paramFloat)
  {
    jni_YGNodeStyleSetMinHeightPercent(mNativePointer, paramFloat);
  }
  
  public void setMinWidth(float paramFloat)
  {
    jni_YGNodeStyleSetMinWidth(mNativePointer, paramFloat);
  }
  
  public void setMinWidthPercent(float paramFloat)
  {
    jni_YGNodeStyleSetMinWidthPercent(mNativePointer, paramFloat);
  }
  
  public void setOverflow(YogaOverflow paramYogaOverflow)
  {
    jni_YGNodeStyleSetOverflow(mNativePointer, paramYogaOverflow.intValue());
  }
  
  public void setPadding(YogaEdge paramYogaEdge, float paramFloat)
  {
    mEdgeSetFlag |= 0x2;
    jni_YGNodeStyleSetPadding(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setPaddingPercent(YogaEdge paramYogaEdge, float paramFloat)
  {
    mEdgeSetFlag |= 0x2;
    jni_YGNodeStyleSetPaddingPercent(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setPosition(YogaEdge paramYogaEdge, float paramFloat)
  {
    mHasSetPosition = true;
    jni_YGNodeStyleSetPosition(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setPositionPercent(YogaEdge paramYogaEdge, float paramFloat)
  {
    mHasSetPosition = true;
    jni_YGNodeStyleSetPositionPercent(mNativePointer, paramYogaEdge.intValue(), paramFloat);
  }
  
  public void setPositionType(YogaPositionType paramYogaPositionType)
  {
    jni_YGNodeStyleSetPositionType(mNativePointer, paramYogaPositionType.intValue());
  }
  
  public void setWidth(float paramFloat)
  {
    jni_YGNodeStyleSetWidth(mNativePointer, paramFloat);
  }
  
  public void setWidthAuto()
  {
    jni_YGNodeStyleSetWidthAuto(mNativePointer);
  }
  
  public void setWidthPercent(float paramFloat)
  {
    jni_YGNodeStyleSetWidthPercent(mNativePointer, paramFloat);
  }
  
  public void setWrap(YogaWrap paramYogaWrap)
  {
    jni_YGNodeStyleSetFlexWrap(mNativePointer, paramYogaWrap.intValue());
  }
}
