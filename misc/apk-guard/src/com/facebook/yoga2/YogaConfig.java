package com.facebook.yoga2;

public class YogaConfig
{
  public static int SPACING_TYPE;
  private YogaLogger mLogger;
  long mNativePointer = jni_YGConfigNew();
  private YogaNodeCloneFunction mYogaNodeCloneFunction;
  
  static
  {
    YogaApp.loadLib();
  }
  
  public YogaConfig()
  {
    if (mNativePointer != 0L) {
      return;
    }
    throw new IllegalStateException("Failed to allocate native memory");
  }
  
  private final YogaNode cloneNode(YogaNode paramYogaNode1, YogaNode paramYogaNode2, int paramInt)
  {
    return mYogaNodeCloneFunction.cloneNode(paramYogaNode1, paramYogaNode2, paramInt);
  }
  
  private native void jni_YGConfigFree(long paramLong);
  
  private native long jni_YGConfigNew();
  
  private native void jni_YGConfigSetExperimentalFeatureEnabled(long paramLong, int paramInt, boolean paramBoolean);
  
  private native void jni_YGConfigSetHasCloneNodeFunc(long paramLong, boolean paramBoolean);
  
  private native void jni_YGConfigSetLogger(long paramLong, Object paramObject);
  
  private native void jni_YGConfigSetPointScaleFactor(long paramLong, float paramFloat);
  
  private native void jni_YGConfigSetPrintTreeFlag(long paramLong, boolean paramBoolean);
  
  private native void jni_YGConfigSetShouldDiffLayoutWithoutLegacyStretchBehaviour(long paramLong, boolean paramBoolean);
  
  private native void jni_YGConfigSetUseLegacyStretchBehaviour(long paramLong, boolean paramBoolean);
  
  private native void jni_YGConfigSetUseWebDefaults(long paramLong, boolean paramBoolean);
  
  protected void finalize()
    throws Throwable
  {
    try
    {
      jni_YGConfigFree(mNativePointer);
      super.finalize();
      return;
    }
    catch (Throwable localThrowable)
    {
      super.finalize();
      throw localThrowable;
    }
  }
  
  public YogaLogger getLogger()
  {
    return mLogger;
  }
  
  public void setExperimentalFeatureEnabled(YogaExperimentalFeature paramYogaExperimentalFeature, boolean paramBoolean)
  {
    jni_YGConfigSetExperimentalFeatureEnabled(mNativePointer, paramYogaExperimentalFeature.intValue(), paramBoolean);
  }
  
  public void setLogger(YogaLogger paramYogaLogger)
  {
    mLogger = paramYogaLogger;
    jni_YGConfigSetLogger(mNativePointer, paramYogaLogger);
  }
  
  public void setOnCloneNode(YogaNodeCloneFunction paramYogaNodeCloneFunction)
  {
    mYogaNodeCloneFunction = paramYogaNodeCloneFunction;
    long l = mNativePointer;
    boolean bool;
    if (paramYogaNodeCloneFunction != null) {
      bool = true;
    } else {
      bool = false;
    }
    jni_YGConfigSetHasCloneNodeFunc(l, bool);
  }
  
  public void setPointScaleFactor(float paramFloat)
  {
    jni_YGConfigSetPointScaleFactor(mNativePointer, paramFloat);
  }
  
  public void setPrintTreeFlag(boolean paramBoolean)
  {
    jni_YGConfigSetPrintTreeFlag(mNativePointer, paramBoolean);
  }
  
  public void setShouldDiffLayoutWithoutLegacyStretchBehaviour(boolean paramBoolean)
  {
    jni_YGConfigSetShouldDiffLayoutWithoutLegacyStretchBehaviour(mNativePointer, paramBoolean);
  }
  
  public void setUseLegacyStretchBehaviour(boolean paramBoolean)
  {
    jni_YGConfigSetUseLegacyStretchBehaviour(mNativePointer, paramBoolean);
  }
  
  public void setUseWebDefaults(boolean paramBoolean)
  {
    jni_YGConfigSetUseWebDefaults(mNativePointer, paramBoolean);
  }
}
