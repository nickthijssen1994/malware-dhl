package com.facebook.soloader;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Build.VERSION;
import android.os.StrictMode;
import android.os.StrictMode.ThreadPolicy;
import android.text.TextUtils;
import android.util.Log;
import com.facebook.soloader.nativeloader.NativeLoader;
import dalvik.system.BaseDexClassLoader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import javax.annotation.concurrent.NotThreadSafe;
import javax.annotation.concurrent.ThreadSafe;

@ThreadSafe
public class SoLoader
{
  static final boolean DEBUG = false;
  static final String PAGE_KEY = "SoLoader";
  public static final int SOLOADER_ALLOW_ASYNC_INIT = 2;
  public static final int SOLOADER_DISABLE_BACKUP_SOSOURCE = 8;
  public static final int SOLOADER_DONT_TREAT_AS_SYSTEMAPP = 32;
  public static final int SOLOADER_ENABLE_EXOPACKAGE = 1;
  public static final int SOLOADER_LOOK_IN_ZIP = 4;
  public static final int SOLOADER_SKIP_MERGED_JNI_ONLOAD = 16;
  private static final String SO_STORE_NAME_MAIN = "lib-main";
  private static final String SO_STORE_NAME_SPLIT = "lib-";
  static final boolean SYSTRACE_LIBRARY_LOADING;
  private static boolean isSystemApp;
  @Nullable
  @GuardedBy("sSoSourcesLock")
  private static ApplicationSoSource sApplicationSoSource;
  @Nullable
  @GuardedBy("sSoSourcesLock")
  private static UnpackingSoSource[] sBackupSoSources;
  @GuardedBy("sSoSourcesLock")
  private static int sFlags;
  private static final Set<String> sLoadedAndMergedLibraries;
  @GuardedBy("SoLoader.class")
  private static final HashSet<String> sLoadedLibraries;
  @GuardedBy("SoLoader.class")
  private static final Map<String, Object> sLoadingLibraries;
  @Nullable
  static SoFileLoader sSoFileLoader;
  @Nullable
  @GuardedBy("sSoSourcesLock")
  private static SoSource[] sSoSources;
  private static final ReentrantReadWriteLock sSoSourcesLock = new ReentrantReadWriteLock();
  @GuardedBy("sSoSourcesLock")
  private static volatile int sSoSourcesVersion;
  @Nullable
  private static SystemLoadLibraryWrapper sSystemLoadLibraryWrapper;
  
  static
  {
    sSoSources = null;
    boolean bool = false;
    sSoSourcesVersion = 0;
    sLoadedLibraries = new HashSet();
    sLoadingLibraries = new HashMap();
    sLoadedAndMergedLibraries = Collections.newSetFromMap(new ConcurrentHashMap());
    sSystemLoadLibraryWrapper = null;
    try
    {
      int i = Build.VERSION.SDK_INT;
      if (i >= 18) {
        bool = true;
      }
    }
    catch (NoClassDefFoundError localNoClassDefFoundError)
    {
      for (;;) {}
    }
    catch (UnsatisfiedLinkError localUnsatisfiedLinkError)
    {
      for (;;) {}
    }
    SYSTRACE_LIBRARY_LOADING = bool;
  }
  
  public SoLoader() {}
  
  public static boolean areSoSourcesAbisSupported()
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      SoSource[] arrayOfSoSource1 = sSoSources;
      if (arrayOfSoSource1 == null)
      {
        sSoSourcesLock.readLock().unlock();
        return false;
      }
      Object localObject = SysUtil.getSupportedAbis();
      SoSource[] arrayOfSoSource2 = sSoSources;
      int m = arrayOfSoSource2.length;
      int i = 0;
      while (i < m)
      {
        String[] arrayOfString = arrayOfSoSource2[i].getSoSourceAbis();
        int n = arrayOfString.length;
        int j = 0;
        while (j < n)
        {
          arrayOfSoSource1 = arrayOfString[j];
          int k = 0;
          boolean bool = false;
          for (;;)
          {
            int i1 = localObject.length;
            if ((k >= i1) || (bool)) {
              break;
            }
            bool = arrayOfSoSource1.equals(localObject[k]);
            k += 1;
          }
          if (!bool)
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("abi not supported: ");
            ((StringBuilder)localObject).append(arrayOfSoSource1);
            Log.e("SoLoader", ((StringBuilder)localObject).toString());
            sSoSourcesLock.readLock().unlock();
            return false;
          }
          j += 1;
        }
        i += 1;
      }
      sSoSourcesLock.readLock().unlock();
      return true;
    }
    catch (Throwable localThrowable)
    {
      sSoSourcesLock.readLock().unlock();
      throw localThrowable;
    }
  }
  
  private static void assertInitialized()
  {
    if (isInitialized()) {
      return;
    }
    throw new RuntimeException("SoLoader.init() not yet called");
  }
  
  private static boolean checkIfSystemApp(Context paramContext, int paramInt)
  {
    if ((paramInt & 0x20) != 0) {
      return false;
    }
    return (paramContext != null) && ((getApplicationInfoflags & 0x81) != 0);
  }
  
  public static void deinitForTest()
  {
    TestOnlyUtils.setSoSources(null);
  }
  
  private static void doLoadLibraryBySoName(String paramString, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy)
    throws UnsatisfiedLinkError
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      Object localObject = sSoSources;
      if (localObject != null)
      {
        sSoSourcesLock.readLock().unlock();
        int n = 0;
        int k;
        if (paramThreadPolicy == null)
        {
          paramThreadPolicy = StrictMode.allowThreadDiskReads();
          k = 1;
        }
        else
        {
          k = 0;
        }
        if (SYSTRACE_LIBRARY_LOADING) {
          Api18TraceUtils.beginTraceSection("SoLoader.loadLibrary[", paramString, "]");
        }
        try
        {
          sSoSourcesLock.readLock().lock();
          int i = 0;
          int m = 0;
          int j;
          for (;;)
          {
            j = i;
            if (i == 0)
            {
              j = i;
              try
              {
                int i1 = sSoSources.length;
                j = i;
                if (m < i1)
                {
                  j = i;
                  i1 = sSoSources[m].loadLibrary(paramString, paramInt, paramThreadPolicy);
                  i = i1;
                  if (i1 == 3)
                  {
                    j = i;
                    localObject = sBackupSoSources;
                    if (localObject != null)
                    {
                      j = i;
                      localObject = new StringBuilder();
                      j = i;
                      ((StringBuilder)localObject).append("Trying backup SoSource for ");
                      j = i;
                      ((StringBuilder)localObject).append(paramString);
                      j = i;
                      Log.d("SoLoader", ((StringBuilder)localObject).toString());
                      j = i;
                      localObject = sBackupSoSources;
                      j = i;
                      int i2 = localObject.length;
                      m = 0;
                      for (;;)
                      {
                        j = i;
                        if (m >= i2) {
                          break;
                        }
                        localStringBuilder = localObject[m];
                        j = i;
                        localStringBuilder.prepare(paramString);
                        j = i;
                        i1 = localStringBuilder.loadLibrary(paramString, paramInt, paramThreadPolicy);
                        if (i1 == 1)
                        {
                          j = i1;
                          break;
                        }
                        m += 1;
                      }
                    }
                  }
                  m += 1;
                }
              }
              catch (Throwable localThrowable1)
              {
                paramInt = j;
              }
            }
          }
          try
          {
            sSoSourcesLock.readLock().unlock();
            paramInt = j;
            throw localThrowable1;
          }
          catch (Throwable localThrowable2) {}
          paramInt = j;
          sSoSourcesLock.readLock().unlock();
          if (SYSTRACE_LIBRARY_LOADING) {
            Api18TraceUtils.endSection();
          }
          if (k != 0) {
            StrictMode.setThreadPolicy(paramThreadPolicy);
          }
          if ((j != 0) && (j != 3)) {
            break label546;
          }
          paramThreadPolicy = new StringBuilder();
          paramThreadPolicy.append("couldn't find DSO to load: ");
          paramThreadPolicy.append(paramString);
          sSoSourcesLock.readLock().lock();
          paramInt = n;
          while (paramInt < sSoSources.length)
          {
            paramThreadPolicy.append("\n\tSoSource ");
            paramThreadPolicy.append(paramInt);
            paramThreadPolicy.append(": ");
            paramThreadPolicy.append(sSoSources[paramInt].toString());
            paramInt += 1;
          }
          paramString = sApplicationSoSource;
          if (paramString != null)
          {
            paramString = ApplicationSoSource.getNativeLibDirFromContext(paramString.getUpdatedContext());
            paramThreadPolicy.append("\n\tNative lib dir: ");
            paramThreadPolicy.append(paramString.getAbsolutePath());
            paramThreadPolicy.append("\n");
          }
          sSoSourcesLock.readLock().unlock();
          paramThreadPolicy.append(" result: ");
          paramThreadPolicy.append(j);
          paramString = paramThreadPolicy.toString();
          Log.e("SoLoader", paramString);
          throw new UnsatisfiedLinkError(paramString);
        }
        catch (Throwable localThrowable3)
        {
          paramInt = 0;
        }
        if (SYSTRACE_LIBRARY_LOADING) {
          Api18TraceUtils.endSection();
        }
        if (k != 0) {
          StrictMode.setThreadPolicy(paramThreadPolicy);
        }
        if (paramInt != 0)
        {
          if (paramInt != 3) {
            return;
          }
          break label547;
          label546:
          return;
        }
        label547:
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("couldn't find DSO to load: ");
        localStringBuilder.append(paramString);
        paramThreadPolicy = localThrowable3.getMessage();
        paramString = paramThreadPolicy;
        if (paramThreadPolicy == null) {
          paramString = localThrowable3.toString();
        }
        localStringBuilder.append(" caused by: ");
        localStringBuilder.append(paramString);
        localThrowable3.printStackTrace();
        localStringBuilder.append(" result: ");
        localStringBuilder.append(paramInt);
        paramString = localStringBuilder.toString();
        Log.e("SoLoader", paramString);
        throw new UnsatisfiedLinkError(paramString);
      }
      else
      {
        paramThreadPolicy = new StringBuilder();
        paramThreadPolicy.append("Could not load: ");
        paramThreadPolicy.append(paramString);
        paramThreadPolicy.append(" because no SO source exists");
        Log.e("SoLoader", paramThreadPolicy.toString());
        paramThreadPolicy = new StringBuilder();
        paramThreadPolicy.append("couldn't find DSO to load: ");
        paramThreadPolicy.append(paramString);
        throw new UnsatisfiedLinkError(paramThreadPolicy.toString());
      }
    }
    catch (Throwable paramString)
    {
      sSoSourcesLock.readLock().unlock();
      throw paramString;
    }
  }
  
  public static String[] getLibraryDependencies(String paramString)
    throws IOException
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      SoSource[] arrayOfSoSource = sSoSources;
      Object localObject = null;
      String[] arrayOfString = null;
      if (arrayOfSoSource != null)
      {
        int i = 0;
        for (;;)
        {
          localObject = arrayOfString;
          if (arrayOfString != null) {
            break;
          }
          int j = sSoSources.length;
          localObject = arrayOfString;
          if (i >= j) {
            break;
          }
          arrayOfString = sSoSources[i].getLibraryDependencies(paramString);
          i += 1;
        }
      }
      sSoSourcesLock.readLock().unlock();
      return localObject;
    }
    catch (Throwable paramString)
    {
      sSoSourcesLock.readLock().unlock();
      throw paramString;
    }
  }
  
  public static String getLibraryPath(String paramString)
    throws IOException
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      SoSource[] arrayOfSoSource = sSoSources;
      Object localObject = null;
      String str = null;
      if (arrayOfSoSource != null)
      {
        int i = 0;
        for (;;)
        {
          localObject = str;
          if (str != null) {
            break;
          }
          int j = sSoSources.length;
          localObject = str;
          if (i >= j) {
            break;
          }
          str = sSoSources[i].getLibraryPath(paramString);
          i += 1;
        }
      }
      sSoSourcesLock.readLock().unlock();
      return localObject;
    }
    catch (Throwable paramString)
    {
      sSoSourcesLock.readLock().unlock();
      throw paramString;
    }
  }
  
  private static Method getNativeLoadRuntimeMethod()
  {
    if (Build.VERSION.SDK_INT >= 23)
    {
      if (Build.VERSION.SDK_INT > 27) {
        return null;
      }
      try
      {
        Method localMethod = Runtime.class.getDeclaredMethod("nativeLoad", new Class[] { String.class, ClassLoader.class, String.class });
        localMethod.setAccessible(true);
        return localMethod;
      }
      catch (SecurityException localSecurityException) {}catch (NoSuchMethodException localNoSuchMethodException) {}
      Log.w("SoLoader", "Cannot get nativeLoad method", localNoSuchMethodException);
    }
    return null;
  }
  
  public static int getSoSourcesVersion()
  {
    return sSoSourcesVersion;
  }
  
  public static void init(Context paramContext, int paramInt)
    throws IOException
  {
    init(paramContext, paramInt, null);
  }
  
  public static void init(Context paramContext, int paramInt, SoFileLoader paramSoFileLoader)
    throws IOException
  {
    StrictMode.ThreadPolicy localThreadPolicy = StrictMode.allowThreadDiskWrites();
    try
    {
      isSystemApp = checkIfSystemApp(paramContext, paramInt);
      initSoLoader(paramSoFileLoader);
      initSoSources(paramContext, paramInt, paramSoFileLoader);
      boolean bool = NativeLoader.isInitialized();
      if (!bool) {
        NativeLoader.init(new NativeLoaderToSoLoaderDelegate());
      }
      StrictMode.setThreadPolicy(localThreadPolicy);
      return;
    }
    catch (Throwable paramContext)
    {
      StrictMode.setThreadPolicy(localThreadPolicy);
      throw paramContext;
    }
  }
  
  public static void init(Context paramContext, boolean paramBoolean)
  {
    int i;
    if (paramBoolean) {
      i = 1;
    } else {
      i = 0;
    }
    try
    {
      init(paramContext, i);
      return;
    }
    catch (IOException paramContext)
    {
      throw new RuntimeException(paramContext);
    }
  }
  
  private static void initSoLoader(final SoFileLoader paramSoFileLoader)
  {
    if (paramSoFileLoader != null) {}
    try
    {
      sSoFileLoader = paramSoFileLoader;
      return;
    }
    catch (Throwable paramSoFileLoader)
    {
      final Runtime localRuntime;
      final Method localMethod;
      throw paramSoFileLoader;
    }
    localRuntime = Runtime.getRuntime();
    localMethod = getNativeLoadRuntimeMethod();
    boolean bool;
    if (localMethod != null)
    {
      bool = true;
      if (!bool) {
        break label76;
      }
      paramSoFileLoader = Api14Utils.getClassLoaderLdLoadLibrary();
    }
    for (;;)
    {
      sSoFileLoader = new SoFileLoader()
      {
        /* Error */
        private String getLibHash(String paramAnonymousString)
        {
          // Byte code:
          //   0: new 48	java/io/File
          //   3: dup
          //   4: aload_1
          //   5: invokespecial 51	java/io/File:<init>	(Ljava/lang/String;)V
          //   8: astore_1
          //   9: ldc 53
          //   11: invokestatic 59	java/security/MessageDigest:getInstance	(Ljava/lang/String;)Ljava/security/MessageDigest;
          //   14: astore_3
          //   15: new 61	java/io/FileInputStream
          //   18: dup
          //   19: aload_1
          //   20: invokespecial 64	java/io/FileInputStream:<init>	(Ljava/io/File;)V
          //   23: astore_1
          //   24: sipush 4096
          //   27: newarray byte
          //   29: astore 4
          //   31: aload_1
          //   32: aload 4
          //   34: invokevirtual 70	java/io/InputStream:read	([B)I
          //   37: istore_2
          //   38: iload_2
          //   39: ifle +14 -> 53
          //   42: aload_3
          //   43: aload 4
          //   45: iconst_0
          //   46: iload_2
          //   47: invokevirtual 74	java/security/MessageDigest:update	([BII)V
          //   50: goto -19 -> 31
          //   53: ldc 76
          //   55: iconst_1
          //   56: anewarray 4	java/lang/Object
          //   59: dup
          //   60: iconst_0
          //   61: new 78	java/math/BigInteger
          //   64: dup
          //   65: iconst_1
          //   66: aload_3
          //   67: invokevirtual 82	java/security/MessageDigest:digest	()[B
          //   70: invokespecial 85	java/math/BigInteger:<init>	(I[B)V
          //   73: aastore
          //   74: invokestatic 91	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
          //   77: astore_3
          //   78: aload_1
          //   79: invokevirtual 94	java/io/InputStream:close	()V
          //   82: aload_3
          //   83: areturn
          //   84: astore_3
          //   85: goto +8 -> 93
          //   88: astore 4
          //   90: aload 4
          //   92: athrow
          //   93: aload 4
          //   95: ifnull +10 -> 105
          //   98: aload_1
          //   99: invokevirtual 94	java/io/InputStream:close	()V
          //   102: goto +7 -> 109
          //   105: aload_1
          //   106: invokevirtual 94	java/io/InputStream:close	()V
          //   109: aload_3
          //   110: athrow
          //   111: astore_1
          //   112: aload_1
          //   113: checkcast 44	java/security/NoSuchAlgorithmException
          //   116: invokevirtual 98	java/security/NoSuchAlgorithmException:toString	()Ljava/lang/String;
          //   119: areturn
          //   120: astore_1
          //   121: aload_1
          //   122: checkcast 42	java/lang/SecurityException
          //   125: invokevirtual 99	java/lang/SecurityException:toString	()Ljava/lang/String;
          //   128: areturn
          //   129: astore_1
          //   130: aload_1
          //   131: checkcast 40	java/io/IOException
          //   134: invokevirtual 100	java/io/IOException:toString	()Ljava/lang/String;
          //   137: areturn
          //   138: astore_1
          //   139: goto -30 -> 109
          // Local variable table:
          //   start	length	slot	name	signature
          //   0	142	0	this	1
          //   0	142	1	paramAnonymousString	String
          //   37	10	2	i	int
          //   14	69	3	localObject	Object
          //   84	26	3	localThrowable1	Throwable
          //   29	15	4	arrayOfByte	byte[]
          //   88	6	4	localThrowable2	Throwable
          // Exception table:
          //   from	to	target	type
          //   90	93	84	java/lang/Throwable
          //   24	31	88	java/lang/Throwable
          //   31	38	88	java/lang/Throwable
          //   42	50	88	java/lang/Throwable
          //   53	78	88	java/lang/Throwable
          //   0	15	111	java/security/NoSuchAlgorithmException
          //   15	24	111	java/security/NoSuchAlgorithmException
          //   78	82	111	java/security/NoSuchAlgorithmException
          //   105	109	111	java/security/NoSuchAlgorithmException
          //   109	111	111	java/security/NoSuchAlgorithmException
          //   0	15	120	java/lang/SecurityException
          //   15	24	120	java/lang/SecurityException
          //   78	82	120	java/lang/SecurityException
          //   105	109	120	java/lang/SecurityException
          //   109	111	120	java/lang/SecurityException
          //   0	15	129	java/io/IOException
          //   15	24	129	java/io/IOException
          //   78	82	129	java/io/IOException
          //   105	109	129	java/io/IOException
          //   109	111	129	java/io/IOException
          //   98	102	138	java/lang/Throwable
        }
        
        public void load(String paramAnonymousString, int paramAnonymousInt)
        {
          if (val$hasNativeLoadMethod)
          {
            if ((paramAnonymousInt & 0x4) == 4) {
              paramAnonymousInt = 1;
            } else {
              paramAnonymousInt = 0;
            }
            Object localObject1;
            if (paramAnonymousInt != 0) {
              localObject1 = paramSoFileLoader;
            } else {
              localObject1 = val$localLdLibraryPathNoZips;
            }
            Object localObject2 = null;
            Object localObject4 = null;
            Object localObject5 = localObject1;
            Object localObject3 = localObject2;
            try
            {
              Runtime localRuntime = localRuntime;
              localObject5 = localObject1;
              localObject3 = localObject2;
              localObject3 = localObject1;
              try
              {
                localObject2 = (String)localMethod.invoke(localRuntime, new Object[] { paramAnonymousString, SoLoader.class.getClassLoader(), localObject1 });
                if (localObject2 == null) {
                  try
                  {
                    if (localObject2 == null) {
                      return;
                    }
                    localObject3 = new StringBuilder();
                    ((StringBuilder)localObject3).append("Error when loading lib: ");
                    ((StringBuilder)localObject3).append((String)localObject2);
                    ((StringBuilder)localObject3).append(" lib hash: ");
                    ((StringBuilder)localObject3).append(getLibHash(paramAnonymousString));
                    ((StringBuilder)localObject3).append(" search path is ");
                    ((StringBuilder)localObject3).append((String)localObject1);
                    Log.e("SoLoader", ((StringBuilder)localObject3).toString());
                    return;
                  }
                  catch (Throwable localThrowable2) {}
                } else {
                  throw new UnsatisfiedLinkError((String)localObject2);
                }
              }
              catch (Throwable localThrowable3)
              {
                localObject2 = localObject4;
                localObject1 = localObject3;
                localObject3 = localObject1;
                localObject4 = localObject2;
                localObject5 = localObject1;
                localObject3 = localObject2;
              }
              StringBuilder localStringBuilder;
              label328:
              System.load(paramAnonymousString);
            }
            catch (Throwable localThrowable1)
            {
              try
              {
                throw localThrowable3;
              }
              catch (InvocationTargetException localInvocationTargetException) {}catch (IllegalArgumentException localIllegalArgumentException) {}catch (IllegalAccessException localIllegalAccessException) {}
              localThrowable1 = localThrowable1;
              break label328;
              localObject5 = localThrowable1;
              localObject3 = localObject2;
              localStringBuilder = new StringBuilder();
              localObject5 = localThrowable1;
              localObject3 = localObject2;
              localStringBuilder.append("Error: Cannot load ");
              localObject5 = localThrowable1;
              localObject3 = localObject2;
              localStringBuilder.append(paramAnonymousString);
              localObject5 = localThrowable1;
              localObject3 = localObject2;
              localObject2 = localStringBuilder.toString();
              localObject3 = localObject2;
              localObject5 = localThrowable1;
              throw new RuntimeException((String)localObject2, localIllegalAccessException);
              if (localObject3 != null)
              {
                localObject2 = new StringBuilder();
                ((StringBuilder)localObject2).append("Error when loading lib: ");
                ((StringBuilder)localObject2).append((String)localObject3);
                ((StringBuilder)localObject2).append(" lib hash: ");
                ((StringBuilder)localObject2).append(getLibHash(paramAnonymousString));
                ((StringBuilder)localObject2).append(" search path is ");
                ((StringBuilder)localObject2).append((String)localObject5);
                Log.e("SoLoader", ((StringBuilder)localObject2).toString());
              }
              throw localThrowable1;
            }
          }
        }
      };
      return;
      bool = false;
      break;
      label76:
      paramSoFileLoader = null;
    }
  }
  
  private static void initSoSources(Context paramContext, int paramInt, SoFileLoader paramSoFileLoader)
    throws IOException
  {
    sSoSourcesLock.writeLock().lock();
    try
    {
      paramSoFileLoader = sSoSources;
      if (paramSoFileLoader == null)
      {
        Log.d("SoLoader", "init start");
        sFlags = paramInt;
        ArrayList localArrayList = new ArrayList();
        Object localObject1 = System.getenv("LD_LIBRARY_PATH");
        paramSoFileLoader = (SoFileLoader)localObject1;
        boolean bool;
        if (localObject1 == null)
        {
          bool = SysUtil.is64Bit();
          if (bool) {
            paramSoFileLoader = "/vendor/lib64:/system/lib64";
          } else {
            paramSoFileLoader = "/vendor/lib:/system/lib";
          }
        }
        paramSoFileLoader = paramSoFileLoader.split(":");
        int j = paramSoFileLoader.length;
        int i = 0;
        Object localObject2;
        while (i < j)
        {
          localObject1 = paramSoFileLoader[i];
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("adding system library source: ");
          ((StringBuilder)localObject2).append((String)localObject1);
          Log.d("SoLoader", ((StringBuilder)localObject2).toString());
          localArrayList.add(new DirectorySoSource(new File((String)localObject1), 2));
          i += 1;
        }
        if (paramContext != null) {
          if ((paramInt & 0x1) != 0)
          {
            sBackupSoSources = null;
            Log.d("SoLoader", "adding exo package source: lib-main");
            localArrayList.add(0, new ExoSoSource(paramContext, "lib-main"));
          }
          else
          {
            bool = isSystemApp;
            if (bool)
            {
              paramInt = 0;
            }
            else
            {
              paramInt = Build.VERSION.SDK_INT;
              if (paramInt <= 17) {
                paramInt = 1;
              } else {
                paramInt = 0;
              }
              sApplicationSoSource = new ApplicationSoSource(paramContext, paramInt);
              paramSoFileLoader = new StringBuilder();
              paramSoFileLoader.append("adding application source: ");
              paramSoFileLoader.append(sApplicationSoSource.toString());
              Log.d("SoLoader", paramSoFileLoader.toString());
              localArrayList.add(0, sApplicationSoSource);
              paramInt = 1;
            }
            i = sFlags;
            if ((i & 0x8) != 0)
            {
              sBackupSoSources = null;
            }
            else
            {
              localObject1 = new File(getApplicationInfosourceDir);
              paramSoFileLoader = new ArrayList();
              localObject1 = new ApkSoSource(paramContext, (File)localObject1, "lib-main", paramInt);
              paramSoFileLoader.add(localObject1);
              localObject2 = new StringBuilder();
              ((StringBuilder)localObject2).append("adding backup source from : ");
              ((StringBuilder)localObject2).append(((DirectorySoSource)localObject1).toString());
              Log.d("SoLoader", ((StringBuilder)localObject2).toString());
              i = Build.VERSION.SDK_INT;
              if (i >= 21)
              {
                localObject1 = getApplicationInfosplitSourceDirs;
                if (localObject1 != null)
                {
                  Log.d("SoLoader", "adding backup sources from split apks");
                  localObject1 = getApplicationInfosplitSourceDirs;
                  int k = localObject1.length;
                  j = 0;
                  i = 0;
                  while (j < k)
                  {
                    localObject2 = new File(localObject1[j]);
                    StringBuilder localStringBuilder = new StringBuilder();
                    localStringBuilder.append("lib-");
                    localStringBuilder.append(i);
                    localObject2 = new ApkSoSource(paramContext, (File)localObject2, localStringBuilder.toString(), paramInt);
                    localStringBuilder = new StringBuilder();
                    localStringBuilder.append("adding backup source: ");
                    localStringBuilder.append(((DirectorySoSource)localObject2).toString());
                    Log.d("SoLoader", localStringBuilder.toString());
                    paramSoFileLoader.add(localObject2);
                    j += 1;
                    i += 1;
                  }
                }
              }
              sBackupSoSources = (UnpackingSoSource[])paramSoFileLoader.toArray(new UnpackingSoSource[paramSoFileLoader.size()]);
              localArrayList.addAll(0, paramSoFileLoader);
            }
          }
        }
        paramContext = (SoSource[])localArrayList.toArray(new SoSource[localArrayList.size()]);
        j = makePrepareFlags();
        for (paramInt = paramContext.length;; paramInt = i)
        {
          i = paramInt - 1;
          if (paramInt <= 0) {
            break;
          }
          paramSoFileLoader = new StringBuilder();
          paramSoFileLoader.append("Preparing SO source: ");
          paramSoFileLoader.append(paramContext[i]);
          Log.d("SoLoader", paramSoFileLoader.toString());
          paramContext[i].prepare(j);
        }
        sSoSources = paramContext;
        paramInt = sSoSourcesVersion;
        sSoSourcesVersion = paramInt + 1;
        paramContext = new StringBuilder();
        paramContext.append("init finish: ");
        paramContext.append(sSoSources.length);
        paramContext.append(" SO sources prepared");
        Log.d("SoLoader", paramContext.toString());
      }
      Log.d("SoLoader", "init exiting");
      sSoSourcesLock.writeLock().unlock();
      return;
    }
    catch (Throwable paramContext)
    {
      Log.d("SoLoader", "init exiting");
      sSoSourcesLock.writeLock().unlock();
      throw paramContext;
    }
  }
  
  public static boolean isInitialized()
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      SoSource[] arrayOfSoSource = sSoSources;
      boolean bool;
      if (arrayOfSoSource != null) {
        bool = true;
      } else {
        bool = false;
      }
      sSoSourcesLock.readLock().unlock();
      return bool;
    }
    catch (Throwable localThrowable)
    {
      sSoSourcesLock.readLock().unlock();
      throw localThrowable;
    }
  }
  
  public static boolean loadLibrary(String paramString)
  {
    return loadLibrary(paramString, 0);
  }
  
  public static boolean loadLibrary(String paramString, int paramInt)
    throws UnsatisfiedLinkError
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      Object localObject = sSoSources;
      if (localObject == null)
      {
        boolean bool = "http://www.android.com/".equals(System.getProperty("java.vendor.url"));
        if (bool) {
          assertInitialized();
        } else {
          try
          {
            bool = sLoadedLibraries.contains(paramString) ^ true;
            if (bool) {
              if (sSystemLoadLibraryWrapper != null) {
                sSystemLoadLibraryWrapper.loadLibrary(paramString);
              } else {
                System.loadLibrary(paramString);
              }
            }
            sSoSourcesLock.readLock().unlock();
            return bool;
          }
          catch (Throwable paramString)
          {
            throw paramString;
          }
        }
      }
      sSoSourcesLock.readLock().unlock();
      if (isSystemApp)
      {
        localObject = sSystemLoadLibraryWrapper;
        if (localObject != null)
        {
          ((SystemLoadLibraryWrapper)localObject).loadLibrary(paramString);
          return true;
        }
      }
      String str = MergedSoMapping.mapLibName(paramString);
      if (str != null) {
        localObject = str;
      } else {
        localObject = paramString;
      }
      return loadLibraryBySoName(System.mapLibraryName((String)localObject), paramString, str, paramInt, null);
    }
    catch (Throwable paramString)
    {
      sSoSourcesLock.readLock().unlock();
      throw paramString;
    }
  }
  
  static void loadLibraryBySoName(String paramString, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy)
  {
    loadLibraryBySoNameImpl(paramString, null, null, paramInt, paramThreadPolicy);
  }
  
  private static boolean loadLibraryBySoName(String paramString1, String paramString2, String paramString3, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy)
  {
    boolean bool1 = false;
    for (;;)
    {
      boolean bool2;
      int i;
      int j;
      try
      {
        bool2 = loadLibraryBySoNameImpl(paramString1, paramString2, paramString3, paramInt, paramThreadPolicy);
        i = 0;
      }
      catch (UnsatisfiedLinkError localUnsatisfiedLinkError)
      {
        j = sSoSourcesVersion;
        sSoSourcesLock.writeLock().lock();
      }
      try
      {
        localObject = sApplicationSoSource;
        i = 1;
        if (localObject != null) {
          localObject = sApplicationSoSource;
        }
      }
      catch (Throwable paramString1)
      {
        try
        {
          Object localObject;
          bool2 = ((ApplicationSoSource)localObject).checkAndMaybeUpdate();
          if (bool2)
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("sApplicationSoSource updated during load: ");
            ((StringBuilder)localObject).append(paramString1);
            ((StringBuilder)localObject).append(", attempting load again.");
            Log.w("SoLoader", ((StringBuilder)localObject).toString());
            int k = sSoSourcesVersion;
            sSoSourcesVersion = k + 1;
          }
          else
          {
            i = 0;
          }
          sSoSourcesLock.writeLock().unlock();
          if (sSoSourcesVersion != j)
          {
            bool2 = bool1;
            bool1 = bool2;
            if (i != 0) {
              continue;
            }
            return bool2;
          }
          throw localUnsatisfiedLinkError;
        }
        catch (IOException paramString1)
        {
          throw new RuntimeException(paramString1);
        }
        paramString1 = paramString1;
        sSoSourcesLock.writeLock().unlock();
        throw paramString1;
      }
    }
  }
  
  /* Error */
  private static boolean loadLibraryBySoNameImpl(String paramString1, String paramString2, String paramString3, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 553	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4: istore 8
    //   6: iconst_0
    //   7: istore 7
    //   9: iload 8
    //   11: ifne +17 -> 28
    //   14: getstatic 109	com/facebook/soloader/SoLoader:sLoadedAndMergedLibraries	Ljava/util/Set;
    //   17: aload_1
    //   18: invokeinterface 556 2 0
    //   23: ifeq +5 -> 28
    //   26: iconst_0
    //   27: ireturn
    //   28: ldc 2
    //   30: monitorenter
    //   31: getstatic 93	com/facebook/soloader/SoLoader:sLoadedLibraries	Ljava/util/HashSet;
    //   34: aload_0
    //   35: invokevirtual 518	java/util/HashSet:contains	(Ljava/lang/Object;)Z
    //   38: ifeq +506 -> 544
    //   41: aload_2
    //   42: ifnonnull +8 -> 50
    //   45: ldc 2
    //   47: monitorexit
    //   48: iconst_0
    //   49: ireturn
    //   50: iconst_1
    //   51: istore 5
    //   53: goto +3 -> 56
    //   56: getstatic 98	com/facebook/soloader/SoLoader:sLoadingLibraries	Ljava/util/Map;
    //   59: aload_0
    //   60: invokeinterface 561 2 0
    //   65: ifeq +17 -> 82
    //   68: getstatic 98	com/facebook/soloader/SoLoader:sLoadingLibraries	Ljava/util/Map;
    //   71: aload_0
    //   72: invokeinterface 565 2 0
    //   77: astore 9
    //   79: goto +24 -> 103
    //   82: new 4	java/lang/Object
    //   85: dup
    //   86: invokespecial 120	java/lang/Object:<init>	()V
    //   89: astore 9
    //   91: getstatic 98	com/facebook/soloader/SoLoader:sLoadingLibraries	Ljava/util/Map;
    //   94: aload_0
    //   95: aload 9
    //   97: invokeinterface 569 3 0
    //   102: pop
    //   103: ldc 2
    //   105: monitorexit
    //   106: aload 9
    //   108: monitorenter
    //   109: iload 5
    //   111: istore 6
    //   113: iload 5
    //   115: ifne +201 -> 316
    //   118: ldc 2
    //   120: monitorenter
    //   121: getstatic 93	com/facebook/soloader/SoLoader:sLoadedLibraries	Ljava/util/HashSet;
    //   124: aload_0
    //   125: invokevirtual 518	java/util/HashSet:contains	(Ljava/lang/Object;)Z
    //   128: ifeq +18 -> 146
    //   131: aload_2
    //   132: ifnonnull +11 -> 143
    //   135: ldc 2
    //   137: monitorexit
    //   138: aload 9
    //   140: monitorexit
    //   141: iconst_0
    //   142: ireturn
    //   143: iconst_1
    //   144: istore 5
    //   146: ldc 2
    //   148: monitorexit
    //   149: iload 5
    //   151: istore 6
    //   153: iload 5
    //   155: ifne +161 -> 316
    //   158: new 165	java/lang/StringBuilder
    //   161: dup
    //   162: invokespecial 166	java/lang/StringBuilder:<init>	()V
    //   165: astore 10
    //   167: aload 10
    //   169: ldc_w 571
    //   172: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: pop
    //   176: aload 10
    //   178: aload_0
    //   179: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   182: pop
    //   183: ldc 23
    //   185: aload 10
    //   187: invokevirtual 176	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   190: invokestatic 240	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   193: pop
    //   194: aload_0
    //   195: iload_3
    //   196: aload 4
    //   198: invokestatic 573	com/facebook/soloader/SoLoader:doLoadLibraryBySoName	(Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)V
    //   201: ldc 2
    //   203: monitorenter
    //   204: new 165	java/lang/StringBuilder
    //   207: dup
    //   208: invokespecial 166	java/lang/StringBuilder:<init>	()V
    //   211: astore 4
    //   213: aload 4
    //   215: ldc_w 575
    //   218: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   221: pop
    //   222: aload 4
    //   224: aload_0
    //   225: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   228: pop
    //   229: ldc 23
    //   231: aload 4
    //   233: invokevirtual 176	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   236: invokestatic 240	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   239: pop
    //   240: getstatic 93	com/facebook/soloader/SoLoader:sLoadedLibraries	Ljava/util/HashSet;
    //   243: aload_0
    //   244: invokevirtual 576	java/util/HashSet:add	(Ljava/lang/Object;)Z
    //   247: pop
    //   248: ldc 2
    //   250: monitorexit
    //   251: iload 5
    //   253: istore 6
    //   255: goto +61 -> 316
    //   258: astore_0
    //   259: ldc 2
    //   261: monitorexit
    //   262: aload_0
    //   263: athrow
    //   264: astore_0
    //   265: aload_0
    //   266: invokevirtual 290	java/lang/Throwable:getMessage	()Ljava/lang/String;
    //   269: astore_1
    //   270: aload_1
    //   271: ifnull +37 -> 308
    //   274: aload_1
    //   275: ldc_w 578
    //   278: invokevirtual 580	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   281: istore 8
    //   283: iload 8
    //   285: ifeq +23 -> 308
    //   288: new 14	com/facebook/soloader/SoLoader$WrongAbiError
    //   291: dup
    //   292: aload_0
    //   293: aload_1
    //   294: aload_1
    //   295: ldc_w 578
    //   298: invokevirtual 584	java/lang/String:lastIndexOf	(Ljava/lang/String;)I
    //   301: invokevirtual 588	java/lang/String:substring	(I)Ljava/lang/String;
    //   304: invokespecial 591	com/facebook/soloader/SoLoader$WrongAbiError:<init>	(Ljava/lang/Throwable;Ljava/lang/String;)V
    //   307: athrow
    //   308: aload_0
    //   309: athrow
    //   310: astore_0
    //   311: ldc 2
    //   313: monitorexit
    //   314: aload_0
    //   315: athrow
    //   316: iload_3
    //   317: bipush 16
    //   319: iand
    //   320: ifne +205 -> 525
    //   323: iload 7
    //   325: istore_3
    //   326: aload_1
    //   327: invokestatic 553	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   330: ifne +20 -> 350
    //   333: iload 7
    //   335: istore_3
    //   336: getstatic 109	com/facebook/soloader/SoLoader:sLoadedAndMergedLibraries	Ljava/util/Set;
    //   339: aload_1
    //   340: invokeinterface 556 2 0
    //   345: ifeq +5 -> 350
    //   348: iconst_1
    //   349: istore_3
    //   350: aload_2
    //   351: ifnull +174 -> 525
    //   354: iload_3
    //   355: ifne +170 -> 525
    //   358: getstatic 118	com/facebook/soloader/SoLoader:SYSTRACE_LIBRARY_LOADING	Z
    //   361: ifeq +12 -> 373
    //   364: ldc_w 593
    //   367: aload_1
    //   368: ldc -33
    //   370: invokestatic 229	com/facebook/soloader/Api18TraceUtils:beginTraceSection	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   373: new 165	java/lang/StringBuilder
    //   376: dup
    //   377: invokespecial 166	java/lang/StringBuilder:<init>	()V
    //   380: astore_2
    //   381: aload_2
    //   382: ldc_w 595
    //   385: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   388: pop
    //   389: aload_2
    //   390: aload_1
    //   391: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   394: pop
    //   395: aload_2
    //   396: ldc_w 597
    //   399: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   402: pop
    //   403: aload_2
    //   404: aload_0
    //   405: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   408: pop
    //   409: ldc 23
    //   411: aload_2
    //   412: invokevirtual 176	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   415: invokestatic 240	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   418: pop
    //   419: aload_1
    //   420: invokestatic 600	com/facebook/soloader/MergedSoMapping:invokeJniOnload	(Ljava/lang/String;)V
    //   423: getstatic 109	com/facebook/soloader/SoLoader:sLoadedAndMergedLibraries	Ljava/util/Set;
    //   426: aload_1
    //   427: invokeinterface 601 2 0
    //   432: pop
    //   433: getstatic 118	com/facebook/soloader/SoLoader:SYSTRACE_LIBRARY_LOADING	Z
    //   436: ifeq +89 -> 525
    //   439: invokestatic 249	com/facebook/soloader/Api18TraceUtils:endSection	()V
    //   442: goto +83 -> 525
    //   445: astore_0
    //   446: goto +68 -> 514
    //   449: astore_2
    //   450: new 165	java/lang/StringBuilder
    //   453: dup
    //   454: invokespecial 166	java/lang/StringBuilder:<init>	()V
    //   457: astore 4
    //   459: aload 4
    //   461: ldc_w 603
    //   464: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   467: pop
    //   468: aload 4
    //   470: aload_1
    //   471: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   474: pop
    //   475: aload 4
    //   477: ldc_w 605
    //   480: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   483: pop
    //   484: aload 4
    //   486: aload_0
    //   487: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   490: pop
    //   491: aload 4
    //   493: ldc_w 607
    //   496: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   499: pop
    //   500: new 188	java/lang/RuntimeException
    //   503: dup
    //   504: aload 4
    //   506: invokevirtual 176	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   509: aload_2
    //   510: invokespecial 610	java/lang/RuntimeException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   513: athrow
    //   514: getstatic 118	com/facebook/soloader/SoLoader:SYSTRACE_LIBRARY_LOADING	Z
    //   517: ifeq +6 -> 523
    //   520: invokestatic 249	com/facebook/soloader/Api18TraceUtils:endSection	()V
    //   523: aload_0
    //   524: athrow
    //   525: aload 9
    //   527: monitorexit
    //   528: iload 6
    //   530: iconst_1
    //   531: ixor
    //   532: ireturn
    //   533: aload 9
    //   535: monitorexit
    //   536: aload_0
    //   537: athrow
    //   538: astore_0
    //   539: ldc 2
    //   541: monitorexit
    //   542: aload_0
    //   543: athrow
    //   544: iconst_0
    //   545: istore 5
    //   547: goto -491 -> 56
    //   550: astore_0
    //   551: goto -18 -> 533
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	554	0	paramString1	String
    //   0	554	1	paramString2	String
    //   0	554	2	paramString3	String
    //   0	554	3	paramInt	int
    //   0	554	4	paramThreadPolicy	StrictMode.ThreadPolicy
    //   51	495	5	i	int
    //   111	421	6	j	int
    //   7	327	7	k	int
    //   4	280	8	bool	boolean
    //   77	457	9	localObject	Object
    //   165	21	10	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   204	251	258	java/lang/Throwable
    //   259	262	258	java/lang/Throwable
    //   158	201	264	java/lang/UnsatisfiedLinkError
    //   121	131	310	java/lang/Throwable
    //   135	138	310	java/lang/Throwable
    //   146	149	310	java/lang/Throwable
    //   311	314	310	java/lang/Throwable
    //   373	433	445	java/lang/Throwable
    //   450	514	445	java/lang/Throwable
    //   373	433	449	java/lang/UnsatisfiedLinkError
    //   31	41	538	java/lang/Throwable
    //   45	48	538	java/lang/Throwable
    //   56	79	538	java/lang/Throwable
    //   82	103	538	java/lang/Throwable
    //   103	106	538	java/lang/Throwable
    //   539	542	538	java/lang/Throwable
    //   118	121	550	java/lang/Throwable
    //   138	141	550	java/lang/Throwable
    //   158	201	550	java/lang/Throwable
    //   201	204	550	java/lang/Throwable
    //   262	264	550	java/lang/Throwable
    //   265	270	550	java/lang/Throwable
    //   274	283	550	java/lang/Throwable
    //   288	308	550	java/lang/Throwable
    //   308	310	550	java/lang/Throwable
    //   314	316	550	java/lang/Throwable
    //   326	333	550	java/lang/Throwable
    //   336	348	550	java/lang/Throwable
    //   358	373	550	java/lang/Throwable
    //   433	442	550	java/lang/Throwable
    //   514	523	550	java/lang/Throwable
    //   523	525	550	java/lang/Throwable
    //   525	528	550	java/lang/Throwable
    //   533	536	550	java/lang/Throwable
  }
  
  public static String makeLdLibraryPath()
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      assertInitialized();
      Log.d("SoLoader", "makeLdLibraryPath");
      Object localObject1 = new ArrayList();
      Object localObject2 = sSoSources;
      if (localObject2 != null)
      {
        int j = localObject2.length;
        int i = 0;
        while (i < j)
        {
          localObject2[i].addToLdLibraryPath((Collection)localObject1);
          i += 1;
        }
      }
      localObject1 = TextUtils.join(":", (Iterable)localObject1);
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("makeLdLibraryPath final path: ");
      ((StringBuilder)localObject2).append((String)localObject1);
      Log.d("SoLoader", ((StringBuilder)localObject2).toString());
      sSoSourcesLock.readLock().unlock();
      return localObject1;
    }
    catch (Throwable localThrowable)
    {
      sSoSourcesLock.readLock().unlock();
      throw localThrowable;
    }
  }
  
  public static String makeNonZipPath(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    paramString = paramString.split(":");
    ArrayList localArrayList = new ArrayList(paramString.length);
    int j = paramString.length;
    int i = 0;
    while (i < j)
    {
      Object localObject = paramString[i];
      if (!localObject.contains("!")) {
        localArrayList.add(localObject);
      }
      i += 1;
    }
    return TextUtils.join(":", localArrayList);
  }
  
  private static int makePrepareFlags()
  {
    sSoSourcesLock.writeLock().lock();
    try
    {
      int i = sFlags;
      if ((i & 0x2) != 0) {
        i = 1;
      } else {
        i = 0;
      }
      sSoSourcesLock.writeLock().unlock();
      return i;
    }
    catch (Throwable localThrowable)
    {
      sSoSourcesLock.writeLock().unlock();
      throw localThrowable;
    }
  }
  
  public static void prependSoSource(SoSource paramSoSource)
    throws IOException
  {
    sSoSourcesLock.writeLock().lock();
    try
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Prepending to SO sources: ");
      ((StringBuilder)localObject).append(paramSoSource);
      Log.d("SoLoader", ((StringBuilder)localObject).toString());
      assertInitialized();
      paramSoSource.prepare(makePrepareFlags());
      int i = sSoSources.length;
      localObject = new SoSource[i + 1];
      localObject[0] = paramSoSource;
      System.arraycopy(sSoSources, 0, localObject, 1, sSoSources.length);
      sSoSources = (SoSource[])localObject;
      i = sSoSourcesVersion;
      sSoSourcesVersion = i + 1;
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Prepended to SO sources: ");
      ((StringBuilder)localObject).append(paramSoSource);
      Log.d("SoLoader", ((StringBuilder)localObject).toString());
      sSoSourcesLock.writeLock().unlock();
      return;
    }
    catch (Throwable paramSoSource)
    {
      sSoSourcesLock.writeLock().unlock();
      throw paramSoSource;
    }
  }
  
  public static void setInTestMode()
  {
    TestOnlyUtils.setSoSources(new SoSource[] { new NoopSoSource() });
  }
  
  public static void setSystemLoadLibraryWrapper(SystemLoadLibraryWrapper paramSystemLoadLibraryWrapper)
  {
    sSystemLoadLibraryWrapper = paramSystemLoadLibraryWrapper;
  }
  
  public static File unpackLibraryAndDependencies(String paramString)
    throws UnsatisfiedLinkError
  {
    
    try
    {
      paramString = unpackLibraryBySoName(System.mapLibraryName(paramString));
      return paramString;
    }
    catch (IOException paramString)
    {
      throw new RuntimeException(paramString);
    }
  }
  
  static File unpackLibraryBySoName(String paramString)
    throws IOException
  {
    sSoSourcesLock.readLock().lock();
    try
    {
      SoSource[] arrayOfSoSource = sSoSources;
      int j = arrayOfSoSource.length;
      int i = 0;
      while (i < j)
      {
        File localFile = arrayOfSoSource[i].unpackLibrary(paramString);
        if (localFile != null)
        {
          sSoSourcesLock.readLock().unlock();
          return localFile;
        }
        i += 1;
      }
      sSoSourcesLock.readLock().unlock();
      throw new FileNotFoundException(paramString);
    }
    catch (Throwable paramString)
    {
      sSoSourcesLock.readLock().unlock();
      throw paramString;
    }
  }
  
  @TargetApi(14)
  @DoNotOptimize
  private static class Api14Utils
  {
    private Api14Utils() {}
    
    public static String getClassLoaderLdLoadLibrary()
    {
      Object localObject1 = SoLoader.class.getClassLoader();
      Object localObject2;
      if ((localObject1 != null) && (!(localObject1 instanceof BaseDexClassLoader)))
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("ClassLoader ");
        ((StringBuilder)localObject2).append(localObject1.getClass().getName());
        ((StringBuilder)localObject2).append(" should be of type BaseDexClassLoader");
        throw new IllegalStateException(((StringBuilder)localObject2).toString());
      }
      localObject1 = (BaseDexClassLoader)localObject1;
      try
      {
        localObject2 = BaseDexClassLoader.class.getMethod("getLdLibraryPath", new Class[0]);
        localObject1 = ((Method)localObject2).invoke(localObject1, new Object[0]);
        return (String)localObject1;
      }
      catch (Exception localException)
      {
        throw new RuntimeException("Cannot call getLdLibraryPath", localException);
      }
    }
  }
  
  @NotThreadSafe
  static class TestOnlyUtils
  {
    TestOnlyUtils() {}
    
    static void resetStatus()
    {
      try
      {
        SoLoader.sLoadedLibraries.clear();
        SoLoader.sLoadingLibraries.clear();
        SoLoader.sSoFileLoader = null;
        setSoSources(null);
        return;
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    
    static void setSoFileLoader(SoFileLoader paramSoFileLoader)
    {
      SoLoader.sSoFileLoader = paramSoFileLoader;
    }
    
    static void setSoSources(SoSource[] paramArrayOfSoSource)
    {
      SoLoader.sSoSourcesLock.writeLock().lock();
      try
      {
        SoLoader.access$102(paramArrayOfSoSource);
        SoLoader.access$208();
        SoLoader.sSoSourcesLock.writeLock().unlock();
        return;
      }
      catch (Throwable paramArrayOfSoSource)
      {
        SoLoader.sSoSourcesLock.writeLock().unlock();
        throw paramArrayOfSoSource;
      }
    }
  }
  
  public static final class WrongAbiError
    extends UnsatisfiedLinkError
  {
    WrongAbiError(Throwable paramThrowable, String paramString)
    {
      super();
      initCause(paramThrowable);
    }
  }
}
