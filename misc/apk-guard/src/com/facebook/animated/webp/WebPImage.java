package com.facebook.animated.webp;

import com.facebook.common.internal.DoNotStrip;
import com.facebook.common.internal.Preconditions;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo.BlendOperation;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo.DisposalMethod;
import com.facebook.imagepipeline.animated.base.AnimatedImage;
import com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder;
import com.facebook.imagepipeline.common.ImageDecodeOptions;
import com.facebook.imagepipeline.nativecode.StaticWebpNativeLoader;
import java.nio.ByteBuffer;
import javax.annotation.concurrent.ThreadSafe;

@DoNotStrip
@ThreadSafe
public class WebPImage
  implements AnimatedImage, AnimatedImageDecoder
{
  @DoNotStrip
  private long mNativeContext;
  
  public WebPImage() {}
  
  WebPImage(long paramLong)
  {
    mNativeContext = paramLong;
  }
  
  public static WebPImage createFromByteArray(byte[] paramArrayOfByte)
  {
    StaticWebpNativeLoader.ensure();
    Preconditions.checkNotNull(paramArrayOfByte);
    ByteBuffer localByteBuffer = ByteBuffer.allocateDirect(paramArrayOfByte.length);
    localByteBuffer.put(paramArrayOfByte);
    localByteBuffer.rewind();
    return nativeCreateFromDirectByteBuffer(localByteBuffer);
  }
  
  public static WebPImage createFromByteBuffer(ByteBuffer paramByteBuffer)
  {
    StaticWebpNativeLoader.ensure();
    paramByteBuffer.rewind();
    return nativeCreateFromDirectByteBuffer(paramByteBuffer);
  }
  
  public static WebPImage createFromNativeMemory(long paramLong, int paramInt)
  {
    
    boolean bool;
    if (paramLong != 0L) {
      bool = true;
    } else {
      bool = false;
    }
    Preconditions.checkArgument(bool);
    return nativeCreateFromNativeMemory(paramLong, paramInt);
  }
  
  private static native WebPImage nativeCreateFromDirectByteBuffer(ByteBuffer paramByteBuffer);
  
  private static native WebPImage nativeCreateFromNativeMemory(long paramLong, int paramInt);
  
  private native void nativeDispose();
  
  private native void nativeFinalize();
  
  private native int nativeGetDuration();
  
  private native WebPFrame nativeGetFrame(int paramInt);
  
  private native int nativeGetFrameCount();
  
  private native int[] nativeGetFrameDurations();
  
  private native int nativeGetHeight();
  
  private native int nativeGetLoopCount();
  
  private native int nativeGetSizeInBytes();
  
  private native int nativeGetWidth();
  
  public AnimatedImage decodeFromByteBuffer(ByteBuffer paramByteBuffer, ImageDecodeOptions paramImageDecodeOptions)
  {
    return createFromByteBuffer(paramByteBuffer);
  }
  
  public AnimatedImage decodeFromNativeMemory(long paramLong, int paramInt, ImageDecodeOptions paramImageDecodeOptions)
  {
    return createFromNativeMemory(paramLong, paramInt);
  }
  
  public void dispose()
  {
    nativeDispose();
  }
  
  public boolean doesRenderSupportScaling()
  {
    return true;
  }
  
  protected void finalize()
  {
    nativeFinalize();
  }
  
  public int getDuration()
  {
    return nativeGetDuration();
  }
  
  public WebPFrame getFrame(int paramInt)
  {
    return nativeGetFrame(paramInt);
  }
  
  public int getFrameCount()
  {
    return nativeGetFrameCount();
  }
  
  public int[] getFrameDurations()
  {
    return nativeGetFrameDurations();
  }
  
  public AnimatedDrawableFrameInfo getFrameInfo(int paramInt)
  {
    WebPFrame localWebPFrame = getFrame(paramInt);
    try
    {
      int i = localWebPFrame.getXOffset();
      int j = localWebPFrame.getYOffset();
      int k = localWebPFrame.getWidth();
      int m = localWebPFrame.getHeight();
      boolean bool = localWebPFrame.isBlendWithPreviousFrame();
      if (bool) {
        localObject = AnimatedDrawableFrameInfo.BlendOperation.BLEND_WITH_PREVIOUS;
      } else {
        localObject = AnimatedDrawableFrameInfo.BlendOperation.NO_BLEND;
      }
      bool = localWebPFrame.shouldDisposeToBackgroundColor();
      AnimatedDrawableFrameInfo.DisposalMethod localDisposalMethod;
      if (bool) {
        localDisposalMethod = AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_TO_BACKGROUND;
      } else {
        localDisposalMethod = AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_DO_NOT;
      }
      Object localObject = new AnimatedDrawableFrameInfo(paramInt, i, j, k, m, (AnimatedDrawableFrameInfo.BlendOperation)localObject, localDisposalMethod);
      localWebPFrame.dispose();
      return localObject;
    }
    catch (Throwable localThrowable)
    {
      localWebPFrame.dispose();
      throw localThrowable;
    }
  }
  
  public int getHeight()
  {
    return nativeGetHeight();
  }
  
  public int getLoopCount()
  {
    return nativeGetLoopCount();
  }
  
  public int getSizeInBytes()
  {
    return nativeGetSizeInBytes();
  }
  
  public int getWidth()
  {
    return nativeGetWidth();
  }
}
