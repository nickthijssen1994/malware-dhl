package com.facebook.animated.giflite.drawable;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Movie;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import com.facebook.animated.giflite.decoder.GifMetadataDecoder;
import com.facebook.fresco.animation.backend.AnimationBackend;
import java.io.BufferedInputStream;
import java.io.Closeable;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class GifAnimationBackend
  implements AnimationBackend
{
  private final int[] mFrameStartTimes;
  private final GifMetadataDecoder mGifDecoder;
  private float mMidX;
  private float mMidY;
  private final Movie mMovie;
  
  private GifAnimationBackend(GifMetadataDecoder paramGifMetadataDecoder, Movie paramMovie)
  {
    mGifDecoder = paramGifMetadataDecoder;
    mMovie = paramMovie;
    mFrameStartTimes = new int[paramGifMetadataDecoder.getFrameCount()];
  }
  
  private static void closeSilently(Closeable paramCloseable)
  {
    if (paramCloseable == null) {
      return;
    }
    try
    {
      paramCloseable.close();
      return;
    }
    catch (IOException paramCloseable) {}
  }
  
  public static GifAnimationBackend create(String paramString)
  {
    try
    {
      paramString = new BufferedInputStream(new FileInputStream(paramString));
      try
      {
        paramString.mark(Integer.MAX_VALUE);
        Object localObject = GifMetadataDecoder.create(paramString, null);
        paramString.reset();
        localObject = new GifAnimationBackend((GifMetadataDecoder)localObject, Movie.decodeStream(paramString));
        closeSilently(paramString);
        return localObject;
      }
      catch (Throwable localThrowable1) {}
      closeSilently(paramString);
    }
    catch (Throwable localThrowable2)
    {
      paramString = null;
    }
    throw localThrowable2;
  }
  
  private int getFrameStartTime(int paramInt)
  {
    int i = 0;
    if (paramInt != 0)
    {
      int[] arrayOfInt = mFrameStartTimes;
      if (paramInt >= arrayOfInt.length) {
        return 0;
      }
      if (arrayOfInt[paramInt] != 0) {
        return arrayOfInt[paramInt];
      }
      while (i < paramInt)
      {
        arrayOfInt = mFrameStartTimes;
        arrayOfInt[paramInt] += mGifDecoder.getFrameDurationMs(i);
        i += 1;
      }
      return mFrameStartTimes[paramInt];
    }
    return 0;
  }
  
  private void scale(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    float f1 = paramInt3;
    float f2 = f1 / paramInt4;
    float f3 = paramInt1;
    float f4 = paramInt2;
    float f5 = f3 / f4;
    if (f5 > f2)
    {
      paramInt3 = (int)(f4 * f2);
    }
    else
    {
      if (f5 < f2)
      {
        paramInt4 = (int)(f3 / f2);
        paramInt3 = paramInt1;
        break label71;
      }
      paramInt3 = paramInt1;
    }
    paramInt4 = paramInt2;
    label71:
    f1 = paramInt3 / f1;
    mMidX = ((paramInt1 - paramInt3) / 2.0F / f1);
    mMidY = ((paramInt2 - paramInt4) / 2.0F / f1);
  }
  
  public void clear() {}
  
  public boolean drawFrame(Drawable paramDrawable, Canvas paramCanvas, int paramInt)
  {
    mMovie.setTime(getFrameStartTime(paramInt));
    mMovie.draw(paramCanvas, mMidX, mMidY);
    return true;
  }
  
  public int getFrameCount()
  {
    return mGifDecoder.getFrameCount();
  }
  
  public int getFrameDurationMs(int paramInt)
  {
    return mGifDecoder.getFrameDurationMs(paramInt);
  }
  
  public int getIntrinsicHeight()
  {
    return mMovie.height();
  }
  
  public int getIntrinsicWidth()
  {
    return mMovie.width();
  }
  
  public int getLoopCount()
  {
    return mGifDecoder.getLoopCount();
  }
  
  public int getSizeInBytes()
  {
    return 0;
  }
  
  public void setAlpha(int paramInt) {}
  
  public void setBounds(Rect paramRect)
  {
    scale(right - left, bottom - top, mMovie.width(), mMovie.height());
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {}
}
