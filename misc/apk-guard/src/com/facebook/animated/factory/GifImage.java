package com.facebook.animated.factory;

import com.facebook.common.internal.DoNotStrip;
import com.facebook.common.internal.Preconditions;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo.BlendOperation;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo.DisposalMethod;
import com.facebook.imagepipeline.animated.base.AnimatedImage;
import com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder;
import com.facebook.imagepipeline.common.ImageDecodeOptions;
import com.facebook.soloader.nativeloader.NativeLoader;
import java.nio.ByteBuffer;
import javax.annotation.concurrent.ThreadSafe;

@DoNotStrip
@ThreadSafe
public class GifImage
  implements AnimatedImage, AnimatedImageDecoder
{
  private static final int LOOP_COUNT_FOREVER = 0;
  private static final int LOOP_COUNT_MISSING = -1;
  private static volatile boolean sInitialized;
  @DoNotStrip
  private long mNativeContext;
  
  public GifImage() {}
  
  GifImage(long paramLong)
  {
    mNativeContext = paramLong;
  }
  
  public static GifImage createFromByteArray(byte[] paramArrayOfByte)
  {
    Preconditions.checkNotNull(paramArrayOfByte);
    ByteBuffer localByteBuffer = ByteBuffer.allocateDirect(paramArrayOfByte.length);
    localByteBuffer.put(paramArrayOfByte);
    localByteBuffer.rewind();
    return createFromByteBuffer(localByteBuffer, ImageDecodeOptions.defaults());
  }
  
  public static GifImage createFromByteBuffer(ByteBuffer paramByteBuffer)
  {
    return createFromByteBuffer(paramByteBuffer, ImageDecodeOptions.defaults());
  }
  
  public static GifImage createFromByteBuffer(ByteBuffer paramByteBuffer, ImageDecodeOptions paramImageDecodeOptions)
  {
    ensure();
    paramByteBuffer.rewind();
    return nativeCreateFromDirectByteBuffer(paramByteBuffer, maxDimensionPx, forceStaticImage);
  }
  
  public static GifImage createFromFileDescriptor(int paramInt, ImageDecodeOptions paramImageDecodeOptions)
  {
    ensure();
    return nativeCreateFromFileDescriptor(paramInt, maxDimensionPx, forceStaticImage);
  }
  
  public static GifImage createFromNativeMemory(long paramLong, int paramInt, ImageDecodeOptions paramImageDecodeOptions)
  {
    
    boolean bool;
    if (paramLong != 0L) {
      bool = true;
    } else {
      bool = false;
    }
    Preconditions.checkArgument(bool);
    return nativeCreateFromNativeMemory(paramLong, paramInt, maxDimensionPx, forceStaticImage);
  }
  
  private static void ensure()
  {
    try
    {
      if (!sInitialized)
      {
        sInitialized = true;
        NativeLoader.loadLibrary("gifimage");
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private static AnimatedDrawableFrameInfo.DisposalMethod fromGifDisposalMethod(int paramInt)
  {
    if (paramInt == 0) {
      return AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_DO_NOT;
    }
    if (paramInt == 1) {
      return AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_DO_NOT;
    }
    if (paramInt == 2) {
      return AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_TO_BACKGROUND;
    }
    if (paramInt == 3) {
      return AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_TO_PREVIOUS;
    }
    return AnimatedDrawableFrameInfo.DisposalMethod.DISPOSE_DO_NOT;
  }
  
  private static native GifImage nativeCreateFromDirectByteBuffer(ByteBuffer paramByteBuffer, int paramInt, boolean paramBoolean);
  
  private static native GifImage nativeCreateFromFileDescriptor(int paramInt1, int paramInt2, boolean paramBoolean);
  
  private static native GifImage nativeCreateFromNativeMemory(long paramLong, int paramInt1, int paramInt2, boolean paramBoolean);
  
  private native void nativeDispose();
  
  private native void nativeFinalize();
  
  private native int nativeGetDuration();
  
  private native GifFrame nativeGetFrame(int paramInt);
  
  private native int nativeGetFrameCount();
  
  private native int[] nativeGetFrameDurations();
  
  private native int nativeGetHeight();
  
  private native int nativeGetLoopCount();
  
  private native int nativeGetSizeInBytes();
  
  private native int nativeGetWidth();
  
  private native boolean nativeIsAnimated();
  
  public AnimatedImage decodeFromByteBuffer(ByteBuffer paramByteBuffer, ImageDecodeOptions paramImageDecodeOptions)
  {
    return createFromByteBuffer(paramByteBuffer, paramImageDecodeOptions);
  }
  
  public AnimatedImage decodeFromNativeMemory(long paramLong, int paramInt, ImageDecodeOptions paramImageDecodeOptions)
  {
    return createFromNativeMemory(paramLong, paramInt, paramImageDecodeOptions);
  }
  
  public void dispose()
  {
    nativeDispose();
  }
  
  public boolean doesRenderSupportScaling()
  {
    return false;
  }
  
  protected void finalize()
  {
    nativeFinalize();
  }
  
  public int getDuration()
  {
    return nativeGetDuration();
  }
  
  public GifFrame getFrame(int paramInt)
  {
    return nativeGetFrame(paramInt);
  }
  
  public int getFrameCount()
  {
    return nativeGetFrameCount();
  }
  
  public int[] getFrameDurations()
  {
    return nativeGetFrameDurations();
  }
  
  public AnimatedDrawableFrameInfo getFrameInfo(int paramInt)
  {
    GifFrame localGifFrame = getFrame(paramInt);
    try
    {
      AnimatedDrawableFrameInfo localAnimatedDrawableFrameInfo = new AnimatedDrawableFrameInfo(paramInt, localGifFrame.getXOffset(), localGifFrame.getYOffset(), localGifFrame.getWidth(), localGifFrame.getHeight(), AnimatedDrawableFrameInfo.BlendOperation.BLEND_WITH_PREVIOUS, fromGifDisposalMethod(localGifFrame.getDisposalMode()));
      localGifFrame.dispose();
      return localAnimatedDrawableFrameInfo;
    }
    catch (Throwable localThrowable)
    {
      localGifFrame.dispose();
      throw localThrowable;
    }
  }
  
  public int getHeight()
  {
    return nativeGetHeight();
  }
  
  public int getLoopCount()
  {
    int i = nativeGetLoopCount();
    switch (i)
    {
    default: 
      return i + 1;
    case 0: 
      return 0;
    }
    return 1;
  }
  
  public int getSizeInBytes()
  {
    return nativeGetSizeInBytes();
  }
  
  public int getWidth()
  {
    return nativeGetWidth();
  }
  
  public boolean isAnimated()
  {
    return nativeIsAnimated();
  }
}
