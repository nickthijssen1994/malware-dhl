package com.facebook.animated.webpdrawable;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import com.facebook.animated.webp.WebPFrame;
import com.facebook.animated.webp.WebPImage;
import com.facebook.fresco.animation.backend.AnimationBackend;
import java.io.BufferedInputStream;
import java.io.Closeable;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;

public class WebpAnimationBackend
  implements AnimationBackend
{
  private Rect mBounds;
  private final Rect mRenderDstRect = new Rect();
  private final Rect mRenderSrcRect = new Rect();
  @Nullable
  @GuardedBy("this")
  private Bitmap mTempBitmap;
  private final WebPImage mWebPImage;
  
  private WebpAnimationBackend(WebPImage paramWebPImage)
  {
    mWebPImage = paramWebPImage;
  }
  
  private void clearTempBitmap()
  {
    try
    {
      if (mTempBitmap != null)
      {
        mTempBitmap.recycle();
        mTempBitmap = null;
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  private static void closeSilently(Closeable paramCloseable)
  {
    if (paramCloseable == null) {
      return;
    }
    try
    {
      paramCloseable.close();
      return;
    }
    catch (IOException paramCloseable) {}
  }
  
  public static WebpAnimationBackend create(String paramString)
  {
    try
    {
      paramString = new BufferedInputStream(new FileInputStream(paramString));
      try
      {
        paramString.mark(Integer.MAX_VALUE);
        Object localObject = new byte[paramString.available()];
        paramString.read((byte[])localObject);
        localObject = WebPImage.createFromByteArray((byte[])localObject);
        paramString.reset();
        localObject = new WebpAnimationBackend((WebPImage)localObject);
        closeSilently(paramString);
        return localObject;
      }
      catch (Throwable localThrowable1) {}
      closeSilently(paramString);
    }
    catch (Throwable localThrowable2)
    {
      paramString = null;
    }
    throw localThrowable2;
  }
  
  private void prepareTempBitmapForThisSize(int paramInt1, int paramInt2)
  {
    try
    {
      if ((mTempBitmap != null) && ((mTempBitmap.getWidth() < paramInt1) || (mTempBitmap.getHeight() < paramInt2))) {
        clearTempBitmap();
      }
      if (mTempBitmap == null) {
        mTempBitmap = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
      }
      mTempBitmap.eraseColor(0);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void clear()
  {
    mWebPImage.dispose();
  }
  
  public boolean drawFrame(Drawable paramDrawable, Canvas paramCanvas, int paramInt)
  {
    WebPFrame localWebPFrame = mWebPImage.getFrame(paramInt);
    double d1 = mBounds.width();
    double d2 = paramDrawable.getIntrinsicWidth();
    Double.isNaN(d1);
    Double.isNaN(d2);
    d1 /= d2;
    d2 = mBounds.height();
    double d3 = paramDrawable.getIntrinsicHeight();
    Double.isNaN(d2);
    Double.isNaN(d3);
    d2 /= d3;
    d3 = localWebPFrame.getWidth();
    Double.isNaN(d3);
    paramInt = (int)Math.round(d3 * d1);
    d3 = localWebPFrame.getHeight();
    Double.isNaN(d3);
    int i = (int)Math.round(d3 * d2);
    d3 = localWebPFrame.getXOffset();
    Double.isNaN(d3);
    int j = (int)(d3 * d1);
    d1 = localWebPFrame.getYOffset();
    Double.isNaN(d1);
    int k = (int)(d1 * d2);
    try
    {
      int m = mBounds.width();
      int n = mBounds.height();
      prepareTempBitmapForThisSize(m, n);
      if (mTempBitmap == null) {
        return false;
      }
      localWebPFrame.renderFrame(paramInt, i, mTempBitmap);
      mRenderSrcRect.set(0, 0, m, n);
      mRenderDstRect.set(j, k, m + j, n + k);
      paramCanvas.drawBitmap(mTempBitmap, mRenderSrcRect, mRenderDstRect, null);
      return true;
    }
    catch (Throwable paramDrawable)
    {
      throw paramDrawable;
    }
  }
  
  public int getFrameCount()
  {
    return mWebPImage.getFrameCount();
  }
  
  public int getFrameDurationMs(int paramInt)
  {
    return mWebPImage.getFrameDurations()[paramInt];
  }
  
  public int getIntrinsicHeight()
  {
    return mWebPImage.getHeight();
  }
  
  public int getIntrinsicWidth()
  {
    return mWebPImage.getWidth();
  }
  
  public int getLoopCount()
  {
    return mWebPImage.getLoopCount();
  }
  
  public int getSizeInBytes()
  {
    return 0;
  }
  
  public void setAlpha(int paramInt) {}
  
  public void setBounds(Rect paramRect)
  {
    try
    {
      mBounds = paramRect;
      return;
    }
    catch (Throwable paramRect)
    {
      throw paramRect;
    }
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {}
}
