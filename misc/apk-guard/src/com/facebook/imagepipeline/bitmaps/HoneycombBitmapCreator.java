package com.facebook.imagepipeline.bitmaps;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.os.Build.VERSION;
import com.facebook.common.memory.PooledByteBuffer;
import com.facebook.common.references.CloseableReference;
import com.facebook.common.webp.BitmapCreator;
import com.facebook.imageformat.DefaultImageFormats;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.memory.FlexByteArrayPool;
import com.facebook.imagepipeline.memory.PoolFactory;

public class HoneycombBitmapCreator
  implements BitmapCreator
{
  private final FlexByteArrayPool mFlexByteArrayPool;
  private final EmptyJpegGenerator mJpegGenerator;
  
  public HoneycombBitmapCreator(PoolFactory paramPoolFactory)
  {
    mFlexByteArrayPool = paramPoolFactory.getFlexByteArrayPool();
    mJpegGenerator = new EmptyJpegGenerator(paramPoolFactory.getPooledByteBufferFactory());
  }
  
  private static BitmapFactory.Options getBitmapFactoryOptions(int paramInt, Bitmap.Config paramConfig)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    inDither = true;
    inPreferredConfig = paramConfig;
    inPurgeable = true;
    inInputShareable = true;
    inSampleSize = paramInt;
    if (Build.VERSION.SDK_INT >= 11) {
      inMutable = true;
    }
    return localOptions;
  }
  
  public Bitmap createNakedBitmap(int paramInt1, int paramInt2, Bitmap.Config paramConfig)
  {
    CloseableReference localCloseableReference2 = mJpegGenerator.generate((short)paramInt1, (short)paramInt2);
    Object localObject1 = null;
    CloseableReference localCloseableReference1 = null;
    try
    {
      Object localObject2 = new EncodedImage(localCloseableReference2);
      localObject1 = localCloseableReference1;
      try
      {
        ((EncodedImage)localObject2).setImageFormat(DefaultImageFormats.JPEG);
        localObject1 = localCloseableReference1;
        Object localObject3 = getBitmapFactoryOptions(((EncodedImage)localObject2).getSampleSize(), paramConfig);
        localObject1 = localCloseableReference1;
        paramInt1 = ((PooledByteBuffer)localCloseableReference2.get()).size();
        localObject1 = localCloseableReference1;
        PooledByteBuffer localPooledByteBuffer = (PooledByteBuffer)localCloseableReference2.get();
        localObject1 = localCloseableReference1;
        paramConfig = mFlexByteArrayPool;
        localObject1 = localCloseableReference1;
        localCloseableReference1 = paramConfig.calculateDimensions(paramInt1 + 2);
        paramConfig = localCloseableReference1;
        localObject1 = paramConfig;
        byte[] arrayOfByte = (byte[])localCloseableReference1.get();
        localObject1 = paramConfig;
        localPooledByteBuffer.read(0, arrayOfByte, 0, paramInt1);
        localObject1 = paramConfig;
        localObject3 = BitmapFactory.decodeByteArray(arrayOfByte, 0, paramInt1, (BitmapFactory.Options)localObject3);
        localObject1 = paramConfig;
        ((Bitmap)localObject3).setHasAlpha(true);
        localObject1 = paramConfig;
        ((Bitmap)localObject3).eraseColor(0);
        CloseableReference.closeSafely(localCloseableReference1);
        EncodedImage.closeSafely((EncodedImage)localObject2);
        CloseableReference.closeSafely(localCloseableReference2);
        return localObject3;
      }
      catch (Throwable localThrowable2)
      {
        paramConfig = (Bitmap.Config)localObject2;
        localObject2 = localThrowable2;
      }
      CloseableReference.closeSafely((CloseableReference)localObject1);
    }
    catch (Throwable localThrowable1)
    {
      paramConfig = null;
    }
    EncodedImage.closeSafely(paramConfig);
    CloseableReference.closeSafely(localCloseableReference2);
    throw localThrowable1;
  }
}
