package com.facebook.imagepipeline.image;

import com.facebook.imagepipeline.animated.base.AnimatedImage;
import com.facebook.imagepipeline.animated.base.AnimatedImageResult;

public class CloseableAnimatedImage
  extends CloseableImage
{
  private AnimatedImageResult mImageResult;
  private boolean mIsStateful;
  
  public CloseableAnimatedImage(AnimatedImageResult paramAnimatedImageResult)
  {
    this(paramAnimatedImageResult, true);
  }
  
  public CloseableAnimatedImage(AnimatedImageResult paramAnimatedImageResult, boolean paramBoolean)
  {
    mImageResult = paramAnimatedImageResult;
    mIsStateful = paramBoolean;
  }
  
  public void close()
  {
    try
    {
      if (mImageResult == null) {
        return;
      }
      AnimatedImageResult localAnimatedImageResult = mImageResult;
      mImageResult = null;
      localAnimatedImageResult.dispose();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getHeight()
  {
    try
    {
      int i;
      if (isClosed()) {
        i = 0;
      } else {
        i = mImageResult.getImage().getHeight();
      }
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public AnimatedImage getImage()
  {
    try
    {
      AnimatedImage localAnimatedImage;
      if (isClosed()) {
        localAnimatedImage = null;
      } else {
        localAnimatedImage = mImageResult.getImage();
      }
      return localAnimatedImage;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public AnimatedImageResult getImageResult()
  {
    try
    {
      AnimatedImageResult localAnimatedImageResult = mImageResult;
      return localAnimatedImageResult;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getSizeInBytes()
  {
    try
    {
      int i;
      if (isClosed()) {
        i = 0;
      } else {
        i = mImageResult.getImage().getSizeInBytes();
      }
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getWidth()
  {
    try
    {
      int i;
      if (isClosed()) {
        i = 0;
      } else {
        i = mImageResult.getImage().getWidth();
      }
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean isClosed()
  {
    try
    {
      AnimatedImageResult localAnimatedImageResult = mImageResult;
      boolean bool;
      if (localAnimatedImageResult == null) {
        bool = true;
      } else {
        bool = false;
      }
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean isStateful()
  {
    return mIsStateful;
  }
}
