package com.facebook.imagepipeline.platform;

import android.annotation.TargetApi;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.ColorSpace;
import android.graphics.Rect;
import android.os.Build.VERSION;
import androidx.core.util.Pools.SynchronizedPool;
import com.facebook.common.internal.VisibleForTesting;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.memory.BitmapPool;
import java.io.InputStream;
import java.nio.ByteBuffer;
import javax.annotation.Nullable;
import javax.annotation.concurrent.ThreadSafe;

@TargetApi(11)
@ThreadSafe
public abstract class DefaultDecoder
  implements PlatformDecoder
{
  private static final int DECODE_BUFFER_SIZE = 16384;
  private static final byte[] EOI_TAIL = { -1, -39 };
  private static final Class<?> SHORT = DefaultDecoder.class;
  private final BitmapPool mBitmapPool;
  @VisibleForTesting
  final Pools.SynchronizedPool<ByteBuffer> mDecodeBuffers;
  @Nullable
  private final PreverificationHelper mPreverificationHelper;
  
  public DefaultDecoder(BitmapPool paramBitmapPool, int paramInt, Pools.SynchronizedPool paramSynchronizedPool)
  {
    PreverificationHelper localPreverificationHelper;
    if (Build.VERSION.SDK_INT >= 26) {
      localPreverificationHelper = new PreverificationHelper();
    } else {
      localPreverificationHelper = null;
    }
    mPreverificationHelper = localPreverificationHelper;
    mBitmapPool = paramBitmapPool;
    mDecodeBuffers = paramSynchronizedPool;
    int i = 0;
    while (i < paramInt)
    {
      mDecodeBuffers.release(ByteBuffer.allocate(16384));
      i += 1;
    }
  }
  
  /* Error */
  private CloseableReference decodeFromStream(InputStream paramInputStream, BitmapFactory.Options paramOptions, Rect paramRect, ColorSpace paramColorSpace)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 80	com/facebook/common/internal/Preconditions:checkNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
    //   4: pop
    //   5: aload_2
    //   6: getfield 85	android/graphics/BitmapFactory$Options:outWidth	I
    //   9: istore 5
    //   11: aload_2
    //   12: getfield 88	android/graphics/BitmapFactory$Options:outHeight	I
    //   15: istore 6
    //   17: aload_3
    //   18: ifnull +25 -> 43
    //   21: aload_3
    //   22: invokevirtual 94	android/graphics/Rect:width	()I
    //   25: aload_2
    //   26: getfield 97	android/graphics/BitmapFactory$Options:inSampleSize	I
    //   29: idiv
    //   30: istore 5
    //   32: aload_3
    //   33: invokevirtual 100	android/graphics/Rect:height	()I
    //   36: aload_2
    //   37: getfield 97	android/graphics/BitmapFactory$Options:inSampleSize	I
    //   40: idiv
    //   41: istore 6
    //   43: getstatic 45	android/os/Build$VERSION:SDK_INT	I
    //   46: bipush 26
    //   48: if_icmplt +32 -> 80
    //   51: aload_0
    //   52: getfield 50	com/facebook/imagepipeline/platform/DefaultDecoder:mPreverificationHelper	Lcom/facebook/imagepipeline/platform/PreverificationHelper;
    //   55: astore 8
    //   57: aload 8
    //   59: ifnull +21 -> 80
    //   62: aload 8
    //   64: aload_2
    //   65: getfield 104	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   68: invokevirtual 108	com/facebook/imagepipeline/platform/PreverificationHelper:shouldUseHardwareBitmapConfig	(Landroid/graphics/Bitmap$Config;)Z
    //   71: ifeq +9 -> 80
    //   74: iconst_1
    //   75: istore 7
    //   77: goto +6 -> 83
    //   80: iconst_0
    //   81: istore 7
    //   83: aload_3
    //   84: ifnonnull +19 -> 103
    //   87: iload 7
    //   89: ifeq +14 -> 103
    //   92: aload_2
    //   93: iconst_0
    //   94: putfield 112	android/graphics/BitmapFactory$Options:inMutable	Z
    //   97: aconst_null
    //   98: astore 9
    //   100: goto +51 -> 151
    //   103: aload_3
    //   104: ifnull +15 -> 119
    //   107: iload 7
    //   109: ifeq +10 -> 119
    //   112: aload_2
    //   113: getstatic 117	android/graphics/Bitmap$Config:ARGB_8888	Landroid/graphics/Bitmap$Config;
    //   116: putfield 104	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   119: aload_0
    //   120: iload 5
    //   122: iload 6
    //   124: aload_2
    //   125: invokevirtual 121	com/facebook/imagepipeline/platform/DefaultDecoder:getBitmapSize	(IILandroid/graphics/BitmapFactory$Options;)I
    //   128: istore 7
    //   130: aload_0
    //   131: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   134: iload 7
    //   136: invokeinterface 127 2 0
    //   141: checkcast 129	android/graphics/Bitmap
    //   144: astore 9
    //   146: aload 9
    //   148: ifnull +326 -> 474
    //   151: aload_2
    //   152: aload 9
    //   154: putfield 133	android/graphics/BitmapFactory$Options:inBitmap	Landroid/graphics/Bitmap;
    //   157: getstatic 45	android/os/Build$VERSION:SDK_INT	I
    //   160: bipush 26
    //   162: if_icmplt +26 -> 188
    //   165: aload 4
    //   167: astore 8
    //   169: aload 4
    //   171: ifnonnull +11 -> 182
    //   174: getstatic 139	android/graphics/ColorSpace$Named:SRGB	Landroid/graphics/ColorSpace$Named;
    //   177: invokestatic 144	android/graphics/ColorSpace:get	(Landroid/graphics/ColorSpace$Named;)Landroid/graphics/ColorSpace;
    //   180: astore 8
    //   182: aload_2
    //   183: aload 8
    //   185: putfield 148	android/graphics/BitmapFactory$Options:inPreferredColorSpace	Landroid/graphics/ColorSpace;
    //   188: aload_0
    //   189: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   192: invokevirtual 152	androidx/core/util/Pools$SynchronizedPool:acquire	()Ljava/lang/Object;
    //   195: checkcast 56	java/nio/ByteBuffer
    //   198: astore 4
    //   200: aload 4
    //   202: astore 10
    //   204: aload 4
    //   206: ifnonnull +11 -> 217
    //   209: sipush 16384
    //   212: invokestatic 60	java/nio/ByteBuffer:allocate	(I)Ljava/nio/ByteBuffer;
    //   215: astore 10
    //   217: aload_2
    //   218: aload 10
    //   220: invokevirtual 156	java/nio/ByteBuffer:array	()[B
    //   223: putfield 159	android/graphics/BitmapFactory$Options:inTempStorage	[B
    //   226: getstatic 45	android/os/Build$VERSION:SDK_INT	I
    //   229: istore 7
    //   231: iload 7
    //   233: bipush 19
    //   235: if_icmplt +128 -> 363
    //   238: aload_3
    //   239: ifnull +124 -> 363
    //   242: aload 9
    //   244: ifnull +119 -> 363
    //   247: aload_2
    //   248: getfield 104	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   251: astore 4
    //   253: aload 9
    //   255: iload 5
    //   257: iload 6
    //   259: aload 4
    //   261: invokevirtual 163	android/graphics/Bitmap:reconfigure	(IILandroid/graphics/Bitmap$Config;)V
    //   264: aload_1
    //   265: iconst_1
    //   266: invokestatic 169	android/graphics/BitmapRegionDecoder:newInstance	(Ljava/io/InputStream;Z)Landroid/graphics/BitmapRegionDecoder;
    //   269: astore 11
    //   271: aload 11
    //   273: astore 8
    //   275: aload 8
    //   277: astore 4
    //   279: aload 11
    //   281: aload_3
    //   282: aload_2
    //   283: invokevirtual 173	android/graphics/BitmapRegionDecoder:decodeRegion	(Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   286: astore 12
    //   288: aload 12
    //   290: astore_3
    //   291: aload 11
    //   293: ifnull +72 -> 365
    //   296: aload 11
    //   298: invokevirtual 176	android/graphics/BitmapRegionDecoder:recycle	()V
    //   301: aload 12
    //   303: astore_3
    //   304: goto +61 -> 365
    //   307: astore_1
    //   308: aconst_null
    //   309: astore 4
    //   311: goto +40 -> 351
    //   314: aconst_null
    //   315: astore 8
    //   317: aload 8
    //   319: astore 4
    //   321: getstatic 31	com/facebook/imagepipeline/platform/DefaultDecoder:SHORT	Ljava/lang/Class;
    //   324: ldc -78
    //   326: iconst_1
    //   327: anewarray 4	java/lang/Object
    //   330: dup
    //   331: iconst_0
    //   332: aload_3
    //   333: aastore
    //   334: invokestatic 184	com/facebook/common/logging/FLog:e	(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)V
    //   337: aload 8
    //   339: ifnull +24 -> 363
    //   342: aload 8
    //   344: invokevirtual 176	android/graphics/BitmapRegionDecoder:recycle	()V
    //   347: goto +16 -> 363
    //   350: astore_1
    //   351: aload 4
    //   353: ifnull +8 -> 361
    //   356: aload 4
    //   358: invokevirtual 176	android/graphics/BitmapRegionDecoder:recycle	()V
    //   361: aload_1
    //   362: athrow
    //   363: aconst_null
    //   364: astore_3
    //   365: aload_3
    //   366: astore 4
    //   368: aload_3
    //   369: ifnonnull +11 -> 380
    //   372: aload_1
    //   373: aconst_null
    //   374: aload_2
    //   375: invokestatic 190	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   378: astore 4
    //   380: aload_0
    //   381: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   384: aload 10
    //   386: invokevirtual 66	androidx/core/util/Pools$SynchronizedPool:release	(Ljava/lang/Object;)Z
    //   389: pop
    //   390: aload 9
    //   392: ifnull +37 -> 429
    //   395: aload 9
    //   397: aload 4
    //   399: if_acmpne +6 -> 405
    //   402: goto +27 -> 429
    //   405: aload_0
    //   406: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   409: aload 9
    //   411: invokeinterface 193 2 0
    //   416: aload 4
    //   418: invokevirtual 194	android/graphics/Bitmap:recycle	()V
    //   421: new 196	java/lang/IllegalStateException
    //   424: dup
    //   425: invokespecial 197	java/lang/IllegalStateException:<init>	()V
    //   428: athrow
    //   429: aload 4
    //   431: aload_0
    //   432: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   435: invokestatic 203	com/facebook/common/references/CloseableReference:of	(Ljava/lang/Object;Lcom/facebook/common/references/ResourceReleaser;)Lcom/facebook/common/references/CloseableReference;
    //   438: areturn
    //   439: astore_1
    //   440: goto +22 -> 462
    //   443: astore_1
    //   444: aload 9
    //   446: ifnull +14 -> 460
    //   449: aload_0
    //   450: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   453: aload 9
    //   455: invokeinterface 193 2 0
    //   460: aload_1
    //   461: athrow
    //   462: aload_0
    //   463: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   466: aload 10
    //   468: invokevirtual 66	androidx/core/util/Pools$SynchronizedPool:release	(Ljava/lang/Object;)Z
    //   471: pop
    //   472: aload_1
    //   473: athrow
    //   474: new 205	java/lang/NullPointerException
    //   477: dup
    //   478: ldc -49
    //   480: invokespecial 210	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   483: athrow
    //   484: astore 4
    //   486: goto -172 -> 314
    //   489: astore 4
    //   491: goto -174 -> 317
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	494	0	this	DefaultDecoder
    //   0	494	1	paramInputStream	InputStream
    //   0	494	2	paramOptions	BitmapFactory.Options
    //   0	494	3	paramRect	Rect
    //   0	494	4	paramColorSpace	ColorSpace
    //   9	247	5	i	int
    //   15	243	6	j	int
    //   75	161	7	k	int
    //   55	288	8	localObject1	Object
    //   98	356	9	localBitmap1	android.graphics.Bitmap
    //   202	265	10	localObject2	Object
    //   269	28	11	localBitmapRegionDecoder	android.graphics.BitmapRegionDecoder
    //   286	16	12	localBitmap2	android.graphics.Bitmap
    // Exception table:
    //   from	to	target	type
    //   253	271	307	java/lang/Throwable
    //   279	288	350	java/lang/Throwable
    //   321	337	350	java/lang/Throwable
    //   217	226	439	java/lang/Throwable
    //   226	231	439	java/lang/Throwable
    //   296	301	439	java/lang/Throwable
    //   342	347	439	java/lang/Throwable
    //   356	361	439	java/lang/Throwable
    //   361	363	439	java/lang/Throwable
    //   372	380	439	java/lang/Throwable
    //   449	460	439	java/lang/Throwable
    //   460	462	439	java/lang/Throwable
    //   217	226	443	java/lang/RuntimeException
    //   296	301	443	java/lang/RuntimeException
    //   342	347	443	java/lang/RuntimeException
    //   356	361	443	java/lang/RuntimeException
    //   361	363	443	java/lang/RuntimeException
    //   372	380	443	java/lang/RuntimeException
    //   253	271	484	java/io/IOException
    //   279	288	489	java/io/IOException
  }
  
  private static BitmapFactory.Options getDecodeOptionsForStream(EncodedImage paramEncodedImage, Bitmap.Config paramConfig)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    inSampleSize = paramEncodedImage.getSampleSize();
    inJustDecodeBounds = true;
    BitmapFactory.decodeStream(paramEncodedImage.getInputStream(), null, localOptions);
    if ((outWidth != -1) && (outHeight != -1))
    {
      inJustDecodeBounds = false;
      inDither = true;
      inPreferredConfig = paramConfig;
      inMutable = true;
      return localOptions;
    }
    throw new IllegalArgumentException();
  }
  
  public CloseableReference decodeFromEncodedImage(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, Rect paramRect)
  {
    return decodeFromEncodedImageWithColorSpace(paramEncodedImage, paramConfig, paramRect, null);
  }
  
  public CloseableReference decodeFromEncodedImageWithColorSpace(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, Rect paramRect, ColorSpace paramColorSpace)
  {
    paramConfig = getDecodeOptionsForStream(paramEncodedImage, paramConfig);
    int i;
    if (inPreferredConfig != Bitmap.Config.ARGB_8888) {
      i = 1;
    } else {
      i = 0;
    }
    try
    {
      paramConfig = decodeFromStream(paramEncodedImage.getInputStream(), paramConfig, paramRect, paramColorSpace);
      return paramConfig;
    }
    catch (RuntimeException paramConfig)
    {
      if (i != 0) {
        return decodeFromEncodedImageWithColorSpace(paramEncodedImage, Bitmap.Config.ARGB_8888, paramRect, paramColorSpace);
      }
      throw paramConfig;
    }
  }
  
  public CloseableReference decodeJPEGFromEncodedImage(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, Rect paramRect, int paramInt)
  {
    return decodeJPEGFromEncodedImageWithColorSpace(paramEncodedImage, paramConfig, paramRect, paramInt, null);
  }
  
  public CloseableReference decodeJPEGFromEncodedImageWithColorSpace(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, Rect paramRect, int paramInt, ColorSpace paramColorSpace)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a13 = a12\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  protected CloseableReference decodeStaticImageFromStream(InputStream paramInputStream, BitmapFactory.Options paramOptions, Rect paramRect)
  {
    return decodeFromStream(paramInputStream, paramOptions, paramRect, null);
  }
  
  public abstract int getBitmapSize(int paramInt1, int paramInt2, BitmapFactory.Options paramOptions);
}
