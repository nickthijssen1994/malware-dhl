package com.facebook.imagepipeline.cache;

import bolts.g;
import com.facebook.cache.common.CacheKey;
import com.facebook.cache.common.WriterCallback;
import com.facebook.cache.disk.FileCache;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.logging.FLog;
import com.facebook.common.memory.PooledByteBufferFactory;
import com.facebook.common.memory.PooledByteStreams;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.instrumentation.FrescoInstrumenter;
import com.facebook.imagepipeline.systrace.FrescoSystrace;
import java.io.IOException;
import java.io.OutputStream;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;

public class BufferedDiskCache
{
  private static final Class<?> TAG = BufferedDiskCache.class;
  private final FileCache mFileCache;
  private final ImageCacheStatsTracker mImageCacheStatsTracker;
  private final PooledByteBufferFactory mPooledByteBufferFactory;
  private final PooledByteStreams mPooledByteStreams;
  private final Executor mReadExecutor;
  private final StagingArea mStagingArea;
  private final Executor mWriteExecutor;
  
  public BufferedDiskCache(FileCache paramFileCache, PooledByteBufferFactory paramPooledByteBufferFactory, PooledByteStreams paramPooledByteStreams, Executor paramExecutor1, Executor paramExecutor2, ImageCacheStatsTracker paramImageCacheStatsTracker)
  {
    mFileCache = paramFileCache;
    mPooledByteBufferFactory = paramPooledByteBufferFactory;
    mPooledByteStreams = paramPooledByteStreams;
    mReadExecutor = paramExecutor1;
    mWriteExecutor = paramExecutor2;
    mImageCacheStatsTracker = paramImageCacheStatsTracker;
    mStagingArea = StagingArea.getInstance();
  }
  
  private boolean checkInStagingAreaAndFileCache(CacheKey paramCacheKey)
  {
    Object localObject = mStagingArea.get(paramCacheKey);
    if (localObject != null)
    {
      ((EncodedImage)localObject).close();
      FLog.v(TAG, "Found image for %s in staging area", paramCacheKey.getUriString());
      mImageCacheStatsTracker.onStagingAreaHit(paramCacheKey);
      return true;
    }
    FLog.v(TAG, "Did not find image for %s in staging area", paramCacheKey.getUriString());
    mImageCacheStatsTracker.onStagingAreaMiss(paramCacheKey);
    localObject = mFileCache;
    try
    {
      boolean bool = ((FileCache)localObject).hasKey(paramCacheKey);
      return bool;
    }
    catch (Exception paramCacheKey)
    {
      for (;;) {}
    }
    return false;
  }
  
  private g containsAsync(final CacheKey paramCacheKey)
  {
    try
    {
      final Object localObject = FrescoInstrumenter.onBeforeSubmitWork("BufferedDiskCache_containsAsync");
      localObject = new Callable()
      {
        public Boolean call()
        {
          Object localObject = FrescoInstrumenter.onBeginWork(localObject, null);
          try
          {
            boolean bool = BufferedDiskCache.this.checkInStagingAreaAndFileCache(paramCacheKey);
            FrescoInstrumenter.onEndWork(localObject);
            return Boolean.valueOf(bool);
          }
          catch (Throwable localThrowable)
          {
            FrescoInstrumenter.onEndWork(localObject);
            throw localThrowable;
          }
        }
      };
      Executor localExecutor = mReadExecutor;
      localObject = g.a((Callable)localObject, localExecutor);
      return localObject;
    }
    catch (Exception localException)
    {
      FLog.w(TAG, localException, "Failed to schedule disk-cache read for %s", new Object[] { paramCacheKey.getUriString() });
      return g.a(localException);
    }
  }
  
  private g foundPinnedImage(CacheKey paramCacheKey, EncodedImage paramEncodedImage)
  {
    FLog.v(TAG, "Found image for %s in staging area", paramCacheKey.getUriString());
    mImageCacheStatsTracker.onStagingAreaHit(paramCacheKey);
    return g.a(paramEncodedImage);
  }
  
  private g getAsync(final CacheKey paramCacheKey, final AtomicBoolean paramAtomicBoolean)
  {
    try
    {
      final Object localObject = FrescoInstrumenter.onBeforeSubmitWork("BufferedDiskCache_getAsync");
      paramAtomicBoolean = new Callable()
      {
        /* Error */
        public EncodedImage call()
        {
          // Byte code:
          //   0: aload_0
          //   1: getfield 26	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$token	Ljava/lang/Object;
          //   4: aconst_null
          //   5: invokestatic 46	com/facebook/imagepipeline/instrumentation/FrescoInstrumenter:onBeginWork	(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
          //   8: astore 4
          //   10: aload_0
          //   11: getfield 28	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$isCancelled	Ljava/util/concurrent/atomic/AtomicBoolean;
          //   14: invokevirtual 52	java/util/concurrent/atomic/AtomicBoolean:get	()Z
          //   17: istore_1
          //   18: iload_1
          //   19: ifne +191 -> 210
          //   22: aload_0
          //   23: getfield 24	com/facebook/imagepipeline/cache/BufferedDiskCache$2:this$0	Lcom/facebook/imagepipeline/cache/BufferedDiskCache;
          //   26: invokestatic 56	com/facebook/imagepipeline/cache/BufferedDiskCache:access$100	(Lcom/facebook/imagepipeline/cache/BufferedDiskCache;)Lcom/facebook/imagepipeline/cache/StagingArea;
          //   29: aload_0
          //   30: getfield 30	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$key	Lcom/facebook/cache/common/CacheKey;
          //   33: invokevirtual 61	com/facebook/imagepipeline/cache/StagingArea:get	(Lcom/facebook/cache/common/CacheKey;)Lcom/facebook/imagepipeline/image/EncodedImage;
          //   36: astore_3
          //   37: aload_3
          //   38: astore_2
          //   39: aload_3
          //   40: ifnull +39 -> 79
          //   43: invokestatic 65	com/facebook/imagepipeline/cache/BufferedDiskCache:access$200	()Ljava/lang/Class;
          //   46: ldc 67
          //   48: aload_0
          //   49: getfield 30	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$key	Lcom/facebook/cache/common/CacheKey;
          //   52: invokeinterface 73 1 0
          //   57: invokestatic 79	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
          //   60: aload_0
          //   61: getfield 24	com/facebook/imagepipeline/cache/BufferedDiskCache$2:this$0	Lcom/facebook/imagepipeline/cache/BufferedDiskCache;
          //   64: invokestatic 83	com/facebook/imagepipeline/cache/BufferedDiskCache:access$300	(Lcom/facebook/imagepipeline/cache/BufferedDiskCache;)Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
          //   67: aload_0
          //   68: getfield 30	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$key	Lcom/facebook/cache/common/CacheKey;
          //   71: invokeinterface 89 2 0
          //   76: goto +81 -> 157
          //   79: invokestatic 65	com/facebook/imagepipeline/cache/BufferedDiskCache:access$200	()Ljava/lang/Class;
          //   82: ldc 91
          //   84: aload_0
          //   85: getfield 30	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$key	Lcom/facebook/cache/common/CacheKey;
          //   88: invokeinterface 73 1 0
          //   93: invokestatic 79	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
          //   96: aload_0
          //   97: getfield 24	com/facebook/imagepipeline/cache/BufferedDiskCache$2:this$0	Lcom/facebook/imagepipeline/cache/BufferedDiskCache;
          //   100: invokestatic 83	com/facebook/imagepipeline/cache/BufferedDiskCache:access$300	(Lcom/facebook/imagepipeline/cache/BufferedDiskCache;)Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
          //   103: aload_0
          //   104: getfield 30	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$key	Lcom/facebook/cache/common/CacheKey;
          //   107: invokeinterface 94 2 0
          //   112: aload_0
          //   113: getfield 24	com/facebook/imagepipeline/cache/BufferedDiskCache$2:this$0	Lcom/facebook/imagepipeline/cache/BufferedDiskCache;
          //   116: astore_2
          //   117: aload_0
          //   118: getfield 30	com/facebook/imagepipeline/cache/BufferedDiskCache$2:val$key	Lcom/facebook/cache/common/CacheKey;
          //   121: astore_3
          //   122: aload_2
          //   123: aload_3
          //   124: invokestatic 98	com/facebook/imagepipeline/cache/BufferedDiskCache:access$400	(Lcom/facebook/imagepipeline/cache/BufferedDiskCache;Lcom/facebook/cache/common/CacheKey;)Lcom/facebook/common/memory/PooledByteBuffer;
          //   127: astore_2
          //   128: aload_2
          //   129: ifnonnull +10 -> 139
          //   132: aload 4
          //   134: invokestatic 102	com/facebook/imagepipeline/instrumentation/FrescoInstrumenter:onEndWork	(Ljava/lang/Object;)V
          //   137: aconst_null
          //   138: areturn
          //   139: aload_2
          //   140: invokestatic 108	com/facebook/common/references/CloseableReference:of	(Ljava/io/Closeable;)Lcom/facebook/common/references/CloseableReference;
          //   143: astore_3
          //   144: new 110	com/facebook/imagepipeline/image/EncodedImage
          //   147: dup
          //   148: aload_3
          //   149: invokespecial 113	com/facebook/imagepipeline/image/EncodedImage:<init>	(Lcom/facebook/common/references/CloseableReference;)V
          //   152: astore_2
          //   153: aload_3
          //   154: invokestatic 116	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
          //   157: invokestatic 121	java/lang/Thread:interrupted	()Z
          //   160: istore_1
          //   161: iload_1
          //   162: ifeq +27 -> 189
          //   165: invokestatic 65	com/facebook/imagepipeline/cache/BufferedDiskCache:access$200	()Ljava/lang/Class;
          //   168: ldc 123
          //   170: invokestatic 126	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;)V
          //   173: aload_2
          //   174: ifnull +7 -> 181
          //   177: aload_2
          //   178: invokevirtual 129	com/facebook/imagepipeline/image/EncodedImage:close	()V
          //   181: new 131	java/lang/InterruptedException
          //   184: dup
          //   185: invokespecial 132	java/lang/InterruptedException:<init>	()V
          //   188: athrow
          //   189: aload 4
          //   191: invokestatic 102	com/facebook/imagepipeline/instrumentation/FrescoInstrumenter:onEndWork	(Ljava/lang/Object;)V
          //   194: aload_2
          //   195: areturn
          //   196: astore_2
          //   197: aload_3
          //   198: invokestatic 116	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
          //   201: aload_2
          //   202: athrow
          //   203: aload 4
          //   205: invokestatic 102	com/facebook/imagepipeline/instrumentation/FrescoInstrumenter:onEndWork	(Ljava/lang/Object;)V
          //   208: aconst_null
          //   209: areturn
          //   210: new 134	java/util/concurrent/CancellationException
          //   213: dup
          //   214: invokespecial 135	java/util/concurrent/CancellationException:<init>	()V
          //   217: athrow
          //   218: astore_2
          //   219: aload 4
          //   221: invokestatic 102	com/facebook/imagepipeline/instrumentation/FrescoInstrumenter:onEndWork	(Ljava/lang/Object;)V
          //   224: aload_2
          //   225: athrow
          //   226: astore_2
          //   227: goto -24 -> 203
          //   230: astore_2
          //   231: goto -28 -> 203
          //   234: astore_2
          //   235: goto -32 -> 203
          //   238: astore_2
          //   239: goto -36 -> 203
          // Local variable table:
          //   start	length	slot	name	signature
          //   0	242	0	this	2
          //   17	145	1	bool	boolean
          //   38	157	2	localObject1	Object
          //   196	6	2	localThrowable1	Throwable
          //   218	7	2	localThrowable2	Throwable
          //   226	1	2	localException1	Exception
          //   230	1	2	localException2	Exception
          //   234	1	2	localException3	Exception
          //   238	1	2	localException4	Exception
          //   36	162	3	localObject2	Object
          //   8	212	4	localObject3	Object
          // Exception table:
          //   from	to	target	type
          //   144	153	196	java/lang/Throwable
          //   10	18	218	java/lang/Throwable
          //   22	37	218	java/lang/Throwable
          //   43	76	218	java/lang/Throwable
          //   79	112	218	java/lang/Throwable
          //   122	128	218	java/lang/Throwable
          //   139	144	218	java/lang/Throwable
          //   153	157	218	java/lang/Throwable
          //   157	161	218	java/lang/Throwable
          //   165	173	218	java/lang/Throwable
          //   177	181	218	java/lang/Throwable
          //   181	189	218	java/lang/Throwable
          //   197	203	218	java/lang/Throwable
          //   210	218	218	java/lang/Throwable
          //   122	128	226	java/lang/Exception
          //   139	144	230	java/lang/Exception
          //   153	157	234	java/lang/Exception
          //   197	203	238	java/lang/Exception
        }
      };
      localObject = mReadExecutor;
      paramAtomicBoolean = g.a(paramAtomicBoolean, (Executor)localObject);
      return paramAtomicBoolean;
    }
    catch (Exception paramAtomicBoolean)
    {
      FLog.w(TAG, paramAtomicBoolean, "Failed to schedule disk-cache read for %s", new Object[] { paramCacheKey.getUriString() });
    }
    return g.a(paramAtomicBoolean);
  }
  
  /* Error */
  private com.facebook.common.memory.PooledByteBuffer readFromDiskCache(CacheKey paramCacheKey)
  {
    // Byte code:
    //   0: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   3: astore_2
    //   4: aload_2
    //   5: ldc -80
    //   7: aload_1
    //   8: invokeinterface 108 1 0
    //   13: invokestatic 114	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   16: aload_0
    //   17: getfield 43	com/facebook/imagepipeline/cache/BufferedDiskCache:mFileCache	Lcom/facebook/cache/disk/FileCache;
    //   20: astore_2
    //   21: aload_2
    //   22: aload_1
    //   23: invokeinterface 180 2 0
    //   28: astore_2
    //   29: aload_2
    //   30: ifnonnull +33 -> 63
    //   33: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   36: astore_2
    //   37: aload_2
    //   38: ldc -74
    //   40: aload_1
    //   41: invokeinterface 108 1 0
    //   46: invokestatic 114	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   49: aload_0
    //   50: getfield 53	com/facebook/imagepipeline/cache/BufferedDiskCache:mImageCacheStatsTracker	Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
    //   53: astore_2
    //   54: aload_2
    //   55: aload_1
    //   56: invokeinterface 185 2 0
    //   61: aconst_null
    //   62: areturn
    //   63: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   66: astore_3
    //   67: aload_3
    //   68: ldc -69
    //   70: aload_1
    //   71: invokeinterface 108 1 0
    //   76: invokestatic 114	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   79: aload_0
    //   80: getfield 53	com/facebook/imagepipeline/cache/BufferedDiskCache:mImageCacheStatsTracker	Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
    //   83: astore_3
    //   84: aload_3
    //   85: aload_1
    //   86: invokeinterface 190 2 0
    //   91: aload_2
    //   92: invokeinterface 196 1 0
    //   97: astore_3
    //   98: aload_0
    //   99: getfield 45	com/facebook/imagepipeline/cache/BufferedDiskCache:mPooledByteBufferFactory	Lcom/facebook/common/memory/PooledByteBufferFactory;
    //   102: aload_3
    //   103: aload_2
    //   104: invokeinterface 200 1 0
    //   109: l2i
    //   110: invokeinterface 206 3 0
    //   115: astore_2
    //   116: aload_3
    //   117: invokevirtual 209	java/io/InputStream:close	()V
    //   120: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   123: astore_3
    //   124: aload_3
    //   125: ldc -45
    //   127: aload_1
    //   128: invokeinterface 108 1 0
    //   133: invokestatic 114	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   136: aload_2
    //   137: areturn
    //   138: astore_2
    //   139: aload_3
    //   140: invokevirtual 209	java/io/InputStream:close	()V
    //   143: aload_2
    //   144: athrow
    //   145: astore_2
    //   146: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   149: aload_2
    //   150: ldc -43
    //   152: iconst_1
    //   153: anewarray 4	java/lang/Object
    //   156: dup
    //   157: iconst_0
    //   158: aload_1
    //   159: invokeinterface 108 1 0
    //   164: aastore
    //   165: invokestatic 155	com/facebook/common/logging/FLog:w	(Ljava/lang/Class;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
    //   168: aload_0
    //   169: getfield 53	com/facebook/imagepipeline/cache/BufferedDiskCache:mImageCacheStatsTracker	Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
    //   172: aload_1
    //   173: invokeinterface 216 2 0
    //   178: aload_2
    //   179: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	180	0	this	BufferedDiskCache
    //   0	180	1	paramCacheKey	CacheKey
    //   3	134	2	localObject1	Object
    //   138	6	2	localThrowable	Throwable
    //   145	34	2	localIOException	IOException
    //   66	74	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   98	116	138	java/lang/Throwable
    //   4	16	145	java/io/IOException
    //   21	29	145	java/io/IOException
    //   37	49	145	java/io/IOException
    //   54	61	145	java/io/IOException
    //   67	79	145	java/io/IOException
    //   84	98	145	java/io/IOException
    //   116	120	145	java/io/IOException
    //   124	136	145	java/io/IOException
    //   139	145	145	java/io/IOException
  }
  
  private void writeToDiskCache(CacheKey paramCacheKey, final EncodedImage paramEncodedImage)
  {
    FLog.v(TAG, "About to write to disk-cache for key %s", paramCacheKey.getUriString());
    FileCache localFileCache = mFileCache;
    try
    {
      localFileCache.insert(paramCacheKey, new WriterCallback()
      {
        public void write(OutputStream paramAnonymousOutputStream)
        {
          mPooledByteStreams.copy(paramEncodedImage.getInputStream(), paramAnonymousOutputStream);
        }
      });
      paramEncodedImage = mImageCacheStatsTracker;
      paramEncodedImage.onDiskCachePut(paramCacheKey);
      paramEncodedImage = TAG;
      FLog.v(paramEncodedImage, "Successful disk-cache write for key %s", paramCacheKey.getUriString());
      return;
    }
    catch (IOException paramEncodedImage)
    {
      FLog.w(TAG, paramEncodedImage, "Failed to write to disk-cache for key %s", new Object[] { paramCacheKey.getUriString() });
    }
  }
  
  public g clearAll()
  {
    mStagingArea.clearAll();
    final Object localObject = FrescoInstrumenter.onBeforeSubmitWork("BufferedDiskCache_clearAll");
    try
    {
      localObject = new Callable()
      {
        public Void call()
        {
          Object localObject = FrescoInstrumenter.onBeginWork(localObject, null);
          try
          {
            mStagingArea.clearAll();
            mFileCache.clearAll();
            FrescoInstrumenter.onEndWork(localObject);
            return null;
          }
          catch (Throwable localThrowable)
          {
            FrescoInstrumenter.onEndWork(localObject);
            throw localThrowable;
          }
        }
      };
      Executor localExecutor = mWriteExecutor;
      localObject = g.a((Callable)localObject, localExecutor);
      return localObject;
    }
    catch (Exception localException)
    {
      FLog.w(TAG, localException, "Failed to schedule disk-cache clear", new Object[0]);
      return g.a(localException);
    }
  }
  
  public g contains(CacheKey paramCacheKey)
  {
    if (containsSync(paramCacheKey)) {
      return g.a(Boolean.valueOf(true));
    }
    return containsAsync(paramCacheKey);
  }
  
  public boolean containsSync(CacheKey paramCacheKey)
  {
    return (mStagingArea.containsKey(paramCacheKey)) || (mFileCache.hasKeySync(paramCacheKey));
  }
  
  public boolean diskCheckSync(CacheKey paramCacheKey)
  {
    if (containsSync(paramCacheKey)) {
      return true;
    }
    return checkInStagingAreaAndFileCache(paramCacheKey);
  }
  
  public g getSeasons(CacheKey paramCacheKey, AtomicBoolean paramAtomicBoolean)
  {
    try
    {
      boolean bool = FrescoSystrace.isTracing();
      if (bool) {
        FrescoSystrace.beginSection("BufferedDiskCache#get");
      }
      EncodedImage localEncodedImage = mStagingArea.get(paramCacheKey);
      if (localEncodedImage != null)
      {
        paramAtomicBoolean = foundPinnedImage(paramCacheKey, localEncodedImage);
        paramCacheKey = paramAtomicBoolean;
        if (FrescoSystrace.isTracing())
        {
          FrescoSystrace.endSection();
          return paramAtomicBoolean;
        }
      }
      else
      {
        paramAtomicBoolean = getAsync(paramCacheKey, paramAtomicBoolean);
        paramCacheKey = paramAtomicBoolean;
        if (FrescoSystrace.isTracing())
        {
          FrescoSystrace.endSection();
          return paramAtomicBoolean;
        }
      }
    }
    catch (Throwable paramCacheKey)
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
      throw paramCacheKey;
    }
    return paramCacheKey;
  }
  
  public long getSize()
  {
    return mFileCache.getSize();
  }
  
  public g remove(final CacheKey paramCacheKey)
  {
    Preconditions.checkNotNull(paramCacheKey);
    mStagingArea.remove(paramCacheKey);
    try
    {
      final Object localObject = FrescoInstrumenter.onBeforeSubmitWork("BufferedDiskCache_remove");
      localObject = new Callable()
      {
        public Void call()
        {
          Object localObject = FrescoInstrumenter.onBeginWork(localObject, null);
          try
          {
            mStagingArea.remove(paramCacheKey);
            mFileCache.remove(paramCacheKey);
            FrescoInstrumenter.onEndWork(localObject);
            return null;
          }
          catch (Throwable localThrowable)
          {
            FrescoInstrumenter.onEndWork(localObject);
            throw localThrowable;
          }
        }
      };
      Executor localExecutor = mWriteExecutor;
      localObject = g.a((Callable)localObject, localExecutor);
      return localObject;
    }
    catch (Exception localException)
    {
      FLog.w(TAG, localException, "Failed to schedule disk-cache remove for %s", new Object[] { paramCacheKey.getUriString() });
      return g.a(localException);
    }
  }
  
  public void startListening(final CacheKey paramCacheKey, EncodedImage paramEncodedImage)
  {
    try
    {
      boolean bool = FrescoSystrace.isTracing();
      if (bool) {
        FrescoSystrace.beginSection("BufferedDiskCache#put");
      }
      Preconditions.checkNotNull(paramCacheKey);
      Preconditions.checkArgument(EncodedImage.isValid(paramEncodedImage));
      mStagingArea.put(paramCacheKey, paramEncodedImage);
      final EncodedImage localEncodedImage = EncodedImage.cloneOrNull(paramEncodedImage);
      try
      {
        final Object localObject = FrescoInstrumenter.onBeforeSubmitWork("BufferedDiskCache_putAsync");
        Executor localExecutor = mWriteExecutor;
        localExecutor.execute(new Runnable()
        {
          public void run()
          {
            Object localObject = FrescoInstrumenter.onBeginWork(localObject, null);
            try
            {
              BufferedDiskCache.this.writeToDiskCache(paramCacheKey, localEncodedImage);
              mStagingArea.remove(paramCacheKey, localEncodedImage);
              EncodedImage.closeSafely(localEncodedImage);
              FrescoInstrumenter.onEndWork(localObject);
              return;
            }
            catch (Throwable localThrowable)
            {
              mStagingArea.remove(paramCacheKey, localEncodedImage);
              EncodedImage.closeSafely(localEncodedImage);
              FrescoInstrumenter.onEndWork(localObject);
              throw localThrowable;
            }
          }
        });
      }
      catch (Exception localException)
      {
        FLog.w(TAG, localException, "Failed to schedule disk-cache write for %s", new Object[] { paramCacheKey.getUriString() });
        mStagingArea.remove(paramCacheKey, paramEncodedImage);
        EncodedImage.closeSafely(localEncodedImage);
      }
      if (FrescoSystrace.isTracing())
      {
        FrescoSystrace.endSection();
        return;
      }
    }
    catch (Throwable paramCacheKey)
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
      throw paramCacheKey;
    }
  }
}
