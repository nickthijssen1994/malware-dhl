package com.facebook.imagepipeline.producers;

import com.facebook.common.executors.StatefulRunnable;
import java.util.Map;

public abstract class StatefulProducerRunnable<T>
  extends StatefulRunnable<T>
{
  private final Consumer<T> mConsumer;
  private final ProducerContext mProducerContext;
  private final ProducerListener2 mProducerListener;
  private final String mProducerName;
  
  public StatefulProducerRunnable(Consumer paramConsumer, ProducerListener2 paramProducerListener2, ProducerContext paramProducerContext, String paramString)
  {
    mConsumer = paramConsumer;
    mProducerListener = paramProducerListener2;
    mProducerName = paramString;
    mProducerContext = paramProducerContext;
    mProducerListener.onProducerStart(mProducerContext, mProducerName);
  }
  
  protected abstract void disposeResult(Object paramObject);
  
  protected Map getExtraMapOnCancellation()
  {
    return null;
  }
  
  protected Map getExtraMapOnFailure(Exception paramException)
  {
    return null;
  }
  
  protected Map getExtraMapOnSuccess(Object paramObject)
  {
    return null;
  }
  
  protected void onCancellation()
  {
    ProducerListener2 localProducerListener2 = mProducerListener;
    ProducerContext localProducerContext = mProducerContext;
    String str = mProducerName;
    Map localMap;
    if (localProducerListener2.requiresExtraMap(localProducerContext, str)) {
      localMap = getExtraMapOnCancellation();
    } else {
      localMap = null;
    }
    localProducerListener2.onProducerFinishWithCancellation(localProducerContext, str, localMap);
    mConsumer.onCancellation();
  }
  
  protected void onFailure(Exception paramException)
  {
    ProducerListener2 localProducerListener2 = mProducerListener;
    ProducerContext localProducerContext = mProducerContext;
    String str = mProducerName;
    Map localMap;
    if (localProducerListener2.requiresExtraMap(localProducerContext, str)) {
      localMap = getExtraMapOnFailure(paramException);
    } else {
      localMap = null;
    }
    localProducerListener2.onProducerFinishWithFailure(localProducerContext, str, paramException, localMap);
    mConsumer.onFailure(paramException);
  }
  
  protected void onSuccess(Object paramObject)
  {
    ProducerListener2 localProducerListener2 = mProducerListener;
    ProducerContext localProducerContext = mProducerContext;
    String str = mProducerName;
    Map localMap;
    if (localProducerListener2.requiresExtraMap(localProducerContext, str)) {
      localMap = getExtraMapOnSuccess(paramObject);
    } else {
      localMap = null;
    }
    localProducerListener2.onProducerFinishWithSuccess(localProducerContext, str, localMap);
    mConsumer.onNewResult(paramObject, 1);
  }
}
