package com.facebook.imagepipeline.producers;

import com.facebook.common.executors.StatefulRunnable;
import com.facebook.common.internal.Preconditions;
import com.facebook.imagepipeline.instrumentation.FrescoInstrumenter;
import com.facebook.imagepipeline.systrace.FrescoSystrace;

public class ThreadHandoffProducer<T>
  implements Producer<T>
{
  public static final String PRODUCER_NAME = "BackgroundThreadHandoffProducer";
  private final Producer<T> mInputProducer;
  private final ThreadHandoffProducerQueue mThreadHandoffProducerQueue;
  
  public ThreadHandoffProducer(Producer paramProducer, ThreadHandoffProducerQueue paramThreadHandoffProducerQueue)
  {
    mInputProducer = ((Producer)Preconditions.checkNotNull(paramProducer));
    mThreadHandoffProducerQueue = paramThreadHandoffProducerQueue;
  }
  
  private static String getInstrumentationTag(ProducerContext paramProducerContext)
  {
    if (FrescoInstrumenter.isTracing())
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("ThreadHandoffProducer_produceResults_");
      localStringBuilder.append(paramProducerContext.getId());
      return localStringBuilder.toString();
    }
    return null;
  }
  
  public void produceResults(final Consumer paramConsumer, final ProducerContext paramProducerContext)
  {
    try
    {
      boolean bool = FrescoSystrace.isTracing();
      if (bool) {
        FrescoSystrace.beginSection("ThreadHandoffProducer#produceResults");
      }
      final ProducerListener2 localProducerListener2 = paramProducerContext.getProducerListener();
      paramConsumer = new StatefulProducerRunnable(paramConsumer, localProducerListener2, paramProducerContext, "BackgroundThreadHandoffProducer")
      {
        protected void disposeResult(Object paramAnonymousObject) {}
        
        protected Object getResult()
        {
          return null;
        }
        
        protected void onSuccess(Object paramAnonymousObject)
        {
          localProducerListener2.onProducerFinishWithSuccess(paramProducerContext, "BackgroundThreadHandoffProducer", null);
          mInputProducer.produceResults(paramConsumer, paramProducerContext);
        }
      };
      paramProducerContext.addCallbacks(new BaseProducerContextCallbacks()
      {
        public void onCancellationRequested()
        {
          paramConsumer.cancel();
          mThreadHandoffProducerQueue.remove(paramConsumer);
        }
      });
      mThreadHandoffProducerQueue.addToQueueOrExecute(FrescoInstrumenter.decorateRunnable(paramConsumer, getInstrumentationTag(paramProducerContext)));
      if (FrescoSystrace.isTracing())
      {
        FrescoSystrace.endSection();
        return;
      }
    }
    catch (Throwable paramConsumer)
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
      throw paramConsumer;
    }
  }
}
