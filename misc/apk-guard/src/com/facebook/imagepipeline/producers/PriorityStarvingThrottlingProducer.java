package com.facebook.imagepipeline.producers;

import com.facebook.common.internal.Preconditions;
import com.facebook.imagepipeline.common.Priority;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.concurrent.Executor;
import javax.annotation.concurrent.GuardedBy;

public class PriorityStarvingThrottlingProducer<T>
  implements Producer<T>
{
  public static final String PRODUCER_NAME = "PriorityStarvingThrottlingProducer";
  private final Executor mExecutor;
  private final Producer<T> mInputProducer;
  private final int mMaxSimultaneousRequests;
  @GuardedBy("this")
  private int mNumCurrentRequests;
  @GuardedBy("this")
  private final Queue<Item<T>> mPendingRequests;
  
  public PriorityStarvingThrottlingProducer(int paramInt, Executor paramExecutor, Producer paramProducer)
  {
    mMaxSimultaneousRequests = paramInt;
    mExecutor = ((Executor)Preconditions.checkNotNull(paramExecutor));
    mInputProducer = ((Producer)Preconditions.checkNotNull(paramProducer));
    mPendingRequests = new PriorityQueue(11, new PriorityComparator());
    mNumCurrentRequests = 0;
  }
  
  private void produceResultsInternal(Item paramItem)
  {
    producerContext.getProducerListener().onProducerFinishWithSuccess(producerContext, "PriorityStarvingThrottlingProducer", null);
    mInputProducer.produceResults(new ThrottlerConsumer(consumer, null), producerContext);
  }
  
  public void produceResults(Consumer paramConsumer, ProducerContext paramProducerContext)
  {
    long l = System.nanoTime();
    paramProducerContext.getProducerListener().onProducerStart(paramProducerContext, "PriorityStarvingThrottlingProducer");
    try
    {
      int j = mNumCurrentRequests;
      int k = mMaxSimultaneousRequests;
      int i = 1;
      if (j >= k)
      {
        mPendingRequests.add(new Item(paramConsumer, paramProducerContext, l));
      }
      else
      {
        mNumCurrentRequests += 1;
        i = 0;
      }
      if (i == 0)
      {
        produceResultsInternal(new Item(paramConsumer, paramProducerContext, l));
        return;
      }
    }
    catch (Throwable paramConsumer)
    {
      throw paramConsumer;
    }
  }
  
  static class Item<T>
  {
    final Consumer<T> consumer;
    final ProducerContext producerContext;
    final long time;
    
    Item(Consumer paramConsumer, ProducerContext paramProducerContext, long paramLong)
    {
      consumer = paramConsumer;
      producerContext = paramProducerContext;
      time = paramLong;
    }
  }
  
  static class PriorityComparator<T>
    implements Comparator<PriorityStarvingThrottlingProducer.Item<T>>
  {
    PriorityComparator() {}
    
    public int compare(PriorityStarvingThrottlingProducer.Item paramItem1, PriorityStarvingThrottlingProducer.Item paramItem2)
    {
      Priority localPriority1 = producerContext.getPriority();
      Priority localPriority2 = producerContext.getPriority();
      if (localPriority1 == localPriority2) {
        return Double.compare(time, time);
      }
      if (localPriority1.ordinal() > localPriority2.ordinal()) {
        return -1;
      }
      return 1;
    }
  }
  
  private class ThrottlerConsumer
    extends DelegatingConsumer<T, T>
  {
    private ThrottlerConsumer(Consumer paramConsumer)
    {
      super();
    }
    
    private void onRequestFinished()
    {
      PriorityStarvingThrottlingProducer localPriorityStarvingThrottlingProducer = PriorityStarvingThrottlingProducer.this;
      try
      {
        final PriorityStarvingThrottlingProducer.Item localItem = (PriorityStarvingThrottlingProducer.Item)mPendingRequests.poll();
        if (localItem == null) {
          PriorityStarvingThrottlingProducer.access$210(PriorityStarvingThrottlingProducer.this);
        }
        if (localItem != null)
        {
          mExecutor.execute(new Runnable()
          {
            public void run()
            {
              PriorityStarvingThrottlingProducer.this.produceResultsInternal(localItem);
            }
          });
          return;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    
    protected void onCancellationImpl()
    {
      getConsumer().onCancellation();
      onRequestFinished();
    }
    
    protected void onFailureImpl(Throwable paramThrowable)
    {
      getConsumer().onFailure(paramThrowable);
      onRequestFinished();
    }
    
    protected void onNewResultImpl(Object paramObject, int paramInt)
    {
      getConsumer().onNewResult(paramObject, paramInt);
      if (BaseConsumer.isLast(paramInt)) {
        onRequestFinished();
      }
    }
  }
}
