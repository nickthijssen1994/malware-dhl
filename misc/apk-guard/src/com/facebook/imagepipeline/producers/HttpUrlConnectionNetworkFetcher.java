package com.facebook.imagepipeline.producers;

import android.net.Uri;
import com.facebook.common.time.MonotonicClock;
import com.facebook.common.time.RealtimeSinceBootClock;
import com.facebook.common.util.UriUtil;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.annotation.Nullable;

public class HttpUrlConnectionNetworkFetcher
  extends BaseNetworkFetcher<HttpUrlConnectionNetworkFetchState>
{
  private static final String FETCH_TIME = "fetch_time";
  public static final int HTTP_DEFAULT_TIMEOUT = 30000;
  public static final int HTTP_PERMANENT_REDIRECT = 308;
  public static final int HTTP_TEMPORARY_REDIRECT = 307;
  private static final String IMAGE_SIZE = "image_size";
  private static final int MAX_REDIRECTS = 5;
  private static final int NUM_NETWORK_THREADS = 3;
  private static final String QUEUE_TIME = "queue_time";
  private static final String TOTAL_TIME = "total_time";
  private final ExecutorService mExecutorService = Executors.newFixedThreadPool(3);
  private int mHttpConnectionTimeout;
  private final MonotonicClock mMonotonicClock;
  @Nullable
  private String mUserAgent;
  
  public HttpUrlConnectionNetworkFetcher()
  {
    this(null, RealtimeSinceBootClock.getSocketFactory());
  }
  
  public HttpUrlConnectionNetworkFetcher(int paramInt)
  {
    this(null, RealtimeSinceBootClock.getSocketFactory());
    mHttpConnectionTimeout = paramInt;
  }
  
  public HttpUrlConnectionNetworkFetcher(String paramString, int paramInt)
  {
    this(paramString, RealtimeSinceBootClock.getSocketFactory());
    mHttpConnectionTimeout = paramInt;
  }
  
  HttpUrlConnectionNetworkFetcher(String paramString, MonotonicClock paramMonotonicClock)
  {
    mMonotonicClock = paramMonotonicClock;
    mUserAgent = paramString;
  }
  
  private HttpURLConnection downloadFrom(Uri paramUri, int paramInt)
  {
    Object localObject = openConnectionTo(paramUri);
    String str = mUserAgent;
    if (str != null) {
      ((HttpURLConnection)localObject).setRequestProperty("User-Agent", str);
    }
    ((HttpURLConnection)localObject).setConnectTimeout(mHttpConnectionTimeout);
    int i = ((HttpURLConnection)localObject).getResponseCode();
    if (isHttpSuccess(i)) {
      return localObject;
    }
    if (isHttpRedirect(i))
    {
      str = ((HttpURLConnection)localObject).getHeaderField("Location");
      ((HttpURLConnection)localObject).disconnect();
      if (str == null) {
        localObject = null;
      } else {
        localObject = Uri.parse(str);
      }
      str = paramUri.getScheme();
      if ((paramInt > 0) && (localObject != null) && (!((Uri)localObject).getScheme().equals(str))) {
        return downloadFrom((Uri)localObject, paramInt - 1);
      }
      if (paramInt == 0)
      {
        localObject = new Object[1];
        localObject[0] = paramUri.toString();
        paramUri = "URL %s follows too many redirects";
      }
      else
      {
        localObject = new Object[2];
        localObject[0] = paramUri.toString();
        localObject[1] = Integer.valueOf(i);
        paramUri = "URL %s returned %d without a valid redirect";
      }
      throw new IOException(error(paramUri, (Object[])localObject));
    }
    ((HttpURLConnection)localObject).disconnect();
    throw new IOException(String.format("Image URL %s returned HTTP code %d", new Object[] { paramUri.toString(), Integer.valueOf(i) }));
  }
  
  private static String error(String paramString, Object... paramVarArgs)
  {
    return String.format(Locale.getDefault(), paramString, paramVarArgs);
  }
  
  private static boolean isHttpRedirect(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      break;
    case 304: 
    case 305: 
    case 306: 
      return false;
    }
    return true;
  }
  
  private static boolean isHttpSuccess(int paramInt)
  {
    return (paramInt >= 200) && (paramInt < 300);
  }
  
  static HttpURLConnection openConnectionTo(Uri paramUri)
  {
    return (HttpURLConnection)UriUtil.uriToUrl(paramUri).openConnection();
  }
  
  public HttpUrlConnectionNetworkFetchState createFetchState(Consumer paramConsumer, ProducerContext paramProducerContext)
  {
    return new HttpUrlConnectionNetworkFetchState(paramConsumer, paramProducerContext);
  }
  
  public void fetch(final HttpUrlConnectionNetworkFetchState paramHttpUrlConnectionNetworkFetchState, final NetworkFetcher.Callback paramCallback)
  {
    HttpUrlConnectionNetworkFetchState.access$002(paramHttpUrlConnectionNetworkFetchState, mMonotonicClock.now());
    final Future localFuture = mExecutorService.submit(new Runnable()
    {
      public void run()
      {
        fetchSync(paramHttpUrlConnectionNetworkFetchState, paramCallback);
      }
    });
    paramHttpUrlConnectionNetworkFetchState.getContext().addCallbacks(new BaseProducerContextCallbacks()
    {
      public void onCancellationRequested()
      {
        if (localFuture.cancel(false)) {
          paramCallback.onCancellation();
        }
      }
    });
  }
  
  /* Error */
  void fetchSync(HttpUrlConnectionNetworkFetchState paramHttpUrlConnectionNetworkFetchState, NetworkFetcher.Callback paramCallback)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 8
    //   3: aconst_null
    //   4: astore 6
    //   6: aconst_null
    //   7: astore 9
    //   9: aconst_null
    //   10: astore_3
    //   11: aconst_null
    //   12: astore 10
    //   14: aload_0
    //   15: aload_1
    //   16: invokevirtual 232	com/facebook/imagepipeline/producers/FetchState:getUri	()Landroid/net/Uri;
    //   19: iconst_5
    //   20: invokespecial 128	com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher:downloadFrom	(Landroid/net/Uri;I)Ljava/net/HttpURLConnection;
    //   23: astore 7
    //   25: aload 7
    //   27: astore 4
    //   29: aload_0
    //   30: getfield 71	com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher:mMonotonicClock	Lcom/facebook/common/time/MonotonicClock;
    //   33: astore 11
    //   35: aload 8
    //   37: astore 6
    //   39: aload 9
    //   41: astore_3
    //   42: aload 4
    //   44: astore 5
    //   46: aload_1
    //   47: aload 11
    //   49: invokeinterface 197 1 0
    //   54: invokestatic 235	com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher$HttpUrlConnectionNetworkFetchState:access$102	(Lcom/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher$HttpUrlConnectionNetworkFetchState;J)J
    //   57: pop2
    //   58: aload 10
    //   60: astore_1
    //   61: aload 7
    //   63: ifnull +42 -> 105
    //   66: aload 8
    //   68: astore 6
    //   70: aload 9
    //   72: astore_3
    //   73: aload 4
    //   75: astore 5
    //   77: aload 7
    //   79: invokevirtual 239	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   82: astore 8
    //   84: aload 8
    //   86: astore_1
    //   87: aload_1
    //   88: astore 6
    //   90: aload_1
    //   91: astore_3
    //   92: aload 4
    //   94: astore 5
    //   96: aload_2
    //   97: aload 8
    //   99: iconst_m1
    //   100: invokeinterface 245 3 0
    //   105: aload_1
    //   106: ifnull +10 -> 116
    //   109: aload_1
    //   110: invokevirtual 250	java/io/InputStream:close	()V
    //   113: goto +3 -> 116
    //   116: aload 7
    //   118: ifnull +95 -> 213
    //   121: goto +50 -> 171
    //   124: astore_1
    //   125: goto +14 -> 139
    //   128: astore_1
    //   129: aconst_null
    //   130: astore 5
    //   132: goto +46 -> 178
    //   135: astore_1
    //   136: aconst_null
    //   137: astore 4
    //   139: aload 6
    //   141: astore_3
    //   142: aload 4
    //   144: astore 5
    //   146: aload_2
    //   147: aload_1
    //   148: invokeinterface 254 2 0
    //   153: aload 6
    //   155: ifnull +11 -> 166
    //   158: aload 6
    //   160: invokevirtual 250	java/io/InputStream:close	()V
    //   163: goto +3 -> 166
    //   166: aload 4
    //   168: ifnull +45 -> 213
    //   171: aload 4
    //   173: invokevirtual 110	java/net/HttpURLConnection:disconnect	()V
    //   176: return
    //   177: astore_1
    //   178: aload_3
    //   179: ifnull +10 -> 189
    //   182: aload_3
    //   183: invokevirtual 250	java/io/InputStream:close	()V
    //   186: goto +3 -> 189
    //   189: aload 5
    //   191: ifnull +8 -> 199
    //   194: aload 5
    //   196: invokevirtual 110	java/net/HttpURLConnection:disconnect	()V
    //   199: aload_1
    //   200: athrow
    //   201: astore_1
    //   202: goto -86 -> 116
    //   205: astore_1
    //   206: goto -40 -> 166
    //   209: astore_2
    //   210: goto -21 -> 189
    //   213: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	214	0	this	HttpUrlConnectionNetworkFetcher
    //   0	214	1	paramHttpUrlConnectionNetworkFetchState	HttpUrlConnectionNetworkFetchState
    //   0	214	2	paramCallback	NetworkFetcher.Callback
    //   10	173	3	localObject1	Object
    //   27	145	4	localHttpURLConnection1	HttpURLConnection
    //   44	151	5	localHttpURLConnection2	HttpURLConnection
    //   4	155	6	localObject2	Object
    //   23	94	7	localHttpURLConnection3	HttpURLConnection
    //   1	97	8	localInputStream	java.io.InputStream
    //   7	64	9	localObject3	Object
    //   12	47	10	localObject4	Object
    //   33	15	11	localMonotonicClock	MonotonicClock
    // Exception table:
    //   from	to	target	type
    //   46	58	124	java/io/IOException
    //   77	84	124	java/io/IOException
    //   96	105	124	java/io/IOException
    //   14	25	128	java/lang/Throwable
    //   14	25	135	java/io/IOException
    //   46	58	177	java/lang/Throwable
    //   77	84	177	java/lang/Throwable
    //   96	105	177	java/lang/Throwable
    //   146	153	177	java/lang/Throwable
    //   109	113	201	java/io/IOException
    //   158	163	205	java/io/IOException
    //   182	186	209	java/io/IOException
  }
  
  public Map getExtraMap(HttpUrlConnectionNetworkFetchState paramHttpUrlConnectionNetworkFetchState, int paramInt)
  {
    HashMap localHashMap = new HashMap(4);
    localHashMap.put("queue_time", Long.toString(responseTime - submitTime));
    localHashMap.put("fetch_time", Long.toString(fetchCompleteTime - responseTime));
    localHashMap.put("total_time", Long.toString(fetchCompleteTime - submitTime));
    localHashMap.put("image_size", Integer.toString(paramInt));
    return localHashMap;
  }
  
  public void onFetchCompletion(HttpUrlConnectionNetworkFetchState paramHttpUrlConnectionNetworkFetchState, int paramInt)
  {
    HttpUrlConnectionNetworkFetchState.access$202(paramHttpUrlConnectionNetworkFetchState, mMonotonicClock.now());
  }
  
  public static class HttpUrlConnectionNetworkFetchState
    extends FetchState
  {
    private long fetchCompleteTime;
    private long responseTime;
    private long submitTime;
    
    public HttpUrlConnectionNetworkFetchState(Consumer paramConsumer, ProducerContext paramProducerContext)
    {
      super(paramProducerContext);
    }
  }
}
