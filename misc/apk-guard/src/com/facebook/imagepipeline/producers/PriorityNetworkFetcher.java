package com.facebook.imagepipeline.producers;

import com.facebook.common.logging.FLog;
import com.facebook.common.time.MonotonicClock;
import com.facebook.common.time.RealtimeSinceBootClock;
import com.facebook.imagepipeline.common.Priority;
import java.io.InputStream;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class PriorityNetworkFetcher<FETCH_STATE extends FetchState>
  implements NetworkFetcher<PriorityFetchState<FETCH_STATE>>
{
  public static final String LOGTAG = "PriorityNetworkFetcher";
  private final MonotonicClock mClock;
  private final HashSet<PriorityFetchState<FETCH_STATE>> mCurrentlyFetching = new HashSet();
  private final NetworkFetcher<FETCH_STATE> mDelegate;
  private final LinkedList<PriorityFetchState<FETCH_STATE>> mHiPriQueue = new LinkedList();
  private final boolean mIsHiPriFifo;
  private final Object mLock = new Object();
  private final LinkedList<PriorityFetchState<FETCH_STATE>> mLowPriQueue = new LinkedList();
  private final int mMaxOutstandingHiPri;
  private final int mMaxOutstandingLowPri;
  
  public PriorityNetworkFetcher(NetworkFetcher paramNetworkFetcher, boolean paramBoolean, int paramInt1, int paramInt2)
  {
    this(paramNetworkFetcher, paramBoolean, paramInt1, paramInt2, RealtimeSinceBootClock.getSocketFactory());
  }
  
  public PriorityNetworkFetcher(NetworkFetcher paramNetworkFetcher, boolean paramBoolean, int paramInt1, int paramInt2, MonotonicClock paramMonotonicClock)
  {
    mDelegate = paramNetworkFetcher;
    mIsHiPriFifo = paramBoolean;
    mMaxOutstandingHiPri = paramInt1;
    mMaxOutstandingLowPri = paramInt2;
    if (paramInt1 > paramInt2)
    {
      mClock = paramMonotonicClock;
      return;
    }
    throw new IllegalArgumentException("maxOutstandingHiPri should be > maxOutstandingLowPri");
  }
  
  private void changePriority(PriorityFetchState paramPriorityFetchState, boolean paramBoolean)
  {
    Object localObject2 = mLock;
    if (paramBoolean) {}
    for (;;)
    {
      try
      {
        localObject1 = mLowPriQueue;
        boolean bool = ((LinkedList)localObject1).remove(paramPriorityFetchState);
        continue;
        localObject1 = mHiPriQueue;
        continue;
        if (!bool) {
          return;
        }
        String str = LOGTAG;
        if (paramBoolean)
        {
          localObject1 = "HIPRI";
          FLog.v(str, "change-pri: %s %s", localObject1, paramPriorityFetchState.getUri());
          putInQueue(paramPriorityFetchState, paramBoolean);
          dequeueIfAvailableSlots();
          return;
        }
      }
      catch (Throwable paramPriorityFetchState)
      {
        throw paramPriorityFetchState;
      }
      Object localObject1 = "LOWPRI";
    }
  }
  
  private void delegateFetch(final PriorityFetchState paramPriorityFetchState)
  {
    try
    {
      NetworkFetcher.Callback local2 = new NetworkFetcher.Callback()
      {
        public void onCancellation()
        {
          PriorityNetworkFetcher.this.removeFromQueue(paramPriorityFetchState, "CANCEL");
          paramPriorityFetchStatecallback.onCancellation();
        }
        
        public void onFailure(Throwable paramAnonymousThrowable)
        {
          PriorityNetworkFetcher.this.removeFromQueue(paramPriorityFetchState, "FAIL");
          paramPriorityFetchStatecallback.onFailure(paramAnonymousThrowable);
        }
        
        public void onResponse(InputStream paramAnonymousInputStream, int paramAnonymousInt)
        {
          paramPriorityFetchStatecallback.onResponse(paramAnonymousInputStream, paramAnonymousInt);
        }
      };
      NetworkFetcher localNetworkFetcher = mDelegate;
      FetchState localFetchState = delegatedState;
      localNetworkFetcher.fetch(localFetchState, local2);
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    removeFromQueue(paramPriorityFetchState, "FAIL");
  }
  
  private void dequeueIfAvailableSlots()
  {
    Object localObject2 = mLock;
    for (;;)
    {
      try
      {
        int i = mCurrentlyFetching.size();
        if (i < mMaxOutstandingHiPri)
        {
          PriorityFetchState localPriorityFetchState1 = (PriorityFetchState)mHiPriQueue.pollFirst();
          PriorityFetchState localPriorityFetchState2 = localPriorityFetchState1;
          if (localPriorityFetchState1 == null)
          {
            localPriorityFetchState2 = localPriorityFetchState1;
            if (i < mMaxOutstandingLowPri) {
              localPriorityFetchState2 = (PriorityFetchState)mLowPriQueue.pollFirst();
            }
          }
          if (localPriorityFetchState2 == null) {
            return;
          }
          dequeuedTimestamp = mClock.now();
          mCurrentlyFetching.add(localPriorityFetchState2);
          FLog.v(LOGTAG, "fetching: %s (concurrent: %s hi-pri queue: %s low-pri queue: %s)", localPriorityFetchState2.getUri(), Integer.valueOf(i), Integer.valueOf(mHiPriQueue.size()), Integer.valueOf(mLowPriQueue.size()));
          delegateFetch(localPriorityFetchState2);
          return;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      Object localObject1 = null;
    }
  }
  
  private void putInQueue(PriorityFetchState paramPriorityFetchState, boolean paramBoolean)
  {
    LinkedList localLinkedList;
    if (paramBoolean)
    {
      if (mIsHiPriFifo) {
        localLinkedList = mHiPriQueue;
      } else {
        mHiPriQueue.addFirst(paramPriorityFetchState);
      }
    }
    else {
      localLinkedList = mLowPriQueue;
    }
    localLinkedList.addLast(paramPriorityFetchState);
  }
  
  private void removeFromQueue(PriorityFetchState paramPriorityFetchState, String paramString)
  {
    Object localObject = mLock;
    try
    {
      FLog.v(LOGTAG, "remove: %s %s", paramString, paramPriorityFetchState.getUri());
      mCurrentlyFetching.remove(paramPriorityFetchState);
      if (!mHiPriQueue.remove(paramPriorityFetchState)) {
        mLowPriQueue.remove(paramPriorityFetchState);
      }
      dequeueIfAvailableSlots();
      return;
    }
    catch (Throwable paramPriorityFetchState)
    {
      throw paramPriorityFetchState;
    }
  }
  
  public PriorityFetchState createFetchState(Consumer paramConsumer, ProducerContext paramProducerContext)
  {
    return new PriorityFetchState(paramConsumer, paramProducerContext, mDelegate.createFetchState(paramConsumer, paramProducerContext), mClock.now(), mHiPriQueue.size(), mLowPriQueue.size(), null);
  }
  
  public void fetch(final PriorityFetchState paramPriorityFetchState, final NetworkFetcher.Callback paramCallback)
  {
    paramPriorityFetchState.getContext().addCallbacks(new BaseProducerContextCallbacks()
    {
      public void onCancellationRequested()
      {
        PriorityNetworkFetcher.this.removeFromQueue(paramPriorityFetchState, "CANCEL");
        paramCallback.onCancellation();
      }
      
      public void onPriorityChanged()
      {
        PriorityNetworkFetcher localPriorityNetworkFetcher = PriorityNetworkFetcher.this;
        PriorityNetworkFetcher.PriorityFetchState localPriorityFetchState = paramPriorityFetchState;
        boolean bool;
        if (localPriorityFetchState.getContext().getPriority() == Priority.HIGH) {
          bool = true;
        } else {
          bool = false;
        }
        localPriorityNetworkFetcher.changePriority(localPriorityFetchState, bool);
      }
    });
    Object localObject2 = mLock;
    for (;;)
    {
      try
      {
        if (mCurrentlyFetching.contains(paramPriorityFetchState))
        {
          paramCallback = LOGTAG;
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("fetch state was enqueued twice: ");
          ((StringBuilder)localObject1).append(paramPriorityFetchState);
          FLog.e(paramCallback, ((StringBuilder)localObject1).toString());
          return;
        }
        if (paramPriorityFetchState.getContext().getPriority() == Priority.HIGH)
        {
          bool = true;
          String str = LOGTAG;
          if (!bool) {
            break label159;
          }
          localObject1 = "HI-PRI";
          FLog.v(str, "enqueue: %s %s", localObject1, paramPriorityFetchState.getUri());
          callback = paramCallback;
          putInQueue(paramPriorityFetchState, bool);
          dequeueIfAvailableSlots();
          return;
        }
      }
      catch (Throwable paramPriorityFetchState)
      {
        throw paramPriorityFetchState;
      }
      boolean bool = false;
      continue;
      label159:
      Object localObject1 = "LOW-PRI";
    }
  }
  
  HashSet getCurrentlyFetching()
  {
    return mCurrentlyFetching;
  }
  
  public Map getExtraMap(PriorityFetchState paramPriorityFetchState, int paramInt)
  {
    Object localObject = mDelegate.getExtraMap(delegatedState, paramInt);
    if (localObject != null) {
      localObject = new HashMap((Map)localObject);
    } else {
      localObject = new HashMap();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("");
    localStringBuilder.append(dequeuedTimestamp - enqueuedTimestamp);
    ((HashMap)localObject).put("pri_queue_time", localStringBuilder.toString());
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("");
    localStringBuilder.append(hiPriCountWhenCreated);
    ((HashMap)localObject).put("hipri_queue_size", localStringBuilder.toString());
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("");
    localStringBuilder.append(lowPriCountWhenCreated);
    ((HashMap)localObject).put("lowpri_queue_size", localStringBuilder.toString());
    return localObject;
  }
  
  List getHiPriQueue()
  {
    return mHiPriQueue;
  }
  
  List getLowPriQueue()
  {
    return mLowPriQueue;
  }
  
  public void onFetchCompletion(PriorityFetchState paramPriorityFetchState, int paramInt)
  {
    removeFromQueue(paramPriorityFetchState, "SUCCESS");
    mDelegate.onFetchCompletion(delegatedState, paramInt);
  }
  
  public boolean shouldPropagate(PriorityFetchState paramPriorityFetchState)
  {
    return mDelegate.shouldPropagate(delegatedState);
  }
  
  public static class PriorityFetchState<FETCH_STATE extends FetchState>
    extends FetchState
  {
    NetworkFetcher.Callback callback;
    public final FETCH_STATE delegatedState;
    long dequeuedTimestamp;
    final long enqueuedTimestamp;
    final int hiPriCountWhenCreated;
    final int lowPriCountWhenCreated;
    
    private PriorityFetchState(Consumer paramConsumer, ProducerContext paramProducerContext, FetchState paramFetchState, long paramLong, int paramInt1, int paramInt2)
    {
      super(paramProducerContext);
      delegatedState = paramFetchState;
      enqueuedTimestamp = paramLong;
      hiPriCountWhenCreated = paramInt1;
      lowPriCountWhenCreated = paramInt2;
    }
  }
}
