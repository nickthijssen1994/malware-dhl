package com.facebook.imagepipeline.producers;

import com.facebook.cache.common.CacheKey;
import com.facebook.common.internal.ImmutableMap;
import com.facebook.common.memory.PooledByteBuffer;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.cache.CacheKeyFactory;
import com.facebook.imagepipeline.cache.MemoryCache;
import com.facebook.imagepipeline.core.ImagePipelineConfig;
import com.facebook.imagepipeline.core.ImagePipelineExperiments;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequest.RequestLevel;
import com.facebook.imagepipeline.systrace.FrescoSystrace;
import java.util.Map;

public class EncodedMemoryCacheProducer
  implements Producer<EncodedImage>
{
  public static final String EXTRA_CACHED_VALUE_FOUND = "cached_value_found";
  public static final String PRODUCER_NAME = "EncodedMemoryCacheProducer";
  private final CacheKeyFactory mCacheKeyFactory;
  private final Producer<EncodedImage> mInputProducer;
  private final MemoryCache<CacheKey, PooledByteBuffer> mMemoryCache;
  
  public EncodedMemoryCacheProducer(MemoryCache paramMemoryCache, CacheKeyFactory paramCacheKeyFactory, Producer paramProducer)
  {
    mMemoryCache = paramMemoryCache;
    mCacheKeyFactory = paramCacheKeyFactory;
    mInputProducer = paramProducer;
  }
  
  public void produceResults(Consumer paramConsumer, ProducerContext paramProducerContext)
  {
    try
    {
      boolean bool = FrescoSystrace.isTracing();
      if (bool) {
        FrescoSystrace.beginSection("EncodedMemoryCacheProducer#produceResults");
      }
      ProducerListener2 localProducerListener2 = paramProducerContext.getProducerListener();
      localProducerListener2.onProducerStart(paramProducerContext, "EncodedMemoryCacheProducer");
      Object localObject = paramProducerContext.getImageRequest();
      CacheKey localCacheKey = mCacheKeyFactory.getEncodedCacheKey((ImageRequest)localObject, paramProducerContext.getCallerContext());
      CloseableReference localCloseableReference = mMemoryCache.cache(localCacheKey);
      EncodedImage localEncodedImage = null;
      localObject = null;
      if (localCloseableReference != null) {}
      try
      {
        localEncodedImage = new EncodedImage(localCloseableReference);
        try
        {
          bool = localProducerListener2.requiresExtraMap(paramProducerContext, "EncodedMemoryCacheProducer");
          if (bool) {
            localObject = ImmutableMap.of("cached_value_found", "true");
          }
          localProducerListener2.onProducerFinishWithSuccess(paramProducerContext, "EncodedMemoryCacheProducer", (Map)localObject);
          localProducerListener2.onUltimateProducerReached(paramProducerContext, "EncodedMemoryCacheProducer", true);
          paramProducerContext.setExtra(1, "memory_encoded");
          paramConsumer.onProgressUpdate(1.0F);
          paramConsumer.onNewResult(localEncodedImage, 1);
          EncodedImage.closeSafely(localEncodedImage);
          CloseableReference.closeSafely(localCloseableReference);
          if (!FrescoSystrace.isTracing()) {
            return;
          }
          FrescoSystrace.endSection();
          return;
        }
        catch (Throwable paramConsumer)
        {
          EncodedImage.closeSafely(localEncodedImage);
          throw paramConsumer;
        }
        int i = paramProducerContext.getLowestPermittedRequestLevel().getValue();
        int j = ImageRequest.RequestLevel.ENCODED_MEMORY_CACHE.getValue();
        if (i >= j)
        {
          bool = localProducerListener2.requiresExtraMap(paramProducerContext, "EncodedMemoryCacheProducer");
          if (bool) {
            localObject = ImmutableMap.of("cached_value_found", "false");
          } else {
            localObject = null;
          }
          localProducerListener2.onProducerFinishWithSuccess(paramProducerContext, "EncodedMemoryCacheProducer", (Map)localObject);
          localProducerListener2.onUltimateProducerReached(paramProducerContext, "EncodedMemoryCacheProducer", false);
          paramProducerContext.setExtra(1, "memory_encoded");
          paramConsumer.onNewResult(null, 1);
          CloseableReference.closeSafely(localCloseableReference);
          if (FrescoSystrace.isTracing()) {
            FrescoSystrace.endSection();
          }
        }
        else
        {
          bool = paramProducerContext.getImageRequest().isMemoryCacheEnabled();
          localObject = new EncodedMemoryCacheConsumer(paramConsumer, mMemoryCache, localCacheKey, bool, paramProducerContext.getImagePipelineConfig().getExperiments().isEncodedCacheEnabled());
          bool = localProducerListener2.requiresExtraMap(paramProducerContext, "EncodedMemoryCacheProducer");
          paramConsumer = localEncodedImage;
          if (bool) {
            paramConsumer = ImmutableMap.of("cached_value_found", "false");
          }
          localProducerListener2.onProducerFinishWithSuccess(paramProducerContext, "EncodedMemoryCacheProducer", paramConsumer);
          mInputProducer.produceResults((Consumer)localObject, paramProducerContext);
          CloseableReference.closeSafely(localCloseableReference);
          if (FrescoSystrace.isTracing())
          {
            FrescoSystrace.endSection();
            return;
          }
        }
      }
      catch (Throwable paramConsumer)
      {
        CloseableReference.closeSafely(localCloseableReference);
        throw paramConsumer;
      }
      return;
    }
    catch (Throwable paramConsumer)
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
      throw paramConsumer;
    }
  }
  
  private static class EncodedMemoryCacheConsumer
    extends DelegatingConsumer<EncodedImage, EncodedImage>
  {
    private final boolean mEncodedCacheEnabled;
    private final boolean mIsMemoryCacheEnabled;
    private final MemoryCache<CacheKey, PooledByteBuffer> mMemoryCache;
    private final CacheKey mRequestedCacheKey;
    
    public EncodedMemoryCacheConsumer(Consumer paramConsumer, MemoryCache paramMemoryCache, CacheKey paramCacheKey, boolean paramBoolean1, boolean paramBoolean2)
    {
      super();
      mMemoryCache = paramMemoryCache;
      mRequestedCacheKey = paramCacheKey;
      mIsMemoryCacheEnabled = paramBoolean1;
      mEncodedCacheEnabled = paramBoolean2;
    }
    
    /* Error */
    public void onNewResultImpl(EncodedImage paramEncodedImage, int paramInt)
    {
      // Byte code:
      //   0: invokestatic 40	com/facebook/imagepipeline/systrace/FrescoSystrace:isTracing	()Z
      //   3: istore_3
      //   4: iload_3
      //   5: ifeq +8 -> 13
      //   8: ldc 42
      //   10: invokestatic 46	com/facebook/imagepipeline/systrace/FrescoSystrace:beginSection	(Ljava/lang/String;)V
      //   13: iload_2
      //   14: invokestatic 52	com/facebook/imagepipeline/producers/BaseConsumer:isNotLast	(I)Z
      //   17: istore_3
      //   18: iload_3
      //   19: ifne +210 -> 229
      //   22: aload_1
      //   23: ifnull +206 -> 229
      //   26: iload_2
      //   27: bipush 10
      //   29: invokestatic 56	com/facebook/imagepipeline/producers/BaseConsumer:statusHasAnyFlag	(II)Z
      //   32: istore_3
      //   33: iload_3
      //   34: ifne +195 -> 229
      //   37: aload_1
      //   38: invokevirtual 62	com/facebook/imagepipeline/image/EncodedImage:getImageFormat	()Lcom/facebook/imageformat/ImageFormat;
      //   41: astore 4
      //   43: getstatic 68	com/facebook/imageformat/ImageFormat:UNKNOWN	Lcom/facebook/imageformat/ImageFormat;
      //   46: astore 5
      //   48: aload 4
      //   50: aload 5
      //   52: if_acmpne +6 -> 58
      //   55: goto +174 -> 229
      //   58: aload_1
      //   59: invokevirtual 72	com/facebook/imagepipeline/image/EncodedImage:getByteBufferRef	()Lcom/facebook/common/references/CloseableReference;
      //   62: astore 6
      //   64: aload 6
      //   66: ifnull +142 -> 208
      //   69: aconst_null
      //   70: astore 5
      //   72: aload_0
      //   73: getfield 29	com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer$EncodedMemoryCacheConsumer:mEncodedCacheEnabled	Z
      //   76: istore_3
      //   77: aload 5
      //   79: astore 4
      //   81: iload_3
      //   82: ifeq +33 -> 115
      //   85: aload_0
      //   86: getfield 27	com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer$EncodedMemoryCacheConsumer:mIsMemoryCacheEnabled	Z
      //   89: istore_3
      //   90: aload 5
      //   92: astore 4
      //   94: iload_3
      //   95: ifeq +20 -> 115
      //   98: aload_0
      //   99: getfield 23	com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer$EncodedMemoryCacheConsumer:mMemoryCache	Lcom/facebook/imagepipeline/cache/MemoryCache;
      //   102: aload_0
      //   103: getfield 25	com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer$EncodedMemoryCacheConsumer:mRequestedCacheKey	Lcom/facebook/cache/common/CacheKey;
      //   106: aload 6
      //   108: invokeinterface 78 3 0
      //   113: astore 4
      //   115: aload 6
      //   117: invokestatic 84	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
      //   120: aload 4
      //   122: ifnull +86 -> 208
      //   125: new 58	com/facebook/imagepipeline/image/EncodedImage
      //   128: dup
      //   129: aload 4
      //   131: invokespecial 86	com/facebook/imagepipeline/image/EncodedImage:<init>	(Lcom/facebook/common/references/CloseableReference;)V
      //   134: astore 5
      //   136: aload 5
      //   138: aload_1
      //   139: invokevirtual 90	com/facebook/imagepipeline/image/EncodedImage:copyMetaDataFrom	(Lcom/facebook/imagepipeline/image/EncodedImage;)V
      //   142: aload 4
      //   144: invokestatic 84	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
      //   147: aload_0
      //   148: invokevirtual 94	com/facebook/imagepipeline/producers/DelegatingConsumer:getConsumer	()Lcom/facebook/imagepipeline/producers/Consumer;
      //   151: fconst_1
      //   152: invokeinterface 100 2 0
      //   157: aload_0
      //   158: invokevirtual 94	com/facebook/imagepipeline/producers/DelegatingConsumer:getConsumer	()Lcom/facebook/imagepipeline/producers/Consumer;
      //   161: aload 5
      //   163: iload_2
      //   164: invokeinterface 104 3 0
      //   169: aload 5
      //   171: invokestatic 106	com/facebook/imagepipeline/image/EncodedImage:closeSafely	(Lcom/facebook/imagepipeline/image/EncodedImage;)V
      //   174: invokestatic 40	com/facebook/imagepipeline/systrace/FrescoSystrace:isTracing	()Z
      //   177: ifeq +85 -> 262
      //   180: invokestatic 110	com/facebook/imagepipeline/systrace/FrescoSystrace:endSection	()V
      //   183: return
      //   184: astore_1
      //   185: aload 5
      //   187: invokestatic 106	com/facebook/imagepipeline/image/EncodedImage:closeSafely	(Lcom/facebook/imagepipeline/image/EncodedImage;)V
      //   190: aload_1
      //   191: athrow
      //   192: astore_1
      //   193: aload 4
      //   195: invokestatic 84	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
      //   198: aload_1
      //   199: athrow
      //   200: astore_1
      //   201: aload 6
      //   203: invokestatic 84	com/facebook/common/references/CloseableReference:closeSafely	(Lcom/facebook/common/references/CloseableReference;)V
      //   206: aload_1
      //   207: athrow
      //   208: aload_0
      //   209: invokevirtual 94	com/facebook/imagepipeline/producers/DelegatingConsumer:getConsumer	()Lcom/facebook/imagepipeline/producers/Consumer;
      //   212: aload_1
      //   213: iload_2
      //   214: invokeinterface 104 3 0
      //   219: invokestatic 40	com/facebook/imagepipeline/systrace/FrescoSystrace:isTracing	()Z
      //   222: ifeq +40 -> 262
      //   225: invokestatic 110	com/facebook/imagepipeline/systrace/FrescoSystrace:endSection	()V
      //   228: return
      //   229: aload_0
      //   230: invokevirtual 94	com/facebook/imagepipeline/producers/DelegatingConsumer:getConsumer	()Lcom/facebook/imagepipeline/producers/Consumer;
      //   233: aload_1
      //   234: iload_2
      //   235: invokeinterface 104 3 0
      //   240: invokestatic 40	com/facebook/imagepipeline/systrace/FrescoSystrace:isTracing	()Z
      //   243: ifeq +19 -> 262
      //   246: invokestatic 110	com/facebook/imagepipeline/systrace/FrescoSystrace:endSection	()V
      //   249: return
      //   250: astore_1
      //   251: invokestatic 40	com/facebook/imagepipeline/systrace/FrescoSystrace:isTracing	()Z
      //   254: ifeq +6 -> 260
      //   257: invokestatic 110	com/facebook/imagepipeline/systrace/FrescoSystrace:endSection	()V
      //   260: aload_1
      //   261: athrow
      //   262: return
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	263	0	this	EncodedMemoryCacheConsumer
      //   0	263	1	paramEncodedImage	EncodedImage
      //   0	263	2	paramInt	int
      //   3	92	3	bool	boolean
      //   41	153	4	localObject1	Object
      //   46	140	5	localObject2	Object
      //   62	140	6	localCloseableReference	CloseableReference
      // Exception table:
      //   from	to	target	type
      //   147	169	184	java/lang/Throwable
      //   125	142	192	java/lang/Throwable
      //   72	77	200	java/lang/Throwable
      //   85	90	200	java/lang/Throwable
      //   98	115	200	java/lang/Throwable
      //   0	4	250	java/lang/Throwable
      //   8	13	250	java/lang/Throwable
      //   13	18	250	java/lang/Throwable
      //   26	33	250	java/lang/Throwable
      //   37	48	250	java/lang/Throwable
      //   58	64	250	java/lang/Throwable
      //   115	120	250	java/lang/Throwable
      //   142	147	250	java/lang/Throwable
      //   169	174	250	java/lang/Throwable
      //   185	192	250	java/lang/Throwable
      //   193	200	250	java/lang/Throwable
      //   201	208	250	java/lang/Throwable
      //   208	219	250	java/lang/Throwable
      //   229	240	250	java/lang/Throwable
    }
  }
}
