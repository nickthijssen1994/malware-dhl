package com.facebook.imagepipeline.nativecode;

import android.os.Build.VERSION;
import com.facebook.common.internal.DoNotStrip;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.webp.WebpSupportStatus;
import com.facebook.imageformat.DefaultImageFormats;
import com.facebook.imageformat.ImageFormat;
import java.io.InputStream;
import java.io.OutputStream;

@DoNotStrip
public class WebpTranscoderImpl
  implements WebpTranscoder
{
  public WebpTranscoderImpl() {}
  
  private static native void nativeTranscodeWebpToJpeg(InputStream paramInputStream, OutputStream paramOutputStream, int paramInt);
  
  private static native void nativeTranscodeWebpToPng(InputStream paramInputStream, OutputStream paramOutputStream);
  
  public boolean isWebpNativelySupported(ImageFormat paramImageFormat)
  {
    if (paramImageFormat == DefaultImageFormats.WEBP_SIMPLE)
    {
      if (Build.VERSION.SDK_INT >= 14) {
        return true;
      }
    }
    else
    {
      if ((paramImageFormat != DefaultImageFormats.WEBP_LOSSLESS) && (paramImageFormat != DefaultImageFormats.WEBP_EXTENDED) && (paramImageFormat != DefaultImageFormats.WEBP_EXTENDED_WITH_ALPHA))
      {
        if (paramImageFormat == DefaultImageFormats.WEBP_ANIMATED) {
          return false;
        }
        throw new IllegalArgumentException("Image format is not a WebP.");
      }
      return WebpSupportStatus.sIsExtendedWebpSupported;
    }
    return false;
  }
  
  public void transcodeWebpToJpeg(InputStream paramInputStream, OutputStream paramOutputStream, int paramInt)
  {
    StaticWebpNativeLoader.ensure();
    nativeTranscodeWebpToJpeg((InputStream)Preconditions.checkNotNull(paramInputStream), (OutputStream)Preconditions.checkNotNull(paramOutputStream), paramInt);
  }
  
  public void transcodeWebpToPng(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    StaticWebpNativeLoader.ensure();
    nativeTranscodeWebpToPng((InputStream)Preconditions.checkNotNull(paramInputStream), (OutputStream)Preconditions.checkNotNull(paramOutputStream));
  }
}
