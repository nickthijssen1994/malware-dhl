package com.facebook.imagepipeline.memory;

import com.facebook.common.internal.Preconditions;
import com.facebook.common.logging.FLog;
import com.facebook.common.memory.ByteArrayPool;
import com.facebook.common.memory.MemoryTrimmableRegistry;
import com.facebook.common.memory.PooledByteBufferFactory;
import com.facebook.common.memory.PooledByteStreams;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.annotation.Nullable;
import javax.annotation.concurrent.NotThreadSafe;

@NotThreadSafe
public class PoolFactory
{
  @Nullable
  private MemoryChunkPool mAshmemMemoryChunkPool;
  private BitmapPool mBitmapPool;
  @Nullable
  private MemoryChunkPool mBufferMemoryChunkPool;
  private final PoolConfig mConfig;
  private FlexByteArrayPool mFlexByteArrayPool;
  @Nullable
  private MemoryChunkPool mNativeMemoryChunkPool;
  private PooledByteBufferFactory mPooledByteBufferFactory;
  private PooledByteStreams mPooledByteStreams;
  private SharedByteArray mSharedByteArray;
  private ByteArrayPool mSmallByteArrayPool;
  
  public PoolFactory(PoolConfig paramPoolConfig)
  {
    mConfig = ((PoolConfig)Preconditions.checkNotNull(paramPoolConfig));
  }
  
  private MemoryChunkPool getAshmemMemoryChunkPool()
  {
    if (mAshmemMemoryChunkPool == null) {}
    try
    {
      Object localObject1 = Class.forName("com.facebook.imagepipeline.memory.AshmemMemoryChunkPool");
      localObject1 = ((Class)localObject1).getConstructor(new Class[] { MemoryTrimmableRegistry.class, PoolParams.class, PoolStatsTracker.class });
      Object localObject2 = mConfig;
      localObject2 = ((PoolConfig)localObject2).getMemoryTrimmableRegistry();
      Object localObject3 = mConfig;
      localObject3 = ((PoolConfig)localObject3).getMemoryChunkPoolParams();
      Object localObject4 = mConfig;
      localObject4 = ((PoolConfig)localObject4).getMemoryChunkPoolStatsTracker();
      localObject1 = ((Constructor)localObject1).newInstance(new Object[] { localObject2, localObject3, localObject4 });
      mAshmemMemoryChunkPool = ((MemoryChunkPool)localObject1);
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      for (;;) {}
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;) {}
    }
    catch (InstantiationException localInstantiationException)
    {
      for (;;) {}
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;) {}
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;) {}
    }
    mAshmemMemoryChunkPool = null;
    return mAshmemMemoryChunkPool;
  }
  
  private MemoryChunkPool getMemoryChunkPool(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      throw new IllegalArgumentException("Invalid MemoryChunkType");
    case 2: 
      return getAshmemMemoryChunkPool();
    case 1: 
      return getBufferMemoryChunkPool();
    }
    return getNativeMemoryChunkPool();
  }
  
  public BitmapPool getBitmapPool()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a10 = a9\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public MemoryChunkPool getBufferMemoryChunkPool()
  {
    if (mBufferMemoryChunkPool == null) {}
    try
    {
      Object localObject1 = Class.forName("com.facebook.imagepipeline.memory.BufferMemoryChunkPool");
      localObject1 = ((Class)localObject1).getConstructor(new Class[] { MemoryTrimmableRegistry.class, PoolParams.class, PoolStatsTracker.class });
      Object localObject2 = mConfig;
      localObject2 = ((PoolConfig)localObject2).getMemoryTrimmableRegistry();
      Object localObject3 = mConfig;
      localObject3 = ((PoolConfig)localObject3).getMemoryChunkPoolParams();
      Object localObject4 = mConfig;
      localObject4 = ((PoolConfig)localObject4).getMemoryChunkPoolStatsTracker();
      localObject1 = ((Constructor)localObject1).newInstance(new Object[] { localObject2, localObject3, localObject4 });
      mBufferMemoryChunkPool = ((MemoryChunkPool)localObject1);
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      for (;;) {}
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;) {}
    }
    catch (InstantiationException localInstantiationException)
    {
      for (;;) {}
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;) {}
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;) {}
    }
    mBufferMemoryChunkPool = null;
    return mBufferMemoryChunkPool;
  }
  
  public FlexByteArrayPool getFlexByteArrayPool()
  {
    if (mFlexByteArrayPool == null) {
      mFlexByteArrayPool = new FlexByteArrayPool(mConfig.getMemoryTrimmableRegistry(), mConfig.getFlexByteArrayPoolParams());
    }
    return mFlexByteArrayPool;
  }
  
  public int getFlexByteArrayPoolMaxNumThreads()
  {
    return mConfig.getFlexByteArrayPoolParams().maxNumThreads;
  }
  
  public MemoryChunkPool getNativeMemoryChunkPool()
  {
    if (mNativeMemoryChunkPool == null)
    {
      try
      {
        Object localObject1 = Class.forName("com.facebook.imagepipeline.memory.NativeMemoryChunkPool");
        localObject1 = ((Class)localObject1).getConstructor(new Class[] { MemoryTrimmableRegistry.class, PoolParams.class, PoolStatsTracker.class });
        Object localObject2 = mConfig;
        localObject2 = ((PoolConfig)localObject2).getMemoryTrimmableRegistry();
        Object localObject3 = mConfig;
        localObject3 = ((PoolConfig)localObject3).getMemoryChunkPoolParams();
        Object localObject4 = mConfig;
        localObject4 = ((PoolConfig)localObject4).getMemoryChunkPoolStatsTracker();
        localObject1 = ((Constructor)localObject1).newInstance(new Object[] { localObject2, localObject3, localObject4 });
        mNativeMemoryChunkPool = ((MemoryChunkPool)localObject1);
      }
      catch (InvocationTargetException localInvocationTargetException) {}catch (NoSuchMethodException localNoSuchMethodException) {}catch (InstantiationException localInstantiationException) {}catch (IllegalAccessException localIllegalAccessException) {}catch (ClassNotFoundException localClassNotFoundException) {}
      FLog.e("PoolFactory", "", (Throwable)localClassNotFoundException);
      mNativeMemoryChunkPool = null;
    }
    return mNativeMemoryChunkPool;
  }
  
  public PooledByteBufferFactory getPooledByteBufferFactory()
  {
    return getPooledByteBufferFactory(0);
  }
  
  public PooledByteBufferFactory getPooledByteBufferFactory(int paramInt)
  {
    if (mPooledByteBufferFactory == null)
    {
      MemoryChunkPool localMemoryChunkPool = getMemoryChunkPool(paramInt);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("failed to get pool for chunk type: ");
      localStringBuilder.append(paramInt);
      Preconditions.checkNotNull(localMemoryChunkPool, localStringBuilder.toString());
      mPooledByteBufferFactory = new MemoryPooledByteBufferFactory(getMemoryChunkPool(paramInt), getPooledByteStreams());
    }
    return mPooledByteBufferFactory;
  }
  
  public PooledByteStreams getPooledByteStreams()
  {
    if (mPooledByteStreams == null) {
      mPooledByteStreams = new PooledByteStreams(getSmallByteArrayPool());
    }
    return mPooledByteStreams;
  }
  
  public SharedByteArray getSharedByteArray()
  {
    if (mSharedByteArray == null) {
      mSharedByteArray = new SharedByteArray(mConfig.getMemoryTrimmableRegistry(), mConfig.getFlexByteArrayPoolParams());
    }
    return mSharedByteArray;
  }
  
  public ByteArrayPool getSmallByteArrayPool()
  {
    if (mSmallByteArrayPool == null) {
      mSmallByteArrayPool = new GenericByteArrayPool(mConfig.getMemoryTrimmableRegistry(), mConfig.getSmallByteArrayPoolParams(), mConfig.getSmallByteArrayPoolStatsTracker());
    }
    return mSmallByteArrayPool;
  }
}
