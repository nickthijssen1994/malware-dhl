package com.facebook.imagepipeline.multiuri;

import com.facebook.common.internal.Supplier;
import com.facebook.common.references.CloseableReference;
import com.facebook.datasource.DataSource;
import com.facebook.datasource.DataSources;
import com.facebook.datasource.FirstAvailableDataSourceSupplier;
import com.facebook.datasource.IncreasingQualityDataSourceSupplier;
import com.facebook.imagepipeline.core.ImagePipeline;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.listener.RequestListener;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequest.RequestLevel;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.annotation.Nullable;

public class MultiUri
{
  private static final NullPointerException NO_REQUEST_EXCEPTION = new NullPointerException("No image request was specified!");
  @Nullable
  private ImageRequest mLowResImageRequest;
  @Nullable
  private ImageRequest[] mMultiImageRequests;
  
  private MultiUri(Builder paramBuilder)
  {
    mLowResImageRequest = mLowResImageRequest;
    mMultiImageRequests = mMultiImageRequests;
  }
  
  public static Builder create()
  {
    return new Builder(null);
  }
  
  private static Supplier getFirstAvailableDataSourceSupplier(ImagePipeline paramImagePipeline, Object paramObject, RequestListener paramRequestListener, ImageRequest[] paramArrayOfImageRequest, boolean paramBoolean, String paramString)
  {
    ArrayList localArrayList = new ArrayList(paramArrayOfImageRequest.length * 2);
    int k = 0;
    int j = k;
    if (paramBoolean)
    {
      int i = 0;
      for (;;)
      {
        j = k;
        if (i >= paramArrayOfImageRequest.length) {
          break;
        }
        localArrayList.add(getImageRequestDataSourceSupplier(paramImagePipeline, paramArrayOfImageRequest[i], paramObject, ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE, paramRequestListener, paramString));
        i += 1;
      }
    }
    while (j < paramArrayOfImageRequest.length)
    {
      localArrayList.add(getImageRequestDataSourceSupplier(paramImagePipeline, paramArrayOfImageRequest[j], paramObject, paramRequestListener, paramString));
      j += 1;
    }
    return FirstAvailableDataSourceSupplier.create(localArrayList);
  }
  
  public static DataSource getImageRequestDataSource(ImagePipeline paramImagePipeline, ImageRequest paramImageRequest, Object paramObject, RequestListener paramRequestListener, String paramString)
  {
    return paramImagePipeline.fetchDecodedImage(paramImageRequest, paramObject, ImageRequest.RequestLevel.FULL_FETCH, paramRequestListener, paramString);
  }
  
  private static Supplier getImageRequestDataSourceSupplier(ImagePipeline paramImagePipeline, ImageRequest paramImageRequest, Object paramObject, RequestListener paramRequestListener, String paramString)
  {
    return getImageRequestDataSourceSupplier(paramImagePipeline, paramImageRequest, paramObject, ImageRequest.RequestLevel.FULL_FETCH, paramRequestListener, paramString);
  }
  
  private static Supplier getImageRequestDataSourceSupplier(ImagePipeline paramImagePipeline, final ImageRequest paramImageRequest, final Object paramObject, ImageRequest.RequestLevel paramRequestLevel, final RequestListener paramRequestListener, final String paramString)
  {
    new Supplier()
    {
      public DataSource getFolder()
      {
        return MultiUri.getImageRequestDataSource(val$imagePipeline, paramImageRequest, paramObject, paramRequestListener, paramString);
      }
    };
  }
  
  public static Supplier getMultiUriDatasource(ImagePipeline paramImagePipeline, ImageRequest paramImageRequest1, ImageRequest paramImageRequest2, Object paramObject)
  {
    return getMultiUriDatasourceSupplier(paramImagePipeline, create().setLowResImageRequest(paramImageRequest1).setImageRequests(new ImageRequest[] { paramImageRequest2 }).build(), null, paramObject, null, null);
  }
  
  public static Supplier getMultiUriDatasourceSupplier(ImagePipeline paramImagePipeline, MultiUri paramMultiUri, ImageRequest paramImageRequest, Object paramObject, RequestListener paramRequestListener, String paramString)
  {
    if (paramImageRequest != null) {
      paramImageRequest = getImageRequestDataSourceSupplier(paramImagePipeline, paramImageRequest, paramObject, paramRequestListener, paramString);
    } else if (paramMultiUri.getMultiImageRequests() != null) {
      paramImageRequest = getFirstAvailableDataSourceSupplier(paramImagePipeline, paramObject, paramRequestListener, paramMultiUri.getMultiImageRequests(), true, paramString);
    } else {
      paramImageRequest = null;
    }
    Object localObject = paramImageRequest;
    if (paramImageRequest != null)
    {
      localObject = paramImageRequest;
      if (paramMultiUri.getLowResImageRequest() != null)
      {
        localObject = new LinkedList();
        ((List)localObject).add(paramImageRequest);
        ((List)localObject).add(getImageRequestDataSourceSupplier(paramImagePipeline, paramMultiUri.getLowResImageRequest(), paramObject, paramRequestListener, paramString));
        localObject = IncreasingQualityDataSourceSupplier.create((List)localObject, false);
      }
    }
    paramImagePipeline = (ImagePipeline)localObject;
    if (localObject == null) {
      paramImagePipeline = DataSources.getFailedDataSourceSupplier(NO_REQUEST_EXCEPTION);
    }
    return paramImagePipeline;
  }
  
  public ImageRequest getLowResImageRequest()
  {
    return mLowResImageRequest;
  }
  
  public ImageRequest[] getMultiImageRequests()
  {
    return mMultiImageRequests;
  }
  
  public static class Builder
  {
    @Nullable
    private ImageRequest mLowResImageRequest;
    @Nullable
    private ImageRequest[] mMultiImageRequests;
    
    private Builder() {}
    
    public MultiUri build()
    {
      return new MultiUri(this, null);
    }
    
    public Builder setImageRequests(ImageRequest... paramVarArgs)
    {
      mMultiImageRequests = paramVarArgs;
      return this;
    }
    
    public Builder setLowResImageRequest(ImageRequest paramImageRequest)
    {
      mLowResImageRequest = paramImageRequest;
      return this;
    }
  }
}
