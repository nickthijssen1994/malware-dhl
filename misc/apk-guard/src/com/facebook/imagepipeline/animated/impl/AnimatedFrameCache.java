package com.facebook.imagepipeline.animated.impl;

import android.net.Uri;
import com.facebook.cache.common.CacheKey;
import com.facebook.common.internal.Objects;
import com.facebook.common.internal.Objects.ToStringHelper;
import com.facebook.common.internal.VisibleForTesting;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.cache.CountingMemoryCache;
import com.facebook.imagepipeline.cache.CountingMemoryCache.EntryStateObserver;
import com.facebook.imagepipeline.image.CloseableImage;
import java.util.Iterator;
import java.util.LinkedHashSet;
import javax.annotation.concurrent.GuardedBy;

public class AnimatedFrameCache
{
  private final CountingMemoryCache<CacheKey, CloseableImage> mBackingCache;
  private final CountingMemoryCache.EntryStateObserver<CacheKey> mEntryStateObserver;
  @GuardedBy("this")
  private final LinkedHashSet<CacheKey> mFreeItemsPool;
  private final CacheKey mImageCacheKey;
  
  public AnimatedFrameCache(CacheKey paramCacheKey, CountingMemoryCache paramCountingMemoryCache)
  {
    mImageCacheKey = paramCacheKey;
    mBackingCache = paramCountingMemoryCache;
    mFreeItemsPool = new LinkedHashSet();
    mEntryStateObserver = new CountingMemoryCache.EntryStateObserver()
    {
      public void onExclusivityChanged(CacheKey paramAnonymousCacheKey, boolean paramAnonymousBoolean)
      {
        onReusabilityChange(paramAnonymousCacheKey, paramAnonymousBoolean);
      }
    };
  }
  
  private FrameKey keyFor(int paramInt)
  {
    return new FrameKey(mImageCacheKey, paramInt);
  }
  
  private CacheKey popFirstFreeItemKey()
  {
    CacheKey localCacheKey = null;
    try
    {
      Iterator localIterator = mFreeItemsPool.iterator();
      if (localIterator.hasNext())
      {
        localCacheKey = (CacheKey)localIterator.next();
        localIterator.remove();
      }
      return localCacheKey;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public CloseableReference cache(int paramInt)
  {
    return mBackingCache.cache(keyFor(paramInt));
  }
  
  public CloseableReference cache(int paramInt, CloseableReference paramCloseableReference)
  {
    return mBackingCache.cache(keyFor(paramInt), paramCloseableReference, mEntryStateObserver);
  }
  
  public boolean contains(int paramInt)
  {
    return mBackingCache.contains(keyFor(paramInt));
  }
  
  public CloseableReference getForReuse()
  {
    Object localObject;
    do
    {
      localObject = popFirstFreeItemKey();
      if (localObject == null) {
        return null;
      }
      localObject = mBackingCache.reuse(localObject);
    } while (localObject == null);
    return localObject;
  }
  
  public void onReusabilityChange(CacheKey paramCacheKey, boolean paramBoolean)
  {
    if (paramBoolean) {}
    try
    {
      mFreeItemsPool.add(paramCacheKey);
      break label27;
      mFreeItemsPool.remove(paramCacheKey);
      label27:
      return;
    }
    catch (Throwable paramCacheKey)
    {
      throw paramCacheKey;
    }
  }
  
  @VisibleForTesting
  static class FrameKey
    implements CacheKey
  {
    private final int mFrameIndex;
    private final CacheKey mImageCacheKey;
    
    public FrameKey(CacheKey paramCacheKey, int paramInt)
    {
      mImageCacheKey = paramCacheKey;
      mFrameIndex = paramInt;
    }
    
    public boolean containsUri(Uri paramUri)
    {
      return mImageCacheKey.containsUri(paramUri);
    }
    
    public boolean equals(Object paramObject)
    {
      if (paramObject == this) {
        return true;
      }
      if ((paramObject instanceof FrameKey))
      {
        paramObject = (FrameKey)paramObject;
        return (mFrameIndex == mFrameIndex) && (mImageCacheKey.equals(mImageCacheKey));
      }
      return false;
    }
    
    public String getUriString()
    {
      return null;
    }
    
    public int hashCode()
    {
      return mImageCacheKey.hashCode() * 1013 + mFrameIndex;
    }
    
    public boolean isResourceIdForDebugging()
    {
      return false;
    }
    
    public String toString()
    {
      return Objects.toStringHelper(this).addValue("imageCacheKey", mImageCacheKey).addValue("frameIndex", mFrameIndex).toString();
    }
  }
}
