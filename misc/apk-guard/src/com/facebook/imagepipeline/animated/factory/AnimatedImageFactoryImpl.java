package com.facebook.imagepipeline.animated.factory;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.os.Build.VERSION;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.memory.PooledByteBuffer;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend;
import com.facebook.imagepipeline.animated.base.AnimatedImage;
import com.facebook.imagepipeline.animated.base.AnimatedImageResult;
import com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder;
import com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider;
import com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor;
import com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor.Callback;
import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
import com.facebook.imagepipeline.common.ImageDecodeOptions;
import com.facebook.imagepipeline.image.CloseableAnimatedImage;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.image.CloseableStaticBitmap;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.image.ImmutableQualityInfo;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

public class AnimatedImageFactoryImpl
  implements AnimatedImageFactory
{
  static AnimatedImageDecoder sGifAnimatedImageDecoder = loadIfPresent("com.facebook.animated.gif.GifImage");
  static AnimatedImageDecoder sWebpAnimatedImageDecoder = loadIfPresent("com.facebook.animated.webp.WebPImage");
  private final AnimatedDrawableBackendProvider mAnimatedDrawableBackendProvider;
  private final PlatformBitmapFactory mBitmapFactory;
  
  public AnimatedImageFactoryImpl(AnimatedDrawableBackendProvider paramAnimatedDrawableBackendProvider, PlatformBitmapFactory paramPlatformBitmapFactory)
  {
    mAnimatedDrawableBackendProvider = paramAnimatedDrawableBackendProvider;
    mBitmapFactory = paramPlatformBitmapFactory;
  }
  
  private CloseableReference createBitmap(int paramInt1, int paramInt2, Bitmap.Config paramConfig)
  {
    paramConfig = mBitmapFactory.createBitmapInternal(paramInt1, paramInt2, paramConfig);
    ((Bitmap)paramConfig.get()).eraseColor(0);
    if (Build.VERSION.SDK_INT >= 12) {
      ((Bitmap)paramConfig.get()).setHasAlpha(true);
    }
    return paramConfig;
  }
  
  private CloseableReference createPreviewBitmap(AnimatedImage paramAnimatedImage, Bitmap.Config paramConfig, int paramInt)
  {
    paramConfig = createBitmap(paramAnimatedImage.getWidth(), paramAnimatedImage.getHeight(), paramConfig);
    paramAnimatedImage = AnimatedImageResult.forAnimatedImage(paramAnimatedImage);
    new AnimatedImageCompositor(mAnimatedDrawableBackendProvider.getMap(paramAnimatedImage, null), new AnimatedImageCompositor.Callback()
    {
      public CloseableReference getCachedBitmap(int paramAnonymousInt)
      {
        return null;
      }
      
      public void onIntermediateResult(int paramAnonymousInt, Bitmap paramAnonymousBitmap) {}
    }).renderFrame(paramInt, (Bitmap)paramConfig.get());
    return paramConfig;
  }
  
  private List decodeAllFrames(AnimatedImage paramAnimatedImage, Bitmap.Config paramConfig)
  {
    paramAnimatedImage = AnimatedImageResult.forAnimatedImage(paramAnimatedImage);
    paramAnimatedImage = mAnimatedDrawableBackendProvider.getMap(paramAnimatedImage, null);
    final ArrayList localArrayList = new ArrayList(paramAnimatedImage.getFrameCount());
    AnimatedImageCompositor localAnimatedImageCompositor = new AnimatedImageCompositor(paramAnimatedImage, new AnimatedImageCompositor.Callback()
    {
      public CloseableReference getCachedBitmap(int paramAnonymousInt)
      {
        return CloseableReference.cloneOrNull((CloseableReference)localArrayList.get(paramAnonymousInt));
      }
      
      public void onIntermediateResult(int paramAnonymousInt, Bitmap paramAnonymousBitmap) {}
    });
    int i = 0;
    while (i < paramAnimatedImage.getFrameCount())
    {
      CloseableReference localCloseableReference = createBitmap(paramAnimatedImage.getWidth(), paramAnimatedImage.getHeight(), paramConfig);
      localAnimatedImageCompositor.renderFrame(i, (Bitmap)localCloseableReference.get());
      localArrayList.add(localCloseableReference);
      i += 1;
    }
    return localArrayList;
  }
  
  private CloseableImage getCloseableImage(ImageDecodeOptions paramImageDecodeOptions, AnimatedImage paramAnimatedImage, Bitmap.Config paramConfig)
  {
    Object localObject3 = null;
    Object localObject1 = null;
    Object localObject2 = null;
    try
    {
      boolean bool = useLastFrameForPreview;
      int i;
      if (bool)
      {
        i = paramAnimatedImage.getFrameCount();
        i -= 1;
      }
      else
      {
        i = 0;
      }
      bool = forceStaticImage;
      if (bool)
      {
        paramImageDecodeOptions = new CloseableStaticBitmap(createPreviewBitmap(paramAnimatedImage, paramConfig, i), ImmutableQualityInfo.FULL_QUALITY, 0);
        CloseableReference.closeSafely(null);
        CloseableReference.closeSafely(null);
        return paramImageDecodeOptions;
      }
      bool = decodeAllFrames;
      Object localObject4;
      if (bool)
      {
        localObject2 = decodeAllFrames(paramAnimatedImage, paramConfig);
        localObject4 = localObject2;
        localObject1 = localObject3;
        localObject3 = localObject4;
      }
      try
      {
        localObject2 = CloseableReference.cloneOrNull((CloseableReference)((List)localObject2).get(i));
        break label135;
        localObject4 = null;
        label135:
        localObject1 = localObject2;
        localObject3 = localObject4;
        bool = decodePreviewFrame;
        Object localObject5 = localObject2;
        if (bool)
        {
          localObject5 = localObject2;
          if (localObject2 == null)
          {
            localObject1 = localObject2;
            localObject3 = localObject4;
            localObject5 = createPreviewBitmap(paramAnimatedImage, paramConfig, i);
          }
        }
        localObject1 = localObject5;
        localObject3 = localObject4;
        paramImageDecodeOptions = new CloseableAnimatedImage(AnimatedImageResult.newBuilder(paramAnimatedImage).setPreviewBitmap((CloseableReference)localObject5).setFrameForPreview(i).setDecodedFrames(localObject4).setBitmapTransformation(bitmapTransformation).build());
        CloseableReference.closeSafely((CloseableReference)localObject5);
        CloseableReference.closeSafely(localObject4);
        return paramImageDecodeOptions;
      }
      catch (Throwable paramImageDecodeOptions) {}
      CloseableReference.closeSafely(localObject1);
    }
    catch (Throwable paramImageDecodeOptions)
    {
      localObject3 = null;
    }
    CloseableReference.closeSafely(localObject3);
    throw paramImageDecodeOptions;
  }
  
  private static AnimatedImageDecoder loadIfPresent(String paramString)
  {
    try
    {
      paramString = (AnimatedImageDecoder)Class.forName(paramString).newInstance();
      return paramString;
    }
    catch (Throwable paramString)
    {
      for (;;) {}
    }
    return null;
  }
  
  public CloseableImage decodeGif(EncodedImage paramEncodedImage, ImageDecodeOptions paramImageDecodeOptions, Bitmap.Config paramConfig)
  {
    if (sGifAnimatedImageDecoder != null)
    {
      CloseableReference localCloseableReference = paramEncodedImage.getByteBufferRef();
      Preconditions.checkNotNull(localCloseableReference);
      try
      {
        paramEncodedImage = (PooledByteBuffer)localCloseableReference.get();
        ByteBuffer localByteBuffer = paramEncodedImage.getByteBuffer();
        if (localByteBuffer != null) {
          paramEncodedImage = sGifAnimatedImageDecoder.decodeFromByteBuffer(paramEncodedImage.getByteBuffer(), paramImageDecodeOptions);
        } else {
          paramEncodedImage = sGifAnimatedImageDecoder.decodeFromNativeMemory(paramEncodedImage.getNativePtr(), paramEncodedImage.size(), paramImageDecodeOptions);
        }
        paramEncodedImage = getCloseableImage(paramImageDecodeOptions, paramEncodedImage, paramConfig);
        CloseableReference.closeSafely(localCloseableReference);
        return paramEncodedImage;
      }
      catch (Throwable paramEncodedImage)
      {
        CloseableReference.closeSafely(localCloseableReference);
        throw paramEncodedImage;
      }
    }
    throw new UnsupportedOperationException("To encode animated gif please add the dependency to the animated-gif module");
  }
  
  public CloseableImage decodeWebP(EncodedImage paramEncodedImage, ImageDecodeOptions paramImageDecodeOptions, Bitmap.Config paramConfig)
  {
    if (sWebpAnimatedImageDecoder != null)
    {
      CloseableReference localCloseableReference = paramEncodedImage.getByteBufferRef();
      Preconditions.checkNotNull(localCloseableReference);
      try
      {
        paramEncodedImage = (PooledByteBuffer)localCloseableReference.get();
        ByteBuffer localByteBuffer = paramEncodedImage.getByteBuffer();
        if (localByteBuffer != null) {
          paramEncodedImage = sWebpAnimatedImageDecoder.decodeFromByteBuffer(paramEncodedImage.getByteBuffer(), paramImageDecodeOptions);
        } else {
          paramEncodedImage = sWebpAnimatedImageDecoder.decodeFromNativeMemory(paramEncodedImage.getNativePtr(), paramEncodedImage.size(), paramImageDecodeOptions);
        }
        paramEncodedImage = getCloseableImage(paramImageDecodeOptions, paramEncodedImage, paramConfig);
        CloseableReference.closeSafely(localCloseableReference);
        return paramEncodedImage;
      }
      catch (Throwable paramEncodedImage)
      {
        CloseableReference.closeSafely(localCloseableReference);
        throw paramEncodedImage;
      }
    }
    throw new UnsupportedOperationException("To encode animated webp please add the dependency to the animated-webp module");
  }
}
