package com.facebook.imagepipeline.animated.base;

import android.graphics.Bitmap;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.transformation.BitmapTransformation;
import java.util.List;
import javax.annotation.Nullable;

public class AnimatedImageResultBuilder
{
  @Nullable
  private BitmapTransformation mBitmapTransformation;
  private List<CloseableReference<Bitmap>> mDecodedFrames;
  private int mFrameForPreview;
  private final AnimatedImage mImage;
  private CloseableReference<Bitmap> mPreviewBitmap;
  
  AnimatedImageResultBuilder(AnimatedImage paramAnimatedImage)
  {
    mImage = paramAnimatedImage;
  }
  
  public AnimatedImageResult build()
  {
    try
    {
      AnimatedImageResult localAnimatedImageResult = new AnimatedImageResult(this);
      CloseableReference.closeSafely(mPreviewBitmap);
      mPreviewBitmap = null;
      CloseableReference.closeSafely(mDecodedFrames);
      mDecodedFrames = null;
      return localAnimatedImageResult;
    }
    catch (Throwable localThrowable)
    {
      CloseableReference.closeSafely(mPreviewBitmap);
      mPreviewBitmap = null;
      CloseableReference.closeSafely(mDecodedFrames);
      mDecodedFrames = null;
      throw localThrowable;
    }
  }
  
  public BitmapTransformation getBitmapTransformation()
  {
    return mBitmapTransformation;
  }
  
  public List getDecodedFrames()
  {
    return CloseableReference.cloneOrNull(mDecodedFrames);
  }
  
  public int getFrameForPreview()
  {
    return mFrameForPreview;
  }
  
  public AnimatedImage getImage()
  {
    return mImage;
  }
  
  public CloseableReference getPreviewBitmap()
  {
    return CloseableReference.cloneOrNull(mPreviewBitmap);
  }
  
  public AnimatedImageResultBuilder setBitmapTransformation(BitmapTransformation paramBitmapTransformation)
  {
    mBitmapTransformation = paramBitmapTransformation;
    return this;
  }
  
  public AnimatedImageResultBuilder setDecodedFrames(List paramList)
  {
    mDecodedFrames = CloseableReference.cloneOrNull(paramList);
    return this;
  }
  
  public AnimatedImageResultBuilder setFrameForPreview(int paramInt)
  {
    mFrameForPreview = paramInt;
    return this;
  }
  
  public AnimatedImageResultBuilder setPreviewBitmap(CloseableReference paramCloseableReference)
  {
    mPreviewBitmap = CloseableReference.cloneOrNull(paramCloseableReference);
    return this;
  }
}
