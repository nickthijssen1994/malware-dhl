package com.facebook.imagepipeline.animated.base;

import android.graphics.Bitmap;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.transformation.BitmapTransformation;
import java.util.List;
import javax.annotation.Nullable;

public class AnimatedImageResult
{
  @Nullable
  private BitmapTransformation mBitmapTransformation;
  @Nullable
  private List<CloseableReference<Bitmap>> mDecodedFrames;
  private final int mFrameForPreview;
  private final AnimatedImage mImage;
  @Nullable
  private CloseableReference<Bitmap> mPreviewBitmap;
  
  private AnimatedImageResult(AnimatedImage paramAnimatedImage)
  {
    mImage = ((AnimatedImage)Preconditions.checkNotNull(paramAnimatedImage));
    mFrameForPreview = 0;
  }
  
  AnimatedImageResult(AnimatedImageResultBuilder paramAnimatedImageResultBuilder)
  {
    mImage = ((AnimatedImage)Preconditions.checkNotNull(paramAnimatedImageResultBuilder.getImage()));
    mFrameForPreview = paramAnimatedImageResultBuilder.getFrameForPreview();
    mPreviewBitmap = paramAnimatedImageResultBuilder.getPreviewBitmap();
    mDecodedFrames = paramAnimatedImageResultBuilder.getDecodedFrames();
    mBitmapTransformation = paramAnimatedImageResultBuilder.getBitmapTransformation();
  }
  
  public static AnimatedImageResult forAnimatedImage(AnimatedImage paramAnimatedImage)
  {
    return new AnimatedImageResult(paramAnimatedImage);
  }
  
  public static AnimatedImageResultBuilder newBuilder(AnimatedImage paramAnimatedImage)
  {
    return new AnimatedImageResultBuilder(paramAnimatedImage);
  }
  
  public void dispose()
  {
    try
    {
      CloseableReference.closeSafely(mPreviewBitmap);
      mPreviewBitmap = null;
      CloseableReference.closeSafely(mDecodedFrames);
      mDecodedFrames = null;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public BitmapTransformation getBitmapTransformation()
  {
    return mBitmapTransformation;
  }
  
  public CloseableReference getDecodedFrame(int paramInt)
  {
    try
    {
      if (mDecodedFrames != null)
      {
        CloseableReference localCloseableReference = CloseableReference.cloneOrNull((CloseableReference)mDecodedFrames.get(paramInt));
        return localCloseableReference;
      }
      return null;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getFrameForPreview()
  {
    return mFrameForPreview;
  }
  
  public AnimatedImage getImage()
  {
    return mImage;
  }
  
  public CloseableReference getPreviewBitmap()
  {
    try
    {
      CloseableReference localCloseableReference = CloseableReference.cloneOrNull(mPreviewBitmap);
      return localCloseableReference;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean hasDecodedFrame(int paramInt)
  {
    try
    {
      if (mDecodedFrames != null)
      {
        Object localObject = mDecodedFrames.get(paramInt);
        if (localObject != null)
        {
          bool = true;
          break label31;
        }
      }
      boolean bool = false;
      label31:
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
