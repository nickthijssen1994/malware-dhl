package com.facebook.imagepipeline.request;

import android.net.Uri;
import com.facebook.common.internal.Objects;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.annotation.Nullable;
import javax.annotation.concurrent.Immutable;

@Immutable
public class MediaVariations
{
  public static final String SOURCE_ID_EXTRACTOR = "id_extractor";
  public static final String SOURCE_IMAGE_REQUEST = "request";
  public static final String SOURCE_INDEX_DB = "index_db";
  private final boolean mForceRequestForSpecifiedUri;
  private final String mMediaId;
  private final String mSource;
  @Nullable
  private final List<Variant> mVariants;
  
  private MediaVariations(Builder paramBuilder)
  {
    mMediaId = mMediaId;
    mVariants = mVariants;
    mForceRequestForSpecifiedUri = mForceRequestForSpecifiedUri;
    mSource = mSource;
  }
  
  public static MediaVariations forMediaId(String paramString)
  {
    if ((paramString != null) && (!paramString.isEmpty())) {
      return newBuilderForMediaId(paramString).build();
    }
    return null;
  }
  
  public static Builder newBuilderForMediaId(String paramString)
  {
    return new Builder(paramString, null);
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof MediaVariations)) {
      return false;
    }
    paramObject = (MediaVariations)paramObject;
    return (Objects.equal(mMediaId, mMediaId)) && (mForceRequestForSpecifiedUri == mForceRequestForSpecifiedUri) && (Objects.equal(mVariants, mVariants));
  }
  
  public String getMediaId()
  {
    return mMediaId;
  }
  
  public List getSortedVariants(Comparator paramComparator)
  {
    int j = getVariantsCount();
    if (j == 0) {
      return Collections.emptyList();
    }
    ArrayList localArrayList = new ArrayList(j);
    int i = 0;
    while (i < j)
    {
      localArrayList.add(mVariants.get(i));
      i += 1;
    }
    Collections.sort(localArrayList, paramComparator);
    return localArrayList;
  }
  
  public String getSource()
  {
    return mSource;
  }
  
  public Variant getVariant(int paramInt)
  {
    return (Variant)mVariants.get(paramInt);
  }
  
  public int getVariantsCount()
  {
    List localList = mVariants;
    if (localList == null) {
      return 0;
    }
    return localList.size();
  }
  
  public int hashCode()
  {
    return Objects.hashCode(new Object[] { mMediaId, Boolean.valueOf(mForceRequestForSpecifiedUri), mVariants, mSource });
  }
  
  public boolean shouldForceRequestForSpecifiedUri()
  {
    return mForceRequestForSpecifiedUri;
  }
  
  public String toString()
  {
    return String.format(null, "%s-%b-%s-%s", new Object[] { mMediaId, Boolean.valueOf(mForceRequestForSpecifiedUri), mVariants, mSource });
  }
  
  public static class Builder
  {
    private boolean mForceRequestForSpecifiedUri = false;
    private final String mMediaId;
    private String mSource = "request";
    private List<MediaVariations.Variant> mVariants;
    
    private Builder(String paramString)
    {
      mMediaId = paramString;
    }
    
    public Builder addVariant(Uri paramUri, int paramInt1, int paramInt2)
    {
      return addVariant(paramUri, paramInt1, paramInt2, null);
    }
    
    public Builder addVariant(Uri paramUri, int paramInt1, int paramInt2, ImageRequest.CacheChoice paramCacheChoice)
    {
      if (mVariants == null) {
        mVariants = new ArrayList();
      }
      mVariants.add(new MediaVariations.Variant(paramUri, paramInt1, paramInt2, paramCacheChoice));
      return this;
    }
    
    public MediaVariations build()
    {
      return new MediaVariations(this, null);
    }
    
    public Builder setForceRequestForSpecifiedUri(boolean paramBoolean)
    {
      mForceRequestForSpecifiedUri = paramBoolean;
      return this;
    }
    
    public Builder setSource(String paramString)
    {
      mSource = paramString;
      return this;
    }
  }
  
  @Retention(RetentionPolicy.SOURCE)
  public static @interface Source {}
  
  public static final class Variant
  {
    @Nullable
    private final ImageRequest.CacheChoice mCacheChoice;
    private final int mHeight;
    private final Uri mUri;
    private final int mWidth;
    
    public Variant(Uri paramUri, int paramInt1, int paramInt2)
    {
      this(paramUri, paramInt1, paramInt2, null);
    }
    
    public Variant(Uri paramUri, int paramInt1, int paramInt2, ImageRequest.CacheChoice paramCacheChoice)
    {
      mUri = paramUri;
      mWidth = paramInt1;
      mHeight = paramInt2;
      mCacheChoice = paramCacheChoice;
    }
    
    public boolean equals(Object paramObject)
    {
      if (!(paramObject instanceof Variant)) {
        return false;
      }
      paramObject = (Variant)paramObject;
      return (Objects.equal(mUri, mUri)) && (mWidth == mWidth) && (mHeight == mHeight) && (mCacheChoice == mCacheChoice);
    }
    
    public ImageRequest.CacheChoice getCacheChoice()
    {
      return mCacheChoice;
    }
    
    public int getHeight()
    {
      return mHeight;
    }
    
    public Uri getUri()
    {
      return mUri;
    }
    
    public int getWidth()
    {
      return mWidth;
    }
    
    public int hashCode()
    {
      return (mUri.hashCode() * 31 + mWidth) * 31 + mHeight;
    }
    
    public String toString()
    {
      return String.format(null, "%dx%d %s %s", new Object[] { Integer.valueOf(mWidth), Integer.valueOf(mHeight), mUri, mCacheChoice });
    }
  }
}
