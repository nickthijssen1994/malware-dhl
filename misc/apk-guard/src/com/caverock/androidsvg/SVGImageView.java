package com.caverock.androidsvg;

import android.content.ContentResolver;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Paint;
import android.graphics.Picture;
import android.graphics.drawable.PictureDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.xml.sax.SAXException;

public class SVGImageView
  extends ImageView
{
  private static Method setLayerTypeMethod;
  private d L = new d();
  private SVG a = null;
  
  static
  {
    Object localObject = Integer.TYPE;
    try
    {
      localObject = View.class.getMethod("setLayerType", new Class[] { localObject, Paint.class });
      setLayerTypeMethod = (Method)localObject;
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException) {}
  }
  
  public SVGImageView(Context paramContext)
  {
    super(paramContext);
  }
  
  public SVGImageView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet, 0);
    init(paramAttributeSet, 0);
  }
  
  public SVGImageView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    init(paramAttributeSet, paramInt);
  }
  
  private void init(AttributeSet paramAttributeSet, int paramInt)
  {
    if (isInEditMode()) {
      return;
    }
    paramAttributeSet = getContext().getTheme().obtainStyledAttributes(paramAttributeSet, R.styleable.SVGImageView, paramInt, 0);
    try
    {
      String str = paramAttributeSet.getString(R.styleable.SVGImageView_css);
      if (str != null) {
        L.a(str);
      }
      paramInt = paramAttributeSet.getResourceId(R.styleable.SVGImageView_svg, -1);
      if (paramInt != -1)
      {
        setImageResource(paramInt);
        paramAttributeSet.recycle();
        return;
      }
      str = paramAttributeSet.getString(R.styleable.SVGImageView_svg);
      if (str != null)
      {
        boolean bool = internalSetImageURI(Uri.parse(str));
        if (bool)
        {
          paramAttributeSet.recycle();
          return;
        }
        bool = init(str);
        if (bool)
        {
          paramAttributeSet.recycle();
          return;
        }
        setFromString(str);
      }
      paramAttributeSet.recycle();
      return;
    }
    catch (Throwable localThrowable)
    {
      paramAttributeSet.recycle();
      throw localThrowable;
    }
  }
  
  private boolean init(String paramString)
  {
    try
    {
      paramString = getContext().getAssets().open(paramString);
      b localB = new b(null);
      localB.execute(new InputStream[] { paramString });
      return true;
    }
    catch (IOException paramString) {}
    return false;
  }
  
  private boolean internalSetImageURI(Uri paramUri)
  {
    try
    {
      paramUri = getContext().getContentResolver().openInputStream(paramUri);
      b localB = new b(null);
      localB.execute(new InputStream[] { paramUri });
      return true;
    }
    catch (FileNotFoundException paramUri) {}
    return false;
  }
  
  private void setFromString(String paramString)
  {
    try
    {
      localObject = SVG.build(paramString);
      a = ((SVG)localObject);
      setSVG();
      return;
    }
    catch (SVGParseException localSVGParseException)
    {
      Object localObject;
      for (;;) {}
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Could not find SVG at: ");
    ((StringBuilder)localObject).append(paramString);
    Log.e("SVGImageView", ((StringBuilder)localObject).toString());
  }
  
  private void setSVG()
  {
    Object localObject = a;
    if (localObject == null) {
      return;
    }
    localObject = ((SVG)localObject).renderToPicture(L);
    setSoftwareLayerType();
    setImageDrawable(new PictureDrawable((Picture)localObject));
  }
  
  private void setSoftwareLayerType()
  {
    if (setLayerTypeMethod == null) {
      return;
    }
    try
    {
      Object localObject = View.class.getField("LAYER_TYPE_SOFTWARE");
      int i = ((Field)localObject).getInt(new View(getContext()));
      localObject = setLayerTypeMethod;
      ((Method)localObject).invoke(this, new Object[] { Integer.valueOf(i), null });
      return;
    }
    catch (Exception localException)
    {
      Log.w("SVGImageView", "Unexpected failure calling setLayerType", localException);
    }
  }
  
  public void setCSS(String paramString)
  {
    L.a(paramString);
    setSVG();
  }
  
  public void setImageAsset(String paramString)
  {
    if (!init(paramString))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("File not found: ");
      localStringBuilder.append(paramString);
      Log.e("SVGImageView", localStringBuilder.toString());
    }
  }
  
  public void setImageResource(int paramInt)
  {
    new a(getContext(), paramInt).execute(new Integer[0]);
  }
  
  public void setImageURI(Uri paramUri)
  {
    if (!internalSetImageURI(paramUri))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("File not found: ");
      localStringBuilder.append(paramUri);
      Log.e("SVGImageView", localStringBuilder.toString());
    }
  }
  
  public void setSVG(SVG paramSVG)
  {
    if (paramSVG != null)
    {
      a = paramSVG;
      setSVG();
      return;
    }
    throw new IllegalArgumentException("Null value passed to setSVG()");
  }
  
  public void setSVG(SVG paramSVG, String paramString)
  {
    if (paramSVG != null)
    {
      a = paramSVG;
      L.a(paramString);
      setSVG();
      return;
    }
    throw new IllegalArgumentException("Null value passed to setSVG()");
  }
  
  private class a
    extends AsyncTask<Integer, Integer, SVG>
  {
    private int a;
    private Context c;
    
    a(Context paramContext, int paramInt)
    {
      c = paramContext;
      a = paramInt;
    }
    
    protected SVG doInBackground(Integer... paramVarArgs)
    {
      paramVarArgs = c;
      int i = a;
      try
      {
        paramVarArgs = SVG.parse(paramVarArgs, i);
        return paramVarArgs;
      }
      catch (SVGParseException paramVarArgs)
      {
        Log.e("SVGImageView", String.format("Error loading resource 0x%x: %s", new Object[] { Integer.valueOf(a), paramVarArgs.getMessage() }));
      }
      return null;
    }
    
    protected void onPostExecute(SVG paramSVG)
    {
      SVGImageView.access$getSetSoftwareLayerType(SVGImageView.this, paramSVG);
      SVGImageView.access$getSetSoftwareLayerType(SVGImageView.this);
    }
  }
  
  private class b
    extends AsyncTask<InputStream, Integer, SVG>
  {
    private b() {}
    
    /* Error */
    protected SVG doInBackground(InputStream... paramVarArgs)
    {
      // Byte code:
      //   0: aload_1
      //   1: iconst_0
      //   2: aaload
      //   3: astore_2
      //   4: aload_2
      //   5: invokestatic 35	com/caverock/androidsvg/SVG:build	(Ljava/io/InputStream;)Lcom/caverock/androidsvg/SVG;
      //   8: astore_2
      //   9: aload_1
      //   10: iconst_0
      //   11: aaload
      //   12: astore_1
      //   13: aload_1
      //   14: invokevirtual 40	java/io/InputStream:close	()V
      //   17: aload_2
      //   18: areturn
      //   19: astore_2
      //   20: goto +48 -> 68
      //   23: astore_2
      //   24: new 42	java/lang/StringBuilder
      //   27: dup
      //   28: invokespecial 43	java/lang/StringBuilder:<init>	()V
      //   31: astore_3
      //   32: aload_3
      //   33: ldc 45
      //   35: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   38: pop
      //   39: aload_3
      //   40: aload_2
      //   41: invokevirtual 55	org/xml/sax/SAXException:getMessage	()Ljava/lang/String;
      //   44: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   47: pop
      //   48: ldc 57
      //   50: aload_3
      //   51: invokevirtual 60	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   54: invokestatic 66	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   57: pop
      //   58: aload_1
      //   59: iconst_0
      //   60: aaload
      //   61: astore_1
      //   62: aload_1
      //   63: invokevirtual 40	java/io/InputStream:close	()V
      //   66: aconst_null
      //   67: areturn
      //   68: aload_1
      //   69: iconst_0
      //   70: aaload
      //   71: astore_1
      //   72: aload_1
      //   73: invokevirtual 40	java/io/InputStream:close	()V
      //   76: aload_2
      //   77: athrow
      //   78: astore_1
      //   79: aload_2
      //   80: areturn
      //   81: astore_1
      //   82: goto -16 -> 66
      //   85: astore_1
      //   86: goto -10 -> 76
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	89	0	this	b
      //   0	89	1	paramVarArgs	InputStream[]
      //   3	15	2	localObject	Object
      //   19	1	2	localThrowable	Throwable
      //   23	57	2	localSVGParseException	SVGParseException
      //   31	20	3	localStringBuilder	StringBuilder
      // Exception table:
      //   from	to	target	type
      //   4	9	19	java/lang/Throwable
      //   24	58	19	java/lang/Throwable
      //   4	9	23	com/caverock/androidsvg/SVGParseException
      //   13	17	78	java/io/IOException
      //   62	66	81	java/io/IOException
      //   72	76	85	java/io/IOException
    }
    
    protected void onPostExecute(SVG paramSVG)
    {
      SVGImageView.access$getSetSoftwareLayerType(SVGImageView.this, paramSVG);
      SVGImageView.access$getSetSoftwareLayerType(SVGImageView.this);
    }
  }
}
