package com.caverock.androidsvg;

class NumberParser
{
  private static final float[] negativePowersOf10 = { 1.0F, 0.1F, 0.01F, 0.001F, 1.0E-4F, 1.0E-5F, 1.0E-6F, 1.0E-7F, 1.0E-8F, 1.0E-9F, 1.0E-10F, 1.0E-11F, 1.0E-12F, 1.0E-13F, 1.0E-14F, 1.0E-15F, 1.0E-16F, 1.0E-17F, 1.0E-18F, 1.0E-19F, 1.0E-20F, 1.0E-21F, 1.0E-22F, 1.0E-23F, 1.0E-24F, 1.0E-25F, 1.0E-26F, 1.0E-27F, 1.0E-28F, 1.0E-29F, 1.0E-30F, 1.0E-31F, 1.0E-32F, 1.0E-33F, 1.0E-34F, 1.0E-35F, 1.0E-36F, 1.0E-37F, 1.0E-38F };
  private static final float[] positivePowersOf10 = { 1.0F, 10.0F, 100.0F, 1000.0F, 10000.0F, 100000.0F, 1000000.0F, 1.0E7F, 1.0E8F, 1.0E9F, 1.0E10F, 9.9999998E10F, 1.0E12F, 9.9999998E12F, 1.0E14F, 9.9999999E14F, 1.00000003E16F, 9.9999998E16F, 9.9999998E17F, 1.0E19F, 1.0E20F, 1.0E21F, 1.0E22F, 1.0E23F, 1.0E24F, 1.0E25F, 1.0E26F, 1.0E27F, 1.0E28F, 1.0E29F, 1.0E30F, 1.0E31F, 1.0E32F, 1.0E33F, 1.0E34F, 1.0E35F, 1.0E36F, 1.0E37F, 1.0E38F };
  private int pos;
  
  NumberParser() {}
  
  int getEndPos()
  {
    return pos;
  }
  
  float parseNumber(String paramString, int paramInt1, int paramInt2)
  {
    pos = paramInt1;
    paramInt1 = pos;
    if (paramInt1 >= paramInt2) {
      return NaN.0F;
    }
    paramInt1 = paramString.charAt(paramInt1);
    if (paramInt1 != 43)
    {
      if (paramInt1 != 45)
      {
        m = 0;
        break label62;
      }
      paramInt1 = 1;
    }
    else
    {
      paramInt1 = 0;
    }
    pos += 1;
    int m = paramInt1;
    label62:
    int n = pos;
    long l1 = 0L;
    int i = 0;
    paramInt1 = 0;
    int i1 = 0;
    int i2 = 0;
    int k = 0;
    for (;;)
    {
      j = pos;
      if (j >= paramInt2) {
        break;
      }
      int i3 = paramString.charAt(j);
      if (i3 == 48)
      {
        if (i == 0) {
          i1 += 1;
        } else {
          paramInt1 += 1;
        }
      }
      else if ((i3 >= 49) && (i3 <= 57))
      {
        j = paramInt1;
        while (j > 0)
        {
          if (l1 > 922337203685477580L) {
            return NaN.0F;
          }
          l1 *= 10L;
          j -= 1;
        }
        if (l1 > 922337203685477580L) {
          return NaN.0F;
        }
        long l2 = l1 * 10L + (i3 - 48);
        i = i + paramInt1 + 1;
        l1 = l2;
        paramInt1 = j;
        if (l2 < 0L) {
          return NaN.0F;
        }
      }
      else
      {
        if ((i3 != 46) || (i2 != 0)) {
          break;
        }
        k = pos - n;
        i2 = 1;
      }
      pos += 1;
    }
    if ((i2 != 0) && (pos == k + 1)) {
      return NaN.0F;
    }
    n = i;
    if (i == 0)
    {
      if (i1 == 0) {
        return NaN.0F;
      }
      n = 1;
    }
    i = paramInt1;
    if (i2 != 0) {
      i = k - i1 - n;
    }
    int j = pos;
    paramInt1 = i;
    if (j < paramInt2)
    {
      j = paramString.charAt(j);
      if (j != 69)
      {
        paramInt1 = i;
        if (j != 101) {}
      }
      else
      {
        pos += 1;
        paramInt1 = pos;
        if (paramInt1 == paramInt2) {
          return NaN.0F;
        }
        paramInt1 = paramString.charAt(paramInt1);
        if (paramInt1 != 43)
        {
          if (paramInt1 != 45) {
            switch (paramInt1)
            {
            default: 
              pos -= 1;
              k = 1;
              j = 0;
              break;
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: 
              k = 0;
              j = 0;
              break;
            }
          }
          j = 1;
        }
        else
        {
          j = 0;
        }
        pos += 1;
        k = 0;
        paramInt1 = i;
        if (k == 0)
        {
          k = pos;
          paramInt1 = 0;
          for (;;)
          {
            i1 = pos;
            if (i1 >= paramInt2) {
              break;
            }
            i1 = paramString.charAt(i1);
            if ((i1 < 48) || (i1 > 57)) {
              break;
            }
            if (paramInt1 > 922337203685477580L) {
              return NaN.0F;
            }
            paramInt1 = paramInt1 * 10 + (i1 - 48);
            pos += 1;
          }
          if (pos == k) {
            return NaN.0F;
          }
          if (j != 0) {
            paramInt1 = i - paramInt1;
          } else {
            paramInt1 = i + paramInt1;
          }
        }
      }
    }
    paramInt2 = n + paramInt1;
    float f1;
    if (paramInt2 <= 39)
    {
      if (paramInt2 < -44) {
        return NaN.0F;
      }
      float f2 = (float)l1;
      f1 = f2;
      if (l1 != 0L) {
        if (paramInt1 > 0)
        {
          f1 = f2 * positivePowersOf10[paramInt1];
        }
        else
        {
          f1 = f2;
          if (paramInt1 < 0)
          {
            f1 = f2;
            paramInt2 = paramInt1;
            if (paramInt1 < -38)
            {
              double d = f2;
              Double.isNaN(d);
              f1 = (float)(d * 1.0E-20D);
              paramInt2 = paramInt1 + 20;
            }
            f1 *= negativePowersOf10[(-paramInt2)];
          }
        }
      }
      if (m != 0) {
        return -f1;
      }
    }
    else
    {
      return NaN.0F;
    }
    return f1;
  }
}
