package com.alibaba.fastjson;

import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.io.Closeable;
import java.io.Flushable;
import java.io.IOException;
import java.io.Writer;

public class JSONWriter
  implements Closeable, Flushable
{
  private JSONStreamContext context;
  private JSONSerializer serializer;
  private SerializeWriter writer;
  
  public JSONWriter(Writer paramWriter)
  {
    writer = new SerializeWriter(paramWriter);
    serializer = new JSONSerializer(writer);
  }
  
  private void afterWriter()
  {
    JSONStreamContext localJSONStreamContext = context;
    if (localJSONStreamContext == null) {
      return;
    }
    switch (localJSONStreamContext.getState())
    {
    default: 
      break;
    case 1004: 
      i = 1005;
      break;
    case 1002: 
      i = 1003;
      break;
    case 1001: 
    case 1003: 
      i = 1002;
      break;
    }
    int i = -1;
    if (i != -1) {
      context.setState(i);
    }
  }
  
  private void beforeWrite()
  {
    JSONStreamContext localJSONStreamContext = context;
    if (localJSONStreamContext == null) {
      return;
    }
    switch (localJSONStreamContext.getState())
    {
    default: 
      
    case 1005: 
      writer.write(',');
      return;
    case 1003: 
      writer.write(',');
      return;
    case 1002: 
      writer.write(':');
    }
  }
  
  private void beginStructure()
  {
    int i = context.getState();
    switch (i)
    {
    default: 
      break;
    case 1003: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("illegal state : ");
      localStringBuilder.append(i);
      throw new JSONException(localStringBuilder.toString());
    case 1005: 
      writer.write(',');
      return;
    case 1002: 
      writer.write(':');
    }
  }
  
  private void endStructure()
  {
    context = context.getParent();
    JSONStreamContext localJSONStreamContext = context;
    if (localJSONStreamContext == null) {
      return;
    }
    switch (localJSONStreamContext.getState())
    {
    default: 
      break;
    case 1003: 
      break;
    case 1004: 
      i = 1005;
      break;
    case 1002: 
      i = 1003;
      break;
    case 1001: 
      i = 1002;
      break;
    }
    int i = -1;
    if (i != -1) {
      context.setState(i);
    }
  }
  
  public void close()
    throws IOException
  {
    writer.close();
  }
  
  public void config(SerializerFeature paramSerializerFeature, boolean paramBoolean)
  {
    writer.config(paramSerializerFeature, paramBoolean);
  }
  
  public void endArray()
  {
    writer.write(']');
    endStructure();
  }
  
  public void endObject()
  {
    writer.write('}');
    endStructure();
  }
  
  public void flush()
    throws IOException
  {
    writer.flush();
  }
  
  public void startArray()
  {
    if (context != null) {
      beginStructure();
    }
    context = new JSONStreamContext(context, 1004);
    writer.write('[');
  }
  
  public void startObject()
  {
    if (context != null) {
      beginStructure();
    }
    context = new JSONStreamContext(context, 1001);
    writer.write('{');
  }
  
  public void writeEndArray()
  {
    endArray();
  }
  
  public void writeEndObject()
  {
    endObject();
  }
  
  public void writeKey(String paramString)
  {
    writeObject(paramString);
  }
  
  public void writeObject(Object paramObject)
  {
    beforeWrite();
    serializer.write(paramObject);
    afterWriter();
  }
  
  public void writeObject(String paramString)
  {
    beforeWrite();
    serializer.write(paramString);
    afterWriter();
  }
  
  public void writeStartArray()
  {
    startArray();
  }
  
  public void writeStartObject()
  {
    startObject();
  }
  
  public void writeValue(Object paramObject)
  {
    writeObject(paramObject);
  }
}
