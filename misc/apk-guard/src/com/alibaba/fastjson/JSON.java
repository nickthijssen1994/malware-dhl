package com.alibaba.fastjson;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.AfterFilter;
import com.alibaba.fastjson.serializer.BeforeFilter;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.LabelFilter;
import com.alibaba.fastjson.serializer.NameFilter;
import com.alibaba.fastjson.serializer.PropertyFilter;
import com.alibaba.fastjson.serializer.PropertyPreFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.ValueFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.ThreadLocalCache;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharsetDecoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public abstract class JSON
  implements JSONAware, JSONStreamAware
{
  public static int DEFAULT_GENERATE_FEATURE = SerializerFeature.QuoteFieldNames.getMask() | 0x0 | SerializerFeature.SkipTransientField.getMask() | SerializerFeature.WriteEnumUsingName.getMask() | SerializerFeature.SortField.getMask();
  public static int DEFAULT_PARSER_FEATURE = Feature.AutoCloseSource.getMask() | 0x0 | Feature.InternFieldNames.getMask() | Feature.UseBigDecimal.getMask() | Feature.AllowUnQuotedFieldNames.getMask() | Feature.AllowSingleQuotes.getMask() | Feature.AllowArbitraryCommas.getMask() | Feature.SortFeidFastMatch.getMask() | Feature.IgnoreNotMatch.getMask();
  public static String DEFAULT_TYPE_KEY;
  public static String DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
  public static String DUMP_CLASS;
  public static final String VERSION = "1.2.7";
  
  public JSON() {}
  
  public static Object parse(String paramString)
  {
    return parse(paramString, DEFAULT_PARSER_FEATURE);
  }
  
  public static Object parse(String paramString, int paramInt)
  {
    if (paramString == null) {
      return null;
    }
    paramString = new DefaultJSONParser(paramString, ParserConfig.getGlobalInstance(), paramInt);
    Object localObject = paramString.parse();
    paramString.handleResovleTask(localObject);
    paramString.close();
    return localObject;
  }
  
  public static Object parse(String paramString, Feature... paramVarArgs)
  {
    int j = DEFAULT_PARSER_FEATURE;
    int k = paramVarArgs.length;
    int i = 0;
    while (i < k)
    {
      j = Feature.config(j, paramVarArgs[i], true);
      i += 1;
    }
    return parse(paramString, j);
  }
  
  public static Object parse(byte[] paramArrayOfByte, int paramInt1, int paramInt2, CharsetDecoder paramCharsetDecoder, int paramInt3)
  {
    paramCharsetDecoder.reset();
    double d1 = paramInt2;
    double d2 = paramCharsetDecoder.maxCharsPerByte();
    Double.isNaN(d1);
    Double.isNaN(d2);
    char[] arrayOfChar = ThreadLocalCache.getChars((int)(d1 * d2));
    paramArrayOfByte = ByteBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2);
    CharBuffer localCharBuffer = CharBuffer.wrap(arrayOfChar);
    IOUtils.decode(paramCharsetDecoder, paramArrayOfByte, localCharBuffer);
    paramArrayOfByte = new DefaultJSONParser(arrayOfChar, localCharBuffer.position(), ParserConfig.getGlobalInstance(), paramInt3);
    paramCharsetDecoder = paramArrayOfByte.parse();
    paramArrayOfByte.handleResovleTask(paramCharsetDecoder);
    paramArrayOfByte.close();
    return paramCharsetDecoder;
  }
  
  public static Object parse(byte[] paramArrayOfByte, int paramInt1, int paramInt2, CharsetDecoder paramCharsetDecoder, Feature... paramVarArgs)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length != 0))
    {
      int j = DEFAULT_PARSER_FEATURE;
      int k = paramVarArgs.length;
      int i = 0;
      while (i < k)
      {
        j = Feature.config(j, paramVarArgs[i], true);
        i += 1;
      }
      return parse(paramArrayOfByte, paramInt1, paramInt2, paramCharsetDecoder, j);
    }
    return null;
  }
  
  public static Object parse(byte[] paramArrayOfByte, Feature... paramVarArgs)
  {
    return parse(paramArrayOfByte, 0, paramArrayOfByte.length, ThreadLocalCache.getUTF8Decoder(), paramVarArgs);
  }
  
  public static JSONArray parseArray(String paramString)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    DefaultJSONParser localDefaultJSONParser = new DefaultJSONParser(paramString, ParserConfig.getGlobalInstance());
    paramString = localDefaultJSONParser.getLexer();
    if (paramString.token() == 8)
    {
      paramString.nextToken();
      paramString = localObject;
    }
    else if (paramString.token() == 20)
    {
      paramString = localObject;
    }
    else
    {
      paramString = new JSONArray();
      localDefaultJSONParser.parseArray(paramString);
      localDefaultJSONParser.handleResovleTask(paramString);
    }
    localDefaultJSONParser.close();
    return paramString;
  }
  
  public static List parseArray(String paramString, Class paramClass)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    DefaultJSONParser localDefaultJSONParser = new DefaultJSONParser(paramString, ParserConfig.getGlobalInstance());
    paramString = localDefaultJSONParser.getLexer();
    if (paramString.token() == 8)
    {
      paramString.nextToken();
      paramString = localObject;
    }
    else
    {
      paramString = new ArrayList();
      localDefaultJSONParser.parseArray(paramClass, paramString);
      localDefaultJSONParser.handleResovleTask(paramString);
    }
    localDefaultJSONParser.close();
    return paramString;
  }
  
  public static List parseArray(String paramString, Type[] paramArrayOfType)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    DefaultJSONParser localDefaultJSONParser = new DefaultJSONParser(paramString, ParserConfig.getGlobalInstance());
    paramString = localDefaultJSONParser.parseArray(paramArrayOfType);
    if (paramString == null) {
      paramString = localObject;
    } else {
      paramString = Arrays.asList(paramString);
    }
    localDefaultJSONParser.handleResovleTask(paramString);
    localDefaultJSONParser.close();
    return paramString;
  }
  
  public static JSONObject parseObject(String paramString)
  {
    paramString = parse(paramString);
    if ((paramString instanceof JSONObject)) {
      return (JSONObject)paramString;
    }
    return (JSONObject)toJSON(paramString);
  }
  
  public static JSONObject parseObject(String paramString, Feature... paramVarArgs)
  {
    return (JSONObject)parse(paramString, paramVarArgs);
  }
  
  public static Object parseObject(String paramString, TypeReference paramTypeReference, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramTypeReference.getType(), ParserConfig.getGlobalInstance(), DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static Object parseObject(String paramString, Class paramClass)
  {
    return parseObject(paramString, paramClass, new Feature[0]);
  }
  
  public static Object parseObject(String paramString, Class paramClass, ParseProcess paramParseProcess, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramClass, ParserConfig.getGlobalInstance(), paramParseProcess, DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static Object parseObject(String paramString, Class paramClass, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramClass, ParserConfig.getGlobalInstance(), DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static Object parseObject(String paramString, Type paramType, int paramInt, Feature... paramVarArgs)
  {
    if (paramString == null) {
      return null;
    }
    int k = paramVarArgs.length;
    int j = 0;
    int i = paramInt;
    paramInt = j;
    while (paramInt < k)
    {
      i = Feature.config(i, paramVarArgs[paramInt], true);
      paramInt += 1;
    }
    paramString = new DefaultJSONParser(paramString, ParserConfig.getGlobalInstance(), i);
    paramType = paramString.parseObject(paramType);
    paramString.handleResovleTask(paramType);
    paramString.close();
    return paramType;
  }
  
  public static Object parseObject(String paramString, Type paramType, ParserConfig paramParserConfig, int paramInt, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramType, paramParserConfig, null, paramInt, paramVarArgs);
  }
  
  public static Object parseObject(String paramString, Type paramType, ParserConfig paramParserConfig, ParseProcess paramParseProcess, int paramInt, Feature... paramVarArgs)
  {
    if (paramString == null) {
      return null;
    }
    int k = paramVarArgs.length;
    int j = 0;
    int i = paramInt;
    paramInt = j;
    while (paramInt < k)
    {
      i = Feature.config(i, paramVarArgs[paramInt], true);
      paramInt += 1;
    }
    paramString = new DefaultJSONParser(paramString, paramParserConfig, i);
    if ((paramParseProcess instanceof ExtraTypeProvider)) {
      paramString.getExtraTypeProviders().add((ExtraTypeProvider)paramParseProcess);
    }
    if ((paramParseProcess instanceof ExtraProcessor)) {
      paramString.getExtraProcessors().add((ExtraProcessor)paramParseProcess);
    }
    paramType = paramString.parseObject(paramType);
    paramString.handleResovleTask(paramType);
    paramString.close();
    return paramType;
  }
  
  public static Object parseObject(String paramString, Type paramType, ParseProcess paramParseProcess, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramType, ParserConfig.getGlobalInstance(), DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static Object parseObject(String paramString, Type paramType, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramType, ParserConfig.getGlobalInstance(), DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static Object parseObject(byte[] paramArrayOfByte, int paramInt1, int paramInt2, CharsetDecoder paramCharsetDecoder, Type paramType, Feature... paramVarArgs)
  {
    paramCharsetDecoder.reset();
    double d1 = paramInt2;
    double d2 = paramCharsetDecoder.maxCharsPerByte();
    Double.isNaN(d1);
    Double.isNaN(d2);
    char[] arrayOfChar = ThreadLocalCache.getChars((int)(d1 * d2));
    paramArrayOfByte = ByteBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2);
    CharBuffer localCharBuffer = CharBuffer.wrap(arrayOfChar);
    IOUtils.decode(paramCharsetDecoder, paramArrayOfByte, localCharBuffer);
    return parseObject(arrayOfChar, localCharBuffer.position(), paramType, paramVarArgs);
  }
  
  public static Object parseObject(byte[] paramArrayOfByte, Type paramType, Feature... paramVarArgs)
  {
    return parseObject(paramArrayOfByte, 0, paramArrayOfByte.length, ThreadLocalCache.getUTF8Decoder(), paramType, paramVarArgs);
  }
  
  public static Object parseObject(char[] paramArrayOfChar, int paramInt, Type paramType, Feature... paramVarArgs)
  {
    if ((paramArrayOfChar != null) && (paramArrayOfChar.length != 0))
    {
      int j = DEFAULT_PARSER_FEATURE;
      int k = paramVarArgs.length;
      int i = 0;
      while (i < k)
      {
        j = Feature.config(j, paramVarArgs[i], true);
        i += 1;
      }
      paramArrayOfChar = new DefaultJSONParser(paramArrayOfChar, paramInt, ParserConfig.getGlobalInstance(), j);
      paramType = paramArrayOfChar.parseObject(paramType);
      paramArrayOfChar.handleResovleTask(paramType);
      paramArrayOfChar.close();
      return paramType;
    }
    return null;
  }
  
  private static void setFilter(JSONSerializer paramJSONSerializer, SerializeFilter paramSerializeFilter)
  {
    if (paramSerializeFilter == null) {
      return;
    }
    if ((paramSerializeFilter instanceof PropertyPreFilter)) {
      paramJSONSerializer.getPropertyPreFilters().add((PropertyPreFilter)paramSerializeFilter);
    }
    if ((paramSerializeFilter instanceof NameFilter)) {
      paramJSONSerializer.getNameFilters().add((NameFilter)paramSerializeFilter);
    }
    if ((paramSerializeFilter instanceof ValueFilter)) {
      paramJSONSerializer.getValueFilters().add((ValueFilter)paramSerializeFilter);
    }
    if ((paramSerializeFilter instanceof PropertyFilter)) {
      paramJSONSerializer.getPropertyFilters().add((PropertyFilter)paramSerializeFilter);
    }
    if ((paramSerializeFilter instanceof BeforeFilter)) {
      paramJSONSerializer.getBeforeFilters().add((BeforeFilter)paramSerializeFilter);
    }
    if ((paramSerializeFilter instanceof AfterFilter)) {
      paramJSONSerializer.getAfterFilters().add((AfterFilter)paramSerializeFilter);
    }
    if ((paramSerializeFilter instanceof LabelFilter)) {
      paramJSONSerializer.getLabelFilters().add((LabelFilter)paramSerializeFilter);
    }
  }
  
  private static void setFilter(JSONSerializer paramJSONSerializer, SerializeFilter... paramVarArgs)
  {
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      setFilter(paramJSONSerializer, paramVarArgs[i]);
      i += 1;
    }
  }
  
  public static Object toJSON(Object paramObject)
  {
    return toJSON(paramObject, ParserConfig.getGlobalInstance());
  }
  
  public static Object toJSON(Object paramObject, ParserConfig paramParserConfig)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof JSON)) {
      return paramObject;
    }
    if ((paramObject instanceof Map))
    {
      paramParserConfig = (Map)paramObject;
      paramObject = new JSONObject(paramParserConfig.size());
      paramParserConfig = paramParserConfig.entrySet().iterator();
      while (paramParserConfig.hasNext())
      {
        localObject1 = (Map.Entry)paramParserConfig.next();
        paramObject.put(TypeUtils.castToString(((Map.Entry)localObject1).getKey()), toJSON(((Map.Entry)localObject1).getValue()));
      }
      return paramObject;
    }
    if ((paramObject instanceof Collection))
    {
      paramParserConfig = (Collection)paramObject;
      paramObject = new JSONArray(paramParserConfig.size());
      paramParserConfig = paramParserConfig.iterator();
      while (paramParserConfig.hasNext()) {
        paramObject.add(toJSON(paramParserConfig.next()));
      }
      return paramObject;
    }
    Object localObject1 = paramObject.getClass();
    if (((Class)localObject1).isEnum()) {
      return ((Enum)paramObject).name();
    }
    if (((Class)localObject1).isArray())
    {
      int j = Array.getLength(paramObject);
      paramParserConfig = new JSONArray(j);
      int i = 0;
      while (i < j)
      {
        paramParserConfig.add(toJSON(Array.get(paramObject, i)));
        i += 1;
      }
      return paramParserConfig;
    }
    if (paramParserConfig.isPrimitive((Class)localObject1)) {
      return paramObject;
    }
    try
    {
      localObject1 = TypeUtils.computeGetters((Class)localObject1, null);
      paramParserConfig = new JSONObject(((List)localObject1).size());
      localObject1 = ((List)localObject1).iterator();
      for (;;)
      {
        boolean bool = ((Iterator)localObject1).hasNext();
        if (!bool) {
          break;
        }
        Object localObject2 = ((Iterator)localObject1).next();
        localObject2 = (FieldInfo)localObject2;
        Object localObject3 = toJSON(((FieldInfo)localObject2).getValue(paramObject));
        paramParserConfig.put(((FieldInfo)localObject2).getName(), localObject3);
      }
      return paramParserConfig;
    }
    catch (InvocationTargetException paramObject)
    {
      throw new JSONException("toJSON error", paramObject);
    }
    catch (IllegalAccessException paramObject)
    {
      throw new JSONException("toJSON error", paramObject);
    }
  }
  
  public static byte[] toJSONBytes(Object paramObject, SerializeConfig paramSerializeConfig, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      paramSerializeConfig = new JSONSerializer(localSerializeWriter, paramSerializeConfig);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        paramSerializeConfig.config(paramVarArgs[i], true);
        i += 1;
      }
      paramSerializeConfig.write(paramObject);
      paramObject = localSerializeWriter.toBytes("UTF-8");
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static byte[] toJSONBytes(Object paramObject, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      JSONSerializer localJSONSerializer = new JSONSerializer(localSerializeWriter);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localJSONSerializer.config(paramVarArgs[i], true);
        i += 1;
      }
      localJSONSerializer.write(paramObject);
      paramObject = localSerializeWriter.toBytes("UTF-8");
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONString(Object paramObject)
  {
    return toJSONString(paramObject, new SerializerFeature[0]);
  }
  
  public static String toJSONString(Object paramObject, SerializeConfig paramSerializeConfig, SerializeFilter paramSerializeFilter, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      paramSerializeConfig = new JSONSerializer(localSerializeWriter, paramSerializeConfig);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        paramSerializeConfig.config(paramVarArgs[i], true);
        i += 1;
      }
      setFilter(paramSerializeConfig, paramSerializeFilter);
      paramSerializeConfig.write(paramObject);
      paramObject = localSerializeWriter.toString();
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONString(Object paramObject, SerializeConfig paramSerializeConfig, SerializeFilter[] paramArrayOfSerializeFilter, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      paramSerializeConfig = new JSONSerializer(localSerializeWriter, paramSerializeConfig);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        paramSerializeConfig.config(paramVarArgs[i], true);
        i += 1;
      }
      setFilter(paramSerializeConfig, paramArrayOfSerializeFilter);
      paramSerializeConfig.write(paramObject);
      paramObject = localSerializeWriter.toString();
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONString(Object paramObject, SerializeConfig paramSerializeConfig, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, paramSerializeConfig, null, paramVarArgs);
  }
  
  public static String toJSONString(Object paramObject, SerializeFilter paramSerializeFilter, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      JSONSerializer localJSONSerializer = new JSONSerializer(localSerializeWriter);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localJSONSerializer.config(paramVarArgs[i], true);
        i += 1;
      }
      localJSONSerializer.config(SerializerFeature.WriteDateUseDateFormat, true);
      setFilter(localJSONSerializer, paramSerializeFilter);
      localJSONSerializer.write(paramObject);
      paramObject = localSerializeWriter.toString();
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONString(Object paramObject, boolean paramBoolean)
  {
    if (!paramBoolean) {
      return toJSONString(paramObject);
    }
    return toJSONString(paramObject, new SerializerFeature[] { SerializerFeature.PrettyFormat });
  }
  
  public static String toJSONString(Object paramObject, SerializeFilter[] paramArrayOfSerializeFilter, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      JSONSerializer localJSONSerializer = new JSONSerializer(localSerializeWriter);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localJSONSerializer.config(paramVarArgs[i], true);
        i += 1;
      }
      localJSONSerializer.config(SerializerFeature.WriteDateUseDateFormat, true);
      setFilter(localJSONSerializer, paramArrayOfSerializeFilter);
      localJSONSerializer.write(paramObject);
      paramObject = localSerializeWriter.toString();
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONString(Object paramObject, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      JSONSerializer localJSONSerializer = new JSONSerializer(localSerializeWriter);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localJSONSerializer.config(paramVarArgs[i], true);
        i += 1;
      }
      localJSONSerializer.write(paramObject);
      paramObject = localSerializeWriter.toString();
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONStringWithDateFormat(Object paramObject, String paramString, SerializerFeature... paramVarArgs)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      JSONSerializer localJSONSerializer = new JSONSerializer(localSerializeWriter);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localJSONSerializer.config(paramVarArgs[i], true);
        i += 1;
      }
      localJSONSerializer.config(SerializerFeature.WriteDateUseDateFormat, true);
      if (paramString != null) {
        localJSONSerializer.setDateFormat(paramString);
      }
      localJSONSerializer.write(paramObject);
      paramObject = localSerializeWriter.toString();
      localSerializeWriter.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localSerializeWriter.close();
      throw paramObject;
    }
  }
  
  public static String toJSONStringZ(Object paramObject, SerializeConfig paramSerializeConfig, SerializerFeature... paramVarArgs)
  {
    paramVarArgs = new SerializeWriter(paramVarArgs);
    try
    {
      new JSONSerializer(paramVarArgs, paramSerializeConfig).write(paramObject);
      paramObject = paramVarArgs.toString();
      paramVarArgs.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      paramVarArgs.close();
      throw paramObject;
    }
  }
  
  public static Object toJavaObject(JSON paramJSON, Class paramClass)
  {
    return TypeUtils.cast(paramJSON, paramClass, ParserConfig.getGlobalInstance());
  }
  
  public static void writeJSONStringTo(Object paramObject, Writer paramWriter, SerializerFeature... paramVarArgs)
  {
    paramWriter = new SerializeWriter(paramWriter);
    try
    {
      JSONSerializer localJSONSerializer = new JSONSerializer(paramWriter);
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localJSONSerializer.config(paramVarArgs[i], true);
        i += 1;
      }
      localJSONSerializer.write(paramObject);
      paramWriter.close();
      return;
    }
    catch (Throwable paramObject)
    {
      paramWriter.close();
      throw paramObject;
    }
  }
  
  public String toJSONString()
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      new JSONSerializer(localSerializeWriter).write(this);
      String str = localSerializeWriter.toString();
      localSerializeWriter.close();
      return str;
    }
    catch (Throwable localThrowable)
    {
      localSerializeWriter.close();
      throw localThrowable;
    }
  }
  
  public String toString()
  {
    return toJSONString();
  }
  
  public void writeJSONString(Appendable paramAppendable)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      new JSONSerializer(localSerializeWriter).write(this);
      paramAppendable.append(localSerializeWriter.toString());
      localSerializeWriter.close();
      return;
    }
    catch (Throwable paramAppendable) {}catch (IOException paramAppendable)
    {
      throw new JSONException(paramAppendable.getMessage(), paramAppendable);
    }
    localSerializeWriter.close();
    throw paramAppendable;
  }
}
