package com.alibaba.fastjson.support.spring;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.view.AbstractView;

public class FastJsonJsonView
  extends AbstractView
{
  public static final String DEFAULT_CONTENT_TYPE = "application/json";
  public static final Charset UTF8 = Charset.forName("UTF-8");
  private Charset charset = UTF8;
  private boolean disableCaching = true;
  private boolean extractValueFromSingleKeyModel = false;
  private Set<String> renderedAttributes;
  private SerializerFeature[] serializerFeatures = new SerializerFeature[0];
  private boolean updateContentLength = false;
  
  public FastJsonJsonView()
  {
    setContentType("application/json");
    setExposePathVariables(false);
  }
  
  protected Object filterModel(Map paramMap)
  {
    HashMap localHashMap = new HashMap(paramMap.size());
    Set localSet;
    if (!CollectionUtils.isEmpty(renderedAttributes)) {
      localSet = renderedAttributes;
    } else {
      localSet = paramMap.keySet();
    }
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      if ((!(localEntry.getValue() instanceof BindingResult)) && (localSet.contains(localEntry.getKey()))) {
        localHashMap.put(localEntry.getKey(), localEntry.getValue());
      }
    }
    if ((extractValueFromSingleKeyModel) && (localHashMap.size() == 1))
    {
      paramMap = localHashMap.entrySet().iterator();
      if (paramMap.hasNext()) {
        return ((Map.Entry)paramMap.next()).getValue();
      }
    }
    return localHashMap;
  }
  
  public Charset getCharset()
  {
    return charset;
  }
  
  public SerializerFeature[] getFeatures()
  {
    return serializerFeatures;
  }
  
  public boolean isExtractValueFromSingleKeyModel()
  {
    return extractValueFromSingleKeyModel;
  }
  
  protected void prepareResponse(HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse)
  {
    setResponseContentType(paramHttpServletRequest, paramHttpServletResponse);
    paramHttpServletResponse.setCharacterEncoding(UTF8.name());
    if (disableCaching)
    {
      paramHttpServletResponse.addHeader("Pragma", "no-cache");
      paramHttpServletResponse.addHeader("Cache-Control", "no-cache, no-store, max-age=0");
      paramHttpServletResponse.addDateHeader("Expires", 1L);
    }
  }
  
  protected void renderMergedOutputModel(Map paramMap, HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse)
    throws Exception
  {
    paramHttpServletRequest = JSON.toJSONString(filterModel(paramMap), serializerFeatures).getBytes(charset);
    if (updateContentLength) {
      paramMap = createTemporaryOutputStream();
    } else {
      paramMap = paramHttpServletResponse.getOutputStream();
    }
    ((OutputStream)paramMap).write(paramHttpServletRequest);
    if (updateContentLength) {
      writeToResponse(paramHttpServletResponse, (ByteArrayOutputStream)paramMap);
    }
  }
  
  public void setCharset(Charset paramCharset)
  {
    charset = paramCharset;
  }
  
  public void setDisableCaching(boolean paramBoolean)
  {
    disableCaching = paramBoolean;
  }
  
  public void setExtractValueFromSingleKeyModel(boolean paramBoolean)
  {
    extractValueFromSingleKeyModel = paramBoolean;
  }
  
  public void setFeatures(SerializerFeature... paramVarArgs)
  {
    serializerFeatures = paramVarArgs;
  }
  
  public void setRenderedAttributes(Set paramSet)
  {
    renderedAttributes = paramSet;
  }
  
  public void setSerializerFeature(SerializerFeature... paramVarArgs)
  {
    setFeatures(paramVarArgs);
  }
  
  public void setUpdateContentLength(boolean paramBoolean)
  {
    updateContentLength = paramBoolean;
  }
}
