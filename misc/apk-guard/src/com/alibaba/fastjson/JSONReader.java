package com.alibaba.fastjson;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.Closeable;
import java.io.Reader;
import java.lang.reflect.Type;
import java.util.Map;

public class JSONReader
  implements Closeable
{
  private JSONStreamContext context;
  private final DefaultJSONParser parser;
  
  public JSONReader(DefaultJSONParser paramDefaultJSONParser)
  {
    parser = paramDefaultJSONParser;
  }
  
  public JSONReader(JSONLexer paramJSONLexer)
  {
    this(new DefaultJSONParser(paramJSONLexer));
  }
  
  public JSONReader(Reader paramReader)
  {
    this(new JSONReaderScanner(paramReader));
  }
  
  private void endStructure()
  {
    context = context.getParent();
    JSONStreamContext localJSONStreamContext = context;
    if (localJSONStreamContext == null) {
      return;
    }
    int i;
    switch (localJSONStreamContext.getState())
    {
    default: 
      i = -1;
      break;
    case 1004: 
      i = 1005;
      break;
    case 1002: 
      i = 1003;
      break;
    case 1001: 
    case 1003: 
      i = 1002;
    }
    if (i != -1) {
      context.setState(i);
    }
  }
  
  private void readAfter()
  {
    int j = context.getState();
    int i = 1002;
    switch (j)
    {
    default: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("illegal state : ");
      localStringBuilder.append(j);
      throw new JSONException(localStringBuilder.toString());
    case 1005: 
      i = -1;
      break;
    case 1004: 
      i = 1005;
      break;
    case 1002: 
      i = 1003;
    }
    if (i != -1) {
      context.setState(i);
    }
  }
  
  private void readBefore()
  {
    int i = context.getState();
    switch (i)
    {
    default: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("illegal state : ");
      localStringBuilder.append(i);
      throw new JSONException(localStringBuilder.toString());
    case 1005: 
      parser.accept(16);
      return;
    case 1003: 
      parser.accept(16, 18);
      return;
    case 1002: 
      parser.accept(17);
    }
  }
  
  private void startStructure()
  {
    switch (context.getState())
    {
    default: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("illegal state : ");
      localStringBuilder.append(context.getState());
      throw new JSONException(localStringBuilder.toString());
    case 1003: 
    case 1005: 
      parser.accept(16);
      return;
    case 1002: 
      parser.accept(17);
    }
  }
  
  public void close()
  {
    IOUtils.close(parser);
  }
  
  public void config(Feature paramFeature, boolean paramBoolean)
  {
    parser.config(paramFeature, paramBoolean);
  }
  
  public void endArray()
  {
    parser.accept(15);
    endStructure();
  }
  
  public void endObject()
  {
    parser.accept(13);
    endStructure();
  }
  
  public boolean hasNext()
  {
    if (context != null)
    {
      int i = parser.getLexer().token();
      int j = context.getState();
      switch (j)
      {
      default: 
        break;
      case 1002: 
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("illegal state : ");
        localStringBuilder.append(j);
        throw new JSONException(localStringBuilder.toString());
      case 1004: 
      case 1005: 
        return i != 15;
      }
      return i != 13;
    }
    throw new JSONException("context is null");
  }
  
  public Integer readInteger()
  {
    Object localObject;
    if (context == null)
    {
      localObject = parser.parse();
    }
    else
    {
      readBefore();
      localObject = parser.parse();
      readAfter();
    }
    return TypeUtils.castToInt(localObject);
  }
  
  public Long readLong()
  {
    Object localObject;
    if (context == null)
    {
      localObject = parser.parse();
    }
    else
    {
      readBefore();
      localObject = parser.parse();
      readAfter();
    }
    return TypeUtils.castToLong(localObject);
  }
  
  public Object readObject()
  {
    if (context == null) {
      return parser.parse();
    }
    readBefore();
    int i = context.getState();
    Object localObject;
    if ((i != 1001) && (i != 1003)) {
      localObject = parser.parse();
    } else {
      localObject = parser.parseKey();
    }
    readAfter();
    return localObject;
  }
  
  public Object readObject(TypeReference paramTypeReference)
  {
    return readObject(paramTypeReference.getType());
  }
  
  public Object readObject(Class paramClass)
  {
    if (context == null) {
      return parser.parseObject(paramClass);
    }
    readBefore();
    paramClass = parser.parseObject(paramClass);
    readAfter();
    return paramClass;
  }
  
  public Object readObject(Type paramType)
  {
    if (context == null) {
      return parser.parseObject(paramType);
    }
    readBefore();
    paramType = parser.parseObject(paramType);
    readAfter();
    return paramType;
  }
  
  public Object readObject(Map paramMap)
  {
    if (context == null) {
      return parser.parseObject(paramMap);
    }
    readBefore();
    paramMap = parser.parseObject(paramMap);
    readAfter();
    return paramMap;
  }
  
  public void readObject(Object paramObject)
  {
    if (context == null)
    {
      parser.parseObject(paramObject);
      return;
    }
    readBefore();
    parser.parseObject(paramObject);
    readAfter();
  }
  
  public String readString()
  {
    Object localObject;
    if (context == null)
    {
      localObject = parser.parse();
    }
    else
    {
      readBefore();
      localObject = parser.parse();
      readAfter();
    }
    return TypeUtils.castToString(localObject);
  }
  
  public void startArray()
  {
    if (context == null)
    {
      context = new JSONStreamContext(null, 1004);
    }
    else
    {
      startStructure();
      context = new JSONStreamContext(context, 1004);
    }
    parser.accept(14);
  }
  
  public void startObject()
  {
    if (context == null)
    {
      context = new JSONStreamContext(null, 1001);
    }
    else
    {
      startStructure();
      context = new JSONStreamContext(context, 1001);
    }
    parser.accept(12, 18);
  }
}
