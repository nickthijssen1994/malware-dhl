package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONScanner;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;

public class DateDeserializer
  extends AbstractDateDeserializer
  implements ObjectDeserializer
{
  public static final DateDeserializer instance = new DateDeserializer();
  
  public DateDeserializer() {}
  
  protected Object cast(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject1, Object paramObject2)
  {
    if (paramObject2 == null) {
      return null;
    }
    if ((paramObject2 instanceof Date)) {
      return paramObject2;
    }
    if ((paramObject2 instanceof Number)) {
      return new Date(((Number)paramObject2).longValue());
    }
    if ((paramObject2 instanceof String))
    {
      paramObject1 = (String)paramObject2;
      if (paramObject1.length() == 0) {
        return null;
      }
      paramObject2 = new JSONScanner(paramObject1);
      try
      {
        boolean bool = paramObject2.scanISO8601DateIfMatch(false);
        if (bool)
        {
          paramDefaultJSONParser = paramObject2.getCalendar();
          if (paramType == Calendar.class)
          {
            paramObject2.close();
            return paramDefaultJSONParser;
          }
          paramDefaultJSONParser = paramDefaultJSONParser.getTime();
          paramObject2.close();
          return paramDefaultJSONParser;
        }
        paramObject2.close();
        paramDefaultJSONParser = paramDefaultJSONParser.getDateFormat();
      }
      catch (Throwable paramDefaultJSONParser)
      {
        label137:
        paramObject2.close();
        throw paramDefaultJSONParser;
      }
    }
    try
    {
      paramDefaultJSONParser = paramDefaultJSONParser.parse(paramObject1);
      return paramDefaultJSONParser;
    }
    catch (ParseException paramDefaultJSONParser)
    {
      break label137;
    }
    return new Date(Long.parseLong(paramObject1));
    throw new JSONException("parse error");
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
