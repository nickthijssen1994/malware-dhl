package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONToken;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class MapDeserializer
  implements ObjectDeserializer
{
  public static final MapDeserializer instance = new MapDeserializer();
  
  public MapDeserializer() {}
  
  public static Object parseMap(DefaultJSONParser paramDefaultJSONParser, Map paramMap, Type paramType1, Type paramType2, Object paramObject)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    if ((localJSONLexer.token() != 12) && (localJSONLexer.token() != 16))
    {
      paramDefaultJSONParser = new StringBuilder();
      paramDefaultJSONParser.append("syntax error, expect {, actual ");
      paramDefaultJSONParser.append(localJSONLexer.tokenName());
      throw new JSONException(paramDefaultJSONParser.toString());
    }
    ObjectDeserializer localObjectDeserializer1 = paramDefaultJSONParser.getConfig().getDeserializer(paramType1);
    ObjectDeserializer localObjectDeserializer2 = paramDefaultJSONParser.getConfig().getDeserializer(paramType2);
    localJSONLexer.nextToken(localObjectDeserializer1.getFastMatchToken());
    paramObject = paramDefaultJSONParser.getContext();
    try
    {
      for (;;)
      {
        int i = localJSONLexer.token();
        if (i == 13)
        {
          localJSONLexer.nextToken(16);
          paramDefaultJSONParser.setContext(paramObject);
          return paramMap;
        }
        i = localJSONLexer.token();
        Object localObject = null;
        boolean bool;
        if (i == 4)
        {
          bool = localJSONLexer.isRef();
          if (bool)
          {
            bool = paramDefaultJSONParser.isEnabled(Feature.DisableSpecialKeyDetect);
            if (!bool)
            {
              localJSONLexer.nextTokenWithColon(4);
              i = localJSONLexer.token();
              if (i == 4)
              {
                paramMap = localJSONLexer.stringVal();
                bool = "..".equals(paramMap);
                if (bool)
                {
                  paramMap = paramObject.getParentContext().getObject();
                }
                else
                {
                  bool = "$".equals(paramMap);
                  if (bool)
                  {
                    for (paramMap = paramObject;; paramMap = paramMap.getParentContext())
                    {
                      paramType1 = paramMap.getParentContext();
                      if (paramType1 == null) {
                        break;
                      }
                    }
                    paramMap = paramMap.getObject();
                  }
                  else
                  {
                    paramDefaultJSONParser.addResolveTask(new DefaultJSONParser.ResolveTask(paramObject, paramMap));
                    paramDefaultJSONParser.setResolveStatus(1);
                    paramMap = localObject;
                  }
                }
                localJSONLexer.nextToken(13);
                i = localJSONLexer.token();
                if (i == 13)
                {
                  localJSONLexer.nextToken(16);
                  paramDefaultJSONParser.setContext(paramObject);
                  return paramMap;
                }
                throw new JSONException("illegal ref");
              }
              paramMap = new StringBuilder();
              paramMap.append("illegal ref, ");
              paramMap.append(JSONToken.name(localJSONLexer.token()));
              throw new JSONException(paramMap.toString());
            }
          }
        }
        i = paramMap.size();
        if (i == 0)
        {
          i = localJSONLexer.token();
          if (i == 4)
          {
            bool = JSON.DEFAULT_TYPE_KEY.equals(localJSONLexer.stringVal());
            if (bool)
            {
              bool = paramDefaultJSONParser.isEnabled(Feature.DisableSpecialKeyDetect);
              if (!bool)
              {
                localJSONLexer.nextTokenWithColon(4);
                localJSONLexer.nextToken(16);
                i = localJSONLexer.token();
                if (i == 13)
                {
                  localJSONLexer.nextToken();
                  paramDefaultJSONParser.setContext(paramObject);
                  return paramMap;
                }
                localJSONLexer.nextToken(localObjectDeserializer1.getFastMatchToken());
              }
            }
          }
        }
        localObject = localObjectDeserializer1.deserialze(paramDefaultJSONParser, paramType1, null);
        i = localJSONLexer.token();
        if (i != 17) {
          break;
        }
        localJSONLexer.nextToken(localObjectDeserializer2.getFastMatchToken());
        paramMap.put(localObject, localObjectDeserializer2.deserialze(paramDefaultJSONParser, paramType2, localObject));
        i = localJSONLexer.token();
        if (i == 16) {
          localJSONLexer.nextToken(localObjectDeserializer1.getFastMatchToken());
        }
      }
      paramMap = new StringBuilder();
      paramMap.append("syntax error, expect :, actual ");
      paramMap.append(localJSONLexer.token());
      throw new JSONException(paramMap.toString());
    }
    catch (Throwable paramMap)
    {
      paramDefaultJSONParser.setContext(paramObject);
      throw paramMap;
    }
  }
  
  public static Map parseMap(DefaultJSONParser paramDefaultJSONParser, Map paramMap, Type paramType, Object paramObject)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    if (localJSONLexer.token() == 12)
    {
      ParseContext localParseContext = paramDefaultJSONParser.getContext();
      try
      {
        int i;
        char c;
        label579:
        do
        {
          boolean bool;
          Object localObject1;
          Object localObject2;
          do
          {
            localJSONLexer.skipWhitespace();
            i = localJSONLexer.getCurrent();
            bool = paramDefaultJSONParser.isEnabled(Feature.AllowArbitraryCommas);
            int j = i;
            if (bool) {
              for (;;)
              {
                j = i;
                if (i != 44) {
                  break;
                }
                localJSONLexer.next();
                localJSONLexer.skipWhitespace();
                i = localJSONLexer.getCurrent();
              }
            }
            if (j == 34)
            {
              localObject1 = localJSONLexer.scanSymbol(paramDefaultJSONParser.getSymbolTable(), '"');
              localJSONLexer.skipWhitespace();
              i = localJSONLexer.getCurrent();
              if (i != 58)
              {
                paramMap = new StringBuilder();
                paramMap.append("expect ':' at ");
                paramMap.append(localJSONLexer.getPos());
                throw new JSONException(paramMap.toString());
              }
            }
            else
            {
              if (j == 125)
              {
                localJSONLexer.next();
                localJSONLexer.resetStringPosition();
                localJSONLexer.nextToken(16);
                paramDefaultJSONParser.setContext(localParseContext);
                return paramMap;
              }
              if (j == 39)
              {
                bool = paramDefaultJSONParser.isEnabled(Feature.AllowSingleQuotes);
                if (bool)
                {
                  localObject1 = localJSONLexer.scanSymbol(paramDefaultJSONParser.getSymbolTable(), '\'');
                  localJSONLexer.skipWhitespace();
                  i = localJSONLexer.getCurrent();
                  if (i != 58)
                  {
                    paramMap = new StringBuilder();
                    paramMap.append("expect ':' at ");
                    paramMap.append(localJSONLexer.getPos());
                    throw new JSONException(paramMap.toString());
                  }
                }
                else
                {
                  throw new JSONException("syntax error");
                }
              }
              else
              {
                bool = paramDefaultJSONParser.isEnabled(Feature.AllowUnQuotedFieldNames);
                if (!bool) {
                  break label760;
                }
                localObject1 = localJSONLexer.scanSymbolUnQuoted(paramDefaultJSONParser.getSymbolTable());
                localJSONLexer.skipWhitespace();
                c = localJSONLexer.getCurrent();
                if (c != ':') {
                  break label707;
                }
              }
            }
            localJSONLexer.next();
            localJSONLexer.skipWhitespace();
            localJSONLexer.getCurrent();
            localJSONLexer.resetStringPosition();
            localObject2 = JSON.DEFAULT_TYPE_KEY;
            if (localObject1 != localObject2) {
              break label579;
            }
            bool = paramDefaultJSONParser.isEnabled(Feature.DisableSpecialKeyDetect);
            if (bool) {
              break label579;
            }
            localObject1 = TypeUtils.loadClass(localJSONLexer.scanSymbol(paramDefaultJSONParser.getSymbolTable(), '"'));
            bool = Map.class.isAssignableFrom((Class)localObject1);
            if (!bool) {
              break;
            }
            localJSONLexer.nextToken(16);
            i = localJSONLexer.token();
          } while (i != 13);
          localJSONLexer.nextToken(16);
          paramDefaultJSONParser.setContext(localParseContext);
          return paramMap;
          paramMap = paramDefaultJSONParser.getConfig().getDeserializer((Type)localObject1);
          localJSONLexer.nextToken(16);
          paramDefaultJSONParser.setResolveStatus(2);
          if (localParseContext != null)
          {
            bool = paramObject instanceof Integer;
            if (!bool) {
              paramDefaultJSONParser.popContext();
            }
          }
          paramMap = (Map)paramMap.deserialze(paramDefaultJSONParser, (Type)localObject1, paramObject);
          paramDefaultJSONParser.setContext(localParseContext);
          return paramMap;
          localJSONLexer.nextToken();
          i = localJSONLexer.token();
          if (i == 8)
          {
            localObject2 = null;
            localJSONLexer.nextToken();
          }
          else
          {
            localObject2 = paramDefaultJSONParser.parseObject(paramType);
          }
          paramMap.put(localObject1, localObject2);
          paramDefaultJSONParser.checkMapResolve(paramMap, (String)localObject1);
          paramDefaultJSONParser.setContext(localParseContext, localObject2, localObject1);
          i = localJSONLexer.token();
          if ((i == 20) || (i == 15)) {
            break;
          }
        } while (i != 13);
        localJSONLexer.nextToken();
        paramDefaultJSONParser.setContext(localParseContext);
        return paramMap;
        paramDefaultJSONParser.setContext(localParseContext);
        return paramMap;
        label707:
        paramMap = new StringBuilder();
        paramMap.append("expect ':' at ");
        paramMap.append(localJSONLexer.getPos());
        paramMap.append(", actual ");
        paramMap.append(c);
        throw new JSONException(paramMap.toString());
        label760:
        throw new JSONException("syntax error");
      }
      catch (Throwable paramMap)
      {
        paramDefaultJSONParser.setContext(localParseContext);
        throw paramMap;
      }
    }
    paramDefaultJSONParser = new StringBuilder();
    paramDefaultJSONParser.append("syntax error, expect {, actual ");
    paramDefaultJSONParser.append(localJSONLexer.token());
    throw new JSONException(paramDefaultJSONParser.toString());
  }
  
  protected Map createMap(Type paramType)
  {
    if (paramType == Properties.class) {
      return new Properties();
    }
    if (paramType == Hashtable.class) {
      return new Hashtable();
    }
    if (paramType == IdentityHashMap.class) {
      return new IdentityHashMap();
    }
    if ((paramType != SortedMap.class) && (paramType != TreeMap.class))
    {
      if ((paramType != ConcurrentMap.class) && (paramType != ConcurrentHashMap.class))
      {
        if ((paramType != Map.class) && (paramType != HashMap.class))
        {
          if (paramType == LinkedHashMap.class) {
            return new LinkedHashMap();
          }
          if ((paramType instanceof ParameterizedType)) {
            return createMap(((ParameterizedType)paramType).getRawType());
          }
          Object localObject = (Class)paramType;
          if (!((Class)localObject).isInterface()) {
            try
            {
              localObject = ((Class)localObject).newInstance();
              return (Map)localObject;
            }
            catch (Exception localException)
            {
              StringBuilder localStringBuilder2 = new StringBuilder();
              localStringBuilder2.append("unsupport type ");
              localStringBuilder2.append(paramType);
              throw new JSONException(localStringBuilder2.toString(), localException);
            }
          }
          StringBuilder localStringBuilder1 = new StringBuilder();
          localStringBuilder1.append("unsupport type ");
          localStringBuilder1.append(paramType);
          throw new JSONException(localStringBuilder1.toString());
        }
        return new HashMap();
      }
      return new ConcurrentHashMap();
    }
    return new TreeMap();
  }
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    Object localObject = paramDefaultJSONParser.getLexer();
    if (((JSONLexer)localObject).token() == 8)
    {
      ((JSONLexer)localObject).nextToken(16);
      return null;
    }
    Map localMap = createMap(paramType);
    localObject = paramDefaultJSONParser.getContext();
    try
    {
      paramDefaultJSONParser.setContext((ParseContext)localObject, localMap, paramObject);
      paramType = deserialze(paramDefaultJSONParser, paramType, paramObject, localMap);
      paramDefaultJSONParser.setContext((ParseContext)localObject);
      return paramType;
    }
    catch (Throwable paramType)
    {
      paramDefaultJSONParser.setContext((ParseContext)localObject);
      throw paramType;
    }
  }
  
  protected Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject, Map paramMap)
  {
    if ((paramType instanceof ParameterizedType))
    {
      Object localObject = (ParameterizedType)paramType;
      paramType = localObject.getActualTypeArguments()[0];
      localObject = localObject.getActualTypeArguments()[1];
      if (String.class == paramType) {
        return parseMap(paramDefaultJSONParser, paramMap, (Type)localObject, paramObject);
      }
      return parseMap(paramDefaultJSONParser, paramMap, paramType, (Type)localObject, paramObject);
    }
    return paramDefaultJSONParser.parseObject(paramMap, paramObject);
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
}
