package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public abstract class FieldDeserializer
{
  protected final Class<?> clazz;
  protected final FieldInfo fieldInfo;
  
  public FieldDeserializer(Class paramClass, FieldInfo paramFieldInfo)
  {
    clazz = paramClass;
    fieldInfo = paramFieldInfo;
  }
  
  public int getFastMatchToken()
  {
    return 0;
  }
  
  public Field getField()
  {
    return fieldInfo.getField();
  }
  
  public Class getFieldClass()
  {
    return fieldInfo.getFieldClass();
  }
  
  public FieldInfo getFieldInfo()
  {
    return fieldInfo;
  }
  
  public Type getFieldType()
  {
    return fieldInfo.getFieldType();
  }
  
  public Method getMethod()
  {
    return fieldInfo.getMethod();
  }
  
  public abstract void parseField(DefaultJSONParser paramDefaultJSONParser, Object paramObject, Type paramType, Map paramMap);
  
  public void setValue(Object paramObject, int paramInt)
  {
    setValue(paramObject, Integer.valueOf(paramInt));
  }
  
  public void setValue(Object paramObject, long paramLong)
  {
    setValue(paramObject, Long.valueOf(paramLong));
  }
  
  public void setValue(Object paramObject1, Object paramObject2)
  {
    Object localObject1 = fieldInfo.getMethod();
    if (localObject1 != null)
    {
      Object localObject2 = fieldInfo;
      try
      {
        boolean bool = ((FieldInfo)localObject2).isGetOnly();
        if (bool)
        {
          localObject2 = fieldInfo;
          localObject2 = ((FieldInfo)localObject2).getFieldClass();
          if (localObject2 == AtomicInteger.class)
          {
            paramObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
            paramObject1 = (AtomicInteger)paramObject1;
            if (paramObject1 == null) {
              return;
            }
            paramObject2 = (AtomicInteger)paramObject2;
            paramObject1.set(paramObject2.get());
            return;
          }
          localObject2 = fieldInfo;
          localObject2 = ((FieldInfo)localObject2).getFieldClass();
          if (localObject2 == AtomicLong.class)
          {
            paramObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
            paramObject1 = (AtomicLong)paramObject1;
            if (paramObject1 == null) {
              return;
            }
            paramObject2 = (AtomicLong)paramObject2;
            paramObject1.set(paramObject2.get());
            return;
          }
          localObject2 = fieldInfo;
          localObject2 = ((FieldInfo)localObject2).getFieldClass();
          if (localObject2 == AtomicBoolean.class)
          {
            paramObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
            paramObject1 = (AtomicBoolean)paramObject1;
            if (paramObject1 == null) {
              return;
            }
            paramObject2 = (AtomicBoolean)paramObject2;
            paramObject1.set(paramObject2.get());
            return;
          }
          bool = Map.class.isAssignableFrom(((Method)localObject1).getReturnType());
          if (bool)
          {
            paramObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
            paramObject1 = (Map)paramObject1;
            if (paramObject1 == null) {
              return;
            }
            paramObject2 = (Map)paramObject2;
            paramObject1.putAll(paramObject2);
            return;
          }
          paramObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
          paramObject1 = (Collection)paramObject1;
          if (paramObject1 == null) {
            return;
          }
          paramObject2 = (Collection)paramObject2;
          paramObject1.addAll(paramObject2);
          return;
        }
        if (paramObject2 == null)
        {
          localObject2 = fieldInfo;
          bool = ((FieldInfo)localObject2).getFieldClass().isPrimitive();
          if (bool) {
            return;
          }
        }
        ((Method)localObject1).invoke(paramObject1, new Object[] { paramObject2 });
        return;
      }
      catch (Exception paramObject1)
      {
        paramObject2 = new StringBuilder();
        paramObject2.append("set property error, ");
        paramObject2.append(fieldInfo.getName());
        throw new JSONException(paramObject2.toString(), paramObject1);
      }
    }
    localObject1 = fieldInfo.getField();
    if (localObject1 != null) {
      try
      {
        ((Field)localObject1).set(paramObject1, paramObject2);
        return;
      }
      catch (Exception paramObject1)
      {
        paramObject2 = new StringBuilder();
        paramObject2.append("set property error, ");
        paramObject2.append(fieldInfo.getName());
        throw new JSONException(paramObject2.toString(), paramObject1);
      }
    }
  }
  
  public void setValue(Object paramObject, String paramString)
  {
    setValue(paramObject, paramString);
  }
  
  public void setValue(Object paramObject, boolean paramBoolean)
  {
    setValue(paramObject, Boolean.valueOf(paramBoolean));
  }
}
