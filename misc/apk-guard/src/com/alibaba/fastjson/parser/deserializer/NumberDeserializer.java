package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.Type;
import java.math.BigDecimal;

public class NumberDeserializer
  implements ObjectDeserializer
{
  public static final NumberDeserializer instance = new NumberDeserializer();
  
  public NumberDeserializer() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramObject = paramDefaultJSONParser.getLexer();
    if (paramObject.token() == 2)
    {
      if ((paramType != Double.TYPE) && (paramType != Double.class))
      {
        long l = paramObject.longValue();
        paramObject.nextToken(16);
        if ((paramType != Short.TYPE) && (paramType != Short.class))
        {
          if ((paramType != Byte.TYPE) && (paramType != Byte.class))
          {
            if ((l >= -2147483648L) && (l <= 2147483647L)) {
              return Integer.valueOf((int)l);
            }
            return Long.valueOf(l);
          }
          return Byte.valueOf((byte)(int)l);
        }
        return Short.valueOf((short)(int)l);
      }
      paramDefaultJSONParser = paramObject.numberString();
      paramObject.nextToken(16);
      return Double.valueOf(Double.parseDouble(paramDefaultJSONParser));
    }
    if (paramObject.token() == 3)
    {
      if ((paramType != Double.TYPE) && (paramType != Double.class))
      {
        paramDefaultJSONParser = paramObject.decimalValue();
        paramObject.nextToken(16);
        if ((paramType != Short.TYPE) && (paramType != Short.class))
        {
          if ((paramType != Byte.TYPE) && (paramType != Byte.class)) {
            return paramDefaultJSONParser;
          }
          return Byte.valueOf(paramDefaultJSONParser.byteValue());
        }
        return Short.valueOf(paramDefaultJSONParser.shortValue());
      }
      paramDefaultJSONParser = paramObject.numberString();
      paramObject.nextToken(16);
      return Double.valueOf(Double.parseDouble(paramDefaultJSONParser));
    }
    paramDefaultJSONParser = paramDefaultJSONParser.parse();
    if (paramDefaultJSONParser == null) {
      return null;
    }
    if ((paramType != Double.TYPE) && (paramType != Double.class))
    {
      if ((paramType != Short.TYPE) && (paramType != Short.class))
      {
        if ((paramType != Byte.TYPE) && (paramType != Byte.class)) {
          return TypeUtils.castToBigDecimal(paramDefaultJSONParser);
        }
        return TypeUtils.castToByte(paramDefaultJSONParser);
      }
      return TypeUtils.castToShort(paramDefaultJSONParser);
    }
    return TypeUtils.castToDouble(paramDefaultJSONParser);
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
