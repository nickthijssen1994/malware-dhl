package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONToken;
import java.lang.reflect.Type;

public class StackTraceElementDeserializer
  implements ObjectDeserializer
{
  public static final StackTraceElementDeserializer instance = new StackTraceElementDeserializer();
  
  public StackTraceElementDeserializer() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    if (localJSONLexer.token() == 8)
    {
      localJSONLexer.nextToken();
      return null;
    }
    if ((localJSONLexer.token() != 12) && (localJSONLexer.token() != 16))
    {
      paramDefaultJSONParser = new StringBuilder();
      paramDefaultJSONParser.append("syntax error: ");
      paramDefaultJSONParser.append(JSONToken.name(localJSONLexer.token()));
      throw new JSONException(paramDefaultJSONParser.toString());
    }
    Type localType = null;
    Object localObject3 = null;
    Object localObject2 = null;
    int j = 0;
    int i;
    Object localObject1;
    do
    {
      do
      {
        paramType = localJSONLexer.scanSymbol(paramDefaultJSONParser.getSymbolTable());
        if (paramType != null) {
          break;
        }
        if (localJSONLexer.token() == 13)
        {
          localJSONLexer.nextToken(16);
          i = j;
          paramType = localType;
          paramObject = localObject3;
          localObject1 = localObject2;
          break label797;
        }
      } while ((localJSONLexer.token() == 16) && (localJSONLexer.isEnabled(Feature.AllowArbitraryCommas)));
      localJSONLexer.nextTokenWithColon(4);
      if ("className".equals(paramType))
      {
        if (localJSONLexer.token() == 8)
        {
          paramType = null;
          i = j;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else if (localJSONLexer.token() == 4)
        {
          paramType = localJSONLexer.stringVal();
          i = j;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else if ("methodName".equals(paramType))
      {
        if (localJSONLexer.token() == 8)
        {
          paramObject = null;
          i = j;
          paramType = localType;
          localObject1 = localObject2;
        }
        else if (localJSONLexer.token() == 4)
        {
          paramObject = localJSONLexer.stringVal();
          i = j;
          paramType = localType;
          localObject1 = localObject2;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else if ("fileName".equals(paramType))
      {
        if (localJSONLexer.token() == 8)
        {
          localObject1 = null;
          i = j;
          paramType = localType;
          paramObject = localObject3;
        }
        else if (localJSONLexer.token() == 4)
        {
          localObject1 = localJSONLexer.stringVal();
          i = j;
          paramType = localType;
          paramObject = localObject3;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else if ("lineNumber".equals(paramType))
      {
        if (localJSONLexer.token() == 8)
        {
          i = 0;
          paramType = localType;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else if (localJSONLexer.token() == 2)
        {
          i = localJSONLexer.intValue();
          paramType = localType;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else if ("nativeMethod".equals(paramType))
      {
        if (localJSONLexer.token() == 8)
        {
          localJSONLexer.nextToken(16);
          i = j;
          paramType = localType;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else if (localJSONLexer.token() == 6)
        {
          localJSONLexer.nextToken(16);
          i = j;
          paramType = localType;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else if (localJSONLexer.token() == 7)
        {
          localJSONLexer.nextToken(16);
          i = j;
          paramType = localType;
          paramObject = localObject3;
          localObject1 = localObject2;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else
      {
        if (paramType != JSON.DEFAULT_TYPE_KEY) {
          break label821;
        }
        if (localJSONLexer.token() == 4)
        {
          paramType = localJSONLexer.stringVal();
          if (paramType.equals("java.lang.StackTraceElement"))
          {
            i = j;
            paramType = localType;
            paramObject = localObject3;
            localObject1 = localObject2;
          }
          else
          {
            paramDefaultJSONParser = new StringBuilder();
            paramDefaultJSONParser.append("syntax error : ");
            paramDefaultJSONParser.append(paramType);
            throw new JSONException(paramDefaultJSONParser.toString());
          }
        }
        else
        {
          if (localJSONLexer.token() != 8) {
            break label811;
          }
          localObject1 = localObject2;
          paramObject = localObject3;
          paramType = localType;
          i = j;
        }
      }
      j = i;
      localType = paramType;
      localObject3 = paramObject;
      localObject2 = localObject1;
    } while (localJSONLexer.token() != 13);
    localJSONLexer.nextToken(16);
    label797:
    return new StackTraceElement(paramType, paramObject, (String)localObject1, i);
    label811:
    throw new JSONException("syntax error");
    label821:
    paramDefaultJSONParser = new StringBuilder();
    paramDefaultJSONParser.append("syntax error : ");
    paramDefaultJSONParser.append(paramType);
    throw new JSONException(paramDefaultJSONParser.toString());
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
}
