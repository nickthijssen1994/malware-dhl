package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONScanner;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Calendar;

public class SqlDateDeserializer
  extends AbstractDateDeserializer
  implements ObjectDeserializer
{
  public static final SqlDateDeserializer instance = new SqlDateDeserializer();
  
  public SqlDateDeserializer() {}
  
  protected Object cast(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject1, Object paramObject2)
  {
    if (paramObject2 == null) {
      return null;
    }
    if ((paramObject2 instanceof java.util.Date)) {
      return new java.sql.Date(((java.util.Date)paramObject2).getTime());
    }
    if ((paramObject2 instanceof Number)) {
      return new java.sql.Date(((Number)paramObject2).longValue());
    }
    if ((paramObject2 instanceof String))
    {
      paramObject1 = (String)paramObject2;
      if (paramObject1.length() == 0) {
        return null;
      }
      paramType = new JSONScanner(paramObject1);
      try
      {
        boolean bool = paramType.scanISO8601DateIfMatch();
        if (bool) {
          l = paramType.getCalendar().getTimeInMillis();
        } else {
          paramDefaultJSONParser = paramDefaultJSONParser.getDateFormat();
        }
      }
      catch (Throwable paramDefaultJSONParser)
      {
        long l;
        label139:
        paramType.close();
        throw paramDefaultJSONParser;
      }
    }
    try
    {
      paramDefaultJSONParser = paramDefaultJSONParser.parse(paramObject1);
      paramDefaultJSONParser = new java.sql.Date(paramDefaultJSONParser.getTime());
      paramType.close();
      return paramDefaultJSONParser;
    }
    catch (ParseException paramDefaultJSONParser)
    {
      break label139;
    }
    l = Long.parseLong(paramObject1);
    paramType.close();
    return new java.sql.Date(l);
    paramDefaultJSONParser = new StringBuilder();
    paramDefaultJSONParser.append("parse error : ");
    paramDefaultJSONParser.append(paramObject2);
    throw new JSONException(paramDefaultJSONParser.toString());
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
