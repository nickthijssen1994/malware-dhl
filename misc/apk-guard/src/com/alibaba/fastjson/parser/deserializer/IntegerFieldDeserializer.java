package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.Type;
import java.util.Map;

public class IntegerFieldDeserializer
  extends FieldDeserializer
{
  public IntegerFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
  {
    super(paramClass, paramFieldInfo);
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
  
  public void parseField(DefaultJSONParser paramDefaultJSONParser, Object paramObject, Type paramType, Map paramMap)
  {
    paramType = paramDefaultJSONParser.getLexer();
    if (paramType.token() == 2)
    {
      int i = paramType.intValue();
      paramType.nextToken(16);
      if (paramObject == null)
      {
        paramMap.put(fieldInfo.getName(), Integer.valueOf(i));
        return;
      }
      setValue(paramObject, i);
      return;
    }
    if (paramType.token() == 8)
    {
      paramDefaultJSONParser = null;
      paramType.nextToken(16);
    }
    else
    {
      paramDefaultJSONParser = TypeUtils.castToInt(paramDefaultJSONParser.parse());
    }
    if ((paramDefaultJSONParser == null) && (getFieldClass() == Integer.TYPE)) {
      return;
    }
    if (paramObject == null)
    {
      paramMap.put(fieldInfo.getName(), paramDefaultJSONParser);
      return;
    }
    setValue(paramObject, paramDefaultJSONParser);
  }
}
