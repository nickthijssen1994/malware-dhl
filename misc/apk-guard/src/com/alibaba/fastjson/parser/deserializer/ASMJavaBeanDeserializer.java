package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.Type;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public abstract class ASMJavaBeanDeserializer
  implements ObjectDeserializer
{
  protected InnerJavaBeanDeserializer serializer;
  
  public ASMJavaBeanDeserializer(ParserConfig paramParserConfig, Class paramClass)
  {
    serializer = new InnerJavaBeanDeserializer(paramParserConfig, paramClass, null);
    serializer.getFieldDeserializerMap();
  }
  
  public FieldDeserializer createFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
  {
    return paramParserConfig.createFieldDeserializer(paramParserConfig, paramClass, paramFieldInfo);
  }
  
  public Object createInstance(DefaultJSONParser paramDefaultJSONParser)
  {
    InnerJavaBeanDeserializer localInnerJavaBeanDeserializer = serializer;
    return localInnerJavaBeanDeserializer.createInstance(paramDefaultJSONParser, localInnerJavaBeanDeserializer.getClazz());
  }
  
  public abstract Object createInstance(DefaultJSONParser paramDefaultJSONParser, Type paramType);
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    return serializer.deserialze(paramDefaultJSONParser, paramType, paramObject);
  }
  
  public int getFastMatchToken()
  {
    return serializer.getFastMatchToken();
  }
  
  public FieldDeserializer getFieldDeserializer(String paramString)
  {
    return (FieldDeserializer)serializer.getFieldDeserializerMap().get(paramString);
  }
  
  public Type getFieldType(String paramString)
  {
    return ((FieldDeserializer)serializer.getFieldDeserializerMap().get(paramString)).getFieldType();
  }
  
  public InnerJavaBeanDeserializer getInnterSerializer()
  {
    return serializer;
  }
  
  public boolean isSupportArrayToBean(JSONLexer paramJSONLexer)
  {
    return serializer.isSupportArrayToBean(paramJSONLexer);
  }
  
  public boolean parseField(DefaultJSONParser paramDefaultJSONParser, String paramString, Object paramObject, Type paramType, Map paramMap)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    Object localObject2 = serializer.getFieldDeserializerMap();
    FieldDeserializer localFieldDeserializer = (FieldDeserializer)((Map)localObject2).get(paramString);
    Object localObject1 = localFieldDeserializer;
    if (localFieldDeserializer == null)
    {
      localObject2 = ((Map)localObject2).entrySet().iterator();
      do
      {
        localObject1 = localFieldDeserializer;
        if (!((Iterator)localObject2).hasNext()) {
          break;
        }
        localObject1 = (Map.Entry)((Iterator)localObject2).next();
      } while (!((String)((Map.Entry)localObject1).getKey()).equalsIgnoreCase(paramString));
      localObject1 = (FieldDeserializer)((Map.Entry)localObject1).getValue();
    }
    if (localObject1 == null)
    {
      serializer.parseExtra(paramDefaultJSONParser, paramObject, paramString);
      return false;
    }
    localJSONLexer.nextTokenWithColon(((FieldDeserializer)localObject1).getFastMatchToken());
    ((FieldDeserializer)localObject1).parseField(paramDefaultJSONParser, paramObject, paramType, paramMap);
    return true;
  }
  
  public Object parseRest(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject1, Object paramObject2)
  {
    return serializer.deserialze(paramDefaultJSONParser, paramType, paramObject1, paramObject2);
  }
  
  public final class InnerJavaBeanDeserializer
    extends JavaBeanDeserializer
  {
    private InnerJavaBeanDeserializer(ParserConfig paramParserConfig, Class paramClass)
    {
      super(paramClass);
    }
    
    public FieldDeserializer createFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
    {
      return ASMJavaBeanDeserializer.this.createFieldDeserializer(paramParserConfig, paramClass, paramFieldInfo);
    }
    
    public boolean parseField(DefaultJSONParser paramDefaultJSONParser, String paramString, Object paramObject, Type paramType, Map paramMap)
    {
      return ASMJavaBeanDeserializer.this.parseField(paramDefaultJSONParser, paramString, paramObject, paramType, paramMap);
    }
  }
}
