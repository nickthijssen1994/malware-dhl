package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import java.io.IOException;
import java.lang.reflect.Type;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class Jdk8DateCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static final Jdk8DateCodec instance = new Jdk8DateCodec();
  
  public Jdk8DateCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramDefaultJSONParser = paramDefaultJSONParser.getLexer();
    if (paramDefaultJSONParser.token() == 4)
    {
      paramObject = paramDefaultJSONParser.stringVal();
      paramDefaultJSONParser.nextToken();
      if (paramType == LocalDateTime.class) {
        return LocalDateTime.parse(paramObject);
      }
      if (paramType == LocalDate.class) {
        return LocalDate.parse(paramObject);
      }
      if (paramType == LocalTime.class) {
        return LocalTime.parse(paramObject);
      }
      if (paramType == ZonedDateTime.class) {
        return ZonedDateTime.parse(paramObject);
      }
      if (paramType == OffsetDateTime.class) {
        return OffsetDateTime.parse(paramObject);
      }
      if (paramType == OffsetTime.class) {
        return OffsetTime.parse(paramObject);
      }
      if (paramType == ZoneId.class) {
        return ZoneId.of(paramObject);
      }
      if (paramType == Period.class) {
        return Period.parse(paramObject);
      }
      if (paramType == Duration.class) {
        return Duration.parse(paramObject);
      }
      if (paramType == Instant.class) {
        return Instant.parse(paramObject);
      }
      return null;
    }
    throw new UnsupportedOperationException();
  }
  
  public int getFastMatchToken()
  {
    return 4;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    paramJSONSerializer = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      paramJSONSerializer.writeNull();
      return;
    }
    paramJSONSerializer.writeString(paramObject1.toString());
  }
}
