package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.Collection;

public class ArrayDeserializer
  implements ObjectDeserializer
{
  public static final ArrayDeserializer instance = new ArrayDeserializer();
  
  public ArrayDeserializer() {}
  
  private Object toObjectArray(DefaultJSONParser paramDefaultJSONParser, Class paramClass, JSONArray paramJSONArray)
  {
    if (paramJSONArray == null) {
      return null;
    }
    int m = paramJSONArray.size();
    Object localObject4 = Array.newInstance(paramClass, m);
    int i = 0;
    while (i < m)
    {
      Object localObject3 = paramJSONArray.get(i);
      Object localObject1 = localObject3;
      if (localObject3 == paramJSONArray)
      {
        Array.set(localObject4, i, localObject4);
      }
      else if (paramClass.isArray())
      {
        if (!paramClass.isInstance(localObject3)) {
          localObject1 = toObjectArray(paramDefaultJSONParser, paramClass, (JSONArray)localObject3);
        }
        Array.set(localObject4, i, localObject1);
      }
      else
      {
        if ((localObject3 instanceof JSONArray))
        {
          localObject1 = (JSONArray)localObject3;
          int n = ((JSONArray)localObject1).size();
          int j = 0;
          int k = 0;
          while (j < n)
          {
            if (((JSONArray)localObject1).get(j) == paramJSONArray)
            {
              ((JSONArray)localObject1).set(i, localObject4);
              k = 1;
            }
            j += 1;
          }
          if (k != 0)
          {
            localObject1 = ((JSONArray)localObject1).toArray();
            break label190;
          }
        }
        localObject1 = null;
        label190:
        Object localObject2 = localObject1;
        if (localObject1 == null) {
          localObject2 = TypeUtils.cast(localObject3, paramClass, paramDefaultJSONParser.getConfig());
        }
        Array.set(localObject4, i, localObject2);
      }
      i += 1;
    }
    paramJSONArray.setRelatedArray(localObject4);
    paramJSONArray.setComponentType(paramClass);
    return localObject4;
  }
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    Object localObject3 = paramDefaultJSONParser.getLexer();
    int i = ((JSONLexer)localObject3).token();
    Object localObject1 = null;
    Object localObject2 = null;
    if (i == 8)
    {
      ((JSONLexer)localObject3).nextToken(16);
      return null;
    }
    if (((JSONLexer)localObject3).token() == 4)
    {
      paramDefaultJSONParser = ((JSONLexer)localObject3).bytesValue();
      ((JSONLexer)localObject3).nextToken(16);
      return paramDefaultJSONParser;
    }
    if ((paramType instanceof GenericArrayType))
    {
      paramType = ((GenericArrayType)paramType).getGenericComponentType();
      if ((paramType instanceof TypeVariable))
      {
        localObject3 = (TypeVariable)paramType;
        paramType = paramDefaultJSONParser.getContext().getType();
        if ((paramType instanceof ParameterizedType))
        {
          ParameterizedType localParameterizedType = (ParameterizedType)paramType;
          paramType = localParameterizedType.getRawType();
          if ((paramType instanceof Class))
          {
            TypeVariable[] arrayOfTypeVariable = ((Class)paramType).getTypeParameters();
            i = 0;
            paramType = localObject2;
            for (;;)
            {
              localObject1 = paramType;
              if (i >= arrayOfTypeVariable.length) {
                break;
              }
              if (arrayOfTypeVariable[i].getName().equals(((TypeVariable)localObject3).getName())) {
                paramType = localParameterizedType.getActualTypeArguments()[i];
              }
              i += 1;
            }
          }
          if ((localObject1 instanceof Class)) {
            paramType = (Class)localObject1;
          } else {
            paramType = Object.class;
          }
        }
        else
        {
          paramType = Object.class;
        }
      }
      else
      {
        paramType = (Class)paramType;
      }
    }
    else
    {
      paramType = ((Class)paramType).getComponentType();
    }
    localObject1 = new JSONArray();
    paramDefaultJSONParser.parseArray(paramType, (Collection)localObject1, paramObject);
    return toObjectArray(paramDefaultJSONParser, paramType, (JSONArray)localObject1);
  }
  
  public int getFastMatchToken()
  {
    return 14;
  }
}
