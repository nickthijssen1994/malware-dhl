package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONScanner;
import java.lang.reflect.Type;
import java.sql.Time;
import java.util.Calendar;

public class TimeDeserializer
  implements ObjectDeserializer
{
  public static final TimeDeserializer instance = new TimeDeserializer();
  
  public TimeDeserializer() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramType = paramDefaultJSONParser.getLexer();
    long l;
    if (paramType.token() == 16)
    {
      paramType.nextToken(4);
      if (paramType.token() == 4)
      {
        paramType.nextTokenWithColon(2);
        if (paramType.token() == 2)
        {
          l = paramType.longValue();
          paramType.nextToken(13);
          if (paramType.token() == 13)
          {
            paramType.nextToken(16);
            return new Time(l);
          }
          throw new JSONException("syntax error");
        }
        throw new JSONException("syntax error");
      }
      throw new JSONException("syntax error");
    }
    paramDefaultJSONParser = paramDefaultJSONParser.parse();
    if (paramDefaultJSONParser == null) {
      return null;
    }
    if ((paramDefaultJSONParser instanceof Time)) {
      return paramDefaultJSONParser;
    }
    if ((paramDefaultJSONParser instanceof Number)) {
      return new Time(((Number)paramDefaultJSONParser).longValue());
    }
    if ((paramDefaultJSONParser instanceof String))
    {
      paramDefaultJSONParser = (String)paramDefaultJSONParser;
      if (paramDefaultJSONParser.length() == 0) {
        return null;
      }
      paramType = new JSONScanner(paramDefaultJSONParser);
      if (paramType.scanISO8601DateIfMatch()) {
        l = paramType.getCalendar().getTimeInMillis();
      } else {
        l = Long.parseLong(paramDefaultJSONParser);
      }
      paramType.close();
      return new Time(l);
    }
    throw new JSONException("parse error");
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
