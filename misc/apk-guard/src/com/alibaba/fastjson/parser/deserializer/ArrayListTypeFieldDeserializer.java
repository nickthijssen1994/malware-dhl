package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONToken;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

public class ArrayListTypeFieldDeserializer
  extends FieldDeserializer
{
  private ObjectDeserializer deserializer;
  private int itemFastMatchToken;
  private final Type itemType;
  
  public ArrayListTypeFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
  {
    super(paramClass, paramFieldInfo);
    if ((getFieldType() instanceof ParameterizedType))
    {
      itemType = ((ParameterizedType)getFieldType()).getActualTypeArguments()[0];
      return;
    }
    itemType = Object.class;
  }
  
  public int getFastMatchToken()
  {
    return 14;
  }
  
  public final void parseArray(DefaultJSONParser paramDefaultJSONParser, Type paramType, Collection paramCollection)
  {
    Type localType = itemType;
    Object localObject3 = deserializer;
    boolean bool = localType instanceof TypeVariable;
    int j = 0;
    Object localObject2 = localType;
    Object localObject1 = localObject3;
    if (bool)
    {
      localObject2 = localType;
      localObject1 = localObject3;
      if ((paramType instanceof ParameterizedType))
      {
        localObject2 = (TypeVariable)localType;
        ParameterizedType localParameterizedType = (ParameterizedType)paramType;
        localObject1 = null;
        if ((localParameterizedType.getRawType() instanceof Class)) {
          localObject1 = (Class)localParameterizedType.getRawType();
        }
        if (localObject1 != null)
        {
          int k = ((Class)localObject1).getTypeParameters().length;
          i = 0;
          while (i < k)
          {
            if (localObject1.getTypeParameters()[i].getName().equals(((TypeVariable)localObject2).getName())) {
              break label155;
            }
            i += 1;
          }
        }
        i = -1;
        label155:
        localObject2 = localType;
        localObject1 = localObject3;
        if (i != -1)
        {
          localType = localParameterizedType.getActualTypeArguments()[i];
          localObject2 = localType;
          localObject1 = localObject3;
          if (!localType.equals(itemType))
          {
            localObject1 = paramDefaultJSONParser.getConfig().getDeserializer(localType);
            localObject2 = localType;
          }
        }
      }
    }
    localObject3 = paramDefaultJSONParser.getLexer();
    if (((JSONLexer)localObject3).token() != 14)
    {
      paramDefaultJSONParser = new StringBuilder();
      paramDefaultJSONParser.append("exepct '[', but ");
      paramDefaultJSONParser.append(JSONToken.name(((JSONLexer)localObject3).token()));
      paramCollection = paramDefaultJSONParser.toString();
      paramDefaultJSONParser = paramCollection;
      if (paramType != null)
      {
        paramDefaultJSONParser = new StringBuilder();
        paramDefaultJSONParser.append(paramCollection);
        paramDefaultJSONParser.append(", type : ");
        paramDefaultJSONParser.append(paramType);
        paramDefaultJSONParser = paramDefaultJSONParser.toString();
      }
      throw new JSONException(paramDefaultJSONParser);
    }
    paramType = (Type)localObject1;
    if (localObject1 == null)
    {
      localObject1 = paramDefaultJSONParser.getConfig().getDeserializer((Type)localObject2);
      paramType = (Type)localObject1;
      deserializer = ((ObjectDeserializer)localObject1);
      itemFastMatchToken = deserializer.getFastMatchToken();
    }
    ((JSONLexer)localObject3).nextToken(itemFastMatchToken);
    int i = j;
    for (;;)
    {
      if (((JSONLexer)localObject3).isEnabled(Feature.AllowArbitraryCommas)) {
        while (((JSONLexer)localObject3).token() == 16) {
          ((JSONLexer)localObject3).nextToken();
        }
      }
      if (((JSONLexer)localObject3).token() == 15)
      {
        ((JSONLexer)localObject3).nextToken(16);
        return;
      }
      paramCollection.add(paramType.deserialze(paramDefaultJSONParser, (Type)localObject2, Integer.valueOf(i)));
      paramDefaultJSONParser.checkListResolve(paramCollection);
      if (((JSONLexer)localObject3).token() == 16) {
        ((JSONLexer)localObject3).nextToken(itemFastMatchToken);
      }
      i += 1;
    }
  }
  
  public void parseField(DefaultJSONParser paramDefaultJSONParser, Object paramObject, Type paramType, Map paramMap)
  {
    if (paramDefaultJSONParser.getLexer().token() == 8)
    {
      setValue(paramObject, null);
      return;
    }
    ArrayList localArrayList = new ArrayList();
    ParseContext localParseContext = paramDefaultJSONParser.getContext();
    paramDefaultJSONParser.setContext(localParseContext, paramObject, fieldInfo.getName());
    parseArray(paramDefaultJSONParser, paramType, localArrayList);
    paramDefaultJSONParser.setContext(localParseContext);
    if (paramObject == null)
    {
      paramMap.put(fieldInfo.getName(), localArrayList);
      return;
    }
    setValue(paramObject, localArrayList);
  }
}
