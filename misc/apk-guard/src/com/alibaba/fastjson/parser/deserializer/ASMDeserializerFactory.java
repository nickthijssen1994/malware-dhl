package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.asm.ClassWriter;
import com.alibaba.fastjson.asm.FieldVisitor;
import com.alibaba.fastjson.asm.Label;
import com.alibaba.fastjson.asm.MethodVisitor;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.ASMUtils;
import com.alibaba.fastjson.util.DeserializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

public class ASMDeserializerFactory
  implements Opcodes
{
  private static final ASMDeserializerFactory instance = new ASMDeserializerFactory();
  private final ASMClassLoader classLoader;
  private final AtomicLong seed = new AtomicLong();
  
  public ASMDeserializerFactory()
  {
    classLoader = new ASMClassLoader();
  }
  
  public ASMDeserializerFactory(ClassLoader paramClassLoader)
  {
    classLoader = new ASMClassLoader(paramClassLoader);
  }
  
  private void _batchSet(Context paramContext, MethodVisitor paramMethodVisitor)
  {
    _batchSet(paramContext, paramMethodVisitor, true);
  }
  
  private void _batchSet(Context paramContext, MethodVisitor paramMethodVisitor, boolean paramBoolean)
  {
    int j = paramContext.getFieldInfoList().size();
    int i = 0;
    while (i < j)
    {
      Label localLabel = new Label();
      if (paramBoolean) {
        _isFlag(paramMethodVisitor, paramContext, i, localLabel);
      }
      _loadAndSet(paramContext, paramMethodVisitor, (FieldInfo)paramContext.getFieldInfoList().get(i));
      if (paramBoolean) {
        paramMethodVisitor.visitLabel(localLabel);
      }
      i += 1;
    }
  }
  
  private void _createInstance(ClassWriter paramClassWriter, Context paramContext)
  {
    paramClassWriter = paramClassWriter.visitMethod(1, "createInstance", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;)Ljava/lang/Object;", null, null);
    paramClassWriter.visitTypeInsn(187, ASMUtils.getType(paramContext.getClazz()));
    paramClassWriter.visitInsn(89);
    paramClassWriter.visitMethodInsn(183, ASMUtils.getType(paramContext.getClazz()), "<init>", "()V");
    paramClassWriter.visitInsn(176);
    paramClassWriter.visitMaxs(3, 3);
    paramClassWriter.visitEnd();
  }
  
  private void _createInstance(Context paramContext, MethodVisitor paramMethodVisitor)
  {
    if (Modifier.isPublic(paramContext.getBeanInfo().getDefaultConstructor().getModifiers()))
    {
      paramMethodVisitor.visitTypeInsn(187, ASMUtils.getType(paramContext.getClazz()));
      paramMethodVisitor.visitInsn(89);
      paramMethodVisitor.visitMethodInsn(183, ASMUtils.getType(paramContext.getClazz()), "<init>", "()V");
      paramMethodVisitor.visitVarInsn(58, paramContext.attribute("instance"));
      return;
    }
    paramMethodVisitor.visitVarInsn(25, 0);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(183, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "createInstance", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;)Ljava/lang/Object;");
    paramMethodVisitor.visitTypeInsn(192, ASMUtils.getType(paramContext.getClazz()));
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute("instance"));
  }
  
  private void _deserObject(Context paramContext, MethodVisitor paramMethodVisitor, FieldInfo paramFieldInfo, Class paramClass)
  {
    _getFieldDeser(paramContext, paramMethodVisitor, paramFieldInfo);
    paramMethodVisitor.visitVarInsn(25, 1);
    if ((paramFieldInfo.getFieldType() instanceof Class))
    {
      paramMethodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(paramFieldInfo.getFieldClass())));
    }
    else
    {
      paramMethodVisitor.visitVarInsn(25, 0);
      paramMethodVisitor.visitLdcInsn(paramFieldInfo.getName());
      paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "getFieldType", "(Ljava/lang/String;)Ljava/lang/reflect/Type;");
    }
    paramMethodVisitor.visitLdcInsn(paramFieldInfo.getName());
    paramMethodVisitor.visitMethodInsn(185, "com/alibaba/fastjson/parser/deserializer/ObjectDeserializer", "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
    paramMethodVisitor.visitTypeInsn(192, ASMUtils.getType(paramClass));
    paramClass = new StringBuilder();
    paramClass.append(paramFieldInfo.getName());
    paramClass.append("_asm");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute(paramClass.toString()));
  }
  
  private void _deserialize_endCheck(Context paramContext, MethodVisitor paramMethodVisitor, Label paramLabel)
  {
    paramMethodVisitor.visitIntInsn(21, paramContext.attribute("matchedCount"));
    paramMethodVisitor.visitJumpInsn(158, paramLabel);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "RBRACE", "I");
    paramMethodVisitor.visitJumpInsn(160, paramLabel);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
  }
  
  private void _deserialze_list_obj(Context paramContext, MethodVisitor paramMethodVisitor, Label paramLabel, FieldInfo paramFieldInfo, Class paramClass1, Class paramClass2, int paramInt)
  {
    Label localLabel1 = new Label();
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "matchField", "([C)Z");
    paramMethodVisitor.visitJumpInsn(153, localLabel1);
    _setFlag(paramMethodVisitor, paramContext, paramInt);
    Object localObject = new Label();
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "NULL", "I");
    paramMethodVisitor.visitJumpInsn(160, (Label)localObject);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
    paramMethodVisitor.visitJumpInsn(167, localLabel1);
    paramMethodVisitor.visitLabel((Label)localObject);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
    paramMethodVisitor.visitJumpInsn(160, paramLabel);
    _getCollectionFieldItemDeser(paramContext, paramMethodVisitor, paramFieldInfo, paramClass2);
    paramMethodVisitor.visitMethodInsn(185, "com/alibaba/fastjson/parser/deserializer/ObjectDeserializer", "getFastMatchToken", "()I");
    paramMethodVisitor.visitVarInsn(54, paramContext.attribute("fastMatchToken"));
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitVarInsn(21, paramContext.attribute("fastMatchToken"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
    _newCollection(paramMethodVisitor, paramClass1);
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramFieldInfo.getName());
    ((StringBuilder)localObject).append("_asm");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject).toString()));
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute("listContext"));
    paramMethodVisitor.visitVarInsn(25, 1);
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramFieldInfo.getName());
    ((StringBuilder)localObject).append("_asm");
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject).toString()));
    paramMethodVisitor.visitLdcInsn(paramFieldInfo.getName());
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Ljava/lang/Object;Ljava/lang/Object;)Lcom/alibaba/fastjson/parser/ParseContext;");
    paramMethodVisitor.visitInsn(87);
    localObject = new Label();
    Label localLabel2 = new Label();
    paramMethodVisitor.visitInsn(3);
    paramMethodVisitor.visitVarInsn(54, paramContext.attribute("i"));
    paramMethodVisitor.visitLabel((Label)localObject);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "RBRACKET", "I");
    paramMethodVisitor.visitJumpInsn(159, localLabel2);
    paramMethodVisitor.visitVarInsn(25, 0);
    String str = paramContext.getClassName();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("_asm_list_item_deser__");
    paramMethodVisitor.visitFieldInsn(180, str, localStringBuilder.toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(paramClass2)));
    paramMethodVisitor.visitVarInsn(21, paramContext.attribute("i"));
    paramMethodVisitor.visitMethodInsn(184, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;");
    paramMethodVisitor.visitMethodInsn(185, "com/alibaba/fastjson/parser/deserializer/ObjectDeserializer", "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute("list_item_value"));
    paramMethodVisitor.visitIincInsn(paramContext.attribute("i"), 1);
    paramClass2 = new StringBuilder();
    paramClass2.append(paramFieldInfo.getName());
    paramClass2.append("_asm");
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute(paramClass2.toString()));
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("list_item_value"));
    if (paramClass1.isInterface()) {
      paramMethodVisitor.visitMethodInsn(185, ASMUtils.getType(paramClass1), "add", "(Ljava/lang/Object;)Z");
    } else {
      paramMethodVisitor.visitMethodInsn(182, ASMUtils.getType(paramClass1), "add", "(Ljava/lang/Object;)Z");
    }
    paramMethodVisitor.visitInsn(87);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramClass1 = new StringBuilder();
    paramClass1.append(paramFieldInfo.getName());
    paramClass1.append("_asm");
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute(paramClass1.toString()));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "checkListResolve", "(Ljava/util/Collection;)V");
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
    paramMethodVisitor.visitJumpInsn(160, (Label)localObject);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitVarInsn(21, paramContext.attribute("fastMatchToken"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
    paramMethodVisitor.visitJumpInsn(167, (Label)localObject);
    paramMethodVisitor.visitLabel(localLabel2);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("listContext"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Lcom/alibaba/fastjson/parser/ParseContext;)V");
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "RBRACKET", "I");
    paramMethodVisitor.visitJumpInsn(160, paramLabel);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
    paramMethodVisitor.visitLabel(localLabel1);
  }
  
  private void _deserialze_obj(Context paramContext, MethodVisitor paramMethodVisitor, Label paramLabel, FieldInfo paramFieldInfo, Class paramClass, int paramInt)
  {
    paramLabel = new Label();
    Label localLabel = new Label();
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitVarInsn(25, 0);
    Object localObject = paramContext.getClassName();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("_asm_prefix__");
    paramMethodVisitor.visitFieldInsn(180, (String)localObject, localStringBuilder.toString(), "[C");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "matchField", "([C)Z");
    paramMethodVisitor.visitJumpInsn(154, paramLabel);
    paramMethodVisitor.visitInsn(1);
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramFieldInfo.getName());
    ((StringBuilder)localObject).append("_asm");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject).toString()));
    paramMethodVisitor.visitJumpInsn(167, localLabel);
    paramMethodVisitor.visitLabel(paramLabel);
    _setFlag(paramMethodVisitor, paramContext, paramInt);
    paramMethodVisitor.visitVarInsn(21, paramContext.attribute("matchedCount"));
    paramMethodVisitor.visitInsn(4);
    paramMethodVisitor.visitInsn(96);
    paramMethodVisitor.visitVarInsn(54, paramContext.attribute("matchedCount"));
    _deserObject(paramContext, paramMethodVisitor, paramFieldInfo, paramClass);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getResolveStatus", "()I");
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/DefaultJSONParser", "NeedToResolve", "I");
    paramMethodVisitor.visitJumpInsn(160, localLabel);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getLastResolveTask", "()Lcom/alibaba/fastjson/parser/DefaultJSONParser$ResolveTask;");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute("resolveTask"));
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("resolveTask"));
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser$ResolveTask", "setOwnerContext", "(Lcom/alibaba/fastjson/parser/ParseContext;)V");
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("resolveTask"));
    paramMethodVisitor.visitVarInsn(25, 0);
    paramMethodVisitor.visitLdcInsn(paramFieldInfo.getName());
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "getFieldDeserializer", "(Ljava/lang/String;)Lcom/alibaba/fastjson/parser/deserializer/FieldDeserializer;");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser$ResolveTask", "setFieldDeserializer", "(Lcom/alibaba/fastjson/parser/deserializer/FieldDeserializer;)V");
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/DefaultJSONParser", "NONE", "I");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "setResolveStatus", "(I)V");
    paramMethodVisitor.visitLabel(localLabel);
  }
  
  private void _getCollectionFieldItemDeser(Context paramContext, MethodVisitor paramMethodVisitor, FieldInfo paramFieldInfo, Class paramClass)
  {
    Label localLabel = new Label();
    paramMethodVisitor.visitVarInsn(25, 0);
    Object localObject = paramContext.getClassName();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("_asm_list_item_deser__");
    paramMethodVisitor.visitFieldInsn(180, (String)localObject, localStringBuilder.toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    paramMethodVisitor.visitJumpInsn(199, localLabel);
    paramMethodVisitor.visitVarInsn(25, 0);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getConfig", "()Lcom/alibaba/fastjson/parser/ParserConfig;");
    paramMethodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(paramClass)));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/ParserConfig", "getDeserializer", "(Ljava/lang/reflect/Type;)Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    paramClass = paramContext.getClassName();
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramFieldInfo.getName());
    ((StringBuilder)localObject).append("_asm_list_item_deser__");
    paramMethodVisitor.visitFieldInsn(181, paramClass, ((StringBuilder)localObject).toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    paramMethodVisitor.visitLabel(localLabel);
    paramMethodVisitor.visitVarInsn(25, 0);
    paramContext = paramContext.getClassName();
    paramClass = new StringBuilder();
    paramClass.append(paramFieldInfo.getName());
    paramClass.append("_asm_list_item_deser__");
    paramMethodVisitor.visitFieldInsn(180, paramContext, paramClass.toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
  }
  
  private void _getFieldDeser(Context paramContext, MethodVisitor paramMethodVisitor, FieldInfo paramFieldInfo)
  {
    Object localObject = new Label();
    paramMethodVisitor.visitVarInsn(25, 0);
    String str = paramContext.getClassName();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("_asm_deser__");
    paramMethodVisitor.visitFieldInsn(180, str, localStringBuilder.toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    paramMethodVisitor.visitJumpInsn(199, (Label)localObject);
    paramMethodVisitor.visitVarInsn(25, 0);
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getConfig", "()Lcom/alibaba/fastjson/parser/ParserConfig;");
    paramMethodVisitor.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc(paramFieldInfo.getFieldClass())));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/ParserConfig", "getDeserializer", "(Ljava/lang/reflect/Type;)Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    str = paramContext.getClassName();
    localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("_asm_deser__");
    paramMethodVisitor.visitFieldInsn(181, str, localStringBuilder.toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
    paramMethodVisitor.visitLabel((Label)localObject);
    paramMethodVisitor.visitVarInsn(25, 0);
    paramContext = paramContext.getClassName();
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramFieldInfo.getName());
    ((StringBuilder)localObject).append("_asm_deser__");
    paramMethodVisitor.visitFieldInsn(180, paramContext, ((StringBuilder)localObject).toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;");
  }
  
  private void _init(ClassWriter paramClassWriter, Context paramContext)
  {
    int j = paramContext.getFieldInfoList().size();
    int i = 0;
    FieldInfo localFieldInfo;
    Object localObject;
    while (i < j)
    {
      localFieldInfo = (FieldInfo)paramContext.getFieldInfoList().get(i);
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(localFieldInfo.getName());
      ((StringBuilder)localObject).append("_asm_prefix__");
      paramClassWriter.visitField(1, ((StringBuilder)localObject).toString(), "[C").visitEnd();
      i += 1;
    }
    j = paramContext.getFieldInfoList().size();
    i = 0;
    while (i < j)
    {
      localFieldInfo = (FieldInfo)paramContext.getFieldInfoList().get(i);
      localObject = localFieldInfo.getFieldClass();
      if ((!((Class)localObject).isPrimitive()) && (!((Class)localObject).isEnum())) {
        if (Collection.class.isAssignableFrom((Class)localObject))
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append(localFieldInfo.getName());
          ((StringBuilder)localObject).append("_asm_list_item_deser__");
          paramClassWriter.visitField(1, ((StringBuilder)localObject).toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;").visitEnd();
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append(localFieldInfo.getName());
          ((StringBuilder)localObject).append("_asm_deser__");
          paramClassWriter.visitField(1, ((StringBuilder)localObject).toString(), "Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;").visitEnd();
        }
      }
      i += 1;
    }
    paramClassWriter = paramClassWriter.visitMethod(1, "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;)V", null, null);
    paramClassWriter.visitVarInsn(25, 0);
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitVarInsn(25, 2);
    paramClassWriter.visitMethodInsn(183, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;)V");
    paramClassWriter.visitVarInsn(25, 0);
    paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "serializer", "Lcom/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer$InnerJavaBeanDeserializer;");
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer", "getFieldDeserializerMap", "()Ljava/util/Map;");
    paramClassWriter.visitInsn(87);
    j = paramContext.getFieldInfoList().size();
    i = 0;
    while (i < j)
    {
      localFieldInfo = (FieldInfo)paramContext.getFieldInfoList().get(i);
      paramClassWriter.visitVarInsn(25, 0);
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("\"");
      ((StringBuilder)localObject).append(localFieldInfo.getName());
      ((StringBuilder)localObject).append("\":");
      paramClassWriter.visitLdcInsn(((StringBuilder)localObject).toString());
      paramClassWriter.visitMethodInsn(182, "java/lang/String", "toCharArray", "()[C");
      localObject = paramContext.getClassName();
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(localFieldInfo.getName());
      localStringBuilder.append("_asm_prefix__");
      paramClassWriter.visitFieldInsn(181, (String)localObject, localStringBuilder.toString(), "[C");
      i += 1;
    }
    paramClassWriter.visitInsn(177);
    paramClassWriter.visitMaxs(4, 4);
    paramClassWriter.visitEnd();
  }
  
  private void _isEnable(Context paramContext, MethodVisitor paramMethodVisitor, Feature paramFeature)
  {
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("lexer"));
    paramMethodVisitor.visitFieldInsn(178, "com/alibaba/fastjson/parser/Feature", paramFeature.name(), "Lcom/alibaba/fastjson/parser/Feature;");
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "isEnabled", "(Lcom/alibaba/fastjson/parser/Feature;)Z");
  }
  
  private void _loadAndSet(Context paramContext, MethodVisitor paramMethodVisitor, FieldInfo paramFieldInfo)
  {
    Object localObject1 = paramFieldInfo.getFieldClass();
    Object localObject2 = paramFieldInfo.getFieldType();
    if (localObject1 == Boolean.TYPE)
    {
      paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramFieldInfo.getName());
      ((StringBuilder)localObject1).append("_asm");
      paramMethodVisitor.visitVarInsn(21, paramContext.attribute(((StringBuilder)localObject1).toString()));
      _set(paramContext, paramMethodVisitor, paramFieldInfo);
      return;
    }
    if ((localObject1 != Byte.TYPE) && (localObject1 != Short.TYPE) && (localObject1 != Integer.TYPE) && (localObject1 != Character.TYPE))
    {
      if (localObject1 == Long.TYPE)
      {
        paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(paramFieldInfo.getName());
        ((StringBuilder)localObject1).append("_asm");
        paramMethodVisitor.visitVarInsn(22, paramContext.remap(((StringBuilder)localObject1).toString(), 2));
        if (paramFieldInfo.getMethod() != null)
        {
          paramMethodVisitor.visitMethodInsn(182, ASMUtils.getType(paramContext.getClazz()), paramFieldInfo.getMethod().getName(), ASMUtils.getDesc(paramFieldInfo.getMethod()));
          if (!paramFieldInfo.getMethod().getReturnType().equals(Void.TYPE)) {
            paramMethodVisitor.visitInsn(87);
          }
        }
        else
        {
          paramMethodVisitor.visitFieldInsn(181, ASMUtils.getType(paramFieldInfo.getDeclaringClass()), paramFieldInfo.getField().getName(), ASMUtils.getDesc(paramFieldInfo.getFieldClass()));
        }
      }
      else
      {
        if (localObject1 == Float.TYPE)
        {
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramMethodVisitor.visitVarInsn(23, paramContext.attribute(((StringBuilder)localObject1).toString()));
          _set(paramContext, paramMethodVisitor, paramFieldInfo);
          return;
        }
        if (localObject1 == Double.TYPE)
        {
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramMethodVisitor.visitVarInsn(24, paramContext.remap(((StringBuilder)localObject1).toString(), 2));
          _set(paramContext, paramMethodVisitor, paramFieldInfo);
          return;
        }
        if (localObject1 == String.class)
        {
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject1).toString()));
          _set(paramContext, paramMethodVisitor, paramFieldInfo);
          return;
        }
        if (((Class)localObject1).isEnum())
        {
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject1).toString()));
          _set(paramContext, paramMethodVisitor, paramFieldInfo);
          return;
        }
        if (Collection.class.isAssignableFrom((Class)localObject1))
        {
          paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
          if (TypeUtils.getCollectionItemClass((java.lang.reflect.Type)localObject2) == String.class)
          {
            localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append(paramFieldInfo.getName());
            ((StringBuilder)localObject2).append("_asm");
            paramMethodVisitor.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject2).toString()));
            paramMethodVisitor.visitTypeInsn(192, ASMUtils.getType((Class)localObject1));
          }
          else
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append(paramFieldInfo.getName());
            ((StringBuilder)localObject1).append("_asm");
            paramMethodVisitor.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject1).toString()));
          }
          _set(paramContext, paramMethodVisitor, paramFieldInfo);
          return;
        }
        paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(paramFieldInfo.getName());
        ((StringBuilder)localObject1).append("_asm");
        paramMethodVisitor.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject1).toString()));
        _set(paramContext, paramMethodVisitor, paramFieldInfo);
      }
    }
    else
    {
      paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramFieldInfo.getName());
      ((StringBuilder)localObject1).append("_asm");
      paramMethodVisitor.visitVarInsn(21, paramContext.attribute(((StringBuilder)localObject1).toString()));
      _set(paramContext, paramMethodVisitor, paramFieldInfo);
    }
  }
  
  private void _newCollection(MethodVisitor paramMethodVisitor, Class paramClass)
  {
    if (paramClass.isAssignableFrom(ArrayList.class))
    {
      paramMethodVisitor.visitTypeInsn(187, "java/util/ArrayList");
      paramMethodVisitor.visitInsn(89);
      paramMethodVisitor.visitMethodInsn(183, "java/util/ArrayList", "<init>", "()V");
    }
    else if (paramClass.isAssignableFrom(LinkedList.class))
    {
      paramMethodVisitor.visitTypeInsn(187, ASMUtils.getType(LinkedList.class));
      paramMethodVisitor.visitInsn(89);
      paramMethodVisitor.visitMethodInsn(183, ASMUtils.getType(LinkedList.class), "<init>", "()V");
    }
    else if (paramClass.isAssignableFrom(HashSet.class))
    {
      paramMethodVisitor.visitTypeInsn(187, ASMUtils.getType(HashSet.class));
      paramMethodVisitor.visitInsn(89);
      paramMethodVisitor.visitMethodInsn(183, ASMUtils.getType(HashSet.class), "<init>", "()V");
    }
    else if (paramClass.isAssignableFrom(TreeSet.class))
    {
      paramMethodVisitor.visitTypeInsn(187, ASMUtils.getType(TreeSet.class));
      paramMethodVisitor.visitInsn(89);
      paramMethodVisitor.visitMethodInsn(183, ASMUtils.getType(TreeSet.class), "<init>", "()V");
    }
    else
    {
      paramMethodVisitor.visitTypeInsn(187, ASMUtils.getType(paramClass));
      paramMethodVisitor.visitInsn(89);
      paramMethodVisitor.visitMethodInsn(183, ASMUtils.getType(paramClass), "<init>", "()V");
    }
    paramMethodVisitor.visitTypeInsn(192, ASMUtils.getType(paramClass));
  }
  
  private void _set(Context paramContext, MethodVisitor paramMethodVisitor, FieldInfo paramFieldInfo)
  {
    if (paramFieldInfo.getMethod() != null)
    {
      paramMethodVisitor.visitMethodInsn(182, ASMUtils.getType(paramFieldInfo.getDeclaringClass()), paramFieldInfo.getMethod().getName(), ASMUtils.getDesc(paramFieldInfo.getMethod()));
      if (!paramFieldInfo.getMethod().getReturnType().equals(Void.TYPE)) {
        paramMethodVisitor.visitInsn(87);
      }
    }
    else
    {
      paramMethodVisitor.visitFieldInsn(181, ASMUtils.getType(paramFieldInfo.getDeclaringClass()), paramFieldInfo.getField().getName(), ASMUtils.getDesc(paramFieldInfo.getFieldClass()));
    }
  }
  
  private void _setContext(Context paramContext, MethodVisitor paramMethodVisitor)
  {
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("context"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Lcom/alibaba/fastjson/parser/ParseContext;)V");
    Label localLabel = new Label();
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("childContext"));
    paramMethodVisitor.visitJumpInsn(198, localLabel);
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("childContext"));
    paramMethodVisitor.visitVarInsn(25, paramContext.attribute("instance"));
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/ParseContext", "setObject", "(Ljava/lang/Object;)V");
    paramMethodVisitor.visitLabel(localLabel);
  }
  
  private void defineVarLexer(Context paramContext, MethodVisitor paramMethodVisitor)
  {
    paramMethodVisitor.visitVarInsn(25, 1);
    paramMethodVisitor.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getLexer", "()Lcom/alibaba/fastjson/parser/JSONLexer;");
    paramMethodVisitor.visitTypeInsn(192, "com/alibaba/fastjson/parser/JSONLexerBase");
    paramMethodVisitor.visitVarInsn(58, paramContext.attribute("lexer"));
  }
  
  public static final ASMDeserializerFactory getInstance()
  {
    return instance;
  }
  
  void _deserialze(ClassWriter paramClassWriter, Context paramContext)
  {
    if (paramContext.getFieldInfoList().size() == 0) {
      return;
    }
    Object localObject1 = paramContext.getFieldInfoList().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (FieldInfo)((Iterator)localObject1).next();
      localObject2 = ((FieldInfo)localObject3).getFieldClass();
      localObject3 = ((FieldInfo)localObject3).getFieldType();
      if (localObject2 == Character.TYPE) {
        return;
      }
      if ((Collection.class.isAssignableFrom((Class)localObject2)) && ((!(localObject3 instanceof ParameterizedType)) || (!(((ParameterizedType)localObject3).getActualTypeArguments()[0] instanceof Class)))) {
        return;
      }
    }
    Collections.sort(paramContext.getFieldInfoList());
    paramClassWriter = paramClassWriter.visitMethod(1, "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", null, null);
    localObject1 = new Label();
    Object localObject2 = new Label();
    Object localObject3 = new Label();
    Label localLabel = new Label();
    defineVarLexer(paramContext, paramClassWriter);
    _isEnable(paramContext, paramClassWriter, Feature.SortFeidFastMatch);
    paramClassWriter.visitJumpInsn(153, (Label)localObject2);
    Object localObject4 = new Label();
    paramClassWriter.visitVarInsn(25, 0);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
    paramClassWriter.visitMethodInsn(183, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "isSupportArrayToBean", "(Lcom/alibaba/fastjson/parser/JSONLexer;)Z");
    paramClassWriter.visitJumpInsn(153, (Label)localObject4);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "token", "()I");
    paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
    paramClassWriter.visitJumpInsn(160, (Label)localObject4);
    paramClassWriter.visitVarInsn(25, 0);
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitVarInsn(25, 2);
    paramClassWriter.visitVarInsn(25, 3);
    paramClassWriter.visitMethodInsn(183, paramContext.getClassName(), "deserialzeArrayMapping", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
    paramClassWriter.visitInsn(176);
    paramClassWriter.visitLabel((Label)localObject4);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
    paramClassWriter.visitLdcInsn(paramContext.getClazz().getName());
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanType", "(Ljava/lang/String;)I");
    paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONLexerBase", "NOT_MATCH", "I");
    paramClassWriter.visitJumpInsn(159, (Label)localObject2);
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
    paramClassWriter.visitVarInsn(58, paramContext.attribute("mark_context"));
    paramClassWriter.visitInsn(3);
    paramClassWriter.visitVarInsn(54, paramContext.attribute("matchedCount"));
    _createInstance(paramContext, paramClassWriter);
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getContext", "()Lcom/alibaba/fastjson/parser/ParseContext;");
    paramClassWriter.visitVarInsn(58, paramContext.attribute("context"));
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("context"));
    paramClassWriter.visitVarInsn(25, paramContext.attribute("instance"));
    paramClassWriter.visitVarInsn(25, 3);
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "setContext", "(Lcom/alibaba/fastjson/parser/ParseContext;Ljava/lang/Object;Ljava/lang/Object;)Lcom/alibaba/fastjson/parser/ParseContext;");
    paramClassWriter.visitVarInsn(58, paramContext.attribute("childContext"));
    paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
    paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
    paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONLexerBase", "END", "I");
    paramClassWriter.visitJumpInsn(159, (Label)localObject3);
    paramClassWriter.visitInsn(3);
    paramClassWriter.visitIntInsn(54, paramContext.attribute("matchStat"));
    int j = paramContext.getFieldInfoList().size();
    int i = 0;
    while (i < j)
    {
      paramClassWriter.visitInsn(3);
      localObject4 = new StringBuilder();
      ((StringBuilder)localObject4).append("_asm_flag_");
      ((StringBuilder)localObject4).append(i / 32);
      paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject4).toString()));
      i += 32;
    }
    i = 0;
    Object localObject5;
    Object localObject6;
    while (i < j)
    {
      localObject4 = (FieldInfo)paramContext.getFieldInfoList().get(i);
      localObject5 = ((FieldInfo)localObject4).getFieldClass();
      if ((localObject5 != Boolean.TYPE) && (localObject5 != Byte.TYPE) && (localObject5 != Short.TYPE) && (localObject5 != Integer.TYPE))
      {
        if (localObject5 == Long.TYPE)
        {
          paramClassWriter.visitInsn(9);
          localObject5 = new StringBuilder();
          ((StringBuilder)localObject5).append(((FieldInfo)localObject4).getName());
          ((StringBuilder)localObject5).append("_asm");
          paramClassWriter.visitVarInsn(55, paramContext.remap(((StringBuilder)localObject5).toString(), 2));
        }
        else if (localObject5 == Float.TYPE)
        {
          paramClassWriter.visitInsn(11);
          localObject5 = new StringBuilder();
          ((StringBuilder)localObject5).append(((FieldInfo)localObject4).getName());
          ((StringBuilder)localObject5).append("_asm");
          paramClassWriter.visitVarInsn(56, paramContext.attribute(((StringBuilder)localObject5).toString()));
        }
        else if (localObject5 == Double.TYPE)
        {
          paramClassWriter.visitInsn(14);
          localObject5 = new StringBuilder();
          ((StringBuilder)localObject5).append(((FieldInfo)localObject4).getName());
          ((StringBuilder)localObject5).append("_asm");
          paramClassWriter.visitVarInsn(57, paramContext.remap(((StringBuilder)localObject5).toString(), 2));
        }
        else
        {
          if (localObject5 == String.class)
          {
            localObject6 = new Label();
            _isEnable(paramContext, paramClassWriter, Feature.InitStringFieldAsEmpty);
            paramClassWriter.visitJumpInsn(153, (Label)localObject6);
            _setFlag(paramClassWriter, paramContext, i);
            paramClassWriter.visitLabel((Label)localObject6);
            paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
            paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "stringDefaultValue", "()Ljava/lang/String;");
          }
          else
          {
            paramClassWriter.visitInsn(1);
          }
          paramClassWriter.visitTypeInsn(192, ASMUtils.getType((Class)localObject5));
          localObject5 = new StringBuilder();
          ((StringBuilder)localObject5).append(((FieldInfo)localObject4).getName());
          ((StringBuilder)localObject5).append("_asm");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject5).toString()));
        }
      }
      else
      {
        paramClassWriter.visitInsn(3);
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(((FieldInfo)localObject4).getName());
        ((StringBuilder)localObject5).append("_asm");
        paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject5).toString()));
      }
      i += 1;
    }
    i = 0;
    while (i < j)
    {
      localObject5 = (FieldInfo)paramContext.getFieldInfoList().get(i);
      localObject6 = ((FieldInfo)localObject5).getFieldClass();
      Object localObject7 = ((FieldInfo)localObject5).getFieldType();
      localObject4 = new Label();
      if (localObject6 == Boolean.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldBoolean", "([C)Z");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject6).toString()));
      }
      else if (localObject6 == Byte.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldInt", "([C)I");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject6).toString()));
      }
      else if (localObject6 == Short.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldInt", "([C)I");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject6).toString()));
      }
      else if (localObject6 == Integer.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldInt", "([C)I");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject6).toString()));
      }
      else if (localObject6 == Long.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldLong", "([C)J");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(55, paramContext.remap(((StringBuilder)localObject6).toString(), 2));
      }
      else if (localObject6 == Float.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldFloat", "([C)F");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(56, paramContext.attribute(((StringBuilder)localObject6).toString()));
      }
      else if (localObject6 == Double.TYPE)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldDouble", "([C)D");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(57, paramContext.remap(((StringBuilder)localObject6).toString(), 2));
      }
      else if (localObject6 == String.class)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(25, 0);
        localObject6 = paramContext.getClassName();
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject7).append("_asm_prefix__");
        paramClassWriter.visitFieldInsn(180, (String)localObject6, ((StringBuilder)localObject7).toString(), "[C");
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldString", "([C)Ljava/lang/String;");
        localObject6 = new StringBuilder();
        ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
        ((StringBuilder)localObject6).append("_asm");
        paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject6).toString()));
      }
      else
      {
        Object localObject8;
        StringBuilder localStringBuilder;
        if (((Class)localObject6).isEnum())
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(25, 0);
          localObject7 = paramContext.getClassName();
          localObject8 = new StringBuilder();
          ((StringBuilder)localObject8).append(((FieldInfo)localObject5).getName());
          ((StringBuilder)localObject8).append("_asm_prefix__");
          paramClassWriter.visitFieldInsn(180, (String)localObject7, ((StringBuilder)localObject8).toString(), "[C");
          localObject7 = new Label();
          paramClassWriter.visitInsn(1);
          paramClassWriter.visitTypeInsn(192, ASMUtils.getType((Class)localObject6));
          localObject8 = new StringBuilder();
          ((StringBuilder)localObject8).append(((FieldInfo)localObject5).getName());
          ((StringBuilder)localObject8).append("_asm");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject8).toString()));
          paramClassWriter.visitVarInsn(25, 1);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getSymbolTable", "()Lcom/alibaba/fastjson/parser/SymbolTable;");
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldSymbol", "([CLcom/alibaba/fastjson/parser/SymbolTable;)Ljava/lang/String;");
          paramClassWriter.visitInsn(89);
          localObject8 = new StringBuilder();
          ((StringBuilder)localObject8).append(((FieldInfo)localObject5).getName());
          ((StringBuilder)localObject8).append("_asm_enumName");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject8).toString()));
          paramClassWriter.visitJumpInsn(198, (Label)localObject7);
          localObject8 = new StringBuilder();
          ((StringBuilder)localObject8).append(((FieldInfo)localObject5).getName());
          ((StringBuilder)localObject8).append("_asm_enumName");
          paramClassWriter.visitVarInsn(25, paramContext.attribute(((StringBuilder)localObject8).toString()));
          localObject8 = ASMUtils.getType((Class)localObject6);
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("(Ljava/lang/String;)");
          localStringBuilder.append(ASMUtils.getDesc((Class)localObject6));
          paramClassWriter.visitMethodInsn(184, (String)localObject8, "valueOf", localStringBuilder.toString());
          localObject6 = new StringBuilder();
          ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
          ((StringBuilder)localObject6).append("_asm");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject6).toString()));
          paramClassWriter.visitLabel((Label)localObject7);
        }
        else
        {
          if (!Collection.class.isAssignableFrom((Class)localObject6)) {
            break label3553;
          }
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(25, 0);
          localObject8 = paramContext.getClassName();
          localStringBuilder = new StringBuilder();
          localStringBuilder.append(((FieldInfo)localObject5).getName());
          localStringBuilder.append("_asm_prefix__");
          paramClassWriter.visitFieldInsn(180, (String)localObject8, localStringBuilder.toString(), "[C");
          localObject7 = TypeUtils.getCollectionItemClass((java.lang.reflect.Type)localObject7);
          if (localObject7 != String.class) {
            break label3519;
          }
          paramClassWriter.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc((Class)localObject6)));
          localObject6 = new StringBuilder();
          ((StringBuilder)localObject6).append("([CLjava/lang/Class;)");
          ((StringBuilder)localObject6).append(ASMUtils.getDesc(Collection.class));
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFieldStringArray", ((StringBuilder)localObject6).toString());
          localObject6 = new StringBuilder();
          ((StringBuilder)localObject6).append(((FieldInfo)localObject5).getName());
          ((StringBuilder)localObject6).append("_asm");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject6).toString()));
        }
      }
      paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
      paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
      localObject5 = new Label();
      paramClassWriter.visitJumpInsn(158, (Label)localObject5);
      _setFlag(paramClassWriter, paramContext, i);
      paramClassWriter.visitLabel((Label)localObject5);
      paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
      paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
      paramClassWriter.visitInsn(89);
      paramClassWriter.visitVarInsn(54, paramContext.attribute("matchStat"));
      paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONLexerBase", "NOT_MATCH", "I");
      paramClassWriter.visitJumpInsn(159, (Label)localObject1);
      paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
      paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
      paramClassWriter.visitJumpInsn(158, (Label)localObject4);
      paramClassWriter.visitVarInsn(21, paramContext.attribute("matchedCount"));
      paramClassWriter.visitInsn(4);
      paramClassWriter.visitInsn(96);
      paramClassWriter.visitVarInsn(54, paramContext.attribute("matchedCount"));
      paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
      paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
      paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONLexerBase", "END", "I");
      paramClassWriter.visitJumpInsn(159, localLabel);
      paramClassWriter.visitLabel((Label)localObject4);
      if (i == j - 1)
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitFieldInsn(180, "com/alibaba/fastjson/parser/JSONLexerBase", "matchStat", "I");
        paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONLexerBase", "END", "I");
        paramClassWriter.visitJumpInsn(160, (Label)localObject1);
      }
      else
      {
        break label3582;
        label3519:
        _deserialze_list_obj(paramContext, paramClassWriter, (Label)localObject1, (FieldInfo)localObject5, (Class)localObject6, (Class)localObject7, i);
        if (i == j - 1)
        {
          _deserialize_endCheck(paramContext, paramClassWriter, (Label)localObject1);
          break label3582;
          label3553:
          _deserialze_obj(paramContext, paramClassWriter, (Label)localObject1, (FieldInfo)localObject5, (Class)localObject6, i);
          if (i == j - 1) {
            _deserialize_endCheck(paramContext, paramClassWriter, (Label)localObject1);
          }
        }
      }
      label3582:
      i += 1;
    }
    paramClassWriter.visitLabel(localLabel);
    if ((!paramContext.getClazz().isInterface()) && (!Modifier.isAbstract(paramContext.getClazz().getModifiers()))) {
      _batchSet(paramContext, paramClassWriter);
    }
    paramClassWriter.visitLabel((Label)localObject3);
    _setContext(paramContext, paramClassWriter);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("instance"));
    paramClassWriter.visitInsn(176);
    paramClassWriter.visitLabel((Label)localObject1);
    _batchSet(paramContext, paramClassWriter);
    paramClassWriter.visitVarInsn(25, 0);
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitVarInsn(25, 2);
    paramClassWriter.visitVarInsn(25, 3);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("instance"));
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "parseRest", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    paramClassWriter.visitTypeInsn(192, ASMUtils.getType(paramContext.getClazz()));
    paramClassWriter.visitInsn(176);
    paramClassWriter.visitLabel((Label)localObject2);
    paramClassWriter.visitVarInsn(25, 0);
    paramClassWriter.visitVarInsn(25, 1);
    paramClassWriter.visitVarInsn(25, 2);
    paramClassWriter.visitVarInsn(25, 3);
    paramClassWriter.visitMethodInsn(183, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", "deserialze", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
    paramClassWriter.visitInsn(176);
    paramClassWriter.visitMaxs(5, paramContext.getVariantCount());
    paramClassWriter.visitEnd();
  }
  
  void _deserialzeArrayMapping(ClassWriter paramClassWriter, Context paramContext)
  {
    paramClassWriter = paramClassWriter.visitMethod(1, "deserialzeArrayMapping", "(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", null, null);
    defineVarLexer(paramContext, paramClassWriter);
    _createInstance(paramContext, paramClassWriter);
    List localList = paramContext.getBeanInfo().getSortedFieldList();
    int m = localList.size();
    int i = 0;
    while (i < m)
    {
      int j;
      if (i == m - 1) {
        j = 1;
      } else {
        j = 0;
      }
      int k;
      if (j != 0) {
        k = 93;
      } else {
        k = 44;
      }
      FieldInfo localFieldInfo = (FieldInfo)localList.get(i);
      Object localObject1 = localFieldInfo.getFieldClass();
      Object localObject2 = localFieldInfo.getFieldType();
      if ((localObject1 != Byte.TYPE) && (localObject1 != Short.TYPE) && (localObject1 != Integer.TYPE))
      {
        if (localObject1 == Long.TYPE)
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanLong", "(C)J");
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(55, paramContext.remap(((StringBuilder)localObject1).toString(), 2));
        }
        else if (localObject1 == Boolean.TYPE)
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanBoolean", "(C)Z");
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject1).toString()));
        }
        else if (localObject1 == Float.TYPE)
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanFloat", "(C)F");
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(56, paramContext.attribute(((StringBuilder)localObject1).toString()));
        }
        else if (localObject1 == Double.TYPE)
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanDouble", "(C)D");
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(57, paramContext.remap(((StringBuilder)localObject1).toString(), 2));
        }
        else if (localObject1 == Character.TYPE)
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanString", "(C)Ljava/lang/String;");
          paramClassWriter.visitInsn(3);
          paramClassWriter.visitMethodInsn(182, "java/lang/String", "charAt", "(I)C");
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject1).toString()));
        }
        else if (localObject1 == String.class)
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanString", "(C)Ljava/lang/String;");
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject1).toString()));
        }
        else if (((Class)localObject1).isEnum())
        {
          paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
          paramClassWriter.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc((Class)localObject1)));
          paramClassWriter.visitVarInsn(25, 1);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "getSymbolTable", "()Lcom/alibaba/fastjson/parser/SymbolTable;");
          paramClassWriter.visitVarInsn(16, k);
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanEnum", "(Ljava/lang/Class;Lcom/alibaba/fastjson/parser/SymbolTable;C)Ljava/lang/Enum;");
          paramClassWriter.visitTypeInsn(192, ASMUtils.getType((Class)localObject1));
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(localFieldInfo.getName());
          ((StringBuilder)localObject1).append("_asm");
          paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject1).toString()));
        }
        else if (Collection.class.isAssignableFrom((Class)localObject1))
        {
          localObject2 = TypeUtils.getCollectionItemClass((java.lang.reflect.Type)localObject2);
          if (localObject2 == String.class)
          {
            paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
            paramClassWriter.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc((Class)localObject1)));
            paramClassWriter.visitVarInsn(16, k);
            paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanStringArray", "(Ljava/lang/Class;C)Ljava/util/Collection;");
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append(localFieldInfo.getName());
            ((StringBuilder)localObject1).append("_asm");
            paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject1).toString()));
          }
          else
          {
            paramClassWriter.visitVarInsn(25, 1);
            if (i == 0) {
              paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
            } else {
              paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
            }
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
            paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "accept", "(II)V");
            _newCollection(paramClassWriter, (Class)localObject1);
            paramClassWriter.visitInsn(89);
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append(localFieldInfo.getName());
            ((StringBuilder)localObject1).append("_asm");
            paramClassWriter.visitVarInsn(58, paramContext.attribute(((StringBuilder)localObject1).toString()));
            _getCollectionFieldItemDeser(paramContext, paramClassWriter, localFieldInfo, (Class)localObject2);
            paramClassWriter.visitVarInsn(25, 1);
            paramClassWriter.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(ASMUtils.getDesc((Class)localObject2)));
            paramClassWriter.visitVarInsn(25, 3);
            paramClassWriter.visitMethodInsn(184, "com/alibaba/fastjson/util/ASMUtils", "parseArray", "(Ljava/util/Collection;Lcom/alibaba/fastjson/parser/deserializer/ObjectDeserializer;Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
          }
        }
        else
        {
          paramClassWriter.visitVarInsn(25, 1);
          if (i == 0) {
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
          } else {
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
          }
          paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "accept", "(II)V");
          _deserObject(paramContext, paramClassWriter, localFieldInfo, (Class)localObject1);
          paramClassWriter.visitVarInsn(25, 1);
          if (j == 0)
          {
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "LBRACKET", "I");
          }
          else
          {
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "RBRACKET", "I");
            paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "EOF", "I");
          }
          paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/DefaultJSONParser", "accept", "(II)V");
        }
      }
      else
      {
        paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
        paramClassWriter.visitVarInsn(16, k);
        paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "scanInt", "(C)I");
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(localFieldInfo.getName());
        ((StringBuilder)localObject1).append("_asm");
        paramClassWriter.visitVarInsn(54, paramContext.attribute(((StringBuilder)localObject1).toString()));
      }
      i += 1;
    }
    _batchSet(paramContext, paramClassWriter, false);
    paramClassWriter.visitVarInsn(25, paramContext.attribute("lexer"));
    paramClassWriter.visitFieldInsn(178, "com/alibaba/fastjson/parser/JSONToken", "COMMA", "I");
    paramClassWriter.visitMethodInsn(182, "com/alibaba/fastjson/parser/JSONLexerBase", "nextToken", "(I)V");
    paramClassWriter.visitVarInsn(25, paramContext.attribute("instance"));
    paramClassWriter.visitInsn(176);
    paramClassWriter.visitMaxs(5, paramContext.getVariantCount());
    paramClassWriter.visitEnd();
  }
  
  void _isFlag(MethodVisitor paramMethodVisitor, Context paramContext, int paramInt, Label paramLabel)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("_asm_flag_");
    localStringBuilder.append(paramInt / 32);
    paramMethodVisitor.visitVarInsn(21, paramContext.attribute(localStringBuilder.toString()));
    paramMethodVisitor.visitLdcInsn(Integer.valueOf(1 << paramInt));
    paramMethodVisitor.visitInsn(126);
    paramMethodVisitor.visitJumpInsn(153, paramLabel);
  }
  
  void _setFlag(MethodVisitor paramMethodVisitor, Context paramContext, int paramInt)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("_asm_flag_");
    ((StringBuilder)localObject).append(paramInt / 32);
    localObject = ((StringBuilder)localObject).toString();
    paramMethodVisitor.visitVarInsn(21, paramContext.attribute((String)localObject));
    paramMethodVisitor.visitLdcInsn(Integer.valueOf(1 << paramInt));
    paramMethodVisitor.visitInsn(128);
    paramMethodVisitor.visitVarInsn(54, paramContext.attribute((String)localObject));
  }
  
  public FieldDeserializer createFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
    throws Exception
  {
    Class localClass = paramFieldInfo.getFieldClass();
    if ((localClass != Integer.TYPE) && (localClass != Long.TYPE) && (localClass != String.class)) {
      return paramParserConfig.createFieldDeserializerWithoutASM(paramParserConfig, paramClass, paramFieldInfo);
    }
    return createStringFieldDeserializer(paramParserConfig, paramClass, paramFieldInfo);
  }
  
  public ObjectDeserializer createJavaBeanDeserializer(ParserConfig paramParserConfig, Class paramClass, java.lang.reflect.Type paramType)
    throws Exception
  {
    if (!paramClass.isPrimitive())
    {
      String str = getGenClassName(paramClass);
      Object localObject1 = new ClassWriter();
      ((ClassWriter)localObject1).visit(49, 33, str, "com/alibaba/fastjson/parser/deserializer/ASMJavaBeanDeserializer", null);
      paramType = DeserializeBeanInfo.computeSetters(paramClass, paramType);
      _init((ClassWriter)localObject1, new Context(str, paramParserConfig, paramType, 3));
      _createInstance((ClassWriter)localObject1, new Context(str, paramParserConfig, paramType, 3));
      _deserialze((ClassWriter)localObject1, new Context(str, paramParserConfig, paramType, 4));
      _deserialzeArrayMapping((ClassWriter)localObject1, new Context(str, paramParserConfig, paramType, 4));
      byte[] arrayOfByte = ((ClassWriter)localObject1).toByteArray();
      if (JSON.DUMP_CLASS != null)
      {
        PrintStream localPrintStream = null;
        localObject1 = null;
        paramType = (java.lang.reflect.Type)localObject1;
        try
        {
          StringBuilder localStringBuilder = new StringBuilder();
          paramType = (java.lang.reflect.Type)localObject1;
          localObject2 = JSON.DUMP_CLASS;
          paramType = (java.lang.reflect.Type)localObject1;
          localStringBuilder.append((String)localObject2);
          localObject2 = File.separator;
          paramType = (java.lang.reflect.Type)localObject1;
          localStringBuilder.append((String)localObject2);
          paramType = (java.lang.reflect.Type)localObject1;
          localStringBuilder.append(str);
          paramType = (java.lang.reflect.Type)localObject1;
          localStringBuilder.append(".class");
          paramType = (java.lang.reflect.Type)localObject1;
          localObject1 = new FileOutputStream(localStringBuilder.toString());
          try
          {
            ((FileOutputStream)localObject1).write(arrayOfByte);
            ((FileOutputStream)localObject1).close();
          }
          catch (Throwable paramParserConfig)
          {
            paramType = (java.lang.reflect.Type)localObject1;
            break label353;
          }
          catch (Exception localException1) {}
          paramType = (java.lang.reflect.Type)localObject1;
        }
        catch (Throwable paramParserConfig) {}catch (Exception localException2)
        {
          localObject1 = localPrintStream;
        }
        localPrintStream = System.err;
        paramType = (java.lang.reflect.Type)localObject1;
        Object localObject2 = new StringBuilder();
        paramType = (java.lang.reflect.Type)localObject1;
        ((StringBuilder)localObject2).append("FASTJSON dump class:");
        paramType = (java.lang.reflect.Type)localObject1;
        ((StringBuilder)localObject2).append(str);
        paramType = (java.lang.reflect.Type)localObject1;
        ((StringBuilder)localObject2).append("??:");
        paramType = (java.lang.reflect.Type)localObject1;
        ((StringBuilder)localObject2).append(localException2.getMessage());
        paramType = (java.lang.reflect.Type)localObject1;
        localPrintStream.println(((StringBuilder)localObject2).toString());
        if (localObject1 != null)
        {
          ((FileOutputStream)localObject1).close();
          break label363;
          label353:
          if (paramType != null) {
            paramType.close();
          }
          throw paramParserConfig;
        }
      }
      label363:
      return (ObjectDeserializer)classLoader.defineClassPublic(str, arrayOfByte, 0, arrayOfByte.length).getConstructor(new Class[] { ParserConfig.class, Class.class }).newInstance(new Object[] { paramParserConfig, paramClass });
    }
    paramParserConfig = new StringBuilder();
    paramParserConfig.append("not support type :");
    paramParserConfig.append(paramClass.getName());
    throw new IllegalArgumentException(paramParserConfig.toString());
  }
  
  public FieldDeserializer createStringFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
    throws Exception
  {
    Class localClass = paramFieldInfo.getFieldClass();
    Method localMethod = paramFieldInfo.getMethod();
    String str = getGenFieldDeserializer(paramClass, paramFieldInfo);
    ClassWriter localClassWriter = new ClassWriter();
    if (localClass == Integer.TYPE) {
      localObject = IntegerFieldDeserializer.class;
    } else if (localClass == Long.TYPE) {
      localObject = LongFieldDeserializer.class;
    } else {
      localObject = StringFieldDeserializer.class;
    }
    int i;
    if (paramClass.isInterface()) {
      i = 185;
    } else {
      i = 182;
    }
    localClassWriter.visit(49, 33, str, ASMUtils.getType((Class)localObject), null);
    MethodVisitor localMethodVisitor = localClassWriter.visitMethod(1, "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;Lcom/alibaba/fastjson/util/FieldInfo;)V", null, null);
    localMethodVisitor.visitVarInsn(25, 0);
    localMethodVisitor.visitVarInsn(25, 1);
    localMethodVisitor.visitVarInsn(25, 2);
    localMethodVisitor.visitVarInsn(25, 3);
    localMethodVisitor.visitMethodInsn(183, ASMUtils.getType((Class)localObject), "<init>", "(Lcom/alibaba/fastjson/parser/ParserConfig;Ljava/lang/Class;Lcom/alibaba/fastjson/util/FieldInfo;)V");
    localMethodVisitor.visitInsn(177);
    localMethodVisitor.visitMaxs(4, 6);
    localMethodVisitor.visitEnd();
    if (localMethod != null) {
      if (localClass == Integer.TYPE)
      {
        localObject = localClassWriter.visitMethod(1, "setValue", "(Ljava/lang/Object;I)V", null, null);
        ((MethodVisitor)localObject).visitVarInsn(25, 1);
        ((MethodVisitor)localObject).visitTypeInsn(192, ASMUtils.getType(localMethod.getDeclaringClass()));
        ((MethodVisitor)localObject).visitVarInsn(21, 2);
        ((MethodVisitor)localObject).visitMethodInsn(i, ASMUtils.getType(localMethod.getDeclaringClass()), localMethod.getName(), ASMUtils.getDesc(localMethod));
        ((MethodVisitor)localObject).visitInsn(177);
        ((MethodVisitor)localObject).visitMaxs(3, 3);
        ((MethodVisitor)localObject).visitEnd();
      }
      else if (localClass == Long.TYPE)
      {
        localObject = localClassWriter.visitMethod(1, "setValue", "(Ljava/lang/Object;J)V", null, null);
        ((MethodVisitor)localObject).visitVarInsn(25, 1);
        ((MethodVisitor)localObject).visitTypeInsn(192, ASMUtils.getType(localMethod.getDeclaringClass()));
        ((MethodVisitor)localObject).visitVarInsn(22, 2);
        ((MethodVisitor)localObject).visitMethodInsn(i, ASMUtils.getType(localMethod.getDeclaringClass()), localMethod.getName(), ASMUtils.getDesc(localMethod));
        ((MethodVisitor)localObject).visitInsn(177);
        ((MethodVisitor)localObject).visitMaxs(3, 4);
        ((MethodVisitor)localObject).visitEnd();
      }
      else
      {
        localObject = localClassWriter.visitMethod(1, "setValue", "(Ljava/lang/Object;Ljava/lang/Object;)V", null, null);
        ((MethodVisitor)localObject).visitVarInsn(25, 1);
        ((MethodVisitor)localObject).visitTypeInsn(192, ASMUtils.getType(localMethod.getDeclaringClass()));
        ((MethodVisitor)localObject).visitVarInsn(25, 2);
        ((MethodVisitor)localObject).visitTypeInsn(192, ASMUtils.getType(localClass));
        ((MethodVisitor)localObject).visitMethodInsn(i, ASMUtils.getType(localMethod.getDeclaringClass()), localMethod.getName(), ASMUtils.getDesc(localMethod));
        ((MethodVisitor)localObject).visitInsn(177);
        ((MethodVisitor)localObject).visitMaxs(3, 3);
        ((MethodVisitor)localObject).visitEnd();
      }
    }
    Object localObject = localClassWriter.toByteArray();
    return (FieldDeserializer)classLoader.defineClassPublic(str, (byte[])localObject, 0, localObject.length).getConstructor(new Class[] { ParserConfig.class, Class.class, FieldInfo.class }).newInstance(new Object[] { paramParserConfig, paramClass, paramFieldInfo });
  }
  
  public String getGenClassName(Class paramClass)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Fastjson_ASM_");
    localStringBuilder.append(paramClass.getSimpleName());
    localStringBuilder.append("_");
    localStringBuilder.append(seed.incrementAndGet());
    return localStringBuilder.toString();
  }
  
  public String getGenFieldDeserializer(Class paramClass, FieldInfo paramFieldInfo)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Fastjson_ASM__Field_");
    localStringBuilder.append(paramClass.getSimpleName());
    paramClass = localStringBuilder.toString();
    localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramClass);
    localStringBuilder.append("_");
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("_");
    localStringBuilder.append(seed.incrementAndGet());
    return localStringBuilder.toString();
  }
  
  public boolean isExternalClass(Class paramClass)
  {
    return classLoader.isExternalClass(paramClass);
  }
  
  static class Context
  {
    private final DeserializeBeanInfo beanInfo;
    private String className;
    private Class<?> clazz;
    private List<FieldInfo> fieldInfoList;
    private int variantIndex = 5;
    private Map<String, Integer> variants = new HashMap();
    
    public Context(String paramString, ParserConfig paramParserConfig, DeserializeBeanInfo paramDeserializeBeanInfo, int paramInt)
    {
      className = paramString;
      clazz = paramDeserializeBeanInfo.getClazz();
      variantIndex = paramInt;
      beanInfo = paramDeserializeBeanInfo;
      fieldInfoList = new ArrayList(paramDeserializeBeanInfo.getFieldList());
    }
    
    public int attribute(String paramString)
    {
      if ((Integer)variants.get(paramString) == null)
      {
        Map localMap = variants;
        int i = variantIndex;
        variantIndex = (i + 1);
        localMap.put(paramString, Integer.valueOf(i));
      }
      return ((Integer)variants.get(paramString)).intValue();
    }
    
    public DeserializeBeanInfo getBeanInfo()
    {
      return beanInfo;
    }
    
    public String getClassName()
    {
      return className;
    }
    
    public Class getClazz()
    {
      return clazz;
    }
    
    public List getFieldInfoList()
    {
      return fieldInfoList;
    }
    
    public int getVariantCount()
    {
      return variantIndex;
    }
    
    public int remap(String paramString, int paramInt)
    {
      if ((Integer)variants.get(paramString) == null)
      {
        variants.put(paramString, Integer.valueOf(variantIndex));
        variantIndex += paramInt;
      }
      return ((Integer)variants.get(paramString)).intValue();
    }
  }
}
