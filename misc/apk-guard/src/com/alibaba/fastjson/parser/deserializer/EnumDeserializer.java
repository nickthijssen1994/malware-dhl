package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

public class EnumDeserializer
  implements ObjectDeserializer
{
  private final Class<?> enumClass;
  private final Map<String, Enum> nameMap = new HashMap();
  private final Map<Integer, Enum> ordinalMap = new HashMap();
  
  public EnumDeserializer(Class paramClass)
  {
    enumClass = paramClass;
    int i = 0;
    try
    {
      localObject = paramClass.getMethod("values", new Class[0]);
      localObject = ((Method)localObject).invoke(null, new Object[0]);
      localObject = (Object[])localObject;
      int j = localObject.length;
      while (i < j)
      {
        Enum localEnum = (Enum)localObject[i];
        Map localMap = ordinalMap;
        localMap.put(Integer.valueOf(localEnum.ordinal()), localEnum);
        localMap = nameMap;
        localMap.put(localEnum.name(), localEnum);
        i += 1;
      }
      return;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("init enum values error, ");
    ((StringBuilder)localObject).append(paramClass.getName());
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    try
    {
      paramType = paramDefaultJSONParser.getLexer();
      int i = paramType.token();
      if (i == 2)
      {
        paramDefaultJSONParser = Integer.valueOf(paramType.intValue());
        paramType.nextToken(16);
        paramType = ordinalMap;
        paramType = paramType.get(paramDefaultJSONParser);
        if (paramType != null) {
          return paramType;
        }
        paramType = new StringBuilder();
        paramType.append("parse enum ");
        paramObject = enumClass;
        paramType.append(paramObject.getName());
        paramType.append(" error, value : ");
        paramType.append(paramDefaultJSONParser);
        throw new JSONException(paramType.toString());
      }
      i = paramType.token();
      if (i == 4)
      {
        paramDefaultJSONParser = paramType.stringVal();
        paramType.nextToken(16);
        i = paramDefaultJSONParser.length();
        if (i == 0) {
          return null;
        }
        paramType = nameMap;
        paramType.get(paramDefaultJSONParser);
        paramType = enumClass;
        paramDefaultJSONParser = Enum.valueOf(paramType, paramDefaultJSONParser);
        return paramDefaultJSONParser;
      }
      i = paramType.token();
      if (i == 8)
      {
        paramType.nextToken(16);
        return null;
      }
      paramDefaultJSONParser = paramDefaultJSONParser.parse();
      paramType = new StringBuilder();
      paramType.append("parse enum ");
      paramObject = enumClass;
      paramType.append(paramObject.getName());
      paramType.append(" error, value : ");
      paramType.append(paramDefaultJSONParser);
      throw new JSONException(paramType.toString());
    }
    catch (Throwable paramDefaultJSONParser)
    {
      throw new JSONException(paramDefaultJSONParser.getMessage(), paramDefaultJSONParser);
    }
    catch (JSONException paramDefaultJSONParser)
    {
      throw paramDefaultJSONParser;
    }
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
}
