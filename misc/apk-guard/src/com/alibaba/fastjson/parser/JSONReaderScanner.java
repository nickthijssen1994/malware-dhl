package com.alibaba.fastjson.parser;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.Base64;
import com.alibaba.fastjson.util.IOUtils;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.lang.ref.SoftReference;

public final class JSONReaderScanner
  extends JSONLexerBase
{
  public static int BUF_INIT_LEN;
  private static final ThreadLocal<SoftReference<char[]>> BUF_REF_LOCAL = new ThreadLocal();
  private char[] buf;
  private int bufLength;
  private Reader reader;
  
  public JSONReaderScanner(Reader paramReader)
  {
    this(paramReader, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONReaderScanner(Reader paramReader, int paramInt)
  {
    reader = paramReader;
    features = paramInt;
    Object localObject = (SoftReference)BUF_REF_LOCAL.get();
    if (localObject != null)
    {
      buf = ((char[])((SoftReference)localObject).get());
      BUF_REF_LOCAL.set(null);
    }
    if (buf == null) {
      buf = new char[BUF_INIT_LEN];
    }
    localObject = buf;
    try
    {
      paramInt = paramReader.read((char[])localObject);
      bufLength = paramInt;
      len = -1;
      next();
      if (idx == 65279)
      {
        next();
        return;
      }
    }
    catch (IOException paramReader)
    {
      throw new JSONException(paramReader.getMessage(), paramReader);
    }
  }
  
  public JSONReaderScanner(String paramString)
  {
    this(paramString, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONReaderScanner(String paramString, int paramInt)
  {
    this(new StringReader(paramString), paramInt);
  }
  
  public JSONReaderScanner(char[] paramArrayOfChar, int paramInt)
  {
    this(paramArrayOfChar, paramInt, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONReaderScanner(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    this(new CharArrayReader(paramArrayOfChar, 0, paramInt1), paramInt2);
  }
  
  public final String addSymbol(int paramInt1, int paramInt2, int paramInt3, SymbolTable paramSymbolTable)
  {
    return paramSymbolTable.addSymbol(buf, paramInt1, paramInt2, paramInt3);
  }
  
  protected final void arrayCopy(int paramInt1, char[] paramArrayOfChar, int paramInt2, int paramInt3)
  {
    System.arraycopy(buf, paramInt1, paramArrayOfChar, paramInt2, paramInt3);
  }
  
  public byte[] bytesValue()
  {
    return Base64.decodeFast(buf, off + 1, buf);
  }
  
  public final boolean charArrayCompare(char[] paramArrayOfChar)
  {
    int i = 0;
    while (i < paramArrayOfChar.length)
    {
      if (charAt(len + i) != paramArrayOfChar[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public final char charAt(int paramInt)
  {
    int j = bufLength;
    int i = paramInt;
    if (paramInt >= j)
    {
      if (j == -1)
      {
        if (paramInt < buf) {
          return buf[paramInt];
        }
        return '\032';
      }
      i = j - len;
      if (i > 0) {
        System.arraycopy(buf, len, buf, 0, i);
      }
      Reader localReader = reader;
      char[] arrayOfChar = buf;
      j = buf.length;
      try
      {
        j = localReader.read(arrayOfChar, i, j - i);
        bufLength = j;
        j = bufLength;
        if (j != 0)
        {
          if (j == -1) {
            return '\032';
          }
          bufLength = (j + i);
          i = paramInt - len;
          off -= len;
          len = 0;
        }
        else
        {
          throw new JSONException("illegal stat, textLength is zero");
        }
      }
      catch (IOException localIOException)
      {
        throw new JSONException(localIOException.getMessage(), localIOException);
      }
    }
    return buf[i];
  }
  
  public void close()
  {
    super.close();
    BUF_REF_LOCAL.set(new SoftReference(buf));
    buf = null;
    IOUtils.close(reader);
  }
  
  protected final void copyTo(int paramInt1, int paramInt2, char[] paramArrayOfChar)
  {
    System.arraycopy(buf, paramInt1, paramArrayOfChar, 0, paramInt2);
  }
  
  public final int indexOf(char paramChar, int paramInt)
  {
    paramInt -= len;
    for (;;)
    {
      if (paramChar == charAt(len + paramInt)) {
        return paramInt + len;
      }
      if (paramChar == '\032') {
        return -1;
      }
      paramInt += 1;
    }
  }
  
  public boolean isEOF()
  {
    if ((bufLength != -1) && (len != buf.length)) {
      return (idx == '\032') && (len + 1 == buf.length);
    }
    return true;
  }
  
  public final char next()
  {
    int j = len + 1;
    len = j;
    int k = bufLength;
    int i = j;
    if (j >= k)
    {
      if (k == -1) {
        return '\032';
      }
      Object localObject;
      if (buf > 0)
      {
        j = bufLength - buf;
        i = j;
        if (idx == '"') {
          i = j - 1;
        }
        localObject = buf;
        System.arraycopy(localObject, i, localObject, 0, buf);
      }
      off = -1;
      j = buf;
      len = j;
      int m = len;
      k = buf.length - m;
      i = k;
      char[] arrayOfChar;
      if (k == 0)
      {
        localObject = new char[buf.length * 2];
        arrayOfChar = buf;
        i = buf.length;
      }
      try
      {
        System.arraycopy(arrayOfChar, 0, localObject, 0, i);
        buf = ((char[])localObject);
        i = buf.length - m;
        localObject = reader;
        arrayOfChar = buf;
        k = len;
        i = ((Reader)localObject).read(arrayOfChar, k, i);
        bufLength = i;
        i = bufLength;
        if (i != 0)
        {
          if (i == -1)
          {
            idx = '\032';
            return '\032';
          }
          bufLength = (i + len);
          i = j;
        }
        else
        {
          throw new JSONException("illegal stat, textLength is zero");
        }
      }
      catch (IOException localIOException)
      {
        throw new JSONException(localIOException.getMessage(), localIOException);
      }
    }
    char c = buf[i];
    idx = c;
    return c;
  }
  
  public final String numberString()
  {
    int j = off;
    int i = j;
    if (j == -1) {
      i = 0;
    }
    int m = charAt(buf + i - 1);
    int k = buf;
    if ((m != 76) && (m != 83) && (m != 66) && (m != 70))
    {
      j = k;
      if (m != 68) {}
    }
    else
    {
      j = k - 1;
    }
    return new String(buf, i, j);
  }
  
  public final String stringVal()
  {
    if (!hasSpecial)
    {
      int i = off + 1;
      if (i >= 0)
      {
        if (i <= buf.length - buf) {
          return new String(buf, i, buf);
        }
        throw new IllegalStateException();
      }
      throw new IllegalStateException();
    }
    return new String(sbuf, 0, buf);
  }
  
  public final String subString(int paramInt1, int paramInt2)
  {
    if (paramInt2 >= 0) {
      return new String(buf, paramInt1, paramInt2);
    }
    throw new StringIndexOutOfBoundsException(paramInt2);
  }
}
