package com.alibaba.fastjson.parser;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.ASMUtils;
import com.alibaba.fastjson.util.Base64;
import java.util.Calendar;
import java.util.Collection;
import java.util.Locale;
import java.util.TimeZone;

public final class JSONScanner
  extends JSONLexerBase
{
  protected static final char[] typeFieldName;
  public final int ISO8601_LEN_0 = 10;
  public final int ISO8601_LEN_1 = 19;
  public final int ISO8601_LEN_2 = 23;
  private boolean isAndroid = ASMUtils.isAndroid();
  private final String text;
  
  static
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("\"");
    localStringBuilder.append(JSON.DEFAULT_TYPE_KEY);
    localStringBuilder.append("\":\"");
    typeFieldName = localStringBuilder.toString().toCharArray();
  }
  
  public JSONScanner(String paramString)
  {
    this(paramString, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONScanner(String paramString, int paramInt)
  {
    features = paramInt;
    text = paramString;
    len = -1;
    next();
    if (idx == 65279) {
      next();
    }
  }
  
  public JSONScanner(char[] paramArrayOfChar, int paramInt)
  {
    this(paramArrayOfChar, paramInt, JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public JSONScanner(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    this(new String(paramArrayOfChar, 0, paramInt1), paramInt2);
  }
  
  static boolean charArrayCompare(String paramString, int paramInt, char[] paramArrayOfChar)
  {
    int j = paramArrayOfChar.length;
    if (j + paramInt > paramString.length()) {
      return false;
    }
    int i = 0;
    while (i < j)
    {
      if (paramArrayOfChar[i] != paramString.charAt(paramInt + i)) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  static boolean checkDate(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6, int paramInt1, int paramInt2)
  {
    if ((paramChar1 != '1') && (paramChar1 != '2')) {
      return false;
    }
    if (paramChar2 >= '0')
    {
      if (paramChar2 > '9') {
        return false;
      }
      if (paramChar3 >= '0')
      {
        if (paramChar3 > '9') {
          return false;
        }
        if (paramChar4 >= '0')
        {
          if (paramChar4 > '9') {
            return false;
          }
          if (paramChar5 == '0')
          {
            if (paramChar6 < '1') {
              break label190;
            }
            if (paramChar6 > '9') {
              return false;
            }
          }
          else
          {
            if (paramChar5 != '1') {
              break label190;
            }
            if ((paramChar6 != '0') && (paramChar6 != '1') && (paramChar6 != '2')) {
              return false;
            }
          }
          if (paramInt1 == 48)
          {
            if (paramInt2 < 49) {
              break label190;
            }
            if (paramInt2 > 57) {
              return false;
            }
          }
          else if ((paramInt1 != 49) && (paramInt1 != 50))
          {
            if ((paramInt1 != 51) || ((paramInt2 != 48) && (paramInt2 != 49))) {
              return false;
            }
          }
          else
          {
            if (paramInt2 < 48) {
              break label190;
            }
            if (paramInt2 > 57) {
              return false;
            }
          }
          return true;
        }
      }
    }
    label190:
    return false;
  }
  
  private boolean checkTime(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6)
  {
    if (paramChar1 == '0')
    {
      if (paramChar2 < '0') {
        break label151;
      }
      if (paramChar2 > '9') {
        return false;
      }
    }
    else if (paramChar1 == '1')
    {
      if (paramChar2 < '0') {
        break label151;
      }
      if (paramChar2 > '9') {
        return false;
      }
    }
    else
    {
      if ((paramChar1 != '2') || (paramChar2 < '0')) {
        break label151;
      }
      if (paramChar2 > '4') {
        return false;
      }
    }
    if ((paramChar3 >= '0') && (paramChar3 <= '5'))
    {
      if (paramChar4 < '0') {
        break label151;
      }
      if (paramChar4 > '9') {
        return false;
      }
    }
    else
    {
      if (paramChar3 != '6') {
        break label151;
      }
      if (paramChar4 != '0') {
        return false;
      }
    }
    if ((paramChar5 >= '0') && (paramChar5 <= '5'))
    {
      if (paramChar6 < '0') {
        break label151;
      }
      if (paramChar6 > '9') {
        return false;
      }
    }
    else
    {
      if (paramChar5 != '6') {
        break label151;
      }
      if (paramChar6 != '0') {
        return false;
      }
    }
    return true;
    label151:
    return false;
  }
  
  private void setCalendar(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6, char paramChar7, char paramChar8)
  {
    Locale localLocale = Locale.getDefault();
    calendar = Calendar.getInstance(TimeZone.getDefault(), localLocale);
    paramChar1 = JSONLexerBase.digits[paramChar1];
    paramChar2 = JSONLexerBase.digits[paramChar2];
    paramChar3 = JSONLexerBase.digits[paramChar3];
    paramChar4 = JSONLexerBase.digits[paramChar4];
    paramChar5 = JSONLexerBase.digits[paramChar5];
    paramChar6 = JSONLexerBase.digits[paramChar6];
    paramChar7 = JSONLexerBase.digits[paramChar7];
    paramChar8 = JSONLexerBase.digits[paramChar8];
    calendar.set(1, paramChar1 * '?' + paramChar2 * 'd' + paramChar3 * '\n' + paramChar4);
    calendar.set(2, paramChar5 * '\n' + paramChar6 - 1);
    calendar.set(5, paramChar7 * '\n' + paramChar8);
  }
  
  public final String addSymbol(int paramInt1, int paramInt2, int paramInt3, SymbolTable paramSymbolTable)
  {
    return paramSymbolTable.addSymbol(text, paramInt1, paramInt2, paramInt3);
  }
  
  protected final void arrayCopy(int paramInt1, char[] paramArrayOfChar, int paramInt2, int paramInt3)
  {
    text.getChars(paramInt1, paramInt3 + paramInt1, paramArrayOfChar, paramInt2);
  }
  
  public byte[] bytesValue()
  {
    return Base64.decodeFast(text, off + 1, buf);
  }
  
  public final boolean charArrayCompare(char[] paramArrayOfChar)
  {
    return charArrayCompare(text, len, paramArrayOfChar);
  }
  
  public final char charAt(int paramInt)
  {
    if (paramInt >= text.length()) {
      return '\032';
    }
    return text.charAt(paramInt);
  }
  
  protected final void copyTo(int paramInt1, int paramInt2, char[] paramArrayOfChar)
  {
    text.getChars(paramInt1, paramInt2 + paramInt1, paramArrayOfChar, 0);
  }
  
  public final int indexOf(char paramChar, int paramInt)
  {
    return text.indexOf(paramChar, paramInt);
  }
  
  public boolean isEOF()
  {
    if (len != text.length()) {
      return (idx == '\032') && (len + 1 == text.length());
    }
    return true;
  }
  
  public final char next()
  {
    int i = len + 1;
    len = i;
    char c = charAt(i);
    idx = c;
    return c;
  }
  
  public final String numberString()
  {
    int k = charAt(off + buf - 1);
    int j = buf;
    int i;
    if ((k != 76) && (k != 83) && (k != 66) && (k != 70))
    {
      i = j;
      if (k != 68) {}
    }
    else
    {
      i = j - 1;
    }
    return subString(off, i);
  }
  
  public boolean scanFieldBoolean(char[] paramArrayOfChar)
  {
    matchStat = 0;
    if (!charArrayCompare(text, len, paramArrayOfChar))
    {
      matchStat = -2;
      return false;
    }
    int j = len + paramArrayOfChar.length;
    int i = j + 1;
    j = charAt(j);
    boolean bool;
    if (j == 116)
    {
      j = i + 1;
      if (charAt(i) != 'r')
      {
        matchStat = -1;
        return false;
      }
      i = j + 1;
      if (charAt(j) != 'u')
      {
        matchStat = -1;
        return false;
      }
      if (charAt(i) != 'e')
      {
        matchStat = -1;
        return false;
      }
      len = (i + 1);
      i = charAt(len);
      bool = true;
    }
    else
    {
      if (j != 102) {
        break label445;
      }
      j = i + 1;
      if (charAt(i) != 'a')
      {
        matchStat = -1;
        return false;
      }
      i = j + 1;
      if (charAt(j) != 'l')
      {
        matchStat = -1;
        return false;
      }
      j = i + 1;
      if (charAt(i) != 's')
      {
        matchStat = -1;
        return false;
      }
      if (charAt(j) != 'e')
      {
        matchStat = -1;
        return false;
      }
      len = (j + 1);
      i = charAt(len);
      bool = false;
    }
    if (i == 44)
    {
      i = len + 1;
      len = i;
      idx = charAt(i);
      matchStat = 3;
      token = 16;
      return bool;
    }
    if (i == 125)
    {
      i = len + 1;
      len = i;
      i = charAt(i);
      if (i == 44)
      {
        token = 16;
        i = len + 1;
        len = i;
        idx = charAt(i);
      }
      else if (i == 93)
      {
        token = 15;
        i = len + 1;
        len = i;
        idx = charAt(i);
      }
      else if (i == 125)
      {
        token = 13;
        i = len + 1;
        len = i;
        idx = charAt(i);
      }
      else
      {
        if (i != 26) {
          break label431;
        }
        token = 20;
      }
      matchStat = 4;
      return bool;
      label431:
      matchStat = -1;
      return false;
    }
    matchStat = -1;
    return false;
    label445:
    matchStat = -1;
    return false;
  }
  
  public int scanFieldInt(char[] paramArrayOfChar)
  {
    matchStat = 0;
    int m = len;
    char c = idx;
    if (!charArrayCompare(text, len, paramArrayOfChar))
    {
      matchStat = -2;
      return 0;
    }
    int i = len + paramArrayOfChar.length;
    int j = i + 1;
    i = charAt(i);
    if ((i >= 48) && (i <= 57))
    {
      i = JSONLexerBase.digits[i];
      int k;
      for (;;)
      {
        k = j + 1;
        j = charAt(j);
        if ((j < 48) || (j > 57)) {
          break;
        }
        i = i * 10 + JSONLexerBase.digits[j];
        j = k;
      }
      if (j == 46)
      {
        matchStat = -1;
        return 0;
      }
      len = (k - 1);
      if (i < 0)
      {
        matchStat = -1;
        return 0;
      }
      if (j == 44)
      {
        j = len + 1;
        len = j;
        idx = charAt(j);
        matchStat = 3;
        token = 16;
        return i;
      }
      if (j == 125)
      {
        j = len + 1;
        len = j;
        j = charAt(j);
        if (j == 44)
        {
          token = 16;
          j = len + 1;
          len = j;
          idx = charAt(j);
        }
        else if (j == 93)
        {
          token = 15;
          j = len + 1;
          len = j;
          idx = charAt(j);
        }
        else if (j == 125)
        {
          token = 13;
          j = len + 1;
          len = j;
          idx = charAt(j);
        }
        else
        {
          if (j != 26) {
            break label369;
          }
          token = 20;
        }
        matchStat = 4;
        return i;
        label369:
        len = m;
        idx = c;
        matchStat = -1;
        return 0;
      }
      return i;
    }
    matchStat = -1;
    return 0;
  }
  
  public long scanFieldLong(char[] paramArrayOfChar)
  {
    matchStat = 0;
    int k = len;
    char c = idx;
    if (!charArrayCompare(text, len, paramArrayOfChar))
    {
      matchStat = -2;
      return 0L;
    }
    int j = len + paramArrayOfChar.length;
    int i = j + 1;
    j = charAt(j);
    if ((j >= 48) && (j <= 57))
    {
      long l = JSONLexerBase.digits[j];
      for (;;)
      {
        j = i + 1;
        i = charAt(i);
        if ((i < 48) || (i > 57)) {
          break;
        }
        l = l * 10L + JSONLexerBase.digits[i];
        i = j;
      }
      if (i == 46)
      {
        matchStat = -1;
        return 0L;
      }
      len = (j - 1);
      if (l < 0L)
      {
        len = k;
        idx = c;
        matchStat = -1;
        return 0L;
      }
      if (i == 44)
      {
        i = len + 1;
        len = i;
        idx = charAt(i);
        matchStat = 3;
        token = 16;
        return l;
      }
      if (i == 125)
      {
        i = len + 1;
        len = i;
        i = charAt(i);
        if (i == 44)
        {
          token = 16;
          i = len + 1;
          len = i;
          idx = charAt(i);
        }
        else if (i == 93)
        {
          token = 15;
          i = len + 1;
          len = i;
          idx = charAt(i);
        }
        else if (i == 125)
        {
          token = 13;
          i = len + 1;
          len = i;
          idx = charAt(i);
        }
        else
        {
          if (i != 26) {
            break label367;
          }
          token = 20;
        }
        matchStat = 4;
        return l;
        label367:
        len = k;
        idx = c;
        matchStat = -1;
        return 0L;
      }
      matchStat = -1;
      return 0L;
    }
    len = k;
    idx = c;
    matchStat = -1;
    return 0L;
  }
  
  public String scanFieldString(char[] paramArrayOfChar)
  {
    int k = 0;
    matchStat = 0;
    int m = len;
    char c1 = idx;
    if (!charArrayCompare(text, len, paramArrayOfChar))
    {
      matchStat = -2;
      return stringDefaultValue();
    }
    int j = len + paramArrayOfChar.length;
    int i = j + 1;
    if (charAt(j) != '"')
    {
      matchStat = -1;
      return stringDefaultValue();
    }
    int n = text.indexOf('"', i);
    if (n != -1)
    {
      paramArrayOfChar = subString(i, n - i);
      i = 0;
      for (;;)
      {
        j = k;
        if (i >= paramArrayOfChar.length()) {
          break;
        }
        if (paramArrayOfChar.charAt(i) == '\\')
        {
          j = 1;
          break;
        }
        i += 1;
      }
      if (j != 0)
      {
        matchStat = -1;
        return stringDefaultValue();
      }
      len = (n + 1);
      char c2 = charAt(len);
      idx = c2;
      if (c2 == ',')
      {
        i = len + 1;
        len = i;
        idx = charAt(i);
        matchStat = 3;
        return paramArrayOfChar;
      }
      if (c2 == '}')
      {
        i = len + 1;
        len = i;
        i = charAt(i);
        if (i == 44)
        {
          token = 16;
          i = len + 1;
          len = i;
          idx = charAt(i);
        }
        else if (i == 93)
        {
          token = 15;
          i = len + 1;
          len = i;
          idx = charAt(i);
        }
        else if (i == 125)
        {
          token = 13;
          i = len + 1;
          len = i;
          idx = charAt(i);
        }
        else
        {
          if (i != 26) {
            break label396;
          }
          token = 20;
        }
        matchStat = 4;
        return paramArrayOfChar;
        label396:
        len = m;
        idx = c1;
        matchStat = -1;
        return stringDefaultValue();
      }
      matchStat = -1;
      return stringDefaultValue();
    }
    throw new JSONException("unclosed str");
  }
  
  public Collection scanFieldStringArray(char[] paramArrayOfChar, Class paramClass)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a4 = a3\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer$LiveA.onUseLocal(UnSSATransformer.java:552)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer$LiveA.onUseLocal(UnSSATransformer.java:1)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.onUse(BaseAnalyze.java:166)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.onUse(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.travel(Cfg.java:331)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.travel(Cfg.java:387)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:90)\n\t... 17 more\n");
  }
  
  public String scanFieldSymbol(char[] paramArrayOfChar, SymbolTable paramSymbolTable)
  {
    matchStat = 0;
    if (!charArrayCompare(text, len, paramArrayOfChar))
    {
      matchStat = -2;
      return null;
    }
    int i = len + paramArrayOfChar.length;
    int k = i + 1;
    if (charAt(i) != '"')
    {
      matchStat = -1;
      return null;
    }
    int j = k;
    i = 0;
    for (;;)
    {
      int m = j + 1;
      j = charAt(j);
      if (j == 34)
      {
        len = m;
        char c = charAt(len);
        idx = c;
        paramArrayOfChar = paramSymbolTable.addSymbol(text, k, m - k - 1, i);
        if (c == ',')
        {
          i = len + 1;
          len = i;
          idx = charAt(i);
          matchStat = 3;
          return paramArrayOfChar;
        }
        if (c == '}')
        {
          i = len + 1;
          len = i;
          i = charAt(i);
          if (i == 44)
          {
            token = 16;
            i = len + 1;
            len = i;
            idx = charAt(i);
          }
          else if (i == 93)
          {
            token = 15;
            i = len + 1;
            len = i;
            idx = charAt(i);
          }
          else if (i == 125)
          {
            token = 13;
            i = len + 1;
            len = i;
            idx = charAt(i);
          }
          else
          {
            if (i != 26) {
              break label334;
            }
            token = 20;
          }
          matchStat = 4;
          return paramArrayOfChar;
          label334:
          matchStat = -1;
          return null;
        }
        matchStat = -1;
        return null;
      }
      i = i * 31 + j;
      if (j == 92)
      {
        matchStat = -1;
        return null;
      }
      j = m;
    }
  }
  
  public boolean scanISO8601DateIfMatch()
  {
    return scanISO8601DateIfMatch(true);
  }
  
  public boolean scanISO8601DateIfMatch(boolean paramBoolean)
  {
    int m = text.length() - len;
    int i;
    int j;
    int k;
    int n;
    int i1;
    int i2;
    Object localObject;
    if ((!paramBoolean) && (m > 13))
    {
      i = charAt(len);
      j = charAt(len + 1);
      k = charAt(len + 2);
      n = charAt(len + 3);
      i1 = charAt(len + 4);
      i2 = charAt(len + 5);
      int i3 = charAt(len + m - 1);
      int i4 = charAt(len + m - 2);
      if ((i == 47) && (j == 68) && (k == 97) && (n == 116) && (i1 == 101) && (i2 == 40) && (i3 == 47) && (i4 == 41))
      {
        i = 6;
        for (j = -1; i < m; j = k)
        {
          n = charAt(len + i);
          if (n == 43)
          {
            k = i;
          }
          else
          {
            if (n < 48) {
              break;
            }
            k = j;
            if (n > 57) {
              break;
            }
          }
          i += 1;
        }
        if (j == -1) {
          return false;
        }
        i = len + 6;
        long l = Long.parseLong(subString(i, j - i));
        localObject = Locale.getDefault();
        calendar = Calendar.getInstance(TimeZone.getDefault(), (Locale)localObject);
        calendar.setTimeInMillis(l);
        token = 5;
        return true;
      }
    }
    char c1;
    char c2;
    char c3;
    char c4;
    char c5;
    char c6;
    char c7;
    char c8;
    if ((m != 8) && (m != 14) && (m != 17))
    {
      if (m < ISO8601_LEN_0) {
        return false;
      }
      if (charAt(len + 4) != '-') {
        return false;
      }
      if (charAt(len + 7) != '-') {
        return false;
      }
      c1 = charAt(len);
      c2 = charAt(len + 1);
      c3 = charAt(len + 2);
      c4 = charAt(len + 3);
      c5 = charAt(len + 5);
      c6 = charAt(len + 6);
      c7 = charAt(len + 8);
      c8 = charAt(len + 9);
      if (!checkDate(c1, c2, c3, c4, c5, c6, c7, c8)) {
        return false;
      }
      setCalendar(c1, c2, c3, c4, c5, c6, c7, c8);
      i = charAt(len + 10);
      if ((i != 84) && ((i != 32) || (paramBoolean)))
      {
        if ((i != 34) && (i != 26)) {
          return false;
        }
        calendar.set(11, 0);
        calendar.set(12, 0);
        calendar.set(13, 0);
        calendar.set(14, 0);
        i = len + 10;
        len = i;
        idx = charAt(i);
        token = 5;
        return true;
      }
      if (m < ISO8601_LEN_1) {
        return false;
      }
      if (charAt(len + 13) != ':') {
        return false;
      }
      if (charAt(len + 16) != ':') {
        return false;
      }
      c1 = charAt(len + 11);
      c2 = charAt(len + 12);
      c3 = charAt(len + 14);
      c4 = charAt(len + 15);
      c5 = charAt(len + 17);
      c6 = charAt(len + 18);
      if (!checkTime(c1, c2, c3, c4, c5, c6)) {
        return false;
      }
      i = JSONLexerBase.digits[c1];
      j = JSONLexerBase.digits[c2];
      k = JSONLexerBase.digits[c3];
      n = JSONLexerBase.digits[c4];
      i1 = JSONLexerBase.digits[c5];
      i2 = JSONLexerBase.digits[c6];
      calendar.set(11, i * 10 + j);
      calendar.set(12, k * 10 + n);
      calendar.set(13, i1 * 10 + i2);
      i = charAt(len + 19);
      if (i == 46)
      {
        if (m < ISO8601_LEN_2) {
          return false;
        }
        i = charAt(len + 20);
        if (i >= 48)
        {
          if (i > 57) {
            return false;
          }
          i = JSONLexerBase.digits[i];
          j = charAt(len + 21);
          if ((j >= 48) && (j <= 57))
          {
            i = i * 10 + JSONLexerBase.digits[j];
            j = 2;
          }
          else
          {
            j = 1;
          }
          m = i;
          k = j;
          if (j == 2)
          {
            n = charAt(len + 22);
            m = i;
            k = j;
            if (n >= 48)
            {
              m = i;
              k = j;
              if (n <= 57)
              {
                m = i * 10 + JSONLexerBase.digits[n];
                k = 3;
              }
            }
          }
          calendar.set(14, m);
          n = charAt(len + 20 + k);
          if ((n != 43) && (n != 45))
          {
            if (n == 90)
            {
              if (calendar.getTimeZone().getRawOffset() != 0)
              {
                localObject = TimeZone.getAvailableIDs(0);
                if (localObject.length > 0)
                {
                  localObject = TimeZone.getTimeZone(localObject[0]);
                  calendar.setTimeZone((TimeZone)localObject);
                }
              }
              j = 1;
            }
            else
            {
              j = 0;
            }
          }
          else
          {
            j = charAt(len + 20 + k + 1);
            if (j < 48) {
              break label1549;
            }
            if (j > 49) {
              return false;
            }
            m = charAt(len + 20 + k + 2);
            if (m < 48) {
              break label1549;
            }
            if (m > 57) {
              return false;
            }
            i = charAt(len + 20 + k + 3);
            if (i == 58)
            {
              if (charAt(len + 20 + k + 4) != '0') {
                return false;
              }
              if (charAt(len + 20 + k + 5) != '0') {
                return false;
              }
              i = 6;
            }
            else if (i == 48)
            {
              if (charAt(len + 20 + k + 4) != '0') {
                return false;
              }
              i = 5;
            }
            else
            {
              i = 3;
            }
            j = (JSONLexerBase.digits[j] * 10 + JSONLexerBase.digits[m]) * 3600 * 1000;
            m = j;
            if (n == 45) {
              m = -j;
            }
            j = i;
            if (calendar.getTimeZone().getRawOffset() != m)
            {
              localObject = TimeZone.getAvailableIDs(m);
              j = i;
              if (localObject.length > 0)
              {
                localObject = TimeZone.getTimeZone(localObject[0]);
                calendar.setTimeZone((TimeZone)localObject);
                j = i;
              }
            }
          }
          i = len;
          j = k + 20 + j;
          i = charAt(i + j);
          if ((i != 26) && (i != 34)) {
            return false;
          }
          i = len + j;
          len = i;
          idx = charAt(i);
          token = 5;
          return true;
        }
        label1549:
        return false;
      }
      calendar.set(14, 0);
      j = len + 19;
      len = j;
      idx = charAt(j);
      token = 5;
      if ((i == 90) && (calendar.getTimeZone().getRawOffset() != 0))
      {
        localObject = TimeZone.getAvailableIDs(0);
        if (localObject.length > 0)
        {
          localObject = TimeZone.getTimeZone(localObject[0]);
          calendar.setTimeZone((TimeZone)localObject);
          return true;
        }
      }
    }
    else
    {
      if (paramBoolean) {
        return false;
      }
      c1 = charAt(len);
      c2 = charAt(len + 1);
      c3 = charAt(len + 2);
      c4 = charAt(len + 3);
      c5 = charAt(len + 4);
      c6 = charAt(len + 5);
      c7 = charAt(len + 6);
      c8 = charAt(len + 7);
      if (!checkDate(c1, c2, c3, c4, c5, c6, c7, c8)) {
        return false;
      }
      setCalendar(c1, c2, c3, c4, c5, c6, c7, c8);
      if (m != 8)
      {
        c1 = charAt(len + 8);
        c2 = charAt(len + 9);
        c3 = charAt(len + 10);
        c4 = charAt(len + 11);
        c5 = charAt(len + 12);
        c6 = charAt(len + 13);
        if (!checkTime(c1, c2, c3, c4, c5, c6)) {
          return false;
        }
        if (m == 17)
        {
          i = charAt(len + 14);
          j = charAt(len + 15);
          k = charAt(len + 16);
          if (i >= 48)
          {
            if (i > 57) {
              return false;
            }
            if (j >= 48)
            {
              if (j > 57) {
                return false;
              }
              if (k >= 48)
              {
                if (k > 57) {
                  return false;
                }
                i = JSONLexerBase.digits[i] * 100 + JSONLexerBase.digits[j] * 10 + JSONLexerBase.digits[k];
                break label2015;
              }
            }
          }
          return false;
        }
        else
        {
          i = 0;
        }
        label2015:
        j = JSONLexerBase.digits[c1] * 10 + JSONLexerBase.digits[c2];
        k = JSONLexerBase.digits[c3] * 10 + JSONLexerBase.digits[c4];
        m = JSONLexerBase.digits[c5] * 10 + JSONLexerBase.digits[c6];
      }
      else
      {
        j = 0;
        k = 0;
        m = 0;
        i = 0;
      }
      calendar.set(11, j);
      calendar.set(12, k);
      calendar.set(13, m);
      calendar.set(14, i);
      token = 5;
    }
    return true;
  }
  
  public final int scanType(String paramString)
  {
    int i = 0;
    matchStat = 0;
    if (!charArrayCompare(text, len, typeFieldName)) {
      return -2;
    }
    int j = len + typeFieldName.length;
    int k = paramString.length();
    while (i < k)
    {
      if (paramString.charAt(i) != charAt(j + i)) {
        return -1;
      }
      i += 1;
    }
    i = j + k;
    if (charAt(i) != '"') {
      return -1;
    }
    j = i + 1;
    idx = charAt(j);
    if (idx == ',')
    {
      i = j + 1;
      idx = charAt(i);
      len = i;
      token = 16;
      return 3;
    }
    i = j;
    if (idx == '}')
    {
      i = j + 1;
      idx = charAt(i);
      if (idx == ',')
      {
        token = 16;
        i += 1;
        idx = charAt(i);
      }
      else if (idx == ']')
      {
        token = 15;
        i += 1;
        idx = charAt(i);
      }
      else if (idx == '}')
      {
        token = 13;
        i += 1;
        idx = charAt(i);
      }
      else
      {
        if (idx != '\032') {
          break label278;
        }
        token = 20;
      }
      matchStat = 4;
      break label280;
      label278:
      return -1;
    }
    label280:
    len = i;
    return matchStat;
  }
  
  public final String stringVal()
  {
    if (!hasSpecial) {
      return subString(off + 1, buf);
    }
    return new String(sbuf, 0, buf);
  }
  
  public final String subString(int paramInt1, int paramInt2)
  {
    if (isAndroid)
    {
      char[] arrayOfChar = new char[paramInt2];
      int i = paramInt1;
      while (i < paramInt1 + paramInt2)
      {
        arrayOfChar[(i - paramInt1)] = text.charAt(i);
        i += 1;
      }
      return new String(arrayOfChar);
    }
    return text.substring(paramInt1, paramInt2 + paramInt1);
  }
}
