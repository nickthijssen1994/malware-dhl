package com.alibaba.fastjson.parser;

import com.alibaba.fastjson.JSON;

public class SymbolTable
{
  public static final int DEFAULT_TABLE_SIZE = 512;
  public static final int MAX_BUCKET_LENTH = 8;
  public static final int MAX_SIZE = 4096;
  private final Entry[] buckets;
  private final int indexMask;
  private int size = 0;
  private final String[] symbols;
  private final char[][] symbols_char;
  
  public SymbolTable()
  {
    this(512);
    addSymbol("$ref", 0, 4, "$ref".hashCode());
    addSymbol(JSON.DEFAULT_TYPE_KEY, 0, 5, JSON.DEFAULT_TYPE_KEY.hashCode());
  }
  
  public SymbolTable(int paramInt)
  {
    indexMask = (paramInt - 1);
    buckets = new Entry[paramInt];
    symbols = new String[paramInt];
    symbols_char = new char[paramInt][];
  }
  
  public static int hash(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    int i = 0;
    int j = 0;
    while (i < paramInt2)
    {
      j = j * 31 + paramArrayOfChar[paramInt1];
      i += 1;
      paramInt1 += 1;
    }
    return j;
  }
  
  private static String subString(String paramString, int paramInt1, int paramInt2)
  {
    char[] arrayOfChar = new char[paramInt2];
    int i = paramInt1;
    while (i < paramInt1 + paramInt2)
    {
      arrayOfChar[(i - paramInt1)] = paramString.charAt(i);
      i += 1;
    }
    return new String(arrayOfChar);
  }
  
  public String addSymbol(String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    int m = indexMask & paramInt3;
    Object localObject = symbols[m];
    char[] arrayOfChar;
    int i;
    if (localObject != null)
    {
      if (((String)localObject).length() == paramInt2)
      {
        arrayOfChar = symbols_char[m];
        i = 0;
        while (i < paramInt2)
        {
          if (paramString.charAt(paramInt1 + i) != arrayOfChar[i])
          {
            j = 0;
            break label84;
          }
          i += 1;
        }
        j = 1;
        label84:
        i = j;
        if (j != 0) {
          return localObject;
        }
      }
      else
      {
        i = 0;
      }
    }
    else {
      i = 1;
    }
    localObject = buckets[m];
    int k;
    for (int j = 0; localObject != null; j = k)
    {
      arrayOfChar = characters;
      k = j;
      if (paramInt2 == arrayOfChar.length)
      {
        k = j;
        if (paramInt3 == hashCode)
        {
          k = 0;
          while (k < paramInt2)
          {
            if (paramString.charAt(paramInt1 + k) != arrayOfChar[k])
            {
              k = 0;
              break label197;
            }
            k += 1;
          }
          k = 1;
          label197:
          if (k == 0) {
            k = j + 1;
          } else {
            return symbol;
          }
        }
      }
      localObject = next;
    }
    if (j >= 8) {
      return subString(paramString, paramInt1, paramInt2);
    }
    if (size >= 4096) {
      return subString(paramString, paramInt1, paramInt2);
    }
    paramString = new Entry(paramString, paramInt1, paramInt2, paramInt3, buckets[m]);
    buckets[m] = paramString;
    if (i != 0)
    {
      symbols[m] = symbol;
      symbols_char[m] = characters;
    }
    size += 1;
    return symbol;
  }
  
  public String addSymbol(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    return addSymbol(paramArrayOfChar, paramInt1, paramInt2, hash(paramArrayOfChar, paramInt1, paramInt2));
  }
  
  public String addSymbol(char[] paramArrayOfChar, int paramInt1, int paramInt2, int paramInt3)
  {
    int m = indexMask & paramInt3;
    Object localObject = symbols[m];
    char[] arrayOfChar;
    int i;
    if (localObject != null)
    {
      if (((String)localObject).length() == paramInt2)
      {
        arrayOfChar = symbols_char[m];
        i = 0;
        while (i < paramInt2)
        {
          if (paramArrayOfChar[(paramInt1 + i)] != arrayOfChar[i])
          {
            j = 0;
            break label82;
          }
          i += 1;
        }
        j = 1;
        label82:
        i = j;
        if (j != 0) {
          return localObject;
        }
      }
      else
      {
        i = 0;
      }
    }
    else {
      i = 1;
    }
    localObject = buckets[m];
    int k;
    for (int j = 0; localObject != null; j = k)
    {
      arrayOfChar = characters;
      k = j;
      if (paramInt2 == arrayOfChar.length)
      {
        k = j;
        if (paramInt3 == hashCode)
        {
          k = 0;
          while (k < paramInt2)
          {
            if (paramArrayOfChar[(paramInt1 + k)] != arrayOfChar[k])
            {
              k = 0;
              break label193;
            }
            k += 1;
          }
          k = 1;
          label193:
          if (k == 0) {
            k = j + 1;
          } else {
            return symbol;
          }
        }
      }
      localObject = next;
    }
    if (j >= 8) {
      return new String(paramArrayOfChar, paramInt1, paramInt2);
    }
    if (size >= 4096) {
      return new String(paramArrayOfChar, paramInt1, paramInt2);
    }
    paramArrayOfChar = new Entry(paramArrayOfChar, paramInt1, paramInt2, paramInt3, buckets[m]);
    buckets[m] = paramArrayOfChar;
    if (i != 0)
    {
      symbols[m] = symbol;
      symbols_char[m] = characters;
    }
    size += 1;
    return symbol;
  }
  
  public int size()
  {
    return size;
  }
  
  protected static final class Entry
  {
    public final byte[] bytes;
    public final char[] characters;
    public final int hashCode;
    public Entry next;
    public final String symbol;
    
    public Entry(String paramString, int paramInt1, int paramInt2, int paramInt3, Entry paramEntry)
    {
      symbol = SymbolTable.subString(paramString, paramInt1, paramInt2).intern();
      characters = symbol.toCharArray();
      next = paramEntry;
      hashCode = paramInt3;
      bytes = null;
    }
    
    public Entry(char[] paramArrayOfChar, int paramInt1, int paramInt2, int paramInt3, Entry paramEntry)
    {
      characters = new char[paramInt2];
      System.arraycopy(paramArrayOfChar, paramInt1, characters, 0, paramInt2);
      symbol = new String(characters).intern();
      next = paramEntry;
      hashCode = paramInt3;
      bytes = null;
    }
  }
}
