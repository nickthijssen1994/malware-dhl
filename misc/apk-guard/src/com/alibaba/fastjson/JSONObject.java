package com.alibaba.fastjson;

import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class JSONObject
  extends JSON
  implements Serializable, Cloneable, InvocationHandler, Map<String, Object>
{
  private static final int DEFAULT_INITIAL_CAPACITY = 16;
  private static final long serialVersionUID = 1L;
  private final Map<String, Object> data;
  
  public JSONObject()
  {
    this(16, false);
  }
  
  public JSONObject(int paramInt)
  {
    this(paramInt, false);
  }
  
  public JSONObject(int paramInt, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      data = new LinkedHashMap(paramInt);
      return;
    }
    data = new HashMap(paramInt);
  }
  
  public JSONObject(Map paramMap)
  {
    data = paramMap;
  }
  
  public JSONObject(boolean paramBoolean)
  {
    this(16, paramBoolean);
  }
  
  public void clear()
  {
    data.clear();
  }
  
  public Object clone()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a3 = a2\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer$LiveA.onUseLocal(UnSSATransformer.java:552)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer$LiveA.onUseLocal(UnSSATransformer.java:1)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.onUse(BaseAnalyze.java:166)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.onUse(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.travel(Cfg.java:331)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.travel(Cfg.java:387)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:90)\n\t... 17 more\n");
  }
  
  public boolean containsKey(Object paramObject)
  {
    return data.containsKey(paramObject);
  }
  
  public boolean containsValue(Object paramObject)
  {
    return data.containsValue(paramObject);
  }
  
  public Set entrySet()
  {
    return data.entrySet();
  }
  
  public boolean equals(Object paramObject)
  {
    return data.equals(paramObject);
  }
  
  public Object get(Object paramObject)
  {
    return data.get(paramObject);
  }
  
  public BigDecimal getBigDecimal(String paramString)
  {
    return TypeUtils.castToBigDecimal(get(paramString));
  }
  
  public BigInteger getBigInteger(String paramString)
  {
    return TypeUtils.castToBigInteger(get(paramString));
  }
  
  public Boolean getBoolean(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return null;
    }
    return TypeUtils.castToBoolean(paramString);
  }
  
  public boolean getBooleanValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return false;
    }
    return TypeUtils.castToBoolean(paramString).booleanValue();
  }
  
  public Byte getByte(String paramString)
  {
    return TypeUtils.castToByte(get(paramString));
  }
  
  public byte getByteValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return 0;
    }
    return TypeUtils.castToByte(paramString).byteValue();
  }
  
  public byte[] getBytes(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return null;
    }
    return TypeUtils.castToBytes(paramString);
  }
  
  public java.util.Date getDate(String paramString)
  {
    return TypeUtils.castToDate(get(paramString));
  }
  
  public Double getDouble(String paramString)
  {
    return TypeUtils.castToDouble(get(paramString));
  }
  
  public double getDoubleValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return 0.0D;
    }
    return TypeUtils.castToDouble(paramString).doubleValue();
  }
  
  public Float getFloat(String paramString)
  {
    return TypeUtils.castToFloat(get(paramString));
  }
  
  public float getFloatValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return 0.0F;
    }
    return TypeUtils.castToFloat(paramString).floatValue();
  }
  
  public int getIntValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return 0;
    }
    return TypeUtils.castToInt(paramString).intValue();
  }
  
  public Integer getInteger(String paramString)
  {
    return TypeUtils.castToInt(get(paramString));
  }
  
  public JSONArray getJSONArray(String paramString)
  {
    paramString = data.get(paramString);
    if ((paramString instanceof JSONArray)) {
      return (JSONArray)paramString;
    }
    return (JSONArray)JSON.toJSON(paramString);
  }
  
  public JSONObject getJSONObject(String paramString)
  {
    paramString = data.get(paramString);
    if ((paramString instanceof JSONObject)) {
      return (JSONObject)paramString;
    }
    return (JSONObject)JSON.toJSON(paramString);
  }
  
  public Long getLong(String paramString)
  {
    return TypeUtils.castToLong(get(paramString));
  }
  
  public long getLongValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return 0L;
    }
    return TypeUtils.castToLong(paramString).longValue();
  }
  
  public Object getObject(String paramString, Class paramClass)
  {
    return TypeUtils.castToJavaBean(data.get(paramString), paramClass);
  }
  
  public Short getShort(String paramString)
  {
    return TypeUtils.castToShort(get(paramString));
  }
  
  public short getShortValue(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return 0;
    }
    return TypeUtils.castToShort(paramString).shortValue();
  }
  
  public java.sql.Date getSqlDate(String paramString)
  {
    return TypeUtils.castToSqlDate(get(paramString));
  }
  
  public String getString(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return null;
    }
    return paramString.toString();
  }
  
  public Timestamp getTimestamp(String paramString)
  {
    return TypeUtils.castToTimestamp(get(paramString));
  }
  
  public int hashCode()
  {
    return data.hashCode();
  }
  
  public Object invoke(Object paramObject, Method paramMethod, Object[] paramArrayOfObject)
    throws Throwable
  {
    paramObject = paramMethod.getParameterTypes();
    int i = paramObject.length;
    Object localObject = null;
    if (i == 1)
    {
      if (paramMethod.getName().equals("equals")) {
        return Boolean.valueOf(equals(paramArrayOfObject[0]));
      }
      if (paramMethod.getReturnType() == Void.TYPE)
      {
        paramObject = (JSONField)paramMethod.getAnnotation(JSONField.class);
        if ((paramObject != null) && (paramObject.name().length() != 0)) {
          paramObject = paramObject.name();
        } else {
          paramObject = null;
        }
        localObject = paramObject;
        if (paramObject == null)
        {
          paramObject = paramMethod.getName();
          if (paramObject.startsWith("set"))
          {
            paramObject = paramObject.substring(3);
            if (paramObject.length() != 0)
            {
              paramMethod = new StringBuilder();
              paramMethod.append(Character.toLowerCase(paramObject.charAt(0)));
              paramMethod.append(paramObject.substring(1));
              localObject = paramMethod.toString();
            }
            else
            {
              throw new JSONException("illegal setter");
            }
          }
          else
          {
            throw new JSONException("illegal setter");
          }
        }
        data.put(localObject, paramArrayOfObject[0]);
        return null;
      }
      throw new JSONException("illegal setter");
    }
    if (paramObject.length == 0)
    {
      if (paramMethod.getReturnType() != Void.TYPE)
      {
        paramArrayOfObject = (JSONField)paramMethod.getAnnotation(JSONField.class);
        paramObject = localObject;
        if (paramArrayOfObject != null)
        {
          paramObject = localObject;
          if (paramArrayOfObject.name().length() != 0) {
            paramObject = paramArrayOfObject.name();
          }
        }
        paramArrayOfObject = paramObject;
        if (paramObject == null)
        {
          paramObject = paramMethod.getName();
          if (paramObject.startsWith("get"))
          {
            paramObject = paramObject.substring(3);
            if (paramObject.length() != 0)
            {
              paramArrayOfObject = new StringBuilder();
              paramArrayOfObject.append(Character.toLowerCase(paramObject.charAt(0)));
              paramArrayOfObject.append(paramObject.substring(1));
              paramArrayOfObject = paramArrayOfObject.toString();
            }
            else
            {
              throw new JSONException("illegal getter");
            }
          }
          else if (paramObject.startsWith("is"))
          {
            paramObject = paramObject.substring(2);
            if (paramObject.length() != 0)
            {
              paramArrayOfObject = new StringBuilder();
              paramArrayOfObject.append(Character.toLowerCase(paramObject.charAt(0)));
              paramArrayOfObject.append(paramObject.substring(1));
              paramArrayOfObject = paramArrayOfObject.toString();
            }
            else
            {
              throw new JSONException("illegal getter");
            }
          }
          else
          {
            if (paramObject.startsWith("hashCode")) {
              return Integer.valueOf(hashCode());
            }
            if (paramObject.startsWith("toString")) {
              return toString();
            }
            throw new JSONException("illegal getter");
          }
        }
        return TypeUtils.cast(data.get(paramArrayOfObject), paramMethod.getGenericReturnType(), ParserConfig.getGlobalInstance());
      }
      throw new JSONException("illegal getter");
    }
    throw new UnsupportedOperationException(paramMethod.toGenericString());
  }
  
  public boolean isEmpty()
  {
    return data.isEmpty();
  }
  
  public Set keySet()
  {
    return data.keySet();
  }
  
  public Object put(String paramString, Object paramObject)
  {
    return data.put(paramString, paramObject);
  }
  
  public void putAll(Map paramMap)
  {
    data.putAll(paramMap);
  }
  
  public Object remove(Object paramObject)
  {
    return data.remove(paramObject);
  }
  
  public int size()
  {
    return data.size();
  }
  
  public Collection values()
  {
    return data.values();
  }
}
