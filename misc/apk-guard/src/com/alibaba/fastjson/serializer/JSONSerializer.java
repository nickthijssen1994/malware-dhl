package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSONException;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.IdentityHashMap;
import java.util.List;

public class JSONSerializer
{
  private List<AfterFilter> afterFilters = null;
  private List<BeforeFilter> beforeFilters = null;
  private final SerializeConfig config;
  private SerialContext context;
  private DateFormat dateFormat;
  private String dateFormatPattern;
  private String indent = "\t";
  private int indentCount = 0;
  private List<LabelFilter> labelFilters = null;
  private List<NameFilter> nameFilters = null;
  private final SerializeWriter out;
  private List<PropertyFilter> propertyFilters = null;
  private List<PropertyPreFilter> propertyPreFilters = null;
  private IdentityHashMap<Object, SerialContext> references = null;
  private List<ValueFilter> valueFilters = null;
  
  public JSONSerializer()
  {
    this(new SerializeWriter(), SerializeConfig.getGlobalInstance());
  }
  
  public JSONSerializer(JSONSerializerMap paramJSONSerializerMap)
  {
    this(new SerializeWriter(), paramJSONSerializerMap);
  }
  
  public JSONSerializer(SerializeConfig paramSerializeConfig)
  {
    this(new SerializeWriter(), paramSerializeConfig);
  }
  
  public JSONSerializer(SerializeWriter paramSerializeWriter)
  {
    this(paramSerializeWriter, SerializeConfig.getGlobalInstance());
  }
  
  public JSONSerializer(SerializeWriter paramSerializeWriter, SerializeConfig paramSerializeConfig)
  {
    out = paramSerializeWriter;
    config = paramSerializeConfig;
  }
  
  public static void write(SerializeWriter paramSerializeWriter, Object paramObject)
  {
    new JSONSerializer(paramSerializeWriter).write(paramObject);
  }
  
  public static void write(Writer paramWriter, Object paramObject)
  {
    SerializeWriter localSerializeWriter = new SerializeWriter();
    try
    {
      new JSONSerializer(localSerializeWriter).write(paramObject);
      localSerializeWriter.writeTo(paramWriter);
      localSerializeWriter.close();
      return;
    }
    catch (Throwable paramWriter) {}catch (IOException paramWriter)
    {
      throw new JSONException(paramWriter.getMessage(), paramWriter);
    }
    localSerializeWriter.close();
    throw paramWriter;
  }
  
  public void close()
  {
    out.close();
  }
  
  public void config(SerializerFeature paramSerializerFeature, boolean paramBoolean)
  {
    out.config(paramSerializerFeature, paramBoolean);
  }
  
  public boolean containsReference(Object paramObject)
  {
    IdentityHashMap localIdentityHashMap = references;
    if (localIdentityHashMap == null) {
      return false;
    }
    return localIdentityHashMap.containsKey(paramObject);
  }
  
  public void decrementIdent()
  {
    indentCount -= 1;
  }
  
  public List getAfterFilters()
  {
    if (afterFilters == null) {
      afterFilters = new ArrayList();
    }
    return afterFilters;
  }
  
  public List getAfterFiltersDirect()
  {
    return afterFilters;
  }
  
  public List getBeforeFilters()
  {
    if (beforeFilters == null) {
      beforeFilters = new ArrayList();
    }
    return beforeFilters;
  }
  
  public List getBeforeFiltersDirect()
  {
    return beforeFilters;
  }
  
  public SerialContext getContext()
  {
    return context;
  }
  
  public DateFormat getDateFormat()
  {
    if (dateFormat == null)
    {
      String str = dateFormatPattern;
      if (str != null) {
        dateFormat = new SimpleDateFormat(str);
      }
    }
    return dateFormat;
  }
  
  public String getDateFormatPattern()
  {
    DateFormat localDateFormat = dateFormat;
    if ((localDateFormat instanceof SimpleDateFormat)) {
      return ((SimpleDateFormat)localDateFormat).toPattern();
    }
    return dateFormatPattern;
  }
  
  public int getIndentCount()
  {
    return indentCount;
  }
  
  public List getLabelFilters()
  {
    if (labelFilters == null) {
      labelFilters = new ArrayList();
    }
    return labelFilters;
  }
  
  public List getLabelFiltersDirect()
  {
    return labelFilters;
  }
  
  public SerializeConfig getMapping()
  {
    return config;
  }
  
  public List getNameFilters()
  {
    if (nameFilters == null) {
      nameFilters = new ArrayList();
    }
    return nameFilters;
  }
  
  public List getNameFiltersDirect()
  {
    return nameFilters;
  }
  
  public ObjectSerializer getObjectWriter(Class paramClass)
  {
    return config.getObjectWriter(paramClass);
  }
  
  public List getPropertyFilters()
  {
    if (propertyFilters == null) {
      propertyFilters = new ArrayList();
    }
    return propertyFilters;
  }
  
  public List getPropertyFiltersDirect()
  {
    return propertyFilters;
  }
  
  public List getPropertyPreFilters()
  {
    if (propertyPreFilters == null) {
      propertyPreFilters = new ArrayList();
    }
    return propertyPreFilters;
  }
  
  public List getPropertyPreFiltersDirect()
  {
    return propertyPreFilters;
  }
  
  public SerialContext getSerialContext(Object paramObject)
  {
    IdentityHashMap localIdentityHashMap = references;
    if (localIdentityHashMap == null) {
      return null;
    }
    return (SerialContext)localIdentityHashMap.get(paramObject);
  }
  
  public List getValueFilters()
  {
    if (valueFilters == null) {
      valueFilters = new ArrayList();
    }
    return valueFilters;
  }
  
  public List getValueFiltersDirect()
  {
    return valueFilters;
  }
  
  public SerializeWriter getWriter()
  {
    return out;
  }
  
  public void incrementIndent()
  {
    indentCount += 1;
  }
  
  public boolean isEnabled(SerializerFeature paramSerializerFeature)
  {
    return out.isEnabled(paramSerializerFeature);
  }
  
  public final boolean isWriteClassName(Type paramType, Object paramObject)
  {
    if (!out.isEnabled(SerializerFeature.WriteClassName)) {
      return false;
    }
    if ((paramType == null) && (isEnabled(SerializerFeature.NotWriteRootClassName)))
    {
      int i;
      if (context.getParent() == null) {
        i = 1;
      } else {
        i = 0;
      }
      if (i != 0) {
        return false;
      }
    }
    return true;
  }
  
  public void popContext()
  {
    SerialContext localSerialContext = context;
    if (localSerialContext != null) {
      context = localSerialContext.getParent();
    }
  }
  
  public void println()
  {
    out.write('\n');
    int i = 0;
    while (i < indentCount)
    {
      out.write(indent);
      i += 1;
    }
  }
  
  public void setContext(SerialContext paramSerialContext)
  {
    context = paramSerialContext;
  }
  
  public void setContext(SerialContext paramSerialContext, Object paramObject1, Object paramObject2, int paramInt)
  {
    setContext(paramSerialContext, paramObject1, paramObject2, paramInt, 0);
  }
  
  public void setContext(SerialContext paramSerialContext, Object paramObject1, Object paramObject2, int paramInt1, int paramInt2)
  {
    if (isEnabled(SerializerFeature.DisableCircularReferenceDetect)) {
      return;
    }
    context = new SerialContext(paramSerialContext, paramObject1, paramObject2, paramInt1, paramInt2);
    if (references == null) {
      references = new IdentityHashMap();
    }
    references.put(paramObject1, context);
  }
  
  public void setContext(Object paramObject1, Object paramObject2)
  {
    setContext(context, paramObject1, paramObject2, 0);
  }
  
  public void setDateFormat(String paramString)
  {
    dateFormatPattern = paramString;
    if (dateFormat != null) {
      dateFormat = null;
    }
  }
  
  public void setDateFormat(DateFormat paramDateFormat)
  {
    dateFormat = paramDateFormat;
    if (dateFormatPattern != null) {
      dateFormatPattern = null;
    }
  }
  
  public String toString()
  {
    return out.toString();
  }
  
  public final void write(Object paramObject)
  {
    if (paramObject == null)
    {
      out.writeNull();
      return;
    }
    ObjectSerializer localObjectSerializer = getObjectWriter(paramObject.getClass());
    try
    {
      localObjectSerializer.write(this, paramObject, null, null, 0);
      return;
    }
    catch (IOException paramObject)
    {
      throw new JSONException(paramObject.getMessage(), paramObject);
    }
  }
  
  public final void write(String paramString)
  {
    StringCodec.instance.write(this, paramString);
  }
  
  protected final void writeKeyValue(char paramChar, String paramString, Object paramObject)
  {
    if (paramChar != 0) {
      out.write(paramChar);
    }
    out.writeFieldName(paramString);
    write(paramObject);
  }
  
  public void writeNull()
  {
    out.writeNull();
  }
  
  public void writeReference(Object paramObject)
  {
    Object localObject2 = getContext();
    Object localObject1 = localObject2;
    if (paramObject == ((SerialContext)localObject2).getObject())
    {
      out.write("{\"$ref\":\"@\"}");
      return;
    }
    SerialContext localSerialContext = ((SerialContext)localObject2).getParent();
    localObject2 = localObject1;
    if (localSerialContext != null)
    {
      localObject2 = localObject1;
      if (paramObject == localSerialContext.getObject())
      {
        out.write("{\"$ref\":\"..\"}");
        return;
      }
    }
    for (;;)
    {
      if (((SerialContext)localObject2).getParent() == null)
      {
        if (paramObject == ((SerialContext)localObject2).getObject())
        {
          out.write("{\"$ref\":\"$\"}");
          return;
        }
        paramObject = getSerialContext(paramObject).getPath();
        out.write("{\"$ref\":\"");
        out.write(paramObject);
        out.write("\"}");
        return;
      }
      localObject2 = ((SerialContext)localObject2).getParent();
    }
  }
  
  public final void writeWithFieldName(Object paramObject1, Object paramObject2)
  {
    writeWithFieldName(paramObject1, paramObject2, null, 0);
  }
  
  public final void writeWithFieldName(Object paramObject1, Object paramObject2, Type paramType, int paramInt)
  {
    if (paramObject1 == null) {
      paramObject1 = out;
    }
    try
    {
      paramObject1.writeNull();
      return;
    }
    catch (IOException paramObject1)
    {
      throw new JSONException(paramObject1.getMessage(), paramObject1);
    }
    getObjectWriter(paramObject1.getClass()).write(this, paramObject1, paramObject2, paramType, paramInt);
  }
  
  public final void writeWithFormat(Object paramObject, String paramString)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a6 = a5\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer$LiveA.onUseLocal(UnSSATransformer.java:552)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer$LiveA.onUseLocal(UnSSATransformer.java:1)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.onUse(BaseAnalyze.java:166)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.onUse(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.travel(Cfg.java:331)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.travel(Cfg.java:387)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:90)\n\t... 17 more\n");
  }
}
