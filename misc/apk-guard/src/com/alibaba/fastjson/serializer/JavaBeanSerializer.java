package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class JavaBeanSerializer
  implements ObjectSerializer
{
  private int features = 0;
  private transient Map<String, FieldSerializer> getterMap;
  private final FieldSerializer[] getters;
  private final FieldSerializer[] sortedGetters;
  
  public JavaBeanSerializer(Class paramClass)
  {
    this(paramClass, null);
  }
  
  public JavaBeanSerializer(Class paramClass, Map paramMap)
  {
    features = TypeUtils.getSerializeFeatures(paramClass);
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = TypeUtils.computeGetters(paramClass, paramMap, false).iterator();
    while (localIterator.hasNext()) {
      localArrayList.add(createFieldSerializer((FieldInfo)localIterator.next()));
    }
    getters = ((FieldSerializer[])localArrayList.toArray(new FieldSerializer[localArrayList.size()]));
    localArrayList = new ArrayList();
    paramClass = TypeUtils.computeGetters(paramClass, paramMap, true).iterator();
    while (paramClass.hasNext()) {
      localArrayList.add(createFieldSerializer((FieldInfo)paramClass.next()));
    }
    sortedGetters = ((FieldSerializer[])localArrayList.toArray(new FieldSerializer[localArrayList.size()]));
  }
  
  public JavaBeanSerializer(Class paramClass, String... paramVarArgs)
  {
    this(paramClass, createAliasMap(paramVarArgs));
  }
  
  static Map createAliasMap(String... paramVarArgs)
  {
    HashMap localHashMap = new HashMap();
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      String str = paramVarArgs[i];
      localHashMap.put(str, str);
      i += 1;
    }
    return localHashMap;
  }
  
  public FieldSerializer createFieldSerializer(FieldInfo paramFieldInfo)
  {
    if (paramFieldInfo.getFieldClass() == Number.class) {
      return new NumberFieldSerializer(paramFieldInfo);
    }
    return new ObjectFieldSerializer(paramFieldInfo);
  }
  
  public Object getFieldValue(Object paramObject, String paramString)
    throws Exception
  {
    paramString = (FieldSerializer)getGetterMap().get(paramString);
    if (paramString == null) {
      return null;
    }
    return paramString.getPropertyValue(paramObject);
  }
  
  public List getFieldValues(Object paramObject)
    throws Exception
  {
    ArrayList localArrayList = new ArrayList(sortedGetters.length);
    FieldSerializer[] arrayOfFieldSerializer = sortedGetters;
    int j = arrayOfFieldSerializer.length;
    int i = 0;
    while (i < j)
    {
      localArrayList.add(arrayOfFieldSerializer[i].getPropertyValue(paramObject));
      i += 1;
    }
    return localArrayList;
  }
  
  public Map getGetterMap()
  {
    if (getterMap == null)
    {
      HashMap localHashMap = new HashMap(getters.length);
      FieldSerializer[] arrayOfFieldSerializer = sortedGetters;
      int j = arrayOfFieldSerializer.length;
      int i = 0;
      while (i < j)
      {
        FieldSerializer localFieldSerializer = arrayOfFieldSerializer[i];
        localHashMap.put(localFieldSerializer.getName(), localFieldSerializer);
        i += 1;
      }
      getterMap = localHashMap;
    }
    return getterMap;
  }
  
  public FieldSerializer[] getGetters()
  {
    return getters;
  }
  
  public boolean isWriteAsArray(JSONSerializer paramJSONSerializer)
  {
    if (SerializerFeature.isEnabled(features, SerializerFeature.BeanToArray)) {
      return true;
    }
    return paramJSONSerializer.isEnabled(SerializerFeature.BeanToArray);
  }
  
  protected boolean isWriteClassName(JSONSerializer paramJSONSerializer, Object paramObject1, Type paramType, Object paramObject2)
  {
    return paramJSONSerializer.isWriteClassName(paramType, paramObject1);
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      localSerializeWriter.writeNull();
      return;
    }
    if (writeReference(paramJSONSerializer, paramObject1, paramInt)) {
      return;
    }
    FieldSerializer[] arrayOfFieldSerializer;
    if (localSerializeWriter.isEnabled(SerializerFeature.SortField)) {
      arrayOfFieldSerializer = sortedGetters;
    } else {
      arrayOfFieldSerializer = getters;
    }
    SerialContext localSerialContext = paramJSONSerializer.getContext();
    paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2, features, paramInt);
    boolean bool1 = isWriteAsArray(paramJSONSerializer);
    char c2;
    if (bool1) {
      c2 = '[';
    } else {
      c2 = '{';
    }
    char c1;
    if (bool1) {
      c1 = ']';
    } else {
      c1 = '}';
    }
    try
    {
      localSerializeWriter.append(c2);
      paramInt = arrayOfFieldSerializer.length;
      Object localObject1;
      if (paramInt > 0)
      {
        localObject1 = SerializerFeature.PrettyFormat;
        bool2 = localSerializeWriter.isEnabled((SerializerFeature)localObject1);
        if (bool2)
        {
          paramJSONSerializer.incrementIndent();
          paramJSONSerializer.println();
        }
      }
      boolean bool2 = isWriteClassName(paramJSONSerializer, paramObject1, paramType, paramObject2);
      if (bool2)
      {
        paramObject2 = paramObject1.getClass();
        if (paramObject2 != paramType)
        {
          paramObject2 = JSON.DEFAULT_TYPE_KEY;
          localSerializeWriter.writeFieldName(paramObject2);
          paramJSONSerializer.write(paramObject1.getClass());
          paramInt = 1;
          break label215;
        }
      }
      paramInt = 0;
      label215:
      if (paramInt != 0) {
        c2 = ',';
      } else {
        c2 = '\000';
      }
      paramInt = FilterUtils.writeBefore(paramJSONSerializer, paramObject1, c2);
      if (paramInt == 44) {
        paramInt = 1;
      } else {
        paramInt = 0;
      }
      int i = 0;
      for (;;)
      {
        int j = arrayOfFieldSerializer.length;
        if (i >= j) {
          break;
        }
        paramObject2 = arrayOfFieldSerializer[i];
        paramType = paramObject2.getField();
        localObject1 = SerializerFeature.SkipTransientField;
        bool2 = paramJSONSerializer.isEnabled((SerializerFeature)localObject1);
        Object localObject2;
        if ((bool2) && (paramType != null))
        {
          bool2 = Modifier.isTransient(paramType.getModifiers());
          if (bool2) {}
        }
        else
        {
          localObject1 = SerializerFeature.IgnoreNonFieldGetter;
          bool2 = paramJSONSerializer.isEnabled((SerializerFeature)localObject1);
          if ((!bool2) || (paramType != null))
          {
            bool2 = FilterUtils.applyName(paramJSONSerializer, paramObject1, paramObject2.getName());
            if (bool2)
            {
              bool2 = FilterUtils.applyLabel(paramJSONSerializer, paramObject2.getLabel());
              if (bool2)
              {
                paramType = paramObject2.getPropertyValue(paramObject1);
                bool2 = FilterUtils.apply(paramJSONSerializer, paramObject1, paramObject2.getName(), paramType);
                if (bool2)
                {
                  localObject1 = FilterUtils.processKey(paramJSONSerializer, paramObject1, paramObject2.getName(), paramType);
                  localObject2 = FilterUtils.processValue(paramJSONSerializer, paramObject1, paramObject2.getName(), paramType);
                  if ((localObject2 == null) && (!bool1))
                  {
                    bool2 = paramObject2.isWriteNull();
                    if (!bool2)
                    {
                      localObject3 = SerializerFeature.WriteMapNullValue;
                      bool2 = paramJSONSerializer.isEnabled((SerializerFeature)localObject3);
                      if (!bool2) {
                        break label843;
                      }
                    }
                  }
                  if (localObject2 == null) {
                    break label846;
                  }
                  localObject3 = SerializerFeature.NotWriteDefaultValue;
                  bool2 = paramJSONSerializer.isEnabled((SerializerFeature)localObject3);
                  if (!bool2) {
                    break label846;
                  }
                  localObject3 = fieldInfo;
                  localObject3 = ((FieldInfo)localObject3).getFieldClass();
                  Object localObject4 = Byte.TYPE;
                  if (localObject3 == localObject4)
                  {
                    bool2 = localObject2 instanceof Byte;
                    if (bool2)
                    {
                      localObject4 = (Byte)localObject2;
                      j = ((Byte)localObject4).byteValue();
                      if (j == 0) {
                        break label843;
                      }
                    }
                  }
                  localObject4 = Short.TYPE;
                  if (localObject3 == localObject4)
                  {
                    bool2 = localObject2 instanceof Short;
                    if (bool2)
                    {
                      localObject4 = (Short)localObject2;
                      j = ((Short)localObject4).shortValue();
                      if (j == 0) {
                        break label843;
                      }
                    }
                  }
                  localObject4 = Integer.TYPE;
                  if (localObject3 == localObject4)
                  {
                    bool2 = localObject2 instanceof Integer;
                    if (bool2)
                    {
                      localObject4 = (Integer)localObject2;
                      j = ((Integer)localObject4).intValue();
                      if (j == 0) {
                        break label843;
                      }
                    }
                  }
                  localObject4 = Long.TYPE;
                  if (localObject3 == localObject4)
                  {
                    bool2 = localObject2 instanceof Long;
                    if (bool2)
                    {
                      localObject4 = (Long)localObject2;
                      long l = ((Long)localObject4).longValue();
                      if (l == 0L) {
                        break label843;
                      }
                    }
                  }
                  localObject4 = Float.TYPE;
                  if (localObject3 == localObject4)
                  {
                    bool2 = localObject2 instanceof Float;
                    if (bool2)
                    {
                      localObject4 = (Float)localObject2;
                      float f = ((Float)localObject4).floatValue();
                      if (f == 0.0F) {
                        break label843;
                      }
                    }
                  }
                  localObject4 = Double.TYPE;
                  if (localObject3 == localObject4)
                  {
                    bool2 = localObject2 instanceof Double;
                    if (bool2)
                    {
                      localObject4 = (Double)localObject2;
                      double d = ((Double)localObject4).doubleValue();
                      if (d == 0.0D) {
                        break label843;
                      }
                    }
                  }
                  localObject4 = Boolean.TYPE;
                  if (localObject3 != localObject4) {
                    break label846;
                  }
                  bool2 = localObject2 instanceof Boolean;
                  if (!bool2) {
                    break label846;
                  }
                  localObject3 = (Boolean)localObject2;
                  bool2 = ((Boolean)localObject3).booleanValue();
                  if (!bool2) {
                    break label970;
                  }
                }
              }
            }
          }
        }
        label843:
        label846:
        if (paramInt != 0)
        {
          localSerializeWriter.append(',');
          localObject3 = SerializerFeature.PrettyFormat;
          bool2 = localSerializeWriter.isEnabled((SerializerFeature)localObject3);
          if (bool2) {
            paramJSONSerializer.println();
          }
        }
        Object localObject3 = paramObject2.getName();
        if (localObject1 != localObject3)
        {
          if (!bool1) {
            localSerializeWriter.writeFieldName((String)localObject1);
          }
          paramJSONSerializer.write(localObject2);
        }
        else if (paramType != localObject2)
        {
          if (!bool1) {
            paramObject2.writePrefix(paramJSONSerializer);
          }
          paramJSONSerializer.write(localObject2);
        }
        else if (!bool1)
        {
          paramObject2.writeProperty(paramJSONSerializer, localObject2);
        }
        else
        {
          paramObject2.writeValue(paramJSONSerializer, localObject2);
        }
        paramInt = 1;
        label970:
        i += 1;
      }
      c2 = ',';
      if (paramInt == 0) {
        c2 = '\000';
      }
      FilterUtils.writeAfter(paramJSONSerializer, paramObject1, c2);
      paramInt = arrayOfFieldSerializer.length;
      if (paramInt > 0)
      {
        paramObject1 = SerializerFeature.PrettyFormat;
        bool1 = localSerializeWriter.isEnabled(paramObject1);
        if (bool1)
        {
          paramJSONSerializer.decrementIdent();
          paramJSONSerializer.println();
        }
      }
      localSerializeWriter.append(c1);
      paramJSONSerializer.setContext(localSerialContext);
      return;
    }
    catch (Throwable paramObject1) {}catch (Exception paramObject1)
    {
      throw new JSONException("write javaBean error", paramObject1);
    }
    paramJSONSerializer.setContext(localSerialContext);
    throw paramObject1;
  }
  
  public boolean writeReference(JSONSerializer paramJSONSerializer, Object paramObject, int paramInt)
  {
    SerialContext localSerialContext = paramJSONSerializer.getContext();
    if ((localSerialContext != null) && (SerializerFeature.isEnabled(localSerialContext.getFeatures(), paramInt, SerializerFeature.DisableCircularReferenceDetect))) {
      return false;
    }
    if (!paramJSONSerializer.containsReference(paramObject)) {
      return false;
    }
    paramJSONSerializer.writeReference(paramObject);
    return true;
  }
}
