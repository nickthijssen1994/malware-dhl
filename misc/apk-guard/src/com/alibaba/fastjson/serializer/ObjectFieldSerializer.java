package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.util.FieldInfo;
import java.util.Collection;

public class ObjectFieldSerializer
  extends FieldSerializer
{
  private String format;
  private RuntimeSerializerInfo runtimeInfo;
  boolean writeEnumUsingName;
  boolean writeEnumUsingToString;
  boolean writeNullBooleanAsFalse;
  boolean writeNullListAsEmpty;
  boolean writeNullStringAsEmpty;
  boolean writeNumberAsZero;
  
  public ObjectFieldSerializer(FieldInfo paramFieldInfo)
  {
    super(paramFieldInfo);
    int i = 0;
    writeNumberAsZero = false;
    writeNullStringAsEmpty = false;
    writeNullBooleanAsFalse = false;
    writeNullListAsEmpty = false;
    writeEnumUsingToString = false;
    writeEnumUsingName = false;
    paramFieldInfo = (JSONField)paramFieldInfo.getAnnotation(JSONField.class);
    if (paramFieldInfo != null)
    {
      format = paramFieldInfo.format();
      if (format.trim().length() == 0) {
        format = null;
      }
      paramFieldInfo = paramFieldInfo.serialzeFeatures();
      int j = paramFieldInfo.length;
      while (i < j)
      {
        Object localObject = paramFieldInfo[i];
        if (localObject == SerializerFeature.WriteNullNumberAsZero) {
          writeNumberAsZero = true;
        } else if (localObject == SerializerFeature.WriteNullStringAsEmpty) {
          writeNullStringAsEmpty = true;
        } else if (localObject == SerializerFeature.WriteNullBooleanAsFalse) {
          writeNullBooleanAsFalse = true;
        } else if (localObject == SerializerFeature.WriteNullListAsEmpty) {
          writeNullListAsEmpty = true;
        } else if (localObject == SerializerFeature.WriteEnumUsingToString) {
          writeEnumUsingToString = true;
        } else if (localObject == SerializerFeature.WriteEnumUsingName) {
          writeEnumUsingName = true;
        }
        i += 1;
      }
    }
  }
  
  public void writeProperty(JSONSerializer paramJSONSerializer, Object paramObject)
    throws Exception
  {
    writePrefix(paramJSONSerializer);
    writeValue(paramJSONSerializer, paramObject);
  }
  
  public void writeValue(JSONSerializer paramJSONSerializer, Object paramObject)
    throws Exception
  {
    Object localObject = format;
    if (localObject != null)
    {
      paramJSONSerializer.writeWithFormat(paramObject, (String)localObject);
      return;
    }
    if (runtimeInfo == null)
    {
      if (paramObject == null) {
        localObject = fieldInfo.getFieldClass();
      } else {
        localObject = paramObject.getClass();
      }
      runtimeInfo = new RuntimeSerializerInfo(paramJSONSerializer.getObjectWriter((Class)localObject), (Class)localObject);
    }
    localObject = runtimeInfo;
    int i = fieldInfo.getSerialzeFeatures();
    if (paramObject == null)
    {
      if ((writeNumberAsZero) && (Number.class.isAssignableFrom(runtimeFieldClass)))
      {
        paramJSONSerializer.getWriter().write('0');
        return;
      }
      if ((writeNullStringAsEmpty) && (String.class == runtimeFieldClass))
      {
        paramJSONSerializer.getWriter().write("\"\"");
        return;
      }
      if ((writeNullBooleanAsFalse) && (Boolean.class == runtimeFieldClass))
      {
        paramJSONSerializer.getWriter().write("false");
        return;
      }
      if ((writeNullListAsEmpty) && (Collection.class.isAssignableFrom(runtimeFieldClass)))
      {
        paramJSONSerializer.getWriter().write("[]");
        return;
      }
      fieldSerializer.write(paramJSONSerializer, null, fieldInfo.getName(), null, i);
      return;
    }
    if (runtimeFieldClass.isEnum())
    {
      if (writeEnumUsingName)
      {
        paramJSONSerializer.getWriter().writeString(((Enum)paramObject).name());
        return;
      }
      if (writeEnumUsingToString)
      {
        paramJSONSerializer.getWriter().writeString(((Enum)paramObject).toString());
        return;
      }
    }
    Class localClass = paramObject.getClass();
    if (localClass == runtimeFieldClass)
    {
      fieldSerializer.write(paramJSONSerializer, paramObject, fieldInfo.getName(), fieldInfo.getFieldType(), i);
      return;
    }
    paramJSONSerializer.getObjectWriter(localClass).write(paramJSONSerializer, paramObject, fieldInfo.getName(), fieldInfo.getFieldType(), i);
  }
  
  static class RuntimeSerializerInfo
  {
    ObjectSerializer fieldSerializer;
    Class<?> runtimeFieldClass;
    
    public RuntimeSerializerInfo(ObjectSerializer paramObjectSerializer, Class paramClass)
    {
      fieldSerializer = paramObjectSerializer;
      runtimeFieldClass = paramClass;
    }
  }
}
