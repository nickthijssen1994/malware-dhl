package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.Base64;
import com.alibaba.fastjson.util.IOUtils;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.lang.ref.SoftReference;
import java.math.BigDecimal;
import java.nio.charset.Charset;

public final class SerializeWriter
  extends Writer
{
  private static final ThreadLocal<SoftReference<char[]>> bufLocal = new ThreadLocal();
  protected char[] buffer;
  protected int count;
  private int features;
  private final Writer writer;
  
  public SerializeWriter()
  {
    this(null);
  }
  
  public SerializeWriter(int paramInt)
  {
    this(null, paramInt);
  }
  
  public SerializeWriter(Writer paramWriter)
  {
    writer = paramWriter;
    features = JSON.DEFAULT_GENERATE_FEATURE;
    paramWriter = (SoftReference)bufLocal.get();
    if (paramWriter != null)
    {
      buffer = ((char[])paramWriter.get());
      bufLocal.set(null);
    }
    if (buffer == null) {
      buffer = new char['?'];
    }
  }
  
  public SerializeWriter(Writer paramWriter, int paramInt)
  {
    writer = paramWriter;
    if (paramInt > 0)
    {
      buffer = new char[paramInt];
      return;
    }
    paramWriter = new StringBuilder();
    paramWriter.append("Negative initial size: ");
    paramWriter.append(paramInt);
    throw new IllegalArgumentException(paramWriter.toString());
  }
  
  public SerializeWriter(Writer paramWriter, SerializerFeature... paramVarArgs)
  {
    writer = paramWriter;
    paramWriter = (SoftReference)bufLocal.get();
    if (paramWriter != null)
    {
      buffer = ((char[])paramWriter.get());
      bufLocal.set(null);
    }
    if (buffer == null) {
      buffer = new char['?'];
    }
    int k = paramVarArgs.length;
    int i = 0;
    int j = 0;
    while (i < k)
    {
      j |= paramVarArgs[i].getMask();
      i += 1;
    }
    features = j;
  }
  
  public SerializeWriter(SerializerFeature... paramVarArgs)
  {
    this(null, paramVarArgs);
  }
  
  static boolean isSpecial(char paramChar, int paramInt)
  {
    if (paramChar == ' ') {
      return false;
    }
    if ((paramChar == '/') && (SerializerFeature.isEnabled(paramInt, SerializerFeature.WriteSlashAsSpecial))) {
      return true;
    }
    if ((paramChar > '#') && (paramChar != '\\')) {
      return false;
    }
    if ((paramChar > '\037') && (paramChar != '\\')) {
      return paramChar == '"';
    }
    return true;
  }
  
  private void writeEnumFieldValue(char paramChar, String paramString1, String paramString2)
  {
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      writeFieldValue(paramChar, paramString1, paramString2);
      return;
    }
    writeFieldValueStringWithDoubleQuote(paramChar, paramString1, paramString2, false);
  }
  
  private void writeEnumValue(String paramString, char paramChar)
  {
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      write('\'');
      write(paramString);
      write('\'');
      write(paramChar);
      return;
    }
    write('"');
    write(paramString);
    write('"');
    write(paramChar);
  }
  
  private void writeFieldValueStringWithDoubleQuote(char paramChar, String paramString1, String paramString2, boolean paramBoolean)
  {
    int k = paramString1.length();
    int m = count;
    int i3;
    int i;
    if (paramString2 == null)
    {
      i3 = m + (k + 8);
      i = 4;
    }
    else
    {
      j = paramString2.length();
      i = j;
      i3 = m + (k + j + 6);
    }
    int j = buffer.length;
    int i6 = 0;
    if (i3 > j)
    {
      if (writer != null)
      {
        write(paramChar);
        writeStringWithDoubleQuote(paramString1, ':', paramBoolean);
        writeStringWithDoubleQuote(paramString2, '\000', paramBoolean);
        return;
      }
      expandCapacity(i3);
    }
    char[] arrayOfChar = buffer;
    j = count;
    arrayOfChar[j] = paramChar;
    m = j + 2;
    int n = m + k;
    arrayOfChar[(j + 1)] = '"';
    paramString1.getChars(0, k, arrayOfChar, m);
    count = i3;
    paramString1 = buffer;
    paramString1[n] = 34;
    k = n + 1;
    j = k + 1;
    paramString1[k] = 58;
    if (paramString2 == null)
    {
      i = j + 1;
      paramString1[j] = 110;
      j = i + 1;
      paramString1[i] = 117;
      paramString1[j] = 108;
      paramString1[(j + 1)] = 108;
      return;
    }
    int i7 = j + 1;
    paramString1[j] = 34;
    int i8 = i7 + i;
    paramString2.getChars(0, i, paramString1, i7);
    if ((paramBoolean) && (!isEnabled(SerializerFeature.DisableCheckSpecialChar)))
    {
      i = i7;
      m = -1;
      int i4 = 0;
      int i5 = -1;
      while (i < i8)
      {
        paramChar = buffer[i];
        int i1;
        int i2;
        if (paramChar == '?')
        {
          n = i6 + 1;
          i1 = i3 + 4;
          if (m == -1)
          {
            i2 = i;
            j = i;
            k = paramChar;
          }
          else
          {
            j = i;
            k = paramChar;
            i2 = m;
          }
        }
        else if (paramChar >= ']')
        {
          n = i6;
          j = i5;
          i1 = i3;
          i2 = m;
          k = i4;
          if (paramChar >= '')
          {
            n = i6;
            j = i5;
            i1 = i3;
            i2 = m;
            k = i4;
            if (paramChar <= '?')
            {
              i2 = m;
              if (m == -1) {
                i2 = i;
              }
              n = i6 + 1;
              i1 = i3 + 4;
              j = i;
              k = paramChar;
            }
          }
        }
        else
        {
          n = i6;
          j = i5;
          i1 = i3;
          i2 = m;
          k = i4;
          if (isSpecial(paramChar, features))
          {
            n = i6 + 1;
            i1 = i3;
            if (paramChar < IOUtils.specicalFlags_doubleQuotes.length)
            {
              i1 = i3;
              if (IOUtils.specicalFlags_doubleQuotes[paramChar] == 4) {
                i1 = i3 + 4;
              }
            }
            if (m == -1)
            {
              i2 = i;
              j = i;
              k = paramChar;
            }
            else
            {
              j = i;
              k = paramChar;
              i2 = m;
            }
          }
        }
        i += 1;
        i6 = n;
        i5 = j;
        i3 = i1;
        m = i2;
        i4 = k;
      }
      if (i6 > 0)
      {
        i = i3 + i6;
        if (i > buffer.length) {
          expandCapacity(i);
        }
        count = i;
        if (i6 == 1)
        {
          if (i4 == 8232)
          {
            i = i5 + 1;
            paramString1 = buffer;
            System.arraycopy(paramString1, i, paramString1, i5 + 6, i8 - i5 - 1);
            paramString1 = buffer;
            paramString1[i5] = 92;
            paramString1[i] = 117;
            i += 1;
            paramString1[i] = 50;
            i += 1;
            paramString1[i] = 48;
            i += 1;
            paramString1[i] = 50;
            paramString1[(i + 1)] = 56;
          }
          else if ((i4 < IOUtils.specicalFlags_doubleQuotes.length) && (IOUtils.specicalFlags_doubleQuotes[i4] == 4))
          {
            i = i5 + 1;
            paramString1 = buffer;
            System.arraycopy(paramString1, i, paramString1, i5 + 6, i8 - i5 - 1);
            paramString1 = buffer;
            paramString1[i5] = 92;
            j = i + 1;
            paramString1[i] = 117;
            i = j + 1;
            paramString1[j] = IOUtils.DIGITS[(i4 >>> 12 & 0xF)];
            paramString1 = buffer;
            j = i + 1;
            paramString1[i] = IOUtils.DIGITS[(i4 >>> 8 & 0xF)];
            buffer[j] = IOUtils.DIGITS[(i4 >>> 4 & 0xF)];
            buffer[(j + 1)] = IOUtils.DIGITS[(i4 & 0xF)];
          }
          else
          {
            i = i5 + 1;
            paramString1 = buffer;
            System.arraycopy(paramString1, i, paramString1, i5 + 2, i8 - i5 - 1);
            paramString1 = buffer;
            paramString1[i5] = 92;
            paramString1[i] = IOUtils.replaceChars[i4];
          }
        }
        else if (i6 > 1)
        {
          j = m - i7;
          i = m;
          while (j < paramString2.length())
          {
            paramChar = paramString2.charAt(j);
            if (((paramChar < IOUtils.specicalFlags_doubleQuotes.length) && (IOUtils.specicalFlags_doubleQuotes[paramChar] != 0)) || ((paramChar == '/') && (isEnabled(SerializerFeature.WriteSlashAsSpecial))))
            {
              paramString1 = buffer;
              k = i + 1;
              paramString1[i] = 92;
              if (IOUtils.specicalFlags_doubleQuotes[paramChar] == 4)
              {
                paramString1 = buffer;
                i = k + 1;
                paramString1[k] = 117;
                k = i + 1;
                paramString1[i] = IOUtils.DIGITS[(paramChar >>> '\f' & 0xF)];
                paramString1 = buffer;
                i = k + 1;
                paramString1[k] = IOUtils.DIGITS[(paramChar >>> '\b' & 0xF)];
                paramString1 = buffer;
                k = i + 1;
                paramString1[i] = IOUtils.DIGITS[(paramChar >>> '\004' & 0xF)];
                paramString1 = buffer;
                i = k + 1;
                paramString1[k] = IOUtils.DIGITS[(paramChar & 0xF)];
              }
              else
              {
                paramString1 = buffer;
                i = k + 1;
                paramString1[k] = IOUtils.replaceChars[paramChar];
              }
            }
            else if (paramChar == '?')
            {
              paramString1 = buffer;
              k = i + 1;
              paramString1[i] = 92;
              i = k + 1;
              paramString1[k] = 117;
              k = i + 1;
              paramString1[i] = IOUtils.DIGITS[(paramChar >>> '\f' & 0xF)];
              paramString1 = buffer;
              i = k + 1;
              paramString1[k] = IOUtils.DIGITS[(paramChar >>> '\b' & 0xF)];
              paramString1 = buffer;
              k = i + 1;
              paramString1[i] = IOUtils.DIGITS[(paramChar >>> '\004' & 0xF)];
              paramString1 = buffer;
              i = k + 1;
              paramString1[k] = IOUtils.DIGITS[(paramChar & 0xF)];
            }
            else
            {
              buffer[i] = paramChar;
              i += 1;
            }
            j += 1;
          }
        }
      }
    }
    buffer[(count - 1)] = '"';
  }
  
  private void writeKeyWithDoubleQuoteIfHasSpecial(String paramString)
  {
    byte[] arrayOfByte = IOUtils.specicalFlags_doubleQuotes;
    int i2 = paramString.length();
    int j = count;
    int n = 1;
    int k = j + i2 + 1;
    j = buffer.length;
    int m = 0;
    if (k > j)
    {
      if (writer != null)
      {
        if (i2 == 0)
        {
          write('"');
          write('"');
          write(':');
          return;
        }
        j = 0;
        while (j < i2)
        {
          k = paramString.charAt(j);
          if ((k < arrayOfByte.length) && (arrayOfByte[k] != 0))
          {
            j = n;
            break label119;
          }
          j += 1;
        }
        j = 0;
        label119:
        k = m;
        if (j != 0)
        {
          write('"');
          k = m;
        }
        while (k < i2)
        {
          int i = paramString.charAt(k);
          if ((i < arrayOfByte.length) && (arrayOfByte[i] != 0))
          {
            write('\\');
            write(IOUtils.replaceChars[i]);
          }
          else
          {
            write(i);
          }
          k += 1;
        }
        if (j != 0) {
          write('"');
        }
        write(':');
        return;
      }
      expandCapacity(k);
    }
    if (i2 == 0)
    {
      j = count;
      if (j + 3 > buffer.length) {
        expandCapacity(j + 3);
      }
      paramString = buffer;
      j = count;
      count = (j + 1);
      paramString[j] = 34;
      j = count;
      count = (j + 1);
      paramString[j] = 34;
      j = count;
      count = (j + 1);
      paramString[j] = 58;
      return;
    }
    int i1 = count;
    m = i1 + i2;
    paramString.getChars(0, i2, buffer, i1);
    count = k;
    j = i1;
    n = 0;
    while (j < m)
    {
      paramString = buffer;
      int i3 = paramString[j];
      if ((i3 < arrayOfByte.length) && (arrayOfByte[i3] != 0)) {
        if (n == 0)
        {
          k += 3;
          if (k > paramString.length) {
            expandCapacity(k);
          }
          count = k;
          paramString = buffer;
          n = j + 1;
          System.arraycopy(paramString, n, paramString, j + 3, m - j - 1);
          paramString = buffer;
          System.arraycopy(paramString, 0, paramString, 1, j);
          paramString = buffer;
          paramString[i1] = 34;
          paramString[n] = 92;
          j = n + 1;
          paramString[j] = IOUtils.replaceChars[i3];
          m += 2;
          buffer[(count - 2)] = '"';
          n = 1;
        }
        else
        {
          k += 1;
          if (k > paramString.length) {
            expandCapacity(k);
          }
          count = k;
          paramString = buffer;
          i2 = j + 1;
          System.arraycopy(paramString, i2, paramString, j + 2, m - j);
          paramString = buffer;
          paramString[j] = 92;
          paramString[i2] = IOUtils.replaceChars[i3];
          m += 1;
          j = i2;
        }
      }
      j += 1;
    }
    buffer[(count - 1)] = ':';
  }
  
  private void writeKeyWithSingleQuoteIfHasSpecial(String paramString)
  {
    byte[] arrayOfByte = IOUtils.specicalFlags_singleQuotes;
    int i2 = paramString.length();
    int j = count;
    int n = 1;
    int k = j + i2 + 1;
    j = buffer.length;
    int m = 0;
    if (k > j)
    {
      if (writer != null)
      {
        if (i2 == 0)
        {
          write('\'');
          write('\'');
          write(':');
          return;
        }
        j = 0;
        while (j < i2)
        {
          k = paramString.charAt(j);
          if ((k < arrayOfByte.length) && (arrayOfByte[k] != 0))
          {
            j = n;
            break label119;
          }
          j += 1;
        }
        j = 0;
        label119:
        k = m;
        if (j != 0)
        {
          write('\'');
          k = m;
        }
        while (k < i2)
        {
          int i = paramString.charAt(k);
          if ((i < arrayOfByte.length) && (arrayOfByte[i] != 0))
          {
            write('\\');
            write(IOUtils.replaceChars[i]);
          }
          else
          {
            write(i);
          }
          k += 1;
        }
        if (j != 0) {
          write('\'');
        }
        write(':');
        return;
      }
      expandCapacity(k);
    }
    if (i2 == 0)
    {
      j = count;
      if (j + 3 > buffer.length) {
        expandCapacity(j + 3);
      }
      paramString = buffer;
      j = count;
      count = (j + 1);
      paramString[j] = 39;
      j = count;
      count = (j + 1);
      paramString[j] = 39;
      j = count;
      count = (j + 1);
      paramString[j] = 58;
      return;
    }
    int i1 = count;
    m = i1 + i2;
    paramString.getChars(0, i2, buffer, i1);
    count = k;
    j = i1;
    n = 0;
    while (j < m)
    {
      paramString = buffer;
      int i3 = paramString[j];
      if ((i3 < arrayOfByte.length) && (arrayOfByte[i3] != 0)) {
        if (n == 0)
        {
          k += 3;
          if (k > paramString.length) {
            expandCapacity(k);
          }
          count = k;
          paramString = buffer;
          n = j + 1;
          System.arraycopy(paramString, n, paramString, j + 3, m - j - 1);
          paramString = buffer;
          System.arraycopy(paramString, 0, paramString, 1, j);
          paramString = buffer;
          paramString[i1] = 39;
          paramString[n] = 92;
          j = n + 1;
          paramString[j] = IOUtils.replaceChars[i3];
          m += 2;
          buffer[(count - 2)] = '\'';
          n = 1;
        }
        else
        {
          k += 1;
          if (k > paramString.length) {
            expandCapacity(k);
          }
          count = k;
          paramString = buffer;
          i2 = j + 1;
          System.arraycopy(paramString, i2, paramString, j + 2, m - j);
          paramString = buffer;
          paramString[j] = 92;
          paramString[i2] = IOUtils.replaceChars[i3];
          m += 1;
          j = i2;
        }
      }
      j += 1;
    }
    buffer[(k - 1)] = ':';
  }
  
  private void writeStringWithDoubleQuote(String paramString, char paramChar)
  {
    writeStringWithDoubleQuote(paramString, paramChar, true);
  }
  
  private void writeStringWithDoubleQuote(String paramString, char paramChar, boolean paramBoolean)
  {
    if (paramString == null)
    {
      writeNull();
      if (paramChar != 0) {
        write(paramChar);
      }
    }
    else
    {
      int i1 = paramString.length();
      int m = count + i1 + 2;
      int n = m;
      if (paramChar != 0) {
        n = m + 1;
      }
      int i2 = buffer.length;
      int i10 = 0;
      m = 0;
      char[] arrayOfChar;
      if (n > i2)
      {
        if (writer != null)
        {
          write('"');
          while (m < paramString.length())
          {
            int i = paramString.charAt(m);
            if (isEnabled(SerializerFeature.BrowserSecure))
            {
              if (((i < 48) || (i > 57)) && ((i < 97) || (i > 122)) && ((i < 65) || (i > 90)) && (i != 44) && (i != 46) && (i != 95))
              {
                write('\\');
                write('u');
                write(IOUtils.DIGITS[(i >>> 12 & 0xF)]);
                write(IOUtils.DIGITS[(i >>> 8 & 0xF)]);
                write(IOUtils.DIGITS[(i >>> 4 & 0xF)]);
                write(IOUtils.DIGITS[(i & 0xF)]);
                break label622;
              }
            }
            else if (isEnabled(SerializerFeature.BrowserCompatible))
            {
              if ((i != 8) && (i != 12) && (i != 10) && (i != 13) && (i != 9) && (i != 34) && (i != 47) && (i != 92))
              {
                if (i < 32)
                {
                  write('\\');
                  write('u');
                  write('0');
                  write('0');
                  arrayOfChar = IOUtils.ASCII_CHARS;
                  n = i * 2;
                  write(arrayOfChar[n]);
                  write(IOUtils.ASCII_CHARS[(n + 1)]);
                  break label622;
                }
                if (i >= 127)
                {
                  write('\\');
                  write('u');
                  write(IOUtils.DIGITS[(i >>> 12 & 0xF)]);
                  write(IOUtils.DIGITS[(i >>> 8 & 0xF)]);
                  write(IOUtils.DIGITS[(i >>> 4 & 0xF)]);
                  write(IOUtils.DIGITS[(i & 0xF)]);
                  break label622;
                }
              }
              else
              {
                write('\\');
                write(IOUtils.replaceChars[i]);
                break label622;
              }
            }
            else if (((i < IOUtils.specicalFlags_doubleQuotes.length) && (IOUtils.specicalFlags_doubleQuotes[i] != 0)) || ((i == 47) && (isEnabled(SerializerFeature.WriteSlashAsSpecial))))
            {
              write('\\');
              if (IOUtils.specicalFlags_doubleQuotes[i] == 4)
              {
                write('u');
                write(IOUtils.DIGITS[(i >>> 12 & 0xF)]);
                write(IOUtils.DIGITS[(i >>> 8 & 0xF)]);
                write(IOUtils.DIGITS[(i >>> 4 & 0xF)]);
                write(IOUtils.DIGITS[(i & 0xF)]);
                break label622;
              }
              write(IOUtils.replaceChars[i]);
              break label622;
            }
            write(i);
            label622:
            m += 1;
          }
          write('"');
          if (paramChar != 0) {
            write(paramChar);
          }
        }
        else
        {
          expandCapacity(n);
        }
      }
      else
      {
        m = count;
        int i6 = m + 1;
        int i8 = i6 + i1;
        arrayOfChar = buffer;
        arrayOfChar[m] = '"';
        paramString.getChars(0, i1, arrayOfChar, i6);
        count = n;
        boolean bool = isEnabled(SerializerFeature.BrowserSecure);
        i1 = -1;
        int i4;
        int i3;
        if (bool)
        {
          m = i6;
          i2 = n;
          n = i1;
          while (m < i8)
          {
            i4 = buffer[m];
            if (i4 >= 48)
            {
              i3 = n;
              i1 = i2;
              if (i4 <= 57) {}
            }
            else if (i4 >= 97)
            {
              i3 = n;
              i1 = i2;
              if (i4 <= 122) {}
            }
            else if (i4 >= 65)
            {
              i3 = n;
              i1 = i2;
              if (i4 <= 90) {}
            }
            else
            {
              i3 = n;
              i1 = i2;
              if (i4 != 44)
              {
                i3 = n;
                i1 = i2;
                if (i4 != 46)
                {
                  i3 = n;
                  i1 = i2;
                  if (i4 != 95)
                  {
                    i1 = i2 + 5;
                    i3 = m;
                  }
                }
              }
            }
            m += 1;
            n = i3;
            i2 = i1;
          }
          if (i2 > buffer.length) {
            expandCapacity(i2);
          }
          count = i2;
          while (n >= i6)
          {
            i1 = buffer[n];
            if (i1 >= 48)
            {
              m = i8;
              if (i1 <= 57) {}
            }
            else if (i1 >= 97)
            {
              m = i8;
              if (i1 <= 122) {}
            }
            else if (i1 >= 65)
            {
              m = i8;
              if (i1 <= 90) {}
            }
            else
            {
              m = i8;
              if (i1 != 44)
              {
                m = i8;
                if (i1 != 46)
                {
                  m = i8;
                  if (i1 != 95)
                  {
                    paramString = buffer;
                    m = n + 1;
                    System.arraycopy(paramString, m, paramString, n + 6, i8 - n - 1);
                    paramString = buffer;
                    paramString[n] = 92;
                    paramString[m] = 117;
                    paramString[(n + 2)] = IOUtils.DIGITS[(i1 >>> 12 & 0xF)];
                    buffer[(n + 3)] = IOUtils.DIGITS[(i1 >>> 8 & 0xF)];
                    buffer[(n + 4)] = IOUtils.DIGITS[(i1 >>> 4 & 0xF)];
                    buffer[(n + 5)] = IOUtils.DIGITS[(i1 & 0xF)];
                    m = i8 + 5;
                  }
                }
              }
            }
            n -= 1;
            i8 = m;
          }
          if (paramChar != 0)
          {
            paramString = buffer;
            m = count;
            paramString[(m - 2)] = 34;
            paramString[(m - 1)] = paramChar;
            return;
          }
          buffer[(count - 1)] = '"';
          return;
        }
        int j;
        if (isEnabled(SerializerFeature.BrowserCompatible))
        {
          m = i6;
          i2 = n;
          n = i1;
          while (m < i8)
          {
            i3 = buffer[m];
            if ((i3 != 34) && (i3 != 47) && (i3 != 92))
            {
              if ((i3 != 8) && (i3 != 12) && (i3 != 10) && (i3 != 13) && (i3 != 9))
              {
                if (i3 < 32)
                {
                  i1 = i2 + 5;
                  n = m;
                }
                else
                {
                  i1 = i2;
                  if (i3 >= 127)
                  {
                    i1 = i2 + 5;
                    n = m;
                  }
                }
              }
              else
              {
                i1 = i2 + 1;
                n = m;
              }
            }
            else
            {
              i1 = i2 + 1;
              n = m;
            }
            m += 1;
            i2 = i1;
          }
          if (i2 > buffer.length) {
            expandCapacity(i2);
          }
          count = i2;
          while (n >= i6)
          {
            paramString = buffer;
            j = paramString[n];
            if ((j != 8) && (j != 12) && (j != 10) && (j != 13) && (j != 9))
            {
              if ((j != 34) && (j != 47) && (j != 92))
              {
                if (j < 32)
                {
                  m = n + 1;
                  System.arraycopy(paramString, m, paramString, n + 6, i8 - n - 1);
                  paramString = buffer;
                  paramString[n] = 92;
                  paramString[m] = 117;
                  paramString[(n + 2)] = 48;
                  paramString[(n + 3)] = 48;
                  arrayOfChar = IOUtils.ASCII_CHARS;
                  m = j * 2;
                  paramString[(n + 4)] = arrayOfChar[m];
                  buffer[(n + 5)] = IOUtils.ASCII_CHARS[(m + 1)];
                  m = i8 + 5;
                }
                else
                {
                  m = i8;
                  if (j >= 127)
                  {
                    m = n + 1;
                    System.arraycopy(paramString, m, paramString, n + 6, i8 - n - 1);
                    paramString = buffer;
                    paramString[n] = 92;
                    paramString[m] = 117;
                    paramString[(n + 2)] = IOUtils.DIGITS[(j >>> 12 & 0xF)];
                    buffer[(n + 3)] = IOUtils.DIGITS[(j >>> 8 & 0xF)];
                    buffer[(n + 4)] = IOUtils.DIGITS[(j >>> 4 & 0xF)];
                    buffer[(n + 5)] = IOUtils.DIGITS[(j & 0xF)];
                    m = i8 + 5;
                  }
                }
              }
              else
              {
                paramString = buffer;
                m = n + 1;
                System.arraycopy(paramString, m, paramString, n + 2, i8 - n - 1);
                paramString = buffer;
                paramString[n] = 92;
                paramString[m] = j;
                m = i8 + 1;
              }
            }
            else
            {
              paramString = buffer;
              m = n + 1;
              System.arraycopy(paramString, m, paramString, n + 2, i8 - n - 1);
              paramString = buffer;
              paramString[n] = 92;
              paramString[m] = IOUtils.replaceChars[j];
              m = i8 + 1;
            }
            n -= 1;
            i8 = m;
          }
          if (paramChar != 0)
          {
            paramString = buffer;
            m = count;
            paramString[(m - 2)] = 34;
            paramString[(m - 1)] = paramChar;
            return;
          }
          buffer[(count - 1)] = '"';
          return;
        }
        if (paramBoolean)
        {
          m = i6;
          i2 = -1;
          int i9 = 0;
          int i11 = -1;
          int i7 = n;
          while (m < i8)
          {
            j = buffer[m];
            int i5;
            if (j == 8232)
            {
              i4 = i10 + 1;
              i3 = i7 + 4;
              if (i2 == -1)
              {
                i5 = m;
                n = m;
                i1 = j;
              }
              else
              {
                n = m;
                i1 = j;
                i5 = i2;
              }
            }
            else if (j >= 93)
            {
              n = i11;
              i3 = i7;
              i4 = i10;
              i1 = i9;
              i5 = i2;
              if (j >= 127)
              {
                n = i11;
                i3 = i7;
                i4 = i10;
                i1 = i9;
                i5 = i2;
                if (j <= 160)
                {
                  i5 = i2;
                  if (i2 == -1) {
                    i5 = m;
                  }
                  i4 = i10 + 1;
                  i3 = i7 + 4;
                  n = m;
                  i1 = j;
                }
              }
            }
            else
            {
              n = i11;
              i3 = i7;
              i4 = i10;
              i1 = i9;
              i5 = i2;
              if (isSpecial(j, features))
              {
                i4 = i10 + 1;
                i3 = i7;
                if (j < IOUtils.specicalFlags_doubleQuotes.length)
                {
                  i3 = i7;
                  if (IOUtils.specicalFlags_doubleQuotes[j] == 4) {
                    i3 = i7 + 4;
                  }
                }
                if (i2 == -1)
                {
                  i5 = m;
                  n = m;
                  i1 = j;
                }
                else
                {
                  n = m;
                  i1 = j;
                  i5 = i2;
                }
              }
            }
            m += 1;
            i11 = n;
            i7 = i3;
            i10 = i4;
            i9 = i1;
            i2 = i5;
          }
          if (i10 > 0)
          {
            m = i7 + i10;
            if (m > buffer.length) {
              expandCapacity(m);
            }
            count = m;
            if (i10 == 1)
            {
              if (i9 == 8232)
              {
                m = i11 + 1;
                paramString = buffer;
                System.arraycopy(paramString, m, paramString, i11 + 6, i8 - i11 - 1);
                paramString = buffer;
                paramString[i11] = 92;
                paramString[m] = 117;
                m += 1;
                paramString[m] = 50;
                m += 1;
                paramString[m] = 48;
                m += 1;
                paramString[m] = 50;
                paramString[(m + 1)] = 56;
              }
              else if ((i9 < IOUtils.specicalFlags_doubleQuotes.length) && (IOUtils.specicalFlags_doubleQuotes[i9] == 4))
              {
                m = i11 + 1;
                paramString = buffer;
                System.arraycopy(paramString, m, paramString, i11 + 6, i8 - i11 - 1);
                paramString = buffer;
                paramString[i11] = 92;
                n = m + 1;
                paramString[m] = 117;
                m = n + 1;
                paramString[n] = IOUtils.DIGITS[(i9 >>> 12 & 0xF)];
                paramString = buffer;
                n = m + 1;
                paramString[m] = IOUtils.DIGITS[(i9 >>> 8 & 0xF)];
                buffer[n] = IOUtils.DIGITS[(i9 >>> 4 & 0xF)];
                buffer[(n + 1)] = IOUtils.DIGITS[(i9 & 0xF)];
              }
              else
              {
                m = i11 + 1;
                paramString = buffer;
                System.arraycopy(paramString, m, paramString, i11 + 2, i8 - i11 - 1);
                paramString = buffer;
                paramString[i11] = 92;
                paramString[m] = IOUtils.replaceChars[i9];
              }
            }
            else if (i10 > 1)
            {
              n = i2 - i6;
              m = i2;
              while (n < paramString.length())
              {
                int k = paramString.charAt(n);
                if ((k < IOUtils.specicalFlags_doubleQuotes.length) && (IOUtils.specicalFlags_doubleQuotes[k] != 0)) {
                  break label2656;
                }
                if (k == 47) {
                  if (isEnabled(SerializerFeature.WriteSlashAsSpecial))
                  {
                    label2656:
                    arrayOfChar = buffer;
                    i1 = m + 1;
                    arrayOfChar[m] = '\\';
                    if (IOUtils.specicalFlags_doubleQuotes[k] == 4)
                    {
                      arrayOfChar = buffer;
                      m = i1 + 1;
                      arrayOfChar[i1] = 'u';
                      i1 = m + 1;
                      arrayOfChar[m] = IOUtils.DIGITS[(k >>> 12 & 0xF)];
                      arrayOfChar = buffer;
                      m = i1 + 1;
                      arrayOfChar[i1] = IOUtils.DIGITS[(k >>> 8 & 0xF)];
                      arrayOfChar = buffer;
                      i1 = m + 1;
                      arrayOfChar[m] = IOUtils.DIGITS[(k >>> 4 & 0xF)];
                      buffer[i1] = IOUtils.DIGITS[(k & 0xF)];
                      m = i1 + 1;
                      break label2994;
                    }
                    buffer[i1] = IOUtils.replaceChars[k];
                    m = i1 + 1;
                    break label2994;
                  }
                }
                if (k == 8232)
                {
                  arrayOfChar = buffer;
                  i1 = m + 1;
                  arrayOfChar[m] = '\\';
                  m = i1 + 1;
                  arrayOfChar[i1] = 'u';
                  i1 = m + 1;
                  arrayOfChar[m] = IOUtils.DIGITS[(k >>> 12 & 0xF)];
                  arrayOfChar = buffer;
                  m = i1 + 1;
                  arrayOfChar[i1] = IOUtils.DIGITS[(k >>> 8 & 0xF)];
                  arrayOfChar = buffer;
                  i1 = m + 1;
                  arrayOfChar[m] = IOUtils.DIGITS[(k >>> 4 & 0xF)];
                  buffer[i1] = IOUtils.DIGITS[(k & 0xF)];
                  m = i1 + 1;
                }
                else
                {
                  buffer[m] = k;
                  m += 1;
                }
                label2994:
                n += 1;
              }
            }
          }
        }
        if (paramChar != 0)
        {
          paramString = buffer;
          m = count;
          paramString[(m - 2)] = 34;
          paramString[(m - 1)] = paramChar;
          return;
        }
        buffer[(count - 1)] = '"';
      }
    }
  }
  
  private void writeStringWithSingleQuote(String paramString)
  {
    int n = 0;
    int i = 0;
    if (paramString == null)
    {
      i = count + 4;
      if (i > buffer.length) {
        expandCapacity(i);
      }
      "null".getChars(0, 4, buffer, count);
      count = i;
      return;
    }
    int j = paramString.length();
    int i6 = count + j + 2;
    if (i6 > buffer.length)
    {
      if (writer != null)
      {
        write('\'');
        while (i < paramString.length())
        {
          char c = paramString.charAt(i);
          if ((c > '\r') && (c != '\\') && (c != '\'') && ((c != '/') || (!isEnabled(SerializerFeature.WriteSlashAsSpecial))))
          {
            write(c);
          }
          else
          {
            write('\\');
            write(IOUtils.replaceChars[c]);
          }
          i += 1;
        }
        write('\'');
        return;
      }
      expandCapacity(i6);
    }
    i = count;
    int i3 = i + 1;
    int i5 = i3 + j;
    char[] arrayOfChar = buffer;
    arrayOfChar[i] = '\'';
    paramString.getChars(0, j, arrayOfChar, i3);
    count = i6;
    i = i3;
    int k = -1;
    int m;
    for (j = 0; i < i5; j = m)
    {
      int i4 = buffer[i];
      int i2;
      int i1;
      if ((i4 > 13) && (i4 != 92) && (i4 != 39))
      {
        i2 = n;
        i1 = k;
        m = j;
        if (i4 == 47)
        {
          i2 = n;
          i1 = k;
          m = j;
          if (!isEnabled(SerializerFeature.WriteSlashAsSpecial)) {}
        }
      }
      else
      {
        i2 = n + 1;
        i1 = i;
        m = i4;
      }
      i += 1;
      n = i2;
      k = i1;
    }
    i = i6 + n;
    if (i > buffer.length) {
      expandCapacity(i);
    }
    count = i;
    if (n == 1)
    {
      paramString = buffer;
      i = k + 1;
      System.arraycopy(paramString, i, paramString, k + 2, i5 - k - 1);
      paramString = buffer;
      paramString[k] = 92;
      paramString[i] = IOUtils.replaceChars[j];
    }
    else if (n > 1)
    {
      paramString = buffer;
      i = k + 1;
      System.arraycopy(paramString, i, paramString, k + 2, i5 - k - 1);
      paramString = buffer;
      paramString[k] = 92;
      paramString[i] = IOUtils.replaceChars[j];
      j = i5 + 1;
      i -= 2;
      while (i >= i3)
      {
        m = buffer[i];
        if ((m > 13) && (m != 92) && (m != 39))
        {
          k = j;
          if (m == 47)
          {
            k = j;
            if (!isEnabled(SerializerFeature.WriteSlashAsSpecial)) {}
          }
        }
        else
        {
          paramString = buffer;
          k = i + 1;
          System.arraycopy(paramString, k, paramString, i + 2, j - i - 1);
          paramString = buffer;
          paramString[i] = 92;
          paramString[k] = IOUtils.replaceChars[m];
          k = j + 1;
        }
        i -= 1;
        j = k;
      }
    }
    buffer[(count - 1)] = '\'';
  }
  
  public SerializeWriter append(char paramChar)
  {
    write(paramChar);
    return this;
  }
  
  public SerializeWriter append(CharSequence paramCharSequence)
  {
    if (paramCharSequence == null) {
      paramCharSequence = "null";
    } else {
      paramCharSequence = paramCharSequence.toString();
    }
    write(paramCharSequence, 0, paramCharSequence.length());
    return this;
  }
  
  public SerializeWriter append(CharSequence paramCharSequence, int paramInt1, int paramInt2)
  {
    Object localObject = paramCharSequence;
    if (paramCharSequence == null) {
      localObject = "null";
    }
    paramCharSequence = ((CharSequence)localObject).subSequence(paramInt1, paramInt2).toString();
    write(paramCharSequence, 0, paramCharSequence.length());
    return this;
  }
  
  public void close()
  {
    if ((writer != null) && (count > 0)) {
      flush();
    }
    char[] arrayOfChar = buffer;
    if (arrayOfChar.length <= 8192) {
      bufLocal.set(new SoftReference(arrayOfChar));
    }
    buffer = null;
  }
  
  public void config(SerializerFeature paramSerializerFeature, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      features |= paramSerializerFeature.getMask();
      if (paramSerializerFeature == SerializerFeature.WriteEnumUsingToString)
      {
        features &= SerializerFeature.WriteEnumUsingName.getMask();
        return;
      }
      if (paramSerializerFeature == SerializerFeature.WriteEnumUsingName) {
        features &= SerializerFeature.WriteEnumUsingToString.getMask();
      }
    }
    else
    {
      int i = features;
      features = (paramSerializerFeature.getMask() & i);
    }
  }
  
  public void expandCapacity(int paramInt)
  {
    int i = buffer.length * 3 / 2 + 1;
    if (i >= paramInt) {
      paramInt = i;
    }
    char[] arrayOfChar = new char[paramInt];
    System.arraycopy(buffer, 0, arrayOfChar, 0, count);
    buffer = arrayOfChar;
  }
  
  public void flush()
  {
    Writer localWriter = writer;
    if (localWriter == null) {
      return;
    }
    char[] arrayOfChar = buffer;
    int i = count;
    try
    {
      localWriter.write(arrayOfChar, 0, i);
      localWriter = writer;
      localWriter.flush();
      count = 0;
      return;
    }
    catch (IOException localIOException)
    {
      throw new JSONException(localIOException.getMessage(), localIOException);
    }
  }
  
  public int getBufferLength()
  {
    return buffer.length;
  }
  
  public boolean isEnabled(SerializerFeature paramSerializerFeature)
  {
    return SerializerFeature.isEnabled(features, paramSerializerFeature);
  }
  
  public void reset()
  {
    count = 0;
  }
  
  public int size()
  {
    return count;
  }
  
  public byte[] toBytes(String paramString)
  {
    if (writer == null)
    {
      String str = paramString;
      if (paramString == null) {
        str = "UTF-8";
      }
      return new SerialWriterStringEncoder(Charset.forName(str)).encode(buffer, 0, count);
    }
    throw new UnsupportedOperationException("writer not null");
  }
  
  public char[] toCharArray()
  {
    if (writer == null)
    {
      int i = count;
      char[] arrayOfChar = new char[i];
      System.arraycopy(buffer, 0, arrayOfChar, 0, i);
      return arrayOfChar;
    }
    throw new UnsupportedOperationException("writer not null");
  }
  
  public String toString()
  {
    return new String(buffer, 0, count);
  }
  
  public void write(char paramChar)
  {
    int j = count + 1;
    int i = j;
    if (j > buffer.length) {
      if (writer == null)
      {
        expandCapacity(j);
        i = j;
      }
      else
      {
        flush();
        i = 1;
      }
    }
    buffer[count] = paramChar;
    count = i;
  }
  
  public void write(int paramInt)
  {
    int j = count + 1;
    int i = j;
    if (j > buffer.length) {
      if (writer == null)
      {
        expandCapacity(j);
        i = j;
      }
      else
      {
        flush();
        i = 1;
      }
    }
    buffer[count] = ((char)paramInt);
    count = i;
  }
  
  public void write(String paramString)
  {
    if (paramString == null)
    {
      writeNull();
      return;
    }
    write(paramString, 0, paramString.length());
  }
  
  public void write(String paramString, int paramInt1, int paramInt2)
  {
    int m = count + paramInt2;
    int i = m;
    int j = paramInt1;
    int k = paramInt2;
    if (m > buffer.length)
    {
      i = paramInt1;
      j = paramInt2;
      if (writer == null)
      {
        expandCapacity(m);
        i = m;
        j = paramInt1;
        k = paramInt2;
      }
      else
      {
        for (;;)
        {
          char[] arrayOfChar = buffer;
          paramInt2 = arrayOfChar.length;
          paramInt1 = count;
          k = paramInt2 - paramInt1;
          paramInt2 = i + k;
          paramString.getChars(i, paramInt2, arrayOfChar, paramInt1);
          count = buffer.length;
          flush();
          paramInt1 = j - k;
          if (paramInt1 <= buffer.length)
          {
            i = paramInt1;
            j = paramInt2;
            k = paramInt1;
            break;
          }
          i = paramInt2;
          j = paramInt1;
        }
      }
    }
    paramString.getChars(j, k + j, buffer, count);
    count = i;
  }
  
  public void write(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      write("true");
      return;
    }
    write("false");
  }
  
  public void write(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    if ((paramInt1 >= 0) && (paramInt1 <= paramArrayOfChar.length) && (paramInt2 >= 0))
    {
      int i = paramInt1 + paramInt2;
      if ((i <= paramArrayOfChar.length) && (i >= 0))
      {
        if (paramInt2 == 0) {
          return;
        }
        int m = count + paramInt2;
        int k = m;
        int j = paramInt1;
        i = paramInt2;
        if (m > buffer.length)
        {
          i = paramInt1;
          j = paramInt2;
          if (writer == null)
          {
            expandCapacity(m);
            k = m;
            j = paramInt1;
            i = paramInt2;
          }
          else
          {
            do
            {
              char[] arrayOfChar = buffer;
              paramInt2 = arrayOfChar.length;
              paramInt1 = count;
              paramInt2 -= paramInt1;
              System.arraycopy(paramArrayOfChar, i, arrayOfChar, paramInt1, paramInt2);
              count = buffer.length;
              flush();
              paramInt1 = j - paramInt2;
              paramInt2 = i + paramInt2;
              i = paramInt2;
              j = paramInt1;
            } while (paramInt1 > buffer.length);
            k = paramInt1;
            i = paramInt1;
            j = paramInt2;
          }
        }
        System.arraycopy(paramArrayOfChar, j, buffer, count, i);
        count = k;
        return;
      }
    }
    throw new IndexOutOfBoundsException();
  }
  
  public void writeBooleanAndChar(boolean paramBoolean, char paramChar)
  {
    if (paramBoolean)
    {
      if (paramChar == ',')
      {
        write("true,");
        return;
      }
      if (paramChar == ']')
      {
        write("true]");
        return;
      }
      write("true");
      write(paramChar);
      return;
    }
    if (paramChar == ',')
    {
      write("false,");
      return;
    }
    if (paramChar == ']')
    {
      write("false]");
      return;
    }
    write("false");
    write(paramChar);
  }
  
  public void writeByteArray(byte[] paramArrayOfByte)
  {
    int i1 = paramArrayOfByte.length;
    boolean bool = isEnabled(SerializerFeature.UseSingleQuotes);
    char c1;
    if (bool) {
      c1 = '\'';
    } else {
      c1 = '"';
    }
    if (i1 == 0)
    {
      if (bool) {
        paramArrayOfByte = "''";
      } else {
        paramArrayOfByte = "\"\"";
      }
      write(paramArrayOfByte);
      return;
    }
    char[] arrayOfChar1 = Base64.CA;
    int n = i1 / 3 * 3;
    int m = i1 - 1;
    int i = m / 3;
    int i3 = count;
    int i2 = (i + 1 << 2) + i3 + 2;
    i = buffer.length;
    int k = 0;
    int j = 0;
    char c2;
    if (i2 > i)
    {
      if (writer != null)
      {
        write(c1);
        i = 0;
        while (i < n)
        {
          k = i + 1;
          i2 = paramArrayOfByte[i];
          i = k + 1;
          k = (i2 & 0xFF) << 16 | (paramArrayOfByte[k] & 0xFF) << 8 | paramArrayOfByte[i] & 0xFF;
          write(arrayOfChar1[(k >>> 18 & 0x3F)]);
          write(arrayOfChar1[(k >>> 12 & 0x3F)]);
          write(arrayOfChar1[(k >>> 6 & 0x3F)]);
          write(arrayOfChar1[(k & 0x3F)]);
          i += 1;
        }
        k = i1 - n;
        if (k > 0)
        {
          n = paramArrayOfByte[n];
          i = j;
          if (k == 2) {
            i = (paramArrayOfByte[m] & 0xFF) << 2;
          }
          i = (n & 0xFF) << 10 | i;
          write(arrayOfChar1[(i >> 12)]);
          write(arrayOfChar1[(i >>> 6 & 0x3F)]);
          if (k == 2) {
            c2 = arrayOfChar1[(i & 0x3F)];
          } else {
            c2 = '=';
          }
          write(c2);
          write('=');
        }
        write(c1);
        return;
      }
      expandCapacity(i2);
    }
    count = i2;
    char[] arrayOfChar2 = buffer;
    i = i3 + 1;
    arrayOfChar2[i3] = c1;
    j = 0;
    while (j < n)
    {
      i3 = j + 1;
      int i4 = paramArrayOfByte[j];
      j = i3 + 1;
      i3 = (i4 & 0xFF) << 16 | (paramArrayOfByte[i3] & 0xFF) << 8 | paramArrayOfByte[j] & 0xFF;
      arrayOfChar2 = buffer;
      i4 = i + 1;
      arrayOfChar2[i] = arrayOfChar1[(i3 >>> 18 & 0x3F)];
      i = i4 + 1;
      arrayOfChar2[i4] = arrayOfChar1[(i3 >>> 12 & 0x3F)];
      i4 = i + 1;
      arrayOfChar2[i] = arrayOfChar1[(i3 >>> 6 & 0x3F)];
      i = i4 + 1;
      arrayOfChar2[i4] = arrayOfChar1[(i3 & 0x3F)];
      j += 1;
    }
    j = i1 - n;
    if (j > 0)
    {
      n = paramArrayOfByte[n];
      i = k;
      if (j == 2) {
        i = (paramArrayOfByte[m] & 0xFF) << 2;
      }
      i = (n & 0xFF) << 10 | i;
      paramArrayOfByte = buffer;
      paramArrayOfByte[(i2 - 5)] = arrayOfChar1[(i >> 12)];
      paramArrayOfByte[(i2 - 4)] = arrayOfChar1[(i >>> 6 & 0x3F)];
      if (j == 2) {
        c2 = arrayOfChar1[(i & 0x3F)];
      } else {
        c2 = '=';
      }
      paramArrayOfByte[(i2 - 3)] = c2;
      buffer[(i2 - 2)] = '=';
    }
    buffer[(i2 - 1)] = c1;
  }
  
  public void writeCharacterAndChar(char paramChar1, char paramChar2)
  {
    writeString(Character.toString(paramChar1));
    write(paramChar2);
  }
  
  public void writeDoubleAndChar(double paramDouble, char paramChar)
  {
    String str2 = Double.toString(paramDouble);
    String str1 = str2;
    if (str2.endsWith(".0")) {
      str1 = str2.substring(0, str2.length() - 2);
    }
    write(str1);
    write(paramChar);
  }
  
  public void writeEnum(Enum paramEnum, char paramChar)
  {
    if (paramEnum == null)
    {
      writeNull();
      write(',');
      return;
    }
    if (isEnabled(SerializerFeature.WriteEnumUsingName))
    {
      writeEnumValue(paramEnum.name(), paramChar);
      return;
    }
    if (isEnabled(SerializerFeature.WriteEnumUsingToString))
    {
      writeEnumValue(paramEnum.toString(), paramChar);
      return;
    }
    writeIntAndChar(paramEnum.ordinal(), paramChar);
  }
  
  public void writeFieldEmptyList(char paramChar, String paramString)
  {
    write(paramChar);
    writeFieldName(paramString);
    write("[]");
  }
  
  public void writeFieldName(String paramString)
  {
    writeFieldName(paramString, false);
  }
  
  public void writeFieldName(String paramString, boolean paramBoolean)
  {
    if (paramString == null)
    {
      write("null:");
      return;
    }
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      if (isEnabled(SerializerFeature.QuoteFieldNames))
      {
        writeStringWithSingleQuote(paramString);
        write(':');
        return;
      }
      writeKeyWithSingleQuoteIfHasSpecial(paramString);
      return;
    }
    if (isEnabled(SerializerFeature.QuoteFieldNames))
    {
      writeStringWithDoubleQuote(paramString, ':', paramBoolean);
      return;
    }
    writeKeyWithDoubleQuoteIfHasSpecial(paramString);
  }
  
  public void writeFieldNull(char paramChar, String paramString)
  {
    write(paramChar);
    writeFieldName(paramString);
    writeNull();
  }
  
  public void writeFieldNullBoolean(char paramChar, String paramString)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (isEnabled(SerializerFeature.WriteNullBooleanAsFalse))
    {
      write("false");
      return;
    }
    writeNull();
  }
  
  public void writeFieldNullList(char paramChar, String paramString)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (isEnabled(SerializerFeature.WriteNullListAsEmpty))
    {
      write("[]");
      return;
    }
    writeNull();
  }
  
  public void writeFieldNullNumber(char paramChar, String paramString)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (isEnabled(SerializerFeature.WriteNullNumberAsZero))
    {
      write('0');
      return;
    }
    writeNull();
  }
  
  public void writeFieldNullString(char paramChar, String paramString)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (isEnabled(SerializerFeature.WriteNullStringAsEmpty))
    {
      writeString("");
      return;
    }
    writeNull();
  }
  
  public void writeFieldValue(char paramChar1, String paramString, char paramChar2)
  {
    write(paramChar1);
    writeFieldName(paramString);
    if (paramChar2 == 0)
    {
      writeString("\000");
      return;
    }
    writeString(Character.toString(paramChar2));
  }
  
  public void writeFieldValue(char paramChar, String paramString, double paramDouble)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (paramDouble == 0.0D)
    {
      write('0');
      return;
    }
    if (Double.isNaN(paramDouble))
    {
      writeNull();
      return;
    }
    if (Double.isInfinite(paramDouble))
    {
      writeNull();
      return;
    }
    String str = Double.toString(paramDouble);
    paramString = str;
    if (str.endsWith(".0")) {
      paramString = str.substring(0, str.length() - 2);
    }
    write(paramString);
  }
  
  public void writeFieldValue(char paramChar, String paramString, float paramFloat)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (paramFloat == 0.0F)
    {
      write('0');
      return;
    }
    if (Float.isNaN(paramFloat))
    {
      writeNull();
      return;
    }
    if (Float.isInfinite(paramFloat))
    {
      writeNull();
      return;
    }
    String str = Float.toString(paramFloat);
    paramString = str;
    if (str.endsWith(".0")) {
      paramString = str.substring(0, str.length() - 2);
    }
    write(paramString);
  }
  
  public void writeFieldValue(char paramChar, String paramString, int paramInt)
  {
    if ((paramInt != Integer.MIN_VALUE) && (isEnabled(SerializerFeature.QuoteFieldNames)))
    {
      int i;
      if (isEnabled(SerializerFeature.UseSingleQuotes)) {
        i = 39;
      } else {
        i = 34;
      }
      if (paramInt < 0) {
        j = IOUtils.stringSize(-paramInt) + 1;
      } else {
        j = IOUtils.stringSize(paramInt);
      }
      int k = paramString.length();
      int m = count + k + 4 + j;
      if (m > buffer.length)
      {
        if (writer != null)
        {
          writeFieldValue1(paramChar, paramString, paramInt);
          return;
        }
        expandCapacity(m);
      }
      int j = count;
      count = m;
      char[] arrayOfChar = buffer;
      arrayOfChar[j] = paramChar;
      m = j + k + 1;
      arrayOfChar[(j + 1)] = i;
      paramString.getChars(0, k, arrayOfChar, j + 2);
      paramString = buffer;
      paramString[(m + 1)] = i;
      paramString[(m + 2)] = 58;
      IOUtils.getChars(paramInt, count, paramString);
      return;
    }
    writeFieldValue1(paramChar, paramString, paramInt);
  }
  
  public void writeFieldValue(char paramChar, String paramString, long paramLong)
  {
    if ((paramLong != Long.MIN_VALUE) && (isEnabled(SerializerFeature.QuoteFieldNames)))
    {
      int i;
      if (isEnabled(SerializerFeature.UseSingleQuotes)) {
        i = 39;
      } else {
        i = 34;
      }
      if (paramLong < 0L) {
        j = IOUtils.stringSize(-paramLong) + 1;
      } else {
        j = IOUtils.stringSize(paramLong);
      }
      int k = paramString.length();
      int m = count + k + 4 + j;
      if (m > buffer.length)
      {
        if (writer != null)
        {
          write(paramChar);
          writeFieldName(paramString);
          writeLong(paramLong);
          return;
        }
        expandCapacity(m);
      }
      int j = count;
      count = m;
      char[] arrayOfChar = buffer;
      arrayOfChar[j] = paramChar;
      m = j + k + 1;
      arrayOfChar[(j + 1)] = i;
      paramString.getChars(0, k, arrayOfChar, j + 2);
      paramString = buffer;
      paramString[(m + 1)] = i;
      paramString[(m + 2)] = 58;
      IOUtils.getChars(paramLong, count, paramString);
      return;
    }
    writeFieldValue1(paramChar, paramString, paramLong);
  }
  
  public void writeFieldValue(char paramChar, String paramString, Enum paramEnum)
  {
    if (paramEnum == null)
    {
      write(paramChar);
      writeFieldName(paramString);
      writeNull();
      return;
    }
    if (isEnabled(SerializerFeature.WriteEnumUsingName))
    {
      writeEnumFieldValue(paramChar, paramString, paramEnum.name());
      return;
    }
    if (isEnabled(SerializerFeature.WriteEnumUsingToString))
    {
      writeEnumFieldValue(paramChar, paramString, paramEnum.toString());
      return;
    }
    writeFieldValue(paramChar, paramString, paramEnum.ordinal());
  }
  
  public void writeFieldValue(char paramChar, String paramString1, String paramString2)
  {
    if (isEnabled(SerializerFeature.QuoteFieldNames))
    {
      if (isEnabled(SerializerFeature.UseSingleQuotes))
      {
        write(paramChar);
        writeFieldName(paramString1);
        if (paramString2 == null)
        {
          writeNull();
          return;
        }
        writeString(paramString2);
        return;
      }
      if (isEnabled(SerializerFeature.BrowserSecure))
      {
        write(paramChar);
        writeStringWithDoubleQuote(paramString1, ':');
        writeStringWithDoubleQuote(paramString2, '\000');
        return;
      }
      if (isEnabled(SerializerFeature.BrowserCompatible))
      {
        write(paramChar);
        writeStringWithDoubleQuote(paramString1, ':');
        writeStringWithDoubleQuote(paramString2, '\000');
        return;
      }
      writeFieldValueStringWithDoubleQuote(paramChar, paramString1, paramString2, true);
      return;
    }
    write(paramChar);
    writeFieldName(paramString1);
    if (paramString2 == null)
    {
      writeNull();
      return;
    }
    writeString(paramString2);
  }
  
  public void writeFieldValue(char paramChar, String paramString, BigDecimal paramBigDecimal)
  {
    write(paramChar);
    writeFieldName(paramString);
    if (paramBigDecimal == null)
    {
      writeNull();
      return;
    }
    write(paramBigDecimal.toString());
  }
  
  public void writeFieldValue(char paramChar, String paramString, boolean paramBoolean)
  {
    int i;
    if (isEnabled(SerializerFeature.UseSingleQuotes)) {
      i = 39;
    } else {
      i = 34;
    }
    if (paramBoolean) {
      j = 4;
    } else {
      j = 5;
    }
    int k = paramString.length();
    int m = count + k + 4 + j;
    if (m > buffer.length)
    {
      if (writer != null)
      {
        write(paramChar);
        writeString(paramString);
        write(':');
        write(paramBoolean);
        return;
      }
      expandCapacity(m);
    }
    int j = count;
    count = m;
    char[] arrayOfChar = buffer;
    arrayOfChar[j] = paramChar;
    m = j + k + 1;
    arrayOfChar[(j + 1)] = i;
    paramString.getChars(0, k, arrayOfChar, j + 2);
    buffer[(m + 1)] = i;
    if (paramBoolean)
    {
      System.arraycopy(":true".toCharArray(), 0, buffer, m + 2, 5);
      return;
    }
    System.arraycopy(":false".toCharArray(), 0, buffer, m + 2, 6);
  }
  
  public void writeFieldValue1(char paramChar, String paramString, int paramInt)
  {
    write(paramChar);
    writeFieldName(paramString);
    writeInt(paramInt);
  }
  
  public void writeFieldValue1(char paramChar, String paramString, long paramLong)
  {
    write(paramChar);
    writeFieldName(paramString);
    writeLong(paramLong);
  }
  
  public void writeFloatAndChar(float paramFloat, char paramChar)
  {
    String str2 = Float.toString(paramFloat);
    String str1 = str2;
    if (str2.endsWith(".0")) {
      str1 = str2.substring(0, str2.length() - 2);
    }
    write(str1);
    write(paramChar);
  }
  
  public void writeInt(int paramInt)
  {
    if (paramInt == Integer.MIN_VALUE)
    {
      write("-2147483648");
      return;
    }
    int i;
    if (paramInt < 0) {
      i = IOUtils.stringSize(-paramInt) + 1;
    } else {
      i = IOUtils.stringSize(paramInt);
    }
    int j = count + i;
    if (j > buffer.length) {
      if (writer == null)
      {
        expandCapacity(j);
      }
      else
      {
        char[] arrayOfChar = new char[i];
        IOUtils.getChars(paramInt, i, arrayOfChar);
        write(arrayOfChar, 0, arrayOfChar.length);
        return;
      }
    }
    IOUtils.getChars(paramInt, j, buffer);
    count = j;
  }
  
  public void writeIntAndChar(int paramInt, char paramChar)
  {
    if (paramInt == Integer.MIN_VALUE)
    {
      write("-2147483648");
      write(paramChar);
      return;
    }
    if (paramInt < 0) {
      i = IOUtils.stringSize(-paramInt) + 1;
    } else {
      i = IOUtils.stringSize(paramInt);
    }
    int i = count + i;
    int j = i + 1;
    if (j > buffer.length)
    {
      if (writer != null)
      {
        writeInt(paramInt);
        write(paramChar);
        return;
      }
      expandCapacity(j);
    }
    IOUtils.getChars(paramInt, i, buffer);
    buffer[i] = paramChar;
    count = j;
  }
  
  public void writeLong(long paramLong)
  {
    if (paramLong == Long.MIN_VALUE)
    {
      write("-9223372036854775808");
      return;
    }
    int i;
    if (paramLong < 0L) {
      i = IOUtils.stringSize(-paramLong) + 1;
    } else {
      i = IOUtils.stringSize(paramLong);
    }
    int j = count + i;
    if (j > buffer.length) {
      if (writer == null)
      {
        expandCapacity(j);
      }
      else
      {
        char[] arrayOfChar = new char[i];
        IOUtils.getChars(paramLong, i, arrayOfChar);
        write(arrayOfChar, 0, arrayOfChar.length);
        return;
      }
    }
    IOUtils.getChars(paramLong, j, buffer);
    count = j;
  }
  
  public void writeLongAndChar(long paramLong, char paramChar)
    throws IOException
  {
    if (paramLong == Long.MIN_VALUE)
    {
      write("-9223372036854775808");
      write(paramChar);
      return;
    }
    if (paramLong < 0L) {
      i = IOUtils.stringSize(-paramLong) + 1;
    } else {
      i = IOUtils.stringSize(paramLong);
    }
    int i = count + i;
    int j = i + 1;
    if (j > buffer.length)
    {
      if (writer != null)
      {
        writeLong(paramLong);
        write(paramChar);
        return;
      }
      expandCapacity(j);
    }
    IOUtils.getChars(paramLong, i, buffer);
    buffer[i] = paramChar;
    count = j;
  }
  
  public void writeNull()
  {
    write("null");
  }
  
  public void writeString(String paramString)
  {
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      writeStringWithSingleQuote(paramString);
      return;
    }
    writeStringWithDoubleQuote(paramString, '\000');
  }
  
  public void writeString(String paramString, char paramChar)
  {
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      writeStringWithSingleQuote(paramString);
      write(paramChar);
      return;
    }
    writeStringWithDoubleQuote(paramString, paramChar);
  }
  
  public void writeTo(OutputStream paramOutputStream, String paramString)
    throws IOException
  {
    writeTo(paramOutputStream, Charset.forName(paramString));
  }
  
  public void writeTo(OutputStream paramOutputStream, Charset paramCharset)
    throws IOException
  {
    if (writer == null)
    {
      paramOutputStream.write(new String(buffer, 0, count).getBytes(paramCharset));
      return;
    }
    throw new UnsupportedOperationException("writer not null");
  }
  
  public void writeTo(Writer paramWriter)
    throws IOException
  {
    if (writer == null)
    {
      paramWriter.write(buffer, 0, count);
      return;
    }
    throw new UnsupportedOperationException("writer not null");
  }
}
