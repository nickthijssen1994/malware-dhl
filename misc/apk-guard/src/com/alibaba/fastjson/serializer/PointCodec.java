package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import java.awt.Point;
import java.io.IOException;
import java.lang.reflect.Type;

public class PointCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static final PointCodec instance = new PointCodec();
  
  public PointCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramType = paramDefaultJSONParser.getLexer();
    if (paramType.token() == 8)
    {
      paramType.nextToken(16);
      return null;
    }
    if ((paramType.token() != 12) && (paramType.token() != 16)) {
      throw new JSONException("syntax error");
    }
    paramType.nextToken();
    int j = 0;
    int i = 0;
    for (;;)
    {
      if (paramType.token() == 13)
      {
        paramType.nextToken();
        return new Point(j, i);
      }
      if (paramType.token() != 4) {
        break label310;
      }
      paramObject = paramType.stringVal();
      if (JSON.DEFAULT_TYPE_KEY.equals(paramObject))
      {
        paramDefaultJSONParser.acceptType("java.awt.Point");
      }
      else
      {
        paramType.nextTokenWithColon(2);
        if (paramType.token() != 2) {
          break label272;
        }
        int k = paramType.intValue();
        paramType.nextToken();
        int m;
        if (paramObject.equalsIgnoreCase("x"))
        {
          m = i;
        }
        else
        {
          if (!paramObject.equalsIgnoreCase("y")) {
            break;
          }
          m = k;
          k = j;
        }
        j = k;
        i = m;
        if (paramType.token() == 16)
        {
          paramType.nextToken(4);
          j = k;
          i = m;
        }
      }
    }
    paramDefaultJSONParser = new StringBuilder();
    paramDefaultJSONParser.append("syntax error, ");
    paramDefaultJSONParser.append(paramObject);
    throw new JSONException(paramDefaultJSONParser.toString());
    label272:
    paramDefaultJSONParser = new StringBuilder();
    paramDefaultJSONParser.append("syntax error : ");
    paramDefaultJSONParser.append(paramType.tokenName());
    throw new JSONException(paramDefaultJSONParser.toString());
    label310:
    throw new JSONException("syntax error");
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    paramJSONSerializer = paramJSONSerializer.getWriter();
    paramObject1 = (Point)paramObject1;
    if (paramObject1 == null)
    {
      paramJSONSerializer.writeNull();
      return;
    }
    boolean bool = paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName);
    char c = '{';
    if (bool)
    {
      paramJSONSerializer.write('{');
      paramJSONSerializer.writeFieldName(JSON.DEFAULT_TYPE_KEY);
      paramJSONSerializer.writeString(Point.class.getName());
      c = ',';
    }
    paramJSONSerializer.writeFieldValue(c, "x", paramObject1.getX());
    paramJSONSerializer.writeFieldValue(',', "y", paramObject1.getY());
    paramJSONSerializer.write('}');
  }
}
