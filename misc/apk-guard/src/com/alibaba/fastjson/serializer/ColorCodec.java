package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import java.awt.Color;
import java.io.IOException;
import java.lang.reflect.Type;

public class ColorCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static final ColorCodec instance = new ColorCodec();
  
  public ColorCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramType = paramDefaultJSONParser.getLexer();
    if ((paramType.token() != 12) && (paramType.token() != 16)) {
      throw new JSONException("syntax error");
    }
    paramType.nextToken();
    int n = 0;
    int m = 0;
    int k = 0;
    int j = 0;
    for (;;)
    {
      if (paramType.token() == 13)
      {
        paramType.nextToken();
        return new Color(n, m, k, j);
      }
      if (paramType.token() != 4) {
        break label340;
      }
      paramDefaultJSONParser = paramType.stringVal();
      paramType.nextTokenWithColon(2);
      if (paramType.token() != 2) {
        break label330;
      }
      int i = paramType.intValue();
      paramType.nextToken();
      int i1;
      int i2;
      int i3;
      if (paramDefaultJSONParser.equalsIgnoreCase("r"))
      {
        i1 = m;
        i2 = k;
        i3 = j;
      }
      else if (paramDefaultJSONParser.equalsIgnoreCase("g"))
      {
        i1 = i;
        i = n;
        i2 = k;
        i3 = j;
      }
      else if (paramDefaultJSONParser.equalsIgnoreCase("b"))
      {
        i2 = i;
        i = n;
        i1 = m;
        i3 = j;
      }
      else
      {
        if (!paramDefaultJSONParser.equalsIgnoreCase("alpha")) {
          break;
        }
        i3 = i;
        i2 = k;
        i1 = m;
        i = n;
      }
      n = i;
      m = i1;
      k = i2;
      j = i3;
      if (paramType.token() == 16)
      {
        paramType.nextToken(4);
        n = i;
        m = i1;
        k = i2;
        j = i3;
      }
    }
    paramType = new StringBuilder();
    paramType.append("syntax error, ");
    paramType.append(paramDefaultJSONParser);
    throw new JSONException(paramType.toString());
    label330:
    throw new JSONException("syntax error");
    label340:
    throw new JSONException("syntax error");
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    paramJSONSerializer = paramJSONSerializer.getWriter();
    paramObject1 = (Color)paramObject1;
    if (paramObject1 == null)
    {
      paramJSONSerializer.writeNull();
      return;
    }
    boolean bool = paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName);
    char c = '{';
    if (bool)
    {
      paramJSONSerializer.write('{');
      paramJSONSerializer.writeFieldName(JSON.DEFAULT_TYPE_KEY);
      paramJSONSerializer.writeString(Color.class.getName());
      c = ',';
    }
    paramJSONSerializer.writeFieldValue(c, "r", paramObject1.getRed());
    paramJSONSerializer.writeFieldValue(',', "g", paramObject1.getGreen());
    paramJSONSerializer.writeFieldValue(',', "b", paramObject1.getBlue());
    if (paramObject1.getAlpha() > 0) {
      paramJSONSerializer.writeFieldValue(',', "alpha", paramObject1.getAlpha());
    }
    paramJSONSerializer.write('}');
  }
}
