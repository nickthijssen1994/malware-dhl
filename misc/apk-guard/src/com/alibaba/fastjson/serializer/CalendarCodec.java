package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.DateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.util.IOUtils;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

public class CalendarCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static final CalendarCodec instance = new CalendarCodec();
  
  public CalendarCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramDefaultJSONParser = DateDeserializer.instance.deserialze(paramDefaultJSONParser, paramType, paramObject);
    if ((paramDefaultJSONParser instanceof Calendar)) {
      return paramDefaultJSONParser;
    }
    paramDefaultJSONParser = (Date)paramDefaultJSONParser;
    if (paramDefaultJSONParser == null) {
      return null;
    }
    paramType = Calendar.getInstance();
    paramType.setTime(paramDefaultJSONParser);
    return paramType;
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    paramType = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      paramType.writeNull();
      return;
    }
    Calendar localCalendar = (Calendar)paramObject1;
    if (paramJSONSerializer.isEnabled(SerializerFeature.UseISO8601DateFormat))
    {
      if (paramJSONSerializer.isEnabled(SerializerFeature.UseSingleQuotes)) {
        paramType.append('\'');
      } else {
        paramType.append('"');
      }
      paramInt = localCalendar.get(1);
      int i = localCalendar.get(2) + 1;
      int j = localCalendar.get(5);
      int k = localCalendar.get(11);
      int m = localCalendar.get(12);
      int n = localCalendar.get(13);
      int i1 = localCalendar.get(14);
      if (i1 != 0)
      {
        paramObject2 = "0000-00-00T00:00:00.000".toCharArray();
        paramObject1 = paramObject2;
        IOUtils.getChars(i1, 23, paramObject2);
        IOUtils.getChars(n, 19, paramObject2);
        IOUtils.getChars(m, 16, paramObject2);
        IOUtils.getChars(k, 13, paramObject2);
        IOUtils.getChars(j, 10, paramObject2);
        IOUtils.getChars(i, 7, paramObject2);
        IOUtils.getChars(paramInt, 4, paramObject2);
      }
      else if ((n == 0) && (m == 0) && (k == 0))
      {
        paramObject2 = "0000-00-00".toCharArray();
        paramObject1 = paramObject2;
        IOUtils.getChars(j, 10, paramObject2);
        IOUtils.getChars(i, 7, paramObject2);
        IOUtils.getChars(paramInt, 4, paramObject2);
      }
      else
      {
        paramObject2 = "0000-00-00T00:00:00".toCharArray();
        paramObject1 = paramObject2;
        IOUtils.getChars(n, 19, paramObject2);
        IOUtils.getChars(m, 16, paramObject2);
        IOUtils.getChars(k, 13, paramObject2);
        IOUtils.getChars(j, 10, paramObject2);
        IOUtils.getChars(i, 7, paramObject2);
        IOUtils.getChars(paramInt, 4, paramObject2);
      }
      paramType.write(paramObject1);
      paramInt = localCalendar.getTimeZone().getRawOffset() / 3600000;
      if (paramInt == 0) {
        paramType.append("Z");
      } else if (paramInt > 0) {
        paramType.append("+").append(String.format("%02d", new Object[] { Integer.valueOf(paramInt) })).append(":00");
      } else {
        paramType.append("-").append(String.format("%02d", new Object[] { Integer.valueOf(-paramInt) })).append(":00");
      }
      if (paramJSONSerializer.isEnabled(SerializerFeature.UseSingleQuotes))
      {
        paramType.append('\'');
        return;
      }
      paramType.append('"');
      return;
    }
    paramJSONSerializer.write(localCalendar.getTime());
  }
}
