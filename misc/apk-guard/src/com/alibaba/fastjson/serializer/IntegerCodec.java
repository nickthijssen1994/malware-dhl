package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.concurrent.atomic.AtomicInteger;

public class IntegerCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static IntegerCodec instance = new IntegerCodec();
  
  public IntegerCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramObject = paramDefaultJSONParser.getLexer();
    if (paramObject.token() == 8)
    {
      paramObject.nextToken(16);
      return null;
    }
    if (paramObject.token() == 2)
    {
      int i = paramObject.intValue();
      paramObject.nextToken(16);
      paramDefaultJSONParser = Integer.valueOf(i);
    }
    else if (paramObject.token() == 3)
    {
      paramDefaultJSONParser = paramObject.decimalValue();
      paramObject.nextToken(16);
      paramDefaultJSONParser = Integer.valueOf(paramDefaultJSONParser.intValue());
    }
    else
    {
      paramDefaultJSONParser = TypeUtils.castToInt(paramDefaultJSONParser.parse());
    }
    if (paramType == AtomicInteger.class) {
      return new AtomicInteger(paramDefaultJSONParser.intValue());
    }
    return paramDefaultJSONParser;
  }
  
  public int getFastMatchToken()
  {
    return 2;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    paramObject2 = paramJSONSerializer.getWriter();
    paramObject1 = (Number)paramObject1;
    if (paramObject1 == null)
    {
      if (paramObject2.isEnabled(SerializerFeature.WriteNullNumberAsZero))
      {
        paramObject2.write('0');
        return;
      }
      paramObject2.writeNull();
      return;
    }
    paramObject2.writeInt(paramObject1.intValue());
    if (paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName))
    {
      paramJSONSerializer = paramObject1.getClass();
      if (paramJSONSerializer == Byte.class)
      {
        paramObject2.write('B');
        return;
      }
      if (paramJSONSerializer == Short.class) {
        paramObject2.write('S');
      }
    }
  }
}
