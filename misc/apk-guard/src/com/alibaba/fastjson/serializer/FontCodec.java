package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import java.awt.Font;
import java.io.IOException;
import java.lang.reflect.Type;

public class FontCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static final FontCodec instance = new FontCodec();
  
  public FontCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramObject = paramDefaultJSONParser.getLexer();
    int i = paramObject.token();
    paramDefaultJSONParser = null;
    if (i == 8)
    {
      paramObject.nextToken(16);
      return null;
    }
    if ((paramObject.token() != 12) && (paramObject.token() != 16)) {
      throw new JSONException("syntax error");
    }
    paramObject.nextToken();
    int j = 0;
    i = 0;
    for (;;)
    {
      if (paramObject.token() == 13)
      {
        paramObject.nextToken();
        return new Font(paramDefaultJSONParser, j, i);
      }
      if (paramObject.token() != 4) {
        break label361;
      }
      paramType = paramObject.stringVal();
      paramObject.nextTokenWithColon(2);
      int k;
      int m;
      if (paramType.equalsIgnoreCase("name"))
      {
        if (paramObject.token() == 4)
        {
          paramType = paramObject.stringVal();
          paramObject.nextToken();
          k = j;
          m = i;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else if (paramType.equalsIgnoreCase("style"))
      {
        if (paramObject.token() == 2)
        {
          k = paramObject.intValue();
          paramObject.nextToken();
          paramType = paramDefaultJSONParser;
          m = i;
        }
        else
        {
          throw new JSONException("syntax error");
        }
      }
      else
      {
        if (!paramType.equalsIgnoreCase("size")) {
          break label328;
        }
        if (paramObject.token() != 2) {
          break;
        }
        m = paramObject.intValue();
        paramObject.nextToken();
        paramType = paramDefaultJSONParser;
        k = j;
      }
      j = k;
      paramDefaultJSONParser = paramType;
      i = m;
      if (paramObject.token() == 16)
      {
        paramObject.nextToken(4);
        j = k;
        paramDefaultJSONParser = paramType;
        i = m;
      }
    }
    throw new JSONException("syntax error");
    label328:
    paramDefaultJSONParser = new StringBuilder();
    paramDefaultJSONParser.append("syntax error, ");
    paramDefaultJSONParser.append(paramType);
    throw new JSONException(paramDefaultJSONParser.toString());
    label361:
    throw new JSONException("syntax error");
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    paramJSONSerializer = paramJSONSerializer.getWriter();
    paramObject1 = (Font)paramObject1;
    if (paramObject1 == null)
    {
      paramJSONSerializer.writeNull();
      return;
    }
    boolean bool = paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName);
    char c = '{';
    if (bool)
    {
      paramJSONSerializer.write('{');
      paramJSONSerializer.writeFieldName(JSON.DEFAULT_TYPE_KEY);
      paramJSONSerializer.writeString(Font.class.getName());
      c = ',';
    }
    paramJSONSerializer.writeFieldValue(c, "name", paramObject1.getName());
    paramJSONSerializer.writeFieldValue(',', "style", paramObject1.getStyle());
    paramJSONSerializer.writeFieldValue(',', "size", paramObject1.getSize());
    paramJSONSerializer.write('}');
  }
}
