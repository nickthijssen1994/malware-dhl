package com.alibaba.fastjson.serializer;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Iterator;
import java.util.List;

public final class ListSerializer
  implements ObjectSerializer
{
  public static final ListSerializer instance = new ListSerializer();
  
  public ListSerializer() {}
  
  public final void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    boolean bool1 = paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName);
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if ((bool1) && ((paramType instanceof ParameterizedType))) {
      paramType = ((ParameterizedType)paramType).getActualTypeArguments()[0];
    } else {
      paramType = null;
    }
    if (paramObject1 == null)
    {
      if (localSerializeWriter.isEnabled(SerializerFeature.WriteNullListAsEmpty))
      {
        localSerializeWriter.write("[]");
        return;
      }
      localSerializeWriter.writeNull();
      return;
    }
    Object localObject1 = (List)paramObject1;
    if (((List)localObject1).size() == 0)
    {
      localSerializeWriter.append("[]");
      return;
    }
    SerialContext localSerialContext = paramJSONSerializer.getContext();
    paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2, 0);
    try
    {
      boolean bool2 = localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat);
      Object localObject2;
      Object localObject3;
      if (bool2)
      {
        localSerializeWriter.append('[');
        paramJSONSerializer.incrementIndent();
        localObject1 = ((List)localObject1).iterator();
        paramInt = 0;
        for (;;)
        {
          bool1 = ((Iterator)localObject1).hasNext();
          if (!bool1) {
            break;
          }
          localObject2 = ((Iterator)localObject1).next();
          if (paramInt != 0) {
            localSerializeWriter.append(',');
          }
          paramJSONSerializer.println();
          if (localObject2 != null)
          {
            bool1 = paramJSONSerializer.containsReference(localObject2);
            if (bool1)
            {
              paramJSONSerializer.writeReference(localObject2);
            }
            else
            {
              localObject3 = paramJSONSerializer.getObjectWriter(localObject2.getClass());
              paramJSONSerializer.setContext(new SerialContext(localSerialContext, paramObject1, paramObject2, 0, 0));
              ((ObjectSerializer)localObject3).write(paramJSONSerializer, localObject2, Integer.valueOf(paramInt), paramType, 0);
            }
          }
          else
          {
            paramJSONSerializer.getWriter().writeNull();
          }
          paramInt += 1;
        }
        paramJSONSerializer.decrementIdent();
        paramJSONSerializer.println();
        localSerializeWriter.append(']');
        paramJSONSerializer.setContext(localSerialContext);
        return;
      }
      localSerializeWriter.append('[');
      localObject1 = ((List)localObject1).iterator();
      paramInt = 0;
      for (;;)
      {
        bool2 = ((Iterator)localObject1).hasNext();
        if (!bool2) {
          break;
        }
        localObject2 = ((Iterator)localObject1).next();
        if (paramInt != 0) {
          localSerializeWriter.append(',');
        }
        if (localObject2 == null)
        {
          localSerializeWriter.append("null");
        }
        else
        {
          localObject3 = localObject2.getClass();
          if (localObject3 == Integer.class)
          {
            localSerializeWriter.writeInt(((Integer)localObject2).intValue());
          }
          else if (localObject3 == Long.class)
          {
            long l = ((Long)localObject2).longValue();
            if (bool1) {
              localSerializeWriter.writeLongAndChar(l, 'L');
            } else {
              localSerializeWriter.writeLong(l);
            }
          }
          else
          {
            paramJSONSerializer.setContext(new SerialContext(localSerialContext, paramObject1, paramObject2, 0, 0));
            bool2 = paramJSONSerializer.containsReference(localObject2);
            if (bool2) {
              paramJSONSerializer.writeReference(localObject2);
            } else {
              paramJSONSerializer.getObjectWriter(localObject2.getClass()).write(paramJSONSerializer, localObject2, Integer.valueOf(paramInt), paramType, 0);
            }
          }
        }
        paramInt += 1;
      }
      localSerializeWriter.append(']');
      paramJSONSerializer.setContext(localSerialContext);
      return;
    }
    catch (Throwable paramObject1)
    {
      paramJSONSerializer.setContext(localSerialContext);
      throw paramObject1;
    }
  }
}
