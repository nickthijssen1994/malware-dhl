package com.alibaba.fastjson.serializer;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.TreeSet;

public class CollectionSerializer
  implements ObjectSerializer
{
  public static final CollectionSerializer instance = new CollectionSerializer();
  
  public CollectionSerializer() {}
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      if (localSerializeWriter.isEnabled(SerializerFeature.WriteNullListAsEmpty))
      {
        localSerializeWriter.write("[]");
        return;
      }
      localSerializeWriter.writeNull();
      return;
    }
    Object localObject2 = null;
    boolean bool = paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName);
    paramInt = 0;
    Object localObject1 = localObject2;
    if (bool)
    {
      localObject1 = localObject2;
      if ((paramType instanceof ParameterizedType)) {
        localObject1 = ((ParameterizedType)paramType).getActualTypeArguments()[0];
      }
    }
    localObject2 = (Collection)paramObject1;
    paramType = paramJSONSerializer.getContext();
    paramJSONSerializer.setContext(paramType, paramObject1, paramObject2, 0);
    if (paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName)) {
      if (HashSet.class == localObject2.getClass()) {
        localSerializeWriter.append("Set");
      } else if (TreeSet.class == localObject2.getClass()) {
        localSerializeWriter.append("TreeSet");
      }
    }
    try
    {
      localSerializeWriter.append('[');
      paramObject1 = ((Collection)localObject2).iterator();
      for (;;)
      {
        bool = paramObject1.hasNext();
        if (!bool) {
          break;
        }
        paramObject2 = paramObject1.next();
        int i = paramInt + 1;
        if (paramInt != 0) {
          localSerializeWriter.append(',');
        }
        if (paramObject2 == null)
        {
          localSerializeWriter.writeNull();
        }
        else
        {
          localObject2 = paramObject2.getClass();
          if (localObject2 == Integer.class)
          {
            localSerializeWriter.writeInt(((Integer)paramObject2).intValue());
          }
          else if (localObject2 == Long.class)
          {
            localSerializeWriter.writeLong(((Long)paramObject2).longValue());
            bool = localSerializeWriter.isEnabled(SerializerFeature.WriteClassName);
            if (bool) {
              localSerializeWriter.write('L');
            }
          }
          else
          {
            localObject2 = paramJSONSerializer.getObjectWriter((Class)localObject2);
            ((ObjectSerializer)localObject2).write(paramJSONSerializer, paramObject2, Integer.valueOf(i - 1), (Type)localObject1, 0);
          }
        }
        paramInt = i;
      }
      localSerializeWriter.append(']');
      paramJSONSerializer.setContext(paramType);
      return;
    }
    catch (Throwable paramObject1)
    {
      paramJSONSerializer.setContext(paramType);
      throw paramObject1;
    }
  }
}
