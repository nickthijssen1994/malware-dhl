package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSON;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class MapSerializer
  implements ObjectSerializer
{
  public static MapSerializer instance = new MapSerializer();
  
  public MapSerializer() {}
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      localSerializeWriter.writeNull();
      return;
    }
    Map localMap = (Map)paramObject1;
    if (paramJSONSerializer.containsReference(paramObject1))
    {
      paramJSONSerializer.writeReference(paramObject1);
      return;
    }
    SerialContext localSerialContext = paramJSONSerializer.getContext();
    paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2, 0);
    try
    {
      localSerializeWriter.write('{');
      paramJSONSerializer.incrementIndent();
      boolean bool = localSerializeWriter.isEnabled(SerializerFeature.WriteClassName);
      if (bool)
      {
        localSerializeWriter.writeFieldName(JSON.DEFAULT_TYPE_KEY);
        localSerializeWriter.writeString(paramObject1.getClass().getName());
        paramInt = 0;
      }
      else
      {
        paramInt = 1;
      }
      Iterator localIterator = localMap.entrySet().iterator();
      Object localObject1 = null;
      ObjectSerializer localObjectSerializer = null;
      for (;;)
      {
        bool = localIterator.hasNext();
        if (!bool) {
          break;
        }
        paramObject2 = (Map.Entry)localIterator.next();
        Object localObject3 = paramObject2.getValue();
        Object localObject2 = localObject3;
        paramType = paramObject2.getKey();
        paramObject2 = paramJSONSerializer.getPropertyPreFiltersDirect();
        int i;
        if (paramObject2 != null)
        {
          i = paramObject2.size();
          if (i > 0)
          {
            if (paramType != null)
            {
              bool = paramType instanceof String;
              if (!bool)
              {
                bool = paramType.getClass().isPrimitive();
                if (!bool)
                {
                  bool = paramType instanceof Number;
                  if (!bool) {
                    break label280;
                  }
                }
                bool = FilterUtils.applyName(paramJSONSerializer, paramObject1, JSON.toJSONString(paramType));
                if (bool) {
                  break label280;
                }
                continue;
              }
            }
            bool = FilterUtils.applyName(paramJSONSerializer, paramObject1, (String)paramType);
            if (!bool) {
              continue;
            }
          }
        }
        label280:
        paramObject2 = paramJSONSerializer.getPropertyFiltersDirect();
        if (paramObject2 != null)
        {
          i = paramObject2.size();
          if (i > 0)
          {
            if (paramType != null)
            {
              bool = paramType instanceof String;
              if (!bool)
              {
                bool = paramType.getClass().isPrimitive();
                if (!bool)
                {
                  bool = paramType instanceof Number;
                  if (!bool) {
                    break label393;
                  }
                }
                bool = FilterUtils.apply(paramJSONSerializer, paramObject1, JSON.toJSONString(paramType), localObject3);
                if (bool) {
                  break label393;
                }
                continue;
              }
            }
            bool = FilterUtils.apply(paramJSONSerializer, paramObject1, (String)paramType, localObject3);
            if (!bool) {
              continue;
            }
          }
        }
        label393:
        List localList = paramJSONSerializer.getNameFiltersDirect();
        paramObject2 = paramType;
        if (localList != null)
        {
          i = localList.size();
          paramObject2 = paramType;
          if (i > 0)
          {
            if (paramType != null)
            {
              bool = paramType instanceof String;
              if (!bool)
              {
                bool = paramType.getClass().isPrimitive();
                if (!bool)
                {
                  bool = paramType instanceof Number;
                  paramObject2 = paramType;
                  if (!bool) {
                    break label506;
                  }
                }
                paramObject2 = FilterUtils.processKey(paramJSONSerializer, paramObject1, JSON.toJSONString(paramType), localObject3);
                break label506;
              }
            }
            paramObject2 = FilterUtils.processKey(paramJSONSerializer, paramObject1, (String)paramType, localObject3);
          }
        }
        label506:
        localList = paramJSONSerializer.getValueFiltersDirect();
        paramType = (Type)localObject2;
        if (localList != null)
        {
          i = localList.size();
          paramType = (Type)localObject2;
          if (i > 0)
          {
            if (paramObject2 != null)
            {
              bool = paramObject2 instanceof String;
              if (!bool)
              {
                bool = paramObject2.getClass().isPrimitive();
                if (!bool)
                {
                  bool = paramObject2 instanceof Number;
                  paramType = (Type)localObject2;
                  if (!bool) {
                    break label615;
                  }
                }
                paramType = FilterUtils.processValue(paramJSONSerializer, paramObject1, JSON.toJSONString(paramObject2), localObject3);
                break label615;
              }
            }
            paramType = FilterUtils.processValue(paramJSONSerializer, paramObject1, (String)paramObject2, localObject3);
          }
        }
        label615:
        if (paramType == null)
        {
          bool = paramJSONSerializer.isEnabled(SerializerFeature.WriteMapNullValue);
          if (!bool) {}
        }
        else
        {
          bool = paramObject2 instanceof String;
          if (bool)
          {
            localObject2 = (String)paramObject2;
            if (paramInt == 0) {
              localSerializeWriter.write(',');
            }
            bool = localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat);
            if (bool) {
              paramJSONSerializer.println();
            }
            localSerializeWriter.writeFieldName((String)localObject2, true);
          }
          else
          {
            if (paramInt == 0) {
              localSerializeWriter.write(',');
            }
            bool = localSerializeWriter.isEnabled(SerializerFeature.BrowserCompatible);
            if (!bool)
            {
              bool = localSerializeWriter.isEnabled(SerializerFeature.WriteNonStringKeyAsString);
              if (!bool)
              {
                bool = localSerializeWriter.isEnabled(SerializerFeature.BrowserSecure);
                if (!bool)
                {
                  paramJSONSerializer.write(paramObject2);
                  break label772;
                }
              }
            }
            paramJSONSerializer.write(JSON.toJSONString(paramObject2));
            label772:
            localSerializeWriter.write(':');
          }
          if (paramType == null)
          {
            localSerializeWriter.writeNull();
            paramInt = 0;
          }
          else
          {
            localObject2 = paramType.getClass();
            if (localObject2 == localObject1)
            {
              localObjectSerializer.write(paramJSONSerializer, paramType, paramObject2, null, 0);
              paramObject2 = localObject1;
            }
            else
            {
              localObjectSerializer = paramJSONSerializer.getObjectWriter((Class)localObject2);
              localObjectSerializer.write(paramJSONSerializer, paramType, paramObject2, null, 0);
              paramObject2 = localObject2;
            }
            paramInt = 0;
            localObject1 = paramObject2;
          }
        }
      }
      paramJSONSerializer.setContext(localSerialContext);
      paramJSONSerializer.decrementIdent();
      if ((localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)) && (localMap.size() > 0)) {
        paramJSONSerializer.println();
      }
      localSerializeWriter.write('}');
      return;
    }
    catch (Throwable paramObject1)
    {
      paramJSONSerializer.setContext(localSerialContext);
      throw paramObject1;
    }
  }
}
