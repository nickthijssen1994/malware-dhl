package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public abstract class FieldSerializer
{
  private final String double_quoted_fieldPrefix;
  protected final FieldInfo fieldInfo;
  private final String single_quoted_fieldPrefix;
  private final String un_quoted_fieldPrefix;
  private boolean writeNull;
  
  public FieldSerializer(FieldInfo paramFieldInfo)
  {
    int i = 0;
    writeNull = false;
    fieldInfo = paramFieldInfo;
    paramFieldInfo.setAccessible(true);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append('"');
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("\":");
    double_quoted_fieldPrefix = localStringBuilder.toString();
    localStringBuilder = new StringBuilder();
    localStringBuilder.append('\'');
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append("':");
    single_quoted_fieldPrefix = localStringBuilder.toString();
    localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFieldInfo.getName());
    localStringBuilder.append(":");
    un_quoted_fieldPrefix = localStringBuilder.toString();
    paramFieldInfo = (JSONField)paramFieldInfo.getAnnotation(JSONField.class);
    if (paramFieldInfo != null)
    {
      paramFieldInfo = paramFieldInfo.serialzeFeatures();
      int j = paramFieldInfo.length;
      while (i < j)
      {
        if (paramFieldInfo[i] == SerializerFeature.WriteMapNullValue) {
          writeNull = true;
        }
        i += 1;
      }
    }
  }
  
  public Field getField()
  {
    return fieldInfo.getField();
  }
  
  public String getLabel()
  {
    return fieldInfo.getLabel();
  }
  
  public Method getMethod()
  {
    return fieldInfo.getMethod();
  }
  
  public String getName()
  {
    return fieldInfo.getName();
  }
  
  public Object getPropertyValue(Object paramObject)
    throws Exception
  {
    Object localObject = fieldInfo;
    try
    {
      paramObject = ((FieldInfo)localObject).getValue(paramObject);
      return paramObject;
    }
    catch (Exception paramObject)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("get property error? ");
      ((StringBuilder)localObject).append(fieldInfo.gerQualifiedName());
      throw new JSONException(((StringBuilder)localObject).toString(), paramObject);
    }
  }
  
  public boolean isWriteNull()
  {
    return writeNull;
  }
  
  public void writePrefix(JSONSerializer paramJSONSerializer)
    throws IOException
  {
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramJSONSerializer.isEnabled(SerializerFeature.QuoteFieldNames))
    {
      if (paramJSONSerializer.isEnabled(SerializerFeature.UseSingleQuotes))
      {
        localSerializeWriter.write(single_quoted_fieldPrefix);
        return;
      }
      localSerializeWriter.write(double_quoted_fieldPrefix);
      return;
    }
    localSerializeWriter.write(un_quoted_fieldPrefix);
  }
  
  public abstract void writeProperty(JSONSerializer paramJSONSerializer, Object paramObject)
    throws Exception;
  
  public abstract void writeValue(JSONSerializer paramJSONSerializer, Object paramObject)
    throws Exception;
}
