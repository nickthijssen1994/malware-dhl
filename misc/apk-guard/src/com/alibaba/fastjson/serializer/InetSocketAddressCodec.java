package com.alibaba.fastjson.serializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import java.io.IOException;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.InetSocketAddress;

public class InetSocketAddressCodec
  implements ObjectDeserializer, ObjectSerializer
{
  public static InetSocketAddressCodec instance = new InetSocketAddressCodec();
  
  public InetSocketAddressCodec() {}
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramObject = paramDefaultJSONParser.getLexer();
    int i = paramObject.token();
    paramType = null;
    if (i == 8)
    {
      paramObject.nextToken();
      return null;
    }
    paramDefaultJSONParser.accept(12);
    i = 0;
    for (;;)
    {
      String str = paramObject.stringVal();
      paramObject.nextToken(17);
      if (str.equals("address"))
      {
        paramDefaultJSONParser.accept(17);
        paramType = (InetAddress)paramDefaultJSONParser.parseObject(InetAddress.class);
      }
      else if (str.equals("port"))
      {
        paramDefaultJSONParser.accept(17);
        if (paramObject.token() == 2)
        {
          i = paramObject.intValue();
          paramObject.nextToken();
        }
        else
        {
          throw new JSONException("port is not int");
        }
      }
      else
      {
        paramDefaultJSONParser.accept(17);
        paramDefaultJSONParser.parse();
      }
      if (paramObject.token() != 16) {
        break;
      }
      paramObject.nextToken();
    }
    paramDefaultJSONParser.accept(13);
    return new InetSocketAddress(paramType, i);
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType, int paramInt)
    throws IOException
  {
    if (paramObject1 == null)
    {
      paramJSONSerializer.writeNull();
      return;
    }
    paramObject2 = paramJSONSerializer.getWriter();
    paramObject1 = (InetSocketAddress)paramObject1;
    paramType = paramObject1.getAddress();
    paramObject2.write('{');
    if (paramType != null)
    {
      paramObject2.writeFieldName("address");
      paramJSONSerializer.write(paramType);
      paramObject2.write(',');
    }
    paramObject2.writeFieldName("port");
    paramObject2.writeInt(paramObject1.getPort());
    paramObject2.write('}');
  }
}
