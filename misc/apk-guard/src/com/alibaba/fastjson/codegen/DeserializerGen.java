package com.alibaba.fastjson.codegen;

import com.alibaba.fastjson.util.DeserializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;

public class DeserializerGen
  extends ClassGen
{
  private DeserializeBeanInfo beanInfo;
  private String genClassName;
  
  public DeserializerGen(Class paramClass, Appendable paramAppendable)
  {
    super(paramClass, paramAppendable);
  }
  
  private void genBatchSet(List paramList, boolean paramBoolean)
    throws IOException
  {
    int j = paramList.size();
    int i = 0;
    while (i < j)
    {
      FieldInfo localFieldInfo = (FieldInfo)paramList.get(i);
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("_asm_flag_");
      ((StringBuilder)localObject).append(i / 32);
      localObject = ((StringBuilder)localObject).toString();
      if (paramBoolean)
      {
        print("if ((");
        print((String)localObject);
        print(" & ");
        print(Integer.toString(1 << i));
        print(") != 0) {");
        println();
        incrementIndent();
      }
      if (localFieldInfo.getMethod() != null)
      {
        print("\tinstance.");
        print(localFieldInfo.getMethod().getName());
        print("(");
        printFieldVarName(localFieldInfo);
        println(");");
      }
      else
      {
        print("\tinstance.");
        print(localFieldInfo.getField().getName());
        print(" = ");
        printFieldVarName(localFieldInfo);
        println(";");
      }
      if (paramBoolean)
      {
        decrementIndent();
        println();
        println("}");
      }
      i += 1;
    }
  }
  
  private void genEndCheck()
    throws IOException
  {
    println("if (matchedCount <= 0 || lexer.token() != JSONToken.RBRACE) {");
    println("\trestFlag = true;");
    println("} else if (lexer.token() == JSONToken.COMMA) {");
    println("\tlexer.nextToken();");
    println("}");
  }
  
  private void genSetFlag(int paramInt)
    throws IOException
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("_asm_flag_");
    localStringBuilder.append(paramInt / 32);
    print(localStringBuilder.toString());
    print(" |= ");
    print(Integer.toString(1 << paramInt));
    print(";");
    println();
  }
  
  private void printFieldDeser(FieldInfo paramFieldInfo)
    throws IOException
  {
    print(paramFieldInfo.getName());
    print("_gen_deser__");
  }
  
  private void printFieldPrefix(FieldInfo paramFieldInfo)
    throws IOException
  {
    print(paramFieldInfo.getName());
    print("_gen_prefix__");
  }
  
  private void printFieldVarEnumName(FieldInfo paramFieldInfo)
    throws IOException
  {
    print(paramFieldInfo.getName());
    print("_gen_enum_name");
  }
  
  private void printFieldVarName(FieldInfo paramFieldInfo)
    throws IOException
  {
    print(paramFieldInfo.getName());
    print("_gen");
  }
  
  private void printListFieldItemDeser(FieldInfo paramFieldInfo)
    throws IOException
  {
    print(paramFieldInfo.getName());
    print("_gen_list_item_deser__");
  }
  
  private void printListFieldItemType(FieldInfo paramFieldInfo)
    throws IOException
  {
    print(paramFieldInfo.getName());
    print("_gen_list_item_type__");
  }
  
  public void Load()
    throws IOException
  {
    beanInfo = DeserializeBeanInfo.computeSetters(clazz, type);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(clazz.getSimpleName());
    localStringBuilder.append("GenDecoder");
    genClassName = localStringBuilder.toString();
    print("package ");
    print(clazz.getPackage().getName());
    println(";");
    println();
    println("import java.lang.reflect.Type;");
    println();
    println("import com.alibaba.fastjson.parser.DefaultJSONParser;");
    println("import com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask;");
    println("import com.alibaba.fastjson.parser.ParserConfig;");
    println("import com.alibaba.fastjson.parser.Feature;");
    println("import com.alibaba.fastjson.parser.JSONLexerBase;");
    println("import com.alibaba.fastjson.parser.JSONToken;");
    println("import com.alibaba.fastjson.parser.ParseContext;");
    println("import com.alibaba.fastjson.parser.deserializer.ASMJavaBeanDeserializer;");
    println("import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;");
    println();
    print("public class ");
    print(genClassName);
    print(" extends ASMJavaBeanDeserializer implements ObjectDeserializer {");
    incrementIndent();
    println();
    genConstructor();
    genCreateInstance();
    genDeserialze();
    endClass();
  }
  
  protected void genConstructor()
    throws IOException
  {
    Object localObject = beanInfo;
    DeserializerGen localDeserializerGen = this;
    int j = ((DeserializeBeanInfo)localObject).getFieldList().size();
    int k = 0;
    int i = 0;
    while (i < j)
    {
      localObject = beanInfo;
      localObject = (FieldInfo)((DeserializeBeanInfo)localObject).getFieldList().get(i);
      localDeserializerGen.print("private char[] ");
      localDeserializerGen.printFieldPrefix((FieldInfo)localObject);
      localDeserializerGen.print(" = \"\\\"");
      localDeserializerGen.print(((FieldInfo)localObject).getName());
      localDeserializerGen.print("\\\":\".toCharArray();");
      localDeserializerGen.println();
      i += 1;
    }
    localDeserializerGen.println();
    localObject = beanInfo;
    int m = ((DeserializeBeanInfo)localObject).getFieldList().size();
    j = 0;
    i = k;
    while (i < m)
    {
      localObject = beanInfo;
      localObject = (FieldInfo)((DeserializeBeanInfo)localObject).getFieldList().get(i);
      Class localClass = ((FieldInfo)localObject).getFieldClass();
      if ((!localClass.isPrimitive()) && (!localClass.isEnum()))
      {
        localDeserializerGen.print("private ObjectDeserializer ");
        if (Collection.class.isAssignableFrom(localClass)) {
          localDeserializerGen.printListFieldItemDeser((FieldInfo)localObject);
        } else {
          localDeserializerGen.printFieldDeser((FieldInfo)localObject);
        }
        localDeserializerGen.println(";");
        if (Collection.class.isAssignableFrom(localClass))
        {
          localDeserializerGen.print("private Type ");
          localDeserializerGen.printListFieldItemType((FieldInfo)localObject);
          localDeserializerGen.print(" = ");
          localDeserializerGen.printClassName(TypeUtils.getCollectionItemClass(((FieldInfo)localObject).getFieldType()));
          localDeserializerGen.println(".class;");
        }
        j = 1;
      }
      i += 1;
    }
    if (j != 0) {
      localDeserializerGen.println();
    }
    localDeserializerGen.print("public ");
    localDeserializerGen.print(genClassName);
    localDeserializerGen.print(" (ParserConfig config, Class clazz) {");
    localDeserializerGen.incrementIndent();
    localDeserializerGen.println();
    localDeserializerGen.println("super(config, clazz);");
    localDeserializerGen.decrementIndent();
    localDeserializerGen.println();
    localDeserializerGen.print("}");
    localDeserializerGen.println();
  }
  
  protected void genCreateInstance()
    throws IOException
  {
    println();
    print("public Object createInstance(DefaultJSONParser parser, Type type) {");
    incrementIndent();
    println();
    print("return new ");
    print(clazz.getSimpleName());
    print("();");
    println();
    decrementIndent();
    println();
    print("}");
  }
  
  protected void genDeserialze()
    throws IOException
  {
    if (beanInfo.getFieldList().size() == 0) {
      return;
    }
    Object localObject1 = beanInfo.getFieldList().iterator();
    int j;
    Object localObject3;
    Object localObject2;
    do
    {
      boolean bool = ((Iterator)localObject1).hasNext();
      j = 0;
      if (!bool) {
        break;
      }
      localObject3 = (FieldInfo)((Iterator)localObject1).next();
      localObject2 = ((FieldInfo)localObject3).getFieldClass();
      localObject3 = ((FieldInfo)localObject3).getFieldType();
      if (localObject2 == Character.TYPE) {
        return;
      }
    } while ((!Collection.class.isAssignableFrom((Class)localObject2)) || (((localObject3 instanceof ParameterizedType)) && ((((ParameterizedType)localObject3).getActualTypeArguments()[0] instanceof Class))));
    return;
    localObject1 = new ArrayList(beanInfo.getFieldList());
    Collections.sort((List)localObject1);
    println();
    print("public Object deserialze(DefaultJSONParser parser, Type type, Object fieldName) {");
    incrementIndent();
    println();
    println("JSONLexerBase lexer = (JSONLexerBase) parser.getLexer();");
    println();
    println("if (!lexer.isEnabled(Feature.SortFeidFastMatch)) {");
    println("\treturn super.deserialze(parser, type, fieldName);");
    println("}");
    println();
    println("if (isSupportArrayToBean(lexer)) {");
    println("\t// deserialzeArrayMapping");
    println("}");
    println();
    println("if (lexer.scanType(\"Department\") == JSONLexerBase.NOT_MATCH) {");
    println("\treturn super.deserialze(parser, type, fieldName);");
    println("}");
    println();
    println("ParseContext mark_context = parser.getContext();");
    println("int matchedCount = 0;");
    print(clazz.getSimpleName());
    print(" instance = ");
    if (Modifier.isPublic(beanInfo.getDefaultConstructor().getModifiers()))
    {
      print("new ");
      print(clazz.getSimpleName());
      println("();");
    }
    else
    {
      print("(");
      print(clazz.getSimpleName());
      print(") createInstance(parser);");
    }
    println();
    println("ParseContext context = parser.getContext();");
    println("ParseContext childContext = parser.setContext(context, instance, fieldName);");
    println();
    println("if (lexer.matchStat == JSONLexerBase.END) {");
    println("\treturn instance;");
    println("}");
    println();
    println("int matchStat = 0;");
    int k = ((List)localObject1).size();
    int i = 0;
    while (i < k)
    {
      print("int _asm_flag_");
      print(Integer.toString(i / 32));
      println(" = 0;");
      i += 32;
    }
    i = 0;
    while (i < k)
    {
      localObject2 = (FieldInfo)((List)localObject1).get(i);
      localObject3 = ((FieldInfo)localObject2).getFieldClass();
      if (localObject3 == Boolean.TYPE)
      {
        print("boolean ");
        printFieldVarName((FieldInfo)localObject2);
        println(" = false;");
      }
      else if ((localObject3 != Byte.TYPE) && (localObject3 != Short.TYPE) && (localObject3 != Integer.TYPE) && (localObject3 != Long.TYPE) && (localObject3 != Float.TYPE) && (localObject3 != Double.TYPE))
      {
        if (localObject3 == String.class)
        {
          print("String ");
          printFieldVarName((FieldInfo)localObject2);
          println(";");
          println("if (lexer.isEnabled(Feature.InitStringFieldAsEmpty)) {");
          print("\t");
          printFieldVarName((FieldInfo)localObject2);
          println(" = lexer.stringDefaultValue();");
          print("\t");
          genSetFlag(i);
          println("} else {");
          print("\t");
          printFieldVarName((FieldInfo)localObject2);
          println(" = null;");
          println("}");
        }
        else
        {
          printClassName((Class)localObject3);
          print(" ");
          printFieldVarName((FieldInfo)localObject2);
          print(" = null;");
          println();
        }
      }
      else
      {
        print(((Class)localObject3).getSimpleName());
        print(" ");
        printFieldVarName((FieldInfo)localObject2);
        println(" = 0;");
      }
      i += 1;
    }
    println("boolean endFlag = false, restFlag = false;");
    println();
    i = j;
    while (i < k)
    {
      print("if ((!endFlag) && (!restFlag)) {");
      incrementIndent();
      println();
      localObject2 = (FieldInfo)((List)localObject1).get(i);
      localObject3 = ((FieldInfo)localObject2).getFieldClass();
      Object localObject4 = ((FieldInfo)localObject2).getFieldType();
      if (localObject3 == Boolean.TYPE)
      {
        printFieldVarName((FieldInfo)localObject2);
        print(" = lexer.scanFieldBoolean(");
        printFieldPrefix((FieldInfo)localObject2);
        println(");");
      }
      else if ((localObject3 != Byte.TYPE) && (localObject3 != Short.TYPE) && (localObject3 != Integer.TYPE))
      {
        if (localObject3 == Long.TYPE)
        {
          printFieldVarName((FieldInfo)localObject2);
          print(" = lexer.scanFieldLong(");
          printFieldPrefix((FieldInfo)localObject2);
          println(");");
        }
        else if (localObject3 == Float.TYPE)
        {
          printFieldVarName((FieldInfo)localObject2);
          print(" = lexer.scanFieldFloat(");
          printFieldPrefix((FieldInfo)localObject2);
          println(");");
        }
        else if (localObject3 == Double.TYPE)
        {
          printFieldVarName((FieldInfo)localObject2);
          print(" = lexer.scanFieldDouble(");
          printFieldPrefix((FieldInfo)localObject2);
          println(");");
        }
        else if (localObject3 == String.class)
        {
          printFieldVarName((FieldInfo)localObject2);
          print(" = lexer.scanFieldString(");
          printFieldPrefix((FieldInfo)localObject2);
          println(");");
        }
        else if (((Class)localObject3).isEnum())
        {
          print("String ");
          printFieldVarEnumName((FieldInfo)localObject2);
          print(" = lexer.scanFieldSymbol(");
          printFieldPrefix((FieldInfo)localObject2);
          println(", parser.getSymbolTable());");
          print("if (");
          printFieldVarEnumName((FieldInfo)localObject2);
          println(" == null) {");
          print("\t");
          printFieldVarName((FieldInfo)localObject2);
          print(" = ");
          printClassName((Class)localObject3);
          print(".valueOf(");
          printFieldVarEnumName((FieldInfo)localObject2);
          println(");");
          println("}");
        }
        else if (Collection.class.isAssignableFrom((Class)localObject3))
        {
          localObject4 = TypeUtils.getCollectionItemClass((Type)localObject4);
          if (localObject4 == String.class)
          {
            printFieldVarName((FieldInfo)localObject2);
            print(" = (");
            printClassName((Class)localObject3);
            print(") lexer.scanFieldStringArray(");
            printFieldPrefix((FieldInfo)localObject2);
            print(", ");
            printClassName((Class)localObject3);
            print(".class);");
            println();
          }
          else
          {
            genDeserialzeList((FieldInfo)localObject2, i, (Class)localObject4);
            if (i == k - 1) {
              genEndCheck();
            }
          }
        }
        else
        {
          genDeserialzeObject((FieldInfo)localObject2, i);
          if (i == k - 1) {
            genEndCheck();
          }
        }
      }
      else
      {
        printFieldVarName((FieldInfo)localObject2);
        print(" = lexer.scanFieldInt(");
        printFieldPrefix((FieldInfo)localObject2);
        println(");");
      }
      println("if(lexer.matchStat > 0) {");
      print("\t");
      genSetFlag(i);
      println("\tmatchedCount++;");
      println("}");
      println("if(lexer.matchStat == JSONLexerBase.NOT_MATCH) {");
      println("\trestFlag = true;");
      println("}");
      println("if(lexer.matchStat != JSONLexerBase.END) {");
      println("\tendFlag = true;");
      println("}");
      decrementIndent();
      println();
      println("}");
      i += 1;
    }
    genBatchSet((List)localObject1, true);
    println();
    println("if (restFlag) {");
    println("\treturn super.parseRest(parser, type, fieldName, instance);");
    println("}");
    println();
    print("return instance;");
    println();
    decrementIndent();
    println();
    print("}");
  }
  
  protected void genDeserialzeList(FieldInfo paramFieldInfo, int paramInt, Class paramClass)
    throws IOException
  {
    print("if (lexer.matchField(");
    printFieldPrefix(paramFieldInfo);
    print(")) {");
    println();
    print("\t");
    genSetFlag(paramInt);
    println("\tif (lexer.token() == JSONToken.NULL) {");
    println("\t\tlexer.nextToken(JSONToken.COMMA);");
    println("\t} else {");
    println("\t\tif (lexer.token() == JSONToken.LBRACKET) {");
    print("\t\t\tif(");
    printListFieldItemDeser(paramFieldInfo);
    print(" == null) {");
    println();
    print("\t\t\t\t");
    printListFieldItemDeser(paramFieldInfo);
    print(" = parser.getConfig().getDeserializer(");
    printClassName(paramClass);
    print(".class);");
    println();
    print("\t\t\t}");
    println();
    print("\t\t\tfinal int fastMatchToken = ");
    printListFieldItemDeser(paramFieldInfo);
    print(".getFastMatchToken();");
    println();
    println("\t\t\tlexer.nextToken(fastMatchToken);");
    print("\t\t\t");
    printFieldVarName(paramFieldInfo);
    print(" = ");
    Class localClass = paramFieldInfo.getFieldClass();
    if (localClass.isAssignableFrom(ArrayList.class))
    {
      print("new java.util.ArrayList();");
    }
    else if (localClass.isAssignableFrom(LinkedList.class))
    {
      print("new java.util.LinkedList();");
    }
    else if (localClass.isAssignableFrom(HashSet.class))
    {
      print("new java.util.HashSet();");
    }
    else if (localClass.isAssignableFrom(TreeSet.class))
    {
      print("new java.util.TreeSet();");
    }
    else
    {
      print("new ");
      printClassName(localClass);
      print("();");
    }
    println();
    println("\t\t\tParseContext listContext = parser.getContext();");
    print("\t\t\tparser.setContext(");
    printFieldVarName(paramFieldInfo);
    print(", \"");
    print(paramFieldInfo.getName());
    print("\");");
    println();
    println();
    println("\t\t\tfor(int i = 0; ;++i) {");
    println("\t\t\t\tif (lexer.token() == JSONToken.RBRACKET) {");
    println("\t\t\t\t\tbreak;");
    println("\t\t\t\t}");
    print("\t\t\t\t");
    printClassName(paramClass);
    print(" itemValue = ");
    printListFieldItemDeser(paramFieldInfo);
    print(".deserialze(parser, ");
    printListFieldItemType(paramFieldInfo);
    println(", i);");
    print("\t\t\t\t");
    printFieldVarName(paramFieldInfo);
    println(".add(itemValue);");
    print("\t\t\t\tparser.checkListResolve(");
    printFieldVarName(paramFieldInfo);
    println(");");
    println("\t\t\t\tif (lexer.token() == JSONToken.COMMA) {");
    println("\t\t\t\t\tlexer.nextToken(fastMatchToken);");
    println("\t\t\t\t}");
    println("\t\t\t}");
    println("\t\t\tparser.setContext(listContext);");
    println("\t\t\tif (lexer.token() != JSONToken.RBRACKET) {");
    println("\t\t\t\trestFlag = true;");
    println("\t\t\t}");
    println("\t\t\tlexer.nextToken(JSONToken.COMMA);");
    println();
    println("\t\t} else {");
    println("\t\t\trestFlag = true;");
    println("\t\t}");
    println("\t}");
    println("}");
  }
  
  protected void genDeserialzeObject(FieldInfo paramFieldInfo, int paramInt)
    throws IOException
  {
    print("if (lexer.matchField(");
    printFieldPrefix(paramFieldInfo);
    print(")) {");
    println();
    print("\t");
    genSetFlag(paramInt);
    println("\tmatchedCount++;");
    print("if (");
    printFieldDeser(paramFieldInfo);
    print(" == null) {");
    println();
    print("\t");
    printFieldDeser(paramFieldInfo);
    print(" = parser.getConfig().getDeserializer(");
    printClassName(paramFieldInfo.getFieldClass());
    println(".class);");
    println("}");
    print("\t");
    printFieldDeser(paramFieldInfo);
    print(".deserialze(parser, ");
    if ((paramFieldInfo.getFieldType() instanceof Class))
    {
      printClassName(paramFieldInfo.getFieldClass());
      print(".class");
    }
    else
    {
      print("getFieldType(\"");
      println(paramFieldInfo.getName());
      print("\")");
    }
    print(",\"");
    print(paramFieldInfo.getName());
    println("\");");
    println("\tif(parser.getResolveStatus() == DefaultJSONParser.NeedToResolve) {");
    println("\t\tResolveTask resolveTask = parser.getLastResolveTask();");
    println("\t\tresolveTask.setOwnerContext(parser.getContext());");
    print("\t\tresolveTask.setFieldDeserializer(this.getFieldDeserializer(\"");
    print(paramFieldInfo.getName());
    println("\"));");
    println("\t\tparser.setResolveStatus(DefaultJSONParser.NONE);");
    println("\t}");
    println("}");
  }
}
