package com.alibaba.fastjson.asm;

public class ByteVector
{
  byte[] data;
  int length;
  
  public ByteVector()
  {
    data = new byte[64];
  }
  
  public ByteVector(int paramInt)
  {
    data = new byte[paramInt];
  }
  
  private void enlarge(int paramInt)
  {
    int i = data.length * 2;
    int j = paramInt + length;
    paramInt = j;
    if (i > j) {
      paramInt = i;
    }
    byte[] arrayOfByte = new byte[paramInt];
    System.arraycopy(data, 0, arrayOfByte, 0, length);
    data = arrayOfByte;
  }
  
  ByteVector put11(int paramInt1, int paramInt2)
  {
    int i = length;
    if (i + 2 > data.length) {
      enlarge(2);
    }
    byte[] arrayOfByte = data;
    int j = i + 1;
    arrayOfByte[i] = ((byte)paramInt1);
    arrayOfByte[j] = ((byte)paramInt2);
    length = (j + 1);
    return this;
  }
  
  ByteVector put12(int paramInt1, int paramInt2)
  {
    int j = length;
    if (j + 3 > data.length) {
      enlarge(3);
    }
    byte[] arrayOfByte = data;
    int i = j + 1;
    arrayOfByte[j] = ((byte)paramInt1);
    paramInt1 = i + 1;
    arrayOfByte[i] = ((byte)(paramInt2 >>> 8));
    arrayOfByte[paramInt1] = ((byte)paramInt2);
    length = (paramInt1 + 1);
    return this;
  }
  
  public ByteVector putByte(int paramInt)
  {
    int i = length;
    int j = i + 1;
    if (j > data.length) {
      enlarge(1);
    }
    data[i] = ((byte)paramInt);
    length = j;
    return this;
  }
  
  public ByteVector putByteArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (length + paramInt2 > data.length) {
      enlarge(paramInt2);
    }
    if (paramArrayOfByte != null) {
      System.arraycopy(paramArrayOfByte, paramInt1, data, length, paramInt2);
    }
    length += paramInt2;
    return this;
  }
  
  public ByteVector putInt(int paramInt)
  {
    int j = length;
    if (j + 4 > data.length) {
      enlarge(4);
    }
    byte[] arrayOfByte = data;
    int i = j + 1;
    arrayOfByte[j] = ((byte)(paramInt >>> 24));
    j = i + 1;
    arrayOfByte[i] = ((byte)(paramInt >>> 16));
    i = j + 1;
    arrayOfByte[j] = ((byte)(paramInt >>> 8));
    arrayOfByte[i] = ((byte)paramInt);
    length = (i + 1);
    return this;
  }
  
  public ByteVector putShort(int paramInt)
  {
    int i = length;
    if (i + 2 > data.length) {
      enlarge(2);
    }
    byte[] arrayOfByte = data;
    int j = i + 1;
    arrayOfByte[i] = ((byte)(paramInt >>> 8));
    arrayOfByte[j] = ((byte)paramInt);
    length = (j + 1);
    return this;
  }
  
  public ByteVector putUTF8(String paramString)
  {
    int k = paramString.length();
    int i = length;
    if (i + 2 + k > data.length) {
      enlarge(k + 2);
    }
    byte[] arrayOfByte = data;
    int j = i + 1;
    arrayOfByte[i] = ((byte)(k >>> 8));
    i = j + 1;
    arrayOfByte[j] = ((byte)k);
    j = 0;
    while (j < k)
    {
      int m = paramString.charAt(j);
      if ((m >= 1) && (m <= 127))
      {
        arrayOfByte[i] = ((byte)m);
        j += 1;
        i += 1;
      }
      else
      {
        throw new UnsupportedOperationException();
      }
    }
    length = i;
    return this;
  }
}
