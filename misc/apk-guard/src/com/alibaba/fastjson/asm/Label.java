package com.alibaba.fastjson.asm;

public class Label
{
  static final int RESOLVED = 2;
  public Object info;
  int inputStackTop;
  int line;
  Label next;
  int outputStackMax;
  int position;
  private int referenceCount;
  private int[] srcAndRefPositions;
  int status;
  Label successor;
  
  public Label() {}
  
  private void addReference(int paramInt1, int paramInt2)
  {
    if (srcAndRefPositions == null) {
      srcAndRefPositions = new int[6];
    }
    int i = referenceCount;
    int[] arrayOfInt1 = srcAndRefPositions;
    if (i >= arrayOfInt1.length)
    {
      int[] arrayOfInt2 = new int[arrayOfInt1.length + 6];
      System.arraycopy(arrayOfInt1, 0, arrayOfInt2, 0, arrayOfInt1.length);
      srcAndRefPositions = arrayOfInt2;
    }
    arrayOfInt1 = srcAndRefPositions;
    i = referenceCount;
    referenceCount = (i + 1);
    arrayOfInt1[i] = paramInt1;
    paramInt1 = referenceCount;
    referenceCount = (paramInt1 + 1);
    arrayOfInt1[paramInt1] = paramInt2;
  }
  
  void put(MethodWriter paramMethodWriter, ByteVector paramByteVector, int paramInt)
  {
    if ((status & 0x2) == 0)
    {
      addReference(paramInt, length);
      paramByteVector.putShort(-1);
      return;
    }
    paramByteVector.putShort(position - paramInt);
  }
  
  void resolve(MethodWriter paramMethodWriter, int paramInt, byte[] paramArrayOfByte)
  {
    status |= 0x2;
    position = paramInt;
    int i = 0;
    while (i < referenceCount)
    {
      paramMethodWriter = srcAndRefPositions;
      int j = i + 1;
      int k = paramMethodWriter[i];
      i = j + 1;
      j = paramMethodWriter[j];
      k = paramInt - k;
      paramArrayOfByte[j] = ((byte)(k >>> 8));
      paramArrayOfByte[(j + 1)] = ((byte)k);
    }
  }
}
