package com.alibaba.fastjson.asm;

public class ClassWriter
{
  static final int ACC_SYNTHETIC_ATTRIBUTE = 262144;
  static final int CLASS = 7;
  public static final int COMPUTE_FRAMES = 2;
  public static final int COMPUTE_MAXS = 1;
  static final int DOUBLE = 6;
  static final int FIELD = 9;
  static final int FIELDORMETH_INSN = 6;
  static final int FLOAT = 4;
  static final int IINC_INSN = 12;
  static final int IMETH = 11;
  static final int IMPLVAR_INSN = 4;
  static final int ITFDYNMETH_INSN = 7;
  static final int LABELW_INSN = 9;
  static final int LABEL_INSN = 8;
  static final int LDCW_INSN = 11;
  static final int LDC_INSN = 10;
  static final int LONG = 5;
  static final int LOOK_INSN = 14;
  static final int MANA_INSN = 15;
  static final int METH = 10;
  static final int NAME_TYPE = 12;
  static final int NOARG_INSN = 0;
  static final int SBYTE_INSN = 1;
  static final int SHORT_INSN = 2;
  static final int TABL_INSN = 13;
  static final byte[] TYPE;
  static final int TYPE_INSN = 5;
  static final int TYPE_MERGED = 15;
  static final int TYPE_NORMAL = 13;
  static final int TYPE_UNINIT = 14;
  static final int UTF8 = 1;
  static final int VAR_INSN = 3;
  static final int WIDE_INSN = 16;
  static final int c = 3;
  static final int s = 8;
  private int access;
  FieldWriter firstField;
  MethodWriter firstMethod;
  int index = 1;
  private int interfaceCount;
  private int[] interfaces;
  Item[] items = new Item['?'];
  final Item key;
  final Item key2;
  final Item key3;
  FieldWriter lastField;
  MethodWriter lastMethod;
  private int name;
  final ByteVector pool = new ByteVector();
  private int superName;
  String thisName;
  int threshold;
  Item[] typeTable;
  int version;
  
  static
  {
    byte[] arrayOfByte = new byte['?'];
    int i = 0;
    while (i < arrayOfByte.length)
    {
      arrayOfByte[i] = ((byte)("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII".charAt(i) - 'A'));
      i += 1;
    }
    TYPE = arrayOfByte;
  }
  
  public ClassWriter()
  {
    this(0);
  }
  
  private ClassWriter(int paramInt)
  {
    double d = items.length;
    Double.isNaN(d);
    threshold = ((int)(d * 0.75D));
    key = new Item();
    key2 = new Item();
    key3 = new Item();
  }
  
  private Item get(Item paramItem)
  {
    for (Item localItem = items[(hashCode % items.length)]; (localItem != null) && ((type != type) || (!paramItem.isEqualTo(localItem))); localItem = next) {}
    return localItem;
  }
  
  private Item newString(String paramString)
  {
    key2.set(8, paramString, null, null);
    Item localItem2 = get(key2);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      pool.put12(8, newUTF8(paramString));
      int i = index;
      index = (i + 1);
      localItem1 = new Item(i, key2);
      put(localItem1);
    }
    return localItem1;
  }
  
  private void put(Item paramItem)
  {
    if (index > threshold)
    {
      i = items.length;
      int j = i * 2 + 1;
      Item[] arrayOfItem = new Item[j];
      i -= 1;
      while (i >= 0)
      {
        Item localItem;
        for (localObject = items[i]; localObject != null; localObject = localItem)
        {
          int k = hashCode % arrayOfItem.length;
          localItem = next;
          next = arrayOfItem[k];
          arrayOfItem[k] = localObject;
        }
        i -= 1;
      }
      items = arrayOfItem;
      double d = j;
      Double.isNaN(d);
      threshold = ((int)(d * 0.75D));
    }
    int i = hashCode;
    Object localObject = items;
    i %= localObject.length;
    next = localObject[i];
    localObject[i] = paramItem;
  }
  
  private void put122(int paramInt1, int paramInt2, int paramInt3)
  {
    pool.put12(paramInt1, paramInt2).putShort(paramInt3);
  }
  
  public int newClass(String paramString)
  {
    return newClassItemindex;
  }
  
  Item newClassItem(String paramString)
  {
    key2.set(7, paramString, null, null);
    Item localItem2 = get(key2);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      pool.put12(7, newUTF8(paramString));
      int i = index;
      index = (i + 1);
      localItem1 = new Item(i, key2);
      put(localItem1);
    }
    return localItem1;
  }
  
  Item newConstItem(Object paramObject)
  {
    if ((paramObject instanceof Integer)) {
      return newInteger(((Integer)paramObject).intValue());
    }
    if ((paramObject instanceof String)) {
      return newString((String)paramObject);
    }
    if ((paramObject instanceof Type))
    {
      paramObject = (Type)paramObject;
      if (paramObject.getSort() == 10) {
        paramObject = paramObject.getInternalName();
      } else {
        paramObject = paramObject.getDescriptor();
      }
      return newClassItem(paramObject);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("value ");
    localStringBuilder.append(paramObject);
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  Item newFieldItem(String paramString1, String paramString2, String paramString3)
  {
    key3.set(9, paramString1, paramString2, paramString3);
    Item localItem2 = get(key3);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      put122(9, newClass(paramString1), newNameType(paramString2, paramString3));
      int i = index;
      index = (i + 1);
      localItem1 = new Item(i, key3);
      put(localItem1);
    }
    return localItem1;
  }
  
  Item newInteger(int paramInt)
  {
    key.set(paramInt);
    Item localItem2 = get(key);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      pool.putByte(3).putInt(paramInt);
      paramInt = index;
      index = (paramInt + 1);
      localItem1 = new Item(paramInt, key);
      put(localItem1);
    }
    return localItem1;
  }
  
  Item newMethodItem(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    int i;
    if (paramBoolean) {
      i = 11;
    } else {
      i = 10;
    }
    key3.set(i, paramString1, paramString2, paramString3);
    Item localItem2 = get(key3);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      put122(i, newClass(paramString1), newNameType(paramString2, paramString3));
      i = index;
      index = (i + 1);
      localItem1 = new Item(i, key3);
      put(localItem1);
    }
    return localItem1;
  }
  
  public int newNameType(String paramString1, String paramString2)
  {
    return newNameTypeItemindex;
  }
  
  Item newNameTypeItem(String paramString1, String paramString2)
  {
    key2.set(12, paramString1, paramString2, null);
    Item localItem2 = get(key2);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      put122(12, newUTF8(paramString1), newUTF8(paramString2));
      int i = index;
      index = (i + 1);
      localItem1 = new Item(i, key2);
      put(localItem1);
    }
    return localItem1;
  }
  
  public int newUTF8(String paramString)
  {
    key.set(1, paramString, null, null);
    Item localItem2 = get(key);
    Item localItem1 = localItem2;
    if (localItem2 == null)
    {
      pool.putByte(1).putUTF8(paramString);
      int i = index;
      index = (i + 1);
      localItem1 = new Item(i, key);
      put(localItem1);
    }
    return index;
  }
  
  public byte[] toByteArray()
  {
    int i = interfaceCount;
    Object localObject = firstField;
    i = i * 2 + 24;
    int j = 0;
    while (localObject != null)
    {
      j += 1;
      i += ((FieldWriter)localObject).getSize();
      localObject = next;
    }
    localObject = firstMethod;
    int k = 0;
    while (localObject != null)
    {
      k += 1;
      i += ((MethodWriter)localObject).getSize();
      localObject = next;
    }
    ByteVector localByteVector = new ByteVector(i + pool.length);
    localByteVector.putInt(-889275714).putInt(version);
    localByteVector.putShort(index).putByteArray(pool.data, 0, pool.length);
    i = access;
    localByteVector.putShort((0x60000 | (0x40000 & i) / 64) & i).putShort(name).putShort(superName);
    localByteVector.putShort(interfaceCount);
    i = 0;
    while (i < interfaceCount)
    {
      localByteVector.putShort(interfaces[i]);
      i += 1;
    }
    localByteVector.putShort(j);
    for (localObject = firstField; localObject != null; localObject = next) {
      ((FieldWriter)localObject).a(localByteVector);
    }
    localByteVector.putShort(k);
    for (localObject = firstMethod; localObject != null; localObject = next) {
      ((MethodWriter)localObject).put(localByteVector);
    }
    localByteVector.putShort(0);
    return data;
  }
  
  public void visit(int paramInt1, int paramInt2, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    version = paramInt1;
    access = paramInt2;
    name = newClass(paramString1);
    thisName = paramString1;
    paramInt2 = 0;
    if (paramString2 == null) {
      paramInt1 = 0;
    } else {
      paramInt1 = newClass(paramString2);
    }
    superName = paramInt1;
    if ((paramArrayOfString != null) && (paramArrayOfString.length > 0))
    {
      interfaceCount = paramArrayOfString.length;
      interfaces = new int[interfaceCount];
      paramInt1 = paramInt2;
      while (paramInt1 < interfaceCount)
      {
        interfaces[paramInt1] = newClass(paramArrayOfString[paramInt1]);
        paramInt1 += 1;
      }
    }
  }
  
  public FieldVisitor visitField(int paramInt, String paramString1, String paramString2)
  {
    return new FieldWriter(this, paramInt, paramString1, paramString2);
  }
  
  public MethodVisitor visitMethod(int paramInt, String paramString1, String paramString2, String paramString3, String[] paramArrayOfString)
  {
    return new MethodWriter(this, paramInt, paramString1, paramString2, paramString3, paramArrayOfString);
  }
}
