package com.alibaba.fastjson.asm;

class MethodWriter
  implements MethodVisitor
{
  static final int ACC_CONSTRUCTOR = 262144;
  static final int APPEND_FRAME = 252;
  static final int CHOP_FRAME = 248;
  static final int FULL_FRAME = 255;
  static final int RESERVED = 128;
  static final int SAME_FRAME = 0;
  static final int SAME_FRAME_EXTENDED = 251;
  static final int SAME_LOCALS_1_STACK_ITEM_FRAME = 64;
  static final int SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED = 247;
  private int access;
  int classReaderLength;
  private ByteVector code = new ByteVector();
  final ClassWriter cw;
  private final int desc;
  int exceptionCount;
  int[] exceptions;
  private int maxLocals;
  private int maxStack;
  private final int name;
  MethodWriter next;
  
  MethodWriter(ClassWriter paramClassWriter, int paramInt, String paramString1, String paramString2, String paramString3, String[] paramArrayOfString)
  {
    if (firstMethod == null) {
      firstMethod = this;
    } else {
      lastMethod.next = this;
    }
    lastMethod = this;
    cw = paramClassWriter;
    access = paramInt;
    name = paramClassWriter.newUTF8(paramString1);
    desc = paramClassWriter.newUTF8(paramString2);
    if ((paramArrayOfString != null) && (paramArrayOfString.length > 0))
    {
      exceptionCount = paramArrayOfString.length;
      exceptions = new int[exceptionCount];
      paramInt = 0;
      while (paramInt < exceptionCount)
      {
        exceptions[paramInt] = paramClassWriter.newClass(paramArrayOfString[paramInt]);
        paramInt += 1;
      }
    }
  }
  
  final int getSize()
  {
    int i;
    if (code.length > 0)
    {
      cw.newUTF8("Code");
      i = code.length + 18 + 0 + 8;
    }
    else
    {
      i = 8;
    }
    int j = i;
    if (exceptionCount > 0)
    {
      cw.newUTF8("Exceptions");
      j = i + (exceptionCount * 2 + 8);
    }
    return j;
  }
  
  final void put(ByteVector paramByteVector)
  {
    int i = access;
    paramByteVector.putShort(i & ((0x40000 & i) / 64 | 0x60000)).putShort(name).putShort(desc);
    i = code.length;
    int k = 0;
    if (i > 0) {
      i = 1;
    } else {
      i = 0;
    }
    int j = i;
    if (exceptionCount > 0) {
      j = i + 1;
    }
    paramByteVector.putShort(j);
    if (code.length > 0)
    {
      i = code.length;
      paramByteVector.putShort(cw.newUTF8("Code")).putInt(i + 12 + 0);
      paramByteVector.putShort(maxStack).putShort(maxLocals);
      paramByteVector.putInt(code.length).putByteArray(code.data, 0, code.length);
      paramByteVector.putShort(0);
      paramByteVector.putShort(0);
    }
    if (exceptionCount > 0)
    {
      paramByteVector.putShort(cw.newUTF8("Exceptions")).putInt(exceptionCount * 2 + 2);
      paramByteVector.putShort(exceptionCount);
      i = k;
      while (i < exceptionCount)
      {
        paramByteVector.putShort(exceptions[i]);
        i += 1;
      }
    }
  }
  
  public void visitEnd() {}
  
  public void visitFieldInsn(int paramInt, String paramString1, String paramString2, String paramString3)
  {
    paramString1 = cw.newFieldItem(paramString1, paramString2, paramString3);
    code.put12(paramInt, index);
  }
  
  public void visitIincInsn(int paramInt1, int paramInt2)
  {
    code.putByte(132).put11(paramInt1, paramInt2);
  }
  
  public void visitInsn(int paramInt)
  {
    code.putByte(paramInt);
  }
  
  public void visitIntInsn(int paramInt1, int paramInt2)
  {
    code.put11(paramInt1, paramInt2);
  }
  
  public void visitJumpInsn(int paramInt, Label paramLabel)
  {
    if (((status & 0x2) != 0) && (position - code.length < 32768)) {
      throw new UnsupportedOperationException();
    }
    code.putByte(paramInt);
    ByteVector localByteVector = code;
    paramLabel.put(this, localByteVector, length - 1);
  }
  
  public void visitLabel(Label paramLabel)
  {
    paramLabel.resolve(this, code.length, code.data);
  }
  
  public void visitLdcInsn(Object paramObject)
  {
    paramObject = cw.newConstItem(paramObject);
    int i = index;
    if ((type != 5) && (type != 6))
    {
      if (i >= 256)
      {
        code.put12(19, i);
        return;
      }
      code.put11(18, i);
      return;
    }
    code.put12(20, i);
  }
  
  public void visitMaxs(int paramInt1, int paramInt2)
  {
    maxStack = paramInt1;
    maxLocals = paramInt2;
  }
  
  public void visitMethodInsn(int paramInt, String paramString1, String paramString2, String paramString3)
  {
    boolean bool;
    if (paramInt == 185) {
      bool = true;
    } else {
      bool = false;
    }
    paramString1 = cw.newMethodItem(paramString1, paramString2, paramString3, bool);
    int i = intVal;
    if (bool)
    {
      paramInt = i;
      if (i == 0)
      {
        i = Type.getArgumentsAndReturnSizes(paramString3);
        paramInt = i;
        intVal = i;
      }
      code.put12(185, index).put11(paramInt >> 2, 0);
      return;
    }
    code.put12(paramInt, index);
  }
  
  public void visitTypeInsn(int paramInt, String paramString)
  {
    paramString = cw.newClassItem(paramString);
    code.put12(paramInt, index);
  }
  
  public void visitVarInsn(int paramInt1, int paramInt2)
  {
    if ((paramInt2 < 4) && (paramInt1 != 169))
    {
      if (paramInt1 < 54) {
        paramInt1 = (paramInt1 - 21 << 2) + 26 + paramInt2;
      } else {
        paramInt1 = (paramInt1 - 54 << 2) + 59 + paramInt2;
      }
      code.putByte(paramInt1);
      return;
    }
    if (paramInt2 >= 256)
    {
      code.putByte(196).put12(paramInt1, paramInt2);
      return;
    }
    code.put11(paramInt1, paramInt2);
  }
}
