package com.alibaba.fastjson.util;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.ASMException;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.AccessControlException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class TypeUtils
{
  public static boolean compatibleWithJavaBean;
  private static ConcurrentMap<String, Class<?>> mappings;
  private static boolean setAccessibleEnable;
  
  static
  {
    try
    {
      String str = System.getProperty("fastjson.compatibleWithJavaBean");
      boolean bool = "true".equals(str);
      if (bool)
      {
        compatibleWithJavaBean = true;
      }
      else
      {
        bool = "false".equals(str);
        if (bool) {
          compatibleWithJavaBean = false;
        }
      }
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    mappings = new ConcurrentHashMap();
    addBaseClassMappings();
  }
  
  public TypeUtils() {}
  
  public static void addBaseClassMappings()
  {
    mappings.put("byte", Byte.TYPE);
    mappings.put("short", Short.TYPE);
    mappings.put("int", Integer.TYPE);
    mappings.put("long", Long.TYPE);
    mappings.put("float", Float.TYPE);
    mappings.put("double", Double.TYPE);
    mappings.put("boolean", Boolean.TYPE);
    mappings.put("char", Character.TYPE);
    mappings.put("[byte", [B.class);
    mappings.put("[short", [S.class);
    mappings.put("[int", [I.class);
    mappings.put("[long", [J.class);
    mappings.put("[float", [F.class);
    mappings.put("[double", [D.class);
    mappings.put("[boolean", [Z.class);
    mappings.put("[char", [C.class);
    mappings.put(HashMap.class.getName(), HashMap.class);
  }
  
  public static void addClassMapping(String paramString, Class paramClass)
  {
    String str = paramString;
    if (paramString == null) {
      str = paramClass.getName();
    }
    mappings.put(str, paramClass);
  }
  
  public static Object cast(Object paramObject, Class paramClass, ParserConfig paramParserConfig)
  {
    if (paramObject == null) {
      return null;
    }
    if (paramClass != null)
    {
      if (paramClass == paramObject.getClass()) {
        return paramObject;
      }
      Object localObject;
      if ((paramObject instanceof Map))
      {
        if (paramClass == Map.class) {
          return paramObject;
        }
        localObject = (Map)paramObject;
        if ((paramClass == Object.class) && (!((Map)localObject).containsKey(JSON.DEFAULT_TYPE_KEY))) {
          return paramObject;
        }
        return castToJavaBean((Map)localObject, paramClass, paramParserConfig);
      }
      if (paramClass.isArray())
      {
        if ((paramObject instanceof Collection))
        {
          localObject = (Collection)paramObject;
          int i = 0;
          paramObject = Array.newInstance(paramClass.getComponentType(), ((Collection)localObject).size());
          localObject = ((Collection)localObject).iterator();
          while (((Iterator)localObject).hasNext())
          {
            Array.set(paramObject, i, cast(((Iterator)localObject).next(), paramClass.getComponentType(), paramParserConfig));
            i += 1;
          }
          return paramObject;
        }
        if (paramClass == [B.class) {
          return castToBytes(paramObject);
        }
      }
      if (paramClass.isAssignableFrom(paramObject.getClass())) {
        return paramObject;
      }
      if ((paramClass != Boolean.TYPE) && (paramClass != Boolean.class))
      {
        if ((paramClass != Byte.TYPE) && (paramClass != Byte.class))
        {
          if ((paramClass != Short.TYPE) && (paramClass != Short.class))
          {
            if ((paramClass != Integer.TYPE) && (paramClass != Integer.class))
            {
              if ((paramClass != Long.TYPE) && (paramClass != Long.class))
              {
                if ((paramClass != Float.TYPE) && (paramClass != Float.class))
                {
                  if ((paramClass != Double.TYPE) && (paramClass != Double.class))
                  {
                    if (paramClass == String.class) {
                      return castToString(paramObject);
                    }
                    if (paramClass == BigDecimal.class) {
                      return castToBigDecimal(paramObject);
                    }
                    if (paramClass == BigInteger.class) {
                      return castToBigInteger(paramObject);
                    }
                    if (paramClass == java.util.Date.class) {
                      return castToDate(paramObject);
                    }
                    if (paramClass == java.sql.Date.class) {
                      return castToSqlDate(paramObject);
                    }
                    if (paramClass == Timestamp.class) {
                      return castToTimestamp(paramObject);
                    }
                    if (paramClass.isEnum()) {
                      return castToEnum(paramObject, paramClass, paramParserConfig);
                    }
                    if (Calendar.class.isAssignableFrom(paramClass))
                    {
                      paramParserConfig = castToDate(paramObject);
                      if (paramClass == Calendar.class) {
                        paramObject = Calendar.getInstance();
                      }
                      try
                      {
                        paramObject = paramClass.newInstance();
                        paramObject = (Calendar)paramObject;
                        paramObject.setTime(paramParserConfig);
                        return paramObject;
                      }
                      catch (Exception paramObject)
                      {
                        paramParserConfig = new StringBuilder();
                        paramParserConfig.append("can not cast to : ");
                        paramParserConfig.append(paramClass.getName());
                        throw new JSONException(paramParserConfig.toString(), paramObject);
                      }
                    }
                    if ((paramObject instanceof String))
                    {
                      paramObject = (String)paramObject;
                      if (paramObject.length() == 0) {
                        return null;
                      }
                      if (paramClass == Currency.class) {
                        return Currency.getInstance(paramObject);
                      }
                    }
                    paramObject = new StringBuilder();
                    paramObject.append("can not cast to : ");
                    paramObject.append(paramClass.getName());
                    throw new JSONException(paramObject.toString());
                  }
                  return castToDouble(paramObject);
                }
                return castToFloat(paramObject);
              }
              return castToLong(paramObject);
            }
            return castToInt(paramObject);
          }
          return castToShort(paramObject);
        }
        return castToByte(paramObject);
      }
      return castToBoolean(paramObject);
    }
    throw new IllegalArgumentException("clazz is null");
  }
  
  public static Object cast(Object paramObject, ParameterizedType paramParameterizedType, ParserConfig paramParserConfig)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a10 = a9\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static Object cast(Object paramObject, Type paramType, ParserConfig paramParserConfig)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramType instanceof Class)) {
      return cast(paramObject, (Class)paramType, paramParserConfig);
    }
    if ((paramType instanceof ParameterizedType)) {
      return cast(paramObject, (ParameterizedType)paramType, paramParserConfig);
    }
    if (((paramObject instanceof String)) && (((String)paramObject).length() == 0)) {
      return null;
    }
    if ((paramType instanceof TypeVariable)) {
      return paramObject;
    }
    paramObject = new StringBuilder();
    paramObject.append("can not cast to : ");
    paramObject.append(paramType);
    throw new JSONException(paramObject.toString());
  }
  
  public static BigDecimal castToBigDecimal(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof BigDecimal)) {
      return (BigDecimal)paramObject;
    }
    if ((paramObject instanceof BigInteger)) {
      return new BigDecimal((BigInteger)paramObject);
    }
    paramObject = paramObject.toString();
    if (paramObject.length() == 0) {
      return null;
    }
    return new BigDecimal(paramObject);
  }
  
  public static BigInteger castToBigInteger(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof BigInteger)) {
      return (BigInteger)paramObject;
    }
    if ((!(paramObject instanceof Float)) && (!(paramObject instanceof Double)))
    {
      paramObject = paramObject.toString();
      if (paramObject.length() == 0) {
        return null;
      }
      return new BigInteger(paramObject);
    }
    return BigInteger.valueOf(((Number)paramObject).longValue());
  }
  
  public static Boolean castToBoolean(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Boolean)) {
      return (Boolean)paramObject;
    }
    if ((paramObject instanceof Number))
    {
      int i = ((Number)paramObject).intValue();
      boolean bool = true;
      if (i != 1) {
        bool = false;
      }
      return Boolean.valueOf(bool);
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() == 0) {
        return null;
      }
      if ("true".equalsIgnoreCase((String)localObject)) {
        return Boolean.TRUE;
      }
      if ("false".equalsIgnoreCase((String)localObject)) {
        return Boolean.FALSE;
      }
      if ("1".equals(localObject)) {
        return Boolean.TRUE;
      }
      if ("0".equals(localObject)) {
        return Boolean.FALSE;
      }
      if ("null".equals(localObject)) {
        break label181;
      }
      if ("NULL".equals(localObject)) {
        return null;
      }
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("can not cast to boolean, value : ");
    ((StringBuilder)localObject).append(paramObject);
    throw new JSONException(((StringBuilder)localObject).toString());
    label181:
    return null;
  }
  
  public static Byte castToByte(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Byte.valueOf(((Number)paramObject).byteValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        return null;
      }
      if (!"null".equals(paramObject))
      {
        if ("NULL".equals(paramObject)) {
          return null;
        }
        return Byte.valueOf(Byte.parseByte(paramObject));
      }
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("can not cast to byte, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static byte[] castToBytes(Object paramObject)
  {
    if ((paramObject instanceof byte[])) {
      return (byte[])paramObject;
    }
    if ((paramObject instanceof String)) {
      return Base64.decodeFast((String)paramObject);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("can not cast to int, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static Character castToChar(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Character)) {
      return (Character)paramObject;
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() == 0) {
        return null;
      }
      if (((String)localObject).length() == 1) {
        return Character.valueOf(((String)localObject).charAt(0));
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("can not cast to byte, value : ");
      ((StringBuilder)localObject).append(paramObject);
      throw new JSONException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("can not cast to byte, value : ");
    ((StringBuilder)localObject).append(paramObject);
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public static java.util.Date castToDate(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return ((Calendar)paramObject).getTime();
    }
    if ((paramObject instanceof java.util.Date)) {
      return (java.util.Date)paramObject;
    }
    long l = -1L;
    if ((paramObject instanceof Number)) {
      return new java.util.Date(((Number)paramObject).longValue());
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).indexOf('-') != -1)
      {
        if (((String)localObject).length() == JSON.DEFFAULT_DATE_FORMAT.length()) {
          paramObject = JSON.DEFFAULT_DATE_FORMAT;
        } else if (((String)localObject).length() == 10) {
          paramObject = "yyyy-MM-dd";
        } else if (((String)localObject).length() == 19) {
          paramObject = "yyyy-MM-dd HH:mm:ss";
        } else {
          paramObject = "yyyy-MM-dd HH:mm:ss.SSS";
        }
        paramObject = new SimpleDateFormat(paramObject);
      }
    }
    try
    {
      paramObject = paramObject.parse((String)localObject);
      return paramObject;
    }
    catch (ParseException paramObject)
    {
      for (;;) {}
    }
    paramObject = new StringBuilder();
    paramObject.append("can not cast to Date, value : ");
    paramObject.append((String)localObject);
    throw new JSONException(paramObject.toString());
    if (((String)localObject).length() == 0) {
      return null;
    }
    l = Long.parseLong((String)localObject);
    if (l >= 0L) {
      return new java.util.Date(l);
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("can not cast to Date, value : ");
    ((StringBuilder)localObject).append(paramObject);
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public static Double castToDouble(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Double.valueOf(((Number)paramObject).doubleValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = paramObject.toString();
      if (paramObject.length() == 0) {
        return null;
      }
      if (!"null".equals(paramObject))
      {
        if ("NULL".equals(paramObject)) {
          return null;
        }
        return Double.valueOf(Double.parseDouble(paramObject));
      }
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("can not cast to double, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static Object castToEnum(Object paramObject, Class paramClass, ParserConfig paramParserConfig)
  {
    if ((paramObject instanceof String)) {
      paramObject = (String)paramObject;
    }
    try
    {
      i = paramObject.length();
      if (i == 0) {
        return null;
      }
      paramObject = Enum.valueOf(paramClass, paramObject);
      return paramObject;
    }
    catch (Exception paramObject)
    {
      int i;
      int j;
      int k;
      paramParserConfig = new StringBuilder();
      paramParserConfig.append("can not cast to : ");
      paramParserConfig.append(paramClass.getName());
      throw new JSONException(paramParserConfig.toString(), paramObject);
    }
    if ((paramObject instanceof Number))
    {
      paramObject = (Number)paramObject;
      j = paramObject.intValue();
      i = 0;
      paramObject = paramClass.getMethod("values", new Class[0]);
      paramObject = paramObject.invoke(null, new Object[0]);
      paramObject = (Object[])paramObject;
      k = paramObject.length;
      while (i < k)
      {
        paramParserConfig = (Enum)paramObject[i];
        int m = paramParserConfig.ordinal();
        if (m == j) {
          return paramParserConfig;
        }
        i += 1;
      }
    }
    paramObject = new StringBuilder();
    paramObject.append("can not cast to : ");
    paramObject.append(paramClass.getName());
    throw new JSONException(paramObject.toString());
  }
  
  public static Float castToFloat(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Float.valueOf(((Number)paramObject).floatValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = paramObject.toString();
      if (paramObject.length() == 0) {
        return null;
      }
      if (!"null".equals(paramObject))
      {
        if ("NULL".equals(paramObject)) {
          return null;
        }
        return Float.valueOf(Float.parseFloat(paramObject));
      }
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("can not cast to float, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static Integer castToInt(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Integer)) {
      return (Integer)paramObject;
    }
    if ((paramObject instanceof Number)) {
      return Integer.valueOf(((Number)paramObject).intValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        return null;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      if (!"null".equals(paramObject))
      {
        if ("NULL".equals(paramObject)) {
          return null;
        }
        return Integer.valueOf(Integer.parseInt(paramObject));
      }
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("can not cast to int, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static Object castToJavaBean(Object paramObject, Class paramClass)
  {
    return cast(paramObject, paramClass, ParserConfig.getGlobalInstance());
  }
  
  public static Object castToJavaBean(Map paramMap, Class paramClass, ParserConfig paramParserConfig)
  {
    int i = 0;
    if (paramClass == StackTraceElement.class) {}
    try
    {
      paramClass = paramMap.get("className");
      paramClass = (String)paramClass;
      paramParserConfig = paramMap.get("methodName");
      paramParserConfig = (String)paramParserConfig;
      localObject1 = paramMap.get("fileName");
      localObject1 = (String)localObject1;
      paramMap = paramMap.get("lineNumber");
      paramMap = (Number)paramMap;
      if (paramMap != null) {
        i = paramMap.intValue();
      }
      paramMap = new StackTraceElement(paramClass, paramParserConfig, (String)localObject1, i);
      return paramMap;
    }
    catch (Exception paramMap)
    {
      Object localObject1;
      Object localObject2;
      boolean bool;
      throw new JSONException(paramMap.getMessage(), paramMap);
    }
    localObject1 = JSON.DEFAULT_TYPE_KEY;
    localObject1 = paramMap.get(localObject1);
    if ((localObject1 instanceof String))
    {
      localObject1 = (String)localObject1;
      localObject2 = loadClass((String)localObject1);
      if (localObject2 != null)
      {
        bool = localObject2.equals(paramClass);
        if (!bool)
        {
          paramMap = castToJavaBean(paramMap, (Class)localObject2, paramParserConfig);
          return paramMap;
        }
      }
      else
      {
        paramMap = new StringBuilder();
        paramMap.append((String)localObject1);
        paramMap.append(" not found");
        paramMap = new ClassNotFoundException(paramMap.toString());
        throw paramMap;
      }
    }
    bool = paramClass.isInterface();
    if (bool)
    {
      if ((paramMap instanceof JSONObject)) {
        paramMap = (JSONObject)paramMap;
      } else {
        paramMap = new JSONObject(paramMap);
      }
      paramParserConfig = Thread.currentThread().getContextClassLoader();
      paramMap = Proxy.newProxyInstance(paramParserConfig, new Class[] { paramClass }, paramMap);
      return paramMap;
    }
    localObject1 = paramParserConfig;
    if (paramParserConfig == null) {
      localObject1 = ParserConfig.getGlobalInstance();
    }
    paramParserConfig = ((ParserConfig)localObject1).getFieldDeserializers(paramClass);
    paramClass = paramClass.getDeclaredConstructor(new Class[0]);
    bool = paramClass.isAccessible();
    if (!bool) {
      paramClass.setAccessible(true);
    }
    paramClass = paramClass.newInstance(new Object[0]);
    paramParserConfig = paramParserConfig.entrySet().iterator();
    for (;;)
    {
      bool = paramParserConfig.hasNext();
      if (!bool) {
        break;
      }
      localObject2 = paramParserConfig.next();
      Object localObject3 = (Map.Entry)localObject2;
      localObject2 = ((Map.Entry)localObject3).getKey();
      localObject2 = (String)localObject2;
      localObject3 = ((Map.Entry)localObject3).getValue();
      Object localObject4 = (FieldDeserializer)localObject3;
      bool = paramMap.containsKey(localObject2);
      if (bool)
      {
        localObject3 = paramMap.get(localObject2);
        localObject2 = ((FieldDeserializer)localObject4).getMethod();
        if (localObject2 != null)
        {
          localObject4 = ((Method)localObject2).getGenericParameterTypes();
          localObject4 = localObject4[0];
          localObject3 = cast(localObject3, (Type)localObject4, (ParserConfig)localObject1);
          ((Method)localObject2).invoke(paramClass, new Object[] { localObject3 });
        }
        else
        {
          ((FieldDeserializer)localObject4).getField().set(paramClass, cast(localObject3, ((FieldDeserializer)localObject4).getFieldType(), (ParserConfig)localObject1));
        }
      }
    }
    return paramClass;
  }
  
  public static Long castToLong(Object paramObject)
  {
    Object localObject1 = null;
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Long.valueOf(((Number)paramObject).longValue());
    }
    if ((paramObject instanceof String))
    {
      localObject2 = (String)paramObject;
      if (((String)localObject2).length() == 0) {
        return null;
      }
      if (!"null".equals(localObject2)) {
        if ("NULL".equals(localObject2)) {
          return null;
        }
      }
    }
    try
    {
      long l = Long.parseLong((String)localObject2);
      return Long.valueOf(l);
    }
    catch (NumberFormatException localNumberFormatException)
    {
      for (;;) {}
    }
    Object localObject2 = new JSONScanner((String)localObject2);
    if (((JSONScanner)localObject2).scanISO8601DateIfMatch(false)) {
      localObject1 = ((JSONLexerBase)localObject2).getCalendar();
    }
    ((JSONLexerBase)localObject2).close();
    if (localObject1 != null)
    {
      return Long.valueOf(((Calendar)localObject1).getTimeInMillis());
      return null;
    }
    localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("can not cast to long, value : ");
    ((StringBuilder)localObject1).append(paramObject);
    throw new JSONException(((StringBuilder)localObject1).toString());
  }
  
  public static Short castToShort(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Short.valueOf(((Number)paramObject).shortValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        return null;
      }
      if (!"null".equals(paramObject))
      {
        if ("NULL".equals(paramObject)) {
          return null;
        }
        return Short.valueOf(Short.parseShort(paramObject));
      }
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("can not cast to short, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static java.sql.Date castToSqlDate(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return new java.sql.Date(((Calendar)paramObject).getTimeInMillis());
    }
    if ((paramObject instanceof java.sql.Date)) {
      return (java.sql.Date)paramObject;
    }
    if ((paramObject instanceof java.util.Date)) {
      return new java.sql.Date(((java.util.Date)paramObject).getTime());
    }
    long l;
    if ((paramObject instanceof Number)) {
      l = ((Number)paramObject).longValue();
    } else {
      l = 0L;
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() == 0) {
        return null;
      }
      l = Long.parseLong((String)localObject);
    }
    if (l > 0L) {
      return new java.sql.Date(l);
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("can not cast to Date, value : ");
    ((StringBuilder)localObject).append(paramObject);
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public static String castToString(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    return paramObject.toString();
  }
  
  public static Timestamp castToTimestamp(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return new Timestamp(((Calendar)paramObject).getTimeInMillis());
    }
    if ((paramObject instanceof Timestamp)) {
      return (Timestamp)paramObject;
    }
    if ((paramObject instanceof java.util.Date)) {
      return new Timestamp(((java.util.Date)paramObject).getTime());
    }
    long l;
    if ((paramObject instanceof Number)) {
      l = ((Number)paramObject).longValue();
    } else {
      l = 0L;
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() == 0) {
        return null;
      }
      l = Long.parseLong((String)localObject);
    }
    if (l > 0L) {
      return new Timestamp(l);
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("can not cast to Date, value : ");
    ((StringBuilder)localObject).append(paramObject);
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public static void clearClassMapping()
  {
    mappings.clear();
    addBaseClassMappings();
  }
  
  public static List computeGetters(Class paramClass, Map paramMap)
  {
    return computeGetters(paramClass, paramMap, true);
  }
  
  public static List computeGetters(Class paramClass, Map paramMap, boolean paramBoolean)
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    Object localObject1 = paramClass.getMethods();
    Object localObject4 = localObject1;
    int i1 = localObject1.length;
    int m = 0;
    Object localObject5;
    Object localObject2;
    Object localObject6;
    Object localObject3;
    int k;
    int j;
    for (;;)
    {
      localObject5 = null;
      localObject2 = null;
      if (m >= i1) {
        break;
      }
      Method localMethod = localObject4[m];
      localObject6 = localMethod.getName();
      if ((!Modifier.isStatic(localMethod.getModifiers())) && (!localMethod.getReturnType().equals(Void.TYPE)) && (localMethod.getParameterTypes().length == 0) && (localMethod.getReturnType() != ClassLoader.class) && ((!localMethod.getName().equals("getMetaClass")) || (!localMethod.getReturnType().getName().equals("groovy.lang.MetaClass"))))
      {
        localObject3 = (JSONField)localMethod.getAnnotation(JSONField.class);
        localObject1 = localObject3;
        if (localObject3 == null) {
          localObject1 = getSupperMethodAnnotation(paramClass, localMethod);
        }
        int n;
        if (localObject1 != null)
        {
          if (!((JSONField)localObject1).serialize()) {
            break label1217;
          }
          i = ((JSONField)localObject1).ordinal();
          k = i;
          j = SerializerFeature.with(((JSONField)localObject1).serialzeFeatures());
          n = j;
          if (((JSONField)localObject1).name().length() != 0)
          {
            localObject3 = ((JSONField)localObject1).name();
            localObject2 = localObject3;
            if (paramMap != null)
            {
              localObject3 = (String)paramMap.get(localObject3);
              localObject2 = localObject3;
              if (localObject3 == null) {
                break label1217;
              }
            }
            localLinkedHashMap.put(localObject2, new FieldInfo((String)localObject2, localMethod, null, i, j, ((JSONField)localObject1).label()));
            break label1217;
          }
          j = n;
          i = k;
          if (((JSONField)localObject1).label().length() != 0)
          {
            localObject2 = ((JSONField)localObject1).label();
            j = n;
            i = k;
          }
        }
        else
        {
          i = 0;
          j = 0;
        }
        char c;
        JSONField localJSONField;
        if (((String)localObject6).startsWith("get"))
        {
          if ((((String)localObject6).length() < 4) || (((String)localObject6).equals("getClass"))) {
            break label1217;
          }
          c = ((String)localObject6).charAt(3);
          if (Character.isUpperCase(c))
          {
            if (compatibleWithJavaBean)
            {
              localObject1 = decapitalize(((String)localObject6).substring(3));
            }
            else
            {
              localObject1 = new StringBuilder();
              ((StringBuilder)localObject1).append(Character.toLowerCase(((String)localObject6).charAt(3)));
              ((StringBuilder)localObject1).append(((String)localObject6).substring(4));
              localObject1 = ((StringBuilder)localObject1).toString();
            }
          }
          else if (c == '_')
          {
            localObject1 = ((String)localObject6).substring(4);
          }
          else if (c == 'f')
          {
            localObject1 = ((String)localObject6).substring(3);
          }
          else
          {
            if ((((String)localObject6).length() < 5) || (!Character.isUpperCase(((String)localObject6).charAt(4)))) {
              break label795;
            }
            localObject1 = decapitalize(((String)localObject6).substring(3));
          }
          if (isJSONTypeIgnore(paramClass, (String)localObject1)) {
            break label1217;
          }
          localObject5 = ParserConfig.getField(paramClass, (String)localObject1);
          if (localObject5 != null)
          {
            localJSONField = (JSONField)((Field)localObject5).getAnnotation(JSONField.class);
            if (localJSONField != null)
            {
              if (!localJSONField.serialize()) {
                break label1217;
              }
              j = localJSONField.ordinal();
              i = SerializerFeature.with(localJSONField.serialzeFeatures());
              if (localJSONField.name().length() != 0)
              {
                localObject3 = localJSONField.name();
                localObject1 = localObject3;
                if (paramMap != null)
                {
                  localObject3 = (String)paramMap.get(localObject3);
                  localObject1 = localObject3;
                  if (localObject3 == null) {
                    break label1217;
                  }
                }
              }
              if (localJSONField.label().length() != 0)
              {
                localObject2 = localJSONField.label();
                break label715;
              }
              break label715;
            }
          }
          k = j;
          j = i;
          i = k;
          label715:
          localObject3 = localObject1;
          if (paramMap != null)
          {
            localObject1 = (String)paramMap.get(localObject1);
            localObject3 = localObject1;
            if (localObject1 == null) {
              break label1217;
            }
          }
          k = i;
          localLinkedHashMap.put(localObject3, new FieldInfo((String)localObject3, localMethod, (Field)localObject5, j, i, (String)localObject2));
          i = k;
          k = j;
          break label806;
          label795:
          break label1217;
        }
        else
        {
          k = i;
          i = j;
        }
        label806:
        if ((((String)localObject6).startsWith("is")) && (((String)localObject6).length() >= 3))
        {
          c = ((String)localObject6).charAt(2);
          if (Character.isUpperCase(c))
          {
            if (compatibleWithJavaBean)
            {
              localObject1 = decapitalize(((String)localObject6).substring(2));
            }
            else
            {
              localObject1 = new StringBuilder();
              ((StringBuilder)localObject1).append(Character.toLowerCase(((String)localObject6).charAt(2)));
              ((StringBuilder)localObject1).append(((String)localObject6).substring(3));
              localObject1 = ((StringBuilder)localObject1).toString();
            }
          }
          else if (c == '_')
          {
            localObject1 = ((String)localObject6).substring(3);
          }
          else
          {
            if (c != 'f') {
              break label1217;
            }
            localObject1 = ((String)localObject6).substring(2);
          }
          localObject3 = ParserConfig.getField(paramClass, (String)localObject1);
          localObject5 = localObject3;
          if (localObject3 == null) {
            localObject5 = ParserConfig.getField(paramClass, (String)localObject6);
          }
          localObject6 = localObject2;
          j = i;
          localObject3 = localObject1;
          n = k;
          if (localObject5 != null)
          {
            localJSONField = (JSONField)((Field)localObject5).getAnnotation(JSONField.class);
            localObject6 = localObject2;
            j = i;
            localObject3 = localObject1;
            n = k;
            if (localJSONField != null)
            {
              if (!localJSONField.serialize()) {
                break label1217;
              }
              n = localJSONField.ordinal();
              j = SerializerFeature.with(localJSONField.serialzeFeatures());
              if (localJSONField.name().length() != 0)
              {
                localObject3 = localJSONField.name();
                localObject1 = localObject3;
                if (paramMap != null)
                {
                  localObject3 = (String)paramMap.get(localObject3);
                  localObject1 = localObject3;
                  if (localObject3 == null) {
                    break label1217;
                  }
                }
              }
              if (localJSONField.label().length() != 0)
              {
                localObject6 = localJSONField.label();
                localObject3 = localObject1;
              }
              else
              {
                localObject6 = localObject2;
                localObject3 = localObject1;
              }
            }
          }
          localObject1 = localObject3;
          if (paramMap != null)
          {
            localObject2 = (String)paramMap.get(localObject3);
            localObject1 = localObject2;
            if (localObject2 == null) {}
          }
          else
          {
            localLinkedHashMap.put(localObject1, new FieldInfo((String)localObject1, localMethod, (Field)localObject5, n, j, (String)localObject6));
          }
        }
      }
      label1217:
      m += 1;
    }
    localObject4 = paramClass.getFields();
    m = localObject4.length;
    int i = 0;
    while (i < m)
    {
      localObject6 = localObject4[i];
      if (!Modifier.isStatic(((Field)localObject6).getModifiers()))
      {
        localObject2 = (JSONField)((Field)localObject6).getAnnotation(JSONField.class);
        localObject1 = ((Field)localObject6).getName();
        if (localObject2 != null)
        {
          if (!((JSONField)localObject2).serialize()) {
            break label1462;
          }
          k = ((JSONField)localObject2).ordinal();
          j = SerializerFeature.with(((JSONField)localObject2).serialzeFeatures());
          if (((JSONField)localObject2).name().length() != 0) {
            localObject1 = ((JSONField)localObject2).name();
          }
          if (((JSONField)localObject2).label().length() != 0) {
            localObject2 = ((JSONField)localObject2).label();
          } else {
            localObject2 = null;
          }
        }
        else
        {
          localObject2 = null;
          k = 0;
          j = 0;
        }
        localObject3 = localObject1;
        if (paramMap != null)
        {
          localObject1 = (String)paramMap.get(localObject1);
          localObject3 = localObject1;
          if (localObject1 == null) {}
        }
        else if (!localLinkedHashMap.containsKey(localObject3))
        {
          localLinkedHashMap.put(localObject3, new FieldInfo((String)localObject3, null, (Field)localObject6, k, j, (String)localObject2));
        }
      }
      label1462:
      i += 1;
    }
    localObject1 = new ArrayList();
    paramClass = (JSONType)paramClass.getAnnotation(JSONType.class);
    if (paramClass != null)
    {
      paramMap = paramClass.orders();
      paramClass = paramMap;
      if ((paramMap != null) && (paramMap.length == localLinkedHashMap.size()))
      {
        j = paramMap.length;
        i = 0;
        while (i < j)
        {
          if (!localLinkedHashMap.containsKey(paramMap[i]))
          {
            i = 0;
            break label1581;
          }
          i += 1;
        }
        i = 1;
      }
      else
      {
        i = 0;
      }
    }
    else
    {
      i = 0;
      paramClass = (Class)localObject5;
    }
    label1581:
    if (i != 0)
    {
      j = paramClass.length;
      i = 0;
      while (i < j)
      {
        ((List)localObject1).add((FieldInfo)localLinkedHashMap.get(((Object[])paramClass)[i]));
        i += 1;
      }
    }
    paramClass = localLinkedHashMap.values().iterator();
    while (paramClass.hasNext()) {
      ((List)localObject1).add((FieldInfo)paramClass.next());
    }
    if (paramBoolean) {
      Collections.sort((List)localObject1);
    }
    return localObject1;
  }
  
  public static String decapitalize(String paramString)
  {
    String str = paramString;
    if (paramString != null)
    {
      if (paramString.length() == 0) {
        return paramString;
      }
      if ((paramString.length() > 1) && (Character.isUpperCase(paramString.charAt(1))) && (Character.isUpperCase(paramString.charAt(0)))) {
        return paramString;
      }
      paramString = paramString.toCharArray();
      paramString[0] = Character.toLowerCase(paramString[0]);
      str = new String(paramString);
    }
    return str;
  }
  
  public static Class getClass(Type paramType)
  {
    if (paramType.getClass() == Class.class) {
      return (Class)paramType;
    }
    if ((paramType instanceof ParameterizedType)) {
      return getClass(((ParameterizedType)paramType).getRawType());
    }
    return Object.class;
  }
  
  public static Class getCollectionItemClass(Type paramType)
  {
    if ((paramType instanceof ParameterizedType))
    {
      paramType = ((ParameterizedType)paramType).getActualTypeArguments()[0];
      if ((paramType instanceof Class))
      {
        paramType = (Class)paramType;
        if (Modifier.isPublic(paramType.getModifiers())) {
          return paramType;
        }
        throw new ASMException("can not create ASMParser");
      }
      throw new ASMException("can not create ASMParser");
    }
    return Object.class;
  }
  
  public static Field getField(Class paramClass, String paramString)
  {
    Field[] arrayOfField = paramClass.getDeclaredFields();
    int j = arrayOfField.length;
    int i = 0;
    while (i < j)
    {
      Field localField = arrayOfField[i];
      if (paramString.equals(localField.getName())) {
        return localField;
      }
      i += 1;
    }
    paramClass = paramClass.getSuperclass();
    if ((paramClass != null) && (paramClass != Object.class)) {
      return getField(paramClass, paramString);
    }
    return null;
  }
  
  public static Type getGenericParamType(Type paramType)
  {
    if ((paramType instanceof ParameterizedType)) {
      return paramType;
    }
    Type localType = paramType;
    if ((paramType instanceof Class)) {
      localType = getGenericParamType(((Class)paramType).getGenericSuperclass());
    }
    return localType;
  }
  
  public static JSONType getJSONType(Class paramClass)
  {
    return (JSONType)paramClass.getAnnotation(JSONType.class);
  }
  
  public static int getParserFeatures(Class paramClass)
  {
    paramClass = (JSONType)paramClass.getAnnotation(JSONType.class);
    if (paramClass == null) {
      return 0;
    }
    return Feature.with(paramClass.parseFeatures());
  }
  
  public static int getSerializeFeatures(Class paramClass)
  {
    paramClass = (JSONType)paramClass.getAnnotation(JSONType.class);
    if (paramClass == null) {
      return 0;
    }
    return SerializerFeature.with(paramClass.serialzeFeatures());
  }
  
  public static JSONField getSupperMethodAnnotation(Class paramClass, Method paramMethod)
  {
    paramClass = paramClass.getInterfaces();
    int m = paramClass.length;
    int i = 0;
    while (i < m)
    {
      Method[] arrayOfMethod = paramClass[i].getMethods();
      int n = arrayOfMethod.length;
      int j = 0;
      while (j < n)
      {
        Object localObject = arrayOfMethod[j];
        if ((((Method)localObject).getName().equals(paramMethod.getName())) && (((Method)localObject).getParameterTypes().length == paramMethod.getParameterTypes().length))
        {
          int k = 0;
          while (k < ((Method)localObject).getParameterTypes().length)
          {
            if (!localObject.getParameterTypes()[k].equals(paramMethod.getParameterTypes()[k]))
            {
              k = 0;
              break label132;
            }
            k += 1;
          }
          k = 1;
          label132:
          if (k != 0)
          {
            localObject = (JSONField)((Method)localObject).getAnnotation(JSONField.class);
            if (localObject != null) {
              return localObject;
            }
          }
        }
        j += 1;
      }
      i += 1;
    }
    return null;
  }
  
  public static boolean isGenericParamType(Type paramType)
  {
    if ((paramType instanceof ParameterizedType)) {
      return true;
    }
    if ((paramType instanceof Class)) {
      return isGenericParamType(((Class)paramType).getGenericSuperclass());
    }
    return false;
  }
  
  private static boolean isJSONTypeIgnore(Class paramClass, String paramString)
  {
    Object localObject = (JSONType)paramClass.getAnnotation(JSONType.class);
    if (localObject != null)
    {
      String[] arrayOfString = ((JSONType)localObject).includes();
      if (arrayOfString.length > 0)
      {
        i = 0;
        while (i < arrayOfString.length)
        {
          if (paramString.equals(arrayOfString[i])) {
            return false;
          }
          i += 1;
        }
        return true;
      }
      localObject = ((JSONType)localObject).ignores();
      int i = 0;
      while (i < localObject.length)
      {
        if (paramString.equals(localObject[i])) {
          return true;
        }
        i += 1;
      }
    }
    return (paramClass.getSuperclass() != Object.class) && (paramClass.getSuperclass() != null) && (isJSONTypeIgnore(paramClass.getSuperclass(), paramString));
  }
  
  public static Class loadClass(String paramString)
  {
    Class localClass2;
    Class localClass1;
    if ((paramString != null) && (paramString.length() != 0))
    {
      localClass2 = (Class)mappings.get(paramString);
      if (localClass2 != null) {
        return localClass2;
      }
      if (paramString.charAt(0) == '[') {
        return Array.newInstance(loadClass(paramString.substring(1)), 0).getClass();
      }
      if ((paramString.startsWith("L")) && (paramString.endsWith(";"))) {
        return loadClass(paramString.substring(1, paramString.length() - 1));
      }
      localClass1 = localClass2;
    }
    try
    {
      ClassLoader localClassLoader = Thread.currentThread().getContextClassLoader();
      localClass1 = localClass2;
      if (localClassLoader != null)
      {
        localClass1 = localClass2;
        localClass2 = localClassLoader.loadClass(paramString);
        localClass1 = localClass2;
        addClassMapping(paramString, localClass2);
        return localClass2;
      }
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    try
    {
      localClass2 = Class.forName(paramString);
      localClass1 = localClass2;
      addClassMapping(paramString, localClass2);
      return localClass2;
    }
    catch (Throwable paramString) {}
    return null;
    return localClass1;
  }
  
  static void setAccessible(AccessibleObject paramAccessibleObject)
  {
    if (!setAccessibleEnable) {
      return;
    }
    if (paramAccessibleObject.isAccessible()) {
      return;
    }
    try
    {
      paramAccessibleObject.setAccessible(true);
      return;
    }
    catch (AccessControlException paramAccessibleObject)
    {
      for (;;) {}
    }
    setAccessibleEnable = false;
  }
  
  public static Type unwrap(Type paramType)
  {
    if ((paramType instanceof GenericArrayType))
    {
      Type localType = ((GenericArrayType)paramType).getGenericComponentType();
      if (localType == Byte.TYPE) {
        return [B.class;
      }
      if (localType == Character.TYPE) {
        return [C.class;
      }
    }
    return paramType;
  }
}
