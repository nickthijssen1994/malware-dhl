package com.alibaba.fastjson.util;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Collection;

public class ASMUtils
{
  public static final String JAVA_VM_NAME = System.getProperty("java.vm.name");
  
  public ASMUtils() {}
  
  public static boolean checkName(String paramString)
  {
    int i = 0;
    while (i < paramString.length())
    {
      int j = paramString.charAt(i);
      if (j >= 1)
      {
        if (j > 127) {
          return false;
        }
        i += 1;
      }
      else
      {
        return false;
      }
    }
    return true;
  }
  
  public static String getDesc(Class paramClass)
  {
    if (paramClass.isPrimitive()) {
      return getPrimitiveLetter(paramClass);
    }
    if (paramClass.isArray())
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("[");
      localStringBuilder.append(getDesc(paramClass.getComponentType()));
      return localStringBuilder.toString();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("L");
    localStringBuilder.append(getType(paramClass));
    localStringBuilder.append(";");
    return localStringBuilder.toString();
  }
  
  public static String getDesc(Method paramMethod)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append("(");
    Class[] arrayOfClass = paramMethod.getParameterTypes();
    int i = 0;
    while (i < arrayOfClass.length)
    {
      localStringBuffer.append(getDesc(arrayOfClass[i]));
      i += 1;
    }
    localStringBuffer.append(")");
    localStringBuffer.append(getDesc(paramMethod.getReturnType()));
    return localStringBuffer.toString();
  }
  
  public static Type getFieldType(Class paramClass, String paramString)
  {
    try
    {
      paramClass = paramClass.getField(paramString).getGenericType();
      return paramClass;
    }
    catch (Exception paramClass)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static Type getMethodType(Class paramClass, String paramString)
  {
    try
    {
      paramClass = paramClass.getMethod(paramString, new Class[0]).getGenericReturnType();
      return paramClass;
    }
    catch (Exception paramClass)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static String getPrimitiveLetter(Class paramClass)
  {
    if (Integer.TYPE.equals(paramClass)) {
      return "I";
    }
    if (Void.TYPE.equals(paramClass)) {
      return "V";
    }
    if (Boolean.TYPE.equals(paramClass)) {
      return "Z";
    }
    if (Character.TYPE.equals(paramClass)) {
      return "C";
    }
    if (Byte.TYPE.equals(paramClass)) {
      return "B";
    }
    if (Short.TYPE.equals(paramClass)) {
      return "S";
    }
    if (Float.TYPE.equals(paramClass)) {
      return "F";
    }
    if (Long.TYPE.equals(paramClass)) {
      return "J";
    }
    if (Double.TYPE.equals(paramClass)) {
      return "D";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Type: ");
    localStringBuilder.append(paramClass.getCanonicalName());
    localStringBuilder.append(" is not a primitive type");
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  public static String getType(Class paramClass)
  {
    if (paramClass.isArray())
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("[");
      localStringBuilder.append(getDesc(paramClass.getComponentType()));
      return localStringBuilder.toString();
    }
    if (!paramClass.isPrimitive()) {
      return paramClass.getName().replaceAll("\\.", "/");
    }
    return getPrimitiveLetter(paramClass);
  }
  
  public static boolean isAndroid()
  {
    return isAndroid(JAVA_VM_NAME);
  }
  
  public static boolean isAndroid(String paramString)
  {
    if (paramString == null) {
      return false;
    }
    paramString = paramString.toLowerCase();
    return (paramString.contains("dalvik")) || (paramString.contains("lemur"));
  }
  
  public static void parseArray(Collection paramCollection, ObjectDeserializer paramObjectDeserializer, DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    paramObject = paramDefaultJSONParser.getLexer();
    if (paramObject.token() == 8) {
      paramObject.nextToken(16);
    }
    paramDefaultJSONParser.accept(14, 14);
    int i = 0;
    for (;;)
    {
      paramCollection.add(paramObjectDeserializer.deserialze(paramDefaultJSONParser, paramType, Integer.valueOf(i)));
      i += 1;
      if (paramObject.token() != 16) {
        break;
      }
      paramObject.nextToken(14);
    }
    paramDefaultJSONParser.accept(15, 16);
  }
}
