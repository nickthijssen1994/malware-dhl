package com.alibaba.fastjson.util;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.annotation.JSONCreator;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class DeserializeBeanInfo
{
  private final Class<?> clazz;
  private Constructor<?> creatorConstructor;
  private Constructor<?> defaultConstructor;
  private Method factoryMethod;
  private final List<FieldInfo> fieldList = new ArrayList();
  private int parserFeatures = 0;
  private final List<FieldInfo> sortedFieldList = new ArrayList();
  
  public DeserializeBeanInfo(Class paramClass)
  {
    clazz = paramClass;
    parserFeatures = TypeUtils.getParserFeatures(paramClass);
  }
  
  public static DeserializeBeanInfo computeSetters(Class paramClass, Type paramType)
  {
    DeserializeBeanInfo localDeserializeBeanInfo = new DeserializeBeanInfo(paramClass);
    Object localObject1 = getDefaultConstructor(paramClass);
    label149:
    Object localObject3;
    if (localObject1 != null)
    {
      TypeUtils.setAccessible((AccessibleObject)localObject1);
      localDeserializeBeanInfo.setDefaultConstructor((Constructor)localObject1);
    }
    else if ((localObject1 == null) && (!paramClass.isInterface()) && (!Modifier.isAbstract(paramClass.getModifiers())))
    {
      localObject1 = getCreatorConstructor(paramClass);
      if (localObject1 != null)
      {
        TypeUtils.setAccessible((AccessibleObject)localObject1);
        localDeserializeBeanInfo.setCreatorConstructor((Constructor)localObject1);
        i = 0;
        for (;;)
        {
          if (i >= ((Constructor)localObject1).getParameterTypes().length) {
            break label1600;
          }
          paramType = localObject1.getParameterAnnotations()[i];
          k = paramType.length;
          j = 0;
          while (j < k)
          {
            localObject2 = paramType[j];
            if ((localObject2 instanceof JSONField))
            {
              paramType = (JSONField)localObject2;
              break label149;
            }
            j += 1;
          }
          paramType = null;
          if (paramType == null) {
            break;
          }
          localObject2 = localObject1.getParameterTypes()[i];
          localObject3 = localObject1.getGenericParameterTypes()[i];
          localObject4 = TypeUtils.getField(paramClass, paramType.name());
          j = paramType.ordinal();
          k = SerializerFeature.with(paramType.serialzeFeatures());
          localDeserializeBeanInfo.setField(new FieldInfo(paramType.name(), paramClass, (Class)localObject2, (Type)localObject3, (Field)localObject4, j, k));
          i += 1;
        }
        throw new JSONException("illegal json creator");
      }
      localObject1 = getFactoryMethod(paramClass);
      if (localObject1 != null)
      {
        TypeUtils.setAccessible((AccessibleObject)localObject1);
        localDeserializeBeanInfo.setFactoryMethod((Method)localObject1);
        i = 0;
        for (;;)
        {
          if (i >= ((Method)localObject1).getParameterTypes().length) {
            break label1600;
          }
          paramType = localObject1.getParameterAnnotations()[i];
          k = paramType.length;
          j = 0;
          while (j < k)
          {
            localObject2 = paramType[j];
            if ((localObject2 instanceof JSONField))
            {
              paramType = (JSONField)localObject2;
              break label340;
            }
            j += 1;
          }
          paramType = null;
          label340:
          if (paramType == null) {
            break;
          }
          localObject2 = localObject1.getParameterTypes()[i];
          localObject3 = localObject1.getGenericParameterTypes()[i];
          localObject4 = TypeUtils.getField(paramClass, paramType.name());
          j = paramType.ordinal();
          k = SerializerFeature.with(paramType.serialzeFeatures());
          localDeserializeBeanInfo.setField(new FieldInfo(paramType.name(), paramClass, (Class)localObject2, (Type)localObject3, (Field)localObject4, j, k));
          i += 1;
        }
        throw new JSONException("illegal json creator");
      }
      paramType = new StringBuilder();
      paramType.append("default constructor not found. ");
      paramType.append(paramClass);
      throw new JSONException(paramType.toString());
    }
    Object localObject4 = paramClass.getMethods();
    int i2 = localObject4.length;
    int k = 0;
    while (k < i2)
    {
      Method localMethod = localObject4[k];
      localObject3 = localMethod.getName();
      if ((((String)localObject3).length() >= 4) && (!Modifier.isStatic(localMethod.getModifiers())) && ((localMethod.getReturnType().equals(Void.TYPE)) || (localMethod.getReturnType().equals(paramClass))) && (localMethod.getParameterTypes().length == 1))
      {
        localObject2 = (JSONField)localMethod.getAnnotation(JSONField.class);
        localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = TypeUtils.getSupperMethodAnnotation(paramClass, localMethod);
        }
        int n;
        if (localObject1 != null)
        {
          if (!((JSONField)localObject1).deserialize()) {
            break label1095;
          }
          m = ((JSONField)localObject1).ordinal();
          i = m;
          n = SerializerFeature.with(((JSONField)localObject1).serialzeFeatures());
          j = n;
          if (((JSONField)localObject1).name().length() != 0)
          {
            localDeserializeBeanInfo.setField(new FieldInfo(((JSONField)localObject1).name(), localMethod, null, paramClass, paramType, m, n));
            TypeUtils.setAccessible(localMethod);
            break label1095;
          }
        }
        else
        {
          i = 0;
          j = 0;
        }
        if (((String)localObject3).startsWith("set"))
        {
          char c = ((String)localObject3).charAt(3);
          if (Character.isUpperCase(c))
          {
            if (TypeUtils.compatibleWithJavaBean)
            {
              localObject1 = TypeUtils.decapitalize(((String)localObject3).substring(3));
            }
            else
            {
              localObject1 = new StringBuilder();
              ((StringBuilder)localObject1).append(Character.toLowerCase(((String)localObject3).charAt(3)));
              ((StringBuilder)localObject1).append(((String)localObject3).substring(4));
              localObject1 = ((StringBuilder)localObject1).toString();
            }
          }
          else if (c == '_')
          {
            localObject1 = ((String)localObject3).substring(4);
          }
          else if (c == 'f')
          {
            localObject1 = ((String)localObject3).substring(3);
          }
          else
          {
            if ((((String)localObject3).length() < 5) || (!Character.isUpperCase(((String)localObject3).charAt(4)))) {
              break label1095;
            }
            localObject1 = TypeUtils.decapitalize(((String)localObject3).substring(3));
          }
          localObject3 = TypeUtils.getField(paramClass, (String)localObject1);
          localObject2 = localObject3;
          if (localObject3 == null)
          {
            localObject2 = localObject3;
            if (localMethod.getParameterTypes()[0] == Boolean.TYPE)
            {
              localObject2 = new StringBuilder();
              ((StringBuilder)localObject2).append("is");
              ((StringBuilder)localObject2).append(Character.toUpperCase(((String)localObject1).charAt(0)));
              ((StringBuilder)localObject2).append(((String)localObject1).substring(1));
              localObject2 = TypeUtils.getField(paramClass, ((StringBuilder)localObject2).toString());
            }
          }
          if (localObject2 != null)
          {
            localObject3 = (JSONField)((Field)localObject2).getAnnotation(JSONField.class);
            if (localObject3 != null)
            {
              n = ((JSONField)localObject3).ordinal();
              j = n;
              int i1 = SerializerFeature.with(((JSONField)localObject3).serialzeFeatures());
              i = i1;
              m = i;
              if (((JSONField)localObject3).name().length() == 0) {
                break label1066;
              }
              localDeserializeBeanInfo.setField(new FieldInfo(((JSONField)localObject3).name(), localMethod, (Field)localObject2, paramClass, paramType, n, i1));
              break label1095;
            }
          }
          m = j;
          j = i;
          label1066:
          localDeserializeBeanInfo.setField(new FieldInfo((String)localObject1, localMethod, null, paramClass, paramType, j, m));
          TypeUtils.setAccessible(localMethod);
        }
      }
      label1095:
      k += 1;
    }
    Object localObject2 = paramClass.getFields();
    int m = localObject2.length;
    int i = 0;
    while (i < m)
    {
      localObject3 = localObject2[i];
      if (!Modifier.isStatic(((Field)localObject3).getModifiers()))
      {
        localObject1 = localDeserializeBeanInfo.getFieldList().iterator();
        j = 0;
        while (((Iterator)localObject1).hasNext()) {
          if (((FieldInfo)((Iterator)localObject1).next()).getName().equals(((Field)localObject3).getName())) {
            j = 1;
          }
        }
        if (j == 0)
        {
          localObject1 = ((Field)localObject3).getName();
          localObject4 = (JSONField)((Field)localObject3).getAnnotation(JSONField.class);
          if (localObject4 != null)
          {
            k = ((JSONField)localObject4).ordinal();
            j = SerializerFeature.with(((JSONField)localObject4).serialzeFeatures());
            if (((JSONField)localObject4).name().length() != 0) {
              localObject1 = ((JSONField)localObject4).name();
            }
          }
          else
          {
            k = 0;
            j = 0;
          }
          localDeserializeBeanInfo.setField(new FieldInfo((String)localObject1, null, (Field)localObject3, paramClass, paramType, k, j));
        }
      }
      i += 1;
    }
    localObject2 = paramClass.getMethods();
    int j = localObject2.length;
    i = 0;
    while (i < j)
    {
      localObject3 = localObject2[i];
      localObject1 = ((Method)localObject3).getName();
      if ((((String)localObject1).length() >= 4) && (!Modifier.isStatic(((Method)localObject3).getModifiers())) && (((String)localObject1).startsWith("get")) && (Character.isUpperCase(((String)localObject1).charAt(3))) && (((Method)localObject3).getParameterTypes().length == 0) && ((Collection.class.isAssignableFrom(((Method)localObject3).getReturnType())) || (Map.class.isAssignableFrom(((Method)localObject3).getReturnType())) || (AtomicBoolean.class == ((Method)localObject3).getReturnType()) || (AtomicInteger.class == ((Method)localObject3).getReturnType()) || (AtomicLong.class == ((Method)localObject3).getReturnType())))
      {
        localObject4 = (JSONField)((Method)localObject3).getAnnotation(JSONField.class);
        if ((localObject4 != null) && (((JSONField)localObject4).name().length() > 0))
        {
          localObject1 = ((JSONField)localObject4).name();
        }
        else
        {
          localObject4 = new StringBuilder();
          ((StringBuilder)localObject4).append(Character.toLowerCase(((String)localObject1).charAt(3)));
          ((StringBuilder)localObject4).append(((String)localObject1).substring(4));
          localObject1 = ((StringBuilder)localObject4).toString();
        }
        if (localDeserializeBeanInfo.getField((String)localObject1) == null)
        {
          localDeserializeBeanInfo.setField(new FieldInfo((String)localObject1, (Method)localObject3, null, paramClass, paramType));
          TypeUtils.setAccessible((AccessibleObject)localObject3);
        }
      }
      i += 1;
    }
    label1600:
    return localDeserializeBeanInfo;
  }
  
  public static Constructor getCreatorConstructor(Class paramClass)
  {
    paramClass = paramClass.getDeclaredConstructors();
    int j = paramClass.length;
    int i = 0;
    while (i < j)
    {
      Constructor localConstructor = paramClass[i];
      if ((JSONCreator)localConstructor.getAnnotation(JSONCreator.class) != null) {
        return localConstructor;
      }
      i += 1;
    }
    return null;
  }
  
  public static Constructor getDefaultConstructor(Class paramClass)
  {
    boolean bool = Modifier.isAbstract(paramClass.getModifiers());
    Constructor[] arrayOfConstructor2 = null;
    if (bool) {
      return null;
    }
    Object localObject = paramClass.getDeclaredConstructors();
    int j = localObject.length;
    int i = 0;
    Constructor[] arrayOfConstructor1;
    for (;;)
    {
      arrayOfConstructor1 = arrayOfConstructor2;
      if (i >= j) {
        break;
      }
      arrayOfConstructor1 = localObject[i];
      if (arrayOfConstructor1.getParameterTypes().length == 0) {
        break;
      }
      i += 1;
    }
    if ((arrayOfConstructor1 == null) && (paramClass.isMemberClass()) && (!Modifier.isStatic(paramClass.getModifiers())))
    {
      arrayOfConstructor2 = paramClass.getDeclaredConstructors();
      j = arrayOfConstructor2.length;
      i = 0;
      while (i < j)
      {
        localObject = arrayOfConstructor2[i];
        if ((((Constructor)localObject).getParameterTypes().length == 1) && (localObject.getParameterTypes()[0].equals(paramClass.getDeclaringClass()))) {
          return localObject;
        }
        i += 1;
      }
    }
    return arrayOfConstructor1;
  }
  
  public static Method getFactoryMethod(Class paramClass)
  {
    Method[] arrayOfMethod = paramClass.getDeclaredMethods();
    int j = arrayOfMethod.length;
    int i = 0;
    while (i < j)
    {
      Method localMethod = arrayOfMethod[i];
      if ((Modifier.isStatic(localMethod.getModifiers())) && (paramClass.isAssignableFrom(localMethod.getReturnType())) && ((JSONCreator)localMethod.getAnnotation(JSONCreator.class) != null)) {
        return localMethod;
      }
      i += 1;
    }
    return null;
  }
  
  public Class getClazz()
  {
    return clazz;
  }
  
  public Constructor getCreatorConstructor()
  {
    return creatorConstructor;
  }
  
  public Constructor getDefaultConstructor()
  {
    return defaultConstructor;
  }
  
  public Method getFactoryMethod()
  {
    return factoryMethod;
  }
  
  public FieldInfo getField(String paramString)
  {
    Iterator localIterator = fieldList.iterator();
    while (localIterator.hasNext())
    {
      FieldInfo localFieldInfo = (FieldInfo)localIterator.next();
      if (localFieldInfo.getName().equals(paramString)) {
        return localFieldInfo;
      }
    }
    return null;
  }
  
  public List getFieldList()
  {
    return fieldList;
  }
  
  public int getParserFeatures()
  {
    return parserFeatures;
  }
  
  public List getSortedFieldList()
  {
    return sortedFieldList;
  }
  
  public void setCreatorConstructor(Constructor paramConstructor)
  {
    creatorConstructor = paramConstructor;
  }
  
  public void setDefaultConstructor(Constructor paramConstructor)
  {
    defaultConstructor = paramConstructor;
  }
  
  public void setFactoryMethod(Method paramMethod)
  {
    factoryMethod = paramMethod;
  }
  
  public boolean setField(FieldInfo paramFieldInfo)
  {
    Iterator localIterator = fieldList.iterator();
    while (localIterator.hasNext())
    {
      FieldInfo localFieldInfo = (FieldInfo)localIterator.next();
      if ((localFieldInfo.getName().equals(paramFieldInfo.getName())) && ((!localFieldInfo.isGetOnly()) || (paramFieldInfo.isGetOnly()))) {
        if (localFieldInfo.getFieldClass().isAssignableFrom(paramFieldInfo.getFieldClass())) {
          fieldList.remove(localFieldInfo);
        } else {
          return false;
        }
      }
    }
    fieldList.add(paramFieldInfo);
    sortedFieldList.add(paramFieldInfo);
    Collections.sort(sortedFieldList);
    return true;
  }
}
