package com.alibaba.fastjson.util;

import com.alibaba.fastjson.JSONException;
import java.io.Closeable;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;

public class IOUtils
{
  public static final char[] ASCII_CHARS;
  public static final char[] DIGITS = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
  static final char[] DigitOnes;
  static final char[] DigitTens;
  static final char[] digits;
  public static final boolean[] firstIdentifierFlags = new boolean['?'];
  public static final boolean[] identifierFlags;
  public static final char[] replaceChars;
  static final int[] sizeTable;
  public static final byte[] specicalFlags_doubleQuotes;
  public static final byte[] specicalFlags_singleQuotes;
  public static boolean[] whitespaceFlags;
  
  static
  {
    for (int i = 0;; i = (char)(i + 1))
    {
      localObject = firstIdentifierFlags;
      if (i >= localObject.length) {
        break;
      }
      if ((i >= 65) && (i <= 90)) {
        localObject[i] = 1;
      } else if ((i >= 97) && (i <= 122)) {
        firstIdentifierFlags[i] = true;
      } else if (i == 95) {
        firstIdentifierFlags[i] = true;
      }
    }
    identifierFlags = new boolean['?'];
    for (i = 0;; i = (char)(i + 1))
    {
      localObject = identifierFlags;
      if (i >= localObject.length) {
        break;
      }
      if ((i >= 65) && (i <= 90)) {
        localObject[i] = 1;
      } else if ((i >= 97) && (i <= 122)) {
        identifierFlags[i] = true;
      } else if (i == 95) {
        identifierFlags[i] = true;
      } else if ((i >= 48) && (i <= 57)) {
        identifierFlags[i] = true;
      }
    }
    specicalFlags_doubleQuotes = new byte['?'];
    specicalFlags_singleQuotes = new byte['?'];
    replaceChars = new char['?'];
    Object localObject = specicalFlags_doubleQuotes;
    localObject[0] = 4;
    localObject[1] = 4;
    localObject[2] = 4;
    localObject[3] = 4;
    localObject[4] = 4;
    localObject[5] = 4;
    localObject[6] = 4;
    localObject[7] = 4;
    localObject[8] = 1;
    localObject[9] = 1;
    localObject[10] = 1;
    localObject[11] = 4;
    localObject[12] = 1;
    localObject[13] = 1;
    localObject[34] = 1;
    localObject[92] = 1;
    localObject = specicalFlags_singleQuotes;
    localObject[0] = 4;
    localObject[1] = 4;
    localObject[2] = 4;
    localObject[3] = 4;
    localObject[4] = 4;
    localObject[5] = 4;
    localObject[6] = 4;
    localObject[7] = 4;
    localObject[8] = 1;
    localObject[9] = 1;
    localObject[10] = 1;
    localObject[11] = 4;
    localObject[12] = 1;
    localObject[13] = 1;
    localObject[92] = 1;
    localObject[39] = 1;
    i = 14;
    while (i <= 31)
    {
      specicalFlags_doubleQuotes[i] = 4;
      specicalFlags_singleQuotes[i] = 4;
      i += 1;
    }
    i = 127;
    while (i <= 160)
    {
      specicalFlags_doubleQuotes[i] = 4;
      specicalFlags_singleQuotes[i] = 4;
      i += 1;
    }
    localObject = replaceChars;
    localObject[0] = 48;
    localObject[1] = 49;
    localObject[2] = 50;
    localObject[3] = 51;
    localObject[4] = 52;
    localObject[5] = 53;
    localObject[6] = 54;
    localObject[7] = 55;
    localObject[8] = 98;
    localObject[9] = 116;
    localObject[10] = 110;
    localObject[11] = 118;
    localObject[12] = 102;
    localObject[13] = 114;
    localObject[34] = 34;
    localObject[39] = 39;
    localObject[47] = 47;
    localObject[92] = 92;
    ASCII_CHARS = new char[] { 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 48, 65, 48, 66, 48, 67, 48, 68, 48, 69, 48, 70, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 49, 65, 49, 66, 49, 67, 49, 68, 49, 69, 49, 70, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 50, 65, 50, 66, 50, 67, 50, 68, 50, 69, 50, 70 };
    digits = new char[] { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 };
    DigitTens = new char[] { 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57 };
    DigitOnes = new char[] { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
    sizeTable = new int[] { 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, Integer.MAX_VALUE };
    whitespaceFlags = new boolean['?'];
    localObject = whitespaceFlags;
    localObject[32] = 1;
    localObject[10] = 1;
    localObject[13] = 1;
    localObject[9] = 1;
    localObject[12] = 1;
    localObject[8] = 1;
  }
  
  public IOUtils() {}
  
  public static void close(Closeable paramCloseable)
  {
    if (paramCloseable != null) {
      try
      {
        paramCloseable.close();
        return;
      }
      catch (Exception paramCloseable) {}
    }
  }
  
  public static void decode(CharsetDecoder paramCharsetDecoder, ByteBuffer paramByteBuffer, CharBuffer paramCharBuffer)
  {
    try
    {
      paramByteBuffer = paramCharsetDecoder.decode(paramByteBuffer, paramCharBuffer, true);
      boolean bool = paramByteBuffer.isUnderflow();
      if (!bool) {
        paramByteBuffer.throwException();
      }
      paramCharsetDecoder = paramCharsetDecoder.flush(paramCharBuffer);
      bool = paramCharsetDecoder.isUnderflow();
      if (!bool)
      {
        paramCharsetDecoder.throwException();
        return;
      }
    }
    catch (CharacterCodingException paramCharsetDecoder)
    {
      throw new JSONException(paramCharsetDecoder.getMessage(), paramCharsetDecoder);
    }
  }
  
  public static boolean firstIdentifier(char paramChar)
  {
    boolean[] arrayOfBoolean = firstIdentifierFlags;
    return (paramChar < arrayOfBoolean.length) && (arrayOfBoolean[paramChar] != 0);
  }
  
  public static void getChars(byte paramByte, int paramInt, char[] paramArrayOfChar)
  {
    int i;
    if (paramByte < 0)
    {
      i = 45;
      paramByte = -paramByte;
    }
    else
    {
      i = 0;
    }
    for (;;)
    {
      byte b = 52429 * paramByte >>> 19;
      paramInt -= 1;
      paramArrayOfChar[paramInt] = digits[(paramByte - ((b << 3) + (b << 1)))];
      if (b == 0)
      {
        if (i == 0) {
          break;
        }
        paramArrayOfChar[(paramInt - 1)] = i;
        return;
      }
      paramByte = b;
    }
  }
  
  public static void getChars(int paramInt1, int paramInt2, char[] paramArrayOfChar)
  {
    int i;
    if (paramInt1 < 0)
    {
      i = 45;
      paramInt1 = -paramInt1;
    }
    else
    {
      i = 0;
    }
    int j;
    int k;
    for (;;)
    {
      j = paramInt1;
      k = paramInt2;
      if (paramInt1 < 65536) {
        break;
      }
      j = paramInt1 / 100;
      paramInt1 -= (j << 6) + (j << 5) + (j << 2);
      paramInt2 -= 1;
      paramArrayOfChar[paramInt2] = DigitOnes[paramInt1];
      paramInt2 -= 1;
      paramArrayOfChar[paramInt2] = DigitTens[paramInt1];
      paramInt1 = j;
    }
    for (;;)
    {
      paramInt1 = 52429 * j >>> 19;
      k -= 1;
      paramArrayOfChar[k] = digits[(j - ((paramInt1 << 3) + (paramInt1 << 1)))];
      if (paramInt1 == 0)
      {
        if (i == 0) {
          break;
        }
        paramArrayOfChar[(k - 1)] = i;
        return;
      }
      j = paramInt1;
    }
  }
  
  public static void getChars(long paramLong, int paramInt, char[] paramArrayOfChar)
  {
    int i;
    if (paramLong < 0L)
    {
      i = 45;
      paramLong = -paramLong;
    }
    else
    {
      i = 0;
    }
    while (paramLong > 2147483647L)
    {
      long l = paramLong / 100L;
      j = (int)(paramLong - ((l << 6) + (l << 5) + (l << 2)));
      paramInt -= 1;
      paramArrayOfChar[paramInt] = DigitOnes[j];
      paramInt -= 1;
      paramArrayOfChar[paramInt] = DigitTens[j];
      paramLong = l;
    }
    int k;
    int m;
    for (int j = (int)paramLong;; j = k)
    {
      k = j;
      m = paramInt;
      if (j < 65536) {
        break;
      }
      k = j / 100;
      j -= (k << 6) + (k << 5) + (k << 2);
      paramInt -= 1;
      paramArrayOfChar[paramInt] = DigitOnes[j];
      paramInt -= 1;
      paramArrayOfChar[paramInt] = DigitTens[j];
    }
    for (;;)
    {
      paramInt = 52429 * k >>> 19;
      m -= 1;
      paramArrayOfChar[m] = digits[(k - ((paramInt << 3) + (paramInt << 1)))];
      if (paramInt == 0)
      {
        if (i == 0) {
          break;
        }
        paramArrayOfChar[(m - 1)] = i;
        return;
      }
      k = paramInt;
    }
  }
  
  public static boolean isIdent(char paramChar)
  {
    boolean[] arrayOfBoolean = identifierFlags;
    return (paramChar < arrayOfBoolean.length) && (arrayOfBoolean[paramChar] != 0);
  }
  
  public static int stringSize(int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (paramInt <= sizeTable[i]) {
        return i + 1;
      }
      i += 1;
    }
  }
  
  public static int stringSize(long paramLong)
  {
    int i = 1;
    long l = 10L;
    while (i < 19)
    {
      if (paramLong < l) {
        return i;
      }
      l *= 10L;
      i += 1;
    }
    return 19;
  }
}
