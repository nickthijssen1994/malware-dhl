package com.alibaba.fastjson.util;

import java.lang.ref.SoftReference;
import java.nio.charset.CharsetDecoder;

public class ThreadLocalCache
{
  public static final int BYTES_CACH_INIT_SIZE = 1024;
  public static final int BYTES_CACH_INIT_SIZE_EXP = 10;
  public static final int BYTES_CACH_MAX_SIZE = 131072;
  public static final int BYTES_CACH_MAX_SIZE_EXP = 17;
  public static final int CHARS_CACH_INIT_SIZE = 1024;
  public static final int CHARS_CACH_INIT_SIZE_EXP = 10;
  public static final int CHARS_CACH_MAX_SIZE = 131072;
  public static final int CHARS_CACH_MAX_SIZE_EXP = 17;
  private static final ThreadLocal<SoftReference<byte[]>> bytesBufLocal = new ThreadLocal();
  private static final ThreadLocal<SoftReference<char[]>> charsBufLocal = new ThreadLocal();
  private static final ThreadLocal<CharsetDecoder> decoderLocal = new ThreadLocal();
  
  public ThreadLocalCache() {}
  
  private static char[] allocate(int paramInt)
  {
    if (paramInt > 131072) {
      return new char[paramInt];
    }
    char[] arrayOfChar = new char[getAllocateLengthExp(10, 17, paramInt)];
    charsBufLocal.set(new SoftReference(arrayOfChar));
    return arrayOfChar;
  }
  
  private static byte[] allocateBytes(int paramInt)
  {
    if (paramInt > 131072) {
      return new byte[paramInt];
    }
    byte[] arrayOfByte = new byte[getAllocateLengthExp(10, 17, paramInt)];
    bytesBufLocal.set(new SoftReference(arrayOfByte));
    return arrayOfByte;
  }
  
  public static void clearBytes()
  {
    bytesBufLocal.set(null);
  }
  
  public static void clearChars()
  {
    charsBufLocal.set(null);
  }
  
  private static int getAllocateLengthExp(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt3 >>> paramInt1 <= 0) {
      return 1 << paramInt1;
    }
    return 1 << 32 - Integer.numberOfLeadingZeros(paramInt3 - 1);
  }
  
  public static byte[] getBytes(int paramInt)
  {
    Object localObject = (SoftReference)bytesBufLocal.get();
    if (localObject == null) {
      return allocateBytes(paramInt);
    }
    byte[] arrayOfByte = (byte[])((SoftReference)localObject).get();
    if (arrayOfByte == null) {
      return allocateBytes(paramInt);
    }
    localObject = arrayOfByte;
    if (arrayOfByte.length < paramInt) {
      localObject = allocateBytes(paramInt);
    }
    return localObject;
  }
  
  public static char[] getChars(int paramInt)
  {
    Object localObject = (SoftReference)charsBufLocal.get();
    if (localObject == null) {
      return allocate(paramInt);
    }
    char[] arrayOfChar = (char[])((SoftReference)localObject).get();
    if (arrayOfChar == null) {
      return allocate(paramInt);
    }
    localObject = arrayOfChar;
    if (arrayOfChar.length < paramInt) {
      localObject = allocate(paramInt);
    }
    return localObject;
  }
  
  public static CharsetDecoder getUTF8Decoder()
  {
    Object localObject = (CharsetDecoder)decoderLocal.get();
    if (localObject == null)
    {
      localObject = new UTF8Decoder();
      decoderLocal.set(localObject);
      return localObject;
    }
    return localObject;
  }
}
