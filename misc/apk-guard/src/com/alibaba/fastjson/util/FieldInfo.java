package com.alibaba.fastjson.util;

import com.alibaba.fastjson.annotation.JSONField;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;

public class FieldInfo
  implements Comparable<FieldInfo>
{
  private final Class<?> declaringClass;
  private final Field field;
  private final Class<?> fieldClass;
  private final Type fieldType;
  private boolean getOnly = false;
  private String label = "";
  private final Method method;
  private final String name;
  private int ordinal = 0;
  private int serialzeFeatures;
  
  public FieldInfo(String paramString, Class paramClass1, Class paramClass2, Type paramType, Field paramField)
  {
    this(paramString, paramClass1, paramClass2, paramType, paramField, 0, 0);
  }
  
  public FieldInfo(String paramString, Class paramClass1, Class paramClass2, Type paramType, Field paramField, int paramInt1, int paramInt2)
  {
    name = paramString;
    declaringClass = paramClass1;
    fieldClass = paramClass2;
    fieldType = paramType;
    method = null;
    field = paramField;
    ordinal = paramInt1;
    serialzeFeatures = paramInt2;
    if (paramField != null) {
      TypeUtils.setAccessible(paramField);
    }
  }
  
  public FieldInfo(String paramString, Method paramMethod, Field paramField)
  {
    this(paramString, paramMethod, paramField, null, null);
  }
  
  public FieldInfo(String paramString, Method paramMethod, Field paramField, int paramInt1, int paramInt2)
  {
    this(paramString, paramMethod, paramField, paramInt1, paramInt2, null);
  }
  
  public FieldInfo(String paramString1, Method paramMethod, Field paramField, int paramInt1, int paramInt2, String paramString2)
  {
    this(paramString1, paramMethod, paramField, null, null, paramInt1, paramInt2);
    if ((paramString2 != null) && (paramString2.length() > 0)) {
      label = paramString2;
    }
  }
  
  public FieldInfo(String paramString, Method paramMethod, Field paramField, Class paramClass, Type paramType)
  {
    this(paramString, paramMethod, paramField, paramClass, paramType, 0, 0);
  }
  
  public FieldInfo(String paramString, Method paramMethod, Field paramField, Class paramClass, Type paramType, int paramInt1, int paramInt2)
  {
    name = paramString;
    method = paramMethod;
    field = paramField;
    ordinal = paramInt1;
    serialzeFeatures = paramInt2;
    if (paramMethod != null) {
      TypeUtils.setAccessible(paramMethod);
    }
    if (paramField != null) {
      TypeUtils.setAccessible(paramField);
    }
    if (paramMethod != null)
    {
      if (paramMethod.getParameterTypes().length == 1)
      {
        paramString = paramMethod.getParameterTypes()[0];
        paramField = paramMethod.getGenericParameterTypes()[0];
      }
      else
      {
        paramString = paramMethod.getReturnType();
        paramField = paramMethod.getGenericReturnType();
        getOnly = true;
      }
      declaringClass = paramMethod.getDeclaringClass();
    }
    else
    {
      paramString = paramField.getType();
      paramMethod = paramField.getGenericType();
      declaringClass = paramField.getDeclaringClass();
      paramField = paramMethod;
    }
    if ((paramClass != null) && (paramString == Object.class) && ((paramField instanceof TypeVariable)))
    {
      paramMethod = getInheritGenericType(paramClass, (TypeVariable)paramField);
      if (paramMethod != null)
      {
        fieldClass = TypeUtils.getClass(paramMethod);
        fieldType = paramMethod;
        return;
      }
    }
    paramClass = getFieldType(paramClass, paramType, paramField);
    paramMethod = paramString;
    if (paramClass != paramField) {
      if ((paramClass instanceof ParameterizedType))
      {
        paramMethod = TypeUtils.getClass(paramClass);
      }
      else
      {
        paramMethod = paramString;
        if ((paramClass instanceof Class)) {
          paramMethod = TypeUtils.getClass(paramClass);
        }
      }
    }
    fieldType = paramClass;
    fieldClass = paramMethod;
  }
  
  public static Type getFieldType(Class paramClass, Type paramType1, Type paramType2)
  {
    if (paramClass != null)
    {
      if (paramType1 == null) {
        return paramType2;
      }
      Object localObject1;
      if ((paramType2 instanceof GenericArrayType))
      {
        localObject1 = ((GenericArrayType)paramType2).getGenericComponentType();
        paramClass = getFieldType(paramClass, paramType1, (Type)localObject1);
        if (localObject1 != paramClass) {
          return Array.newInstance(TypeUtils.getClass(paramClass), 0).getClass();
        }
        return paramType2;
      }
      if (!TypeUtils.isGenericParamType(paramType1)) {
        return paramType2;
      }
      Object localObject2;
      TypeVariable localTypeVariable;
      int i;
      if ((paramType2 instanceof TypeVariable))
      {
        localObject1 = (ParameterizedType)TypeUtils.getGenericParamType(paramType1);
        localObject2 = TypeUtils.getClass((Type)localObject1);
        localTypeVariable = (TypeVariable)paramType2;
        i = 0;
        while (i < ((Class)localObject2).getTypeParameters().length)
        {
          if (localObject2.getTypeParameters()[i].getName().equals(localTypeVariable.getName())) {
            return localObject1.getActualTypeArguments()[i];
          }
          i += 1;
        }
      }
      if ((paramType2 instanceof ParameterizedType))
      {
        localObject1 = (ParameterizedType)paramType2;
        localObject2 = ((ParameterizedType)localObject1).getActualTypeArguments();
        int j = 0;
        int m;
        for (i = 0; j < localObject2.length; i = m)
        {
          localTypeVariable = localObject2[j];
          m = i;
          if ((localTypeVariable instanceof TypeVariable))
          {
            localTypeVariable = (TypeVariable)localTypeVariable;
            m = i;
            if ((paramType1 instanceof ParameterizedType))
            {
              ParameterizedType localParameterizedType = (ParameterizedType)paramType1;
              int k = 0;
              for (;;)
              {
                m = i;
                if (k >= paramClass.getTypeParameters().length) {
                  break;
                }
                if (paramClass.getTypeParameters()[k].getName().equals(localTypeVariable.getName()))
                {
                  localObject2[j] = localParameterizedType.getActualTypeArguments()[k];
                  i = 1;
                }
                k += 1;
              }
            }
          }
          j += 1;
        }
        if (i != 0) {
          return new ParameterizedTypeImpl((Type[])localObject2, ((ParameterizedType)localObject1).getOwnerType(), ((ParameterizedType)localObject1).getRawType());
        }
      }
    }
    return paramType2;
  }
  
  public static Type getInheritGenericType(Class paramClass, TypeVariable paramTypeVariable)
  {
    Object localObject = paramTypeVariable.getGenericDeclaration();
    for (;;)
    {
      Type localType = paramClass.getGenericSuperclass();
      if (localType == null) {
        return null;
      }
      if ((localType instanceof ParameterizedType))
      {
        paramClass = (ParameterizedType)localType;
        if (paramClass.getRawType() == localObject)
        {
          localObject = ((GenericDeclaration)localObject).getTypeParameters();
          paramClass = paramClass.getActualTypeArguments();
          int i = 0;
          while (i < localObject.length)
          {
            if (localObject[i] == paramTypeVariable) {
              return paramClass[i];
            }
            i += 1;
          }
          return null;
        }
      }
      if (localType == null) {
        return null;
      }
      paramClass = TypeUtils.getClass(localType);
    }
  }
  
  public int compareTo(FieldInfo paramFieldInfo)
  {
    int i = ordinal;
    int j = ordinal;
    if (i < j) {
      return -1;
    }
    if (i > j) {
      return 1;
    }
    return name.compareTo(name);
  }
  
  public String gerQualifiedName()
  {
    Member localMember = getMember();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(localMember.getDeclaringClass().getName());
    localStringBuilder.append(".");
    localStringBuilder.append(localMember.getName());
    return localStringBuilder.toString();
  }
  
  public Annotation getAnnotation(Class paramClass)
  {
    Object localObject1 = method;
    if (localObject1 != null) {
      localObject1 = ((Method)localObject1).getAnnotation(paramClass);
    } else {
      localObject1 = null;
    }
    Object localObject2 = localObject1;
    if (localObject1 == null)
    {
      Field localField = field;
      localObject2 = localObject1;
      if (localField != null) {
        localObject2 = localField.getAnnotation(paramClass);
      }
    }
    return localObject2;
  }
  
  public Class getDeclaringClass()
  {
    return declaringClass;
  }
  
  public Field getField()
  {
    return field;
  }
  
  public Class getFieldClass()
  {
    return fieldClass;
  }
  
  public Type getFieldType()
  {
    return fieldType;
  }
  
  public String getFormat()
  {
    Object localObject = (JSONField)getAnnotation(JSONField.class);
    if (localObject != null)
    {
      localObject = ((JSONField)localObject).format();
      if (((String)localObject).trim().length() == 0) {
        return null;
      }
      return localObject;
    }
    return null;
  }
  
  public String getLabel()
  {
    return label;
  }
  
  public Member getMember()
  {
    Method localMethod = method;
    if (localMethod != null) {
      return localMethod;
    }
    return field;
  }
  
  public Method getMethod()
  {
    return method;
  }
  
  public String getName()
  {
    return name;
  }
  
  public int getSerialzeFeatures()
  {
    return serialzeFeatures;
  }
  
  public Object getValue(Object paramObject)
    throws IllegalAccessException, InvocationTargetException
  {
    Method localMethod = method;
    if (localMethod != null) {
      return localMethod.invoke(paramObject, new Object[0]);
    }
    return field.get(paramObject);
  }
  
  public boolean isGetOnly()
  {
    return getOnly;
  }
  
  public void setAccessible(boolean paramBoolean)
    throws SecurityException
  {
    Method localMethod = method;
    if (localMethod != null)
    {
      TypeUtils.setAccessible(localMethod);
      return;
    }
    TypeUtils.setAccessible(field);
  }
  
  public void setValue(Object paramObject1, Object paramObject2)
    throws IllegalAccessException, InvocationTargetException
  {
    Method localMethod = method;
    if (localMethod != null)
    {
      localMethod.invoke(paramObject1, new Object[] { paramObject2 });
      return;
    }
    field.set(paramObject1, paramObject2);
  }
  
  public String toString()
  {
    return name;
  }
}
