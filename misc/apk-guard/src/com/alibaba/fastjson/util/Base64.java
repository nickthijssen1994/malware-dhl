package com.alibaba.fastjson.util;

import java.util.Arrays;

public class Base64
{
  public static final char[] CA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".toCharArray();
  public static final int[] IA = new int['?'];
  
  static
  {
    Arrays.fill(IA, -1);
    int j = CA.length;
    int i = 0;
    while (i < j)
    {
      IA[CA[i]] = i;
      i += 1;
    }
    IA[61] = 0;
  }
  
  public Base64() {}
  
  public static byte[] decodeFast(String paramString)
  {
    int k = paramString.length();
    int i3 = 0;
    if (k == 0) {
      return new byte[0];
    }
    int i = k - 1;
    int j = 0;
    int n;
    for (;;)
    {
      n = i;
      if (j >= i) {
        break;
      }
      n = i;
      if (IA[(paramString.charAt(j) & 0xFF)] >= 0) {
        break;
      }
      j += 1;
    }
    while ((n > 0) && (IA[(paramString.charAt(n) & 0xFF)] < 0)) {
      n -= 1;
    }
    if (paramString.charAt(n) == '=')
    {
      if (paramString.charAt(n - 1) == '=') {
        i = 2;
      } else {
        i = 1;
      }
    }
    else {
      i = 0;
    }
    int m = n - j + 1;
    int i1;
    if (k > 76)
    {
      if (paramString.charAt(76) == '\r') {
        k = m / 78;
      } else {
        k = 0;
      }
      i1 = k << 1;
    }
    else
    {
      i1 = 0;
    }
    int i5 = ((m - i1) * 6 >> 3) - i;
    byte[] arrayOfByte = new byte[i5];
    int i6 = i5 / 3;
    m = 0;
    int i2 = 0;
    k = j;
    j = m;
    while (j < i6 * 3)
    {
      int[] arrayOfInt = IA;
      m = k + 1;
      k = arrayOfInt[paramString.charAt(k)];
      arrayOfInt = IA;
      int i4 = m + 1;
      m = arrayOfInt[paramString.charAt(m)];
      arrayOfInt = IA;
      int i7 = i4 + 1;
      int i8 = arrayOfInt[paramString.charAt(i4)];
      arrayOfInt = IA;
      i4 = i7 + 1;
      k = k << 18 | m << 12 | i8 << 6 | arrayOfInt[paramString.charAt(i7)];
      m = j + 1;
      arrayOfByte[j] = ((byte)(k >> 16));
      i7 = m + 1;
      arrayOfByte[m] = ((byte)(k >> 8));
      arrayOfByte[i7] = ((byte)k);
      k = i4;
      m = i2;
      if (i1 > 0)
      {
        j = i2 + 1;
        k = i4;
        m = j;
        if (j == 19)
        {
          k = i4 + 2;
          m = 0;
        }
      }
      j = i7 + 1;
      i2 = m;
    }
    if (j < i5)
    {
      i1 = 0;
      m = k;
      k = i3;
      while (m <= n - i)
      {
        k |= IA[paramString.charAt(m)] << 18 - i1 * 6;
        i1 += 1;
        m += 1;
      }
      i = 16;
      while (j < i5)
      {
        arrayOfByte[j] = ((byte)(k >> i));
        i -= 8;
        j += 1;
      }
    }
    return arrayOfByte;
  }
  
  public static byte[] decodeFast(String paramString, int paramInt1, int paramInt2)
  {
    int i1 = 0;
    if (paramInt2 == 0) {
      return new byte[0];
    }
    int j = paramInt1 + paramInt2 - 1;
    int i = paramInt1;
    int k;
    for (;;)
    {
      k = j;
      if (i >= j) {
        break;
      }
      k = j;
      if (IA[paramString.charAt(i)] >= 0) {
        break;
      }
      i += 1;
    }
    while ((k > 0) && (IA[paramString.charAt(k)] < 0)) {
      k -= 1;
    }
    if (paramString.charAt(k) == '=')
    {
      if (paramString.charAt(k - 1) == '=') {
        paramInt1 = 2;
      } else {
        paramInt1 = 1;
      }
    }
    else {
      paramInt1 = 0;
    }
    j = k - i + 1;
    int m;
    if (paramInt2 > 76)
    {
      if (paramString.charAt(76) == '\r') {
        paramInt2 = j / 78;
      } else {
        paramInt2 = 0;
      }
      m = paramInt2 << 1;
    }
    else
    {
      m = 0;
    }
    int i3 = ((j - m) * 6 >> 3) - paramInt1;
    byte[] arrayOfByte = new byte[i3];
    int i4 = i3 / 3;
    paramInt2 = 0;
    int n = 0;
    j = i;
    while (paramInt2 < i4 * 3)
    {
      int[] arrayOfInt = IA;
      int i2 = j + 1;
      i = arrayOfInt[paramString.charAt(j)];
      arrayOfInt = IA;
      j = i2 + 1;
      i2 = arrayOfInt[paramString.charAt(i2)];
      arrayOfInt = IA;
      int i5 = j + 1;
      int i6 = arrayOfInt[paramString.charAt(j)];
      arrayOfInt = IA;
      j = i5 + 1;
      i = i << 18 | i2 << 12 | i6 << 6 | arrayOfInt[paramString.charAt(i5)];
      i5 = paramInt2 + 1;
      arrayOfByte[paramInt2] = ((byte)(i >> 16));
      i2 = i5 + 1;
      arrayOfByte[i5] = ((byte)(i >> 8));
      arrayOfByte[i2] = ((byte)i);
      paramInt2 = j;
      i = n;
      if (m > 0)
      {
        n += 1;
        paramInt2 = j;
        i = n;
        if (n == 19)
        {
          paramInt2 = j + 2;
          i = 0;
        }
      }
      i2 += 1;
      j = paramInt2;
      n = i;
      paramInt2 = i2;
    }
    if (paramInt2 < i3)
    {
      m = 0;
      i = i1;
      while (j <= k - paramInt1)
      {
        i |= IA[paramString.charAt(j)] << 18 - m * 6;
        m += 1;
        j += 1;
      }
      paramInt1 = 16;
      while (paramInt2 < i3)
      {
        arrayOfByte[paramInt2] = ((byte)(i >> paramInt1));
        paramInt1 -= 8;
        paramInt2 += 1;
      }
    }
    return arrayOfByte;
  }
  
  public static byte[] decodeFast(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    int i1 = 0;
    if (paramInt2 == 0) {
      return new byte[0];
    }
    int j = paramInt1 + paramInt2 - 1;
    int i = paramInt1;
    int k;
    for (;;)
    {
      k = j;
      if (i >= j) {
        break;
      }
      k = j;
      if (IA[paramArrayOfChar[i]] >= 0) {
        break;
      }
      i += 1;
    }
    while ((k > 0) && (IA[paramArrayOfChar[k]] < 0)) {
      k -= 1;
    }
    if (paramArrayOfChar[k] == '=')
    {
      if (paramArrayOfChar[(k - 1)] == '=') {
        paramInt1 = 2;
      } else {
        paramInt1 = 1;
      }
    }
    else {
      paramInt1 = 0;
    }
    j = k - i + 1;
    int m;
    if (paramInt2 > 76)
    {
      if (paramArrayOfChar[76] == '\r') {
        paramInt2 = j / 78;
      } else {
        paramInt2 = 0;
      }
      m = paramInt2 << 1;
    }
    else
    {
      m = 0;
    }
    int i3 = ((j - m) * 6 >> 3) - paramInt1;
    byte[] arrayOfByte = new byte[i3];
    int i4 = i3 / 3;
    paramInt2 = 0;
    int n = 0;
    j = i;
    while (paramInt2 < i4 * 3)
    {
      int[] arrayOfInt = IA;
      int i2 = j + 1;
      i = arrayOfInt[paramArrayOfChar[j]];
      j = i2 + 1;
      i2 = arrayOfInt[paramArrayOfChar[i2]];
      int i5 = j + 1;
      int i6 = arrayOfInt[paramArrayOfChar[j]];
      j = i5 + 1;
      i = i << 18 | i2 << 12 | i6 << 6 | arrayOfInt[paramArrayOfChar[i5]];
      i5 = paramInt2 + 1;
      arrayOfByte[paramInt2] = ((byte)(i >> 16));
      i2 = i5 + 1;
      arrayOfByte[i5] = ((byte)(i >> 8));
      arrayOfByte[i2] = ((byte)i);
      paramInt2 = j;
      i = n;
      if (m > 0)
      {
        n += 1;
        paramInt2 = j;
        i = n;
        if (n == 19)
        {
          paramInt2 = j + 2;
          i = 0;
        }
      }
      i2 += 1;
      j = paramInt2;
      n = i;
      paramInt2 = i2;
    }
    if (paramInt2 < i3)
    {
      m = 0;
      i = i1;
      while (j <= k - paramInt1)
      {
        i |= IA[paramArrayOfChar[j]] << 18 - m * 6;
        m += 1;
        j += 1;
      }
      paramInt1 = 16;
      while (paramInt2 < i3)
      {
        arrayOfByte[paramInt2] = ((byte)(i >> paramInt1));
        paramInt1 -= 8;
        paramInt2 += 1;
      }
    }
    return arrayOfByte;
  }
}
