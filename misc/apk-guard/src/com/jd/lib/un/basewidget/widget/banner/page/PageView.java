package com.jd.lib.un.basewidget.widget.banner.page;

import android.content.Context;
import android.graphics.Paint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import androidx.viewpager.widget.ViewPager.OnAdapterChangeListener;
import androidx.viewpager.widget.ViewPager.OnPageChangeListener;
import com.jd.lib.un.basewidget.R.drawable;
import com.jd.lib.un.basewidget.widget.banner.BannerAdapter;
import com.jd.lib.un.basewidget.widget.banner.BannerView;

public class PageView
  extends RelativeLayout
  implements ViewPager.OnAdapterChangeListener, ViewPager.OnPageChangeListener
{
  private BannerAdapter bannerAdapter;
  private BannerView bannerView;
  private TextView divideLineTv;
  private TextView endValueTv;
  private int mDivideLineColor = -1;
  private int mDivideLineSize = 12;
  private int mEndValueColor = -1;
  private int mEndValueSize = 12;
  private int mMaxValue = 1;
  private int mMinValue = 1;
  private int mValue = 1;
  private int mValueColor = -1;
  private int mValueSize = 16;
  private TextView valueTv;
  
  public PageView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public PageView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public PageView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initView();
    configWidth();
  }
  
  private void configDivideWidth()
  {
    float f = parseStrWidth(divideLineTv.getPaint(), "/");
    RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)divideLineTv.getLayoutParams();
    width = ((int)f);
    divideLineTv.setLayoutParams(localLayoutParams);
  }
  
  private void configEndValueWidth()
  {
    Object localObject = endValueTv.getPaint();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(mMaxValue);
    localStringBuilder.append("");
    float f = parseStrWidth((Paint)localObject, localStringBuilder.toString());
    localObject = (RelativeLayout.LayoutParams)endValueTv.getLayoutParams();
    width = ((int)f);
    endValueTv.setLayoutParams((ViewGroup.LayoutParams)localObject);
  }
  
  private void configValueWidth()
  {
    Object localObject = valueTv.getPaint();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(mMaxValue);
    localStringBuilder.append("");
    float f = parseStrWidth((Paint)localObject, localStringBuilder.toString());
    localObject = (RelativeLayout.LayoutParams)valueTv.getLayoutParams();
    width = ((int)f);
    valueTv.setLayoutParams((ViewGroup.LayoutParams)localObject);
  }
  
  private void configWidth()
  {
    configValueWidth();
    configDivideWidth();
    configEndValueWidth();
  }
  
  private int getCount()
  {
    BannerAdapter localBannerAdapter = bannerAdapter;
    if (localBannerAdapter == null) {
      return 0;
    }
    return localBannerAdapter.getItemCount();
  }
  
  private void initView()
  {
    setGravity(17);
    setBackgroundResource(R.drawable.page_num_bg);
    valueTv = new TextView(getContext());
    valueTv.setTextColor(mValueColor);
    valueTv.setTextSize(mValueSize);
    Object localObject = valueTv;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(mValue);
    localStringBuilder.append("");
    ((TextView)localObject).setText(localStringBuilder.toString());
    valueTv.setId(17);
    addView(valueTv);
    divideLineTv = new TextView(getContext());
    divideLineTv.setTextColor(mDivideLineColor);
    divideLineTv.setTextSize(mDivideLineColor);
    divideLineTv.setText("/");
    divideLineTv.setId(18);
    localObject = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject).addRule(1, 17);
    ((RelativeLayout.LayoutParams)localObject).addRule(4, 17);
    addView(divideLineTv, (ViewGroup.LayoutParams)localObject);
    endValueTv = new TextView(getContext());
    endValueTv.setTextSize(mEndValueSize);
    endValueTv.setTextColor(mEndValueColor);
    localObject = endValueTv;
    localStringBuilder = new StringBuilder();
    localStringBuilder.append(endValueTv);
    localStringBuilder.append("");
    ((TextView)localObject).setText(localStringBuilder.toString());
    localObject = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject).addRule(1, 18);
    ((RelativeLayout.LayoutParams)localObject).addRule(4, 18);
    addView(endValueTv, (ViewGroup.LayoutParams)localObject);
    setPadding(30, 0, 30, 5);
  }
  
  private float parseStrWidth(Paint paramPaint, String paramString)
  {
    if ((paramString != null) && (!TextUtils.isEmpty(paramString))) {
      return paramPaint.measureText(paramString);
    }
    return 0.0F;
  }
  
  public void onAdapterChanged(ViewPager paramViewPager, PagerAdapter paramPagerAdapter1, PagerAdapter paramPagerAdapter2)
  {
    if ((paramPagerAdapter2 != null) && ((paramPagerAdapter2 instanceof BannerAdapter)))
    {
      bannerAdapter = ((BannerAdapter)paramPagerAdapter2);
      bannerView.setCurrentItem(0);
      setValue(1);
      setMaxValue(getCount());
    }
  }
  
  public void onPageScrollStateChanged(int paramInt) {}
  
  public void onPageScrolled(int paramInt1, float paramFloat, int paramInt2) {}
  
  public void onPageSelected(int paramInt)
  {
    setValue(paramInt + 1);
  }
  
  public void setBannerView(BannerView paramBannerView)
  {
    bannerView = paramBannerView;
    bannerAdapter = paramBannerView.getAdapter();
    bannerView.removeOnPageChangeListener(this);
    bannerView.addOnPageChangeListener(this);
    bannerView.removeOnAdapterChangeListener(this);
    bannerView.addOnAdapterChangeListener(this);
    setMaxValue(getCount());
  }
  
  public void setDivideLineColor(int paramInt)
  {
    mDivideLineColor = paramInt;
    divideLineTv.setTextColor(paramInt);
  }
  
  public void setDivideLineSize(int paramInt)
  {
    mDivideLineSize = paramInt;
    configDivideWidth();
  }
  
  public void setEndValueColor(int paramInt)
  {
    mEndValueColor = paramInt;
    endValueTv.setTextColor(paramInt);
  }
  
  public void setEndValueSize(int paramInt)
  {
    mEndValueSize = paramInt;
    configEndValueWidth();
  }
  
  public void setMaxValue(int paramInt)
  {
    mMaxValue = paramInt;
    TextView localTextView = endValueTv;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramInt);
    localStringBuilder.append("");
    localTextView.setText(localStringBuilder.toString());
    configValueWidth();
    configEndValueWidth();
  }
  
  public void setValue(int paramInt)
  {
    TextView localTextView = valueTv;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramInt);
    localStringBuilder.append("");
    localTextView.setText(localStringBuilder.toString());
  }
  
  public void setValueColor(int paramInt)
  {
    mValueColor = paramInt;
    valueTv.setTextColor(paramInt);
  }
  
  public void setValueSize(int paramInt)
  {
    mValueSize = paramInt;
    configValueWidth();
  }
}
