package com.jd.lib.un.basewidget.widget.flow;

import android.view.View;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public abstract class TagAdapter<T>
{
  @Deprecated
  private HashSet<Integer> mCheckedPosList = new HashSet();
  private OnDataChangedListener mOnDataChangedListener;
  private List<T> mTagDatas;
  
  public TagAdapter(List paramList)
  {
    mTagDatas = paramList;
  }
  
  public TagAdapter(Object[] paramArrayOfObject)
  {
    mTagDatas = new ArrayList(Arrays.asList(paramArrayOfObject));
  }
  
  public int getCount()
  {
    List localList = mTagDatas;
    if (localList == null) {
      return 0;
    }
    return localList.size();
  }
  
  public Object getItem(int paramInt)
  {
    return mTagDatas.get(paramInt);
  }
  
  HashSet getPreCheckedList()
  {
    return mCheckedPosList;
  }
  
  public abstract View getView(FlowLayout paramFlowLayout, int paramInt, Object paramObject);
  
  public void notifyDataChanged()
  {
    OnDataChangedListener localOnDataChangedListener = mOnDataChangedListener;
    if (localOnDataChangedListener != null) {
      localOnDataChangedListener.onChanged();
    }
  }
  
  public void onSelected(int paramInt, View paramView) {}
  
  void setOnDataChangedListener(OnDataChangedListener paramOnDataChangedListener)
  {
    mOnDataChangedListener = paramOnDataChangedListener;
  }
  
  public boolean setSelected(int paramInt, Object paramObject)
  {
    return false;
  }
  
  public void setSelectedList(Set paramSet)
  {
    mCheckedPosList.clear();
    if (paramSet != null) {
      mCheckedPosList.addAll(paramSet);
    }
    notifyDataChanged();
  }
  
  public void setSelectedList(int... paramVarArgs)
  {
    HashSet localHashSet = new HashSet();
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      localHashSet.add(Integer.valueOf(paramVarArgs[i]));
      i += 1;
    }
    setSelectedList(localHashSet);
  }
  
  public void unSelected(int paramInt, View paramView) {}
  
  static abstract interface OnDataChangedListener
  {
    public abstract void onChanged();
  }
}
