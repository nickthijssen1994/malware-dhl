package com.jd.lib.un.basewidget.widget.flow;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.os.BaseBundle;
import android.os.Bundle;
import android.os.Parcelable;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import com.jd.lib.un.basewidget.R.styleable;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class TagFlowLayout
  extends FlowLayout
  implements TagAdapter.OnDataChangedListener
{
  private static final String KEY_CHOOSE_POS = "key_choose_pos";
  private static final String KEY_DEFAULT = "key_default";
  private static final String PAGE_KEY = "TagFlowLayout";
  private OnSelectListener mOnSelectListener;
  private OnTagClickListener mOnTagClickListener;
  private int mSelectedMax = -1;
  private Set<Integer> mSelectedView = new HashSet();
  private TagAdapter mTagAdapter;
  
  public TagFlowLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public TagFlowLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public TagFlowLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.TagFlowLayout);
    mSelectedMax = paramContext.getInt(R.styleable.TagFlowLayout_max_select, -1);
    paramContext.recycle();
  }
  
  private void changeAdapter()
  {
    removeAllViews();
    TagAdapter localTagAdapter = mTagAdapter;
    HashSet localHashSet = localTagAdapter.getPreCheckedList();
    final int i = 0;
    while (i < localTagAdapter.getCount())
    {
      View localView = localTagAdapter.getView(this, i, localTagAdapter.getItem(i));
      final TagItemView localTagItemView = new TagItemView(getContext());
      localView.setDuplicateParentStateEnabled(true);
      if (localView.getLayoutParams() != null)
      {
        localTagItemView.setLayoutParams(localView.getLayoutParams());
      }
      else
      {
        ViewGroup.MarginLayoutParams localMarginLayoutParams = new ViewGroup.MarginLayoutParams(-2, -2);
        localMarginLayoutParams.setMargins(dip2px(getContext(), 5.0F), dip2px(getContext(), 5.0F), dip2px(getContext(), 5.0F), dip2px(getContext(), 5.0F));
        localTagItemView.setLayoutParams(localMarginLayoutParams);
      }
      localView.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
      localTagItemView.addView(localView);
      addView(localTagItemView);
      if (localHashSet.contains(Integer.valueOf(i))) {
        setChildChecked(i, localTagItemView);
      }
      if (mTagAdapter.setSelected(i, localTagAdapter.getItem(i))) {
        setChildChecked(i, localTagItemView);
      }
      localView.setClickable(false);
      localTagItemView.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          TagFlowLayout.this.doSelect(localTagItemView, i);
          if (mOnTagClickListener != null) {
            mOnTagClickListener.onTagClick(localTagItemView, i, TagFlowLayout.this);
          }
        }
      });
      i += 1;
    }
    mSelectedView.addAll(localHashSet);
  }
  
  public static int dip2px(Context paramContext, float paramFloat)
  {
    return (int)(paramFloat * getResourcesgetDisplayMetricsdensity + 0.5F);
  }
  
  private void doSelect(TagItemView paramTagItemView, int paramInt)
  {
    if (!paramTagItemView.isChecked())
    {
      if ((mSelectedMax == 1) && (mSelectedView.size() == 1))
      {
        Integer localInteger = (Integer)mSelectedView.iterator().next();
        TagItemView localTagItemView = (TagItemView)getChildAt(localInteger.intValue());
        setChildUnChecked(localInteger.intValue(), localTagItemView);
        setChildChecked(paramInt, paramTagItemView);
        mSelectedView.remove(localInteger);
        mSelectedView.add(Integer.valueOf(paramInt));
      }
      else
      {
        if ((mSelectedMax > 0) && (mSelectedView.size() >= mSelectedMax)) {
          return;
        }
        setChildChecked(paramInt, paramTagItemView);
        mSelectedView.add(Integer.valueOf(paramInt));
      }
    }
    else
    {
      setChildUnChecked(paramInt, paramTagItemView);
      mSelectedView.remove(Integer.valueOf(paramInt));
    }
    paramTagItemView = mOnSelectListener;
    if (paramTagItemView != null) {
      paramTagItemView.onSelected(new HashSet(mSelectedView));
    }
  }
  
  private void setChildChecked(int paramInt, TagItemView paramTagItemView)
  {
    paramTagItemView.setChecked(true);
    mTagAdapter.onSelected(paramInt, paramTagItemView.getTagView());
  }
  
  private void setChildUnChecked(int paramInt, TagItemView paramTagItemView)
  {
    paramTagItemView.setChecked(false);
    mTagAdapter.unSelected(paramInt, paramTagItemView.getTagView());
  }
  
  public TagAdapter getAdapter()
  {
    return mTagAdapter;
  }
  
  public Set getSelectedList()
  {
    return new HashSet(mSelectedView);
  }
  
  public void onChanged()
  {
    mSelectedView.clear();
    changeAdapter();
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      TagItemView localTagItemView = (TagItemView)getChildAt(i);
      if ((localTagItemView.getVisibility() != 8) && (localTagItemView.getTagView().getVisibility() == 8)) {
        localTagItemView.setVisibility(8);
      }
      i += 1;
    }
    super.onMeasure(paramInt1, paramInt2);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if ((paramParcelable instanceof Bundle))
    {
      paramParcelable = (Bundle)paramParcelable;
      Object localObject = paramParcelable.getString("key_choose_pos");
      if (!TextUtils.isEmpty((CharSequence)localObject))
      {
        localObject = ((String)localObject).split("\\|");
        int j = localObject.length;
        int i = 0;
        while (i < j)
        {
          int k = Integer.parseInt(localObject[i]);
          mSelectedView.add(Integer.valueOf(k));
          TagItemView localTagItemView = (TagItemView)getChildAt(k);
          if (localTagItemView != null) {
            setChildChecked(k, localTagItemView);
          }
          i += 1;
        }
      }
      super.onRestoreInstanceState(paramParcelable.getParcelable("key_default"));
      return;
    }
    super.onRestoreInstanceState(paramParcelable);
  }
  
  protected Parcelable onSaveInstanceState()
  {
    Bundle localBundle = new Bundle();
    localBundle.putParcelable("key_default", super.onSaveInstanceState());
    String str = "";
    Object localObject = str;
    if (mSelectedView.size() > 0)
    {
      localObject = mSelectedView.iterator();
      while (((Iterator)localObject).hasNext())
      {
        int i = ((Integer)((Iterator)localObject).next()).intValue();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(str);
        localStringBuilder.append(i);
        localStringBuilder.append("|");
        str = localStringBuilder.toString();
      }
      localObject = str.substring(0, str.length() - 1);
    }
    localBundle.putString("key_choose_pos", (String)localObject);
    return localBundle;
  }
  
  public void setAdapter(TagAdapter paramTagAdapter)
  {
    mTagAdapter = paramTagAdapter;
    mTagAdapter.setOnDataChangedListener(this);
    mSelectedView.clear();
    changeAdapter();
  }
  
  public void setMaxSelectCount(int paramInt)
  {
    if (mSelectedView.size() > paramInt)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("you has already select more than ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" views , so it will be clear .");
      Log.w("TagFlowLayout", localStringBuilder.toString());
      mSelectedView.clear();
    }
    mSelectedMax = paramInt;
  }
  
  public void setOnSelectListener(OnSelectListener paramOnSelectListener)
  {
    mOnSelectListener = paramOnSelectListener;
  }
  
  public void setOnTagClickListener(OnTagClickListener paramOnTagClickListener)
  {
    mOnTagClickListener = paramOnTagClickListener;
  }
  
  public static abstract interface OnSelectListener
  {
    public abstract void onSelected(Set paramSet);
  }
  
  public static abstract interface OnTagClickListener
  {
    public abstract boolean onTagClick(View paramView, int paramInt, FlowLayout paramFlowLayout);
  }
}
