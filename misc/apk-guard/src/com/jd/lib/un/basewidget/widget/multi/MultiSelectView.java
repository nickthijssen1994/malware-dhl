package com.jd.lib.un.basewidget.widget.multi;

import android.content.Context;
import android.content.res.TypedArray;
import android.os.Handler;
import android.os.Looper;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout.LayoutParams;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.Adapter;
import com.jd.lib.un.basewidget.R.id;
import com.jd.lib.un.basewidget.R.layout;
import com.jd.lib.un.basewidget.R.styleable;
import com.jd.lib.un.basewidget.widget.multi.cache.MultiDataList;
import com.jd.lib.un.basewidget.widget.multi.configurations.MultiContentAdapter;
import com.jd.lib.un.basewidget.widget.multi.configurations.MultiContentAdapter.a;
import com.jd.lib.un.basewidget.widget.multi.configurations.MultiIndicator;
import com.jd.lib.un.basewidget.widget.multi.configurations.MultiTagLayout;
import com.jd.lib.un.basewidget.widget.multi.configurations.MultiTagLayout.a;
import com.jd.lib.un.basewidget.widget.multi.users.Common;
import com.jd.lib.un.basewidget.widget.multi.xy.a;
import com.jd.lib.un.basewidget.widget.multi.xy.b;
import com.jd.lib.un.basewidget.widget.multi.xy.c;
import java.util.ArrayList;
import java.util.List;

public class MultiSelectView
  extends FrameLayout
{
  private boolean F = true;
  private a a;
  private MultiDataList<String> b = new MultiDataList();
  private MultiTagLayout c;
  private MultiContentAdapter d;
  private int e = 1;
  private int f = Common.init(13.0F);
  private int h = 0;
  private int i = 3;
  private int j = Common.init(13.0F);
  private int k = -7829368;
  private MultiIndicator l;
  private MultiDataList<List<String>> m = new MultiDataList();
  private int mActivePointerId = -1;
  private String mCurrentKey = null;
  private boolean mIsBeingDragged = false;
  private RecyclerView mRecyclerView;
  private HorizontalScrollView mScroller;
  private int n = -65536;
  private int o = -16777216;
  private b q;
  private boolean s = true;
  private boolean showIcons = false;
  private View stopButton;
  private Handler str = new Handler(Looper.getMainLooper());
  private String t = "???";
  private View u;
  
  public MultiSelectView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public MultiSelectView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public MultiSelectView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    a(paramAttributeSet);
    onCreate();
    e();
    b();
  }
  
  private void a(int paramInt)
  {
    int i1 = h;
    if (paramInt == i1) {
      return;
    }
    h = paramInt;
    List localList = (List)add(m, paramInt);
    String str1 = (String)add(b, paramInt);
    if ((localList == null) && (str1 != null))
    {
      b(str1, true);
    }
    else
    {
      a(localList, str1);
      onSaveInstanceState(localList, str1);
    }
    b(i1, paramInt);
  }
  
  private void a(final int paramInt1, final int paramInt2)
  {
    c.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener()
    {
      public void onGlobalLayout()
      {
        MultiSelectView.access$getC(MultiSelectView.this).getViewTreeObserver().removeGlobalOnLayoutListener(this);
        MultiSelectView.access$getL(MultiSelectView.this).onDraw(MultiSelectView.access$getC(MultiSelectView.this).getTagView(paramInt1), MultiSelectView.access$getC(MultiSelectView.this).getTagView(paramInt2));
        a();
      }
    });
  }
  
  private void a(AttributeSet paramAttributeSet)
  {
    if (paramAttributeSet != null)
    {
      TypedArray localTypedArray = getContext().obtainStyledAttributes(paramAttributeSet, R.styleable.MultiSelectView);
      f = localTypedArray.getDimensionPixelSize(R.styleable.MultiSelectView_select_tag_text_size, f);
      j = localTypedArray.getDimensionPixelSize(R.styleable.MultiSelectView_select_item_text_size, j);
      n = localTypedArray.getColor(R.styleable.MultiSelectView_select_selected_color, n);
      o = localTypedArray.getColor(R.styleable.MultiSelectView_select_normal_color, o);
      k = localTypedArray.getColor(R.styleable.MultiSelectView_select_divide_line_color, k);
      e = localTypedArray.getDimensionPixelSize(R.styleable.MultiSelectView_select_divide_line_height, e);
      i = localTypedArray.getDimensionPixelSize(R.styleable.MultiSelectView_select_indicator_height, i);
      String str1 = localTypedArray.getString(R.styleable.MultiSelectView_select_un_selected_text);
      paramAttributeSet = str1;
      if (str1 == null) {
        paramAttributeSet = "???";
      }
      t = paramAttributeSet;
      localTypedArray.recycle();
    }
    show();
  }
  
  private void a(MultiDataList paramMultiDataList, int paramInt1, int paramInt2)
  {
    if (paramMultiDataList != null)
    {
      if (paramMultiDataList.isEmpty()) {
        return;
      }
      if ((paramInt2 >= paramInt1) && (paramInt1 >= 0))
      {
        if (paramInt2 > paramMultiDataList.size() - 1) {
          return;
        }
        paramMultiDataList.removeRanges(paramInt1, paramInt2);
      }
    }
  }
  
  private void a(MultiDataList paramMultiDataList, int paramInt, Object paramObject)
  {
    if (paramMultiDataList != null)
    {
      if (paramObject == null) {
        return;
      }
      if ((paramInt >= 0) && (paramInt <= paramMultiDataList.size() - 1))
      {
        paramMultiDataList.set(paramInt, paramObject);
        return;
      }
      paramMultiDataList.add(paramObject);
    }
  }
  
  private void a(String paramString)
  {
    d.b(paramString);
    d.notifyDataSetChanged();
    a(b, h, paramString);
  }
  
  private void a(String paramString, c paramC)
  {
    b localB = q;
    if (localB == null)
    {
      l();
      add();
      return;
    }
    localB.a(h, paramString, paramC);
  }
  
  private void a(List paramList)
  {
    visitFrame();
    h += 1;
    a(m, h, paramList);
    a(b, h, null);
    b(h);
    a(paramList, null);
  }
  
  private void a(List paramList, String paramString)
  {
    d.b(paramString);
    d.a(paramList);
    d.notifyDataSetChanged();
  }
  
  private Object add(MultiDataList paramMultiDataList, int paramInt)
  {
    if (paramMultiDataList != null)
    {
      if (paramMultiDataList.isEmpty()) {
        return null;
      }
      int i1 = paramMultiDataList.size();
      if (paramInt >= 0)
      {
        if (paramInt > i1 - 1) {
          return null;
        }
        return paramMultiDataList.get(paramInt);
      }
    }
    return null;
  }
  
  private void add()
  {
    mIsBeingDragged = false;
  }
  
  private void b()
  {
    c.setTextSize(f);
    d.a(j);
    c.setSelectedTextColor(n);
    c.setNormalTextColor(o);
    l.setColor(n);
    d.b(o);
    d.d(n);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, e);
    stopButton.setLayoutParams(localLayoutParams);
    stopButton.setBackgroundColor(k);
    l.setHeight(i);
  }
  
  private void b(int paramInt)
  {
    c.changeTagState(paramInt);
  }
  
  private void b(int paramInt1, int paramInt2)
  {
    if (paramInt1 == paramInt2) {
      return;
    }
    int i1 = c.getTagSize() - 1;
    if ((i1 >= paramInt1) && (i1 >= paramInt2) && (paramInt1 >= 0))
    {
      if (paramInt2 < 0) {
        return;
      }
      View localView1 = c.getTagView(paramInt1);
      View localView2 = c.getTagView(paramInt2);
      l.onDraw(localView1, localView2);
    }
  }
  
  private void b(final String paramString, final boolean paramBoolean)
  {
    visitCode();
    clearHeader();
    String str1;
    if ((h == 0) && (paramBoolean)) {
      str1 = null;
    } else {
      str1 = paramString;
    }
    a(str1, new c()
    {
      public void a(final List paramAnonymousList)
      {
        MultiSelectView.removeCallbacks(MultiSelectView.this, new Runnable()
        {
          public void run()
          {
            List localList = paramAnonymousList;
            if ((localList != null) && (localList.isEmpty()))
            {
              MultiSelectView.format(MultiSelectView.this);
              MultiSelectView.dot(MultiSelectView.this);
              return;
            }
            if (paramAnonymousList == null)
            {
              MultiSelectView.c(MultiSelectView.this);
              MultiSelectView.dot(MultiSelectView.this);
              return;
            }
            if (c) {
              MultiSelectView.a(MultiSelectView.this, paramAnonymousList, b);
            } else {
              MultiSelectView.a(MultiSelectView.this, paramAnonymousList);
            }
            MultiSelectView.dot(MultiSelectView.this);
          }
        });
      }
    });
  }
  
  private void c()
  {
    MultiDataList localMultiDataList = b;
    a(localMultiDataList, h + 1, localMultiDataList.size() - 1);
    localMultiDataList = m;
    a(localMultiDataList, h + 1, localMultiDataList.size() - 1);
  }
  
  private void c(String paramString)
  {
    int i1 = h;
    int i2 = c.getTagSize() - 1;
    if (i2 > i1) {
      c.removeTag(i1 + 1, i2);
    }
    c.updateTag(h, paramString);
    a(-1, h);
  }
  
  private void clearHeader()
  {
    a localA = a;
    if (localA != null) {
      localA.removeView();
    }
  }
  
  private void d()
  {
    a localA = a;
    if (localA != null) {
      localA.l();
    }
  }
  
  private void diff()
  {
    diffReplace();
  }
  
  private void diffReplace()
  {
    if (a != null)
    {
      ArrayList localArrayList = new ArrayList();
      localArrayList.addAll(b);
      a.a(localArrayList);
    }
  }
  
  private void e()
  {
    d.b(new MultiContentAdapter.a()
    {
      public void b(int paramAnonymousInt, String paramAnonymousString)
      {
        if (paramAnonymousString != null)
        {
          if (MultiSelectView.a(MultiSelectView.this).contains(paramAnonymousString)) {
            return;
          }
          MultiSelectView.b(MultiSelectView.this, paramAnonymousString);
          MultiSelectView.a(MultiSelectView.this, paramAnonymousString);
          MultiSelectView.b(MultiSelectView.this);
          MultiSelectView.b(MultiSelectView.this, paramAnonymousString, false);
        }
      }
    });
    c.setTagClickListener(new MultiTagLayout.a()
    {
      public void deleteImage(int paramAnonymousInt, View paramAnonymousView)
      {
        MultiSelectView.d(MultiSelectView.this, paramAnonymousInt);
      }
    });
  }
  
  private void e(List paramList, String paramString)
  {
    a(paramList, paramString);
    onSaveInstanceState(paramList, paramString);
    a(m, h, paramList);
    a(b, h, paramString);
  }
  
  private void l()
  {
    d();
  }
  
  private void onCreate()
  {
    c = ((MultiTagLayout)findViewById(R.id.multi_tag_layout));
    l = ((MultiIndicator)findViewById(R.id.multi_indicator_layout));
    l.setNeedChangeWidth(true);
    mRecyclerView = ((RecyclerView)findViewById(R.id.multi_recycle_view));
    mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
    mRecyclerView.setHasFixedSize(true);
    d = new MultiContentAdapter();
    mRecyclerView.setAdapter(d);
    stopButton = findViewById(R.id.multi_divide_line_view);
    mScroller = ((HorizontalScrollView)findViewById(R.id.multi_hor_scroll_view));
  }
  
  private void runOnMainThread(Runnable paramRunnable)
  {
    if (paramRunnable == null) {
      return;
    }
    if (Looper.myLooper() == Looper.getMainLooper())
    {
      paramRunnable.run();
      return;
    }
    str.post(paramRunnable);
  }
  
  private void show()
  {
    LayoutInflater.from(getContext()).inflate(R.layout.multi_select_layout, this, true);
  }
  
  private void visitCode()
  {
    mIsBeingDragged = true;
  }
  
  private void visitFrame()
  {
    c.addTag("???");
    int i1 = c.findTagViewIndex(u);
    int i2 = c.getTagSize() - 1;
    a(i1, i2);
    u = c.getTagView(i2);
  }
  
  public void a()
  {
    str.post(new Runnable()
    {
      public void run()
      {
        MultiSelectView.access$getMScroller(MultiSelectView.this).smoothScrollTo(MultiSelectView.access$getMScroller(MultiSelectView.this).getWidth(), 0);
      }
    });
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    return mIsBeingDragged;
  }
  
  public void onSaveInstanceState(List paramList, String paramString)
  {
    if ((paramString != null) && (paramList != null))
    {
      if (paramList.isEmpty()) {
        return;
      }
      int i1 = paramList.indexOf(paramString);
      if (i1 == -1) {
        return;
      }
      paramList = (LinearLayoutManager)mRecyclerView.getLayoutManager();
      int i2 = paramList.findFirstVisibleItemPosition();
      int i3 = paramList.findLastVisibleItemPosition();
      if (i1 <= i2)
      {
        mRecyclerView.scrollToPosition(i1);
        return;
      }
      if (i1 <= i3)
      {
        i1 = mRecyclerView.getChildAt(i1 - i2).getTop();
        mRecyclerView.scrollBy(0, i1);
        return;
      }
      mRecyclerView.scrollToPosition(i1);
    }
  }
  
  public void setProvider(a paramA)
  {
    if (paramA == null) {
      return;
    }
    q = new b(paramA);
    q.a(F);
  }
  
  public void setStateListener(a paramA)
  {
    a = paramA;
  }
  
  public void setUseCache(boolean paramBoolean)
  {
    F = paramBoolean;
    b localB = q;
    if (localB != null) {
      localB.a(paramBoolean);
    }
  }
  
  public static abstract interface a
  {
    public abstract void a(List paramList);
    
    public abstract void l();
    
    public abstract void removeView();
  }
}
