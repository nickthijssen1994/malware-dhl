package com.jd.lib.un.basewidget.widget.simple.footer;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import androidx.core.graphics.ColorUtils;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshSpinner;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshFooter;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshLayout;
import com.jd.lib.un.basewidget.widget.simple.users.AbsRefreshInternal;
import com.jd.lib.un.basewidget.widget.simple.utils.DpiUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class BallPulseFooter
  extends AbsRefreshInternal
  implements RefreshFooter
{
  protected Paint b;
  protected Map<ValueAnimator, ValueAnimator.AnimatorUpdateListener> c;
  protected boolean d;
  protected float height;
  protected ArrayList<ValueAnimator> m;
  protected int n = -1118482;
  protected int o = -1615546;
  protected boolean r;
  protected boolean s;
  protected float[] y = { 1.0F, 1.0F, 1.0F };
  
  public BallPulseFooter(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public BallPulseFooter(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public BallPulseFooter(Context paramContext, AttributeSet paramAttributeSet, final int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramInt = 0;
    s = false;
    c = new HashMap();
    setMinimumHeight(DpiUtils.dp2px(60.0F));
    b = new Paint();
    b.setColor(-1);
    b.setStyle(Paint.Style.FILL);
    b.setAntiAlias(true);
    mSpinnerStyle = RefreshSpinner.TRANSLATE;
    height = DpiUtils.dp2px(4.0F);
    m = new ArrayList();
    while (paramInt < 3)
    {
      paramContext = ValueAnimator.ofFloat(new float[] { 1.0F, 0.3F, 1.0F });
      paramContext.setDuration(750L);
      paramContext.setRepeatCount(-1);
      paramContext.setTarget(Integer.valueOf(paramInt));
      paramContext.setStartDelay(new int[] { 120, 240, 360 }[paramInt]);
      c.put(paramContext, new ValueAnimator.AnimatorUpdateListener()
      {
        public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
        {
          y[paramInt] = ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue();
          jdField_this.postInvalidate();
        }
      });
      m.add(paramContext);
      paramInt += 1;
    }
  }
  
  public BallPulseFooter a(int paramInt)
  {
    n = paramInt;
    r = true;
    if (!s) {
      b.setColor(paramInt);
    }
    return this;
  }
  
  public BallPulseFooter b(int paramInt)
  {
    o = paramInt;
    d = true;
    if (s) {
      b.setColor(paramInt);
    }
    return this;
  }
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    int i = getWidth();
    int j = getHeight();
    float f2 = Math.min(i, j);
    float f1 = height;
    f2 = (f2 - f1 * 2.0F) / 6.0F;
    float f3 = i / 2;
    float f4 = 2.0F * f2;
    float f5 = j / 2;
    i = 0;
    while (i < 3)
    {
      paramCanvas.save();
      float f6 = i;
      paramCanvas.translate(f4 * f6 + (f3 - (f1 + f4)) + height * f6, f5);
      float[] arrayOfFloat = y;
      paramCanvas.scale(arrayOfFloat[i], arrayOfFloat[i]);
      paramCanvas.drawCircle(0.0F, 0.0F, f2, b);
      paramCanvas.restore();
      i += 1;
    }
    super.dispatchDraw(paramCanvas);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (m != null)
    {
      int i = 0;
      while (i < m.size())
      {
        ((ValueAnimator)m.get(i)).cancel();
        ((ValueAnimator)m.get(i)).removeAllListeners();
        ((ValueAnimator)m.get(i)).removeAllUpdateListeners();
        i += 1;
      }
    }
  }
  
  public int onFinish(RefreshLayout paramRefreshLayout, boolean paramBoolean)
  {
    paramRefreshLayout = m;
    if ((paramRefreshLayout != null) && (s))
    {
      s = false;
      y = new float[] { 1.0F, 1.0F, 1.0F };
      paramRefreshLayout = paramRefreshLayout.iterator();
      while (paramRefreshLayout.hasNext())
      {
        ValueAnimator localValueAnimator = (ValueAnimator)paramRefreshLayout.next();
        if (localValueAnimator != null)
        {
          localValueAnimator.removeAllUpdateListeners();
          localValueAnimator.end();
        }
      }
    }
    b.setColor(n);
    return 0;
  }
  
  public void onStartAnimator(RefreshLayout paramRefreshLayout, int paramInt1, int paramInt2)
  {
    if (s) {
      return;
    }
    paramInt1 = 0;
    while (paramInt1 < m.size())
    {
      paramRefreshLayout = (ValueAnimator)m.get(paramInt1);
      ValueAnimator.AnimatorUpdateListener localAnimatorUpdateListener = (ValueAnimator.AnimatorUpdateListener)c.get(paramRefreshLayout);
      if (localAnimatorUpdateListener != null) {
        paramRefreshLayout.addUpdateListener(localAnimatorUpdateListener);
      }
      paramRefreshLayout.start();
      paramInt1 += 1;
    }
    s = true;
    b.setColor(o);
  }
  
  public boolean setNoMoreData(boolean paramBoolean)
  {
    return false;
  }
  
  public void setPrimaryColors(int... paramVarArgs)
  {
    if ((!d) && (paramVarArgs.length > 1))
    {
      b(paramVarArgs[0]);
      d = false;
    }
    if (!r)
    {
      if (paramVarArgs.length > 1) {
        a(paramVarArgs[1]);
      } else if (paramVarArgs.length > 0) {
        a(ColorUtils.compositeColors(-1711276033, paramVarArgs[0]));
      }
      r = false;
    }
  }
}
