package com.jd.lib.un.basewidget.widget.multi.configurations;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Shader;
import android.util.AttributeSet;
import android.view.View;
import android.view.animation.Interpolator;
import android.widget.Scroller;
import com.jd.lib.un.basewidget.R.styleable;

public class MultiIndicator
  extends View
{
  private static final Interpolator a = new Interpolator()
  {
    public float getInterpolation(float paramAnonymousFloat)
    {
      paramAnonymousFloat -= 1.0F;
      return paramAnonymousFloat * paramAnonymousFloat * paramAnonymousFloat * paramAnonymousFloat * paramAnonymousFloat + 1.0F;
    }
  };
  private float bitmapX;
  private float bitmapY;
  private View currentPositionOffset;
  private Paint d;
  private int dividerColor = -14474458;
  private RectF g;
  private int indicatorHeight = 84;
  private View mSelectedView;
  private boolean paddingLeft = false;
  private float ratio = 0.7F;
  private int scrollOffset = 3;
  private Scroller scroller;
  private int underlineHeight = 0;
  
  public MultiIndicator(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public MultiIndicator(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    if (isInEditMode()) {
      return;
    }
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.MultiIndicator);
    indicatorHeight = paramContext.getDimensionPixelSize(R.styleable.MultiIndicator_indicator_item_width, indicatorHeight);
    scrollOffset = paramContext.getDimensionPixelSize(R.styleable.MultiIndicator_indicator_item_height, scrollOffset);
    underlineHeight = paramContext.getDimensionPixelSize(R.styleable.MultiIndicator_indicator_radius, underlineHeight);
    ratio = paramContext.getFloat(R.styleable.MultiIndicator_indicator_percent, ratio);
    dividerColor = paramContext.getColor(R.styleable.MultiIndicator_indicator_select_color, dividerColor);
    paramContext.recycle();
    init();
  }
  
  private void init()
  {
    d = new Paint(1);
    scroller = new Scroller(getContext(), a);
    d.setColor(dividerColor);
    g = new RectF();
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if (currentPositionOffset == null) {
      return;
    }
    int i = getPaddingLeft();
    float f2 = indicatorHeight;
    float f1 = i + bitmapX + bitmapY;
    f2 = f1 + f2;
    float f3 = getPaddingTop();
    float f4 = getHeight() - getPaddingBottom();
    i = underlineHeight;
    if (i == 0)
    {
      paramCanvas.drawRect(f1, f3, f2, f4, d);
    }
    else
    {
      RectF localRectF = g;
      left = f1;
      top = f3;
      right = f2;
      bottom = f4;
      paramCanvas.drawRoundRect(localRectF, i, i, d);
    }
    if ((!scroller.isFinished()) && (scroller.computeScrollOffset()))
    {
      bitmapX = scroller.getCurrX();
      invalidate();
      return;
    }
    scroller.abortAnimation();
  }
  
  public void onDraw(View paramView1, View paramView2)
  {
    if (paramView2 != null)
    {
      if ((paddingLeft) || (indicatorHeight <= 0)) {
        indicatorHeight = ((int)(paramView2.getWidth() * ratio));
      }
      mSelectedView = paramView1;
      currentPositionOffset = paramView2;
      if ((paramView1 != null) && (paramView1 != paramView2))
      {
        int i = paramView1.getLeft();
        int j = paramView2.getLeft();
        scroller.startScroll(i, 0, j - i, 0, 400);
      }
      else
      {
        bitmapX = paramView2.getLeft();
      }
      bitmapY = ((paramView2.getRight() - paramView2.getLeft() - indicatorHeight) / 2);
      invalidate();
    }
  }
  
  public void setColor(int paramInt)
  {
    Paint localPaint = d;
    if (localPaint != null)
    {
      localPaint.setColor(paramInt);
      requestLayout();
    }
  }
  
  public void setHeight(int paramInt)
  {
    scrollOffset = paramInt;
  }
  
  public void setNeedChangeWidth(boolean paramBoolean)
  {
    paddingLeft = paramBoolean;
  }
  
  public void setShader(Shader paramShader)
  {
    Paint localPaint = d;
    if (localPaint != null)
    {
      localPaint.setShader(paramShader);
      requestLayout();
    }
  }
  
  public void setTabSelectColor(int paramInt)
  {
    d.setColor(paramInt);
  }
}
