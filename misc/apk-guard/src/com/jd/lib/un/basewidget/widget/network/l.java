package com.jd.lib.un.basewidget.widget.network;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.util.Log;
import com.jingdong.common.DpiUtil;

public class l
  extends Drawable
{
  private Paint a = new Paint();
  private String b;
  private float d;
  private int g;
  private float h;
  private Context i;
  
  public l(Context paramContext)
  {
    i = paramContext;
  }
  
  public l a(float paramFloat)
  {
    d = paramFloat;
    return this;
  }
  
  public l a(int paramInt)
  {
    g = paramInt;
    return this;
  }
  
  public l b(float paramFloat)
  {
    h = paramFloat;
    return this;
  }
  
  public l b(String paramString)
  {
    b = paramString;
    return this;
  }
  
  public void draw(Canvas paramCanvas)
  {
    int n = getBoundsright;
    int j = getBoundsbottom;
    int i1 = (int)Math.sqrt(n * n + j * j);
    a.setColor(g);
    a.setTextSize(DpiUtil.dip2px(i, h));
    a.setAntiAlias(true);
    float f1 = a.measureText(b);
    j = 0;
    paramCanvas.drawColor(0);
    paramCanvas.rotate(-30.0F);
    int i2 = DpiUtil.dip2px(i, 80.0F);
    int i3 = DpiUtil.dip2px(i, 60.0F);
    int k = DpiUtil.dip2px(i, 20.0F);
    double d1 = Math.tan(Math.toRadians(Math.abs(d)));
    double d2 = Math.cos(Math.toRadians(Math.abs(d)));
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(d2);
    ((StringBuilder)localObject).append(" cos");
    Log.d("watermark", ((StringBuilder)localObject).toString());
    for (;;)
    {
      float f2 = k;
      if (f2 >= n + f1) {
        break;
      }
      d2 = j;
      float f3 = i3 + f1;
      double d3 = f3;
      Double.isNaN(d3);
      Double.isNaN(d2);
      int i4 = (int)(d2 * (d3 * d1));
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("startY:");
      ((StringBuilder)localObject).append(i4);
      Log.d("watermark", ((StringBuilder)localObject).toString());
      int m = -i2;
      while (m <= i1)
      {
        localObject = b;
        d2 = k;
        d3 = m;
        Double.isNaN(d3);
        Double.isNaN(d2);
        paramCanvas.drawText((String)localObject, (int)(d2 - d3 * d1), m + i4, a);
        m += i2;
      }
      j += 1;
      k = (int)(f2 + f3);
    }
    paramCanvas.save();
    paramCanvas.restore();
  }
  
  public int getOpacity()
  {
    return 0;
  }
  
  public void setAlpha(int paramInt) {}
  
  public void setColorFilter(ColorFilter paramColorFilter) {}
}
