package com.jd.lib.un.basewidget.widget.simple.header;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshSpinner;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshState;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshHeader;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshLayout;
import com.jd.lib.un.basewidget.widget.simple.users.AbsRefreshInternal;
import com.jd.lib.un.basewidget.widget.simple.utils.DpiUtils;

public class BezierRadarHeader
  extends AbsRefreshInternal
  implements RefreshHeader
{
  protected Paint a;
  protected Animator animator;
  protected int b;
  protected float d;
  protected boolean e;
  protected boolean forward = false;
  protected int h = -1;
  protected float height;
  protected boolean i;
  protected int l;
  protected int m;
  protected RectF mRect = new RectF(0.0F, 0.0F, 0.0F, 0.0F);
  protected float n = 0.0F;
  protected boolean o;
  protected Path p;
  protected float percent = 0.0F;
  protected float r;
  protected int size = 0;
  protected float value = 0.0F;
  protected int x;
  protected float y;
  
  public BezierRadarHeader(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public BezierRadarHeader(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public BezierRadarHeader(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    mSpinnerStyle = RefreshSpinner.SCALE;
    p = new Path();
    a = new Paint();
    a.setAntiAlias(true);
    r = DpiUtils.dp2px(7.0F);
    percent = DpiUtils.dp2px(20.0F);
    n = DpiUtils.dp2px(7.0F);
    a.setStrokeWidth(DpiUtils.dp2px(3.0F));
    setMinimumHeight(DpiUtils.dp2px(100.0F));
    if (isInEditMode())
    {
      l = 1000;
      value = 1.0F;
      size = 270;
    }
    else
    {
      value = 0.0F;
    }
    a(-1);
    b(-14540254);
  }
  
  public BezierRadarHeader a(int paramInt)
  {
    b = paramInt;
    e = true;
    return this;
  }
  
  public BezierRadarHeader b(int paramInt)
  {
    m = paramInt;
    i = true;
    return this;
  }
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    int j = getWidth();
    int k = getHeight();
    onDraw(paramCanvas, j);
    draw(paramCanvas, j, k);
    update(paramCanvas, j, k);
    doDraw(paramCanvas, j, k);
    super.dispatchDraw(paramCanvas);
  }
  
  protected void doDraw(Canvas paramCanvas, int paramInt1, int paramInt2)
  {
    if (height > 0.0F)
    {
      a.setColor(b);
      paramCanvas.drawCircle(paramInt1 / 2, paramInt2 / 2, height, a);
    }
  }
  
  protected void draw(Canvas paramCanvas, int paramInt1, int paramInt2)
  {
    float f1 = y;
    float f2 = 0.0F;
    if (f1 > 0.0F)
    {
      a.setColor(b);
      float f3 = paramInt2;
      float f4 = DpiUtils.px2dp(f3);
      float f5 = paramInt1 / 7;
      float f6 = d;
      if (f6 > 1.0F) {
        f1 = (f6 - 1.0F) * f5 / f6;
      } else {
        f1 = 0.0F;
      }
      float f7 = d;
      if (f7 > 1.0F) {
        f2 = (f7 - 1.0F) * f3 / 2.0F / f7;
      }
      paramInt2 = 0;
      while (paramInt2 < 7)
      {
        f7 = paramInt2 + 1.0F - 4.0F;
        float f8 = Math.abs(f7) / 7.0F;
        Paint localPaint = a;
        double d1 = y * ((1.0F - f8 * 2.0F) * 255.0F);
        double d2 = f4;
        Double.isNaN(d2);
        d2 = 1.0D / Math.pow(d2 / 800.0D + 1.0D, 15.0D);
        Double.isNaN(d1);
        localPaint.setAlpha((int)(d1 * (1.0D - d2)));
        f8 = r * (1.0F - 1.0F / (f4 / 10.0F + 1.0F));
        paramCanvas.drawCircle(paramInt1 / 2 - f8 / 2.0F + f7 * (f5 * f6 - f1), (f3 - f2) / 2.0F, f8, a);
        paramInt2 += 1;
      }
      a.setAlpha(255);
    }
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    Animator localAnimator = animator;
    if (localAnimator != null)
    {
      localAnimator.removeAllListeners();
      animator.end();
      animator = null;
    }
  }
  
  protected void onDraw(Canvas paramCanvas, int paramInt)
  {
    p.reset();
    p.lineTo(0.0F, l);
    Path localPath = p;
    int j = h;
    if (j < 0) {
      j = paramInt / 2;
    }
    float f1 = j;
    j = l;
    float f2 = x + j;
    float f3 = paramInt;
    localPath.quadTo(f1, f2, f3, j);
    p.lineTo(f3, 0.0F);
    a.setColor(m);
    paramCanvas.drawPath(p, a);
  }
  
  public int onFinish(RefreshLayout paramRefreshLayout, boolean paramBoolean)
  {
    paramRefreshLayout = animator;
    if (paramRefreshLayout != null)
    {
      paramRefreshLayout.removeAllListeners();
      animator.end();
      animator = null;
    }
    int j = getWidth();
    int k = getHeight();
    paramRefreshLayout = ValueAnimator.ofFloat(new float[] { 0.0F, (float)Math.sqrt(j * j + k * k) });
    paramRefreshLayout.setDuration(400L);
    paramRefreshLayout.addUpdateListener(new a((byte)3));
    paramRefreshLayout.start();
    return 400;
  }
  
  public void onMoving(boolean paramBoolean, float paramFloat, int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramBoolean) || (o))
    {
      o = true;
      l = Math.min(paramInt2, paramInt1);
      x = ((int)(Math.max(0, paramInt1 - paramInt2) * 1.9F));
      d = paramFloat;
    }
  }
  
  public void onReleased(RefreshLayout paramRefreshLayout, int paramInt1, int paramInt2)
  {
    l = paramInt1;
    o = false;
    ValueAnimator localValueAnimator1 = ValueAnimator.ofInt(new int[] { 0, 360 });
    localValueAnimator1.setDuration(720L);
    localValueAnimator1.setRepeatCount(-1);
    localValueAnimator1.setInterpolator(new AccelerateDecelerateInterpolator());
    localValueAnimator1.addUpdateListener(new a((byte)4));
    paramRefreshLayout = new DecelerateInterpolator();
    ValueAnimator localValueAnimator2 = ValueAnimator.ofFloat(new float[] { 1.0F, 0.0F });
    localValueAnimator2.setInterpolator(paramRefreshLayout);
    localValueAnimator2.addUpdateListener(new a((byte)2));
    ValueAnimator localValueAnimator3 = ValueAnimator.ofFloat(new float[] { 0.0F, 1.0F });
    localValueAnimator2.setInterpolator(paramRefreshLayout);
    localValueAnimator3.addUpdateListener(new a((byte)0));
    AnimatorSet localAnimatorSet = new AnimatorSet();
    localAnimatorSet.playSequentially(new Animator[] { localValueAnimator2, localValueAnimator3, localValueAnimator1 });
    localAnimatorSet.start();
    paramInt1 = x;
    localValueAnimator1 = ValueAnimator.ofInt(new int[] { paramInt1, 0, -(int)(paramInt1 * 0.8F), 0, -(int)(paramInt1 * 0.4F), 0 });
    localValueAnimator1.addUpdateListener(new a((byte)1));
    localValueAnimator1.setInterpolator(paramRefreshLayout);
    localValueAnimator1.setDuration(800L);
    localValueAnimator1.start();
    animator = localAnimatorSet;
  }
  
  public void onStateChanged(RefreshLayout paramRefreshLayout, RefreshState paramRefreshState1, RefreshState paramRefreshState2)
  {
    switch (1.Download[paramRefreshState2.ordinal()])
    {
    default: 
      return;
    }
    y = 1.0F;
    value = 0.0F;
    height = 0.0F;
  }
  
  public void setPrimaryColors(int... paramVarArgs)
  {
    if ((paramVarArgs.length > 0) && (!i))
    {
      b(paramVarArgs[0]);
      i = false;
    }
    if ((paramVarArgs.length > 1) && (!e))
    {
      a(paramVarArgs[1]);
      e = false;
    }
  }
  
  protected void update(Canvas paramCanvas, int paramInt1, int paramInt2)
  {
    if ((animator != null) || (isInEditMode()))
    {
      float f2 = percent;
      float f1 = value;
      f2 *= f1;
      float f5 = n;
      a.setColor(b);
      a.setStyle(Paint.Style.FILL);
      float f3 = paramInt1 / 2;
      float f4 = paramInt2 / 2;
      paramCanvas.drawCircle(f3, f4, f2, a);
      a.setStyle(Paint.Style.STROKE);
      f1 = f5 * f1 + f2;
      paramCanvas.drawCircle(f3, f4, f1, a);
      a.setColor(m & 0xFFFFFF | 0x55000000);
      a.setStyle(Paint.Style.FILL);
      mRect.set(f3 - f2, f4 - f2, f3 + f2, f2 + f4);
      paramCanvas.drawArc(mRect, 270.0F, size, true, a);
      a.setStyle(Paint.Style.STROKE);
      mRect.set(f3 - f1, f4 - f1, f3 + f1, f4 + f1);
      paramCanvas.drawArc(mRect, 270.0F, size, false, a);
      a.setStyle(Paint.Style.FILL);
    }
  }
  
  protected class a
    implements ValueAnimator.AnimatorUpdateListener
  {
    byte val$fab;
    
    a(byte paramByte)
    {
      val$fab = paramByte;
    }
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      int i = val$fab;
      if (i == 0)
      {
        value = ((Float)paramValueAnimator.getAnimatedValue()).floatValue();
      }
      else if (1 == i)
      {
        if (o)
        {
          paramValueAnimator.cancel();
          return;
        }
        x = (((Integer)paramValueAnimator.getAnimatedValue()).intValue() / 2);
      }
      else if (2 == i)
      {
        y = ((Float)paramValueAnimator.getAnimatedValue()).floatValue();
      }
      else if (3 == i)
      {
        height = ((Float)paramValueAnimator.getAnimatedValue()).floatValue();
      }
      else if (4 == i)
      {
        size = ((Integer)paramValueAnimator.getAnimatedValue()).intValue();
      }
      invalidate();
    }
  }
}
