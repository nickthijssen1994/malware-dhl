package com.jd.lib.un.basewidget.widget.banner.indicator;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import com.jd.lib.un.basewidget.R.styleable;
import java.util.Iterator;
import java.util.List;

public class ClassicIndicator
  extends BaseIndicator
{
  private int mLastSelected = -1;
  private Paint normalPaint;
  private int normalPointColor = -7829368;
  private int pointRadius = dp2px(5);
  private int pointSpace = dp2px(10);
  private Paint selectedPaint;
  private int selectedPointColor = -1;
  private float selectedPointLeft;
  
  public ClassicIndicator(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ClassicIndicator(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public ClassicIndicator(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initConfig(paramAttributeSet);
    initDrawConfig();
  }
  
  private void configPointLayout()
  {
    clearIndicatorPoint();
    int i = 0;
    while (i < getCount())
    {
      BaseIndicator.IndicatorPoint localIndicatorPoint = new BaseIndicator.IndicatorPoint(this);
      left = (getPaddingLeft() + (pointSpace + pointRadius * 2) * i);
      top = getPaddingTop();
      bottom = (top + pointRadius * 2);
      right = (left + pointRadius * 2);
      index = i;
      rect = new RectF(left, top, right, bottom);
      addIndicatorPoint(localIndicatorPoint);
      i += 1;
    }
  }
  
  private void drawNormalPoint(Canvas paramCanvas)
  {
    Iterator localIterator = indicatorPoints.iterator();
    while (localIterator.hasNext())
    {
      BaseIndicator.IndicatorPoint localIndicatorPoint = (BaseIndicator.IndicatorPoint)localIterator.next();
      paramCanvas.drawCircle(left + pointRadius, top + (bottom - top) / 2, pointRadius, normalPaint);
    }
  }
  
  private void drawSelectedPoint(Canvas paramCanvas)
  {
    paramCanvas.drawCircle(selectedPointLeft + pointRadius, getPaddingTop() + (getMeasuredHeight() - getPaddingTop() - getPaddingBottom()) / 2, pointRadius, selectedPaint);
  }
  
  private void initConfig(AttributeSet paramAttributeSet)
  {
    if (paramAttributeSet == null) {
      return;
    }
    Context localContext = getContext();
    int[] arrayOfInt = R.styleable.ClassicIndicator;
    int i = 0;
    paramAttributeSet = localContext.obtainStyledAttributes(paramAttributeSet, arrayOfInt, 0, 0);
    int j = paramAttributeSet.getIndexCount();
    while (i < j)
    {
      int k = paramAttributeSet.getIndex(i);
      if (k == R.styleable.ClassicIndicator_classic_radius) {
        pointRadius = paramAttributeSet.getDimensionPixelOffset(k, pointRadius);
      } else if (k == R.styleable.ClassicIndicator_classic_color_normal) {
        normalPointColor = paramAttributeSet.getColor(k, normalPointColor);
      } else if (k == R.styleable.ClassicIndicator_classic_color_selected) {
        selectedPointColor = paramAttributeSet.getColor(k, selectedPointColor);
      } else if (k == R.styleable.ClassicIndicator_classic_space) {
        pointSpace = paramAttributeSet.getDimensionPixelOffset(k, pointSpace);
      } else if (k == R.styleable.ClassicIndicator_classic_loop) {
        isSupportLoop = paramAttributeSet.getBoolean(k, isSupportLoop);
      }
      i += 1;
    }
    paramAttributeSet.recycle();
    setPadding(10, 5, 5, 10);
  }
  
  private void initDrawConfig()
  {
    normalPaint = new Paint(1);
    normalPaint.setStrokeJoin(Paint.Join.ROUND);
    normalPaint.setStrokeCap(Paint.Cap.ROUND);
    normalPaint.setStyle(Paint.Style.FILL);
    normalPaint.setColor(normalPointColor);
    selectedPaint = new Paint(1);
    selectedPaint.setStrokeJoin(Paint.Join.ROUND);
    selectedPaint.setStrokeCap(Paint.Cap.ROUND);
    selectedPaint.setStyle(Paint.Style.FILL);
    selectedPaint.setColor(selectedPointColor);
  }
  
  private void setCurrentItem(int paramInt)
  {
    setCurrentItem(paramInt, 0.0F);
  }
  
  private void setCurrentItem(int paramInt, float paramFloat)
  {
    int i = getPaddingLeft() + (pointSpace + pointRadius * 2) * paramInt;
    float f;
    if ((isSupportLoop) && (paramInt == getCount() - 1))
    {
      if (paramInt == getCount() - 1) {
        if (mLastSelected == 0)
        {
          paramInt = getPaddingLeft();
          i = getPaddingLeft();
          int j = getPaddingRight();
          int k = pointRadius;
          f = -(i + j + k * 2 * 2);
          selectedPointLeft = (paramInt + f * (1.0F - paramFloat));
          if (selectedPointLeft < -k * 2) {
            selectedPointLeft = (getMeasuredWidth() + selectedPointLeft + pointRadius * 2);
          }
        }
        else
        {
          f = getPaddingLeft() + getPaddingRight() + pointRadius * 2 * 2;
          selectedPointLeft = (i + f * paramFloat);
          if (selectedPointLeft > getMeasuredWidth()) {
            selectedPointLeft = (selectedPointLeft - getMeasuredWidth() - pointRadius * 2);
          }
        }
      }
    }
    else
    {
      f = pointSpace + pointRadius * 2;
      selectedPointLeft = (i + f * paramFloat);
    }
    invalidate();
  }
  
  protected void initSelected(int paramInt)
  {
    setCurrentItem(paramInt);
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    drawNormalPoint(paramCanvas);
    drawSelectedPoint(paramCanvas);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    int j = View.MeasureSpec.getMode(paramInt1);
    paramInt1 = View.MeasureSpec.getSize(paramInt1);
    int i = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (j != 1073741824) {
      paramInt1 = getPaddingLeft() + getPaddingRight() + getCount() * pointRadius * 2 + (getCount() - 1) * pointSpace;
    }
    if (i != 1073741824) {
      paramInt2 = getPaddingTop() + getPaddingBottom() + pointRadius * 2;
    }
    setMeasuredDimension(paramInt1, paramInt2);
    configPointLayout();
  }
  
  public void onPageScrolled(int paramInt1, float paramFloat, int paramInt2)
  {
    setCurrentItem(paramInt1, paramFloat);
  }
  
  public void onPageSelected(int paramInt)
  {
    super.onPageSelected(paramInt);
    mLastSelected = paramInt;
  }
}
