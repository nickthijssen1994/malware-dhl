package com.jd.lib.un.basewidget.widget.flow;

import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import androidx.core.text.TextUtilsCompat;
import com.jd.lib.un.basewidget.R.styleable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

public class FlowLayout
  extends ViewGroup
{
  private static final int CENTER = 0;
  private static final int LEFT = -1;
  private static final int RIGHT = 1;
  private static final String orientation = "FlowLayout";
  private List<View> lineViews = new ArrayList();
  protected List<List<View>> mAllViews = new ArrayList();
  private int mGravity;
  protected List<Integer> mLineHeight = new ArrayList();
  protected List<Integer> mLineWidth = new ArrayList();
  
  public FlowLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.TagFlowLayout);
    mGravity = paramContext.getInt(R.styleable.TagFlowLayout_tag_gravity, -1);
    if (TextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault()) == 1) {
      if (mGravity == -1) {
        mGravity = 1;
      } else {
        mGravity = -1;
      }
    }
    paramContext.recycle();
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new ViewGroup.MarginLayoutParams(-2, -2);
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new ViewGroup.MarginLayoutParams(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return new ViewGroup.MarginLayoutParams(paramLayoutParams);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    mAllViews.clear();
    mLineHeight.clear();
    mLineWidth.clear();
    lineViews.clear();
    int j = getWidth();
    int k = getChildCount();
    paramInt3 = 0;
    paramInt2 = 0;
    paramInt1 = 0;
    View localView;
    ViewGroup.MarginLayoutParams localMarginLayoutParams;
    int n;
    int m;
    while (paramInt3 < k)
    {
      localView = getChildAt(paramInt3);
      if (localView.getVisibility() != 8)
      {
        localMarginLayoutParams = (ViewGroup.MarginLayoutParams)localView.getLayoutParams();
        n = localView.getMeasuredWidth();
        m = localView.getMeasuredHeight();
        paramInt4 = paramInt2;
        i = paramInt1;
        if (n + paramInt1 + leftMargin + rightMargin > j - getPaddingLeft() - getPaddingRight())
        {
          mLineHeight.add(Integer.valueOf(paramInt2));
          mAllViews.add(lineViews);
          mLineWidth.add(Integer.valueOf(paramInt1));
          paramInt4 = topMargin + m + bottomMargin;
          lineViews = new ArrayList();
          i = 0;
        }
        paramInt1 = i + (n + leftMargin + rightMargin);
        paramInt2 = Math.max(paramInt4, m + topMargin + bottomMargin);
        lineViews.add(localView);
      }
      paramInt3 += 1;
    }
    mLineHeight.add(Integer.valueOf(paramInt2));
    mLineWidth.add(Integer.valueOf(paramInt1));
    mAllViews.add(lineViews);
    paramInt1 = getPaddingLeft();
    paramInt3 = getPaddingTop();
    int i = mAllViews.size();
    paramInt2 = 0;
    while (paramInt2 < i)
    {
      lineViews = ((List)mAllViews.get(paramInt2));
      k = ((Integer)mLineHeight.get(paramInt2)).intValue();
      paramInt4 = ((Integer)mLineWidth.get(paramInt2)).intValue();
      switch (mGravity)
      {
      default: 
        break;
      case 1: 
        paramInt1 = j - (paramInt4 + getPaddingLeft()) - getPaddingRight();
        Collections.reverse(lineViews);
        break;
      case 0: 
        paramInt1 = (j - paramInt4) / 2 + getPaddingLeft();
        break;
      case -1: 
        paramInt1 = getPaddingLeft();
      }
      paramInt4 = 0;
      while (paramInt4 < lineViews.size())
      {
        localView = (View)lineViews.get(paramInt4);
        if (localView.getVisibility() != 8)
        {
          localMarginLayoutParams = (ViewGroup.MarginLayoutParams)localView.getLayoutParams();
          m = leftMargin + paramInt1;
          n = topMargin + paramInt3;
          localView.layout(m, n, localView.getMeasuredWidth() + m, localView.getMeasuredHeight() + n);
          paramInt1 += localView.getMeasuredWidth() + leftMargin + rightMargin;
        }
        paramInt4 += 1;
      }
      paramInt3 += k;
      paramInt2 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i4 = View.MeasureSpec.getSize(paramInt1);
    int i2 = i4;
    int i8 = View.MeasureSpec.getMode(paramInt1);
    int i5 = View.MeasureSpec.getSize(paramInt2);
    int i7 = View.MeasureSpec.getMode(paramInt2);
    int i9 = getChildCount();
    int i3 = 0;
    int m = 0;
    int n = 0;
    int i1 = 0;
    int j;
    for (int k = 0; i3 < i9; k = j)
    {
      View localView = getChildAt(i3);
      int i;
      if (localView.getVisibility() == 8)
      {
        if (i3 == i9 - 1)
        {
          i = Math.max(n, m);
          j = k + i1;
        }
        else
        {
          i = m;
          j = k;
        }
      }
      else
      {
        measureChild(localView, paramInt1, paramInt2);
        ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)localView.getLayoutParams();
        i = localView.getMeasuredWidth() + leftMargin + rightMargin;
        j = localView.getMeasuredHeight() + topMargin + bottomMargin;
        int i6 = n + i;
        if (i6 > i4 - getPaddingLeft() - getPaddingRight())
        {
          m = Math.max(m, n);
          k += i1;
        }
        else
        {
          j = Math.max(i1, j);
          i = i6;
        }
        if (i3 == i9 - 1)
        {
          m = Math.max(i, m);
          k += j;
          n = i;
          i = m;
          i1 = j;
          j = k;
        }
        else
        {
          i1 = j;
          j = k;
          n = i;
          i = m;
        }
      }
      i3 += 1;
      m = i;
    }
    paramInt1 = i5;
    if (i8 != 1073741824)
    {
      paramInt2 = getPaddingLeft();
      i2 = getPaddingRight() + (m + paramInt2);
    }
    if (i7 != 1073741824) {
      paramInt1 = k + getPaddingTop() + getPaddingBottom();
    }
    setMeasuredDimension(i2, paramInt1);
  }
}
