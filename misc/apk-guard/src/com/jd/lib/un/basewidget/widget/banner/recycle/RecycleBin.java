package com.jd.lib.un.basewidget.widget.banner.recycle;

import android.os.Build.VERSION;
import android.util.SparseArray;
import android.view.View;

public class RecycleBin
{
  private int[] activeViewTypes = new int[0];
  private View[] activeViews = new View[0];
  private SparseArray<View> currentScrapViews;
  private SparseArray<View>[] scrapViews;
  private int viewTypeCount;
  
  public RecycleBin() {}
  
  private void pruneScrapViews()
  {
    int m = activeViews.length;
    int n = viewTypeCount;
    SparseArray[] arrayOfSparseArray = scrapViews;
    int i = 0;
    while (i < n)
    {
      SparseArray localSparseArray = arrayOfSparseArray[i];
      int i1 = localSparseArray.size();
      int j = i1 - 1;
      int k = 0;
      while (k < i1 - m)
      {
        localSparseArray.remove(localSparseArray.keyAt(j));
        k += 1;
        j -= 1;
      }
      i += 1;
    }
  }
  
  static View retrieveFromScrap(SparseArray paramSparseArray, int paramInt)
  {
    int j = paramSparseArray.size();
    if (j > 0)
    {
      int i = 0;
      while (i < j)
      {
        int k = paramSparseArray.keyAt(i);
        localView = (View)paramSparseArray.get(k);
        if (k == paramInt)
        {
          paramSparseArray.remove(k);
          return localView;
        }
        i += 1;
      }
      paramInt = j - 1;
      View localView = (View)paramSparseArray.valueAt(paramInt);
      paramSparseArray.remove(paramSparseArray.keyAt(paramInt));
      return localView;
    }
    return null;
  }
  
  void addScrapView(View paramView, int paramInt1, int paramInt2)
  {
    if (viewTypeCount == 1) {
      currentScrapViews.put(paramInt1, paramView);
    } else {
      scrapViews[paramInt2].put(paramInt1, paramView);
    }
    if (Build.VERSION.SDK_INT >= 14) {
      paramView.setAccessibilityDelegate(null);
    }
  }
  
  View getScrapView(int paramInt1, int paramInt2)
  {
    if (viewTypeCount == 1) {
      return retrieveFromScrap(currentScrapViews, paramInt1);
    }
    if (paramInt2 >= 0)
    {
      SparseArray[] arrayOfSparseArray = scrapViews;
      if (paramInt2 < arrayOfSparseArray.length) {
        return retrieveFromScrap(arrayOfSparseArray[paramInt2], paramInt1);
      }
    }
    return null;
  }
  
  void scrapActiveViews()
  {
    View[] arrayOfView = activeViews;
    int[] arrayOfInt = activeViewTypes;
    int i;
    if (viewTypeCount > 1) {
      i = 1;
    } else {
      i = 0;
    }
    Object localObject1 = currentScrapViews;
    int j = arrayOfView.length - 1;
    while (j >= 0)
    {
      View localView = arrayOfView[j];
      Object localObject2 = localObject1;
      if (localView != null)
      {
        int k = arrayOfInt[j];
        arrayOfView[j] = null;
        arrayOfInt[j] = -1;
        if (!shouldRecycleViewType(k))
        {
          localObject2 = localObject1;
        }
        else
        {
          if (i != 0) {
            localObject1 = scrapViews[k];
          }
          ((SparseArray)localObject1).put(j, localView);
          localObject2 = localObject1;
          if (Build.VERSION.SDK_INT >= 14)
          {
            localView.setAccessibilityDelegate(null);
            localObject2 = localObject1;
          }
        }
      }
      j -= 1;
      localObject1 = localObject2;
    }
    pruneScrapViews();
  }
  
  public void setViewTypeCount(int paramInt)
  {
    if (paramInt >= 1)
    {
      SparseArray[] arrayOfSparseArray = new SparseArray[paramInt];
      int i = 0;
      while (i < paramInt)
      {
        arrayOfSparseArray[i] = new SparseArray();
        i += 1;
      }
      viewTypeCount = paramInt;
      currentScrapViews = arrayOfSparseArray[0];
      scrapViews = arrayOfSparseArray;
      return;
    }
    throw new IllegalArgumentException("Can't have a viewTypeCount < 1");
  }
  
  protected boolean shouldRecycleViewType(int paramInt)
  {
    return paramInt >= 0;
  }
}
