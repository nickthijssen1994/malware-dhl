package com.jd.lib.un.basewidget.widget.banner;

import android.content.Context;
import android.content.res.TypedArray;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Looper;
import android.os.Message;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.animation.Interpolator;
import android.widget.Scroller;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import androidx.viewpager.widget.ViewPager.OnPageChangeListener;
import androidx.viewpager.widget.ViewPager.SimpleOnPageChangeListener;
import com.jd.lib.un.basewidget.R.styleable;
import com.jd.lib.un.basewidget.widget.banner.recycle.RecyclingPagerAdapter;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class BannerView
  extends ViewPager
  implements Handler.Callback
{
  public static final int DIRECTION_LEFT = 0;
  public static final int DIRECTION_RIGHT = 1;
  public static final int MSG_AUTO_SCROLL = 0;
  private Handler handler;
  private boolean isAutoScroll = true;
  private boolean isDetach = false;
  private boolean isLoop = true;
  private boolean isPause = false;
  private boolean isSupportTouchInterrupt = true;
  private BannerAdapter mAdapter;
  private int mDirection = 0;
  private BannerScroller mScroller;
  private int mSlideDuration = 800;
  private int mSlideInterval = 5000;
  private SimplePageChangeListener pageChangeListener;
  private DelayResetTask task;
  
  public BannerView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public BannerView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init();
    initConfig(paramAttributeSet);
    initAutoScroll();
    changeScrollView();
  }
  
  private void changeScrollView()
  {
    try
    {
      Field localField = ViewPager.class.getDeclaredField("mScroller");
      localField.setAccessible(true);
      Object localObject2 = ViewPager.class.getDeclaredField("sInterpolator");
      ((Field)localObject2).setAccessible(true);
      Object localObject1 = getContext();
      localObject2 = ((Field)localObject2).get(null);
      localObject2 = (Interpolator)localObject2;
      localObject1 = new BannerScroller((Context)localObject1, (Interpolator)localObject2);
      mScroller = ((BannerScroller)localObject1);
      localObject1 = mScroller;
      int i = mSlideDuration;
      ((BannerScroller)localObject1).setDuration(i);
      localObject1 = mScroller;
      localField.set(this, localObject1);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private void init()
  {
    pageChangeListener = new SimplePageChangeListener(null);
    handler = new Handler(Looper.getMainLooper(), this);
    task = new DelayResetTask(null);
    super.addOnPageChangeListener((ViewPager.OnPageChangeListener)pageChangeListener);
  }
  
  private void initAutoScroll()
  {
    BannerAdapter localBannerAdapter = mAdapter;
    if (localBannerAdapter != null)
    {
      if (localBannerAdapter.getItemCount() <= 1) {
        return;
      }
      if (isAutoScroll)
      {
        startAutoScroll();
        return;
      }
      stopAutoScroll();
    }
  }
  
  private void initConfig(AttributeSet paramAttributeSet)
  {
    if (paramAttributeSet == null) {
      return;
    }
    paramAttributeSet = getContext().obtainStyledAttributes(paramAttributeSet, R.styleable.BannerView, 0, 0);
    int j = paramAttributeSet.getIndexCount();
    int i = 0;
    while (i < j)
    {
      int k = paramAttributeSet.getIndex(i);
      if (k == R.styleable.BannerView_banner_looper) {
        isLoop = paramAttributeSet.getBoolean(k, isLoop);
      } else if (k == R.styleable.BannerView_banner_support_touch_interrupt) {
        isSupportTouchInterrupt = paramAttributeSet.getBoolean(k, isSupportTouchInterrupt);
      } else if (k == R.styleable.BannerView_banner_slide_direction) {
        mDirection = paramAttributeSet.getInt(k, 0);
      } else if (k == R.styleable.BannerView_banner_slide_interval) {
        mSlideInterval = paramAttributeSet.getInt(k, mSlideInterval);
      } else if (k == R.styleable.BannerView_banner_slide_duration) {
        mSlideDuration = paramAttributeSet.getInt(k, mSlideDuration);
      } else if (k == R.styleable.BannerView_banner_auto_scroll) {
        isAutoScroll = paramAttributeSet.getBoolean(k, isAutoScroll);
      }
      i += 1;
    }
    paramAttributeSet.recycle();
  }
  
  private void initGotoFirst()
  {
    BannerAdapter localBannerAdapter = mAdapter;
    if ((localBannerAdapter != null) && (localBannerAdapter.getItemCount() > 1)) {
      superSetCurrentItem(mAdapter.getMid(), false);
    }
  }
  
  private void resetItem()
  {
    if (isLoop)
    {
      BannerAdapter localBannerAdapter = mAdapter;
      if ((localBannerAdapter != null) && (localBannerAdapter.getItemCount() >= 1))
      {
        int i = superGetCurrentItem();
        int j = mAdapter.getItemCount();
        superSetCurrentItem(mAdapter.getMid() + i % j, false);
      }
    }
  }
  
  private void scrollToNext()
  {
    BannerAdapter localBannerAdapter = mAdapter;
    if (localBannerAdapter != null)
    {
      if (localBannerAdapter.getItemCount() <= 1) {
        return;
      }
      int i = superGetCurrentItem();
      if (mDirection == 0) {
        i += 1;
      } else {
        i -= 1;
      }
      int j = i;
      if (!isLoop) {
        if (i > mAdapter.getItemCount() - 1)
        {
          j = 0;
        }
        else
        {
          j = i;
          if (i < 0) {
            j = mAdapter.getItemCount() - 1;
          }
        }
      }
      superSetCurrentItem(j, true);
    }
  }
  
  private void startAutoScroll()
  {
    handler.removeMessages(0);
    handler.sendEmptyMessageDelayed(0, mSlideInterval);
  }
  
  private void stopAutoScroll()
  {
    handler.removeMessages(0);
  }
  
  private int superGetCurrentItem()
  {
    return super.getCurrentItem();
  }
  
  private void superSetCurrentItem(int paramInt)
  {
    super.setCurrentItem(paramInt);
  }
  
  private void superSetCurrentItem(int paramInt, boolean paramBoolean)
  {
    super.setCurrentItem(paramInt, paramBoolean);
  }
  
  public void addOnPageChangeListener(ViewPager.OnPageChangeListener paramOnPageChangeListener)
  {
    SimplePageChangeListener localSimplePageChangeListener = pageChangeListener;
    if (localSimplePageChangeListener != null) {
      pageChangeListeners.add(paramOnPageChangeListener);
    }
  }
  
  public boolean dispatchTouchEvent(MotionEvent paramMotionEvent)
  {
    if (isSupportTouchInterrupt)
    {
      switch (paramMotionEvent.getActionMasked())
      {
      default: 
        break;
      case 2: 
        break;
      case 1: 
      case 3: 
      case 4: 
        if (!isAutoScroll) {
          break;
        }
        startAutoScroll();
        break;
      }
      if (isAutoScroll)
      {
        if (!mScroller.isFinished()) {
          mScroller.forceFinished(true);
        }
        stopAutoScroll();
      }
    }
    return super.dispatchTouchEvent(paramMotionEvent);
  }
  
  public BannerAdapter getAdapter()
  {
    return mAdapter;
  }
  
  public int getCurrentItem()
  {
    int i = super.getCurrentItem();
    BannerAdapter localBannerAdapter = mAdapter;
    if (localBannerAdapter != null) {
      return localBannerAdapter.getRealPosition(i);
    }
    return 0;
  }
  
  public boolean handleMessage(Message paramMessage)
  {
    if (isAutoScroll) {
      startAutoScroll();
    }
    if ((!isPause) && (!isDetach))
    {
      if (!isAutoScroll) {
        return true;
      }
      scrollToNext();
    }
    return true;
  }
  
  public void isSupportAutoScroll(boolean paramBoolean)
  {
    if (isAutoScroll == paramBoolean) {
      return;
    }
    isAutoScroll = paramBoolean;
    if (paramBoolean)
    {
      startAutoScroll();
      return;
    }
    stopAutoScroll();
  }
  
  public void isSupportLoop(boolean paramBoolean)
  {
    isLoop = paramBoolean;
    BannerAdapter localBannerAdapter = mAdapter;
    if (localBannerAdapter != null) {
      localBannerAdapter.isSupportLoop(paramBoolean);
    }
    mAdapter.notifyDataSetChanged();
  }
  
  public void isSupportTouchInterrupt(boolean paramBoolean)
  {
    isSupportTouchInterrupt = paramBoolean;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    isDetach = false;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    isDetach = true;
  }
  
  public void onPause()
  {
    isPause = true;
    resetItem();
  }
  
  public void onResume()
  {
    isPause = false;
  }
  
  public void removeOnPageChangeListener(ViewPager.OnPageChangeListener paramOnPageChangeListener)
  {
    SimplePageChangeListener localSimplePageChangeListener = pageChangeListener;
    if (localSimplePageChangeListener != null) {
      pageChangeListeners.remove(paramOnPageChangeListener);
    }
  }
  
  public void setAdapter(PagerAdapter paramPagerAdapter) {}
  
  public void setAdapter(BannerAdapter paramBannerAdapter)
  {
    mAdapter = paramBannerAdapter;
    mAdapter.isSupportLoop(isLoop);
    super.setAdapter(paramBannerAdapter);
    initGotoFirst();
    initAutoScroll();
  }
  
  public void setCurrentItem(int paramInt)
  {
    BannerAdapter localBannerAdapter = mAdapter;
    if (localBannerAdapter != null)
    {
      if (localBannerAdapter.getItemCount() <= 0) {
        return;
      }
      int i = superGetCurrentItem();
      int j = i % mAdapter.getItemCount();
      if (j > paramInt) {
        paramInt = i - (j - paramInt);
      } else {
        paramInt = i + (paramInt - j);
      }
      super.setCurrentItem(paramInt);
    }
  }
  
  public void setCurrentItem(int paramInt, boolean paramBoolean)
  {
    BannerAdapter localBannerAdapter = mAdapter;
    if (localBannerAdapter != null)
    {
      if (localBannerAdapter.getItemCount() <= 0) {
        return;
      }
      int i = superGetCurrentItem();
      int j = i % mAdapter.getItemCount();
      if (j > paramInt) {
        paramInt = i - (j - paramInt);
      } else {
        paramInt = i + (paramInt - j);
      }
      super.setCurrentItem(paramInt, paramBoolean);
    }
  }
  
  public void setDirection(int paramInt)
  {
    mDirection = paramInt;
  }
  
  public void setSlideDuration(int paramInt)
  {
    mSlideDuration = paramInt;
    changeScrollView();
  }
  
  public void setSlideInterval(int paramInt)
  {
    mSlideInterval = paramInt;
  }
  
  public void startLoop()
  {
    if (isAutoScroll) {
      startAutoScroll();
    }
  }
  
  public void stopLoop()
  {
    stopAutoScroll();
  }
  
  private class BannerScroller
    extends Scroller
  {
    private int mDuration;
    
    public BannerScroller(Context paramContext, Interpolator paramInterpolator)
    {
      super(paramInterpolator);
    }
    
    public BannerScroller(Context paramContext, Interpolator paramInterpolator, boolean paramBoolean)
    {
      super(paramInterpolator, paramBoolean);
    }
    
    public void setDuration(int paramInt)
    {
      mDuration = paramInt;
    }
    
    public void startScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      super.startScroll(paramInt1, paramInt2, paramInt3, paramInt4, mDuration);
    }
    
    public void startScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    {
      super.startScroll(paramInt1, paramInt2, paramInt3, paramInt4, mDuration);
    }
  }
  
  private class DelayResetTask
    implements Runnable
  {
    private DelayResetTask() {}
    
    public void run()
    {
      BannerView.this.resetItem();
    }
  }
  
  private class SimplePageChangeListener
    extends ViewPager.SimpleOnPageChangeListener
  {
    public List<ViewPager.OnPageChangeListener> pageChangeListeners = new ArrayList();
    
    private SimplePageChangeListener() {}
    
    private void notifyOnPageScrollStateChanged(int paramInt)
    {
      Iterator localIterator = pageChangeListeners.iterator();
      while (localIterator.hasNext()) {
        ((ViewPager.OnPageChangeListener)localIterator.next()).onPageScrollStateChanged(paramInt);
      }
    }
    
    private void notifyOnPageScrolled(int paramInt1, float paramFloat, int paramInt2)
    {
      int i = paramInt1;
      if (mAdapter != null) {
        i = mAdapter.getRealPosition(paramInt1);
      }
      Iterator localIterator = pageChangeListeners.iterator();
      while (localIterator.hasNext()) {
        ((ViewPager.OnPageChangeListener)localIterator.next()).onPageScrolled(i, paramFloat, paramInt2);
      }
    }
    
    private void notifyOnPageSelected(int paramInt)
    {
      int i = paramInt;
      if (mAdapter != null) {
        i = mAdapter.getRealPosition(paramInt);
      }
      Iterator localIterator = pageChangeListeners.iterator();
      while (localIterator.hasNext()) {
        ((ViewPager.OnPageChangeListener)localIterator.next()).onPageSelected(i);
      }
    }
    
    public void onPageScrollStateChanged(int paramInt)
    {
      super.onPageScrollStateChanged(paramInt);
      notifyOnPageScrollStateChanged(paramInt);
      int j = BannerView.this.superGetCurrentItem();
      int i;
      if (mAdapter == null) {
        i = 0;
      } else {
        i = mAdapter.getCount();
      }
      handler.removeCallbacks(task);
      if (paramInt == 0)
      {
        if ((j != 0) && (j != i - 1))
        {
          handler.postDelayed(task, mSlideInterval / 2);
          return;
        }
        BannerView.this.resetItem();
      }
    }
    
    public void onPageScrolled(int paramInt1, float paramFloat, int paramInt2)
    {
      super.onPageScrolled(paramInt1, paramFloat, paramInt2);
      notifyOnPageScrolled(paramInt1, paramFloat, paramInt2);
    }
    
    public void onPageSelected(int paramInt)
    {
      super.onPageSelected(paramInt);
      notifyOnPageSelected(paramInt);
    }
  }
}
