package com.jd.lib.un.basewidget.widget.multi.configurations;

import android.content.Context;
import android.content.res.TypedArray;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import com.jd.lib.un.basewidget.R.styleable;
import com.jd.lib.un.basewidget.widget.multi.users.Common;

public class MultiTagLayout
  extends LinearLayout
  implements View.OnClickListener
{
  private int mNormalTextColor = -16777216;
  private int mSelectedIndex = -1;
  private int mSelectedTextColor = -65536;
  private int mTagMarginBottom = Common.dpToPx(2.0F);
  private int mTagMarginLeft = Common.dpToPx(5.0F);
  private int mTagMarginRight = Common.dpToPx(5.0F);
  private int mTagMarginTop = Common.dpToPx(2.0F);
  private int mTextSize = Common.init(13.0F);
  private a tagClickListener;
  
  public MultiTagLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public MultiTagLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    if (paramAttributeSet != null)
    {
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.MultiTagLayout);
      mTextSize = paramContext.getDimensionPixelSize(R.styleable.MultiTagLayout_tag_text_size, mTextSize);
      mSelectedTextColor = paramContext.getColor(R.styleable.MultiTagLayout_tag_selector_color, mSelectedTextColor);
      mNormalTextColor = paramContext.getColor(R.styleable.MultiTagLayout_tag_normal_color, mNormalTextColor);
      mTagMarginLeft = paramContext.getDimensionPixelSize(R.styleable.MultiTagLayout_tag_left_margin, mTagMarginLeft);
      mTagMarginTop = paramContext.getDimensionPixelSize(R.styleable.MultiTagLayout_tag_top_margin, mTagMarginTop);
      mTagMarginRight = paramContext.getDimensionPixelSize(R.styleable.MultiTagLayout_tag_right_margin, mTagMarginRight);
      mTagMarginBottom = paramContext.getDimensionPixelSize(R.styleable.MultiTagLayout_tag_bottom_margin, mTagMarginBottom);
      paramContext.recycle();
    }
    setOrientation(0);
  }
  
  private int findViewIndex(View paramView)
  {
    if (paramView == null) {
      return -1;
    }
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      if (getChildAt(i) == paramView) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  private void onSelected(int paramInt, View paramView, boolean paramBoolean)
  {
    int i = mSelectedIndex;
    if (i == paramInt) {
      return;
    }
    if ((i >= 0) && (i <= getTagSize() - 1)) {
      ((TextView)getChildAt(mSelectedIndex)).setTextColor(mNormalTextColor);
    }
    if ((paramInt >= 0) && (paramInt <= getTagSize() - 1)) {
      ((TextView)getChildAt(paramInt)).setTextColor(mSelectedTextColor);
    }
    mSelectedIndex = paramInt;
    if (paramBoolean)
    {
      a localA = tagClickListener;
      if (localA != null) {
        localA.deleteImage(paramInt, paramView);
      }
    }
  }
  
  public void addTag(String paramString)
  {
    TextView localTextView = new TextView(getContext());
    localTextView.setText(paramString);
    localTextView.setTextSize(0, mTextSize);
    localTextView.setGravity(17);
    localTextView.setOnClickListener(this);
    localTextView.setTextColor(mNormalTextColor);
    paramString = new LinearLayout.LayoutParams(-2, -2);
    leftMargin = mTagMarginLeft;
    topMargin = mTagMarginTop;
    rightMargin = mTagMarginRight;
    bottomMargin = mTagMarginBottom;
    super.addView(localTextView, -1, paramString);
  }
  
  public void addView(View paramView) {}
  
  public void addView(View paramView, int paramInt) {}
  
  public void addView(View paramView, int paramInt1, int paramInt2) {}
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams) {}
  
  public void addView(View paramView, ViewGroup.LayoutParams paramLayoutParams) {}
  
  public void changeTagState(int paramInt)
  {
    onSelected(paramInt, getTagView(paramInt), false);
  }
  
  public int findTagViewIndex(View paramView)
  {
    return findViewIndex(paramView);
  }
  
  public int getTagSize()
  {
    return getChildCount();
  }
  
  public View getTagView(int paramInt)
  {
    int i = getTagSize();
    if ((paramInt >= 0) && (paramInt <= i - 1)) {
      return getChildAt(paramInt);
    }
    return null;
  }
  
  public void onClick(View paramView)
  {
    int i = findViewIndex(paramView);
    onSelected(i, getChildAt(i), true);
  }
  
  public void release()
  {
    mSelectedIndex = -1;
  }
  
  public void removeTag(int paramInt)
  {
    removeTag(paramInt, paramInt);
  }
  
  public void removeTag(int paramInt1, int paramInt2)
  {
    while (paramInt2 >= paramInt1)
    {
      removeViewAt(paramInt2);
      paramInt2 -= 1;
    }
  }
  
  public void setNormalTextColor(int paramInt)
  {
    mNormalTextColor = paramInt;
  }
  
  public void setSelectedTextColor(int paramInt)
  {
    mSelectedTextColor = paramInt;
  }
  
  public void setTagClickListener(a paramA)
  {
    tagClickListener = paramA;
  }
  
  public void setTagMargin(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    mTagMarginLeft = paramInt1;
    mTagMarginTop = paramInt2;
    mTagMarginRight = paramInt3;
    mTagMarginBottom = paramInt4;
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      LinearLayout.LayoutParams localLayoutParams = (LinearLayout.LayoutParams)getChildAt(i).getLayoutParams();
      leftMargin = paramInt1;
      topMargin = paramInt2;
      rightMargin = paramInt3;
      bottomMargin = paramInt4;
      i += 1;
    }
    requestLayout();
  }
  
  public void setTextSize(int paramInt)
  {
    mTextSize = paramInt;
  }
  
  public void updateTag(int paramInt, String paramString)
  {
    Object localObject = getTagView(paramInt);
    if ((localObject instanceof TextView)) {
      localObject = (TextView)localObject;
    } else {
      localObject = null;
    }
    if (localObject != null)
    {
      if (TextUtils.isEmpty(paramString)) {
        return;
      }
      ((TextView)localObject).setText(paramString);
    }
  }
  
  public abstract interface a
  {
    public abstract void deleteImage(int paramInt, View paramView);
  }
}
