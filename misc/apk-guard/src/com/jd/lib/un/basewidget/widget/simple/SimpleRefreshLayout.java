package com.jd.lib.un.basewidget.widget.simple;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Build.VERSION;
import android.os.Handler;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewParent;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.widget.Scroller;
import android.widget.TextView;
import androidx.core.view.NestedScrollingChildHelper;
import androidx.core.view.NestedScrollingParent;
import androidx.core.view.NestedScrollingParentHelper;
import com.jd.lib.un.basewidget.R.styleable;
import com.jd.lib.un.basewidget.widget.simple.a.a;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshDimensionStatus;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshSpinner;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshState;
import com.jd.lib.un.basewidget.widget.simple.footer.BallPulseFooter;
import com.jd.lib.un.basewidget.widget.simple.header.BezierRadarHeader;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshContent;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshFooter;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshHeader;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshInternal;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshKernel;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshLayout;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshScrollBound;
import com.jd.lib.un.basewidget.widget.simple.listener.OnLoadMoreListener;
import com.jd.lib.un.basewidget.widget.simple.listener.OnMultiPurposeListener;
import com.jd.lib.un.basewidget.widget.simple.listener.OnRefreshListener;
import com.jd.lib.un.basewidget.widget.simple.listener.OnRefreshLoadMoreListener;
import com.jd.lib.un.basewidget.widget.simple.listener.OnStateChangedListener;
import com.jd.lib.un.basewidget.widget.simple.parser.AsyncServer.2;
import com.jd.lib.un.basewidget.widget.simple.utils.DpiUtils;
import com.jd.lib.un.basewidget.widget.simple.utils.RefreshUtils;
import com.jd.lib.un.basewidget.widget.simple.wrapper.ClassWriter;
import com.jd.lib.un.basewidget.widget.simple.wrapper.RefreshFooterWrapper;
import com.jd.lib.un.basewidget.widget.simple.wrapper.RefreshHeaderWrapper;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.List;

public class SimpleRefreshLayout
  extends ViewGroup
  implements NestedScrollingParent, RefreshLayout
{
  protected Runnable animationRunnable;
  private int mCurrentVelocity;
  private boolean mDisableContentWhenLoading = false;
  private boolean mDisableContentWhenRefresh = false;
  private char mDragDirection = 'n';
  private float mDragRate = 0.5F;
  private boolean mEnableAutoLoadMore = true;
  private boolean mEnableClipFooterWhenFIXED_BEHIND = true;
  private boolean mEnableClipHeaderWhenFIXED_BEHIND = true;
  private boolean mEnableFooterFollowWhenLoadFinished = false;
  private boolean mEnableFooterTranslationContent = true;
  private boolean mEnableHeaderTranslationContent = true;
  private boolean mEnableLoadMore = false;
  private boolean mEnableLoadMoreWhenContentNotFull = true;
  private boolean mEnableOverScrollBounce = true;
  private boolean mEnableOverScrollDrag = false;
  private boolean mEnablePureScrollMode = false;
  private boolean mEnableRefresh = true;
  private boolean mEnableScrollContentWhenLoaded = true;
  private boolean mEnableScrollContentWhenRefreshed = true;
  protected MotionEvent mFalsifyEvent = null;
  private int mFixedFooterViewId = -1;
  private int mFixedHeaderViewId = -1;
  private int mFooterBackgroundColor = 0;
  private int mFooterHeight;
  private RefreshDimensionStatus mFooterHeightStatus = RefreshDimensionStatus.DefaultUnNotify;
  private int mFooterInsetStart;
  private boolean mFooterLocked = false;
  private float mFooterMaxDragRate = 2.5F;
  private boolean mFooterNeedTouchEventWhenLoading;
  private boolean mFooterNoMoreData = false;
  private int mFooterTranslationViewId = -1;
  private float mFooterTriggerRate = 1.0F;
  private Handler mHandler;
  private int mHeaderBackgroundColor = 0;
  private int mHeaderHeight;
  private RefreshDimensionStatus mHeaderHeightStatus = RefreshDimensionStatus.DefaultUnNotify;
  private int mHeaderInsetStart;
  private float mHeaderMaxDragRate = 2.5F;
  private boolean mHeaderNeedTouchEventWhenRefreshing;
  private int mHeaderTranslationViewId = -1;
  private float mHeaderTriggerRate = 1.0F;
  private boolean mIsBeingDragged;
  private RefreshKernel mKernel = new c();
  private long mLastOpenTime = 0L;
  private int mLastSpinner;
  private float mLastTouchX;
  private float mLastTouchY;
  private List<a> mListDelayedRunnable;
  private OnLoadMoreListener mLoadMoreListener;
  private boolean mManualFooterTranslationContent = false;
  private boolean mManualHeaderTranslationContent = false;
  private boolean mManualLoadMore = false;
  private boolean mManualNestedScrolling = false;
  private int mMaximumVelocity;
  private int mMinimumVelocity;
  private NestedScrollingChildHelper mNestedChild;
  private boolean mNestedInProgress;
  private NestedScrollingParentHelper mNestedParent;
  private OnMultiPurposeListener mOnMultiPurposeListener;
  private Paint mPaint;
  private int[] mParentOffsetInWindow = new int[2];
  private int[] mPrimaryColors;
  private int mReboundDuration = 300;
  private Interpolator mReboundInterpolator;
  private RefreshContent mRefreshContent;
  private RefreshInternal mRefreshFooter;
  private RefreshInternal mRefreshHeader;
  private OnRefreshListener mRefreshListener;
  private int mScreenHeight;
  private RefreshScrollBound mScrollBoundaryDecider;
  private Scroller mScroller;
  private int mSpinner;
  private RefreshState mState = RefreshState.None;
  private boolean mSuperDispatchTouchEvent;
  private int mTotalUnconsumed;
  private int mTouchSlop;
  private int mTouchSpinner;
  private float mTouchX;
  private float mTouchY;
  private VelocityTracker mVelocityTracker;
  protected boolean mVerticalPermit = false;
  private RefreshState mViceState = RefreshState.None;
  protected ValueAnimator reboundAnimator;
  
  public SimpleRefreshLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SimpleRefreshLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public SimpleRefreshLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    super.setClipToPadding(false);
    ViewConfiguration localViewConfiguration = ViewConfiguration.get(paramContext);
    mHeaderHeight = DpiUtils.dp2px(60.0F);
    mFooterHeight = DpiUtils.dp2px(60.0F);
    mTouchSlop = localViewConfiguration.getScaledTouchSlop();
    mMinimumVelocity = localViewConfiguration.getScaledMinimumFlingVelocity();
    mMaximumVelocity = localViewConfiguration.getScaledMaximumFlingVelocity();
    mReboundInterpolator = new AccelerateDecelerateInterpolator();
    mScreenHeight = getSystemgetDisplayMetricsheightPixels;
    mNestedChild = new NestedScrollingChildHelper(this);
    mNestedParent = new NestedScrollingParentHelper(this);
    mScroller = new Scroller(paramContext);
    mVelocityTracker = VelocityTracker.obtain();
    initConfig(paramContext, paramAttributeSet);
  }
  
  private void initConfig(Context paramContext, AttributeSet paramAttributeSet)
  {
    paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.SimpleRefreshLayout);
    mNestedChild.setNestedScrollingEnabled(paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableNestedScrolling, mNestedChild.isNestedScrollingEnabled()));
    mDragRate = paramAttributeSet.getFloat(R.styleable.SimpleRefreshLayout_SimpleDragRate, mDragRate);
    mHeaderMaxDragRate = paramAttributeSet.getFloat(R.styleable.SimpleRefreshLayout_SimpleHeaderMaxDragRate, mHeaderMaxDragRate);
    mFooterMaxDragRate = paramAttributeSet.getFloat(R.styleable.SimpleRefreshLayout_SimpleFooterMaxDragRate, mFooterMaxDragRate);
    mHeaderTriggerRate = paramAttributeSet.getFloat(R.styleable.SimpleRefreshLayout_SimpleHeaderTriggerRate, mHeaderTriggerRate);
    mFooterTriggerRate = paramAttributeSet.getFloat(R.styleable.SimpleRefreshLayout_SimpleFooterTriggerRate, mFooterTriggerRate);
    mEnableRefresh = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableRefresh, mEnableRefresh);
    mReboundDuration = paramAttributeSet.getInt(R.styleable.SimpleRefreshLayout_SimpleReboundDuration, mReboundDuration);
    mEnableLoadMore = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableLoadMore, mEnableLoadMore);
    mHeaderHeight = paramAttributeSet.getDimensionPixelOffset(R.styleable.SimpleRefreshLayout_SimpleHeaderHeight, mHeaderHeight);
    mFooterHeight = paramAttributeSet.getDimensionPixelOffset(R.styleable.SimpleRefreshLayout_SimpleFooterHeight, mFooterHeight);
    mHeaderInsetStart = paramAttributeSet.getDimensionPixelOffset(R.styleable.SimpleRefreshLayout_SimpleHeaderInsetStart, mHeaderInsetStart);
    mFooterInsetStart = paramAttributeSet.getDimensionPixelOffset(R.styleable.SimpleRefreshLayout_SimpleFooterInsetStart, mFooterInsetStart);
    mDisableContentWhenRefresh = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleDisableContentWhenRefresh, mDisableContentWhenRefresh);
    mDisableContentWhenLoading = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleDisableContentWhenLoading, mDisableContentWhenLoading);
    mEnableHeaderTranslationContent = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableHeaderTranslationContent, mEnableHeaderTranslationContent);
    mEnableFooterTranslationContent = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableFooterTranslationContent, mEnableFooterTranslationContent);
    mEnableAutoLoadMore = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableAutoLoadMore, mEnableAutoLoadMore);
    mEnableOverScrollBounce = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableOverScrollBounce, mEnableOverScrollBounce);
    mEnablePureScrollMode = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnablePureScrollMode, mEnablePureScrollMode);
    mEnableScrollContentWhenLoaded = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableScrollContentWhenLoaded, mEnableScrollContentWhenLoaded);
    mEnableScrollContentWhenRefreshed = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableScrollContentWhenRefreshed, mEnableScrollContentWhenRefreshed);
    mEnableLoadMoreWhenContentNotFull = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableLoadMoreWhenContentNotFull, mEnableLoadMoreWhenContentNotFull);
    mEnableFooterFollowWhenLoadFinished = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableFooterFollowWhenLoadFinished, mEnableFooterFollowWhenLoadFinished);
    mEnableClipHeaderWhenFIXED_BEHIND = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableClipHeaderWhenFixedBehind, mEnableClipHeaderWhenFIXED_BEHIND);
    mEnableClipFooterWhenFIXED_BEHIND = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableClipFooterWhenFixedBehind, mEnableClipFooterWhenFIXED_BEHIND);
    mEnableOverScrollDrag = paramAttributeSet.getBoolean(R.styleable.SimpleRefreshLayout_SimpleEnableOverScrollDrag, mEnableOverScrollDrag);
    mFixedHeaderViewId = paramAttributeSet.getResourceId(R.styleable.SimpleRefreshLayout_SimpleFixedHeaderViewId, mFixedHeaderViewId);
    mFixedFooterViewId = paramAttributeSet.getResourceId(R.styleable.SimpleRefreshLayout_SimpleFixedFooterViewId, mFixedFooterViewId);
    mHeaderTranslationViewId = paramAttributeSet.getResourceId(R.styleable.SimpleRefreshLayout_SimpleHeaderTranslationViewId, mHeaderTranslationViewId);
    mFooterTranslationViewId = paramAttributeSet.getResourceId(R.styleable.SimpleRefreshLayout_SimpleFooterTranslationViewId, mFooterTranslationViewId);
    if ((mEnablePureScrollMode) && (!paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleEnableOverScrollDrag))) {
      mEnableOverScrollDrag = true;
    }
    boolean bool;
    if ((!mManualLoadMore) && (!paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleEnableLoadMore))) {
      bool = false;
    } else {
      bool = true;
    }
    mManualLoadMore = bool;
    if ((!mManualHeaderTranslationContent) && (!paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleEnableHeaderTranslationContent))) {
      bool = false;
    } else {
      bool = true;
    }
    mManualHeaderTranslationContent = bool;
    if ((!mManualFooterTranslationContent) && (!paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleEnableFooterTranslationContent))) {
      bool = false;
    } else {
      bool = true;
    }
    mManualFooterTranslationContent = bool;
    if ((!mManualNestedScrolling) && (!paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleEnableNestedScrolling))) {
      bool = false;
    } else {
      bool = true;
    }
    mManualNestedScrolling = bool;
    if (paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleHeaderHeight)) {
      paramContext = RefreshDimensionStatus.XmlLayoutUnNotify;
    } else {
      paramContext = mHeaderHeightStatus;
    }
    mHeaderHeightStatus = paramContext;
    if (paramAttributeSet.hasValue(R.styleable.SimpleRefreshLayout_SimpleFooterHeight)) {
      paramContext = RefreshDimensionStatus.XmlLayoutUnNotify;
    } else {
      paramContext = mFooterHeightStatus;
    }
    mFooterHeightStatus = paramContext;
    int i = paramAttributeSet.getColor(R.styleable.SimpleRefreshLayout_SimpleAccentColor, 0);
    int j = paramAttributeSet.getColor(R.styleable.SimpleRefreshLayout_SimplePrimaryColor, 0);
    if (j != 0)
    {
      if (i != 0) {
        mPrimaryColors = new int[] { j, i };
      } else {
        mPrimaryColors = new int[] { j };
      }
    }
    else if (i != 0) {
      mPrimaryColors = new int[] { 0, i };
    }
    paramAttributeSet.recycle();
  }
  
  protected ValueAnimator animSpinner(int paramInt1, int paramInt2, Interpolator paramInterpolator, int paramInt3)
  {
    if (mSpinner != paramInt1)
    {
      ValueAnimator localValueAnimator = reboundAnimator;
      if (localValueAnimator != null) {
        localValueAnimator.cancel();
      }
      animationRunnable = null;
      reboundAnimator = ValueAnimator.ofInt(new int[] { mSpinner, paramInt1 });
      reboundAnimator.setDuration(paramInt3);
      reboundAnimator.setInterpolator(paramInterpolator);
      reboundAnimator.addListener(new AnimatorListenerAdapter()
      {
        public void onAnimationCancel(Animator paramAnonymousAnimator)
        {
          super.onAnimationEnd(paramAnonymousAnimator);
        }
        
        public void onAnimationEnd(Animator paramAnonymousAnimator)
        {
          paramAnonymousAnimator = SimpleRefreshLayout.this;
          reboundAnimator = null;
          if (mSpinner == 0)
          {
            if ((mState != RefreshState.None) && (!mState.isOpening)) {
              notifyStateChanged(RefreshState.None);
            }
          }
          else if (mState != mViceState)
          {
            paramAnonymousAnimator = SimpleRefreshLayout.this;
            paramAnonymousAnimator.setViceState(mState);
          }
        }
      });
      reboundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
      {
        public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
        {
          mKernel.moveSpinner(((Integer)paramAnonymousValueAnimator.getAnimatedValue()).intValue(), false);
        }
      });
      reboundAnimator.setStartDelay(paramInt2);
      reboundAnimator.start();
      return reboundAnimator;
    }
    return null;
  }
  
  protected void animSpinnerBounce(float paramFloat)
  {
    if (reboundAnimator == null)
    {
      if ((paramFloat > 0.0F) && (mState == RefreshState.Refreshing))
      {
        animationRunnable = new a(paramFloat, mHeaderHeight);
        return;
      }
      if ((paramFloat < 0.0F) && ((mState == RefreshState.Loading) || ((mEnableFooterFollowWhenLoadFinished) && (mFooterNoMoreData) && (isEnableRefreshOrLoadMore(mEnableLoadMore))) || ((mEnableAutoLoadMore) && (!mFooterNoMoreData) && (isEnableRefreshOrLoadMore(mEnableLoadMore)) && (mState != RefreshState.Refreshing))))
      {
        animationRunnable = new a(paramFloat, -mFooterHeight);
        return;
      }
      if ((mSpinner == 0) && (mEnableOverScrollBounce)) {
        animationRunnable = new a(paramFloat, 0);
      }
    }
  }
  
  public boolean autoLoadMore()
  {
    return autoLoadMore(0);
  }
  
  public boolean autoLoadMore(int paramInt)
  {
    int k = mReboundDuration;
    int j = mFooterHeight;
    float f1 = j;
    float f2 = mFooterMaxDragRate / 2.0F;
    int i = j;
    if (j == 0) {
      i = 1;
    }
    return autoLoadMore(paramInt, k, f1 * (f2 + 0.5F) * 1.0F / i);
  }
  
  public boolean autoLoadMore(int paramInt1, final int paramInt2, final float paramFloat)
  {
    if ((mState == RefreshState.None) && (isEnableRefreshOrLoadMore(mEnableLoadMore)) && (!mFooterNoMoreData))
    {
      Object localObject = reboundAnimator;
      if (localObject != null) {
        ((ValueAnimator)localObject).cancel();
      }
      localObject = new Runnable()
      {
        public void run()
        {
          SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
          reboundAnimator = ValueAnimator.ofInt(new int[] { mSpinner, -(int)(mFooterHeight * paramFloat) });
          reboundAnimator.setDuration(paramInt2);
          reboundAnimator.setInterpolator(new DecelerateInterpolator());
          reboundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
          {
            public void onAnimationUpdate(ValueAnimator paramAnonymous2ValueAnimator)
            {
              mKernel.moveSpinner(((Integer)paramAnonymous2ValueAnimator.getAnimatedValue()).intValue(), true);
            }
          });
          reboundAnimator.addListener(new AnimatorListenerAdapter()
          {
            public void onAnimationEnd(Animator paramAnonymous2Animator)
            {
              reboundAnimator = null;
              if (mState != RefreshState.ReleaseToLoad) {
                mKernel.setState(RefreshState.ReleaseToLoad);
              }
              if (mEnableAutoLoadMore)
              {
                SimpleRefreshLayout.access$3402(SimpleRefreshLayout.this, false);
                overSpinner();
                SimpleRefreshLayout.access$3402(SimpleRefreshLayout.this, true);
                return;
              }
              overSpinner();
            }
            
            public void onAnimationStart(Animator paramAnonymous2Animator)
            {
              paramAnonymous2Animator = SimpleRefreshLayout.this;
              SimpleRefreshLayout.access$2302(SimpleRefreshLayout.this, paramAnonymous2Animator.getMeasuredWidth() / 2);
              mKernel.setState(RefreshState.PullUpToLoad);
            }
          });
          reboundAnimator.start();
        }
      };
      if (paramInt1 > 0)
      {
        reboundAnimator = new ValueAnimator();
        postDelayed((Runnable)localObject, paramInt1);
      }
      else
      {
        ((Runnable)localObject).run();
      }
      return true;
    }
    return false;
  }
  
  public boolean autoRefresh()
  {
    int i;
    if (mHandler == null) {
      i = 400;
    } else {
      i = 0;
    }
    return autoRefresh(i);
  }
  
  public boolean autoRefresh(int paramInt)
  {
    int k = mReboundDuration;
    float f1 = mHeaderMaxDragRate / 2.0F;
    int j = mHeaderHeight;
    float f2 = j;
    int i = j;
    if (j == 0) {
      i = 1;
    }
    return autoRefresh(paramInt, k, (f1 + 0.5F) * f2 * 1.0F / i);
  }
  
  public boolean autoRefresh(int paramInt1, final int paramInt2, final float paramFloat)
  {
    if ((mState == RefreshState.None) && (isEnableRefreshOrLoadMore(mEnableRefresh)))
    {
      Object localObject = reboundAnimator;
      if (localObject != null) {
        ((ValueAnimator)localObject).cancel();
      }
      localObject = new Runnable()
      {
        public void run()
        {
          SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
          reboundAnimator = ValueAnimator.ofInt(new int[] { mSpinner, (int)(mHeaderHeight * paramFloat) });
          reboundAnimator.setDuration(paramInt2);
          reboundAnimator.setInterpolator(new DecelerateInterpolator());
          reboundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
          {
            public void onAnimationUpdate(ValueAnimator paramAnonymous2ValueAnimator)
            {
              mKernel.moveSpinner(((Integer)paramAnonymous2ValueAnimator.getAnimatedValue()).intValue(), true);
            }
          });
          reboundAnimator.addListener(new AnimatorListenerAdapter()
          {
            public void onAnimationEnd(Animator paramAnonymous2Animator)
            {
              reboundAnimator = null;
              if (mState != RefreshState.ReleaseToRefresh) {
                mKernel.setState(RefreshState.ReleaseToRefresh);
              }
              overSpinner();
            }
            
            public void onAnimationStart(Animator paramAnonymous2Animator)
            {
              paramAnonymous2Animator = SimpleRefreshLayout.this;
              SimpleRefreshLayout.access$2302(SimpleRefreshLayout.this, paramAnonymous2Animator.getMeasuredWidth() / 2);
              mKernel.setState(RefreshState.PullDownToRefresh);
            }
          });
          reboundAnimator.start();
        }
      };
      if (paramInt1 > 0)
      {
        reboundAnimator = new ValueAnimator();
        postDelayed((Runnable)localObject, paramInt1);
      }
      else
      {
        ((Runnable)localObject).run();
      }
      return true;
    }
    return false;
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof LayoutParams;
  }
  
  public RefreshLayout closeHeaderOrFooter()
  {
    if (mState == RefreshState.Refreshing)
    {
      finishRefresh();
      return this;
    }
    if (mState == RefreshState.Loading)
    {
      finishLoadMore();
      return this;
    }
    if (mSpinner != 0) {
      animSpinner(0, 0, mReboundInterpolator, mReboundDuration);
    }
    return this;
  }
  
  public void computeScroll()
  {
    if (mScroller.computeScrollOffset())
    {
      int i = mScroller.getFinalY();
      if (((i < 0) && ((mEnableOverScrollDrag) || (isEnableRefreshOrLoadMore(mEnableRefresh))) && (mRefreshContent.canRefresh())) || ((i > 0) && ((mEnableOverScrollDrag) || (isEnableRefreshOrLoadMore(mEnableLoadMore))) && (mRefreshContent.canLoadMore())))
      {
        if (mVerticalPermit)
        {
          float f;
          if (Build.VERSION.SDK_INT >= 14)
          {
            if (i > 0) {
              f = -mScroller.getCurrVelocity();
            } else {
              f = mScroller.getCurrVelocity();
            }
          }
          else {
            f = (mScroller.getCurrY() - i) * 1.0F / Math.max(mScroller.getDuration() - mScroller.timePassed(), 1);
          }
          animSpinnerBounce(f);
        }
        mScroller.forceFinished(true);
        return;
      }
      mVerticalPermit = true;
      invalidate();
    }
  }
  
  public boolean dispatchTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    int i;
    if (i1 == 6) {
      i = 1;
    } else {
      i = 0;
    }
    int j;
    if (i != 0) {
      j = paramMotionEvent.getActionIndex();
    } else {
      j = -1;
    }
    int n = paramMotionEvent.getPointerCount();
    int k = n;
    int m = 0;
    float f2 = 0.0F;
    float f1 = 0.0F;
    while (m < n)
    {
      if (j != m)
      {
        f2 += paramMotionEvent.getX(m);
        f1 += paramMotionEvent.getY(m);
      }
      m += 1;
    }
    if (i != 0) {
      k = n - 1;
    }
    float f3 = k;
    f2 /= f3;
    f3 = f1 / f3;
    if (((i1 == 6) || (i1 == 5)) && (mIsBeingDragged)) {
      mTouchY += f3 - mLastTouchY;
    }
    mLastTouchX = f2;
    mLastTouchY = f3;
    if (mNestedInProgress) {
      return super.dispatchTouchEvent(paramMotionEvent);
    }
    if ((isEnabled()) && ((isEnableRefreshOrLoadMore(mEnableRefresh)) || (isEnableRefreshOrLoadMore(mEnableLoadMore)) || (mEnableOverScrollDrag)) && ((!mHeaderNeedTouchEventWhenRefreshing) || ((!mState.isOpening) && (!mState.isFinishing)) || (!mState.isHeader)) && ((!mFooterNeedTouchEventWhenLoading) || ((!mState.isOpening) && (!mState.isFinishing)) || (!mState.isFooter)))
    {
      if (!interceptAnimatorByAction(i1))
      {
        if ((!mState.isFinishing) && ((mState != RefreshState.Loading) || (!mDisableContentWhenLoading)))
        {
          if ((mState == RefreshState.Refreshing) && (mDisableContentWhenRefresh)) {
            return false;
          }
          Object localObject;
          long l;
          switch (i1)
          {
          default: 
            break;
          case 2: 
            float f4 = f2 - mTouchX;
            f2 = f3 - mTouchY;
            mVelocityTracker.addMovement(paramMotionEvent);
            f1 = f2;
            if (!mIsBeingDragged)
            {
              f1 = f2;
              if (mRefreshContent != null) {
                if (mDragDirection != 'v')
                {
                  f1 = f2;
                  if (Math.abs(f2) >= mTouchSlop)
                  {
                    f1 = f2;
                    if (Math.abs(f4) >= Math.abs(f2)) {}
                  }
                }
                else
                {
                  mDragDirection = 'v';
                  if ((f2 > 0.0F) && ((mSpinner < 0) || (((mEnableOverScrollDrag) || (isEnableRefreshOrLoadMore(mEnableRefresh))) && (mRefreshContent.canRefresh()))))
                  {
                    mIsBeingDragged = true;
                    mTouchY = (f3 - mTouchSlop);
                  }
                  else if ((f2 < 0.0F) && ((mSpinner > 0) || (((mEnableOverScrollDrag) || (isEnableRefreshOrLoadMore(mEnableLoadMore))) && (((mState == RefreshState.Loading) && (mFooterLocked)) || (mRefreshContent.canLoadMore())))))
                  {
                    mIsBeingDragged = true;
                    mTouchY = (mTouchSlop + f3);
                  }
                  f1 = f2;
                  if (mIsBeingDragged)
                  {
                    f2 = f3 - mTouchY;
                    if (mSuperDispatchTouchEvent)
                    {
                      paramMotionEvent.setAction(3);
                      super.dispatchTouchEvent(paramMotionEvent);
                    }
                    i = mSpinner;
                    if ((i <= 0) && ((i != 0) || (f2 <= 0.0F))) {
                      mKernel.setState(RefreshState.PullUpToLoad);
                    } else {
                      mKernel.setState(RefreshState.PullDownToRefresh);
                    }
                    localObject = getParent();
                    f1 = f2;
                    if (localObject != null)
                    {
                      ((ViewParent)localObject).requestDisallowInterceptTouchEvent(true);
                      f1 = f2;
                    }
                  }
                }
              }
            }
            if (mIsBeingDragged)
            {
              j = (int)f1 + mTouchSpinner;
              if ((!mViceState.isHeader) || ((j >= 0) && (mLastSpinner >= 0)))
              {
                i = j;
                if (!mViceState.isFooter) {
                  break label1147;
                }
                if (j <= 0)
                {
                  i = j;
                  if (mLastSpinner <= 0) {
                    break label1147;
                  }
                }
              }
              mLastSpinner = j;
              l = paramMotionEvent.getEventTime();
              if (mFalsifyEvent == null)
              {
                mFalsifyEvent = MotionEvent.obtain(l, l, 0, mTouchX + f4, mTouchY, 0);
                super.dispatchTouchEvent(mFalsifyEvent);
              }
              paramMotionEvent = MotionEvent.obtain(l, l, 2, mTouchX + f4, mTouchY + j, 0);
              super.dispatchTouchEvent(paramMotionEvent);
              if ((mFooterLocked) && (f1 > mTouchSlop) && (mSpinner < 0)) {
                mFooterLocked = false;
              }
              if ((j > 0) && ((mEnableOverScrollDrag) || (isEnableRefreshOrLoadMore(mEnableRefresh))) && (mRefreshContent.canRefresh()))
              {
                mLastTouchY = f3;
                mTouchY = f3;
                mTouchSpinner = 0;
                mKernel.setState(RefreshState.PullDownToRefresh);
                i = 0;
              }
              else
              {
                i = j;
                if (j < 0) {
                  if (!mEnableOverScrollDrag)
                  {
                    i = j;
                    if (!isEnableRefreshOrLoadMore(mEnableLoadMore)) {}
                  }
                  else
                  {
                    i = j;
                    if (mRefreshContent.canLoadMore())
                    {
                      mLastTouchY = f3;
                      mTouchY = f3;
                      mTouchSpinner = 0;
                      mKernel.setState(RefreshState.PullUpToLoad);
                      i = 0;
                    }
                  }
                }
              }
              if (((mViceState.isHeader) && (i < 0)) || ((mViceState.isFooter) && (i > 0)))
              {
                if (mSpinner == 0) {
                  break label1413;
                }
                moveSpinnerInfinitely(0.0F);
                return true;
              }
              if (mFalsifyEvent != null)
              {
                mFalsifyEvent = null;
                paramMotionEvent.setAction(3);
                super.dispatchTouchEvent(paramMotionEvent);
              }
              paramMotionEvent.recycle();
              moveSpinnerInfinitely(i);
              return true;
            }
            if ((mFooterLocked) && (f1 > mTouchSlop) && (mSpinner < 0)) {
              mFooterLocked = false;
            }
            break;
          case 1: 
            mVelocityTracker.addMovement(paramMotionEvent);
            mVelocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
            mCurrentVelocity = ((int)mVelocityTracker.getYVelocity());
            startFlingIfNeed(null);
          case 3: 
            mVelocityTracker.clear();
            mDragDirection = 'n';
            localObject = mFalsifyEvent;
            if (localObject != null)
            {
              ((MotionEvent)localObject).recycle();
              mFalsifyEvent = null;
              l = paramMotionEvent.getEventTime();
              localObject = MotionEvent.obtain(l, l, i1, mTouchX, f3, 0);
              super.dispatchTouchEvent((MotionEvent)localObject);
              ((MotionEvent)localObject).recycle();
            }
            overSpinner();
            if (mIsBeingDragged)
            {
              mIsBeingDragged = false;
              return true;
            }
            break;
          case 0: 
            label1147:
            mCurrentVelocity = 0;
            mVelocityTracker.addMovement(paramMotionEvent);
            mScroller.forceFinished(true);
            mTouchX = f2;
            mTouchY = f3;
            mLastSpinner = 0;
            mTouchSpinner = mSpinner;
            mIsBeingDragged = false;
            mSuperDispatchTouchEvent = super.dispatchTouchEvent(paramMotionEvent);
            localObject = mRefreshContent;
            if (localObject == null) {
              break label1413;
            }
            ((RefreshContent)localObject).onActionDown(paramMotionEvent);
            return true;
          }
          return super.dispatchTouchEvent(paramMotionEvent);
        }
      }
      else {
        return false;
      }
    }
    else {
      return super.dispatchTouchEvent(paramMotionEvent);
    }
    return false;
    label1413:
    return true;
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    Object localObject1 = mRefreshContent;
    if (localObject1 != null) {
      localObject1 = ((RefreshContent)localObject1).getView();
    } else {
      localObject1 = null;
    }
    Object localObject2 = mRefreshHeader;
    int i;
    int k;
    int j;
    boolean bool;
    if ((localObject2 != null) && (((RefreshInternal)localObject2).getView() == paramView))
    {
      if (!isEnableRefreshOrLoadMore(mEnableRefresh)) {
        return true;
      }
      if (localObject1 != null)
      {
        i = Math.max(((View)localObject1).getTop() + ((View)localObject1).getPaddingTop() + mSpinner, paramView.getTop());
        k = mHeaderBackgroundColor;
        j = i;
        if (k != 0)
        {
          localObject2 = mPaint;
          j = i;
          if (localObject2 != null)
          {
            ((Paint)localObject2).setColor(k);
            if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.SCALE) {
              i = paramView.getBottom();
            } else if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
              i = paramView.getBottom() + mSpinner;
            }
            paramCanvas.drawRect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), i, mPaint);
            j = i;
          }
        }
        if ((mEnableClipHeaderWhenFIXED_BEHIND) && (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND))
        {
          paramCanvas.save();
          paramCanvas.clipRect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), j);
          bool = super.drawChild(paramCanvas, paramView, paramLong);
          paramCanvas.restore();
          return bool;
        }
      }
    }
    localObject2 = mRefreshFooter;
    if ((localObject2 != null) && (((RefreshInternal)localObject2).getView() == paramView))
    {
      if (!isEnableRefreshOrLoadMore(mEnableLoadMore)) {
        return true;
      }
      if (localObject1 != null)
      {
        i = Math.min(((View)localObject1).getBottom() - ((View)localObject1).getPaddingBottom() + mSpinner, paramView.getBottom());
        k = mFooterBackgroundColor;
        j = i;
        if (k != 0)
        {
          localObject1 = mPaint;
          j = i;
          if (localObject1 != null)
          {
            ((Paint)localObject1).setColor(k);
            if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.SCALE) {
              i = paramView.getTop();
            } else if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.TRANSLATE) {
              i = paramView.getTop() + mSpinner;
            }
            paramCanvas.drawRect(paramView.getLeft(), i, paramView.getRight(), paramView.getBottom(), mPaint);
            j = i;
          }
        }
        if ((mEnableClipFooterWhenFIXED_BEHIND) && (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND))
        {
          paramCanvas.save();
          paramCanvas.clipRect(paramView.getLeft(), j, paramView.getRight(), paramView.getBottom());
          bool = super.drawChild(paramCanvas, paramView, paramLong);
          paramCanvas.restore();
          return bool;
        }
      }
    }
    return super.drawChild(paramCanvas, paramView, paramLong);
  }
  
  public SimpleRefreshLayout finishLoadMore()
  {
    return finishLoadMore(Math.min(Math.max(0, 300 - (int)(System.currentTimeMillis() - mLastOpenTime)), 300));
  }
  
  public SimpleRefreshLayout finishLoadMore(int paramInt)
  {
    return finishLoadMore(paramInt, true, false);
  }
  
  public SimpleRefreshLayout finishLoadMore(int paramInt, final boolean paramBoolean1, final boolean paramBoolean2)
  {
    Runnable local8 = new Runnable()
    {
      public void run()
      {
        Object localObject1 = mState;
        Object localObject2 = RefreshState.Loading;
        final int i = 1;
        if ((localObject1 == localObject2) && (mRefreshFooter != null) && (mRefreshContent != null))
        {
          notifyStateChanged(RefreshState.LoadFinish);
          int j = mRefreshFooter.onFinish(SimpleRefreshLayout.this, paramBoolean1);
          if ((mOnMultiPurposeListener != null) && ((mRefreshFooter instanceof RefreshFooter))) {
            mOnMultiPurposeListener.onFooterFinish((RefreshFooter)mRefreshFooter, paramBoolean1);
          }
          if (j < Integer.MAX_VALUE)
          {
            if ((!paramBoolean2) || (!mEnableFooterFollowWhenLoadFinished) || (mSpinner >= 0) || (!mRefreshContent.canLoadMore())) {
              i = 0;
            }
            int k = mSpinner;
            if (i != 0) {
              i = Math.max(mSpinner, -mFooterHeight);
            } else {
              i = 0;
            }
            i = k - i;
            long l;
            if ((mIsBeingDragged) || (mNestedInProgress))
            {
              if (mIsBeingDragged)
              {
                localObject1 = SimpleRefreshLayout.this;
                SimpleRefreshLayout.access$2002((SimpleRefreshLayout)localObject1, mLastTouchY);
                SimpleRefreshLayout.access$1802(SimpleRefreshLayout.this, false);
                localObject1 = SimpleRefreshLayout.this;
                SimpleRefreshLayout.access$2202((SimpleRefreshLayout)localObject1, mSpinner - i);
              }
              l = System.currentTimeMillis();
              localObject1 = SimpleRefreshLayout.this;
              float f1 = mLastTouchX;
              float f2 = mLastTouchY;
              float f3 = i;
              ((SimpleRefreshLayout)localObject1).dispatchTouchEvent(MotionEvent.obtain(l, l, 0, f1, f2 + f3 + mTouchSlop * 2, 0));
              localObject1 = SimpleRefreshLayout.this;
              ((SimpleRefreshLayout)localObject1).dispatchTouchEvent(MotionEvent.obtain(l, l, 2, mLastTouchX, mLastTouchY + f3, 0));
              if (mNestedInProgress) {
                SimpleRefreshLayout.access$2702(SimpleRefreshLayout.this, 0);
              }
            }
            localObject1 = SimpleRefreshLayout.this;
            localObject2 = new Runnable()
            {
              public void run()
              {
                Object localObject;
                if ((mEnableScrollContentWhenLoaded) && (i < 0)) {
                  localObject = mRefreshContent.scrollContentWhenFinished(mSpinner);
                } else {
                  localObject = null;
                }
                if (localObject != null) {
                  ((ValueAnimator.AnimatorUpdateListener)localObject).onAnimationUpdate(ValueAnimator.ofInt(new int[] { 0, 0 }));
                }
                AnimatorListenerAdapter local1 = new AnimatorListenerAdapter()
                {
                  public void onAnimationCancel(Animator paramAnonymous3Animator)
                  {
                    super.onAnimationEnd(paramAnonymous3Animator);
                  }
                  
                  public void onAnimationEnd(Animator paramAnonymous3Animator)
                  {
                    SimpleRefreshLayout.access$1502(SimpleRefreshLayout.this, false);
                    if (this$1) {
                      setNoMoreData(true);
                    }
                    if (mState == RefreshState.LoadFinish) {
                      notifyStateChanged(RefreshState.None);
                    }
                  }
                };
                if (mSpinner > 0)
                {
                  localObject = mKernel.animSpinner(0);
                }
                else
                {
                  if ((localObject == null) && (mSpinner != 0))
                  {
                    if ((this$1) && (mEnableFooterFollowWhenLoadFinished))
                    {
                      if (mSpinner >= -mFooterHeight)
                      {
                        notifyStateChanged(RefreshState.None);
                      }
                      else
                      {
                        localObject = mKernel.animSpinner(-mFooterHeight);
                        break label317;
                      }
                    }
                    else
                    {
                      localObject = mKernel.animSpinner(0);
                      break label317;
                    }
                  }
                  else
                  {
                    if (reboundAnimator != null)
                    {
                      reboundAnimator.cancel();
                      reboundAnimator = null;
                    }
                    mKernel.moveSpinner(0, false);
                    resetStatus();
                  }
                  localObject = null;
                }
                label317:
                if (localObject != null)
                {
                  ((Animator)localObject).addListener(local1);
                  return;
                }
                local1.onAnimationEnd(null);
              }
            };
            if (mSpinner < 0) {
              l = j;
            } else {
              l = 0L;
            }
            ((SimpleRefreshLayout)localObject1).postDelayed((Runnable)localObject2, l);
          }
        }
        else if (paramBoolean2)
        {
          setNoMoreData(true);
        }
      }
    };
    long l;
    if (paramInt <= 0) {
      l = 1L;
    } else {
      l = paramInt;
    }
    postDelayed(local8, l);
    return this;
  }
  
  public SimpleRefreshLayout finishLoadMore(boolean paramBoolean)
  {
    long l1 = System.currentTimeMillis();
    long l2 = mLastOpenTime;
    int i;
    if (paramBoolean) {
      i = Math.min(Math.max(0, 300 - (int)(l1 - l2)), 300);
    } else {
      i = 0;
    }
    return finishLoadMore(i, paramBoolean, false);
  }
  
  public SimpleRefreshLayout finishLoadMoreWithNoMoreData()
  {
    return finishLoadMore(Math.min(Math.max(0, 300 - (int)(System.currentTimeMillis() - mLastOpenTime)), 300), true, true);
  }
  
  public SimpleRefreshLayout finishRefresh()
  {
    return finishRefresh(Math.min(Math.max(0, 300 - (int)(System.currentTimeMillis() - mLastOpenTime)), 300));
  }
  
  public SimpleRefreshLayout finishRefresh(int paramInt)
  {
    return finishRefresh(paramInt, true);
  }
  
  public SimpleRefreshLayout finishRefresh(int paramInt, final boolean paramBoolean)
  {
    if ((mState == RefreshState.Refreshing) && (paramBoolean)) {
      setNoMoreData(false);
    }
    Runnable local7 = new Runnable()
    {
      public void run()
      {
        if ((mState == RefreshState.Refreshing) && (mRefreshHeader != null) && (mRefreshContent != null))
        {
          notifyStateChanged(RefreshState.RefreshFinish);
          int i = mRefreshHeader.onFinish(SimpleRefreshLayout.this, paramBoolean);
          if ((mOnMultiPurposeListener != null) && ((mRefreshHeader instanceof RefreshHeader))) {
            mOnMultiPurposeListener.onHeaderFinish((RefreshHeader)mRefreshHeader, paramBoolean);
          }
          if (i < Integer.MAX_VALUE)
          {
            Object localObject1;
            if ((mIsBeingDragged) || (mNestedInProgress))
            {
              if (mIsBeingDragged)
              {
                localObject1 = SimpleRefreshLayout.this;
                SimpleRefreshLayout.access$2002((SimpleRefreshLayout)localObject1, mLastTouchY);
                SimpleRefreshLayout.access$2202(SimpleRefreshLayout.this, 0);
                SimpleRefreshLayout.access$1802(SimpleRefreshLayout.this, false);
              }
              long l = System.currentTimeMillis();
              localObject1 = SimpleRefreshLayout.this;
              ((SimpleRefreshLayout)localObject1).dispatchTouchEvent(MotionEvent.obtain(l, l, 0, mLastTouchX, mLastTouchY + mSpinner - mTouchSlop * 2, 0));
              localObject1 = SimpleRefreshLayout.this;
              ((SimpleRefreshLayout)localObject1).dispatchTouchEvent(MotionEvent.obtain(l, l, 2, mLastTouchX, mLastTouchY + mSpinner, 0));
              if (mNestedInProgress) {
                SimpleRefreshLayout.access$2702(SimpleRefreshLayout.this, 0);
              }
            }
            if (mSpinner > 0)
            {
              localObject1 = null;
              Object localObject2 = SimpleRefreshLayout.this;
              localObject2 = ((SimpleRefreshLayout)localObject2).animSpinner(0, i, mReboundInterpolator, mReboundDuration);
              if (mEnableScrollContentWhenRefreshed) {
                localObject1 = mRefreshContent.scrollContentWhenFinished(mSpinner);
              }
              if ((localObject2 != null) && (localObject1 != null)) {
                ((ValueAnimator)localObject2).addUpdateListener((ValueAnimator.AnimatorUpdateListener)localObject1);
              }
            }
            else
            {
              if (mSpinner < 0)
              {
                localObject1 = SimpleRefreshLayout.this;
                ((SimpleRefreshLayout)localObject1).animSpinner(0, i, mReboundInterpolator, mReboundDuration);
                return;
              }
              mKernel.moveSpinner(0, false);
              resetStatus();
            }
          }
        }
      }
    };
    long l;
    if (paramInt <= 0) {
      l = 1L;
    } else {
      l = paramInt;
    }
    postDelayed(local7, l);
    return this;
  }
  
  public SimpleRefreshLayout finishRefresh(boolean paramBoolean)
  {
    long l1 = System.currentTimeMillis();
    long l2 = mLastOpenTime;
    int i = 0;
    if (paramBoolean) {
      i = Math.min(Math.max(0, 300 - (int)(l1 - l2)), 300);
    }
    return finishRefresh(i, paramBoolean);
  }
  
  protected LayoutParams generateDefaultLayoutParams()
  {
    return new LayoutParams(-1, -1);
  }
  
  public LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new LayoutParams(getContext(), paramAttributeSet);
  }
  
  protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return new LayoutParams(paramLayoutParams);
  }
  
  public SimpleRefreshLayout getLayout()
  {
    return this;
  }
  
  public int getNestedScrollAxes()
  {
    return mNestedParent.getNestedScrollAxes();
  }
  
  public RefreshFooter getRefreshFooter()
  {
    RefreshInternal localRefreshInternal = mRefreshFooter;
    if ((localRefreshInternal instanceof RefreshFooter)) {
      return (RefreshFooter)localRefreshInternal;
    }
    return null;
  }
  
  public RefreshHeader getRefreshHeader()
  {
    RefreshInternal localRefreshInternal = mRefreshHeader;
    if ((localRefreshInternal instanceof RefreshHeader)) {
      return (RefreshHeader)localRefreshInternal;
    }
    return null;
  }
  
  public RefreshState getState()
  {
    return mState;
  }
  
  protected boolean interceptAnimatorByAction(int paramInt)
  {
    if (paramInt == 0)
    {
      if (reboundAnimator != null)
      {
        if (mState.isFinishing) {
          return true;
        }
        if (mState == RefreshState.PullDownCanceled) {
          mKernel.setState(RefreshState.PullDownToRefresh);
        } else if (mState == RefreshState.PullUpCanceled) {
          mKernel.setState(RefreshState.PullUpToLoad);
        }
        reboundAnimator.cancel();
        reboundAnimator = null;
      }
      animationRunnable = null;
    }
    return reboundAnimator != null;
  }
  
  protected boolean isEnableRefreshOrLoadMore(boolean paramBoolean)
  {
    return (paramBoolean) && (!mEnablePureScrollMode);
  }
  
  protected boolean isEnableTranslationContent(boolean paramBoolean, RefreshInternal paramRefreshInternal)
  {
    return (paramBoolean) || (mEnablePureScrollMode) || (paramRefreshInternal == null) || (paramRefreshInternal.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND);
  }
  
  public boolean isNestedScrollingEnabled()
  {
    return mNestedChild.isNestedScrollingEnabled();
  }
  
  protected void moveSpinnerInfinitely(float paramFloat)
  {
    int i;
    double d3;
    int j;
    double d2;
    double d4;
    double d5;
    double d1;
    if ((mState == RefreshState.Refreshing) && (paramFloat >= 0.0F))
    {
      i = mHeaderHeight;
      if (paramFloat < i)
      {
        mKernel.moveSpinner((int)paramFloat, true);
      }
      else
      {
        d3 = (mHeaderMaxDragRate - 1.0F) * i;
        i = Math.max(mScreenHeight * 4 / 3, getHeight());
        j = mHeaderHeight;
        d2 = i - j;
        d4 = Math.max(0.0F, (paramFloat - j) * mDragRate);
        Double.isNaN(d4);
        d5 = -d4;
        d1 = d2;
        if (d2 == 0.0D) {
          d1 = 1.0D;
        }
        d1 = Math.pow(100.0D, d5 / d1);
        Double.isNaN(d3);
        d1 = Math.min(d3 * (1.0D - d1), d4);
        mKernel.moveSpinner((int)d1 + mHeaderHeight, true);
      }
    }
    else if ((paramFloat < 0.0F) && ((mState == RefreshState.Loading) || ((mEnableFooterFollowWhenLoadFinished) && (mFooterNoMoreData) && (isEnableRefreshOrLoadMore(mEnableLoadMore))) || ((mEnableAutoLoadMore) && (!mFooterNoMoreData) && (isEnableRefreshOrLoadMore(mEnableLoadMore)))))
    {
      i = mFooterHeight;
      if (paramFloat > -i)
      {
        mKernel.moveSpinner((int)paramFloat, true);
      }
      else
      {
        d3 = (mFooterMaxDragRate - 1.0F) * i;
        i = Math.max(mScreenHeight * 4 / 3, getHeight());
        j = mFooterHeight;
        d2 = i - j;
        d4 = -Math.min(0.0F, (j + paramFloat) * mDragRate);
        Double.isNaN(d4);
        d5 = -d4;
        d1 = d2;
        if (d2 == 0.0D) {
          d1 = 1.0D;
        }
        d1 = Math.pow(100.0D, d5 / d1);
        Double.isNaN(d3);
        d1 = -Math.min(d3 * (1.0D - d1), d4);
        mKernel.moveSpinner((int)d1 - mFooterHeight, true);
      }
    }
    else if (paramFloat >= 0.0F)
    {
      d3 = mHeaderMaxDragRate * mHeaderHeight;
      d2 = Math.max(mScreenHeight / 2, getHeight());
      d4 = Math.max(0.0F, mDragRate * paramFloat);
      Double.isNaN(d4);
      d5 = -d4;
      d1 = d2;
      if (d2 == 0.0D) {
        d1 = 1.0D;
      }
      d1 = Math.pow(100.0D, d5 / d1);
      Double.isNaN(d3);
      d1 = Math.min(d3 * (1.0D - d1), d4);
      mKernel.moveSpinner((int)d1, true);
    }
    else
    {
      d3 = mFooterMaxDragRate * mFooterHeight;
      d2 = Math.max(mScreenHeight / 2, getHeight());
      d4 = -Math.min(0.0F, mDragRate * paramFloat);
      Double.isNaN(d4);
      d5 = -d4;
      d1 = d2;
      if (d2 == 0.0D) {
        d1 = 1.0D;
      }
      d1 = Math.pow(100.0D, d5 / d1);
      Double.isNaN(d3);
      d1 = -Math.min(d3 * (1.0D - d1), d4);
      mKernel.moveSpinner((int)d1, true);
    }
    if ((mEnableAutoLoadMore) && (!mFooterNoMoreData) && (isEnableRefreshOrLoadMore(mEnableLoadMore)) && (paramFloat < 0.0F) && (mState != RefreshState.Refreshing) && (mState != RefreshState.Loading) && (mState != RefreshState.LoadFinish))
    {
      setStateDirectLoading();
      if (mDisableContentWhenLoading)
      {
        animationRunnable = null;
        mKernel.animSpinner(-mFooterHeight);
      }
    }
  }
  
  protected void notifyStateChanged(RefreshState paramRefreshState)
  {
    RefreshState localRefreshState = mState;
    if (localRefreshState != paramRefreshState)
    {
      mState = paramRefreshState;
      mViceState = paramRefreshState;
      RefreshInternal localRefreshInternal1 = mRefreshHeader;
      RefreshInternal localRefreshInternal2 = mRefreshFooter;
      OnMultiPurposeListener localOnMultiPurposeListener = mOnMultiPurposeListener;
      if (localRefreshInternal1 != null) {
        localRefreshInternal1.onStateChanged(this, localRefreshState, paramRefreshState);
      }
      if (localRefreshInternal2 != null) {
        localRefreshInternal2.onStateChanged(this, localRefreshState, paramRefreshState);
      }
      if (localOnMultiPurposeListener != null) {
        localOnMultiPurposeListener.onStateChanged(this, localRefreshState, paramRefreshState);
      }
    }
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    Object localObject2;
    if (!isInEditMode())
    {
      if (mHandler == null) {
        mHandler = new Handler();
      }
      localObject1 = mListDelayedRunnable;
      localObject2 = null;
      Object localObject3;
      if (localObject1 != null)
      {
        localObject1 = ((List)localObject1).iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject3 = (AsyncServer.2)((Iterator)localObject1).next();
          mHandler.postDelayed((Runnable)localObject3, id);
        }
        mListDelayedRunnable.clear();
        mListDelayedRunnable = null;
      }
      if (mRefreshHeader == null) {
        setRefreshHeader(new BezierRadarHeader(getContext()));
      }
      boolean bool;
      if (mRefreshFooter == null)
      {
        bool = mEnableLoadMore;
        setRefreshFooter(new BallPulseFooter(getContext()));
        mEnableLoadMore = bool;
      }
      else
      {
        if ((!mEnableLoadMore) && (mManualLoadMore)) {
          bool = false;
        } else {
          bool = true;
        }
        mEnableLoadMore = bool;
      }
      if (mRefreshContent == null)
      {
        int j = getChildCount();
        i = 0;
        while (i < j)
        {
          localObject1 = getChildAt(i);
          localObject3 = mRefreshHeader;
          if ((localObject3 == null) || (localObject1 != ((RefreshInternal)localObject3).getView()))
          {
            localObject3 = mRefreshFooter;
            if ((localObject3 == null) || (localObject1 != ((RefreshInternal)localObject3).getView())) {
              mRefreshContent = new ClassWriter((View)localObject1);
            }
          }
          i += 1;
        }
      }
      if (mRefreshContent == null)
      {
        i = DpiUtils.dp2px(20.0F);
        localObject1 = new TextView(getContext());
        ((TextView)localObject1).setTextColor(-39424);
        ((TextView)localObject1).setGravity(17);
        ((TextView)localObject1).setTextSize(20.0F);
        ((TextView)localObject1).setText("Empty");
        super.addView((View)localObject1, -1, -1);
        mRefreshContent = new ClassWriter((View)localObject1);
        mRefreshContent.getView().setPadding(i, i, i, i);
      }
      int i = mFixedHeaderViewId;
      if (i > 0) {
        localObject1 = findViewById(i);
      } else {
        localObject1 = null;
      }
      i = mFixedFooterViewId;
      if (i > 0) {
        localObject2 = findViewById(i);
      }
      mRefreshContent.setScrollBound(mScrollBoundaryDecider);
      mRefreshContent.setEnableLoadMoreWhenContentNotFull(mEnableLoadMoreWhenContentNotFull);
      mRefreshContent.setUpComponent(mKernel, (View)localObject1, (View)localObject2);
      if (mSpinner != 0)
      {
        notifyStateChanged(RefreshState.None);
        localObject1 = mRefreshContent;
        mSpinner = 0;
        ((RefreshContent)localObject1).moveSpinner(0, mHeaderTranslationViewId, mFooterTranslationViewId);
      }
      if ((!mManualNestedScrolling) && (!isNestedScrollingEnabled())) {
        post(new Runnable()
        {
          public void run()
          {
            for (ViewParent localViewParent = getParent(); localViewParent != null; localViewParent = ((View)localViewParent).getParent())
            {
              if ((localViewParent instanceof NestedScrollingParent))
              {
                SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
                if (((NestedScrollingParent)localViewParent).onStartNestedScroll(localSimpleRefreshLayout, localSimpleRefreshLayout, 2))
                {
                  setNestedScrollingEnabled(true);
                  SimpleRefreshLayout.access$002(SimpleRefreshLayout.this, false);
                  return;
                }
              }
              if (!(localViewParent instanceof View)) {
                break;
              }
            }
          }
        });
      }
    }
    Object localObject1 = mPrimaryColors;
    if (localObject1 != null)
    {
      localObject2 = mRefreshHeader;
      if (localObject2 != null) {
        ((RefreshInternal)localObject2).setPrimaryColors((int[])localObject1);
      }
      localObject1 = mRefreshFooter;
      if (localObject1 != null) {
        ((RefreshInternal)localObject1).setPrimaryColors(mPrimaryColors);
      }
    }
    localObject1 = mRefreshContent;
    if (localObject1 != null) {
      super.bringChildToFront(((RefreshContent)localObject1).getView());
    }
    localObject1 = mRefreshHeader;
    if ((localObject1 != null) && (((RefreshInternal)localObject1).getRefreshSpinner() != RefreshSpinner.FIXED_BEHIND)) {
      super.bringChildToFront(mRefreshHeader.getView());
    }
    localObject1 = mRefreshFooter;
    if ((localObject1 != null) && (((RefreshInternal)localObject1).getRefreshSpinner() != RefreshSpinner.FIXED_BEHIND)) {
      super.bringChildToFront(mRefreshFooter.getView());
    }
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    mKernel.moveSpinner(0, true);
    notifyStateChanged(RefreshState.None);
    Object localObject = mHandler;
    if (localObject != null)
    {
      ((Handler)localObject).removeCallbacksAndMessages(null);
      mHandler = null;
    }
    localObject = mListDelayedRunnable;
    if (localObject != null)
    {
      ((List)localObject).clear();
      mListDelayedRunnable = null;
    }
    mManualLoadMore = true;
    mManualNestedScrolling = true;
    animationRunnable = null;
    localObject = reboundAnimator;
    if (localObject != null)
    {
      ((Animator)localObject).removeAllListeners();
      reboundAnimator.removeAllUpdateListeners();
      reboundAnimator.cancel();
      reboundAnimator = null;
    }
  }
  
  protected void onFinishInflate()
  {
    super.onFinishInflate();
    int i2 = super.getChildCount();
    if (i2 <= 3)
    {
      int i = 0;
      int n = -1;
      Object localObject;
      for (int m = 0;; m = k)
      {
        j = 2;
        int i1 = 1;
        if (i >= i2) {
          break;
        }
        localObject = super.getChildAt(i);
        if ((RefreshUtils.isContentView((View)localObject)) && ((m < 2) || (i == 1)))
        {
          j = i;
          k = 2;
        }
        else
        {
          j = n;
          k = m;
          if (!(localObject instanceof RefreshInternal))
          {
            j = n;
            k = m;
            if (m < 1)
            {
              if (i > 0) {
                j = i1;
              } else {
                j = 0;
              }
              m = i;
              k = j;
              j = m;
            }
          }
        }
        i += 1;
        n = j;
      }
      if (n >= 0)
      {
        mRefreshContent = new ClassWriter(super.getChildAt(n));
        if (n == 1)
        {
          if (i2 == 3)
          {
            i = 0;
            break label190;
          }
          i = 0;
          j = -1;
          break label190;
        }
        if (i2 == 2)
        {
          i = -1;
          j = 1;
          break label190;
        }
      }
      i = -1;
      int j = -1;
      label190:
      int k = 0;
      while (k < i2)
      {
        localObject = super.getChildAt(k);
        if ((k != i) && ((k == j) || (i != -1) || (mRefreshHeader != null) || (!(localObject instanceof RefreshHeader))))
        {
          if ((k == j) || ((j == -1) && ((localObject instanceof RefreshFooter))))
          {
            boolean bool;
            if ((!mEnableLoadMore) && (mManualLoadMore)) {
              bool = false;
            } else {
              bool = true;
            }
            mEnableLoadMore = bool;
            if ((localObject instanceof RefreshFooter)) {
              localObject = (RefreshFooter)localObject;
            } else {
              localObject = new RefreshFooterWrapper((View)localObject);
            }
            mRefreshFooter = ((RefreshInternal)localObject);
          }
        }
        else
        {
          if ((localObject instanceof RefreshHeader)) {
            localObject = (RefreshHeader)localObject;
          } else {
            localObject = new RefreshHeaderWrapper((View)localObject);
          }
          mRefreshHeader = ((RefreshInternal)localObject);
        }
        k += 1;
      }
      return;
    }
    throw new RuntimeException("?????3??View?Most only support three sub view");
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int j = getPaddingLeft();
    int k = getPaddingTop();
    getPaddingBottom();
    int m = super.getChildCount();
    paramInt2 = 0;
    while (paramInt2 < m)
    {
      View localView = super.getChildAt(paramInt2);
      Object localObject1 = mRefreshContent;
      Object localObject2;
      if ((localObject1 != null) && (((RefreshContent)localObject1).getView() == localView))
      {
        localObject1 = mRefreshContent.getView();
        localObject2 = (LayoutParams)((View)localObject1).getLayoutParams();
        paramInt1 = leftMargin + j;
        paramInt3 = topMargin + k;
        ((View)localObject1).layout(paramInt1, paramInt3, ((View)localObject1).getMeasuredWidth() + paramInt1, ((View)localObject1).getMeasuredHeight() + paramInt3);
      }
      localObject1 = mRefreshHeader;
      if ((localObject1 != null) && (((RefreshInternal)localObject1).getView() == localView))
      {
        localObject1 = mRefreshHeader.getView();
        localObject2 = (LayoutParams)((View)localObject1).getLayoutParams();
        int n = leftMargin;
        int i = topMargin + mHeaderInsetStart;
        int i1 = ((View)localObject1).getMeasuredWidth();
        paramInt4 = ((View)localObject1).getMeasuredHeight() + i;
        paramInt3 = i;
        paramInt1 = paramInt4;
        if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.TRANSLATE)
        {
          paramInt1 = mHeaderHeight;
          paramInt3 = i - paramInt1;
          paramInt1 = paramInt4 - paramInt1;
        }
        ((View)localObject1).layout(n, paramInt3, i1 + n, paramInt1);
      }
      localObject1 = mRefreshFooter;
      if ((localObject1 != null) && (((RefreshInternal)localObject1).getView() == localView))
      {
        localView = mRefreshFooter.getView();
        localObject1 = (LayoutParams)localView.getLayoutParams();
        localObject2 = mRefreshFooter.getRefreshSpinner();
        paramInt4 = leftMargin;
        paramInt3 = topMargin + getMeasuredHeight() - mFooterInsetStart;
        if (localObject2 == RefreshSpinner.MATCH_LAYOUT)
        {
          paramInt1 = topMargin - mFooterInsetStart;
        }
        else if ((localObject2 != RefreshSpinner.FIXED_FRONT) && (localObject2 != RefreshSpinner.FIXED_BEHIND))
        {
          paramInt1 = paramInt3;
          if (localObject2 == RefreshSpinner.SCALE)
          {
            paramInt1 = paramInt3;
            if (mSpinner < 0)
            {
              if (isEnableRefreshOrLoadMore(mEnableLoadMore)) {
                paramInt1 = -mSpinner;
              } else {
                paramInt1 = 0;
              }
              paramInt1 = paramInt3 - Math.max(paramInt1, 0);
            }
          }
        }
        else
        {
          paramInt1 = paramInt3 - mFooterHeight;
        }
        localView.layout(paramInt4, paramInt1, localView.getMeasuredWidth() + paramInt4, localView.getMeasuredHeight() + paramInt1);
      }
      paramInt2 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int n = super.getChildCount();
    int j = 0;
    int i;
    for (int k = 0; j < n; k = i)
    {
      View localView = super.getChildAt(j);
      Object localObject1 = mRefreshHeader;
      Object localObject2;
      int i1;
      int m;
      int i2;
      int i3;
      if ((localObject1 != null) && (((RefreshInternal)localObject1).getView() == localView))
      {
        localObject1 = mRefreshHeader.getView();
        localObject2 = (LayoutParams)((View)localObject1).getLayoutParams();
        i1 = ViewGroup.getChildMeasureSpec(paramInt1, leftMargin + rightMargin, width);
        m = mHeaderHeight;
        i = m;
        if (mHeaderHeightStatus.ordinal() < RefreshDimensionStatus.XmlLayoutUnNotify.ordinal()) {
          if (height > 0)
          {
            i = height;
            m = bottomMargin;
            i = topMargin + (i + m);
            if (mHeaderHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlExactUnNotify))
            {
              mHeaderHeight = (height + bottomMargin + topMargin);
              mHeaderHeightStatus = RefreshDimensionStatus.XmlExactUnNotify;
            }
          }
          else
          {
            i = m;
            if (height == -2) {
              if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.MATCH_LAYOUT)
              {
                i = m;
                if (mHeaderHeightStatus.notified) {}
              }
              else
              {
                i2 = Math.max(View.MeasureSpec.getSize(paramInt2) - bottomMargin - topMargin, 0);
                ((View)localObject1).measure(i1, View.MeasureSpec.makeMeasureSpec(i2, Integer.MIN_VALUE));
                i3 = ((View)localObject1).getMeasuredHeight();
                i = m;
                if (i3 > 0)
                {
                  if ((i3 != i2) && (mHeaderHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlWrapUnNotify)))
                  {
                    mHeaderHeight = (i3 + bottomMargin + topMargin);
                    mHeaderHeightStatus = RefreshDimensionStatus.XmlWrapUnNotify;
                  }
                  i = -1;
                }
              }
            }
          }
        }
        if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.MATCH_LAYOUT)
        {
          i = View.MeasureSpec.getSize(paramInt2);
        }
        else if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.SCALE)
        {
          if (isEnableRefreshOrLoadMore(mEnableRefresh)) {
            i = mSpinner;
          } else {
            i = 0;
          }
          i = Math.max(0, i);
        }
        if (i != -1) {
          ((View)localObject1).measure(i1, View.MeasureSpec.makeMeasureSpec(Math.max(i - bottomMargin - topMargin, 0), 1073741824));
        }
        if (!mHeaderHeightStatus.notified)
        {
          mHeaderHeightStatus = mHeaderHeightStatus.notified();
          localObject1 = mRefreshHeader;
          localObject2 = mKernel;
          i = mHeaderHeight;
          ((RefreshInternal)localObject1).onInitialized((RefreshKernel)localObject2, i, (int)(mHeaderMaxDragRate * i));
        }
      }
      localObject1 = mRefreshFooter;
      if ((localObject1 != null) && (((RefreshInternal)localObject1).getView() == localView))
      {
        localObject1 = mRefreshFooter.getView();
        localObject2 = (LayoutParams)((View)localObject1).getLayoutParams();
        i1 = ViewGroup.getChildMeasureSpec(paramInt1, leftMargin + rightMargin, width);
        m = mFooterHeight;
        i = m;
        if (mFooterHeightStatus.ordinal() < RefreshDimensionStatus.XmlLayoutUnNotify.ordinal()) {
          if (height > 0)
          {
            i = height + topMargin + bottomMargin;
            if (mFooterHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlExactUnNotify))
            {
              mFooterHeight = (height + topMargin + bottomMargin);
              mFooterHeightStatus = RefreshDimensionStatus.XmlExactUnNotify;
            }
          }
          else
          {
            i = m;
            if (height == -2) {
              if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.MATCH_LAYOUT)
              {
                i = m;
                if (mFooterHeightStatus.notified) {}
              }
              else
              {
                i2 = Math.max(View.MeasureSpec.getSize(paramInt2) - bottomMargin - topMargin, 0);
                ((View)localObject1).measure(i1, View.MeasureSpec.makeMeasureSpec(i2, Integer.MIN_VALUE));
                i3 = ((View)localObject1).getMeasuredHeight();
                i = m;
                if (i3 > 0)
                {
                  if ((i3 != i2) && (mFooterHeightStatus.canReplaceWith(RefreshDimensionStatus.XmlWrapUnNotify)))
                  {
                    mFooterHeight = (i3 + topMargin + bottomMargin);
                    mFooterHeightStatus = RefreshDimensionStatus.XmlWrapUnNotify;
                  }
                  i = -1;
                }
              }
            }
          }
        }
        if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.MATCH_LAYOUT)
        {
          i = View.MeasureSpec.getSize(paramInt2);
        }
        else if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.SCALE)
        {
          if (isEnableRefreshOrLoadMore(mEnableLoadMore)) {
            i = -mSpinner;
          } else {
            i = 0;
          }
          i = Math.max(0, i);
        }
        if (i != -1) {
          ((View)localObject1).measure(i1, View.MeasureSpec.makeMeasureSpec(Math.max(i - bottomMargin - topMargin, 0), 1073741824));
        }
        if (!mFooterHeightStatus.notified)
        {
          mFooterHeightStatus = mFooterHeightStatus.notified();
          localObject1 = mRefreshFooter;
          localObject2 = mKernel;
          i = mFooterHeight;
          ((RefreshInternal)localObject1).onInitialized((RefreshKernel)localObject2, i, (int)(mFooterMaxDragRate * i));
        }
      }
      localObject1 = mRefreshContent;
      i = k;
      if (localObject1 != null)
      {
        i = k;
        if (((RefreshContent)localObject1).getView() == localView)
        {
          localView = mRefreshContent.getView();
          localObject1 = (LayoutParams)localView.getLayoutParams();
          localView.measure(ViewGroup.getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + leftMargin + rightMargin, width), ViewGroup.getChildMeasureSpec(paramInt2, getPaddingTop() + getPaddingBottom() + topMargin + bottomMargin, height));
          i = k + localView.getMeasuredHeight();
        }
      }
      j += 1;
    }
    super.setMeasuredDimension(View.resolveSize(super.getSuggestedMinimumWidth(), paramInt1), View.resolveSize(k, paramInt2));
    mLastTouchX = (getMeasuredWidth() / 2);
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return mNestedChild.dispatchNestedFling(paramFloat1, paramFloat2, paramBoolean);
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    return ((mFooterLocked) && (paramFloat2 > 0.0F)) || (startFlingIfNeed(Float.valueOf(-paramFloat2))) || (mNestedChild.dispatchNestedPreFling(paramFloat1, paramFloat2));
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    int i = mTotalUnconsumed;
    int j;
    if (paramInt2 * i > 0)
    {
      if (Math.abs(paramInt2) > Math.abs(mTotalUnconsumed))
      {
        i = mTotalUnconsumed;
        mTotalUnconsumed = 0;
      }
      else
      {
        mTotalUnconsumed -= paramInt2;
        i = paramInt2;
      }
      moveSpinnerInfinitely(mTotalUnconsumed);
      if (!mViceState.isOpening)
      {
        j = i;
        if (mViceState != RefreshState.None) {}
      }
      else if (mSpinner > 0)
      {
        mKernel.setState(RefreshState.PullDownToRefresh);
        j = i;
      }
      else
      {
        mKernel.setState(RefreshState.PullUpToLoad);
        j = i;
      }
    }
    else if ((paramInt2 > 0) && (mFooterLocked))
    {
      mTotalUnconsumed = (i - paramInt2);
      moveSpinnerInfinitely(mTotalUnconsumed);
      j = paramInt2;
    }
    else
    {
      j = 0;
    }
    mNestedChild.dispatchNestedPreScroll(paramInt1, paramInt2 - j, paramArrayOfInt, null);
    paramArrayOfInt[1] += j;
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    mNestedChild.dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, mParentOffsetInWindow);
    paramInt1 = paramInt4 + mParentOffsetInWindow[1];
    if ((paramInt1 != 0) && ((mEnableOverScrollDrag) || ((paramInt1 < 0) && (isEnableRefreshOrLoadMore(mEnableRefresh))) || ((paramInt1 > 0) && (isEnableRefreshOrLoadMore(mEnableLoadMore)))))
    {
      if (mViceState == RefreshState.None)
      {
        RefreshKernel localRefreshKernel = mKernel;
        if (paramInt1 > 0) {
          paramView = RefreshState.PullUpToLoad;
        } else {
          paramView = RefreshState.PullDownToRefresh;
        }
        localRefreshKernel.setState(paramView);
      }
      paramInt1 = mTotalUnconsumed - paramInt1;
      mTotalUnconsumed = paramInt1;
      moveSpinnerInfinitely(paramInt1);
    }
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    mNestedParent.onNestedScrollAccepted(paramView1, paramView2, paramInt);
    mNestedChild.startNestedScroll(paramInt & 0x2);
    mTotalUnconsumed = mSpinner;
    mNestedInProgress = true;
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    if ((isEnabled()) && (isNestedScrollingEnabled()) && ((paramInt & 0x2) != 0)) {
      paramInt = 1;
    } else {
      paramInt = 0;
    }
    if (paramInt != 0)
    {
      if ((mEnableOverScrollDrag) || (isEnableRefreshOrLoadMore(mEnableRefresh))) {
        break label64;
      }
      if (isEnableRefreshOrLoadMore(mEnableLoadMore)) {
        return true;
      }
    }
    return false;
    label64:
    return true;
  }
  
  public void onStopNestedScroll(View paramView)
  {
    mNestedParent.onStopNestedScroll(paramView);
    mNestedInProgress = false;
    mTotalUnconsumed = 0;
    overSpinner();
    mNestedChild.stopNestedScroll();
  }
  
  protected void overSpinner()
  {
    int i;
    int j;
    if ((mState != RefreshState.Loading) && ((!mEnableFooterFollowWhenLoadFinished) || (!mFooterNoMoreData) || (mSpinner >= 0) || (!isEnableRefreshOrLoadMore(mEnableLoadMore))))
    {
      if (mState == RefreshState.Refreshing)
      {
        i = mSpinner;
        j = mHeaderHeight;
        if (i > j)
        {
          mKernel.animSpinner(j);
          return;
        }
        if (i < 0) {
          mKernel.animSpinner(0);
        }
      }
      else
      {
        if (mState == RefreshState.PullDownToRefresh)
        {
          mKernel.setState(RefreshState.PullDownCanceled);
          return;
        }
        if (mState == RefreshState.PullUpToLoad)
        {
          mKernel.setState(RefreshState.PullUpCanceled);
          return;
        }
        if (mState == RefreshState.ReleaseToRefresh)
        {
          mKernel.setState(RefreshState.Refreshing);
          return;
        }
        if (mState == RefreshState.ReleaseToLoad)
        {
          mKernel.setState(RefreshState.Loading);
          return;
        }
        if (mState == RefreshState.LoadReleased)
        {
          if (reboundAnimator == null) {
            mKernel.animSpinner(-mFooterHeight);
          }
        }
        else if (mSpinner != 0) {
          mKernel.animSpinner(0);
        }
      }
    }
    else
    {
      i = mSpinner;
      j = mFooterHeight;
      if (i < -j)
      {
        mKernel.animSpinner(-j);
        return;
      }
      if (i > 0) {
        mKernel.animSpinner(0);
      }
    }
  }
  
  public boolean post(Runnable paramRunnable)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a5 = a4\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public boolean postDelayed(Runnable paramRunnable, long paramLong)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a6 = a5\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  protected void resetStatus()
  {
    if ((mState != RefreshState.None) && (mSpinner == 0)) {
      notifyStateChanged(RefreshState.None);
    }
    if (mSpinner != 0) {
      mKernel.animSpinner(0);
    }
  }
  
  public SimpleRefreshLayout setDisableContentWhenLoading(boolean paramBoolean)
  {
    mDisableContentWhenLoading = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setDisableContentWhenRefresh(boolean paramBoolean)
  {
    mDisableContentWhenRefresh = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setDragRate(float paramFloat)
  {
    mDragRate = paramFloat;
    return this;
  }
  
  public SimpleRefreshLayout setEnableAutoLoadMore(boolean paramBoolean)
  {
    mEnableAutoLoadMore = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableClipFooterWhenFixedBehind(boolean paramBoolean)
  {
    mEnableClipFooterWhenFIXED_BEHIND = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableClipHeaderWhenFixedBehind(boolean paramBoolean)
  {
    mEnableClipHeaderWhenFIXED_BEHIND = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableFooterFollowWhenLoadFinished(boolean paramBoolean)
  {
    mEnableFooterFollowWhenLoadFinished = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableFooterTranslationContent(boolean paramBoolean)
  {
    mEnableFooterTranslationContent = paramBoolean;
    mManualFooterTranslationContent = true;
    return this;
  }
  
  public SimpleRefreshLayout setEnableHeaderTranslationContent(boolean paramBoolean)
  {
    mEnableHeaderTranslationContent = paramBoolean;
    mManualHeaderTranslationContent = true;
    return this;
  }
  
  public SimpleRefreshLayout setEnableLoadMore(boolean paramBoolean)
  {
    mManualLoadMore = true;
    mEnableLoadMore = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableLoadMoreWhenContentNotFull(boolean paramBoolean)
  {
    mEnableLoadMoreWhenContentNotFull = paramBoolean;
    RefreshContent localRefreshContent = mRefreshContent;
    if (localRefreshContent != null) {
      localRefreshContent.setEnableLoadMoreWhenContentNotFull(paramBoolean);
    }
    return this;
  }
  
  public RefreshLayout setEnableNestedScroll(boolean paramBoolean)
  {
    setNestedScrollingEnabled(paramBoolean);
    return this;
  }
  
  public SimpleRefreshLayout setEnableOverScrollBounce(boolean paramBoolean)
  {
    mEnableOverScrollBounce = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableOverScrollDrag(boolean paramBoolean)
  {
    mEnableOverScrollDrag = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnablePureScrollMode(boolean paramBoolean)
  {
    mEnablePureScrollMode = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableRefresh(boolean paramBoolean)
  {
    mEnableRefresh = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableScrollContentWhenLoaded(boolean paramBoolean)
  {
    mEnableScrollContentWhenLoaded = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setEnableScrollContentWhenRefreshed(boolean paramBoolean)
  {
    mEnableScrollContentWhenRefreshed = paramBoolean;
    return this;
  }
  
  public SimpleRefreshLayout setFooterHeight(float paramFloat)
  {
    if (mFooterHeightStatus.canReplaceWith(RefreshDimensionStatus.CodeExact))
    {
      mFooterHeight = DpiUtils.dp2px(paramFloat);
      mFooterHeightStatus = RefreshDimensionStatus.CodeExactUnNotify;
      RefreshInternal localRefreshInternal = mRefreshFooter;
      if (localRefreshInternal != null) {
        localRefreshInternal.getView().requestLayout();
      }
    }
    return this;
  }
  
  public SimpleRefreshLayout setFooterInsetStart(float paramFloat)
  {
    mFooterInsetStart = DpiUtils.dp2px(paramFloat);
    return this;
  }
  
  public SimpleRefreshLayout setFooterMaxDragRate(float paramFloat)
  {
    mFooterMaxDragRate = paramFloat;
    RefreshInternal localRefreshInternal = mRefreshFooter;
    if ((localRefreshInternal != null) && (mHandler != null))
    {
      RefreshKernel localRefreshKernel = mKernel;
      int i = mFooterHeight;
      localRefreshInternal.onInitialized(localRefreshKernel, i, (int)(i * mFooterMaxDragRate));
      return this;
    }
    mFooterHeightStatus = mFooterHeightStatus.unNotify();
    return this;
  }
  
  public SimpleRefreshLayout setFooterTriggerRate(float paramFloat)
  {
    mFooterTriggerRate = paramFloat;
    return this;
  }
  
  public SimpleRefreshLayout setHeaderHeight(float paramFloat)
  {
    if (mHeaderHeightStatus.canReplaceWith(RefreshDimensionStatus.CodeExact))
    {
      mHeaderHeight = DpiUtils.dp2px(paramFloat);
      mHeaderHeightStatus = RefreshDimensionStatus.CodeExactUnNotify;
      RefreshInternal localRefreshInternal = mRefreshHeader;
      if (localRefreshInternal != null) {
        localRefreshInternal.getView().requestLayout();
      }
    }
    return this;
  }
  
  public SimpleRefreshLayout setHeaderInsetStart(float paramFloat)
  {
    mHeaderInsetStart = DpiUtils.dp2px(paramFloat);
    return this;
  }
  
  public SimpleRefreshLayout setHeaderMaxDragRate(float paramFloat)
  {
    mHeaderMaxDragRate = paramFloat;
    RefreshInternal localRefreshInternal = mRefreshHeader;
    if ((localRefreshInternal != null) && (mHandler != null))
    {
      RefreshKernel localRefreshKernel = mKernel;
      int i = mHeaderHeight;
      localRefreshInternal.onInitialized(localRefreshKernel, i, (int)(mHeaderMaxDragRate * i));
      return this;
    }
    mHeaderHeightStatus = mHeaderHeightStatus.unNotify();
    return this;
  }
  
  public SimpleRefreshLayout setHeaderTriggerRate(float paramFloat)
  {
    mHeaderTriggerRate = paramFloat;
    return this;
  }
  
  public void setNestedScrollingEnabled(boolean paramBoolean)
  {
    mManualNestedScrolling = true;
    mNestedChild.setNestedScrollingEnabled(paramBoolean);
  }
  
  public SimpleRefreshLayout setNoMoreData(boolean paramBoolean)
  {
    mFooterNoMoreData = paramBoolean;
    Object localObject = mRefreshFooter;
    if (((localObject instanceof RefreshFooter)) && (!((RefreshFooter)localObject).setNoMoreData(paramBoolean)))
    {
      localObject = System.out;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Footer:");
      localStringBuilder.append(mRefreshFooter);
      localStringBuilder.append(" NoMoreData is not supported.(???NoMoreData)");
      ((PrintStream)localObject).println(localStringBuilder.toString());
    }
    return this;
  }
  
  public SimpleRefreshLayout setOnLoadMoreListener(OnLoadMoreListener paramOnLoadMoreListener)
  {
    mLoadMoreListener = paramOnLoadMoreListener;
    boolean bool;
    if ((!mEnableLoadMore) && ((mManualLoadMore) || (paramOnLoadMoreListener == null))) {
      bool = false;
    } else {
      bool = true;
    }
    mEnableLoadMore = bool;
    return this;
  }
  
  public SimpleRefreshLayout setOnMultiPurposeListener(OnMultiPurposeListener paramOnMultiPurposeListener)
  {
    mOnMultiPurposeListener = paramOnMultiPurposeListener;
    return this;
  }
  
  public SimpleRefreshLayout setOnRefreshListener(OnRefreshListener paramOnRefreshListener)
  {
    mRefreshListener = paramOnRefreshListener;
    return this;
  }
  
  public SimpleRefreshLayout setOnRefreshLoadMoreListener(OnRefreshLoadMoreListener paramOnRefreshLoadMoreListener)
  {
    mRefreshListener = paramOnRefreshLoadMoreListener;
    mLoadMoreListener = paramOnRefreshLoadMoreListener;
    boolean bool;
    if ((!mEnableLoadMore) && ((mManualLoadMore) || (paramOnRefreshLoadMoreListener == null))) {
      bool = false;
    } else {
      bool = true;
    }
    mEnableLoadMore = bool;
    return this;
  }
  
  public SimpleRefreshLayout setPrimaryColors(int... paramVarArgs)
  {
    RefreshInternal localRefreshInternal = mRefreshHeader;
    if (localRefreshInternal != null) {
      localRefreshInternal.setPrimaryColors(paramVarArgs);
    }
    localRefreshInternal = mRefreshFooter;
    if (localRefreshInternal != null) {
      localRefreshInternal.setPrimaryColors(paramVarArgs);
    }
    mPrimaryColors = paramVarArgs;
    return this;
  }
  
  public SimpleRefreshLayout setPrimaryColorsId(int... paramVarArgs)
  {
    int[] arrayOfInt = new int[paramVarArgs.length];
    int i = 0;
    while (i < paramVarArgs.length)
    {
      arrayOfInt[i] = RefreshUtils.getColor(getContext(), paramVarArgs[i]);
      i += 1;
    }
    setPrimaryColors(arrayOfInt);
    return this;
  }
  
  public SimpleRefreshLayout setReboundDuration(int paramInt)
  {
    mReboundDuration = paramInt;
    return this;
  }
  
  public SimpleRefreshLayout setReboundInterpolator(Interpolator paramInterpolator)
  {
    mReboundInterpolator = paramInterpolator;
    return this;
  }
  
  public RefreshLayout setRefreshContent(View paramView)
  {
    return setRefreshContent(paramView, -1, -1);
  }
  
  public RefreshLayout setRefreshContent(View paramView, int paramInt1, int paramInt2)
  {
    Object localObject = mRefreshContent;
    if (localObject != null) {
      super.removeView(((RefreshContent)localObject).getView());
    }
    super.addView(paramView, 0, new LayoutParams(paramInt1, paramInt2));
    localObject = mRefreshHeader;
    if ((localObject != null) && (((RefreshInternal)localObject).getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND))
    {
      super.bringChildToFront(paramView);
      localObject = mRefreshFooter;
      if ((localObject != null) && (((RefreshInternal)localObject).getRefreshSpinner() != RefreshSpinner.FIXED_BEHIND)) {
        super.bringChildToFront(mRefreshFooter.getView());
      }
    }
    else
    {
      localObject = mRefreshFooter;
      if ((localObject != null) && (((RefreshInternal)localObject).getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND))
      {
        super.bringChildToFront(paramView);
        localObject = mRefreshHeader;
        if ((localObject != null) && (((RefreshInternal)localObject).getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)) {
          super.bringChildToFront(mRefreshHeader.getView());
        }
      }
    }
    mRefreshContent = new ClassWriter(paramView);
    if (mHandler != null)
    {
      paramInt1 = mFixedHeaderViewId;
      localObject = null;
      if (paramInt1 > 0) {
        paramView = findViewById(paramInt1);
      } else {
        paramView = null;
      }
      paramInt1 = mFixedFooterViewId;
      if (paramInt1 > 0) {
        localObject = findViewById(paramInt1);
      }
      mRefreshContent.setScrollBound(mScrollBoundaryDecider);
      mRefreshContent.setEnableLoadMoreWhenContentNotFull(mEnableLoadMoreWhenContentNotFull);
      mRefreshContent.setUpComponent(mKernel, paramView, (View)localObject);
    }
    return this;
  }
  
  public SimpleRefreshLayout setRefreshFooter(RefreshFooter paramRefreshFooter)
  {
    return setRefreshFooter(paramRefreshFooter, -1, -2);
  }
  
  public SimpleRefreshLayout setRefreshFooter(RefreshFooter paramRefreshFooter, int paramInt1, int paramInt2)
  {
    RefreshInternal localRefreshInternal = mRefreshFooter;
    if (localRefreshInternal != null) {
      super.removeView(localRefreshInternal.getView());
    }
    mRefreshFooter = paramRefreshFooter;
    mFooterBackgroundColor = 0;
    mFooterNeedTouchEventWhenLoading = false;
    mFooterHeightStatus = mFooterHeightStatus.unNotify();
    boolean bool;
    if ((mManualLoadMore) && (!mEnableLoadMore)) {
      bool = false;
    } else {
      bool = true;
    }
    mEnableLoadMore = bool;
    if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)
    {
      super.addView(mRefreshFooter.getView(), 0, new LayoutParams(paramInt1, paramInt2));
      return this;
    }
    super.addView(mRefreshFooter.getView(), paramInt1, paramInt2);
    return this;
  }
  
  public SimpleRefreshLayout setRefreshHeader(RefreshHeader paramRefreshHeader)
  {
    return setRefreshHeader(paramRefreshHeader, -1, -2);
  }
  
  public SimpleRefreshLayout setRefreshHeader(RefreshHeader paramRefreshHeader, int paramInt1, int paramInt2)
  {
    RefreshInternal localRefreshInternal = mRefreshHeader;
    if (localRefreshInternal != null) {
      super.removeView(localRefreshInternal.getView());
    }
    mRefreshHeader = paramRefreshHeader;
    mHeaderBackgroundColor = 0;
    mHeaderNeedTouchEventWhenRefreshing = false;
    mHeaderHeightStatus = mHeaderHeightStatus.unNotify();
    if (paramRefreshHeader.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)
    {
      super.addView(mRefreshHeader.getView(), 0, new LayoutParams(paramInt1, paramInt2));
      return this;
    }
    super.addView(mRefreshHeader.getView(), paramInt1, paramInt2);
    return this;
  }
  
  public SimpleRefreshLayout setScrollBound(RefreshScrollBound paramRefreshScrollBound)
  {
    mScrollBoundaryDecider = paramRefreshScrollBound;
    RefreshContent localRefreshContent = mRefreshContent;
    if (localRefreshContent != null) {
      localRefreshContent.setScrollBound(paramRefreshScrollBound);
    }
    return this;
  }
  
  protected void setStateDirectLoading()
  {
    if (mState != RefreshState.Loading)
    {
      mLastOpenTime = System.currentTimeMillis();
      mFooterLocked = true;
      notifyStateChanged(RefreshState.Loading);
      Object localObject = mLoadMoreListener;
      if (localObject != null) {
        ((OnLoadMoreListener)localObject).onLoadMore(this);
      } else if (mOnMultiPurposeListener == null) {
        finishLoadMore(2000);
      }
      localObject = mRefreshFooter;
      int i;
      if (localObject != null)
      {
        i = mFooterHeight;
        ((RefreshInternal)localObject).onStartAnimator(this, i, (int)(mFooterMaxDragRate * i));
      }
      localObject = mOnMultiPurposeListener;
      if ((localObject != null) && ((mRefreshFooter instanceof RefreshFooter)))
      {
        ((OnLoadMoreListener)localObject).onLoadMore(this);
        localObject = mOnMultiPurposeListener;
        RefreshFooter localRefreshFooter = (RefreshFooter)mRefreshFooter;
        i = mFooterHeight;
        ((OnMultiPurposeListener)localObject).onFooterStartAnimator(localRefreshFooter, i, (int)(mFooterMaxDragRate * i));
      }
    }
  }
  
  protected void setStateLoading()
  {
    AnimatorListenerAdapter local3 = new AnimatorListenerAdapter()
    {
      public void onAnimationEnd(Animator paramAnonymousAnimator)
      {
        setStateDirectLoading();
      }
    };
    notifyStateChanged(RefreshState.LoadReleased);
    ValueAnimator localValueAnimator = mKernel.animSpinner(-mFooterHeight);
    if (localValueAnimator != null) {
      localValueAnimator.addListener(local3);
    }
    Object localObject1 = mRefreshFooter;
    int i;
    if (localObject1 != null)
    {
      i = mFooterHeight;
      ((RefreshInternal)localObject1).onReleased(this, i, (int)(mFooterMaxDragRate * i));
    }
    localObject1 = mOnMultiPurposeListener;
    if (localObject1 != null)
    {
      Object localObject2 = mRefreshFooter;
      if ((localObject2 instanceof RefreshFooter))
      {
        localObject2 = (RefreshFooter)localObject2;
        i = mFooterHeight;
        ((OnMultiPurposeListener)localObject1).onFooterReleased((RefreshFooter)localObject2, i, (int)(mFooterMaxDragRate * i));
      }
    }
    if (localValueAnimator == null) {
      local3.onAnimationEnd(null);
    }
  }
  
  protected void setStateRefreshing()
  {
    AnimatorListenerAdapter local4 = new AnimatorListenerAdapter()
    {
      public void onAnimationEnd(Animator paramAnonymousAnimator)
      {
        SimpleRefreshLayout.access$102(SimpleRefreshLayout.this, System.currentTimeMillis());
        notifyStateChanged(RefreshState.Refreshing);
        if (mRefreshListener != null)
        {
          mRefreshListener.onRefresh(SimpleRefreshLayout.this);
        }
        else
        {
          localObject1 = SimpleRefreshLayout.this;
          paramAnonymousAnimator = this;
          if (mOnMultiPurposeListener == null) {
            val$message.finishRefresh(3000);
          }
        }
        paramAnonymousAnimator = this;
        Object localObject2 = val$message;
        Object localObject1 = paramAnonymousAnimator;
        if (mRefreshHeader != null)
        {
          localObject2 = val$message.mRefreshHeader;
          SimpleRefreshLayout localSimpleRefreshLayout = val$message;
          ((RefreshInternal)localObject2).onStartAnimator(localSimpleRefreshLayout, mHeaderHeight, (int)(val$message.mHeaderMaxDragRate * val$message.mHeaderHeight));
        }
        if ((val$message.mOnMultiPurposeListener != null) && ((val$message.mRefreshHeader instanceof RefreshHeader)))
        {
          val$message.mOnMultiPurposeListener.onRefresh(val$message);
          val$message.mOnMultiPurposeListener.onHeaderStartAnimator((RefreshHeader)val$message.mRefreshHeader, val$message.mHeaderHeight, (int)(val$message.mHeaderMaxDragRate * val$message.mHeaderHeight));
        }
      }
    };
    notifyStateChanged(RefreshState.RefreshReleased);
    ValueAnimator localValueAnimator = mKernel.animSpinner(mHeaderHeight);
    if (localValueAnimator != null) {
      localValueAnimator.addListener(local4);
    }
    Object localObject1 = mRefreshHeader;
    int i;
    if (localObject1 != null)
    {
      i = mHeaderHeight;
      ((RefreshInternal)localObject1).onReleased(this, i, (int)(mHeaderMaxDragRate * i));
    }
    localObject1 = mOnMultiPurposeListener;
    if (localObject1 != null)
    {
      Object localObject2 = mRefreshHeader;
      if ((localObject2 instanceof RefreshHeader))
      {
        localObject2 = (RefreshHeader)localObject2;
        i = mHeaderHeight;
        ((OnMultiPurposeListener)localObject1).onHeaderReleased((RefreshHeader)localObject2, i, (int)(mHeaderMaxDragRate * i));
      }
    }
    if (localValueAnimator == null) {
      local4.onAnimationEnd(null);
    }
  }
  
  protected void setViceState(RefreshState paramRefreshState)
  {
    if ((mState.isDragging) && (mState.isHeader != isHeader)) {
      notifyStateChanged(RefreshState.None);
    }
    if (mViceState != paramRefreshState) {
      mViceState = paramRefreshState;
    }
  }
  
  protected boolean startFlingIfNeed(Float paramFloat)
  {
    float f;
    if (paramFloat == null) {
      f = mCurrentVelocity;
    } else {
      f = paramFloat.floatValue();
    }
    if (Math.abs(f) > mMinimumVelocity)
    {
      if (mSpinner * f < 0.0F) {
        if (mState.isOpening)
        {
          if (mState != mViceState)
          {
            animationRunnable = new b(f).doInBackground();
            return true;
          }
        }
        else
        {
          int i = mSpinner;
          if (i > mHeaderHeight * mHeaderTriggerRate) {
            break label276;
          }
          if (-i > mFooterHeight * mFooterTriggerRate) {
            return true;
          }
        }
      }
      if (((f >= 0.0F) || (((!mEnableOverScrollBounce) || ((!mEnableOverScrollDrag) && (!isEnableRefreshOrLoadMore(mEnableLoadMore)))) && ((mState != RefreshState.Loading) || (mSpinner < 0)) && ((!mEnableAutoLoadMore) || (!isEnableRefreshOrLoadMore(mEnableLoadMore))))) && ((f <= 0.0F) || (((!mEnableOverScrollBounce) || ((!mEnableOverScrollDrag) && (!isEnableRefreshOrLoadMore(mEnableRefresh)))) && ((mState != RefreshState.Refreshing) || (mSpinner > 0))))) {
        break label278;
      }
      mVerticalPermit = false;
      mScroller.fling(0, 0, 0, (int)-f, 0, 0, -2147483647, Integer.MAX_VALUE);
      mScroller.computeScrollOffset();
      invalidate();
    }
    else
    {
      return false;
    }
    label276:
    return true;
    label278:
    return false;
  }
  
  public static class LayoutParams
    extends ViewGroup.MarginLayoutParams
  {
    public RefreshSpinner l = null;
    public int o = 0;
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.SimpleRefreshLayout_Layout);
      o = paramContext.getColor(R.styleable.SimpleRefreshLayout_Layout_layout_SimpleBackgroundColor, o);
      if (paramContext.hasValue(R.styleable.SimpleRefreshLayout_Layout_layout_SimpleRefreshSpinner)) {
        l = RefreshSpinner.values()[paramContext.getInt(R.styleable.SimpleRefreshLayout_Layout_layout_SimpleRefreshSpinner, RefreshSpinner.TRANSLATE.ordinal())];
      }
      paramContext.recycle();
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
  }
  
  protected class a
    implements Runnable
  {
    long a;
    int b = 0;
    int d;
    float e;
    float i = 0.0F;
    int w = 10;
    
    a(float paramFloat, int paramInt)
    {
      e = paramFloat;
      d = paramInt;
      a = AnimationUtils.currentAnimationTimeMillis();
      postDelayed(this, w);
    }
    
    public void run()
    {
      if ((animationRunnable == this) && (!mState.isFinishing))
      {
        double d1;
        int j;
        double d2;
        if (Math.abs(mSpinner) >= Math.abs(d))
        {
          if (d != 0)
          {
            d1 = e;
            j = b + 1;
            b = j;
            d2 = Math.pow(0.44999998807907104D, j * 2);
            Double.isNaN(d1);
            e = ((float)(d1 * d2));
          }
          else
          {
            d1 = e;
            j = b + 1;
            b = j;
            d2 = Math.pow(0.8500000238418579D, j * 2);
            Double.isNaN(d1);
            e = ((float)(d1 * d2));
          }
        }
        else
        {
          d1 = e;
          j = b + 1;
          b = j;
          d2 = Math.pow(0.949999988079071D, j * 2);
          Double.isNaN(d1);
          e = ((float)(d1 * d2));
        }
        long l = AnimationUtils.currentAnimationTimeMillis();
        float f = (float)(l - a) * 1.0F / 1000.0F;
        f = e * f;
        if (Math.abs(f) >= 1.0F)
        {
          a = l;
          i += f;
          moveSpinnerInfinitely(i);
          postDelayed(this, w);
          return;
        }
        SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
        animationRunnable = null;
        if (Math.abs(mSpinner) >= Math.abs(d))
        {
          j = Math.min(Math.max(DpiUtils.px2dp(Math.abs(mSpinner - d)), 30), 100);
          localSimpleRefreshLayout = SimpleRefreshLayout.this;
          localSimpleRefreshLayout.animSpinner(d, 0, mReboundInterpolator, j * 10);
        }
      }
    }
  }
  
  protected class b
    implements Runnable
  {
    long a = AnimationUtils.currentAnimationTimeMillis();
    long b = 0L;
    int c = 10;
    float i;
    float t = 0.98F;
    int timer = 0;
    int w;
    
    b(float paramFloat)
    {
      i = paramFloat;
      w = mSpinner;
    }
    
    public Runnable doInBackground()
    {
      if (mState.isFinishing) {
        return null;
      }
      if (mSpinner != 0)
      {
        SimpleRefreshLayout localSimpleRefreshLayout;
        if (!mState.isOpening)
        {
          if ((mFooterNoMoreData) && (mEnableFooterFollowWhenLoadFinished))
          {
            localSimpleRefreshLayout = SimpleRefreshLayout.this;
            if (!localSimpleRefreshLayout.isEnableRefreshOrLoadMore(mEnableLoadMore)) {}
          }
        }
        else
        {
          if (mState != RefreshState.Loading)
          {
            if ((mFooterNoMoreData) && (mEnableFooterFollowWhenLoadFinished))
            {
              localSimpleRefreshLayout = SimpleRefreshLayout.this;
              if (!localSimpleRefreshLayout.isEnableRefreshOrLoadMore(mEnableLoadMore)) {}
            }
          }
          else {
            if (mSpinner < -mFooterHeight) {
              break label177;
            }
          }
          if ((mState != RefreshState.Refreshing) || (mSpinner <= mHeaderHeight)) {
            break label358;
          }
        }
        label177:
        int k = 0;
        int j = mSpinner;
        int m = mSpinner;
        float f1 = i;
        while (m * j > 0)
        {
          double d1 = f1;
          double d2 = t;
          k += 1;
          d2 = Math.pow(d2, c * k / 10);
          Double.isNaN(d1);
          f1 = (float)(d1 * d2);
          float f2 = c * 1.0F / 1000.0F * f1;
          if (Math.abs(f2) < 1.0F)
          {
            if ((!mState.isOpening) || ((mState == RefreshState.Refreshing) && (j > mHeaderHeight))) {
              break label381;
            }
            if ((mState == RefreshState.Refreshing) || (j >= -mFooterHeight)) {
              break;
            }
            return null;
          }
          j = (int)(j + f2);
        }
      }
      label358:
      b = AnimationUtils.currentAnimationTimeMillis();
      postDelayed(this, c);
      return this;
      label381:
      return null;
    }
    
    public void run()
    {
      if ((animationRunnable == this) && (!mState.isFinishing))
      {
        long l1 = AnimationUtils.currentAnimationTimeMillis();
        long l2 = a;
        double d1 = i;
        double d2 = Math.pow(t, (l1 - b) / (1000 / c));
        Double.isNaN(d1);
        i = ((float)(d1 * d2));
        float f = i * ((float)(l1 - l2) * 1.0F / 1000.0F);
        if (Math.abs(f) > 1.0F)
        {
          a = l1;
          w = ((int)(w + f));
          if (mSpinner * w > 0)
          {
            mKernel.moveSpinner(w, true);
            postDelayed(this, c);
            return;
          }
          SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
          animationRunnable = null;
          mKernel.moveSpinner(0, true);
          RefreshUtils.fling(mRefreshContent.getScrollableView(), (int)-i);
          if ((mFooterLocked) && (f > 0.0F)) {
            SimpleRefreshLayout.access$1502(SimpleRefreshLayout.this, false);
          }
        }
        else
        {
          animationRunnable = null;
        }
      }
    }
  }
  
  public class c
    implements RefreshKernel
  {
    public c() {}
    
    public ValueAnimator animSpinner(int paramInt)
    {
      SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
      return localSimpleRefreshLayout.animSpinner(paramInt, 0, mReboundInterpolator, mReboundDuration);
    }
    
    public RefreshContent getRefreshContent()
    {
      return mRefreshContent;
    }
    
    public RefreshLayout getRefreshLayout()
    {
      return SimpleRefreshLayout.this;
    }
    
    public RefreshKernel moveSpinner(int paramInt, boolean paramBoolean)
    {
      if ((mSpinner == paramInt) && (mRefreshHeader == null) && (mRefreshFooter == null)) {
        return this;
      }
      SimpleRefreshLayout localSimpleRefreshLayout = SimpleRefreshLayout.this;
      int m = mSpinner;
      SimpleRefreshLayout.access$702(SimpleRefreshLayout.this, paramInt);
      if ((paramBoolean) && (mViceState.isDragging)) {
        if (mSpinner > mHeaderHeight * mHeaderTriggerRate) {
          mKernel.setState(RefreshState.ReleaseToRefresh);
        } else if ((-mSpinner > mFooterHeight * mFooterTriggerRate) && (!mFooterNoMoreData)) {
          mKernel.setState(RefreshState.ReleaseToLoad);
        } else if ((mSpinner < 0) && (!mFooterNoMoreData)) {
          mKernel.setState(RefreshState.PullUpToLoad);
        } else if (mSpinner > 0) {
          mKernel.setState(RefreshState.PullDownToRefresh);
        }
      }
      Object localObject1 = mRefreshContent;
      int k = 1;
      int i;
      int j;
      if (localObject1 != null)
      {
        Object localObject2 = null;
        localObject1 = localObject2;
        if (paramInt >= 0)
        {
          localObject1 = localObject2;
          if (mRefreshHeader != null)
          {
            localObject1 = SimpleRefreshLayout.this;
            if (((SimpleRefreshLayout)localObject1).isEnableTranslationContent(mEnableHeaderTranslationContent, mRefreshHeader))
            {
              localObject1 = Integer.valueOf(paramInt);
            }
            else
            {
              localObject1 = localObject2;
              if (m < 0) {
                localObject1 = Integer.valueOf(0);
              }
            }
          }
        }
        localObject2 = localObject1;
        if (paramInt <= 0)
        {
          localObject2 = localObject1;
          if (mRefreshFooter != null)
          {
            localObject2 = SimpleRefreshLayout.this;
            if (((SimpleRefreshLayout)localObject2).isEnableTranslationContent(mEnableFooterTranslationContent, mRefreshFooter))
            {
              localObject2 = Integer.valueOf(paramInt);
            }
            else
            {
              localObject2 = localObject1;
              if (m > 0) {
                localObject2 = Integer.valueOf(0);
              }
            }
          }
        }
        if (localObject2 != null)
        {
          mRefreshContent.moveSpinner(((Integer)localObject2).intValue(), mHeaderTranslationViewId, mFooterTranslationViewId);
          if ((mEnableClipHeaderWhenFIXED_BEHIND) && (mRefreshHeader != null) && (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)) {
            i = 1;
          } else {
            i = 0;
          }
          if ((i == 0) && (mHeaderBackgroundColor == 0)) {
            i = 0;
          } else {
            i = 1;
          }
          if ((mEnableClipFooterWhenFIXED_BEHIND) && (mRefreshFooter != null) && (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.FIXED_BEHIND)) {
            j = 1;
          } else {
            j = 0;
          }
          if ((j == 0) && (mFooterBackgroundColor == 0)) {
            j = 0;
          } else {
            j = 1;
          }
          if (((i != 0) && ((((Integer)localObject2).intValue() >= 0) || (m > 0))) || ((j != 0) && ((((Integer)localObject2).intValue() <= 0) || (m < 0)))) {
            localSimpleRefreshLayout.invalidate();
          }
        }
      }
      int n;
      float f;
      if (((paramInt >= 0) || (m > 0)) && (mRefreshHeader != null))
      {
        j = Math.max(paramInt, 0);
        n = mHeaderHeight;
        int i1 = (int)(mHeaderHeight * mHeaderMaxDragRate);
        f = j;
        if (mHeaderHeight == 0) {
          i = 1;
        } else {
          i = mHeaderHeight;
        }
        f = f * 1.0F / i;
        localObject1 = SimpleRefreshLayout.this;
        if (((((SimpleRefreshLayout)localObject1).isEnableRefreshOrLoadMore(mEnableRefresh)) || ((mState == RefreshState.RefreshFinish) && (!paramBoolean))) && (m != mSpinner))
        {
          if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.TRANSLATE)
          {
            mRefreshHeader.getView().setTranslationY(mSpinner);
            if ((mHeaderBackgroundColor != 0) && (mPaint != null))
            {
              localObject1 = SimpleRefreshLayout.this;
              if (!((SimpleRefreshLayout)localObject1).isEnableTranslationContent(mEnableHeaderTranslationContent, mRefreshHeader)) {
                localSimpleRefreshLayout.invalidate();
              }
            }
          }
          else if (mRefreshHeader.getRefreshSpinner() == RefreshSpinner.SCALE)
          {
            mRefreshHeader.getView().requestLayout();
          }
          mRefreshHeader.onMoving(paramBoolean, f, j, n, i1);
        }
        if ((m != mSpinner) && (mOnMultiPurposeListener != null) && ((mRefreshHeader instanceof RefreshHeader))) {
          mOnMultiPurposeListener.onHeaderMoving((RefreshHeader)mRefreshHeader, paramBoolean, f, j, n, i1);
        }
      }
      if (((paramInt <= 0) || (m < 0)) && (mRefreshFooter != null))
      {
        i = -Math.min(paramInt, 0);
        j = mFooterHeight;
        n = (int)(mFooterHeight * mFooterMaxDragRate);
        f = i;
        if (mFooterHeight == 0) {
          paramInt = k;
        } else {
          paramInt = mFooterHeight;
        }
        f = f * 1.0F / paramInt;
        localObject1 = SimpleRefreshLayout.this;
        if (((((SimpleRefreshLayout)localObject1).isEnableRefreshOrLoadMore(mEnableLoadMore)) || ((mState == RefreshState.LoadFinish) && (!paramBoolean))) && (m != mSpinner))
        {
          if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.TRANSLATE)
          {
            mRefreshFooter.getView().setTranslationY(mSpinner);
            if ((mFooterBackgroundColor != 0) && (mPaint != null))
            {
              localObject1 = SimpleRefreshLayout.this;
              if (!((SimpleRefreshLayout)localObject1).isEnableTranslationContent(mEnableFooterTranslationContent, mRefreshFooter)) {
                localSimpleRefreshLayout.invalidate();
              }
            }
          }
          else if (mRefreshFooter.getRefreshSpinner() == RefreshSpinner.SCALE)
          {
            mRefreshFooter.getView().requestLayout();
          }
          mRefreshFooter.onMoving(paramBoolean, f, i, j, n);
        }
        if ((m != mSpinner) && (mOnMultiPurposeListener != null) && ((mRefreshFooter instanceof RefreshFooter))) {
          mOnMultiPurposeListener.onFooterMoving((RefreshFooter)mRefreshFooter, paramBoolean, f, i, j, n);
        }
      }
      return this;
    }
    
    public RefreshKernel requestDefaultTranslationContentFor(RefreshInternal paramRefreshInternal, boolean paramBoolean)
    {
      if (paramRefreshInternal.equals(mRefreshHeader))
      {
        if (!mManualHeaderTranslationContent)
        {
          SimpleRefreshLayout.access$5002(SimpleRefreshLayout.this, true);
          SimpleRefreshLayout.access$3802(SimpleRefreshLayout.this, paramBoolean);
          return this;
        }
      }
      else if ((paramRefreshInternal.equals(mRefreshFooter)) && (!mManualFooterTranslationContent))
      {
        SimpleRefreshLayout.access$5102(SimpleRefreshLayout.this, true);
        SimpleRefreshLayout.access$3902(SimpleRefreshLayout.this, paramBoolean);
      }
      return this;
    }
    
    public RefreshKernel requestDrawBackgroundFor(RefreshInternal paramRefreshInternal, int paramInt)
    {
      if ((mPaint == null) && (paramInt != 0)) {
        SimpleRefreshLayout.access$4602(SimpleRefreshLayout.this, new Paint());
      }
      if (paramRefreshInternal.equals(mRefreshHeader))
      {
        SimpleRefreshLayout.access$4302(SimpleRefreshLayout.this, paramInt);
        return this;
      }
      if (paramRefreshInternal.equals(mRefreshFooter)) {
        SimpleRefreshLayout.access$4502(SimpleRefreshLayout.this, paramInt);
      }
      return this;
    }
    
    public RefreshKernel requestNeedTouchEventFor(RefreshInternal paramRefreshInternal, boolean paramBoolean)
    {
      if (paramRefreshInternal.equals(mRefreshHeader))
      {
        SimpleRefreshLayout.access$4802(SimpleRefreshLayout.this, paramBoolean);
        return this;
      }
      if (paramRefreshInternal.equals(mRefreshFooter)) {
        SimpleRefreshLayout.access$4902(SimpleRefreshLayout.this, paramBoolean);
      }
      return this;
    }
    
    public RefreshKernel requestRemeasureHeightFor(RefreshInternal paramRefreshInternal)
    {
      if (paramRefreshInternal.equals(mRefreshHeader))
      {
        if (mHeaderHeightStatus.notified)
        {
          paramRefreshInternal = SimpleRefreshLayout.this;
          SimpleRefreshLayout.access$5202(paramRefreshInternal, mHeaderHeightStatus.unNotify());
          return this;
        }
      }
      else if ((paramRefreshInternal.equals(mRefreshFooter)) && (mFooterHeightStatus.notified))
      {
        paramRefreshInternal = SimpleRefreshLayout.this;
        SimpleRefreshLayout.access$5302(paramRefreshInternal, mFooterHeightStatus.unNotify());
      }
      return this;
    }
    
    public RefreshKernel setState(RefreshState paramRefreshState)
    {
      switch (SimpleRefreshLayout.2.Download[paramRefreshState.ordinal()])
      {
      default: 
        break;
      case 13: 
        if (mState == RefreshState.Loading) {
          notifyStateChanged(RefreshState.LoadFinish);
        }
        break;
      case 12: 
        if (mState == RefreshState.Refreshing) {
          notifyStateChanged(RefreshState.RefreshFinish);
        }
        break;
      case 11: 
        setStateLoading();
        break;
      case 10: 
        Log.d("ghy", "refreshing");
        setStateRefreshing();
        break;
      case 9: 
        if (!mState.isOpening)
        {
          paramRefreshState = SimpleRefreshLayout.this;
          if (paramRefreshState.isEnableRefreshOrLoadMore(mEnableLoadMore))
          {
            notifyStateChanged(RefreshState.LoadReleased);
            break;
          }
        }
        setViceState(RefreshState.LoadReleased);
        break;
      case 8: 
        if (!mState.isOpening)
        {
          paramRefreshState = SimpleRefreshLayout.this;
          if (paramRefreshState.isEnableRefreshOrLoadMore(mEnableRefresh))
          {
            notifyStateChanged(RefreshState.RefreshReleased);
            break;
          }
        }
        setViceState(RefreshState.RefreshReleased);
        break;
      case 7: 
        paramRefreshState = SimpleRefreshLayout.this;
        if ((paramRefreshState.isEnableRefreshOrLoadMore(mEnableLoadMore)) && (!mState.isOpening) && (!mState.isFinishing) && ((!mFooterNoMoreData) || (!mEnableFooterFollowWhenLoadFinished))) {
          notifyStateChanged(RefreshState.ReleaseToLoad);
        } else {
          setViceState(RefreshState.ReleaseToLoad);
        }
        break;
      case 6: 
        if (!mState.isOpening)
        {
          paramRefreshState = SimpleRefreshLayout.this;
          if (paramRefreshState.isEnableRefreshOrLoadMore(mEnableRefresh))
          {
            notifyStateChanged(RefreshState.ReleaseToRefresh);
            break;
          }
        }
        setViceState(RefreshState.ReleaseToRefresh);
        break;
      case 5: 
        paramRefreshState = SimpleRefreshLayout.this;
        if ((paramRefreshState.isEnableRefreshOrLoadMore(mEnableLoadMore)) && (!mState.isOpening) && ((!mFooterNoMoreData) || (!mEnableFooterFollowWhenLoadFinished)))
        {
          notifyStateChanged(RefreshState.PullUpCanceled);
          resetStatus();
        }
        else
        {
          setViceState(RefreshState.PullUpCanceled);
        }
        break;
      case 4: 
        if (!mState.isOpening)
        {
          paramRefreshState = SimpleRefreshLayout.this;
          if (paramRefreshState.isEnableRefreshOrLoadMore(mEnableRefresh))
          {
            notifyStateChanged(RefreshState.PullDownCanceled);
            resetStatus();
            break;
          }
        }
        setViceState(RefreshState.PullDownCanceled);
        break;
      case 3: 
        paramRefreshState = SimpleRefreshLayout.this;
        if ((paramRefreshState.isEnableRefreshOrLoadMore(mEnableLoadMore)) && (!mState.isOpening) && (!mState.isFinishing) && ((!mFooterNoMoreData) || (!mEnableFooterFollowWhenLoadFinished))) {
          notifyStateChanged(RefreshState.PullUpToLoad);
        } else {
          setViceState(RefreshState.PullUpToLoad);
        }
        break;
      case 2: 
        if (!mState.isOpening)
        {
          paramRefreshState = SimpleRefreshLayout.this;
          if (paramRefreshState.isEnableRefreshOrLoadMore(mEnableRefresh))
          {
            notifyStateChanged(RefreshState.PullDownToRefresh);
            break;
          }
        }
        setViceState(RefreshState.PullDownToRefresh);
        break;
      case 1: 
        resetStatus();
      }
      return null;
    }
  }
}
