package com.jd.lib.un.basewidget.widget.simple.wrapper;

import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.graphics.PointF;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AbsListView;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.Space;
import androidx.core.view.NestedScrollingChild;
import androidx.core.view.NestedScrollingParent;
import androidx.viewpager.widget.ViewPager;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshContent;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshKernel;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshLayout;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshScrollBound;
import com.jd.lib.un.basewidget.widget.simple.listener.CoordinatorLayoutListener;
import com.jd.lib.un.basewidget.widget.simple.parser.Label;
import com.jd.lib.un.basewidget.widget.simple.utils.RefreshUtils;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

public class ClassWriter
  implements ValueAnimator.AnimatorUpdateListener, RefreshContent, CoordinatorLayoutListener
{
  private View a;
  private View b;
  private View c;
  private boolean e = true;
  private boolean f = true;
  private View g;
  private View h;
  protected Label i = new Label();
  private int v = 0;
  
  public ClassWriter(View paramView)
  {
    b = paramView;
    c = paramView;
    a = paramView;
  }
  
  private void a(View paramView, RefreshKernel paramRefreshKernel)
  {
    boolean bool2 = a.isInEditMode();
    View localView2 = null;
    View localView1 = paramView;
    for (paramView = localView2;; paramView = localView2)
    {
      if ((paramView == null) || (((paramView instanceof NestedScrollingParent)) && (!(paramView instanceof NestedScrollingChild))))
      {
        boolean bool1;
        if (paramView == null) {
          bool1 = true;
        } else {
          bool1 = false;
        }
        localView2 = get(localView1, bool1);
        localView1 = localView2;
        if (localView2 != paramView) {}
      }
      else
      {
        if (paramView == null) {
          break;
        }
        b = paramView;
        return;
      }
      if (!bool2) {
        RefreshUtils.checkCoordinatorLayout(localView2, paramRefreshKernel, this);
      }
    }
  }
  
  private View get(View paramView, boolean paramBoolean)
  {
    LinkedList localLinkedList = new LinkedList(Collections.singletonList(paramView));
    Object localObject1 = null;
    while ((!localLinkedList.isEmpty()) && (localObject1 == null))
    {
      Object localObject2 = (View)localLinkedList.poll();
      if (localObject2 != null) {
        if (((paramBoolean) || (localObject2 != paramView)) && (RefreshUtils.isContentView((View)localObject2)))
        {
          localObject1 = localObject2;
        }
        else if ((localObject2 instanceof ViewGroup))
        {
          localObject2 = (ViewGroup)localObject2;
          int j = 0;
          while (j < ((ViewGroup)localObject2).getChildCount())
          {
            localLinkedList.add(((ViewGroup)localObject2).getChildAt(j));
            j += 1;
          }
        }
      }
    }
    if (localObject1 == null) {
      return paramView;
    }
    return localObject1;
  }
  
  protected View a(View paramView1, PointF paramPointF, View paramView2)
  {
    View localView;
    if (((paramView1 instanceof ViewGroup)) && (paramPointF != null))
    {
      ViewGroup localViewGroup = (ViewGroup)paramView1;
      int j = localViewGroup.getChildCount();
      paramView1 = new PointF();
      while (j > 0)
      {
        localView = localViewGroup.getChildAt(j - 1);
        if (i.isTransformedTouchPointInView(localViewGroup, localView, x, y, paramView1))
        {
          if ((!(localView instanceof ViewPager)) && (RefreshUtils.isContentView(localView))) {
            break label135;
          }
          paramPointF.offset(x, y);
          paramView2 = a(localView, paramPointF, paramView2);
          paramPointF.offset(-x, -y);
          return paramView2;
        }
        j -= 1;
      }
    }
    return paramView2;
    label135:
    return localView;
  }
  
  public boolean canLoadMore()
  {
    return (f) && (i.canLoadMore(a));
  }
  
  public boolean canRefresh()
  {
    return (e) && (i.canRefresh(a));
  }
  
  public View getScrollableView()
  {
    return b;
  }
  
  public View getView()
  {
    return a;
  }
  
  public void moveSpinner(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt2 != -1)
    {
      localView = c.findViewById(paramInt2);
      if (localView != null)
      {
        if (paramInt1 > 0)
        {
          localView.setTranslationY(paramInt1);
          paramInt2 = 1;
          break label54;
        }
        if (localView.getTranslationY() > 0.0F) {
          localView.setTranslationY(0.0F);
        }
      }
    }
    paramInt2 = 0;
    label54:
    int j = paramInt2;
    if (paramInt3 != -1)
    {
      localView = c.findViewById(paramInt3);
      j = paramInt2;
      if (localView != null) {
        if (paramInt1 < 0)
        {
          localView.setTranslationY(paramInt1);
          j = 1;
        }
        else
        {
          j = paramInt2;
          if (localView.getTranslationY() < 0.0F)
          {
            localView.setTranslationY(0.0F);
            j = paramInt2;
          }
        }
      }
    }
    if (j == 0) {
      c.setTranslationY(paramInt1);
    } else {
      c.setTranslationY(0.0F);
    }
    View localView = h;
    if (localView != null) {
      localView.setTranslationY(Math.max(0, paramInt1));
    }
    localView = g;
    if (localView != null) {
      localView.setTranslationY(Math.min(0, paramInt1));
    }
  }
  
  public void onActionDown(MotionEvent paramMotionEvent)
  {
    paramMotionEvent = new PointF(paramMotionEvent.getX(), paramMotionEvent.getY());
    paramMotionEvent.offset(-a.getLeft(), -a.getTop());
    View localView1 = b;
    View localView2 = a;
    if (localView1 != localView2) {
      b = a(localView2, paramMotionEvent, localView1);
    }
    if (b == a)
    {
      i.f = null;
      return;
    }
    i.f = paramMotionEvent;
  }
  
  public void onAnimationUpdate(ValueAnimator paramValueAnimator)
  {
    int j = ((Integer)paramValueAnimator.getAnimatedValue()).intValue();
    try
    {
      boolean bool = b instanceof AbsListView;
      int k;
      if (bool)
      {
        paramValueAnimator = (AbsListView)b;
        k = v;
        RefreshUtils.scrollListBy(paramValueAnimator, j - k);
      }
      else
      {
        paramValueAnimator = b;
        k = v;
        paramValueAnimator.scrollBy(0, j - k);
      }
    }
    catch (Throwable paramValueAnimator)
    {
      for (;;) {}
    }
    v = j;
  }
  
  public void onCoordinatorUpdate(boolean paramBoolean1, boolean paramBoolean2)
  {
    e = paramBoolean1;
    f = paramBoolean2;
  }
  
  public ValueAnimator.AnimatorUpdateListener scrollContentWhenFinished(int paramInt)
  {
    View localView = b;
    if ((localView != null) && (paramInt != 0) && (((paramInt < 0) && (i.b(localView))) || ((paramInt > 0) && (i.a(b)))))
    {
      v = paramInt;
      return this;
    }
    return null;
  }
  
  public void setEnableLoadMoreWhenContentNotFull(boolean paramBoolean)
  {
    i.e = paramBoolean;
  }
  
  public void setScrollBound(RefreshScrollBound paramRefreshScrollBound)
  {
    if ((paramRefreshScrollBound instanceof Label))
    {
      i = ((Label)paramRefreshScrollBound);
      return;
    }
    i.i = paramRefreshScrollBound;
  }
  
  public void setUpComponent(RefreshKernel paramRefreshKernel, View paramView1, View paramView2)
  {
    a(a, paramRefreshKernel);
    if ((paramView1 != null) || (paramView2 != null))
    {
      h = paramView1;
      g = paramView2;
      FrameLayout localFrameLayout = new FrameLayout(a.getContext());
      paramRefreshKernel.getRefreshLayout().getLayout().removeView(a);
      Object localObject = a.getLayoutParams();
      localFrameLayout.addView(a, -1, -1);
      paramRefreshKernel.getRefreshLayout().getLayout().addView(localFrameLayout, (ViewGroup.LayoutParams)localObject);
      a = localFrameLayout;
      int j;
      if (paramView1 != null)
      {
        paramView1.setClickable(true);
        paramRefreshKernel = paramView1.getLayoutParams();
        localObject = (ViewGroup)paramView1.getParent();
        j = ((ViewGroup)localObject).indexOfChild(paramView1);
        ((ViewGroup)localObject).removeView(paramView1);
        height = RefreshUtils.measureViewHeight(paramView1);
        ((ViewGroup)localObject).addView(new Space(a.getContext()), j, paramRefreshKernel);
        localFrameLayout.addView(paramView1);
      }
      if (paramView2 != null)
      {
        paramView2.setClickable(true);
        paramRefreshKernel = paramView2.getLayoutParams();
        paramView1 = (ViewGroup)paramView2.getParent();
        j = paramView1.indexOfChild(paramView2);
        paramView1.removeView(paramView2);
        localObject = new FrameLayout.LayoutParams(paramRefreshKernel);
        height = RefreshUtils.measureViewHeight(paramView2);
        paramView1.addView(new Space(a.getContext()), j, paramRefreshKernel);
        gravity = 80;
        localFrameLayout.addView(paramView2, (ViewGroup.LayoutParams)localObject);
      }
    }
  }
}
