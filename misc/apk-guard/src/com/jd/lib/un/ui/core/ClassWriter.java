package com.jd.lib.un.ui.core;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.CornerPathEffect;
import android.graphics.Paint;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.NinePatchDrawable;
import android.view.View;
import com.jd.scan.R.color;
import com.jd.scan.R.drawable;
import com.jd.scan.R.integer;

public final class ClassWriter
  extends View
  implements MethodWriter
{
  private static final int[] K = { 0, 64, 128, 192, 255, 192, 128, 64 };
  private boolean G;
  private float I;
  protected boolean J;
  protected Paint a;
  private NinePatchDrawable b;
  private int c = 0;
  private Rect framingRect;
  protected Paint h;
  private final int height = getResources().getInteger(R.integer.viewfinder_border_width);
  protected int i;
  protected Paint j = new Paint();
  private final int m = getResources().getColor(R.color.viewfinder_mask);
  private final int n = getResources().getColor(R.color.viewfinder_laser);
  protected Paint paint;
  private int r = 0;
  private Bitmap right;
  private boolean s;
  private int v = 0;
  private final int x = getResources().getInteger(R.integer.viewfinder_border_length);
  private final int y = getResources().getColor(R.color.viewfinder_border);
  private Rect z;
  
  public ClassWriter(Context paramContext)
  {
    super(paramContext);
    j.setColor(n);
    j.setStyle(Paint.Style.FILL);
    h = new Paint();
    h.setColor(m);
    paint = new Paint();
    paint.setColor(y);
    paint.setStyle(Paint.Style.STROKE);
    paint.setStrokeWidth(height);
    paint.setAntiAlias(true);
    a = new Paint();
    a.setColor(-16711936);
    a.setStyle(Paint.Style.STROKE);
    a.setStrokeWidth(height);
    a.setAntiAlias(true);
    i = x;
    right = BitmapFactory.decodeResource(getResources(), R.drawable.laser_line);
    b = ((NinePatchDrawable)getResources().getDrawable(R.drawable.border_shape));
  }
  
  private void a()
  {
    for (;;)
    {
      try
      {
        Point localPoint = new Point(getWidth(), getHeight());
        k = DisplayUtils.getScreenOrientation(getContext());
        if (J)
        {
          if (k != 1) {
            k = getHeight();
          } else {
            k = getWidth();
          }
        }
        else
        {
          if (k != 1)
          {
            k = (int)(getHeight() * 0.625F);
            i1 = (int)(k * 1.4F);
          }
          else
          {
            i1 = (int)(getWidth() * 0.6666667F);
            k = (int)(i1 * 1.0F);
          }
          int i2 = i1;
          if (i1 > getWidth()) {
            i2 = getWidth() - 50;
          }
          i1 = k;
          if (k > getHeight()) {
            i1 = getHeight() - 50;
          }
          k = (x - i2) / 2;
          int i3 = (y - i1) * 10 / 35;
          framingRect = new Rect(v + k, v + i3, k + i2 - v, i3 + i1 - v);
          return;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      int i1 = (int)(k * 0.625F);
      int k = i1;
    }
  }
  
  public final void b()
  {
    a();
    invalidate();
  }
  
  public final Rect getFramingRect()
  {
    return framingRect;
  }
  
  public final void onDraw(Canvas paramCanvas)
  {
    if (getFramingRect() == null) {
      return;
    }
    Rect localRect = getFramingRect();
    b.setBounds(localRect);
    b.draw(paramCanvas);
    Object localObject;
    if (G)
    {
      localRect = getFramingRect();
      int k = top + 10;
      int i2 = localRect.height();
      int i3 = top;
      if (c < k - right.getHeight()) {
        c = (k - right.getHeight());
      }
      localObject = new RectF(2.0F, c, getWidth() - 1, c + right.getHeight());
      int i1 = right.getHeight() / 2;
      if (c < i2 + i3 - 10 - right.getHeight() + i1)
      {
        c += 7;
        if ((c > k - right.getHeight()) && (c < k + right.getHeight()))
        {
          k = r;
          if (k >= 255) {
            break label349;
          }
          j.setAlpha(k);
          k = r + 30;
        }
        else if ((c > bottom + 10 - right.getHeight()) && (c < bottom + 10 + i1))
        {
          k = r;
          if (k <= 0) {
            break label349;
          }
          j.setAlpha(k);
          k = r - 30;
        }
        else
        {
          r = 255;
          j.setAlpha(r);
          break label349;
        }
      }
      else
      {
        c = (k - right.getHeight());
        k = 0;
      }
      r = k;
      label349:
      paramCanvas.drawBitmap(right, null, (RectF)localObject, j);
      postInvalidateDelayed(10L, 0, 0, getWidth(), bottom + 10 + i1);
    }
    if (s)
    {
      localRect = z;
      if (localRect != null)
      {
        localObject = new Path();
        ((Path)localObject).moveTo(left, top + i);
        ((Path)localObject).lineTo(left, top);
        ((Path)localObject).lineTo(left + i, top);
        paramCanvas.drawPath((Path)localObject, a);
        ((Path)localObject).moveTo(right, top + i);
        ((Path)localObject).lineTo(right, top);
        ((Path)localObject).lineTo(right - i, top);
        paramCanvas.drawPath((Path)localObject, a);
        ((Path)localObject).moveTo(right, bottom - i);
        ((Path)localObject).lineTo(right, bottom);
        ((Path)localObject).lineTo(right - i, bottom);
        paramCanvas.drawPath((Path)localObject, a);
        ((Path)localObject).moveTo(left, bottom - i);
        ((Path)localObject).lineTo(left, bottom);
        ((Path)localObject).lineTo(left + i, bottom);
        paramCanvas.drawPath((Path)localObject, a);
      }
    }
  }
  
  protected final void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    a();
  }
  
  public final void setBorderAlpha(float paramFloat)
  {
    int k = (int)(255.0F * paramFloat);
    I = paramFloat;
    paint.setAlpha(k);
  }
  
  public final void setBorderColor(int paramInt)
  {
    paint.setColor(paramInt);
  }
  
  public final void setBorderCornerRadius(int paramInt)
  {
    paint.setPathEffect(new CornerPathEffect(paramInt));
  }
  
  public final void setBorderCornerRounded(boolean paramBoolean)
  {
    Paint localPaint;
    if (paramBoolean) {
      localPaint = paint;
    }
    for (Paint.Join localJoin = Paint.Join.ROUND;; localJoin = Paint.Join.BEVEL)
    {
      localPaint.setStrokeJoin(localJoin);
      return;
      localPaint = paint;
    }
  }
  
  public final void setBorderLineLength(int paramInt)
  {
    i = paramInt;
  }
  
  public final void setBorderStrokeWidth(int paramInt)
  {
    paint.setStrokeWidth(paramInt);
  }
  
  public final void setDrawDetect(boolean paramBoolean)
  {
    s = paramBoolean;
  }
  
  public final void setLaserColor(int paramInt)
  {
    j.setColor(paramInt);
  }
  
  public final void setLaserEnabled(boolean paramBoolean)
  {
    G = paramBoolean;
  }
  
  public final void setMaskColor(int paramInt)
  {
    h.setColor(paramInt);
  }
  
  public final void setSquareViewFinder(boolean paramBoolean)
  {
    J = paramBoolean;
  }
  
  public final void setViewFinderOffset(int paramInt)
  {
    v = paramInt;
  }
}
