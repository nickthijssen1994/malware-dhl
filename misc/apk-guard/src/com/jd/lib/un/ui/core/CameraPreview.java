package com.jd.lib.un.ui.core;

import android.content.Context;
import android.graphics.Point;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.Handler;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import java.util.Iterator;
import java.util.List;

public final class CameraPreview
  extends SurfaceView
  implements SurfaceHolder.Callback
{
  android.hardware.Camera.AutoFocusCallback TAG = new Camera.AutoFocusCallback(this);
  private int b;
  private boolean defaultValue = true;
  private Camera.PreviewCallback info;
  private long last;
  private Logger log;
  private boolean mAutoFocus = true;
  private Camera mCamera;
  private Handler mHandler;
  private boolean mPreviewing = true;
  private boolean mSurfaceCreated = false;
  private Runnable mTask = new MonthByWeekFragment.2(this);
  public boolean state;
  private float width = 0.1F;
  private float x;
  
  public CameraPreview(Context paramContext, Camera paramCamera, Camera.PreviewCallback paramPreviewCallback)
  {
    super(paramContext);
    log = ((Logger)paramContext);
    initialize(paramCamera, paramPreviewCallback);
    mHandler = new Handler();
    getHolder().addCallback(this);
    getHolder().setType(3);
  }
  
  private Camera.Size getOptimalPreviewSize()
  {
    Object localObject2 = mCamera;
    Object localObject1 = null;
    if (localObject2 == null) {
      return null;
    }
    Object localObject3 = mCamera.getParameters().getSupportedPreviewSizes();
    int j = getWidth();
    int m = j;
    int i = getHeight();
    int k = i;
    if (DisplayUtils.getScreenOrientation(getContext()) == 1)
    {
      k = j;
      m = i;
    }
    double d1 = m;
    double d2 = k;
    Double.isNaN(d1);
    Double.isNaN(d2);
    double d3 = d1 / d2;
    if (localObject3 == null) {
      return null;
    }
    Iterator localIterator = ((List)localObject3).iterator();
    d2 = Double.MAX_VALUE;
    d1 = Double.MAX_VALUE;
    while (localIterator.hasNext())
    {
      localObject2 = (Camera.Size)localIterator.next();
      double d4 = width;
      double d5 = height;
      Double.isNaN(d4);
      Double.isNaN(d5);
      if ((Math.abs(d4 / d5 - d3) <= width) && (Math.abs(height - k) < d1))
      {
        d1 = Math.abs(height - k);
        localObject1 = localObject2;
      }
    }
    localObject2 = localObject1;
    if (localObject1 == null)
    {
      localObject3 = ((List)localObject3).iterator();
      d1 = d2;
      for (;;)
      {
        localObject2 = localObject1;
        if (!((Iterator)localObject3).hasNext()) {
          break;
        }
        localObject2 = (Camera.Size)((Iterator)localObject3).next();
        if (Math.abs(height - k) < d1)
        {
          i = Math.abs(height - k);
          localObject1 = localObject2;
          d1 = i;
        }
      }
    }
    return localObject2;
  }
  
  private Point init(Point paramPoint)
  {
    if (getDisplayOrientation() % 180 == 0) {
      return paramPoint;
    }
    return new Point(y, x);
  }
  
  private void init(int paramInt1, int paramInt2)
  {
    ViewGroup.LayoutParams localLayoutParams = getLayoutParams();
    if (getDisplayOrientation() % 180 != 0)
    {
      i = paramInt2;
      paramInt2 = paramInt1;
      paramInt1 = i;
    }
    int j = paramInt1;
    int i = paramInt2;
    if (defaultValue)
    {
      i = ((View)getParent()).getWidth();
      j = ((View)getParent()).getHeight();
      float f1 = i;
      float f4 = paramInt1;
      float f2 = f1 / f4;
      f1 = j;
      float f5 = paramInt2;
      float f3 = f1 / f5;
      f1 = f2;
      if (f2 <= f3) {
        f1 = f3;
      }
      j = Math.round(f4 * f1);
      i = Math.round(f5 * f1);
    }
    width = j;
    height = i;
    setLayoutParams(localLayoutParams);
  }
  
  private void open(Camera.Size paramSize)
  {
    Point localPoint = init(new Point(getWidth(), getHeight()));
    float f = width / height;
    int i;
    if (x / y > f) {
      i = (int)(y * f);
    }
    for (int j = y;; j = (int)(x / f))
    {
      init(i, j);
      return;
      i = x;
    }
  }
  
  private void resume()
  {
    mHandler.postDelayed(mTask, 1000L);
  }
  
  private static float spacing(MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX(1) - paramMotionEvent.getX(0);
    float f2 = paramMotionEvent.getY(1) - paramMotionEvent.getY(0);
    return (float)Math.sqrt(f1 * f1 + f2 * f2);
  }
  
  private void switchCamera()
  {
    Camera.Size localSize = getOptimalPreviewSize();
    Camera.Parameters localParameters = mCamera.mCamera.getParameters();
    localParameters.setPreviewSize(width, height);
    mCamera.mCamera.setParameters(localParameters);
    open(localSize);
  }
  
  public final int getDisplayOrientation()
  {
    Object localObject = mCamera;
    int j = 0;
    if (localObject == null) {
      return 0;
    }
    localObject = new Camera.CameraInfo();
    if (mCamera.info == -1) {
      android.hardware.Camera.getCameraInfo(0, (Camera.CameraInfo)localObject);
    } else {
      android.hardware.Camera.getCameraInfo(mCamera.info, (Camera.CameraInfo)localObject);
    }
    int i = j;
    switch (((WindowManager)getContext().getSystemService("window")).getDefaultDisplay().getRotation())
    {
    default: 
      i = j;
      break;
    case 3: 
      i = 270;
      break;
    case 2: 
      i = 180;
      break;
    case 1: 
      i = 90;
    }
    if (facing == 1) {
      i = 360 - (orientation + i) % 360;
    } else {
      i = orientation - i + 360;
    }
    return i % 360;
  }
  
  public final void initialize(Camera paramCamera, Camera.PreviewCallback paramPreviewCallback)
  {
    mCamera = paramCamera;
    info = paramPreviewCallback;
  }
  
  public final boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    Object localObject1 = log;
    if (localObject1 != null) {
      ((Logger)localObject1).d();
    }
    int i;
    if ((mCamera != null) && (mPreviewing)) {
      i = 1;
    } else {
      i = 0;
    }
    if (i == 0) {
      return super.onTouchEvent(paramMotionEvent);
    }
    boolean bool;
    if (paramMotionEvent.getPointerCount() == 1)
    {
      i = paramMotionEvent.getAction() & 0xFF;
      if (i == 0)
      {
        state = true;
        long l = System.currentTimeMillis();
        if (l - last < 300L)
        {
          paramMotionEvent = mCamera.mCamera;
          try
          {
            paramMotionEvent = paramMotionEvent.getParameters();
            bool = paramMotionEvent.isZoomSupported();
            if (bool)
            {
              int k = -1;
              localObject1 = paramMotionEvent.getZoomRatios();
              Object localObject2 = ((List)localObject1).get(0);
              localObject2 = (Integer)localObject2;
              int m = ((Integer)localObject2).intValue();
              i = 0;
              for (;;)
              {
                int n = ((List)localObject1).size();
                j = k;
                if (i >= n) {
                  break label232;
                }
                localObject2 = ((List)localObject1).get(i);
                localObject2 = (Integer)localObject2;
                j = ((Integer)localObject2).intValue();
                if (j >= m * 3) {
                  break;
                }
                j = ((List)localObject1).size();
                if (i == j - 1) {
                  break;
                }
                i += 1;
              }
              int j = i;
              label232:
              i = paramMotionEvent.getZoom();
              if (i < j)
              {
                paramMotionEvent.setZoom(j);
                localObject1 = mCamera.mCamera;
                ((android.hardware.Camera)localObject1).setParameters(paramMotionEvent);
              }
              for (;;)
              {
                state = true;
                break;
                if (i < j) {
                  break;
                }
                paramMotionEvent.setZoom(0);
                localObject1 = mCamera.mCamera;
                ((android.hardware.Camera)localObject1).setParameters(paramMotionEvent);
              }
            }
            last = l;
          }
          catch (Exception paramMotionEvent)
          {
            paramMotionEvent.printStackTrace();
            last = 0L;
            return true;
          }
        }
        return true;
      }
      if (i != 1) {
        break label545;
      }
    }
    else
    {
      if (paramMotionEvent.getPointerCount() != 2) {
        break label545;
      }
      i = paramMotionEvent.getAction() & 0xFF;
      if (i == 5) {
        break label491;
      }
    }
    switch (i)
    {
    default: 
      return true;
    case 2: 
      if (paramMotionEvent.getPointerCount() >= 2)
      {
        i = (int)((spacing(paramMotionEvent) - x) / 20.0F);
        i = b + i;
        paramMotionEvent = mCamera.mCamera.getParameters();
        if (paramMotionEvent.isZoomSupported())
        {
          if ((i < paramMotionEvent.getMaxZoom()) && (i > 0))
          {
            paramMotionEvent.setZoom(i);
            mCamera.mCamera.setParameters(paramMotionEvent);
            state = true;
            return true;
          }
        }
        else
        {
          Log.d("CameraPreview", "support zoom false");
          return true;
        }
      }
      break;
    case 1: 
      state = false;
      return true;
      label491:
      x = spacing(paramMotionEvent);
      paramMotionEvent = mCamera.mCamera;
      try
      {
        paramMotionEvent = paramMotionEvent.getParameters();
        bool = paramMotionEvent.isZoomSupported();
        if (bool)
        {
          i = paramMotionEvent.getZoom();
          b = i;
        }
        state = true;
        return true;
      }
      catch (Exception paramMotionEvent)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    label545:
    return true;
  }
  
  public final void pause()
  {
    if (mCamera != null) {
      try
      {
        getHolder().addCallback(this);
        mPreviewing = true;
        switchCamera();
        android.hardware.Camera localCamera = mCamera.mCamera;
        localCamera.setPreviewDisplay(getHolder());
        localCamera = mCamera.mCamera;
        localCamera.setDisplayOrientation(getDisplayOrientation());
        localCamera = mCamera.mCamera;
        Camera.PreviewCallback localPreviewCallback = info;
        localCamera.setOneShotPreviewCallback(localPreviewCallback);
        localCamera = mCamera.mCamera;
        localCamera.startPreview();
        if (mAutoFocus)
        {
          if (mSurfaceCreated)
          {
            startPreview();
            return;
          }
          resume();
          return;
        }
      }
      catch (Exception localException)
      {
        Log.e("CameraPreview", localException.toString(), localException);
      }
    }
  }
  
  public final void setAspectTolerance(float paramFloat)
  {
    width = paramFloat;
  }
  
  public final void setAutoFocus(boolean paramBoolean)
  {
    Camera localCamera = mCamera;
    if ((localCamera != null) && (mPreviewing))
    {
      if (paramBoolean == mAutoFocus) {
        return;
      }
      mAutoFocus = paramBoolean;
      if (mAutoFocus)
      {
        if (mSurfaceCreated)
        {
          startPreview();
          return;
        }
        resume();
        return;
      }
      mCamera.cancelAutoFocus();
    }
  }
  
  public final void setShouldScaleToFill(boolean paramBoolean)
  {
    defaultValue = paramBoolean;
  }
  
  public final void startPreview()
  {
    try
    {
      mCamera.mCamera.autoFocus(TAG);
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      for (;;) {}
    }
    resume();
  }
  
  public final void stopCameraPreview()
  {
    if (mCamera != null)
    {
      mPreviewing = false;
      try
      {
        getHolder().removeCallback(this);
        android.hardware.Camera localCamera = mCamera.mCamera;
        localCamera.cancelAutoFocus();
        localCamera = mCamera.mCamera;
        localCamera.setOneShotPreviewCallback(null);
        localCamera = mCamera.mCamera;
        localCamera.stopPreview();
        return;
      }
      catch (Exception localException)
      {
        Log.e("CameraPreview", localException.toString(), localException);
      }
    }
  }
  
  public final void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramSurfaceHolder.getSurface() == null) {
      return;
    }
    stopCameraPreview();
    pause();
  }
  
  public final void surfaceCreated(SurfaceHolder paramSurfaceHolder)
  {
    mSurfaceCreated = true;
  }
  
  public final void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
  {
    mSurfaceCreated = false;
    stopCameraPreview();
  }
}
