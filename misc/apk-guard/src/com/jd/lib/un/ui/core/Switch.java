package com.jd.lib.un.ui.core;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Rect;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.ColorInt;
import com.jd.scan.R.color;
import com.jd.scan.R.integer;

public abstract class Switch
  extends FrameLayout
  implements Camera.PreviewCallback, SensorEventListener, Settings
{
  private float B = 1.0F;
  private boolean b = false;
  private Boolean c;
  public Settings context;
  private boolean d = false;
  private boolean e = true;
  @ColorInt
  private int f = getResources().getColor(R.color.viewfinder_laser);
  public Label handler;
  private int i = 0;
  @ColorInt
  private int k = getResources().getColor(R.color.viewfinder_border);
  private boolean l = true;
  public Camera mCamera;
  private ImageView mImage;
  private TextView mSpeedView;
  private int n = getResources().getInteger(R.integer.viewfinder_border_length);
  private TextView nameTextView;
  private MethodWriter o;
  private int p = 0;
  private Rect r;
  private boolean s = false;
  public SensorManager sensorManager;
  private float t = 0.1F;
  public CameraPreview this$0;
  private boolean w = true;
  private int y = getResources().getColor(R.color.viewfinder_mask);
  private int z = getResources().getInteger(R.integer.viewfinder_border_width);
  
  public Switch(Context paramContext)
  {
    super(paramContext);
    paramContext = new ClassWriter(getContext());
    paramContext.setBorderColor(k);
    paramContext.setLaserColor(f);
    paramContext.setLaserEnabled(l);
    paramContext.setDrawDetect(b);
    paramContext.setBorderStrokeWidth(z);
    paramContext.setBorderLineLength(n);
    paramContext.setMaskColor(y);
    paramContext.setBorderCornerRounded(d);
    paramContext.setBorderCornerRadius(p);
    paramContext.setSquareViewFinder(s);
    paramContext.setViewFinderOffset(i);
    o = paramContext;
    sensorManager = ((SensorManager)getContext().getSystemService("sensor"));
  }
  
  public boolean getFlash()
  {
    Camera localCamera = mCamera;
    return (localCamera != null) && (CameraUtils.isFlashSupported(mCamera)) && (mCamera.mCamera.getParameters().getFlashMode().equals("torch"));
  }
  
  public CameraPreview getPreview()
  {
    return this$0;
  }
  
  public Rect getQrDetectRect()
  {
    return r;
  }
  
  public int getRotationCount()
  {
    return this$0.getDisplayOrientation() / 90;
  }
  
  public int getScanRectEnd()
  {
    return DisplayUtils.setBackground((Activity)getContext()) / 2 + getScanRectHeight() / 2;
  }
  
  public int getScanRectHeight()
  {
    return (int)(DisplayUtils.onActivityCreated((Activity)getContext()) * 0.6666667F * 1.0F);
  }
  
  public int getScanRectTop()
  {
    return DisplayUtils.setBackground((Activity)getContext()) / 2 - getScanRectHeight() / 2;
  }
  
  public MethodWriter getViewFinderView()
  {
    return o;
  }
  
  public void onAccuracyChanged(Sensor paramSensor, int paramInt) {}
  
  public void onSensorChanged(SensorEvent paramSensorEvent)
  {
    if (sensor.getType() == 5)
    {
      float f1 = values[0];
      paramSensorEvent = context;
      if (paramSensorEvent != null) {
        paramSensorEvent.update(f1);
      }
    }
  }
  
  public void setAspectTolerance(float paramFloat)
  {
    t = paramFloat;
  }
  
  public void setAutoFocus(boolean paramBoolean)
  {
    e = paramBoolean;
    CameraPreview localCameraPreview = this$0;
    if (localCameraPreview != null) {
      localCameraPreview.setAutoFocus(paramBoolean);
    }
  }
  
  public void setBorderAlpha(float paramFloat)
  {
    B = paramFloat;
    o.setBorderAlpha(B);
    o.b();
  }
  
  public void setBorderColor(int paramInt)
  {
    k = paramInt;
    o.setBorderColor(k);
    o.b();
  }
  
  public void setBorderCornerRadius(int paramInt)
  {
    p = paramInt;
    o.setBorderCornerRadius(p);
    o.b();
  }
  
  public void setBorderLineLength(int paramInt)
  {
    n = paramInt;
    o.setBorderLineLength(n);
    o.b();
  }
  
  public void setBorderStrokeWidth(int paramInt)
  {
    z = paramInt;
    o.setBorderStrokeWidth(z);
    o.b();
  }
  
  public void setDrawDetect(boolean paramBoolean)
  {
    b = paramBoolean;
    o.setDrawDetect(paramBoolean);
    o.b();
  }
  
  public void setFlash(boolean paramBoolean)
  {
    c = Boolean.valueOf(paramBoolean);
    Object localObject = mCamera;
    if ((localObject != null) && (CameraUtils.isFlashSupported(mCamera)))
    {
      Camera.Parameters localParameters = mCamera.mCamera.getParameters();
      if (paramBoolean)
      {
        if (localParameters.getFlashMode().equals("torch")) {
          return;
        }
        localObject = "torch";
      }
      else
      {
        if (localParameters.getFlashMode().equals("off")) {
          return;
        }
        localObject = "off";
      }
      localParameters.setFlashMode((String)localObject);
      mCamera.mCamera.setParameters(localParameters);
    }
  }
  
  public void setFlashButtonEnable(boolean paramBoolean)
  {
    if (paramBoolean) {
      context = this;
    }
  }
  
  public void setIsBorderCornerRounded(boolean paramBoolean)
  {
    d = paramBoolean;
    o.setBorderCornerRounded(d);
    o.b();
  }
  
  public void setLaserColor(int paramInt)
  {
    f = paramInt;
    o.setLaserColor(f);
    o.b();
  }
  
  public void setLaserEnabled(boolean paramBoolean)
  {
    l = paramBoolean;
    o.setLaserEnabled(l);
    o.b();
  }
  
  public void setMaskColor(int paramInt)
  {
    y = paramInt;
    o.setMaskColor(y);
    o.b();
  }
  
  public void setOnLightChangedListener(Settings paramSettings)
  {
    context = paramSettings;
  }
  
  public void setShouldScaleToFill(boolean paramBoolean)
  {
    w = paramBoolean;
  }
  
  public void setSquareViewFinder(boolean paramBoolean)
  {
    s = paramBoolean;
    o.setSquareViewFinder(s);
    o.b();
  }
  
  public void setupCameraPreview(Camera paramCamera)
  {
    mCamera = paramCamera;
    paramCamera = mCamera;
    if (paramCamera != null)
    {
      setupLayout(paramCamera);
      o.b();
      paramCamera = c;
      if (paramCamera != null) {
        setFlash(paramCamera.booleanValue());
      }
      setAutoFocus(e);
    }
  }
  
  public final void setupLayout(Camera paramCamera)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a3 = a2\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public final void update(float paramFloat)
  {
    ImageView localImageView = mImage;
    if (localImageView == null) {
      return;
    }
    if (paramFloat < 50.0D)
    {
      if (localImageView.getVisibility() != 0) {
        post(new AgendaListView.2(this));
      }
    }
    else if ((localImageView.getVisibility() == 0) && (!getFlash())) {
      post(new NotificationManager.3(this));
    }
  }
}
