package com.jd.lib.un.utils;

import android.content.Context;
import android.os.Environment;
import java.io.File;

public class UnCleanUtils
{
  public UnCleanUtils() {}
  
  public static boolean cleanExternalCache(Context paramContext)
  {
    return ("mounted".equals(Environment.getExternalStorageState())) && (deleteFilesInDir(paramContext.getApplicationContext().getExternalCacheDir()));
  }
  
  public static boolean cleanInternalCache(Context paramContext)
  {
    return deleteFilesInDir(paramContext.getApplicationContext().getCacheDir());
  }
  
  public static boolean cleanInternalDbByName(Context paramContext, String paramString)
  {
    return paramContext.getApplicationContext().deleteDatabase(paramString);
  }
  
  public static boolean cleanInternalDbs(Context paramContext)
  {
    return deleteFilesInDir(new File(paramContext.getApplicationContext().getFilesDir().getParent(), "databases"));
  }
  
  public static boolean cleanInternalFiles(Context paramContext)
  {
    return deleteFilesInDir(paramContext.getApplicationContext().getFilesDir());
  }
  
  public static boolean cleanInternalSp(Context paramContext)
  {
    return deleteFilesInDir(new File(paramContext.getApplicationContext().getFilesDir().getParent(), "shared_prefs"));
  }
  
  private static boolean deleteDir(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    if (!paramFile.exists()) {
      return true;
    }
    if (!paramFile.isDirectory()) {
      return false;
    }
    File[] arrayOfFile = paramFile.listFiles();
    if ((arrayOfFile != null) && (arrayOfFile.length != 0))
    {
      int j = arrayOfFile.length;
      int i = 0;
      while (i < j)
      {
        File localFile = arrayOfFile[i];
        if (localFile.isFile())
        {
          if (!localFile.delete()) {
            return false;
          }
        }
        else if ((localFile.isDirectory()) && (!deleteDir(localFile))) {
          return false;
        }
        i += 1;
      }
    }
    return paramFile.delete();
  }
  
  private static boolean deleteFilesInDir(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    if (!paramFile.exists()) {
      return true;
    }
    if (!paramFile.isDirectory()) {
      return false;
    }
    paramFile = paramFile.listFiles();
    if ((paramFile != null) && (paramFile.length != 0))
    {
      int j = paramFile.length;
      int i = 0;
      while (i < j)
      {
        File localFile = paramFile[i];
        if (localFile.isFile())
        {
          if (!localFile.delete()) {
            return false;
          }
        }
        else if ((localFile.isDirectory()) && (!deleteDir(localFile))) {
          return false;
        }
        i += 1;
      }
    }
    return true;
  }
  
  public static boolean deleteFilesInDir(String paramString)
  {
    return deleteFilesInDir(getFileByPath(paramString));
  }
  
  private static File getFileByPath(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return null;
    }
    return new File(paramString);
  }
}
