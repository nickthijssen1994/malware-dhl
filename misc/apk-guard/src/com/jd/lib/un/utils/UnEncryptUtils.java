package com.jd.lib.un.utils;

import android.util.Base64;
import java.io.File;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.Mac;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class UnEncryptUtils
{
  private static char[] HEX_DIGITS = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
  
  public UnEncryptUtils() {}
  
  private static byte[] base64Decode(byte[] paramArrayOfByte)
  {
    return Base64.decode(paramArrayOfByte, 2);
  }
  
  public static byte[] base64Encode(byte[] paramArrayOfByte)
  {
    return Base64.encode(paramArrayOfByte, 2);
  }
  
  private static String bytes2HexString(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return "";
    }
    int k = paramArrayOfByte.length;
    if (k <= 0) {
      return "";
    }
    char[] arrayOfChar1 = new char[k << 1];
    int i = 0;
    int j = 0;
    while (i < k)
    {
      int m = j + 1;
      char[] arrayOfChar2 = HEX_DIGITS;
      arrayOfChar1[j] = arrayOfChar2[(paramArrayOfByte[i] >>> 4 & 0xF)];
      j = m + 1;
      arrayOfChar1[m] = arrayOfChar2[(paramArrayOfByte[i] & 0xF)];
      i += 1;
    }
    return new String(arrayOfChar1);
  }
  
  private static String bytes2HexStringLowercase(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return "";
    }
    String str = "";
    int j = paramArrayOfByte.length;
    int i = 0;
    while (i < j)
    {
      Object localObject2 = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      Object localObject1 = localObject2;
      if (((String)localObject2).length() == 1)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("0");
        ((StringBuilder)localObject1).append((String)localObject2);
        localObject1 = ((StringBuilder)localObject1).toString();
      }
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append(str);
      ((StringBuilder)localObject2).append((String)localObject1);
      str = ((StringBuilder)localObject2).toString();
      i += 1;
    }
    return str;
  }
  
  public static byte[] decrypt3DES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return symmetricTemplate(paramArrayOfByte1, paramArrayOfByte2, "DESede", paramString, paramArrayOfByte3, false);
  }
  
  public static byte[] decryptAES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return symmetricTemplate(paramArrayOfByte1, paramArrayOfByte2, "AES", paramString, paramArrayOfByte3, false);
  }
  
  public static byte[] decryptBase643DES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return decrypt3DES(base64Decode(paramArrayOfByte1), paramArrayOfByte2, paramString, paramArrayOfByte3);
  }
  
  public static byte[] decryptBase64AES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return decryptAES(base64Decode(paramArrayOfByte1), paramArrayOfByte2, paramString, paramArrayOfByte3);
  }
  
  public static byte[] decryptBase64DES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return decryptDES(base64Decode(paramArrayOfByte1), paramArrayOfByte2, paramString, paramArrayOfByte3);
  }
  
  public static byte[] decryptDES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return symmetricTemplate(paramArrayOfByte1, paramArrayOfByte2, "DES", paramString, paramArrayOfByte3, false);
  }
  
  public static byte[] decryptHexString3DES(String paramString1, byte[] paramArrayOfByte1, String paramString2, byte[] paramArrayOfByte2)
  {
    return decrypt3DES(hexString2Bytes(paramString1), paramArrayOfByte1, paramString2, paramArrayOfByte2);
  }
  
  public static byte[] decryptHexStringAES(String paramString1, byte[] paramArrayOfByte1, String paramString2, byte[] paramArrayOfByte2)
  {
    return decryptAES(hexString2Bytes(paramString1), paramArrayOfByte1, paramString2, paramArrayOfByte2);
  }
  
  public static byte[] decryptHexStringDES(String paramString1, byte[] paramArrayOfByte1, String paramString2, byte[] paramArrayOfByte2)
  {
    return decryptDES(hexString2Bytes(paramString1), paramArrayOfByte1, paramString2, paramArrayOfByte2);
  }
  
  public static byte[] encrypt3DES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return symmetricTemplate(paramArrayOfByte1, paramArrayOfByte2, "DESede", paramString, paramArrayOfByte3, true);
  }
  
  public static byte[] encrypt3DES2Base64(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return base64Encode(encrypt3DES(paramArrayOfByte1, paramArrayOfByte2, paramString, paramArrayOfByte3));
  }
  
  public static String encrypt3DES2HexString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return bytes2HexString(encrypt3DES(paramArrayOfByte1, paramArrayOfByte2, paramString, paramArrayOfByte3));
  }
  
  public static byte[] encryptAES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return symmetricTemplate(paramArrayOfByte1, paramArrayOfByte2, "AES", paramString, paramArrayOfByte3, true);
  }
  
  public static byte[] encryptAES2Base64(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return base64Encode(encryptAES(paramArrayOfByte1, paramArrayOfByte2, paramString, paramArrayOfByte3));
  }
  
  public static String encryptAES2HexString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return bytes2HexString(encryptAES(paramArrayOfByte1, paramArrayOfByte2, paramString, paramArrayOfByte3));
  }
  
  public static byte[] encryptDES(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return symmetricTemplate(paramArrayOfByte1, paramArrayOfByte2, "DES", paramString, paramArrayOfByte3, true);
  }
  
  public static byte[] encryptDES2Base64(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return base64Encode(encryptDES(paramArrayOfByte1, paramArrayOfByte2, paramString, paramArrayOfByte3));
  }
  
  public static String encryptDES2HexString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString, byte[] paramArrayOfByte3)
  {
    return bytes2HexString(encryptDES(paramArrayOfByte1, paramArrayOfByte2, paramString, paramArrayOfByte3));
  }
  
  public static byte[] encryptHmacMD5(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return hmacTemplate(paramArrayOfByte1, paramArrayOfByte2, "HmacMD5");
  }
  
  public static String encryptHmacMD5ToString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0) && (paramString2 != null) && (paramString2.length() != 0)) {
      return encryptHmacMD5ToString(paramString1.getBytes(), paramString2.getBytes());
    }
    return "";
  }
  
  public static String encryptHmacMD5ToString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return bytes2HexString(encryptHmacMD5(paramArrayOfByte1, paramArrayOfByte2));
  }
  
  public static byte[] encryptHmacSHA1(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return hmacTemplate(paramArrayOfByte1, paramArrayOfByte2, "HmacSHA1");
  }
  
  public static String encryptHmacSHA1ToString(String paramString1, String paramString2, boolean paramBoolean)
  {
    if ((paramString1 != null) && (paramString1.length() != 0) && (paramString2 != null) && (paramString2.length() != 0)) {
      return encryptHmacSHA1ToString(paramString1.getBytes(), paramString2.getBytes(), paramBoolean);
    }
    return "";
  }
  
  public static String encryptHmacSHA1ToString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, boolean paramBoolean)
  {
    if (paramBoolean) {
      return bytes2HexStringLowercase(encryptHmacSHA1(paramArrayOfByte1, paramArrayOfByte2));
    }
    return bytes2HexString(encryptHmacSHA1(paramArrayOfByte1, paramArrayOfByte2));
  }
  
  public static byte[] encryptHmacSHA224(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return hmacTemplate(paramArrayOfByte1, paramArrayOfByte2, "HmacSHA224");
  }
  
  public static String encryptHmacSHA224ToString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0) && (paramString2 != null) && (paramString2.length() != 0)) {
      return encryptHmacSHA224ToString(paramString1.getBytes(), paramString2.getBytes());
    }
    return "";
  }
  
  public static String encryptHmacSHA224ToString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return bytes2HexString(encryptHmacSHA224(paramArrayOfByte1, paramArrayOfByte2));
  }
  
  public static byte[] encryptHmacSHA256(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return hmacTemplate(paramArrayOfByte1, paramArrayOfByte2, "HmacSHA256");
  }
  
  public static String encryptHmacSHA256ToString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0) && (paramString2 != null) && (paramString2.length() != 0)) {
      return encryptHmacSHA256ToString(paramString1.getBytes(), paramString2.getBytes());
    }
    return "";
  }
  
  public static String encryptHmacSHA256ToString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return bytes2HexString(encryptHmacSHA256(paramArrayOfByte1, paramArrayOfByte2));
  }
  
  public static byte[] encryptHmacSHA384(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return hmacTemplate(paramArrayOfByte1, paramArrayOfByte2, "HmacSHA384");
  }
  
  public static String encryptHmacSHA384ToString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0) && (paramString2 != null) && (paramString2.length() != 0)) {
      return encryptHmacSHA384ToString(paramString1.getBytes(), paramString2.getBytes());
    }
    return "";
  }
  
  public static String encryptHmacSHA384ToString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return bytes2HexString(encryptHmacSHA384(paramArrayOfByte1, paramArrayOfByte2));
  }
  
  public static byte[] encryptHmacSHA512(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return hmacTemplate(paramArrayOfByte1, paramArrayOfByte2, "HmacSHA512");
  }
  
  public static String encryptHmacSHA512ToString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0) && (paramString2 != null) && (paramString2.length() != 0)) {
      return encryptHmacSHA512ToString(paramString1.getBytes(), paramString2.getBytes());
    }
    return "";
  }
  
  public static String encryptHmacSHA512ToString(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return bytes2HexString(encryptHmacSHA512(paramArrayOfByte1, paramArrayOfByte2));
  }
  
  public static byte[] encryptMD2(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "MD2");
  }
  
  public static String encryptMD2ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptMD2ToString(paramString.getBytes());
    }
    return "";
  }
  
  public static String encryptMD2ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptMD2(paramArrayOfByte));
  }
  
  public static byte[] encryptMD5(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "MD5");
  }
  
  public static byte[] encryptMD5File(File paramFile)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a3 = a2\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static byte[] encryptMD5File(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      paramString = null;
    } else {
      paramString = new File(paramString);
    }
    return encryptMD5File(paramString);
  }
  
  public static String encryptMD5File2String(File paramFile)
  {
    return bytes2HexString(encryptMD5File(paramFile));
  }
  
  public static String encryptMD5File2String(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      paramString = null;
    } else {
      paramString = new File(paramString);
    }
    return encryptMD5File2String(paramString);
  }
  
  public static String encryptMD5ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptMD5ToString(paramString.getBytes());
    }
    return "";
  }
  
  public static String encryptMD5ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptMD5(paramArrayOfByte));
  }
  
  public static byte[] encryptSHA1(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "SHA1");
  }
  
  public static String encryptSHA1ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptSHA1ToString(paramString.getBytes());
    }
    return "";
  }
  
  public static String encryptSHA1ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptSHA1(paramArrayOfByte));
  }
  
  private static byte[] encryptSHA224(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "SHA224");
  }
  
  private static String encryptSHA224ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptSHA224ToString(paramString.getBytes());
    }
    return "";
  }
  
  private static String encryptSHA224ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptSHA224(paramArrayOfByte));
  }
  
  public static byte[] encryptSHA256(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "SHA256");
  }
  
  public static String encryptSHA256ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptSHA256ToString(paramString.getBytes());
    }
    return "";
  }
  
  public static String encryptSHA256ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptSHA256(paramArrayOfByte));
  }
  
  public static byte[] encryptSHA384(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "SHA384");
  }
  
  public static String encryptSHA384ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptSHA384ToString(paramString.getBytes());
    }
    return "";
  }
  
  public static String encryptSHA384ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptSHA384(paramArrayOfByte));
  }
  
  public static byte[] encryptSHA512(byte[] paramArrayOfByte)
  {
    return hashTemplate(paramArrayOfByte, "SHA512");
  }
  
  public static String encryptSHA512ToString(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return encryptSHA512ToString(paramString.getBytes());
    }
    return "";
  }
  
  public static String encryptSHA512ToString(byte[] paramArrayOfByte)
  {
    return bytes2HexString(encryptSHA512(paramArrayOfByte));
  }
  
  private static byte[] hashTemplate(byte[] paramArrayOfByte, String paramString)
  {
    if (paramArrayOfByte != null)
    {
      if (paramArrayOfByte.length <= 0) {
        return null;
      }
      try
      {
        paramString = MessageDigest.getInstance(paramString);
        paramString.update(paramArrayOfByte);
        paramArrayOfByte = paramString.digest();
        return paramArrayOfByte;
      }
      catch (NoSuchAlgorithmException paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  private static int hex2Dec(char paramChar)
  {
    if ((paramChar >= '0') && (paramChar <= '9')) {
      return paramChar - '0';
    }
    if ((paramChar >= 'A') && (paramChar <= 'F')) {
      return paramChar - 'A' + 10;
    }
    throw new IllegalArgumentException();
  }
  
  public static byte[] hexString2Bytes(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return null;
    }
    int j = paramString.length();
    int i = j;
    Object localObject = paramString;
    if (j % 2 != 0)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("0");
      ((StringBuilder)localObject).append(paramString);
      localObject = ((StringBuilder)localObject).toString();
      i = j + 1;
    }
    paramString = ((String)localObject).toUpperCase().toCharArray();
    localObject = new byte[i >> 1];
    j = 0;
    while (j < i)
    {
      localObject[(j >> 1)] = ((byte)(hex2Dec(paramString[j]) << 4 | hex2Dec(paramString[(j + 1)])));
      j += 2;
    }
    return localObject;
  }
  
  private static byte[] hmacTemplate(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString)
  {
    if ((paramArrayOfByte1 != null) && (paramArrayOfByte1.length != 0) && (paramArrayOfByte2 != null))
    {
      if (paramArrayOfByte2.length == 0) {
        return null;
      }
      try
      {
        paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, paramString);
        paramString = Mac.getInstance(paramString);
        paramString.init(paramArrayOfByte2);
        paramArrayOfByte1 = paramString.doFinal(paramArrayOfByte1);
        return paramArrayOfByte1;
      }
      catch (NoSuchAlgorithmException paramArrayOfByte1) {}catch (InvalidKeyException paramArrayOfByte1) {}
      ((GeneralSecurityException)paramArrayOfByte1).printStackTrace();
    }
    return null;
  }
  
  private static byte[] symmetricTemplate(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, String paramString1, String paramString2, byte[] paramArrayOfByte3, boolean paramBoolean)
  {
    if ((paramArrayOfByte1 != null) && (paramArrayOfByte1.length != 0) && (paramArrayOfByte2 != null))
    {
      if (paramArrayOfByte2.length == 0) {
        return null;
      }
      try
      {
        paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, paramString1);
        paramString1 = Cipher.getInstance(paramString2);
        int j = 1;
        int i = 1;
        if (paramArrayOfByte3 != null)
        {
          int k = paramArrayOfByte3.length;
          if (k != 0)
          {
            paramString2 = new IvParameterSpec(paramArrayOfByte3);
            if (!paramBoolean) {
              i = 2;
            }
            paramString1.init(i, paramArrayOfByte2, paramString2);
            break label113;
          }
        }
        if (paramBoolean) {
          i = j;
        } else {
          i = 2;
        }
        paramString1.init(i, paramArrayOfByte2);
        label113:
        paramArrayOfByte1 = paramString1.doFinal(paramArrayOfByte1);
        return paramArrayOfByte1;
      }
      catch (Throwable paramArrayOfByte1)
      {
        paramArrayOfByte1.printStackTrace();
      }
    }
    return null;
  }
}
