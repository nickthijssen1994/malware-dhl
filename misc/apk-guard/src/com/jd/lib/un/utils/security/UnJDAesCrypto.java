package com.jd.lib.un.utils.security;

import android.content.Context;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class UnJDAesCrypto
{
  private static final String CIPHERMODEPADDING = "AES/CBC/PKCS5Padding";
  private static final int ITERATION_COUNT = 10;
  private static final int KEY_LENGTH = 128;
  private static final String digits = "0123456789ABCDEF";
  private static byte[] rawKey;
  
  public UnJDAesCrypto() {}
  
  private static void appendHex(StringBuffer paramStringBuffer, byte paramByte)
  {
    paramStringBuffer.append("0123456789ABCDEF".charAt(paramByte >> 4 & 0xF));
    paramStringBuffer.append("0123456789ABCDEF".charAt(paramByte & 0xF));
  }
  
  private static IvParameterSpec createIv(Context paramContext, String paramString)
    throws Exception
  {
    String str = paramString.substring(0, 1);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString.substring(1, paramString.length() - 1));
    localStringBuilder.append(str);
    return new IvParameterSpec(getRawKey(paramContext, localStringBuilder.toString()));
  }
  
  public static String decryptCBC(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      paramContext = new String(decryptCBC(getRawKey(paramContext, paramString1), toByte(paramString2), createIv(paramContext, paramString1)));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  private static byte[] decryptCBC(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, IvParameterSpec paramIvParameterSpec)
    throws Exception
  {
    paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
    Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    localCipher.init(2, paramArrayOfByte1, paramIvParameterSpec);
    return localCipher.doFinal(paramArrayOfByte2);
  }
  
  public static String encryptCBC(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      paramContext = toHex(encryptCBC(getRawKey(paramContext, paramString1), paramString2.getBytes(), createIv(paramContext, paramString1)));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return null;
  }
  
  private static byte[] encryptCBC(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, IvParameterSpec paramIvParameterSpec)
    throws Exception
  {
    paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
    Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    localCipher.init(1, paramArrayOfByte1, paramIvParameterSpec);
    return localCipher.doFinal(paramArrayOfByte2);
  }
  
  private static byte[] getRawKey(Context paramContext, String paramString)
    throws Exception
  {
    byte[] arrayOfByte = rawKey;
    if (arrayOfByte != null) {
      return arrayOfByte;
    }
    paramContext = UnSaltGenerator.newInstance().getSalt(paramContext);
    paramContext = new PBEKeySpec(paramString.toCharArray(), paramContext, 10, 128);
    rawKey = new SecretKeySpec(SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1").generateSecret(paramContext).getEncoded(), "AES").getEncoded();
    return rawKey;
  }
  
  public static byte[] toByte(String paramString)
  {
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    while (i < j)
    {
      int k = i * 2;
      arrayOfByte[i] = Integer.valueOf(paramString.substring(k, k + 2), 16).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  public static String toHex(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer(paramArrayOfByte.length * 2);
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      appendHex(localStringBuffer, paramArrayOfByte[i]);
      i += 1;
    }
    return localStringBuffer.toString();
  }
}
