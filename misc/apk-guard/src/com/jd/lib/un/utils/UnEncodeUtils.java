package com.jd.lib.un.utils;

import android.os.Build.VERSION;
import android.text.Html;
import android.util.Base64;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;

public class UnEncodeUtils
{
  public UnEncodeUtils() {}
  
  public static byte[] base64Decode(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0)) {
      return Base64.decode(paramString, 2);
    }
    return new byte[0];
  }
  
  public static byte[] base64Decode(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length != 0)) {
      return Base64.decode(paramArrayOfByte, 2);
    }
    return new byte[0];
  }
  
  public static byte[] base64Encode(String paramString)
  {
    return base64Encode(paramString.getBytes());
  }
  
  public static byte[] base64Encode(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length != 0)) {
      return Base64.encode(paramArrayOfByte, 2);
    }
    return new byte[0];
  }
  
  public static String base64Encode2String(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length != 0)) {
      return Base64.encodeToString(paramArrayOfByte, 2);
    }
    return "";
  }
  
  public static CharSequence htmlDecode(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      if (Build.VERSION.SDK_INT >= 24) {
        return Html.fromHtml(paramString, 0);
      }
      return Html.fromHtml(paramString);
    }
    return "";
  }
  
  public static String htmlEncode(CharSequence paramCharSequence)
  {
    if ((paramCharSequence != null) && (paramCharSequence.length() != 0))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      int i = 0;
      int j = paramCharSequence.length();
      while (i < j)
      {
        char c = paramCharSequence.charAt(i);
        if (c != '"')
        {
          if (c != '<')
          {
            if (c != '>') {
              switch (c)
              {
              default: 
                localStringBuilder.append(c);
                break;
              case '\'': 
                localStringBuilder.append("&#39;");
                break;
              case '&': 
                localStringBuilder.append("&amp;");
                break;
              }
            } else {
              localStringBuilder.append("&gt;");
            }
          }
          else {
            localStringBuilder.append("&lt;");
          }
        }
        else {
          localStringBuilder.append("&quot;");
        }
        i += 1;
      }
      return localStringBuilder.toString();
    }
    return "";
  }
  
  public static String urlDecode(String paramString)
  {
    return urlDecode(paramString, "UTF-8");
  }
  
  public static String urlDecode(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0)) {
      try
      {
        paramString1 = URLDecoder.decode(paramString1, paramString2);
        return paramString1;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        throw new AssertionError(paramString1);
      }
    }
    return "";
  }
  
  public static String urlEncode(String paramString)
  {
    return urlEncode(paramString, "UTF-8");
  }
  
  public static String urlEncode(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString1.length() != 0)) {
      try
      {
        paramString1 = URLEncoder.encode(paramString1, paramString2);
        return paramString1;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        throw new AssertionError(paramString1);
      }
    }
    return "";
  }
}
