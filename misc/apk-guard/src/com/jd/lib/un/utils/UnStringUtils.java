package com.jd.lib.un.utils;

public class UnStringUtils
{
  public UnStringUtils() {}
  
  public static boolean equalsIgnoreCase(String paramString1, String paramString2)
  {
    if (paramString1 == null) {
      return paramString2 == null;
    }
    return paramString1.equalsIgnoreCase(paramString2);
  }
  
  public static boolean isEmpty(CharSequence paramCharSequence)
  {
    return (paramCharSequence == null) || (paramCharSequence.length() == 0);
  }
  
  public static boolean isSpace(String paramString)
  {
    if (paramString == null) {
      return true;
    }
    int j = paramString.length();
    int i = 0;
    while (i < j)
    {
      if (!Character.isWhitespace(paramString.charAt(i))) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public static boolean isTrimEmpty(String paramString)
  {
    return (paramString == null) || (paramString.trim().length() == 0);
  }
  
  public static String lowerFirstLetter(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      if (!Character.isUpperCase(paramString.charAt(0))) {
        return paramString;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(String.valueOf((char)(paramString.charAt(0) + ' ')));
      localStringBuilder.append(paramString.substring(1));
      return localStringBuilder.toString();
    }
    return "";
  }
  
  public static String null2Length0(String paramString)
  {
    if (paramString == null) {
      return "";
    }
    return paramString;
  }
  
  public static String reverse(String paramString)
  {
    if (paramString == null) {
      return "";
    }
    int k = paramString.length();
    if (k <= 1) {
      return paramString;
    }
    paramString = paramString.toCharArray();
    int j = 0;
    while (j < k >> 1)
    {
      int i = paramString[j];
      int m = k - j - 1;
      paramString[j] = paramString[m];
      paramString[m] = i;
      j += 1;
    }
    return new String(paramString);
  }
  
  public static String spilitSubString(String paramString, int paramInt)
  {
    String str1 = paramString;
    String str2;
    if (paramString != null) {
      try
      {
        int i = paramString.length();
        str1 = paramString;
        if (i > paramInt) {
          str1 = paramString.substring(0, paramInt);
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        str2 = paramString;
      }
    }
    if (str2 == null) {
      return "";
    }
    return str2;
  }
  
  public static String upperFirstLetter(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      if (!Character.isLowerCase(paramString.charAt(0))) {
        return paramString;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(String.valueOf((char)(paramString.charAt(0) - ' ')));
      localStringBuilder.append(paramString.substring(1));
      return localStringBuilder.toString();
    }
    return "";
  }
}
