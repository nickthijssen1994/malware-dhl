package com.jd.lib.un.utils;

import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.Window;
import android.view.WindowManager.LayoutParams;
import android.view.inputmethod.InputMethodManager;

public class UnKeyboardUtils
{
  private static ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener;
  private static OnSoftInputChangedListener onSoftInputChangedListener;
  private static int sContentViewInvisibleHeightPre;
  
  public UnKeyboardUtils() {}
  
  private static int getContentViewInvisibleHeight(Activity paramActivity)
  {
    paramActivity = paramActivity.findViewById(16908290);
    Rect localRect = new Rect();
    paramActivity.getWindowVisibleDisplayFrame(localRect);
    return bottom - paramActivity.getBottom();
  }
  
  public static void hideSoftInput(Activity paramActivity)
  {
    InputMethodManager localInputMethodManager = (InputMethodManager)paramActivity.getSystemService("input_method");
    if (localInputMethodManager == null) {
      return;
    }
    View localView2 = paramActivity.getCurrentFocus();
    View localView1 = localView2;
    if (localView2 == null) {
      localView1 = new View(paramActivity);
    }
    localInputMethodManager.hideSoftInputFromWindow(localView1.getWindowToken(), 0);
  }
  
  public static void hideSoftInput(View paramView, Context paramContext)
  {
    if ((paramContext.getApplicationContext().getSystemService("input_method") instanceof InputMethodManager)) {
      paramContext = (InputMethodManager)paramContext.getApplicationContext().getSystemService("input_method");
    } else {
      paramContext = null;
    }
    if (paramContext == null) {
      return;
    }
    paramContext.hideSoftInputFromWindow(paramView.getWindowToken(), 0);
  }
  
  public static boolean isSoftInputVisible(Activity paramActivity)
  {
    return isSoftInputVisible(paramActivity, 200);
  }
  
  public static boolean isSoftInputVisible(Activity paramActivity, int paramInt)
  {
    return getContentViewInvisibleHeight(paramActivity) >= paramInt;
  }
  
  public static void registerSoftInputChangedListener(Activity paramActivity, OnSoftInputChangedListener paramOnSoftInputChangedListener)
  {
    if ((getWindowgetAttributesflags & 0x200) != 0) {
      paramActivity.getWindow().clearFlags(512);
    }
    View localView = paramActivity.findViewById(16908290);
    sContentViewInvisibleHeightPre = getContentViewInvisibleHeight(paramActivity);
    onSoftInputChangedListener = paramOnSoftInputChangedListener;
    onGlobalLayoutListener = new ViewTreeObserver.OnGlobalLayoutListener()
    {
      public void onGlobalLayout()
      {
        if (UnKeyboardUtils.onSoftInputChangedListener != null)
        {
          int i = UnKeyboardUtils.getContentViewInvisibleHeight(val$activity);
          if (UnKeyboardUtils.sContentViewInvisibleHeightPre != i)
          {
            UnKeyboardUtils.onSoftInputChangedListener.onSoftInputChanged(i);
            UnKeyboardUtils.access$202(i);
          }
        }
      }
    };
    localView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);
  }
  
  public static void showSoftInput(Activity paramActivity)
  {
    InputMethodManager localInputMethodManager;
    if ((paramActivity.getSystemService("input_method") instanceof InputMethodManager)) {
      localInputMethodManager = (InputMethodManager)paramActivity.getSystemService("input_method");
    } else {
      localInputMethodManager = null;
    }
    if (localInputMethodManager == null) {
      return;
    }
    View localView2 = paramActivity.getCurrentFocus();
    View localView1 = localView2;
    if (localView2 == null)
    {
      localView1 = new View(paramActivity);
      localView1.setFocusable(true);
      localView1.setFocusableInTouchMode(true);
      localView1.requestFocus();
    }
    localInputMethodManager.showSoftInput(localView1, 2);
  }
  
  public static void showSoftInput(View paramView, Context paramContext)
  {
    if ((paramContext.getApplicationContext().getSystemService("input_method") instanceof InputMethodManager)) {
      paramContext = (InputMethodManager)paramContext.getApplicationContext().getSystemService("input_method");
    } else {
      paramContext = null;
    }
    if (paramContext == null) {
      return;
    }
    paramView.setFocusable(true);
    paramView.setFocusableInTouchMode(true);
    paramView.requestFocus();
    paramContext.showSoftInput(paramView, 2);
  }
  
  public static void toggleSoftInput(Context paramContext)
  {
    if ((paramContext.getApplicationContext().getSystemService("input_method") instanceof InputMethodManager)) {
      paramContext = (InputMethodManager)paramContext.getApplicationContext().getSystemService("input_method");
    } else {
      paramContext = null;
    }
    if (paramContext == null) {
      return;
    }
    paramContext.toggleSoftInput(2, 0);
  }
  
  public static void unregisterSoftInputChangedListener(Activity paramActivity)
  {
    paramActivity = paramActivity.findViewById(16908290);
    if ((paramActivity.getViewTreeObserver() != null) && (onGlobalLayoutListener != null)) {
      if (Build.VERSION.SDK_INT >= 16) {
        paramActivity.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
      } else {
        paramActivity.getViewTreeObserver().removeGlobalOnLayoutListener(onGlobalLayoutListener);
      }
    }
    onSoftInputChangedListener = null;
    onGlobalLayoutListener = null;
  }
  
  public static abstract interface OnSoftInputChangedListener
  {
    public abstract void onSoftInputChanged(int paramInt);
  }
}
