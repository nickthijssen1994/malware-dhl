package com.jd.lib.un.utils;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Point;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

public class UnDisplayUtil
{
  private static final String PAGE_KEY = "UnDisplayUtil";
  private static Display defaultDisplay;
  private static Point outSize;
  
  public UnDisplayUtil() {}
  
  public static int dip2px(Context paramContext, float paramFloat)
  {
    double d = getDensity(paramContext) * paramFloat;
    Double.isNaN(d);
    return (int)(d + 0.5D);
  }
  
  public static int getAppWidth(Activity paramActivity)
  {
    if (paramActivity != null) {
      try
      {
        Point localPoint = new Point();
        paramActivity.getWindowManager().getDefaultDisplay().getSize(localPoint);
        return x;
      }
      catch (Exception localException)
      {
        if (UnLog.frameNum) {
          localException.printStackTrace();
        }
      }
    }
    if (outSize == null) {
      try
      {
        if (outSize == null) {
          getPxSize(paramActivity);
        }
      }
      catch (Throwable paramActivity)
      {
        throw paramActivity;
      }
    }
    return outSizex;
  }
  
  public static int getContentHeight(Activity paramActivity)
  {
    paramActivity = getContentView(paramActivity);
    if (paramActivity == null) {
      return 0;
    }
    return paramActivity.getHeight();
  }
  
  private static View getContentView(Activity paramActivity)
  {
    if (paramActivity == null) {
      return null;
    }
    return paramActivity.getWindow().getDecorView().findViewById(16908290);
  }
  
  public static Display getDefaultDisplay(Context paramContext)
  {
    if (defaultDisplay == null) {
      defaultDisplay = ((WindowManager)paramContext.getApplicationContext().getSystemService("window")).getDefaultDisplay();
    }
    return defaultDisplay;
  }
  
  public static float getDensity(Context paramContext)
  {
    if (paramContext == null) {
      return 2.0F;
    }
    return getResourcesgetDisplayMetricsdensity;
  }
  
  public static DisplayMetrics getDisplayMetrics(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getApplicationContext().getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics;
  }
  
  public static float getFontDensity(Context paramContext)
  {
    if (paramContext == null) {
      return 2.0F;
    }
    return getResourcesgetDisplayMetricsscaledDensity;
  }
  
  public static int getHeight(Context paramContext)
  {
    paramContext = getDisplayMetrics(paramContext);
    if (paramContext == null) {
      return 0;
    }
    return heightPixels;
  }
  
  public static void getPxSize(Context paramContext)
  {
    paramContext = getDefaultDisplay(paramContext);
    outSize = new Point();
    paramContext.getSize(outSize);
  }
  
  public static int getWidth(Context paramContext)
  {
    paramContext = getDisplayMetrics(paramContext);
    if (paramContext == null) {
      return 0;
    }
    return widthPixels;
  }
  
  public static int percentHeight(Context paramContext, float paramFloat)
  {
    return (int)(getHeight(paramContext) * paramFloat);
  }
  
  public static int percentWidth(Context paramContext, float paramFloat)
  {
    return (int)(getWidth(paramContext) * paramFloat);
  }
  
  public static int px2dip(Context paramContext, float paramFloat)
  {
    double d = paramFloat / getDensity(paramContext);
    Double.isNaN(d);
    return (int)(d + 0.5D);
  }
  
  public static int px2sp(Context paramContext, float paramFloat)
  {
    double d = paramFloat / getFontDensity(paramContext);
    Double.isNaN(d);
    return (int)(d + 0.5D);
  }
  
  public static int sp2px(Context paramContext, float paramFloat)
  {
    double d = getFontDensity(paramContext) * paramFloat;
    Double.isNaN(d);
    return (int)(d + 0.5D);
  }
}
