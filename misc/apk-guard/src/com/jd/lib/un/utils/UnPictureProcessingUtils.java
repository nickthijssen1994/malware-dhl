package com.jd.lib.un.utils;

import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.ExifInterface;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

public class UnPictureProcessingUtils
{
  public UnPictureProcessingUtils() {}
  
  public static Bitmap clip(Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    return clip(paramBitmap, paramInt1, paramInt2, paramInt3, paramInt4, false);
  }
  
  public static Bitmap clip(Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    if (isEmptyBitmap(paramBitmap)) {
      return null;
    }
    Bitmap localBitmap = Bitmap.createBitmap(paramBitmap, paramInt1, paramInt2, paramInt3, paramInt4);
    if ((paramBoolean) && (!paramBitmap.isRecycled())) {
      paramBitmap.recycle();
    }
    return localBitmap;
  }
  
  private static File getFileByPath(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return null;
    }
    return new File(paramString);
  }
  
  private static String getFileExtension(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return paramString;
    }
    int i = paramString.lastIndexOf('.');
    int j = paramString.lastIndexOf(File.separator);
    if ((i != -1) && (j < i)) {
      return paramString.substring(i + 1);
    }
    return "";
  }
  
  /* Error */
  public static String getImageType(File paramFile)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnonnull +6 -> 7
    //   4: ldc 64
    //   6: areturn
    //   7: aconst_null
    //   8: astore 4
    //   10: aconst_null
    //   11: astore_1
    //   12: new 72	java/io/FileInputStream
    //   15: dup
    //   16: aload_0
    //   17: invokespecial 75	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   20: astore_2
    //   21: aload_2
    //   22: invokestatic 78	com/jd/lib/un/utils/UnPictureProcessingUtils:getImageType	(Ljava/io/InputStream;)Ljava/lang/String;
    //   25: astore_1
    //   26: aload_1
    //   27: ifnull +16 -> 43
    //   30: aload_2
    //   31: invokevirtual 83	java/io/InputStream:close	()V
    //   34: aload_1
    //   35: areturn
    //   36: astore_0
    //   37: aload_0
    //   38: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   41: aload_1
    //   42: areturn
    //   43: aload_2
    //   44: invokevirtual 83	java/io/InputStream:close	()V
    //   47: goto +48 -> 95
    //   50: astore_0
    //   51: aload_2
    //   52: astore_1
    //   53: goto +64 -> 117
    //   56: astore_1
    //   57: aload_1
    //   58: astore_3
    //   59: goto +11 -> 70
    //   62: astore_0
    //   63: goto +54 -> 117
    //   66: astore_3
    //   67: aload 4
    //   69: astore_2
    //   70: aload_2
    //   71: astore_1
    //   72: aload_3
    //   73: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   76: aload_2
    //   77: ifnull +18 -> 95
    //   80: aload_2
    //   81: invokevirtual 83	java/io/InputStream:close	()V
    //   84: goto +11 -> 95
    //   87: astore_1
    //   88: aload_1
    //   89: checkcast 68	java/io/IOException
    //   92: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   95: aload_0
    //   96: invokevirtual 90	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   99: invokestatic 92	com/jd/lib/un/utils/UnPictureProcessingUtils:getFileExtension	(Ljava/lang/String;)Ljava/lang/String;
    //   102: astore_0
    //   103: aload_0
    //   104: invokestatic 98	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   107: ifeq +5 -> 112
    //   110: aload_0
    //   111: areturn
    //   112: aload_0
    //   113: invokevirtual 101	java/lang/String:toUpperCase	()Ljava/lang/String;
    //   116: areturn
    //   117: aload_1
    //   118: ifnull +15 -> 133
    //   121: aload_1
    //   122: invokevirtual 83	java/io/InputStream:close	()V
    //   125: goto +8 -> 133
    //   128: astore_1
    //   129: aload_1
    //   130: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   133: aload_0
    //   134: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	135	0	paramFile	File
    //   11	42	1	localObject1	Object
    //   56	2	1	localIOException1	IOException
    //   71	1	1	localObject2	Object
    //   87	35	1	localIOException2	IOException
    //   128	2	1	localIOException3	IOException
    //   20	61	2	localObject3	Object
    //   58	1	3	localIOException4	IOException
    //   66	7	3	localIOException5	IOException
    //   8	60	4	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   30	34	36	java/io/IOException
    //   21	26	50	java/lang/Throwable
    //   21	26	56	java/io/IOException
    //   12	21	62	java/lang/Throwable
    //   72	76	62	java/lang/Throwable
    //   12	21	66	java/io/IOException
    //   43	47	87	java/io/IOException
    //   80	84	87	java/io/IOException
    //   121	125	128	java/io/IOException
  }
  
  private static String getImageType(InputStream paramInputStream)
  {
    if (paramInputStream == null) {
      return null;
    }
    byte[] arrayOfByte = new byte[8];
    try
    {
      int i = paramInputStream.read(arrayOfByte, 0, 8);
      if (i != -1)
      {
        paramInputStream = getImageType(arrayOfByte);
        return paramInputStream;
      }
    }
    catch (IOException paramInputStream)
    {
      paramInputStream.printStackTrace();
    }
    return null;
  }
  
  public static String getImageType(String paramString)
  {
    return getImageType(getFileByPath(paramString));
  }
  
  private static String getImageType(byte[] paramArrayOfByte)
  {
    if (isJPEG(paramArrayOfByte)) {
      return "JPEG";
    }
    if (isGIF(paramArrayOfByte)) {
      return "GIF";
    }
    if (isPNG(paramArrayOfByte)) {
      return "PNG";
    }
    if (isBMP(paramArrayOfByte)) {
      return "BMP";
    }
    return null;
  }
  
  public static int getRotateDegree(String paramString)
  {
    try
    {
      int i = new ExifInterface(paramString).getAttributeInt("Orientation", 1);
      if (i != 3)
      {
        if (i != 6)
        {
          if (i != 8) {
            return 0;
          }
          return 270;
        }
        return 90;
      }
      return 180;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return -1;
  }
  
  private static boolean isBMP(byte[] paramArrayOfByte)
  {
    return (paramArrayOfByte.length >= 2) && (paramArrayOfByte[0] == 66) && (paramArrayOfByte[1] == 77);
  }
  
  private static boolean isEmptyBitmap(Bitmap paramBitmap)
  {
    return (paramBitmap == null) || (paramBitmap.getWidth() == 0) || (paramBitmap.getHeight() == 0);
  }
  
  private static boolean isGIF(byte[] paramArrayOfByte)
  {
    return (paramArrayOfByte.length >= 6) && (paramArrayOfByte[0] == 71) && (paramArrayOfByte[1] == 73) && (paramArrayOfByte[2] == 70) && (paramArrayOfByte[3] == 56) && ((paramArrayOfByte[4] == 55) || (paramArrayOfByte[4] == 57)) && (paramArrayOfByte[5] == 97);
  }
  
  public static boolean isImage(File paramFile)
  {
    return (paramFile != null) && (isImage(paramFile.getPath()));
  }
  
  public static boolean isImage(String paramString)
  {
    paramString = paramString.toUpperCase();
    return (paramString.endsWith(".PNG")) || (paramString.endsWith(".JPG")) || (paramString.endsWith(".JPEG")) || (paramString.endsWith(".BMP"));
  }
  
  private static boolean isJPEG(byte[] paramArrayOfByte)
  {
    return (paramArrayOfByte.length >= 2) && (paramArrayOfByte[0] == -1) && (paramArrayOfByte[1] == -40);
  }
  
  private static boolean isPNG(byte[] paramArrayOfByte)
  {
    return (paramArrayOfByte.length >= 8) && (paramArrayOfByte[0] == -119) && (paramArrayOfByte[1] == 80) && (paramArrayOfByte[2] == 78) && (paramArrayOfByte[3] == 71) && (paramArrayOfByte[4] == 13) && (paramArrayOfByte[5] == 10) && (paramArrayOfByte[6] == 26) && (paramArrayOfByte[7] == 10);
  }
  
  public static Bitmap rotate(Bitmap paramBitmap, int paramInt, float paramFloat1, float paramFloat2)
  {
    return rotate(paramBitmap, paramInt, paramFloat1, paramFloat2, false);
  }
  
  public static Bitmap rotate(Bitmap paramBitmap, int paramInt, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (isEmptyBitmap(paramBitmap)) {
      return null;
    }
    if (paramInt == 0) {
      return paramBitmap;
    }
    Object localObject = new Matrix();
    ((Matrix)localObject).setRotate(paramInt, paramFloat1, paramFloat2);
    localObject = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject, true);
    if ((paramBoolean) && (!paramBitmap.isRecycled())) {
      paramBitmap.recycle();
    }
    return localObject;
  }
  
  public static Bitmap scale(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    return scale(paramBitmap, paramInt1, paramInt2, false);
  }
  
  public static Bitmap scale(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (isEmptyBitmap(paramBitmap)) {
      return null;
    }
    Bitmap localBitmap = Bitmap.createScaledBitmap(paramBitmap, paramInt1, paramInt2, true);
    if ((paramBoolean) && (!paramBitmap.isRecycled())) {
      paramBitmap.recycle();
    }
    return localBitmap;
  }
  
  public static Bitmap skew(Bitmap paramBitmap, float paramFloat1, float paramFloat2)
  {
    return skew(paramBitmap, paramFloat1, paramFloat2, 0.0F, 0.0F, false);
  }
  
  public static Bitmap skew(Bitmap paramBitmap, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    return skew(paramBitmap, paramFloat1, paramFloat2, paramFloat3, paramFloat4, false);
  }
  
  public static Bitmap skew(Bitmap paramBitmap, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, boolean paramBoolean)
  {
    if (isEmptyBitmap(paramBitmap)) {
      return null;
    }
    Object localObject = new Matrix();
    ((Matrix)localObject).setSkew(paramFloat1, paramFloat2, paramFloat3, paramFloat4);
    localObject = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject, true);
    if ((paramBoolean) && (!paramBitmap.isRecycled())) {
      paramBitmap.recycle();
    }
    return localObject;
  }
  
  public static Bitmap skew(Bitmap paramBitmap, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return skew(paramBitmap, paramFloat1, paramFloat2, 0.0F, 0.0F, paramBoolean);
  }
}
