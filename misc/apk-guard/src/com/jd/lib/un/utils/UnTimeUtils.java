package com.jd.lib.un.utils;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class UnTimeUtils
{
  private static final String[] CHINESE_ZODIAC;
  public static final int CV_CAP_ANDROID = 1000;
  private static final DateFormat DEFAULT_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  public static final int HOUR = 3600000;
  public static final int MILLIS_PER_DAY = 86400000;
  public static final int MINUTE_MS = 60000;
  public static final int MSEC = 1;
  private static final String[] ZODIAC = { "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???" };
  private static final int[] ZODIAC_FLAGS;
  
  static
  {
    CHINESE_ZODIAC = new String[] { "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?" };
    ZODIAC_FLAGS = new int[] { 20, 19, 21, 21, 21, 22, 23, 23, 23, 24, 23, 22 };
  }
  
  public UnTimeUtils() {}
  
  public static long date2Millis(Date paramDate)
  {
    return paramDate.getTime();
  }
  
  public static String date2String(Date paramDate)
  {
    return date2String(paramDate, DEFAULT_FORMAT);
  }
  
  public static String date2String(Date paramDate, DateFormat paramDateFormat)
  {
    return paramDateFormat.format(paramDate);
  }
  
  public static String getChineseZodiac(int paramInt)
  {
    return CHINESE_ZODIAC[(paramInt % 12)];
  }
  
  public static String getChineseZodiac(long paramLong)
  {
    return getChineseZodiac(millis2Date(paramLong));
  }
  
  public static String getChineseZodiac(String paramString)
  {
    return getChineseZodiac(string2Date(paramString, DEFAULT_FORMAT));
  }
  
  public static String getChineseZodiac(String paramString, DateFormat paramDateFormat)
  {
    return getChineseZodiac(string2Date(paramString, paramDateFormat));
  }
  
  public static String getChineseZodiac(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    return CHINESE_ZODIAC[(localCalendar.get(1) % 12)];
  }
  
  public static Date getNowDate()
  {
    return new Date();
  }
  
  public static long getNowMills()
  {
    return System.currentTimeMillis();
  }
  
  public static String getNowString()
  {
    return millis2String(System.currentTimeMillis(), DEFAULT_FORMAT);
  }
  
  public static String getNowString(DateFormat paramDateFormat)
  {
    return millis2String(System.currentTimeMillis(), paramDateFormat);
  }
  
  public static long getTimeSpan(long paramLong1, long paramLong2, int paramInt)
  {
    return millis2TimeSpan(Math.abs(paramLong1 - paramLong2), paramInt);
  }
  
  public static long getTimeSpan(String paramString1, String paramString2, int paramInt)
  {
    return getTimeSpan(paramString1, paramString2, DEFAULT_FORMAT, paramInt);
  }
  
  public static long getTimeSpan(String paramString1, String paramString2, DateFormat paramDateFormat, int paramInt)
  {
    return millis2TimeSpan(Math.abs(string2Millis(paramString1, paramDateFormat) - string2Millis(paramString2, paramDateFormat)), paramInt);
  }
  
  public static long getTimeSpan(Date paramDate1, Date paramDate2, int paramInt)
  {
    return millis2TimeSpan(Math.abs(date2Millis(paramDate1) - date2Millis(paramDate2)), paramInt);
  }
  
  public static long getTimeSpanByNow(long paramLong, int paramInt)
  {
    return getTimeSpan(System.currentTimeMillis(), paramLong, paramInt);
  }
  
  public static long getTimeSpanByNow(String paramString, int paramInt)
  {
    return getTimeSpan(getNowString(), paramString, DEFAULT_FORMAT, paramInt);
  }
  
  public static long getTimeSpanByNow(String paramString, DateFormat paramDateFormat, int paramInt)
  {
    return getTimeSpan(getNowString(paramDateFormat), paramString, paramDateFormat, paramInt);
  }
  
  public static long getTimeSpanByNow(Date paramDate, int paramInt)
  {
    return getTimeSpan(new Date(), paramDate, paramInt);
  }
  
  public static int getValueByCalendarField(long paramLong, int paramInt)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTimeInMillis(paramLong);
    return localCalendar.get(paramInt);
  }
  
  public static int getValueByCalendarField(String paramString, int paramInt)
  {
    return getValueByCalendarField(string2Date(paramString, DEFAULT_FORMAT), paramInt);
  }
  
  public static int getValueByCalendarField(String paramString, DateFormat paramDateFormat, int paramInt)
  {
    return getValueByCalendarField(string2Date(paramString, paramDateFormat), paramInt);
  }
  
  public static int getValueByCalendarField(Date paramDate, int paramInt)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    return localCalendar.get(paramInt);
  }
  
  private static long getWeeOfToday()
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.set(11, 0);
    localCalendar.set(13, 0);
    localCalendar.set(12, 0);
    localCalendar.set(14, 0);
    return localCalendar.getTimeInMillis();
  }
  
  public static String getZodiac(int paramInt1, int paramInt2)
  {
    String[] arrayOfString = ZODIAC;
    int[] arrayOfInt = ZODIAC_FLAGS;
    int i = paramInt1 - 1;
    if (paramInt2 >= arrayOfInt[i]) {
      paramInt1 = i;
    } else {
      paramInt1 = (paramInt1 + 10) % 12;
    }
    return arrayOfString[paramInt1];
  }
  
  public static String getZodiac(long paramLong)
  {
    return getZodiac(millis2Date(paramLong));
  }
  
  public static String getZodiac(String paramString)
  {
    return getZodiac(string2Date(paramString, DEFAULT_FORMAT));
  }
  
  public static String getZodiac(String paramString, DateFormat paramDateFormat)
  {
    return getZodiac(string2Date(paramString, paramDateFormat));
  }
  
  public static String getZodiac(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    return getZodiac(localCalendar.get(2) + 1, localCalendar.get(5));
  }
  
  public static boolean isLeapYear(int paramInt)
  {
    return ((paramInt % 4 == 0) && (paramInt % 100 != 0)) || (paramInt % 400 == 0);
  }
  
  public static boolean isLeapYear(String paramString)
  {
    return isLeapYear(string2Date(paramString, DEFAULT_FORMAT));
  }
  
  public static boolean isLeapYear(String paramString, DateFormat paramDateFormat)
  {
    return isLeapYear(string2Date(paramString, paramDateFormat));
  }
  
  public static boolean isLeapYear(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    return isLeapYear(localCalendar.get(1));
  }
  
  public static boolean isToday(long paramLong)
  {
    long l = getWeeOfToday();
    return (paramLong >= l) && (paramLong < l + 86400000L);
  }
  
  public static boolean isToday(String paramString)
  {
    return isToday(string2Millis(paramString, DEFAULT_FORMAT));
  }
  
  public static boolean isToday(Date paramDate)
  {
    return isToday(paramDate.getTime());
  }
  
  public static Date millis2Date(long paramLong)
  {
    return new Date(paramLong);
  }
  
  public static String millis2String(long paramLong)
  {
    return millis2String(paramLong, DEFAULT_FORMAT);
  }
  
  public static String millis2String(long paramLong, DateFormat paramDateFormat)
  {
    return paramDateFormat.format(new Date(paramLong));
  }
  
  private static long millis2TimeSpan(long paramLong, int paramInt)
  {
    return paramLong / paramInt;
  }
  
  public static Date string2Date(String paramString)
  {
    return string2Date(paramString, DEFAULT_FORMAT);
  }
  
  public static Date string2Date(String paramString, DateFormat paramDateFormat)
  {
    try
    {
      paramString = paramDateFormat.parse(paramString);
      return paramString;
    }
    catch (ParseException paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static long string2Millis(String paramString)
  {
    return string2Millis(paramString, DEFAULT_FORMAT);
  }
  
  public static long string2Millis(String paramString, DateFormat paramDateFormat)
  {
    try
    {
      long l = paramDateFormat.parse(paramString).getTime();
      return l;
    }
    catch (ParseException paramString)
    {
      paramString.printStackTrace();
    }
    return -1L;
  }
}
