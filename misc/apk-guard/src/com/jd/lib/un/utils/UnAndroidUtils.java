package com.jd.lib.un.utils;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Rect;
import android.os.BaseBundle;
import android.os.Build;
import android.os.Build.VERSION;
import android.provider.Settings.Global;
import android.text.TextUtils;
import android.view.ContextThemeWrapper;
import android.view.DisplayCutout;
import android.view.View;
import android.view.Window;
import android.view.WindowInsets;
import android.view.WindowManager.LayoutParams;
import com.jd.lib.un.utils.config.UnUtilsConfig;
import com.jingdong.app.mall.bundle.mobileConfig.JDMobileConfig;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.json.JSONArray;

public class UnAndroidUtils
{
  private static final String BRAND_HUAWEI = "HUAWEI";
  private static final String BRAND_OPPO = "OPPO";
  private static final String BRAND_VIVO = "VIVO";
  private static final String BRAND_XIAOMI = "XIAOMI";
  private static final int D_MODEL_SPLIT_LEN = 25;
  public static final int NOTCH_IN_SCREEN_VOIO = 32;
  private static String[] cutoutPhoneModels = { "" };
  private static String foldModelJson;
  private static List<String> foldModelList;
  private static Boolean isMatex;
  private static String thisModel;
  
  public UnAndroidUtils() {}
  
  public static boolean checkDeviceHasNavigationBar(Activity paramActivity)
  {
    boolean bool1;
    for (;;)
    {
      try
      {
        paramActivity = paramActivity.getResources();
        int i = paramActivity.getIdentifier("config_showNavigationBar", "bool", "android");
        if (i > 0) {
          bool1 = paramActivity.getBoolean(i);
        } else {
          bool1 = false;
        }
      }
      catch (Exception paramActivity)
      {
        Method localMethod;
        boolean bool2;
        continue;
      }
      try
      {
        paramActivity = Class.forName("android.os.SystemProperties");
        localMethod = paramActivity.getMethod("get", new Class[] { String.class });
        paramActivity = localMethod.invoke(paramActivity, new Object[] { "qemu.hw.mainkeys" });
        paramActivity = (String)paramActivity;
        bool2 = "1".equals(paramActivity);
        if (bool2) {
          return false;
        }
        bool2 = "0".equals(paramActivity);
        if (!bool2) {
          break;
        }
        return true;
      }
      catch (Exception paramActivity) {}
    }
    return false;
    return bool1;
  }
  
  public static int computeUsableHeight(Activity paramActivity)
  {
    if (paramActivity == null) {
      return 0;
    }
    paramActivity = paramActivity.findViewById(16908290);
    if (paramActivity == null) {
      return 0;
    }
    Rect localRect = new Rect();
    paramActivity.getWindowVisibleDisplayFrame(localRect);
    return bottom;
  }
  
  public static int getAndroidVersion()
  {
    return Build.VERSION.SDK_INT;
  }
  
  public static String getBrand()
  {
    return UnStringUtils.spilitSubString(Build.MANUFACTURER, 12).replaceAll(" ", "");
  }
  
  public static String getModel()
  {
    return UnStringUtils.spilitSubString(Build.MODEL, 25).replaceAll(" ", "");
  }
  
  public static int getStatusBarHeight(Activity paramActivity)
  {
    int i = paramActivity.getResources().getIdentifier("status_bar_height", "dimen", "android");
    if (i > 0) {
      return paramActivity.getResources().getDimensionPixelSize(i);
    }
    return 0;
  }
  
  public static String getSystemProperties(String paramString)
  {
    try
    {
      Class localClass = Class.forName("android.os.SystemProperties");
      Method localMethod = localClass.getMethod("get", new Class[] { String.class });
      paramString = localMethod.invoke(localClass, new Object[] { paramString });
      return (String)paramString;
    }
    catch (InvocationTargetException paramString)
    {
      paramString.printStackTrace();
    }
    catch (IllegalArgumentException paramString)
    {
      paramString.printStackTrace();
    }
    catch (IllegalAccessException paramString)
    {
      paramString.printStackTrace();
    }
    catch (NoSuchMethodException paramString)
    {
      paramString.printStackTrace();
    }
    catch (ClassNotFoundException paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static boolean hasNotchInScreenAtHuawei(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getClassLoader().loadClass("com.huawei.android.util.HwNotchSizeUtil");
      Method localMethod = paramContext.getMethod("hasNotchInScreen", new Class[0]);
      paramContext = localMethod.invoke(paramContext, new Object[0]);
      paramContext = (Boolean)paramContext;
      boolean bool = paramContext.booleanValue();
      return bool;
    }
    catch (Exception paramContext) {}catch (NoSuchMethodException paramContext)
    {
      try
      {
        paramContext.printStackTrace();
        return false;
      }
      catch (Throwable paramContext) {}
      paramContext = paramContext;
      paramContext.printStackTrace();
      return false;
    }
    catch (ClassNotFoundException paramContext)
    {
      paramContext.printStackTrace();
      return false;
    }
    catch (Throwable paramContext)
    {
      return false;
    }
    return false;
  }
  
  public static boolean hasNotchInScreenAtOppo(Context paramContext)
  {
    return paramContext.getPackageManager().hasSystemFeature("com.oppo.feature.screen.heteromorphism");
  }
  
  public static boolean hasNotchInScreenAtVivo(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getClassLoader().loadClass("android.util.FtFeature");
      Object localObject = Integer.TYPE;
      localObject = paramContext.getMethod("isFeatureSupport", new Class[] { localObject });
      paramContext = ((Method)localObject).invoke(paramContext, new Object[] { Integer.valueOf(32) });
      paramContext = (Boolean)paramContext;
      boolean bool = paramContext.booleanValue();
      return bool;
    }
    catch (Exception paramContext) {}catch (NoSuchMethodException paramContext)
    {
      try
      {
        paramContext.printStackTrace();
        return false;
      }
      catch (Throwable paramContext) {}
      paramContext = paramContext;
      paramContext.printStackTrace();
      return false;
    }
    catch (ClassNotFoundException paramContext)
    {
      paramContext.printStackTrace();
      return false;
    }
    catch (Throwable paramContext)
    {
      return false;
    }
    return false;
  }
  
  public static boolean hasNotchInScreenXiaomi(Context paramContext)
  {
    return TextUtils.equals(getSystemProperties("ro.miui.notch"), "1");
  }
  
  public static boolean isAndroidPCut(Activity paramActivity)
  {
    paramActivity = paramActivity.getWindow().getDecorView();
    if ((paramActivity != null) && (Build.VERSION.SDK_INT >= 28))
    {
      paramActivity = paramActivity.getRootWindowInsets();
      if ((paramActivity != null) && (paramActivity.getDisplayCutout() != null)) {
        return true;
      }
    }
    return false;
  }
  
  public static boolean isDisplayCutoutLocal(Context paramContext)
  {
    if (isNotchScreen(((Activity)paramContext).getWindow())) {
      return true;
    }
    String str = getBrand();
    if (TextUtils.isEmpty(str)) {
      return false;
    }
    if (TextUtils.equals("HUAWEI", str.toUpperCase())) {
      return hasNotchInScreenAtHuawei(paramContext);
    }
    if (TextUtils.equals("VIVO", str.toUpperCase())) {
      return hasNotchInScreenAtVivo(paramContext);
    }
    if (TextUtils.equals("OPPO", str.toUpperCase())) {
      return hasNotchInScreenAtOppo(paramContext);
    }
    if (TextUtils.equals("XIAOMI", str.toUpperCase())) {
      return hasNotchInScreenXiaomi(paramContext);
    }
    return false;
  }
  
  public static boolean isFoldScreen()
  {
    String str = getBrand();
    if (thisModel == null) {
      thisModel = getModel();
    }
    if ((!TextUtils.isEmpty(str)) && (!TextUtils.isEmpty(thisModel)))
    {
      str = str.toUpperCase();
      if (TextUtils.equals(str, "HUAWEI"))
      {
        if ((thisModel.contains("ANL")) || (thisModel.contains("TAH")) || (thisModel.contains("RLI"))) {
          break label144;
        }
        if (thisModel.contains("TXL")) {
          return true;
        }
      }
      if (TextUtils.equals(str, "SAMSUNG"))
      {
        if (TextUtils.equals(thisModel, "SM-F9000")) {
          break label144;
        }
        if (TextUtils.equals(thisModel, "SM-F9160")) {
          return true;
        }
      }
      return isModelInList(thisModel);
    }
    else
    {
      return false;
    }
    label144:
    return true;
  }
  
  public static boolean isFullScreen(Activity paramActivity)
  {
    if (paramActivity == null) {
      return false;
    }
    return (getWindowgetAttributesflags & 0x400) == 1024;
  }
  
  public static boolean isFullScreenModel(Context paramContext)
  {
    try
    {
      String str = Settings.Global.getString(paramContext.getContentResolver(), "policy_control");
      paramContext = str;
      if (str != null) {
        paramContext = str.trim();
      }
      boolean bool = TextUtils.equals("immersive.full=*", paramContext);
      if (!bool)
      {
        bool = TextUtils.equals("immersive.status=*", paramContext);
        if (!bool) {}
      }
      else
      {
        return true;
      }
    }
    catch (Exception paramContext)
    {
      if (UnLog.frameNum) {
        paramContext.printStackTrace();
      }
    }
    return false;
  }
  
  public static boolean isMatex()
  {
    if (UnUtilsConfig.getInstance().getApplication() != null) {
      return isMatex(UnUtilsConfig.getInstance().getApplication());
    }
    return ("HUAWEI".equalsIgnoreCase(Build.BRAND)) && (("unknownRLI".equalsIgnoreCase(Build.DEVICE)) || ("HWTAH".equalsIgnoreCase(Build.DEVICE)) || ("unknownRHA".equalsIgnoreCase(Build.DEVICE)) || ("HWTAH-C".equalsIgnoreCase(Build.DEVICE)));
  }
  
  public static boolean isMatex(Context paramContext)
  {
    Boolean localBoolean = isMatex;
    if (localBoolean != null) {
      return localBoolean.booleanValue();
    }
    int i;
    if (("HUAWEI".equalsIgnoreCase(Build.BRAND)) && (("unknownRLI".equalsIgnoreCase(Build.DEVICE)) || ("HWTAH".equalsIgnoreCase(Build.DEVICE)) || ("unknownRHA".equalsIgnoreCase(Build.DEVICE)) || ("HWTAH-C".equalsIgnoreCase(Build.DEVICE)))) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      isMatex = Boolean.valueOf(true);
      return true;
    }
    if (useMatexNewFun())
    {
      if (("HUAWEI".equalsIgnoreCase(Build.MANUFACTURER)) && (paramContext.getPackageManager().hasSystemFeature("com.huawei.hardware.sensor.posture"))) {
        isMatex = Boolean.valueOf(true);
      } else {
        isMatex = Boolean.valueOf(false);
      }
      return isMatex.booleanValue();
    }
    return false;
  }
  
  private static boolean isModelInList(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    try
    {
      Object localObject = JDMobileConfig.getInstance().getConfig("unification", "baseConfig", "foldScreen");
      boolean bool = TextUtils.equals((CharSequence)localObject, foldModelJson);
      if (bool)
      {
        List localList = foldModelList;
        if (localList != null)
        {
          bool = foldModelList.contains(paramString);
          return bool;
        }
      }
      foldModelJson = (String)localObject;
      localObject = new JSONArray(foldModelJson);
      int i = ((JSONArray)localObject).length();
      if (i == 0) {
        return false;
      }
      foldModelList = new ArrayList();
      i = 0;
      for (;;)
      {
        int j = ((JSONArray)localObject).length();
        if (i >= j) {
          break;
        }
        foldModelList.add(((JSONArray)localObject).getString(i));
        i += 1;
      }
      bool = foldModelList.contains(paramString);
      return bool;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return false;
  }
  
  public static boolean isNotchScreen(Window paramWindow)
  {
    if (Build.VERSION.SDK_INT < 28) {
      return false;
    }
    paramWindow = paramWindow.getDecorView().getRootWindowInsets();
    if (paramWindow == null) {
      return false;
    }
    paramWindow = paramWindow.getDisplayCutout();
    if (paramWindow != null) {
      return paramWindow.getBoundingRects() != null;
    }
    return false;
  }
  
  public static boolean isTabletDevice(Context paramContext)
  {
    if (paramContext == null) {
      return false;
    }
    int i = 0;
    while (i < 10)
    {
      Context localContext = paramContext;
      if ((paramContext instanceof ContextWrapper)) {
        localContext = ((ContextWrapper)paramContext).getBaseContext();
      }
      i += 1;
      paramContext = localContext;
    }
    return (getResourcesgetConfigurationscreenLayout & 0xF) >= 3;
  }
  
  public static boolean mateXEasyClient(Context paramContext)
  {
    boolean bool1 = isMatex(paramContext);
    boolean bool2 = false;
    if (!bool1) {
      return false;
    }
    if (paramContext == null) {
      return false;
    }
    if (((paramContext instanceof Activity)) && (useMatexNewFun())) {
      return mateXEasyClientNew((Activity)paramContext);
    }
    bool1 = bool2;
    boolean bool3;
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      paramContext = metaData;
      bool1 = bool2;
      bool3 = paramContext.getBoolean("EasyGoClient");
      bool2 = bool3;
      if (UnLog.frameNum)
      {
        bool1 = bool2;
        paramContext = new StringBuilder();
        bool1 = bool2;
        paramContext.append("matex-easy-client-old:");
        bool1 = bool2;
        paramContext.append(bool3);
        bool1 = bool2;
        UnLog.wtf("UnAndroidUtils", paramContext.toString());
        return bool3;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      return bool1;
    }
    return bool3;
  }
  
  private static boolean mateXEasyClientNew(Activity paramActivity)
  {
    boolean bool1 = false;
    try
    {
      String str = UnUtilsConfig.getInstance().getConfiguration(paramActivity).toString();
      if (UnLog.frameNum)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("config:");
        localStringBuilder.append(str);
        UnLog.wtf("UnAndroidUtils", localStringBuilder.toString());
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("config-context:");
        localStringBuilder.append(paramActivity.getResources().getConfiguration().toString());
        UnLog.wtf("UnAndroidUtils", localStringBuilder.toString());
      }
      boolean bool2 = str.contains("hwMultiwindow-magic");
      if (!bool2)
      {
        bool2 = str.contains("hw-magic-windows");
        if (!bool2) {}
      }
      else
      {
        bool1 = true;
      }
    }
    catch (Exception paramActivity)
    {
      paramActivity.printStackTrace();
    }
    if (UnLog.frameNum)
    {
      paramActivity = new StringBuilder();
      paramActivity.append("matex-easy-client-new:");
      paramActivity.append(bool1);
      UnLog.wtf("UnAndroidUtils", paramActivity.toString());
    }
    return bool1;
  }
  
  private static boolean useMatexNewFun()
  {
    try
    {
      String str = JDMobileConfig.getInstance().getConfig("unification", "baseConfig", "matexEasyClient");
      boolean bool = TextUtils.isEmpty(str);
      if (!bool)
      {
        bool = TextUtils.equals(str, "1");
        if (!bool) {}
      }
      else
      {
        return true;
      }
    }
    catch (Throwable localThrowable) {}
    return false;
  }
}
