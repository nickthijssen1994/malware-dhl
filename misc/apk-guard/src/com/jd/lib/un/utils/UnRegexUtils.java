package com.jd.lib.un.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class UnRegexUtils
{
  public UnRegexUtils() {}
  
  public static List getMatches(String paramString, CharSequence paramCharSequence)
  {
    if (paramCharSequence == null) {
      return Collections.emptyList();
    }
    ArrayList localArrayList = new ArrayList();
    paramString = Pattern.compile(paramString).matcher(paramCharSequence);
    while (paramString.find()) {
      localArrayList.add(paramString.group());
    }
    return localArrayList;
  }
  
  public static String getReplaceAll(String paramString1, String paramString2, String paramString3)
  {
    if (paramString1 == null) {
      return "";
    }
    return Pattern.compile(paramString2).matcher(paramString1).replaceAll(paramString3);
  }
  
  public static String getReplaceFirst(String paramString1, String paramString2, String paramString3)
  {
    if (paramString1 == null) {
      return "";
    }
    return Pattern.compile(paramString2).matcher(paramString1).replaceFirst(paramString3);
  }
  
  public static String[] getSplits(String paramString1, String paramString2)
  {
    if (paramString1 == null) {
      return new String[0];
    }
    return paramString1.split(paramString2);
  }
  
  public static boolean isEmail(CharSequence paramCharSequence)
  {
    return isMatch("^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$", paramCharSequence);
  }
  
  public static boolean isIDCard15(CharSequence paramCharSequence)
  {
    return isMatch("^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$", paramCharSequence);
  }
  
  public static boolean isIDCard18(CharSequence paramCharSequence)
  {
    return isMatch("^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9Xx])$", paramCharSequence);
  }
  
  public static boolean isMatch(String paramString, CharSequence paramCharSequence)
  {
    return (paramCharSequence != null) && (paramCharSequence.length() > 0) && (Pattern.matches(paramString, paramCharSequence));
  }
  
  public static boolean isMobile(CharSequence paramCharSequence)
  {
    return isMatch("^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(16[6])|(17[0,1,3,5-8])|(18[0-9])|(19[8,9]))\\d{8}$", paramCharSequence);
  }
  
  public static boolean isTel(CharSequence paramCharSequence)
  {
    return isMatch("^0\\d{2,3}[- ]?\\d{7,8}", paramCharSequence);
  }
  
  public static boolean isURL(CharSequence paramCharSequence)
  {
    return isMatch("[a-zA-z]+://[^\\s]*", paramCharSequence);
  }
  
  public static boolean isZh(CharSequence paramCharSequence)
  {
    return isMatch("^[\\u4e00-\\u9fa5]+$", paramCharSequence);
  }
}
