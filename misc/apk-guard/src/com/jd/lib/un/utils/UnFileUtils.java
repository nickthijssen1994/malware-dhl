package com.jd.lib.un.utils;

import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

public class UnFileUtils
{
  private static final int BYTE_NUM_GB = 1073741824;
  private static final int BYTE_NUM_KB = 1024;
  private static final int BYTE_NUM_MB = 1048576;
  
  public UnFileUtils() {}
  
  private static String byte2FitMemorySize(long paramLong)
  {
    if (paramLong < 0L) {
      return "shouldn't be less than zero!";
    }
    if (paramLong < 1024L) {
      return String.format("%.3fB", new Object[] { Double.valueOf(paramLong) });
    }
    if (paramLong < 1048576L)
    {
      d = paramLong;
      Double.isNaN(d);
      return String.format("%.3fKB", new Object[] { Double.valueOf(d / 1024.0D) });
    }
    if (paramLong < 1073741824L)
    {
      d = paramLong;
      Double.isNaN(d);
      return String.format("%.3fMB", new Object[] { Double.valueOf(d / 1048576.0D) });
    }
    double d = paramLong;
    Double.isNaN(d);
    return String.format("%.3fGB", new Object[] { Double.valueOf(d / 1.073741824E9D) });
  }
  
  public static boolean copyDir(File paramFile1, File paramFile2)
  {
    return copyOrMoveDir(paramFile1, paramFile2, false);
  }
  
  public static boolean copyDir(File paramFile1, File paramFile2, OnReplaceListener paramOnReplaceListener)
  {
    return copyOrMoveDir(paramFile1, paramFile2, paramOnReplaceListener, false);
  }
  
  public static boolean copyDir(String paramString1, String paramString2)
  {
    return copyDir(getFileByPath(paramString1), getFileByPath(paramString2));
  }
  
  public static boolean copyDir(String paramString1, String paramString2, OnReplaceListener paramOnReplaceListener)
  {
    return copyDir(getFileByPath(paramString1), getFileByPath(paramString2), paramOnReplaceListener);
  }
  
  public static boolean copyFile(File paramFile1, File paramFile2)
  {
    return copyOrMoveFile(paramFile1, paramFile2, false);
  }
  
  public static boolean copyFile(File paramFile1, File paramFile2, OnReplaceListener paramOnReplaceListener)
  {
    return copyOrMoveFile(paramFile1, paramFile2, paramOnReplaceListener, false);
  }
  
  public static boolean copyFile(String paramString1, String paramString2)
  {
    return copyFile(getFileByPath(paramString1), getFileByPath(paramString2));
  }
  
  public static boolean copyFile(String paramString1, String paramString2, OnReplaceListener paramOnReplaceListener)
  {
    return copyFile(getFileByPath(paramString1), getFileByPath(paramString2), paramOnReplaceListener);
  }
  
  private static boolean copyOrMoveDir(File paramFile1, File paramFile2, OnReplaceListener paramOnReplaceListener, boolean paramBoolean)
  {
    if (paramFile1 != null)
    {
      if (paramFile2 == null) {
        return false;
      }
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramFile1.getPath());
      ((StringBuilder)localObject1).append(File.separator);
      String str = ((StringBuilder)localObject1).toString();
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramFile2.getPath());
      ((StringBuilder)localObject1).append(File.separator);
      localObject1 = ((StringBuilder)localObject1).toString();
      if (((String)localObject1).contains(str)) {
        return false;
      }
      if (paramFile1.exists())
      {
        if (!paramFile1.isDirectory()) {
          return false;
        }
        if (paramFile2.exists())
        {
          if ((paramOnReplaceListener != null) && (!paramOnReplaceListener.onReplace())) {
            return true;
          }
          if (!deleteAllInDir(paramFile2)) {
            return false;
          }
        }
        if (!createOrExistsDir(paramFile2)) {
          return false;
        }
        paramFile2 = paramFile1.listFiles();
        if ((paramFile2 != null) && (paramFile2.length > 0))
        {
          int j = paramFile2.length;
          int i = 0;
          while (i < j)
          {
            str = paramFile2[i];
            Object localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append((String)localObject1);
            ((StringBuilder)localObject2).append(str.getName());
            localObject2 = new File(((StringBuilder)localObject2).toString());
            if (str.isFile())
            {
              if (!copyOrMoveFile(str, (File)localObject2, paramOnReplaceListener, paramBoolean)) {
                return false;
              }
            }
            else if ((str.isDirectory()) && (!copyOrMoveDir(str, (File)localObject2, paramOnReplaceListener, paramBoolean))) {
              return false;
            }
            i += 1;
          }
        }
        if ((!paramBoolean) || (deleteDir(paramFile1))) {
          return true;
        }
      }
    }
    return false;
  }
  
  private static boolean copyOrMoveDir(File paramFile1, File paramFile2, boolean paramBoolean)
  {
    copyOrMoveDir(paramFile1, paramFile2, new OnReplaceListener()
    {
      public boolean onReplace()
      {
        return true;
      }
    }, paramBoolean);
  }
  
  /* Error */
  private static boolean copyOrMoveFile(File paramFile1, File paramFile2, OnReplaceListener paramOnReplaceListener, boolean paramBoolean)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 5
    //   3: aload_0
    //   4: ifnull +213 -> 217
    //   7: aload_1
    //   8: ifnonnull +5 -> 13
    //   11: iconst_0
    //   12: ireturn
    //   13: aload_0
    //   14: aload_1
    //   15: invokevirtual 167	java/io/File:equals	(Ljava/lang/Object;)Z
    //   18: ifeq +5 -> 23
    //   21: iconst_0
    //   22: ireturn
    //   23: aload_0
    //   24: invokevirtual 127	java/io/File:exists	()Z
    //   27: ifeq +190 -> 217
    //   30: aload_0
    //   31: invokevirtual 153	java/io/File:isFile	()Z
    //   34: ifne +5 -> 39
    //   37: iconst_0
    //   38: ireturn
    //   39: aload_1
    //   40: invokevirtual 127	java/io/File:exists	()Z
    //   43: ifeq +30 -> 73
    //   46: aload_2
    //   47: ifnull +17 -> 64
    //   50: aload_2
    //   51: invokeinterface 133 1 0
    //   56: ifeq +6 -> 62
    //   59: goto +5 -> 64
    //   62: iconst_1
    //   63: ireturn
    //   64: aload_1
    //   65: invokevirtual 170	java/io/File:delete	()Z
    //   68: ifne +5 -> 73
    //   71: iconst_0
    //   72: ireturn
    //   73: aload_1
    //   74: invokevirtual 174	java/io/File:getParentFile	()Ljava/io/File;
    //   77: invokestatic 140	com/jd/lib/un/utils/UnFileUtils:createOrExistsDir	(Ljava/io/File;)Z
    //   80: ifne +5 -> 85
    //   83: iconst_0
    //   84: ireturn
    //   85: aconst_null
    //   86: astore 8
    //   88: aconst_null
    //   89: astore_2
    //   90: new 176	java/io/FileInputStream
    //   93: dup
    //   94: aload_0
    //   95: invokespecial 179	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   98: astore 7
    //   100: aload_1
    //   101: aload 7
    //   103: iconst_0
    //   104: invokestatic 185	com/jd/lib/un/utils/UnFileIOUtils:writeFileFromIS	(Ljava/io/File;Ljava/io/InputStream;Z)Z
    //   107: istore 6
    //   109: iload 5
    //   111: istore 4
    //   113: iload 6
    //   115: ifeq +23 -> 138
    //   118: iload_3
    //   119: ifeq +16 -> 135
    //   122: aload_0
    //   123: invokestatic 188	com/jd/lib/un/utils/UnFileUtils:deleteFile	(Ljava/io/File;)Z
    //   126: istore_3
    //   127: iload 5
    //   129: istore 4
    //   131: iload_3
    //   132: ifeq +6 -> 138
    //   135: iconst_1
    //   136: istore 4
    //   138: aload 7
    //   140: invokevirtual 191	java/io/FileInputStream:close	()V
    //   143: iload 4
    //   145: ireturn
    //   146: astore_0
    //   147: aload_0
    //   148: invokevirtual 194	java/io/IOException:printStackTrace	()V
    //   151: iload 4
    //   153: ireturn
    //   154: astore_0
    //   155: aload 7
    //   157: astore_2
    //   158: goto +41 -> 199
    //   161: astore_1
    //   162: aload 7
    //   164: astore_0
    //   165: goto +11 -> 176
    //   168: astore_0
    //   169: goto +30 -> 199
    //   172: astore_1
    //   173: aload 8
    //   175: astore_0
    //   176: aload_0
    //   177: astore_2
    //   178: aload_1
    //   179: invokevirtual 195	java/io/FileNotFoundException:printStackTrace	()V
    //   182: aload_0
    //   183: ifnull +34 -> 217
    //   186: aload_0
    //   187: invokevirtual 191	java/io/FileInputStream:close	()V
    //   190: iconst_0
    //   191: ireturn
    //   192: astore_0
    //   193: aload_0
    //   194: invokevirtual 194	java/io/IOException:printStackTrace	()V
    //   197: iconst_0
    //   198: ireturn
    //   199: aload_2
    //   200: ifnull +15 -> 215
    //   203: aload_2
    //   204: invokevirtual 191	java/io/FileInputStream:close	()V
    //   207: goto +8 -> 215
    //   210: astore_1
    //   211: aload_1
    //   212: invokevirtual 194	java/io/IOException:printStackTrace	()V
    //   215: aload_0
    //   216: athrow
    //   217: iconst_0
    //   218: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	219	0	paramFile1	File
    //   0	219	1	paramFile2	File
    //   0	219	2	paramOnReplaceListener	OnReplaceListener
    //   0	219	3	paramBoolean	boolean
    //   111	41	4	bool1	boolean
    //   1	127	5	bool2	boolean
    //   107	7	6	bool3	boolean
    //   98	65	7	localFileInputStream	java.io.FileInputStream
    //   86	88	8	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   138	143	146	java/io/IOException
    //   100	109	154	java/lang/Throwable
    //   122	127	154	java/lang/Throwable
    //   100	109	161	java/io/FileNotFoundException
    //   122	127	161	java/io/FileNotFoundException
    //   90	100	168	java/lang/Throwable
    //   178	182	168	java/lang/Throwable
    //   90	100	172	java/io/FileNotFoundException
    //   186	190	192	java/io/IOException
    //   203	207	210	java/io/IOException
  }
  
  private static boolean copyOrMoveFile(File paramFile1, File paramFile2, boolean paramBoolean)
  {
    copyOrMoveFile(paramFile1, paramFile2, new OnReplaceListener()
    {
      public boolean onReplace()
      {
        return true;
      }
    }, paramBoolean);
  }
  
  public static boolean createFileByDeleteOldFile(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    if ((paramFile.exists()) && (!paramFile.delete())) {
      return false;
    }
    if (!createOrExistsDir(paramFile.getParentFile())) {
      return false;
    }
    try
    {
      boolean bool = paramFile.createNewFile();
      return bool;
    }
    catch (IOException paramFile)
    {
      paramFile.printStackTrace();
    }
    return false;
  }
  
  public static boolean createFileByDeleteOldFile(String paramString)
  {
    return createFileByDeleteOldFile(getFileByPath(paramString));
  }
  
  public static boolean createOrExistsDir(File paramFile)
  {
    return (paramFile != null) && (paramFile.exists() ? paramFile.isDirectory() : paramFile.mkdirs());
  }
  
  public static boolean createOrExistsDir(String paramString)
  {
    return createOrExistsDir(getFileByPath(paramString));
  }
  
  public static boolean createOrExistsFile(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    if (paramFile.exists()) {
      return paramFile.isFile();
    }
    if (!createOrExistsDir(paramFile.getParentFile())) {
      return false;
    }
    try
    {
      boolean bool = paramFile.createNewFile();
      return bool;
    }
    catch (IOException paramFile)
    {
      paramFile.printStackTrace();
    }
    return false;
  }
  
  public static boolean createOrExistsFile(String paramString)
  {
    return createOrExistsFile(getFileByPath(paramString));
  }
  
  public static boolean deleteAllInDir(File paramFile)
  {
    deleteFilesInDirWithFilter(paramFile, new FileFilter()
    {
      public boolean accept(File paramAnonymousFile)
      {
        return true;
      }
    });
  }
  
  public static boolean deleteAllInDir(String paramString)
  {
    return deleteAllInDir(getFileByPath(paramString));
  }
  
  public static boolean deleteDir(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    if (!paramFile.exists()) {
      return true;
    }
    if (!paramFile.isDirectory()) {
      return false;
    }
    File[] arrayOfFile = paramFile.listFiles();
    if ((arrayOfFile != null) && (arrayOfFile.length != 0))
    {
      int j = arrayOfFile.length;
      int i = 0;
      while (i < j)
      {
        File localFile = arrayOfFile[i];
        if (localFile.isFile())
        {
          if (!localFile.delete()) {
            return false;
          }
        }
        else if ((localFile.isDirectory()) && (!deleteDir(localFile))) {
          return false;
        }
        i += 1;
      }
    }
    return paramFile.delete();
  }
  
  public static boolean deleteDir(String paramString)
  {
    return deleteDir(getFileByPath(paramString));
  }
  
  public static boolean deleteFile(File paramFile)
  {
    return (paramFile != null) && ((!paramFile.exists()) || ((paramFile.isFile()) && (paramFile.delete())));
  }
  
  public static boolean deleteFile(String paramString)
  {
    return deleteFile(getFileByPath(paramString));
  }
  
  public static boolean deleteFilesInDir(File paramFile)
  {
    deleteFilesInDirWithFilter(paramFile, new FileFilter()
    {
      public boolean accept(File paramAnonymousFile)
      {
        return paramAnonymousFile.isFile();
      }
    });
  }
  
  public static boolean deleteFilesInDir(String paramString)
  {
    return deleteFilesInDir(getFileByPath(paramString));
  }
  
  public static boolean deleteFilesInDirWithFilter(File paramFile, FileFilter paramFileFilter)
  {
    if (paramFile == null) {
      return false;
    }
    if (!paramFile.exists()) {
      return true;
    }
    if (!paramFile.isDirectory()) {
      return false;
    }
    paramFile = paramFile.listFiles();
    if ((paramFile != null) && (paramFile.length != 0))
    {
      int j = paramFile.length;
      int i = 0;
      while (i < j)
      {
        File localFile = paramFile[i];
        if (paramFileFilter.accept(localFile)) {
          if (localFile.isFile())
          {
            if (!localFile.delete()) {
              return false;
            }
          }
          else if ((localFile.isDirectory()) && (!deleteDir(localFile))) {
            return false;
          }
        }
        i += 1;
      }
    }
    return true;
  }
  
  public static long getDirLength(File paramFile)
  {
    if (!isDir(paramFile)) {
      return -1L;
    }
    long l = 0L;
    paramFile = paramFile.listFiles();
    int j;
    int i;
    if ((paramFile != null) && (paramFile.length != 0))
    {
      j = paramFile.length;
      i = 0;
    }
    while (i < j)
    {
      File localFile = paramFile[i];
      if (localFile.isDirectory()) {
        l += getDirLength(localFile);
      } else {
        l += localFile.length();
      }
      i += 1;
      continue;
      return 0L;
    }
    return l;
  }
  
  public static String getDirSize(File paramFile)
  {
    long l = getDirLength(paramFile);
    if (l == -1L) {
      return "";
    }
    return byte2FitMemorySize(l);
  }
  
  public static String getDirSize(String paramString)
  {
    return getDirSize(getFileByPath(paramString));
  }
  
  public static File getFileByPath(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return null;
    }
    return new File(paramString);
  }
  
  public static String getFileExtension(File paramFile)
  {
    if (paramFile == null) {
      return "";
    }
    return getFileExtension(paramFile.getPath());
  }
  
  public static String getFileExtension(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return "";
    }
    int i = paramString.lastIndexOf('.');
    int j = paramString.lastIndexOf(File.separator);
    if ((i != -1) && (j < i)) {
      return paramString.substring(i + 1);
    }
    return "";
  }
  
  public static long getFileLastModified(File paramFile)
  {
    if (paramFile == null) {
      return -1L;
    }
    return paramFile.lastModified();
  }
  
  public static long getFileLastModified(String paramString)
  {
    return getFileLastModified(getFileByPath(paramString));
  }
  
  public static long getFileLength(File paramFile)
  {
    if (!isFile(paramFile)) {
      return -1L;
    }
    return paramFile.length();
  }
  
  public static long getFileLength(String paramString)
  {
    if (paramString.matches("[a-zA-z]+://[^\\s]*")) {
      try
      {
        Object localObject = ShooterUrlConnectionInstrumentation.openConnection(new URL(paramString).openConnection());
        localObject = (URLConnection)localObject;
        if ((localObject instanceof HttpURLConnection))
        {
          localObject = (HttpURLConnection)localObject;
          ((HttpURLConnection)localObject).setRequestProperty("Accept-Encoding", "identity");
          ((HttpURLConnection)localObject).connect();
          int i = ((HttpURLConnection)localObject).getResponseCode();
          if (i == 200)
          {
            i = ((HttpURLConnection)localObject).getContentLength();
            return i;
          }
        }
        return -1L;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
      }
    }
    return getFileLength(getFileByPath(paramString));
  }
  
  public static String getFileName(File paramFile)
  {
    if (paramFile == null) {
      return "";
    }
    return getFileName(paramFile.getAbsolutePath());
  }
  
  public static String getFileName(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return "";
    }
    int i = paramString.lastIndexOf(File.separator);
    if (i == -1) {
      return paramString;
    }
    return paramString.substring(i + 1);
  }
  
  public static String getFileNameNoExtension(File paramFile)
  {
    if (paramFile == null) {
      return "";
    }
    return getFileNameNoExtension(paramFile.getPath());
  }
  
  public static String getFileNameNoExtension(String paramString)
  {
    if (UnStringUtils.isSpace(paramString)) {
      return "";
    }
    int i = paramString.lastIndexOf('.');
    int j = paramString.lastIndexOf(File.separator);
    if (j == -1)
    {
      if (i == -1) {
        return paramString;
      }
      return paramString.substring(0, i);
    }
    if ((i != -1) && (j <= i)) {
      return paramString.substring(j + 1, i);
    }
    return paramString.substring(j + 1);
  }
  
  public static String getFileSize(String paramString)
  {
    long l = getFileLength(paramString);
    if (l == -1L) {
      return "";
    }
    return byte2FitMemorySize(l);
  }
  
  public static boolean isDir(File paramFile)
  {
    return (paramFile != null) && (paramFile.exists()) && (paramFile.isDirectory());
  }
  
  public static boolean isDir(String paramString)
  {
    return isDir(getFileByPath(paramString));
  }
  
  public static boolean isFile(File paramFile)
  {
    return (paramFile != null) && (paramFile.exists()) && (paramFile.isFile());
  }
  
  public static boolean isFile(String paramString)
  {
    return isFile(getFileByPath(paramString));
  }
  
  public static boolean isFileExists(File paramFile)
  {
    return (paramFile != null) && (paramFile.exists());
  }
  
  public static boolean isFileExists(String paramString)
  {
    return isFileExists(getFileByPath(paramString));
  }
  
  public static List listFilesInDir(File paramFile, boolean paramBoolean)
  {
    listFilesInDirWithFilter(paramFile, new FileFilter()
    {
      public boolean accept(File paramAnonymousFile)
      {
        return true;
      }
    }, paramBoolean);
  }
  
  public static List listFilesInDir(String paramString)
  {
    return listFilesInDir(paramString, false);
  }
  
  public static List listFilesInDir(String paramString, boolean paramBoolean)
  {
    return listFilesInDir(getFileByPath(paramString), paramBoolean);
  }
  
  public static List listFilesInDirWithFilter(File paramFile, FileFilter paramFileFilter)
  {
    return listFilesInDirWithFilter(paramFile, paramFileFilter, false);
  }
  
  public static List listFilesInDirWithFilter(File paramFile, FileFilter paramFileFilter, boolean paramBoolean)
  {
    if (!isDir(paramFile)) {
      return null;
    }
    ArrayList localArrayList = new ArrayList();
    paramFile = paramFile.listFiles();
    if ((paramFile != null) && (paramFile.length != 0))
    {
      int j = paramFile.length;
      int i = 0;
      while (i < j)
      {
        File localFile = paramFile[i];
        if (paramFileFilter.accept(localFile)) {
          localArrayList.add(localFile);
        }
        if ((paramBoolean) && (localFile.isDirectory())) {
          localArrayList.addAll(listFilesInDirWithFilter(localFile, paramFileFilter, true));
        }
        i += 1;
      }
    }
    return localArrayList;
  }
  
  public static boolean moveDir(File paramFile1, File paramFile2)
  {
    return copyOrMoveDir(paramFile1, paramFile2, true);
  }
  
  public static boolean moveDir(File paramFile1, File paramFile2, OnReplaceListener paramOnReplaceListener)
  {
    return copyOrMoveDir(paramFile1, paramFile2, paramOnReplaceListener, true);
  }
  
  public static boolean moveDir(String paramString1, String paramString2)
  {
    return moveDir(getFileByPath(paramString1), getFileByPath(paramString2));
  }
  
  public static boolean moveDir(String paramString1, String paramString2, OnReplaceListener paramOnReplaceListener)
  {
    return moveDir(getFileByPath(paramString1), getFileByPath(paramString2), paramOnReplaceListener);
  }
  
  public static boolean moveFile(File paramFile1, File paramFile2)
  {
    return copyOrMoveFile(paramFile1, paramFile2, true);
  }
  
  public static boolean moveFile(File paramFile1, File paramFile2, OnReplaceListener paramOnReplaceListener)
  {
    return copyOrMoveFile(paramFile1, paramFile2, paramOnReplaceListener, true);
  }
  
  public static boolean moveFile(String paramString1, String paramString2)
  {
    return moveFile(getFileByPath(paramString1), getFileByPath(paramString2));
  }
  
  public static boolean moveFile(String paramString1, String paramString2, OnReplaceListener paramOnReplaceListener)
  {
    return moveFile(getFileByPath(paramString1), getFileByPath(paramString2), paramOnReplaceListener);
  }
  
  public static boolean rename(File paramFile, String paramString)
  {
    if (paramFile == null) {
      return false;
    }
    if (!paramFile.exists()) {
      return false;
    }
    if (UnStringUtils.isSpace(paramString)) {
      return false;
    }
    if (paramString.equals(paramFile.getName())) {
      return true;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramFile.getParent());
    localStringBuilder.append(File.separator);
    localStringBuilder.append(paramString);
    paramString = new File(localStringBuilder.toString());
    return (!paramString.exists()) && (paramFile.renameTo(paramString));
  }
  
  public static boolean rename(String paramString1, String paramString2)
  {
    return rename(getFileByPath(paramString1), paramString2);
  }
  
  public static abstract interface OnReplaceListener
  {
    public abstract boolean onReplace();
  }
}
