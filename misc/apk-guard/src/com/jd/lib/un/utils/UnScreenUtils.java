package com.jd.lib.un.utils;

import android.app.Activity;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.view.ContextThemeWrapper;
import android.view.Display;
import android.view.KeyCharacterMap;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.Window;
import android.view.WindowManager;
import java.lang.reflect.Method;

public class UnScreenUtils
{
  public UnScreenUtils() {}
  
  private static int getContentViewInvisibleHeight(Activity paramActivity)
  {
    paramActivity = paramActivity.findViewById(16908290);
    Rect localRect = new Rect();
    paramActivity.getWindowVisibleDisplayFrame(localRect);
    return paramActivity.getBottom() - bottom;
  }
  
  public static DisplayMetrics getDisplayMetrics(Context paramContext)
  {
    paramContext = getWindowManager(paramContext);
    if (paramContext == null) {
      return null;
    }
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    paramContext.getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics;
  }
  
  public static int getNavBarHeight(Context paramContext)
  {
    int i = paramContext.getResources().getIdentifier("navigation_bar_height", "dimen", "android");
    if (i > 0) {
      return paramContext.getResources().getDimensionPixelSize(i);
    }
    return 0;
  }
  
  private static String getNavBarOverride()
  {
    if (Build.VERSION.SDK_INT >= 19) {
      try
      {
        Object localObject = Class.forName("android.os.SystemProperties").getDeclaredMethod("get", new Class[] { String.class });
        ((Method)localObject).setAccessible(true);
        boolean bool = ((Method)localObject).invoke(null, new Object[] { "qemu.hw.mainkeys" }) instanceof String;
        if (bool)
        {
          localObject = (String)((Method)localObject).invoke(null, new Object[] { "qemu.hw.mainkeys" });
          return localObject;
        }
      }
      catch (Throwable localThrowable) {}
    }
    return null;
  }
  
  public static float getScreenDensity(Context paramContext)
  {
    return getApplicationContextgetResourcesgetDisplayMetricsdensity;
  }
  
  public static int getScreenDensityDpi(Context paramContext)
  {
    return getApplicationContextgetResourcesgetDisplayMetricsdensityDpi;
  }
  
  public static int getScreenHWithoutVirtKeyboard(Context paramContext)
  {
    paramContext = getDisplayMetrics(paramContext);
    if (paramContext != null) {
      return heightPixels;
    }
    return -1;
  }
  
  public static int getScreenHeightWithVirtKeyboard(Context paramContext)
  {
    WindowManager localWindowManager;
    if ((paramContext.getApplicationContext().getSystemService("window") instanceof WindowManager)) {
      localWindowManager = (WindowManager)paramContext.getApplicationContext().getSystemService("window");
    } else {
      localWindowManager = null;
    }
    if (localWindowManager == null) {
      return getApplicationContextgetResourcesgetDisplayMetricsheightPixels;
    }
    paramContext = new Point();
    if (Build.VERSION.SDK_INT >= 17) {
      localWindowManager.getDefaultDisplay().getRealSize(paramContext);
    } else {
      localWindowManager.getDefaultDisplay().getSize(paramContext);
    }
    return y;
  }
  
  public static int getScreenW(Context paramContext)
  {
    paramContext = getDisplayMetrics(paramContext);
    if (paramContext != null) {
      return widthPixels;
    }
    return -1;
  }
  
  public static int getScreenWidth(Context paramContext)
  {
    WindowManager localWindowManager;
    if ((paramContext.getApplicationContext().getSystemService("window") instanceof WindowManager)) {
      localWindowManager = (WindowManager)paramContext.getApplicationContext().getSystemService("window");
    } else {
      localWindowManager = null;
    }
    if (localWindowManager == null) {
      return getApplicationContextgetResourcesgetDisplayMetricswidthPixels;
    }
    paramContext = new Point();
    if (Build.VERSION.SDK_INT >= 17) {
      localWindowManager.getDefaultDisplay().getRealSize(paramContext);
    } else {
      localWindowManager.getDefaultDisplay().getSize(paramContext);
    }
    return x;
  }
  
  public static WindowManager getWindowManager(Context paramContext)
  {
    if ((paramContext.getSystemService("window") instanceof WindowManager)) {
      return (WindowManager)paramContext.getSystemService("window");
    }
    return null;
  }
  
  public static boolean hasNavBar(Context paramContext)
  {
    Resources localResources = paramContext.getResources();
    int i = localResources.getIdentifier("config_showNavigationBar", "bool", "android");
    if (i != 0)
    {
      boolean bool = localResources.getBoolean(i);
      paramContext = getNavBarOverride();
      if ("1".equals(paramContext)) {
        return false;
      }
      if ("0".equals(paramContext)) {
        return true;
      }
      return bool;
    }
    return ViewConfiguration.get(paramContext).hasPermanentMenuKey() ^ true;
  }
  
  public static boolean isLandscape(Context paramContext)
  {
    return getApplicationContextgetResourcesgetConfigurationorientation == 2;
  }
  
  public static boolean isPortrait(Context paramContext)
  {
    return getApplicationContextgetResourcesgetConfigurationorientation == 1;
  }
  
  public static boolean isShowNavBar(Context paramContext)
  {
    if (!hasNavBar(paramContext)) {
      return false;
    }
    if (Build.VERSION.SDK_INT >= 17)
    {
      paramContext = getWindowManager(paramContext);
      if (paramContext != null)
      {
        paramContext = paramContext.getDefaultDisplay();
        Point localPoint1 = new Point();
        Point localPoint2 = new Point();
        paramContext.getSize(localPoint1);
        paramContext.getRealSize(localPoint2);
        if (y != y) {
          return true;
        }
      }
      else
      {
        return false;
      }
    }
    else
    {
      boolean bool1 = ViewConfiguration.get(paramContext).hasPermanentMenuKey();
      boolean bool2 = KeyCharacterMap.deviceHasKey(4);
      if (!bool1) {
        return !bool2;
      }
    }
    return false;
  }
  
  public static boolean isTablet(Context paramContext)
  {
    return (getApplicationContextgetResourcesgetConfigurationscreenLayout & 0xF) >= 3;
  }
  
  public static Bitmap screenShot(Activity paramActivity)
  {
    return screenShot(paramActivity, false);
  }
  
  public static Bitmap screenShot(Activity paramActivity, boolean paramBoolean)
  {
    View localView = paramActivity.getWindow().getDecorView();
    localView.setDrawingCacheEnabled(true);
    localView.buildDrawingCache();
    Bitmap localBitmap = localView.getDrawingCache();
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    paramActivity.getWindowManager().getDefaultDisplay().getMetrics(localDisplayMetrics);
    if (paramBoolean)
    {
      paramActivity = paramActivity.getResources();
      int i = paramActivity.getDimensionPixelSize(paramActivity.getIdentifier("status_bar_height", "dimen", "android"));
      paramActivity = Bitmap.createBitmap(localBitmap, 0, i, widthPixels, heightPixels - i);
    }
    else
    {
      paramActivity = Bitmap.createBitmap(localBitmap, 0, 0, widthPixels, heightPixels);
    }
    localView.destroyDrawingCache();
    return paramActivity;
  }
  
  public static void setFullScreen(Activity paramActivity)
  {
    paramActivity.getWindow().addFlags(1536);
  }
  
  public static void setLandscape(Activity paramActivity)
  {
    paramActivity.setRequestedOrientation(0);
  }
  
  public static void setPortrait(Activity paramActivity)
  {
    paramActivity.setRequestedOrientation(1);
  }
}
