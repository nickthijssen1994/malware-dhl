package com.jd.lib.un.utils.secure;

import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;

public class UnBase64
{
  public static final int DECODE = 0;
  public static final int DONT_GUNZIP = 4;
  public static final int DO_BREAK_LINES = 8;
  public static final int ENCODE = 1;
  private static final byte EQUALS_SIGN = 61;
  private static final byte EQUALS_SIGN_ENC = -1;
  public static final int GZIP = 2;
  private static final int MAX_LINE_LENGTH = 76;
  private static final byte NEW_LINE = 10;
  public static final int NO_OPTIONS = 0;
  public static final int ORDERED = 32;
  private static final String PAGE_KEY = "UnBase64";
  private static final String PREFERRED_ENCODING = "US-ASCII";
  public static final int URL_SAFE = 16;
  private static final byte WHITE_SPACE_ENC = -5;
  private static final byte[] _ORDERED_ALPHABET = { 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 };
  private static final byte[] _ORDERED_DECODABET = { -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 0, -9, -9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -9, -9, -9, -1, -9, -9, -9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, -9, -9, -9, -9, 37, -9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 };
  private static final byte[] _STANDARD_ALPHABET = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
  private static final byte[] _STANDARD_DECODABET = { -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, -9, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 };
  private static final byte[] _URL_SAFE_ALPHABET = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };
  private static final byte[] _URL_SAFE_DECODABET = { -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, 63, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 };
  
  private UnBase64() {}
  
  public static byte[] decode(String paramString)
    throws IOException
  {
    return decode(paramString, 0);
  }
  
  public static byte[] decode(String paramString, int paramInt)
    throws IOException
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a13 = a12\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static byte[] decode(byte[] paramArrayOfByte)
    throws IOException
  {
    return decode(paramArrayOfByte, 0, paramArrayOfByte.length, 0);
  }
  
  public static byte[] decode(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
    throws IOException
  {
    if (paramArrayOfByte != null)
    {
      if (paramInt1 >= 0)
      {
        int m = paramInt1 + paramInt2;
        if (m <= paramArrayOfByte.length)
        {
          if (paramInt2 == 0) {
            return new byte[0];
          }
          if (paramInt2 >= 4)
          {
            byte[] arrayOfByte2 = getDecodabet(paramInt3);
            byte[] arrayOfByte1 = new byte[paramInt2 * 3 / 4];
            byte[] arrayOfByte3 = new byte[4];
            int j = 0;
            paramInt2 = 0;
            int i = paramInt1;
            int k;
            for (;;)
            {
              k = paramInt2;
              if (i >= m) {
                break label210;
              }
              int n = arrayOfByte2[(paramArrayOfByte[i] & 0xFF)];
              if (n < -5) {
                break;
              }
              paramInt1 = j;
              k = paramInt2;
              if (n >= -1)
              {
                paramInt1 = j + 1;
                arrayOfByte3[j] = paramArrayOfByte[i];
                if (paramInt1 > 3)
                {
                  k = paramInt2 + decode4to3(arrayOfByte3, 0, arrayOfByte1, paramInt2, paramInt3);
                  if (paramArrayOfByte[i] == 61) {
                    break label210;
                  }
                  paramInt1 = 0;
                }
                else
                {
                  k = paramInt2;
                }
              }
              i += 1;
              j = paramInt1;
              paramInt2 = k;
            }
            throw new IOException(String.format("Bad UnBase64 input character decimal %d in array position %d", new Object[] { Integer.valueOf(paramArrayOfByte[i] & 0xFF), Integer.valueOf(i) }));
            label210:
            paramArrayOfByte = new byte[k];
            System.arraycopy(arrayOfByte1, 0, paramArrayOfByte, 0, k);
            return paramArrayOfByte;
          }
          paramArrayOfByte = new StringBuilder();
          paramArrayOfByte.append("UnBase64-encoded string must have at least four characters, but length specified was ");
          paramArrayOfByte.append(paramInt2);
          throw new IllegalArgumentException(paramArrayOfByte.toString());
        }
      }
      throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.", new Object[] { Integer.valueOf(paramArrayOfByte.length), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    }
    throw new NullPointerException("Cannot decode null source array.");
  }
  
  private static int decode4to3(byte[] paramArrayOfByte1, int paramInt1, byte[] paramArrayOfByte2, int paramInt2, int paramInt3)
  {
    if (paramArrayOfByte1 != null)
    {
      if (paramArrayOfByte2 != null)
      {
        if (paramInt1 >= 0)
        {
          int j = paramInt1 + 3;
          if (j < paramArrayOfByte1.length)
          {
            if (paramInt2 >= 0)
            {
              int i = paramInt2 + 2;
              if (i < paramArrayOfByte2.length)
              {
                byte[] arrayOfByte = getDecodabet(paramInt3);
                paramInt3 = paramInt1 + 2;
                if (paramArrayOfByte1[paramInt3] == 61)
                {
                  paramInt3 = arrayOfByte[paramArrayOfByte1[paramInt1]];
                  paramArrayOfByte2[paramInt2] = ((byte)(((arrayOfByte[paramArrayOfByte1[(paramInt1 + 1)]] & 0xFF) << 12 | (paramInt3 & 0xFF) << 18) >>> 16));
                  return 1;
                }
                if (paramArrayOfByte1[j] == 61)
                {
                  i = arrayOfByte[paramArrayOfByte1[paramInt1]];
                  paramInt1 = arrayOfByte[paramArrayOfByte1[(paramInt1 + 1)]];
                  paramInt1 = (arrayOfByte[paramArrayOfByte1[paramInt3]] & 0xFF) << 6 | (paramInt1 & 0xFF) << 12 | (i & 0xFF) << 18;
                  paramArrayOfByte2[paramInt2] = ((byte)(paramInt1 >>> 16));
                  paramArrayOfByte2[(paramInt2 + 1)] = ((byte)(paramInt1 >>> 8));
                  return 2;
                }
                int k = arrayOfByte[paramArrayOfByte1[paramInt1]];
                paramInt1 = arrayOfByte[paramArrayOfByte1[(paramInt1 + 1)]];
                paramInt3 = arrayOfByte[paramArrayOfByte1[paramInt3]];
                paramInt1 = arrayOfByte[paramArrayOfByte1[j]] & 0xFF | (paramInt1 & 0xFF) << 12 | (k & 0xFF) << 18 | (paramInt3 & 0xFF) << 6;
                paramArrayOfByte2[paramInt2] = ((byte)(paramInt1 >> 16));
                paramArrayOfByte2[(paramInt2 + 1)] = ((byte)(paramInt1 >> 8));
                paramArrayOfByte2[i] = ((byte)paramInt1);
                return 3;
              }
            }
            throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.", new Object[] { Integer.valueOf(paramArrayOfByte2.length), Integer.valueOf(paramInt2) }));
          }
        }
        throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.", new Object[] { Integer.valueOf(paramArrayOfByte1.length), Integer.valueOf(paramInt1) }));
      }
      throw new NullPointerException("Destination array was null.");
    }
    throw new NullPointerException("Source array was null.");
  }
  
  /* Error */
  public static void decodeFileToFile(String paramString1, String paramString2)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokestatic 285	com/jd/lib/un/utils/secure/UnBase64:decodeFromFile	(Ljava/lang/String;)[B
    //   4: astore_3
    //   5: aconst_null
    //   6: astore_2
    //   7: aconst_null
    //   8: astore_0
    //   9: new 287	java/io/BufferedOutputStream
    //   12: dup
    //   13: new 289	java/io/FileOutputStream
    //   16: dup
    //   17: aload_1
    //   18: invokespecial 290	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   21: invokespecial 293	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   24: astore_1
    //   25: aload_1
    //   26: aload_3
    //   27: invokevirtual 299	java/io/OutputStream:write	([B)V
    //   30: aload_1
    //   31: invokevirtual 302	java/io/OutputStream:close	()V
    //   34: return
    //   35: astore_2
    //   36: aload_1
    //   37: astore_0
    //   38: aload_2
    //   39: astore_1
    //   40: goto +20 -> 60
    //   43: astore_2
    //   44: aload_1
    //   45: astore_0
    //   46: aload_2
    //   47: astore_1
    //   48: goto +10 -> 58
    //   51: astore_1
    //   52: goto +8 -> 60
    //   55: astore_1
    //   56: aload_2
    //   57: astore_0
    //   58: aload_1
    //   59: athrow
    //   60: aload_0
    //   61: ifnull +7 -> 68
    //   64: aload_0
    //   65: invokevirtual 302	java/io/OutputStream:close	()V
    //   68: aload_1
    //   69: athrow
    //   70: astore_0
    //   71: return
    //   72: astore_0
    //   73: goto -5 -> 68
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	76	0	paramString1	String
    //   0	76	1	paramString2	String
    //   6	1	2	localObject	Object
    //   35	4	2	localThrowable	Throwable
    //   43	14	2	localIOException	IOException
    //   4	23	3	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   25	30	35	java/lang/Throwable
    //   25	30	43	java/io/IOException
    //   9	25	51	java/lang/Throwable
    //   58	60	51	java/lang/Throwable
    //   9	25	55	java/io/IOException
    //   30	34	70	java/lang/Exception
    //   64	68	72	java/lang/Exception
  }
  
  /* Error */
  public static byte[] decodeFromFile(String paramString)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: aconst_null
    //   4: astore 7
    //   6: aload 7
    //   8: astore 5
    //   10: new 304	java/io/File
    //   13: dup
    //   14: aload_0
    //   15: invokespecial 305	java/io/File:<init>	(Ljava/lang/String;)V
    //   18: astore_0
    //   19: aload 7
    //   21: astore 5
    //   23: aload_0
    //   24: invokevirtual 309	java/io/File:length	()J
    //   27: lstore_3
    //   28: lload_3
    //   29: ldc2_w 310
    //   32: lcmp
    //   33: ifgt +114 -> 147
    //   36: aload 7
    //   38: astore 5
    //   40: aload_0
    //   41: invokevirtual 309	java/io/File:length	()J
    //   44: lstore_3
    //   45: lload_3
    //   46: l2i
    //   47: newarray byte
    //   49: astore 8
    //   51: aload 7
    //   53: astore 5
    //   55: new 8	com/jd/lib/un/utils/secure/UnBase64$InputStream
    //   58: dup
    //   59: new 313	java/io/BufferedInputStream
    //   62: dup
    //   63: new 315	java/io/FileInputStream
    //   66: dup
    //   67: aload_0
    //   68: invokespecial 318	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   71: invokespecial 321	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   74: iconst_0
    //   75: invokespecial 324	com/jd/lib/un/utils/secure/UnBase64$InputStream:<init>	(Ljava/io/InputStream;I)V
    //   78: astore_0
    //   79: iconst_0
    //   80: istore_1
    //   81: aload_0
    //   82: aload 8
    //   84: iload_1
    //   85: sipush 4096
    //   88: invokevirtual 328	com/jd/lib/un/utils/secure/UnBase64$InputStream:read	([BII)I
    //   91: istore_2
    //   92: iload_2
    //   93: iflt +10 -> 103
    //   96: iload_1
    //   97: iload_2
    //   98: iadd
    //   99: istore_1
    //   100: goto -19 -> 81
    //   103: iload_1
    //   104: newarray byte
    //   106: astore 5
    //   108: aload 8
    //   110: iconst_0
    //   111: aload 5
    //   113: iconst_0
    //   114: iload_1
    //   115: invokestatic 242	java/lang/System:arraycopy	(Ljava/lang/Object;ILjava/lang/Object;II)V
    //   118: aload_0
    //   119: invokevirtual 331	java/io/FilterInputStream:close	()V
    //   122: aload 5
    //   124: areturn
    //   125: astore 6
    //   127: aload_0
    //   128: astore 5
    //   130: aload 6
    //   132: astore_0
    //   133: goto +95 -> 228
    //   136: astore 6
    //   138: aload_0
    //   139: astore 5
    //   141: aload 6
    //   143: astore_0
    //   144: goto +82 -> 226
    //   147: aload 7
    //   149: astore 5
    //   151: new 244	java/lang/StringBuilder
    //   154: dup
    //   155: invokespecial 245	java/lang/StringBuilder:<init>	()V
    //   158: astore 8
    //   160: aload 7
    //   162: astore 5
    //   164: aload 8
    //   166: ldc_w 333
    //   169: invokevirtual 251	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   172: pop
    //   173: aload 7
    //   175: astore 5
    //   177: aload 8
    //   179: aload_0
    //   180: invokevirtual 309	java/io/File:length	()J
    //   183: invokevirtual 336	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   186: pop
    //   187: aload 7
    //   189: astore 5
    //   191: aload 8
    //   193: ldc_w 338
    //   196: invokevirtual 251	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   199: pop
    //   200: aload 7
    //   202: astore 5
    //   204: new 204	java/io/IOException
    //   207: dup
    //   208: aload 8
    //   210: invokevirtual 260	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   213: invokespecial 236	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   216: athrow
    //   217: astore_0
    //   218: goto +10 -> 228
    //   221: astore_0
    //   222: aload 6
    //   224: astore 5
    //   226: aload_0
    //   227: athrow
    //   228: aload 5
    //   230: ifnull +8 -> 238
    //   233: aload 5
    //   235: invokevirtual 331	java/io/FilterInputStream:close	()V
    //   238: aload_0
    //   239: athrow
    //   240: astore_0
    //   241: aload 5
    //   243: areturn
    //   244: astore 5
    //   246: goto -8 -> 238
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	249	0	paramString	String
    //   80	35	1	i	int
    //   91	8	2	j	int
    //   27	19	3	l	long
    //   8	234	5	localObject1	Object
    //   244	1	5	localException	Exception
    //   1	1	6	localObject2	Object
    //   125	6	6	localThrowable	Throwable
    //   136	87	6	localIOException	IOException
    //   4	197	7	localObject3	Object
    //   49	160	8	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   81	92	125	java/lang/Throwable
    //   108	118	125	java/lang/Throwable
    //   81	92	136	java/io/IOException
    //   108	118	136	java/io/IOException
    //   10	19	217	java/lang/Throwable
    //   23	28	217	java/lang/Throwable
    //   40	45	217	java/lang/Throwable
    //   55	79	217	java/lang/Throwable
    //   151	160	217	java/lang/Throwable
    //   164	173	217	java/lang/Throwable
    //   177	187	217	java/lang/Throwable
    //   191	200	217	java/lang/Throwable
    //   204	217	217	java/lang/Throwable
    //   226	228	217	java/lang/Throwable
    //   10	19	221	java/io/IOException
    //   23	28	221	java/io/IOException
    //   40	45	221	java/io/IOException
    //   55	79	221	java/io/IOException
    //   151	160	221	java/io/IOException
    //   164	173	221	java/io/IOException
    //   177	187	221	java/io/IOException
    //   191	200	221	java/io/IOException
    //   204	217	221	java/io/IOException
    //   118	122	240	java/lang/Exception
    //   233	238	244	java/lang/Exception
  }
  
  /* Error */
  public static void decodeToFile(String paramString1, String paramString2)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore_2
    //   4: new 11	com/jd/lib/un/utils/secure/UnBase64$OutputStream
    //   7: dup
    //   8: new 289	java/io/FileOutputStream
    //   11: dup
    //   12: aload_1
    //   13: invokespecial 290	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   16: iconst_0
    //   17: invokespecial 342	com/jd/lib/un/utils/secure/UnBase64$OutputStream:<init>	(Ljava/io/OutputStream;I)V
    //   20: astore_1
    //   21: aload_1
    //   22: aload_0
    //   23: ldc 44
    //   25: invokevirtual 345	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   28: invokevirtual 348	java/io/FilterOutputStream:write	([B)V
    //   31: aload_1
    //   32: invokevirtual 349	com/jd/lib/un/utils/secure/UnBase64$OutputStream:close	()V
    //   35: return
    //   36: astore_0
    //   37: aload_1
    //   38: astore_2
    //   39: goto +18 -> 57
    //   42: astore_0
    //   43: aload_1
    //   44: astore_2
    //   45: goto +10 -> 55
    //   48: astore_0
    //   49: goto +8 -> 57
    //   52: astore_0
    //   53: aload_3
    //   54: astore_2
    //   55: aload_0
    //   56: athrow
    //   57: aload_2
    //   58: ifnull +7 -> 65
    //   61: aload_2
    //   62: invokevirtual 349	com/jd/lib/un/utils/secure/UnBase64$OutputStream:close	()V
    //   65: aload_0
    //   66: athrow
    //   67: astore_0
    //   68: return
    //   69: astore_1
    //   70: goto -5 -> 65
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	73	0	paramString1	String
    //   0	73	1	paramString2	String
    //   3	59	2	localObject1	Object
    //   1	53	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   21	31	36	java/lang/Throwable
    //   21	31	42	java/io/IOException
    //   4	21	48	java/lang/Throwable
    //   55	57	48	java/lang/Throwable
    //   4	21	52	java/io/IOException
    //   31	35	67	java/lang/Exception
    //   61	65	69	java/lang/Exception
  }
  
  public static Object decodeToObject(String paramString)
    throws IOException, ClassNotFoundException
  {
    return decodeToObject(paramString, 0, null);
  }
  
  public static Object decodeToObject(String paramString, int paramInt, ClassLoader paramClassLoader)
    throws IOException, ClassNotFoundException
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a6 = a5\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static void encode(ByteBuffer paramByteBuffer1, ByteBuffer paramByteBuffer2)
  {
    byte[] arrayOfByte1 = new byte[3];
    byte[] arrayOfByte2 = new byte[4];
    while (paramByteBuffer1.hasRemaining())
    {
      int i = Math.min(3, paramByteBuffer1.remaining());
      paramByteBuffer1.get(arrayOfByte1, 0, i);
      encode3to4(arrayOfByte2, arrayOfByte1, i, 0);
      paramByteBuffer2.put(arrayOfByte2);
    }
  }
  
  public static void encode(ByteBuffer paramByteBuffer, CharBuffer paramCharBuffer)
  {
    byte[] arrayOfByte1 = new byte[3];
    byte[] arrayOfByte2 = new byte[4];
    while (paramByteBuffer.hasRemaining())
    {
      int j = Math.min(3, paramByteBuffer.remaining());
      int i = 0;
      paramByteBuffer.get(arrayOfByte1, 0, j);
      encode3to4(arrayOfByte2, arrayOfByte1, j, 0);
      while (i < 4)
      {
        paramCharBuffer.put((char)(arrayOfByte2[i] & 0xFF));
        i += 1;
      }
    }
  }
  
  private static byte[] encode3to4(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3, int paramInt4)
  {
    byte[] arrayOfByte = getAlphabet(paramInt4);
    int j = 0;
    if (paramInt2 > 0) {
      paramInt4 = paramArrayOfByte1[paramInt1] << 24 >>> 8;
    } else {
      paramInt4 = 0;
    }
    int i;
    if (paramInt2 > 1) {
      i = paramArrayOfByte1[(paramInt1 + 1)] << 24 >>> 16;
    } else {
      i = 0;
    }
    if (paramInt2 > 2) {
      j = paramArrayOfByte1[(paramInt1 + 2)] << 24 >>> 24;
    }
    paramInt1 = paramInt4 | i | j;
    switch (paramInt2)
    {
    default: 
      return paramArrayOfByte2;
    case 3: 
      paramArrayOfByte2[paramInt3] = arrayOfByte[(paramInt1 >>> 18)];
      paramArrayOfByte2[(paramInt3 + 1)] = arrayOfByte[(paramInt1 >>> 12 & 0x3F)];
      paramArrayOfByte2[(paramInt3 + 2)] = arrayOfByte[(paramInt1 >>> 6 & 0x3F)];
      paramArrayOfByte2[(paramInt3 + 3)] = arrayOfByte[(paramInt1 & 0x3F)];
      return paramArrayOfByte2;
    case 2: 
      paramArrayOfByte2[paramInt3] = arrayOfByte[(paramInt1 >>> 18)];
      paramArrayOfByte2[(paramInt3 + 1)] = arrayOfByte[(paramInt1 >>> 12 & 0x3F)];
      paramArrayOfByte2[(paramInt3 + 2)] = arrayOfByte[(paramInt1 >>> 6 & 0x3F)];
      paramArrayOfByte2[(paramInt3 + 3)] = 61;
      return paramArrayOfByte2;
    }
    paramArrayOfByte2[paramInt3] = arrayOfByte[(paramInt1 >>> 18)];
    paramArrayOfByte2[(paramInt3 + 1)] = arrayOfByte[(paramInt1 >>> 12 & 0x3F)];
    paramArrayOfByte2[(paramInt3 + 2)] = 61;
    paramArrayOfByte2[(paramInt3 + 3)] = 61;
    return paramArrayOfByte2;
  }
  
  private static byte[] encode3to4(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt1, int paramInt2)
  {
    encode3to4(paramArrayOfByte2, 0, paramInt1, paramArrayOfByte1, 0, paramInt2);
    return paramArrayOfByte1;
  }
  
  public static String encodeBytes(byte[] paramArrayOfByte)
  {
    int i = paramArrayOfByte.length;
    try
    {
      paramArrayOfByte = encodeBytes(paramArrayOfByte, 0, i, 0);
      return paramArrayOfByte;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static String encodeBytes(byte[] paramArrayOfByte, int paramInt)
    throws IOException
  {
    return encodeBytes(paramArrayOfByte, 0, paramArrayOfByte.length, paramInt);
  }
  
  public static String encodeBytes(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    try
    {
      paramArrayOfByte = encodeBytes(paramArrayOfByte, paramInt1, paramInt2, 0);
      return paramArrayOfByte;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static String encodeBytes(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
    throws IOException
  {
    paramArrayOfByte = encodeBytesToBytes(paramArrayOfByte, paramInt1, paramInt2, paramInt3);
    try
    {
      String str = new String(paramArrayOfByte, "US-ASCII");
      return str;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      for (;;) {}
    }
    return new String(paramArrayOfByte);
  }
  
  public static byte[] encodeBytesToBytes(byte[] paramArrayOfByte)
  {
    int i = paramArrayOfByte.length;
    try
    {
      paramArrayOfByte = encodeBytesToBytes(paramArrayOfByte, 0, i, 0);
      return paramArrayOfByte;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static byte[] encodeBytesToBytes(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
    throws IOException
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a6 = a5\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  /* Error */
  public static void encodeFileToFile(String paramString1, String paramString2)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokestatic 415	com/jd/lib/un/utils/secure/UnBase64:encodeFromFile	(Ljava/lang/String;)Ljava/lang/String;
    //   4: astore_3
    //   5: aconst_null
    //   6: astore_2
    //   7: aconst_null
    //   8: astore_0
    //   9: new 287	java/io/BufferedOutputStream
    //   12: dup
    //   13: new 289	java/io/FileOutputStream
    //   16: dup
    //   17: aload_1
    //   18: invokespecial 290	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   21: invokespecial 293	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   24: astore_1
    //   25: aload_1
    //   26: aload_3
    //   27: ldc 44
    //   29: invokevirtual 345	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   32: invokevirtual 299	java/io/OutputStream:write	([B)V
    //   35: aload_1
    //   36: invokevirtual 302	java/io/OutputStream:close	()V
    //   39: return
    //   40: astore_2
    //   41: aload_1
    //   42: astore_0
    //   43: aload_2
    //   44: astore_1
    //   45: goto +20 -> 65
    //   48: astore_2
    //   49: aload_1
    //   50: astore_0
    //   51: aload_2
    //   52: astore_1
    //   53: goto +10 -> 63
    //   56: astore_1
    //   57: goto +8 -> 65
    //   60: astore_1
    //   61: aload_2
    //   62: astore_0
    //   63: aload_1
    //   64: athrow
    //   65: aload_0
    //   66: ifnull +7 -> 73
    //   69: aload_0
    //   70: invokevirtual 302	java/io/OutputStream:close	()V
    //   73: aload_1
    //   74: athrow
    //   75: astore_0
    //   76: return
    //   77: astore_0
    //   78: goto -5 -> 73
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	81	0	paramString1	String
    //   0	81	1	paramString2	String
    //   6	1	2	localObject	Object
    //   40	4	2	localThrowable	Throwable
    //   48	14	2	localIOException	IOException
    //   4	23	3	str	String
    // Exception table:
    //   from	to	target	type
    //   25	35	40	java/lang/Throwable
    //   25	35	48	java/io/IOException
    //   9	25	56	java/lang/Throwable
    //   63	65	56	java/lang/Throwable
    //   9	25	60	java/io/IOException
    //   35	39	75	java/lang/Exception
    //   69	73	77	java/lang/Exception
  }
  
  /* Error */
  public static String encodeFromFile(String paramString)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 8
    //   3: aconst_null
    //   4: astore 9
    //   6: aload 9
    //   8: astore 7
    //   10: new 304	java/io/File
    //   13: dup
    //   14: aload_0
    //   15: invokespecial 305	java/io/File:<init>	(Ljava/lang/String;)V
    //   18: astore_0
    //   19: aload 9
    //   21: astore 7
    //   23: aload_0
    //   24: invokevirtual 309	java/io/File:length	()J
    //   27: lstore 5
    //   29: lload 5
    //   31: l2d
    //   32: dstore_1
    //   33: dload_1
    //   34: invokestatic 421	java/lang/Double:isNaN	(D)Z
    //   37: pop
    //   38: dload_1
    //   39: ldc2_w 422
    //   42: dmul
    //   43: dconst_1
    //   44: dadd
    //   45: d2i
    //   46: istore_3
    //   47: aload 9
    //   49: astore 7
    //   51: iload_3
    //   52: bipush 40
    //   54: invokestatic 426	java/lang/Math:max	(II)I
    //   57: istore_3
    //   58: iload_3
    //   59: newarray byte
    //   61: astore 10
    //   63: aload 9
    //   65: astore 7
    //   67: new 8	com/jd/lib/un/utils/secure/UnBase64$InputStream
    //   70: dup
    //   71: new 313	java/io/BufferedInputStream
    //   74: dup
    //   75: new 315	java/io/FileInputStream
    //   78: dup
    //   79: aload_0
    //   80: invokespecial 318	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   83: invokespecial 321	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   86: iconst_1
    //   87: invokespecial 324	com/jd/lib/un/utils/secure/UnBase64$InputStream:<init>	(Ljava/io/InputStream;I)V
    //   90: astore_0
    //   91: iconst_0
    //   92: istore_3
    //   93: aload_0
    //   94: aload 10
    //   96: iload_3
    //   97: sipush 4096
    //   100: invokevirtual 328	com/jd/lib/un/utils/secure/UnBase64$InputStream:read	([BII)I
    //   103: istore 4
    //   105: iload 4
    //   107: iflt +11 -> 118
    //   110: iload_3
    //   111: iload 4
    //   113: iadd
    //   114: istore_3
    //   115: goto -22 -> 93
    //   118: new 231	java/lang/String
    //   121: dup
    //   122: aload 10
    //   124: iconst_0
    //   125: iload_3
    //   126: ldc 44
    //   128: invokespecial 429	java/lang/String:<init>	([BIILjava/lang/String;)V
    //   131: astore 7
    //   133: aload_0
    //   134: invokevirtual 331	java/io/FilterInputStream:close	()V
    //   137: aload 7
    //   139: areturn
    //   140: astore 8
    //   142: aload_0
    //   143: astore 7
    //   145: aload 8
    //   147: astore_0
    //   148: goto +25 -> 173
    //   151: astore 8
    //   153: aload_0
    //   154: astore 7
    //   156: aload 8
    //   158: astore_0
    //   159: goto +12 -> 171
    //   162: astore_0
    //   163: goto +10 -> 173
    //   166: astore_0
    //   167: aload 8
    //   169: astore 7
    //   171: aload_0
    //   172: athrow
    //   173: aload 7
    //   175: ifnull +8 -> 183
    //   178: aload 7
    //   180: invokevirtual 331	java/io/FilterInputStream:close	()V
    //   183: aload_0
    //   184: athrow
    //   185: astore_0
    //   186: aload 7
    //   188: areturn
    //   189: astore 7
    //   191: goto -8 -> 183
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	194	0	paramString	String
    //   32	7	1	d	double
    //   46	80	3	i	int
    //   103	11	4	j	int
    //   27	3	5	l	long
    //   8	179	7	localObject1	Object
    //   189	1	7	localException	Exception
    //   1	1	8	localObject2	Object
    //   140	6	8	localThrowable	Throwable
    //   151	17	8	localIOException	IOException
    //   4	60	9	localObject3	Object
    //   61	62	10	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   93	105	140	java/lang/Throwable
    //   118	133	140	java/lang/Throwable
    //   93	105	151	java/io/IOException
    //   118	133	151	java/io/IOException
    //   10	19	162	java/lang/Throwable
    //   23	29	162	java/lang/Throwable
    //   51	58	162	java/lang/Throwable
    //   67	91	162	java/lang/Throwable
    //   171	173	162	java/lang/Throwable
    //   10	19	166	java/io/IOException
    //   23	29	166	java/io/IOException
    //   51	58	166	java/io/IOException
    //   67	91	166	java/io/IOException
    //   133	137	185	java/lang/Exception
    //   178	183	189	java/lang/Exception
  }
  
  public static String encodeObject(Serializable paramSerializable)
    throws IOException
  {
    return encodeObject(paramSerializable, 0);
  }
  
  public static String encodeObject(Serializable paramSerializable, int paramInt)
    throws IOException
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a4 = a3\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  /* Error */
  public static void encodeToFile(byte[] paramArrayOfByte, String paramString)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnull +65 -> 66
    //   4: aconst_null
    //   5: astore_3
    //   6: aconst_null
    //   7: astore_2
    //   8: new 11	com/jd/lib/un/utils/secure/UnBase64$OutputStream
    //   11: dup
    //   12: new 289	java/io/FileOutputStream
    //   15: dup
    //   16: aload_1
    //   17: invokespecial 290	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   20: iconst_1
    //   21: invokespecial 342	com/jd/lib/un/utils/secure/UnBase64$OutputStream:<init>	(Ljava/io/OutputStream;I)V
    //   24: astore_1
    //   25: aload_1
    //   26: aload_0
    //   27: invokevirtual 348	java/io/FilterOutputStream:write	([B)V
    //   30: aload_1
    //   31: invokevirtual 349	com/jd/lib/un/utils/secure/UnBase64$OutputStream:close	()V
    //   34: return
    //   35: astore_0
    //   36: aload_1
    //   37: astore_2
    //   38: goto +18 -> 56
    //   41: astore_0
    //   42: aload_1
    //   43: astore_2
    //   44: goto +10 -> 54
    //   47: astore_0
    //   48: goto +8 -> 56
    //   51: astore_0
    //   52: aload_3
    //   53: astore_2
    //   54: aload_0
    //   55: athrow
    //   56: aload_2
    //   57: ifnull +7 -> 64
    //   60: aload_2
    //   61: invokevirtual 349	com/jd/lib/un/utils/secure/UnBase64$OutputStream:close	()V
    //   64: aload_0
    //   65: athrow
    //   66: new 265	java/lang/NullPointerException
    //   69: dup
    //   70: ldc_w 439
    //   73: invokespecial 268	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   76: athrow
    //   77: astore_0
    //   78: return
    //   79: astore_1
    //   80: goto -16 -> 64
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	83	0	paramArrayOfByte	byte[]
    //   0	83	1	paramString	String
    //   7	54	2	localObject1	Object
    //   5	48	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   25	30	35	java/lang/Throwable
    //   25	30	41	java/io/IOException
    //   8	25	47	java/lang/Throwable
    //   54	56	47	java/lang/Throwable
    //   8	25	51	java/io/IOException
    //   30	34	77	java/lang/Exception
    //   60	64	79	java/lang/Exception
  }
  
  private static final byte[] getAlphabet(int paramInt)
  {
    if ((paramInt & 0x10) == 16) {
      return _URL_SAFE_ALPHABET;
    }
    if ((paramInt & 0x20) == 32) {
      return _ORDERED_ALPHABET;
    }
    return _STANDARD_ALPHABET;
  }
  
  private static final byte[] getDecodabet(int paramInt)
  {
    if ((paramInt & 0x10) == 16) {
      return _URL_SAFE_DECODABET;
    }
    if ((paramInt & 0x20) == 32) {
      return _ORDERED_DECODABET;
    }
    return _STANDARD_DECODABET;
  }
  
  public static class InputStream
    extends FilterInputStream
  {
    private boolean breakLines;
    private byte[] buffer;
    private int bufferLength;
    private byte[] decodabet;
    private boolean encode;
    private int lineLength;
    private int numSigBytes;
    private int options;
    private int position;
    
    public InputStream(InputStream paramInputStream)
    {
      this(paramInputStream, 0);
    }
    
    public InputStream(InputStream paramInputStream, int paramInt)
    {
      super();
      options = paramInt;
      boolean bool2 = true;
      boolean bool1;
      if ((paramInt & 0x8) > 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      breakLines = bool1;
      if ((paramInt & 0x1) > 0) {
        bool1 = bool2;
      } else {
        bool1 = false;
      }
      encode = bool1;
      int i;
      if (encode) {
        i = 4;
      } else {
        i = 3;
      }
      bufferLength = i;
      buffer = new byte[bufferLength];
      position = -1;
      lineLength = 0;
      decodabet = UnBase64.getDecodabet(paramInt);
    }
    
    public int read()
      throws IOException
    {
      byte[] arrayOfByte;
      if (position < 0)
      {
        int j;
        if (encode)
        {
          arrayOfByte = new byte[3];
          i = 0;
          j = 0;
          while (i < 3)
          {
            int k = in.read();
            if (k < 0) {
              break;
            }
            arrayOfByte[i] = ((byte)k);
            j += 1;
            i += 1;
          }
          if (j > 0)
          {
            UnBase64.encode3to4(arrayOfByte, 0, j, buffer, 0, options);
            position = 0;
            numSigBytes = 4;
          }
          else
          {
            return -1;
          }
        }
        else
        {
          arrayOfByte = new byte[4];
          i = 0;
          while (i < 4)
          {
            do
            {
              j = in.read();
            } while ((j >= 0) && (decodabet[(j & 0x7F)] <= -5));
            if (j < 0) {
              break;
            }
            arrayOfByte[i] = ((byte)j);
            i += 1;
          }
          if (i == 4)
          {
            numSigBytes = UnBase64.decode4to3(arrayOfByte, 0, buffer, 0, options);
            position = 0;
          }
          else
          {
            if (i == 0) {
              return -1;
            }
            throw new IOException("Improperly padded UnBase64 input.");
          }
        }
      }
      int i = position;
      if (i >= 0)
      {
        if (i >= numSigBytes) {
          return -1;
        }
        if ((encode) && (breakLines) && (lineLength >= 76))
        {
          lineLength = 0;
          return 10;
        }
        lineLength += 1;
        arrayOfByte = buffer;
        i = position;
        position = (i + 1);
        i = arrayOfByte[i];
        if (position >= bufferLength) {
          position = -1;
        }
        return i & 0xFF;
      }
      throw new IOException("Error in UnBase64 code reading stream.");
    }
    
    public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      int i = 0;
      while (i < paramInt2)
      {
        int j = read();
        if (j >= 0)
        {
          paramArrayOfByte[(paramInt1 + i)] = ((byte)j);
          i += 1;
        }
        else if (i == 0)
        {
          return -1;
        }
      }
      return i;
    }
  }
  
  public static class OutputStream
    extends FilterOutputStream
  {
    private byte[] b4;
    private boolean breakLines;
    private byte[] buffer;
    private int bufferLength;
    private byte[] decodabet;
    private boolean encode;
    private int lineLength;
    private int options;
    private int position;
    private boolean suspendEncoding;
    
    public OutputStream(OutputStream paramOutputStream)
    {
      this(paramOutputStream, 1);
    }
    
    public OutputStream(OutputStream paramOutputStream, int paramInt)
    {
      super();
      boolean bool2 = true;
      boolean bool1;
      if ((paramInt & 0x8) != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      breakLines = bool1;
      if ((paramInt & 0x1) != 0) {
        bool1 = bool2;
      } else {
        bool1 = false;
      }
      encode = bool1;
      int i;
      if (encode) {
        i = 3;
      } else {
        i = 4;
      }
      bufferLength = i;
      buffer = new byte[bufferLength];
      position = 0;
      lineLength = 0;
      suspendEncoding = false;
      b4 = new byte[4];
      options = paramInt;
      decodabet = UnBase64.getDecodabet(paramInt);
    }
    
    public void close()
      throws IOException
    {
      flushBase64();
      super.close();
      buffer = null;
      out = null;
    }
    
    public void flushBase64()
      throws IOException
    {
      if (position > 0)
      {
        if (encode)
        {
          out.write(UnBase64.encode3to4(b4, buffer, position, options));
          position = 0;
          return;
        }
        throw new IOException("UnBase64 input not properly padded.");
      }
    }
    
    public void resumeEncoding()
    {
      suspendEncoding = false;
    }
    
    public void suspendEncoding()
      throws IOException
    {
      flushBase64();
      suspendEncoding = true;
    }
    
    public void write(int paramInt)
      throws IOException
    {
      if (suspendEncoding)
      {
        out.write(paramInt);
        return;
      }
      byte[] arrayOfByte;
      int i;
      if (encode)
      {
        arrayOfByte = buffer;
        i = position;
        position = (i + 1);
        arrayOfByte[i] = ((byte)paramInt);
        if (position >= bufferLength)
        {
          out.write(UnBase64.encode3to4(b4, buffer, bufferLength, options));
          lineLength += 4;
          if ((breakLines) && (lineLength >= 76))
          {
            out.write(10);
            lineLength = 0;
          }
          position = 0;
        }
      }
      else
      {
        arrayOfByte = decodabet;
        i = paramInt & 0x7F;
        if (arrayOfByte[i] > -5)
        {
          arrayOfByte = buffer;
          i = position;
          position = (i + 1);
          arrayOfByte[i] = ((byte)paramInt);
          if (position >= bufferLength)
          {
            paramInt = UnBase64.decode4to3(arrayOfByte, 0, b4, 0, options);
            out.write(b4, 0, paramInt);
            position = 0;
          }
        }
        else
        {
          if (arrayOfByte[i] == -5) {
            return;
          }
          throw new IOException("Invalid character in UnBase64 data.");
        }
      }
    }
    
    public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      if (suspendEncoding)
      {
        out.write(paramArrayOfByte, paramInt1, paramInt2);
        return;
      }
      int i = 0;
      while (i < paramInt2)
      {
        write(paramArrayOfByte[(paramInt1 + i)]);
        i += 1;
      }
    }
  }
}
