package com.jd.lib.unification.video.editor;

import com.coremedia.iso.boxes.Container;
import com.googlecode.mp4parser.authoring.Movie;
import com.googlecode.mp4parser.authoring.Track;
import com.googlecode.mp4parser.authoring.TrackMetaData;
import com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;
import com.googlecode.mp4parser.authoring.container.mp4.MovieCreator;
import com.googlecode.mp4parser.authoring.tracks.CroppedTrack;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.WritableByteChannel;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class VideoClip
{
  private static final String PAGE_KEY = "VideoClip";
  
  public VideoClip() {}
  
  private double correctTimeToSyncSample(Track paramTrack, double paramDouble, boolean paramBoolean)
  {
    double[] arrayOfDouble = new double[paramTrack.getSyncSamples().length];
    int j = 0;
    double d2 = 0.0D;
    double d1 = 0.0D;
    long l1 = 0L;
    int i = 0;
    while (i < paramTrack.getSampleDurations().length)
    {
      long l2 = paramTrack.getSampleDurations()[i];
      long[] arrayOfLong = paramTrack.getSyncSamples();
      l1 += 1L;
      if (Arrays.binarySearch(arrayOfLong, l1) >= 0) {
        arrayOfDouble[Arrays.binarySearch(paramTrack.getSyncSamples(), l1)] = d1;
      }
      double d3 = l2;
      double d4 = paramTrack.getTrackMetaData().getTimescale();
      Double.isNaN(d3);
      Double.isNaN(d4);
      d1 += d3 / d4;
      i += 1;
    }
    int k = arrayOfDouble.length;
    d1 = d2;
    i = j;
    while (i < k)
    {
      d2 = arrayOfDouble[i];
      if (d2 > paramDouble)
      {
        if (paramBoolean) {
          return d2;
        }
        return d1;
      }
      i += 1;
      d1 = d2;
    }
    return arrayOfDouble[(arrayOfDouble.length - 1)];
  }
  
  public void clip(String paramString1, String paramString2, String paramString3, double paramDouble1, double paramDouble2, ClipFinishListener paramClipFinishListener)
  {
    for (;;)
    {
      try
      {
        paramString1 = MovieCreator.build(paramString1);
        localObject1 = paramString1.getTracks();
        paramString1.setTracks(new LinkedList());
        localObject2 = ((List)localObject1).iterator();
        int i = 0;
        boolean bool = ((Iterator)localObject2).hasNext();
        Object localObject3;
        if (bool)
        {
          localObject3 = ((Iterator)localObject2).next();
          localObject3 = (Track)localObject3;
          long[] arrayOfLong = ((Track)localObject3).getSyncSamples();
          if (arrayOfLong == null) {
            continue;
          }
          arrayOfLong = ((Track)localObject3).getSyncSamples();
          if (arrayOfLong.length <= 0) {
            continue;
          }
          if (i == 0)
          {
            paramDouble1 = correctTimeToSyncSample((Track)localObject3, paramDouble1, false);
            paramDouble2 = correctTimeToSyncSample((Track)localObject3, paramDouble2, true);
            i = 1;
            continue;
          }
          paramString1 = new RuntimeException("The startTime has already been corrected by another track with SyncSample. Not Supported.");
          throw paramString1;
        }
        localObject1 = ((List)localObject1).iterator();
        double d1 = paramDouble1;
        bool = ((Iterator)localObject1).hasNext();
        if (bool)
        {
          localObject2 = ((Iterator)localObject1).next();
          localObject2 = (Track)localObject2;
          paramDouble1 = 0.0D;
          double d2 = 0.0D;
          l1 = 0L;
          long l2 = -1L;
          l3 = -1L;
          i = 0;
          localObject3 = ((Track)localObject2).getSampleDurations();
          if (i < localObject3.length)
          {
            localObject3 = ((Track)localObject2).getSampleDurations();
            long l6 = localObject3[i];
            long l4 = l2;
            if (paramDouble1 > d2)
            {
              l4 = l2;
              if (paramDouble1 <= d1) {
                l4 = l1;
              }
            }
            long l5 = l3;
            if (paramDouble1 > d2)
            {
              l5 = l3;
              if (paramDouble1 <= paramDouble2) {
                l5 = l1;
              }
            }
            d2 = l6;
            l2 = ((Track)localObject2).getTrackMetaData().getTimescale();
            double d3 = l2;
            Double.isNaN(d2);
            Double.isNaN(d3);
            d3 = d2 / d3;
            l1 += 1L;
            i += 1;
            d2 = paramDouble1;
            paramDouble1 += d3;
            l2 = l4;
            l3 = l5;
            continue;
          }
          l1 = l2;
          if (l2 == -1L) {
            l1 = 0L;
          }
        }
      }
      catch (Exception paramString1)
      {
        Object localObject1;
        Object localObject2;
        long l1;
        long l3;
        continue;
      }
      try
      {
        paramString1.addTrack(new CroppedTrack((Track)localObject2, l1, l3));
      }
      catch (Exception paramString1) {}
    }
    paramString1 = new DefaultMp4Builder().build(paramString1);
    localObject1 = new File(paramString2);
    ((File)localObject1).mkdirs();
    localObject1 = new FileOutputStream(new File((File)localObject1, paramString3));
    localObject2 = ((FileOutputStream)localObject1).getChannel();
    paramString1.writeContainer((WritableByteChannel)localObject2);
    ((FileChannel)localObject2).close();
    ((FileOutputStream)localObject1).close();
    paramString1 = new StringBuilder();
    paramString1.append(paramString2);
    paramString1.append(paramString3);
    paramClipFinishListener.onClipSuccess(paramString1.toString());
    return;
    paramString1 = new StringBuilder();
    paramString1.append(paramString2);
    paramString1.append(paramString3);
    paramClipFinishListener.onClipFailed(paramString1.toString());
  }
  
  static abstract interface ClipFinishListener
  {
    public abstract void onClipFailed(String paramString);
    
    public abstract void onClipSuccess(String paramString);
  }
}
