package com.jd.lib.unification.video.view;

import android.app.Activity;
import android.content.Context;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnInfoListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.media.MediaPlayer.OnSeekCompleteListener;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.Toast;
import com.jd.lib.unification.video.view.util.VideoPlayUtil;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jingdong.common.widget.image.UnNetImageView;

public class VideoPlayer
  extends FrameLayout
  implements MediaPlayer.OnCompletionListener, MediaPlayer.OnErrorListener, MediaPlayer.OnInfoListener, MediaPlayer.OnPreparedListener, MediaPlayer.OnSeekCompleteListener, View.OnClickListener
{
  private static final int SHOW_PROGRESS = 2;
  private static final int TIME_OUT = 15000;
  private static final int TIME_OUT_WHAT = 3;
  private int buffProgress = 0;
  private UnNetImageView cover;
  private boolean isDestory = false;
  private boolean isLoading = false;
  private boolean isNeedLoading = false;
  private LinearLayout loadingBar;
  private Context mContext;
  private final Handler mHandler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      switch (what)
      {
      default: 
        return;
      case 3: 
        Toast.makeText(mContext, "??????,??????...", 0).show();
        return;
      }
      int i = VideoPlayer.this.setProgress();
      if (mVideoView.isPlaying()) {
        sendMessageDelayed(obtainMessage(2), 1000 - i % 1000);
      }
    }
  };
  private Uri mUri;
  public TextureVideoView mVideoView;
  private int oldProgress = 0;
  private View.OnClickListener onClickListener;
  private MediaPlayer.OnCompletionListener onCompletionListener;
  private MediaPlayer.OnPreparedListener onPreparedListener;
  public int playPostion;
  private int seekToPoint = 0;
  private int thisProgress = 0;
  public int totalTime;
  
  public VideoPlayer(Context paramContext)
  {
    super(paramContext);
    initView();
  }
  
  public VideoPlayer(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    initView();
  }
  
  public VideoPlayer(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initView();
  }
  
  public VideoPlayer(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    initView();
  }
  
  private Activity getActivity()
  {
    return (Activity)mContext;
  }
  
  private void hideAllError()
  {
    mHandler.removeMessages(3);
    hideLoading();
  }
  
  private void initView()
  {
    mContext = getContext();
    View.inflate(mContext, R.layout.lib_sdk_video_player, this);
    cover = ((UnNetImageView)findViewById(R.id.loadingCover));
    mVideoView = ((TextureVideoView)findViewById(R.id.videoView));
    loadingBar = ((LinearLayout)findViewById(R.id.loading));
    mVideoView.setOnPreparedListener(this);
    mVideoView.setOnErrorListener(this);
    mVideoView.setOnCompletionListener(this);
    mVideoView.setOnSeekCompleteListener(this);
    mVideoView.setOnInfoListener(this);
    mVideoView.setOnClickListener(this);
  }
  
  private void progressState()
  {
    if ((mVideoView.isPlaying()) && (buffProgress != 1090)) {
      if ((oldProgress == thisProgress) && (!isLoading)) {
        showLoading();
      } else if ((oldProgress != thisProgress) && (isLoading)) {
        hideLoading();
      }
    }
    oldProgress = thisProgress;
  }
  
  private int setProgress()
  {
    int i = mVideoView.getCurrentPosition();
    int j = mVideoView.getDuration();
    totalTime = j;
    if (j > 0)
    {
      thisProgress = i;
      if (i != 0) {
        playPostion = i;
      }
      buffProgress = (mVideoView.getBufferPercentage() * 10);
    }
    progressState();
    return i;
  }
  
  public int getDuration()
  {
    return totalTime;
  }
  
  public void hideLoading()
  {
    if (isLoading)
    {
      loadingBar.setVisibility(8);
      mHandler.removeMessages(3);
    }
    isLoading = false;
  }
  
  public boolean isPlaying()
  {
    return mVideoView.isPlaying();
  }
  
  public void needLoading(boolean paramBoolean)
  {
    isNeedLoading = paramBoolean;
  }
  
  public void onClick(View paramView)
  {
    View.OnClickListener localOnClickListener = onClickListener;
    if (localOnClickListener != null) {
      localOnClickListener.onClick(paramView);
    }
  }
  
  public void onCompletion(MediaPlayer paramMediaPlayer)
  {
    MediaPlayer.OnCompletionListener localOnCompletionListener = onCompletionListener;
    if (localOnCompletionListener != null) {
      localOnCompletionListener.onCompletion(paramMediaPlayer);
    }
    playPostion = getDuration();
    mVideoView.seekTo(0);
    cover.setVisibility(0);
    hideAllError();
  }
  
  protected void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public void onDestory()
  {
    isDestory = true;
    mHandler.removeMessages(3);
    TextureVideoView localTextureVideoView = mVideoView;
    if (localTextureVideoView != null) {
      localTextureVideoView.stopPlayback();
    }
  }
  
  public boolean onError(MediaPlayer paramMediaPlayer, int paramInt1, int paramInt2)
  {
    Toast.makeText(mContext, "????????????...", 0);
    return true;
  }
  
  public boolean onInfo(MediaPlayer paramMediaPlayer, int paramInt1, int paramInt2)
  {
    if (paramInt1 == 3) {
      cover.setVisibility(8);
    }
    return true;
  }
  
  public void onPrepared(MediaPlayer paramMediaPlayer)
  {
    mHandler.sendEmptyMessage(2);
    hideLoading();
    hideLoading();
    int i = seekToPoint;
    if (i > 0) {
      mVideoView.seekTo(i);
    }
    MediaPlayer.OnPreparedListener localOnPreparedListener = onPreparedListener;
    if (localOnPreparedListener != null) {
      localOnPreparedListener.onPrepared(paramMediaPlayer);
    }
  }
  
  public void onSeekComplete(MediaPlayer paramMediaPlayer)
  {
    if (seekToPoint > 0)
    {
      mVideoView.start();
      mHandler.sendEmptyMessage(2);
      seekToPoint = 0;
    }
  }
  
  public void pause()
  {
    hideAllError();
    mVideoView.pause();
  }
  
  public void setCoverBitmap(Bitmap paramBitmap)
  {
    if (paramBitmap != null) {
      cover.setImageBitmap(paramBitmap);
    }
  }
  
  public void setOnClickListener(View.OnClickListener paramOnClickListener)
  {
    onClickListener = paramOnClickListener;
  }
  
  public void setOnCompletionListener(MediaPlayer.OnCompletionListener paramOnCompletionListener)
  {
    onCompletionListener = paramOnCompletionListener;
  }
  
  public void setOnPreparedListener(MediaPlayer.OnPreparedListener paramOnPreparedListener)
  {
    onPreparedListener = paramOnPreparedListener;
  }
  
  public void setVideoUri(Uri paramUri)
  {
    if (paramUri == null) {
      return;
    }
    mUri = paramUri;
    mVideoView.setVideoUri(mUri);
  }
  
  public void showLoading()
  {
    if (!isNeedLoading) {
      return;
    }
    if (!isLoading) {
      loadingBar.setVisibility(0);
    }
    isLoading = true;
  }
  
  public void start()
  {
    hideAllError();
    VideoPlayUtil.muteAudioFocus(getContext(), true);
    oldProgress = 0;
    if (seekToPoint <= 0)
    {
      mVideoView.start();
      mHandler.sendEmptyMessage(2);
      mHandler.postDelayed(new Runnable()
      {
        public void run()
        {
          cover.setVisibility(8);
        }
      }, 100L);
    }
  }
  
  public void stop()
  {
    mVideoView.stopPlayback();
    cover.setVisibility(0);
  }
}
