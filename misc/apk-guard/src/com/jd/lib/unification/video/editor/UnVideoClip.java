package com.jd.lib.unification.video.editor;

import android.media.MediaCodec.BufferInfo;
import android.media.MediaExtractor;
import android.media.MediaFormat;
import android.media.MediaMetadataRetriever;
import android.media.MediaMuxer;
import android.text.TextUtils;
import android.util.Log;
import androidx.annotation.RequiresApi;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.HashMap;

@RequiresApi(api=18)
public class UnVideoClip
{
  private static final String PAGE_KEY = "UnVideoClip";
  private MediaExtractor mMediaExtractor;
  private MediaFormat mMediaFormat;
  private MediaMuxer mMediaMuxer;
  private String mime = null;
  
  public UnVideoClip() {}
  
  public void clipVideo(String paramString1, String paramString2, long paramLong1, long paramLong2, VideoClip.ClipFinishListener paramClipFinishListener)
  {
    if ((paramLong1 <= paramLong2) && (paramLong2 != 0L) && (!TextUtils.isEmpty(paramString1)) && (!TextUtils.isEmpty(paramString2)))
    {
      paramLong1 *= 1000L;
      paramLong2 = (paramLong2 - paramLong1) * 1000L;
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("time: ");
      ((StringBuilder)localObject1).append(paramLong1);
      ((StringBuilder)localObject1).append("   ");
      ((StringBuilder)localObject1).append(paramLong2);
      Log.d("UnVideoClip", ((StringBuilder)localObject1).toString());
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(">>?url : ");
      ((StringBuilder)localObject1).append(paramString1);
      Log.d("UnVideoClip", ((StringBuilder)localObject1).toString());
      mMediaExtractor = new MediaExtractor();
      localObject1 = mMediaExtractor;
      for (;;)
      {
        try
        {
          ((MediaExtractor)localObject1).setDataSource(paramString1);
          localObject1 = new MediaMuxer(paramString2, 0);
          mMediaMuxer = ((MediaMuxer)localObject1);
          i = 0;
          int j = 0;
          int m = 0;
          k = -1;
          int i1 = 0;
          n = -1;
          Object localObject5 = paramClipFinishListener;
          localObject1 = paramString2;
          if (i < mMediaExtractor.getTrackCount())
          {
            Object localObject6 = mMediaExtractor;
            try
            {
              localObject6 = ((MediaExtractor)localObject6).getTrackFormat(i);
              mMediaFormat = ((MediaFormat)localObject6);
              localObject6 = mMediaFormat;
              localObject6 = ((MediaFormat)localObject6).getString("mime");
              mime = ((String)localObject6);
              localObject6 = mime;
              boolean bool = ((String)localObject6).startsWith("video/");
              int i4;
              int i5;
              if (bool)
              {
                localObject6 = mMediaFormat;
                m = j;
                try
                {
                  i3 = ((MediaFormat)localObject6).getInteger("width");
                  localObject6 = mMediaFormat;
                  m = j;
                  i4 = ((MediaFormat)localObject6).getInteger("height");
                  localObject6 = mMediaFormat;
                  m = j;
                  i2 = ((MediaFormat)localObject6).getInteger("max-input-size");
                  j = i2;
                  localObject6 = mMediaFormat;
                  m = j;
                  l1 = ((MediaFormat)localObject6).getLong("durationUs");
                  if (paramLong1 >= l1) {
                    try
                    {
                      Log.e("UnVideoClip", "clip point is error!");
                      if (localObject5 == null) {
                        return;
                      }
                      ((VideoClip.ClipFinishListener)localObject5).onClipFailed((String)localObject1);
                      return;
                    }
                    catch (Exception localException1)
                    {
                      m = i;
                      i3 = i1;
                    }
                  }
                  if ((paramLong2 != 0L) && (paramLong2 + paramLong1 >= l1))
                  {
                    Log.e("UnVideoClip", "clip duration is error!");
                    if (localObject5 == null) {
                      return;
                    }
                    ((VideoClip.ClipFinishListener)localObject5).onClipFailed(localException1);
                    return;
                  }
                  try
                  {
                    Object localObject2 = new StringBuilder();
                    ((StringBuilder)localObject2).append("width and height is ");
                    ((StringBuilder)localObject2).append(i3);
                    ((StringBuilder)localObject2).append(" ");
                    ((StringBuilder)localObject2).append(i4);
                    ((StringBuilder)localObject2).append(";maxInputSize is ");
                    ((StringBuilder)localObject2).append(i2);
                    ((StringBuilder)localObject2).append(";duration is ");
                    ((StringBuilder)localObject2).append(l1);
                    Log.d("UnVideoClip", ((StringBuilder)localObject2).toString());
                    localObject2 = mMediaMuxer;
                    localObject5 = mMediaFormat;
                    i2 = ((MediaMuxer)localObject2).addTrack((MediaFormat)localObject5);
                    i4 = i;
                    i5 = j;
                    i3 = i1;
                    i1 = n;
                  }
                  catch (Exception localException2) {}
                  m = i;
                }
                catch (Exception localException3)
                {
                  j = m;
                }
              }
              else
              {
                int i6 = k;
                Object localObject3 = mime;
                try
                {
                  bool = ((String)localObject3).startsWith("audio/");
                  i5 = j;
                  i4 = m;
                  i2 = k;
                  i3 = i1;
                  i1 = n;
                  if (bool)
                  {
                    localObject3 = mMediaFormat;
                    try
                    {
                      i1 = ((MediaFormat)localObject3).getInteger("sample-rate");
                      localObject3 = mMediaFormat;
                      i2 = ((MediaFormat)localObject3).getInteger("channel-count");
                      localObject3 = mMediaFormat;
                      i3 = ((MediaFormat)localObject3).getInteger("max-input-size");
                      localObject3 = mMediaFormat;
                      l1 = ((MediaFormat)localObject3).getLong("durationUs");
                      localObject3 = new StringBuilder();
                      try
                      {
                        ((StringBuilder)localObject3).append("sampleRate is ");
                        ((StringBuilder)localObject3).append(i1);
                        ((StringBuilder)localObject3).append(";channelCount is ");
                        ((StringBuilder)localObject3).append(i2);
                        ((StringBuilder)localObject3).append(";audioMaxInputSize is ");
                        ((StringBuilder)localObject3).append(i3);
                        ((StringBuilder)localObject3).append(";audioDuration is ");
                        ((StringBuilder)localObject3).append(l1);
                        Log.d("UnVideoClip", ((StringBuilder)localObject3).toString());
                        localObject3 = mMediaMuxer;
                        localObject5 = mMediaFormat;
                        i1 = ((MediaMuxer)localObject3).addTrack((MediaFormat)localObject5);
                        i3 = i;
                        i5 = j;
                        i4 = m;
                        i2 = k;
                      }
                      catch (Exception localException4) {}
                      i1 = i;
                    }
                    catch (Exception localException5) {}
                    k = i6;
                  }
                  else
                  {
                    try
                    {
                      StringBuilder localStringBuilder = new StringBuilder();
                      localStringBuilder.append("file mime is ");
                      localObject5 = mime;
                      localStringBuilder.append((String)localObject5);
                      Log.d("UnVideoClip", localStringBuilder.toString());
                      j = i5;
                      m = i4;
                      k = i2;
                      n = i1;
                    }
                    catch (Exception localException6)
                    {
                      j = i5;
                      m = i4;
                      k = i2;
                      n = i1;
                    }
                  }
                }
                catch (Exception localException7) {}
              }
              localObject5 = new StringBuilder();
            }
            catch (Exception localException8)
            {
              i3 = i1;
              i1 = i3;
            }
            ((StringBuilder)localObject5).append(" read error ");
            ((StringBuilder)localObject5).append(((Exception)localException8).getMessage());
            Log.e("UnVideoClip", ((StringBuilder)localObject5).toString());
            int i3 = i1;
            i += 1;
            i1 = i3;
            continue;
          }
          localObject4 = new MediaMetadataRetriever();
          ((MediaMetadataRetriever)localObject4).setDataSource(paramString1);
          paramString1 = ((MediaMetadataRetriever)localObject4).extractMetadata(24);
          if (paramString1 != null)
          {
            i = Integer.parseInt(paramString1);
            if (i >= 0) {
              mMediaMuxer.setOrientationHint(i);
            }
          }
          paramString1 = ByteBuffer.allocate(j);
          mMediaMuxer.start();
          mMediaExtractor.selectTrack(m);
          localObject4 = new MediaCodec.BufferInfo();
          presentationTimeUs = 0L;
          mMediaExtractor.readSampleData(paramString1, 0);
          if (mMediaExtractor.getSampleFlags() == 1) {
            mMediaExtractor.advance();
          }
          mMediaExtractor.readSampleData(paramString1, 0);
          l1 = mMediaExtractor.getSampleTime();
          mMediaExtractor.advance();
          mMediaExtractor.readSampleData(paramString1, 0);
          l1 = Math.abs(mMediaExtractor.getSampleTime() - l1);
          localObject5 = new StringBuilder();
          ((StringBuilder)localObject5).append("videoSampleTime is ");
          ((StringBuilder)localObject5).append(l1);
          Log.d("UnVideoClip", ((StringBuilder)localObject5).toString());
          mMediaExtractor.seekTo(paramLong1, 0);
          i = mMediaExtractor.readSampleData(paramString1, 0);
          long l2;
          if (i < 0)
          {
            mMediaExtractor.unselectTrack(m);
          }
          else
          {
            j = mMediaExtractor.getSampleTrackIndex();
            l2 = mMediaExtractor.getSampleTime();
            i2 = mMediaExtractor.getSampleFlags();
            localObject5 = new StringBuilder();
            ((StringBuilder)localObject5).append("trackIndex is ");
            ((StringBuilder)localObject5).append(j);
            ((StringBuilder)localObject5).append(";presentationTimeUs is ");
            ((StringBuilder)localObject5).append(l2);
            ((StringBuilder)localObject5).append(";sampleFlag is ");
            ((StringBuilder)localObject5).append(i2);
            ((StringBuilder)localObject5).append(";sampleSize is ");
            ((StringBuilder)localObject5).append(i);
            Log.d("UnVideoClip", ((StringBuilder)localObject5).toString());
            if ((paramLong2 == 0L) || (l2 <= paramLong1 + paramLong2)) {
              continue;
            }
            mMediaExtractor.unselectTrack(m);
          }
          mMediaExtractor.selectTrack(i1);
          localObject4 = new MediaCodec.BufferInfo();
          presentationTimeUs = 0L;
          mMediaExtractor.readSampleData(paramString1, 0);
          if (mMediaExtractor.getSampleTime() == 0L) {
            mMediaExtractor.advance();
          }
          mMediaExtractor.readSampleData(paramString1, 0);
          l1 = mMediaExtractor.getSampleTime();
          mMediaExtractor.advance();
          mMediaExtractor.readSampleData(paramString1, 0);
          l1 = Math.abs(mMediaExtractor.getSampleTime() - l1);
          localObject5 = new StringBuilder();
          ((StringBuilder)localObject5).append("AudioSampleTime is ");
          ((StringBuilder)localObject5).append(l1);
          Log.d("UnVideoClip", ((StringBuilder)localObject5).toString());
          mMediaExtractor.seekTo(paramLong1, 2);
          i = mMediaExtractor.readSampleData(paramString1, 0);
          if (i < 0)
          {
            mMediaExtractor.unselectTrack(i1);
          }
          else
          {
            j = mMediaExtractor.getSampleTrackIndex();
            l2 = mMediaExtractor.getSampleTime();
            localObject5 = new StringBuilder();
            ((StringBuilder)localObject5).append("trackIndex is ");
            ((StringBuilder)localObject5).append(j);
            ((StringBuilder)localObject5).append(";presentationTimeUs is ");
            ((StringBuilder)localObject5).append(l2);
            Log.d("UnVideoClip", ((StringBuilder)localObject5).toString());
            if ((paramLong2 == 0L) || (l2 <= paramLong1 + paramLong2)) {
              continue;
            }
            mMediaExtractor.unselectTrack(i1);
          }
          paramString1 = mMediaMuxer;
        }
        catch (Exception paramString1)
        {
          int i;
          int k;
          int n;
          int i2;
          long l1;
          Object localObject4 = new StringBuilder();
          ((StringBuilder)localObject4).append("error path");
          ((StringBuilder)localObject4).append(paramString1.getMessage());
          Log.e("UnVideoClip", ((StringBuilder)localObject4).toString());
          if (paramClipFinishListener == null) {
            return;
          }
        }
        try
        {
          paramString1.stop();
          paramString1 = mMediaMuxer;
          paramString1.release();
          paramString1 = mMediaExtractor;
          paramString1.release();
          mMediaExtractor = null;
          if (paramClipFinishListener == null) {
            return;
          }
        }
        catch (Exception paramString1)
        {
          continue;
        }
        try
        {
          paramClipFinishListener.onClipSuccess(paramString2);
          return;
        }
        catch (Exception paramString1)
        {
          continue;
        }
        if (paramClipFinishListener == null) {
          return;
        }
        paramClipFinishListener.onClipFailed(paramString2);
        return;
        mMediaExtractor.advance();
        offset = 0;
        size = i;
        mMediaMuxer.writeSampleData(n, paramString1, (MediaCodec.BufferInfo)localObject4);
        presentationTimeUs += l1;
        continue;
        mMediaExtractor.advance();
        offset = 0;
        size = i;
        flags = i2;
        mMediaMuxer.writeSampleData(k, paramString1, (MediaCodec.BufferInfo)localObject4);
        presentationTimeUs += l1;
      }
      paramClipFinishListener.onClipFailed(paramString2);
      return;
    }
    if (paramClipFinishListener != null)
    {
      paramClipFinishListener.onClipFailed("");
      return;
    }
  }
  
  public boolean genVideoUsingMuxer(String paramString1, String paramString2, long paramLong1, long paramLong2, boolean paramBoolean1, boolean paramBoolean2)
    throws IOException
  {
    MediaExtractor localMediaExtractor = new MediaExtractor();
    localMediaExtractor.setDataSource(paramString1);
    int n = localMediaExtractor.getTrackCount();
    paramString2 = new MediaMuxer(paramString2, 0);
    HashMap localHashMap = new HashMap(n);
    int j = 0;
    Object localObject2;
    int k;
    for (int i = -1;; i = k)
    {
      int m = 1;
      if (j >= n) {
        break;
      }
      localObject1 = localMediaExtractor.getTrackFormat(j);
      localObject2 = ((MediaFormat)localObject1).getString("mime");
      if (((!((String)localObject2).startsWith("audio/")) || (!paramBoolean1)) && ((!((String)localObject2).startsWith("video/")) || (!paramBoolean2))) {
        m = 0;
      }
      k = i;
      if (m != 0)
      {
        localMediaExtractor.selectTrack(j);
        localHashMap.put(Integer.valueOf(j), Integer.valueOf(paramString2.addTrack((MediaFormat)localObject1)));
        k = i;
        if (((MediaFormat)localObject1).containsKey("max-input-size"))
        {
          m = ((MediaFormat)localObject1).getInteger("max-input-size");
          k = i;
          if (m > i) {
            k = m;
          }
        }
      }
      j += 1;
    }
    j = i;
    if (i < 0) {
      j = 62208000;
    }
    Object localObject1 = new MediaMetadataRetriever();
    ((MediaMetadataRetriever)localObject1).setDataSource(paramString1);
    paramString1 = ((MediaMetadataRetriever)localObject1).extractMetadata(24);
    if (paramString1 != null)
    {
      i = Integer.parseInt(paramString1);
      if (i >= 0) {
        paramString2.setOrientationHint(i);
      }
    }
    if (paramLong1 > 0L) {
      localMediaExtractor.seekTo(paramLong1 * 1000L, 0);
    }
    paramString1 = ByteBuffer.allocate(j);
    localObject1 = new MediaCodec.BufferInfo();
    try
    {
      paramString2.start();
      offset = 0;
      i = localMediaExtractor.readSampleData(paramString1, 0);
      size = i;
      i = size;
      if (i < 0)
      {
        Log.d("UnVideoClip", "Saw input EOS.");
        size = 0;
      }
      else
      {
        paramLong1 = localMediaExtractor.getSampleTime();
        presentationTimeUs = paramLong1;
        if (paramLong2 <= 0L) {
          break label404;
        }
        paramLong1 = presentationTimeUs;
        if (paramLong1 <= paramLong2 * 1000L) {
          break label404;
        }
        Log.d("UnVideoClip", "The current sample is over the trim end time.");
      }
      paramString2.stop();
      paramString2.release();
      return true;
    }
    catch (Throwable paramString1)
    {
      try
      {
        i = localMediaExtractor.getSampleFlags();
        flags = i;
        localObject2 = localHashMap.get(Integer.valueOf(localMediaExtractor.getSampleTrackIndex()));
        localObject2 = (Integer)localObject2;
        paramString2.writeSampleData(((Integer)localObject2).intValue(), paramString1, (MediaCodec.BufferInfo)localObject1);
        localMediaExtractor.advance();
      }
      catch (Exception paramString1)
      {
        for (;;) {}
      }
      paramString1 = paramString1;
      break label480;
      Log.w("UnVideoClip", "The source video file is malformed");
      paramString2.release();
      return false;
      paramString2.release();
      throw paramString1;
    }
    catch (Exception paramString1)
    {
      label404:
      label480:
      for (;;) {}
    }
  }
}
