package com.jd.lib.unification.video.editor;

import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.MediaMetadataRetriever;
import android.os.Handler;

public class VideoExtractFrameUtils
{
  private int extractH;
  private int extractW;
  private Handler mHandler;
  private volatile boolean stop;
  
  public VideoExtractFrameUtils(int paramInt1, int paramInt2, Handler paramHandler)
  {
    mHandler = paramHandler;
    extractW = paramInt1;
    extractH = paramInt2;
  }
  
  private String extractFrame(MediaMetadataRetriever paramMediaMetadataRetriever, long paramLong, String paramString)
  {
    paramMediaMetadataRetriever = paramMediaMetadataRetriever.getFrameAtTime(1000L * paramLong, 2);
    if (paramMediaMetadataRetriever != null)
    {
      paramMediaMetadataRetriever = scaleImage(paramMediaMetadataRetriever);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(System.currentTimeMillis());
      localStringBuilder.append("_");
      localStringBuilder.append(paramLong);
      localStringBuilder.append(".jpeg");
      paramString = PictureUtils.saveImageToSDForEdit(paramMediaMetadataRetriever, paramString, localStringBuilder.toString());
      if ((paramMediaMetadataRetriever != null) && (!paramMediaMetadataRetriever.isRecycled()))
      {
        paramMediaMetadataRetriever.recycle();
        return paramString;
      }
    }
    else
    {
      return null;
    }
    return paramString;
  }
  
  private Bitmap scaleImage(Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return null;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    float f = extractW * 1.0F / i;
    Object localObject = new Matrix();
    ((Matrix)localObject).postScale(f, f);
    localObject = Bitmap.createBitmap(paramBitmap, 0, 0, i, j, (Matrix)localObject, true);
    if (!paramBitmap.isRecycled()) {
      paramBitmap.recycle();
    }
    return localObject;
  }
  
  private void sendAPic(String paramString, long paramLong)
  {
    VideoEditInfo localVideoEditInfo = new VideoEditInfo();
    path = paramString;
    time = paramLong;
    paramString = mHandler.obtainMessage(0);
    obj = localVideoEditInfo;
    mHandler.sendMessage(paramString);
  }
  
  public void getVideoThumbnailsInfoForEdit(String paramString1, String paramString2, long paramLong1, long paramLong2, int paramInt)
  {
    MediaMetadataRetriever localMediaMetadataRetriever = new MediaMetadataRetriever();
    localMediaMetadataRetriever.setDataSource(paramString1);
    long l1;
    if (paramInt == 1) {
      l1 = paramLong2 - paramLong1;
    } else {
      l1 = (paramLong2 - paramLong1) / (paramInt - 1);
    }
    int i = 0;
    while (i < paramInt)
    {
      if (stop)
      {
        localMediaMetadataRetriever.release();
        break;
      }
      long l2 = i * l1 + paramLong1;
      if (i == paramInt - 1)
      {
        if (l1 > 1000L)
        {
          l2 = paramLong2 - 800L;
          sendAPic(extractFrame(localMediaMetadataRetriever, l2, paramString2), l2);
        }
        else
        {
          sendAPic(extractFrame(localMediaMetadataRetriever, paramLong2, paramString2), paramLong2);
        }
      }
      else {
        sendAPic(extractFrame(localMediaMetadataRetriever, l2, paramString2), l2);
      }
      i += 1;
    }
    localMediaMetadataRetriever.release();
  }
  
  public void stopExtract()
  {
    stop = true;
  }
}
