package com.jd.lib.unification.video.recorder;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Rect;
import android.media.MediaRecorder;
import android.media.MediaRecorder.OnErrorListener;
import android.os.Build.VERSION;
import android.os.Environment;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.widget.FrameLayout;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Timer;
import java.util.TimerTask;

public class VideoRecorderView
  extends FrameLayout
  implements MediaRecorder.OnErrorListener
{
  private static final String PAGE_KEY = "VideoRecorderView";
  private static final String PIC_DIR = "pictures";
  private static final String VIDEO_DIR = "video";
  private CameraManager cameraManager;
  private boolean isSquarePhoto;
  private Context mContext;
  private MediaRecorder mMediaRecorder;
  private OnRecordFinishListener mOnRecordFinishListener;
  private File mPicFile = null;
  private int mRecordMaxTime = 10000;
  private File mRootFile;
  private SurfaceHolder mSurfaceHolder;
  private SurfaceView mSurfaceView;
  private int mTimeCount;
  private Timer mTimer;
  private File mVecordFile = null;
  private PhotoMaskView maskView;
  private OnRecordProgressListener onRecordProgressListener;
  private int orientation;
  private int squareMarginTop;
  private int squarePhotoWidth;
  
  public VideoRecorderView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public VideoRecorderView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public VideoRecorderView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    mContext = paramContext;
    cameraManager = new CameraManager(mContext);
    LayoutInflater.from(paramContext).inflate(R.layout.lib_uni_video_recorder_view, this);
    mSurfaceView = ((SurfaceView)findViewById(R.id.surfaceview));
    squareMarginTop = DpiUtil.dip2px(mContext, 80.0F);
    maskView = ((PhotoMaskView)findViewById(R.id.maskView));
  }
  
  private Rect createCenterScreenRect()
  {
    int j = DpiUtil.getWidth(mContext) / 2;
    int i = squarePhotoWidth;
    j -= i / 2;
    int k = squareMarginTop;
    return new Rect(j, k, j + i, i + k);
  }
  
  private File createPictureFile()
  {
    if (mRootFile == null) {
      if (Build.VERSION.SDK_INT >= 19) {
        mRootFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
      } else {
        mRootFile = Environment.getExternalStorageDirectory();
      }
    }
    File localFile = new File(mRootFile, "pictures");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(System.currentTimeMillis());
    localStringBuilder.append(".jpg");
    mPicFile = new File(localFile, localStringBuilder.toString());
    return mPicFile;
  }
  
  private void createRecordDir()
  {
    if (mRootFile == null) {
      if (Build.VERSION.SDK_INT >= 19) {
        mRootFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
      } else {
        mRootFile = Environment.getExternalStorageDirectory();
      }
    }
    File localFile = new File(mRootFile, "video");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(System.currentTimeMillis());
      localStringBuilder.append(".mp4");
      localFile = new File(localFile, localStringBuilder.toString());
      mVecordFile = localFile;
      return;
    }
    catch (Exception localException) {}
  }
  
  private int getRotationDegree()
  {
    int i;
    if ((UnStatusBarTintUtil.equalsModel("Nexus5X")) && (cameraManager.getCameraID() == 0))
    {
      i = orientation;
      if (i == 0) {
        return 270;
      }
      if (i == 180) {
        return 90;
      }
      if (i == 90) {
        return 0;
      }
      if (i == 270) {
        return 180;
      }
    }
    else
    {
      i = orientation;
      if (i == 0)
      {
        if (cameraManager.getCameraID() == 1) {
          return 270;
        }
        return 90;
      }
      if (i == 180)
      {
        if (cameraManager.getCameraID() == 1) {
          return 90;
        }
        return 270;
      }
      if (i == 90) {
        return 180;
      }
    }
    return 0;
  }
  
  private void initRecord()
    throws Exception
  {
    if (mMediaRecorder == null) {
      mMediaRecorder = new MediaRecorder();
    }
    mMediaRecorder.reset();
    if (cameraManager.getCamera() != null)
    {
      cameraManager.unLock();
      mMediaRecorder.setCamera(cameraManager.getCamera());
    }
    mMediaRecorder.setOnErrorListener(this);
    mMediaRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());
    MediaRecorder localMediaRecorder = mMediaRecorder;
    try
    {
      localMediaRecorder.setVideoSource(1);
      localMediaRecorder = mMediaRecorder;
    }
    catch (Exception localException1)
    {
      try
      {
        localMediaRecorder.setAudioSource(1);
        mMediaRecorder.setAudioEncodingBitRate(131072);
        mMediaRecorder.setAudioChannels(2);
        mMediaRecorder.setAudioSamplingRate(44100);
        localMediaRecorder = mMediaRecorder;
        try
        {
          localMediaRecorder.setOutputFormat(2);
        }
        catch (Exception localException3)
        {
          int i;
          for (;;) {}
        }
        mMediaRecorder.setOutputFormat(0);
        mMediaRecorder.setAudioEncoder(3);
        mMediaRecorder.setVideoEncoder(2);
        mMediaRecorder.setVideoSize(cameraManager.getVideoWidth(), cameraManager.getVideoHeight());
        mMediaRecorder.setVideoEncodingBitRate(VideoUtil.getVideoBitRate(cameraManager.getVideoWidth(), cameraManager.getVideoHeight()));
        mMediaRecorder.setMaxDuration(mRecordMaxTime + 500);
        i = VideoUtil.getFramRate();
        if (i != -1) {
          mMediaRecorder.setVideoFrameRate(i);
        }
        mMediaRecorder.setOrientationHint(getRotationDegree());
        mMediaRecorder.setOutputFile(mVecordFile.getAbsolutePath());
        mMediaRecorder.prepare();
        localMediaRecorder = mMediaRecorder;
        try
        {
          localMediaRecorder.start();
          return;
        }
        catch (Exception localException4) {}
        localException1 = localException1;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
    }
  }
  
  private void releaseRecord()
  {
    MediaRecorder localMediaRecorder = mMediaRecorder;
    if (localMediaRecorder != null)
    {
      localMediaRecorder.setOnErrorListener(null);
      localMediaRecorder = mMediaRecorder;
    }
    try
    {
      localMediaRecorder.release();
      mMediaRecorder = null;
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
  }
  
  private void saveBitmapToSd(final Bitmap paramBitmap, final File paramFile)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        Object localObject = paramFile;
        try
        {
          localObject = new FileOutputStream((File)localObject);
          Bitmap localBitmap = paramBitmap;
          Bitmap.CompressFormat localCompressFormat = Bitmap.CompressFormat.JPEG;
          localBitmap.compress(localCompressFormat, 100, (OutputStream)localObject);
          ((FileOutputStream)localObject).flush();
          ((FileOutputStream)localObject).close();
          return;
        }
        catch (Exception localException) {}
      }
    }).start();
  }
  
  public void changeCameraFaceing()
  {
    cameraManager.changeCameraFaceing();
  }
  
  public void closeLight()
  {
    cameraManager.closeLight();
  }
  
  public void deletePicFile()
  {
    File localFile = mPicFile;
    if (localFile != null) {
      localFile.delete();
    }
  }
  
  public void deleteVocordFile()
  {
    File localFile = mVecordFile;
    if (localFile != null) {
      localFile.delete();
    }
  }
  
  public int getCameraPosition()
  {
    return cameraManager.getCameraID();
  }
  
  public File getPicFile()
  {
    return mPicFile;
  }
  
  public int getTimeCount()
  {
    return mTimeCount;
  }
  
  public File getVecordFile()
  {
    return mVecordFile;
  }
  
  public void initSurface(int paramInt)
  {
    mSurfaceHolder = mSurfaceView.getHolder();
    mSurfaceHolder.addCallback(new CustomCallBack(paramInt));
    mSurfaceHolder.setType(3);
  }
  
  public void onError(MediaRecorder paramMediaRecorder, int paramInt1, int paramInt2)
  {
    if (paramMediaRecorder != null) {
      try
      {
        paramMediaRecorder.reset();
        return;
      }
      catch (IllegalStateException paramMediaRecorder) {}catch (Exception paramMediaRecorder) {}
    }
  }
  
  public boolean openOrCloseLight(int paramInt)
  {
    return cameraManager.openOrCloseLight(paramInt);
  }
  
  public void record(int paramInt, OnRecordFinishListener paramOnRecordFinishListener)
  {
    orientation = paramInt;
    mOnRecordFinishListener = paramOnRecordFinishListener;
    createRecordDir();
    mTimeCount = -10;
    paramInt = 700;
    try
    {
      boolean bool = UnStatusBarTintUtil.equalsModel("HM1SW");
      final int i;
      if (bool)
      {
        paramInt = 0;
        i = 65336;
      }
      else
      {
        i = 200;
      }
      paramOnRecordFinishListener = new Timer();
      mTimer = paramOnRecordFinishListener;
      paramOnRecordFinishListener = new TimerTask()
      {
        public void run()
        {
          VideoRecorderView localVideoRecorderView = VideoRecorderView.this;
          VideoRecorderView.access$102(localVideoRecorderView, mTimeCount + 10);
          if (onRecordProgressListener != null) {
            onRecordProgressListener.onProgressChanged(mRecordMaxTime, mTimeCount);
          }
          if (mTimeCount == mRecordMaxTime + i)
          {
            stop();
            if (mOnRecordFinishListener != null) {
              mOnRecordFinishListener.onRecordFinish();
            }
          }
        }
      };
      initRecord();
      Timer localTimer = mTimer;
      long l = paramInt;
      localTimer.schedule(paramOnRecordFinishListener, l, 10L);
      return;
    }
    catch (Exception paramOnRecordFinishListener)
    {
      for (;;) {}
    }
    paramOnRecordFinishListener = mOnRecordFinishListener;
    if (paramOnRecordFinishListener != null) {
      paramOnRecordFinishListener.onRecordFailed();
    }
    paramOnRecordFinishListener = mOnRecordFinishListener;
    if (paramOnRecordFinishListener != null)
    {
      paramOnRecordFinishListener.onRecordFailed();
      return;
    }
  }
  
  public void release()
  {
    releaseRecord();
    cameraManager.freeCameraResource();
  }
  
  public void setMaskViewVisibility(int paramInt)
  {
    maskView.setVisibility(paramInt);
  }
  
  public void setOnRecordProgressListener(OnRecordProgressListener paramOnRecordProgressListener)
  {
    onRecordProgressListener = paramOnRecordProgressListener;
  }
  
  public void setPicFile(File paramFile)
  {
    mPicFile = paramFile;
  }
  
  public void setRecordMaxTime(int paramInt)
  {
    mRecordMaxTime = paramInt;
  }
  
  public void setRootFile(File paramFile)
  {
    mRootFile = paramFile;
  }
  
  public void setSquarePhoto(boolean paramBoolean)
  {
    isSquarePhoto = paramBoolean;
  }
  
  public void setSquarePhotoWidth(int paramInt)
  {
    squarePhotoWidth = paramInt;
    maskView.setCenterRect(createCenterScreenRect());
  }
  
  public void setVecordFile(File paramFile)
  {
    mVecordFile = paramFile;
  }
  
  public void setVisibility(int paramInt)
  {
    mSurfaceView.setVisibility(paramInt);
    super.setVisibility(paramInt);
  }
  
  public void startPreview()
  {
    cameraManager.startPreview();
  }
  
  public void stop()
  {
    stopRecord();
    stopPreview();
  }
  
  public void stopPreview()
  {
    cameraManager.stopPreview();
  }
  
  public void stopRecord()
  {
    Object localObject = mTimer;
    if (localObject != null) {
      ((Timer)localObject).cancel();
    }
    localObject = mMediaRecorder;
    if (localObject != null)
    {
      ((MediaRecorder)localObject).setOnErrorListener(null);
      mMediaRecorder.setPreviewDisplay(null);
      localObject = mMediaRecorder;
      try
      {
        ((MediaRecorder)localObject).stop();
        return;
      }
      catch (Exception localException) {}
    }
  }
  
  public void takePhoto(int paramInt, final CameraManager.OnFinishPicListener paramOnFinishPicListener)
  {
    orientation = paramInt;
    createPictureFile();
    cameraManager.takePicture(new CameraManager.OnFinishPicListener()
    {
      public void onFailedPic()
      {
        CameraManager.OnFinishPicListener localOnFinishPicListener = paramOnFinishPicListener;
        if (localOnFinishPicListener != null) {
          localOnFinishPicListener.onFailedPic();
        }
      }
      
      public void onFinishPic(Bitmap paramAnonymousBitmap)
      {
        paramAnonymousBitmap = VideoUtil.toTurn(mContext, paramAnonymousBitmap, VideoRecorderView.this.getRotationDegree(), isSquarePhoto, squarePhotoWidth, squareMarginTop);
        Object localObject = VideoRecorderView.this;
        ((VideoRecorderView)localObject).saveBitmapToSd(paramAnonymousBitmap, mPicFile);
        localObject = paramOnFinishPicListener;
        if (localObject != null) {
          ((CameraManager.OnFinishPicListener)localObject).onFinishPic(paramAnonymousBitmap);
        }
      }
    });
  }
  
  private class CustomCallBack
    implements SurfaceHolder.Callback
  {
    private int camera;
    
    public CustomCallBack(int paramInt)
    {
      camera = paramInt;
    }
    
    public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3) {}
    
    public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
    {
      Object localObject = VideoRecorderView.this;
      try
      {
        localObject = cameraManager;
        int i = camera;
        ((CameraManager)localObject).initCamera(paramSurfaceHolder, i);
        return;
      }
      catch (IOException paramSurfaceHolder) {}
    }
    
    public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
    {
      cameraManager.freeCameraResource();
    }
  }
  
  public static abstract interface OnRecordFinishListener
  {
    public abstract void onRecordFailed();
    
    public abstract void onRecordFinish();
  }
  
  public static abstract interface OnRecordProgressListener
  {
    public abstract void onProgressChanged(int paramInt1, int paramInt2);
  }
}
