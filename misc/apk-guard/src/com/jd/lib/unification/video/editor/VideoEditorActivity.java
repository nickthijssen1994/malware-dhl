package com.jd.lib.unification.video.editor;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnSeekCompleteListener;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.fragment.app.FragmentActivity;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.album.filter.FilterTools.FilterType;
import com.jd.lib.unification.album.filter.FilterView;
import com.jd.lib.unification.album.filter.FilterView.FilterChangerListener;
import com.jd.lib.unification.album.filter.filter.CommonFilter;
import com.jd.lib.unification.album.filter.filter.CommonFilterGroup;
import com.jd.lib.unification.album.filter.video.CommonExtTexFilter;
import com.jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux.ResultListener;
import com.jd.lib.unification.album.filter.video.VideoSurfaceView;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.video.VideoToast;
import com.jd.lib.unification.video.view.util.VideoEditorFinishUtil;
import com.jd.lib.unification.video.view.util.VideoEditorFinishUtil.OnFinishClickListener;
import com.jd.lib.unification.video.view.util.VideoInfoUtil;
import com.jd.lib.unification.video.view.util.VideoInfoUtil.VideoFrameAtTimeListener;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.ui.JDDialog;
import com.jingdong.common.ui.JDDialogFactory;
import java.io.File;
import java.util.List;

public class VideoEditorActivity
  extends FragmentActivity
  implements View.OnClickListener
{
  private static final int MAX_PROGRESS = 100;
  private static final String PAGE_KEY = "VideoEditorActivity";
  private LinearLayout bottomLayot;
  private TextView cancelTv;
  private FilterTools.FilterType currentFilterType = FilterTools.FilterType.NO_FILTER;
  private int currentFunction;
  private int currentProgress;
  private LinearLayout cutBtLayout;
  private TextView cutTv;
  private VideoCutView cutView;
  private long duration;
  private LinearLayout filterBtLayout;
  private TextView filterTv;
  private List<FilterTools.FilterType> filterTypes;
  private FilterView filterView;
  private int finishJumpRequestCode = 20;
  private TextView finishTv;
  private int functionControl = 0;
  private boolean isAlreadyToastCut = false;
  private boolean isEditorFailed = false;
  private boolean isEditorSuccess = false;
  private boolean isFullScreen = false;
  private boolean isSave = false;
  private CommonFilter mFilter;
  private long maxCutDuration = 10000L;
  private MediaPlayer mediaPlayer = null;
  private long minCutDuration = 3000L;
  private String outEditFileName;
  private ProgressBar progressBar;
  private Handler progressHandler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      progressBar.setProgress(currentProgress);
      if ((currentProgress == 100) && (isEditorSuccess))
      {
        paramAnonymousMessage = VideoEditorActivity.this;
        paramAnonymousMessage.editorSuccess(outEditFileName);
        progressHandler.removeCallbacks(progressRunnable);
        return;
      }
      if (isEditorFailed)
      {
        progressHandler.removeCallbacks(progressRunnable);
        return;
      }
      progressHandler.postDelayed(progressRunnable, 1000L);
    }
  };
  private Runnable progressRunnable = new Runnable()
  {
    public void run()
    {
      if (isSave)
      {
        double d;
        if (currentProgress < 30.0D)
        {
          localObject = VideoEditorActivity.this;
          d = currentProgress;
          Double.isNaN(d);
          VideoEditorActivity.access$002((VideoEditorActivity)localObject, (int)(d + 30.0D));
        }
        else if ((currentProgress >= 30.0D) && (currentProgress < 70.0D))
        {
          localObject = VideoEditorActivity.this;
          d = currentProgress;
          Double.isNaN(d);
          VideoEditorActivity.access$002((VideoEditorActivity)localObject, (int)(d + 10.0D));
        }
        else if ((currentProgress >= 70.0D) && (currentProgress < 95.0D))
        {
          localObject = VideoEditorActivity.this;
          d = currentProgress;
          Double.isNaN(d);
          VideoEditorActivity.access$002((VideoEditorActivity)localObject, (int)(d + 5.0D));
        }
        else if ((currentProgress >= 95.0D) && (currentProgress < 99.0D))
        {
          localObject = VideoEditorActivity.this;
          d = currentProgress;
          Double.isNaN(d);
          VideoEditorActivity.access$002((VideoEditorActivity)localObject, (int)(d + 1.0D));
        }
      }
      else if (isEditorSuccess)
      {
        VideoEditorActivity.access$002(VideoEditorActivity.this, 100);
      }
      Object localObject = progressHandler.obtainMessage();
      progressHandler.sendMessage((Message)localObject);
    }
  };
  private LinearLayout progressbarLayout;
  private RelativeLayout rootLayout;
  private RelativeLayout titleLayout;
  private VideoEditorFinishUtil videoEditorFinishUtil;
  private int videoHeight;
  private VideoInfoUtil videoInfoUtil;
  private int videoOrientation;
  private VideoParam videoParam;
  private String videoPath;
  private VideoSurfaceView videoSurfaceView = null;
  private RelativeLayout videoViewContainer;
  private int videoWidth;
  
  public VideoEditorActivity() {}
  
  private void addFilter(final String paramString, boolean paramBoolean)
  {
    ExtractDecodeEditEncodeMux.ResultListener local9 = new ExtractDecodeEditEncodeMux.ResultListener()
    {
      public void onResult(final boolean paramAnonymousBoolean, final String paramAnonymousString1, String paramAnonymousString2)
      {
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (paramAnonymousBoolean)
            {
              VideoEditorActivity.access$202(VideoEditorActivity.this, true);
              VideoEditorActivity.access$802(VideoEditorActivity.this, false);
              if ((!val$fileName.equals(videoPath)) && (!val$fileName.equals(paramAnonymousString1))) {
                new File(val$fileName).delete();
              }
              VideoEditorActivity.access$302(VideoEditorActivity.this, paramAnonymousString1);
              return;
            }
            VideoEditorActivity.access$702(VideoEditorActivity.this, true);
            VideoEditorActivity.access$802(VideoEditorActivity.this, false);
            VideoUtil.deleteFile(paramAnonymousString1);
            VideoEditorActivity.this.editorFailed(getString(R.string.uni_video_add_filter_failed));
          }
        });
      }
    };
    filterView.addFilter(paramString, videoWidth, videoHeight, videoOrientation, currentFilterType, paramBoolean, local9);
  }
  
  private void back()
  {
    videoPause();
    if (!isSave)
    {
      Object localObject = cutView;
      if ((localObject == null) || (!((VideoCutView)localObject).isNeedCut()))
      {
        localObject = filterView;
        if ((localObject == null) || (!((FilterView)localObject).isNeedFilter(currentFilterType))) {}
      }
      else
      {
        localObject = JDDialogFactory.getInstance();
        String str1 = getString(R.string.uni_video_editor_cancel_tip);
        String str2 = getString(R.string.uni_video_cancel);
        String str3 = getString(R.string.uni_video_ok);
        localObject = ((JDDialogFactory)localObject).createJdDialogWithStyle2((Context)this, str1, str2, str3);
        ((JDDialog)localObject).setCancelable(false);
        ((JDDialog)localObject).setOnLeftButtonClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            val$dialog.dismiss();
            VideoEditorActivity.this.videoStart();
          }
        });
        ((JDDialog)localObject).setOnRightButtonClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            val$dialog.dismiss();
            VideoEditorActivity.this.backIntent();
            finish();
          }
        });
        ((JDDialog)localObject).show();
        return;
      }
    }
    backIntent();
    finish();
  }
  
  private void backIntent()
  {
    Intent localIntent = getIntent();
    localIntent.putExtra("editorReturn", false);
    setResult(-1, localIntent);
  }
  
  private void editorFailed(final String paramString)
  {
    JDDialogFactory localJDDialogFactory = JDDialogFactory.getInstance();
    String str1 = getString(R.string.uni_video_editor_give_up);
    String str2 = getString(R.string.uni_video_editor_continue);
    paramString = localJDDialogFactory.createJdDialogWithStyle2((Context)this, paramString, str1, str2);
    paramString.setCancelable(false);
    paramString.setOnLeftButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        VideoEditorActivity.this.backIntent();
        finish();
      }
    });
    paramString.setOnRightButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        VideoEditorActivity.this.resetDate();
        VideoEditorActivity.this.videoStart();
      }
    });
    paramString.show();
  }
  
  private void editorSuccess(String paramString)
  {
    Object localObject = new File(paramString);
    VideoUtil.galleryAddPic((Context)this, (File)localObject);
    if (videoEditorFinishUtil.getListener() != null)
    {
      localObject = videoEditorFinishUtil.getListener();
      int i = finishJumpRequestCode;
      ((VideoEditorFinishUtil.OnFinishClickListener)localObject).onFinish((Context)this, paramString, i);
      return;
    }
    localObject = getIntent();
    ((Intent)localObject).putExtra("videoEditorOutPath", paramString);
    ((Intent)localObject).putExtra("editorReturn", true);
    setResult(-1, (Intent)localObject);
    finish();
  }
  
  private void functionControl()
  {
    Object localObject;
    int i;
    StringBuilder localStringBuilder;
    switch (functionControl)
    {
    default: 
      return;
    case 2: 
      initFilterView();
      cutView.setVisibility(8);
      cutBtLayout.setVisibility(8);
      filterTv.setSelected(true);
      filterView.setVisibility(0);
      currentFunction = 1;
      return;
    case 1: 
      initCutView();
      cutView.setVisibility(0);
      filterView.setVisibility(8);
      filterBtLayout.setVisibility(8);
      cutTv.setSelected(true);
      currentFunction = 0;
      if (duration >= maxCutDuration + 1000L)
      {
        localObject = getResources();
        i = R.string.uni_video_editor_need_cut;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(maxCutDuration / 1000L);
        localStringBuilder.append("");
        localObject = ((Resources)localObject).getString(i, new Object[] { localStringBuilder.toString() });
        i = DpiUtil.dip2px((Context)this, 140.0F);
        VideoToast.showToast((Context)this, (CharSequence)localObject, i);
      }
      else
      {
        localObject = getResources().getString(R.string.uni_video_editor_cut);
        i = DpiUtil.dip2px((Context)this, 140.0F);
        VideoToast.showToast((Context)this, (CharSequence)localObject, i);
      }
      isAlreadyToastCut = true;
      return;
    }
    initCutView();
    initFilterView();
    if (duration >= maxCutDuration + 1000L)
    {
      cutView.setVisibility(0);
      filterView.setVisibility(8);
      localObject = getResources();
      i = R.string.uni_video_editor_need_cut;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(maxCutDuration / 1000L);
      localStringBuilder.append("");
      localObject = ((Resources)localObject).getString(i, new Object[] { localStringBuilder.toString() });
      i = DpiUtil.dip2px((Context)this, 140.0F);
      VideoToast.showToast((Context)this, (CharSequence)localObject, i);
      cutTv.setSelected(true);
      filterTv.setSelected(false);
      currentFunction = 0;
      isAlreadyToastCut = true;
      return;
    }
    cutView.setVisibility(8);
    cutTv.setSelected(false);
    filterTv.setSelected(true);
    filterView.setVisibility(0);
    currentFunction = 1;
  }
  
  private void initCutView()
  {
    cutView.setMinCutDuration(minCutDuration);
    cutView.setMaxCutDuration(maxCutDuration);
    cutView.initData(videoPath, mediaPlayer, videoInfoUtil);
  }
  
  private void initFilterView()
  {
    filterView.setFilterChangerListener(new FilterView.FilterChangerListener()
    {
      public void onFilterChanged(FilterTools.FilterType paramAnonymousFilterType, CommonFilter paramAnonymousCommonFilter)
      {
        VideoEditorActivity.access$902(VideoEditorActivity.this, paramAnonymousFilterType);
        if ((mFilter == null) || ((paramAnonymousCommonFilter != null) && (!mFilter.getClass().equals(paramAnonymousCommonFilter.getClass()))))
        {
          VideoEditorActivity.access$1002(VideoEditorActivity.this, paramAnonymousCommonFilter);
          paramAnonymousFilterType = new CommonFilterGroup();
          paramAnonymousFilterType.addFilter(new CommonExtTexFilter());
          paramAnonymousFilterType.addFilter(mFilter);
          videoSurfaceView.setFilter(paramAnonymousFilterType);
          mediaPlayer.seekTo((int)cutView.getLeftProgress());
        }
      }
    });
    videoInfoUtil.extractFrame(new VideoInfoUtil.VideoFrameAtTimeListener()
    {
      public void frameAtTime(final Bitmap paramAnonymousBitmap)
      {
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            filterView.initData(paramAnonymousBitmap, filterTypes);
          }
        });
      }
    });
  }
  
  private boolean initPlayMedia()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a12 = a11\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  private void initView()
  {
    rootLayout = ((RelativeLayout)findViewById(R.id.rootLayout));
    rootLayout.setOnClickListener(this);
    titleLayout = ((RelativeLayout)findViewById(R.id.titleLayout));
    bottomLayot = ((LinearLayout)findViewById(R.id.bottomLayout));
    finishTv = ((TextView)findViewById(R.id.finishTv));
    cancelTv = ((TextView)findViewById(R.id.cancelTv));
    finishTv.setOnClickListener(this);
    cancelTv.setOnClickListener(this);
    filterBtLayout = ((LinearLayout)findViewById(R.id.filterBtLayout));
    filterTv = ((TextView)findViewById(R.id.filterTv));
    filterTv.setOnClickListener(this);
    cutBtLayout = ((LinearLayout)findViewById(R.id.cutBtLayout));
    cutTv = ((TextView)findViewById(R.id.cutTv));
    cutTv.setOnClickListener(this);
    progressbarLayout = ((LinearLayout)findViewById(R.id.progresslayout));
    progressbarLayout.setOnClickListener(this);
    progressBar = ((ProgressBar)findViewById(R.id.progressBar));
    cutView = ((VideoCutView)findViewById(R.id.cutView));
    filterView = ((FilterView)findViewById(R.id.filterView));
  }
  
  private boolean isValidVideoPath()
  {
    if ((!TextUtils.isEmpty(videoPath)) && (new File(videoPath).exists()) && (new File(videoPath).length() != 0L))
    {
      if (videoPath.endsWith(".avi"))
      {
        tipDialog(getString(R.string.uni_video_no_support));
      }
      else if ((functionControl == 2) && (!VideoUtil.isSupportFilter()))
      {
        tipDialog(getString(R.string.uni_video_filter_no_support));
      }
      else
      {
        videoInfoUtil = new VideoInfoUtil();
        videoInfoUtil.setPath(videoPath);
        if (!videoInfoUtil.isSetDataSourceSuccess()) {
          tipDialog(getString(R.string.uni_video_play_error));
        } else if (!initPlayMedia()) {
          tipDialog(getString(R.string.uni_video_play_error));
        } else {
          return true;
        }
      }
    }
    else {
      tipDialog(getString(R.string.uni_video_no_exists));
    }
    return false;
  }
  
  private void resetDate()
  {
    finishTv.clearAnimation();
    progressbarLayout.clearAnimation();
    bottomLayot.clearAnimation();
    cutView.clearAnimation();
    filterView.clearAnimation();
    finishTv.setVisibility(0);
    progressbarLayout.setVisibility(8);
    progressBar.setProgress(0);
    currentProgress = 0;
    bottomLayot.setVisibility(0);
    int i = currentFunction;
    if (i == 0)
    {
      cutView.setVisibility(0);
      return;
    }
    if (i == 1) {
      filterView.setVisibility(0);
    }
  }
  
  private void saveVideo()
  {
    Animation localAnimation = VideoUtil.getAlphaAnim(null);
    finishTv.startAnimation(localAnimation);
    finishTv.setVisibility(8);
    localAnimation = VideoUtil.getTranslateYAnim(1.0F, null);
    localAnimation.setDuration(600L);
    int i = currentFunction;
    if (i == 0)
    {
      cutView.startAnimation(localAnimation);
      cutView.setVisibility(8);
    }
    else if (i == 1)
    {
      filterView.startAnimation(localAnimation);
      filterView.setVisibility(8);
    }
    bottomLayot.startAnimation(localAnimation);
    bottomLayot.setVisibility(8);
    localAnimation = VideoUtil.getAppearTranslateYAnim(1.0F, null);
    localAnimation.setStartOffset(300L);
    progressbarLayout.startAnimation(localAnimation);
    progressbarLayout.setVisibility(0);
  }
  
  private void tipDialog(final String paramString)
  {
    JDDialogFactory localJDDialogFactory = JDDialogFactory.getInstance();
    String str = getString(R.string.uni_video_ok);
    paramString = localJDDialogFactory.createJdDialogWithStyle1((Context)this, paramString, str);
    paramString.setCancelable(false);
    paramString.setOnLeftButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        VideoEditorActivity.this.backIntent();
        finish();
      }
    });
    paramString.show();
  }
  
  private void videoPause()
  {
    MediaPlayer localMediaPlayer = mediaPlayer;
    if ((localMediaPlayer != null) && (localMediaPlayer.isPlaying()))
    {
      mediaPlayer.pause();
      if (functionControl != 2) {
        cutView.videoPause();
      }
    }
  }
  
  private void videoStart()
  {
    mediaPlayer.start();
    if (functionControl != 2) {
      cutView.start();
    }
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt1 == finishJumpRequestCode) {
      resetDate();
    }
  }
  
  public void onBackPressed()
  {
    back();
  }
  
  public void onClick(View paramView)
  {
    int i = paramView.getId();
    VideoToast.cancel();
    if (i == R.id.rootLayout)
    {
      if (isSave) {
        return;
      }
      if (isFullScreen)
      {
        titleLayout.setVisibility(0);
        i = currentFunction;
        if (i == 0) {
          cutView.setVisibility(0);
        } else if (i == 1) {
          filterView.setVisibility(0);
        }
        bottomLayot.setVisibility(0);
        isFullScreen = false;
        return;
      }
      titleLayout.setVisibility(8);
      i = currentFunction;
      if (i == 0) {
        cutView.setVisibility(8);
      } else if (i == 1) {
        filterView.setVisibility(8);
      }
      bottomLayot.setVisibility(8);
      isFullScreen = true;
      return;
    }
    if (i == R.id.filterTv)
    {
      if (currentFunction == 1) {
        return;
      }
      cutView.setVisibility(8);
      filterView.setVisibility(0);
      filterTv.setSelected(true);
      cutTv.setSelected(false);
      currentFunction = 1;
      return;
    }
    if (i == R.id.cutTv)
    {
      if (currentFunction == 0) {
        return;
      }
      cutView.setVisibility(0);
      filterView.setVisibility(8);
      filterTv.setSelected(false);
      cutTv.setSelected(true);
      currentFunction = 0;
      if (!isAlreadyToastCut)
      {
        paramView = getResources().getString(R.string.uni_video_editor_cut);
        i = DpiUtil.dip2px((Context)this, 140.0F);
        VideoToast.showToast((Context)this, paramView, i);
        isAlreadyToastCut = true;
      }
    }
    else if (i == R.id.finishTv)
    {
      videoPause();
      saveVideo();
      isSave = true;
      isEditorSuccess = false;
      isEditorFailed = false;
      progressHandler.post(progressRunnable);
      i = functionControl;
      if (i == 0)
      {
        cutView.cutVideo(new VideoClip.ClipFinishListener()
        {
          public void onClipFailed(String paramAnonymousString)
          {
            VideoEditorActivity.access$702(VideoEditorActivity.this, true);
            VideoEditorActivity.access$802(VideoEditorActivity.this, false);
            VideoUtil.deleteFile(paramAnonymousString);
            paramAnonymousString = VideoEditorActivity.this;
            paramAnonymousString.editorFailed(paramAnonymousString.getString(R.string.uni_video_cut_failed));
          }
          
          public void onClipSuccess(String paramAnonymousString)
          {
            VideoEditorActivity localVideoEditorActivity = VideoEditorActivity.this;
            localVideoEditorActivity.addFilter(paramAnonymousString, paramAnonymousString.equals(videoPath) ^ true);
          }
        });
        return;
      }
      if (i == 1)
      {
        cutView.cutVideo(new VideoClip.ClipFinishListener()
        {
          public void onClipFailed(String paramAnonymousString)
          {
            VideoEditorActivity.access$702(VideoEditorActivity.this, true);
            VideoEditorActivity.access$802(VideoEditorActivity.this, false);
            VideoUtil.deleteFile(paramAnonymousString);
            paramAnonymousString = VideoEditorActivity.this;
            paramAnonymousString.editorFailed(paramAnonymousString.getString(R.string.uni_video_cut_failed));
          }
          
          public void onClipSuccess(String paramAnonymousString)
          {
            VideoEditorActivity.access$302(VideoEditorActivity.this, paramAnonymousString);
            VideoEditorActivity.access$202(VideoEditorActivity.this, true);
            VideoEditorActivity.access$802(VideoEditorActivity.this, false);
          }
        });
        return;
      }
      if (i == 2) {
        addFilter(videoPath, false);
      }
    }
    else
    {
      if (i == R.id.cancelTv)
      {
        back();
        return;
      }
      i = R.id.progresslayout;
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(R.layout.lib_uni_video_editor_activity);
    if (!(getIntent().getSerializableExtra("videoParam") instanceof VideoParam)) {
      return;
    }
    videoParam = ((VideoParam)getIntent().getSerializableExtra("videoParam"));
    paramBundle = videoParam;
    if (paramBundle != null)
    {
      videoPath = editorVideoPath;
      functionControl = videoParam.editorFunctionControl;
    }
    if (isValidVideoPath())
    {
      if ((functionControl == 0) && (!VideoUtil.isSupportFilter())) {
        functionControl = 1;
      }
      paramBundle = videoParam;
      if (paramBundle != null)
      {
        maxCutDuration = cutMaxTime;
        minCutDuration = videoParam.cutMinTime;
      }
      videoEditorFinishUtil = VideoEditorFinishUtil.getInstance();
      duration = Long.parseLong(videoInfoUtil.getVideoLength());
      initView();
      functionControl();
      videoStart();
    }
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    Object localObject = mediaPlayer;
    if (localObject != null) {}
    try
    {
      ((MediaPlayer)localObject).stop();
      localObject = mediaPlayer;
      ((MediaPlayer)localObject).release();
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    mediaPlayer = null;
    localObject = videoInfoUtil;
    if (localObject != null) {
      ((VideoInfoUtil)localObject).release();
    }
    if (functionControl != 2)
    {
      localObject = cutView;
      if (localObject != null) {
        ((VideoCutView)localObject).destory();
      }
    }
    localObject = filterView;
    if (localObject != null) {
      ((FilterView)localObject).destory();
    }
    VideoToast.cancel();
    localObject = videoEditorFinishUtil;
    if (localObject != null)
    {
      ((VideoEditorFinishUtil)localObject).setListener(null);
      return;
    }
  }
  
  protected void onPause()
  {
    super.onPause();
    MediaPlayer localMediaPlayer = mediaPlayer;
    if ((localMediaPlayer != null) && (localMediaPlayer.isPlaying())) {
      videoPause();
    }
  }
  
  protected void onResume()
  {
    super.onResume();
    MediaPlayer localMediaPlayer = mediaPlayer;
    if (localMediaPlayer != null) {
      localMediaPlayer.seekTo((int)cutView.getLeftProgress());
    }
  }
}
