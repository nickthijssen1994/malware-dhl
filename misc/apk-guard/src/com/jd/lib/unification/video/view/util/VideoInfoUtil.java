package com.jd.lib.unification.video.view.util;

import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.MediaMetadataRetriever;
import android.os.Build.VERSION;
import android.text.TextUtils;
import java.io.File;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class VideoInfoUtil
{
  private static final String PAGE_KEY = "VideoInfoUtil";
  private static ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());
  private long fileLength = 0L;
  private boolean isSetDataSourceSuccess = true;
  private MediaMetadataRetriever mMetadataRetriever = new MediaMetadataRetriever();
  
  public VideoInfoUtil() {}
  
  public static Bitmap scaleBitmap(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    if (paramBitmap == null) {
      return null;
    }
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    float f = Math.max(paramInt1 / i, paramInt2 / j);
    Matrix localMatrix = new Matrix();
    localMatrix.postScale(f, f);
    return Bitmap.createBitmap(paramBitmap, 0, 0, i, j, localMatrix, false);
  }
  
  public Bitmap extractFrame(long paramLong)
  {
    Object localObject = null;
    while (paramLong < fileLength)
    {
      Bitmap localBitmap = mMetadataRetriever.getFrameAtTime(paramLong * 1000L, 2);
      localObject = localBitmap;
      if (localBitmap != null) {
        return localBitmap;
      }
      paramLong += 1000L;
    }
    return localObject;
  }
  
  public void extractFrame(final VideoFrameAtTimeListener paramVideoFrameAtTimeListener)
  {
    executor.execute(new Runnable()
    {
      public void run()
      {
        Bitmap localBitmap = mMetadataRetriever.getFrameAtTime();
        paramVideoFrameAtTimeListener.frameAtTime(localBitmap);
      }
    });
  }
  
  public int getVideoDegree()
  {
    if (Build.VERSION.SDK_INT >= 17)
    {
      String str = mMetadataRetriever.extractMetadata(24);
      if (!TextUtils.isEmpty(str)) {
        return Integer.valueOf(str).intValue();
      }
    }
    return 0;
  }
  
  public int getVideoHeight()
  {
    String str = mMetadataRetriever.extractMetadata(19);
    if (!TextUtils.isEmpty(str)) {
      return Integer.valueOf(str).intValue();
    }
    return -1;
  }
  
  public String getVideoLength()
  {
    Object localObject = mMetadataRetriever;
    if (localObject == null) {
      return "";
    }
    localObject = ((MediaMetadataRetriever)localObject).extractMetadata(9);
    if (localObject == null) {
      return "";
    }
    return localObject;
  }
  
  public int getVideoWidth()
  {
    String str = mMetadataRetriever.extractMetadata(18);
    if (!TextUtils.isEmpty(str)) {
      return Integer.valueOf(str).intValue();
    }
    return -1;
  }
  
  public boolean isSetDataSourceSuccess()
  {
    return isSetDataSourceSuccess;
  }
  
  public void release()
  {
    MediaMetadataRetriever localMediaMetadataRetriever = mMetadataRetriever;
    if (localMediaMetadataRetriever != null) {
      localMediaMetadataRetriever.release();
    }
  }
  
  public void setPath(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    paramString = new File(paramString);
    MediaMetadataRetriever localMediaMetadataRetriever = mMetadataRetriever;
    try
    {
      localMediaMetadataRetriever.setDataSource(paramString.getAbsolutePath());
    }
    catch (Exception paramString)
    {
      long l;
      for (;;) {}
    }
    isSetDataSourceSuccess = false;
    if (isSetDataSourceSuccess)
    {
      paramString = getVideoLength();
      if (TextUtils.isEmpty(paramString)) {
        l = 0L;
      } else {
        l = Long.valueOf(paramString).longValue();
      }
      fileLength = l;
      return;
    }
  }
  
  public static abstract interface VideoFrameAtTimeListener
  {
    public abstract void frameAtTime(Bitmap paramBitmap);
  }
}
