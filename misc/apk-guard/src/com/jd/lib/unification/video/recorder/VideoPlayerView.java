package com.jd.lib.unification.video.recorder;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.SurfaceView;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.VideoView;
import com.jd.lib.unification.video.VideoToast;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import java.io.File;

public class VideoPlayerView
  extends FrameLayout
{
  private static final String PAGE_KEY = "VideoPlayerView";
  private int currentPosition;
  private MediaPlayer.OnErrorListener errorListener;
  private boolean isVideoPause;
  private Context mContext;
  private ImageView mImageView;
  private VideoView mVideoView;
  private String videoPath;
  
  public VideoPlayerView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public VideoPlayerView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public VideoPlayerView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    mContext = paramContext;
    LayoutInflater.from(paramContext).inflate(R.layout.lib_uni_video_player_view, this);
    mVideoView = ((VideoView)findViewById(R.id.videoView));
    mImageView = ((ImageView)findViewById(R.id.imgView));
  }
  
  public void destory()
  {
    VideoView localVideoView = mVideoView;
    if (localVideoView != null)
    {
      localVideoView.stopPlayback();
      mVideoView.setOnErrorListener(null);
      mVideoView.setOnCompletionListener(null);
    }
  }
  
  public void pause()
  {
    VideoView localVideoView = mVideoView;
    if ((localVideoView != null) && (localVideoView.isPlaying()))
    {
      currentPosition = mVideoView.getCurrentPosition();
      isVideoPause = true;
      destory();
    }
  }
  
  public void playPic(Bitmap paramBitmap)
  {
    if (mVideoView.getVisibility() == 0) {
      mVideoView.setVisibility(8);
    }
    if (mImageView.getVisibility() == 8) {
      mImageView.setVisibility(0);
    }
    if (paramBitmap == null)
    {
      VideoToast.showToast(mContext, getResources().getString(R.string.uni_video_no_photo), DpiUtil.dip2px(mContext, 170.0F));
      return;
    }
    mImageView.setImageBitmap(paramBitmap);
  }
  
  public void playVideo(final String paramString, MediaPlayer.OnErrorListener paramOnErrorListener)
  {
    videoPath = paramString;
    errorListener = paramOnErrorListener;
    isVideoPause = false;
    if (!new File(paramString).exists())
    {
      VideoToast.showToast(mContext, getResources().getString(R.string.uni_video_no_exists), DpiUtil.dip2px(mContext, 170.0F));
      return;
    }
    mVideoView.setVideoPath(paramString);
    mVideoView.start();
    if (mVideoView.getVisibility() == 8) {
      mVideoView.setVisibility(0);
    }
    if (mImageView.getVisibility() == 0) {
      mImageView.setVisibility(8);
    }
    mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener()
    {
      public void onCompletion(MediaPlayer paramAnonymousMediaPlayer)
      {
        mVideoView.setVideoPath(paramString);
        mVideoView.start();
      }
    });
    if (paramOnErrorListener != null) {
      mVideoView.setOnErrorListener(paramOnErrorListener);
    }
  }
  
  public void resume()
  {
    if ((mVideoView != null) && (isVideoPause))
    {
      playVideo(videoPath, errorListener);
      mVideoView.seekTo(currentPosition);
    }
  }
  
  public void setVisibility(int paramInt)
  {
    super.setVisibility(paramInt);
    mVideoView.setVisibility(paramInt);
    mImageView.setVisibility(paramInt);
  }
}
