package com.jd.lib.unification.video.view;

import android.content.Context;
import android.graphics.Matrix;
import android.graphics.SurfaceTexture;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnBufferingUpdateListener;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnInfoListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.media.MediaPlayer.OnSeekCompleteListener;
import android.media.MediaPlayer.OnVideoSizeChangedListener;
import android.net.Uri;
import android.os.Handler.Callback;
import android.os.Message;
import android.util.AttributeSet;
import android.view.Surface;
import android.view.TextureView;
import android.view.TextureView.SurfaceTextureListener;
import android.view.View;
import com.jd.lib.unification.video.view.controller.IVideoControl;
import com.jd.lib.unification.video.view.controller.ItemPlayerController;
import com.jd.lib.unification.video.view.util.VideoPlayUtil;

public class TextureVideoView
  extends TextureView
  implements Handler.Callback, TextureView.SurfaceTextureListener, IVideoControl
{
  private static final int STATE_ERROR = -1;
  private static final int STATE_IDLE = 0;
  private static final int STATE_PAUSED = 4;
  private static final int STATE_PLAYBACK_COMPLETED = 5;
  private static final int STATE_PLAYING = 3;
  private static final int STATE_PREPARED = 2;
  private static final int STATE_PREPARING = 1;
  private static final int STATE_STOP = 6;
  private boolean isMute = false;
  private boolean isScale = true;
  private MediaPlayer.OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener()
  {
    public void onBufferingUpdate(MediaPlayer paramAnonymousMediaPlayer, int paramAnonymousInt)
    {
      TextureVideoView.access$1302(TextureVideoView.this, paramAnonymousInt);
      if (onBufferingUpdateListener != null) {
        onBufferingUpdateListener.onBufferingUpdate(paramAnonymousMediaPlayer, paramAnonymousInt);
      }
    }
  };
  MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener()
  {
    public void onCompletion(MediaPlayer paramAnonymousMediaPlayer)
    {
      TextureVideoView.access$002(TextureVideoView.this, 5);
      if (onCompletionListener != null) {
        onCompletionListener.onCompletion(paramAnonymousMediaPlayer);
      }
    }
  };
  private Context mContext;
  private int mCurrentBufferPercentage;
  private int mCurrentState = 0;
  MediaPlayer.OnErrorListener mErrorListener = new MediaPlayer.OnErrorListener()
  {
    public boolean onError(MediaPlayer paramAnonymousMediaPlayer, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      if (onErrorListener != null) {
        onErrorListener.onError(paramAnonymousMediaPlayer, paramAnonymousInt1, paramAnonymousInt2);
      }
      return false;
    }
  };
  MediaPlayer.OnInfoListener mInfoListener = new MediaPlayer.OnInfoListener()
  {
    public boolean onInfo(MediaPlayer paramAnonymousMediaPlayer, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      if (onInfoListener != null) {
        onInfoListener.onInfo(paramAnonymousMediaPlayer, paramAnonymousInt1, paramAnonymousInt2);
      }
      return false;
    }
  };
  MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener()
  {
    public void onPrepared(MediaPlayer paramAnonymousMediaPlayer)
    {
      TextureVideoView.access$002(TextureVideoView.this, 2);
      TextureVideoView.access$102(TextureVideoView.this, paramAnonymousMediaPlayer.getVideoWidth());
      TextureVideoView.access$202(TextureVideoView.this, paramAnonymousMediaPlayer.getVideoHeight());
      if (mTargetState == 3) {
        start();
      }
      if (onPreparedListener != null) {
        onPreparedListener.onPrepared(paramAnonymousMediaPlayer);
      }
      paramAnonymousMediaPlayer = TextureVideoView.this;
      paramAnonymousMediaPlayer.measure(mVideoWidth, mVideoHeight);
      requestLayout();
    }
  };
  MediaPlayer.OnSeekCompleteListener mSeekCompleteListener = new MediaPlayer.OnSeekCompleteListener()
  {
    public void onSeekComplete(MediaPlayer paramAnonymousMediaPlayer)
    {
      if (onSeekCompleteListener != null) {
        onSeekCompleteListener.onSeekComplete(paramAnonymousMediaPlayer);
      }
    }
  };
  private int mTargetState = 0;
  private final String mTrack = TextureVideoView.class.getSimpleName();
  private Uri mUrl;
  private int mVideoHeight;
  MediaPlayer.OnVideoSizeChangedListener mVideoSizeChangedListener = new MediaPlayer.OnVideoSizeChangedListener()
  {
    public void onVideoSizeChanged(MediaPlayer paramAnonymousMediaPlayer, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      TextureVideoView.access$202(TextureVideoView.this, paramAnonymousMediaPlayer.getVideoHeight());
      TextureVideoView.access$102(TextureVideoView.this, paramAnonymousMediaPlayer.getVideoWidth());
      if (isScale) {
        TextureVideoView.this.updateTextureViewSizeCenter();
      } else {
        TextureVideoView.this.updateTextureViewSizeCenterCrop();
      }
      if (onVideoSizeChangedListener != null) {
        onVideoSizeChangedListener.onVideoSizeChanged(paramAnonymousMediaPlayer, paramAnonymousInt1, paramAnonymousInt2);
      }
    }
  };
  private int mVideoWidth;
  private MediaPlayer mediaPlayer;
  private MediaPlayer.OnBufferingUpdateListener onBufferingUpdateListener;
  private MediaPlayer.OnCompletionListener onCompletionListener;
  private MediaPlayer.OnErrorListener onErrorListener;
  private MediaPlayer.OnInfoListener onInfoListener;
  private MediaPlayer.OnPreparedListener onPreparedListener;
  private MediaPlayer.OnSeekCompleteListener onSeekCompleteListener;
  private MediaPlayer.OnVideoSizeChangedListener onVideoSizeChangedListener;
  private Surface this$0;
  
  public TextureVideoView(Context paramContext)
  {
    super(paramContext);
    initView();
  }
  
  public TextureVideoView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    initView();
  }
  
  public TextureVideoView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initView();
  }
  
  public TextureVideoView(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    initView();
  }
  
  private void initView()
  {
    setSurfaceTextureListener(this);
    mContext = getContext();
  }
  
  private boolean isInPlaybackState()
  {
    if (mediaPlayer != null)
    {
      int i = mCurrentState;
      if ((i != 0) && (i != -1) && (i != 1)) {
        return true;
      }
    }
    return false;
  }
  
  private void openUri()
  {
    if (mUrl != null)
    {
      if (this$0 == null) {
        return;
      }
      if (mCurrentState == 1) {
        return;
      }
      if (ItemPlayerController.getController().isAbandonAudioFocus()) {
        VideoPlayUtil.muteAudioFocus(mContext, isMute ^ true);
      }
      release(false);
      if (mediaPlayer != null) {}
    }
    try
    {
      MediaPlayer localMediaPlayer = new MediaPlayer();
      mediaPlayer = localMediaPlayer;
      localMediaPlayer = mediaPlayer;
      Object localObject = this$0;
      localMediaPlayer.setSurface((Surface)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mBufferingUpdateListener;
      localMediaPlayer.setOnBufferingUpdateListener((MediaPlayer.OnBufferingUpdateListener)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mCompletionListener;
      localMediaPlayer.setOnCompletionListener((MediaPlayer.OnCompletionListener)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mErrorListener;
      localMediaPlayer.setOnErrorListener((MediaPlayer.OnErrorListener)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mInfoListener;
      localMediaPlayer.setOnInfoListener((MediaPlayer.OnInfoListener)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mSeekCompleteListener;
      localMediaPlayer.setOnSeekCompleteListener((MediaPlayer.OnSeekCompleteListener)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mPreparedListener;
      localMediaPlayer.setOnPreparedListener((MediaPlayer.OnPreparedListener)localObject);
      localMediaPlayer = mediaPlayer;
      localObject = mContext;
      Uri localUri = mUrl;
      localMediaPlayer.setDataSource((Context)localObject, localUri);
      localMediaPlayer = mediaPlayer;
      localObject = mVideoSizeChangedListener;
      localMediaPlayer.setOnVideoSizeChangedListener((MediaPlayer.OnVideoSizeChangedListener)localObject);
      if (isMute)
      {
        localMediaPlayer = mediaPlayer;
        localMediaPlayer.setVolume(0.0F, 0.0F);
      }
      localMediaPlayer = mediaPlayer;
      localMediaPlayer.prepareAsync();
      mCurrentState = 1;
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    mCurrentState = -1;
    return;
  }
  
  private void release(boolean paramBoolean)
  {
    MediaPlayer localMediaPlayer = mediaPlayer;
    if (localMediaPlayer != null)
    {
      localMediaPlayer.reset();
      mediaPlayer.release();
      mediaPlayer = null;
      mCurrentState = 0;
      if (paramBoolean) {
        mTargetState = 0;
      }
    }
  }
  
  private void updateTextureViewSizeCenter()
  {
    float f1 = getWidth() / mVideoWidth;
    float f2 = getHeight() / mVideoHeight;
    Matrix localMatrix = new Matrix();
    localMatrix.preTranslate((getWidth() - mVideoWidth) / 2, (getHeight() - mVideoHeight) / 2);
    localMatrix.preScale(mVideoWidth / getWidth(), mVideoHeight / getHeight());
    if (f1 >= f2) {
      localMatrix.postScale(f2, f2, getWidth() / 2, getHeight() / 2);
    } else {
      localMatrix.postScale(f1, f1, getWidth() / 2, getHeight() / 2);
    }
    setTransform(localMatrix);
    postInvalidate();
  }
  
  private void updateTextureViewSizeCenterCrop()
  {
    float f1 = getWidth() / mVideoWidth;
    float f2 = getHeight() / mVideoHeight;
    Matrix localMatrix = new Matrix();
    f1 = Math.max(f1, f2);
    localMatrix.preTranslate((getWidth() - mVideoWidth) / 2, (getHeight() - mVideoHeight) / 2);
    localMatrix.preScale(mVideoWidth / getWidth(), mVideoHeight / getHeight());
    localMatrix.postScale(f1, f1, getWidth() / 2, getHeight() / 2);
    setTransform(localMatrix);
    postInvalidate();
  }
  
  public int getBufferPercentage()
  {
    if (isInPlaybackState()) {
      return mCurrentBufferPercentage;
    }
    return -1;
  }
  
  public int getCurrentPosition()
  {
    if (isInPlaybackState()) {
      return mediaPlayer.getCurrentPosition();
    }
    return 0;
  }
  
  public int getDuration()
  {
    if (isInPlaybackState()) {
      return mediaPlayer.getDuration();
    }
    return -1;
  }
  
  public MediaPlayer getMediaPlayer()
  {
    return mediaPlayer;
  }
  
  public boolean handleMessage(Message paramMessage)
  {
    if (what == 1) {
      openUri();
    }
    return false;
  }
  
  public void isMute(boolean paramBoolean)
  {
    isMute = paramBoolean;
  }
  
  public boolean isPlaying()
  {
    return (isInPlaybackState()) && (mediaPlayer.isPlaying());
  }
  
  public void isScale(boolean paramBoolean)
  {
    isScale = paramBoolean;
  }
  
  public void onSurfaceTextureAvailable(SurfaceTexture paramSurfaceTexture, int paramInt1, int paramInt2)
  {
    this$0 = new Surface(paramSurfaceTexture);
    if (mTargetState == 3)
    {
      openUri();
      start();
    }
  }
  
  public boolean onSurfaceTextureDestroyed(SurfaceTexture paramSurfaceTexture)
  {
    stopPlayback();
    return false;
  }
  
  public void onSurfaceTextureSizeChanged(SurfaceTexture paramSurfaceTexture, int paramInt1, int paramInt2) {}
  
  public void onSurfaceTextureUpdated(SurfaceTexture paramSurfaceTexture) {}
  
  public void pause()
  {
    if (isInPlaybackState()) {
      mediaPlayer.pause();
    }
    mCurrentState = 4;
  }
  
  public void resume()
  {
    openUri();
  }
  
  public void seekTo(int paramInt)
  {
    if (isInPlaybackState()) {
      mediaPlayer.seekTo(paramInt);
    }
  }
  
  public void setOnBufferingUpdateListener(MediaPlayer.OnBufferingUpdateListener paramOnBufferingUpdateListener)
  {
    onBufferingUpdateListener = paramOnBufferingUpdateListener;
  }
  
  public void setOnCompletionListener(MediaPlayer.OnCompletionListener paramOnCompletionListener)
  {
    onCompletionListener = paramOnCompletionListener;
  }
  
  public void setOnErrorListener(MediaPlayer.OnErrorListener paramOnErrorListener)
  {
    onErrorListener = paramOnErrorListener;
  }
  
  public void setOnInfoListener(MediaPlayer.OnInfoListener paramOnInfoListener)
  {
    onInfoListener = paramOnInfoListener;
  }
  
  public void setOnPreparedListener(MediaPlayer.OnPreparedListener paramOnPreparedListener)
  {
    onPreparedListener = paramOnPreparedListener;
  }
  
  public void setOnSeekCompleteListener(MediaPlayer.OnSeekCompleteListener paramOnSeekCompleteListener)
  {
    onSeekCompleteListener = paramOnSeekCompleteListener;
  }
  
  public void setOnVideoSizeChangedListener(MediaPlayer.OnVideoSizeChangedListener paramOnVideoSizeChangedListener)
  {
    onVideoSizeChangedListener = paramOnVideoSizeChangedListener;
  }
  
  public void setVideoUri(Uri paramUri)
  {
    mUrl = paramUri;
    openUri();
  }
  
  public void start()
  {
    if (isInPlaybackState())
    {
      mCurrentState = 3;
      mediaPlayer.start();
      return;
    }
    mTargetState = 3;
  }
  
  public void stop()
  {
    if (isInPlaybackState()) {
      mediaPlayer.stop();
    }
    mTargetState = 6;
  }
  
  public void stopPlayback()
  {
    MediaPlayer localMediaPlayer = mediaPlayer;
    if (localMediaPlayer != null)
    {
      localMediaPlayer.stop();
      mediaPlayer.release();
      mediaPlayer = null;
      mTargetState = 6;
    }
  }
}
