package com.jd.lib.unification.video.editor;

import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.Resources;
import android.media.MediaPlayer;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.LinearInterpolator;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.OnScrollListener;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.video.VideoToast;
import com.jd.lib.unification.video.view.util.VideoInfoUtil;
import com.jd.unalbumwidget.R.drawable;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import java.io.File;

public class VideoCutView
  extends RelativeLayout
{
  private static final int MAX_COUNT_RANGE = 10;
  private final String LOGTAG = VideoCutView.class.getSimpleName();
  private ValueAnimator animator;
  private float averageMsPx;
  private float averagePxMs;
  private long duration;
  private Handler handler = new Handler();
  private boolean isOverScaledTouchSlop;
  private boolean isSeeking;
  private int lastScrollX;
  private long leftProgress;
  private int leftRightMargin = 15;
  private Context mContext;
  private ExtractFrameWorkThread mExtractFrameWorkThread;
  private int mMaxWidth;
  private final RangeSeekBar.OnRangeSeekBarChangeListener mOnRangeSeekBarChangeListener = new RangeSeekBar.OnRangeSeekBarChangeListener()
  {
    public void onRangeSeekBarValuesChanged(RangeSeekBar paramAnonymousRangeSeekBar, long paramAnonymousLong1, long paramAnonymousLong2, int paramAnonymousInt, boolean paramAnonymousBoolean, RangeSeekBar.Thumb paramAnonymousThumb)
    {
      VideoToast.cancel();
      paramAnonymousRangeSeekBar = VideoCutView.this;
      VideoCutView.access$302(paramAnonymousRangeSeekBar, paramAnonymousLong1 + scrollPos);
      paramAnonymousRangeSeekBar = VideoCutView.this;
      VideoCutView.access$1602(paramAnonymousRangeSeekBar, paramAnonymousLong2 + scrollPos);
      switch (paramAnonymousInt)
      {
      default: 
        return;
      case 2: 
        VideoCutView.access$102(VideoCutView.this, true);
        paramAnonymousRangeSeekBar = mediaPlayer;
        if (paramAnonymousThumb == RangeSeekBar.Thumb.MIN) {
          paramAnonymousLong1 = leftProgress;
        } else {
          paramAnonymousLong1 = rightProgress;
        }
        paramAnonymousRangeSeekBar.seekTo((int)paramAnonymousLong1);
        return;
      case 1: 
        VideoCutView.access$102(VideoCutView.this, false);
        StringBuilder localStringBuilder;
        if (rightProgress - leftProgress < minCutDuration + 1000L)
        {
          paramAnonymousRangeSeekBar = mContext;
          paramAnonymousThumb = mContext.getResources();
          paramAnonymousInt = R.string.uni_video_editor_mintip;
          localStringBuilder = new StringBuilder();
          localStringBuilder.append(minCutDuration / 1000L);
          localStringBuilder.append("");
          VideoToast.showToast(paramAnonymousRangeSeekBar, paramAnonymousThumb.getString(paramAnonymousInt, new Object[] { localStringBuilder.toString() }), DpiUtil.dip2px(mContext, 140.0F));
        }
        if (rightProgress - leftProgress >= maxCutDuration)
        {
          paramAnonymousRangeSeekBar = mContext;
          paramAnonymousThumb = mContext.getResources();
          paramAnonymousInt = R.string.uni_video_editor_maxtip;
          localStringBuilder = new StringBuilder();
          localStringBuilder.append(maxCutDuration / 1000L);
          localStringBuilder.append("");
          VideoToast.showToast(paramAnonymousRangeSeekBar, paramAnonymousThumb.getString(paramAnonymousInt, new Object[] { localStringBuilder.toString() }), DpiUtil.dip2px(mContext, 140.0F));
        }
        mediaPlayer.seekTo((int)leftProgress);
        return;
      }
      VideoCutView.access$102(VideoCutView.this, false);
      videoPause();
    }
  };
  private final RecyclerView.OnScrollListener mOnScrollListener = new RecyclerView.OnScrollListener()
  {
    public void onScrollStateChanged(RecyclerView paramAnonymousRecyclerView, int paramAnonymousInt)
    {
      super.onScrollStateChanged(paramAnonymousRecyclerView, paramAnonymousInt);
      if (paramAnonymousInt == 0)
      {
        VideoCutView.access$102(VideoCutView.this, false);
        if ((mediaPlayer != null) && (!mediaPlayer.isPlaying())) {
          mediaPlayer.seekTo((int)leftProgress);
        }
      }
      else
      {
        VideoCutView.access$102(VideoCutView.this, true);
        if ((isOverScaledTouchSlop) && (mediaPlayer != null) && (mediaPlayer.isPlaying())) {
          videoPause();
        }
      }
    }
    
    public void onScrolled(RecyclerView paramAnonymousRecyclerView, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      super.onScrolled(paramAnonymousRecyclerView, paramAnonymousInt1, paramAnonymousInt2);
      paramAnonymousRecyclerView = paramAnonymousRecyclerView.getLayoutManager();
      if ((paramAnonymousRecyclerView instanceof LinearLayoutManager))
      {
        paramAnonymousRecyclerView = (LinearLayoutManager)paramAnonymousRecyclerView;
        paramAnonymousInt1 = paramAnonymousRecyclerView.findFirstCompletelyVisibleItemPosition();
        paramAnonymousInt2 = paramAnonymousRecyclerView.findLastCompletelyVisibleItemPosition();
        if (paramAnonymousInt1 == 0) {
          seekBarLeftView.setBackgroundDrawable(null);
        } else {
          seekBarLeftView.setBackgroundResource(R.drawable.lib_uni_video_editor_overlay_black);
        }
        if (paramAnonymousInt2 == videoEditAdapter.getItemCount() - 1) {
          seekBarRightView.setBackgroundDrawable(null);
        } else {
          seekBarRightView.setBackgroundResource(R.drawable.lib_uni_video_editor_overlay_black);
        }
      }
      VideoCutView.access$102(VideoCutView.this, false);
      paramAnonymousInt1 = VideoCutView.this.getScrollXDistance();
      if (Math.abs(lastScrollX - paramAnonymousInt1) < mScaledTouchSlop)
      {
        VideoCutView.access$402(VideoCutView.this, false);
        return;
      }
      VideoCutView.access$402(VideoCutView.this, true);
      if (paramAnonymousInt1 == -DpiUtil.dip2px(mContext, leftRightMargin))
      {
        VideoCutView.access$1302(VideoCutView.this, 0L);
      }
      else
      {
        if ((mediaPlayer != null) && (mediaPlayer.isPlaying())) {
          videoPause();
        }
        VideoCutView.access$102(VideoCutView.this, true);
        paramAnonymousRecyclerView = VideoCutView.this;
        VideoCutView.access$1302(paramAnonymousRecyclerView, (averageMsPx * (DpiUtil.dip2px(mContext, leftRightMargin) + paramAnonymousInt1)));
        paramAnonymousRecyclerView = VideoCutView.this;
        VideoCutView.access$302(paramAnonymousRecyclerView, seekBar.getSelectedMinValue() + scrollPos);
        paramAnonymousRecyclerView = VideoCutView.this;
        VideoCutView.access$1602(paramAnonymousRecyclerView, seekBar.getSelectedMaxValue() + scrollPos);
        if (mediaPlayer != null) {
          mediaPlayer.seekTo((int)leftProgress);
        }
      }
      VideoCutView.access$902(VideoCutView.this, paramAnonymousInt1);
    }
  };
  private long mProgress = -1L;
  private RecyclerView mRecyclerView;
  private int mScaledTouchSlop;
  private MainHandler mUIHandler;
  private long maxCutDuration = 10000L;
  private MediaPlayer mediaPlayer = null;
  private long minCutDuration = 3000L;
  private String outPutFileDirPath;
  private View positionLine;
  private long rightProgress;
  private Runnable runnable = new Runnable()
  {
    public void run()
    {
      VideoCutView.this.videoProgressUpdate();
      handler.postDelayed(runnable, 1000L);
    }
  };
  private long scrollPos = 0L;
  private RangeSeekBar seekBar;
  private LinearLayout seekBarLayout;
  private View seekBarLeftView;
  private View seekBarRightView;
  private VideoEditAdapter videoEditAdapter;
  private VideoInfoUtil videoInfoUtil;
  private String videoPath;
  
  public VideoCutView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public VideoCutView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public VideoCutView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    mContext = paramContext;
    mUIHandler = new MainHandler(null);
    LayoutInflater.from(paramContext).inflate(R.layout.lib_uni_video_cut_view, this);
    initView();
  }
  
  private void anim()
  {
    if (positionLine.getVisibility() == 8) {
      positionLine.setVisibility(0);
    }
    final RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)positionLine.getLayoutParams();
    animator = ValueAnimator.ofInt(new int[] { (int)(DpiUtil.dip2px(mContext, leftRightMargin) + (float)(leftProgress - scrollPos) * averagePxMs), (int)(DpiUtil.dip2px(mContext, leftRightMargin) + (float)(rightProgress - scrollPos) * averagePxMs) }).setDuration(rightProgress - leftProgress);
    animator.setInterpolator(new LinearInterpolator());
    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
    {
      public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
      {
        localLayoutParamsleftMargin = ((Integer)paramAnonymousValueAnimator.getAnimatedValue()).intValue();
        positionLine.requestLayout();
      }
    });
    animator.start();
  }
  
  private int getScrollXDistance()
  {
    if ((mRecyclerView.getLayoutManager() instanceof LinearLayoutManager))
    {
      Object localObject = (LinearLayoutManager)mRecyclerView.getLayoutManager();
      int i = ((LinearLayoutManager)localObject).findFirstVisibleItemPosition();
      localObject = ((LinearLayoutManager)localObject).findViewByPosition(i);
      return i * ((View)localObject).getWidth() - ((View)localObject).getLeft();
    }
    return 0;
  }
  
  private void initView()
  {
    seekBarLayout = ((LinearLayout)findViewById(R.id.id_seekBarLayout));
    positionLine = findViewById(R.id.positionLine);
    mRecyclerView = ((RecyclerView)findViewById(R.id.id_rv_id));
    mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext, 0, false));
    seekBarLeftView = findViewById(R.id.seekBarLeft);
    seekBarRightView = findViewById(R.id.seekBarRight);
  }
  
  private void videoProgressUpdate()
  {
    long l = mediaPlayer.getCurrentPosition();
    if ((l < rightProgress) && (l != mProgress))
    {
      mProgress = l;
      return;
    }
    mediaPlayer.seekTo((int)leftProgress);
    mProgress = -1L;
  }
  
  public void cutVideo(VideoClip.ClipFinishListener paramClipFinishListener)
  {
    double d1 = leftProgress;
    Double.isNaN(d1);
    d1 /= 1000.0D;
    long l1 = rightProgress;
    double d2 = l1;
    Double.isNaN(d2);
    d2 /= 1000.0D;
    long l2 = duration;
    int i;
    if ((l2 > maxCutDuration) && (l2 - l1 < 1000L)) {
      i = 1;
    } else {
      i = 0;
    }
    if ((leftProgress == 0L) && ((rightProgress == duration) || (i != 0)))
    {
      if (paramClipFinishListener != null) {
        paramClipFinishListener.onClipSuccess(videoPath);
      }
    }
    else
    {
      String str1 = VideoUtil.createOutVideoPath(videoPath);
      String str2 = VideoUtil.createOutVideoName(videoPath);
      VideoClipUtils.videoClip(videoPath, str1, str2, d1, d2, paramClipFinishListener);
    }
  }
  
  public void destory()
  {
    Object localObject = animator;
    if (localObject != null) {
      ((ValueAnimator)localObject).cancel();
    }
    localObject = mRecyclerView;
    if (localObject != null) {
      ((RecyclerView)localObject).removeOnScrollListener(mOnScrollListener);
    }
    localObject = mExtractFrameWorkThread;
    if (localObject != null) {
      ((ExtractFrameWorkThread)localObject).stopExtract();
    }
    mUIHandler.removeCallbacksAndMessages(null);
    handler.removeCallbacksAndMessages(null);
    if (!TextUtils.isEmpty(outPutFileDirPath)) {
      PictureUtils.deleteFile(new File(outPutFileDirPath));
    }
  }
  
  public long getLeftProgress()
  {
    return leftProgress;
  }
  
  public long getRightProgress()
  {
    return rightProgress;
  }
  
  public void initData(String paramString, MediaPlayer paramMediaPlayer, VideoInfoUtil paramVideoInfoUtil)
  {
    mediaPlayer = paramMediaPlayer;
    videoPath = paramString;
    videoInfoUtil = paramVideoInfoUtil;
    duration = Long.parseLong(videoInfoUtil.getVideoLength());
    mMaxWidth = (DpiUtil.getWidth(mContext) - DpiUtil.dip2px(mContext, leftRightMargin * 2));
    mScaledTouchSlop = ViewConfiguration.get(mContext).getScaledTouchSlop();
    videoEditAdapter = new VideoEditAdapter(mContext, mMaxWidth / 10);
    mRecyclerView.setAdapter(videoEditAdapter);
    mRecyclerView.addOnScrollListener(mOnScrollListener);
    long l = duration;
    int i;
    if (l <= maxCutDuration) {
      i = 0;
    } else {
      i = 1;
    }
    int n = (int)((float)l * 1.0F / ((float)maxCutDuration * 1.0F) * 10.0F);
    int k = mMaxWidth / 10 * n;
    mRecyclerView.addItemDecoration(new EditSpacingItemDecoration(DpiUtil.dip2px(mContext, leftRightMargin), n, 10));
    if (i != 0)
    {
      seekBar = new RangeSeekBar(mContext, 0L, maxCutDuration);
      seekBar.setSelectedMinValue(0L);
      seekBar.setSelectedMaxValue(maxCutDuration);
    }
    else
    {
      seekBar = new RangeSeekBar(mContext, 0L, l);
      seekBar.setSelectedMinValue(0L);
      seekBar.setSelectedMaxValue(l);
    }
    seekBar.setMinCutTime(minCutDuration);
    seekBar.setNotifyWhileDragging(true);
    seekBar.setOnRangeSeekBarChangeListener(mOnRangeSeekBarChangeListener);
    int m = mMaxWidth;
    int j = m;
    if (k < m) {
      j = k;
    }
    seekBarLayout.addView(seekBar, new LinearLayout.LayoutParams(j, -1));
    averageMsPx = ((float)duration * 1.0F / k * 1.0F);
    outPutFileDirPath = PictureUtils.getSaveEditThumbnailDir(mContext);
    mExtractFrameWorkThread = new ExtractFrameWorkThread(mMaxWidth / 10, DpiUtil.dip2px(mContext, 55.0F), mUIHandler, paramString, outPutFileDirPath, 0L, l, n);
    mExtractFrameWorkThread.start();
    leftProgress = 0L;
    if (i != 0) {
      rightProgress = maxCutDuration;
    } else {
      rightProgress = l;
    }
    averagePxMs = (j * 1.0F / (float)(rightProgress - leftProgress));
  }
  
  public boolean isNeedCut()
  {
    if (leftProgress == 0L)
    {
      long l = rightProgress;
      if ((l == duration) || (l == maxCutDuration)) {
        return false;
      }
    }
    return true;
  }
  
  public void setMaxCutDuration(long paramLong)
  {
    maxCutDuration = paramLong;
  }
  
  public void setMinCutDuration(long paramLong)
  {
    minCutDuration = paramLong;
  }
  
  public void start()
  {
    positionLine.clearAnimation();
    ValueAnimator localValueAnimator = animator;
    if ((localValueAnimator != null) && (localValueAnimator.isRunning())) {
      animator.cancel();
    }
    anim();
    handler.removeCallbacks(runnable);
    handler.post(runnable);
  }
  
  public void videoPause()
  {
    isSeeking = false;
    handler.removeCallbacks(runnable);
    Object localObject = mediaPlayer;
    if ((localObject != null) && (((MediaPlayer)localObject).isPlaying())) {
      mediaPlayer.pause();
    }
    if (positionLine.getVisibility() == 0) {
      positionLine.setVisibility(8);
    }
    positionLine.clearAnimation();
    localObject = animator;
    if ((localObject != null) && (((ValueAnimator)localObject).isRunning())) {
      animator.cancel();
    }
  }
  
  private class MainHandler
    extends Handler
  {
    private MainHandler() {}
    
    public void handleMessage(Message paramMessage)
    {
      if ((what == 0) && (videoEditAdapter != null) && ((obj instanceof VideoEditInfo)))
      {
        paramMessage = (VideoEditInfo)obj;
        videoEditAdapter.addItemVideoInfo(paramMessage);
      }
    }
  }
}
