package com.jd.lib.unification.video.recorder;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnErrorListener;
import android.os.BaseBundle;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.view.MotionEvent;
import android.view.OrientationEventListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.LinearInterpolator;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import androidx.fragment.app.FragmentActivity;
import com.jd.lib.unification.album.entity.ImageParam;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.album.utils.permission.core.PermissionHelper;
import com.jd.lib.unification.image.editor.ImageEditorActivity;
import com.jd.lib.unification.video.VideoToast;
import com.jd.lib.unification.video.editor.VideoEditorActivity;
import com.jd.unalbumwidget.R.drawable;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.widget.image.UnNetImageView;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class VideoRecorderActivity
  extends FragmentActivity
  implements View.OnClickListener
{
  private static final String DEBUG_TAG = "VideoRecorderActivity";
  private static final int PICTURE_FAILED = 103;
  private static final int PICTURE_FINISH = 102;
  private static final int RECORD_FAILED = 104;
  private static final int RECORD_FINISH = 101;
  private static final int RECORD_PROGRESS = 100;
  private TextView backTv;
  private Animation bottomAnim;
  private RelativeLayout bottomLayout;
  private int cameraSupport = 0;
  private TextView cameraTv;
  private boolean canOnTouch = true;
  private Animation cancelAnim;
  private TextView cancelTv;
  private TextView centerTv;
  private TextView circleImgView;
  private UnNetImageView coverImage;
  private String coverImagePath;
  private int currentOrientation = 0;
  private float currentRotate = 0.0F;
  private int currentState = 0;
  private int currentTime = 0;
  private List<File> deleteFiles = new ArrayList();
  private Animation finishAnim;
  private RelativeLayout finishBtLayout;
  private TextView finishTv;
  private int functionControl = 0;
  private Handler handler = new Handler()
  {
    public void handleMessage(final Message paramAnonymousMessage)
    {
      switch (what)
      {
      default: 
        return;
      case 104: 
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            VideoRecorderActivity localVideoRecorderActivity = VideoRecorderActivity.this;
            String str = getResources().getString(R.string.uni_video_record_failed);
            int i = DpiUtil.dip2px((Context)VideoRecorderActivity.this, 170.0F);
            VideoToast.showToast((Context)localVideoRecorderActivity, str, i);
            deleteFiles.add(recorderView.getVecordFile());
            recorderView.setVecordFile(null);
            VideoRecorderActivity.this.resetData();
            recorderView.release();
            recorderView.startPreview();
          }
        });
        return;
      case 103: 
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            VideoRecorderActivity localVideoRecorderActivity = VideoRecorderActivity.this;
            String str = getResources().getString(R.string.uni_video_pic_failed);
            int i = DpiUtil.dip2px((Context)VideoRecorderActivity.this, 170.0F);
            VideoToast.showToast((Context)localVideoRecorderActivity, str, i);
            deleteFiles.add(recorderView.getPicFile());
            recorderView.setPicFile(null);
            VideoRecorderActivity.this.resetData();
            recorderView.release();
            recorderView.startPreview();
          }
        });
        return;
      case 102: 
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            titleLayout.setVisibility(8);
            bottomLayout.setVisibility(8);
            finishBtLayout.setVisibility(0);
            if (cancelAnim == null) {
              VideoRecorderActivity.access$702(VideoRecorderActivity.this, VideoUtil.getTranslateXAnim(0.2F, null));
            } else {
              cancelAnim.reset();
            }
            4 local4 = this;
            this$1.this$0.cancelTv.startAnimation(this$1.this$0.cancelAnim);
            if (this$1.this$0.finishAnim == null) {
              VideoRecorderActivity.access$902(this$1.this$0, VideoUtil.getTranslateXAnim(-0.2F, null));
            } else {
              this$1.this$0.finishAnim.reset();
            }
            this$1.this$0.finishTv.startAnimation(this$1.this$0.finishAnim);
            this$1.this$0.closeLight();
            this$1.this$0.playerView.setVisibility(0);
            Bitmap localBitmap = (Bitmap)paramAnonymousMessage.getData().get("picBitmap");
            this$1.this$0.playerView.playPic(localBitmap);
            this$1.this$0.recorderView.setVisibility(8);
          }
        });
        return;
      case 101: 
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            VideoRecorderActivity.this.closeLight();
            bottomLayout.setVisibility(8);
            progressLayout.setVisibility(8);
            finishBtLayout.setVisibility(0);
            if (cancelAnim == null) {
              VideoRecorderActivity.access$702(VideoRecorderActivity.this, VideoUtil.getTranslateXAnim(0.2F, null));
            } else {
              cancelAnim.reset();
            }
            cancelTv.startAnimation(cancelAnim);
            if (finishAnim == null) {
              VideoRecorderActivity.access$902(VideoRecorderActivity.this, VideoUtil.getTranslateXAnim(-0.2F, null));
            } else {
              finishAnim.reset();
            }
            finishTv.startAnimation(finishAnim);
            String str = "";
            if (recorderView.getVecordFile() != null) {
              str = recorderView.getVecordFile().getPath();
            }
            playerView.setVisibility(0);
            playerView.playVideo(str, new MediaPlayer.OnErrorListener()
            {
              public boolean onError(MediaPlayer paramAnonymous3MediaPlayer, int paramAnonymous3Int1, int paramAnonymous3Int2)
              {
                paramAnonymous3MediaPlayer = VideoRecorderActivity.this;
                String str = getResources().getString(R.string.uni_video_play_error);
                paramAnonymous3Int1 = DpiUtil.dip2px((Context)VideoRecorderActivity.this, 170.0F);
                VideoToast.showToast((Context)paramAnonymous3MediaPlayer, str, paramAnonymous3Int1);
                return true;
              }
            });
            recorderView.setVisibility(8);
          }
        });
        return;
      }
      runOnUiThread(new Runnable()
      {
        public void run()
        {
          int i = paramAnonymousMessagearg1;
          StringBuilder localStringBuilder;
          if (((i - currentTime) % 1000 != 0) && (i - currentTime >= 0))
          {
            localObject = timeTv;
            localStringBuilder = new StringBuilder();
            localStringBuilder.append((i - currentTime) / 1000 + 1);
            localStringBuilder.append("");
            ((TextView)localObject).setText(localStringBuilder.toString());
          }
          else
          {
            localObject = timeTv;
            localStringBuilder = new StringBuilder();
            localStringBuilder.append((i - currentTime) / 1000);
            localStringBuilder.append("");
            ((TextView)localObject).setText(localStringBuilder.toString());
          }
          Object localObject = progressView;
          double d1 = progressView.getMaxProgress();
          Double.isNaN(d1);
          double d2 = i;
          Double.isNaN(d2);
          d1 = d1 * 1.0D / d2;
          d2 = currentTime;
          Double.isNaN(d2);
          ((CircleProgressView)localObject).setProgress((int)(d1 * d2));
        }
      });
    }
  };
  private boolean isCoverImageBg;
  private boolean isRecord = false;
  private boolean isSquarePhoto;
  private TextView leftTv;
  private TextView ligthTv;
  private OrientationEventListener mOrientationListener;
  private float mTouchDownX = 0.0F;
  private float mTouchDownY = 0.0F;
  private VideoPlayerView playerView;
  private LinearLayout progressLayout;
  private CircleProgressView progressView;
  private int recordMaxTime = 10;
  private int recordMinTime = 3;
  private VideoRecorderView recorderView;
  private TextView rightTv;
  private File rootFile;
  private int squarePhotoWidth = 0;
  private TextView timeTv;
  private Animation titleAnim;
  private RelativeLayout titleLayout;
  private VideoParam videoParam;
  
  public VideoRecorderActivity() {}
  
  private void accessSelectVideo()
  {
    centerTv.setText(getString(R.string.uni_video_video));
    leftTv.setText(getString(R.string.uni_video_photo));
    rightTv.setText(" ");
    coverImage.setVisibility(8);
    currentState = 0;
    closeLight();
    circleImgView.setText(getResources().getString(R.string.uni_video_click_take));
    recorderView.setMaskViewVisibility(8);
  }
  
  private void checkPermissions()
  {
    PermissionHelper.with((Activity)this).permissions(new String[] { "android.permission.CAMERA", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE" }).requestCode(400).lisener(new Object[] { this }).request();
  }
  
  private void closeLight()
  {
    recorderView.closeLight();
    ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
  }
  
  private void contimueInitData()
  {
    functionControl();
    progressView.setMaxProgress(recordMaxTime * 10);
    recorderView.setRecordMaxTime(recordMaxTime * 1000);
    recorderView.setSquarePhoto(isSquarePhoto);
    recorderView.setSquarePhotoWidth(squarePhotoWidth);
    TextView localTextView = timeTv;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(recordMaxTime);
    localStringBuilder.append("");
    localTextView.setText(localStringBuilder.toString());
    recorderView.setRootFile(rootFile);
    recorderView.setOnRecordProgressListener(new VideoRecorderView.OnRecordProgressListener()
    {
      public void onProgressChanged(int paramAnonymousInt1, int paramAnonymousInt2)
      {
        VideoRecorderActivity.access$002(VideoRecorderActivity.this, paramAnonymousInt2);
        Message localMessage = new Message();
        arg1 = paramAnonymousInt1;
        what = 100;
        handler.handleMessage(localMessage);
      }
    });
    mOrientationListener = new OrientationEventListener((Context)this, 3)
    {
      public void onOrientationChanged(int paramAnonymousInt)
      {
        if (paramAnonymousInt == -1) {
          return;
        }
        if ((paramAnonymousInt <= 350) && (paramAnonymousInt >= 10))
        {
          if ((paramAnonymousInt > 80) && (paramAnonymousInt < 100))
          {
            paramAnonymousInt = 90;
          }
          else if ((paramAnonymousInt > 170) && (paramAnonymousInt < 190))
          {
            paramAnonymousInt = 180;
          }
          else if (paramAnonymousInt > 260)
          {
            if (paramAnonymousInt >= 280) {
              return;
            }
            paramAnonymousInt = 270;
          }
        }
        else {
          paramAnonymousInt = 0;
        }
        rotateViews(paramAnonymousInt);
      }
    };
  }
  
  private void functionControl()
  {
    switch (functionControl)
    {
    default: 
      return;
    case 2: 
      centerTv.setText(getString(R.string.uni_video_photo));
      leftTv.setText("");
      rightTv.setText("");
      currentState = 1;
      circleImgView.setText("");
      setCoverImage();
      if (isSquarePhoto)
      {
        recorderView.setMaskViewVisibility(0);
        return;
      }
      recorderView.setMaskViewVisibility(8);
      return;
    case 1: 
      centerTv.setText(getString(R.string.uni_video_video));
      leftTv.setText("");
      rightTv.setText("");
      currentState = 0;
      circleImgView.setText(getResources().getString(R.string.uni_video_click_take));
      return;
    }
    if (currentState == 1)
    {
      setSelectPic();
      return;
    }
    setSelectVideo();
  }
  
  private void initData()
  {
    squarePhotoWidth = DpiUtil.getWidth((Context)this);
    if (rootFile == null) {
      if (Build.VERSION.SDK_INT >= 19) {
        rootFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
      } else {
        rootFile = Environment.getExternalStorageDirectory();
      }
    }
    rootFile = new File(rootFile, "jdimage");
    if (!rootFile.exists()) {
      rootFile.mkdirs();
    }
    if (!(getIntent().getSerializableExtra("videoParam") instanceof VideoParam)) {
      return;
    }
    videoParam = ((VideoParam)getIntent().getSerializableExtra("videoParam"));
    Object localObject = videoParam;
    if (localObject != null)
    {
      functionControl = recordFunctionControl;
      currentState = videoParam.recordCurrentState;
      recordMaxTime = videoParam.recordMaxTime;
      recordMinTime = videoParam.recordMinTime;
      isSquarePhoto = videoParam.isSquarePhoto;
      coverImagePath = videoParam.coverImagePath;
      isCoverImageBg = videoParam.isCoverImageBg;
      int i;
      if (videoParam.squarePhotoWidth > 0) {
        i = videoParam.squarePhotoWidth;
      } else {
        i = DpiUtil.getWidth((Context)this);
      }
      squarePhotoWidth = i;
      cameraSupport = videoParam.cameraSupport;
    }
    if (cameraSupport != 0)
    {
      cameraTv.setVisibility(8);
      localObject = (RelativeLayout.LayoutParams)ligthTv.getLayoutParams();
      rightMargin = DpiUtil.dip2px((Context)this, 15.0F);
      ((RelativeLayout.LayoutParams)localObject).addRule(11);
    }
    if (cameraSupport == 2)
    {
      recorderView.initSurface(1);
      ligthTv.setVisibility(8);
    }
    else
    {
      recorderView.initSurface(0);
    }
    if (currentState == 0)
    {
      PermissionHelper.with((Activity)this).permissions(new String[] { "android.permission.RECORD_AUDIO" }).requestCode(500).lisener(new Object[] { this }).request();
      return;
    }
    contimueInitData();
  }
  
  private void initView()
  {
    recorderView.setVisibility(0);
    leftTv.setOnClickListener(this);
    rightTv.setOnClickListener(this);
    progressLayout.setOnClickListener(this);
    circleImgView.setOnClickListener(this);
    cancelTv.setOnClickListener(this);
    finishTv.setOnClickListener(this);
    initData();
  }
  
  private void resetData()
  {
    recorderView.setVisibility(0);
    playerView.destory();
    playerView.setVisibility(8);
    currentTime = 0;
    isRecord = false;
    canOnTouch = true;
    Object localObject = bottomAnim;
    if (localObject != null) {
      ((Animation)localObject).cancel();
    }
    bottomLayout.clearAnimation();
    localObject = titleAnim;
    if (localObject != null) {
      ((Animation)localObject).cancel();
    }
    titleLayout.clearAnimation();
    closeLight();
    ligthTv.setVisibility(0);
    ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
    progressLayout.setVisibility(8);
    progressView.setProgress(-1);
    finishBtLayout.setVisibility(8);
    cancelTv.clearAnimation();
    finishTv.clearAnimation();
    bottomLayout.setVisibility(0);
    circleImgView.setEnabled(true);
    localObject = timeTv;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(recordMaxTime);
    localStringBuilder.append("");
    ((TextView)localObject).setText(localStringBuilder.toString());
    titleLayout.setVisibility(0);
  }
  
  private void setCoverImage()
  {
    if (TextUtils.isEmpty(coverImagePath)) {
      return;
    }
    coverImage.setVisibility(0);
    Object localObject = coverImagePath;
    try
    {
      int i = Integer.parseInt((String)localObject);
      if (isCoverImageBg)
      {
        localObject = coverImage;
        ((UnNetImageView)localObject).setBackgroundResource(i);
        return;
      }
      localObject = coverImage;
      ((UnNetImageView)localObject).setImage(i);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      coverImage.setImage(coverImagePath);
    }
  }
  
  private void setSelectPic()
  {
    centerTv.setText(getString(R.string.uni_video_photo));
    leftTv.setText(" ");
    rightTv.setText(getString(R.string.uni_video_video));
    currentState = 1;
    circleImgView.setText("");
    setCoverImage();
    closeLight();
    if (isSquarePhoto)
    {
      recorderView.setMaskViewVisibility(0);
      return;
    }
    recorderView.setMaskViewVisibility(8);
  }
  
  private void setSelectVideo()
  {
    PermissionHelper.with((Activity)this).permissions(new String[] { "android.permission.RECORD_AUDIO" }).requestCode(600).lisener(new Object[] { this }).request();
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    String str;
    if ((paramInt1 == 101) && (paramInt2 == -1))
    {
      if (paramIntent == null) {
        return;
      }
      if (paramIntent.getBooleanExtra("editorReturn", false))
      {
        str = paramIntent.getStringExtra("videoEditorOutPath");
        paramIntent.putExtra("videoRecordReturnState", 100);
        paramIntent.putExtra("videoPath", str);
        setResult(-1, paramIntent);
        finish();
        return;
      }
      resetData();
      return;
    }
    if ((paramInt1 == 102) && (paramInt2 == -1))
    {
      if (paramIntent == null) {
        return;
      }
      if (paramIntent.getBooleanExtra("editorReturn", false))
      {
        str = paramIntent.getStringExtra("imageEditorReturnPath");
        paramIntent.putExtra("videoRecordReturnState", 101);
        paramIntent.putExtra("photoPath", str);
        setResult(-1, paramIntent);
        finish();
        return;
      }
      resetData();
    }
  }
  
  public void onBackPressed()
  {
    Object localObject = finishBtLayout;
    try
    {
      int i = ((View)localObject).getVisibility();
      if (i == 0) {
        if (currentState == 0)
        {
          localObject = recorderView;
          ((VideoRecorderView)localObject).deleteVocordFile();
        }
        else
        {
          localObject = recorderView;
          ((VideoRecorderView)localObject).deletePicFile();
        }
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    super.onBackPressed();
  }
  
  public void onClick(View paramView)
  {
    int i = paramView.getId();
    VideoToast.cancel();
    int k = R.id.circleImage;
    int j = 1;
    if (i == k)
    {
      if (currentState == 0)
      {
        if (!isRecord)
        {
          recorderView.record(currentOrientation, new VideoRecorderView.OnRecordFinishListener()
          {
            public void onRecordFailed()
            {
              VideoRecorderActivity.access$1702(VideoRecorderActivity.this, false);
              handler.sendEmptyMessage(104);
            }
            
            public void onRecordFinish()
            {
              VideoRecorderActivity.access$1702(VideoRecorderActivity.this, false);
              handler.sendEmptyMessage(101);
            }
          });
          isRecord = true;
          paramView = titleAnim;
          if (paramView == null) {
            titleAnim = VideoUtil.getTranslateYAnim(-1.0F, new Animation.AnimationListener()
            {
              public void onAnimationEnd(Animation paramAnonymousAnimation) {}
              
              public void onAnimationRepeat(Animation paramAnonymousAnimation) {}
              
              public void onAnimationStart(Animation paramAnonymousAnimation) {}
            });
          } else {
            paramView.reset();
          }
          titleLayout.startAnimation(titleAnim);
          titleLayout.setVisibility(8);
          paramView = bottomAnim;
          if (paramView == null) {
            bottomAnim = VideoUtil.getTranslateYAnim(1.0F, new Animation.AnimationListener()
            {
              public void onAnimationEnd(Animation paramAnonymousAnimation) {}
              
              public void onAnimationRepeat(Animation paramAnonymousAnimation) {}
              
              public void onAnimationStart(Animation paramAnonymousAnimation)
              {
                progressLayout.setVisibility(0);
              }
            });
          } else {
            paramView.reset();
          }
          bottomLayout.startAnimation(bottomAnim);
          bottomLayout.setVisibility(8);
          canOnTouch = false;
        }
      }
      else
      {
        recorderView.takePhoto(currentOrientation, new CameraManager.OnFinishPicListener()
        {
          public void onFailedPic()
          {
            handler.sendEmptyMessage(103);
          }
          
          public void onFinishPic(Bitmap paramAnonymousBitmap)
          {
            Message localMessage = new Message();
            what = 102;
            Bundle localBundle = new Bundle();
            localBundle.putParcelable("picBitmap", paramAnonymousBitmap);
            localMessage.setData(localBundle);
            coverImage.setVisibility(8);
            handler.sendMessage(localMessage);
          }
        });
        circleImgView.setEnabled(false);
        canOnTouch = false;
      }
    }
    else
    {
      Object localObject;
      if (i == R.id.progressLayout)
      {
        recorderView.stop();
        isRecord = false;
        if (recorderView.getTimeCount() > recordMinTime * 1000)
        {
          handler.sendEmptyMessage(101);
          return;
        }
        paramView = getResources();
        i = R.string.uni_video_re_recording;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(recordMinTime);
        ((StringBuilder)localObject).append("");
        paramView = paramView.getString(i, new Object[] { ((StringBuilder)localObject).toString() });
        i = DpiUtil.dip2px((Context)this, 170.0F);
        VideoToast.showToast((Context)this, paramView, i);
        deleteFiles.add(recorderView.getVecordFile());
        recorderView.setVecordFile(null);
        resetData();
        recorderView.startPreview();
        return;
      }
      if (i == R.id.leftTv)
      {
        setSelectPic();
        return;
      }
      if (i == R.id.rightTv)
      {
        setSelectVideo();
        return;
      }
      if (i == R.id.backTv)
      {
        finish();
        return;
      }
      if (i == R.id.cameraTv)
      {
        recorderView.closeLight();
        recorderView.changeCameraFaceing();
        if (recorderView.getCameraPosition() == 1)
        {
          ligthTv.setVisibility(8);
          return;
        }
        ligthTv.setVisibility(0);
        ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
        return;
      }
      if (i == R.id.lightTv)
      {
        if (recorderView.openOrCloseLight(currentState))
        {
          ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_open);
          return;
        }
        ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
        return;
      }
      if (i == R.id.cancelTv)
      {
        if (currentState == 0)
        {
          deleteFiles.add(recorderView.getVecordFile());
          recorderView.setVecordFile(null);
        }
        else
        {
          coverImage.setVisibility(0);
          deleteFiles.add(recorderView.getPicFile());
          recorderView.setPicFile(null);
        }
        resetData();
        return;
      }
      if (i == R.id.finishTv)
      {
        if (currentState == 0)
        {
          paramView = recorderView.getVecordFile();
          VideoUtil.galleryAddPic((Context)this, paramView);
          paramView = videoParam;
          if ((paramView != null) && (needEditor))
          {
            if (recorderView.getVecordFile() != null) {
              videoParam.editorVideoPath = recorderView.getVecordFile().getAbsolutePath();
            }
            paramView = new Intent((Context)this, VideoEditorActivity.class);
            paramView.putExtra("videoParam", videoParam);
            startActivityForResult(paramView, 101);
            playerView.destory();
            return;
          }
          paramView = getIntent();
          paramView.putExtra("videoRecordReturnState", 100);
          if (recorderView.getVecordFile() != null) {
            paramView.putExtra("videoPath", recorderView.getVecordFile().getAbsolutePath());
          }
          setResult(-1, paramView);
          finish();
          return;
        }
        paramView = recorderView.getPicFile();
        VideoUtil.galleryAddPic((Context)this, paramView);
        paramView = DEBUG_TAG;
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("needEditorPic:");
        ((StringBuilder)localObject).append(videoParam.needEditorPic);
        ((StringBuilder)localObject).append(" cropShape");
        ((StringBuilder)localObject).append(videoParam.cropShape);
        Log.d(paramView, ((StringBuilder)localObject).toString());
        paramView = videoParam;
        if (((paramView == null) || (!needEditorPic)) && (videoParam.cropShape != 0) && (videoParam.cropShape != 1))
        {
          paramView = getIntent();
          paramView.putExtra("videoRecordReturnState", 101);
          if (recorderView.getPicFile() != null) {
            paramView.putExtra("photoPath", recorderView.getPicFile().getAbsolutePath());
          }
          setResult(-1, paramView);
          finish();
          return;
        }
        paramView = new ImageParam();
        if (recorderView.getPicFile() != null) {
          editorImagePath = recorderView.getPicFile().getAbsolutePath();
        }
        if (((videoParam.cropShape == 0) || (videoParam.cropShape == 1)) && (videoParam.needEditorPic))
        {
          i = 0;
        }
        else
        {
          i = j;
          if (videoParam.cropShape != 0) {
            if (videoParam.cropShape == 1) {
              i = j;
            } else if (videoParam.needEditorPic) {
              i = 2;
            } else {
              i = -1;
            }
          }
        }
        editorFunction = i;
        cropShape = videoParam.cropShape;
        cropCircleRadius = videoParam.cropCircleRadius;
        cropRectX = videoParam.cropRectX;
        cropRectY = videoParam.cropRectY;
        localObject = new Intent((Context)this, ImageEditorActivity.class);
        ((Intent)localObject).putExtra("imageParam", paramView);
        startActivityForResult((Intent)localObject, 102);
        playerView.destory();
      }
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(R.layout.lib_uni_video_recorder_activity);
    titleLayout = ((RelativeLayout)findViewById(R.id.titleLayout));
    backTv = ((TextView)findViewById(R.id.backTv));
    cameraTv = ((TextView)findViewById(R.id.cameraTv));
    ligthTv = ((TextView)findViewById(R.id.lightTv));
    bottomLayout = ((RelativeLayout)findViewById(R.id.bottomLayout));
    leftTv = ((TextView)findViewById(R.id.leftTv));
    centerTv = ((TextView)findViewById(R.id.centerTv));
    rightTv = ((TextView)findViewById(R.id.rightTv));
    progressLayout = ((LinearLayout)findViewById(R.id.progressLayout));
    recorderView = ((VideoRecorderView)findViewById(R.id.recorderview));
    playerView = ((VideoPlayerView)findViewById(R.id.playview));
    backTv.setOnClickListener(this);
    cameraTv.setOnClickListener(this);
    ligthTv.setOnClickListener(this);
    playerView.setVisibility(8);
    timeTv = ((TextView)findViewById(R.id.timeTv));
    circleImgView = ((TextView)findViewById(R.id.circleImage));
    progressView = ((CircleProgressView)findViewById(R.id.circleProgressbar));
    finishBtLayout = ((RelativeLayout)findViewById(R.id.finishBtLayout));
    cancelTv = ((TextView)findViewById(R.id.cancelTv));
    finishTv = ((TextView)findViewById(R.id.finishTv));
    coverImage = ((UnNetImageView)findViewById(R.id.coverImage));
    checkPermissions();
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    Object localObject = recorderView;
    if (localObject != null)
    {
      ((VideoRecorderView)localObject).stop();
      recorderView.release();
    }
    localObject = playerView;
    if (localObject != null) {
      ((VideoPlayerView)localObject).destory();
    }
    handler.removeCallbacksAndMessages(null);
    VideoToast.cancel();
    localObject = deleteFiles;
    if ((localObject != null) && (((List)localObject).size() > 0))
    {
      int i = 0;
      while (i < deleteFiles.size())
      {
        localObject = (File)deleteFiles.get(i);
        if ((localObject != null) && (((File)localObject).exists())) {
          ((File)localObject).delete();
        }
        i += 1;
      }
    }
  }
  
  public void onFail()
  {
    finish();
  }
  
  public void onFailCamera()
  {
    finish();
  }
  
  public void onFailRecord() {}
  
  protected void onPause()
  {
    super.onPause();
    Object localObject = mOrientationListener;
    if (localObject != null) {
      ((OrientationEventListener)localObject).disable();
    }
    if (isRecord)
    {
      recorderView.stop();
      deleteFiles.add(recorderView.getVecordFile());
      recorderView.setVecordFile(null);
    }
    localObject = playerView;
    if (localObject != null) {
      ((VideoPlayerView)localObject).pause();
    }
  }
  
  protected void onResume()
  {
    super.onResume();
    Object localObject = mOrientationListener;
    if ((localObject != null) && (((OrientationEventListener)localObject).canDetectOrientation())) {
      mOrientationListener.enable();
    }
    localObject = recorderView;
    try
    {
      int i = ((VideoRecorderView)localObject).getCameraPosition();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("id: ");
      ((StringBuilder)localObject).append(i);
      Log.d("camera", ((StringBuilder)localObject).toString());
      if (i == 1)
      {
        localObject = handler;
        ((Handler)localObject).post(new Runnable()
        {
          public void run()
          {
            recorderView.changeCameraFaceing();
          }
        });
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    if (isRecord)
    {
      resetData();
      recorderView.startPreview();
    }
    VideoPlayerView localVideoPlayerView = playerView;
    if (localVideoPlayerView != null) {
      localVideoPlayerView.resume();
    }
  }
  
  public void onSucess()
  {
    contimueInitData();
  }
  
  public void onSucessCamera()
  {
    initView();
  }
  
  public void onSucessRecord()
  {
    accessSelectVideo();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (paramMotionEvent.getAction() == 0)
    {
      mTouchDownX = paramMotionEvent.getX();
      VideoToast.cancel();
    }
    if (paramMotionEvent.getAction() == 1)
    {
      mTouchDownY = paramMotionEvent.getX();
      float f1 = mTouchDownX;
      float f2 = mTouchDownY;
      if (f1 - f2 > 50.0F)
      {
        if ((canOnTouch) && (functionControl == 0) && (currentState == 1)) {
          setSelectVideo();
        }
      }
      else if ((f2 - f1 > 50.0F) && (canOnTouch) && (functionControl == 0) && (currentState == 0)) {
        setSelectPic();
      }
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void rotateViews(int paramInt)
  {
    int i = currentOrientation;
    if (paramInt == i) {
      return;
    }
    float f1 = currentRotate;
    int j = -(paramInt - i);
    if (j == 270)
    {
      i = -90;
    }
    else
    {
      i = j;
      if (j == 65266) {
        i = 90;
      }
    }
    float f2 = i + f1;
    currentOrientation = paramInt;
    currentRotate = f2;
    ObjectAnimator localObjectAnimator1 = ObjectAnimator.ofFloat(cameraTv, "Rotation", new float[] { f1, f2 });
    ObjectAnimator localObjectAnimator2 = ObjectAnimator.ofFloat(ligthTv, "Rotation", new float[] { f1, f2 });
    ObjectAnimator localObjectAnimator3 = ObjectAnimator.ofFloat(progressLayout, "Rotation", new float[] { f1, f2 });
    AnimatorSet localAnimatorSet = new AnimatorSet();
    localAnimatorSet.setDuration(200L);
    localAnimatorSet.setInterpolator(new LinearInterpolator());
    localAnimatorSet.playTogether(new Animator[] { localObjectAnimator1, localObjectAnimator2, localObjectAnimator3 });
    localAnimatorSet.start();
  }
}
