package com.jd.lib.unification.video.recorder;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.Size;
import android.media.CamcorderProfile;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.view.Display;
import android.view.SurfaceHolder;
import android.view.WindowManager;
import com.jd.lib.unification.video.VideoToast;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

public class CameraManager
{
  private static final String TAG = "CameraManager";
  private int cameraID = 0;
  private boolean isLightOpen;
  private volatile Camera mCamera;
  private Context mContext;
  private int mHeight;
  private int mPicHeight = -1;
  private int mPicWidth = -1;
  private int mSupportHeight = -1;
  private int mSupportWidth = -1;
  private SurfaceHolder mSurfaceHolder;
  private boolean mWaitForTakePhoto;
  private int mWidth;
  
  public CameraManager(Context paramContext)
  {
    mContext = paramContext;
    mWidth = 640;
    mHeight = 480;
  }
  
  private boolean checkCameraFacing(int paramInt)
  {
    int j = Camera.getNumberOfCameras();
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    int i = 0;
    while (i < j)
    {
      Camera.getCameraInfo(i, localCameraInfo);
      if (paramInt == facing) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private String getAutoFocusMode(Camera.Parameters paramParameters)
  {
    if (paramParameters != null)
    {
      paramParameters = paramParameters.getSupportedFocusModes();
      if (isSupported(paramParameters, "continuous-picture")) {
        return "continuous-picture";
      }
      if (isSupported(paramParameters, "continuous-video")) {
        return "continuous-video";
      }
      if (isSupported(paramParameters, "auto")) {
        return "auto";
      }
    }
    return null;
  }
  
  private Camera.Parameters getParameters()
  {
    if (mCamera == null) {
      return null;
    }
    Object localObject = mCamera;
    try
    {
      localObject = ((Camera)localObject).getParameters();
      return localObject;
    }
    catch (Exception localException) {}
    return null;
  }
  
  private void getPicSize(int paramInt1, int paramInt2, List paramList)
  {
    if (paramList != null)
    {
      if (paramList.size() == 0) {
        return;
      }
      float f4 = (paramInt1 + 0.0F) / paramInt2;
      int i = paramInt1 * 3;
      paramInt2 = i / 2;
      i /= 4;
      Iterator localIterator = paramList.iterator();
      Object localObject = null;
      paramList = null;
      float f2 = Float.MAX_VALUE;
      float f1 = Float.MAX_VALUE;
      while (localIterator.hasNext())
      {
        Camera.Size localSize = (Camera.Size)localIterator.next();
        float f3 = Math.abs((height + 0.0F) / width - f4);
        if ((height <= paramInt2) && (height >= i))
        {
          if (f3 < f1)
          {
            localObject = localSize;
            f1 = f3;
          }
        }
        else if ((height < paramInt1 * 2) && (f3 < f2))
        {
          paramList = localSize;
          f2 = f3;
        }
      }
      if (localObject != null) {
        paramList = localObject;
      }
      if (paramList != null)
      {
        mPicHeight = height;
        mPicWidth = width;
        return;
      }
      if (CamcorderProfile.hasProfile(cameraID, 5)) {
        paramList = CamcorderProfile.get(cameraID, 5);
      } else if (CamcorderProfile.hasProfile(cameraID, 6)) {
        paramList = CamcorderProfile.get(6);
      } else if (CamcorderProfile.hasProfile(cameraID, 4)) {
        paramList = CamcorderProfile.get(4);
      } else {
        paramList = CamcorderProfile.get(cameraID, 7);
      }
      if (paramList != null)
      {
        mPicHeight = videoFrameHeight;
        mPicWidth = videoFrameWidth;
      }
    }
  }
  
  private void getPreviewSize(int paramInt1, int paramInt2, List paramList)
  {
    if (paramList != null)
    {
      if (paramList.size() == 0) {
        return;
      }
      float f4 = (paramInt1 + 0.0F) / paramInt2;
      paramInt2 = paramInt1 * 3 / 2;
      paramInt1 /= 2;
      Iterator localIterator = paramList.iterator();
      Object localObject = null;
      paramList = null;
      float f2 = Float.MAX_VALUE;
      float f1 = Float.MAX_VALUE;
      while (localIterator.hasNext())
      {
        Camera.Size localSize = (Camera.Size)localIterator.next();
        float f3 = Math.abs((height + 0.0F) / width - f4);
        if ((height <= paramInt2) && (height > paramInt1))
        {
          if (f3 < f1)
          {
            localObject = localSize;
            f1 = f3;
          }
        }
        else if (f3 < f2)
        {
          paramList = localSize;
          f2 = f3;
        }
      }
      if (localObject != null) {
        paramList = localObject;
      }
      if (paramList != null)
      {
        mSupportHeight = height;
        mSupportWidth = width;
      }
    }
  }
  
  private void getVideoSize(int paramInt1, int paramInt2, List paramList)
  {
    if (paramList != null)
    {
      if (paramList.size() == 0) {
        return;
      }
      float f4 = (paramInt1 + 0.0F) / paramInt2;
      paramInt2 = paramInt1 / 2;
      Iterator localIterator = paramList.iterator();
      Object localObject = null;
      paramList = null;
      float f2 = Float.MAX_VALUE;
      float f1 = Float.MAX_VALUE;
      while (localIterator.hasNext())
      {
        Camera.Size localSize = (Camera.Size)localIterator.next();
        float f3 = Math.abs((height + 0.0F) / width - f4);
        if ((height <= paramInt1) && (height > paramInt2))
        {
          if (f3 < f1)
          {
            localObject = localSize;
            f1 = f3;
          }
        }
        else if ((height < paramInt1 * 3 / 2) && (f3 < f2))
        {
          paramList = localSize;
          f2 = f3;
        }
      }
      if (localObject != null) {
        paramList = localObject;
      }
      if (paramList != null)
      {
        mHeight = height;
        mWidth = width;
        return;
      }
      if (CamcorderProfile.hasProfile(cameraID, 5)) {
        paramList = CamcorderProfile.get(cameraID, 5);
      } else if (CamcorderProfile.hasProfile(cameraID, 4)) {
        paramList = CamcorderProfile.get(4);
      } else if (CamcorderProfile.hasProfile(cameraID, 7)) {
        paramList = CamcorderProfile.get(7);
      } else {
        paramList = CamcorderProfile.get(cameraID, 0);
      }
      if (paramList != null)
      {
        mHeight = videoFrameHeight;
        mWidth = videoFrameWidth;
      }
    }
  }
  
  private boolean isSupported(List paramList, String paramString)
  {
    return (paramList != null) && (paramList.contains(paramString));
  }
  
  public static void setCameraDisplayOrientation(Activity paramActivity, int paramInt, Camera paramCamera)
  {
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    Camera.getCameraInfo(paramInt, localCameraInfo);
    int j = paramActivity.getWindowManager().getDefaultDisplay().getRotation();
    int i = 0;
    paramInt = i;
    switch (j)
    {
    default: 
      paramInt = i;
      break;
    case 3: 
      paramInt = 270;
      break;
    case 2: 
      paramInt = 180;
      break;
    case 1: 
      paramInt = 90;
    }
    if (facing == 1) {
      paramInt = (360 - (orientation + paramInt) % 360) % 360;
    } else {
      paramInt = (orientation - paramInt + 360) % 360;
    }
    paramCamera.setDisplayOrientation(paramInt);
  }
  
  private void setCameraParams()
  {
    if (mCamera != null)
    {
      Camera.Parameters localParameters = getParameters();
      if (localParameters == null) {
        return;
      }
      String str = getAutoFocusMode(localParameters);
      if (str != null) {
        localParameters.setFocusMode(str);
      }
      localParameters.set("orientation", "portrait");
      localParameters.setPictureFormat(256);
      localParameters.setJpegQuality(100);
      setParameters(localParameters);
      if (((mSupportWidth != -1) && (mSupportHeight != -1)) || ((mPicWidth != -1) && (mPicHeight != -1)))
      {
        localParameters = getParameters();
        if (localParameters == null) {
          return;
        }
        int i = mSupportWidth;
        int j;
        if (i != -1)
        {
          j = mSupportHeight;
          if (j != -1) {
            localParameters.setPreviewSize(i, j);
          }
        }
        i = mPicWidth;
        if (i != -1)
        {
          j = mPicHeight;
          if (j != -1) {
            localParameters.setPictureSize(i, j);
          }
        }
        setParameters(localParameters);
      }
      mCamera.cancelAutoFocus();
    }
  }
  
  private void setParameters(Camera.Parameters paramParameters)
  {
    if (mCamera == null) {
      return;
    }
    Camera localCamera = mCamera;
    try
    {
      localCamera.setParameters(paramParameters);
      return;
    }
    catch (Exception paramParameters) {}
  }
  
  public void changeCameraFaceing()
  {
    for (;;)
    {
      try
      {
        if (cameraID != 1) {}
      }
      catch (Throwable localThrowable)
      {
        boolean bool;
        Context localContext1;
        Object localObject;
        int i;
        Context localContext2;
        throw localThrowable;
      }
      try
      {
        bool = checkCameraFacing(0);
        if (!bool)
        {
          localContext1 = mContext;
          localObject = mContext;
          localObject = ((Context)localObject).getResources();
          i = R.string.uni_video_no_camera;
          localObject = ((Resources)localObject).getString(i);
          localContext2 = mContext;
          VideoToast.showToast(localContext1, (CharSequence)localObject, DpiUtil.dip2px(localContext2, 170.0F));
        }
        else
        {
          initCamera(0);
        }
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
    }
    if (cameraID == 0)
    {
      bool = checkCameraFacing(1);
      if (!bool)
      {
        localContext1 = mContext;
        localObject = mContext;
        localObject = ((Context)localObject).getResources();
        i = R.string.uni_video_no_facing_front_camera;
        localObject = ((Resources)localObject).getString(i);
        localContext2 = mContext;
        VideoToast.showToast(localContext1, (CharSequence)localObject, DpiUtil.dip2px(localContext2, 170.0F));
      }
      else
      {
        initCamera(1);
      }
    }
  }
  
  public void closeLight()
  {
    try
    {
      if ((isLightOpen) && (mCamera != null))
      {
        Camera.Parameters localParameters = getParameters();
        if (localParameters == null) {
          return;
        }
        localParameters.setFlashMode("off");
        isLightOpen = false;
        setParameters(localParameters);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void freeCameraResource()
  {
    if (mCamera != null) {
      try
      {
        if (mCamera != null)
        {
          mCamera.setPreviewCallback(null);
          stopPreview();
          lock();
          mCamera.release();
          mCamera = null;
        }
        return;
      }
      catch (Throwable localThrowable)
      {
        try
        {
          throw localThrowable;
          mCamera = null;
          return;
        }
        catch (Exception localException)
        {
          for (;;) {}
        }
      }
    }
  }
  
  public Camera getCamera()
  {
    try
    {
      Camera localCamera = mCamera;
      return localCamera;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getCameraID()
  {
    try
    {
      int i = cameraID;
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getVideoHeight()
  {
    try
    {
      int i = mHeight;
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int getVideoWidth()
  {
    try
    {
      int i = mWidth;
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void initCamera(int paramInt)
    throws IOException
  {
    if (mCamera != null) {
      freeCameraResource();
    }
    if (paramInt == 1) {}
    try
    {
      try
      {
        bool = checkCameraFacing(1);
        if (bool)
        {
          localObject1 = Camera.open(1);
          mCamera = ((Camera)localObject1);
          cameraID = 1;
        }
        else
        {
          localObject1 = mContext;
          localObject3 = mContext;
          localObject3 = ((Context)localObject3).getResources();
          paramInt = R.string.uni_video_no_facing_front_camera;
          localObject3 = ((Resources)localObject3).getString(paramInt);
          localContext = mContext;
          VideoToast.showToast((Context)localObject1, (CharSequence)localObject3, DpiUtil.dip2px(localContext, 170.0F));
        }
      }
      catch (Throwable localThrowable)
      {
        boolean bool;
        Object localObject1;
        Context localContext;
        break label384;
      }
      bool = checkCameraFacing(0);
      if (bool)
      {
        localObject1 = Camera.open(0);
        mCamera = ((Camera)localObject1);
        cameraID = 0;
      }
      else
      {
        localObject1 = mContext;
        localObject3 = mContext;
        localObject3 = ((Context)localObject3).getResources();
        paramInt = R.string.uni_video_no_camera;
        localObject3 = ((Resources)localObject3).getString(paramInt);
        localContext = mContext;
        VideoToast.showToast((Context)localObject1, (CharSequence)localObject3, DpiUtil.dip2px(localContext, 170.0F));
      }
    }
    catch (Exception localException1)
    {
      Object localObject3;
      int i;
      Object localObject2;
      for (;;) {}
    }
    if (mCamera != null)
    {
      mCamera.release();
      mCamera = null;
    }
    VideoToast.showToast(mContext, mContext.getResources().getString(R.string.uni_video_camera_open_fail), DpiUtil.dip2px(mContext, 170.0F));
    if (mCamera == null) {
      return;
    }
    paramInt = DpiUtil.getWidth(mContext);
    i = DpiUtil.getHeight(mContext);
    localObject2 = getParameters();
    if (localObject2 == null) {
      return;
    }
    getPreviewSize(paramInt, i, ((Camera.Parameters)localObject2).getSupportedPreviewSizes());
    getVideoSize(paramInt, i, ((Camera.Parameters)localObject2).getSupportedVideoSizes());
    getPicSize(paramInt, i, ((Camera.Parameters)localObject2).getSupportedPictureSizes());
    setCameraParams();
    if (Build.VERSION.SDK_INT >= 17) {
      mCamera.enableShutterSound(false);
    }
    setCameraDisplayOrientation((Activity)mContext, cameraID, mCamera);
    localObject2 = mCamera;
    localObject3 = mSurfaceHolder;
    try
    {
      ((Camera)localObject2).setPreviewDisplay((SurfaceHolder)localObject3);
      localObject2 = mCamera;
      ((Camera)localObject2).startPreview();
    }
    catch (Exception localException2)
    {
      label384:
      for (;;) {}
    }
    return;
    throw ((Throwable)localObject2);
  }
  
  public void initCamera(SurfaceHolder paramSurfaceHolder)
    throws IOException
  {
    mSurfaceHolder = paramSurfaceHolder;
    initCamera(0);
  }
  
  public void initCamera(SurfaceHolder paramSurfaceHolder, int paramInt)
    throws IOException
  {
    mSurfaceHolder = paramSurfaceHolder;
    initCamera(paramInt);
  }
  
  public void lock()
  {
    if (mCamera == null) {
      return;
    }
    Camera localCamera = mCamera;
    try
    {
      localCamera.lock();
      return;
    }
    catch (Exception localException) {}
  }
  
  public boolean openOrCloseLight(int paramInt)
  {
    try
    {
      if (mCamera != null)
      {
        Camera.Parameters localParameters = getParameters();
        if (localParameters == null) {
          return false;
        }
        String str = localParameters.getFlashMode();
        if (TextUtils.isEmpty(str))
        {
          VideoToast.showToast(mContext, mContext.getResources().getString(R.string.uni_video_no_flash), DpiUtil.dip2px(mContext, 170.0F));
          bool = isLightOpen;
          return bool;
        }
        if (TextUtils.equals(str, "off"))
        {
          if (paramInt == 0) {
            localParameters.setFlashMode("torch");
          } else {
            localParameters.setFlashMode("on");
          }
          isLightOpen = true;
        }
        else if ((TextUtils.equals(str, "torch")) || (TextUtils.equals(str, "on")))
        {
          localParameters.setFlashMode("off");
          isLightOpen = false;
        }
        setParameters(localParameters);
      }
      boolean bool = isLightOpen;
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void startPreview()
  {
    if (mCamera != null) {
      localObject = mCamera;
    }
    try
    {
      ((Camera)localObject).startPreview();
      return;
    }
    catch (Exception localException) {}
    Object localObject = mSurfaceHolder;
    initCamera((SurfaceHolder)localObject);
    return;
  }
  
  public void stopPreview()
  {
    if (mCamera != null)
    {
      Camera localCamera = mCamera;
      try
      {
        localCamera.stopPreview();
        return;
      }
      catch (Exception localException) {}
    }
  }
  
  public void takePicture(final OnFinishPicListener paramOnFinishPicListener)
  {
    Camera localCamera;
    if (!mWaitForTakePhoto)
    {
      if (mCamera == null) {
        return;
      }
      mWaitForTakePhoto = true;
      localCamera = mCamera;
    }
    try
    {
      localCamera.takePicture(null, null, new Camera.PictureCallback()
      {
        public void onPictureTaken(byte[] paramAnonymousArrayOfByte, Camera paramAnonymousCamera)
        {
          int i = paramAnonymousArrayOfByte.length;
          try
          {
            paramAnonymousArrayOfByte = BitmapFactory.decodeByteArray(paramAnonymousArrayOfByte, 0, i);
            paramAnonymousCamera = CameraManager.this;
            CameraManager.access$002(paramAnonymousCamera, false);
            if (paramOnFinishPicListener == null) {
              return;
            }
            paramAnonymousCamera = paramOnFinishPicListener;
            paramAnonymousCamera.onFinishPic(paramAnonymousArrayOfByte);
            return;
          }
          catch (Exception paramAnonymousArrayOfByte)
          {
            for (;;) {}
          }
          CameraManager.access$002(CameraManager.this, false);
          paramAnonymousArrayOfByte = paramOnFinishPicListener;
          if (paramAnonymousArrayOfByte != null)
          {
            paramAnonymousArrayOfByte.onFailedPic();
            return;
          }
        }
      });
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    mWaitForTakePhoto = false;
    if (paramOnFinishPicListener != null)
    {
      paramOnFinishPicListener.onFailedPic();
      return;
    }
  }
  
  public void unLock()
  {
    if (mCamera == null) {
      return;
    }
    Camera localCamera = mCamera;
    try
    {
      localCamera.unlock();
      return;
    }
    catch (Exception localException) {}
  }
  
  public static abstract interface OnFinishPicListener
  {
    public abstract void onFailedPic();
    
    public abstract void onFinishPic(Bitmap paramBitmap);
  }
}
