package com.jd.lib.unification.image.editor;

import android.animation.ObjectAnimator;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.fragment.app.FragmentActivity;
import com.jd.lib.unification.album.builder.CropImageOption.Builder;
import com.jd.lib.unification.album.entity.ImageParam;
import com.jd.lib.unification.album.filter.FilterTools;
import com.jd.lib.unification.album.filter.FilterTools.FilterType;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.album.mInterface.BitmapCropCallback;
import com.jd.lib.unification.album.utils.BitmapUtil;
import com.jd.lib.unification.album.utils.CreateAddFilterMediaUtil;
import com.jd.lib.unification.album.utils.ImageEditorFinishUtil;
import com.jd.lib.unification.album.utils.ImageEditorFinishUtil.OnFinishClickListener;
import com.jd.lib.unification.album.view.CropImageView;
import com.jd.lib.unification.album.view.CropOverlayView.CropShape;
import com.jd.lib.unification.album.view.FilterComponent;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.ui.JDDialog;
import com.jingdong.common.ui.JDDialogFactory;
import java.io.File;

public class ImageEditorActivity
  extends FragmentActivity
  implements View.OnClickListener
{
  private boolean crop;
  public float cropCircleRadius = 300.0F;
  public float cropRectX = 300.0F;
  public float cropRectY = 300.0F;
  public int cropShape = -1;
  private Bitmap curBitmap;
  private int curFunction = -1;
  private FilterTools.FilterType currentFilterType = FilterTools.FilterType.NO_FILTER;
  private int editorFunction = -1;
  private FilterComponent filterComponent;
  private int finishJumpRequestCode = 30;
  private FrameLayout flCut;
  private FrameLayout flFilter;
  private FrameLayout flFilterContainer;
  private ImageEditorFinishUtil imageEditorFinishUtil;
  private ImageParam imageParam;
  private String imagePath;
  private ImageView ivCut;
  private ImageView ivFilter;
  private ImageView ivFunctionCancle;
  private ImageView ivFunctionConfirm;
  private CropImageView ivResult;
  private LinearLayout llEditFunctionMenu;
  private LinearLayout llTitle1;
  private LinearLayout llTitle2;
  private Bitmap originalBitmap;
  private String outputPath;
  private FrameLayout rlRoot;
  private TextView tvCancle;
  private TextView tvConfirm;
  
  public ImageEditorActivity() {}
  
  private void back()
  {
    if (curBitmap != originalBitmap)
    {
      Object localObject = JDDialogFactory.getInstance();
      String str1 = getString(R.string.uni_video_editor_cancel_tip);
      String str2 = getString(R.string.uni_video_cancel);
      String str3 = getString(R.string.uni_video_ok);
      localObject = ((JDDialogFactory)localObject).createJdDialogWithStyle2((Context)this, str1, str2, str3);
      ((JDDialog)localObject).setCancelable(false);
      ((JDDialog)localObject).setOnLeftButtonClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          val$dialog.dismiss();
        }
      });
      ((JDDialog)localObject).setOnRightButtonClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          val$dialog.dismiss();
          ImageEditorActivity.this.backIntent();
          finish();
        }
      });
      ((JDDialog)localObject).show();
      return;
    }
    backIntent();
    finish();
  }
  
  private void backIntent()
  {
    Intent localIntent = getIntent();
    localIntent.putExtra("editorReturn", false);
    setResult(-1, localIntent);
  }
  
  private void editorFailed(final String paramString)
  {
    JDDialogFactory localJDDialogFactory = JDDialogFactory.getInstance();
    String str1 = getString(R.string.uni_video_editor_give_up);
    String str2 = getString(R.string.uni_video_editor_continue);
    paramString = localJDDialogFactory.createJdDialogWithStyle2((Context)this, paramString, str1, str2);
    paramString.setCancelable(false);
    paramString.setOnLeftButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        ImageEditorActivity.this.back();
      }
    });
    paramString.setOnRightButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        if (curFunction == 1) {
          ImageEditorActivity.this.selectCut();
        }
      }
    });
    paramString.show();
  }
  
  private void getIntentExtra()
  {
    imageParam = ((ImageParam)getIntent().getSerializableExtra("imageParam"));
    ImageParam localImageParam = imageParam;
    if (localImageParam != null)
    {
      imagePath = editorImagePath;
      editorFunction = imageParam.editorFunction;
      cropShape = imageParam.cropShape;
      cropCircleRadius = imageParam.cropCircleRadius;
      cropRectX = imageParam.cropRectX;
      cropRectY = imageParam.cropRectY;
    }
  }
  
  private void initFilterView()
  {
    filterComponent = null;
    filterComponent = new FilterComponent((Context)this);
    filterComponent.setBitmap(curBitmap);
  }
  
  private void notifyEditorResult()
  {
    Object localObject = curBitmap;
    if (localObject == originalBitmap)
    {
      outputPath = imagePath;
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("???? ");
      ((StringBuilder)localObject).append(outputPath);
      Log.e("ImageEditorActivity", ((StringBuilder)localObject).toString());
    }
    else
    {
      outputPath = CreateAddFilterMediaUtil.saveBitmapToSD((Bitmap)localObject, FilterTools.getFilterName(currentFilterType), crop);
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("?????? ");
      ((StringBuilder)localObject).append(outputPath);
      Log.e("ImageEditorActivity", ((StringBuilder)localObject).toString());
    }
    if (TextUtils.isEmpty(outputPath))
    {
      editorFailed(getResources().getString(R.string.uni_pic_edit_failed));
      return;
    }
    localObject = new File(outputPath);
    VideoUtil.galleryAddPic((Context)this, (File)localObject);
    if (imageEditorFinishUtil.getListener() != null)
    {
      localObject = imageEditorFinishUtil.getListener();
      String str = outputPath;
      int i = finishJumpRequestCode;
      ((ImageEditorFinishUtil.OnFinishClickListener)localObject).onFinish((Context)this, str, i);
      return;
    }
    localObject = getIntent();
    ((Intent)localObject).putExtra("imageEditorReturnPath", outputPath);
    ((Intent)localObject).putExtra("editorReturn", true);
    setResult(-1, (Intent)localObject);
    finish();
  }
  
  private void selectCut()
  {
    curFunction = 1;
    ivResult.setCropUI(true);
    showFunction();
    ivCut.setSelected(true);
    ivFilter.setSelected(false);
  }
  
  private void selectFilter()
  {
    curFunction = 0;
    showFunction();
    flFilterContainer.removeAllViews();
    initFilterView();
    flFilterContainer.addView(filterComponent);
    ivCut.setSelected(false);
    ivFilter.setSelected(true);
  }
  
  private void tipDialog(final String paramString)
  {
    JDDialogFactory localJDDialogFactory = JDDialogFactory.getInstance();
    String str = getString(R.string.uni_video_ok);
    paramString = localJDDialogFactory.createJdDialogWithStyle1((Context)this, paramString, str);
    paramString.setCancelable(false);
    paramString.setOnLeftButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        ImageEditorActivity.this.backIntent();
        finish();
      }
    });
    paramString.show();
  }
  
  public void hideFunction()
  {
    if (editorFunction != 0) {
      return;
    }
    LinearLayout localLinearLayout = llTitle1;
    ObjectAnimator.ofFloat(localLinearLayout, "translationY", new float[] { -localLinearLayout.getHeight(), 0.0F }).setDuration(100L).start();
    localLinearLayout = llEditFunctionMenu;
    ObjectAnimator.ofFloat(localLinearLayout, "translationY", new float[] { localLinearLayout.getHeight(), 0.0F }).setDuration(100L).start();
    localLinearLayout = llTitle2;
    ObjectAnimator.ofFloat(localLinearLayout, "translationY", new float[] { 0.0F, -localLinearLayout.getHeight() }).setDuration(100L).start();
  }
  
  public void onBackPressed()
  {
    back();
  }
  
  public void onClick(View paramView)
  {
    if (paramView.getId() == R.id.iv_filter)
    {
      selectFilter();
      return;
    }
    if (paramView.getId() == R.id.iv_cut)
    {
      selectCut();
      return;
    }
    int i;
    if (paramView.getId() == R.id.iv_function_cancle)
    {
      i = curFunction;
      if (i == 0)
      {
        flFilterContainer.removeAllViews();
        filterComponent = null;
      }
      else if (i == 1)
      {
        ivResult.reset();
        ivResult.setCropUI(false);
      }
      if (editorFunction != 0)
      {
        back();
        return;
      }
      hideFunction();
      curFunction = -1;
      return;
    }
    if (paramView.getId() == R.id.iv_function_confirm)
    {
      i = curFunction;
      if (i == 0)
      {
        paramView = filterComponent;
        if (paramView != null)
        {
          if (paramView.getCurType() != FilterTools.FilterType.NO_FILTER)
          {
            paramView = filterComponent.getBitmap();
            if (paramView == null)
            {
              editorFailed("??????");
            }
            else
            {
              curBitmap = paramView;
              ivResult.setImageBitmap(curBitmap);
              if (editorFunction != 0) {
                notifyEditorResult();
              } else {
                hideFunction();
              }
            }
          }
          else if (editorFunction != 0)
          {
            notifyEditorResult();
          }
          else
          {
            hideFunction();
          }
          currentFilterType = filterComponent.getCurType();
          flFilterContainer.removeAllViews();
          filterComponent = null;
        }
      }
      else if (i == 1)
      {
        ivResult.crop(new BitmapCropCallback()
        {
          public void onBitmapCropped(Bitmap paramAnonymousBitmap)
          {
            ImageEditorActivity.access$002(ImageEditorActivity.this, true);
            ImageEditorActivity.access$102(ImageEditorActivity.this, paramAnonymousBitmap);
            ivResult.setCropUI(false);
            ivResult.setImageBitmap(paramAnonymousBitmap);
            if (editorFunction != 0)
            {
              ImageEditorActivity.this.notifyEditorResult();
              return;
            }
            hideFunction();
          }
          
          public void onCropFailure(Throwable paramAnonymousThrowable)
          {
            ImageEditorActivity.this.editorFailed("????");
          }
        });
      }
    }
    else
    {
      if (paramView.getId() == R.id.tv_cancle)
      {
        back();
        return;
      }
      if (paramView.getId() == R.id.tv_confirm) {
        notifyEditorResult();
      }
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(R.layout.lib_uni_image_editor_activity);
    rlRoot = ((FrameLayout)findViewById(R.id.rootLayout));
    flFilterContainer = ((FrameLayout)findViewById(R.id.fl_filter_container));
    ivResult = ((CropImageView)findViewById(R.id.iv_result));
    llTitle1 = ((LinearLayout)findViewById(R.id.ll_title1));
    tvCancle = ((TextView)findViewById(R.id.tv_cancle));
    tvConfirm = ((TextView)findViewById(R.id.tv_confirm));
    tvCancle.setOnClickListener(this);
    tvConfirm.setOnClickListener(this);
    llTitle2 = ((LinearLayout)findViewById(R.id.ll_title2));
    ivFunctionCancle = ((ImageView)findViewById(R.id.iv_function_cancle));
    ivFunctionConfirm = ((ImageView)findViewById(R.id.iv_function_confirm));
    ivFunctionCancle.setOnClickListener(this);
    ivFunctionConfirm.setOnClickListener(this);
    llEditFunctionMenu = ((LinearLayout)findViewById(R.id.ll_edit_function_menu));
    flFilter = ((FrameLayout)findViewById(R.id.fl_filter));
    ivFilter = ((ImageView)findViewById(R.id.iv_filter));
    flCut = ((FrameLayout)findViewById(R.id.fl_cut));
    ivCut = ((ImageView)findViewById(R.id.iv_cut));
    ivFilter.setOnClickListener(this);
    ivCut.setOnClickListener(this);
    getIntentExtra();
    paramBundle = imagePath;
    originalBitmap = BitmapUtil.getFitSampleBitmap((Context)this, paramBundle);
    paramBundle = originalBitmap;
    if (paramBundle == null)
    {
      tipDialog(getString(R.string.uni_video_no_photo));
      return;
    }
    curBitmap = paramBundle;
    ivResult.setImageBitmap(curBitmap);
    int i = editorFunction;
    if (i == 1)
    {
      flFilter.setVisibility(8);
      llTitle1.setVisibility(8);
      ivResult.setCropUI(true);
      selectCut();
    }
    else if (i == 2)
    {
      flCut.setVisibility(8);
      llTitle1.setVisibility(8);
      ivResult.setCropUI(false);
      selectFilter();
    }
    else
    {
      flFilter.setVisibility(0);
      llTitle1.setVisibility(0);
      ivResult.setCropUI(false);
      llTitle2.setTranslationY(-DpiUtil.dip2px((Context)this, 30.0F));
    }
    CropImageOption.Builder localBuilder = new CropImageOption.Builder();
    if (cropShape == 0) {
      paramBundle = CropOverlayView.CropShape.RECTANGLE;
    } else {
      paramBundle = CropOverlayView.CropShape.CIRCLE;
    }
    paramBundle = localBuilder.setCropShape(paramBundle).setCropCircleRadius(cropCircleRadius).setCropRectX(cropRectX).setCropRectY(cropRectY).build();
    ivResult.setCropImageOption(paramBundle);
    imageEditorFinishUtil = ImageEditorFinishUtil.getInstance();
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    FilterComponent localFilterComponent = filterComponent;
    if (localFilterComponent != null) {
      localFilterComponent.destory();
    }
  }
  
  public void showFunction()
  {
    if (editorFunction != 0) {
      return;
    }
    LinearLayout localLinearLayout = llTitle1;
    ObjectAnimator.ofFloat(localLinearLayout, "translationY", new float[] { 0.0F, -localLinearLayout.getHeight() }).setDuration(100L).start();
    localLinearLayout = llEditFunctionMenu;
    ObjectAnimator.ofFloat(localLinearLayout, "translationY", new float[] { 0.0F, localLinearLayout.getHeight() }).setDuration(100L).start();
    localLinearLayout = llTitle2;
    ObjectAnimator.ofFloat(localLinearLayout, "translationY", new float[] { -localLinearLayout.getHeight(), 0.0F }).start();
  }
}
