package com.jd.lib.unification.album.view;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.view.View;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.ItemDecoration;
import androidx.recyclerview.widget.RecyclerView.LayoutParams;
import androidx.recyclerview.widget.RecyclerView.State;

public class RecycleViewDivider
  extends RecyclerView.ItemDecoration
{
  private static final int[] ATTRS = { 16843284 };
  private Drawable mDivider;
  private int mDividerHeight = 2;
  private int mOrientation;
  private Paint mPaint;
  
  public RecycleViewDivider(Context paramContext, int paramInt)
  {
    if ((paramInt != 1) && (paramInt != 0)) {
      throw new IllegalArgumentException("?????????");
    }
    mOrientation = paramInt;
    paramContext = paramContext.obtainStyledAttributes(ATTRS);
    mDivider = paramContext.getDrawable(0);
    paramContext.recycle();
  }
  
  public RecycleViewDivider(Context paramContext, int paramInt1, int paramInt2)
  {
    this(paramContext, paramInt1);
    mDivider = ContextCompat.getDrawable(paramContext, paramInt2);
  }
  
  public RecycleViewDivider(Context paramContext, int paramInt1, int paramInt2, int paramInt3)
  {
    this(paramContext, paramInt1);
    mPaint = new Paint(1);
    mPaint.setColor(paramInt3);
    mPaint.setStyle(Paint.Style.FILL);
  }
  
  private void drawHorizontal(Canvas paramCanvas, RecyclerView paramRecyclerView)
  {
    int j = paramRecyclerView.getPaddingLeft();
    int k = paramRecyclerView.getMeasuredWidth() - paramRecyclerView.getPaddingRight();
    int m = paramRecyclerView.getChildCount();
    int i = 0;
    while (i < m)
    {
      Object localObject = paramRecyclerView.getChildAt(i);
      RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)((View)localObject).getLayoutParams();
      int n = ((View)localObject).getBottom() + bottomMargin;
      int i1 = mDividerHeight + n;
      localObject = mDivider;
      if (localObject != null)
      {
        ((Drawable)localObject).setBounds(j, n, k, i1);
        mDivider.draw(paramCanvas);
      }
      localObject = mPaint;
      if (localObject != null) {
        paramCanvas.drawRect(j, n, k, i1, (Paint)localObject);
      }
      i += 1;
    }
  }
  
  private void drawVertical(Canvas paramCanvas, RecyclerView paramRecyclerView)
  {
    int j = paramRecyclerView.getPaddingTop();
    int k = paramRecyclerView.getMeasuredHeight() - paramRecyclerView.getPaddingBottom();
    int m = paramRecyclerView.getChildCount();
    int i = 0;
    while (i < m)
    {
      Object localObject = paramRecyclerView.getChildAt(i);
      RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)((View)localObject).getLayoutParams();
      int n = ((View)localObject).getRight() + rightMargin;
      int i1 = mDividerHeight + n;
      localObject = mDivider;
      if (localObject != null)
      {
        ((Drawable)localObject).setBounds(n, j, i1, k);
        mDivider.draw(paramCanvas);
      }
      localObject = mPaint;
      if (localObject != null) {
        paramCanvas.drawRect(n, j, i1, k, (Paint)localObject);
      }
      i += 1;
    }
  }
  
  public void getItemOffsets(Rect paramRect, View paramView, RecyclerView paramRecyclerView, RecyclerView.State paramState)
  {
    super.getItemOffsets(paramRect, paramView, paramRecyclerView, paramState);
    paramRect.set(0, 0, 0, mDividerHeight);
  }
  
  public void onDraw(Canvas paramCanvas, RecyclerView paramRecyclerView, RecyclerView.State paramState)
  {
    super.onDraw(paramCanvas, paramRecyclerView, paramState);
    if (mOrientation == 1)
    {
      drawVertical(paramCanvas, paramRecyclerView);
      return;
    }
    drawHorizontal(paramCanvas, paramRecyclerView);
  }
}
