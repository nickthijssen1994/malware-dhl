package com.jd.lib.unification.album.filter.video;

import android.content.Context;
import android.graphics.SurfaceTexture;
import android.graphics.SurfaceTexture.OnFrameAvailableListener;
import android.opengl.GLES20;
import android.view.Surface;
import com.jd.lib.unification.album.filter.FilterTools;
import com.jd.lib.unification.album.filter.FilterTools.FilterType;
import com.jd.lib.unification.album.filter.filter.CommonFilter;
import com.jd.lib.unification.album.filter.filter.CommonFilterGroup;
import com.jd.lib.unification.album.filter.filter.Rotation;
import com.jd.lib.unification.album.filter.filter.TextureRotationUtil;
import com.jingdong.common.UnLog;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;

class OutputSurfaceWithFilter
  implements SurfaceTexture.OnFrameAvailableListener
{
  private static final int EGL_OPENGL_ES2_BIT = 4;
  private static final String PAGE_KEY = "OutputSurface";
  int genTextureID = -1;
  private CommonFilterGroup gpuImageFilter;
  private EGL10 mEGL;
  private EGLContext mEGLContext;
  private EGLDisplay mEGLDisplay;
  private EGLSurface mEGLSurface;
  private boolean mFrameAvailable;
  private Object mFrameSyncObject = new Object();
  private final FloatBuffer mGLCubeBuffer = ByteBuffer.allocateDirect(TextureRotationUtil.CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
  private final FloatBuffer mGLTextureBuffer;
  float[] mSTMatrix = new float[16];
  private Surface mSurface;
  private SurfaceTexture mSurfaceTexture;
  
  public OutputSurfaceWithFilter(Context paramContext, FilterTools.FilterType paramFilterType, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    mGLCubeBuffer.put(TextureRotationUtil.CUBE).position(0);
    float[] arrayOfFloat = TextureRotationUtil.getRotation(Rotation.fromInt(paramInt4), false, false);
    mGLTextureBuffer = ByteBuffer.allocateDirect(arrayOfFloat.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLTextureBuffer.put(arrayOfFloat).position(0);
    setup(paramContext, paramFilterType, paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  private void checkEglError(String paramString)
  {
    for (int i = 0;; i = 1)
    {
      int j = mEGL.eglGetError();
      if (j == 12288) {
        break;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString);
      localStringBuilder.append(": EGL error: 0x");
      localStringBuilder.append(Integer.toHexString(j));
      UnLog.e("OutputSurface", localStringBuilder.toString());
    }
    if (i == 0) {
      return;
    }
    throw new RuntimeException("EGL error encountered (see log)");
  }
  
  private void setup(Context paramContext, FilterTools.FilterType paramFilterType, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    gpuImageFilter = new CommonFilterGroup();
    gpuImageFilter.addFilter(new CommonExtTexFilter());
    paramContext = FilterTools.createFilterForType(paramFilterType, paramInt1);
    if (UnLog.D)
    {
      paramFilterType = new StringBuilder();
      paramFilterType.append("setup filter:");
      paramFilterType.append(paramContext);
      UnLog.d("OutputSurfaceWithFilter", paramFilterType.toString());
      paramFilterType = new StringBuilder();
      paramFilterType.append("setup filterProgress:");
      paramFilterType.append(paramInt1);
      UnLog.d("OutputSurfaceWithFilter", paramFilterType.toString());
    }
    gpuImageFilter.addFilter(paramContext);
    GLES20.glClearColor(0.0F, 0.0F, 0.0F, 1.0F);
    GLES20.glDisable(2929);
    gpuImageFilter.init();
    GLES20.glUseProgram(gpuImageFilter.getProgram());
    gpuImageFilter.onOutputSizeChanged(paramInt2, paramInt3);
    paramContext = new int[1];
    GLES20.glGenTextures(1, paramContext, 0);
    GLES20.glBindTexture(36197, paramContext[0]);
    GLES20.glTexParameterf(36197, 10241, 9728.0F);
    GLES20.glTexParameterf(36197, 10240, 9729.0F);
    GLES20.glTexParameteri(36197, 10242, 33071);
    GLES20.glTexParameteri(36197, 10243, 33071);
    mSurfaceTexture = new SurfaceTexture(paramContext[0]);
    if (UnLog.D)
    {
      paramFilterType = new StringBuilder();
      paramFilterType.append("textureID=");
      paramFilterType.append(paramContext[0]);
      UnLog.d("OutputSurface", paramFilterType.toString());
    }
    mSurfaceTexture = new SurfaceTexture(paramContext[0]);
    mSurfaceTexture.setOnFrameAvailableListener(this);
    mSurface = new Surface(mSurfaceTexture);
  }
  
  public void awaitNewImage()
  {
    Object localObject1 = mFrameSyncObject;
    try
    {
      for (;;)
      {
        boolean bool = mFrameAvailable;
        if (!bool)
        {
          Object localObject2 = mFrameSyncObject;
          try
          {
            localObject2.wait(600L);
            if (!mFrameAvailable)
            {
              localObject2 = new RuntimeException("Surface frame wait timed out");
              throw ((Throwable)localObject2);
            }
          }
          catch (InterruptedException localInterruptedException)
          {
            throw new RuntimeException(localInterruptedException);
          }
        }
      }
      mFrameAvailable = false;
      mSurfaceTexture.updateTexImage();
      mSurfaceTexture.getTransformMatrix(mSTMatrix);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void checkGlError(String paramString)
  {
    int i = GLES20.glGetError();
    if (i == 0) {
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString);
    localStringBuilder.append(": glError ");
    localStringBuilder.append(i);
    UnLog.e("OutputSurface", localStringBuilder.toString());
    localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString);
    localStringBuilder.append(": glError ");
    localStringBuilder.append(i);
    throw new RuntimeException(localStringBuilder.toString());
  }
  
  public void drawImage()
  {
    GLES20.glClear(16640);
    gpuImageFilter.onDraw(genTextureID, mGLCubeBuffer, mGLTextureBuffer);
  }
  
  public Surface getSurface()
  {
    return mSurface;
  }
  
  public void makeCurrent()
  {
    if (mEGL != null)
    {
      checkEglError("before makeCurrent");
      EGL10 localEGL10 = mEGL;
      EGLDisplay localEGLDisplay = mEGLDisplay;
      EGLSurface localEGLSurface = mEGLSurface;
      if (localEGL10.eglMakeCurrent(localEGLDisplay, localEGLSurface, localEGLSurface, mEGLContext)) {
        return;
      }
      throw new RuntimeException("eglMakeCurrent failed");
    }
    throw new RuntimeException("not configured for makeCurrent");
  }
  
  public void onFrameAvailable(SurfaceTexture paramSurfaceTexture)
  {
    if (UnLog.D) {
      UnLog.d("OutputSurface", "new frame available");
    }
    paramSurfaceTexture = mFrameSyncObject;
    try
    {
      if (!mFrameAvailable)
      {
        mFrameAvailable = true;
        mFrameSyncObject.notifyAll();
        return;
      }
      throw new RuntimeException("mFrameAvailable already set, frame could be dropped");
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void release()
  {
    EGL10 localEGL10 = mEGL;
    if (localEGL10 != null)
    {
      if (localEGL10.eglGetCurrentContext().equals(mEGLContext)) {
        mEGL.eglMakeCurrent(mEGLDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);
      }
      mEGL.eglDestroySurface(mEGLDisplay, mEGLSurface);
      mEGL.eglDestroyContext(mEGLDisplay, mEGLContext);
    }
    mSurface.release();
    gpuImageFilter.destroy();
    mEGLDisplay = null;
    mEGLContext = null;
    mEGLSurface = null;
    mEGL = null;
    mSurface = null;
    mSurfaceTexture = null;
  }
}
