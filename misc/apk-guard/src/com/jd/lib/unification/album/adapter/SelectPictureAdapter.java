package com.jd.lib.unification.album.adapter;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.utils.PictureMimeType;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jingdong.common.widget.image.UnNetImageView;
import java.util.ArrayList;

public class SelectPictureAdapter
  extends BaseAdapter
{
  private DeletePictureCallBack callBack;
  private final Context mContext;
  private ArrayList<LocalMedia> mSelectedMedias = new ArrayList();
  
  public SelectPictureAdapter(Context paramContext, ArrayList paramArrayList)
  {
    mContext = paramContext;
    mSelectedMedias = paramArrayList;
  }
  
  public int getCount()
  {
    ArrayList localArrayList = mSelectedMedias;
    if (localArrayList == null) {
      return 0;
    }
    return localArrayList.size();
  }
  
  public Object getItem(int paramInt)
  {
    ArrayList localArrayList = mSelectedMedias;
    if (localArrayList == null) {
      return null;
    }
    return (LocalMedia)localArrayList.get(paramInt);
  }
  
  public long getItemId(int paramInt)
  {
    return paramInt;
  }
  
  public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    if (paramView == null)
    {
      paramViewGroup = new ViewHolder();
      paramView = LayoutInflater.from(mContext).inflate(R.layout.lib_ec_item_select_picture, null);
      selectPicture = ((UnNetImageView)paramView.findViewById(R.id.lib_ec_select_picture));
      deleteContainer = ((RelativeLayout)paramView.findViewById(R.id.lib_ec_delete_icon_container));
      videoIcon = ((ImageView)paramView.findViewById(R.id.lib_ec_select_picture_border));
      paramView.setTag(paramViewGroup);
    }
    else if ((paramView.getTag() instanceof ViewHolder))
    {
      paramViewGroup = (ViewHolder)paramView.getTag();
    }
    else
    {
      paramViewGroup = new ViewHolder();
    }
    final LocalMedia localLocalMedia = (LocalMedia)mSelectedMedias.get(paramInt);
    if (localLocalMedia != null)
    {
      String str = localLocalMedia.getPath();
      if (!UnStringUtils.isEmpty(str))
      {
        if (PictureMimeType.isVideo(localLocalMedia.getPictureType())) {
          videoIcon.setVisibility(0);
        } else {
          videoIcon.setVisibility(8);
        }
        UnNetImageView localUnNetImageView = selectPicture;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("file://");
        localStringBuilder.append(str);
        localUnNetImageView.setImage(localStringBuilder.toString());
        deleteContainer.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            if (callBack != null) {
              callBack.onDelete(localLocalMedia);
            }
          }
        });
      }
    }
    return paramView;
  }
  
  public void setCallBack(DeletePictureCallBack paramDeletePictureCallBack)
  {
    callBack = paramDeletePictureCallBack;
  }
  
  public void setSelectedMedias(ArrayList paramArrayList)
  {
    mSelectedMedias = paramArrayList;
    notifyDataSetChanged();
  }
  
  public static abstract interface DeletePictureCallBack
  {
    public abstract void onDelete(LocalMedia paramLocalMedia);
  }
  
  static class ViewHolder
  {
    RelativeLayout deleteContainer;
    UnNetImageView selectPicture;
    ImageView videoIcon;
    
    ViewHolder() {}
  }
}
