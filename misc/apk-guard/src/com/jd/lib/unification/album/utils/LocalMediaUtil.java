package com.jd.lib.unification.album.utils;

import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.provider.MediaStore.Images.Media;
import android.provider.MediaStore.Video.Media;
import android.text.TextUtils;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.entity.LocalMediaFolder;
import com.jd.unalbumwidget.R.string;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class LocalMediaUtil
{
  private static final String DURATION = "duration";
  private static final String[] IMAGE_PROJECTION = { "_id", "_data", "_display_name", "date_added", "mime_type", "_size", "datetaken" };
  public static final int LOAD_TYPE_IMAGE = 1;
  public static final int LOAD_TYPE_VIDEO = 2;
  private static final String[] VIDEO_PROJECTION = { "_id", "_data", "_display_name", "date_added", "mime_type", "duration", "datetaken" };
  private static ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue());
  
  public LocalMediaUtil() {}
  
  private static LocalMediaFolder getImageFolder(String paramString, List paramList)
  {
    File localFile = new File(paramString).getParentFile();
    Object localObject = paramList.iterator();
    while (((Iterator)localObject).hasNext())
    {
      LocalMediaFolder localLocalMediaFolder = (LocalMediaFolder)((Iterator)localObject).next();
      if (localLocalMediaFolder.getName().equals(localFile.getName())) {
        return localLocalMediaFolder;
      }
    }
    localObject = new LocalMediaFolder();
    ((LocalMediaFolder)localObject).setName(localFile.getName());
    ((LocalMediaFolder)localObject).setPath(localFile.getAbsolutePath());
    ((LocalMediaFolder)localObject).setFirstImagePath(paramString);
    paramList.add(localObject);
    return localObject;
  }
  
  public static void localMedia(int paramInt, final long paramLong1, long paramLong2, final boolean paramBoolean, final Context paramContext, final LocalMediaLoadListener paramLocalMediaLoadListener)
  {
    executor.execute(new Runnable()
    {
      public void run()
      {
        boolean bool;
        if (val$type == 2) {
          bool = true;
        } else {
          bool = false;
        }
        Object localObject = LocalMediaUtil.queryMedia(paramContext, bool ^ true);
        ArrayList localArrayList = new ArrayList();
        if (localObject != null) {
          localArrayList = LocalMediaUtil.parseData(paramContext, (Cursor)localObject, val$type, paramBoolean, paramLong1, paramLocalMediaLoadListener, bool);
        }
        if ((localObject != null) && (!((Cursor)localObject).isClosed())) {
          ((Cursor)localObject).close();
        }
        localObject = val$localMediaLoadListener;
        if (localObject != null) {
          ((LocalMediaUtil.LocalMediaLoadListener)localObject).loadComplete(localArrayList);
        }
      }
    });
  }
  
  public static ArrayList parseData(Context paramContext, Cursor paramCursor, int paramInt, boolean paramBoolean1, long paramLong1, long paramLong2, boolean paramBoolean2)
  {
    long l2 = paramLong1 * 1000L;
    ArrayList localArrayList1 = new ArrayList();
    LocalMediaFolder localLocalMediaFolder = new LocalMediaFolder();
    ArrayList localArrayList2 = new ArrayList();
    if (paramCursor != null)
    {
      if (paramCursor.getCount() > 0)
      {
        paramCursor.moveToFirst();
        for (;;)
        {
          Cursor localCursor = paramCursor;
          Object localObject1 = "";
          Object localObject2 = IMAGE_PROJECTION[1];
          try
          {
            localObject2 = localCursor.getString(localCursor.getColumnIndexOrThrow((String)localObject2));
            localObject1 = localObject2;
          }
          catch (Exception localException1)
          {
            for (;;) {}
          }
          if ((!TextUtils.isEmpty((CharSequence)localObject1)) && (new File((String)localObject1).exists()) && (!((String)localObject1).endsWith(".gif"))) {
            localObject2 = IMAGE_PROJECTION[4];
          }
          try
          {
            localObject2 = localCursor.getString(localCursor.getColumnIndexOrThrow((String)localObject2));
          }
          catch (Exception localException2)
          {
            boolean bool;
            String str;
            for (;;) {}
          }
          localObject2 = "image/jpeg";
          if (TextUtils.isEmpty((CharSequence)localObject2)) {
            bool = true;
          } else {
            bool = ((String)localObject2).startsWith("image");
          }
          if (paramBoolean2) {
            if (bool) {
              paramLong1 = 0L;
            } else {
              str = VIDEO_PROJECTION[5];
            }
          }
          try
          {
            int i = localCursor.getInt(localCursor.getColumnIndexOrThrow(str));
            paramLong1 = i;
          }
          catch (Exception localException4)
          {
            long l1;
            for (;;) {}
          }
          paramLong1 = 0L;
          l1 = paramLong1;
          if (!bool)
          {
            if (PictureMimeTypeUtil.filterVideo((String)localObject1)) {
              break label455;
            }
            if (paramBoolean1)
            {
              if (paramLong1 > 600000L) {
                break label455;
              }
              l1 = paramLong1;
              if (paramLong1 < l2) {
                break label455;
              }
            }
            else
            {
              if (paramLong1 > 1000L * paramLong2) {
                break label455;
              }
              l1 = paramLong1;
              if (paramLong1 < l2)
              {
                break label455;
                l1 = 0L;
              }
            }
          }
          if (bool) {
            str = IMAGE_PROJECTION[3];
          }
          try
          {
            paramLong1 = localCursor.getLong(localCursor.getColumnIndexOrThrow(str));
            break label370;
            str = VIDEO_PROJECTION[3];
            paramLong1 = localCursor.getLong(localCursor.getColumnIndexOrThrow(str));
          }
          catch (Exception localException3)
          {
            label370:
            for (;;) {}
          }
          paramLong1 = 0L;
          localObject2 = new LocalMedia((String)localObject1, l1, paramLong1, paramInt, (String)localObject2);
          ((LocalMedia)localObject2).setPicture(bool);
          localObject1 = getImageFolder((String)localObject1, localArrayList1);
          ((LocalMediaFolder)localObject1).getImages().add(localObject2);
          ((LocalMediaFolder)localObject1).setImageNum(((LocalMediaFolder)localObject1).getImageNum() + 1);
          localArrayList2.add(localObject2);
          localLocalMediaFolder.setImageNum(localLocalMediaFolder.getImageNum() + 1);
          label455:
          if (!paramCursor.moveToNext())
          {
            if (localArrayList2.size() <= 0) {
              break label550;
            }
            sortFolder(localArrayList1);
            localArrayList1.add(0, localLocalMediaFolder);
            localLocalMediaFolder.setFirstImagePath(((LocalMedia)localArrayList2.get(0)).getPath());
            localLocalMediaFolder.setName(paramContext.getString(R.string.uni_album_title));
            localLocalMediaFolder.setImages(localArrayList2);
            return localArrayList1;
          }
        }
      }
    }
    else {
      return localArrayList1;
    }
    label550:
    return localArrayList1;
  }
  
  public static Cursor queryMedia(Context paramContext, boolean paramBoolean)
  {
    if (paramBoolean) {}
    try
    {
      paramContext = paramContext.getContentResolver();
      localUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
      paramContext = paramContext.query(localUri, null, null, null, "datetaken DESC");
      return paramContext;
    }
    catch (Exception paramContext)
    {
      Uri localUri;
      paramContext.printStackTrace();
    }
    paramContext = paramContext.getContentResolver();
    localUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
    paramContext = paramContext.query(localUri, null, "duration> 0", null, "datetaken DESC");
    return paramContext;
    return null;
  }
  
  private static void sortFolder(List paramList)
  {
    Collections.sort(paramList, new Comparator()
    {
      public int compare(LocalMediaFolder paramAnonymousLocalMediaFolder1, LocalMediaFolder paramAnonymousLocalMediaFolder2)
      {
        if (paramAnonymousLocalMediaFolder1.getImages() != null)
        {
          if (paramAnonymousLocalMediaFolder2.getImages() == null) {
            return 0;
          }
          int i = paramAnonymousLocalMediaFolder1.getImageNum();
          int j = paramAnonymousLocalMediaFolder2.getImageNum();
          if (i == j) {
            return 0;
          }
          if (i < j) {
            return 1;
          }
          return -1;
        }
        return 0;
      }
    });
  }
  
  public static void sortMediaByDate(ArrayList paramArrayList)
  {
    Collections.sort(paramArrayList, new Comparator()
    {
      public int compare(LocalMedia paramAnonymousLocalMedia1, LocalMedia paramAnonymousLocalMedia2)
      {
        long l1 = paramAnonymousLocalMedia1.getDate();
        long l2 = paramAnonymousLocalMedia2.getDate();
        if (l1 == l2) {
          return 0;
        }
        if (l1 < l2) {
          return 1;
        }
        return -1;
      }
    });
  }
  
  public static abstract interface LocalMediaLoadListener
  {
    public abstract void loadComplete(ArrayList paramArrayList);
  }
}
