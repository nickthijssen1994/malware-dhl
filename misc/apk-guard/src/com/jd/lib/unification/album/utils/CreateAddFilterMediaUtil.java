package com.jd.lib.unification.album.utils;

import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.os.Environment;
import android.text.TextUtils;
import com.jd.lib.unification.album.filter.filter.CommonFilter;
import com.jd.lib.unification.album.filter.filter.CommonFilterRenderer;
import com.jd.lib.unification.album.filter.filter.FilterImage.ScaleType;
import com.jd.lib.unification.album.filter.filter.PixelBuffer;
import com.jd.lib.unification.album.filter.filter.Rotation;
import com.jingdong.common.UnLog;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class CreateAddFilterMediaUtil
{
  public CreateAddFilterMediaUtil() {}
  
  public static Bitmap getBitmapWithFilterApplied(Bitmap paramBitmap, CommonFilter paramCommonFilter)
  {
    if (paramBitmap == null) {
      return null;
    }
    CommonFilterRenderer localCommonFilterRenderer = new CommonFilterRenderer(paramCommonFilter);
    localCommonFilterRenderer.setRotation(Rotation.NORMAL, false, false);
    localCommonFilterRenderer.setScaleType(FilterImage.ScaleType.CENTER_INSIDE);
    PixelBuffer localPixelBuffer = new PixelBuffer(paramBitmap.getWidth(), paramBitmap.getHeight());
    localPixelBuffer.setRenderer(localCommonFilterRenderer);
    localCommonFilterRenderer.setImageBitmap(paramBitmap, false);
    paramBitmap = localPixelBuffer.getBitmap();
    paramCommonFilter.destroy();
    localCommonFilterRenderer.deleteImage();
    localPixelBuffer.destroy();
    return paramBitmap;
  }
  
  public static String saveBitmapToSD(Bitmap paramBitmap, String paramString, boolean paramBoolean)
  {
    if (paramBitmap != null)
    {
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(Environment.getExternalStorageDirectory().getAbsolutePath());
      ((StringBuilder)localObject1).append("/jd/pictures");
      Object localObject2 = new File(((StringBuilder)localObject1).toString());
      if (!((File)localObject2).exists()) {
        ((File)localObject2).mkdirs();
      }
      StringBuffer localStringBuffer = new StringBuffer();
      localStringBuffer.append(System.currentTimeMillis());
      if (paramBoolean) {
        localObject1 = "_crop";
      } else {
        localObject1 = "";
      }
      localStringBuffer.append((String)localObject1);
      if (TextUtils.equals(paramString, "YuanTu"))
      {
        paramString = "";
      }
      else
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("_filter-");
        ((StringBuilder)localObject1).append(paramString);
        paramString = ((StringBuilder)localObject1).toString();
      }
      localStringBuffer.append(paramString);
      localStringBuffer.append(".png");
      paramString = new StringBuilder();
      paramString.append("outputPath:");
      paramString.append(localStringBuffer.toString());
      UnLog.d("CreateAddFilterMediaUtil", paramString.toString());
      paramString = new File((File)localObject2, localStringBuffer.toString());
      try
      {
        localObject1 = new FileOutputStream(paramString);
        localObject2 = Bitmap.CompressFormat.PNG;
        paramBitmap.compress((Bitmap.CompressFormat)localObject2, 98, (OutputStream)localObject1);
        ((FileOutputStream)localObject1).flush();
        ((FileOutputStream)localObject1).close();
        paramBitmap = paramString.getAbsolutePath();
        return paramBitmap;
      }
      catch (IOException paramBitmap)
      {
        paramBitmap.printStackTrace();
      }
    }
    return null;
  }
}
