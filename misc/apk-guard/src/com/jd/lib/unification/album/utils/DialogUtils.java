package com.jd.lib.unification.album.utils;

import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.TextView;
import androidx.fragment.app.FragmentActivity;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.mInterface.IDialogListener;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jingdong.common.ui.JDDialog;

public class DialogUtils
{
  private JDDialog replaceVideoDialog = null;
  
  private DialogUtils() {}
  
  private void dismissDialogNoException(JDDialog paramJDDialog)
  {
    if (paramJDDialog != null)
    {
      if (!paramJDDialog.isShowing()) {
        return;
      }
      try
      {
        paramJDDialog.dismiss();
        return;
      }
      catch (IllegalArgumentException paramJDDialog)
      {
        paramJDDialog.printStackTrace();
      }
    }
  }
  
  public static DialogUtils getInstance()
  {
    return DialogUtilsHolder.DIALOG_UTILS;
  }
  
  public void showReplaceVideoDialog(FragmentActivity paramFragmentActivity, String paramString, final IDialogListener paramIDialogListener)
  {
    if (paramFragmentActivity != null)
    {
      if (paramIDialogListener == null) {
        return;
      }
      replaceVideoDialog = new JDDialog((Context)paramFragmentActivity);
      replaceVideoDialog.setContentView(R.layout.lib_ec_replace_video_dialog);
      paramFragmentActivity = (TextView)replaceVideoDialog.findViewById(R.id.lib_ec_replace_video_prompt);
      CheckBox localCheckBox = (CheckBox)replaceVideoDialog.findViewById(R.id.lib_ec_replace_video_checkbox);
      Button localButton1 = (Button)replaceVideoDialog.findViewById(R.id.lib_ec_replace_video_cancel);
      Button localButton2 = (Button)replaceVideoDialog.findViewById(R.id.lib_ec_replace_video_continue);
      replaceVideoDialog.setCanceledOnTouchOutside(true);
      if (!UnStringUtils.isEmpty(paramString)) {
        paramFragmentActivity.setText(paramString);
      }
      localCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener()
      {
        public void onCheckedChanged(CompoundButton paramAnonymousCompoundButton, boolean paramAnonymousBoolean)
        {
          paramAnonymousCompoundButton = paramIDialogListener;
          if (paramAnonymousCompoundButton != null) {
            paramAnonymousCompoundButton.onCheckClick(paramAnonymousBoolean);
          }
        }
      });
      localButton1.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          paramAnonymousView = DialogUtils.this;
          paramAnonymousView.dismissDialogNoException(replaceVideoDialog);
        }
      });
      localButton2.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          paramAnonymousView = DialogUtils.this;
          paramAnonymousView.dismissDialogNoException(replaceVideoDialog);
          paramAnonymousView = paramIDialogListener;
          if (paramAnonymousView != null) {
            paramAnonymousView.onRightClick();
          }
        }
      });
      replaceVideoDialog.show();
    }
  }
  
  private static class DialogUtilsHolder
  {
    private static final DialogUtils DIALOG_UTILS = new DialogUtils(null);
    
    private DialogUtilsHolder() {}
  }
}
