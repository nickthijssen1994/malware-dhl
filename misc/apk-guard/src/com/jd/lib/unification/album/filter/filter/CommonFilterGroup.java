package com.jd.lib.unification.album.filter.filter;

import android.opengl.GLES20;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public class CommonFilterGroup
  extends CommonFilter
{
  protected List<CommonFilter> mFilters;
  private int[] mFrameBufferTextures;
  private int[] mFrameBuffers;
  private final FloatBuffer mGLCubeBuffer;
  private final FloatBuffer mGLTextureBuffer;
  private final FloatBuffer mGLTextureFlipBuffer;
  protected List<CommonFilter> mMergedFilters;
  
  public CommonFilterGroup()
  {
    this(null);
  }
  
  public CommonFilterGroup(List paramList)
  {
    mFilters = paramList;
    if (mFilters == null) {
      mFilters = new ArrayList();
    } else {
      updateMergedFilters();
    }
    mGLCubeBuffer = ByteBuffer.allocateDirect(CommonFilterRenderer.CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLCubeBuffer.put(CommonFilterRenderer.CUBE).position(0);
    mGLTextureBuffer = ByteBuffer.allocateDirect(TextureRotationUtil.TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLTextureBuffer.put(TextureRotationUtil.TEXTURE_NO_ROTATION).position(0);
    paramList = TextureRotationUtil.getRotation(Rotation.NORMAL, false, true);
    mGLTextureFlipBuffer = ByteBuffer.allocateDirect(paramList.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLTextureFlipBuffer.put(paramList).position(0);
  }
  
  private void destroyFramebuffers()
  {
    int[] arrayOfInt = mFrameBufferTextures;
    if (arrayOfInt != null)
    {
      GLES20.glDeleteTextures(arrayOfInt.length, arrayOfInt, 0);
      mFrameBufferTextures = null;
    }
    arrayOfInt = mFrameBuffers;
    if (arrayOfInt != null)
    {
      GLES20.glDeleteFramebuffers(arrayOfInt.length, arrayOfInt, 0);
      mFrameBuffers = null;
    }
  }
  
  public void addFilter(CommonFilter paramCommonFilter)
  {
    if (paramCommonFilter == null) {
      return;
    }
    mFilters.add(paramCommonFilter);
    updateMergedFilters();
  }
  
  public List getFilters()
  {
    return mFilters;
  }
  
  public List getMergedFilters()
  {
    return mMergedFilters;
  }
  
  public void onDestroy()
  {
    destroyFramebuffers();
    Iterator localIterator = mFilters.iterator();
    while (localIterator.hasNext()) {
      ((CommonFilter)localIterator.next()).destroy();
    }
    super.onDestroy();
  }
  
  public void onDraw(int paramInt, FloatBuffer paramFloatBuffer1, FloatBuffer paramFloatBuffer2)
  {
    runPendingOnDrawTasks();
    if ((isInitialized()) && (mFrameBuffers != null))
    {
      if (mFrameBufferTextures == null) {
        return;
      }
      Object localObject = mMergedFilters;
      if (localObject != null)
      {
        int k = ((List)localObject).size();
        int j = 0;
        int i = paramInt;
        paramInt = j;
        while (paramInt < k)
        {
          CommonFilter localCommonFilter = (CommonFilter)mMergedFilters.get(paramInt);
          int m = k - 1;
          if (paramInt < m) {
            j = 1;
          } else {
            j = 0;
          }
          if (j != 0)
          {
            GLES20.glBindFramebuffer(36160, mFrameBuffers[paramInt]);
            GLES20.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
          }
          if (paramInt == 0)
          {
            localCommonFilter.onDraw(i, paramFloatBuffer1, paramFloatBuffer2);
          }
          else if (paramInt == m)
          {
            FloatBuffer localFloatBuffer = mGLCubeBuffer;
            if (k % 2 == 0) {
              localObject = mGLTextureFlipBuffer;
            } else {
              localObject = mGLTextureBuffer;
            }
            localCommonFilter.onDraw(i, localFloatBuffer, (FloatBuffer)localObject);
          }
          else
          {
            localCommonFilter.onDraw(i, mGLCubeBuffer, mGLTextureBuffer);
          }
          if (j != 0)
          {
            GLES20.glBindFramebuffer(36160, 0);
            i = mFrameBufferTextures[paramInt];
          }
          paramInt += 1;
        }
      }
    }
  }
  
  public void onInit()
  {
    super.onInit();
    Iterator localIterator = mFilters.iterator();
    while (localIterator.hasNext()) {
      ((CommonFilter)localIterator.next()).init();
    }
  }
  
  public void onOutputSizeChanged(int paramInt1, int paramInt2)
  {
    super.onOutputSizeChanged(paramInt1, paramInt2);
    if (mFrameBuffers != null) {
      destroyFramebuffers();
    }
    int j = mFilters.size();
    int i = 0;
    while (i < j)
    {
      ((CommonFilter)mFilters.get(i)).onOutputSizeChanged(paramInt1, paramInt2);
      i += 1;
    }
    List localList = mMergedFilters;
    if ((localList != null) && (localList.size() > 0))
    {
      j = mMergedFilters.size() - 1;
      mFrameBuffers = new int[j];
      mFrameBufferTextures = new int[j];
      i = 0;
      while (i < j)
      {
        GLES20.glGenFramebuffers(1, mFrameBuffers, i);
        GLES20.glGenTextures(1, mFrameBufferTextures, i);
        GLES20.glBindTexture(3553, mFrameBufferTextures[i]);
        GLES20.glTexImage2D(3553, 0, 6408, paramInt1, paramInt2, 0, 6408, 5121, null);
        GLES20.glTexParameterf(3553, 10240, 9729.0F);
        GLES20.glTexParameterf(3553, 10241, 9729.0F);
        GLES20.glTexParameterf(3553, 10242, 33071.0F);
        GLES20.glTexParameterf(3553, 10243, 33071.0F);
        GLES20.glBindFramebuffer(36160, mFrameBuffers[i]);
        GLES20.glFramebufferTexture2D(36160, 36064, 3553, mFrameBufferTextures[i], 0);
        GLES20.glBindTexture(3553, 0);
        GLES20.glBindFramebuffer(36160, 0);
        i += 1;
      }
    }
  }
  
  public void updateMergedFilters()
  {
    if (mFilters == null) {
      return;
    }
    Object localObject1 = mMergedFilters;
    if (localObject1 == null) {
      mMergedFilters = new ArrayList();
    } else {
      ((List)localObject1).clear();
    }
    localObject1 = mFilters.iterator();
    while (((Iterator)localObject1).hasNext())
    {
      Object localObject2 = (CommonFilter)((Iterator)localObject1).next();
      if ((localObject2 instanceof CommonFilterGroup))
      {
        localObject2 = (CommonFilterGroup)localObject2;
        ((CommonFilterGroup)localObject2).updateMergedFilters();
        localObject2 = ((CommonFilterGroup)localObject2).getMergedFilters();
        if ((localObject2 != null) && (!((List)localObject2).isEmpty())) {
          mMergedFilters.addAll((Collection)localObject2);
        }
      }
      else
      {
        mMergedFilters.add(localObject2);
      }
    }
  }
}
