package com.jd.lib.unification.album.filter.filter;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.PointF;
import android.opengl.GLES20;
import com.jingdong.common.UnLog;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.LinkedList;
import java.util.Scanner;

public class CommonFilter
{
  public static final String NO_FILTER_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n \nuniform sampler2D inputImageTexture;\n \nvoid main()\n{\n     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}";
  public static final String NO_FILTER_VERTEX_SHADER = "attribute vec4 position;\nattribute vec4 inputTextureCoordinate;\n \nvarying vec2 textureCoordinate;\n \nvoid main()\n{\n    gl_Position = position;\n    textureCoordinate = inputTextureCoordinate.xy;\n}";
  private static final String PAGE_KEY = "CommonFilter";
  private final String mFragmentShader;
  protected int mGLAttribPosition;
  protected int mGLAttribTextureCoordinate;
  protected FloatBuffer mGLCubeBuffer;
  protected int mGLProgId;
  protected FloatBuffer mGLTextureBuffer;
  protected int mGLUniformTexture;
  private boolean mIsInitialized;
  protected int mOutputHeight;
  protected int mOutputWidth;
  private final LinkedList<Runnable> mRunOnDraw = new LinkedList();
  private final String mVertexShader;
  
  public CommonFilter()
  {
    this("attribute vec4 position;\nattribute vec4 inputTextureCoordinate;\n \nvarying vec2 textureCoordinate;\n \nvoid main()\n{\n    gl_Position = position;\n    textureCoordinate = inputTextureCoordinate.xy;\n}", "varying highp vec2 textureCoordinate;\n \nuniform sampler2D inputImageTexture;\n \nvoid main()\n{\n     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}");
  }
  
  public CommonFilter(String paramString1, String paramString2)
  {
    mVertexShader = paramString1;
    mFragmentShader = paramString2;
    mGLCubeBuffer = ByteBuffer.allocateDirect(TextureRotationUtil.CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLCubeBuffer.put(TextureRotationUtil.CUBE).position(0);
    mGLTextureBuffer = ByteBuffer.allocateDirect(TextureRotationUtil.TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLTextureBuffer.put(TextureRotationUtil.getRotation(Rotation.NORMAL, false, true)).position(0);
  }
  
  public static String convertStreamToString(InputStream paramInputStream)
  {
    paramInputStream = new Scanner(paramInputStream).useDelimiter("\\A");
    if (paramInputStream.hasNext()) {
      return paramInputStream.next();
    }
    return "";
  }
  
  public static String loadShader(String paramString, Context paramContext)
  {
    try
    {
      paramString = paramContext.getAssets().open(paramString);
      paramContext = convertStreamToString(paramString);
      paramString.close();
      return paramContext;
    }
    catch (Exception paramString)
    {
      UnLog.e("CommonFilter", paramString.toString());
    }
    return "";
  }
  
  public final void destroy()
  {
    mIsInitialized = false;
    GLES20.glDeleteProgram(mGLProgId);
    onDestroy();
  }
  
  public int getAttribPosition()
  {
    return mGLAttribPosition;
  }
  
  public int getAttribTextureCoordinate()
  {
    return mGLAttribTextureCoordinate;
  }
  
  public int getOutputHeight()
  {
    return mOutputHeight;
  }
  
  public int getOutputWidth()
  {
    return mOutputWidth;
  }
  
  public int getProgram()
  {
    return mGLProgId;
  }
  
  public int getUniformTexture()
  {
    return mGLUniformTexture;
  }
  
  public final void init()
  {
    onInit();
    mIsInitialized = true;
    onInitialized();
  }
  
  public boolean isInitialized()
  {
    return mIsInitialized;
  }
  
  public void onDestroy() {}
  
  public void onDraw(int paramInt, FloatBuffer paramFloatBuffer1, FloatBuffer paramFloatBuffer2)
  {
    GLES20.glUseProgram(mGLProgId);
    runPendingOnDrawTasks();
    if (!mIsInitialized) {
      return;
    }
    paramFloatBuffer1.position(0);
    GLES20.glVertexAttribPointer(mGLAttribPosition, 2, 5126, false, 0, paramFloatBuffer1);
    GLES20.glEnableVertexAttribArray(mGLAttribPosition);
    paramFloatBuffer2.position(0);
    GLES20.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, 5126, false, 0, paramFloatBuffer2);
    GLES20.glEnableVertexAttribArray(mGLAttribTextureCoordinate);
    if (paramInt != -1)
    {
      GLES20.glActiveTexture(33984);
      GLES20.glBindTexture(3553, paramInt);
      GLES20.glUniform1i(mGLUniformTexture, 0);
    }
    onDrawArraysPre();
    GLES20.glDrawArrays(5, 0, 4);
    GLES20.glDisableVertexAttribArray(mGLAttribPosition);
    GLES20.glDisableVertexAttribArray(mGLAttribTextureCoordinate);
    onDrawArraysAfter();
    GLES20.glBindTexture(3553, 0);
  }
  
  protected void onDrawArraysAfter() {}
  
  protected void onDrawArraysPre() {}
  
  public void onInit()
  {
    mGLProgId = OpenGlUtils.loadProgram(mVertexShader, mFragmentShader);
    mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, "position");
    mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, "inputImageTexture");
    mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId, "inputTextureCoordinate");
    mIsInitialized = true;
  }
  
  public void onInitialized() {}
  
  public void onOutputSizeChanged(int paramInt1, int paramInt2)
  {
    mOutputWidth = paramInt1;
    mOutputHeight = paramInt2;
  }
  
  protected void runOnDraw(Runnable paramRunnable)
  {
    LinkedList localLinkedList = mRunOnDraw;
    try
    {
      mRunOnDraw.addLast(paramRunnable);
      return;
    }
    catch (Throwable paramRunnable)
    {
      throw paramRunnable;
    }
  }
  
  protected void runPendingOnDrawTasks()
  {
    LinkedList localLinkedList = mRunOnDraw;
    try
    {
      while (!mRunOnDraw.isEmpty()) {
        ((Runnable)mRunOnDraw.removeFirst()).run();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  protected void setFloat(final int paramInt, final float paramFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniform1f(paramInt, paramFloat);
      }
    });
  }
  
  protected void setFloatArray(final int paramInt, final float[] paramArrayOfFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        int i = paramInt;
        float[] arrayOfFloat = paramArrayOfFloat;
        GLES20.glUniform1fv(i, arrayOfFloat.length, FloatBuffer.wrap(arrayOfFloat));
      }
    });
  }
  
  protected void setFloatVec2(final int paramInt, final float[] paramArrayOfFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniform2fv(paramInt, 1, FloatBuffer.wrap(paramArrayOfFloat));
      }
    });
  }
  
  protected void setFloatVec3(final int paramInt, final float[] paramArrayOfFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniform3fv(paramInt, 1, FloatBuffer.wrap(paramArrayOfFloat));
      }
    });
  }
  
  protected void setFloatVec4(final int paramInt, final float[] paramArrayOfFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniform4fv(paramInt, 1, FloatBuffer.wrap(paramArrayOfFloat));
      }
    });
  }
  
  protected void setInteger(final int paramInt1, final int paramInt2)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniform1i(paramInt1, paramInt2);
      }
    });
  }
  
  protected void setPoint(final int paramInt, final PointF paramPointF)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        float f1 = paramPointFx;
        float f2 = paramPointFy;
        GLES20.glUniform2fv(paramInt, 1, new float[] { f1, f2 }, 0);
      }
    });
  }
  
  protected void setUniformMatrix3f(final int paramInt, final float[] paramArrayOfFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniformMatrix3fv(paramInt, 1, false, paramArrayOfFloat, 0);
      }
    });
  }
  
  protected void setUniformMatrix4f(final int paramInt, final float[] paramArrayOfFloat)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glUniformMatrix4fv(paramInt, 1, false, paramArrayOfFloat, 0);
      }
    });
  }
}
