package com.jd.lib.unification.album.entity;

import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import java.util.List;

public class AlbumParam
  implements Parcelable
{
  public static final Parcelable.Creator<AlbumParam> CREATOR = new Parcelable.Creator()
  {
    public AlbumParam createFromParcel(Parcel paramAnonymousParcel)
    {
      return new AlbumParam(paramAnonymousParcel);
    }
    
    public AlbumParam[] newArray(int paramAnonymousInt)
    {
      return new AlbumParam[paramAnonymousInt];
    }
  };
  public int cameraOrVideoAction;
  public int cameraSupport;
  public int canSelectMediaCount;
  public String coverImagePath;
  public float cropCircleRadius;
  public float cropRectX;
  public float cropRectY;
  public int cropShape;
  public boolean isCoverImageBg;
  public int loadCameraOrVideo;
  public boolean needEditorPic;
  public List<LocalMedia> selectedMedia;
  public boolean showAnimatePic;
  public String source;
  public int videoEditorAction;
  public String videoMaxTime;
  public String videoMinTime;
  
  public AlbumParam()
  {
    cameraOrVideoAction = 0;
    loadCameraOrVideo = 0;
    canSelectMediaCount = 9;
    videoMinTime = "3";
    videoMaxTime = "10";
    cropShape = -1;
  }
  
  protected AlbumParam(Parcel paramParcel)
  {
    boolean bool2 = false;
    cameraOrVideoAction = 0;
    loadCameraOrVideo = 0;
    canSelectMediaCount = 9;
    videoMinTime = "3";
    videoMaxTime = "10";
    cropShape = -1;
    source = paramParcel.readString();
    cameraOrVideoAction = paramParcel.readInt();
    loadCameraOrVideo = paramParcel.readInt();
    canSelectMediaCount = paramParcel.readInt();
    selectedMedia = paramParcel.createTypedArrayList(LocalMedia.CREATOR);
    videoEditorAction = paramParcel.readInt();
    videoMinTime = paramParcel.readString();
    videoMaxTime = paramParcel.readString();
    if (paramParcel.readByte() != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    needEditorPic = bool1;
    if (paramParcel.readByte() != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    showAnimatePic = bool1;
    cropShape = paramParcel.readInt();
    cropCircleRadius = paramParcel.readFloat();
    cropRectX = paramParcel.readFloat();
    cropRectY = paramParcel.readFloat();
    coverImagePath = paramParcel.readString();
    boolean bool1 = bool2;
    if (paramParcel.readByte() != 0) {
      bool1 = true;
    }
    isCoverImageBg = bool1;
    cameraSupport = paramParcel.readInt();
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    paramParcel.writeString(source);
    paramParcel.writeInt(cameraOrVideoAction);
    paramParcel.writeInt(loadCameraOrVideo);
    paramParcel.writeInt(canSelectMediaCount);
    paramParcel.writeTypedList(selectedMedia);
    paramParcel.writeInt(videoEditorAction);
    paramParcel.writeString(videoMinTime);
    paramParcel.writeString(videoMaxTime);
    paramParcel.writeByte((byte)needEditorPic);
    paramParcel.writeByte((byte)showAnimatePic);
    paramParcel.writeInt(cropShape);
    paramParcel.writeFloat(cropCircleRadius);
    paramParcel.writeFloat(cropRectX);
    paramParcel.writeFloat(cropRectY);
    paramParcel.writeString(coverImagePath);
    paramParcel.writeByte((byte)isCoverImageBg);
    paramParcel.writeInt(cameraSupport);
  }
}
