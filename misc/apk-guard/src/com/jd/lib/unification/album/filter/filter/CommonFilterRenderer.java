package com.jd.lib.unification.album.filter.filter;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.media.MediaPlayer;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView.Renderer;
import android.view.Surface;
import com.jingdong.common.UnLog;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.LinkedList;
import java.util.Queue;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

@TargetApi(11)
public class CommonFilterRenderer
  implements Camera.PreviewCallback, GLSurfaceView.Renderer
{
  static final float[] CUBE = { -1.0F, -1.0F, 1.0F, -1.0F, -1.0F, 1.0F, 1.0F, 1.0F };
  public static final int NO_IMAGE = -1;
  private static final String PAGE_KEY = "CommonFilterRenderer";
  private int mAddedPadding;
  private float mBackgroundBlue = 0.0F;
  private float mBackgroundGreen = 0.0F;
  private float mBackgroundRed = 0.0F;
  private CommonFilter mFilter;
  private boolean mFlipHorizontal;
  private boolean mFlipVertical;
  private final FloatBuffer mGLCubeBuffer;
  private IntBuffer mGLRgbBuffer;
  private final FloatBuffer mGLTextureBuffer;
  private int mGLTextureId = -1;
  private int mImageHeight = 360;
  private int mImageWidth = 480;
  private int mOutputHeight;
  private int mOutputWidth;
  private Rotation mRotation;
  private final Queue<Runnable> mRunOnDraw;
  private final Queue<Runnable> mRunOnDrawEnd;
  private FilterImage.ScaleType mScaleType = FilterImage.ScaleType.CENTER_INSIDE;
  public final Object mSurfaceChangedWaiter = new Object();
  private SurfaceTexture mSurfaceTexture = null;
  boolean transformSetted = false;
  private float[] videoTextureTransform = new float[16];
  
  public CommonFilterRenderer(CommonFilter paramCommonFilter)
  {
    mFilter = paramCommonFilter;
    mRunOnDraw = new LinkedList();
    mRunOnDrawEnd = new LinkedList();
    mGLCubeBuffer = ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLCubeBuffer.put(CUBE).position(0);
    mGLTextureBuffer = ByteBuffer.allocateDirect(TextureRotationUtil.TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLTextureBuffer.put(TextureRotationUtil.TEXTURE_NO_ROTATION).position(0);
    setRotation(Rotation.NORMAL, false, false);
  }
  
  public CommonFilterRenderer(CommonFilter paramCommonFilter, int paramInt)
  {
    mFilter = paramCommonFilter;
    mRunOnDraw = new LinkedList();
    mRunOnDrawEnd = new LinkedList();
    mGLCubeBuffer = ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLCubeBuffer.put(CUBE).position(0);
    paramCommonFilter = Rotation.fromInt(paramInt);
    float[] arrayOfFloat = TextureRotationUtil.getRotation(paramCommonFilter, false, false);
    mGLTextureBuffer = ByteBuffer.allocateDirect(arrayOfFloat.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
    mGLTextureBuffer.put(arrayOfFloat).position(0);
    setRotation(paramCommonFilter, false, false);
  }
  
  private float addDistance(float paramFloat1, float paramFloat2)
  {
    if (paramFloat1 == 0.0F) {
      return paramFloat2;
    }
    return 1.0F - paramFloat2;
  }
  
  private void adjustImageScaling()
  {
    float f2 = mOutputWidth;
    float f1 = mOutputHeight;
    if ((mRotation == Rotation.ROTATION_270) || (mRotation == Rotation.ROTATION_90))
    {
      f2 = mOutputHeight;
      f1 = mOutputWidth;
    }
    float f3 = Math.max(f2 / mImageWidth, f1 / mImageHeight);
    int i = Math.round(mImageWidth * f3);
    int j = Math.round(mImageHeight * f3);
    f2 = i / f2;
    f1 = j / f1;
    float[] arrayOfFloat1 = CUBE;
    Object localObject = TextureRotationUtil.getRotation(mRotation, mFlipHorizontal, mFlipVertical);
    float[] arrayOfFloat2;
    if (mScaleType == FilterImage.ScaleType.CENTER_CROP)
    {
      f2 = (1.0F - 1.0F / f2) / 2.0F;
      f1 = (1.0F - 1.0F / f1) / 2.0F;
      arrayOfFloat2 = new float[8];
      arrayOfFloat2[0] = addDistance(localObject[0], f2);
      arrayOfFloat2[1] = addDistance(localObject[1], f1);
      arrayOfFloat2[2] = addDistance(localObject[2], f2);
      arrayOfFloat2[3] = addDistance(localObject[3], f1);
      arrayOfFloat2[4] = addDistance(localObject[4], f2);
      arrayOfFloat2[5] = addDistance(localObject[5], f1);
      arrayOfFloat2[6] = addDistance(localObject[6], f2);
      arrayOfFloat2[7] = addDistance(localObject[7], f1);
      localObject = arrayOfFloat2;
    }
    else
    {
      arrayOfFloat1 = new float[8];
      arrayOfFloat2 = CUBE;
      arrayOfFloat2[0] /= f1;
      arrayOfFloat2[1] /= f2;
      arrayOfFloat2[2] /= f1;
      arrayOfFloat2[3] /= f2;
      arrayOfFloat2[4] /= f1;
      arrayOfFloat2[5] /= f2;
      arrayOfFloat2[6] /= f1;
      arrayOfFloat2[7] /= f2;
    }
    mGLCubeBuffer.clear();
    mGLCubeBuffer.put(arrayOfFloat1).position(0);
    mGLTextureBuffer.clear();
    mGLTextureBuffer.put((float[])localObject).position(0);
  }
  
  private void runAll(Queue paramQueue)
  {
    try
    {
      while (!paramQueue.isEmpty()) {
        ((Runnable)paramQueue.poll()).run();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void checkGlError(String paramString)
  {
    int i = GLES20.glGetError();
    if (i != 0)
    {
      if (UnLog.E)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(paramString);
        localStringBuilder.append(": glError ");
        localStringBuilder.append(i);
        UnLog.e("GPUImageRenderer", localStringBuilder.toString());
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString);
      localStringBuilder.append(": glError ");
      localStringBuilder.append(i);
      throw new RuntimeException(localStringBuilder.toString());
    }
  }
  
  public void deleteImage()
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        GLES20.glDeleteTextures(1, new int[] { mGLTextureId }, 0);
        CommonFilterRenderer.access$402(CommonFilterRenderer.this, -1);
      }
    });
  }
  
  protected int getFrameHeight()
  {
    return mOutputHeight;
  }
  
  protected int getFrameWidth()
  {
    return mOutputWidth;
  }
  
  public Rotation getRotation()
  {
    return mRotation;
  }
  
  public boolean isFlippedHorizontally()
  {
    return mFlipHorizontal;
  }
  
  public boolean isFlippedVertically()
  {
    return mFlipVertical;
  }
  
  public void onDrawFrame(GL10 paramGL10)
  {
    GLES20.glClear(16640);
    runAll(mRunOnDraw);
    paramGL10 = mSurfaceTexture;
    if (paramGL10 != null)
    {
      paramGL10.updateTexImage();
      mSurfaceTexture.getTransformMatrix(videoTextureTransform);
      paramGL10 = videoTextureTransform;
      if ((paramGL10[0] == 1.0F) && (paramGL10[5] == -1.0F))
      {
        setRotation(Rotation.NORMAL, false, false);
      }
      else
      {
        paramGL10 = videoTextureTransform;
        if ((paramGL10[1] == 1.0F) && (paramGL10[4] == 1.0F))
        {
          setRotation(Rotation.ROTATION_270, false, false);
        }
        else
        {
          paramGL10 = videoTextureTransform;
          if ((paramGL10[1] == -1.0F) && (paramGL10[4] == -1.0F))
          {
            setRotation(Rotation.ROTATION_90, false, false);
          }
          else
          {
            paramGL10 = videoTextureTransform;
            if ((paramGL10[0] == -1.0F) && (paramGL10[5] == 1.0F)) {
              setRotation(Rotation.ROTATION_180, false, false);
            }
          }
        }
      }
    }
    mFilter.onDraw(mGLTextureId, mGLCubeBuffer, mGLTextureBuffer);
    runAll(mRunOnDrawEnd);
  }
  
  public void onPreviewFrame(byte[] paramArrayOfByte, Camera paramCamera)
  {
    paramArrayOfByte = paramCamera.getParameters().getPreviewSize();
    if (mGLRgbBuffer == null) {
      mGLRgbBuffer = IntBuffer.allocate(width * height);
    }
  }
  
  public void onSurfaceChanged(GL10 paramGL10, int paramInt1, int paramInt2)
  {
    mOutputWidth = paramInt1;
    mOutputHeight = paramInt2;
    GLES20.glViewport(0, 0, paramInt1, paramInt2);
    GLES20.glUseProgram(mFilter.getProgram());
    mFilter.onOutputSizeChanged(paramInt1, paramInt2);
    adjustImageScaling();
    paramGL10 = mSurfaceChangedWaiter;
    try
    {
      mSurfaceChangedWaiter.notifyAll();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void onSurfaceCreated(GL10 paramGL10, EGLConfig paramEGLConfig)
  {
    GLES20.glClearColor(mBackgroundRed, mBackgroundGreen, mBackgroundBlue, 1.0F);
    GLES20.glDisable(2929);
    mFilter.init();
  }
  
  protected void runOnDraw(Runnable paramRunnable)
  {
    Queue localQueue = mRunOnDraw;
    try
    {
      mRunOnDraw.add(paramRunnable);
      return;
    }
    catch (Throwable paramRunnable)
    {
      throw paramRunnable;
    }
  }
  
  protected void runOnDrawEnd(Runnable paramRunnable)
  {
    Queue localQueue = mRunOnDrawEnd;
    try
    {
      mRunOnDrawEnd.add(paramRunnable);
      return;
    }
    catch (Throwable paramRunnable)
    {
      throw paramRunnable;
    }
  }
  
  public void setBackgroundColor(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    mBackgroundRed = paramFloat1;
    mBackgroundGreen = paramFloat2;
    mBackgroundBlue = paramFloat3;
  }
  
  public void setFilter(final CommonFilter paramCommonFilter)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        CommonFilter localCommonFilter = mFilter;
        CommonFilterRenderer.access$102(CommonFilterRenderer.this, paramCommonFilter);
        if (localCommonFilter != null) {
          localCommonFilter.destroy();
        }
        mFilter.init();
        GLES20.glUseProgram(mFilter.getProgram());
        mFilter.onOutputSizeChanged(mOutputWidth, mOutputHeight);
      }
    });
  }
  
  public void setImageBitmap(Bitmap paramBitmap)
  {
    setImageBitmap(paramBitmap, true);
  }
  
  public void setImageBitmap(final Bitmap paramBitmap, final boolean paramBoolean)
  {
    if (paramBitmap == null) {
      return;
    }
    runOnDraw(new Runnable()
    {
      public void run()
      {
        Object localObject2 = paramBitmap;
        Object localObject1 = this;
        if (((Bitmap)localObject2).getWidth() % 2 == 1)
        {
          int i = paramBitmap.getWidth();
          localObject3 = paramBitmap;
          localObject2 = localObject1;
          localObject3 = Bitmap.createBitmap(i + 1, ((Bitmap)localObject3).getHeight(), Bitmap.Config.ARGB_8888);
          localObject1 = localObject3;
          localObject3 = new Canvas((Bitmap)localObject3);
          ((Canvas)localObject3).drawARGB(0, 0, 0, 0);
          ((Canvas)localObject3).drawBitmap(paramBitmap, 0.0F, 0.0F, null);
          CommonFilterRenderer.access$502(this$0, 1);
        }
        else
        {
          CommonFilterRenderer.access$502(this$0, 0);
          localObject1 = null;
        }
        Object localObject3 = this;
        CommonFilterRenderer localCommonFilterRenderer = this$0;
        if (localObject1 != null) {
          localObject2 = localObject1;
        } else {
          localObject2 = paramBitmap;
        }
        CommonFilterRenderer.access$402(localCommonFilterRenderer, OpenGlUtils.loadTexture((Bitmap)localObject2, this$0.mGLTextureId, paramBoolean));
        if (localObject1 != null) {
          ((Bitmap)localObject1).recycle();
        }
        CommonFilterRenderer.access$602(this$0, paramBitmap.getWidth());
        CommonFilterRenderer.access$702(this$0, paramBitmap.getHeight());
        this$0.adjustImageScaling();
      }
    });
  }
  
  public void setRotation(Rotation paramRotation)
  {
    mRotation = paramRotation;
    adjustImageScaling();
  }
  
  public void setRotation(Rotation paramRotation, boolean paramBoolean1, boolean paramBoolean2)
  {
    mFlipHorizontal = paramBoolean1;
    mFlipVertical = paramBoolean2;
    setRotation(paramRotation);
  }
  
  public void setRotationCamera(Rotation paramRotation, boolean paramBoolean1, boolean paramBoolean2)
  {
    setRotation(paramRotation, paramBoolean2, paramBoolean1);
  }
  
  public void setScaleType(FilterImage.ScaleType paramScaleType)
  {
    mScaleType = paramScaleType;
  }
  
  public void setSourceSize(int paramInt1, int paramInt2)
  {
    mImageWidth = paramInt1;
    mImageHeight = paramInt2;
  }
  
  public void setUpSurfaceTexture(final Camera paramCamera)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        Object localObject = new int[1];
        GLES20.glGenTextures(1, (int[])localObject, 0);
        CommonFilterRenderer.access$002(CommonFilterRenderer.this, new SurfaceTexture(localObject[0]));
        localObject = paramCamera;
        CommonFilterRenderer localCommonFilterRenderer = CommonFilterRenderer.this;
        try
        {
          ((Camera)localObject).setPreviewTexture(mSurfaceTexture);
          localObject = paramCamera;
          localCommonFilterRenderer = CommonFilterRenderer.this;
          ((Camera)localObject).setPreviewCallback(localCommonFilterRenderer);
          localObject = paramCamera;
          ((Camera)localObject).startPreview();
          return;
        }
        catch (IOException localIOException)
        {
          UnLog.e("CommonFilterRenderer", localIOException.toString());
        }
      }
    });
  }
  
  public void setUpSurfaceTexture(final MediaPlayer paramMediaPlayer)
  {
    runOnDraw(new Runnable()
    {
      public void run()
      {
        Object localObject = new int[1];
        GLES20.glGenTextures(1, (int[])localObject, 0);
        GLES20.glBindTexture(36197, localObject[0]);
        checkGlError("glBindTexture mTextureID");
        GLES20.glTexParameterf(36197, 10241, 9728.0F);
        GLES20.glTexParameterf(36197, 10240, 9729.0F);
        GLES20.glTexParameteri(36197, 10242, 33071);
        GLES20.glTexParameteri(36197, 10243, 33071);
        checkGlError("glTexParameter");
        CommonFilterRenderer.access$002(CommonFilterRenderer.this, new SurfaceTexture(localObject[0]));
        localObject = paramMediaPlayer;
        CommonFilterRenderer localCommonFilterRenderer = CommonFilterRenderer.this;
        try
        {
          ((MediaPlayer)localObject).setSurface(new Surface(mSurfaceTexture));
          return;
        }
        catch (Exception localException)
        {
          UnLog.e("CommonFilterRenderer", localException.toString());
        }
      }
    });
  }
}
