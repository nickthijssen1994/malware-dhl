package com.jd.lib.unification.album.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.SimpleItemAnimator;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.adapter.PictureAlbumAdapter;
import com.jd.lib.unification.album.adapter.PictureAlbumAdapter.ClickPictureCallBack;
import com.jd.lib.unification.album.adapter.PictureAlbumAdapter.OnItemClickListener;
import com.jd.lib.unification.album.adapter.SelectAlbumAdapter.OnItemClickListener;
import com.jd.lib.unification.album.entity.AlbumParam;
import com.jd.lib.unification.album.entity.ImageParam;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.entity.LocalMediaFolder;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.album.mInterface.IDialogListener;
import com.jd.lib.unification.album.utils.AlbumUtils;
import com.jd.lib.unification.album.utils.DialogUtils;
import com.jd.lib.unification.album.utils.FileUtil;
import com.jd.lib.unification.album.utils.GridSpacingItemDecoration;
import com.jd.lib.unification.album.utils.LocalMediaCache;
import com.jd.lib.unification.album.utils.LocalMediaUtil;
import com.jd.lib.unification.album.utils.LocalMediaUtil.LocalMediaLoadListener;
import com.jd.lib.unification.album.utils.PictureMimeType;
import com.jd.lib.unification.album.utils.permission.core.PermissionHelper;
import com.jd.lib.unification.album.view.DropDownViewPager;
import com.jd.lib.unification.album.view.FolderPopWindow;
import com.jd.lib.unification.album.view.FolderPopWindow.OnDismissCallBack;
import com.jd.lib.unification.image.editor.ImageEditorActivity;
import com.jd.lib.unification.video.recorder.VideoRecorderActivity;
import com.jd.unalbumwidget.R.drawable;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class PhotoAlbumActivity
  extends AlbumBaseActivity
  implements View.OnClickListener, PictureAlbumAdapter.ClickPictureCallBack, PictureAlbumAdapter.OnItemClickListener, SelectAlbumAdapter.OnItemClickListener, FolderPopWindow.OnDismissCallBack
{
  private AlbumParam albumParam;
  private TextView albumTitle;
  private RelativeLayout albumTitleLayout;
  private int cameraOrVideoAction = 0;
  public float cropCircleRadius;
  public float cropRectX;
  public float cropRectY;
  public int cropShape;
  private boolean isImageLoaded;
  private boolean isStartPreviewActivity = false;
  private boolean isVideoLoaded;
  private int loadCameraOrVideo = 0;
  private ImageView mBack;
  private Button mConfirm;
  private ArrayList<LocalMedia> mCurrentMediaList = new ArrayList();
  private final ArrayList<LocalMediaFolder> mMediaFolders = new ArrayList();
  private final ArrayList<LocalMedia> mMedias = new ArrayList();
  private ArrayList<LocalMedia> mSelectImages;
  private int needSelectCount = 2;
  private boolean picEditor = false;
  private PictureAlbumAdapter pictureAlbumAdapter;
  private FolderPopWindow popWindow;
  private TextView previewButton;
  private RelativeLayout rlBottom;
  private boolean showAnimatePic = false;
  private String source;
  private View titleBarView;
  private int videoEditorAction = 0;
  private String videoMaxDuration = "10";
  private String videoMinDuration = "3";
  
  public PhotoAlbumActivity() {}
  
  private void addVideo(String paramString)
  {
    String str = PictureMimeType.createVideoType(paramString);
    paramString = new LocalMedia(paramString, FileUtil.getVideoDuration(paramString), true, str);
    paramString.setPicture(false);
    mCurrentMediaList.add(0, paramString);
    mSelectImages.add(0, paramString);
    pictureAlbumAdapter.setData(mCurrentMediaList, mSelectImages);
    setBottomStatusBar(mSelectImages);
  }
  
  private void applyPermission()
  {
    String[] arrayOfString;
    if (Build.VERSION.SDK_INT >= 16)
    {
      arrayOfString = new String[2];
      arrayOfString[0] = "android.permission.READ_EXTERNAL_STORAGE";
      arrayOfString[1] = "android.permission.WRITE_EXTERNAL_STORAGE";
    }
    else
    {
      arrayOfString = new String[1];
      arrayOfString[0] = "android.permission.WRITE_EXTERNAL_STORAGE";
    }
    PermissionHelper.with((Activity)this).permissions(arrayOfString).requestCode(200).lisener(new Object[] { this }).request();
  }
  
  private void fillData()
  {
    if (mMedias.isEmpty()) {
      return;
    }
    setFirstFolder(mMedias);
    mCurrentMediaList = ((LocalMediaFolder)mMediaFolders.get(0)).getImages();
    PictureAlbumAdapter localPictureAlbumAdapter = pictureAlbumAdapter;
    if (localPictureAlbumAdapter != null)
    {
      localPictureAlbumAdapter.setData(mCurrentMediaList, mSelectImages);
      pictureAlbumAdapter.setOnItemClickListener(this);
    }
  }
  
  private void filterDuplicateAlbum(ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    int i = 1;
    while (i < paramArrayList1.size())
    {
      LocalMediaFolder localLocalMediaFolder1 = (LocalMediaFolder)paramArrayList1.get(i);
      int m = 0;
      int j = 0;
      int k;
      for (;;)
      {
        k = m;
        if (j >= paramArrayList2.size()) {
          break;
        }
        LocalMediaFolder localLocalMediaFolder2 = (LocalMediaFolder)paramArrayList2.get(j);
        if (localLocalMediaFolder1.getName().equals(localLocalMediaFolder2.getName()))
        {
          localLocalMediaFolder2.getImages().addAll(localLocalMediaFolder1.getImages());
          localLocalMediaFolder2.setImageNum(localLocalMediaFolder2.getImages().size());
          k = 1;
          break;
        }
        j += 1;
      }
      if (k == 0) {
        paramArrayList2.add(localLocalMediaFolder1);
      }
      i += 1;
    }
  }
  
  private void goPreviewActivity()
  {
    if (AlbumUtils.isFastDoubleClick()) {
      return;
    }
    Intent localIntent = new Intent((Context)this, PicturePreviewActivity.class);
    LocalMediaCache.getInstance().putList(mSelectImages);
    localIntent.putExtra("source", source);
    localIntent.putParcelableArrayListExtra("selcteMedias", mSelectImages);
    localIntent.putExtra("position", 0);
    int i = loadCameraOrVideo;
    if ((i == 0) || (i == 2))
    {
      localIntent.putExtra("loadVideo", true);
      localIntent.putExtra("videoMinDuration", videoMinDuration);
      localIntent.putExtra("videoMaxDuration", videoMaxDuration);
      localIntent.putExtra("videoEditoAction", videoEditorAction);
    }
    localIntent.putExtra("needEditorPic", picEditor);
    localIntent.putExtra("picBeautifyAnimateSwitch", showAnimatePic);
    localIntent.putExtra("canSelectedMediaCount", needSelectCount);
    startActivityForResult(localIntent, 1003);
  }
  
  private void initViews()
  {
    titleBarView = findViewById(R.id.lib_ec_photo_album_title_bar);
    mBack = ((ImageView)findViewById(R.id.lib_ec_photo_album_left));
    albumTitle = ((TextView)findViewById(R.id.lib_ec_photo_album_title));
    Object localObject1 = (RecyclerView)findViewById(R.id.lib_ec_photo_album_recyclerView);
    ((RecyclerView)localObject1).setHasFixedSize(true);
    ((RecyclerView)localObject1).addItemDecoration(new GridSpacingItemDecoration(4, DpiUtil.dip2px((Context)this, 4.0F), false));
    ((RecyclerView)localObject1).setLayoutManager(new GridLayoutManager((Context)this, 4));
    if ((((RecyclerView)localObject1).getItemAnimator() instanceof SimpleItemAnimator)) {
      ((SimpleItemAnimator)((RecyclerView)localObject1).getItemAnimator()).setSupportsChangeAnimations(false);
    }
    rlBottom = ((RelativeLayout)findViewById(R.id.lib_ec_photo_album_bottom));
    previewButton = ((TextView)findViewById(R.id.lib_ec_album_preview));
    mConfirm = ((Button)findViewById(R.id.lib_ec_photo_album_confirm));
    int i;
    if (loadCameraOrVideo == 1)
    {
      localObject2 = rlBottom;
      if (needSelectCount == 1) {
        i = 8;
      } else {
        i = 0;
      }
      ((View)localObject2).setVisibility(i);
    }
    Object localObject2 = mMediaFolders;
    popWindow = new FolderPopWindow((Context)this, (ArrayList)localObject2);
    popWindow.setOnItemClickListener(this);
    popWindow.setOnDismissCallBack(this);
    if (pictureAlbumAdapter == null)
    {
      i = cameraOrVideoAction;
      localObject2 = source;
      String str1 = videoMinDuration;
      String str2 = videoMaxDuration;
      ArrayList localArrayList1 = mCurrentMediaList;
      ArrayList localArrayList2 = mSelectImages;
      int j = needSelectCount;
      pictureAlbumAdapter = new PictureAlbumAdapter((Context)this, i, (String)localObject2, str1, str2, localArrayList1, localArrayList2, j);
    }
    ((RecyclerView)localObject1).setAdapter(pictureAlbumAdapter);
    pictureAlbumAdapter.setCallBack(this);
    setBottomStatusBar(mSelectImages);
    localObject1 = (RelativeLayout.LayoutParams)titleBarView.getLayoutParams();
    if (UnStatusBarTintUtil.isEnable((Activity)this))
    {
      height = (UnStatusBarTintUtil.getStatusBarHeight((Activity)this) + DpiUtil.dip2px((Context)this, 49.0F));
      if (!UnStatusBarTintUtil.setStatusBarLightMode((Activity)this)) {
        UnStatusBarTintUtil.setDefaultBg((Activity)this, false);
      }
    }
    else
    {
      height = DpiUtil.dip2px((Context)this, 49.0F);
    }
    titleBarView.setLayoutParams((ViewGroup.LayoutParams)localObject1);
  }
  
  private void loadLocalMedia(final boolean paramBoolean)
  {
    Log.d("medial", "loadLocalMedia");
    LocalMediaUtil.LocalMediaLoadListener local1 = new LocalMediaUtil.LocalMediaLoadListener()
    {
      public void loadComplete(final ArrayList paramAnonymousArrayList)
      {
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (isImageLoaded) {
              return;
            }
            Object localObject = PhotoAlbumActivity.this;
            int i = 1;
            PhotoAlbumActivity.access$002((PhotoAlbumActivity)localObject, true);
            localObject = paramAnonymousArrayList;
            if ((localObject != null) && (((ArrayList)localObject).size() > 0))
            {
              localObject = ((LocalMediaFolder)paramAnonymousArrayList.get(0)).getImages();
              mMedias.addAll((Collection)localObject);
              while (i < paramAnonymousArrayList.size())
              {
                mMediaFolders.add(paramAnonymousArrayList.get(i));
                i += 1;
              }
            }
            if (val$allMedia)
            {
              PhotoAlbumActivity.this.loadLocalVideo();
              return;
            }
            PhotoAlbumActivity.this.fillData();
          }
        });
      }
    };
    LocalMediaUtil.localMedia(1, 0L, 0L, false, (Context)this, local1);
  }
  
  private void loadLocalVideo()
  {
    Log.d("medial", "loadLocalVideo");
    int i = videoEditorAction;
    boolean bool;
    if ((i != 1) && (i != 2)) {
      bool = false;
    } else {
      bool = true;
    }
    long l1 = 3L;
    if (!UnStringUtils.isEmpty(videoMinDuration)) {
      l1 = Long.parseLong(videoMinDuration);
    }
    long l2;
    if (!UnStringUtils.isEmpty(videoMaxDuration)) {
      l2 = Long.parseLong(videoMaxDuration);
    } else {
      l2 = 10L;
    }
    LocalMediaUtil.LocalMediaLoadListener local2 = new LocalMediaUtil.LocalMediaLoadListener()
    {
      public void loadComplete(final ArrayList paramAnonymousArrayList)
      {
        runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (isVideoLoaded) {
              return;
            }
            PhotoAlbumActivity.access$502(PhotoAlbumActivity.this, true);
            ArrayList localArrayList = paramAnonymousArrayList;
            if (localArrayList == null) {
              return;
            }
            if (localArrayList.size() > 0)
            {
              localArrayList = ((LocalMediaFolder)paramAnonymousArrayList.get(0)).getImages();
              mMedias.addAll(localArrayList);
              PhotoAlbumActivity.this.filterDuplicateAlbum(paramAnonymousArrayList, mMediaFolders);
            }
            if (mMedias.size() == 0) {
              return;
            }
            LocalMediaUtil.sortMediaByDate(mMedias);
            PhotoAlbumActivity.this.fillData();
          }
        });
      }
    };
    LocalMediaUtil.localMedia(2, l1, l2, bool, (Context)this, local2);
  }
  
  private void loadMediaData()
  {
    int i = loadCameraOrVideo;
    if (i == 0)
    {
      loadLocalMedia(true);
      return;
    }
    if (i == 1)
    {
      loadLocalMedia(false);
      return;
    }
    loadLocalVideo();
  }
  
  private void onConfirm()
  {
    Intent localIntent = new Intent();
    localIntent.putParcelableArrayListExtra("selcteMedias", mSelectImages);
    LocalMediaCache.getInstance().clear();
    localIntent.putExtra("back_finish", true);
    setResult(-1, localIntent);
    finish();
  }
  
  private void openMediaCenter(String paramString)
  {
    Intent localIntent = new Intent((Context)this, VideoRecorderActivity.class);
    VideoParam localVideoParam = new VideoParam();
    int i = cameraOrVideoAction;
    if ((i != 1) && (i != 3))
    {
      recordFunctionControl = 2;
    }
    else
    {
      recordMaxTime = Integer.parseInt(videoMaxDuration);
      recordMinTime = Integer.parseInt(videoMinDuration);
      if (cameraOrVideoAction == 1) {
        recordFunctionControl = 0;
      } else {
        recordFunctionControl = 1;
      }
      i = videoEditorAction;
      if (i != 0)
      {
        editorFunctionControl = (i - 1);
        needEditor = true;
        cutMaxTime = (Long.parseLong(videoMaxDuration) * 1000L);
        cutMinTime = (Long.parseLong(videoMinDuration) * 1000L);
      }
      else
      {
        needEditor = false;
      }
    }
    needEditorPic = picEditor;
    if (paramString.equals("1")) {
      recordCurrentState = Integer.valueOf("1").intValue();
    } else if (paramString.equals("0")) {
      recordCurrentState = Integer.valueOf("0").intValue();
    }
    cropShape = cropShape;
    cropCircleRadius = cropCircleRadius;
    cropRectX = cropRectX;
    cropRectY = cropRectY;
    paramString = albumParam;
    if (paramString != null)
    {
      coverImagePath = coverImagePath;
      isCoverImageBg = albumParam.isCoverImageBg;
      cameraSupport = albumParam.cameraSupport;
    }
    localIntent.putExtra("videoParam", localVideoParam);
    startActivityForResult(localIntent, 1001);
  }
  
  private void registerListener()
  {
    mBack.setOnClickListener(this);
    albumTitle.setOnClickListener(this);
    previewButton.setOnClickListener(this);
    mConfirm.setOnClickListener(this);
  }
  
  private void returnPathAndFinish(Intent paramIntent)
  {
    int i = paramIntent.getIntExtra("videoRecordReturnState", 0);
    int j = needSelectCount;
    boolean bool2 = true;
    if (j == 1)
    {
      Object localObject = mSelectImages;
      if (localObject != null)
      {
        ((ArrayList)localObject).clear();
        localObject = "";
        boolean bool1;
        if (i == 100)
        {
          localObject = paramIntent.getStringExtra("videoPath");
          bool1 = false;
        }
        else
        {
          bool1 = bool2;
          if (i == 101)
          {
            localObject = paramIntent.getStringExtra("photoPath");
            bool1 = bool2;
          }
        }
        mSelectImages.add(new LocalMedia((String)localObject, false, bool1));
        onConfirm();
      }
    }
  }
  
  private void setBottomStatusBar(ArrayList paramArrayList)
  {
    if (paramArrayList != null)
    {
      if (paramArrayList.size() == 0)
      {
        previewButton.setEnabled(false);
        mConfirm.setEnabled(false);
        mConfirm.setText(getString(R.string.uni_album_complete));
        return;
      }
      previewButton.setEnabled(true);
      mConfirm.setEnabled(true);
      Button localButton = mConfirm;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(getString(R.string.uni_album_complete));
      localStringBuilder.append(" ");
      localStringBuilder.append(paramArrayList.size());
      localStringBuilder.append(getString(R.string.uni_album_slash));
      localStringBuilder.append(needSelectCount);
      localButton.setText(localStringBuilder.toString());
    }
  }
  
  private void setFirstFolder(ArrayList paramArrayList)
  {
    LocalMediaFolder localLocalMediaFolder = new LocalMediaFolder();
    localLocalMediaFolder.setFirstImagePath(((LocalMedia)paramArrayList.get(0)).getPath());
    String str = getString(R.string.uni_album_title);
    localLocalMediaFolder.setImageNum(paramArrayList.size());
    localLocalMediaFolder.setName(str);
    localLocalMediaFolder.setImages(paramArrayList);
    mMediaFolders.add(0, localLocalMediaFolder);
  }
  
  private void showMedia(final Intent paramIntent)
  {
    int i = paramIntent.getIntExtra("videoRecordReturnState", 0);
    ArrayList localArrayList;
    if (i == 100)
    {
      paramIntent = paramIntent.getStringExtra("videoPath");
      if (!UnStringUtils.isEmpty(paramIntent))
      {
        if (!new File(paramIntent).exists()) {
          return;
        }
        localArrayList = mSelectImages;
        if ((localArrayList != null) && (localArrayList.size() > 0))
        {
          if (PictureMimeType.isVideo(((LocalMedia)mSelectImages.get(0)).getPictureType()))
          {
            if (!AlbumUtils.getVideoReplaceReminders((Context)this))
            {
              DialogUtils.getInstance().showReplaceVideoDialog(this, getString(R.string.uni_album_replace_video_prompt_toast), new IDialogListener()
              {
                public void onCheckClick(boolean paramAnonymousBoolean)
                {
                  AlbumUtils.setVideoReplaceReminders((Context)PhotoAlbumActivity.this, paramAnonymousBoolean);
                }
                
                public void onLeftClick() {}
                
                public void onRightClick()
                {
                  mSelectImages.remove(0);
                  PhotoAlbumActivity.this.addVideo(paramIntent);
                }
              });
              return;
            }
            mSelectImages.remove(0);
            addVideo(paramIntent);
            return;
          }
          addVideo(paramIntent);
          return;
        }
        addVideo(paramIntent);
      }
    }
    else if (i == 101)
    {
      paramIntent = paramIntent.getStringExtra("photoPath");
      if ((!UnStringUtils.isEmpty(paramIntent)) && (new File(paramIntent).exists()))
      {
        localArrayList = mSelectImages;
        if ((localArrayList != null) && (localArrayList.size() == needSelectCount))
        {
          paramIntent = getString(R.string.uni_album_select_max_toast, new Object[] { Integer.valueOf(needSelectCount) });
          Toast.makeText((Context)this, paramIntent, 0).show();
          return;
        }
        paramIntent = new LocalMedia(paramIntent, true, true);
        mCurrentMediaList.add(0, paramIntent);
        if (mSelectImages == null) {
          mSelectImages = new ArrayList();
        }
        mSelectImages.add(paramIntent);
        pictureAlbumAdapter.setData(mCurrentMediaList, mSelectImages);
        setBottomStatusBar(mSelectImages);
      }
    }
  }
  
  private void showPopUpWindow()
  {
    Object localObject = popWindow;
    if (localObject == null) {
      return;
    }
    if (((PopupWindow)localObject).isShowing())
    {
      popWindow.dismiss();
      mBack.setVisibility(0);
      return;
    }
    int i = R.drawable.lib_uni_album_photo_album_up_arrow;
    localObject = ContextCompat.getDrawable((Context)this, i);
    albumTitle.setCompoundDrawablesWithIntrinsicBounds(null, null, (Drawable)localObject, null);
    popWindow.showAsDropDown(titleBarView);
    mBack.setVisibility(8);
  }
  
  private void toImageEditorActivity(String paramString)
  {
    Intent localIntent = new Intent((Context)this, ImageEditorActivity.class);
    ImageParam localImageParam = new ImageParam();
    editorImagePath = paramString;
    int i = cropShape;
    int j = 1;
    if (((i == 0) || (i == 1)) && (picEditor))
    {
      i = 0;
    }
    else
    {
      int k = cropShape;
      i = j;
      if (k != 0) {
        if (k == 1) {
          i = j;
        } else if (picEditor) {
          i = 2;
        } else {
          i = -1;
        }
      }
    }
    editorFunction = i;
    cropShape = cropShape;
    cropCircleRadius = cropCircleRadius;
    cropRectX = cropRectX;
    cropRectY = cropRectY;
    localIntent.putExtra("imageParam", localImageParam);
    startActivityForResult(localIntent, 1005);
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    isStartPreviewActivity = false;
    if (paramInt2 != -1) {
      return;
    }
    ArrayList localArrayList;
    switch (paramInt1)
    {
    default: 
      
    case 1004: 
      
    case 1005: 
      if (paramIntent.getBooleanExtra("editorReturn", false))
      {
        paramIntent = new LocalMedia(paramIntent.getStringExtra("imageEditorReturnPath"), true, true);
        localArrayList = mSelectImages;
        if (localArrayList != null) {
          localArrayList.clear();
        } else {
          mSelectImages = new ArrayList();
        }
        mSelectImages.add(paramIntent);
        onConfirm();
        return;
      }
      break;
    case 1003: 
      if (paramIntent != null)
      {
        mSelectImages = paramIntent.getParcelableArrayListExtra("selcteMedias");
        localArrayList = paramIntent.getParcelableArrayListExtra("editPics");
        if ((localArrayList != null) && (localArrayList.size() > 0))
        {
          paramInt1 = 0;
          while (paramInt1 < localArrayList.size())
          {
            if (mCurrentMediaList == null) {
              mCurrentMediaList = new ArrayList();
            }
            mCurrentMediaList.add(0, localArrayList.get(paramInt1));
            paramInt1 += 1;
          }
        }
        localArrayList = paramIntent.getParcelableArrayListExtra("editVideos");
        if ((localArrayList != null) && (localArrayList.size() > 0))
        {
          paramInt1 = 0;
          while (paramInt1 < localArrayList.size())
          {
            if (mCurrentMediaList == null) {
              mCurrentMediaList = new ArrayList();
            }
            mCurrentMediaList.add(0, localArrayList.get(paramInt1));
            paramInt1 += 1;
          }
        }
        if (paramIntent.getBooleanExtra("back_finish", false))
        {
          onConfirm();
          return;
        }
        pictureAlbumAdapter.setData(mCurrentMediaList, mSelectImages);
        setBottomStatusBar(mSelectImages);
        return;
      }
      break;
    case 1002: 
      if (paramIntent != null)
      {
        mSelectImages = paramIntent.getParcelableArrayListExtra("selcteMedias");
        localArrayList = paramIntent.getParcelableArrayListExtra("editVideos");
        mCurrentMediaList = LocalMediaCache.getInstance().popList();
        if ((localArrayList != null) && (localArrayList.size() > 0))
        {
          paramInt1 = 0;
          while (paramInt1 < localArrayList.size())
          {
            if (mCurrentMediaList == null) {
              mCurrentMediaList = new ArrayList();
            }
            mCurrentMediaList.add(0, localArrayList.get(paramInt1));
            paramInt1 += 1;
          }
        }
        if (paramIntent.getBooleanExtra("back_finish", false))
        {
          onConfirm();
          return;
        }
        pictureAlbumAdapter.setData(mCurrentMediaList, mSelectImages);
        setBottomStatusBar(mSelectImages);
        return;
      }
      break;
    case 1001: 
      if (paramIntent != null)
      {
        if (needSelectCount == 1)
        {
          returnPathAndFinish(paramIntent);
          return;
        }
        showMedia(paramIntent);
      }
      break;
    }
  }
  
  public void onClick(View paramView)
  {
    int i = paramView.getId();
    if (i == R.id.lib_ec_photo_album_left)
    {
      LocalMediaCache.getInstance().clear();
      finish();
      return;
    }
    if (i == R.id.lib_ec_photo_album_title)
    {
      paramView = mMediaFolders;
      if (paramView != null)
      {
        if (paramView.size() == 0) {
          return;
        }
        showPopUpWindow();
      }
      return;
    }
    if (i == R.id.lib_ec_album_preview)
    {
      goPreviewActivity();
      return;
    }
    if (i == R.id.lib_ec_photo_album_confirm) {
      onConfirm();
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(R.layout.lib_uni_album_activity_photo_album);
    paramBundle = getIntent();
    if ((paramBundle != null) && ((paramBundle.getParcelableExtra("albumParam") instanceof AlbumParam)))
    {
      albumParam = ((AlbumParam)paramBundle.getParcelableExtra("albumParam"));
      paramBundle = albumParam;
      if (paramBundle != null)
      {
        source = source;
        cameraOrVideoAction = albumParam.cameraOrVideoAction;
        loadCameraOrVideo = albumParam.loadCameraOrVideo;
        int i = loadCameraOrVideo;
        if ((i == 0) || (i == 2))
        {
          videoMinDuration = albumParam.videoMinTime;
          videoMaxDuration = albumParam.videoMaxTime;
          videoEditorAction = albumParam.videoEditorAction;
          if (UnStringUtils.isEmpty(videoMinDuration)) {
            videoMinDuration = String.valueOf(3L);
          }
          if (UnStringUtils.isEmpty(videoMaxDuration)) {
            videoMaxDuration = String.valueOf(10L);
          }
        }
        if ((albumParam.selectedMedia != null) && (!albumParam.selectedMedia.isEmpty()))
        {
          mSelectImages = new ArrayList();
          mSelectImages.addAll(albumParam.selectedMedia);
        }
        picEditor = albumParam.needEditorPic;
        cropShape = albumParam.cropShape;
        cropCircleRadius = albumParam.cropCircleRadius;
        cropRectX = albumParam.cropRectX;
        cropRectY = albumParam.cropRectY;
        showAnimatePic = albumParam.showAnimatePic;
        needSelectCount = albumParam.canSelectMediaCount;
        if (needSelectCount <= 0) {
          needSelectCount = 9;
        }
      }
    }
    if (mSelectImages == null) {
      mSelectImages = new ArrayList();
    }
    initViews();
    registerListener();
    applyPermission();
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    FolderPopWindow localFolderPopWindow = popWindow;
    if ((localFolderPopWindow != null) && (localFolderPopWindow.isShowing())) {
      popWindow.dismiss();
    }
  }
  
  public void onDismissCallBack()
  {
    int i = R.drawable.lib_uni_album_photo_album_down_arrow;
    Drawable localDrawable = ContextCompat.getDrawable((Context)this, i);
    albumTitle.setCompoundDrawablesWithIntrinsicBounds(null, null, localDrawable, null);
    mBack.setVisibility(0);
  }
  
  public void onFail()
  {
    finish();
  }
  
  public void onFailOpenCamera()
  {
    finish();
  }
  
  public void onFailOpenVideo()
  {
    finish();
  }
  
  public void onItemClick(String paramString, ArrayList paramArrayList)
  {
    FolderPopWindow localFolderPopWindow = popWindow;
    if ((localFolderPopWindow != null) && (localFolderPopWindow.isShowing())) {
      popWindow.dismiss();
    }
    mCurrentMediaList = paramArrayList;
    albumTitle.setText(paramString);
    pictureAlbumAdapter.setData(mCurrentMediaList, mSelectImages);
  }
  
  public void onPictureItemClick(ArrayList paramArrayList1, ArrayList paramArrayList2, int paramInt, View paramView)
  {
    if (isStartPreviewActivity) {
      return;
    }
    if (AlbumUtils.isFastDoubleClick()) {
      return;
    }
    LocalMedia localLocalMedia = (LocalMedia)paramArrayList1.get(paramInt);
    if (needSelectCount == 1)
    {
      if (localLocalMedia != null)
      {
        if (!picEditor)
        {
          int i = cropShape;
          if ((i != 0) && (i != 1))
          {
            mSelectImages.clear();
            mSelectImages.add(paramArrayList1.get(paramInt));
            onConfirm();
            return;
          }
        }
        toImageEditorActivity(((LocalMedia)paramArrayList1.get(paramInt)).getPath());
      }
    }
    else
    {
      boolean bool = PictureMimeType.isVideo(localLocalMedia.getPictureType());
      long l = localLocalMedia.getDuration();
      if ((bool) && (l > 600000L))
      {
        paramArrayList1 = getString(R.string.uni_album_over_ten_minutes_toast);
        Toast.makeText((Context)this, paramArrayList1, 0).show();
        return;
      }
      if ((bool) && (l < Long.parseLong(videoMinDuration) * 1000L))
      {
        paramArrayList1 = getString(R.string.uni_album_less_three_seconds_toast, new Object[] { videoMinDuration });
        Toast.makeText((Context)this, paramArrayList1, 0).show();
        return;
      }
      isStartPreviewActivity = true;
      mSelectImages = paramArrayList2;
      paramArrayList2 = new Intent((Context)this, PicturePreviewActivity.class);
      LocalMediaCache.getInstance().putList(paramArrayList1);
      paramArrayList2.putExtra("source", source);
      paramArrayList2.putParcelableArrayListExtra("selcteMedias", mSelectImages);
      paramArrayList2.putExtra("position", paramInt);
      paramInt = loadCameraOrVideo;
      if ((paramInt == 0) || (paramInt == 2))
      {
        paramArrayList2.putExtra("loadVideo", true);
        paramArrayList2.putExtra("videoMinDuration", videoMinDuration);
        paramArrayList2.putExtra("videoMaxDuration", videoMaxDuration);
        paramArrayList2.putExtra("videoEditoAction", videoEditorAction);
      }
      paramArrayList2.putExtra("needEditorPic", picEditor);
      paramArrayList2.putExtra("picBeautifyAnimateSwitch", showAnimatePic);
      paramArrayList2.putExtra("cropShape", cropShape);
      paramArrayList2.putExtra("cropCircleRadius", cropCircleRadius);
      paramArrayList2.putExtra("cropRectX", cropRectX);
      paramArrayList2.putExtra("cropRectY", cropRectY);
      paramArrayList2.putExtra("canSelectedMediaCount", needSelectCount);
      startActivityForResult(this, paramArrayList2, 1002, paramView);
    }
  }
  
  public void onSelectChange(ArrayList paramArrayList)
  {
    mSelectImages = paramArrayList;
    setBottomStatusBar(paramArrayList);
  }
  
  public void onSucess()
  {
    loadMediaData();
  }
  
  public void onSucessOpenCamera()
  {
    openMediaCenter("1");
  }
  
  public void onSucessOpenVideo()
  {
    openMediaCenter("0");
  }
  
  public void openCamera()
  {
    PermissionHelper.with((Activity)this).permissions(new String[] { "android.permission.CAMERA", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE" }).requestCode(400).lisener(new Object[] { this }).request();
  }
  
  public void openVideo()
  {
    PermissionHelper.with((Activity)this).permissions(new String[] { "android.permission.CAMERA", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE" }).requestCode(300).lisener(new Object[] { this }).request();
  }
  
  public void startActivityForResult(FragmentActivity paramFragmentActivity, Intent paramIntent, int paramInt, View paramView)
  {
    if ((paramFragmentActivity != null) && (paramIntent != null))
    {
      if (paramView == null) {
        return;
      }
      paramIntent.putExtra("EXTRA_VIEW_INFO", DropDownViewPager.captureValues(paramView));
      paramFragmentActivity.startActivityForResult(paramIntent, paramInt);
      paramFragmentActivity.overridePendingTransition(0, 0);
    }
  }
  
  public int statusBarHint()
  {
    return 1;
  }
}
