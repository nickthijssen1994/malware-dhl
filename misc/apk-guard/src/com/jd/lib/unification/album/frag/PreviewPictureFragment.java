package com.jd.lib.unification.album.frag;

import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.mInterface.IBack;
import com.jd.lib.unification.album.utils.PictureMimeType;
import com.jd.lib.unification.video.view.VideoPlayer;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jingdong.common.widget.image.UnNetTouchImageView;

public class PreviewPictureFragment
  extends Fragment
  implements View.OnClickListener
{
  private static final int CREATE_THUM_SUCCESS = 200;
  private boolean adapterStart = false;
  private Bitmap coverBitmap;
  Handler handler = new Handler(new Handler.Callback()
  {
    public boolean handleMessage(Message paramAnonymousMessage)
    {
      if ((what == 200) && (getActivity() != null) && (videoView != null) && (touchImageView != null) && (coverBitmap != null)) {
        videoView.setCoverBitmap(coverBitmap);
      }
      return false;
    }
  });
  private boolean isPaused;
  private boolean isPlayed;
  private boolean isVideo;
  private LocalMedia localMedia;
  private String path = "";
  @Nullable
  private UnNetTouchImageView touchImageView;
  private ImageView videoIcon;
  @Nullable
  private VideoPlayer videoView;
  
  public PreviewPictureFragment() {}
  
  public static PreviewPictureFragment newInstance(LocalMedia paramLocalMedia)
  {
    PreviewPictureFragment localPreviewPictureFragment = new PreviewPictureFragment();
    Bundle localBundle = new Bundle();
    localBundle.putParcelable("localMedia", paramLocalMedia);
    localPreviewPictureFragment.setArguments(localBundle);
    return localPreviewPictureFragment;
  }
  
  public void adapterStart()
  {
    adapterStart = true;
  }
  
  public boolean canDropDown()
  {
    if (!isVideo)
    {
      UnNetTouchImageView localUnNetTouchImageView = touchImageView;
      if ((localUnNetTouchImageView == null) || (localUnNetTouchImageView.isZoomed())) {
        return false;
      }
    }
    return true;
  }
  
  public Bitmap createVideoThumbnail(String paramString)
  {
    if (UnStringUtils.isEmpty(paramString)) {
      return null;
    }
    String str = paramString;
    if (paramString.startsWith("file://")) {
      str = paramString.replace("file://", "");
    }
    return ThumbnailUtils.createVideoThumbnail(str, 1);
  }
  
  public String getUri()
  {
    LocalMedia localLocalMedia = localMedia;
    if (localLocalMedia != null) {
      return localLocalMedia.getPath();
    }
    return null;
  }
  
  public void init()
  {
    if (videoView != null)
    {
      if (touchImageView == null) {
        return;
      }
      path = localMedia.getPath();
      isVideo = PictureMimeType.isVideo(localMedia);
      videoView.setVideoUri(Uri.parse(path));
      if (!UnStringUtils.isEmpty(path))
      {
        if (isVideo)
        {
          new Thread()
          {
            public void run()
            {
              super.run();
              PreviewPictureFragment localPreviewPictureFragment = PreviewPictureFragment.this;
              PreviewPictureFragment.access$202(localPreviewPictureFragment, localPreviewPictureFragment.createVideoThumbnail(path));
              handler.sendEmptyMessageDelayed(200, 300L);
            }
          }.start();
          return;
        }
        videoView.setVisibility(8);
        videoIcon.setVisibility(8);
        if ((!path.startsWith("file://")) && (!path.startsWith("http://")) && (!path.startsWith("https://")))
        {
          UnNetTouchImageView localUnNetTouchImageView = touchImageView;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("file://");
          localStringBuilder.append(path);
          localUnNetTouchImageView.setImage(localStringBuilder.toString());
          return;
        }
        touchImageView.setImage(path);
      }
    }
  }
  
  public void onClick(View paramView)
  {
    if (paramView.getId() == videoIcon.getId())
    {
      if (isVideo) {
        startVideo();
      }
    }
    else if ((getActivity() instanceof IBack)) {
      ((IBack)getActivity()).onCooActivityBack("3");
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      localMedia = ((LocalMedia)localBundle.getParcelable("localMedia"));
    }
    if (localMedia == null) {
      localMedia = new LocalMedia("", 0L, false, "");
    }
    super.onCreate(paramBundle);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(R.layout.lib_ec_preview_viewpager_item, null);
    videoView = ((VideoPlayer)paramLayoutInflater.findViewById(R.id.lib_ec_preview_video_view));
    videoView.setBackgroundColor(0);
    touchImageView = ((UnNetTouchImageView)paramLayoutInflater.findViewById(R.id.lib_ec_preview_viewpager_item));
    videoIcon = ((ImageView)paramLayoutInflater.findViewById(R.id.lib_ec_preview_video_icon));
    touchImageView.setOnClickListener(this);
    videoView.setOnClickListener(this);
    paramLayoutInflater.setOnClickListener(this);
    videoIcon.setOnClickListener(this);
    videoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener()
    {
      public void onCompletion(MediaPlayer paramAnonymousMediaPlayer)
      {
        videoIcon.setVisibility(0);
        PreviewPictureFragment.access$102(PreviewPictureFragment.this, true);
      }
    });
    init();
    return paramLayoutInflater;
  }
  
  public void onDestroy()
  {
    Bitmap localBitmap = coverBitmap;
    if ((localBitmap != null) && (!localBitmap.isRecycled()))
    {
      coverBitmap.recycle();
      coverBitmap = null;
    }
    super.onDestroy();
  }
  
  public void onPause()
  {
    super.onPause();
    stopVideo();
  }
  
  public void onResume()
  {
    super.onResume();
    if ((isVideo) && (!adapterStart))
    {
      VideoPlayer localVideoPlayer = videoView;
      if ((localVideoPlayer != null) && (!localVideoPlayer.isPlaying())) {
        videoIcon.setVisibility(0);
      }
    }
  }
  
  public void onStop()
  {
    super.onStop();
  }
  
  public void pauseVideo()
  {
    VideoPlayer localVideoPlayer = videoView;
    if ((localVideoPlayer != null) && (touchImageView != null) && (isVideo) && (localVideoPlayer.isPlaying()))
    {
      isPaused = true;
      videoView.pause();
      videoIcon.setVisibility(0);
      touchImageView.setVisibility(0);
    }
  }
  
  public void startVideo()
  {
    VideoPlayer localVideoPlayer = videoView;
    if ((localVideoPlayer != null) && (touchImageView != null) && (isVideo) && (!localVideoPlayer.isPlaying()))
    {
      if (!isPaused)
      {
        videoView.setVideoUri(Uri.parse(path));
        videoView.setCoverBitmap(coverBitmap);
      }
      videoView.start();
      isPlayed = true;
      videoIcon.setVisibility(8);
      touchImageView.setVisibility(8);
    }
  }
  
  public void startVideoAfterInitAnimationEnd()
  {
    if ((isVideo) && (adapterStart) && (!isPlayed))
    {
      VideoPlayer localVideoPlayer = videoView;
      if ((localVideoPlayer != null) && (!localVideoPlayer.isPlaying()))
      {
        startVideo();
        adapterStart = false;
      }
    }
  }
  
  public void stopVideo()
  {
    VideoPlayer localVideoPlayer = videoView;
    if ((localVideoPlayer != null) && (touchImageView != null) && (!isPaused) && (isVideo) && (localVideoPlayer.isPlaying()))
    {
      videoView.stop();
      touchImageView.setVisibility(0);
    }
    isPaused = false;
  }
}
