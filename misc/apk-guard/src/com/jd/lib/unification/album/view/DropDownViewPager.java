package com.jd.lib.unification.album.view;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.AnimatorSet.Builder;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.BaseBundle;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import androidx.annotation.Nullable;
import androidx.core.view.ViewCompat;
import androidx.viewpager.widget.ViewPager;
import androidx.viewpager.widget.ViewPager.OnPageChangeListener;
import com.jingdong.common.DpiUtil;

public class DropDownViewPager
  extends ViewPager
{
  public static final String ALIGN_TOP = "top";
  public static final int BACK_DURATION = 300;
  public static final int DRAG_GAP_PX = 50;
  private static final int DURATION = 300;
  public static final String EXTRA_VIEW_INFO = "EXTRA_VIEW_INFO";
  public static final String HEIGHT = "height";
  public static final String LEFT = "left";
  public static final float MIN_SCALE_WEIGHT = 0.25F;
  public static final String PAGE_KEY = "DropDownViewPager";
  public static final int STATUS_BACK = 2;
  public static final int STATUS_MOVING = 1;
  public static final int STATUS_NORMAL = 0;
  public static final String WIDTH = "width";
  public boolean canScroll = true;
  private Context context;
  private float currentAlpha = 1.0F;
  private int currentPageStatus;
  private int currentStatus = 0;
  @Nullable
  private DropViewPagerListener dropViewPagerListener;
  private boolean enterAnimationEnd = true;
  private boolean finishWithAnimationStart = false;
  private float mLastMotionX;
  private float mLastMotionY;
  private int mOriginCenterX;
  private int mOriginCenterY;
  private int mOriginHeight;
  private int mOriginLeft;
  private int mOriginTop;
  private int mOriginWidth;
  private float mScaleX;
  private float mScaleY;
  private float mTargetHeight;
  private float mTargetWidth;
  private float mTranslationX;
  private float mTranslationY;
  private String mUniqueIdentifier;
  @Nullable
  private VelocityTracker mVelocityTracker;
  private boolean supportAnimation = false;
  private int touchSlop;
  
  public DropDownViewPager(Context paramContext)
  {
    super(paramContext);
    onInit(paramContext);
    context = paramContext;
  }
  
  public DropDownViewPager(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    onInit(paramContext);
    context = paramContext;
  }
  
  private void addIntoVelocity(MotionEvent paramMotionEvent)
  {
    if (mVelocityTracker == null) {
      mVelocityTracker = VelocityTracker.obtain();
    }
    VelocityTracker localVelocityTracker = mVelocityTracker;
    if ((localVelocityTracker != null) && (paramMotionEvent != null)) {
      localVelocityTracker.addMovement(paramMotionEvent);
    }
  }
  
  public static Bundle captureValues(View paramView)
  {
    Bundle localBundle = new Bundle();
    if (paramView == null) {
      return localBundle;
    }
    int[] arrayOfInt = new int[2];
    paramView.getLocationOnScreen(arrayOfInt);
    localBundle.putInt("left", arrayOfInt[0]);
    localBundle.putInt("top", arrayOfInt[1]);
    localBundle.putInt("width", paramView.getWidth());
    localBundle.putInt("height", paramView.getHeight());
    return localBundle;
  }
  
  private float computeYVelocity()
  {
    VelocityTracker localVelocityTracker = mVelocityTracker;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.computeCurrentVelocity(1000);
      float f = mVelocityTracker.getYVelocity();
      releaseVelocity();
      return f;
    }
    return 0.0F;
  }
  
  private int convertPercentToBlackAlphaColor(float paramFloat)
  {
    String str2 = Integer.toHexString((int)(Math.min(1.0F, Math.max(0.0F, paramFloat)) * 255.0F)).toLowerCase();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("#");
    String str1;
    if (str2.length() < 2) {
      str1 = "0";
    } else {
      str1 = "";
    }
    localStringBuilder.append(str1);
    localStringBuilder.append(str2);
    localStringBuilder.append("000000");
    return Color.parseColor(localStringBuilder.toString());
  }
  
  private void onInit(Context paramContext)
  {
    touchSlop = ViewConfiguration.get(paramContext).getScaledTouchSlop();
    setBackgroundColor(0);
    addOnPageChangeListener(new ViewPager.OnPageChangeListener()
    {
      public void onPageScrollStateChanged(int paramAnonymousInt)
      {
        DropDownViewPager.access$102(DropDownViewPager.this, paramAnonymousInt);
        if (dropViewPagerListener != null) {
          dropViewPagerListener.onPageScrollStateChanged(paramAnonymousInt);
        }
      }
      
      public void onPageScrolled(int paramAnonymousInt1, float paramAnonymousFloat, int paramAnonymousInt2)
      {
        if (dropViewPagerListener != null) {
          dropViewPagerListener.onPageScrolled(paramAnonymousInt1, paramAnonymousFloat, paramAnonymousInt2);
        }
      }
      
      public void onPageSelected(int paramAnonymousInt)
      {
        if (dropViewPagerListener != null) {
          dropViewPagerListener.onPageSelected(paramAnonymousInt);
        }
      }
    });
    getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener()
    {
      public void onGlobalLayout()
      {
        if (Build.VERSION.SDK_INT >= 16) {
          getViewTreeObserver().removeOnGlobalLayoutListener(this);
        }
        if (dropViewPagerListener == null)
        {
          DropDownViewPager.access$202(DropDownViewPager.this, false);
          setBackgroundColor(-16777216);
          return;
        }
        Object localObject = DropDownViewPager.this;
        DropDownViewPager.access$302((DropDownViewPager)localObject, dropViewPagerListener.getUniqueIdentifier());
        localObject = null;
        if (dropViewPagerListener.getIntent() != null) {
          localObject = dropViewPagerListener.getIntent().getBundleExtra("EXTRA_VIEW_INFO");
        }
        if ((localObject != null) && (((BaseBundle)localObject).getInt("left", -1) != -1))
        {
          View localView = dropViewPagerListener.getCurrentView();
          if (localView == null)
          {
            DropDownViewPager.access$202(DropDownViewPager.this, false);
            setBackgroundColor(-16777216);
            dropViewPagerListener.onDropDownRecovered(true);
            return;
          }
          DropDownViewPager.access$202(DropDownViewPager.this, true);
          DropDownViewPager.access$402(DropDownViewPager.this, ((BaseBundle)localObject).getInt("left", 0));
          DropDownViewPager.access$502(DropDownViewPager.this, ((BaseBundle)localObject).getInt("top", 0));
          DropDownViewPager.access$602(DropDownViewPager.this, ((BaseBundle)localObject).getInt("width", 0));
          DropDownViewPager.access$702(DropDownViewPager.this, ((BaseBundle)localObject).getInt("height", 0));
          localObject = DropDownViewPager.this;
          DropDownViewPager.access$802((DropDownViewPager)localObject, mOriginLeft + mOriginWidth / 2);
          localObject = DropDownViewPager.this;
          DropDownViewPager.access$902((DropDownViewPager)localObject, mOriginTop + mOriginHeight / 2);
          localObject = new int[2];
          localView.getLocationOnScreen((int[])localObject);
          DropDownViewPager.access$1002(DropDownViewPager.this, localView.getWidth());
          DropDownViewPager.access$1102(DropDownViewPager.this, localView.getHeight());
          DropDownViewPager localDropDownViewPager = DropDownViewPager.this;
          DropDownViewPager.access$1202(localDropDownViewPager, mOriginWidth / mTargetWidth);
          localDropDownViewPager = DropDownViewPager.this;
          DropDownViewPager.access$1302(localDropDownViewPager, mOriginHeight / mTargetHeight);
          float f1 = localObject[0];
          float f2 = mTargetWidth / 2.0F;
          float f3 = localObject[1];
          float f4 = mTargetHeight / 2.0F;
          localObject = DropDownViewPager.this;
          DropDownViewPager.access$1402((DropDownViewPager)localObject, mOriginCenterX - (f1 + f2));
          localObject = DropDownViewPager.this;
          DropDownViewPager.access$1502((DropDownViewPager)localObject, mOriginCenterY - (f3 + f4));
          localView.setTranslationX(mTranslationX);
          localView.setTranslationY(mTranslationY);
          localView.setScaleX(mScaleX);
          localView.setScaleY(mScaleY);
          DropDownViewPager.this.performEnterAnimation(localView);
          return;
        }
        DropDownViewPager.access$202(DropDownViewPager.this, false);
        setBackgroundColor(-16777216);
        dropViewPagerListener.onDropDownRecovered(true);
      }
    });
  }
  
  private void performEnterAnimation(final View paramView)
  {
    ValueAnimator localValueAnimator1 = ValueAnimator.ofFloat(new float[] { paramView.getX(), 0.0F });
    localValueAnimator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
    {
      public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
      {
        View localView = paramView;
        if (localView != null) {
          ViewCompat.setX(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
        }
      }
    });
    ValueAnimator localValueAnimator2 = ValueAnimator.ofFloat(new float[] { paramView.getY(), 0.0F });
    localValueAnimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
    {
      public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
      {
        View localView = paramView;
        if (localView != null) {
          ViewCompat.setY(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
        }
      }
    });
    ValueAnimator localValueAnimator3 = ValueAnimator.ofFloat(new float[] { Math.max(mScaleX, mScaleY), 1.0F });
    localValueAnimator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
    {
      public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
      {
        paramAnonymousValueAnimator = (Float)paramAnonymousValueAnimator.getAnimatedValue();
        View localView = paramView;
        if (localView != null) {
          ViewCompat.setScaleX(localView, paramAnonymousValueAnimator.floatValue());
        }
        DropDownViewPager.this.setupBackground(paramAnonymousValueAnimator.floatValue());
      }
    });
    ValueAnimator localValueAnimator4 = ValueAnimator.ofFloat(new float[] { Math.max(mScaleX, mScaleY), 1.0F });
    localValueAnimator4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
    {
      public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
      {
        View localView = paramView;
        if (localView != null) {
          ViewCompat.setScaleY(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
        }
      }
    });
    paramView = new AnimatorSet();
    paramView.setDuration(300L);
    paramView.play(localValueAnimator1).with(localValueAnimator2).with(localValueAnimator3).with(localValueAnimator4);
    paramView.addListener(new AnimatorListenerAdapter()
    {
      public void onAnimationEnd(Animator paramAnonymousAnimator)
      {
        paramAnonymousAnimator.removeAllListeners();
        DropDownViewPager.access$2202(DropDownViewPager.this, true);
        if (dropViewPagerListener != null) {
          dropViewPagerListener.onDropDownRecovered(true);
        }
      }
      
      public void onAnimationStart(Animator paramAnonymousAnimator)
      {
        DropDownViewPager.access$2202(DropDownViewPager.this, false);
        if (dropViewPagerListener != null) {
          dropViewPagerListener.onDropDownStart(true);
        }
      }
    });
    paramView.start();
  }
  
  private void releaseVelocity()
  {
    VelocityTracker localVelocityTracker = mVelocityTracker;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.clear();
      mVelocityTracker.recycle();
      mVelocityTracker = null;
    }
  }
  
  private void setupBack(final float paramFloat1, final float paramFloat2)
  {
    currentStatus = 2;
    float f = mLastMotionY;
    ValueAnimator localValueAnimator;
    if (paramFloat2 != f)
    {
      localValueAnimator = ValueAnimator.ofFloat(new float[] { paramFloat2, f });
      localValueAnimator.setDuration(300L);
      localValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
      {
        public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
        {
          float f1 = ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue();
          float f2 = (f1 - mLastMotionY) / (paramFloat2 - mLastMotionY);
          float f3 = paramFloat1;
          float f4 = mLastMotionX;
          float f5 = mLastMotionX;
          DropDownViewPager.this.setupMoving(f2 * (f3 - f4) + f5, f1);
          if ((f1 == mLastMotionY) && (currentStatus != 0))
          {
            DropDownViewPager.access$1702(DropDownViewPager.this, 0.0F);
            DropDownViewPager.access$1802(DropDownViewPager.this, 0.0F);
            DropDownViewPager.access$2002(DropDownViewPager.this, 0);
            if (dropViewPagerListener != null) {
              dropViewPagerListener.onDropDownRecovered(false);
            }
          }
        }
      });
      localValueAnimator.start();
      return;
    }
    f = mLastMotionX;
    if (paramFloat1 != f)
    {
      localValueAnimator = ValueAnimator.ofFloat(new float[] { paramFloat1, f });
      localValueAnimator.setDuration(300L);
      localValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
      {
        public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
        {
          float f1 = ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue();
          float f2 = (f1 - mLastMotionX) / (paramFloat1 - mLastMotionX);
          float f3 = paramFloat2;
          float f4 = mLastMotionY;
          float f5 = mLastMotionY;
          DropDownViewPager.this.setupMoving(f1, f2 * (f3 - f4) + f5);
          if (f1 == mLastMotionX)
          {
            DropDownViewPager.access$1702(DropDownViewPager.this, 0.0F);
            DropDownViewPager.access$1802(DropDownViewPager.this, 0.0F);
            DropDownViewPager.access$2002(DropDownViewPager.this, 0);
          }
        }
      });
      localValueAnimator.start();
    }
  }
  
  private void setupBackground(float paramFloat)
  {
    setBackgroundColor(convertPercentToBlackAlphaColor(paramFloat));
  }
  
  private void setupMoving(float paramFloat1, float paramFloat2)
  {
    DropViewPagerListener localDropViewPagerListener = dropViewPagerListener;
    if (localDropViewPagerListener == null) {
      return;
    }
    if (localDropViewPagerListener.getCurrentView() == null) {
      return;
    }
    currentStatus = 1;
    float f2 = mLastMotionX;
    float f3 = paramFloat2 - mLastMotionY;
    float f1 = 1.0F;
    if (f3 > 0.0F)
    {
      paramFloat2 = 1.0F - Math.abs(f3) / DpiUtil.getHeight(context);
      f1 = 1.0F - Math.abs(f3) / (DpiUtil.getHeight(context) / 2);
    }
    else
    {
      paramFloat2 = 1.0F;
    }
    ViewCompat.setTranslationX(dropViewPagerListener.getCurrentView(), paramFloat1 - f2);
    ViewCompat.setTranslationY(dropViewPagerListener.getCurrentView(), f3);
    setupScale(paramFloat2);
    setupBackground(f1);
    currentAlpha = f1;
  }
  
  private void setupScale(float paramFloat)
  {
    DropViewPagerListener localDropViewPagerListener = dropViewPagerListener;
    if (localDropViewPagerListener == null) {
      return;
    }
    if (localDropViewPagerListener.getCurrentView() == null) {
      return;
    }
    paramFloat = Math.min(Math.max(paramFloat, 0.25F), 1.0F);
    ViewCompat.setScaleX(dropViewPagerListener.getCurrentView(), paramFloat);
    ViewCompat.setScaleY(dropViewPagerListener.getCurrentView(), paramFloat);
  }
  
  public void finishWithAnimation(final String paramString)
  {
    if (enterAnimationEnd)
    {
      if (finishWithAnimationStart) {
        return;
      }
      finishWithAnimationStart = true;
      Object localObject1 = dropViewPagerListener;
      if (localObject1 == null) {
        return;
      }
      Object localObject2 = ((DropViewPagerListener)localObject1).getCurrentView();
      if ((supportAnimation) && (localObject2 != null))
      {
        int i;
        if ((!TextUtils.isEmpty(mUniqueIdentifier)) && (TextUtils.equals(mUniqueIdentifier, dropViewPagerListener.getUniqueIdentifier()))) {
          i = 0;
        } else {
          i = 1;
        }
        float f2 = 0.0F;
        localObject1 = ValueAnimator.ofFloat(new float[] { 0.0F, mTranslationX });
        ((ValueAnimator)localObject1).addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
        {
          public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
          {
            View localView = val$currentView;
            if (localView != null) {
              ViewCompat.setX(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
            }
          }
        });
        ValueAnimator localValueAnimator1 = ValueAnimator.ofFloat(new float[] { 0.0F, mTranslationY });
        localValueAnimator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
        {
          public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
          {
            View localView = val$currentView;
            if (localView != null) {
              ViewCompat.setY(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
            }
          }
        });
        float f1;
        if (i != 0) {
          f1 = 0.0F;
        } else {
          f1 = Math.max(mScaleX, mScaleY);
        }
        ValueAnimator localValueAnimator2 = ValueAnimator.ofFloat(new float[] { 1.0F, f1 });
        localValueAnimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
        {
          public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
          {
            paramAnonymousValueAnimator = (Float)paramAnonymousValueAnimator.getAnimatedValue();
            View localView = val$currentView;
            if (localView != null) {
              ViewCompat.setScaleX(localView, paramAnonymousValueAnimator.floatValue());
            }
            DropDownViewPager.this.setupBackground(paramAnonymousValueAnimator.floatValue());
          }
        });
        if (i != 0) {
          f1 = f2;
        } else {
          f1 = Math.max(mScaleX, mScaleY);
        }
        ValueAnimator localValueAnimator3 = ValueAnimator.ofFloat(new float[] { 1.0F, f1 });
        localValueAnimator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
        {
          public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
          {
            View localView = val$currentView;
            if (localView != null) {
              ViewCompat.setScaleY(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
            }
          }
        });
        localObject2 = new AnimatorSet();
        ((AnimatorSet)localObject2).setDuration(300L);
        if (i != 0) {
          ((AnimatorSet)localObject2).play(localValueAnimator2).with(localValueAnimator3);
        } else {
          ((AnimatorSet)localObject2).play((Animator)localObject1).with(localValueAnimator1).with(localValueAnimator2).with(localValueAnimator3);
        }
        ((Animator)localObject2).addListener(new AnimatorListenerAdapter()
        {
          public void onAnimationEnd(Animator paramAnonymousAnimator)
          {
            paramAnonymousAnimator.removeAllListeners();
            if (dropViewPagerListener != null) {
              dropViewPagerListener.onDropDownRelease(paramString, true);
            }
          }
          
          public void onAnimationStart(Animator paramAnonymousAnimator)
          {
            if (dropViewPagerListener != null) {
              dropViewPagerListener.onDropDownStart(false);
            }
          }
        });
        ((AnimatorSet)localObject2).start();
        return;
      }
      dropViewPagerListener.onDropDownRelease(paramString, false);
    }
  }
  
  public void finishWithAnimationFromDropDown(final String paramString)
  {
    if (enterAnimationEnd)
    {
      if (finishWithAnimationStart) {
        return;
      }
      finishWithAnimationStart = true;
      Object localObject1 = dropViewPagerListener;
      if (localObject1 == null) {
        return;
      }
      Object localObject2 = ((DropViewPagerListener)localObject1).getCurrentView();
      if (localObject2 == null)
      {
        dropViewPagerListener.onDropDownRelease(paramString, false);
        return;
      }
      localObject1 = ValueAnimator.ofFloat(new float[] { ((View)localObject2).getScaleX(), 0.0F });
      ((ValueAnimator)localObject1).addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
      {
        public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
        {
          paramAnonymousValueAnimator = (Float)paramAnonymousValueAnimator.getAnimatedValue();
          Object localObject = val$currentView;
          if (localObject != null) {
            ViewCompat.setScaleX((View)localObject, paramAnonymousValueAnimator.floatValue());
          }
          localObject = DropDownViewPager.this;
          ((DropDownViewPager)localObject).setupBackground(currentAlpha * paramAnonymousValueAnimator.floatValue());
        }
      });
      ValueAnimator localValueAnimator = ValueAnimator.ofFloat(new float[] { ((View)localObject2).getScaleY(), 0.0F });
      localValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()
      {
        public void onAnimationUpdate(ValueAnimator paramAnonymousValueAnimator)
        {
          View localView = val$currentView;
          if (localView != null) {
            ViewCompat.setScaleY(localView, ((Float)paramAnonymousValueAnimator.getAnimatedValue()).floatValue());
          }
        }
      });
      localObject2 = new AnimatorSet();
      ((AnimatorSet)localObject2).setDuration(300L);
      ((AnimatorSet)localObject2).play((Animator)localObject1).with(localValueAnimator);
      ((Animator)localObject2).addListener(new AnimatorListenerAdapter()
      {
        public void onAnimationEnd(Animator paramAnonymousAnimator)
        {
          paramAnonymousAnimator.removeAllListeners();
          if (dropViewPagerListener != null) {
            dropViewPagerListener.onDropDownRelease(paramString, true);
          }
        }
        
        public void onAnimationStart(Animator paramAnonymousAnimator)
        {
          if (dropViewPagerListener != null) {
            dropViewPagerListener.onDropDownStart(false);
          }
        }
      });
      ((AnimatorSet)localObject2).start();
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!canScroll) {
      return false;
    }
    try
    {
      int i = paramMotionEvent.getAction();
      float f1;
      switch (i & 0xFF)
      {
      default: 
        break;
      case 2: 
        if (dropViewPagerListener != null)
        {
          i = paramMotionEvent.getPointerCount();
          if (i == 1)
          {
            f1 = paramMotionEvent.getRawY();
            f1 -= mLastMotionY;
            float f2 = paramMotionEvent.getRawX();
            float f3 = mLastMotionX;
            f2 = Math.abs(f2 - f3);
            f3 = Math.abs(f1);
            if (f1 > 0.0F)
            {
              double d = f2 * f2 + f3 * f3;
              d = Math.sqrt(d);
              if ((d >= touchSlop) && (f3 > f2))
              {
                DropViewPagerListener localDropViewPagerListener = dropViewPagerListener;
                bool = localDropViewPagerListener.canDropDown();
                if (bool)
                {
                  localDropViewPagerListener = dropViewPagerListener;
                  localDropViewPagerListener.onDropDownStart(false);
                  bool = onTouchEvent(paramMotionEvent);
                  return bool;
                }
              }
            }
            bool = super.onInterceptTouchEvent(paramMotionEvent);
            return bool;
          }
        }
        break;
      case 0: 
        f1 = paramMotionEvent.getRawX();
        mLastMotionX = f1;
        f1 = paramMotionEvent.getRawY();
        mLastMotionY = f1;
      }
      boolean bool = super.onInterceptTouchEvent(paramMotionEvent);
      return bool;
    }
    catch (IllegalArgumentException paramMotionEvent)
    {
      paramMotionEvent.printStackTrace();
    }
    return false;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!canScroll) {
      return false;
    }
    int i = paramMotionEvent.getAction();
    int j = currentStatus;
    if (j == 2) {
      return false;
    }
    switch (i & 0xFF)
    {
    default: 
      break;
    case 2: 
      addIntoVelocity(paramMotionEvent);
      i = (int)(paramMotionEvent.getRawY() - mLastMotionY);
      if ((i <= 50) && (currentStatus != 1)) {
        return super.onTouchEvent(paramMotionEvent);
      }
      if ((currentPageStatus != 1) && ((i > 50) || (currentStatus == 1)))
      {
        setupMoving(paramMotionEvent.getRawX(), paramMotionEvent.getRawY());
        return true;
      }
      break;
    case 1: 
    case 3: 
      if (j != 1) {
        return super.onTouchEvent(paramMotionEvent);
      }
      float f1 = paramMotionEvent.getRawX();
      float f2 = paramMotionEvent.getRawY();
      if ((computeYVelocity() < 500.0F) && (Math.abs(f2 - mLastMotionY) <= DpiUtil.getHeight(context) / 4)) {
        setupBack(f1, f2);
      } else if (dropViewPagerListener != null) {
        finishWithAnimationFromDropDown("2");
      }
      break;
    case 0: 
      mLastMotionX = paramMotionEvent.getRawX();
      mLastMotionY = paramMotionEvent.getRawY();
      addIntoVelocity(paramMotionEvent);
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void setDropViewPagerListener(DropViewPagerListener paramDropViewPagerListener)
  {
    dropViewPagerListener = paramDropViewPagerListener;
  }
  
  public static abstract interface DropViewPagerListener
  {
    public abstract boolean canDropDown();
    
    public abstract View getCurrentView();
    
    public abstract Intent getIntent();
    
    public abstract String getUniqueIdentifier();
    
    public abstract void onDropDownRecovered(boolean paramBoolean);
    
    public abstract void onDropDownRelease(String paramString, boolean paramBoolean);
    
    public abstract void onDropDownStart(boolean paramBoolean);
    
    public abstract void onPageScrollStateChanged(int paramInt);
    
    public abstract void onPageScrolled(int paramInt1, float paramFloat, int paramInt2);
    
    public abstract void onPageSelected(int paramInt);
  }
}
