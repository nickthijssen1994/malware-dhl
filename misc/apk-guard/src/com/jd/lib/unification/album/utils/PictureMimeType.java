package com.jd.lib.unification.album.utils;

import android.media.MediaMetadataRetriever;
import android.text.TextUtils;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.entity.LocalMedia;
import java.io.File;

public final class PictureMimeType
{
  public static final int TYPE_IMAGE = 1;
  public static final int TYPE_VIDEO = 2;
  
  public PictureMimeType() {}
  
  public static String createImageType(String paramString)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString);
      if (!bool)
      {
        paramString = new File(paramString).getName();
        int i = paramString.lastIndexOf(".");
        paramString = paramString.substring(i + 1, paramString.length());
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("image/");
        localStringBuilder.append(paramString);
        paramString = localStringBuilder.toString();
        return paramString;
      }
      return "image/jpeg";
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "image/jpeg";
  }
  
  public static String createVideoType(String paramString)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString);
      if (!bool)
      {
        paramString = new File(paramString).getName();
        int i = paramString.lastIndexOf(".");
        paramString = paramString.substring(i + 1, paramString.length());
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("video/");
        localStringBuilder.append(paramString);
        paramString = localStringBuilder.toString();
        return paramString;
      }
      return "video/mp4";
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "video/mp4";
  }
  
  public static boolean filterVideo(String paramString)
  {
    if (UnStringUtils.isEmpty(paramString)) {
      return false;
    }
    return paramString.endsWith(".avi");
  }
  
  public static int getLocalVideoDuration(String paramString)
  {
    try
    {
      MediaMetadataRetriever localMediaMetadataRetriever = new MediaMetadataRetriever();
      localMediaMetadataRetriever.setDataSource(paramString);
      int i = Integer.parseInt(localMediaMetadataRetriever.extractMetadata(9));
      return i;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return 0;
  }
  
  public static boolean isVideo(LocalMedia paramLocalMedia)
  {
    if (paramLocalMedia == null) {
      return false;
    }
    if (!TextUtils.isEmpty(paramLocalMedia.getPictureType())) {
      return isVideo(paramLocalMedia.getPictureType());
    }
    if (paramLocalMedia.getType() == 2) {
      return true;
    }
    if (paramLocalMedia.getType() == 1) {
      return false;
    }
    return paramLocalMedia.isPicture() ^ true;
  }
  
  public static boolean isVideo(File paramFile)
  {
    if (paramFile == null) {
      return false;
    }
    paramFile = paramFile.getName();
    if (UnStringUtils.isEmpty(paramFile)) {
      return false;
    }
    return (paramFile.endsWith(".mp4")) || (paramFile.endsWith(".3gp")) || (paramFile.endsWith(".3gpp")) || (paramFile.endsWith(".mov")) || (paramFile.endsWith(".mkv")) || (paramFile.endsWith(".flv")) || (paramFile.endsWith(".m4v")) || (paramFile.endsWith(".webm")) || (paramFile.endsWith(".mpg")) || (".mpeg".equals(paramFile)) || (".rmvb".equals(paramFile));
  }
  
  public static boolean isVideo(String paramString)
  {
    if (UnStringUtils.isEmpty(paramString)) {
      return false;
    }
    switch (paramString.hashCode())
    {
    default: 
      break;
    case 1331848080: 
      if (paramString.equals("video/mpg")) {
        i = 8;
      }
      break;
    case 1331848064: 
      if (paramString.equals("video/mov")) {
        i = 3;
      }
      break;
    case 1331848029: 
      if (paramString.equals("video/mp4")) {
        i = 2;
      }
      break;
    case 1331847940: 
      if (paramString.equals("video/mkv")) {
        i = 4;
      }
      break;
    case 1331846235: 
      if (paramString.equals("video/m4v")) {
        i = 6;
      }
      break;
    case 1331841244: 
      if (paramString.equals("video/flv")) {
        i = 5;
      }
      break;
    case 1331792072: 
      if (paramString.equals("video/3gp")) {
        i = 0;
      }
      break;
    case -1662095187: 
      if (paramString.equals("video/webm")) {
        i = 7;
      }
      break;
    case -1662235845: 
      if (paramString.equals("video/rmvb")) {
        i = 10;
      }
      break;
    case -1662382439: 
      if (paramString.equals("video/mpeg")) {
        i = 9;
      }
      break;
    case -1664118616: 
      if (paramString.equals("video/3gpp")) {
        i = 1;
      }
      break;
    }
    int i = -1;
    switch (i)
    {
    default: 
      return false;
    }
    return true;
  }
  
  public static int pictureToVideo(String paramString)
  {
    if ((!TextUtils.isEmpty(paramString)) && (paramString.startsWith("video"))) {
      return 2;
    }
    return 1;
  }
}
