package com.jd.lib.unification.album.view;

import android.content.Context;
import android.graphics.Bitmap;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.jd.lib.unification.album.filter.FilterTools.FilterType;
import com.jd.lib.unification.album.filter.FilterView;
import com.jd.lib.unification.album.filter.FilterView.FilterChangerListener;
import com.jd.lib.unification.album.filter.FilterView.FilterProgressChangerListener;
import com.jd.lib.unification.album.filter.filter.CommonFilter;
import com.jd.lib.unification.album.filter.filter.FilterImage;
import com.jd.lib.unification.album.filter.filter.FilterImageView;
import com.jd.lib.unification.album.utils.BitmapUtil;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.ui.JDDialog;
import com.jingdong.common.ui.JDDialogFactory;

public class FilterComponent
  extends RelativeLayout
{
  private AddFilterResultListener addFilterResultListener;
  private Context context;
  private FilterTools.FilterType curType = FilterTools.FilterType.NO_FILTER;
  private FilterImageView filterImageView;
  private FilterView filterView;
  private ImageView ivCancle;
  private ImageView ivConfirm;
  private Bitmap originBitmap;
  
  public FilterComponent(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public FilterComponent(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public FilterComponent(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    context = paramContext;
    LayoutInflater.from(paramContext).inflate(R.layout.layout_edit_filter, this, true);
    filterImageView = ((FilterImageView)findViewById(R.id.filter_image_view));
    filterView = ((FilterView)findViewById(R.id.filter_view));
    ivCancle = ((ImageView)findViewById(R.id.iv_function_cancle));
    ivConfirm = ((ImageView)findViewById(R.id.iv_function_confirm));
    filterView.setFilterChangerListener(new FilterView.FilterChangerListener()
    {
      public void onFilterChanged(FilterTools.FilterType paramAnonymousFilterType, CommonFilter paramAnonymousCommonFilter)
      {
        FilterComponent.access$002(FilterComponent.this, paramAnonymousFilterType);
        filterImageView.setFilter(paramAnonymousCommonFilter);
      }
    });
    filterView.setProgressChangerListener(new FilterView.FilterProgressChangerListener()
    {
      public void onFilterProgressChanged()
      {
        filterImageView.requestRender();
      }
    });
    ivConfirm.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (addFilterResultListener != null)
        {
          if (curType == FilterTools.FilterType.NO_FILTER)
          {
            addFilterResultListener.addfilterResult(originBitmap, curType);
            return;
          }
          paramAnonymousView = getBitmap();
          if (paramAnonymousView == null)
          {
            FilterComponent.this.editorFailed("??????");
            return;
          }
          addFilterResultListener.addfilterResult(paramAnonymousView, curType);
        }
      }
    });
    ivCancle.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (addFilterResultListener != null) {
          addFilterResultListener.addfilterResult(null, null);
        }
      }
    });
  }
  
  private void editorFailed(final String paramString)
  {
    JDDialogFactory localJDDialogFactory = JDDialogFactory.getInstance();
    Context localContext = context;
    paramString = localJDDialogFactory.createJdDialogWithStyle2(localContext, paramString, localContext.getString(R.string.uni_video_editor_give_up), context.getString(R.string.uni_video_editor_continue));
    paramString.setCancelable(false);
    paramString.setOnLeftButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
        if (addFilterResultListener != null) {
          addFilterResultListener.addfilterResult(null, null);
        }
      }
    });
    paramString.setOnRightButtonClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramString.dismiss();
      }
    });
    paramString.show();
  }
  
  public void destory()
  {
    Object localObject = filterView;
    if (localObject != null) {
      ((FilterView)localObject).destory();
    }
    if (filterImageView != null) {
      filterImageView = null;
    }
    if (curType != FilterTools.FilterType.NO_FILTER)
    {
      localObject = originBitmap;
      if ((localObject != null) && (!((Bitmap)localObject).isRecycled()))
      {
        originBitmap.recycle();
        originBitmap = null;
      }
    }
  }
  
  public Bitmap getBitmap()
  {
    return filterImageView.getGPUImage().getBitmapWithFilterApplied();
  }
  
  public FilterTools.FilterType getCurType()
  {
    return curType;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    destory();
  }
  
  public void setAddFilterResultListener(AddFilterResultListener paramAddFilterResultListener)
  {
    addFilterResultListener = paramAddFilterResultListener;
  }
  
  public void setBitmap(Bitmap paramBitmap)
  {
    originBitmap = paramBitmap;
    RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)filterImageView.getLayoutParams();
    float f = BitmapUtil.getScale(context, originBitmap);
    width = ((int)(originBitmap.getWidth() * f));
    height = ((int)(f * originBitmap.getHeight()));
    localLayoutParams.addRule(13);
    filterImageView.requestLayout();
    filterImageView.setImage(paramBitmap);
    filterView.initData(paramBitmap, null);
  }
  
  public static abstract interface AddFilterResultListener
  {
    public abstract void addfilterResult(Bitmap paramBitmap, FilterTools.FilterType paramFilterType);
  }
}
