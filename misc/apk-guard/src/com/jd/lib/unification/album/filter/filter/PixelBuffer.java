package com.jd.lib.unification.album.filter.filter;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.opengl.GLSurfaceView.Renderer;
import android.os.Build.VERSION;
import com.jingdong.common.UnLog;
import java.nio.Buffer;
import java.nio.IntBuffer;
import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;
import javax.microedition.khronos.opengles.GL10;

public class PixelBuffer
{
  static final boolean LIST_CONFIGS = false;
  static final String PAGE_KEY = "PixelBuffer";
  Bitmap mBitmap;
  EGL10 mEGL;
  EGLConfig mEGLConfig;
  EGLConfig[] mEGLConfigs;
  EGLContext mEGLContext;
  EGLDisplay mEGLDisplay;
  EGLSurface mEGLSurface;
  GL10 mGL;
  int mHeight;
  GLSurfaceView.Renderer mRenderer;
  String mThreadOwner;
  int mWidth;
  
  public PixelBuffer(int paramInt1, int paramInt2)
  {
    mWidth = paramInt1;
    mHeight = paramInt2;
    Object localObject = new int[2];
    paramInt1 = mWidth;
    paramInt2 = mHeight;
    mEGL = ((EGL10)EGLContext.getEGL());
    mEGLDisplay = mEGL.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
    mEGL.eglInitialize(mEGLDisplay, (int[])localObject);
    mEGLConfig = chooseConfig();
    mEGLContext = mEGL.eglCreateContext(mEGLDisplay, mEGLConfig, EGL10.EGL_NO_CONTEXT, new int[] { 12440, 2, 12344 });
    mEGLSurface = mEGL.eglCreatePbufferSurface(mEGLDisplay, mEGLConfig, new int[] { 12375, paramInt1, 12374, paramInt2, 12344 });
    localObject = mEGL;
    EGLDisplay localEGLDisplay = mEGLDisplay;
    EGLSurface localEGLSurface = mEGLSurface;
    ((EGL10)localObject).eglMakeCurrent(localEGLDisplay, localEGLSurface, localEGLSurface, mEGLContext);
    mGL = ((GL10)mEGLContext.getGL());
    mThreadOwner = Thread.currentThread().getName();
  }
  
  private EGLConfig chooseConfig()
  {
    int[] arrayOfInt1 = new int[15];
    int[] tmp6_5 = arrayOfInt1;
    tmp6_5[0] = '?';
    int[] tmp12_6 = tmp6_5;
    tmp12_6[1] = 0;
    int[] tmp16_12 = tmp12_6;
    tmp16_12[2] = '?';
    int[] tmp22_16 = tmp16_12;
    tmp22_16[3] = 0;
    int[] tmp26_22 = tmp22_16;
    tmp26_22[4] = '?';
    int[] tmp32_26 = tmp26_22;
    tmp32_26[5] = 8;
    int[] tmp37_32 = tmp32_26;
    tmp37_32[6] = '?';
    int[] tmp44_37 = tmp37_32;
    tmp44_37[7] = 8;
    int[] tmp50_44 = tmp44_37;
    tmp50_44[8] = '?';
    int[] tmp57_50 = tmp50_44;
    tmp57_50[9] = 8;
    int[] tmp63_57 = tmp57_50;
    tmp63_57[10] = '?';
    int[] tmp70_63 = tmp63_57;
    tmp70_63[11] = 8;
    int[] tmp76_70 = tmp70_63;
    tmp76_70[12] = '?';
    int[] tmp83_76 = tmp76_70;
    tmp83_76[13] = 4;
    int[] tmp88_83 = tmp83_76;
    tmp88_83[14] = '?';
    tmp88_83;
    int[] arrayOfInt2 = new int[1];
    mEGL.eglChooseConfig(mEGLDisplay, arrayOfInt1, null, 0, arrayOfInt2);
    int i = arrayOfInt2[0];
    mEGLConfigs = new EGLConfig[i];
    mEGL.eglChooseConfig(mEGLDisplay, arrayOfInt1, mEGLConfigs, i, arrayOfInt2);
    return mEGLConfigs[0];
  }
  
  private void convertToBitmap()
  {
    int i = mWidth;
    int j = mHeight;
    int[] arrayOfInt = new int[i * j];
    Object localObject = IntBuffer.allocate(i * j);
    mGL.glReadPixels(0, 0, mWidth, mHeight, 6408, 5121, (Buffer)localObject);
    localObject = ((IntBuffer)localObject).array();
    i = 0;
    while (i < mHeight)
    {
      j = 0;
      for (;;)
      {
        int k = mWidth;
        if (j >= k) {
          break;
        }
        arrayOfInt[((mHeight - i - 1) * k + j)] = localObject[(k * i + j)];
        j += 1;
      }
      i += 1;
    }
    if (Build.VERSION.SDK_INT >= 21) {
      localObject = Bitmap.Config.ARGB_4444;
    } else {
      localObject = Bitmap.Config.ARGB_8888;
    }
    i = mWidth;
    j = mHeight;
    try
    {
      localObject = Bitmap.createBitmap(i, j, (Bitmap.Config)localObject);
      mBitmap = ((Bitmap)localObject);
      localObject = mBitmap;
      ((Bitmap)localObject).copyPixelsFromBuffer(IntBuffer.wrap(arrayOfInt));
      return;
    }
    catch (Exception localException)
    {
      if (UnLog.E) {
        localException.printStackTrace();
      }
    }
  }
  
  private int getConfigAttrib(EGLConfig paramEGLConfig, int paramInt)
  {
    int[] arrayOfInt = new int[1];
    if (mEGL.eglGetConfigAttrib(mEGLDisplay, paramEGLConfig, paramInt, arrayOfInt)) {
      return arrayOfInt[0];
    }
    return 0;
  }
  
  private void listConfig()
  {
    EGLConfig[] arrayOfEGLConfig = mEGLConfigs;
    int j = arrayOfEGLConfig.length;
    int i = 0;
    while (i < j)
    {
      EGLConfig localEGLConfig = arrayOfEGLConfig[i];
      getConfigAttrib(localEGLConfig, 12325);
      getConfigAttrib(localEGLConfig, 12326);
      getConfigAttrib(localEGLConfig, 12324);
      getConfigAttrib(localEGLConfig, 12323);
      getConfigAttrib(localEGLConfig, 12322);
      getConfigAttrib(localEGLConfig, 12321);
      i += 1;
    }
  }
  
  public void destroy()
  {
    mRenderer.onDrawFrame(mGL);
    mRenderer.onDrawFrame(mGL);
    mEGL.eglMakeCurrent(mEGLDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);
    mEGL.eglDestroySurface(mEGLDisplay, mEGLSurface);
    mEGL.eglDestroyContext(mEGLDisplay, mEGLContext);
    mEGL.eglTerminate(mEGLDisplay);
  }
  
  public Bitmap getBitmap()
  {
    if (mRenderer == null)
    {
      if (UnLog.E)
      {
        UnLog.e("PixelBuffer", "getBitmap: Renderer was not set.");
        return null;
      }
    }
    else if (!Thread.currentThread().getName().equals(mThreadOwner))
    {
      if (UnLog.E)
      {
        UnLog.e("PixelBuffer", "getBitmap: This thread does not own the OpenGL context.");
        return null;
      }
    }
    else
    {
      mRenderer.onDrawFrame(mGL);
      mRenderer.onDrawFrame(mGL);
      convertToBitmap();
      return mBitmap;
    }
    return null;
  }
  
  public void setRenderer(GLSurfaceView.Renderer paramRenderer)
  {
    mRenderer = paramRenderer;
    if (!Thread.currentThread().getName().equals(mThreadOwner))
    {
      if (UnLog.E) {
        UnLog.e("PixelBuffer", "setRenderer: This thread does not own the OpenGL context.");
      }
    }
    else
    {
      mRenderer.onSurfaceCreated(mGL, mEGLConfig);
      mRenderer.onSurfaceChanged(mGL, mWidth, mHeight);
    }
  }
}
