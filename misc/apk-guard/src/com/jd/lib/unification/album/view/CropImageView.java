package com.jd.lib.unification.album.view;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.RectF;
import android.os.AsyncTask;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.FrameLayout;
import com.jd.lib.unification.album.builder.CropImageOption;
import com.jd.lib.unification.album.mInterface.BitmapCropCallback;
import com.jd.lib.unification.album.mInterface.CropOverlayViewLayoutFinishLitener;
import com.jd.lib.unification.album.task.BitmapCropTask;
import com.jd.lib.unification.album.utils.BitmapUtil;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.styleable;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;
import java.math.BigDecimal;

public class CropImageView
  extends FrameLayout
{
  private static final String stop = "CropImageView";
  private Context context;
  private CropOverlayView cropOverlay;
  private CropPhotoView cropPhotoView;
  private boolean cropUI;
  private BitmapCropCallback mBitmapCropCallBack;
  
  public CropImageView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public CropImageView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public CropImageView(final Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    context = paramContext;
    paramAttributeSet = LayoutInflater.from(paramContext).inflate(R.layout.lib_album_crop, this, true);
    cropPhotoView = ((CropPhotoView)paramAttributeSet.findViewById(R.id.photo_view));
    cropOverlay = ((CropOverlayView)paramAttributeSet.findViewById(R.id.crop_overlay));
    paramAttributeSet = paramContext.obtainStyledAttributes(R.styleable.CropImageView);
    if (paramAttributeSet != null)
    {
      cropOverlay.processStyledAttributes(paramAttributeSet);
      paramAttributeSet.recycle();
    }
    cropOverlay.setCropOverlayViewLayoutFinishLitener(new CropOverlayViewLayoutFinishLitener()
    {
      public void cropImageInfo(float[] paramAnonymousArrayOfFloat)
      {
        cropPhotoView.setCropRect(cropOverlay.getEdges());
        int i = (int)(cropPhotoView.mCurrentImageCorners[2] - cropPhotoView.mCurrentImageCorners[0]);
        int j = (int)(cropPhotoView.mCurrentImageCorners[5] - cropPhotoView.mCurrentImageCorners[3]);
        int k = (int)cropOverlay.getEdges().width();
        int m = (int)cropOverlay.getEdges().height();
        if (((i < k) || (j < m)) && (i != 0) && (j != 0))
        {
          paramAnonymousArrayOfFloat = new BigDecimal(i);
          float f2 = new BigDecimal(k).divide(paramAnonymousArrayOfFloat, 3, 4).floatValue();
          float f1 = f2;
          paramAnonymousArrayOfFloat = new BigDecimal(j);
          float f3 = new BigDecimal(k).divide(paramAnonymousArrayOfFloat, 3, 4).floatValue();
          if (UnLog.D)
          {
            paramAnonymousArrayOfFloat = new StringBuilder();
            paramAnonymousArrayOfFloat.append("widthScale ");
            paramAnonymousArrayOfFloat.append(f2);
            paramAnonymousArrayOfFloat.append(" heightScale ");
            paramAnonymousArrayOfFloat.append(f3);
            paramAnonymousArrayOfFloat.append(" curScale ");
            paramAnonymousArrayOfFloat.append(cropPhotoView.getCurrentScale());
            UnLog.d("CropImageView", paramAnonymousArrayOfFloat.toString());
          }
          if (f2 <= f3) {
            f1 = f3;
          }
          cropPhotoView.setMinScaleLevel(f1);
          cropPhotoView.dispatchScaleChange(f1, DpiUtil.getWidth(paramContext) / 2, DpiUtil.getHeight(paramContext) / 2);
        }
      }
    });
  }
  
  public void crop()
  {
    Object localObject = cropPhotoView.mCurrentImageCorners;
    RectF localRectF = new RectF(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
    int i = 1;
    while (i < localObject.length)
    {
      float f2 = Math.round(localObject[(i - 1)] * 10.0F) / 10.0F;
      float f1 = Math.round(localObject[i] * 10.0F) / 10.0F;
      float f3;
      if (f2 < left) {
        f3 = f2;
      } else {
        f3 = left;
      }
      left = f3;
      if (f1 < top) {
        f3 = f1;
      } else {
        f3 = top;
      }
      top = f3;
      if (f2 <= right) {
        f2 = right;
      }
      right = f2;
      if (f1 <= bottom) {
        f1 = bottom;
      }
      bottom = f1;
      i += 2;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("  crop image corners ");
    ((StringBuilder)localObject).append(left);
    ((StringBuilder)localObject).append(" : ");
    ((StringBuilder)localObject).append(top);
    ((StringBuilder)localObject).append(" : ");
    ((StringBuilder)localObject).append(right);
    ((StringBuilder)localObject).append(" : ");
    ((StringBuilder)localObject).append(bottom);
    Log.d("CropImageView", ((StringBuilder)localObject).toString());
    localRectF.sort();
    new BitmapCropTask(getImageBitmap(), cropOverlay.getEdges(), localRectF, cropPhotoView.getCurrentScale(), cropOverlay.getCropShape(), mBitmapCropCallBack).execute(new Void[0]);
  }
  
  public void crop(BitmapCropCallback paramBitmapCropCallback)
  {
    mBitmapCropCallBack = paramBitmapCropCallback;
    crop();
  }
  
  public Bitmap getImageBitmap()
  {
    return cropPhotoView.getImageBitmap();
  }
  
  public void reset()
  {
    cropPhotoView.reset();
  }
  
  public void setBitmapCropCallbackListener(BitmapCropCallback paramBitmapCropCallback)
  {
    mBitmapCropCallBack = paramBitmapCropCallback;
  }
  
  public void setCropImageOption(CropImageOption paramCropImageOption)
  {
    cropOverlay.setCropOption(paramCropImageOption);
  }
  
  public void setCropUI(boolean paramBoolean)
  {
    cropUI = paramBoolean;
    if (paramBoolean)
    {
      cropOverlay.setVisibility(0);
      cropPhotoView.setScaleable(true);
      return;
    }
    cropOverlay.setVisibility(8);
    cropPhotoView.setScaleable(false);
  }
  
  public void setImageBitmap(Bitmap paramBitmap)
  {
    cropPhotoView.setImageBitmap(paramBitmap);
  }
  
  public void setImagePath(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    setImageBitmap(BitmapUtil.getFitSampleBitmap(context, paramString));
  }
}
