package com.jd.lib.unification.album.filter;

import android.content.Context;
import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.Adapter;
import com.jd.lib.unification.album.filter.filter.CommonFilter;
import com.jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux;
import com.jd.lib.unification.album.filter.video.ExtractDecodeEditEncodeMux.ResultListener;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.video.view.util.VideoInfoUtil;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jingdong.common.DpiUtil;
import java.util.List;

public class FilterView
  extends LinearLayout
{
  private FilterAdapter adapter;
  private ExtractDecodeEditEncodeMux extractDecodeEdit;
  private FilterChangerListener filterChangerListener;
  private Context mContext;
  private FilterTools.FilterAdjuster mFilterAdjuster;
  private MainHandler mUIHandler;
  private FilterProgressChangerListener progressChangerListener;
  private RecyclerView recyclerView;
  private SeekBar seekBar;
  private LinearLayout seekBarLayot;
  private FilterInfo selectImageFilter;
  
  public FilterView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public FilterView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public FilterView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    mContext = paramContext;
    mUIHandler = new MainHandler(null);
    LayoutInflater.from(paramContext).inflate(R.layout.common_filter_view, this);
    recyclerView = ((RecyclerView)findViewById(R.id.recycleView));
    recyclerView.setLayoutManager(new LinearLayoutManager(paramContext, 0, false));
    seekBarLayot = ((LinearLayout)findViewById(R.id.seekBarLayot));
    seekBar = ((SeekBar)findViewById(R.id.seekBar));
    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener()
    {
      public void onProgressChanged(SeekBar paramAnonymousSeekBar, int paramAnonymousInt, boolean paramAnonymousBoolean)
      {
        if (mFilterAdjuster != null)
        {
          mFilterAdjuster.adjust(paramAnonymousInt);
          if (progressChangerListener != null) {
            progressChangerListener.onFilterProgressChanged();
          }
        }
      }
      
      public void onStartTrackingTouch(SeekBar paramAnonymousSeekBar) {}
      
      public void onStopTrackingTouch(SeekBar paramAnonymousSeekBar) {}
    });
  }
  
  public void addFilter(String paramString, int paramInt1, int paramInt2, int paramInt3, FilterTools.FilterType paramFilterType, boolean paramBoolean, final ExtractDecodeEditEncodeMux.ResultListener paramResultListener)
  {
    if ((paramFilterType == FilterTools.FilterType.NO_FILTER) && (paramResultListener != null))
    {
      paramResultListener.onResult(true, paramString, "");
      return;
    }
    String str1 = VideoUtil.createOutVideoPath(paramString);
    String str2 = VideoUtil.createFilterVideoName(paramString, paramFilterType, paramBoolean);
    extractDecodeEdit = new ExtractDecodeEditEncodeMux(mContext);
    extractDecodeEdit.setSource(paramString);
    paramString = extractDecodeEdit;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(str1);
    localStringBuilder.append(str2);
    paramString.setOutputFile(localStringBuilder.toString());
    extractDecodeEdit.setVideoOrientation(paramInt3);
    extractDecodeEdit.setFilterType(paramFilterType);
    extractDecodeEdit.setFilterProgress(getSeekBarProgress());
    extractDecodeEdit.testExtractDecodeEditEncodeMuxAudioVideo(new ExtractDecodeEditEncodeMux.ResultListener()
    {
      public void onResult(boolean paramAnonymousBoolean, String paramAnonymousString1, String paramAnonymousString2)
      {
        ExtractDecodeEditEncodeMux.ResultListener localResultListener = paramResultListener;
        if (localResultListener != null)
        {
          localResultListener.onResult(paramAnonymousBoolean, paramAnonymousString1, paramAnonymousString2);
          extractDecodeEdit.setHandlerThread(null);
        }
      }
    }, paramInt1, paramInt2);
  }
  
  public void destory()
  {
    mUIHandler.removeCallbacksAndMessages(null);
    if (adapter != null) {
      adapter = null;
    }
  }
  
  public int getSeekBarProgress()
  {
    return seekBar.getProgress();
  }
  
  public void initData(Bitmap paramBitmap, List paramList)
  {
    Bitmap localBitmap = VideoInfoUtil.scaleBitmap(paramBitmap, DpiUtil.dip2px(mContext, 70.0F), DpiUtil.dip2px(mContext, 70.0F));
    if ((paramList != null) && (paramList.size() != 0)) {
      paramBitmap = FilterTools.initFilter(mContext, localBitmap, paramList);
    } else {
      paramBitmap = FilterTools.initFilter(mContext, localBitmap);
    }
    if (paramBitmap.size() > 0) {
      selectImageFilter = ((FilterInfo)paramBitmap.get(0));
    }
    FilterTools.getFilterBitmap(mContext, paramBitmap, localBitmap, mUIHandler);
    adapter = new FilterAdapter(mContext, paramBitmap);
    recyclerView.setAdapter(adapter);
    adapter.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        FilterView localFilterView = FilterView.this;
        2 local2 = this;
        if (selectImageFilter != null) {
          this$0.selectImageFilter.isSelect = false;
        }
        local2 = this;
        FilterView.access$302(this$0, (FilterInfo)paramAnonymousView.getTag());
        this$0.selectImageFilter.isSelect = true;
        this$0.adapter.notifyDataSetChanged();
        paramAnonymousView = FilterTools.createFilterForType(this$0.selectImageFilter.type);
        if ((paramAnonymousView != null) && (this$0.filterChangerListener != null))
        {
          FilterView.access$102(this$0, new FilterTools.FilterAdjuster(paramAnonymousView));
          if (this$0.mFilterAdjuster.canAdjust())
          {
            this$0.seekBarLayot.setVisibility(0);
            this$0.seekBar.setProgress(this$0.seekBar.getMax());
          }
          else
          {
            this$0.seekBarLayot.setVisibility(8);
          }
          this$0.filterChangerListener.onFilterChanged(this$0.selectImageFilter.type, paramAnonymousView);
        }
      }
    });
  }
  
  public boolean isNeedFilter(FilterTools.FilterType paramFilterType)
  {
    return paramFilterType != FilterTools.FilterType.NO_FILTER;
  }
  
  public void setFilterChangerListener(FilterChangerListener paramFilterChangerListener)
  {
    filterChangerListener = paramFilterChangerListener;
  }
  
  public void setProgressChangerListener(FilterProgressChangerListener paramFilterProgressChangerListener)
  {
    progressChangerListener = paramFilterProgressChangerListener;
  }
  
  public static abstract interface FilterChangerListener
  {
    public abstract void onFilterChanged(FilterTools.FilterType paramFilterType, CommonFilter paramCommonFilter);
  }
  
  public static abstract interface FilterProgressChangerListener
  {
    public abstract void onFilterProgressChanged();
  }
  
  private class MainHandler
    extends Handler
  {
    private MainHandler() {}
    
    public void handleMessage(Message paramMessage)
    {
      if ((what == 200) && (adapter != null))
      {
        int i = arg1;
        adapter.notifyItemChanged(i);
      }
    }
  }
}
