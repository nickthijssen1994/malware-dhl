package com.jd.lib.unification.album.utils.permission.utils;

import android.app.Activity;
import android.content.ContextWrapper;
import android.os.Build.VERSION;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionFail;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionSuccess;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class PermissionUtils
{
  public PermissionUtils() {}
  
  public static void checkNull(Object paramObject, String paramString)
  {
    if (paramObject != null) {
      return;
    }
    throw new NullPointerException(paramString);
  }
  
  public static List findDeniedPermissions(Activity paramActivity, String... paramVarArgs)
  {
    ArrayList localArrayList = new ArrayList();
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      String str = paramVarArgs[i];
      if (paramActivity.checkSelfPermission(str) != 0) {
        localArrayList.add(str);
      }
      i += 1;
    }
    return localArrayList;
  }
  
  public static Method findMethodWithRequestCode(Class paramClass1, Class paramClass2, int paramInt)
  {
    paramClass1 = paramClass1.getDeclaredMethods();
    int j = paramClass1.length;
    int i = 0;
    while (i < j)
    {
      Method localMethod = paramClass1[i];
      if ((localMethod.isAnnotationPresent(paramClass2)) && (isEqualRequestCodeFromAnntation(localMethod, paramClass2, paramInt))) {
        return localMethod;
      }
      i += 1;
    }
    return null;
  }
  
  public static Activity getActivity(Object paramObject)
  {
    if ((paramObject instanceof android.app.Fragment)) {
      return ((android.app.Fragment)paramObject).getActivity();
    }
    if ((paramObject instanceof androidx.fragment.app.Fragment)) {
      return (Activity)((androidx.fragment.app.Fragment)paramObject).getActivity();
    }
    if ((paramObject instanceof Activity)) {
      return (Activity)paramObject;
    }
    throw new RuntimeException("??????????,??????activity??fragement?");
  }
  
  public static boolean isEqualRequestCodeFromAnntation(Method paramMethod, Class paramClass, int paramInt)
  {
    if (paramClass.equals(PermissionFail.class)) {
      return paramInt == ((PermissionFail)paramMethod.getAnnotation(PermissionFail.class)).requestCode();
    }
    if (paramClass.equals(PermissionSuccess.class)) {
      return paramInt == ((PermissionSuccess)paramMethod.getAnnotation(PermissionSuccess.class)).requestCode();
    }
    return false;
  }
  
  public static boolean needRequestPermission()
  {
    return Build.VERSION.SDK_INT >= 23;
  }
}
