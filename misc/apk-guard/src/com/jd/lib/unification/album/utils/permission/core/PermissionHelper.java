package com.jd.lib.unification.album.utils.permission.core;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.net.Uri;
import android.text.TextUtils;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionFail;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionSuccess;
import com.jd.lib.unification.album.utils.permission.fragement.PermissionsFragment;
import com.jd.lib.unification.album.utils.permission.utils.PermissionUtils;
import com.jd.unalbumwidget.R.string;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class PermissionHelper
{
  private static final String LOG_TAG = "PermissionHelper";
  private String hint = null;
  private List<Object> liseners = new ArrayList();
  private Object mObject;
  private String[] mPermission;
  private int mRequestCode;
  private PermissionsFragment permissionsFragment;
  
  private PermissionHelper(Object paramObject)
  {
    mObject = paramObject;
  }
  
  private boolean checkHasLisener()
  {
    List localList = liseners;
    return (localList != null) && (localList.size() > 0);
  }
  
  private void checkType()
  {
    Object localObject = mObject;
    if ((!(localObject instanceof Activity)) && (!(localObject instanceof androidx.fragment.app.Fragment)))
    {
      if ((localObject instanceof android.app.Fragment)) {
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(mObject.getClass().getName());
      ((StringBuilder)localObject).append(" is not supported");
      throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    }
  }
  
  private void doExecuteFail(int paramInt)
  {
    if (checkHasLisener())
    {
      Iterator localIterator = liseners.iterator();
      while (localIterator.hasNext()) {
        findAndExecuteMethod(localIterator.next(), paramInt, PermissionFail.class);
      }
    }
  }
  
  private void doExecuteSuccess(int paramInt)
  {
    if (checkHasLisener())
    {
      Iterator localIterator = liseners.iterator();
      while (localIterator.hasNext()) {
        findAndExecuteMethod(localIterator.next(), paramInt, PermissionSuccess.class);
      }
    }
  }
  
  private void executeMethod(Object paramObject, Method paramMethod)
  {
    if (paramMethod != null) {
      try
      {
        boolean bool = paramMethod.isAccessible();
        if (!bool) {
          paramMethod.setAccessible(true);
        }
        paramMethod.invoke(paramObject, new Object[0]);
        return;
      }
      catch (Exception paramObject)
      {
        paramObject.printStackTrace();
      }
    }
  }
  
  private void executePermissionsRequest(String[] paramArrayOfString, int paramInt)
  {
    if (!PermissionUtils.needRequestPermission()) {
      return;
    }
    checkType();
    ifNotCreatePermissionsFragment();
    permissionsFragment.requestPermissions(paramArrayOfString, paramInt);
  }
  
  private void findAndExecuteMethod(Object paramObject, int paramInt, Class paramClass)
  {
    executeMethod(paramObject, PermissionUtils.findMethodWithRequestCode(paramObject.getClass(), paramClass, paramInt));
  }
  
  private PermissionsFragment findPermissionsFragment(Activity paramActivity)
  {
    return (PermissionsFragment)paramActivity.getFragmentManager().findFragmentByTag("PermissionHelper");
  }
  
  private String getHintMessage()
  {
    if (TextUtils.isEmpty(hint)) {
      hint = PermissionUtils.getActivity(mObject).getString(R.string.uni_album_permission_hint);
    }
    return hint;
  }
  
  private PermissionsFragment ifNotCreatePermissionsFragment()
  {
    Object localObject = PermissionUtils.getActivity(mObject);
    permissionsFragment = findPermissionsFragment((Activity)localObject);
    int i;
    if (permissionsFragment == null) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      permissionsFragment = new PermissionsFragment();
      permissionsFragment.setPermissionHelper(this);
      localObject = ((Activity)localObject).getFragmentManager();
      ((FragmentManager)localObject).beginTransaction().add(permissionsFragment, "PermissionHelper").commitAllowingStateLoss();
      ((FragmentManager)localObject).executePendingTransactions();
    }
    return permissionsFragment;
  }
  
  private void requestPermissions(final int paramInt, String[] paramArrayOfString)
  {
    if ((PermissionUtils.needRequestPermission()) && (paramArrayOfString != null) && (paramArrayOfString.length != 0))
    {
      final List localList = PermissionUtils.findDeniedPermissions(PermissionUtils.getActivity(mObject), paramArrayOfString);
      if (localList.size() > 0)
      {
        int k = paramArrayOfString.length;
        int j = 0;
        int i = 0;
        while (j < k)
        {
          String str = paramArrayOfString[j];
          if ((i == 0) && (!shouldShowRequestPermissionRationale(str))) {
            i = 0;
          } else {
            i = 1;
          }
          j += 1;
        }
        if (i != 0)
        {
          showMessageOKCancel(paramInt, new DialogInterface.OnClickListener()
          {
            public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              paramAnonymousDialogInterface = PermissionHelper.this;
              List localList = localList;
              paramAnonymousDialogInterface.executePermissionsRequest((String[])localList.toArray(new String[localList.size()]), paramInt);
            }
          });
          return;
        }
        executePermissionsRequest((String[])localList.toArray(new String[localList.size()]), paramInt);
        return;
      }
      doExecuteSuccess(paramInt);
      return;
    }
    doExecuteSuccess(paramInt);
  }
  
  private void requestResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < paramArrayOfInt.length)
    {
      if (paramArrayOfInt[i] != 0) {
        localArrayList.add(paramArrayOfString[i]);
      }
      i += 1;
    }
    if (localArrayList.size() > 0)
    {
      showMissingPermissionDialog(paramInt);
      return;
    }
    doExecuteSuccess(paramInt);
  }
  
  private boolean shouldShowRequestPermissionRationale(String paramString)
  {
    if (!PermissionUtils.needRequestPermission()) {
      return false;
    }
    checkType();
    ifNotCreatePermissionsFragment();
    return permissionsFragment.shouldShowRequestPermissionRationale(paramString);
  }
  
  private void showMessageOKCancel(final int paramInt, final DialogInterface.OnClickListener paramOnClickListener)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(PermissionUtils.getActivity(mObject), 16974394);
    localBuilder.setTitle(PermissionUtils.getActivity(mObject).getString(R.string.uni_album_permission_title));
    localBuilder.setMessage(getHintMessage());
    localBuilder.setNegativeButton(PermissionUtils.getActivity(mObject).getString(R.string.uni_video_cancel), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        PermissionHelper.this.doExecuteFail(paramInt);
      }
    });
    localBuilder.setPositiveButton(PermissionUtils.getActivity(mObject).getString(R.string.uni_video_ok), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        DialogInterface.OnClickListener localOnClickListener = paramOnClickListener;
        if (localOnClickListener != null) {
          localOnClickListener.onClick(paramAnonymousDialogInterface, paramAnonymousInt);
        }
      }
    });
    localBuilder.setCancelable(false);
    localBuilder.show();
  }
  
  private void showMissingPermissionDialog(final int paramInt)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(PermissionUtils.getActivity(mObject), 16974394);
    localBuilder.setTitle(PermissionUtils.getActivity(mObject).getString(R.string.uni_album_permission_title));
    localBuilder.setMessage(PermissionUtils.getActivity(mObject).getString(R.string.uni_album_permission_msg));
    localBuilder.setNegativeButton(PermissionUtils.getActivity(mObject).getString(R.string.uni_video_cancel), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        PermissionHelper.this.doExecuteFail(paramInt);
      }
    });
    localBuilder.setPositiveButton(PermissionUtils.getActivity(mObject).getString(R.string.uni_video_ok), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        PermissionHelper.this.startAppSettings();
      }
    });
    localBuilder.setCancelable(false);
    localBuilder.show();
  }
  
  private void startAppSettings()
  {
    Intent localIntent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("package:");
    localStringBuilder.append(PermissionUtils.getActivity(mObject).getPackageName());
    localIntent.setData(Uri.parse(localStringBuilder.toString()));
    PermissionUtils.getActivity(mObject).startActivity(localIntent);
  }
  
  public static PermissionHelper with(Activity paramActivity)
  {
    return new PermissionHelper(paramActivity);
  }
  
  public static PermissionHelper with(android.app.Fragment paramFragment)
  {
    return new PermissionHelper(paramFragment);
  }
  
  public static PermissionHelper with(androidx.fragment.app.Fragment paramFragment)
  {
    return new PermissionHelper(paramFragment);
  }
  
  public PermissionHelper hintMessage(String paramString)
  {
    if (!TextUtils.isEmpty(paramString)) {
      hint = paramString;
    }
    return this;
  }
  
  public PermissionHelper lisener(Object... paramVarArgs)
  {
    if (paramVarArgs != null) {
      liseners = Arrays.asList(paramVarArgs);
    }
    return this;
  }
  
  public void onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt)
  {
    requestResult(paramInt, paramArrayOfString, paramArrayOfInt);
  }
  
  public PermissionHelper permissions(String... paramVarArgs)
  {
    mPermission = paramVarArgs;
    return this;
  }
  
  public void request()
  {
    requestPermissions(mRequestCode, mPermission);
  }
  
  public PermissionHelper requestCode(int paramInt)
  {
    mRequestCode = paramInt;
    return this;
  }
}
