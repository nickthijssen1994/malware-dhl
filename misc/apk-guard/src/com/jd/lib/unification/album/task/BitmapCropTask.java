package com.jd.lib.unification.album.task;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.RectF;
import android.os.AsyncTask;
import android.util.Log;
import com.jd.lib.unification.album.mInterface.BitmapCropCallback;
import com.jd.lib.unification.album.view.CropOverlayView.CropShape;
import java.io.IOException;

public class BitmapCropTask
  extends AsyncTask<Void, Void, Throwable>
{
  private static final String PAGE_KEY = "BitmapCropTask";
  private int cropOffsetX;
  private int cropOffsetY;
  private CropOverlayView.CropShape cropShape;
  private final BitmapCropCallback mCropCallback;
  private final RectF mCropRect;
  private int mCroppedImageHeight;
  private int mCroppedImageWidth;
  private final RectF mCurrentImageRect;
  private float mCurrentScale;
  private Bitmap mResultBitmap;
  private Bitmap mViewBitmap;
  
  public BitmapCropTask(Bitmap paramBitmap, RectF paramRectF1, RectF paramRectF2, float paramFloat, CropOverlayView.CropShape paramCropShape, BitmapCropCallback paramBitmapCropCallback)
  {
    mViewBitmap = paramBitmap;
    mCropRect = paramRectF1;
    mCurrentImageRect = paramRectF2;
    mCurrentScale = paramFloat;
    cropShape = paramCropShape;
    mCropCallback = paramBitmapCropCallback;
  }
  
  private Bitmap crop()
    throws IOException
  {
    cropOffsetX = Math.round((mCropRect.left - mCurrentImageRect.left) / mCurrentScale);
    cropOffsetY = Math.round((mCropRect.top - mCurrentImageRect.top) / mCurrentScale);
    mCroppedImageWidth = Math.round(mCropRect.width() / mCurrentScale);
    mCroppedImageHeight = Math.round(mCropRect.height() / mCurrentScale);
    if (cropOffsetX < 0) {
      cropOffsetX = 0;
    }
    if (cropOffsetY < 0) {
      cropOffsetY = 0;
    }
    if ((mViewBitmap.getWidth() < mCroppedImageWidth + cropOffsetX) || (mViewBitmap.getHeight() < mCroppedImageHeight + cropOffsetY))
    {
      int i = mCroppedImageWidth;
      int j = mCroppedImageHeight;
      int k = Math.min(mViewBitmap.getWidth(), mViewBitmap.getHeight());
      mCroppedImageHeight = k;
      mCroppedImageWidth = k;
      if (mViewBitmap.getWidth() > mViewBitmap.getHeight())
      {
        cropOffsetX += (i - mCroppedImageWidth) / 2;
        cropOffsetY = 0;
      }
      else
      {
        cropOffsetX = 0;
        cropOffsetY += (j - mCroppedImageHeight) / 2;
      }
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("cropShape:");
    ((StringBuilder)localObject).append(cropShape);
    ((StringBuilder)localObject).append(" cropOffsetX:");
    ((StringBuilder)localObject).append(cropOffsetX);
    ((StringBuilder)localObject).append(" cropOffsetY:");
    ((StringBuilder)localObject).append(cropOffsetY);
    ((StringBuilder)localObject).append(" mCroppedImageWidth:");
    ((StringBuilder)localObject).append(mCroppedImageWidth);
    ((StringBuilder)localObject).append(" mCroppedImageHeight:");
    ((StringBuilder)localObject).append(mCroppedImageHeight);
    ((StringBuilder)localObject).append(" bitmapWidth:");
    ((StringBuilder)localObject).append(mViewBitmap.getWidth());
    ((StringBuilder)localObject).append(" bitmapHeight:");
    ((StringBuilder)localObject).append(mViewBitmap.getHeight());
    Log.d("BitmapCropTask", ((StringBuilder)localObject).toString());
    localObject = Bitmap.createBitmap(mViewBitmap, cropOffsetX, cropOffsetY, mCroppedImageWidth, mCroppedImageHeight);
    if (cropShape == CropOverlayView.CropShape.CIRCLE) {
      mResultBitmap = getCirleBitmap((Bitmap)localObject);
    } else {
      mResultBitmap = ((Bitmap)localObject);
    }
    return mResultBitmap;
  }
  
  public static Bitmap getCirleBitmap(Bitmap paramBitmap)
  {
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Bitmap localBitmap = Bitmap.createBitmap(i, j, Bitmap.Config.ARGB_8888);
    Canvas localCanvas = new Canvas(localBitmap);
    Paint localPaint = new Paint();
    localPaint.setAntiAlias(true);
    localCanvas.drawOval(new RectF(0.0F, 0.0F, i, j), localPaint);
    localPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
    localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
    if ((paramBitmap != null) && (!paramBitmap.isRecycled())) {
      paramBitmap.recycle();
    }
    return localBitmap;
  }
  
  protected Throwable doInBackground(Void... paramVarArgs)
  {
    Log.d("BitmapCropTask", "doInBackground... ");
    paramVarArgs = mViewBitmap;
    if (paramVarArgs == null) {
      return new NullPointerException("ViewBitmap is null");
    }
    if (paramVarArgs.isRecycled()) {
      return new NullPointerException("ViewBitmap is recycled");
    }
    if (mCurrentImageRect.isEmpty()) {
      return new NullPointerException("CurrentImageRect is empty");
    }
    try
    {
      crop();
      mViewBitmap = null;
      return null;
    }
    catch (Throwable paramVarArgs)
    {
      paramVarArgs.printStackTrace();
    }
    return paramVarArgs;
  }
  
  protected void onPostExecute(Throwable paramThrowable)
  {
    BitmapCropCallback localBitmapCropCallback = mCropCallback;
    if (localBitmapCropCallback != null)
    {
      if (paramThrowable == null)
      {
        localBitmapCropCallback.onBitmapCropped(mResultBitmap);
        return;
      }
      localBitmapCropCallback.onCropFailure(paramThrowable);
    }
  }
}
