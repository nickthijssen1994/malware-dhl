package com.jd.lib.unification.album.filter.video;

import android.annotation.TargetApi;
import android.content.Context;
import android.media.MediaCodec;
import android.media.MediaCodec.BufferInfo;
import android.media.MediaCodecInfo;
import android.media.MediaCodecList;
import android.media.MediaExtractor;
import android.media.MediaFormat;
import android.media.MediaMuxer;
import android.os.Environment;
import android.os.HandlerThread;
import android.os.Looper;
import android.text.TextUtils;
import android.view.Surface;
import com.jd.lib.unification.album.filter.FilterTools.FilterType;
import com.jingdong.common.UnLog;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.atomic.AtomicReference;

@TargetApi(18)
public class ExtractDecodeEditEncodeMux
{
  private static final String LOGTAG = "ExtractDecodeEditEncodeMux";
  private static final int OUTPUT_AUDIO_AAC_PROFILE = 2;
  private static final int OUTPUT_AUDIO_BIT_RATE = 92160;
  private static final int OUTPUT_AUDIO_CHANNEL_COUNT = 1;
  private static final String OUTPUT_AUDIO_MIME_TYPE = "audio/mp4a-latm";
  private static final int OUTPUT_AUDIO_SAMPLE_RATE_HZ = 16000;
  private static final File OUTPUT_FILENAME_DIR = ;
  private static final int OUTPUT_VIDEO_COLOR_FORMAT = 2130708361;
  private static final int OUTPUT_VIDEO_FRAME_RATE = 15;
  private static final int OUTPUT_VIDEO_IFRAME_INTERVAL = 1;
  private static final String OUTPUT_VIDEO_MIME_TYPE = "video/avc";
  private static final int TIMEOUT_USEC = 10000;
  private HandlerThread handlerThread;
  Context mAppContext;
  private boolean mCopyAudio;
  private boolean mCopyVideo;
  private int mFilterProgress;
  private FilterTools.FilterType mFilterType = FilterTools.FilterType.NO_FILTER;
  private int mHeight = -1;
  private int mOutPutVideoRate = 2000000;
  private String mOutputFile;
  private String mPath;
  private int mVideoOrientation = 0;
  private int mWidth = -1;
  
  public ExtractDecodeEditEncodeMux(Context paramContext)
  {
    mAppContext = paramContext.getApplicationContext();
  }
  
  private MediaCodec createAudioDecoder(MediaFormat paramMediaFormat)
    throws IOException
  {
    MediaCodec localMediaCodec = MediaCodec.createDecoderByType(getMimeTypeFor(paramMediaFormat));
    localMediaCodec.configure(paramMediaFormat, null, null, 0);
    localMediaCodec.start();
    return localMediaCodec;
  }
  
  private MediaCodec createAudioEncoder(MediaCodecInfo paramMediaCodecInfo, MediaFormat paramMediaFormat)
    throws IOException
  {
    paramMediaCodecInfo = MediaCodec.createByCodecName(paramMediaCodecInfo.getName());
    paramMediaCodecInfo.configure(paramMediaFormat, null, null, 1);
    paramMediaCodecInfo.start();
    return paramMediaCodecInfo;
  }
  
  private MediaExtractor createExtractor()
    throws IOException
  {
    MediaExtractor localMediaExtractor = new MediaExtractor();
    localMediaExtractor.setDataSource(mPath);
    return localMediaExtractor;
  }
  
  private MediaMuxer createMuxer()
    throws IOException
  {
    if (TextUtils.isEmpty(mOutputFile)) {
      setOutputFile();
    }
    return new MediaMuxer(mOutputFile, 0);
  }
  
  private MediaCodec createVideoDecoder(MediaFormat paramMediaFormat, Surface paramSurface)
    throws IOException
  {
    MediaCodec localMediaCodec = MediaCodec.createDecoderByType(getMimeTypeFor(paramMediaFormat));
    localMediaCodec.configure(paramMediaFormat, paramSurface, null, 0);
    localMediaCodec.start();
    return localMediaCodec;
  }
  
  private MediaCodec createVideoEncoder(MediaCodecInfo paramMediaCodecInfo, MediaFormat paramMediaFormat, AtomicReference paramAtomicReference)
    throws IOException
  {
    paramMediaCodecInfo = MediaCodec.createByCodecName(paramMediaCodecInfo.getName());
    paramMediaCodecInfo.configure(paramMediaFormat, null, null, 1);
    paramAtomicReference.set(paramMediaCodecInfo.createInputSurface());
    paramMediaCodecInfo.start();
    return paramMediaCodecInfo;
  }
  
  private void doExtractDecodeEditEncodeMux(MediaExtractor paramMediaExtractor1, MediaExtractor paramMediaExtractor2, MediaCodec paramMediaCodec1, MediaCodec paramMediaCodec2, MediaCodec paramMediaCodec3, MediaCodec paramMediaCodec4, MediaMuxer paramMediaMuxer, InputSurface paramInputSurface, OutputSurfaceWithFilter paramOutputSurfaceWithFilter)
  {
    ByteBuffer[] arrayOfByteBuffer2;
    Object localObject2;
    Object localObject3;
    Object localObject1;
    MediaCodec.BufferInfo localBufferInfo;
    if (mCopyVideo)
    {
      arrayOfByteBuffer2 = paramMediaCodec1.getInputBuffers();
      localObject2 = paramMediaCodec1.getOutputBuffers();
      localObject3 = paramMediaCodec2.getOutputBuffers();
      localObject1 = new MediaCodec.BufferInfo();
      localBufferInfo = new MediaCodec.BufferInfo();
    }
    else
    {
      localObject2 = null;
      localObject3 = null;
      arrayOfByteBuffer2 = null;
      localObject1 = null;
      localBufferInfo = null;
    }
    ByteBuffer[] arrayOfByteBuffer3;
    ByteBuffer[] arrayOfByteBuffer4;
    ByteBuffer[] arrayOfByteBuffer1;
    Object localObject6;
    Object localObject4;
    if (mCopyAudio)
    {
      arrayOfByteBuffer3 = paramMediaCodec3.getInputBuffers();
      localObject5 = paramMediaCodec3.getOutputBuffers();
      arrayOfByteBuffer4 = paramMediaCodec4.getInputBuffers();
      arrayOfByteBuffer1 = paramMediaCodec4.getOutputBuffers();
      localObject6 = new MediaCodec.BufferInfo();
      localObject4 = new MediaCodec.BufferInfo();
    }
    else
    {
      arrayOfByteBuffer1 = null;
      localObject5 = null;
      localObject4 = null;
      localObject6 = null;
      arrayOfByteBuffer3 = null;
      arrayOfByteBuffer4 = null;
    }
    MediaFormat localMediaFormat2 = null;
    MediaFormat localMediaFormat1 = null;
    long l1 = 0L;
    int i = -1;
    int j = -1;
    int k = -1;
    boolean bool2 = false;
    boolean bool1 = false;
    int i1 = 0;
    boolean bool5 = false;
    int i4 = 0;
    boolean bool3 = false;
    int i3 = 0;
    int m = 0;
    boolean bool4 = false;
    int i5 = 0;
    boolean bool7 = false;
    int n = 0;
    boolean bool6 = false;
    Object localObject7 = localObject5;
    Object localObject5 = localObject3;
    Object localObject8 = localObject2;
    for (;;)
    {
      Object localObject9 = paramMediaCodec1;
      if (((!mCopyVideo) || (bool2)) && ((!mCopyAudio) || (bool1))) {
        break;
      }
      if (UnLog.D) {
        UnLog.d(LOGTAG, String.format("loop: V(%b){extracted:%d(done:%b) decoded:%d(done:%b) encoded:%d(done:%b)} A(%b){extracted:%d(done:%b) decoded:%d(done:%b) encoded:%d(done:%b) pending:%d} muxing:%b(V:%d,A:%d)", new Object[] { Boolean.valueOf(mCopyVideo), Integer.valueOf(i1), Boolean.valueOf(bool5), Integer.valueOf(i4), Boolean.valueOf(bool3), Integer.valueOf(i3), Boolean.valueOf(bool2), Boolean.valueOf(mCopyAudio), Integer.valueOf(m), Boolean.valueOf(bool4), Integer.valueOf(i5), Boolean.valueOf(bool7), Integer.valueOf(n), Boolean.valueOf(bool1), Integer.valueOf(k), Boolean.valueOf(bool6), Integer.valueOf(j), Integer.valueOf(i) }));
      }
      localObject3 = localObject6;
      int i6;
      long l2;
      if ((mCopyVideo) && (!bool5) && ((localMediaFormat2 == null) || (bool6)))
      {
        i2 = ((MediaCodec)localObject9).dequeueInputBuffer(10000L);
        if (i2 < 0)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "no video decoder input buffer");
          }
        }
        else
        {
          if (UnLog.D)
          {
            localObject2 = LOGTAG;
            localObject6 = new StringBuilder();
            ((StringBuilder)localObject6).append("video decoder: returned input buffer: ");
            ((StringBuilder)localObject6).append(i2);
            UnLog.d((String)localObject2, ((StringBuilder)localObject6).toString());
          }
          i6 = paramMediaExtractor1.readSampleData(arrayOfByteBuffer2[i2], 0);
          l2 = paramMediaExtractor1.getSampleTime();
          if (UnLog.D)
          {
            localObject2 = LOGTAG;
            localObject6 = new StringBuilder();
            ((StringBuilder)localObject6).append("video extractor: returned buffer of size ");
            ((StringBuilder)localObject6).append(i6);
            UnLog.d((String)localObject2, ((StringBuilder)localObject6).toString());
            localObject2 = LOGTAG;
            localObject6 = new StringBuilder();
            ((StringBuilder)localObject6).append("video extractor: returned buffer for time ");
            ((StringBuilder)localObject6).append(l2);
            UnLog.d((String)localObject2, ((StringBuilder)localObject6).toString());
          }
          if (i6 >= 0) {
            paramMediaCodec1.queueInputBuffer(i2, 0, i6, l2, paramMediaExtractor1.getSampleFlags());
          }
          paramMediaExtractor1.advance();
          if (i6 < 0)
          {
            if (UnLog.D) {
              UnLog.d(LOGTAG, "video extractor: EOS");
            }
            paramMediaCodec1.queueInputBuffer(i2, 0, 0, 0L, 4);
            bool5 = true;
          }
          i1 += 1;
        }
      }
      localObject2 = localObject1;
      localObject1 = localObject4;
      int i2 = m;
      boolean bool8 = bool4;
      if (mCopyAudio)
      {
        i2 = m;
        bool8 = bool4;
        if (!bool4) {
          if (localMediaFormat1 != null)
          {
            i2 = m;
            bool8 = bool4;
            if (!bool6) {}
          }
          else
          {
            i2 = paramMediaCodec3.dequeueInputBuffer(10000L);
            if (i2 < 0)
            {
              i2 = m;
              bool8 = bool4;
              if (UnLog.D)
              {
                UnLog.d(LOGTAG, "no audio decoder input buffer");
                i2 = m;
                bool8 = bool4;
              }
            }
            else
            {
              if (UnLog.D)
              {
                localObject4 = LOGTAG;
                localObject6 = new StringBuilder();
                ((StringBuilder)localObject6).append("audio decoder: returned input buffer: ");
                ((StringBuilder)localObject6).append(i2);
                UnLog.d((String)localObject4, ((StringBuilder)localObject6).toString());
              }
              i6 = paramMediaExtractor2.readSampleData(arrayOfByteBuffer3[i2], 0);
              l2 = paramMediaExtractor2.getSampleTime();
              if (UnLog.D)
              {
                localObject4 = LOGTAG;
                localObject6 = new StringBuilder();
                ((StringBuilder)localObject6).append("audio extractor: returned buffer of size ");
                ((StringBuilder)localObject6).append(i6);
                UnLog.d((String)localObject4, ((StringBuilder)localObject6).toString());
                localObject4 = LOGTAG;
                localObject6 = new StringBuilder();
                ((StringBuilder)localObject6).append("audio extractor: returned buffer for time ");
                ((StringBuilder)localObject6).append(l2);
                UnLog.d((String)localObject4, ((StringBuilder)localObject6).toString());
              }
              if (i6 >= 0) {
                paramMediaCodec3.queueInputBuffer(i2, 0, i6, l2, paramMediaExtractor2.getSampleFlags());
              }
              paramMediaExtractor2.advance();
              if (i6 < 0)
              {
                if (UnLog.D) {
                  UnLog.d(LOGTAG, "audio extractor: EOS");
                }
                paramMediaCodec3.queueInputBuffer(i2, 0, 0, 0L, 4);
                bool4 = true;
              }
              i2 = m + 1;
              bool8 = bool4;
            }
          }
        }
      }
      Object localObject10;
      if ((mCopyVideo) && (!bool3) && ((localMediaFormat2 == null) || (bool6)))
      {
        localObject4 = localObject2;
        m = ((MediaCodec)localObject9).dequeueOutputBuffer((MediaCodec.BufferInfo)localObject2, 10000L);
        if (m == -1)
        {
          if (UnLog.D)
          {
            UnLog.d(LOGTAG, "no video decoder output buffer");
            localObject4 = localObject8;
          }
          else
          {
            localObject4 = localObject8;
          }
        }
        else if (m == -3)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "video decoder: output buffers changed");
          }
          localObject4 = paramMediaCodec1.getOutputBuffers();
        }
        else if (m == -2)
        {
          localObject4 = paramMediaCodec1.getOutputFormat();
          if (UnLog.D)
          {
            localObject6 = LOGTAG;
            localObject9 = new StringBuilder();
            ((StringBuilder)localObject9).append("video decoder: output format changed: ");
            ((StringBuilder)localObject9).append(localObject4);
            UnLog.d((String)localObject6, ((StringBuilder)localObject9).toString());
            localObject4 = localObject8;
          }
          else
          {
            localObject4 = localObject8;
          }
        }
        else
        {
          if (UnLog.D)
          {
            localObject6 = LOGTAG;
            localObject10 = new StringBuilder();
            ((StringBuilder)localObject10).append("video decoder: returned output buffer: ");
            ((StringBuilder)localObject10).append(m);
            UnLog.d((String)localObject6, ((StringBuilder)localObject10).toString());
            localObject6 = LOGTAG;
            localObject10 = new StringBuilder();
            ((StringBuilder)localObject10).append("video decoder: returned buffer of size ");
            ((StringBuilder)localObject10).append(size);
            UnLog.d((String)localObject6, ((StringBuilder)localObject10).toString());
            localObject6 = LOGTAG;
            localObject10 = new StringBuilder();
            ((StringBuilder)localObject10).append("video decoder: returned buffer of flags ");
            ((StringBuilder)localObject10).append(flags);
            UnLog.d((String)localObject6, ((StringBuilder)localObject10).toString());
          }
          localObject6 = localObject8[m];
          if ((flags & 0x2) != 0)
          {
            if (UnLog.D) {
              UnLog.d(LOGTAG, "video decoder: codec config buffer");
            }
            ((MediaCodec)localObject9).releaseOutputBuffer(m, false);
            localObject4 = localObject8;
          }
          else
          {
            if (UnLog.D)
            {
              localObject6 = LOGTAG;
              localObject10 = new StringBuilder();
              ((StringBuilder)localObject10).append("video decoder: returned buffer for time ");
              ((StringBuilder)localObject10).append(presentationTimeUs);
              UnLog.d((String)localObject6, ((StringBuilder)localObject10).toString());
            }
            if (size != 0) {
              bool4 = true;
            } else {
              bool4 = false;
            }
            ((MediaCodec)localObject9).releaseOutputBuffer(m, bool4);
            if (bool4)
            {
              if (UnLog.D) {
                UnLog.d(LOGTAG, "output surface: await new image");
              }
              paramOutputSurfaceWithFilter.awaitNewImage();
              if (UnLog.D) {
                UnLog.d(LOGTAG, "output surface: draw image");
              }
              paramOutputSurfaceWithFilter.drawImage();
              paramInputSurface.setPresentationTime(presentationTimeUs * 1000L);
              if (UnLog.D) {
                UnLog.d(LOGTAG, "input surface: swap buffers");
              }
              paramInputSurface.swapBuffers();
              if (UnLog.D) {
                UnLog.d(LOGTAG, "video encoder: notified of new frame");
              }
            }
            if ((flags & 0x4) != 0)
            {
              if (UnLog.D) {
                UnLog.d(LOGTAG, "video decoder: EOS");
              }
              paramMediaCodec2.signalEndOfInputStream();
              bool3 = true;
            }
            i4 += 1;
            localObject4 = localObject8;
          }
        }
      }
      else
      {
        localObject4 = localObject8;
      }
      if ((mCopyAudio) && (!bool7))
      {
        m = k;
        if ((k == -1) && ((localMediaFormat1 == null) || (bool6)))
        {
          localObject6 = localObject3;
          i6 = paramMediaCodec3.dequeueOutputBuffer((MediaCodec.BufferInfo)localObject3, 10000L);
          if (i6 == -1)
          {
            if (UnLog.D) {
              UnLog.d(LOGTAG, "no audio decoder output buffer");
            }
          }
          else
          {
            if (i6 == -3)
            {
              if (UnLog.D) {
                UnLog.d(LOGTAG, "audio decoder: output buffers changed");
              }
              localObject7 = paramMediaCodec3.getOutputBuffers();
              break label2044;
            }
            if (i6 == -2)
            {
              localObject6 = paramMediaCodec3.getOutputFormat();
              if (UnLog.D)
              {
                localObject8 = LOGTAG;
                localObject9 = new StringBuilder();
                ((StringBuilder)localObject9).append("audio decoder: output format changed: ");
                ((StringBuilder)localObject9).append(localObject6);
                UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
              }
            }
            else
            {
              if (UnLog.D)
              {
                localObject8 = LOGTAG;
                localObject9 = new StringBuilder();
                ((StringBuilder)localObject9).append("audio decoder: returned output buffer: ");
                ((StringBuilder)localObject9).append(i6);
                UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
              }
              if (UnLog.D)
              {
                localObject8 = LOGTAG;
                localObject9 = new StringBuilder();
                ((StringBuilder)localObject9).append("audio decoder: returned buffer of size ");
                ((StringBuilder)localObject9).append(size);
                UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
              }
              localObject8 = localObject7[i6];
              if ((flags & 0x2) != 0)
              {
                if (UnLog.D) {
                  UnLog.d(LOGTAG, "audio decoder: codec config buffer");
                }
                paramMediaCodec3.releaseOutputBuffer(i6, false);
              }
              else
              {
                if (UnLog.D)
                {
                  localObject8 = LOGTAG;
                  localObject9 = new StringBuilder();
                  ((StringBuilder)localObject9).append("audio decoder: returned buffer for time ");
                  ((StringBuilder)localObject9).append(presentationTimeUs);
                  UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
                }
                if (UnLog.D)
                {
                  localObject6 = LOGTAG;
                  localObject8 = new StringBuilder();
                  ((StringBuilder)localObject8).append("audio decoder: output buffer is now pending: ");
                  ((StringBuilder)localObject8).append(m);
                  UnLog.d((String)localObject6, ((StringBuilder)localObject8).toString());
                }
                i5 += 1;
                m = i6;
                break label2044;
              }
            }
          }
        }
      }
      m = k;
      label2044:
      k = m;
      boolean bool9 = bool7;
      if (mCopyAudio)
      {
        k = m;
        bool9 = bool7;
        if (m != -1)
        {
          if (UnLog.D)
          {
            localObject6 = LOGTAG;
            localObject8 = new StringBuilder();
            ((StringBuilder)localObject8).append("audio decoder: attempting to process pending buffer: ");
            ((StringBuilder)localObject8).append(m);
            UnLog.d((String)localObject6, ((StringBuilder)localObject8).toString());
          }
          int i8 = paramMediaCodec4.dequeueInputBuffer(10000L);
          if (i8 == -1)
          {
            if (UnLog.D)
            {
              UnLog.d(LOGTAG, "no audio encoder input buffer");
              k = m;
              bool9 = bool7;
            }
            else
            {
              k = m;
              bool9 = bool7;
            }
          }
          else
          {
            if (UnLog.D)
            {
              localObject6 = LOGTAG;
              localObject8 = new StringBuilder();
              ((StringBuilder)localObject8).append("audio encoder: returned input buffer: ");
              ((StringBuilder)localObject8).append(i8);
              UnLog.d((String)localObject6, ((StringBuilder)localObject8).toString());
            }
            localObject6 = arrayOfByteBuffer4[i8];
            i6 = size;
            l2 = presentationTimeUs;
            if (UnLog.D)
            {
              localObject8 = LOGTAG;
              localObject9 = new StringBuilder();
              ((StringBuilder)localObject9).append("audio decoder: processing pending buffer: ");
              ((StringBuilder)localObject9).append(m);
              UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
            }
            if (UnLog.D)
            {
              localObject8 = LOGTAG;
              localObject9 = new StringBuilder();
              ((StringBuilder)localObject9).append("audio decoder: pending buffer of size ");
              ((StringBuilder)localObject9).append(i6);
              UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
              localObject8 = LOGTAG;
              localObject9 = new StringBuilder();
              ((StringBuilder)localObject9).append("audio decoder: pending buffer for time ");
              ((StringBuilder)localObject9).append(l2);
              UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
            }
            if (i6 >= 0)
            {
              localObject8 = localObject7[m].duplicate();
              ((ByteBuffer)localObject8).position(offset);
              ((ByteBuffer)localObject6).position(0);
              int i7 = ((ByteBuffer)localObject6).limit();
              k = i7;
              if (i6 <= i7) {
                k = i6;
              }
              ((ByteBuffer)localObject8).limit(offset + k);
              ((ByteBuffer)localObject6).put((ByteBuffer)localObject8);
              paramMediaCodec4.queueInputBuffer(i8, 0, i6, l2, flags);
            }
            paramMediaCodec3.releaseOutputBuffer(m, false);
            if ((flags & 0x4) != 0)
            {
              if (UnLog.D) {
                UnLog.d(LOGTAG, "audio decoder: EOS");
              }
              k = -1;
              bool9 = true;
            }
            else
            {
              k = -1;
              bool9 = bool7;
            }
          }
        }
      }
      if ((mCopyVideo) && (!bool2) && ((localMediaFormat2 == null) || (bool6)))
      {
        m = paramMediaCodec2.dequeueOutputBuffer(localBufferInfo, 10000L);
        if (m == -1)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "no video encoder output buffer");
          }
        }
        else if (m == -3)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "video encoder: output buffers changed");
          }
          localObject5 = paramMediaCodec2.getOutputBuffers();
        }
        else if (m == -2)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "video encoder: output format changed");
          }
          localMediaFormat2 = paramMediaCodec2.getOutputFormat();
        }
        else
        {
          if (UnLog.D)
          {
            localObject6 = LOGTAG;
            localObject8 = new StringBuilder();
            ((StringBuilder)localObject8).append("video encoder: returned output buffer: ");
            ((StringBuilder)localObject8).append(m);
            UnLog.d((String)localObject6, ((StringBuilder)localObject8).toString());
            localObject6 = LOGTAG;
            localObject8 = new StringBuilder();
            ((StringBuilder)localObject8).append("video encoder: returned buffer of size ");
            ((StringBuilder)localObject8).append(size);
            UnLog.d((String)localObject6, ((StringBuilder)localObject8).toString());
          }
          localObject6 = localObject5[m];
          if ((flags & 0x2) != 0)
          {
            if (UnLog.D) {
              UnLog.d(LOGTAG, "video encoder: codec config buffer");
            }
            paramMediaCodec2.releaseOutputBuffer(m, false);
          }
          else
          {
            if (UnLog.D)
            {
              localObject8 = LOGTAG;
              localObject9 = new StringBuilder();
              ((StringBuilder)localObject9).append("video encoder: returned buffer for time ");
              ((StringBuilder)localObject9).append(presentationTimeUs);
              UnLog.d((String)localObject8, ((StringBuilder)localObject9).toString());
            }
            if (size != 0) {
              paramMediaMuxer.writeSampleData(j, (ByteBuffer)localObject6, localBufferInfo);
            }
            if ((flags & 0x4) != 0)
            {
              if (UnLog.D) {
                UnLog.d(LOGTAG, "video encoder: EOS");
              }
              bool2 = true;
            }
            paramMediaCodec2.releaseOutputBuffer(m, false);
            i3 += 1;
          }
        }
      }
      localObject6 = paramMediaMuxer;
      if ((mCopyAudio) && (!bool1) && ((localMediaFormat1 == null) || (bool6)))
      {
        localObject8 = localObject1;
        m = paramMediaCodec4.dequeueOutputBuffer((MediaCodec.BufferInfo)localObject1, 10000L);
        if (m == -1)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "no audio encoder output buffer");
          }
        }
        else if (m == -3)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "audio encoder: output buffers changed");
          }
          arrayOfByteBuffer1 = paramMediaCodec4.getOutputBuffers();
        }
        else if (m == -2)
        {
          if (UnLog.D) {
            UnLog.d(LOGTAG, "audio encoder: output format changed");
          }
          localMediaFormat1 = paramMediaCodec4.getOutputFormat();
        }
        else
        {
          if (UnLog.D)
          {
            localObject9 = LOGTAG;
            localObject10 = new StringBuilder();
            ((StringBuilder)localObject10).append("audio encoder: returned output buffer: ");
            ((StringBuilder)localObject10).append(m);
            UnLog.d((String)localObject9, ((StringBuilder)localObject10).toString());
            localObject9 = LOGTAG;
            localObject10 = new StringBuilder();
            ((StringBuilder)localObject10).append("audio encoder: returned buffer of size ");
            ((StringBuilder)localObject10).append(size);
            UnLog.d((String)localObject9, ((StringBuilder)localObject10).toString());
          }
          localObject9 = arrayOfByteBuffer1[m];
          if ((flags & 0x2) != 0)
          {
            if (UnLog.D) {
              UnLog.d(LOGTAG, "audio encoder: codec config buffer");
            }
            paramMediaCodec4.releaseOutputBuffer(m, false);
          }
          else
          {
            if (UnLog.D)
            {
              localObject10 = LOGTAG;
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("audio encoder: returned buffer for time ");
              localStringBuilder.append(presentationTimeUs);
              UnLog.d((String)localObject10, localStringBuilder.toString());
            }
            if (l1 == 0L)
            {
              l1 = presentationTimeUs;
            }
            else
            {
              if (l1 > presentationTimeUs) {
                presentationTimeUs = (l1 + 1L);
              }
              l1 = presentationTimeUs;
            }
            if (size != 0) {
              ((MediaMuxer)localObject6).writeSampleData(i, (ByteBuffer)localObject9, (MediaCodec.BufferInfo)localObject8);
            }
            if ((flags & 0x4) != 0)
            {
              if (UnLog.D) {
                UnLog.d(LOGTAG, "audio encoder: EOS");
              }
              bool1 = true;
            }
            paramMediaCodec4.releaseOutputBuffer(m, false);
            n += 1;
          }
        }
      }
      localObject9 = localObject1;
      if ((!bool6) && ((!mCopyAudio) || (localMediaFormat1 != null)) && ((!mCopyVideo) || (localMediaFormat2 != null)))
      {
        if (mCopyVideo)
        {
          UnLog.d(LOGTAG, "muxer: adding video track.");
          j = ((MediaMuxer)localObject6).addTrack(localMediaFormat2);
        }
        if (mCopyAudio)
        {
          UnLog.d(LOGTAG, "muxer: adding audio track.");
          i = ((MediaMuxer)localObject6).addTrack(localMediaFormat1);
        }
        UnLog.d(LOGTAG, "muxer: starting");
        paramMediaMuxer.start();
        localObject1 = localObject2;
        bool6 = true;
        localObject8 = localObject4;
        localObject6 = localObject3;
        localObject4 = localObject9;
        m = i2;
        bool4 = bool8;
        bool7 = bool9;
      }
      else
      {
        localObject1 = localObject2;
        localObject8 = localObject4;
        localObject6 = localObject3;
        localObject4 = localObject9;
        m = i2;
        bool4 = bool8;
        bool7 = bool9;
      }
    }
  }
  
  /* Error */
  private void extractDecodeEditEncodeMux()
    throws java.lang.Exception
  {
    // Byte code:
    //   0: ldc 38
    //   2: invokestatic 466	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:selectCodec	(Ljava/lang/String;)Landroid/media/MediaCodecInfo;
    //   5: astore 5
    //   7: aload 5
    //   9: ifnonnull +19 -> 28
    //   12: getstatic 469	com/jingdong/common/UnLog:E	Z
    //   15: ifeq +1777 -> 1792
    //   18: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   21: ldc_w 471
    //   24: invokestatic 474	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;)V
    //   27: return
    //   28: ldc 26
    //   30: invokestatic 466	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:selectCodec	(Ljava/lang/String;)Landroid/media/MediaCodecInfo;
    //   33: astore 11
    //   35: aload 11
    //   37: ifnonnull +19 -> 56
    //   40: getstatic 469	com/jingdong/common/UnLog:E	Z
    //   43: ifeq +1749 -> 1792
    //   46: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   49: ldc_w 476
    //   52: invokestatic 474	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;)V
    //   55: return
    //   56: aconst_null
    //   57: astore 16
    //   59: aconst_null
    //   60: astore 13
    //   62: aload_0
    //   63: getfield 184	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mCopyVideo	Z
    //   66: istore_3
    //   67: iload_3
    //   68: ifeq +493 -> 561
    //   71: aload_0
    //   72: invokespecial 478	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createExtractor	()Landroid/media/MediaExtractor;
    //   75: astore 6
    //   77: aload 6
    //   79: astore 4
    //   81: aload 6
    //   83: aload_0
    //   84: aload 6
    //   86: invokespecial 482	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:getAndSelectVideoTrackIndex	(Landroid/media/MediaExtractor;)I
    //   89: invokevirtual 486	android/media/MediaExtractor:getTrackFormat	(I)Landroid/media/MediaFormat;
    //   92: astore 8
    //   94: aload_0
    //   95: getfield 80	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mVideoOrientation	I
    //   98: istore_1
    //   99: iload_1
    //   100: bipush 90
    //   102: if_icmpeq +15 -> 117
    //   105: aload_0
    //   106: getfield 80	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mVideoOrientation	I
    //   109: istore_1
    //   110: iload_1
    //   111: sipush 270
    //   114: if_icmpne +21 -> 135
    //   117: aload_0
    //   118: getfield 78	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mHeight	I
    //   121: istore_1
    //   122: aload_0
    //   123: aload_0
    //   124: getfield 76	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mWidth	I
    //   127: putfield 78	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mHeight	I
    //   130: aload_0
    //   131: iload_1
    //   132: putfield 76	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mWidth	I
    //   135: ldc 38
    //   137: aload_0
    //   138: getfield 76	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mWidth	I
    //   141: aload_0
    //   142: getfield 78	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mHeight	I
    //   145: invokestatic 492	android/media/MediaFormat:createVideoFormat	(Ljava/lang/String;II)Landroid/media/MediaFormat;
    //   148: astore 7
    //   150: aload 7
    //   152: ldc_w 494
    //   155: ldc 32
    //   157: invokevirtual 497	android/media/MediaFormat:setInteger	(Ljava/lang/String;I)V
    //   160: aload 8
    //   162: ldc_w 499
    //   165: invokevirtual 503	android/media/MediaFormat:getInteger	(Ljava/lang/String;)I
    //   168: istore_1
    //   169: goto +26 -> 195
    //   172: astore 9
    //   174: getstatic 469	com/jingdong/common/UnLog:E	Z
    //   177: istore_3
    //   178: iload_3
    //   179: ifeq +14 -> 193
    //   182: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   185: aload 9
    //   187: invokevirtual 504	java/lang/Exception:toString	()Ljava/lang/String;
    //   190: invokestatic 474	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;)V
    //   193: iconst_m1
    //   194: istore_1
    //   195: iload_1
    //   196: istore_2
    //   197: iload_1
    //   198: ifgt +15 -> 213
    //   201: aload_0
    //   202: getfield 76	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mWidth	I
    //   205: aload_0
    //   206: getfield 78	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mHeight	I
    //   209: invokestatic 510	com/jd/lib/unification/album/filter/video/VideoUtil:getVideoBitRate	(II)I
    //   212: istore_2
    //   213: aload 7
    //   215: ldc_w 499
    //   218: iload_2
    //   219: invokevirtual 497	android/media/MediaFormat:setInteger	(Ljava/lang/String;I)V
    //   222: aload 7
    //   224: ldc_w 512
    //   227: bipush 15
    //   229: invokevirtual 497	android/media/MediaFormat:setInteger	(Ljava/lang/String;I)V
    //   232: aload 7
    //   234: ldc_w 514
    //   237: iconst_1
    //   238: invokevirtual 497	android/media/MediaFormat:setInteger	(Ljava/lang/String;I)V
    //   241: getstatic 201	com/jingdong/common/UnLog:D	Z
    //   244: istore_3
    //   245: iload_3
    //   246: ifeq +44 -> 290
    //   249: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   252: astore 9
    //   254: new 236	java/lang/StringBuilder
    //   257: dup
    //   258: invokespecial 237	java/lang/StringBuilder:<init>	()V
    //   261: astore 10
    //   263: aload 10
    //   265: ldc_w 516
    //   268: invokevirtual 243	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   271: pop
    //   272: aload 10
    //   274: aload 7
    //   276: invokevirtual 305	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   279: pop
    //   280: aload 9
    //   282: aload 10
    //   284: invokevirtual 249	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   287: invokestatic 226	com/jingdong/common/UnLog:d	(Ljava/lang/String;Ljava/lang/String;)V
    //   290: getstatic 201	com/jingdong/common/UnLog:D	Z
    //   293: istore_3
    //   294: iload_3
    //   295: ifeq +46 -> 341
    //   298: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   301: astore 9
    //   303: new 236	java/lang/StringBuilder
    //   306: dup
    //   307: invokespecial 237	java/lang/StringBuilder:<init>	()V
    //   310: astore 10
    //   312: aload 10
    //   314: ldc_w 518
    //   317: invokevirtual 243	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   320: pop
    //   321: aload 10
    //   323: aload_0
    //   324: getfield 80	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mVideoOrientation	I
    //   327: invokevirtual 246	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   330: pop
    //   331: aload 9
    //   333: aload 10
    //   335: invokevirtual 249	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   338: invokestatic 226	com/jingdong/common/UnLog:d	(Ljava/lang/String;Ljava/lang/String;)V
    //   341: getstatic 201	com/jingdong/common/UnLog:D	Z
    //   344: istore_3
    //   345: iload_3
    //   346: ifeq +43 -> 389
    //   349: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   352: astore 9
    //   354: new 236	java/lang/StringBuilder
    //   357: dup
    //   358: invokespecial 237	java/lang/StringBuilder:<init>	()V
    //   361: astore 10
    //   363: aload 10
    //   365: ldc_w 520
    //   368: invokevirtual 243	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   371: pop
    //   372: aload 10
    //   374: iload_2
    //   375: invokevirtual 246	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   378: pop
    //   379: aload 9
    //   381: aload 10
    //   383: invokevirtual 249	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   386: invokestatic 226	com/jingdong/common/UnLog:d	(Ljava/lang/String;Ljava/lang/String;)V
    //   389: new 176	java/util/concurrent/atomic/AtomicReference
    //   392: dup
    //   393: invokespecial 521	java/util/concurrent/atomic/AtomicReference:<init>	()V
    //   396: astore 9
    //   398: aload_0
    //   399: aload 5
    //   401: aload 7
    //   403: aload 9
    //   405: invokespecial 523	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createVideoEncoder	(Landroid/media/MediaCodecInfo;Landroid/media/MediaFormat;Ljava/util/concurrent/atomic/AtomicReference;)Landroid/media/MediaCodec;
    //   408: astore 5
    //   410: aload 5
    //   412: iconst_1
    //   413: invokevirtual 527	android/media/MediaCodec:setVideoScalingMode	(I)V
    //   416: new 345	com/jd/lib/unification/album/filter/video/InputSurface
    //   419: dup
    //   420: aload 9
    //   422: invokevirtual 531	java/util/concurrent/atomic/AtomicReference:get	()Ljava/lang/Object;
    //   425: checkcast 533	android/view/Surface
    //   428: invokespecial 536	com/jd/lib/unification/album/filter/video/InputSurface:<init>	(Landroid/view/Surface;)V
    //   431: astore 7
    //   433: aload 7
    //   435: invokevirtual 539	com/jd/lib/unification/album/filter/video/InputSurface:makeCurrent	()V
    //   438: new 333	com/jd/lib/unification/album/filter/video/OutputSurfaceWithFilter
    //   441: dup
    //   442: aload_0
    //   443: getfield 95	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mAppContext	Landroid/content/Context;
    //   446: aload_0
    //   447: getfield 87	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mFilterType	Lcom/jd/lib/unification/album/filter/FilterTools$FilterType;
    //   450: aload_0
    //   451: getfield 541	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mFilterProgress	I
    //   454: aload_0
    //   455: getfield 76	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mWidth	I
    //   458: aload_0
    //   459: getfield 78	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mHeight	I
    //   462: aload_0
    //   463: getfield 80	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mVideoOrientation	I
    //   466: invokespecial 544	com/jd/lib/unification/album/filter/video/OutputSurfaceWithFilter:<init>	(Landroid/content/Context;Lcom/jd/lib/unification/album/filter/FilterTools$FilterType;IIII)V
    //   469: astore 9
    //   471: aload_0
    //   472: aload 8
    //   474: aload 9
    //   476: invokevirtual 547	com/jd/lib/unification/album/filter/video/OutputSurfaceWithFilter:getSurface	()Landroid/view/Surface;
    //   479: invokespecial 549	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createVideoDecoder	(Landroid/media/MediaFormat;Landroid/view/Surface;)Landroid/media/MediaCodec;
    //   482: astore 10
    //   484: aload 6
    //   486: astore 8
    //   488: aload 7
    //   490: astore 4
    //   492: aload 9
    //   494: astore 6
    //   496: aload 10
    //   498: astore 7
    //   500: goto +76 -> 576
    //   503: astore 11
    //   505: aload 9
    //   507: astore 6
    //   509: goto +8 -> 517
    //   512: astore 11
    //   514: aconst_null
    //   515: astore 6
    //   517: goto +11 -> 528
    //   520: astore 11
    //   522: aconst_null
    //   523: astore 6
    //   525: aconst_null
    //   526: astore 7
    //   528: aconst_null
    //   529: astore 12
    //   531: aconst_null
    //   532: astore 9
    //   534: aconst_null
    //   535: astore 10
    //   537: aload 4
    //   539: astore 8
    //   541: aload 7
    //   543: astore 4
    //   545: aload 12
    //   547: astore 7
    //   549: goto +169 -> 718
    //   552: astore 10
    //   554: aload 4
    //   556: astore 13
    //   558: goto +795 -> 1353
    //   561: aconst_null
    //   562: astore 8
    //   564: aconst_null
    //   565: astore 6
    //   567: aconst_null
    //   568: astore 7
    //   570: aconst_null
    //   571: astore 5
    //   573: aconst_null
    //   574: astore 4
    //   576: aload_0
    //   577: getfield 196	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mCopyAudio	Z
    //   580: istore_3
    //   581: iload_3
    //   582: ifeq +181 -> 763
    //   585: aload_0
    //   586: invokespecial 478	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createExtractor	()Landroid/media/MediaExtractor;
    //   589: astore 9
    //   591: aload_0
    //   592: aload 9
    //   594: invokespecial 552	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:getAndSelectAudioTrackIndex	(Landroid/media/MediaExtractor;)I
    //   597: istore_1
    //   598: iload_1
    //   599: iconst_m1
    //   600: if_icmpne +25 -> 625
    //   603: aload_0
    //   604: iconst_0
    //   605: putfield 196	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:mCopyAudio	Z
    //   608: aconst_null
    //   609: astore 10
    //   611: aconst_null
    //   612: astore 12
    //   614: aload 9
    //   616: astore 11
    //   618: aload 12
    //   620: astore 9
    //   622: goto +150 -> 772
    //   625: aload 9
    //   627: iload_1
    //   628: invokevirtual 486	android/media/MediaExtractor:getTrackFormat	(I)Landroid/media/MediaFormat;
    //   631: astore 10
    //   633: ldc 26
    //   635: aload 10
    //   637: ldc_w 554
    //   640: invokevirtual 503	android/media/MediaFormat:getInteger	(Ljava/lang/String;)I
    //   643: aload 10
    //   645: ldc_w 556
    //   648: invokevirtual 503	android/media/MediaFormat:getInteger	(Ljava/lang/String;)I
    //   651: invokestatic 559	android/media/MediaFormat:createAudioFormat	(Ljava/lang/String;II)Landroid/media/MediaFormat;
    //   654: astore 12
    //   656: aload 12
    //   658: ldc_w 499
    //   661: ldc 21
    //   663: invokevirtual 497	android/media/MediaFormat:setInteger	(Ljava/lang/String;I)V
    //   666: aload 12
    //   668: ldc_w 561
    //   671: iconst_2
    //   672: invokevirtual 497	android/media/MediaFormat:setInteger	(Ljava/lang/String;I)V
    //   675: aload_0
    //   676: aload 11
    //   678: aload 12
    //   680: invokespecial 563	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createAudioEncoder	(Landroid/media/MediaCodecInfo;Landroid/media/MediaFormat;)Landroid/media/MediaCodec;
    //   683: astore 12
    //   685: aload_0
    //   686: aload 10
    //   688: invokespecial 565	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createAudioDecoder	(Landroid/media/MediaFormat;)Landroid/media/MediaCodec;
    //   691: astore 10
    //   693: aload 9
    //   695: astore 11
    //   697: aload 12
    //   699: astore 9
    //   701: goto +71 -> 772
    //   704: astore 11
    //   706: aload 12
    //   708: astore 10
    //   710: goto +8 -> 718
    //   713: astore 11
    //   715: aconst_null
    //   716: astore 10
    //   718: aconst_null
    //   719: astore 15
    //   721: aconst_null
    //   722: astore 17
    //   724: aload 11
    //   726: astore 14
    //   728: aload 9
    //   730: astore 12
    //   732: aload 8
    //   734: astore 13
    //   736: aload 5
    //   738: astore 8
    //   740: aload 6
    //   742: astore 11
    //   744: aload 17
    //   746: astore 6
    //   748: aload 10
    //   750: astore 5
    //   752: aload 15
    //   754: astore 9
    //   756: aload 14
    //   758: astore 10
    //   760: goto +617 -> 1377
    //   763: aconst_null
    //   764: astore 11
    //   766: aconst_null
    //   767: astore 10
    //   769: aconst_null
    //   770: astore 9
    //   772: aload_0
    //   773: invokespecial 567	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:createMuxer	()Landroid/media/MediaMuxer;
    //   776: astore 14
    //   778: aload 14
    //   780: astore 12
    //   782: aload_0
    //   783: aload 8
    //   785: aload 11
    //   787: aload 7
    //   789: aload 5
    //   791: aload 10
    //   793: aload 9
    //   795: aload 14
    //   797: aload 4
    //   799: aload 6
    //   801: invokespecial 569	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:doExtractDecodeEditEncodeMux	(Landroid/media/MediaExtractor;Landroid/media/MediaExtractor;Landroid/media/MediaCodec;Landroid/media/MediaCodec;Landroid/media/MediaCodec;Landroid/media/MediaCodec;Landroid/media/MediaMuxer;Lcom/jd/lib/unification/album/filter/video/InputSurface;Lcom/jd/lib/unification/album/filter/video/OutputSurfaceWithFilter;)V
    //   804: getstatic 201	com/jingdong/common/UnLog:D	Z
    //   807: ifeq +12 -> 819
    //   810: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   813: ldc_w 571
    //   816: invokestatic 226	com/jingdong/common/UnLog:d	(Ljava/lang/String;Ljava/lang/String;)V
    //   819: aload 13
    //   821: astore 12
    //   823: aload 8
    //   825: ifnull +32 -> 857
    //   828: aload 8
    //   830: invokevirtual 574	android/media/MediaExtractor:release	()V
    //   833: aload 13
    //   835: astore 12
    //   837: goto +20 -> 857
    //   840: astore 8
    //   842: aload 8
    //   844: astore 12
    //   846: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   849: ldc_w 576
    //   852: aload 8
    //   854: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   857: aload 11
    //   859: ifnull +36 -> 895
    //   862: aload 11
    //   864: invokevirtual 574	android/media/MediaExtractor:release	()V
    //   867: goto +28 -> 895
    //   870: astore 8
    //   872: aload 8
    //   874: astore 11
    //   876: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   879: ldc_w 581
    //   882: aload 8
    //   884: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   887: aload 12
    //   889: ifnonnull +6 -> 895
    //   892: goto +7 -> 899
    //   895: aload 12
    //   897: astore 11
    //   899: aload 11
    //   901: astore 8
    //   903: aload 7
    //   905: ifnull +46 -> 951
    //   908: aload 7
    //   910: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   913: aload 7
    //   915: invokevirtual 585	android/media/MediaCodec:release	()V
    //   918: aload 11
    //   920: astore 8
    //   922: goto +29 -> 951
    //   925: astore 7
    //   927: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   930: ldc_w 587
    //   933: aload 7
    //   935: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   938: aload 11
    //   940: astore 8
    //   942: aload 11
    //   944: ifnonnull +7 -> 951
    //   947: aload 7
    //   949: astore 8
    //   951: aload 8
    //   953: astore 7
    //   955: aload 6
    //   957: ifnull +41 -> 998
    //   960: aload 6
    //   962: invokevirtual 588	com/jd/lib/unification/album/filter/video/OutputSurfaceWithFilter:release	()V
    //   965: aload 8
    //   967: astore 7
    //   969: goto +29 -> 998
    //   972: astore 6
    //   974: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   977: ldc_w 590
    //   980: aload 6
    //   982: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   985: aload 8
    //   987: astore 7
    //   989: aload 8
    //   991: ifnonnull +7 -> 998
    //   994: aload 6
    //   996: astore 7
    //   998: aload 7
    //   1000: astore 6
    //   1002: aload 5
    //   1004: ifnull +46 -> 1050
    //   1007: aload 5
    //   1009: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1012: aload 5
    //   1014: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1017: aload 7
    //   1019: astore 6
    //   1021: goto +29 -> 1050
    //   1024: astore 5
    //   1026: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1029: ldc_w 592
    //   1032: aload 5
    //   1034: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1037: aload 7
    //   1039: astore 6
    //   1041: aload 7
    //   1043: ifnonnull +7 -> 1050
    //   1046: aload 5
    //   1048: astore 6
    //   1050: aload 6
    //   1052: astore 5
    //   1054: aload 10
    //   1056: ifnull +46 -> 1102
    //   1059: aload 10
    //   1061: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1064: aload 10
    //   1066: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1069: aload 6
    //   1071: astore 5
    //   1073: goto +29 -> 1102
    //   1076: astore 7
    //   1078: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1081: ldc_w 594
    //   1084: aload 7
    //   1086: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1089: aload 6
    //   1091: astore 5
    //   1093: aload 6
    //   1095: ifnonnull +7 -> 1102
    //   1098: aload 7
    //   1100: astore 5
    //   1102: aload 5
    //   1104: astore 6
    //   1106: aload 9
    //   1108: ifnull +46 -> 1154
    //   1111: aload 9
    //   1113: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1116: aload 9
    //   1118: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1121: aload 5
    //   1123: astore 6
    //   1125: goto +29 -> 1154
    //   1128: astore 7
    //   1130: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1133: ldc_w 596
    //   1136: aload 7
    //   1138: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1141: aload 5
    //   1143: astore 6
    //   1145: aload 5
    //   1147: ifnonnull +7 -> 1154
    //   1150: aload 7
    //   1152: astore 6
    //   1154: aload 6
    //   1156: astore 5
    //   1158: aload 14
    //   1160: ifnull +46 -> 1206
    //   1163: aload 14
    //   1165: invokevirtual 597	android/media/MediaMuxer:stop	()V
    //   1168: aload 14
    //   1170: invokevirtual 598	android/media/MediaMuxer:release	()V
    //   1173: aload 6
    //   1175: astore 5
    //   1177: goto +29 -> 1206
    //   1180: astore 7
    //   1182: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1185: ldc_w 600
    //   1188: aload 7
    //   1190: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1193: aload 6
    //   1195: astore 5
    //   1197: aload 6
    //   1199: ifnonnull +7 -> 1206
    //   1202: aload 7
    //   1204: astore 5
    //   1206: aload 5
    //   1208: astore 6
    //   1210: aload 4
    //   1212: ifnull +41 -> 1253
    //   1215: aload 4
    //   1217: invokevirtual 601	com/jd/lib/unification/album/filter/video/InputSurface:release	()V
    //   1220: aload 5
    //   1222: astore 6
    //   1224: goto +29 -> 1253
    //   1227: astore 4
    //   1229: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1232: ldc_w 603
    //   1235: aload 4
    //   1237: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1240: aload 5
    //   1242: astore 6
    //   1244: aload 5
    //   1246: ifnonnull +7 -> 1253
    //   1249: aload 4
    //   1251: astore 6
    //   1253: aload 6
    //   1255: ifnonnull +4 -> 1259
    //   1258: return
    //   1259: aload 6
    //   1261: athrow
    //   1262: astore 13
    //   1264: aload 10
    //   1266: astore 15
    //   1268: aload 9
    //   1270: astore 14
    //   1272: aload 12
    //   1274: astore 9
    //   1276: aload 13
    //   1278: astore 10
    //   1280: goto +41 -> 1321
    //   1283: astore 12
    //   1285: aconst_null
    //   1286: astore 13
    //   1288: aload 10
    //   1290: astore 15
    //   1292: aload 9
    //   1294: astore 14
    //   1296: aload 13
    //   1298: astore 9
    //   1300: aload 12
    //   1302: astore 10
    //   1304: goto +17 -> 1321
    //   1307: astore 10
    //   1309: aconst_null
    //   1310: astore 11
    //   1312: aconst_null
    //   1313: astore 15
    //   1315: aconst_null
    //   1316: astore 14
    //   1318: aconst_null
    //   1319: astore 9
    //   1321: aload 11
    //   1323: astore 12
    //   1325: aload 8
    //   1327: astore 13
    //   1329: aload 5
    //   1331: astore 8
    //   1333: aload 6
    //   1335: astore 11
    //   1337: aload 15
    //   1339: astore 6
    //   1341: aload 14
    //   1343: astore 5
    //   1345: goto +32 -> 1377
    //   1348: astore 10
    //   1350: aconst_null
    //   1351: astore 13
    //   1353: aconst_null
    //   1354: astore 11
    //   1356: aconst_null
    //   1357: astore 7
    //   1359: aconst_null
    //   1360: astore 8
    //   1362: aconst_null
    //   1363: astore 4
    //   1365: aconst_null
    //   1366: astore 12
    //   1368: aconst_null
    //   1369: astore 6
    //   1371: aconst_null
    //   1372: astore 5
    //   1374: aconst_null
    //   1375: astore 9
    //   1377: getstatic 201	com/jingdong/common/UnLog:D	Z
    //   1380: ifeq +12 -> 1392
    //   1383: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1386: ldc_w 571
    //   1389: invokestatic 226	com/jingdong/common/UnLog:d	(Ljava/lang/String;Ljava/lang/String;)V
    //   1392: aload 16
    //   1394: astore 14
    //   1396: aload 13
    //   1398: ifnull +32 -> 1430
    //   1401: aload 13
    //   1403: invokevirtual 574	android/media/MediaExtractor:release	()V
    //   1406: aload 16
    //   1408: astore 14
    //   1410: goto +20 -> 1430
    //   1413: astore 13
    //   1415: aload 13
    //   1417: astore 14
    //   1419: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1422: ldc_w 576
    //   1425: aload 13
    //   1427: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1430: aload 12
    //   1432: ifnull +36 -> 1468
    //   1435: aload 12
    //   1437: invokevirtual 574	android/media/MediaExtractor:release	()V
    //   1440: goto +28 -> 1468
    //   1443: astore 12
    //   1445: aload 12
    //   1447: astore 13
    //   1449: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1452: ldc_w 581
    //   1455: aload 12
    //   1457: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1460: aload 14
    //   1462: ifnonnull +6 -> 1468
    //   1465: goto +7 -> 1472
    //   1468: aload 14
    //   1470: astore 13
    //   1472: aload 13
    //   1474: astore 12
    //   1476: aload 7
    //   1478: ifnull +46 -> 1524
    //   1481: aload 7
    //   1483: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1486: aload 7
    //   1488: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1491: aload 13
    //   1493: astore 12
    //   1495: goto +29 -> 1524
    //   1498: astore 7
    //   1500: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1503: ldc_w 587
    //   1506: aload 7
    //   1508: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1511: aload 13
    //   1513: astore 12
    //   1515: aload 13
    //   1517: ifnonnull +7 -> 1524
    //   1520: aload 7
    //   1522: astore 12
    //   1524: aload 12
    //   1526: astore 7
    //   1528: aload 11
    //   1530: ifnull +41 -> 1571
    //   1533: aload 11
    //   1535: invokevirtual 588	com/jd/lib/unification/album/filter/video/OutputSurfaceWithFilter:release	()V
    //   1538: aload 12
    //   1540: astore 7
    //   1542: goto +29 -> 1571
    //   1545: astore 11
    //   1547: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1550: ldc_w 590
    //   1553: aload 11
    //   1555: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1558: aload 12
    //   1560: astore 7
    //   1562: aload 12
    //   1564: ifnonnull +7 -> 1571
    //   1567: aload 11
    //   1569: astore 7
    //   1571: aload 7
    //   1573: astore 11
    //   1575: aload 8
    //   1577: ifnull +46 -> 1623
    //   1580: aload 8
    //   1582: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1585: aload 8
    //   1587: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1590: aload 7
    //   1592: astore 11
    //   1594: goto +29 -> 1623
    //   1597: astore 8
    //   1599: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1602: ldc_w 592
    //   1605: aload 8
    //   1607: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1610: aload 7
    //   1612: astore 11
    //   1614: aload 7
    //   1616: ifnonnull +7 -> 1623
    //   1619: aload 8
    //   1621: astore 11
    //   1623: aload 11
    //   1625: astore 7
    //   1627: aload 6
    //   1629: ifnull +46 -> 1675
    //   1632: aload 6
    //   1634: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1637: aload 6
    //   1639: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1642: aload 11
    //   1644: astore 7
    //   1646: goto +29 -> 1675
    //   1649: astore 6
    //   1651: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1654: ldc_w 594
    //   1657: aload 6
    //   1659: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1662: aload 11
    //   1664: astore 7
    //   1666: aload 11
    //   1668: ifnonnull +7 -> 1675
    //   1671: aload 6
    //   1673: astore 7
    //   1675: aload 7
    //   1677: astore 6
    //   1679: aload 5
    //   1681: ifnull +46 -> 1727
    //   1684: aload 5
    //   1686: invokevirtual 584	android/media/MediaCodec:stop	()V
    //   1689: aload 5
    //   1691: invokevirtual 585	android/media/MediaCodec:release	()V
    //   1694: aload 7
    //   1696: astore 6
    //   1698: goto +29 -> 1727
    //   1701: astore 5
    //   1703: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1706: ldc_w 596
    //   1709: aload 5
    //   1711: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1714: aload 7
    //   1716: astore 6
    //   1718: aload 7
    //   1720: ifnonnull +7 -> 1727
    //   1723: aload 5
    //   1725: astore 6
    //   1727: aload 9
    //   1729: ifnull +34 -> 1763
    //   1732: aload 9
    //   1734: invokevirtual 597	android/media/MediaMuxer:stop	()V
    //   1737: aload 9
    //   1739: invokevirtual 598	android/media/MediaMuxer:release	()V
    //   1742: goto +21 -> 1763
    //   1745: astore 5
    //   1747: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1750: ldc_w 600
    //   1753: aload 5
    //   1755: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1758: aload 6
    //   1760: ifnonnull +3 -> 1763
    //   1763: aload 4
    //   1765: ifnull +24 -> 1789
    //   1768: aload 4
    //   1770: invokevirtual 601	com/jd/lib/unification/album/filter/video/InputSurface:release	()V
    //   1773: goto +16 -> 1789
    //   1776: astore 4
    //   1778: getstatic 203	com/jd/lib/unification/album/filter/video/ExtractDecodeEditEncodeMux:LOGTAG	Ljava/lang/String;
    //   1781: ldc_w 603
    //   1784: aload 4
    //   1786: invokestatic 579	com/jingdong/common/UnLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   1789: aload 10
    //   1791: athrow
    //   1792: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	1793	0	this	ExtractDecodeEditEncodeMux
    //   98	530	1	i	int
    //   196	179	2	j	int
    //   66	516	3	bool	boolean
    //   79	1137	4	localObject1	Object
    //   1227	23	4	localException1	Exception
    //   1363	406	4	localObject2	Object
    //   1776	9	4	localException2	Exception
    //   5	1008	5	localObject3	Object
    //   1024	23	5	localException3	Exception
    //   1052	638	5	localObject4	Object
    //   1701	23	5	localException4	Exception
    //   1745	9	5	localException5	Exception
    //   75	886	6	localObject5	Object
    //   972	23	6	localException6	Exception
    //   1000	638	6	localObject6	Object
    //   1649	23	6	localException7	Exception
    //   1677	82	6	localObject7	Object
    //   148	766	7	localObject8	Object
    //   925	23	7	localException8	Exception
    //   953	89	7	localObject9	Object
    //   1076	23	7	localException9	Exception
    //   1128	23	7	localException10	Exception
    //   1180	23	7	localException11	Exception
    //   1357	130	7	localObject10	Object
    //   1498	23	7	localException12	Exception
    //   1526	193	7	localObject11	Object
    //   92	737	8	localObject12	Object
    //   840	13	8	localException13	Exception
    //   870	13	8	localException14	Exception
    //   901	685	8	localObject13	Object
    //   1597	23	8	localException15	Exception
    //   172	14	9	localException16	Exception
    //   252	1486	9	localObject14	Object
    //   261	275	10	localObject15	Object
    //   552	1	10	localThrowable1	Throwable
    //   609	694	10	localObject16	Object
    //   1307	1	10	localThrowable2	Throwable
    //   1348	442	10	localThrowable3	Throwable
    //   33	3	11	localMediaCodecInfo	MediaCodecInfo
    //   503	1	11	localThrowable4	Throwable
    //   512	1	11	localThrowable5	Throwable
    //   520	1	11	localThrowable6	Throwable
    //   616	80	11	localObject17	Object
    //   704	1	11	localThrowable7	Throwable
    //   713	12	11	localThrowable8	Throwable
    //   742	792	11	localObject18	Object
    //   1545	23	11	localException17	Exception
    //   1573	94	11	localObject19	Object
    //   529	744	12	localObject20	Object
    //   1283	18	12	localThrowable9	Throwable
    //   1323	113	12	localObject21	Object
    //   1443	13	12	localException18	Exception
    //   1474	89	12	localObject22	Object
    //   60	774	13	localObject23	Object
    //   1262	15	13	localThrowable10	Throwable
    //   1286	116	13	localObject24	Object
    //   1413	13	13	localException19	Exception
    //   1447	69	13	localObject25	Object
    //   726	743	14	localObject26	Object
    //   719	619	15	localObject27	Object
    //   57	1350	16	localObject28	Object
    //   722	23	17	localObject29	Object
    // Exception table:
    //   from	to	target	type
    //   160	169	172	java/lang/Exception
    //   471	484	503	java/lang/Throwable
    //   433	471	512	java/lang/Throwable
    //   410	433	520	java/lang/Throwable
    //   81	99	552	java/lang/Throwable
    //   105	110	552	java/lang/Throwable
    //   117	135	552	java/lang/Throwable
    //   135	160	552	java/lang/Throwable
    //   160	169	552	java/lang/Throwable
    //   174	178	552	java/lang/Throwable
    //   182	193	552	java/lang/Throwable
    //   201	213	552	java/lang/Throwable
    //   213	245	552	java/lang/Throwable
    //   249	290	552	java/lang/Throwable
    //   290	294	552	java/lang/Throwable
    //   298	341	552	java/lang/Throwable
    //   341	345	552	java/lang/Throwable
    //   349	389	552	java/lang/Throwable
    //   389	410	552	java/lang/Throwable
    //   685	693	704	java/lang/Throwable
    //   591	598	713	java/lang/Throwable
    //   603	608	713	java/lang/Throwable
    //   625	685	713	java/lang/Throwable
    //   828	833	840	java/lang/Exception
    //   862	867	870	java/lang/Exception
    //   908	918	925	java/lang/Exception
    //   960	965	972	java/lang/Exception
    //   1007	1017	1024	java/lang/Exception
    //   1059	1069	1076	java/lang/Exception
    //   1111	1121	1128	java/lang/Exception
    //   1163	1173	1180	java/lang/Exception
    //   1215	1220	1227	java/lang/Exception
    //   782	804	1262	java/lang/Throwable
    //   772	778	1283	java/lang/Throwable
    //   576	581	1307	java/lang/Throwable
    //   585	591	1307	java/lang/Throwable
    //   62	67	1348	java/lang/Throwable
    //   71	77	1348	java/lang/Throwable
    //   1401	1406	1413	java/lang/Exception
    //   1435	1440	1443	java/lang/Exception
    //   1481	1491	1498	java/lang/Exception
    //   1533	1538	1545	java/lang/Exception
    //   1580	1590	1597	java/lang/Exception
    //   1632	1642	1649	java/lang/Exception
    //   1684	1694	1701	java/lang/Exception
    //   1732	1742	1745	java/lang/Exception
    //   1768	1773	1776	java/lang/Exception
  }
  
  private int getAndSelectAudioTrackIndex(MediaExtractor paramMediaExtractor)
  {
    int i = 0;
    while (i < paramMediaExtractor.getTrackCount())
    {
      if (UnLog.D)
      {
        String str = LOGTAG;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("format for track ");
        localStringBuilder.append(i);
        localStringBuilder.append(" is ");
        localStringBuilder.append(getMimeTypeFor(paramMediaExtractor.getTrackFormat(i)));
        UnLog.d(str, localStringBuilder.toString());
      }
      if (isAudioFormat(paramMediaExtractor.getTrackFormat(i)))
      {
        paramMediaExtractor.selectTrack(i);
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  private int getAndSelectVideoTrackIndex(MediaExtractor paramMediaExtractor)
  {
    int i = 0;
    while (i < paramMediaExtractor.getTrackCount())
    {
      if (UnLog.D)
      {
        String str = LOGTAG;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("format for track ");
        localStringBuilder.append(i);
        localStringBuilder.append(" is ");
        localStringBuilder.append(getMimeTypeFor(paramMediaExtractor.getTrackFormat(i)));
        UnLog.d(str, localStringBuilder.toString());
      }
      if (isVideoFormat(paramMediaExtractor.getTrackFormat(i)))
      {
        paramMediaExtractor.selectTrack(i);
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  private static String getMimeTypeFor(MediaFormat paramMediaFormat)
  {
    return paramMediaFormat.getString("mime");
  }
  
  private static boolean isAudioFormat(MediaFormat paramMediaFormat)
  {
    return getMimeTypeFor(paramMediaFormat).startsWith("audio/");
  }
  
  private static boolean isVideoFormat(MediaFormat paramMediaFormat)
  {
    return getMimeTypeFor(paramMediaFormat).startsWith("video/");
  }
  
  private static MediaCodecInfo selectCodec(String paramString)
  {
    int k = MediaCodecList.getCodecCount();
    int i = 0;
    while (i < k)
    {
      MediaCodecInfo localMediaCodecInfo = MediaCodecList.getCodecInfoAt(i);
      if (localMediaCodecInfo.isEncoder())
      {
        String[] arrayOfString = localMediaCodecInfo.getSupportedTypes();
        int j = 0;
        while (j < arrayOfString.length)
        {
          if (arrayOfString[j].equalsIgnoreCase(paramString)) {
            return localMediaCodecInfo;
          }
          j += 1;
        }
      }
      i += 1;
    }
    return null;
  }
  
  private void setCopyAudio()
  {
    mCopyAudio = true;
  }
  
  private void setCopyVideo()
  {
    mCopyVideo = true;
  }
  
  private void setOutputFile()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(OUTPUT_FILENAME_DIR.getAbsolutePath());
    localStringBuilder.append("/cts-media-");
    localStringBuilder.append(getClass().getSimpleName());
    localStringBuilder.append('-');
    if (mCopyVideo)
    {
      localStringBuilder.append('-');
      localStringBuilder.append("video");
      localStringBuilder.append('-');
      localStringBuilder.append(mWidth);
      localStringBuilder.append('x');
      localStringBuilder.append(mHeight);
    }
    if (mCopyAudio)
    {
      localStringBuilder.append('-');
      localStringBuilder.append("audio");
    }
    localStringBuilder.append(".mp4");
    mOutputFile = localStringBuilder.toString();
  }
  
  private void setSize(int paramInt1, int paramInt2)
  {
    if (((paramInt1 % 16 != 0) || (paramInt2 % 16 != 0)) && (UnLog.W)) {
      UnLog.w(LOGTAG, "WARNING: width or height not multiple of 16");
    }
    mWidth = paramInt1;
    mHeight = paramInt2;
  }
  
  public void setFilterProgress(int paramInt)
  {
    mFilterProgress = paramInt;
  }
  
  public void setFilterType(FilterTools.FilterType paramFilterType)
  {
    mFilterType = paramFilterType;
  }
  
  public void setHandlerThread(HandlerThread paramHandlerThread)
  {
    handlerThread = paramHandlerThread;
  }
  
  public void setOutputFile(String paramString)
  {
    mOutputFile = paramString;
  }
  
  public void setSource(String paramString)
  {
    mPath = paramString;
  }
  
  public void setVideoOrientation(int paramInt)
  {
    mVideoOrientation = paramInt;
  }
  
  public void stopThread()
  {
    HandlerThread localHandlerThread = handlerThread;
    if (localHandlerThread != null)
    {
      localHandlerThread.getLooper().quit();
      handlerThread = null;
    }
  }
  
  public void testExtractDecodeEditEncodeMuxAudioVideo(final ResultListener paramResultListener, int paramInt1, int paramInt2)
  {
    setSize(paramInt1, paramInt2);
    setCopyAudio();
    setCopyVideo();
    handlerThread = new HandlerThread("completethread")
    {
      public void run()
      {
        try
        {
          ExtractDecodeEditEncodeMux.this.extractDecodeEditEncodeMux();
          paramResultListener.onResult(true, mOutputFile, "");
          return;
        }
        catch (Throwable localThrowable)
        {
          localThrowable.printStackTrace();
          paramResultListener.onResult(false, mOutputFile, "");
        }
      }
    };
    handlerThread.start();
  }
  
  public static abstract interface ResultListener
  {
    public abstract void onResult(boolean paramBoolean, String paramString1, String paramString2);
  }
}
