package com.jd.lib.unification.album.filter.filter;

import android.graphics.PointF;
import android.opengl.GLES20;

public class CommonVignetteFilter
  extends CommonFilter
{
  public static final String VIGNETTING_FRAGMENT_SHADER = " uniform sampler2D inputImageTexture;\n varying highp vec2 textureCoordinate;\n \n uniform lowp vec2 vignetteCenter;\n uniform lowp vec3 vignetteColor;\n uniform highp float vignetteStart;\n uniform highp float vignetteEnd;\n \n void main()\n {\n     /*\n     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\n     lowp float d = distance(textureCoordinate, vec2(0.5,0.5));\n     rgb *= (1.0 - smoothstep(vignetteStart, vignetteEnd, d));\n     gl_FragColor = vec4(vec3(rgb),1.0);\n      */\n     \n     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\n     lowp float d = distance(textureCoordinate, vec2(vignetteCenter.x, vignetteCenter.y));\n     lowp float percent = smoothstep(vignetteStart, vignetteEnd, d);\n     gl_FragColor = vec4(mix(rgb.x, vignetteColor.x, percent), mix(rgb.y, vignetteColor.y, percent), mix(rgb.z, vignetteColor.z, percent), 1.0);\n }";
  private PointF mVignetteCenter;
  private int mVignetteCenterLocation;
  private float[] mVignetteColor;
  private int mVignetteColorLocation;
  private float mVignetteEnd;
  private int mVignetteEndLocation;
  private float mVignetteStart;
  private int mVignetteStartLocation;
  
  public CommonVignetteFilter()
  {
    this(new PointF(), new float[] { 0.0F, 0.0F, 0.0F }, 0.3F, 0.75F);
  }
  
  public CommonVignetteFilter(PointF paramPointF, float[] paramArrayOfFloat, float paramFloat1, float paramFloat2)
  {
    super("attribute vec4 position;\nattribute vec4 inputTextureCoordinate;\n \nvarying vec2 textureCoordinate;\n \nvoid main()\n{\n    gl_Position = position;\n    textureCoordinate = inputTextureCoordinate.xy;\n}", " uniform sampler2D inputImageTexture;\n varying highp vec2 textureCoordinate;\n \n uniform lowp vec2 vignetteCenter;\n uniform lowp vec3 vignetteColor;\n uniform highp float vignetteStart;\n uniform highp float vignetteEnd;\n \n void main()\n {\n     /*\n     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\n     lowp float d = distance(textureCoordinate, vec2(0.5,0.5));\n     rgb *= (1.0 - smoothstep(vignetteStart, vignetteEnd, d));\n     gl_FragColor = vec4(vec3(rgb),1.0);\n      */\n     \n     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\n     lowp float d = distance(textureCoordinate, vec2(vignetteCenter.x, vignetteCenter.y));\n     lowp float percent = smoothstep(vignetteStart, vignetteEnd, d);\n     gl_FragColor = vec4(mix(rgb.x, vignetteColor.x, percent), mix(rgb.y, vignetteColor.y, percent), mix(rgb.z, vignetteColor.z, percent), 1.0);\n }");
    mVignetteCenter = paramPointF;
    mVignetteColor = paramArrayOfFloat;
    mVignetteStart = paramFloat1;
    mVignetteEnd = paramFloat2;
  }
  
  public void onInit()
  {
    super.onInit();
    mVignetteCenterLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteCenter");
    mVignetteColorLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteColor");
    mVignetteStartLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteStart");
    mVignetteEndLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteEnd");
    setVignetteCenter(mVignetteCenter);
    setVignetteColor(mVignetteColor);
    setVignetteStart(mVignetteStart);
    setVignetteEnd(mVignetteEnd);
  }
  
  public void setVignetteCenter(PointF paramPointF)
  {
    mVignetteCenter = paramPointF;
    setPoint(mVignetteCenterLocation, mVignetteCenter);
  }
  
  public void setVignetteColor(float[] paramArrayOfFloat)
  {
    mVignetteColor = paramArrayOfFloat;
    setFloatVec3(mVignetteColorLocation, mVignetteColor);
  }
  
  public void setVignetteEnd(float paramFloat)
  {
    mVignetteEnd = paramFloat;
    setFloat(mVignetteEndLocation, mVignetteEnd);
  }
  
  public void setVignetteStart(float paramFloat)
  {
    mVignetteStart = paramFloat;
    setFloat(mVignetteStartLocation, mVignetteStart);
  }
}
