package com.jd.lib.unification.album.utils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import com.jingdong.common.DpiUtil;

public class BitmapUtil
{
  public BitmapUtil() {}
  
  private static int getFitInSampleSize(Context paramContext, BitmapFactory.Options paramOptions, int paramInt)
  {
    int j = DpiUtil.getWidth(paramContext);
    int k = DpiUtil.getHeight(paramContext);
    int i;
    if ((paramInt != 90) && (paramInt != 270))
    {
      paramInt = outWidth;
      i = outHeight;
    }
    else
    {
      paramInt = outHeight;
      i = outWidth;
    }
    if ((paramInt <= j) && (i <= k)) {
      return 1;
    }
    return Math.max(Math.round(paramInt / j), Math.round(i / k));
  }
  
  public static Bitmap getFitSampleBitmap(Context paramContext, String paramString)
  {
    if (paramString == null) {
      return null;
    }
    int i = ExifUtil.readPictureDegree(paramString);
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    inJustDecodeBounds = true;
    BitmapFactory.decodeFile(paramString, localOptions);
    if (outHeight >= 0)
    {
      if (outWidth < 0) {
        return null;
      }
      inSampleSize = getFitInSampleSize(paramContext, localOptions, i);
      inJustDecodeBounds = false;
      paramContext = BitmapFactory.decodeFile(paramString, localOptions);
      if (i != 0) {
        return rotateBitmap(paramContext, i);
      }
    }
    else
    {
      return null;
    }
    return paramContext;
  }
  
  public static float getScale(Context paramContext, Bitmap paramBitmap)
  {
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    float f = DpiUtil.getWidth(paramContext) / i;
    return Math.min(DpiUtil.getHeight(paramContext) / j, f);
  }
  
  private static Bitmap rotateBitmap(Bitmap paramBitmap, int paramInt)
  {
    Matrix localMatrix = new Matrix();
    localMatrix.postRotate(paramInt);
    return Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), localMatrix, true);
  }
}
