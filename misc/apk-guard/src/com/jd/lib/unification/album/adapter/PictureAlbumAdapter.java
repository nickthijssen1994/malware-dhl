package com.jd.lib.unification.album.adapter;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;
import androidx.recyclerview.widget.RecyclerView.Adapter;
import androidx.recyclerview.widget.RecyclerView.ViewHolder;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.utils.AlbumUtils;
import com.jd.lib.unification.album.utils.PictureMimeType;
import com.jd.unalbumwidget.R.drawable;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.widget.image.UnNetImageView;
import java.util.ArrayList;

public class PictureAlbumAdapter
  extends RecyclerView.Adapter<RecyclerView.ViewHolder>
{
  public static int HEAD_COUNT = 0;
  public static final int TYPE_CAMERA = 2;
  public static final int TYPE_PICTURE = 1;
  private ClickPictureCallBack callBack;
  private int cameraOrVideoAction = 0;
  private Context mContext;
  private LayoutInflater mInflater;
  private ArrayList<LocalMedia> mLocalMedias;
  private ArrayList<LocalMedia> mSelectImages;
  private int needSelectCount = 0;
  private OnItemClickListener onItemClickListener;
  private String source;
  private String videoMaxDuration = "";
  private String videoMinDuration = "";
  
  public PictureAlbumAdapter(Context paramContext, int paramInt1, String paramString1, String paramString2, String paramString3, ArrayList paramArrayList1, ArrayList paramArrayList2, int paramInt2)
  {
    mContext = paramContext;
    cameraOrVideoAction = paramInt1;
    source = paramString1;
    videoMinDuration = paramString2;
    videoMaxDuration = paramString3;
    mInflater = LayoutInflater.from(paramContext);
    mLocalMedias = paramArrayList1;
    mSelectImages = paramArrayList2;
    needSelectCount = paramInt2;
  }
  
  private boolean checkSelectCount()
  {
    boolean bool = isHaveVideo();
    Object localObject = mSelectImages;
    if (localObject != null)
    {
      if (((ArrayList)localObject).size() >= needSelectCount)
      {
        if (bool)
        {
          localObject = mContext;
          Toast.makeText((Context)localObject, ((Context)localObject).getString(R.string.uni_album_video_picture_limit, new Object[] { Integer.valueOf(needSelectCount - 1) }), 0).show();
          return false;
        }
        localObject = mContext;
        Toast.makeText((Context)localObject, ((Context)localObject).getString(R.string.uni_album_select_max_toast, new Object[] { Integer.valueOf(needSelectCount) }), 0).show();
        return false;
      }
      return true;
    }
    return false;
  }
  
  private boolean isHaveVideo()
  {
    ArrayList localArrayList = mSelectImages;
    if (localArrayList == null) {
      return false;
    }
    if (localArrayList.size() == 0) {
      return false;
    }
    return PictureMimeType.isVideo(((LocalMedia)mSelectImages.get(0)).getPictureType());
  }
  
  private void onCheck(int paramInt, AlbumViewHolder paramAlbumViewHolder)
  {
    LocalMedia localLocalMedia = (LocalMedia)mLocalMedias.get(paramInt);
    boolean bool1 = localLocalMedia.isPicked() ^ true;
    boolean bool2 = isHaveVideo();
    boolean bool3 = PictureMimeType.isVideo(localLocalMedia.getPictureType());
    paramInt = needSelectCount;
    if (bool1)
    {
      Object localObject = mSelectImages;
      if ((localObject != null) && (((ArrayList)localObject).size() >= paramInt))
      {
        if (bool2)
        {
          paramAlbumViewHolder = mContext;
          Toast.makeText(paramAlbumViewHolder, paramAlbumViewHolder.getString(R.string.uni_album_video_picture_limit, new Object[] { Integer.valueOf(needSelectCount - 1) }), 0).show();
          return;
        }
        paramAlbumViewHolder = mContext;
        Toast.makeText(paramAlbumViewHolder, paramAlbumViewHolder.getString(R.string.uni_album_select_max_toast, new Object[] { Integer.valueOf(needSelectCount) }), 0).show();
        return;
      }
      if ((bool2) && (bool3))
      {
        paramAlbumViewHolder = mContext;
        Toast.makeText(paramAlbumViewHolder, paramAlbumViewHolder.getString(R.string.uni_album_one_video_at_most), 0).show();
        return;
      }
      if (bool3) {
        mSelectImages.add(0, localLocalMedia);
      } else {
        mSelectImages.add(localLocalMedia);
      }
      localObject = this;
      localLocalMedia.setPicked(bool1);
      checked.setImageResource(R.drawable.lib_uni_album_image_select_icon);
      if (callBack != null) {
        callBack.onSelectChange(mSelectImages);
      }
    }
    else
    {
      localLocalMedia.setPicked(bool1);
      checked.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
      mSelectImages.remove(localLocalMedia);
      paramAlbumViewHolder = callBack;
      if (paramAlbumViewHolder != null) {
        paramAlbumViewHolder.onSelectChange(mSelectImages);
      }
    }
  }
  
  public int getItemCount()
  {
    if (cameraOrVideoAction == 0)
    {
      HEAD_COUNT = 0;
      localArrayList = mLocalMedias;
      if (localArrayList != null)
      {
        if (localArrayList.size() == 0) {
          return 0;
        }
        return mLocalMedias.size();
      }
      return 0;
    }
    HEAD_COUNT = 1;
    ArrayList localArrayList = mLocalMedias;
    if (localArrayList != null)
    {
      if (localArrayList.size() == 0) {
        return 1;
      }
      return mLocalMedias.size() + 1;
    }
    return 1;
  }
  
  public int getItemViewType(int paramInt)
  {
    if (cameraOrVideoAction == 0) {
      return 1;
    }
    if (paramInt == 0) {
      return 2;
    }
    return 1;
  }
  
  public void onBindViewHolder(final RecyclerView.ViewHolder paramViewHolder, final int paramInt)
  {
    int i = getItemViewType(paramInt);
    if (i == 2)
    {
      if ((paramViewHolder instanceof HeaderViewHolder))
      {
        paramViewHolder = (HeaderViewHolder)paramViewHolder;
        paramInt = cameraOrVideoAction;
        if ((paramInt != 1) && (paramInt != 3)) {
          imageView.setImageResource(R.drawable.lib_uni_album_take_photos_icon_g);
        } else {
          imageView.setImageResource(R.drawable.lib_uni_album_shoot_video_icon_g);
        }
        itemView.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            if (!PictureAlbumAdapter.this.checkSelectCount()) {
              return;
            }
            if (callBack != null)
            {
              if (cameraOrVideoAction == 3)
              {
                callBack.openVideo();
                return;
              }
              callBack.openCamera();
            }
          }
        });
      }
    }
    else if ((i == 1) && ((paramViewHolder instanceof AlbumViewHolder)))
    {
      paramViewHolder = (AlbumViewHolder)paramViewHolder;
      Object localObject1 = mContext;
      if ((localObject1 instanceof Activity)) {
        i = DpiUtil.getAppWidth((Activity)localObject1);
      } else {
        i = DpiUtil.getWidth((Context)localObject1);
      }
      i = (i - 5) / 4;
      if ((i > 0) && ((image.getLayoutParams() instanceof RelativeLayout.LayoutParams)))
      {
        localObject1 = (RelativeLayout.LayoutParams)image.getLayoutParams();
        width = i;
        height = i;
        image.setLayoutParams((ViewGroup.LayoutParams)localObject1);
      }
      localObject1 = (LocalMedia)mLocalMedias.get(paramInt - HEAD_COUNT);
      Object localObject2 = mSelectImages;
      int j = 0;
      if ((localObject2 != null) && (((ArrayList)localObject2).size() > 0))
      {
        if (mSelectImages.contains(localObject1)) {
          ((LocalMedia)localObject1).setPicked(true);
        } else {
          ((LocalMedia)localObject1).setPicked(false);
        }
      }
      else {
        ((LocalMedia)localObject1).setPicked(false);
      }
      if (PictureMimeType.isVideo(((LocalMedia)localObject1).getPictureType()))
      {
        if (!UnStringUtils.isEmpty(videoMinDuration))
        {
          if (UnStringUtils.isEmpty(videoMaxDuration)) {
            return;
          }
          duration.setVisibility(0);
          duration.setText(AlbumUtils.parseTime(((LocalMedia)localObject1).getDuration()));
          long l1 = Math.floor(((LocalMedia)localObject1).getDuration() / 1000L);
          long l2 = Long.parseLong(videoMinDuration);
          long l3 = Long.parseLong(videoMaxDuration);
          if (l1 < l2)
          {
            checkedLayout.setVisibility(8);
            floatView.setVisibility(0);
          }
          else if ((l2 <= l1) && (l1 <= l3))
          {
            checkedLayout.setVisibility(0);
            floatView.setVisibility(8);
          }
          else if ((l3 < l1) && (l1 < 600000L))
          {
            checkedLayout.setVisibility(8);
            floatView.setVisibility(8);
          }
        }
      }
      else
      {
        duration.setVisibility(8);
        floatView.setVisibility(8);
        localObject2 = checkedLayout;
        if (needSelectCount == 1) {
          i = 8;
        } else {
          i = 0;
        }
        ((View)localObject2).setVisibility(i);
        localObject2 = checked;
        i = j;
        if (needSelectCount == 1) {
          i = 8;
        }
        ((View)localObject2).setVisibility(i);
      }
      localObject2 = image;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("file://");
      localStringBuilder.append(((LocalMedia)localObject1).getPath());
      ((UnNetImageView)localObject2).setImage(localStringBuilder.toString());
      if (((LocalMedia)localObject1).isPicked()) {
        checked.setImageResource(R.drawable.lib_uni_album_image_select_icon);
      } else {
        checked.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
      }
      checkedLayout.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          PictureAlbumAdapter.this.onCheck(paramInt - PictureAlbumAdapter.HEAD_COUNT, paramViewHolder);
        }
      });
      itemView.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if (onItemClickListener != null) {
            onItemClickListener.onPictureItemClick(mLocalMedias, mSelectImages, paramInt - PictureAlbumAdapter.HEAD_COUNT, (View)paramViewHolderimage);
          }
        }
      });
    }
  }
  
  public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup paramViewGroup, int paramInt)
  {
    if (paramInt == 2) {
      return new HeaderViewHolder(mInflater.inflate(R.layout.lib_uni_album_camera_item, null));
    }
    return new AlbumViewHolder(mInflater.inflate(R.layout.lib_uni_album_item_photo_album, null));
  }
  
  public void setCallBack(ClickPictureCallBack paramClickPictureCallBack)
  {
    callBack = paramClickPictureCallBack;
  }
  
  public void setData(ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    mLocalMedias = paramArrayList1;
    mSelectImages = paramArrayList2;
    notifyDataSetChanged();
  }
  
  public void setOnItemClickListener(OnItemClickListener paramOnItemClickListener)
  {
    onItemClickListener = paramOnItemClickListener;
  }
  
  class AlbumViewHolder
    extends RecyclerView.ViewHolder
  {
    ImageView checked;
    LinearLayout checkedLayout;
    TextView duration;
    View floatView;
    UnNetImageView image;
    
    public AlbumViewHolder(View paramView)
    {
      super();
      image = ((UnNetImageView)paramView.findViewById(R.id.lib_ec_photo_album_image));
      floatView = paramView.findViewById(R.id.float_view);
      checked = ((ImageView)paramView.findViewById(R.id.lib_ec_photo_album_checked));
      checkedLayout = ((LinearLayout)paramView.findViewById(R.id.lib_ec_photo_album_checked_layout));
      duration = ((TextView)paramView.findViewById(R.id.lib_ec_tv_duration));
    }
  }
  
  public static abstract interface ClickPictureCallBack
  {
    public abstract void onSelectChange(ArrayList paramArrayList);
    
    public abstract void openCamera();
    
    public abstract void openVideo();
  }
  
  class HeaderViewHolder
    extends RecyclerView.ViewHolder
  {
    public ImageView imageView;
    
    public HeaderViewHolder(View paramView)
    {
      super();
      imageView = ((ImageView)paramView.findViewById(R.id.lib_ec_preview_camera_icon));
    }
  }
  
  public static abstract interface OnItemClickListener
  {
    public abstract void onPictureItemClick(ArrayList paramArrayList1, ArrayList paramArrayList2, int paramInt, View paramView);
  }
}
