package com.jd.lib.unification.album.filter.video;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.CamcorderProfile;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Environment;
import android.text.TextUtils;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.LinearInterpolator;
import android.view.animation.TranslateAnimation;
import com.jd.lib.unification.album.filter.FilterTools;
import com.jd.lib.unification.album.filter.FilterTools.FilterType;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;
import java.io.File;

public class VideoUtil
{
  private static final String PAGE_KEY = "VideoUtil";
  
  public VideoUtil() {}
  
  private static float createCenterPictureRate(Context paramContext, int paramInt1, int paramInt2)
  {
    int i = DpiUtil.getWidth(paramContext);
    int j = DpiUtil.getHeight(paramContext);
    return Math.min(paramInt1 / i, paramInt2 / j);
  }
  
  public static String createFilterVideoName(String paramString, FilterTools.FilterType paramFilterType, boolean paramBoolean)
  {
    paramString = new File(paramString).getName();
    if (!TextUtils.isEmpty(paramString))
    {
      paramString = paramString.split("\\.");
      if (paramString.length >= 2)
      {
        StringBuffer localStringBuffer = new StringBuffer();
        localStringBuffer.append(System.currentTimeMillis());
        localStringBuffer.append("_");
        if (paramBoolean)
        {
          localStringBuffer.append("cut");
          localStringBuffer.append("_");
        }
        localStringBuffer.append("filter-");
        localStringBuffer.append(FilterTools.getFilterName(paramFilterType));
        localStringBuffer.append(".");
        localStringBuffer.append(paramString[1]);
        paramString = localStringBuffer.toString();
        if (!UnLog.D) {
          return paramString;
        }
        paramFilterType = new StringBuilder();
        paramFilterType.append("outName:");
        paramFilterType.append(paramString);
        UnLog.e("VideoUtil", paramFilterType.toString());
        return paramString;
      }
    }
    return "";
    return paramString;
  }
  
  public static String createOutVideoName(String paramString)
  {
    if (!TextUtils.isEmpty(paramString))
    {
      paramString = new File(paramString).getName();
      if (!TextUtils.isEmpty(paramString))
      {
        Object localObject = paramString.split("\\.");
        if (localObject.length >= 2)
        {
          paramString = new StringBuffer();
          paramString.append(System.currentTimeMillis());
          paramString.append("_");
          paramString.append("cut.");
          paramString.append(localObject[1]);
          if (UnLog.D)
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("outName:");
            ((StringBuilder)localObject).append(paramString.toString());
            UnLog.e("VideoUtil", ((StringBuilder)localObject).toString());
          }
          return paramString.toString();
        }
      }
    }
    return "";
  }
  
  public static String createOutVideoPath(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    paramString = new StringBuilder();
    paramString.append(Environment.getExternalStorageDirectory().getAbsolutePath());
    paramString.append("/jd/video/");
    paramString = paramString.toString();
    Object localObject = new File(paramString);
    if (!((File)localObject).exists()) {
      ((File)localObject).mkdirs();
    }
    if (UnLog.D)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("videoOutPath:");
      ((StringBuilder)localObject).append(paramString);
      UnLog.d("VideoUtil", ((StringBuilder)localObject).toString());
    }
    return paramString;
  }
  
  public static void deleteFile(String paramString)
  {
    paramString = new File(paramString);
    if (paramString.exists()) {
      paramString.delete();
    }
  }
  
  public static void galleryAddPic(Context paramContext, File paramFile)
  {
    if (paramFile == null) {
      return;
    }
    Intent localIntent = new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE");
    localIntent.setData(Uri.fromFile(paramFile));
    paramContext.sendBroadcast(localIntent);
  }
  
  public static Animation getAlphaAnim(Animation.AnimationListener paramAnimationListener)
  {
    AlphaAnimation localAlphaAnimation = new AlphaAnimation(1.0F, 0.0F);
    localAlphaAnimation.setInterpolator(new LinearInterpolator());
    localAlphaAnimation.setFillAfter(false);
    localAlphaAnimation.setDuration(200L);
    if (paramAnimationListener != null) {
      localAlphaAnimation.setAnimationListener(paramAnimationListener);
    }
    return localAlphaAnimation;
  }
  
  public static Animation getAppearTranslateYAnim(float paramFloat, Animation.AnimationListener paramAnimationListener)
  {
    TranslateAnimation localTranslateAnimation = new TranslateAnimation(1, 0.0F, 1, 0.0F, 2, paramFloat, 1, 0.0F);
    localTranslateAnimation.setInterpolator(new LinearInterpolator());
    localTranslateAnimation.setFillAfter(false);
    localTranslateAnimation.setDuration(200L);
    if (paramAnimationListener != null) {
      localTranslateAnimation.setAnimationListener(paramAnimationListener);
    }
    return localTranslateAnimation;
  }
  
  public static int getFramRate()
  {
    CamcorderProfile localCamcorderProfile;
    if (CamcorderProfile.hasProfile(0, 5)) {
      localCamcorderProfile = CamcorderProfile.get(0, 5);
    } else if (CamcorderProfile.hasProfile(0, 4)) {
      localCamcorderProfile = CamcorderProfile.get(4);
    } else if (CamcorderProfile.hasProfile(0, 7)) {
      localCamcorderProfile = CamcorderProfile.get(7);
    } else {
      localCamcorderProfile = CamcorderProfile.get(0, 0);
    }
    if (localCamcorderProfile != null)
    {
      if (UnLog.D)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("videoFrameRate:");
        localStringBuilder.append(videoFrameRate);
        UnLog.d("VideoUtil", localStringBuilder.toString());
      }
      return videoFrameRate;
    }
    return -1;
  }
  
  public static Animation getTranslateXAnim(float paramFloat, Animation.AnimationListener paramAnimationListener)
  {
    TranslateAnimation localTranslateAnimation = new TranslateAnimation(2, paramFloat, 1, 0.0F, 1, 0.0F, 1, 0.0F);
    localTranslateAnimation.setInterpolator(new LinearInterpolator());
    localTranslateAnimation.setFillAfter(false);
    localTranslateAnimation.setDuration(200L);
    if (paramAnimationListener != null) {
      localTranslateAnimation.setAnimationListener(paramAnimationListener);
    }
    return localTranslateAnimation;
  }
  
  public static Animation getTranslateYAnim(float paramFloat, Animation.AnimationListener paramAnimationListener)
  {
    TranslateAnimation localTranslateAnimation = new TranslateAnimation(1, 0.0F, 1, 0.0F, 1, 0.0F, 2, paramFloat);
    localTranslateAnimation.setInterpolator(new LinearInterpolator());
    localTranslateAnimation.setFillAfter(false);
    localTranslateAnimation.setDuration(1000L);
    if (paramAnimationListener != null) {
      localTranslateAnimation.setAnimationListener(paramAnimationListener);
    }
    return localTranslateAnimation;
  }
  
  public static int getVideoBitRate(int paramInt1, int paramInt2)
  {
    if ((paramInt1 < 1920) && (paramInt2 < 1920)) {
      return 2097152;
    }
    return 4194304;
  }
  
  public static boolean isSupportFilter()
  {
    return Build.VERSION.SDK_INT >= 18;
  }
  
  public static Bitmap toTurn(Context paramContext, Bitmap paramBitmap, int paramInt1, boolean paramBoolean, int paramInt2, int paramInt3)
  {
    Object localObject = paramBitmap;
    if (paramBitmap != null)
    {
      localObject = new Matrix();
      ((Matrix)localObject).postRotate(paramInt1);
      paramBitmap = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject, true);
      localObject = paramBitmap;
      if (paramBoolean)
      {
        paramInt1 = paramBitmap.getWidth();
        float f = createCenterPictureRate(paramContext, paramInt1, paramBitmap.getHeight());
        paramInt2 = (int)(paramInt2 * f);
        localObject = Bitmap.createBitmap(paramBitmap, paramInt1 / 2 - paramInt2 / 2, (int)(paramInt3 * f), paramInt2, paramInt2);
      }
    }
    return localObject;
  }
}
