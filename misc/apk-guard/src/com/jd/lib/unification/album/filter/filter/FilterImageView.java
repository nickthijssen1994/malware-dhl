package com.jd.lib.unification.album.filter.filter;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.media.MediaScannerConnection;
import android.media.MediaScannerConnection.OnScanCompletedListener;
import android.net.Uri;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.util.AttributeSet;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ProgressBar;
import com.jingdong.common.UnLog;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.nio.Buffer;
import java.nio.IntBuffer;
import java.util.concurrent.Semaphore;

public class FilterImageView
  extends FrameLayout
{
  private static final String PAGE_KEY = "FilterImageView";
  private CommonFilter mFilter;
  public Size mForceSize = null;
  private GLSurfaceView mGLSurfaceView;
  private FilterImage mGPUImage;
  private float mRatio = 0.0F;
  
  public FilterImageView(Context paramContext)
  {
    super(paramContext);
    init(paramContext, null);
  }
  
  public FilterImageView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init(paramContext, paramAttributeSet);
  }
  
  private void init(Context paramContext, AttributeSet paramAttributeSet)
  {
    mGLSurfaceView = new GPUImageGLSurfaceView(paramContext, paramAttributeSet);
    addView(mGLSurfaceView);
    mGPUImage = new FilterImage(getContext());
    mGPUImage.setGLSurfaceView(mGLSurfaceView);
  }
  
  public Bitmap capture()
    throws InterruptedException
  {
    Object localObject = new Semaphore(0);
    final int i = mGLSurfaceView.getMeasuredWidth();
    final int j = mGLSurfaceView.getMeasuredHeight();
    final int[] arrayOfInt = new int[i * j];
    mGPUImage.runOnGLThread(new Runnable()
    {
      public void run()
      {
        Object localObject = IntBuffer.allocate(i * j);
        GLES20.glReadPixels(0, 0, i, j, 6408, 5121, (Buffer)localObject);
        localObject = ((IntBuffer)localObject).array();
        int i = 0;
        while (i < j)
        {
          int j = 0;
          for (;;)
          {
            int k = i;
            if (j >= k) {
              break;
            }
            arrayOfInt[((j - i - 1) * k + j)] = localObject[(k * i + j)];
            j += 1;
          }
          i += 1;
        }
        val$waiter.release();
      }
    });
    requestRender();
    ((Semaphore)localObject).acquire();
    localObject = Bitmap.createBitmap(i, j, Bitmap.Config.ARGB_8888);
    ((Bitmap)localObject).copyPixelsFromBuffer(IntBuffer.wrap(arrayOfInt));
    return localObject;
  }
  
  public Bitmap capture(int paramInt1, int paramInt2)
    throws InterruptedException
  {
    if (Looper.myLooper() != Looper.getMainLooper())
    {
      mForceSize = new Size(paramInt1, paramInt2);
      Object localObject = new Semaphore(0);
      getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener()
      {
        public void onGlobalLayout()
        {
          if (Build.VERSION.SDK_INT < 16) {
            getViewTreeObserver().removeGlobalOnLayoutListener(this);
          } else {
            getViewTreeObserver().removeOnGlobalLayoutListener(this);
          }
          val$waiter.release();
        }
      });
      post(new Runnable()
      {
        public void run()
        {
          FilterImageView localFilterImageView = FilterImageView.this;
          localFilterImageView.addView(new FilterImageView.LoadingView(localFilterImageView, localFilterImageView.getContext()));
          mGLSurfaceView.requestLayout();
        }
      });
      ((Semaphore)localObject).acquire();
      mGPUImage.runOnGLThread(new Runnable()
      {
        public void run()
        {
          val$waiter.release();
        }
      });
      requestRender();
      ((Semaphore)localObject).acquire();
      localObject = capture();
      mForceSize = null;
      post(new Runnable()
      {
        public void run()
        {
          mGLSurfaceView.requestLayout();
        }
      });
      requestRender();
      postDelayed(new Runnable()
      {
        public void run()
        {
          removeViewAt(1);
        }
      }, 300L);
      return localObject;
    }
    throw new IllegalStateException("Do not call this method from the UI thread!");
  }
  
  public CommonFilter getFilter()
  {
    return mFilter;
  }
  
  public FilterImage getGPUImage()
  {
    return mGPUImage;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    if (mRatio != 0.0F)
    {
      int i = View.MeasureSpec.getSize(paramInt1);
      paramInt1 = i;
      int j = View.MeasureSpec.getSize(paramInt2);
      paramInt2 = j;
      float f1 = i;
      float f2 = mRatio;
      float f3 = f1 / f2;
      float f4 = j;
      if (f3 < f4) {
        paramInt2 = Math.round(f1 / f2);
      } else {
        paramInt1 = Math.round(f4 * f2);
      }
      super.onMeasure(View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824));
      return;
    }
    super.onMeasure(paramInt1, paramInt2);
  }
  
  public void onPause()
  {
    mGLSurfaceView.onPause();
  }
  
  public void onResume()
  {
    mGLSurfaceView.onResume();
  }
  
  public void requestRender()
  {
    mGLSurfaceView.requestRender();
  }
  
  public void saveToPictures(String paramString1, String paramString2, int paramInt1, int paramInt2, OnPictureSavedListener paramOnPictureSavedListener)
  {
    new SaveTask(paramString1, paramString2, paramInt1, paramInt2, paramOnPictureSavedListener).execute(new Void[0]);
  }
  
  public void saveToPictures(String paramString1, String paramString2, OnPictureSavedListener paramOnPictureSavedListener)
  {
    new SaveTask(paramString1, paramString2, paramOnPictureSavedListener).execute(new Void[0]);
  }
  
  public void setBackgroundColor(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    mGPUImage.setBackgroundColor(paramFloat1, paramFloat2, paramFloat3);
  }
  
  public void setFilter(CommonFilter paramCommonFilter)
  {
    mFilter = paramCommonFilter;
    mGPUImage.setFilter(paramCommonFilter);
    requestRender();
  }
  
  public void setImage(Bitmap paramBitmap)
  {
    mGPUImage.setImage(paramBitmap);
  }
  
  public void setImage(Uri paramUri)
  {
    mGPUImage.setImage(paramUri);
  }
  
  public void setImage(File paramFile)
  {
    mGPUImage.setImage(paramFile);
  }
  
  public void setRatio(float paramFloat)
  {
    mRatio = paramFloat;
    mGLSurfaceView.requestLayout();
    mGPUImage.deleteImage();
  }
  
  public void setRotation(Rotation paramRotation)
  {
    mGPUImage.setRotation(paramRotation);
    requestRender();
  }
  
  public void setScaleType(FilterImage.ScaleType paramScaleType)
  {
    mGPUImage.setScaleType(paramScaleType);
  }
  
  private class GPUImageGLSurfaceView
    extends GLSurfaceView
  {
    public GPUImageGLSurfaceView(Context paramContext)
    {
      super();
    }
    
    public GPUImageGLSurfaceView(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    protected void onMeasure(int paramInt1, int paramInt2)
    {
      if (mForceSize != null)
      {
        super.onMeasure(View.MeasureSpec.makeMeasureSpec(mForceSize.width, 1073741824), View.MeasureSpec.makeMeasureSpec(mForceSize.height, 1073741824));
        return;
      }
      super.onMeasure(paramInt1, paramInt2);
    }
  }
  
  private class LoadingView
    extends FrameLayout
  {
    public LoadingView(Context paramContext)
    {
      super();
      init();
    }
    
    public LoadingView(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      init();
    }
    
    public LoadingView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
    {
      super(paramAttributeSet, paramInt);
      init();
    }
    
    private void init()
    {
      ProgressBar localProgressBar = new ProgressBar(getContext());
      localProgressBar.setLayoutParams(new FrameLayout.LayoutParams(-2, -2, 17));
      addView(localProgressBar);
      setBackgroundColor(-16777216);
    }
  }
  
  public static abstract interface OnPictureSavedListener
  {
    public abstract void onPictureSaved(Uri paramUri);
  }
  
  private class SaveTask
    extends AsyncTask<Void, Void, Void>
  {
    private final String mFileName;
    private final String mFolderName;
    private final Handler mHandler;
    private final int mHeight;
    private final FilterImageView.OnPictureSavedListener mListener;
    private final int mWidth;
    
    public SaveTask(String paramString1, String paramString2, int paramInt1, int paramInt2, FilterImageView.OnPictureSavedListener paramOnPictureSavedListener)
    {
      mFolderName = paramString1;
      mFileName = paramString2;
      mWidth = paramInt1;
      mHeight = paramInt2;
      mListener = paramOnPictureSavedListener;
      mHandler = new Handler();
    }
    
    public SaveTask(String paramString1, String paramString2, FilterImageView.OnPictureSavedListener paramOnPictureSavedListener)
    {
      this(paramString1, paramString2, 0, 0, paramOnPictureSavedListener);
    }
    
    private void saveImage(String paramString1, String paramString2, Bitmap paramBitmap)
    {
      File localFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString1);
      localStringBuilder.append("/");
      localStringBuilder.append(paramString2);
      paramString1 = new File(localFile, localStringBuilder.toString());
      try
      {
        paramString1.getParentFile().mkdirs();
        paramString2 = Bitmap.CompressFormat.JPEG;
        paramBitmap.compress(paramString2, 80, new FileOutputStream(paramString1));
        paramString2 = FilterImageView.this;
        paramString2 = paramString2.getContext();
        paramString1 = paramString1.toString();
        paramBitmap = new MediaScannerConnection.OnScanCompletedListener()
        {
          public void onScanCompleted(String paramAnonymousString, final Uri paramAnonymousUri)
          {
            if (mListener != null) {
              mHandler.post(new Runnable()
              {
                public void run()
                {
                  mListener.onPictureSaved(paramAnonymousUri);
                }
              });
            }
          }
        };
        MediaScannerConnection.scanFile(paramString2, new String[] { paramString1 }, null, paramBitmap);
        return;
      }
      catch (FileNotFoundException paramString1)
      {
        UnLog.e("FilterImageView", paramString1.toString());
      }
    }
    
    protected Void doInBackground(Void... paramVarArgs)
    {
      int i;
      int j;
      if (mWidth != 0)
      {
        paramVarArgs = FilterImageView.this;
        i = mWidth;
        j = mHeight;
      }
      try
      {
        paramVarArgs = paramVarArgs.capture(i, j);
        break label42;
        paramVarArgs = FilterImageView.this;
        paramVarArgs = paramVarArgs.capture();
        label42:
        String str1 = mFolderName;
        String str2 = mFileName;
        saveImage(str1, str2, paramVarArgs);
      }
      catch (InterruptedException paramVarArgs)
      {
        UnLog.e("FilterImageView", paramVarArgs.toString());
      }
      return null;
    }
  }
  
  public static class Size
  {
    int height;
    int width;
    
    public Size(int paramInt1, int paramInt2)
    {
      width = paramInt1;
      height = paramInt2;
    }
  }
}
