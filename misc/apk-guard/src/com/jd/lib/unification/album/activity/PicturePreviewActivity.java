package com.jd.lib.unification.album.activity;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentStatePagerAdapter;
import androidx.viewpager.widget.ViewPager;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.adapter.PreviewPictureAdapter;
import com.jd.lib.unification.album.adapter.SelectPictureAdapter;
import com.jd.lib.unification.album.adapter.SelectPictureAdapter.DeletePictureCallBack;
import com.jd.lib.unification.album.entity.ImageParam;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.album.frag.PreviewPictureFragment;
import com.jd.lib.unification.album.mInterface.IBack;
import com.jd.lib.unification.album.utils.FileUtil;
import com.jd.lib.unification.album.utils.LocalMediaCache;
import com.jd.lib.unification.album.utils.PictureMimeType;
import com.jd.lib.unification.album.view.DropDownViewPager;
import com.jd.lib.unification.album.view.DropDownViewPager.DropViewPagerListener;
import com.jd.lib.unification.album.view.HorizontalListView;
import com.jd.lib.unification.image.editor.ImageEditorActivity;
import com.jd.lib.unification.video.editor.VideoEditorActivity;
import com.jd.unalbumwidget.R.color;
import com.jd.unalbumwidget.R.drawable;
import com.jd.unalbumwidget.R.id;
import com.jd.unalbumwidget.R.layout;
import com.jd.unalbumwidget.R.string;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

public class PicturePreviewActivity
  extends FragmentActivity
  implements View.OnClickListener, SelectPictureAdapter.DeletePictureCallBack, IBack
{
  private static final int SCROLL_TO_RIGHT = 9999;
  private boolean canBeautifyPic;
  public float cropCircleRadius;
  public float cropRectX;
  public float cropRectY;
  public int cropShape;
  private DropDownViewPager.DropViewPagerListener dropViewPagerListener = new DropDownViewPager.DropViewPagerListener()
  {
    public boolean canDropDown()
    {
      if ((mPreviewPictureAdapter != null) && (mPreviewPictureAdapter.getCurrentFragment() != null)) {
        return mPreviewPictureAdapter.getCurrentFragment().canDropDown();
      }
      return false;
    }
    
    public View getCurrentView()
    {
      if ((mPreviewPictureAdapter != null) && (mPreviewPictureAdapter.getCurrentFragment() != null)) {
        return mPreviewPictureAdapter.getCurrentFragment().getView();
      }
      return null;
    }
    
    public Intent getIntent()
    {
      return PicturePreviewActivity.this.getIntent();
    }
    
    public String getUniqueIdentifier()
    {
      if ((mPreviewPictureAdapter != null) && (mPreviewPictureAdapter.getCurrentFragment() != null)) {
        return mPreviewPictureAdapter.getCurrentFragment().getUri();
      }
      return null;
    }
    
    public void onDropDownRecovered(boolean paramAnonymousBoolean)
    {
      if (mRootView != null) {
        mRootView.setBackgroundColor(-16777216);
      }
      if ((rlTopBlackLayer != null) && (rlTopBlackLayer.getVisibility() == 4)) {
        rlTopBlackLayer.setVisibility(0);
      }
      if ((rlBottomBlackLayer != null) && (rlBottomBlackLayer.getVisibility() == 4)) {
        rlBottomBlackLayer.setVisibility(0);
      }
      if ((mListView != null) && (mListView.getVisibility() == 4)) {
        mListView.setVisibility(0);
      }
      if ((paramAnonymousBoolean) && (mPreviewPictureAdapter != null) && (mPreviewPictureAdapter.getCurrentFragment() != null)) {
        mPreviewPictureAdapter.getCurrentFragment().startVideoAfterInitAnimationEnd();
      }
    }
    
    public void onDropDownRelease(String paramAnonymousString, boolean paramAnonymousBoolean)
    {
      if (mEditVideos.size() > 0)
      {
        PicturePreviewActivity.this.removeNewEditVideo();
        paramAnonymousString = PicturePreviewActivity.this;
        paramAnonymousString.initSelectedStatus(mEditVideos);
      }
      paramAnonymousString = new Intent();
      paramAnonymousString.putParcelableArrayListExtra("selcteMedias", mSelectedMedia);
      paramAnonymousString.putParcelableArrayListExtra("editVideos", mEditVideos);
      paramAnonymousString.putParcelableArrayListExtra("editPics", picEditorList);
      LocalMediaCache.getInstance().putList(mCurrentPhotoList);
      setResult(-1, paramAnonymousString);
      finish();
      if (paramAnonymousBoolean) {
        overridePendingTransition(0, 0);
      }
    }
    
    public void onDropDownStart(boolean paramAnonymousBoolean)
    {
      if (mRootView != null) {
        mRootView.setBackgroundColor(0);
      }
      if ((mPreviewPictureAdapter != null) && (mPreviewPictureAdapter.getCurrentFragment() != null)) {
        mPreviewPictureAdapter.getCurrentFragment().pauseVideo();
      }
      if ((rlTopBlackLayer != null) && (rlTopBlackLayer.getVisibility() == 0)) {
        rlTopBlackLayer.setVisibility(4);
      }
      if ((rlBottomBlackLayer != null) && (rlBottomBlackLayer.getVisibility() == 0)) {
        rlBottomBlackLayer.setVisibility(4);
      }
      if ((mListView != null) && (mListView.getVisibility() == 0)) {
        mListView.setVisibility(4);
      }
    }
    
    public void onPageScrollStateChanged(int paramAnonymousInt) {}
    
    public void onPageScrolled(int paramAnonymousInt1, float paramAnonymousFloat, int paramAnonymousInt2) {}
    
    public void onPageSelected(int paramAnonymousInt)
    {
      PicturePreviewActivity.access$1102(PicturePreviewActivity.this, paramAnonymousInt);
      if ((mCurrentPosition >= 0) && (mCurrentPosition < mCurrentPhotoList.size()))
      {
        LocalMedia localLocalMedia = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
        if ((mSelectedMedia != null) && (mSelectedMedia.size() > 0))
        {
          if (mSelectedMedia.contains(localLocalMedia))
          {
            mSelect.setImageResource(R.drawable.lib_uni_album_image_select_icon);
            localLocalMedia.setPicked(true);
            mListView.scrollTo(9999);
          }
          else
          {
            localLocalMedia.setPicked(false);
            mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
          }
        }
        else
        {
          localLocalMedia.setPicked(false);
          mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
        }
        mCurrentPhotoList.set(mCurrentPosition, localLocalMedia);
        PicturePreviewActivity.this.setPrompt(localLocalMedia, false);
      }
    }
  };
  private String editorMediaPath = "";
  private int editorSwitch = 0;
  private ImageView ivBeautifyHint;
  private boolean loadVideo = false;
  private LinearLayout mBackContainer;
  private Button mConfirm;
  private ArrayList<LocalMedia> mCurrentPhotoList;
  private int mCurrentPosition = 0;
  private final ArrayList<LocalMedia> mEditVideos = new ArrayList();
  private HorizontalListView mListView;
  private PreviewPictureAdapter mPreviewPictureAdapter;
  private TextView mPrompt;
  private View mRootView;
  private ImageView mSelect;
  private LinearLayout mSelectContainer;
  private SelectPictureAdapter mSelectPictureAdapter;
  private ArrayList<LocalMedia> mSelectedMedia;
  private DropDownViewPager mViewPager;
  private int needSelectCount = 1;
  private ArrayList<LocalMedia> picEditorList = new ArrayList();
  private RelativeLayout rlBottomBlackLayer;
  private RelativeLayout rlTopBlackLayer;
  private TextView tvPicBeautify;
  private String videoMaxDuration = "10";
  private String videoMinDuration = "3";
  
  public PicturePreviewActivity() {}
  
  private void addSelectedVideo(LocalMedia paramLocalMedia)
  {
    paramLocalMedia.setPicked(true);
    mSelectedMedia.add(0, paramLocalMedia);
    notifySelectPictureAdapter();
  }
  
  private void cancelSelectedPicture(LocalMedia paramLocalMedia)
  {
    Object localObject = mSelectedMedia;
    if ((localObject != null) && (((ArrayList)localObject).size() > 0))
    {
      paramLocalMedia.setPicked(false);
      mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
      localObject = mSelectedMedia.iterator();
      while (((Iterator)localObject).hasNext()) {
        if (((LocalMedia)((Iterator)localObject).next()).getPath().equals(paramLocalMedia.getPath())) {
          ((Iterator)localObject).remove();
        }
      }
      mSelectPictureAdapter.notifyDataSetChanged();
    }
  }
  
  private void clickSelectButton()
  {
    Object localObject = mCurrentPhotoList;
    if ((localObject != null) && (mCurrentPosition >= 0) && (((ArrayList)localObject).size() > 0))
    {
      localObject = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
      setPickState(((LocalMedia)localObject).isPicked(), (LocalMedia)localObject);
    }
  }
  
  private void getData()
  {
    Intent localIntent = getIntent();
    mCurrentPhotoList = LocalMediaCache.getInstance().popList();
    mSelectedMedia = localIntent.getParcelableArrayListExtra("selcteMedias");
    mCurrentPosition = localIntent.getIntExtra("position", mCurrentPosition);
    loadVideo = localIntent.getBooleanExtra("loadVideo", false);
    if (loadVideo)
    {
      videoMinDuration = localIntent.getStringExtra("videoMinDuration");
      videoMaxDuration = localIntent.getStringExtra("videoMaxDuration");
      editorSwitch = localIntent.getIntExtra("videoEditoAction", 0);
      if (UnStringUtils.isEmpty(videoMinDuration)) {
        videoMinDuration = String.valueOf(3L);
      }
      if (UnStringUtils.isEmpty(videoMaxDuration)) {
        videoMaxDuration = String.valueOf(10L);
      }
    }
    canBeautifyPic = localIntent.getBooleanExtra("needEditorPic", false);
    cropShape = localIntent.getIntExtra("cropShape", -1);
    cropCircleRadius = localIntent.getFloatExtra("cropCircleRadius", 0.0F);
    cropRectX = localIntent.getFloatExtra("cropRectX", 0.0F);
    cropRectY = localIntent.getFloatExtra("cropRectY", 0.0F);
    needSelectCount = localIntent.getIntExtra("canSelectedMediaCount", 1);
  }
  
  private void goPicEditorActivity(LocalMedia paramLocalMedia)
  {
    Intent localIntent = new Intent((Context)this, ImageEditorActivity.class);
    editorMediaPath = paramLocalMedia.getPath();
    ImageParam localImageParam = new ImageParam();
    editorImagePath = paramLocalMedia.getPath();
    int i = cropShape;
    int j = 1;
    if (((i == 0) || (i == 1)) && (canBeautifyPic))
    {
      i = 0;
    }
    else
    {
      int k = cropShape;
      i = j;
      if (k != 0) {
        if (k == 1) {
          i = j;
        } else if (canBeautifyPic) {
          i = 2;
        } else {
          i = -1;
        }
      }
    }
    editorFunction = i;
    cropShape = cropShape;
    cropCircleRadius = cropCircleRadius;
    cropRectX = cropRectX;
    cropRectY = cropRectY;
    localIntent.putExtra("imageParam", localImageParam);
    startActivityForResult(localIntent, 1005);
  }
  
  private void goVideoEditorActivity(LocalMedia paramLocalMedia)
  {
    if (UnStringUtils.isEmpty(paramLocalMedia.getPath())) {
      return;
    }
    if (editorSwitch != 0)
    {
      editorMediaPath = paramLocalMedia.getPath();
      Intent localIntent = new Intent((Context)this, VideoEditorActivity.class);
      VideoParam localVideoParam = new VideoParam();
      editorVideoPath = paramLocalMedia.getPath();
      cutMaxTime = (Long.parseLong(videoMaxDuration) * 1000L);
      cutMinTime = (Long.parseLong(videoMinDuration) * 1000L);
      editorFunctionControl = (editorSwitch - 1);
      localIntent.putExtra("videoParam", localVideoParam);
      startActivityForResult(localIntent, 1004);
    }
  }
  
  private void initAdapter()
  {
    if (mCurrentPhotoList == null) {
      return;
    }
    ArrayList localArrayList = mSelectedMedia;
    mSelectPictureAdapter = new SelectPictureAdapter((Context)this, localArrayList);
    mSelectPictureAdapter.setCallBack(this);
    mListView.setAdapter(mSelectPictureAdapter);
    mPreviewPictureAdapter = new PreviewPictureAdapter(getSupportFragmentManager(), mCurrentPhotoList);
    mViewPager.setAdapter(mPreviewPictureAdapter);
    initViewPager();
  }
  
  private void initSelectedStatus(ArrayList paramArrayList)
  {
    Object localObject = mSelectedMedia;
    if ((localObject != null) && (((ArrayList)localObject).size() > 0))
    {
      localObject = ((LocalMedia)mSelectedMedia.get(0)).getPath();
      paramArrayList = paramArrayList.iterator();
      while (paramArrayList.hasNext())
      {
        LocalMedia localLocalMedia = (LocalMedia)paramArrayList.next();
        if ((!UnStringUtils.isEmpty((CharSequence)localObject)) && (((String)localObject).equals(localLocalMedia.getPath()))) {
          localLocalMedia.setPicked(true);
        } else {
          localLocalMedia.setPicked(false);
        }
      }
    }
  }
  
  private void initViewPager()
  {
    if ((mCurrentPosition >= 0) && (mCurrentPhotoList.size() > 0))
    {
      Object localObject = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
      setCurrentPosition((LocalMedia)localObject);
      boolean bool = ((LocalMedia)localObject).isPicked();
      localObject = mSelect;
      int i;
      if (bool) {
        i = R.drawable.lib_uni_album_image_select_icon;
      } else {
        i = R.drawable.lib_uni_album_image_not_select_icon;
      }
      ((ImageView)localObject).setImageResource(i);
      setCompleteProgress();
    }
  }
  
  private void initViews()
  {
    mRootView = findViewById(R.id.lib_ec_album_preview_root);
    rlTopBlackLayer = ((RelativeLayout)findViewById(R.id.lib_ec_album_preview_title_bar));
    rlBottomBlackLayer = ((RelativeLayout)findViewById(R.id.lib_ec_album_preview_bottom));
    mBackContainer = ((LinearLayout)findViewById(R.id.lib_ec_preview_back_container));
    mSelect = ((ImageView)findViewById(R.id.lib_ec_album_preview_select));
    mSelectContainer = ((LinearLayout)findViewById(R.id.lib_ec_preview_select_container));
    mViewPager = ((DropDownViewPager)findViewById(R.id.lib_ec_album_preview_viewpager));
    mListView = ((HorizontalListView)findViewById(R.id.lib_ec_album_preview_horizontal_view));
    mPrompt = ((TextView)findViewById(R.id.lib_ec_album_preview_prompt));
    mConfirm = ((Button)findViewById(R.id.lib_ec_photo_album_confirm));
    mConfirm.setEnabled(false);
    tvPicBeautify = ((TextView)findViewById(R.id.lib_ec_album_preview_pic_beautify));
    ivBeautifyHint = ((ImageView)findViewById(R.id.iv_beautify_hint));
    if (editorSwitch == 0) {
      mPrompt.setVisibility(8);
    }
    showListView();
  }
  
  private boolean isHaveVideo()
  {
    Object localObject = mSelectedMedia;
    if (localObject != null)
    {
      if (((ArrayList)localObject).size() == 0) {
        return false;
      }
      localObject = ((LocalMedia)mSelectedMedia.get(0)).getPictureType();
      if ((!UnStringUtils.isEmpty((CharSequence)localObject)) && (PictureMimeType.isVideo((String)localObject))) {
        return true;
      }
    }
    return false;
  }
  
  private void notifySelectPictureAdapter()
  {
    mSelectPictureAdapter.setSelectedMedias(mSelectedMedia);
    mSelect.setImageResource(R.drawable.lib_uni_album_image_select_icon);
    mSelect.setVisibility(0);
  }
  
  private void onConfirm()
  {
    Intent localIntent = new Intent();
    localIntent.putParcelableArrayListExtra("selcteMedias", mSelectedMedia);
    localIntent.putExtra("back_finish", true);
    setResult(-1, localIntent);
    finish();
  }
  
  private void registerListener()
  {
    rlTopBlackLayer.setOnClickListener(this);
    rlBottomBlackLayer.setOnClickListener(this);
    mBackContainer.setOnClickListener(this);
    mSelectContainer.setOnClickListener(this);
    mPrompt.setOnClickListener(this);
    tvPicBeautify.setOnClickListener(this);
    mConfirm.setOnClickListener(this);
    mViewPager.setDropViewPagerListener(dropViewPagerListener);
  }
  
  private void removeFirstVideo()
  {
    ArrayList localArrayList = mSelectedMedia;
    if ((localArrayList != null) && (localArrayList.size() > 0) && (PictureMimeType.isVideo(((LocalMedia)mSelectedMedia.get(0)).getPictureType()))) {
      mSelectedMedia.remove(0);
    }
  }
  
  private void removeNewEditVideo()
  {
    Iterator localIterator1 = mCurrentPhotoList.iterator();
    while (localIterator1.hasNext())
    {
      String str = ((LocalMedia)localIterator1.next()).getPath();
      if (!UnStringUtils.isEmpty(str))
      {
        Iterator localIterator2 = mEditVideos.iterator();
        while (localIterator2.hasNext()) {
          if (str.equals(((LocalMedia)localIterator2.next()).getPath())) {
            localIterator1.remove();
          }
        }
      }
    }
  }
  
  private void selectPicture(LocalMedia paramLocalMedia)
  {
    if (mSelectedMedia.size() == needSelectCount)
    {
      if (isHaveVideo())
      {
        paramLocalMedia = getString(R.string.uni_album_video_picture_limit);
        Toast.makeText((Context)this, paramLocalMedia, 0).show();
        return;
      }
      paramLocalMedia = getString(R.string.uni_album_select_max_toast, new Object[] { Integer.valueOf(needSelectCount) });
      Toast.makeText((Context)this, paramLocalMedia, 0).show();
      return;
    }
    boolean bool1 = isHaveVideo();
    boolean bool2 = PictureMimeType.isVideo(paramLocalMedia.getPictureType());
    if ((bool1) && (bool2))
    {
      paramLocalMedia = getString(R.string.uni_album_one_video_at_most);
      Toast.makeText((Context)this, paramLocalMedia, 0).show();
      return;
    }
    mSelect.setImageResource(R.drawable.lib_uni_album_image_select_icon);
    paramLocalMedia.setPicked(true);
    if (bool2) {
      mSelectedMedia.add(0, paramLocalMedia);
    } else {
      mSelectedMedia.add(paramLocalMedia);
    }
    paramLocalMedia = this;
    mSelectPictureAdapter.notifyDataSetChanged();
    mListView.scrollTo(9999);
  }
  
  private void setCompleteProgress()
  {
    Object localObject = mSelectedMedia;
    if ((localObject != null) && (((ArrayList)localObject).size() > 0))
    {
      mListView.setVisibility(0);
      mConfirm.setEnabled(true);
      localObject = mConfirm;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(getString(R.string.uni_album_complete));
      localStringBuilder.append(" ");
      localStringBuilder.append(mSelectedMedia.size());
      localStringBuilder.append("/");
      localStringBuilder.append(needSelectCount);
      ((TextView)localObject).setText(localStringBuilder.toString());
      return;
    }
    mConfirm.setEnabled(false);
    mListView.setVisibility(8);
    mConfirm.setText(getString(R.string.uni_album_complete));
  }
  
  private void setCurrentPosition(LocalMedia paramLocalMedia)
  {
    int i = 0;
    while (i < mCurrentPhotoList.size())
    {
      LocalMedia localLocalMedia = (LocalMedia)mCurrentPhotoList.get(i);
      if (paramLocalMedia.getPath().equals(localLocalMedia.getPath())) {
        mCurrentPosition = i;
      }
      i += 1;
    }
    mPreviewPictureAdapter.setCurrentPosition(mCurrentPosition);
    mViewPager.setCurrentItem(mCurrentPosition, false);
    setPrompt(paramLocalMedia, true);
  }
  
  private void setNewMediaPosition(LocalMedia paramLocalMedia)
  {
    mCurrentPosition += 1;
    mCurrentPhotoList.add(mCurrentPosition, paramLocalMedia);
    mPreviewPictureAdapter.notifyDataSetChanged();
    mViewPager.setCurrentItem(mCurrentPosition);
  }
  
  private void setPickState(boolean paramBoolean, LocalMedia paramLocalMedia)
  {
    if (paramBoolean) {
      cancelSelectedPicture(paramLocalMedia);
    } else {
      selectPicture(paramLocalMedia);
    }
    showListView();
    setCompleteProgress();
  }
  
  private void setPrompt(LocalMedia paramLocalMedia, boolean paramBoolean)
  {
    int i;
    if (PictureMimeType.isVideo(paramLocalMedia.getPictureType()))
    {
      mPrompt.setVisibility(0);
      tvPicBeautify.setVisibility(8);
      ivBeautifyHint.setVisibility(8);
      long l1 = Math.floor(paramLocalMedia.getDuration() / 1000L);
      long l2 = Long.parseLong(videoMinDuration);
      long l3 = Long.parseLong(videoMaxDuration);
      if (l1 > l3)
      {
        i = editorSwitch;
        if ((i != 1) && (i != 2))
        {
          if (i == 3)
          {
            mPrompt.setTextSize(15.0F);
            mPrompt.setText(getString(R.string.uni_album_video_beautify_clip));
            mPrompt.setTextColor(-1);
            mPrompt.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
          }
          else
          {
            mPrompt.setVisibility(8);
          }
        }
        else
        {
          i = R.drawable.lib_uni_album_preview_video_clipping_icon;
          paramLocalMedia = ContextCompat.getDrawable((Context)this, i);
          mPrompt.setCompoundDrawablesWithIntrinsicBounds(paramLocalMedia, null, null, null);
          mPrompt.setTextColor(getResources().getColor(R.color.lib_uni_album_preview_cut_font_color));
          mPrompt.setTextSize(12.0F);
          mPrompt.setText(getString(R.string.uni_album_over_ten_seconds_prompt));
        }
        mSelectContainer.setVisibility(8);
        return;
      }
      if ((l1 >= l2) && (l1 <= l3))
      {
        if (editorSwitch != 0)
        {
          mPrompt.setTextColor(-1);
          mPrompt.setTextSize(15.0F);
          mPrompt.setText(getString(R.string.uni_album_video_beautify_clip));
          mPrompt.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
        }
        else
        {
          mPrompt.setVisibility(8);
        }
        mSelectContainer.setVisibility(0);
      }
    }
    else
    {
      mPrompt.setVisibility(8);
      mSelectContainer.setVisibility(0);
      if (!canBeautifyPic)
      {
        i = cropShape;
        if ((i != 0) && (i != 1))
        {
          tvPicBeautify.setVisibility(8);
          return;
        }
      }
      tvPicBeautify.setVisibility(0);
    }
  }
  
  private void showListView()
  {
    ArrayList localArrayList = mSelectedMedia;
    if ((localArrayList != null) && (localArrayList.size() > 0))
    {
      mListView.setVisibility(0);
      return;
    }
    mListView.setVisibility(8);
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt2 != -1) {
      return;
    }
    Object localObject;
    switch (paramInt1)
    {
    default: 
      
    case 1005: 
      localObject = mSelectedMedia;
      if ((localObject != null) && (((ArrayList)localObject).size() >= needSelectCount)) {
        return;
      }
      if (paramIntent == null) {
        return;
      }
      if (paramIntent.getBooleanExtra("editorReturn", false))
      {
        paramIntent = paramIntent.getStringExtra("imageEditorReturnPath");
        if (TextUtils.isEmpty(paramIntent)) {
          return;
        }
        if (new File(paramIntent).exists())
        {
          if (TextUtils.equals(editorMediaPath, paramIntent))
          {
            paramIntent = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
            if (!paramIntent.isPicked())
            {
              paramIntent.setPicked(true);
              mCurrentPhotoList.set(mCurrentPosition, paramIntent);
              mPreviewPictureAdapter.notifyDataSetChanged();
              localObject = mSelectedMedia;
              if ((localObject != null) && (!((ArrayList)localObject).contains(paramIntent)))
              {
                paramIntent.setPicked(true);
                mSelectedMedia.add(paramIntent);
                notifySelectPictureAdapter();
              }
            }
          }
          else
          {
            paramIntent = new LocalMedia(paramIntent, true, true);
            localObject = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
            ((LocalMedia)localObject).setPicked(false);
            setNewMediaPosition(paramIntent);
            picEditorList.add(paramIntent);
            ArrayList localArrayList = mSelectedMedia;
            if (localArrayList != null) {
              if (localArrayList.contains(localObject))
              {
                paramInt1 = mSelectedMedia.indexOf(localObject);
                paramIntent.setPicked(true);
                mSelectedMedia.set(paramInt1, paramIntent);
                notifySelectPictureAdapter();
              }
              else
              {
                paramIntent.setPicked(true);
                mSelectedMedia.add(paramIntent);
                notifySelectPictureAdapter();
              }
            }
          }
          showListView();
          setCompleteProgress();
          return;
        }
      }
      break;
    case 1004: 
      localObject = mSelectedMedia;
      if ((localObject != null) && (((ArrayList)localObject).size() >= needSelectCount)) {
        return;
      }
      if (paramIntent != null)
      {
        paramIntent = paramIntent.getStringExtra("videoEditorOutPath");
        if (UnStringUtils.isEmpty(paramIntent)) {
          return;
        }
        if (new File(paramIntent).exists())
        {
          long l = FileUtil.getVideoDuration(paramIntent);
          localObject = PictureMimeType.createVideoType(paramIntent);
          if (UnStringUtils.isEmpty((CharSequence)localObject)) {
            return;
          }
          if (TextUtils.equals(editorMediaPath, paramIntent))
          {
            paramIntent = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
            if (!paramIntent.isPicked())
            {
              paramIntent.setPicked(true);
              mCurrentPhotoList.set(mCurrentPosition, paramIntent);
              mPreviewPictureAdapter.notifyDataSetChanged();
              removeFirstVideo();
              if (mSelectedMedia != null) {
                addSelectedVideo(paramIntent);
              }
            }
          }
          else
          {
            paramIntent = new LocalMedia(paramIntent, l, true, (String)localObject);
            ((LocalMedia)mCurrentPhotoList.get(mCurrentPosition)).setPicked(false);
            setNewMediaPosition(paramIntent);
            mEditVideos.add(paramIntent);
            removeFirstVideo();
            addSelectedVideo(paramIntent);
          }
          showListView();
          setCompleteProgress();
        }
      }
      break;
    }
  }
  
  public void onBackPressed()
  {
    onCooActivityBack("4");
  }
  
  public void onClick(View paramView)
  {
    int i = paramView.getId();
    if (i == R.id.lib_ec_preview_back_container)
    {
      onCooActivityBack("1");
      return;
    }
    if (i == R.id.lib_ec_preview_select_container)
    {
      clickSelectButton();
      return;
    }
    if (i == R.id.lib_ec_album_preview_prompt)
    {
      paramView = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
      if (PictureMimeType.isVideo(paramView.getPictureType())) {
        if (!UnStringUtils.isEmpty(videoMinDuration))
        {
          if (UnStringUtils.isEmpty(videoMaxDuration)) {
            return;
          }
          goVideoEditorActivity(paramView);
        }
      }
    }
    else
    {
      if (i == R.id.lib_ec_album_preview_pic_beautify)
      {
        goPicEditorActivity((LocalMedia)mCurrentPhotoList.get(mCurrentPosition));
        return;
      }
      if (i == R.id.lib_ec_photo_album_confirm)
      {
        onConfirm();
        return;
      }
      if (i == R.id.lib_ec_album_preview_title_bar) {
        return;
      }
      i = R.id.lib_ec_album_preview_bottom;
    }
  }
  
  public void onCooActivityBack(String paramString)
  {
    DropDownViewPager localDropDownViewPager = mViewPager;
    if (localDropDownViewPager != null) {
      localDropDownViewPager.finishWithAnimation(paramString);
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    if (Build.VERSION.SDK_INT != 26) {
      setRequestedOrientation(1);
    }
    requestWindowFeature(1);
    getWindow().setFlags(1024, 1024);
    super.onCreate(paramBundle);
    setContentView(R.layout.lib_ec_activity_album_preview);
    getData();
    initViews();
    initAdapter();
    registerListener();
  }
  
  public void onDelete(LocalMedia paramLocalMedia)
  {
    Object localObject = mSelectedMedia;
    if ((localObject != null) && (((ArrayList)localObject).size() > 0))
    {
      paramLocalMedia.setPicked(false);
      mSelectedMedia.remove(paramLocalMedia);
      mSelectPictureAdapter.notifyDataSetChanged();
      localObject = mCurrentPhotoList;
      if ((localObject != null) && (mCurrentPosition >= 0) && (((ArrayList)localObject).size() > 0))
      {
        localObject = (LocalMedia)mCurrentPhotoList.get(mCurrentPosition);
        if (((LocalMedia)localObject).getPath().equals(paramLocalMedia.getPath()))
        {
          ((LocalMedia)localObject).setPicked(false);
          mSelect.setImageResource(R.drawable.lib_uni_album_image_not_select_icon);
        }
        showListView();
        setCompleteProgress();
      }
    }
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
  }
}
