package com.jd.lib.globalutillib.skin;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.GradientDrawable.Orientation;
import android.graphics.drawable.StateListDrawable;
import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONArray;
import com.jd.framework.json.JDJSONObject;
import com.jingdong.common.network.HttpGroupUtils;
import com.jingdong.jdsdk.network.toolbox.HttpError;
import com.jingdong.jdsdk.network.toolbox.HttpGroup;
import com.jingdong.jdsdk.network.toolbox.HttpGroup.HttpSettingParams;
import com.jingdong.jdsdk.network.toolbox.HttpGroup.HttpTaskListener;
import com.jingdong.jdsdk.network.toolbox.HttpGroup.OnCommonListener;
import com.jingdong.jdsdk.network.toolbox.HttpResponse;
import com.jingdong.jdsdk.network.toolbox.HttpSetting;
import com.jingdong.sdk.platform.lib.openapi.OpenApiHelper;
import com.jingdong.sdk.platform.lib.openapi.utils.IClientInfo;
import com.jingdong.sdk.platform.lib.utils.HostUtils;
import java.util.ArrayList;
import java.util.Map;

public class SkinUtils
{
  public SkinUtils() {}
  
  private static void addDrawableState(StateListDrawable paramStateListDrawable, int paramInt, GradientDrawable paramGradientDrawable)
  {
    if (paramInt == 1)
    {
      paramStateListDrawable.addState(new int[] { 16842919 }, paramGradientDrawable);
      paramStateListDrawable.addState(new int[] { 16842913 }, paramGradientDrawable);
      paramStateListDrawable.addState(new int[] { 16842912 }, paramGradientDrawable);
      paramStateListDrawable.addState(new int[] { -16842910 }, paramGradientDrawable);
      return;
    }
    paramStateListDrawable.addState(new int[0], paramGradientDrawable);
  }
  
  private static GradientDrawable createBorderDrawable(int paramInt1, int paramInt2, float paramFloat)
  {
    GradientDrawable localGradientDrawable = new GradientDrawable();
    localGradientDrawable.setStroke(1, paramInt1);
    localGradientDrawable.setColor(paramInt2);
    localGradientDrawable.setCornerRadius(paramFloat);
    return localGradientDrawable;
  }
  
  private static void createDefaultDrawable(StateListDrawable paramStateListDrawable, SkinGlobalInfo paramSkinGlobalInfo, int paramInt1, int paramInt2, int paramInt3, int paramInt4, float paramFloat)
  {
    createDefaultDrawable(paramStateListDrawable, paramSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, 1, paramFloat);
  }
  
  private static void createDefaultDrawable(StateListDrawable paramStateListDrawable, SkinGlobalInfo paramSkinGlobalInfo, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, float paramFloat)
  {
    String str = getGlobalColor(paramSkinGlobalInfo, paramInt1);
    paramSkinGlobalInfo = getGlobalColor(paramSkinGlobalInfo, paramInt2);
    if (!TextUtils.isEmpty(str)) {
      paramInt3 = Color.parseColor(str);
    }
    if (!TextUtils.isEmpty(paramSkinGlobalInfo)) {
      paramInt4 = Color.parseColor(paramSkinGlobalInfo);
    }
    addDrawableState(paramStateListDrawable, paramInt5, createBorderDrawable(paramInt3, paramInt4, paramFloat));
  }
  
  private static GradientDrawable createGradientDrawable(SkinGlobalInfo paramSkinGlobalInfo, int paramInt1, int paramInt2, int paramInt3, int paramInt4, float paramFloat)
  {
    String str = getGlobalColor(paramSkinGlobalInfo, paramInt1);
    paramSkinGlobalInfo = getGlobalColor(paramSkinGlobalInfo, paramInt2);
    if (!TextUtils.isEmpty(str)) {
      paramInt3 = Color.parseColor(str);
    }
    if (!TextUtils.isEmpty(paramSkinGlobalInfo)) {
      paramInt4 = Color.parseColor(paramSkinGlobalInfo);
    }
    return createBorderDrawable(paramInt3, paramInt4, paramFloat);
  }
  
  private static GradientDrawable createSolidDrawable(int paramInt, float paramFloat)
  {
    GradientDrawable localGradientDrawable = new GradientDrawable();
    localGradientDrawable.setCornerRadius(paramFloat);
    localGradientDrawable.setColor(paramInt);
    return localGradientDrawable;
  }
  
  private static double findDouble(double paramDouble, JDJSONObject paramJDJSONObject, String[] paramArrayOfString, int paramInt)
  {
    double d = paramDouble;
    if (paramJDJSONObject != null)
    {
      if (paramArrayOfString == null) {
        return paramDouble;
      }
      int i = paramArrayOfString.length;
      if (paramInt >= i) {
        return paramDouble;
      }
      String str = paramArrayOfString[paramInt];
      d = paramDouble;
      if (paramJDJSONObject.containsKey(str))
      {
        if (paramInt == i - 1) {
          return paramJDJSONObject.optDouble(str, paramDouble);
        }
        d = findDouble(paramDouble, paramJDJSONObject.optJSONObject(str), paramArrayOfString, paramInt + 1);
      }
    }
    return d;
  }
  
  private static int findInt(int paramInt1, JDJSONObject paramJDJSONObject, String[] paramArrayOfString, int paramInt2)
  {
    int i = paramInt1;
    if (paramJDJSONObject != null)
    {
      if (paramArrayOfString == null) {
        return paramInt1;
      }
      int j = paramArrayOfString.length;
      if (paramInt2 >= j) {
        return paramInt1;
      }
      String str = paramArrayOfString[paramInt2];
      i = paramInt1;
      if (paramJDJSONObject.containsKey(str))
      {
        if (paramInt2 == j - 1) {
          return paramJDJSONObject.optInt(str, paramInt1);
        }
        i = findInt(paramInt1, paramJDJSONObject.optJSONObject(str), paramArrayOfString, paramInt2 + 1);
      }
    }
    return i;
  }
  
  private static String findStr(String paramString, JDJSONObject paramJDJSONObject, String[] paramArrayOfString, int paramInt)
  {
    String str1 = paramString;
    if (paramJDJSONObject != null)
    {
      if (paramArrayOfString == null) {
        return paramString;
      }
      int i = paramArrayOfString.length;
      if (paramInt >= i) {
        return paramString;
      }
      String str2 = paramArrayOfString[paramInt];
      str1 = paramString;
      if (paramJDJSONObject.containsKey(str2))
      {
        if (paramInt == i - 1) {
          return paramJDJSONObject.optString(str2, paramString);
        }
        str1 = findStr(paramString, paramJDJSONObject.optJSONObject(str2), paramArrayOfString, paramInt + 1);
      }
    }
    return str1;
  }
  
  public static StateListDrawable getBorderDrawable(String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4, float paramFloat)
  {
    paramString = getChildSkinInfo(paramString);
    SkinGlobalInfo localSkinGlobalInfo = getGlobalSkinInfo();
    StateListDrawable localStateListDrawable = new StateListDrawable();
    GradientDrawable localGradientDrawable = createBorderDrawable(Color.parseColor("#DADADA"), Color.parseColor("#FFFFFF"), paramFloat);
    if (paramString == null)
    {
      if (localSkinGlobalInfo == null)
      {
        addDrawableState(localStateListDrawable, 1, createBorderDrawable(paramInt3, paramInt4, paramFloat));
        addDrawableState(localStateListDrawable, 0, localGradientDrawable);
        return localStateListDrawable;
      }
      createDefaultDrawable(localStateListDrawable, localSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, paramFloat);
      addDrawableState(localStateListDrawable, 0, localGradientDrawable);
      return localStateListDrawable;
    }
    if (TextUtils.isEmpty(borderColor))
    {
      createDefaultDrawable(localStateListDrawable, localSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, paramFloat);
      addDrawableState(localStateListDrawable, 0, localGradientDrawable);
      return localStateListDrawable;
    }
    paramInt1 = Color.parseColor(borderColor);
    if (!TextUtils.isEmpty(fillingColor)) {
      paramInt4 = Color.parseColor(fillingColor);
    }
    addDrawableState(localStateListDrawable, 1, createBorderDrawable(paramInt1, paramInt4, paramFloat));
    addDrawableState(localStateListDrawable, 0, localGradientDrawable);
    return localStateListDrawable;
  }
  
  private static JDJSONObject getChildInfo()
  {
    if (getInstanceskinResponse == null) {
      return null;
    }
    if (getInstanceskinResponse.data == null) {
      return null;
    }
    return getInstanceskinResponse.data.configChildInfo;
  }
  
  public static SkinChildInfo getChildSkinInfo(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    if (getInstanceskinResponse == null) {
      return null;
    }
    if (getInstanceskinResponse.data == null) {
      return null;
    }
    if (getInstanceskinResponse.data.configChildInfo == null) {
      return null;
    }
    if (getInstanceskinResponse.data.configChildVo.containsKey(paramString)) {
      return (SkinChildInfo)getInstanceskinResponse.data.configChildVo.get(paramString);
    }
    return null;
  }
  
  public static StateListDrawable getClickBorderDrawable(String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4, float paramFloat)
  {
    Object localObject = getChildSkinInfo(paramString);
    SkinGlobalInfo localSkinGlobalInfo = getGlobalSkinInfo();
    paramString = new StateListDrawable();
    GradientDrawable localGradientDrawable = createBorderDrawable(Color.parseColor("#DADADA"), Color.parseColor("#FFFFFF"), paramFloat);
    if (localObject == null)
    {
      if (localSkinGlobalInfo == null)
      {
        localObject = createBorderDrawable(paramInt3, paramInt4, paramFloat);
        addDrawableState(paramString, 1, localGradientDrawable);
        addDrawableState(paramString, 0, (GradientDrawable)localObject);
        return paramString;
      }
      addDrawableState(paramString, 1, localGradientDrawable);
      createDefaultDrawable(paramString, localSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, 0, paramFloat);
      return paramString;
    }
    if (TextUtils.isEmpty(borderColor))
    {
      addDrawableState(paramString, 1, localGradientDrawable);
      createDefaultDrawable(paramString, localSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, 0, paramFloat);
      return paramString;
    }
    paramInt1 = Color.parseColor(borderColor);
    if (!TextUtils.isEmpty(fillingColor)) {
      paramInt4 = Color.parseColor(fillingColor);
    }
    localObject = createBorderDrawable(paramInt1, paramInt4, paramFloat);
    addDrawableState(paramString, 1, localGradientDrawable);
    addDrawableState(paramString, 0, (GradientDrawable)localObject);
    return paramString;
  }
  
  public static StateListDrawable getFilledDrawable(String paramString, int paramInt1, int paramInt2, float paramFloat)
  {
    Object localObject2 = getChildSkinInfo(paramString);
    Object localObject1 = getGlobalSkinInfo();
    paramString = new StateListDrawable();
    if (localObject2 == null)
    {
      if (localObject1 == null)
      {
        localObject1 = createSolidDrawable(paramInt2, paramFloat);
        paramString.addState(new int[0], (Drawable)localObject1);
        return paramString;
      }
      localObject1 = getGlobalColor((SkinGlobalInfo)localObject1, paramInt1);
      if (TextUtils.isEmpty((CharSequence)localObject1))
      {
        localObject1 = createSolidDrawable(paramInt2, paramFloat);
        paramString.addState(new int[0], (Drawable)localObject1);
        return paramString;
      }
      localObject1 = createSolidDrawable(Color.parseColor((String)localObject1), paramFloat);
      paramString.addState(new int[0], (Drawable)localObject1);
      return paramString;
    }
    BtnBgColor localBtnBgColor = backgroupColor;
    localObject2 = clickColor;
    if (localObject2 != null) {
      handleStateDrawable(paramString, (BtnBgColor)localObject2, (SkinGlobalInfo)localObject1, -1, -1, paramFloat, 2);
    }
    if (localBtnBgColor == null)
    {
      localObject1 = newGlobalDrawable((SkinGlobalInfo)localObject1, paramInt1, paramInt2, paramFloat);
      paramString.addState(new int[0], (Drawable)localObject1);
      return paramString;
    }
    handleStateDrawable(paramString, localBtnBgColor, (SkinGlobalInfo)localObject1, paramInt1, paramInt2, paramFloat, 1);
    return paramString;
  }
  
  public static double getFloatValue(String paramString1, String paramString2, double paramDouble)
  {
    if ((TextUtils.isEmpty(paramString1)) && (TextUtils.isEmpty(paramString2))) {
      return paramDouble;
    }
    boolean bool = TextUtils.isEmpty(paramString1);
    String[] arrayOfString = null;
    if (!bool) {
      paramString1 = paramString1.split("\\.");
    } else {
      paramString1 = null;
    }
    if (!TextUtils.isEmpty(paramString2)) {
      arrayOfString = paramString2.split("\\.");
    }
    paramString2 = getGlobalInfo();
    if ((paramString1 != null) && (paramString1.length > 0))
    {
      JDJSONObject localJDJSONObject = getChildInfo();
      if (localJDJSONObject == null)
      {
        if (paramString2 == null) {
          return paramDouble;
        }
        return findDouble(paramDouble, paramString2, arrayOfString, 0);
      }
      double d = findDouble(-1.0D, localJDJSONObject, paramString1, 0);
      if (d < 0.0D) {
        return findDouble(paramDouble, paramString2, arrayOfString, 0);
      }
      return d;
    }
    return findDouble(paramDouble, paramString2, arrayOfString, 0);
  }
  
  public static ColorStateList getFontColorList(String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    paramString = getChildSkinInfo(paramString);
    SkinGlobalInfo localSkinGlobalInfo = getGlobalSkinInfo();
    int[][] arrayOfInt = new int[4][];
    arrayOfInt[0] = { 16842913 };
    arrayOfInt[1] = { 16842919 };
    arrayOfInt[2] = { 16842912 };
    arrayOfInt[3] = new int[0];
    int[] arrayOfInt1 = new int[arrayOfInt.length];
    if ((paramString != null) && (!TextUtils.isEmpty(fontColor))) {
      paramInt2 = Color.parseColor(fontColor);
    } else if (localSkinGlobalInfo != null) {
      switch (paramInt1)
      {
      default: 
        break;
      case 3: 
        paramInt2 = Color.parseColor(finalColorThree);
        break;
      case 2: 
        paramInt2 = Color.parseColor(finalColorTwo);
        break;
      case 1: 
        paramInt2 = Color.parseColor(finalColorOne);
      }
    }
    arrayOfInt1[2] = paramInt2;
    arrayOfInt1[1] = paramInt2;
    arrayOfInt1[0] = paramInt2;
    arrayOfInt1[3] = paramInt3;
    return new ColorStateList(arrayOfInt, arrayOfInt1);
  }
  
  private static String getGlobalColor(SkinGlobalInfo paramSkinGlobalInfo, int paramInt)
  {
    if ((paramSkinGlobalInfo != null) && (paramInt >= 0))
    {
      switch (paramInt)
      {
      default: 
        return "";
      case 3: 
        return finalColorThree;
      case 2: 
        return finalColorTwo;
      }
      return finalColorOne;
    }
    return "";
  }
  
  private static JDJSONObject getGlobalInfo()
  {
    if (getInstanceskinResponse == null) {
      return null;
    }
    if (getInstanceskinResponse.data == null) {
      return null;
    }
    JDJSONArray localJDJSONArray = getInstanceskinResponse.data.configFinalInfo;
    int i = getInstanceskinResponse.data.selected;
    if (localJDJSONArray != null)
    {
      if (i >= localJDJSONArray.size()) {
        return null;
      }
      return getInstanceskinResponse.data.configFinalInfo.getJSONObject(i);
    }
    return null;
  }
  
  public static SkinGlobalInfo getGlobalSkinInfo()
  {
    if (getInstanceskinResponse == null) {
      return null;
    }
    if (getInstanceskinResponse.data == null) {
      return null;
    }
    if (getInstanceskinResponse.data.configFinalVos == null) {
      return null;
    }
    ArrayList localArrayList = getInstanceskinResponse.data.configFinalVos;
    int i = getInstanceskinResponse.data.selected;
    if (i < localArrayList.size()) {
      return (SkinGlobalInfo)localArrayList.get(i);
    }
    return null;
  }
  
  public static int getIntValue(String paramString1, String paramString2, int paramInt)
  {
    if ((TextUtils.isEmpty(paramString1)) && (TextUtils.isEmpty(paramString2))) {
      return paramInt;
    }
    boolean bool = TextUtils.isEmpty(paramString1);
    String[] arrayOfString = null;
    if (!bool) {
      paramString1 = paramString1.split("\\.");
    } else {
      paramString1 = null;
    }
    if (!TextUtils.isEmpty(paramString2)) {
      arrayOfString = paramString2.split("\\.");
    }
    paramString2 = getGlobalInfo();
    if ((paramString1 != null) && (paramString1.length > 0))
    {
      JDJSONObject localJDJSONObject = getChildInfo();
      if (localJDJSONObject == null)
      {
        if (paramString2 == null) {
          return paramInt;
        }
        return findInt(paramInt, paramString2, arrayOfString, 0);
      }
      int i = findInt(-1, localJDJSONObject, paramString1, 0);
      if (i < 0) {
        return findInt(paramInt, paramString2, arrayOfString, 0);
      }
      return i;
    }
    return findInt(paramInt, paramString2, arrayOfString, 0);
  }
  
  public static GradientDrawable getSingleStatusDrawable(String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4, float paramFloat)
  {
    paramString = getChildSkinInfo(paramString);
    SkinGlobalInfo localSkinGlobalInfo = getGlobalSkinInfo();
    if (paramString == null)
    {
      if (localSkinGlobalInfo == null) {
        return createBorderDrawable(paramInt3, paramInt4, paramFloat);
      }
      return createGradientDrawable(localSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, paramFloat);
    }
    if (TextUtils.isEmpty(borderColor)) {
      return createGradientDrawable(localSkinGlobalInfo, paramInt1, paramInt2, paramInt3, paramInt4, paramFloat);
    }
    paramInt1 = Color.parseColor(borderColor);
    if (!TextUtils.isEmpty(fillingColor)) {
      paramInt4 = Color.parseColor(fillingColor);
    }
    return createBorderDrawable(paramInt1, paramInt4, paramFloat);
  }
  
  public static String getStrValue(String paramString1, String paramString2, String paramString3)
  {
    if ((TextUtils.isEmpty(paramString1)) && (TextUtils.isEmpty(paramString2))) {
      return paramString3;
    }
    boolean bool = TextUtils.isEmpty(paramString1);
    String[] arrayOfString = null;
    if (!bool) {
      paramString1 = paramString1.split("\\.");
    } else {
      paramString1 = null;
    }
    if (!TextUtils.isEmpty(paramString2)) {
      arrayOfString = paramString2.split("\\.");
    }
    JDJSONObject localJDJSONObject = getGlobalInfo();
    if ((paramString1 != null) && (paramString1.length > 0))
    {
      paramString2 = getChildInfo();
      if (paramString2 == null)
      {
        if (localJDJSONObject == null) {
          return paramString3;
        }
        return findStr(paramString3, localJDJSONObject, arrayOfString, 0);
      }
      paramString2 = findStr("", paramString2, paramString1, 0);
      paramString1 = paramString2;
      if (TextUtils.isEmpty(paramString2)) {
        paramString1 = findStr(paramString3, localJDJSONObject, arrayOfString, 0);
      }
      return paramString1;
    }
    return findStr(paramString3, localJDJSONObject, arrayOfString, 0);
  }
  
  private static void handleStateDrawable(StateListDrawable paramStateListDrawable, BtnBgColor paramBtnBgColor, SkinGlobalInfo paramSkinGlobalInfo, int paramInt1, int paramInt2, float paramFloat, int paramInt3)
  {
    if ((TextUtils.isEmpty(colorOne)) && (TextUtils.isEmpty(colorTwo)) && (TextUtils.isEmpty(colorThree)))
    {
      if (paramInt3 == 1)
      {
        paramBtnBgColor = newGlobalDrawable(paramSkinGlobalInfo, paramInt1, paramInt2, paramFloat);
        paramStateListDrawable.addState(new int[0], paramBtnBgColor);
      }
    }
    else
    {
      paramSkinGlobalInfo = new ArrayList();
      if (!TextUtils.isEmpty(colorOne)) {
        paramSkinGlobalInfo.add(Integer.valueOf(Color.parseColor(colorOne)));
      }
      if (!TextUtils.isEmpty(colorTwo)) {
        paramSkinGlobalInfo.add(Integer.valueOf(Color.parseColor(colorTwo)));
      }
      if (!TextUtils.isEmpty(colorThree)) {
        paramSkinGlobalInfo.add(Integer.valueOf(Color.parseColor(colorThree)));
      }
      paramBtnBgColor = new int[paramSkinGlobalInfo.size()];
      paramInt1 = 0;
      while (paramInt1 < paramSkinGlobalInfo.size())
      {
        paramBtnBgColor[paramInt1] = ((Integer)paramSkinGlobalInfo.get(paramInt1)).intValue();
        paramInt1 += 1;
      }
      paramBtnBgColor = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, paramBtnBgColor);
      paramBtnBgColor.setCornerRadius(paramFloat);
      if (paramInt3 == 1)
      {
        paramStateListDrawable.addState(new int[0], paramBtnBgColor);
        return;
      }
      paramStateListDrawable.addState(new int[] { 16842919 }, paramBtnBgColor);
      paramStateListDrawable.addState(new int[] { 16842913 }, paramBtnBgColor);
      paramStateListDrawable.addState(new int[] { -16842910 }, paramBtnBgColor);
      paramStateListDrawable.addState(new int[] { 16842912 }, paramBtnBgColor);
    }
  }
  
  private static GradientDrawable newGlobalDrawable(SkinGlobalInfo paramSkinGlobalInfo, int paramInt1, int paramInt2, float paramFloat)
  {
    paramSkinGlobalInfo = getGlobalColor(paramSkinGlobalInfo, paramInt1);
    if (TextUtils.isEmpty(paramSkinGlobalInfo)) {
      return createSolidDrawable(paramInt2, paramFloat);
    }
    return createSolidDrawable(Color.parseColor(paramSkinGlobalInfo), paramFloat);
  }
  
  public static void querySkinData(Context paramContext)
  {
    paramContext = new HttpSetting();
    paramContext.setFunctionId("usualSkinBusiness");
    paramContext.setUseFastJsonParser(true);
    paramContext.setHost(HostUtils.getCommonHost());
    paramContext.putJsonParam("apolloId", OpenApiHelper.getIClientInfo().getApolloId());
    paramContext.putJsonParam("apolloSecret", OpenApiHelper.getIClientInfo().getApolloSecret());
    paramContext.setListener((HttpGroup.HttpTaskListener)new HttpGroup.OnCommonListener()
    {
      public void onEnd(HttpResponse paramAnonymousHttpResponse)
      {
        Object localObject = paramAnonymousHttpResponse.getFastJsonObject();
        if (localObject != null)
        {
          paramAnonymousHttpResponse = (SkinResponse)JDJSON.parseObject(((JDJSON)localObject).toString(), SkinResponse.class);
          JDJSONObject localJDJSONObject = ((JDJSONObject)localObject).optJSONObject("data");
          if (localJDJSONObject != null)
          {
            localObject = localJDJSONObject.optJSONArray("configFinalVos");
            localJDJSONObject = localJDJSONObject.optJSONObject("configChildVo");
            if (data == null) {
              data = new SkinDetail();
            }
            data.configFinalInfo = ((JDJSONArray)localObject);
            data.configChildInfo = localJDJSONObject;
          }
          SkinUtils.setSkinResponse(paramAnonymousHttpResponse);
        }
      }
      
      public void onError(HttpError paramAnonymousHttpError) {}
      
      public void onReady(HttpGroup.HttpSettingParams paramAnonymousHttpSettingParams) {}
    });
    HttpGroupUtils.getHttpGroupaAsynPool().add(paramContext);
  }
  
  public static void setSkinResponse(SkinResponse paramSkinResponse)
  {
    getInstanceskinResponse = paramSkinResponse;
  }
}
