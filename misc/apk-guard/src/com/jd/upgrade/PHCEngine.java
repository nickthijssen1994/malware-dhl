package com.jd.upgrade;

import android.content.Context;
import android.text.TextUtils;
import android.util.Base64;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.json.JSONObject;
import phc.a;
import phc.b;
import phc.c;
import phc.d;

public class PHCEngine
{
  public static Server E = Server.Official;
  private static PHCEngine o;
  private String a;
  private Context l;
  
  private PHCEngine(Context paramContext)
  {
    l = paramContext.getApplicationContext();
    a = paramContext.getPackageName();
  }
  
  public static PHCEngine a(Context paramContext)
  {
    if (o == null) {
      try
      {
        if (o == null) {
          o = new PHCEngine(paramContext);
        }
      }
      catch (Throwable paramContext)
      {
        throw paramContext;
      }
    }
    return o;
  }
  
  public void b(boolean paramBoolean)
  {
    a.a(paramBoolean);
  }
  
  public void c(Server paramServer, a paramA)
  {
    E = paramServer;
    if ((paramA != null) && (d.b())) {
      new b(l, paramA).execute(null);
    }
  }
  
  public void f(a paramA)
  {
    c(Server.Official, paramA);
  }
  
  public Map parse(String paramString)
    throws IllegalArgumentException
  {
    if (!TextUtils.isEmpty(paramString))
    {
      try
      {
        paramString = new JSONObject(paramString);
        long l1 = paramString.optLong("ts");
        paramString.optString("version");
        int i = paramString.optInt("ciphertype");
        Object localObject2 = paramString.optString("cipher");
        Object localObject3 = paramString.optString("hdid");
        Object localObject4 = paramString.optString("appname");
        int j = paramString.optInt("ridx");
        Object localObject1 = d.a;
        if (j == -1)
        {
          paramString = Base64.decode("BHqxx7mF6ozKsygZ3HUozSM7rED0qHts6lZNeFRdOls=", 2);
        }
        else
        {
          paramString = (String)localObject1;
          if (localObject1 == null) {
            return null;
          }
        }
        localObject1 = ByteBuffer.allocate(8);
        Object localObject5 = ByteOrder.BIG_ENDIAN;
        localObject1 = ((ByteBuffer)localObject1).order((ByteOrder)localObject5);
        ((ByteBuffer)localObject1).putLong(l1);
        paramString = PHCNativeLoader.split().append(paramString, (String)localObject3, (String)localObject4, ((ByteBuffer)localObject1).array());
        localObject1 = new JSONObject((String)localObject2);
        localObject2 = new HashMap();
        localObject3 = ((JSONObject)localObject1).keys();
        for (;;)
        {
          boolean bool = ((Iterator)localObject3).hasNext();
          if (!bool) {
            break;
          }
          localObject4 = ((Iterator)localObject3).next();
          localObject4 = (String)localObject4;
          localObject5 = ((JSONObject)localObject1).optString((String)localObject4);
          localObject5 = PHCNativeLoader.split().append(paramString, i, Base64.decode((String)localObject5, 2));
          ((Map)localObject2).put(localObject4, new String((byte[])localObject5, Charset.forName("UTF-8")));
        }
        return localObject2;
      }
      catch (Throwable paramString)
      {
        if (!a.a) {
          break label293;
        }
        paramString.printStackTrace();
        return null;
      }
      catch (Exception paramString)
      {
        if (!a.a) {
          break label293;
        }
      }
      paramString.printStackTrace();
      return null;
    }
    throw new IllegalArgumentException("plaintext can not null;");
    label293:
    return null;
  }
  
  public String write(Map paramMap, PHCCipherSuite paramPHCCipherSuite)
    throws IllegalArgumentException
  {
    if ((paramMap != null) && (!paramMap.isEmpty()) && (paramPHCCipherSuite != null))
    {
      try
      {
        long l1 = System.currentTimeMillis();
        Object localObject1 = ByteBuffer.allocate(8);
        Object localObject2 = ByteOrder.BIG_ENDIAN;
        Object localObject4 = ((ByteBuffer)localObject1).order((ByteOrder)localObject2);
        ((ByteBuffer)localObject4).putLong(l1);
        int i = d.c;
        Object localObject3 = d.a;
        localObject1 = d.b;
        localObject2 = localObject3;
        if (localObject3 == null)
        {
          localObject2 = Base64.decode("BHqxx7mF6ozKsygZ3HUozSM7rED0qHts6lZNeFRdOls=", 2);
          localObject1 = "JM9F1ywUPwflvMIpYPok0tt5k9kW4ArJEU3lfLhxBqw=";
          i = -1;
        }
        localObject3 = PHCNativeLoader.split();
        Object localObject5 = a;
        localObject3 = ((PHCNativeLoader)localObject3).append((byte[])localObject2, (String)localObject1, (String)localObject5, ((ByteBuffer)localObject4).array());
        localObject2 = new JSONObject();
        localObject4 = paramMap.keySet().iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject4).hasNext();
          if (!bool) {
            break;
          }
          localObject5 = ((Iterator)localObject4).next();
          localObject5 = (String)localObject5;
          Object localObject6 = paramMap.get(localObject5);
          localObject6 = (String)localObject6;
          ((JSONObject)localObject2).put((String)localObject5, Base64.encodeToString(PHCNativeLoader.split().add((byte[])localObject3, paramPHCCipherSuite.value(), ((String)localObject6).getBytes()), 2));
        }
        paramMap = new JSONObject();
        paramMap.put("hdid", localObject1);
        paramMap.put("ts", l1);
        paramMap.put("ridx", i);
        paramMap.put("cipher", localObject2);
        paramMap.put("ciphertype", paramPHCCipherSuite.value());
        paramMap.put("version", c.a());
        paramPHCCipherSuite = a;
        paramMap.put("appname", paramPHCCipherSuite);
        paramMap = paramMap.toString();
        return paramMap;
      }
      catch (Throwable paramMap)
      {
        if (a.a) {
          paramMap.printStackTrace();
        }
      }
      catch (Exception paramMap)
      {
        if (a.a) {
          paramMap.printStackTrace();
        }
      }
      return "";
    }
    throw new IllegalArgumentException("plaintext can not null;");
  }
  
  public enum PHCCipherSuite
  {
    AES_CBC_PKCS5Padding(0),  AES_CTR_NoPadding(1),  IOERR(2),  RC4_CRC32CHECKSUM(4);
    
    private int value;
    
    private PHCCipherSuite(int paramInt)
    {
      value = paramInt;
    }
    
    public int value()
    {
      return value;
    }
  }
  
  public enum Server
  {
    MISMATCH,  Official;
  }
  
  public abstract interface a
  {
    public abstract void onGetNormalDSecretFailed(String paramString1, String paramString2);
  }
}
