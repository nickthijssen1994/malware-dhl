package com.jd.upgrade;

import android.text.TextUtils;
import phc.a;

public class PHCNativeLoader
{
  public static boolean i;
  
  static
  {
    try
    {
      System.loadLibrary("phccommon-lib");
      i = true;
      return;
    }
    catch (Throwable localThrowable)
    {
      if (a.a) {
        localThrowable.printStackTrace();
      }
      i = false;
    }
  }
  
  private PHCNativeLoader() {}
  
  private native byte[] Decrypt(byte[] paramArrayOfByte1, int paramInt, byte[] paramArrayOfByte2);
  
  private native byte[] Encrypt(byte[] paramArrayOfByte1, int paramInt, byte[] paramArrayOfByte2);
  
  private native byte[] GenDKey(byte[] paramArrayOfByte1, String paramString1, String paramString2, byte[] paramArrayOfByte2);
  
  private native byte[] GenHash(String paramString);
  
  private native String GenRandomKey();
  
  private native byte[] RSADecrypt(String paramString, byte[] paramArrayOfByte);
  
  private native byte[] RSAEncrypt(String paramString, byte[] paramArrayOfByte);
  
  public static PHCNativeLoader split()
  {
    return a.circle;
  }
  
  public byte[] add(byte[] paramArrayOfByte1, int paramInt, byte[] paramArrayOfByte2)
  {
    if (i) {
      return Encrypt(paramArrayOfByte1, paramInt, paramArrayOfByte2);
    }
    return null;
  }
  
  public byte[] append(byte[] paramArrayOfByte1, int paramInt, byte[] paramArrayOfByte2)
  {
    if (i) {
      return Decrypt(paramArrayOfByte1, paramInt, paramArrayOfByte2);
    }
    return null;
  }
  
  public byte[] append(byte[] paramArrayOfByte1, String paramString1, String paramString2, byte[] paramArrayOfByte2)
  {
    if (i) {
      return GenDKey(paramArrayOfByte1, paramString1, paramString2, paramArrayOfByte2);
    }
    return null;
  }
  
  public String d()
  {
    if (i) {
      return GenRandomKey();
    }
    return "";
  }
  
  public byte[] generate(String paramString, byte[] paramArrayOfByte)
  {
    if ((i) && (!TextUtils.isEmpty(paramString)) && (paramArrayOfByte != null) && (paramArrayOfByte.length > 0)) {
      return RSAEncrypt(paramString, paramArrayOfByte);
    }
    return null;
  }
  
  public byte[] toJSONObject(String paramString)
  {
    if (i) {
      return GenHash(paramString);
    }
    return null;
  }
  
  class a
  {
    public static PHCNativeLoader circle = new PHCNativeLoader(null);
  }
}
