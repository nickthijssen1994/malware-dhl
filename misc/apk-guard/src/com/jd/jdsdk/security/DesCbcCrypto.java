package com.jd.jdsdk.security;

import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;

public class DesCbcCrypto
{
  public static final byte[] IV_BYTES = { 0, 0, 0, 0, 0, 0, 0, 0 };
  private static final String PADDING = "DESede/CBC/PKCS5Padding";
  private static final String SQL_UPDATE_6_4 = "DESede";
  
  public DesCbcCrypto() {}
  
  public static final String decrypt(String paramString1, String paramString2, byte[] paramArrayOfByte)
  {
    try
    {
      paramString1 = new String(decrypt(Base64.decodeBase64(paramString1.getBytes()), paramString2.getBytes(), paramArrayOfByte));
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static final String decrypt(String paramString1, String paramString2, byte[] paramArrayOfByte, String paramString3)
  {
    try
    {
      paramString1 = new String(decrypt(Base64.decodeBase64(paramString1.getBytes()), paramString2.getBytes(), paramArrayOfByte), paramString3);
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static byte[] decrypt(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3)
    throws Exception
  {
    byte[] arrayOfByte = paramArrayOfByte3;
    if (paramArrayOfByte3 == null) {
      arrayOfByte = IV_BYTES;
    }
    paramArrayOfByte2 = new DESedeKeySpec(paramArrayOfByte2);
    paramArrayOfByte2 = SecretKeyFactory.getInstance("DESede").generateSecret(paramArrayOfByte2);
    paramArrayOfByte3 = Cipher.getInstance("DESede/CBC/PKCS5Padding");
    paramArrayOfByte3.init(2, paramArrayOfByte2, new IvParameterSpec(arrayOfByte));
    return paramArrayOfByte3.doFinal(paramArrayOfByte1);
  }
  
  public static final String encrypt(String paramString1, String paramString2, byte[] paramArrayOfByte)
  {
    try
    {
      paramString1 = Base64.encode(encrypt(paramString1.getBytes(), paramString2.getBytes(), paramArrayOfByte));
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static final String encrypt(String paramString1, String paramString2, byte[] paramArrayOfByte, String paramString3)
  {
    try
    {
      paramString1 = Base64.encode(encrypt(paramString1.getBytes(paramString3), paramString2.getBytes(), paramArrayOfByte));
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static byte[] encrypt(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3)
    throws Exception
  {
    Object localObject = paramArrayOfByte3;
    if (paramArrayOfByte3 == null) {
      localObject = IV_BYTES;
    }
    paramArrayOfByte2 = new DESedeKeySpec(paramArrayOfByte2);
    paramArrayOfByte2 = SecretKeyFactory.getInstance("DESede").generateSecret(paramArrayOfByte2);
    paramArrayOfByte3 = new IvParameterSpec((byte[])localObject);
    localObject = Cipher.getInstance("DESede/CBC/PKCS5Padding");
    ((Cipher)localObject).init(1, paramArrayOfByte2, paramArrayOfByte3);
    return ((Cipher)localObject).doFinal(paramArrayOfByte1);
  }
}
