package com.jd.hybrid.downloader.reflect;

import java.io.File;
import java.io.FileInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Label
  implements e
{
  private static final char[] text = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102 };
  private final String d;
  
  public Label(String paramString)
  {
    d = paramString;
  }
  
  public static char[] encode(byte[] paramArrayOfByte)
  {
    int k = paramArrayOfByte.length;
    char[] arrayOfChar1 = new char[k << 1];
    int i = 0;
    int j = 0;
    while (i < k)
    {
      int m = j + 1;
      char[] arrayOfChar2 = text;
      arrayOfChar1[j] = arrayOfChar2[((paramArrayOfByte[i] & 0xF0) >>> 4)];
      j = m + 1;
      arrayOfChar1[m] = arrayOfChar2[(paramArrayOfByte[i] & 0xF)];
      i += 1;
    }
    return arrayOfChar1;
  }
  
  private static String init(File paramFile)
  {
    if ((paramFile != null) && (paramFile.exists()) && (!paramFile.isDirectory())) {}
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      paramFile = new FileInputStream(paramFile);
      byte[] arrayOfByte = new byte['?'];
      for (;;)
      {
        int i = paramFile.read(arrayOfByte);
        if (-1 == i) {
          break;
        }
        localMessageDigest.update(arrayOfByte, 0, i);
      }
      paramFile = new String(encode(localMessageDigest.digest()));
      return paramFile;
    }
    catch (Exception paramFile)
    {
      paramFile.printStackTrace();
      return "";
      throw new IllegalStateException("System doesn't support MD5 algorithm.");
      return "";
    }
    catch (NoSuchAlgorithmException paramFile)
    {
      for (;;) {}
    }
  }
  
  public boolean a(File paramFile)
  {
    return d.equalsIgnoreCase(init(paramFile));
  }
}
