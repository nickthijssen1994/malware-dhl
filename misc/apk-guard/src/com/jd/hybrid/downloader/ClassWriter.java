package com.jd.hybrid.downloader;

import android.content.Context;
import com.android.volley.VolleyLog;
import com.jd.framework.network.file.JDFileGuider;
import com.jd.framework.network.request.JDFileRequest;
import com.jd.libs.hybrid.base.asm.Log;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;

public class ClassWriter
{
  private static ClassWriter b;
  private Context a;
  private Map<c, JDFileRequest> c = new ConcurrentHashMap();
  
  private ClassWriter(Context paramContext)
  {
    a = paramContext.getApplicationContext();
  }
  
  public static void a(Item paramItem)
  {
    if (b == null) {
      try
      {
        if (b == null) {
          b = new ClassWriter(a, (byte)0);
        }
        return;
      }
      catch (Throwable paramItem)
      {
        throw paramItem;
      }
    }
    throw new RuntimeException("duplicate initialize!");
  }
  
  public static Item b(Context paramContext)
  {
    return new Item(paramContext, (byte)0);
  }
  
  public static ClassWriter put()
  {
    if (b == null) {
      Log.e("DownloadClient", "Hybrid SDK is not initialized!");
    }
    return b;
  }
  
  public JDFileRequest get(Label paramLabel)
  {
    if (c.containsKey(paramLabel))
    {
      localObject1 = new StringBuilder("Existed download request, priority = ");
      ((StringBuilder)localObject1).append(paramLabel.getPath());
      ((StringBuilder)localObject1).append(", url: ");
      ((StringBuilder)localObject1).append(paramLabel.getName());
      Log.d("DownloadClient", ((StringBuilder)localObject1).toString());
      return (JDFileRequest)c.get(paramLabel);
    }
    Object localObject2 = new JDFileGuider();
    if (paramLabel.compareTo()) {
      i = 2;
    } else {
      i = 1;
    }
    ((JDFileGuider)localObject2).setSpace(i);
    ((JDFileGuider)localObject2).setChildDirName(paramLabel.getColor());
    ((JDFileGuider)localObject2).setFileName(paramLabel.b());
    ((JDFileGuider)localObject2).setMode(1);
    ((JDFileGuider)localObject2).setImmutable(false);
    Object localObject1 = new JDFileRequest(paramLabel.getName());
    ((JDFileRequest)localObject1).setResponseListener(new DialogFragment(this, (JDFileRequest)localObject1, paramLabel, (byte)0));
    ((JDFileRequest)localObject1).setSavePath((JDFileGuider)localObject2);
    ((JDFileRequest)localObject1).setAttemptsTime(0);
    c.put(paramLabel, localObject1);
    int i = paramLabel.getPath();
    localObject2 = ByteVector.a(a);
    Object localObject3 = new CharArray((JDFileRequest)localObject1, i);
    if (VolleyLog.DEBUG)
    {
      StringBuilder localStringBuilder = new StringBuilder("==== total file request count ===> ");
      localStringBuilder.append(size.incrementAndGet());
      Log.d("JDFileDownloader", localStringBuilder.toString());
    }
    localObject3 = new Entry((ByteVector)localObject2, size, offset);
    length.offer(Integer.valueOf(localObject3.hashCode()));
    this$0.execute((Runnable)localObject3);
    localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(paramLabel.getFirst());
    ((StringBuilder)localObject2).append("??????");
    Log.w("DownloadClient", null, ((StringBuilder)localObject2).toString());
    localObject2 = new StringBuilder("Add to download queue, priority = ");
    ((StringBuilder)localObject2).append(paramLabel.getPath());
    ((StringBuilder)localObject2).append(", url: ");
    ((StringBuilder)localObject2).append(paramLabel.getName());
    Log.d("DownloadClient", ((StringBuilder)localObject2).toString());
    return localObject1;
  }
  
  public List put(List paramList, boolean paramBoolean)
  {
    if ((paramList.size() > 1) && (!paramBoolean)) {
      Collections.sort(paramList);
    }
    ArrayList localArrayList = new ArrayList(paramList.size());
    paramList = paramList.iterator();
    while (paramList.hasNext()) {
      localArrayList.add(get((Label)paramList.next()));
    }
    return localArrayList;
  }
}
