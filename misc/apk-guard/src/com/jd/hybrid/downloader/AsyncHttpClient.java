package com.jd.hybrid.downloader;

import com.android.volley.toolbox.HttpStackFactory;
import com.jd.framework.network.file.JDFileResponseListener;
import com.jd.framework.network.file.JDStopController;
import com.jd.framework.network.request.JDFileRequest;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.RandomAccessFile;

public abstract class AsyncHttpClient<T>
{
  HttpStackFactory httpClient;
  
  public AsyncHttpClient(HttpStackFactory paramHttpStackFactory)
  {
    httpClient = paramHttpStackFactory;
  }
  
  static void read(InputStream paramInputStream, File paramFile, long paramLong1, JDFileResponseListener paramJDFileResponseListener, long paramLong2, JDStopController paramJDStopController)
  {
    paramFile = new RandomAccessFile(paramFile, "rw");
    try
    {
      paramFile.seek(paramLong1);
      byte[] arrayOfByte = new byte['?'];
      int i = (int)paramLong1;
      paramLong1 = 0L;
      for (;;)
      {
        int j = paramInputStream.read(arrayOfByte);
        if (j == -1) {
          break;
        }
        boolean bool = paramJDStopController.isStop();
        if (bool) {
          break;
        }
        paramFile.write(arrayOfByte, 0, j);
        j = i + j;
        i = j;
        if (paramJDFileResponseListener != null)
        {
          long l = System.currentTimeMillis();
          i = j;
          if (l - paramLong1 > 500L)
          {
            paramJDFileResponseListener.onProgress(Long.valueOf(paramLong2).intValue(), j);
            paramLong1 = l;
            i = j;
          }
        }
      }
      paramFile.close();
      return;
    }
    catch (Throwable paramInputStream)
    {
      paramFile.close();
      throw paramInputStream;
    }
  }
  
  static void writeTo(InputStream paramInputStream, BufferedOutputStream paramBufferedOutputStream, JDFileResponseListener paramJDFileResponseListener, long paramLong, JDStopController paramJDStopController)
  {
    byte[] arrayOfByte = new byte['?'];
    int i = 0;
    for (;;)
    {
      int j = paramInputStream.read(arrayOfByte);
      if ((j == -1) || (paramJDStopController.isStop())) {
        break;
      }
      paramBufferedOutputStream.write(arrayOfByte, 0, j);
      j = i + j;
      i = j;
      if (paramJDFileResponseListener != null)
      {
        paramJDFileResponseListener.onProgress(Long.valueOf(paramLong).intValue(), j);
        i = j;
      }
    }
  }
  
  public abstract ObjectPool.1 sendRequest(JDFileRequest paramJDFileRequest);
}
