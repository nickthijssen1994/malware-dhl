package com.jd.hybrid.downloader;

import android.content.Context;
import com.android.volley.toolbox.HttpStackFactory;
import com.jd.hybrid.downloader.a.a;
import com.jd.hybrid.downloader.a.b;
import com.jd.hybrid.downloader.a.e;
import com.jd.libs.hybrid.base.f;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class ByteVector
{
  private static ByteVector d;
  private Context a;
  private HttpStackFactory array = new HttpStackFactory();
  private List<a> buffer;
  private final Object data;
  volatile ConcurrentLinkedQueue<Integer> length = new ConcurrentLinkedQueue();
  public AtomicInteger size = new AtomicInteger(0);
  final ThreadPoolExecutor this$0;
  
  private ByteVector(Context paramContext)
  {
    a = paramContext.getApplicationContext();
    this$0 = new ThreadPoolExecutor(1, 1, 15L, TimeUnit.SECONDS, new PriorityBlockingQueue(), new ThreadPoolExecutor.DiscardOldestPolicy());
    this$0.allowCoreThreadTimeOut(true);
    data = new Object();
    buffer = new ArrayList(4);
    buffer.add(new b(data));
    buffer.add(new e(a, data));
    f.a(new x(this));
  }
  
  public static ByteVector a(Context paramContext)
  {
    if (d == null) {
      try
      {
        if (d == null) {
          d = new ByteVector(paramContext);
        }
      }
      catch (Throwable paramContext)
      {
        throw paramContext;
      }
    }
    return d;
  }
}
