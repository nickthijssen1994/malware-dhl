package com.jd.hybrid.downloader.a;

import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.base.f;
import java.util.Timer;
import java.util.TimerTask;

public final class b
  implements l
{
  private Timer a;
  final Object buffer;
  private TimerTask d;
  
  public b(Object paramObject)
  {
    buffer = paramObject;
  }
  
  public final boolean a()
  {
    for (Object localObject1 = Thread.currentThread().getThreadGroup();; localObject1 = localObject2)
    {
      localObject2 = ((ThreadGroup)localObject1).getParent();
      if (localObject2 == null) {
        break;
      }
    }
    Object localObject2 = new Thread[((ThreadGroup)localObject1).activeCount() * 2];
    try
    {
      int i = ((ThreadGroup)localObject1).enumerate((Thread[])localObject2);
      boolean bool;
      if (i <= f.B) {
        bool = true;
      } else {
        bool = false;
      }
      localObject1 = new StringBuilder("Current thread count: ");
      ((StringBuilder)localObject1).append(i);
      ((StringBuilder)localObject1).append(", requirement = ");
      i = f.B;
      ((StringBuilder)localObject1).append(i);
      ((StringBuilder)localObject1).append(", condition pass = ");
      ((StringBuilder)localObject1).append(bool);
      Log.d("ThreadDownloadCondition", ((StringBuilder)localObject1).toString());
      return bool;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public final void close()
  {
    Timer localTimer = a;
    if (localTimer != null)
    {
      localTimer.cancel();
      Log.d("ThreadDownloadCondition", "unregister timer of thread count listener.");
    }
    a = null;
    d = null;
  }
  
  public final void onCreate()
  {
    if (a != null) {
      return;
    }
    a = new Timer();
    d = new SplashActivity.1(this);
    a.scheduleAtFixedRate(d, 10000L, 10000L);
    Log.d("ThreadDownloadCondition", "register timer of thread count listener.");
  }
}
