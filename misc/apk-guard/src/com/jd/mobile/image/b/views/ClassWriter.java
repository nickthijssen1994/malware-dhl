package com.jd.mobile.image.b.views;

import android.net.Uri;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Log;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.drawee.backends.pipeline.Fresco.JDImageNetworkException;
import com.facebook.imagepipeline.backends.okhttp3.ImgNetStatisticTool;
import com.facebook.imagepipeline.producers.BaseNetworkFetcher;
import com.facebook.imagepipeline.producers.Consumer;
import com.facebook.imagepipeline.producers.FetchState;
import com.facebook.imagepipeline.producers.NetworkFetcher.Callback;
import com.facebook.imagepipeline.producers.ProducerContext;
import com.facebook.imagepipeline.request.ImageRequest;
import com.jd.mobile.image.b.a.a.a;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.JdImageToolKit;
import com.jingdong.JdImageToolKit.ImageConfigEngine;
import com.jingdong.app.util.image.assist.JDFailReason;
import com.jingdong.app.util.image.assist.JDFailType;
import com.jingdong.common.config.IExceptionReportHandler;
import com.jingdong.common.config.IImageController;
import com.jingdong.common.config.INetStatReporter;
import com.jingdong.common.httpdns.DnsResolver;
import com.jingdong.common.httpdns.c;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl.Builder;
import okhttp3.Call;
import okhttp3.Dispatcher;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.OkHttpClient.Builder;
import okhttp3.Request;
import okhttp3.Request.Builder;

public class ClassWriter
  extends BaseNetworkFetcher<a.a>
{
  private Executor b = client.dispatcher().executorService();
  private final OkHttpClient client = ((OkHttpClient.Builder)ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder())).connectTimeout(15000L, TimeUnit.MILLISECONDS).readTimeout(20000L, TimeUnit.MILLISECONDS).build();
  
  public ClassWriter()
  {
    client.readTimeoutMillis();
  }
  
  private void c(Item paramItem, String paramString, Throwable paramThrowable)
  {
    paramItem = paramItem.getContext().getImageRequest();
    if (!paramItem.isUseDomainFlag())
    {
      String str1 = getName(paramString);
      String str2 = JdImageToolKit.getEngine().getImageControllerImpl().getThisPageInfo();
      JdImageToolKit.getEngine().getExceptionReportHandlerImpl().reportBitmapException(paramItem.getSourceUri().toString(), new JDFailReason(JDFailType.UNKNOWN, new Fresco.JDImageNetworkException(paramThrowable, paramItem.isUseDomainFlag(), paramString, str1)), str2);
    }
  }
  
  private void get(String paramString, Item paramItem, NetworkFetcher.Callback paramCallback, boolean paramBoolean)
  {
    ImageRequest localImageRequest = paramItem.getContext().getImageRequest();
    Object localObject2 = paramItem.getUri();
    String str2 = ((Uri)localObject2).getHost();
    String str1 = null;
    Object localObject1 = null;
    boolean bool2 = false;
    boolean bool1 = false;
    if (!paramBoolean) {
      if (!localImageRequest.isUseDomainFlag())
      {
        c localC = DnsResolver.getInstance().getHealthIp(str2);
        if (localC != null)
        {
          localObject2 = paramString.replaceFirst(str2, c);
          if (a == 1)
          {
            paramString = c;
          }
          else
          {
            paramString = (String)localObject1;
            if (a == 2)
            {
              bool1 = true;
              paramString = (String)localObject1;
            }
          }
          str1 = paramString;
          bool2 = bool1;
          localObject1 = localObject2;
          if (Fresco.isLog)
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("ImageHttpDns?? : ");
            ((StringBuilder)localObject1).append(str2);
            ((StringBuilder)localObject1).append(" ,?????IP???? : ");
            ((StringBuilder)localObject1).append(localC.a());
            ((StringBuilder)localObject1).append(", ip : ");
            ((StringBuilder)localObject1).append(c);
            Log.d("facebook", ((StringBuilder)localObject1).toString());
            str1 = paramString;
            bool2 = bool1;
            localObject1 = localObject2;
          }
        }
        else
        {
          localImageRequest.setUseDomainFlag(true);
          localObject1 = paramString;
        }
        paramString = (String)localObject1;
        break label265;
      }
    }
    for (;;)
    {
      str1 = null;
      bool2 = false;
      break;
      if (!localImageRequest.isUseDomainFlag()) {
        localImageRequest.setUseDomainFlag(true);
      }
      paramString = ((Uri)localObject2).toString();
    }
    label265:
    if (Fresco.isLog)
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("ImageRequest ==> isRetry : ");
      ((StringBuilder)localObject1).append(paramBoolean);
      ((StringBuilder)localObject1).append(", URL : ");
      ((StringBuilder)localObject1).append(paramString);
      Log.d("facebook", ((StringBuilder)localObject1).toString());
    }
    localObject1 = new Request.Builder().cacheControl(new CacheControl.Builder().noStore().build()).url(paramString).get();
    if (!localImageRequest.isUseDomainFlag()) {
      ((Request.Builder)localObject1).addHeader("host", str2);
    }
    localObject1 = ((Request.Builder)localObject1).build();
    if ((!paramItem.getContext().getImageRequest().isUseDomainFlag()) && (!TextUtils.isEmpty(str2))) {
      ((Request)localObject1).url().setSniHost(str2);
    }
    localObject1 = ShooterOkhttp3Instrumentation.newCall(client, (Request)localObject1);
    paramItem.getContext().addCallbacks(new LogActivity.1(this, (Call)localObject1));
    ((Call)localObject1).enqueue(new h(this, paramItem, localImageRequest, str1, str2, paramBoolean, paramString, paramCallback, bool2, System.currentTimeMillis()));
  }
  
  private static String getName(String paramString)
  {
    try
    {
      String str = new URL(paramString).getHost();
      boolean bool = TextUtils.isEmpty(str);
      if (!bool) {
        return str;
      }
      throw new MalformedURLException(paramString);
    }
    catch (MalformedURLException paramString)
    {
      for (;;) {}
    }
    return null;
  }
  
  private void onFailure(Call paramCall, Throwable paramThrowable, NetworkFetcher.Callback paramCallback)
  {
    if ((paramCall != null) && (paramCall.isCanceled()))
    {
      paramCallback.onCancellation();
      return;
    }
    paramCallback.onFailure(paramThrowable);
  }
  
  private static void setLength()
  {
    if (!ImgNetStatisticTool.isSendLastResult()) {
      return;
    }
    if (JdImageToolKit.getEngine().getNetStatReporter() != null)
    {
      HashMap localHashMap = new HashMap();
      localHashMap.put("totalImgRequestCount", Integer.valueOf(ImgNetStatisticTool.getTotalCount()));
      localHashMap.put("succImgRequestCount", Integer.valueOf(ImgNetStatisticTool.getSuccessCount()));
      localHashMap.put("succImgDomainRequestCount", Integer.valueOf(ImgNetStatisticTool.getDomainSuccessCount()));
      localHashMap.put("succImgBakIpRequestCount", Integer.valueOf(ImgNetStatisticTool.getSuccImgBakIpRequestCount()));
      JdImageToolKit.getEngine().getNetStatReporter().saveStatisticData(localHashMap);
    }
  }
  
  public Map a(Item paramItem, int paramInt)
  {
    HashMap localHashMap = new HashMap(4);
    localHashMap.put("queue_time", Long.toString(h - d));
    localHashMap.put("fetch_time", Long.toString(b - h));
    localHashMap.put("total_time", Long.toString(b - d));
    localHashMap.put("image_size", Integer.toString(paramInt));
    return localHashMap;
  }
  
  public void b(Item paramItem, int paramInt)
  {
    b = SystemClock.elapsedRealtime();
  }
  
  public void b(Item paramItem, NetworkFetcher.Callback paramCallback)
  {
    try
    {
      long l = SystemClock.elapsedRealtime();
      d = l;
      int i = ImgNetStatisticTool.incrementTotalCountAndGet();
      if (Fresco.isLog)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(">>>>>>>>>>>>>>>current total count : ");
        localStringBuilder.append(i);
        Log.d("facebook", localStringBuilder.toString());
      }
      get(paramItem.getUri().toString(), paramItem, paramCallback, false);
      return;
    }
    catch (Exception paramItem)
    {
      onFailure(null, paramItem, paramCallback);
    }
  }
  
  public Item c(Consumer paramConsumer, ProducerContext paramProducerContext)
  {
    return new Item(paramConsumer, paramProducerContext);
  }
}
