package com.jd.mobile.image.b;

import android.graphics.Bitmap.Config;
import android.net.Uri;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.view.View;
import android.widget.ImageView;
import androidx.core.view.ViewCompat;
import com.facebook.animated.giflite.GifDecoder;
import com.facebook.common.executors.CallerThreadExecutor;
import com.facebook.common.executors.UiThreadImmediateExecutorService;
import com.facebook.datasource.DataSource;
import com.facebook.datasource.DataSubscriber;
import com.facebook.drawee.R.id;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder;
import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
import com.facebook.drawee.generic.GenericDraweeHierarchy;
import com.facebook.drawee.interfaces.DraweeController;
import com.facebook.drawee.view.DraweeHolder;
import com.facebook.drawee.view.DraweeView;
import com.facebook.drawee.view.SimpleDraweeView;
import com.facebook.imagepipeline.common.ImageDecodeOptions;
import com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder;
import com.facebook.imagepipeline.common.RotationOptions;
import com.facebook.imagepipeline.core.ImagePipeline;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequestBuilder;
import com.jd.mobile.image.AsyncHttpResponseHandler;
import com.jd.mobile.image.ImageRequestListener;
import com.jd.mobile.image.b.activity.MainActivity.2;
import com.jd.mobile.image.ui.AboutDialog;
import com.jingdong.JdImageToolKit;
import com.jingdong.JdImageToolKit.ImageConfigEngine;
import com.jingdong.app.util.image.JDDisplayImageOptions;
import com.jingdong.common.config.INetworkParameter;
import java.util.concurrent.Executor;

public class Log
{
  public static ImageRequest build(String paramString, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "This string represent the uri is empty";
    }
    return parse(Uri.parse(str), paramJDDisplayImageOptions);
  }
  
  public static void delete(Uri paramUri, String paramString, AsyncHttpResponseHandler paramAsyncHttpResponseHandler)
  {
    fromUri(paramUri, null, new LoginActivity.3(paramString, paramAsyncHttpResponseHandler));
  }
  
  public static DraweeController fromUri(View paramView, ImageRequest paramImageRequest, DraweeController paramDraweeController, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    paramView = new AsyncServer.7(paramView, paramJDDisplayImageOptions, paramImageRequestListener);
    return ((PipelineDraweeControllerBuilder)((PipelineDraweeControllerBuilder)((PipelineDraweeControllerBuilder)((PipelineDraweeControllerBuilder)((PipelineDraweeControllerBuilder)Fresco.newDraweeControllerBuilder().setOldController(paramDraweeController)).setImageRequest(paramImageRequest)).setControllerListener(paramView)).setTapToRetryEnabled(false)).setAutoPlayAnimations(true)).build();
  }
  
  private static ImageRequest fromUri(Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    JDDisplayImageOptions localJDDisplayImageOptions = paramJDDisplayImageOptions;
    if (paramJDDisplayImageOptions == null) {
      localJDDisplayImageOptions = JDDisplayImageOptions.createSimple();
    }
    return getScheme(paramUri, localJDDisplayImageOptions).build();
  }
  
  public static ImageRequest fromUri(String paramString, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "This string represent the uri is empty";
    }
    return fromUri(Uri.parse(str), paramJDDisplayImageOptions);
  }
  
  public static void fromUri(Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    if (paramUri == null) {
      return;
    }
    JDDisplayImageOptions localJDDisplayImageOptions = paramJDDisplayImageOptions;
    if (paramJDDisplayImageOptions == null) {
      localJDDisplayImageOptions = JDDisplayImageOptions.createSimple();
    }
    paramUri = fromUri(paramUri, localJDDisplayImageOptions);
    paramUri = Fresco.getImagePipeline().fetchEncodedImage(paramUri, null);
    paramJDDisplayImageOptions = new a.2(paramImageRequestListener);
    paramImageRequestListener = CallerThreadExecutor.getInstance();
    paramUri.subscribe((DataSubscriber)paramJDDisplayImageOptions, paramImageRequestListener);
  }
  
  private static ImageRequestBuilder getScheme(Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    return ImageRequestBuilder.newBuilderWithSource(paramUri).setLowestPermittedRequestLevel(paramJDDisplayImageOptions.getImageRequestLevel());
  }
  
  public static void ignore(String paramString, ImageRequestListener paramImageRequestListener)
  {
    Object localObject = fromUri(paramString, null);
    localObject = Fresco.getImagePipeline().prefetchToDiskCache((ImageRequest)localObject, null);
    paramString = new a.3(paramImageRequestListener, paramString);
    paramImageRequestListener = UiThreadImmediateExecutorService.getInstance();
    ((DataSource)localObject).subscribe((DataSubscriber)paramString, paramImageRequestListener);
  }
  
  public static void onCreate(View paramView, Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    if (paramUri == null) {
      return;
    }
    JDDisplayImageOptions localJDDisplayImageOptions = paramJDDisplayImageOptions;
    if (paramJDDisplayImageOptions == null) {
      localJDDisplayImageOptions = JDDisplayImageOptions.createSimple();
    }
    if ((localJDDisplayImageOptions.getResizeOptions() == null) && (localJDDisplayImageOptions.isScale())) {
      localJDDisplayImageOptions.setResizeOptions(AboutDialog.show(paramView));
    }
    ImageRequest localImageRequest = parse(paramUri, localJDDisplayImageOptions);
    GenericDraweeHierarchy localGenericDraweeHierarchy = showAbout(paramView, localJDDisplayImageOptions);
    if ((paramView instanceof SimpleDraweeView))
    {
      paramUri = (SimpleDraweeView)paramView;
      paramUri.setHierarchy(localGenericDraweeHierarchy);
      paramUri.setController(fromUri(paramView, localImageRequest, paramUri.getController(), localJDDisplayImageOptions, paramImageRequestListener));
      return;
    }
    paramJDDisplayImageOptions = (DraweeHolder)paramView.getTag(R.id.fresco_drawee);
    paramUri = paramJDDisplayImageOptions;
    if (paramJDDisplayImageOptions == null) {
      paramUri = DraweeHolder.create(localGenericDraweeHierarchy, paramView.getContext());
    }
    paramUri.setController(fromUri(paramView, localImageRequest, paramUri.getController(), localJDDisplayImageOptions, paramImageRequestListener));
    if (ViewCompat.isAttachedToWindow(paramView)) {
      paramUri.onAttach();
    }
    paramImageRequestListener = (MainActivity.2)paramView.getTag(R.id.attach_change_listener);
    paramJDDisplayImageOptions = paramImageRequestListener;
    if (paramImageRequestListener == null)
    {
      paramJDDisplayImageOptions = new MainActivity.2(paramUri);
      paramView.addOnAttachStateChangeListener(paramJDDisplayImageOptions);
    }
    paramView.setTag(R.id.fresco_drawee, paramUri);
    paramView.setTag(R.id.attach_change_listener, paramJDDisplayImageOptions);
    if ((paramView instanceof ImageView))
    {
      ((ImageView)paramView).setImageDrawable(paramUri.getTopLevelDrawable());
      return;
    }
    if (Build.VERSION.SDK_INT >= 16)
    {
      paramView.setBackground(paramUri.getTopLevelDrawable());
      return;
    }
    paramView.setBackgroundDrawable(paramUri.getTopLevelDrawable());
  }
  
  private static ImageRequest parse(Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    paramUri = uri(paramUri, paramJDDisplayImageOptions);
    if (paramUri != null) {
      return paramUri.build();
    }
    return null;
  }
  
  public static void setUri(Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener, Executor paramExecutor)
  {
    if (paramUri == null) {
      return;
    }
    JDDisplayImageOptions localJDDisplayImageOptions = paramJDDisplayImageOptions;
    if (paramJDDisplayImageOptions == null) {
      localJDDisplayImageOptions = JDDisplayImageOptions.createSimple();
    }
    paramUri = parse(paramUri, localJDDisplayImageOptions);
    Fresco.getImagePipeline().fetchDecodedImage(paramUri, null, localJDDisplayImageOptions.getImageRequestLevel()).subscribe((DataSubscriber)new a.1(paramImageRequestListener), paramExecutor);
  }
  
  public static GenericDraweeHierarchy showAbout(View paramView, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a26 = a25\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  private static ImageRequestBuilder uri(Uri paramUri, JDDisplayImageOptions paramJDDisplayImageOptions)
  {
    ImageRequestBuilder localImageRequestBuilder = getScheme(paramUri, paramJDDisplayImageOptions);
    if (paramJDDisplayImageOptions.isConsiderExifParams()) {
      paramUri = RotationOptions.autoRotate();
    } else {
      paramUri = RotationOptions.disableRotation();
    }
    localImageRequestBuilder.setRotationOptions(paramUri);
    localImageRequestBuilder.setIsUseThumbnail(paramJDDisplayImageOptions.isUseThumbnail());
    if (!paramJDDisplayImageOptions.isCacheOnDisk()) {
      localImageRequestBuilder.disableDiskCache();
    }
    if (!paramJDDisplayImageOptions.isCacheInMemory()) {
      localImageRequestBuilder.disableMemoryCache();
    }
    localImageRequestBuilder.setResizeOptions(paramJDDisplayImageOptions.getResizeOptions());
    localImageRequestBuilder.setPostprocessor(paramJDDisplayImageOptions.getPostProcessor());
    paramUri = ImageDecodeOptions.newBuilder().setBitmapConfig(Bitmap.Config.RGB_565);
    if (paramJDDisplayImageOptions.getBitmapConfig() != null) {
      paramUri.setBitmapConfig(paramJDDisplayImageOptions.getBitmapConfig());
    }
    if (paramJDDisplayImageOptions.isUsingJavaGifDecoder()) {
      paramUri.setCustomImageDecoder(new GifDecoder());
    }
    if (paramJDDisplayImageOptions.isForceStaticImage()) {
      paramUri.setForceStaticImage(true);
    }
    localImageRequestBuilder.setImageDecodeOptions(paramUri.build());
    if (paramJDDisplayImageOptions.getNetworkImageRequestListener() != null) {
      localImageRequestBuilder.setRequestListener(paramJDDisplayImageOptions.getNetworkImageRequestListener());
    }
    paramUri = localImageRequestBuilder.build();
    paramUri.setForce2HttpFlag(JdImageToolKit.getEngine().getNetworkParameterImpl().isForce2HttpFlag());
    paramUri.setUseDomainFlag(JdImageToolKit.getEngine().getNetworkParameterImpl().isUseDomainFlag());
    return localImageRequestBuilder;
  }
}
