package com.jd.mobile.image.b.views;

import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Log;
import com.facebook.common.logging.FLog;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.backends.okhttp3.ImgNetStatisticTool;
import com.facebook.imagepipeline.producers.NetworkFetcher.Callback;
import com.facebook.imagepipeline.request.ImageRequest;
import com.jd.mobile.image.Status;
import com.jingdong.common.httpdns.DnsResolver;
import java.io.IOException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.HttpUrl;
import okhttp3.Protocol;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

class h
  implements Callback
{
  h(ClassWriter paramClassWriter, Item paramItem, ImageRequest paramImageRequest, String paramString1, String paramString2, boolean paramBoolean1, String paramString3, NetworkFetcher.Callback paramCallback, boolean paramBoolean2, long paramLong) {}
  
  public void onFailure(Call paramCall, IOException paramIOException)
  {
    try
    {
      bool = TextUtils.isEmpty(b);
      if (!bool) {
        DnsResolver.getInstance().add2IPFailList(d, b, paramIOException);
      }
    }
    catch (Throwable localThrowable)
    {
      boolean bool;
      int i;
      Object localObject1;
      for (;;) {}
    }
    if ((paramCall != null) && (paramCall.isCanceled()))
    {
      i = ImgNetStatisticTool.decreaseTotalCountAndGet();
      if (Fresco.isLog)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(">>>>>>>>>>>>>>>current total count : after cancel ");
        ((StringBuilder)localObject1).append(i);
        Log.d("facebook", ((StringBuilder)localObject1).toString());
      }
    }
    if (paramCall != null) {}
    try
    {
      bool = paramCall.isCanceled();
      if (!bool)
      {
        bool = f;
        if (!bool)
        {
          localObject1 = j;
          Item localItem = k;
          Object localObject2 = c;
          try
          {
            ClassWriter.put((ClassWriter)localObject1, localItem, (String)localObject2, paramIOException);
            paramIOException = j;
            localObject1 = c;
            localItem = k;
            localObject2 = o;
            ClassWriter.put(paramIOException, (String)localObject1, localItem, (NetworkFetcher.Callback)localObject2, true);
          }
          catch (Exception paramIOException)
          {
            ClassWriter.put(j, paramCall, paramIOException, o);
          }
        }
      }
      ClassWriter.put(j, paramCall, paramIOException, o);
      bool = Fresco.isLog;
      if (bool)
      {
        paramIOException = new StringBuilder();
        paramIOException.append("image request");
        paramIOException.append(paramCall.request().url().toString());
        paramIOException.append(" failed!");
        Log.e("facebook", paramIOException.toString());
      }
      ClassWriter.put();
      return;
    }
    catch (Throwable paramCall)
    {
      ClassWriter.put();
      throw paramCall;
    }
  }
  
  public void onResponse(Call paramCall, Response paramResponse)
  {
    k.h = SystemClock.elapsedRealtime();
    ResponseBody localResponseBody = paramResponse.body();
    for (;;)
    {
      try
      {
        bool = m.isUseDomainFlag();
        if (!bool)
        {
          bool = TextUtils.isEmpty(b);
          if (!bool) {
            DnsResolver.getInstance().removeFromFailList(d, b);
          }
        }
      }
      catch (Throwable localThrowable)
      {
        boolean bool;
        Object localObject1;
        long l1;
        int n;
        int i;
        continue;
      }
      try
      {
        bool = paramResponse.isSuccessful();
        if (!bool)
        {
          bool = f;
          Object localObject2;
          if (!bool)
          {
            localObject1 = j;
            localObject2 = k;
            Object localObject3 = c;
            try
            {
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Unexpected HTTP code : ");
              localStringBuilder.append(paramResponse);
              ClassWriter.put((ClassWriter)localObject1, (Item)localObject2, (String)localObject3, new IOException(localStringBuilder.toString()));
              paramResponse = j;
              localObject1 = c;
              localObject2 = k;
              localObject3 = o;
              ClassWriter.put(paramResponse, (String)localObject1, (Item)localObject2, (NetworkFetcher.Callback)localObject3, true);
            }
            catch (Exception paramResponse)
            {
              localObject1 = j;
              localObject2 = o;
              ClassWriter.put((ClassWriter)localObject1, paramCall, paramResponse, (NetworkFetcher.Callback)localObject2);
            }
          }
          else
          {
            localObject1 = j;
            localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append("Unexpected HTTP code ");
            ((StringBuilder)localObject2).append(paramResponse);
            paramResponse = new IOException(((StringBuilder)localObject2).toString());
            localObject2 = o;
            ClassWriter.put((ClassWriter)localObject1, paramCall, paramResponse, (NetworkFetcher.Callback)localObject2);
            bool = Fresco.isLog;
            if (bool)
            {
              paramResponse = new StringBuilder();
              paramResponse.append("image request");
              paramResponse.append(paramCall.request().url().toString());
              paramResponse.append(" failed!");
              Log.e("facebook", paramResponse.toString());
            }
          }
          try
          {
            localResponseBody.close();
            ClassWriter.put();
            return;
          }
          catch (Throwable paramCall) {}catch (Exception paramCall)
          {
            FLog.w("facebook", "Exception when closing response body", paramCall);
            continue;
          }
          ClassWriter.put();
          throw paramCall;
        }
        ImgNetStatisticTool.incrementSuccessCountAndGet();
        localObject1 = m;
        bool = ((ImageRequest)localObject1).isUseDomainFlag();
        if (bool)
        {
          ImgNetStatisticTool.incrementDomainSuccessCountAndGet();
        }
        else
        {
          bool = h;
          if (bool) {
            ImgNetStatisticTool.incrementBakIpSuccessCountAndGet();
          }
        }
        bool = Fresco.isLog;
        if (bool)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("Protocol is ");
          ((StringBuilder)localObject1).append(paramResponse.protocol().toString());
          Log.d("facebook", ((StringBuilder)localObject1).toString());
        }
        l1 = localResponseBody.contentLength();
        n = (int)l1;
        i = n;
        if (n < 0) {
          i = 0;
        }
        l1 = System.currentTimeMillis();
        paramResponse = o;
        paramResponse.onResponse(localResponseBody.byteStream(), i);
        paramResponse = m;
        paramResponse = paramResponse.getRequestListener();
        bool = paramResponse instanceof Status;
        if (bool)
        {
          paramResponse = (Status)paramResponse;
          localObject1 = c;
          long l2 = t;
          paramResponse.onSuccess((String)localObject1, l2, l1, i);
        }
      }
      catch (Throwable paramCall) {}catch (Exception paramResponse)
      {
        ClassWriter.put(j, paramCall, paramResponse, o);
        try
        {
          localResponseBody.close();
        }
        catch (Throwable paramCall)
        {
          continue;
        }
        catch (Exception paramCall)
        {
          FLog.w("facebook", "Exception when closing response body", paramCall);
        }
        continue;
        ClassWriter.put();
        throw paramCall;
      }
      try
      {
        localResponseBody.close();
        ClassWriter.put();
        return;
      }
      catch (Throwable paramCall) {}catch (Exception paramCall)
      {
        FLog.w("facebook", "Exception when closing response body", paramCall);
      }
    }
    ClassWriter.put();
    throw paramCall;
    try
    {
      localResponseBody.close();
      ClassWriter.put();
    }
    catch (Throwable paramCall)
    {
      break label649;
    }
    catch (Exception paramResponse)
    {
      for (;;)
      {
        FLog.w("facebook", "Exception when closing response body", paramResponse);
      }
    }
    throw paramCall;
    label649:
    ClassWriter.put();
    throw paramCall;
  }
}
