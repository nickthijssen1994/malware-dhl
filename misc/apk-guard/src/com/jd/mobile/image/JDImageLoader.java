package com.jd.mobile.image;

import android.net.Uri;
import android.view.View;
import com.facebook.common.executors.CallerThreadExecutor;
import com.facebook.common.logging.FLog;
import com.facebook.common.util.UriUtil;
import com.jd.mobile.image.b.Log;
import com.jingdong.app.util.image.JDDisplayImageOptions;
import java.util.concurrent.Executor;

public class JDImageLoader
{
  private static final String PAGE_KEY = "JDImageLoader";
  
  private JDImageLoader() {}
  
  public static void display(Uri paramUri, View paramView, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    Uri localUri = paramUri;
    if (paramUri == null)
    {
      FLog.wtf("JDImageLoader", "The imageSource of the image is inValid!");
      localUri = Uri.parse("An empty or nonexistent image uri");
    }
    Log.onCreate(paramView, localUri, paramJDDisplayImageOptions, paramImageRequestListener);
  }
  
  public static void display(String paramString, View paramView, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    if (paramString != null) {
      paramString = Uri.parse(paramString);
    } else {
      paramString = null;
    }
    display(paramString, paramView, paramJDDisplayImageOptions, paramImageRequestListener);
  }
  
  public static void download(String paramString1, String paramString2, AsyncHttpResponseHandler paramAsyncHttpResponseHandler)
  {
    if (paramString1 != null) {
      paramString1 = Uri.parse(paramString1);
    } else {
      paramString1 = null;
    }
    if (!UriUtil.isNetworkUri(paramString1))
    {
      FLog.wtf("JDImageLoader", "The image is not a valid network resource!");
      return;
    }
    Log.delete(paramString1, paramString2, paramAsyncHttpResponseHandler);
  }
  
  public static void getBitmap(String paramString, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    getBitmap(paramString, paramJDDisplayImageOptions, paramImageRequestListener, CallerThreadExecutor.getInstance());
  }
  
  public static void getBitmap(String paramString, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener, Executor paramExecutor)
  {
    if (paramString != null) {
      paramString = Uri.parse(paramString);
    } else {
      paramString = null;
    }
    if (paramString == null)
    {
      FLog.wtf("JDImageLoader", "The imageSource of the image is inValid!");
      return;
    }
    Log.setUri(paramString, paramJDDisplayImageOptions, paramImageRequestListener, paramExecutor);
  }
  
  public static void getEncodedImage(String paramString, JDDisplayImageOptions paramJDDisplayImageOptions, ImageRequestListener paramImageRequestListener)
  {
    if (paramString != null) {
      paramString = Uri.parse(paramString);
    } else {
      paramString = null;
    }
    if (paramString == null)
    {
      FLog.wtf("JDImageLoader", "The imageSource of the image is inValid!");
      return;
    }
    Log.fromUri(paramString, paramJDDisplayImageOptions, paramImageRequestListener);
  }
  
  public static void prefetchToDiskCache(String paramString, ImageRequestListener paramImageRequestListener)
  {
    Log.ignore(paramString, paramImageRequestListener);
  }
}
