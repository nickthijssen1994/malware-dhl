package com.jd.scan.util;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.AssetFileDescriptor;
import android.content.res.Resources;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnErrorListener;
import android.os.Vibrator;
import android.preference.PreferenceManager;
import android.util.Log;
import com.jd.scan.R.raw;
import java.io.Closeable;
import java.io.IOException;

public class BeepManager
  implements MediaPlayer.OnErrorListener, Closeable
{
  private static final String TAG = "a";
  private final Activity activity;
  private MediaPlayer mediaPlayer;
  private boolean playBeep;
  private boolean vibrate;
  
  public BeepManager(Activity paramActivity)
  {
    activity = paramActivity;
    mediaPlayer = null;
    updatePrefs();
  }
  
  private MediaPlayer buildMediaPlayer(Context paramContext)
  {
    localMediaPlayer = new MediaPlayer();
    try
    {
      paramContext = paramContext.getResources();
      int i = R.raw.beep;
      AssetFileDescriptor localAssetFileDescriptor = paramContext.openRawResourceFd(i);
      try
      {
        localMediaPlayer.setDataSource(localAssetFileDescriptor.getFileDescriptor(), localAssetFileDescriptor.getStartOffset(), localAssetFileDescriptor.getLength());
        localMediaPlayer.setOnErrorListener(this);
        localMediaPlayer.setAudioStreamType(3);
        localMediaPlayer.setLooping(false);
        localMediaPlayer.setVolume(0.1F, 0.1F);
        localMediaPlayer.prepare();
        if (localAssetFileDescriptor != null)
        {
          localAssetFileDescriptor.close();
          return localMediaPlayer;
        }
      }
      catch (Throwable localThrowable2)
      {
        try
        {
          throw localThrowable2;
        }
        catch (Throwable paramContext)
        {
          if ((localAssetFileDescriptor == null) || (localThrowable2 != null)) {}
          try
          {
            localAssetFileDescriptor.close();
          }
          catch (Throwable localThrowable1)
          {
            for (;;) {}
          }
          localAssetFileDescriptor.close();
        }
        throw paramContext;
      }
      return localMediaPlayer;
    }
    catch (IOException paramContext)
    {
      Log.w(TAG, paramContext);
      localMediaPlayer.release();
      return null;
    }
  }
  
  private static boolean shouldBeep(SharedPreferences paramSharedPreferences, Context paramContext)
  {
    boolean bool = paramSharedPreferences.getBoolean("preferences_play_beep", true);
    if ((bool) && (((AudioManager)paramContext.getSystemService("audio")).getRingerMode() != 2)) {
      return false;
    }
    return bool;
  }
  
  public void close()
  {
    try
    {
      if (mediaPlayer != null)
      {
        mediaPlayer.release();
        mediaPlayer = null;
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public boolean onError(MediaPlayer paramMediaPlayer, int paramInt1, int paramInt2)
  {
    if (paramInt1 == 100) {}
    try
    {
      activity.finish();
      break label26;
      close();
      updatePrefs();
      label26:
      return true;
    }
    catch (Throwable paramMediaPlayer)
    {
      throw paramMediaPlayer;
    }
  }
  
  public void playBeepSoundAndVibrate()
  {
    try
    {
      if ((playBeep) && (mediaPlayer != null)) {
        mediaPlayer.start();
      }
      if (vibrate) {
        ((Vibrator)activity.getSystemService("vibrator")).vibrate(200L);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void updatePrefs()
  {
    try
    {
      SharedPreferences localSharedPreferences = PreferenceManager.getDefaultSharedPreferences(activity);
      playBeep = shouldBeep(localSharedPreferences, activity);
      vibrate = localSharedPreferences.getBoolean("preferences_vibrate", true);
      if ((playBeep) && (mediaPlayer == null))
      {
        activity.setVolumeControlStream(3);
        mediaPlayer = buildMediaPlayer(activity);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
