package com.jd.scan;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.hardware.Camera.CameraInfo;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.Uri;
import android.os.BaseBundle;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout.LayoutParams;
import androidx.dynamicanimation.animation.SpringAnimation;
import androidx.dynamicanimation.animation.SpringForce;
import com.a.a.n;
import com.jd.lib.un.ui.EventBus;
import com.jd.lib.un.ui.FileDisplayActivity.3;
import com.jd.lib.un.ui.c;
import com.jd.lib.un.ui.core.PeerListFragment.1;
import com.jd.lib.un.ui.core.Switch;
import com.jd.lib.un.utils.UnSharedPreferencesUtils;
import com.jd.lib.unification.album.activity.PhotoAlbumActivity;
import com.jd.lib.unification.album.entity.AlbumParam;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.scan.b.a;
import com.jd.scan.history.ScanHistoryActivity;
import com.jd.scan.player.Item;
import com.jd.scan.release.Search;
import com.jd.scan.text.ScanTxtEditActivity;
import com.jd.scan.util.BeepManager;
import com.jd.scan.util.ScanResultManager;
import com.jd.scan.util.ScanResultManager.OnScanResultListener;
import com.jd.scan.util.f;
import com.jingdong.common.unification.statusbar.IStatusController;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import pub.devrel.easypermissions.EasyPermissions;
import pub.devrel.easypermissions.EasyPermissions.PermissionCallbacks;

public class ScannerActivity
  extends Search
  implements com.jd.lib.un.ui.core.Logger, com.jd.lib.un.ui.ui.Logger, IStatusController, EasyPermissions.PermissionCallbacks
{
  public static final String[] fields = { "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE" };
  Runnable a = new Runnable()
  {
    public final void run()
    {
      if (!isFinishing())
      {
        com.jd.lib.un.ui.ui.CameraPreview localCameraPreview = ScannerActivity.access$getMPreview(ScannerActivity.this);
        mCamera = ScannerActivity.this;
        if (this$0 != null) {
          this$0.pause();
        }
      }
    }
  };
  private BeepManager beepManager;
  private final LinkedHashSet<a> c = new LinkedHashSet();
  private TextView d;
  Runnable e = new Runnable()
  {
    public final void run()
    {
      ScannerActivity.access$getProgressBar(ScannerActivity.this).setVisibility(0);
      SpringAnimation localSpringAnimation1 = new SpringAnimation(ScannerActivity.access$getProgressBar(ScannerActivity.this), SpringAnimation.SCALE_X, 1.0F);
      SpringAnimation localSpringAnimation2 = new SpringAnimation(ScannerActivity.access$getProgressBar(ScannerActivity.this), SpringAnimation.SCALE_Y, 1.0F);
      localSpringAnimation1.getSpring().setStiffness(200.0F);
      localSpringAnimation1.getSpring().setDampingRatio(0.5F);
      localSpringAnimation1.setStartValue(0.8F);
      localSpringAnimation2.getSpring().setStiffness(200.0F);
      localSpringAnimation2.getSpring().setDampingRatio(0.5F);
      localSpringAnimation2.setStartValue(0.8F);
      localSpringAnimation1.start();
      localSpringAnimation2.start();
    }
  };
  private View h;
  private TextView mDetailView;
  private a mHandler;
  private com.jd.lib.un.ui.ui.CameraPreview mPreview;
  private ImageView view;
  
  public ScannerActivity() {}
  
  private void a()
  {
    d = ((TextView)findViewById(R.id.scan_history));
    Drawable localDrawable = getResources().getDrawable(R.drawable.ic_scan_history);
    localDrawable.setBounds(0, 0, Item.dpToPx((Context)this), Item.dpToPx((Context)this));
    d.setCompoundDrawables(null, localDrawable, null, null);
    d.setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        ScannerActivity.subtract(ScannerActivity.this);
        ScanHistoryActivity.showTips((Context)ScannerActivity.this);
      }
    });
  }
  
  private void c()
  {
    Object localObject = Item.get((Context)this);
    if ((localObject != null) && (((List)localObject).size() > 0))
    {
      localObject = (com.jd.scan.reflect.Label)((List)localObject).get(0);
      if (localObject != null)
      {
        ScanResultManager.OnScanResultListener localOnScanResultListener = ScanResultManager.getInstance().getScanResultListener();
        if ((localOnScanResultListener != null) && (!localOnScanResultListener.onCallback(b)))
        {
          localObject = b;
          ScanTxtEditActivity.a((Context)this, (String)localObject);
        }
      }
    }
  }
  
  private void init()
  {
    mDetailView = ((TextView)findViewById(R.id.fromMedia));
    Drawable localDrawable = getResources().getDrawable(R.drawable.ic_scan_album);
    localDrawable.setBounds(0, 0, Item.dpToPx((Context)this), Item.dpToPx((Context)this));
    mDetailView.setCompoundDrawables(null, localDrawable, null, null);
    mDetailView.setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        ScannerActivity.switchState(ScannerActivity.this);
      }
    });
  }
  
  private void initView()
  {
    findViewById(R.id.back).setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        finish();
      }
    });
  }
  
  private void onCreate()
  {
    if (!f.add((Activity)this, new String[] { "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE" }))
    {
      if (UnSharedPreferencesUtils.getSharedPreferences(getApplicationContext()).getBoolean("jd_un_album_permission_key", false))
      {
        showHelpDialog();
        return;
      }
      String[] arrayOfString = fields;
      f.add((Activity)this, "???????????????????????????????", 111, arrayOfString);
      return;
    }
    showList();
  }
  
  private void onSelection()
  {
    Intent localIntent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
    StringBuilder localStringBuilder = new StringBuilder("package:");
    localStringBuilder.append(getPackageName());
    localIntent.setData(Uri.parse(localStringBuilder.toString()));
    startActivity(localIntent);
  }
  
  private void remove()
  {
    if (!c.isEmpty())
    {
      ArrayList localArrayList = new ArrayList(c);
      Item.update((Context)this, localArrayList);
      c.clear();
    }
  }
  
  private void showHelpDialog()
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder((Context)this, 16974394);
    localBuilder.setTitle("?????????");
    localBuilder.setMessage("??Android????????????????????????");
    localBuilder.setNegativeButton("??", new DialogInterface.OnClickListener()
    {
      public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    });
    localBuilder.setPositiveButton("??", new DialogInterface.OnClickListener()
    {
      public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        ScannerActivity.onButtonClick(ScannerActivity.this);
      }
    });
    localBuilder.setCancelable(false);
    localBuilder.show();
  }
  
  private void showList()
  {
    Intent localIntent = new Intent((Context)this, PhotoAlbumActivity.class);
    AlbumParam localAlbumParam = new AlbumParam();
    loadCameraOrVideo = 1;
    canSelectMediaCount = 1;
    videoEditorAction = 0;
    localIntent.putExtra("albumParam", localAlbumParam);
    startActivityForResult(localIntent, 9);
  }
  
  private void update()
  {
    h = findViewById(R.id.popup_layout);
    ((LinearLayout)h.findViewById(R.id.popup_ll_layout)).setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        ScannerActivity.a(ScannerActivity.this);
      }
    });
    h.setVisibility(8);
    Object localObject = Item.get((Context)this);
    if ((localObject != null) && (((List)localObject).size() > 0))
    {
      TextView localTextView = (TextView)h.findViewById(R.id.popup_tx_content);
      localObject = (com.jd.scan.reflect.Label)((List)localObject).get(0);
      if (localObject != null) {
        localTextView.setText(b);
      }
      h.postDelayed(e, 2000L);
    }
  }
  
  protected void a(com.jd.scan.reflect.Label paramLabel)
  {
    c.add(paramLabel);
    if (c.size() > 20) {
      remove();
    }
  }
  
  public void a(String paramString)
  {
    if (!isFinishing())
    {
      com.jd.scan.reflect.Label localLabel = new com.jd.scan.reflect.Label();
      b = paramString;
      e = getResources().getString(R.string.scan_pay_code_title_link);
      d = 2;
      a(localLabel);
    }
  }
  
  protected void b(String paramString)
  {
    if (!isFinishing())
    {
      com.jd.scan.reflect.Label localLabel = new com.jd.scan.reflect.Label();
      b = paramString;
      e = getResources().getString(R.string.scan_pay_code_title_txt);
      d = 1;
      a(localLabel);
      paramString = b;
      ScanTxtEditActivity.a((Context)this, paramString);
    }
  }
  
  public void d()
  {
    if (h != null)
    {
      Log.d("scan_test", "----------------onTouch-----------------");
      h.setVisibility(8);
    }
  }
  
  public void d(n paramN)
  {
    paramN = a;
    if (TextUtils.isEmpty(paramN))
    {
      Toast.makeText((Context)this, "??????/?????????", 0).show();
    }
    else
    {
      Object localObject = beepManager;
      if (localObject != null) {
        ((BeepManager)localObject).playBeepSoundAndVibrate();
      }
      localObject = ScanResultManager.getInstance().getScanResultListener();
      if (localObject != null) {
        if (((ScanResultManager.OnScanResultListener)localObject).onCallback(paramN)) {
          a(paramN);
        } else {
          b(paramN);
        }
      }
    }
    mHandler.removeCallbacks(a);
    mHandler.postDelayed(a, 2000L);
  }
  
  public void draw()
  {
    mHandler.sendEmptyMessage(2);
  }
  
  public String getServerConfigValue()
  {
    return null;
  }
  
  public boolean isDisplayCutout()
  {
    return false;
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if ((paramInt1 == 9) && (paramIntent != null))
    {
      paramIntent = paramIntent.getExtras();
      if (paramIntent != null)
      {
        paramIntent = (List)paramIntent.get("selcteMedias");
        if ((paramIntent != null) && (paramIntent.size() > 0))
        {
          paramIntent = ((LocalMedia)paramIntent.get(0)).getPath();
          setDescription();
          EventBus.start(new FileDisplayActivity.3(new com.jd.lib.un.ui.Label(new c()
          {
            public final void a(final String paramAnonymousString)
            {
              draw();
              if (isFinishing()) {
                return;
              }
              runOnUiThread(new Runnable()
              {
                public final void run()
                {
                  if (TextUtils.isEmpty(paramAnonymousString))
                  {
                    Toast.makeText((Context)ScannerActivity.this, "????????????????", 0).show();
                  }
                  else
                  {
                    if (ScannerActivity.access$getBeepManager(ScannerActivity.this) != null) {
                      ScannerActivity.access$getBeepManager(ScannerActivity.this).playBeepSoundAndVibrate();
                    }
                    ScanResultManager.OnScanResultListener localOnScanResultListener = ScanResultManager.getInstance().getScanResultListener();
                    if (localOnScanResultListener != null) {
                      if (localOnScanResultListener.onCallback(paramAnonymousString)) {
                        ScannerActivity.this.a(paramAnonymousString);
                      } else {
                        b(paramAnonymousString);
                      }
                    }
                  }
                  ScannerActivity.access$getA(ScannerActivity.this).removeCallbacks(a);
                  ScannerActivity.access$getA(ScannerActivity.this).postDelayed(a, 2000L);
                }
              });
            }
          }), paramIntent));
        }
      }
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    UnStatusBarTintUtil.defaultSetTranslucent((Activity)this);
    setContentView(R.layout.activity_scanner);
    view = ((ImageView)findViewById(R.id.back));
    if (UnStatusBarTintUtil.isEnable((Activity)this)) {
      ((ConstraintLayout.LayoutParams)view.getLayoutParams()).setMargins(0, UnStatusBarTintUtil.getStatusBarHeight((Activity)this), 0, 0);
    }
    UnStatusBarTintUtil.setStatusBarDarkMode((Activity)this);
    mHandler = new a(this);
    paramBundle = (ViewGroup)findViewById(R.id.content_frame);
    beepManager = new BeepManager((Activity)this);
    mPreview = new com.jd.lib.un.ui.ui.CameraPreview((Context)this);
    mPreview.setFlashButtonEnable(true);
    paramBundle.addView(mPreview);
    initView();
    a();
    init();
    update();
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
  }
  
  public void onFinish(Message paramMessage)
  {
    isFinishing();
  }
  
  public void onPause()
  {
    super.onPause();
    beepManager.close();
    mHandler.removeCallbacks(a);
    mHandler.removeMessages(1);
    mHandler.removeMessages(2);
    com.jd.lib.un.ui.ui.CameraPreview localCameraPreview = mPreview;
    if ((sensorManager != null) && (context != null)) {
      sensorManager.unregisterListener(localCameraPreview);
    }
    if (mCamera != null)
    {
      this$0.stopCameraPreview();
      this$0.initialize(null, null);
      mCamera.mCamera.release();
      mCamera = null;
    }
    if (handler != null)
    {
      handler.quit();
      handler = null;
    }
    h.removeCallbacks(e);
    h.setVisibility(8);
    remove();
  }
  
  public void onPermissionsDenied(int paramInt, List paramList)
  {
    if (paramInt != 111) {
      return;
    }
    paramList = fields;
    try
    {
      paramList = Arrays.asList(paramList);
      Activity localActivity = (Activity)this;
      boolean bool = EasyPermissions.a(localActivity, paramList);
      if (bool)
      {
        UnSharedPreferencesUtils.getSharedPreferences(getApplicationContext()).edit().putBoolean("jd_un_album_permission_key", true).apply();
        return;
      }
    }
    catch (Exception paramList)
    {
      paramList.printStackTrace();
    }
  }
  
  public void onPermissionsGranted(int paramInt, List paramList)
  {
    if (paramInt == 111) {
      showList();
    }
  }
  
  public void onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt)
  {
    super.onRequestPermissionsResult(paramInt, paramArrayOfString, paramArrayOfInt);
    EasyPermissions.a(paramInt, paramArrayOfString, paramArrayOfInt, new Object[] { this });
  }
  
  public void onResume()
  {
    super.onResume();
    beepManager.updatePrefs();
    mPreview.setResultHandler(this);
    Object localObject = mPreview;
    int k = android.hardware.Camera.getNumberOfCameras();
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    int i = 0;
    int j = -1;
    while (i < k)
    {
      android.hardware.Camera.getCameraInfo(i, localCameraInfo);
      if (facing == 0) {
        break label75;
      }
      j = i;
      i += 1;
    }
    i = j;
    label75:
    sensorManager.registerListener((SensorEventListener)localObject, sensorManager.getDefaultSensor(5), 3);
    if (handler == null) {
      handler = new com.jd.lib.un.ui.core.Label((Switch)localObject);
    }
    localObject = handler;
    new Handler(((HandlerThread)localObject).getLooper()).post(new PeerListFragment.1((com.jd.lib.un.ui.core.Label)localObject, i));
  }
  
  public void setDescription()
  {
    mHandler.sendEmptyMessage(1);
  }
  
  public int statusBarHint()
  {
    return 1;
  }
  
  public boolean statusBarTransparentEnable()
  {
    return false;
  }
  
  static final class a
    extends Handler
  {
    private final WeakReference<ScannerActivity> mServiceRef;
    
    a(ScannerActivity paramScannerActivity)
    {
      mServiceRef = new WeakReference(paramScannerActivity);
    }
    
    public final void handleMessage(Message paramMessage)
    {
      ScannerActivity localScannerActivity = (ScannerActivity)mServiceRef.get();
      if (localScannerActivity != null) {
        localScannerActivity.onFinish(paramMessage);
      }
    }
  }
}
