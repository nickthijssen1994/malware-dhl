package com.jd.parser;

import com.jd.JSONException;
import com.jd.parser.asm.Label;
import java.lang.reflect.Type;

public class AnnotationWriter
  implements Label
{
  private final Class<?> f;
  protected final Enum[] g;
  
  public AnnotationWriter(Class paramClass)
  {
    f = paramClass;
    g = ((Enum[])paramClass.getEnumConstants());
  }
  
  public Object a(ClassWriter paramClassWriter, Type paramType, Object paramObject)
  {
    paramType = a;
    int i = i;
    if (i == 2) {}
    try
    {
      i = paramType.a();
      paramType.a(16);
      if ((i >= 0) && (i <= g.length)) {
        return g[i];
      }
      paramClassWriter = new StringBuilder();
      paramClassWriter.append("parse enum ");
      paramType = f;
      paramClassWriter.append(paramType.getName());
      paramClassWriter.append(" error, value : ");
      paramClassWriter.append(i);
      paramClassWriter = new JSONException(paramClassWriter.toString());
      throw paramClassWriter;
    }
    catch (Exception paramClassWriter)
    {
      throw new JSONException(paramClassWriter.getMessage(), paramClassWriter);
    }
    catch (JSONException paramClassWriter)
    {
      throw paramClassWriter;
    }
    if (i == 4)
    {
      paramClassWriter = paramType.getValue();
      paramType.a(16);
      i = paramClassWriter.length();
      if (i == 0) {
        return null;
      }
      paramType = f;
      paramClassWriter = Enum.valueOf(paramType, paramClassWriter);
      return paramClassWriter;
    }
    if (i == 8)
    {
      paramType.a(16);
      return null;
    }
    paramClassWriter = paramClassWriter.getValue();
    paramType = new StringBuilder();
    paramType.append("parse enum ");
    paramObject = f;
    paramType.append(paramObject.getName());
    paramType.append(" error, value : ");
    paramType.append(paramClassWriter);
    paramClassWriter = new JSONException(paramType.toString());
    throw paramClassWriter;
  }
}
