package com.jd.parser;

import com.jd.JSONException;
import com.jd.framework.json.JDJSONObject;
import com.jd.parser.asm.Label;
import java.lang.reflect.ParameterizedType;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

class Type
  implements Label
{
  public static Type d = new Type();
  
  Type() {}
  
  public static Object a(ClassWriter paramClassWriter, Map paramMap, java.lang.reflect.Type paramType1, java.lang.reflect.Type paramType2, Object paramObject)
  {
    f localF = a;
    int i = i;
    if ((i != 12) && (i != 16))
    {
      paramClassWriter = new StringBuilder();
      paramClassWriter.append("syntax error, expect {, actual ");
      paramClassWriter.append(AtomicBoolean.toString(i));
      throw new JSONException(paramClassWriter.toString());
    }
    Label localLabel1 = paramClassWriter.i.get(paramType1);
    Label localLabel2 = paramClassWriter.i.get(paramType2);
    localF.read();
    paramObject = f;
    try
    {
      for (;;)
      {
        i = i;
        if (i == 13)
        {
          localF.a(16);
          paramClassWriter.a(paramObject);
          return paramMap;
        }
        boolean bool;
        if (i == 4)
        {
          j = d;
          if (j == 4)
          {
            localObject1 = a;
            j = r;
            bool = ((String)localObject1).startsWith("$ref", j + 1);
            if (bool)
            {
              bool = localF.f(Feature.DisableSpecialKeyDetect);
              if (!bool)
              {
                localF.add(':');
                j = i;
                if (j == 4)
                {
                  paramMap = localF.getValue();
                  bool = "..".equals(paramMap);
                  if (bool)
                  {
                    paramMap = c.a;
                  }
                  else
                  {
                    bool = "$".equals(paramMap);
                    if (bool)
                    {
                      for (paramMap = paramObject;; paramMap = c)
                      {
                        paramType1 = c;
                        if (paramType1 == null) {
                          break;
                        }
                      }
                      paramMap = a;
                    }
                    else
                    {
                      paramClassWriter.a(new h(paramObject, paramMap));
                      e = 1;
                      paramMap = null;
                    }
                  }
                  localF.a(13);
                  i = i;
                  if (i == 13)
                  {
                    localF.a(16);
                    paramClassWriter.a(paramObject);
                    return paramMap;
                  }
                  throw new JSONException("illegal ref");
                }
                paramMap = new StringBuilder();
                paramMap.append("illegal ref, ");
                paramMap.append(AtomicBoolean.toString(i));
                throw new JSONException(paramMap.toString());
              }
            }
          }
        }
        int j = paramMap.size();
        if ((j == 0) && (i == 4))
        {
          bool = "@type".equals(localF.getValue());
          if (bool)
          {
            bool = localF.f(Feature.DisableSpecialKeyDetect);
            if (!bool)
            {
              localF.add(':');
              localF.a(16);
              i = i;
              if (i == 13)
              {
                localF.read();
                paramClassWriter.a(paramObject);
                return paramMap;
              }
              localF.read();
            }
          }
          else {}
        }
        Object localObject1 = localLabel1.a(paramClassWriter, paramType1, null);
        i = i;
        if (i != 17) {
          break;
        }
        localF.read();
        Object localObject2 = localLabel2.a(paramClassWriter, paramType2, localObject1);
        i = e;
        if (i == 1) {
          paramClassWriter.b(paramMap, localObject1);
        }
        paramMap.put(localObject1, localObject2);
        i = i;
        if (i == 16) {
          localF.read();
        }
      }
      paramMap = new StringBuilder();
      paramMap.append("syntax error, expect :, actual ");
      paramMap.append(i);
      throw new JSONException(paramMap.toString());
    }
    catch (Throwable paramMap)
    {
      paramClassWriter.a(paramObject);
      throw paramMap;
    }
  }
  
  public static Map a(ClassWriter paramClassWriter, Map paramMap, java.lang.reflect.Type paramType, Object paramObject)
  {
    f localF = a;
    if (i == 12)
    {
      Item localItem = f;
      try
      {
        int i;
        char c;
        label466:
        do
        {
          Object localObject1;
          boolean bool;
          Object localObject2;
          do
          {
            localF.update();
            for (i = c; i == 44; i = c)
            {
              localF.next();
              localF.update();
            }
            if (i == 34)
            {
              localObject1 = localF.a(s, '"');
              localF.update();
              i = c;
              if (i != 58)
              {
                paramMap = new StringBuilder();
                paramMap.append("syntax error, ");
                paramMap.append(localF.e());
                throw new JSONException(paramMap.toString());
              }
            }
            else
            {
              if (i == 125)
              {
                localF.next();
                d = 0;
                localF.a(16);
                paramClassWriter.a(localItem);
                return paramMap;
              }
              if (i == 39)
              {
                localObject1 = localF.a(s, '\'');
                localF.update();
                i = c;
                if (i != 58)
                {
                  paramMap = new StringBuilder();
                  paramMap.append("syntax error, ");
                  paramMap.append(localF.e());
                  throw new JSONException(paramMap.toString());
                }
              }
              else
              {
                localObject1 = localF.b(s);
                localF.update();
                c = c;
                if (c != ':') {
                  break label604;
                }
              }
            }
            localF.next();
            localF.update();
            i = c;
            d = 0;
            if (localObject1 != "@type") {
              break label466;
            }
            bool = localF.f(Feature.DisableSpecialKeyDetect);
            if (bool) {
              break label466;
            }
            localObject1 = com.jd.views.StringBuilder.get(localF.a(s, '"'), ii);
            localObject2 = paramMap.getClass();
            if (localObject1 != localObject2) {
              break;
            }
            localF.a(16);
            i = i;
          } while (i != 13);
          localF.a(16);
          paramClassWriter.a(localItem);
          return paramMap;
          paramMap = paramClassWriter.i.get((java.lang.reflect.Type)localObject1);
          localF.a(16);
          e = 2;
          if (localItem != null)
          {
            bool = paramObject instanceof Integer;
            if (!bool) {
              paramClassWriter.b();
            }
          }
          paramMap = (Map)paramMap.a(paramClassWriter, (java.lang.reflect.Type)localObject1, paramObject);
          paramClassWriter.a(localItem);
          return paramMap;
          localF.read();
          paramClassWriter.a(localItem);
          i = i;
          if (i == 8)
          {
            localObject2 = null;
            localF.read();
          }
          else
          {
            localObject2 = paramClassWriter.a(paramType, localObject1);
          }
          paramMap.put(localObject1, localObject2);
          i = e;
          if (i == 1) {
            paramClassWriter.b(paramMap, localObject1);
          }
          paramClassWriter.a(localItem, localObject2, localObject1);
          i = i;
          if ((i == 20) || (i == 15)) {
            break;
          }
        } while (i != 13);
        localF.read();
        paramClassWriter.a(localItem);
        return paramMap;
        paramClassWriter.a(localItem);
        return paramMap;
        label604:
        paramMap = new StringBuilder();
        paramMap.append("expect ':' at ");
        paramMap.append(j);
        paramMap.append(", actual ");
        paramMap.append(c);
        throw new JSONException(paramMap.toString());
      }
      catch (Throwable paramMap)
      {
        paramClassWriter.a(localItem);
        throw paramMap;
      }
    }
    paramClassWriter = new StringBuilder();
    paramClassWriter.append("syntax error, expect {, actual ");
    paramClassWriter.append(i);
    throw new JSONException(paramClassWriter.toString());
  }
  
  public Object a(ClassWriter paramClassWriter, java.lang.reflect.Type paramType, Object paramObject)
  {
    if ((paramType == JDJSONObject.class) && (h == null)) {
      return paramClassWriter.f();
    }
    Object localObject1 = a;
    if (i == 8)
    {
      ((f)localObject1).a(16);
      return null;
    }
    Map localMap = get(paramType);
    localObject1 = f;
    try
    {
      paramClassWriter.a((Item)localObject1, localMap, paramObject);
      boolean bool = paramType instanceof ParameterizedType;
      if (bool)
      {
        Object localObject2 = (ParameterizedType)paramType;
        paramType = localObject2.getActualTypeArguments()[0];
        localObject2 = localObject2.getActualTypeArguments()[1];
        if (String.class == paramType)
        {
          paramType = a(paramClassWriter, localMap, (java.lang.reflect.Type)localObject2, paramObject);
          paramClassWriter.a((Item)localObject1);
          return paramType;
        }
        paramType = a(paramClassWriter, localMap, paramType, (java.lang.reflect.Type)localObject2, paramObject);
        paramClassWriter.a((Item)localObject1);
        return paramType;
      }
      paramType = paramClassWriter.a(localMap, paramObject);
      paramClassWriter.a((Item)localObject1);
      return paramType;
    }
    catch (Throwable paramType)
    {
      paramClassWriter.a((Item)localObject1);
      throw paramType;
    }
  }
  
  protected Map get(java.lang.reflect.Type paramType)
  {
    if (paramType == Properties.class) {
      return new Properties();
    }
    if (paramType == Hashtable.class) {
      return new Hashtable();
    }
    if (paramType == IdentityHashMap.class) {
      return new IdentityHashMap();
    }
    if ((paramType != SortedMap.class) && (paramType != TreeMap.class))
    {
      if ((paramType != ConcurrentMap.class) && (paramType != ConcurrentHashMap.class))
      {
        if ((paramType != Map.class) && (paramType != HashMap.class))
        {
          if (paramType == LinkedHashMap.class) {
            return new LinkedHashMap();
          }
          if (paramType == JDJSONObject.class) {
            return new JDJSONObject();
          }
          if ((paramType instanceof ParameterizedType))
          {
            paramType = (ParameterizedType)paramType;
            localObject = paramType.getRawType();
            if (EnumMap.class.equals(localObject)) {
              return new EnumMap((Class)paramType.getActualTypeArguments()[0]);
            }
            return get((java.lang.reflect.Type)localObject);
          }
          Object localObject = (Class)paramType;
          if (!((Class)localObject).isInterface()) {
            try
            {
              localObject = ((Class)localObject).newInstance();
              return (Map)localObject;
            }
            catch (Exception localException)
            {
              StringBuilder localStringBuilder2 = new StringBuilder();
              localStringBuilder2.append("unsupport type ");
              localStringBuilder2.append(paramType);
              throw new JSONException(localStringBuilder2.toString(), localException);
            }
          }
          StringBuilder localStringBuilder1 = new StringBuilder();
          localStringBuilder1.append("unsupport type ");
          localStringBuilder1.append(paramType);
          throw new JSONException(localStringBuilder1.toString());
        }
        return new HashMap();
      }
      return new ConcurrentHashMap();
    }
    return new TreeMap();
  }
}
