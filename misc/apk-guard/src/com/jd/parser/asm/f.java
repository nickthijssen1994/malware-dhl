package com.jd.parser.asm;

import com.jd.JSONException;
import com.jd.parser.ClassWriter;
import com.jd.views.Label;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

public abstract class f
{
  protected long[] a;
  public final Label b;
  protected Enum[] c;
  public final Class<?> f;
  
  public f(Class paramClass, Label paramLabel, int paramInt)
  {
    f = paramClass;
    b = paramLabel;
    if (paramLabel == null) {
      return;
    }
    paramClass = type;
    if (paramClass.isEnum())
    {
      paramClass = (Enum[])paramClass.getEnumConstants();
      paramLabel = new long[paramClass.length];
      a = new long[paramClass.length];
      paramInt = 0;
      int i;
      while (paramInt < paramClass.length)
      {
        String str = paramClass[paramInt].name();
        long l = -3750763034362895579L;
        i = 0;
        while (i < str.length())
        {
          l = (l ^ str.charAt(i)) * 1099511628211L;
          i += 1;
        }
        paramLabel[paramInt] = l;
        a[paramInt] = l;
        paramInt += 1;
      }
      Arrays.sort(a);
      c = new Enum[paramClass.length];
      paramInt = 0;
      while (paramInt < a.length)
      {
        i = 0;
        while (i < paramLabel.length)
        {
          if (a[paramInt] == paramLabel[i])
          {
            c[paramInt] = paramClass[i];
            break;
          }
          i += 1;
        }
        paramInt += 1;
      }
    }
  }
  
  public abstract void a(ClassWriter paramClassWriter, Object paramObject, Type paramType, Map paramMap);
  
  public void a(Object paramObject, double paramDouble)
    throws IllegalAccessException
  {
    b.g.setDouble(paramObject, paramDouble);
  }
  
  public void a(Object paramObject, float paramFloat)
    throws IllegalAccessException
  {
    b.g.setFloat(paramObject, paramFloat);
  }
  
  public void a(Object paramObject, long paramLong)
    throws IllegalAccessException
  {
    b.g.setLong(paramObject, paramLong);
  }
  
  public void a(Object paramObject1, Object paramObject2)
  {
    if ((paramObject2 == null) && (b.type.isPrimitive())) {
      return;
    }
    Object localObject1 = b.g;
    Object localObject2 = b.d;
    if (b.n) {
      if (b.f) {
        localObject2 = b.type;
      }
    }
    try
    {
      bool = Map.class.isAssignableFrom((Class)localObject2);
      if (bool)
      {
        paramObject1 = ((Field)localObject1).get(paramObject1);
        paramObject1 = (Map)paramObject1;
        if (paramObject1 == null) {
          return;
        }
        paramObject2 = (Map)paramObject2;
        paramObject1.putAll(paramObject2);
        return;
      }
      paramObject1 = ((Field)localObject1).get(paramObject1);
      paramObject1 = (Collection)paramObject1;
      if (paramObject1 == null) {
        return;
      }
      paramObject2 = (Collection)paramObject2;
      paramObject1.addAll(paramObject2);
      return;
    }
    catch (Exception paramObject1)
    {
      boolean bool;
      paramObject2 = new StringBuilder();
      paramObject2.append("set property error, ");
      paramObject2.append(b.a);
      throw new JSONException(paramObject2.toString(), paramObject1);
    }
    ((Field)localObject1).set(paramObject1, paramObject2);
    return;
    if (b.f)
    {
      localObject1 = b.type;
      bool = Map.class.isAssignableFrom((Class)localObject1);
      if (bool)
      {
        paramObject1 = ((Method)localObject2).invoke(paramObject1, new Object[0]);
        paramObject1 = (Map)paramObject1;
        if (paramObject1 != null)
        {
          paramObject2 = (Map)paramObject2;
          paramObject1.putAll(paramObject2);
        }
      }
      else
      {
        paramObject1 = ((Method)localObject2).invoke(paramObject1, new Object[0]);
        paramObject1 = (Collection)paramObject1;
        if (paramObject1 != null)
        {
          paramObject2 = (Collection)paramObject2;
          paramObject1.addAll(paramObject2);
        }
      }
    }
    else
    {
      ((Method)localObject2).invoke(paramObject1, new Object[] { paramObject2 });
      return;
    }
  }
  
  public void add(Object paramObject, int paramInt)
    throws IllegalAccessException
  {
    b.g.setInt(paramObject, paramInt);
  }
  
  public Enum get(long paramLong)
  {
    if (c == null) {
      return null;
    }
    int i = Arrays.binarySearch(a, paramLong);
    if (i < 0) {
      return null;
    }
    return c[i];
  }
}
