package com.jd.parser;

public class ByteVector
{
  private final int a;
  private final x[] b;
  
  public ByteVector(int paramInt)
  {
    a = (paramInt - 1);
    b = new x[paramInt];
    a("$ref", 0, 4, "$ref".hashCode());
    a("@type", 0, 5, "@type".hashCode());
  }
  
  private static String read(String paramString, int paramInt1, int paramInt2)
  {
    char[] arrayOfChar = new char[paramInt2];
    paramString.getChars(paramInt1, paramInt2 + paramInt1, arrayOfChar, 0);
    return new String(arrayOfChar);
  }
  
  public String a(String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    int i = a & paramInt3;
    x localX = b[i];
    if (localX != null)
    {
      if ((paramInt3 == a) && (paramInt2 == c.length) && (paramString.regionMatches(paramInt1, b, 0, paramInt2))) {
        return b;
      }
      return read(paramString, paramInt1, paramInt2);
    }
    if (paramInt2 != paramString.length()) {
      paramString = read(paramString, paramInt1, paramInt2);
    }
    paramString = paramString.intern();
    b[i] = new x(paramString, paramInt3);
    return paramString;
  }
  
  public String a(char[] paramArrayOfChar, int paramInt1, int paramInt2, int paramInt3)
  {
    int i = a & paramInt3;
    x localX = b[i];
    if (localX != null)
    {
      int k = a;
      int j = 0;
      i = j;
      if (paramInt3 == k)
      {
        i = j;
        if (paramInt2 == c.length)
        {
          paramInt3 = 0;
          while (paramInt3 < paramInt2)
          {
            if (paramArrayOfChar[(paramInt1 + paramInt3)] != c[paramInt3])
            {
              i = j;
              break label103;
            }
            paramInt3 += 1;
          }
          i = 1;
        }
      }
      label103:
      if (i != 0) {
        return b;
      }
      return new String(paramArrayOfChar, paramInt1, paramInt2);
    }
    paramArrayOfChar = new String(paramArrayOfChar, paramInt1, paramInt2).intern();
    localX = new x(paramArrayOfChar, paramInt3);
    b[i] = localX;
    return paramArrayOfChar;
  }
}
