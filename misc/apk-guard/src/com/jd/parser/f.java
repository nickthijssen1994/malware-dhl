package com.jd.parser;

import com.jd.JSONException;
import com.jd.framework.json.JDJSON;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

public final class f
{
  private static final ThreadLocal<char[]> B;
  public static final boolean[] f;
  private static boolean g;
  protected static final int[] next;
  public static final boolean[] q;
  static final int[] x;
  public static final char[] y;
  protected int N;
  protected final String a;
  protected int b;
  protected char c;
  protected int d;
  protected long e;
  protected boolean h;
  protected int i;
  protected int j;
  public int k = JDJSON.DEFAULT_PARSER_FEATURE;
  public Locale l;
  public TimeZone m;
  public int n;
  protected boolean p;
  protected int r;
  protected char[] s;
  protected final int size;
  protected String t;
  public Calendar v;
  public boolean w;
  protected boolean z;
  
  static
  {
    try
    {
      i1 = Class.forName("android.os.Build$VERSION").getField("SDK_INT").getInt(null);
    }
    catch (Exception localException)
    {
      int i1;
      int i2;
      boolean bool;
      int i3;
      boolean[] arrayOfBoolean;
      for (;;) {}
    }
    i1 = -1;
    i2 = 0;
    if (i1 >= 23) {
      bool = true;
    } else {
      bool = false;
    }
    g = bool;
    B = new ThreadLocal();
    next = new int[103];
    i1 = 48;
    while (i1 <= 57)
    {
      next[i1] = (i1 - 48);
      i1 += 1;
    }
    i1 = 97;
    while (i1 <= 102)
    {
      next[i1] = (i1 - 97 + 10);
      i1 += 1;
    }
    i1 = 65;
    while (i1 <= 70)
    {
      next[i1] = (i1 - 65 + 10);
      i1 += 1;
    }
    y = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".toCharArray();
    x = new int['?'];
    Arrays.fill(x, -1);
    i3 = y.length;
    i1 = 0;
    while (i1 < i3)
    {
      x[y[i1]] = i1;
      i1 += 1;
    }
    x[61] = 0;
    q = new boolean['?'];
    for (i1 = 0;; i1 = (char)(i1 + 1))
    {
      arrayOfBoolean = q;
      if (i1 >= arrayOfBoolean.length) {
        break;
      }
      if ((i1 >= 65) && (i1 <= 90)) {
        arrayOfBoolean[i1] = true;
      } else if ((i1 >= 97) && (i1 <= 122)) {
        q[i1] = true;
      } else if (i1 == 95) {
        q[i1] = true;
      }
    }
    f = new boolean['?'];
    for (i1 = i2;; i1 = (char)(i1 + 1))
    {
      arrayOfBoolean = f;
      if (i1 >= arrayOfBoolean.length) {
        break;
      }
      if ((i1 >= 65) && (i1 <= 90)) {
        arrayOfBoolean[i1] = true;
      } else if ((i1 >= 97) && (i1 <= 122)) {
        f[i1] = true;
      } else if (i1 == 95) {
        f[i1] = true;
      } else if ((i1 >= 48) && (i1 <= 57)) {
        f[i1] = true;
      }
    }
  }
  
  public f(String paramString)
  {
    this(paramString, JDJSON.DEFAULT_PARSER_FEATURE);
  }
  
  public f(String paramString, int paramInt)
  {
    boolean bool = false;
    p = false;
    h = false;
    m = JDJSON.defaultTimeZone;
    l = JDJSON.defaultLocale;
    Object localObject = null;
    v = null;
    n = 0;
    s = ((char[])B.get());
    if (s == null) {
      s = new char['?'];
    }
    k = paramInt;
    a = paramString;
    size = a.length();
    b = -1;
    int i1 = b + 1;
    b = i1;
    char c1;
    if (i1 >= size) {
      c1 = '\032';
    } else {
      c1 = a.charAt(i1);
    }
    c = c1;
    if (c == 65279) {
      next();
    }
    paramString = localObject;
    if ((InitStringFieldAsEmptymask & paramInt) != 0) {
      paramString = "";
    }
    t = paramString;
    if ((DisableCircularReferenceDetectmask & paramInt) != 0) {
      bool = true;
    }
    w = bool;
  }
  
  public f(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    this(new String(paramArrayOfChar, 0, paramInt1), paramInt2);
  }
  
  private void add(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6, char paramChar7, char paramChar8)
  {
    v = Calendar.getInstance(m, l);
    v.set(1, (paramChar1 - '0') * 1000 + (paramChar2 - '0') * 100 + (paramChar3 - '0') * 10 + (paramChar4 - '0'));
    v.set(2, (paramChar5 - '0') * 10 + (paramChar6 - '0') - 1);
    v.set(5, (paramChar7 - '0') * 10 + (paramChar8 - '0'));
  }
  
  public static final byte[] encode(String paramString, int paramInt1, int paramInt2)
  {
    int i6 = 0;
    if (paramInt2 == 0) {
      return new byte[0];
    }
    int i2 = paramInt1 + paramInt2 - 1;
    int i1 = paramInt1;
    int i3;
    for (;;)
    {
      i3 = i2;
      if (i1 >= i2) {
        break;
      }
      i3 = i2;
      if (x[paramString.charAt(i1)] >= 0) {
        break;
      }
      i1 += 1;
    }
    while ((i3 > 0) && (x[paramString.charAt(i3)] < 0)) {
      i3 -= 1;
    }
    if (paramString.charAt(i3) == '=')
    {
      if (paramString.charAt(i3 - 1) == '=') {
        paramInt1 = 2;
      } else {
        paramInt1 = 1;
      }
    }
    else {
      paramInt1 = 0;
    }
    i2 = i3 - i1 + 1;
    int i4;
    if (paramInt2 > 76)
    {
      if (paramString.charAt(76) == '\r') {
        paramInt2 = i2 / 78;
      } else {
        paramInt2 = 0;
      }
      i4 = paramInt2 << 1;
    }
    else
    {
      i4 = 0;
    }
    int i8 = ((i2 - i4) * 6 >> 3) - paramInt1;
    byte[] arrayOfByte = new byte[i8];
    int i9 = i8 / 3;
    paramInt2 = 0;
    int i5 = 0;
    i2 = i1;
    while (paramInt2 < i9 * 3)
    {
      int[] arrayOfInt = x;
      int i7 = i2 + 1;
      i1 = arrayOfInt[paramString.charAt(i2)];
      arrayOfInt = x;
      i2 = i7 + 1;
      i7 = arrayOfInt[paramString.charAt(i7)];
      arrayOfInt = x;
      int i10 = i2 + 1;
      int i11 = arrayOfInt[paramString.charAt(i2)];
      arrayOfInt = x;
      i2 = i10 + 1;
      i1 = i1 << 18 | i7 << 12 | i11 << 6 | arrayOfInt[paramString.charAt(i10)];
      i10 = paramInt2 + 1;
      arrayOfByte[paramInt2] = ((byte)(i1 >> 16));
      i7 = i10 + 1;
      arrayOfByte[i10] = ((byte)(i1 >> 8));
      arrayOfByte[i7] = ((byte)i1);
      paramInt2 = i2;
      i1 = i5;
      if (i4 > 0)
      {
        i5 += 1;
        paramInt2 = i2;
        i1 = i5;
        if (i5 == 19)
        {
          paramInt2 = i2 + 2;
          i1 = 0;
        }
      }
      i7 += 1;
      i2 = paramInt2;
      i5 = i1;
      paramInt2 = i7;
    }
    if (paramInt2 < i8)
    {
      i4 = 0;
      i1 = i6;
      while (i2 <= i3 - paramInt1)
      {
        i1 |= x[paramString.charAt(i2)] << 18 - i4 * 6;
        i4 += 1;
        i2 += 1;
      }
      paramInt1 = 16;
      while (paramInt2 < i8)
      {
        arrayOfByte[paramInt2] = ((byte)(i1 >> paramInt1));
        paramInt1 -= 8;
        paramInt2 += 1;
      }
    }
    return arrayOfByte;
  }
  
  private void execute()
  {
    r = (b - 1);
    z = false;
    do
    {
      d += 1;
      next();
    } while (Character.isLetterOrDigit(c));
    String str = getValue();
    if (str.equals("null"))
    {
      i = 8;
      return;
    }
    if (str.equals("true"))
    {
      i = 6;
      return;
    }
    if (str.equals("false"))
    {
      i = 7;
      return;
    }
    if (str.equals("new"))
    {
      i = 9;
      return;
    }
    if (str.equals("undefined"))
    {
      i = 23;
      return;
    }
    if (str.equals("Set"))
    {
      i = 21;
      return;
    }
    if (str.equals("TreeSet"))
    {
      i = 22;
      return;
    }
    i = 18;
  }
  
  static boolean load(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6)
  {
    if (paramChar1 == '0')
    {
      if (paramChar2 < '0') {
        break label148;
      }
      if (paramChar2 > '9') {
        return false;
      }
    }
    else if (paramChar1 == '1')
    {
      if (paramChar2 < '0') {
        break label148;
      }
      if (paramChar2 > '9') {
        return false;
      }
    }
    else
    {
      if ((paramChar1 != '2') || (paramChar2 < '0')) {
        break label148;
      }
      if (paramChar2 > '4') {
        return false;
      }
    }
    if ((paramChar3 >= '0') && (paramChar3 <= '5'))
    {
      if (paramChar4 < '0') {
        break label148;
      }
      if (paramChar4 > '9') {
        return false;
      }
    }
    else
    {
      if (paramChar3 != '6') {
        break label148;
      }
      if (paramChar4 != '0') {
        return false;
      }
    }
    if ((paramChar5 >= '0') && (paramChar5 <= '5'))
    {
      if (paramChar6 < '0') {
        break label148;
      }
      if (paramChar6 > '9') {
        return false;
      }
    }
    else
    {
      if (paramChar5 != '6') {
        break label148;
      }
      if (paramChar6 != '0') {
        return false;
      }
    }
    return true;
    label148:
    return false;
  }
  
  static boolean load(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6, int paramInt1, int paramInt2)
  {
    if (paramChar1 >= '1')
    {
      if (paramChar1 > '3') {
        return false;
      }
      if (paramChar2 >= '0')
      {
        if (paramChar2 > '9') {
          return false;
        }
        if (paramChar3 >= '0')
        {
          if (paramChar3 > '9') {
            return false;
          }
          if (paramChar4 >= '0')
          {
            if (paramChar4 > '9') {
              return false;
            }
            if (paramChar5 == '0')
            {
              if (paramChar6 < '1') {
                break label190;
              }
              if (paramChar6 > '9') {
                return false;
              }
            }
            else
            {
              if (paramChar5 != '1') {
                break label190;
              }
              if ((paramChar6 != '0') && (paramChar6 != '1') && (paramChar6 != '2')) {
                return false;
              }
            }
            if (paramInt1 == 48)
            {
              if (paramInt2 < 49) {
                break label190;
              }
              if (paramInt2 > 57) {
                return false;
              }
            }
            else if ((paramInt1 != 49) && (paramInt1 != 50))
            {
              if ((paramInt1 != 51) || ((paramInt2 != 48) && (paramInt2 != 49))) {
                return false;
              }
            }
            else
            {
              if (paramInt2 < 48) {
                break label190;
              }
              if (paramInt2 > 57) {
                return false;
              }
            }
            return true;
          }
        }
      }
    }
    label190:
    return false;
  }
  
  private int next(long paramLong)
  {
    int i2 = c;
    int i1 = 1;
    for (;;)
    {
      if ((i2 == 34) || (i2 == 39))
      {
        long l1 = -3750763034362895579L;
        int i3 = b + i1;
        int i4;
        for (;;)
        {
          i4 = i1;
          if (i3 >= size) {
            break;
          }
          i4 = a.charAt(i3);
          if (i4 == i2)
          {
            i4 = i1 + (i3 - b - i1);
            break;
          }
          l1 = 1099511628211L * (i4 ^ l1);
          i3 += 1;
        }
        if (l1 != paramLong)
        {
          e = l1;
          n = -2;
          return 0;
        }
        i1 = b;
        i2 = i4 + 1;
        i1 += i2;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        for (;;)
        {
          if (i1 == 58) {
            return i2 + 1;
          }
          if ((i1 > 32) || ((i1 != 32) && (i1 != 10) && (i1 != 13) && (i1 != 9) && (i1 != 12) && (i1 != 8))) {
            break;
          }
          i1 = b + i2;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          i2 += 1;
        }
        throw new JSONException("match feild error expect ':'");
      }
      if ((i2 != 32) && (i2 != 10) && (i2 != 13) && (i2 != 9) && (i2 != 12) && (i2 != 8))
      {
        e = 0L;
        n = -2;
        return 0;
      }
      i2 = b + i1;
      if (i2 >= size) {
        i2 = 26;
      } else {
        i2 = a.charAt(i2);
      }
      i1 += 1;
    }
  }
  
  private static String parse(char[] paramArrayOfChar, int paramInt)
  {
    char[] arrayOfChar = new char[paramInt];
    int i5 = 0;
    int i4 = 0;
    while (i5 < paramInt)
    {
      int i1 = paramArrayOfChar[i5];
      if (i1 != 92)
      {
        arrayOfChar[i4] = i1;
        i4 += 1;
      }
      else
      {
        i5 += 1;
        int i6 = paramArrayOfChar[i5];
        switch (i6)
        {
        default: 
          switch (i6)
          {
          default: 
            switch (i6)
            {
            default: 
              throw new JSONException("unclosed.str.lit");
            case 120: 
              int[] arrayOfInt = next;
              i5 += 1;
              i6 = arrayOfInt[paramArrayOfChar[i5]];
              i5 += 1;
              arrayOfChar[i4] = ((char)(i6 * 16 + arrayOfInt[paramArrayOfChar[i5]]));
              i4 += 1;
              break;
            case 114: 
              arrayOfChar[i4] = '\r';
              i4 += 1;
              break;
            case 110: 
              arrayOfChar[i4] = '\n';
              i4 += 1;
              break;
            case 98: 
              arrayOfChar[i4] = '\b';
              i4 += 1;
              break;
            case 92: 
              arrayOfChar[i4] = '\\';
              i4 += 1;
              break;
            case 70: 
            case 102: 
              arrayOfChar[i4] = '\f';
              i4 += 1;
              break;
            case 39: 
              arrayOfChar[i4] = '\'';
              i4 += 1;
              break;
            case 34: 
              arrayOfChar[i4] = '"';
              i4 += 1;
            }
            break;
          case 118: 
            arrayOfChar[i4] = '\013';
            i4 += 1;
            break;
          case 117: 
            i5 += 1;
            i1 = paramArrayOfChar[i5];
            i5 += 1;
            int i2 = paramArrayOfChar[i5];
            i5 += 1;
            int i3 = paramArrayOfChar[i5];
            i5 += 1;
            arrayOfChar[i4] = ((char)Integer.parseInt(new String(new char[] { i1, i2, i3, paramArrayOfChar[i5] }), 16));
            i4 += 1;
            break;
          case 116: 
            arrayOfChar[i4] = '\t';
            i4 += 1;
          }
          break;
        case 55: 
          arrayOfChar[i4] = '\007';
          i4 += 1;
          break;
        case 54: 
          arrayOfChar[i4] = '\006';
          i4 += 1;
          break;
        case 53: 
          arrayOfChar[i4] = '\005';
          i4 += 1;
          break;
        case 52: 
          arrayOfChar[i4] = '\004';
          i4 += 1;
          break;
        case 51: 
          arrayOfChar[i4] = '\003';
          i4 += 1;
          break;
        case 50: 
          arrayOfChar[i4] = '\002';
          i4 += 1;
          break;
        case 49: 
          arrayOfChar[i4] = '\001';
          i4 += 1;
          break;
        case 48: 
          arrayOfChar[i4] = '\000';
          i4 += 1;
          break;
        case 47: 
          arrayOfChar[i4] = '/';
          i4 += 1;
        }
      }
      i5 += 1;
    }
    return new String(arrayOfChar, 0, i4);
  }
  
  private final String toString(int paramInt1, int paramInt2)
  {
    char[] arrayOfChar = s;
    if (paramInt2 < arrayOfChar.length)
    {
      a.getChars(paramInt1, paramInt1 + paramInt2, arrayOfChar, 0);
      return new String(s, 0, paramInt2);
    }
    arrayOfChar = new char[paramInt2];
    a.getChars(paramInt1, paramInt2 + paramInt1, arrayOfChar, 0);
    return new String(arrayOfChar);
  }
  
  public final int a()
  {
    int i3 = r;
    int i6 = d + i3;
    if (i3 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i3);
    }
    int i2 = 0;
    int i5;
    int i4;
    if (i1 == 45)
    {
      i5 = Integer.MIN_VALUE;
      i3 += 1;
      i4 = 1;
    }
    else
    {
      i5 = -2147483647;
      i4 = 0;
    }
    int i1 = i3;
    if (i3 < i6)
    {
      if (i3 >= size) {
        i1 = 26;
      } else {
        i1 = a.charAt(i3);
      }
      i2 = -(i1 - 48);
    }
    for (i1 = i3 + 1;; i1 = i3)
    {
      i3 = i1;
      if (i1 >= i6) {
        break label222;
      }
      i3 = i1 + 1;
      if (i1 >= size) {
        i1 = 26;
      } else {
        i1 = a.charAt(i1);
      }
      if ((i1 == 76) || (i1 == 83) || (i1 == 66)) {
        break label222;
      }
      i1 -= 48;
      if (i2 < -214748364) {
        break label210;
      }
      i2 *= 10;
      if (i2 < i5 + i1) {
        break;
      }
      i2 -= i1;
    }
    throw new NumberFormatException(format());
    label210:
    throw new NumberFormatException(format());
    label222:
    if (i4 != 0)
    {
      if (i3 > r + 1) {
        return i2;
      }
      throw new NumberFormatException(format());
    }
    return -i2;
  }
  
  public final String a(ByteVector paramByteVector)
  {
    for (;;)
    {
      int i1 = c;
      if ((i1 != 32) && (i1 != 10) && (i1 != 13) && (i1 != 9) && (i1 != 12) && (i1 != 8))
      {
        if (i1 == 34) {
          return a(paramByteVector, '"');
        }
        if (i1 == 39) {
          return a(paramByteVector, '\'');
        }
        if (i1 == 125)
        {
          next();
          i = 13;
          return null;
        }
        if (i1 == 44)
        {
          next();
          i = 16;
          return null;
        }
        if (i1 == 26)
        {
          i = 20;
          return null;
        }
        return b(paramByteVector);
      }
      next();
    }
  }
  
  public String a(ByteVector paramByteVector, char paramChar)
  {
    char c2 = b + 1;
    int i1 = a.indexOf(paramChar, c2);
    if (i1 != -1)
    {
      char c3 = i1 - c2;
      Object localObject1 = read(b + 1, c3);
      char c4;
      int i2;
      for (c2 = '\000'; (c3 > 0) && (localObject1[(c3 - '\001')] == '\\'); c2 = c4)
      {
        c4 = c3 - '\002';
        i2 = 1;
        while ((c4 >= 0) && (localObject1[c4] == '\\'))
        {
          i2 += 1;
          c4 -= '\001';
        }
        if (i2 % 2 == 0) {
          break;
        }
        i2 = a.indexOf(paramChar, i1 + 1);
        c2 = i2 - i1 + c3;
        Object localObject2 = localObject1;
        if (c2 >= localObject1.length)
        {
          char c5 = localObject1.length * 3 / 2;
          c4 = c5;
          if (c5 < c2) {
            c4 = c2;
          }
          localObject2 = new char[c4];
          System.arraycopy(localObject1, 0, localObject2, 0, localObject1.length);
        }
        a.getChars(i1, i2, (char[])localObject2, c3);
        i1 = i2;
        c4 = '\001';
        c3 = c2;
        localObject1 = localObject2;
      }
      if (c2 == 0)
      {
        paramChar = '\000';
        c4 = '\000';
        while (paramChar < c3)
        {
          i2 = localObject1[paramChar];
          c4 = c4 * '\037' + i2;
          if (i2 == 92) {
            c2 = '\001';
          }
          paramChar += '\001';
        }
        if (c2 != 0) {
          paramByteVector = parse((char[])localObject1, c3);
        } else if (c3 < '\024') {
          paramByteVector = paramByteVector.a((char[])localObject1, 0, c3, c4);
        } else {
          paramByteVector = new String((char[])localObject1, 0, c3);
        }
      }
      else
      {
        paramByteVector = parse((char[])localObject1, c3);
      }
      b = (i1 + 1);
      paramChar = b;
      char c1;
      if (paramChar >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(paramChar);
      }
      c = c1;
      return paramByteVector;
    }
    paramByteVector = new StringBuilder();
    paramByteVector.append("unclosed str, ");
    paramByteVector.append(e());
    throw new JSONException(paramByteVector.toString());
  }
  
  public final void a(int paramInt)
  {
    d = 0;
    for (;;)
    {
      if (paramInt != 2)
      {
        char c1 = '\032';
        if (paramInt != 4)
        {
          if (paramInt != 12)
          {
            if (paramInt != 18)
            {
              if (paramInt != 20) {
                switch (paramInt)
                {
                default: 
                  break;
                case 16: 
                  i1 = c;
                  if (i1 == 44)
                  {
                    i = 16;
                    paramInt = b + 1;
                    b = paramInt;
                    if (paramInt < size) {
                      c1 = a.charAt(paramInt);
                    }
                    c = c1;
                    return;
                  }
                  if (i1 == 125)
                  {
                    i = 13;
                    paramInt = b + 1;
                    b = paramInt;
                    if (paramInt < size) {
                      c1 = a.charAt(paramInt);
                    }
                    c = c1;
                    return;
                  }
                  if (i1 == 93)
                  {
                    i = 15;
                    paramInt = b + 1;
                    b = paramInt;
                    if (paramInt < size) {
                      c1 = a.charAt(paramInt);
                    }
                    c = c1;
                    return;
                  }
                  if (i1 != 26) {
                    break label626;
                  }
                  i = 20;
                  return;
                case 15: 
                  if (c == ']')
                  {
                    i = 15;
                    next();
                    return;
                  }
                  break;
                case 14: 
                  i1 = c;
                  if (i1 == 91)
                  {
                    i = 14;
                    next();
                    return;
                  }
                  if (i1 != 123) {
                    break label626;
                  }
                  i = 12;
                  next();
                  return;
                }
              }
              if (c == '\032') {
                i = 20;
              }
            }
            else
            {
              nextToken();
            }
          }
          else
          {
            i1 = c;
            if (i1 == 123)
            {
              i = 12;
              paramInt = b + 1;
              b = paramInt;
              if (paramInt < size) {
                c1 = a.charAt(paramInt);
              }
              c = c1;
              return;
            }
            if (i1 == 91)
            {
              i = 14;
              paramInt = b + 1;
              b = paramInt;
              if (paramInt < size) {
                c1 = a.charAt(paramInt);
              }
              c = c1;
            }
          }
        }
        else
        {
          i1 = c;
          if (i1 == 34)
          {
            j = b;
            write();
            return;
          }
          if ((i1 >= 48) && (i1 <= 57))
          {
            j = b;
            b();
            return;
          }
          if (c == '{')
          {
            i = 12;
            paramInt = b + 1;
            b = paramInt;
            if (paramInt < size) {
              c1 = a.charAt(paramInt);
            }
            c = c1;
          }
        }
      }
      else
      {
        i1 = c;
        if ((i1 >= 48) && (i1 <= 57))
        {
          j = b;
          b();
          return;
        }
        i1 = c;
        if (i1 == 34)
        {
          j = b;
          write();
          return;
        }
        if (i1 == 91)
        {
          i = 14;
          next();
          return;
        }
        if (i1 == 123)
        {
          i = 12;
          next();
          return;
        }
      }
      label626:
      int i1 = c;
      if ((i1 != 32) && (i1 != 10) && (i1 != 13) && (i1 != 9) && (i1 != 12) && (i1 != 8))
      {
        read();
        return;
      }
      next();
    }
  }
  
  public boolean a(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return false;
    }
    boolean bool;
    if (a.startsWith("false", b + i1))
    {
      i1 += 5;
      bool = false;
    }
    else if (a.startsWith("true", b + i1))
    {
      i1 += 4;
      bool = true;
    }
    else if (a.startsWith("\"false\"", b + i1))
    {
      i1 += 7;
      bool = false;
    }
    else if (a.startsWith("\"true\"", b + i1))
    {
      i1 += 6;
      bool = true;
    }
    else if (a.charAt(b + i1) == '1')
    {
      i1 += 1;
      bool = true;
    }
    else if (a.charAt(b + i1) == '0')
    {
      i1 += 1;
      bool = false;
    }
    else if (a.startsWith("\"1\"", b + i1))
    {
      i1 += 3;
      bool = true;
    }
    else
    {
      if (!a.startsWith("\"0\"", b + i1)) {
        break label786;
      }
      i1 += 3;
      bool = false;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 = i3 + i1;
    i3 = size;
    char c1 = '\032';
    if (i1 >= i3) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    for (;;)
    {
      if (i1 == 44)
      {
        b += i2 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
        n = 3;
        i = 16;
        return bool;
      }
      if ((i1 == 125) || ((i1 != 32) && (i1 != 10) && (i1 != 13) && (i1 != 9) && (i1 != 12) && (i1 != 8))) {
        break;
      }
      i1 = b + i2;
      if (i1 >= size) {
        i1 = 26;
      } else {
        i1 = a.charAt(i1);
      }
      i2 += 1;
    }
    if (i1 == 125)
    {
      i3 = b;
      i1 = i2 + 1;
      i2 = get(i3 + i2);
      if (i2 == 44)
      {
        i = 16;
        b += i1 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
      else if (i2 == 93)
      {
        i = 15;
        b += i1 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
      else if (i2 == 125)
      {
        i = 13;
        b += i1 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
      else
      {
        if (i2 != 26) {
          break label772;
        }
        i = 20;
        b += i1 - 1;
        c = '\032';
      }
      n = 4;
      return bool;
      label772:
      n = -1;
      return false;
    }
    n = -1;
    return false;
    label786:
    n = -1;
    return false;
  }
  
  public long add(long paramLong)
  {
    int i4 = 0;
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return 0L;
    }
    int i2 = b;
    int i3 = i1 + 1;
    i1 = i2 + i1;
    if (i1 >= size) {
      i2 = 26;
    } else {
      i2 = a.charAt(i1);
    }
    int i5;
    if (i2 == 34) {
      i5 = 1;
    } else {
      i5 = 0;
    }
    i1 = i3;
    if (i5 != 0)
    {
      i1 = b + i3;
      if (i1 >= size) {
        i2 = 26;
      } else {
        i2 = a.charAt(i1);
      }
      i1 = i3 + 1;
    }
    if (i2 == 45) {
      i4 = 1;
    }
    i3 = i1;
    if (i4 != 0)
    {
      i2 = b + i1;
      if (i2 >= size) {
        i2 = 26;
      } else {
        i2 = a.charAt(i2);
      }
      i3 = i1 + 1;
    }
    if ((i2 >= 48) && (i2 <= 57))
    {
      paramLong = i2 - 48;
      for (;;)
      {
        i1 = b;
        i2 = i3 + 1;
        i1 += i3;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        if ((i1 < 48) || (i1 > 57)) {
          break;
        }
        paramLong = paramLong * 10L + (i1 - 48);
        i3 = i2;
      }
      if (i1 == 46)
      {
        n = -1;
        return 0L;
      }
      i3 = i2;
      int i6 = i1;
      if (i1 == 34)
      {
        if (i5 == 0)
        {
          n = -1;
          return 0L;
        }
        i1 = b + i2;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        i3 = i2 + 1;
        i6 = i1;
      }
      if (paramLong < 0L)
      {
        n = -1;
        return 0L;
      }
      char c1;
      if (i6 == 44)
      {
        b += i3 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 >= size) {
          c1 = '\032';
        } else {
          c1 = a.charAt(i1);
        }
        c = c1;
        n = 3;
        i = 16;
        if (i4 != 0) {
          return -paramLong;
        }
      }
      else if (i6 == 125)
      {
        i2 = b;
        i1 = i3 + 1;
        i2 = get(i2 + i3);
        if (i2 == 44)
        {
          i = 16;
          b += i1 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 >= size) {
            c1 = '\032';
          } else {
            c1 = a.charAt(i1);
          }
          c = c1;
        }
        else if (i2 == 93)
        {
          i = 15;
          b += i1 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 >= size) {
            c1 = '\032';
          } else {
            c1 = a.charAt(i1);
          }
          c = c1;
        }
        else if (i2 == 125)
        {
          i = 13;
          b += i1 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 >= size) {
            c1 = '\032';
          } else {
            c1 = a.charAt(i1);
          }
          c = c1;
        }
        else
        {
          if (i2 != 26) {
            break label774;
          }
          i = 20;
          b += i1 - 1;
          c = '\032';
        }
        n = 4;
        if (i4 != 0)
        {
          return -paramLong;
          label774:
          n = -1;
          return 0L;
        }
      }
      else
      {
        n = -1;
        return 0L;
      }
    }
    else
    {
      n = -1;
      return 0L;
    }
    return paramLong;
  }
  
  public final Number add()
    throws NumberFormatException
  {
    int i5 = r;
    int i2 = d + i5;
    int i1 = i2 - 1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 66)
    {
      if (i1 != 76)
      {
        if (i1 != 83)
        {
          i3 = 32;
          i1 = i2;
          i2 = i3;
        }
        else
        {
          i1 = i2 - 1;
          i2 = 83;
        }
      }
      else
      {
        i1 = i2 - 1;
        i2 = 76;
      }
    }
    else
    {
      i1 = i2 - 1;
      i2 = 66;
    }
    int i3 = r;
    if (i3 >= size) {
      i3 = 26;
    } else {
      i3 = a.charAt(i3);
    }
    long l2;
    int i4;
    if (i3 == 45)
    {
      l2 = Long.MIN_VALUE;
      i3 = i5 + 1;
      i4 = 1;
    }
    else
    {
      l2 = -9223372036854775807L;
      i4 = 0;
      i3 = i5;
    }
    if (i3 < i1)
    {
      if (i3 >= size) {
        i5 = 26;
      } else {
        i5 = a.charAt(i3);
      }
      l1 = -(i5 - 48);
      i3 += 1;
    }
    else
    {
      l1 = 0L;
    }
    while (i3 < i1)
    {
      if (i3 >= size) {
        i5 = 26;
      } else {
        i5 = a.charAt(i3);
      }
      if (l1 < -922337203685477580L) {
        return new BigInteger(format());
      }
      l1 *= 10L;
      long l3 = i5 - 48;
      if (l1 < l2 + l3) {
        return new BigInteger(format());
      }
      l1 -= l3;
      i3 += 1;
    }
    if (i4 != 0)
    {
      if (i3 > r + 1)
      {
        if ((l1 >= -2147483648L) && (i2 != 76))
        {
          if (i2 == 83) {
            return Short.valueOf((short)(int)l1);
          }
          if (i2 == 66) {
            return Byte.valueOf((byte)(int)l1);
          }
          return Integer.valueOf((int)l1);
        }
        return Long.valueOf(l1);
      }
      throw new NumberFormatException(format());
    }
    long l1 = -l1;
    if ((l1 <= 2147483647L) && (i2 != 76))
    {
      if (i2 == 83) {
        return Short.valueOf((short)(int)l1);
      }
      if (i2 == 66) {
        return Byte.valueOf((byte)(int)l1);
      }
      return Integer.valueOf((int)l1);
    }
    return Long.valueOf(l1);
  }
  
  public final void add(char paramChar)
  {
    d = 0;
    for (;;)
    {
      char c1 = c;
      if (c1 == paramChar)
      {
        c1 = b + 1;
        b = c1;
        if (c1 >= size) {
          paramChar = '\032';
        } else {
          paramChar = a.charAt(c1);
        }
        c = paramChar;
        read();
        return;
      }
      if ((c1 != ' ') && (c1 != '\n') && (c1 != '\r') && (c1 != '\t') && (c1 != '\f') && (c1 != '\b'))
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("not match ");
        localStringBuilder.append(paramChar);
        localStringBuilder.append(" - ");
        localStringBuilder.append(c);
        throw new JSONException(localStringBuilder.toString());
      }
      next();
    }
  }
  
  protected void add(char paramChar1, char paramChar2, char paramChar3, char paramChar4, char paramChar5, char paramChar6)
  {
    v.set(11, (paramChar1 - '0') * 10 + (paramChar2 - '0'));
    v.set(12, (paramChar3 - '0') * 10 + (paramChar4 - '0'));
    v.set(13, (paramChar5 - '0') * 10 + (paramChar6 - '0'));
  }
  
  public final float b(long paramLong)
  {
    int i8 = 0;
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return 0.0F;
    }
    int i2 = b;
    int i3 = i1 + 1;
    i1 = get(i2 + i1);
    i2 = i1;
    int i9 = b + i3 - 1;
    int i4;
    if (i1 == 45) {
      i4 = 1;
    } else {
      i4 = 0;
    }
    i1 = i3;
    if (i4 != 0)
    {
      i2 = get(b + i3);
      i1 = i3 + 1;
    }
    if ((i2 >= 48) && (i2 <= 57))
    {
      i2 -= 48;
      i3 = i1;
      i1 = i2;
      int i5;
      for (;;)
      {
        i5 = b;
        i2 = i3 + 1;
        i5 = get(i5 + i3);
        i3 = i5;
        if ((i5 < 48) || (i5 > 57)) {
          break;
        }
        i1 = i1 * 10 + (i5 - 48);
        i3 = i2;
      }
      if (i5 == 46) {
        i5 = 1;
      } else {
        i5 = 0;
      }
      int i7;
      int i6;
      if (i5 != 0)
      {
        i5 = b;
        i3 = i2 + 1;
        i2 = get(i5 + i2);
        if ((i2 >= 48) && (i2 <= 57))
        {
          i1 = i1 * 10 + (i2 - 48);
          i2 = 10;
          for (;;)
          {
            i5 = b;
            i7 = i3 + 1;
            i3 = get(i5 + i3);
            if ((i3 < 48) || (i3 > 57)) {
              break;
            }
            i1 = i1 * 10 + (i3 - 48);
            i2 *= 10;
            i3 = i7;
          }
          i5 = i1;
          i6 = i2;
          i2 = i7;
        }
        else
        {
          n = -1;
          return 0.0F;
        }
      }
      else
      {
        i6 = 1;
        i5 = i1;
      }
      if (i3 != 101)
      {
        i7 = i8;
        if (i3 != 69) {}
      }
      else
      {
        i7 = 1;
      }
      i8 = i3;
      i3 = i2;
      if (i7 != 0)
      {
        i1 = b;
        i3 = i2 + 1;
        i2 = get(i1 + i2);
        i1 = i2;
        if ((i2 != 43) && (i2 != 45))
        {
          i2 = i3;
        }
        else
        {
          i1 = b;
          i2 = i3 + 1;
          i1 = get(i1 + i3);
        }
        for (;;)
        {
          i8 = i1;
          i3 = i2;
          if (i1 < 48) {
            break;
          }
          i8 = i1;
          i3 = i2;
          if (i1 > 57) {
            break;
          }
          i1 = get(b + i2);
          i2 += 1;
        }
      }
      i1 = b + i3 - i9 - 1;
      float f1;
      if ((i7 == 0) && (i1 < 10))
      {
        float f2 = i5 / i6;
        f1 = f2;
        if (i4 != 0) {
          f1 = -f2;
        }
      }
      else
      {
        f1 = Float.parseFloat(toString(i9, i1));
      }
      if (i8 == 44)
      {
        b += i3 - 1;
        next();
        n = 3;
        i = 16;
        return f1;
      }
      if (i8 == 125)
      {
        i2 = b;
        i1 = i3 + 1;
        i2 = get(i2 + i3);
        if (i2 == 44)
        {
          i = 16;
          b += i1 - 1;
          next();
        }
        else if (i2 == 93)
        {
          i = 15;
          b += i1 - 1;
          next();
        }
        else if (i2 == 125)
        {
          i = 13;
          b += i1 - 1;
          next();
        }
        else
        {
          if (i2 != 26) {
            break label793;
          }
          b += i1 - 1;
          i = 20;
          c = '\032';
        }
        n = 4;
        return f1;
        label793:
        n = -1;
        return 0.0F;
      }
      n = -1;
      return 0.0F;
    }
    n = -1;
    return 0.0F;
  }
  
  public final String b(ByteVector paramByteVector)
  {
    int i2 = c;
    boolean[] arrayOfBoolean = q;
    int i1;
    if ((i2 < arrayOfBoolean.length) && (arrayOfBoolean[i2] == 0)) {
      i1 = 0;
    } else {
      i1 = 1;
    }
    if (i1 != 0)
    {
      r = b;
      d = 1;
      i1 = i2;
      for (;;)
      {
        i2 = next();
        arrayOfBoolean = f;
        if ((i2 < arrayOfBoolean.length) && (arrayOfBoolean[i2] == 0))
        {
          c = get(b);
          i = 18;
          if ((d == 4) && (a.startsWith("null", r))) {
            return null;
          }
          return paramByteVector.a(a, r, d, i1);
        }
        i1 = i1 * 31 + i2;
        d += 1;
      }
    }
    paramByteVector = new StringBuilder();
    paramByteVector.append("illegal identifier : ");
    paramByteVector.append(c);
    paramByteVector.append(", ");
    paramByteVector.append(e());
    throw new JSONException(paramByteVector.toString());
  }
  
  public final void b()
  {
    int i1 = b;
    r = i1;
    p = false;
    char c1;
    if (c == '-')
    {
      d += 1;
      i1 += 1;
      b = i1;
      if (i1 >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(i1);
      }
    }
    for (c = c1;; c = c1)
    {
      i1 = c;
      if ((i1 < 48) || (i1 > 57)) {
        break;
      }
      d += 1;
      i1 = b + 1;
      b = i1;
      if (i1 >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(i1);
      }
    }
    h = false;
    if (c == '.')
    {
      d += 1;
      i1 = b + 1;
      b = i1;
      if (i1 >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(i1);
      }
      c = c1;
      h = true;
      for (;;)
      {
        i1 = c;
        if ((i1 < 48) || (i1 > 57)) {
          break;
        }
        d += 1;
        i1 = b + 1;
        b = i1;
        if (i1 >= size) {
          c1 = '\032';
        } else {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
    }
    i1 = c;
    if (i1 == 76)
    {
      d += 1;
      next();
    }
    else if (i1 == 83)
    {
      d += 1;
      next();
    }
    else if (i1 == 66)
    {
      d += 1;
      next();
    }
    else if (i1 == 70)
    {
      d += 1;
      next();
      h = true;
    }
    else if (i1 == 68)
    {
      d += 1;
      next();
      h = true;
    }
    else if ((i1 == 101) || (i1 == 69))
    {
      d += 1;
      i1 = b + 1;
      b = i1;
      if (i1 >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(i1);
      }
      c = c1;
      i1 = c;
      if ((i1 == 43) || (i1 == 45))
      {
        d += 1;
        i1 = b + 1;
        b = i1;
        if (i1 >= size) {
          c1 = '\032';
        } else {
          c1 = a.charAt(i1);
        }
      }
      for (c = c1;; c = c1)
      {
        i1 = c;
        if ((i1 < 48) || (i1 > 57)) {
          break;
        }
        d += 1;
        i1 = b + 1;
        b = i1;
        if (i1 >= size) {
          c1 = '\032';
        } else {
          c1 = a.charAt(i1);
        }
      }
      i1 = c;
      if ((i1 == 68) || (i1 == 70))
      {
        d += 1;
        next();
      }
      p = true;
      h = true;
    }
    if (h)
    {
      i = 3;
      return;
    }
    i = 2;
  }
  
  public byte[] clear()
  {
    return encode(a, r + 1, d);
  }
  
  public final double d(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return 0.0D;
    }
    int i2 = b;
    int i3 = i1 + 1;
    i1 = get(i2 + i1);
    i2 = i1;
    int i9 = b + i3 - 1;
    int i4;
    if (i1 == 45) {
      i4 = 1;
    } else {
      i4 = 0;
    }
    i1 = i3;
    if (i4 != 0)
    {
      i2 = get(b + i3);
      i1 = i3 + 1;
    }
    if ((i2 >= 48) && (i2 <= 57))
    {
      i2 -= 48;
      i3 = i1;
      i1 = i2;
      int i5;
      for (;;)
      {
        i5 = b;
        i2 = i3 + 1;
        i5 = get(i5 + i3);
        if ((i5 < 48) || (i5 > 57)) {
          break;
        }
        i1 = i1 * 10 + (i5 - 48);
        i3 = i2;
      }
      if (i5 == 46) {
        i3 = 1;
      } else {
        i3 = 0;
      }
      int i7;
      int i6;
      if (i3 != 0)
      {
        i5 = b;
        i3 = i2 + 1;
        i2 = get(i5 + i2);
        if ((i2 >= 48) && (i2 <= 57))
        {
          i2 = i1 * 10 + (i2 - 48);
          i1 = 10;
          for (;;)
          {
            i5 = b;
            i7 = i3 + 1;
            i5 = get(i5 + i3);
            i3 = i5;
            if ((i5 < 48) || (i5 > 57)) {
              break;
            }
            i2 = i2 * 10 + (i5 - 48);
            i1 *= 10;
            i3 = i7;
          }
          i5 = i2;
          i6 = i1;
          i2 = i7;
        }
        else
        {
          n = -1;
          return 0.0D;
        }
      }
      else
      {
        i3 = i5;
        i6 = 1;
        i5 = i1;
      }
      if ((i3 != 101) && (i3 != 69)) {
        i7 = 0;
      } else {
        i7 = 1;
      }
      int i8 = i3;
      i3 = i2;
      if (i7 != 0)
      {
        i3 = b;
        i1 = i2 + 1;
        i3 = get(i3 + i2);
        if ((i3 != 43) && (i3 != 45))
        {
          i2 = i1;
          i1 = i3;
        }
        else
        {
          i3 = b;
          i2 = i1 + 1;
          i1 = get(i3 + i1);
        }
        for (;;)
        {
          i8 = i1;
          i3 = i2;
          if (i1 < 48) {
            break;
          }
          i8 = i1;
          i3 = i2;
          if (i1 > 57) {
            break;
          }
          i1 = get(b + i2);
          i2 += 1;
        }
      }
      i1 = b + i3 - i9 - 1;
      double d1;
      if ((i7 == 0) && (i1 < 10))
      {
        d1 = i5;
        double d2 = i6;
        Double.isNaN(d1);
        Double.isNaN(d2);
        d2 = d1 / d2;
        d1 = d2;
        if (i4 != 0) {
          d1 = -d2;
        }
      }
      else
      {
        d1 = Double.parseDouble(toString(i9, i1));
      }
      if (i8 == 44)
      {
        b += i3 - 1;
        next();
        n = 3;
        i = 16;
        return d1;
      }
      if (i8 == 125)
      {
        i2 = b;
        i1 = i3 + 1;
        i2 = get(i2 + i3);
        if (i2 == 44)
        {
          i = 16;
          b += i1 - 1;
          next();
        }
        else if (i2 == 93)
        {
          i = 15;
          b += i1 - 1;
          next();
        }
        else if (i2 == 125)
        {
          i = 13;
          b += i1 - 1;
          next();
        }
        else
        {
          if (i2 != 26) {
            break label816;
          }
          b += i1 - 1;
          i = 20;
          c = '\032';
        }
        n = 4;
        return d1;
        label816:
        n = -1;
        return 0.0D;
      }
      n = -1;
      return 0.0D;
    }
    n = -1;
    return 0.0D;
  }
  
  public void d()
  {
    char[] arrayOfChar = s;
    if (arrayOfChar.length <= 8196) {
      B.set(arrayOfChar);
    }
    s = null;
  }
  
  public boolean d(boolean paramBoolean)
  {
    return parse(paramBoolean, size - b);
  }
  
  public int decode(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return 0;
    }
    int i2 = b;
    int i4 = i1 + 1;
    i1 = i2 + i1;
    i2 = size;
    char c1 = '\032';
    if (i1 >= i2) {
      i2 = 26;
    } else {
      i2 = a.charAt(i1);
    }
    if (i2 == 34) {
      i3 = 1;
    } else {
      i3 = 0;
    }
    i1 = i4;
    int i5 = i3;
    if (i3 != 0)
    {
      i1 = b + i4;
      if (i1 >= size) {
        i2 = 26;
      } else {
        i2 = a.charAt(i1);
      }
      i1 = i4 + 1;
      i5 = 1;
    }
    if (i2 == 45) {
      i4 = 1;
    } else {
      i4 = 0;
    }
    int i3 = i1;
    if (i4 != 0)
    {
      i2 = b + i1;
      if (i2 >= size) {
        i2 = 26;
      } else {
        i2 = a.charAt(i2);
      }
      i3 = i1 + 1;
    }
    if ((i2 >= 48) && (i2 <= 57))
    {
      i2 -= 48;
      i1 = i3;
      i3 = i2;
      for (;;)
      {
        int i6 = b;
        i2 = i1 + 1;
        i1 = i6 + i1;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        if ((i1 < 48) || (i1 > 57)) {
          break;
        }
        i3 = i3 * 10 + (i1 - 48);
        i1 = i2;
      }
      if (i1 == 46)
      {
        n = -1;
        return 0;
      }
      if (i1 == 34)
      {
        if (i5 == 0)
        {
          n = -1;
          return 0;
        }
        i5 = b;
        i1 = i2 + 1;
        i2 = i5 + i2;
        if (i2 >= size)
        {
          i5 = 26;
          i2 = i1;
          i1 = i5;
        }
        else
        {
          i5 = a.charAt(i2);
          i2 = i1;
          i1 = i5;
        }
      }
      if (i3 < 0)
      {
        n = -1;
        return 0;
      }
      for (;;)
      {
        if (i1 == 44)
        {
          b += i2 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
          n = 3;
          i = 16;
          if (i4 == 0) {
            break label914;
          }
          return -i3;
        }
        if ((i1 > 32) || ((i1 != 32) && (i1 != 10) && (i1 != 13) && (i1 != 9) && (i1 != 12) && (i1 != 8))) {
          break;
        }
        i1 = b + i2;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        i2 += 1;
      }
      if (i1 == 125)
      {
        i5 = b;
        i1 = i2 + 1;
        i2 = get(i5 + i2);
        if (i2 == 44)
        {
          i = 16;
          b += i1 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
        }
        else if (i2 == 93)
        {
          i = 15;
          b += i1 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
        }
        else if (i2 == 125)
        {
          i = 13;
          b += i1 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
        }
        else
        {
          if (i2 != 26) {
            break label893;
          }
          i = 20;
          b += i1 - 1;
          c = '\032';
        }
        n = 4;
        if (i4 != 0)
        {
          return -i3;
          label893:
          n = -1;
          return 0;
        }
      }
      else
      {
        n = -1;
        return 0;
      }
    }
    else
    {
      n = -1;
      return 0;
    }
    label914:
    return i3;
  }
  
  protected void decode()
  {
    next();
    int i1 = c;
    if (i1 == 47)
    {
      do
      {
        next();
      } while (c != '\n');
      next();
      return;
    }
    if (i1 == 42)
    {
      next();
      for (;;)
      {
        i1 = c;
        if (i1 == 26) {
          break;
        }
        if (i1 == 42)
        {
          next();
          if (c == '/') {
            next();
          }
        }
        else
        {
          next();
        }
      }
      return;
    }
    throw new JSONException("invalid comment");
  }
  
  public long doInBackground(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return 0L;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 = i3 + i1;
    i3 = size;
    char c1 = '\032';
    if (i1 >= i3) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 34)
    {
      n = -1;
      return 0L;
    }
    paramLong = -3750763034362895579L;
    for (i1 = i2;; i1 = i2)
    {
      i3 = b;
      i2 = i1 + 1;
      i1 = i3 + i1;
      if (i1 >= size) {
        i1 = 26;
      } else {
        i1 = a.charAt(i1);
      }
      if (i1 == 34)
      {
        i1 = b;
        i3 = i2 + 1;
        i1 += i2;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        if (i1 == 44)
        {
          b += i3 - 1;
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
          n = 3;
          return paramLong;
        }
        if (i1 == 125)
        {
          i1 = b;
          i2 = i3 + 1;
          i1 += i3;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          if (i1 == 44)
          {
            i = 16;
            b += i2 - 1;
            next();
          }
          else if (i1 == 93)
          {
            i = 15;
            b += i2 - 1;
            next();
          }
          else if (i1 == 125)
          {
            i = 13;
            b += i2 - 1;
            next();
          }
          else
          {
            if (i1 != 26) {
              break label455;
            }
            i = 20;
            b += i2 - 1;
            c = '\032';
          }
          n = 4;
          return paramLong;
          label455:
          n = -1;
          return 0L;
        }
        n = -1;
        return 0L;
      }
      paramLong = (paramLong ^ i1) * 1099511628211L;
      if (i1 == 92)
      {
        n = -1;
        return 0L;
      }
    }
  }
  
  public String e()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("pos ");
    localStringBuilder.append(b);
    localStringBuilder.append(", json : ");
    String str;
    if (size < 65536) {
      str = a;
    } else {
      str = a.substring(0, 65536);
    }
    localStringBuilder.append(str);
    return localStringBuilder.toString();
  }
  
  public final boolean encode()
  {
    int i1 = 0;
    for (;;)
    {
      int i4 = get(i1);
      int i3 = 1;
      if (i4 == 26) {
        return true;
      }
      if (i4 <= 32)
      {
        i2 = i3;
        if (i4 == 32) {
          break label86;
        }
        i2 = i3;
        if (i4 == 10) {
          break label86;
        }
        i2 = i3;
        if (i4 == 13) {
          break label86;
        }
        i2 = i3;
        if (i4 == 9) {
          break label86;
        }
        i2 = i3;
        if (i4 == 12) {
          break label86;
        }
        if (i4 == 8)
        {
          i2 = i3;
          break label86;
        }
      }
      int i2 = 0;
      label86:
      if (i2 == 0) {
        return false;
      }
      i1 += 1;
    }
  }
  
  public final int f()
  {
    return i;
  }
  
  public final boolean f(Feature paramFeature)
  {
    int i1 = k;
    return (mask & i1) != 0;
  }
  
  public final String format()
  {
    int i1 = r;
    int i2 = d;
    int i3 = a.charAt(i1 + i2 - 1);
    i2 = d;
    if ((i3 != 76) && (i3 != 83) && (i3 != 66) && (i3 != 70))
    {
      i1 = i2;
      if (i3 != 68) {}
    }
    else
    {
      i1 = i2 - 1;
    }
    return toString(r, i1);
  }
  
  protected void format(char paramChar1, char paramChar2, char paramChar3)
  {
    paramChar3 = ((paramChar2 - '0') * 10 + (paramChar3 - '0')) * 3600 * 1000;
    paramChar2 = paramChar3;
    if (paramChar1 == '-') {
      paramChar2 = -paramChar3;
    }
    if (v.getTimeZone().getRawOffset() != paramChar2)
    {
      Object localObject = TimeZone.getAvailableIDs(paramChar2);
      if (localObject.length > 0)
      {
        localObject = TimeZone.getTimeZone(localObject[0]);
        v.setTimeZone((TimeZone)localObject);
      }
    }
  }
  
  public final double[][] format(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 = i3 + i1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 91)
    {
      n = -1;
      return null;
    }
    i1 = b;
    i3 = i2 + 1;
    i1 += i2;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    Object localObject2 = new double[16][];
    int i6 = 0;
    for (;;)
    {
      if (i1 == 91)
      {
        i1 = b;
        i2 = i3 + 1;
        i1 += i3;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        Object localObject3 = new double[16];
        int i7 = 0;
        for (;;)
        {
          int i12 = b + i2 - 1;
          int i8;
          if (i1 == 45) {
            i8 = 1;
          } else {
            i8 = 0;
          }
          if (i8 != 0)
          {
            i1 = b;
            i3 = i2 + 1;
            i1 += i2;
            if (i1 >= size)
            {
              i1 = 26;
              i2 = i3;
            }
            else
            {
              i1 = a.charAt(i1);
              i2 = i3;
            }
          }
          if ((i1 < 48) || (i1 > 57)) {
            break label1556;
          }
          i1 -= 48;
          int i4;
          for (i3 = i2;; i3 = i2)
          {
            i4 = b;
            i2 = i3 + 1;
            i3 = i4 + i3;
            if (i3 >= size) {
              i4 = 26;
            } else {
              i4 = a.charAt(i3);
            }
            if ((i4 < 48) || (i4 > 57)) {
              break;
            }
            i1 = i1 * 10 + (i4 - 48);
          }
          if (i4 == 46)
          {
            i4 = b;
            i3 = i2 + 1;
            i2 = i4 + i2;
            if (i2 >= size) {
              i2 = 26;
            } else {
              i2 = a.charAt(i2);
            }
            if ((i2 >= 48) && (i2 <= 57))
            {
              i4 = i1 * 10 + (i2 - 48);
              i1 = 10;
              i2 = i3;
              i3 = i4;
              for (;;)
              {
                i4 = b;
                int i11 = i2 + 1;
                i2 = i4 + i2;
                if (i2 >= size) {
                  i5 = 26;
                } else {
                  i5 = a.charAt(i2);
                }
                i4 = i5;
                i2 = i11;
                i10 = i3;
                i9 = i1;
                if (i5 < 48) {
                  break;
                }
                i4 = i5;
                i2 = i11;
                i10 = i3;
                i9 = i1;
                if (i5 > 57) {
                  break;
                }
                i3 = i3 * 10 + (i5 - 48);
                i1 *= 10;
                i2 = i11;
              }
            }
            n = -1;
            return (double[][])null;
          }
          int i9 = 1;
          int i10 = i1;
          if ((i4 != 101) && (i4 != 69)) {
            i5 = 0;
          } else {
            i5 = 1;
          }
          i3 = i2;
          if (i5 != 0)
          {
            i1 = b;
            i3 = i2 + 1;
            i1 += i2;
            if (i1 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i1);
            }
            if ((i1 != 43) && (i1 != 45))
            {
              i2 = i3;
            }
            else
            {
              i1 = b;
              i2 = i3 + 1;
              i1 += i3;
              if (i1 >= size) {
                i1 = 26;
              } else {
                i1 = a.charAt(i1);
              }
            }
            for (;;)
            {
              i4 = i1;
              i3 = i2;
              if (i1 < 48) {
                break;
              }
              i4 = i1;
              i3 = i2;
              if (i1 > 57) {
                break;
              }
              i1 = b + i2;
              if (i1 >= size) {
                i1 = 26;
              } else {
                i1 = a.charAt(i1);
              }
              i2 += 1;
            }
          }
          i1 = b + i3 - i12 - 1;
          double d1;
          if ((i5 == 0) && (i1 < 10))
          {
            d1 = i10;
            double d2 = i9;
            Double.isNaN(d1);
            Double.isNaN(d2);
            d2 = d1 / d2;
            d1 = d2;
            if (i8 != 0) {
              d1 = -d2;
            }
          }
          else
          {
            d1 = Double.parseDouble(toString(i12, i1));
          }
          Object localObject1 = localObject3;
          if (i7 >= localObject3.length)
          {
            localObject1 = new double[localObject3.length * 3 / 2];
            System.arraycopy(localObject3, 0, localObject1, 0, i7);
          }
          int i5 = i7 + 1;
          localObject1[i7] = d1;
          if (i4 == 44)
          {
            i1 = b + i3;
            if (i1 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i1);
            }
            i2 = i3 + 1;
          }
          else
          {
            i1 = i4;
            i2 = i3;
            if (i4 == 93)
            {
              i1 = b;
              i4 = i3 + 1;
              i1 += i3;
              if (i1 >= size) {
                i2 = 26;
              } else {
                i2 = a.charAt(i1);
              }
              localObject3 = localObject1;
              if (i5 != localObject1.length)
              {
                localObject3 = new double[i5];
                System.arraycopy(localObject1, 0, localObject3, 0, i5);
              }
              localObject1 = localObject2;
              if (i6 >= localObject2.length)
              {
                localObject1 = new double[localObject2.length * 3 / 2][];
                System.arraycopy(localObject3, 0, localObject1, 0, i5);
              }
              i5 = i6 + 1;
              localObject1[i6] = localObject3;
              if (i2 == 44)
              {
                i1 = b + i4;
                if (i1 >= size) {
                  i1 = 26;
                } else {
                  i1 = a.charAt(i1);
                }
                i3 = i4 + 1;
              }
              else
              {
                i3 = i4;
                i1 = i2;
                if (i2 == 93)
                {
                  i1 = b;
                  i2 = i4 + 1;
                  i1 += i4;
                  if (i1 >= size) {
                    i1 = 26;
                  } else {
                    i1 = a.charAt(i1);
                  }
                  if (i5 != localObject1.length)
                  {
                    localObject2 = new double[i5][];
                    System.arraycopy(localObject1, 0, localObject2, 0, i5);
                    localObject1 = localObject2;
                  }
                  if (i1 == 44)
                  {
                    b += i2 - 1;
                    next();
                    n = 3;
                    i = 16;
                    return localObject1;
                  }
                  if (i1 == 125)
                  {
                    i3 = b;
                    i1 = i2 + 1;
                    i2 = get(i3 + i2);
                    if (i2 == 44)
                    {
                      i = 16;
                      b += i1 - 1;
                      next();
                    }
                    else if (i2 == 93)
                    {
                      i = 15;
                      b += i1 - 1;
                      next();
                    }
                    else if (i2 == 125)
                    {
                      i = 13;
                      b += i1 - 1;
                      next();
                    }
                    else
                    {
                      if (i2 != 26) {
                        break label1520;
                      }
                      b += i1 - 1;
                      i = 20;
                      c = '\032';
                    }
                    n = 4;
                    return localObject1;
                    label1520:
                    n = -1;
                    return null;
                  }
                  n = -1;
                  return null;
                }
              }
              i6 = i5;
              localObject2 = localObject1;
              break;
            }
          }
          i7 = i5;
          localObject3 = localObject1;
        }
        label1556:
        n = -1;
        return (double[][])null;
      }
    }
  }
  
  protected char get(int paramInt)
  {
    if (paramInt >= size) {
      return '\032';
    }
    return a.charAt(paramInt);
  }
  
  public String get(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i2 = b;
    int i5 = i1 + 1;
    i1 = i2 + i1;
    if (i1 < size)
    {
      if (a.charAt(i1) != '"')
      {
        n = -1;
        return t;
      }
      int i6 = b + i5;
      i2 = a.indexOf('"', i6);
      i1 = i2;
      if (i2 != -1)
      {
        String str;
        if (g)
        {
          str = a.substring(i6, i2);
        }
        else
        {
          i2 -= i6;
          str = new String(read(b + i5, i2), 0, i2);
        }
        i2 = i1;
        localObject = str;
        if (str.indexOf('\\') != -1)
        {
          i2 = 0;
          for (;;)
          {
            int i3 = i1 - 1;
            int i4 = 0;
            while ((i3 >= 0) && (a.charAt(i3) == '\\'))
            {
              i4 += 1;
              i3 -= 1;
              i2 = 1;
            }
            if (i4 % 2 == 0)
            {
              i3 = i1 - i6;
              char[] arrayOfChar = read(b + i5, i3);
              if (i2 != 0)
              {
                localObject = parse(arrayOfChar, i3);
                i2 = i1;
                break;
              }
              str = new String(arrayOfChar, 0, i3);
              i2 = i1;
              localObject = str;
              if (str.indexOf('\\') == -1) {
                break;
              }
              localObject = parse(arrayOfChar, i3);
              i2 = i1;
              break;
            }
            i1 = a.indexOf('"', i1 + 1);
          }
        }
        i2 += 1;
        i1 = size;
        char c1 = '\032';
        if (i2 >= i1) {
          i1 = 26;
        } else {
          i1 = a.charAt(i2);
        }
        if (i1 == 44)
        {
          b = i2;
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
          n = 3;
          i = 16;
          return localObject;
        }
        if (i1 == 125)
        {
          i2 += 1;
          if (i2 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i2);
          }
          if (i1 == 44)
          {
            i = 16;
            b = i2;
            next();
          }
          else if (i1 == 93)
          {
            i = 15;
            b = i2;
            next();
          }
          else if (i1 == 125)
          {
            i = 13;
            b = i2;
            next();
          }
          else
          {
            if (i1 != 26) {
              break label604;
            }
            i = 20;
            b = i2;
            c = '\032';
          }
          n = 4;
          return localObject;
          label604:
          n = -1;
          return t;
        }
        n = -1;
        return t;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("unclosed str, ");
      ((StringBuilder)localObject).append(e());
      throw new JSONException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("unclosed str, ");
    ((StringBuilder)localObject).append(e());
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public final String getValue()
  {
    if (z) {
      return parse(s, d);
    }
    return toString(r + 1, d);
  }
  
  public final BigDecimal init()
  {
    int i1 = r;
    int i2 = d;
    int i3 = a.charAt(i1 + i2 - 1);
    i2 = d;
    if ((i3 != 76) && (i3 != 83) && (i3 != 66) && (i3 != 70))
    {
      i1 = i2;
      if (i3 != 68) {}
    }
    else
    {
      i1 = i2 - 1;
    }
    i2 = r;
    char[] arrayOfChar = s;
    if (i1 < arrayOfChar.length)
    {
      a.getChars(i2, i2 + i1, arrayOfChar, 0);
      return new BigDecimal(s, 0, i1);
    }
    arrayOfChar = new char[i1];
    a.getChars(i2, i1 + i2, arrayOfChar, 0);
    return new BigDecimal(arrayOfChar);
  }
  
  public final float[][] init(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 = i3 + i1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 91)
    {
      n = -1;
      return null;
    }
    i1 = b;
    i3 = i2 + 1;
    i1 += i2;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    Object localObject2 = new float[16][];
    int i6 = 0;
    for (;;)
    {
      if (i1 == 91)
      {
        i1 = b;
        i2 = i3 + 1;
        i1 += i3;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        Object localObject3 = new float[16];
        int i7 = 0;
        for (;;)
        {
          int i12 = b + i2 - 1;
          int i8;
          if (i1 == 45) {
            i8 = 1;
          } else {
            i8 = 0;
          }
          if (i8 != 0)
          {
            i1 = b;
            i3 = i2 + 1;
            i1 += i2;
            if (i1 >= size)
            {
              i1 = 26;
              i2 = i3;
            }
            else
            {
              i1 = a.charAt(i1);
              i2 = i3;
            }
          }
          if ((i1 < 48) || (i1 > 57)) {
            break label1539;
          }
          i1 -= 48;
          int i4;
          for (i3 = i2;; i3 = i2)
          {
            i4 = b;
            i2 = i3 + 1;
            i3 = i4 + i3;
            if (i3 >= size) {
              i4 = 26;
            } else {
              i4 = a.charAt(i3);
            }
            if ((i4 < 48) || (i4 > 57)) {
              break;
            }
            i1 = i1 * 10 + (i4 - 48);
          }
          if (i4 == 46)
          {
            i4 = b;
            i3 = i2 + 1;
            i2 = i4 + i2;
            if (i2 >= size) {
              i2 = 26;
            } else {
              i2 = a.charAt(i2);
            }
            if ((i2 >= 48) && (i2 <= 57))
            {
              i4 = i1 * 10 + (i2 - 48);
              i1 = 10;
              i2 = i3;
              i3 = i4;
              for (;;)
              {
                i4 = b;
                int i11 = i2 + 1;
                i2 = i4 + i2;
                if (i2 >= size) {
                  i5 = 26;
                } else {
                  i5 = a.charAt(i2);
                }
                i4 = i5;
                i2 = i11;
                i10 = i3;
                i9 = i1;
                if (i5 < 48) {
                  break;
                }
                i4 = i5;
                i2 = i11;
                i10 = i3;
                i9 = i1;
                if (i5 > 57) {
                  break;
                }
                i3 = i3 * 10 + (i5 - 48);
                i1 *= 10;
                i2 = i11;
              }
            }
            n = -1;
            return (float[][])null;
          }
          int i9 = 1;
          int i10 = i1;
          if ((i4 != 101) && (i4 != 69)) {
            i5 = 0;
          } else {
            i5 = 1;
          }
          i3 = i2;
          if (i5 != 0)
          {
            i1 = b;
            i3 = i2 + 1;
            i1 += i2;
            if (i1 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i1);
            }
            if ((i1 != 43) && (i1 != 45))
            {
              i2 = i3;
            }
            else
            {
              i1 = b;
              i2 = i3 + 1;
              i1 += i3;
              if (i1 >= size) {
                i1 = 26;
              } else {
                i1 = a.charAt(i1);
              }
            }
            for (;;)
            {
              i4 = i1;
              i3 = i2;
              if (i1 < 48) {
                break;
              }
              i4 = i1;
              i3 = i2;
              if (i1 > 57) {
                break;
              }
              i1 = b + i2;
              if (i1 >= size) {
                i1 = 26;
              } else {
                i1 = a.charAt(i1);
              }
              i2 += 1;
            }
          }
          i1 = b + i3 - i12 - 1;
          float f1;
          if ((i5 == 0) && (i1 < 10))
          {
            float f2 = i10 / i9;
            f1 = f2;
            if (i8 != 0) {
              f1 = -f2;
            }
          }
          else
          {
            f1 = Float.parseFloat(toString(i12, i1));
          }
          Object localObject1 = localObject3;
          if (i7 >= localObject3.length)
          {
            localObject1 = new float[localObject3.length * 3 / 2];
            System.arraycopy(localObject3, 0, localObject1, 0, i7);
          }
          int i5 = i7 + 1;
          localObject1[i7] = f1;
          if (i4 == 44)
          {
            i1 = b + i3;
            if (i1 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i1);
            }
            i2 = i3 + 1;
          }
          else
          {
            i1 = i4;
            i2 = i3;
            if (i4 == 93)
            {
              i1 = b;
              i4 = i3 + 1;
              i1 += i3;
              if (i1 >= size) {
                i2 = 26;
              } else {
                i2 = a.charAt(i1);
              }
              localObject3 = localObject1;
              if (i5 != localObject1.length)
              {
                localObject3 = new float[i5];
                System.arraycopy(localObject1, 0, localObject3, 0, i5);
              }
              localObject1 = localObject2;
              if (i6 >= localObject2.length)
              {
                localObject1 = new float[localObject2.length * 3 / 2][];
                System.arraycopy(localObject3, 0, localObject1, 0, i5);
              }
              i5 = i6 + 1;
              localObject1[i6] = localObject3;
              if (i2 == 44)
              {
                i1 = b + i4;
                if (i1 >= size) {
                  i1 = 26;
                } else {
                  i1 = a.charAt(i1);
                }
                i3 = i4 + 1;
              }
              else
              {
                i3 = i4;
                i1 = i2;
                if (i2 == 93)
                {
                  i1 = b;
                  i2 = i4 + 1;
                  i1 += i4;
                  if (i1 >= size) {
                    i1 = 26;
                  } else {
                    i1 = a.charAt(i1);
                  }
                  if (i5 != localObject1.length)
                  {
                    localObject2 = new float[i5][];
                    System.arraycopy(localObject1, 0, localObject2, 0, i5);
                    localObject1 = localObject2;
                  }
                  if (i1 == 44)
                  {
                    b += i2 - 1;
                    next();
                    n = 3;
                    i = 16;
                    return localObject1;
                  }
                  if (i1 == 125)
                  {
                    i3 = b;
                    i1 = i2 + 1;
                    i2 = get(i3 + i2);
                    if (i2 == 44)
                    {
                      i = 16;
                      b += i1 - 1;
                      next();
                    }
                    else if (i2 == 93)
                    {
                      i = 15;
                      b += i1 - 1;
                      next();
                    }
                    else if (i2 == 125)
                    {
                      i = 13;
                      b += i1 - 1;
                      next();
                    }
                    else
                    {
                      if (i2 != 26) {
                        break label1503;
                      }
                      b += i1 - 1;
                      i = 20;
                      c = '\032';
                    }
                    n = 4;
                    return localObject1;
                    label1503:
                    n = -1;
                    return null;
                  }
                  n = -1;
                  return null;
                }
              }
              i6 = i5;
              localObject2 = localObject1;
              break;
            }
          }
          i7 = i5;
          localObject3 = localObject1;
        }
        label1539:
        n = -1;
        return (float[][])null;
      }
    }
  }
  
  public final long load()
    throws NumberFormatException
  {
    int i1 = r;
    int i4 = d + i1;
    long l2;
    int i2;
    if (get(i1) == '-')
    {
      l2 = Long.MIN_VALUE;
      i1 += 1;
      i2 = 1;
    }
    else
    {
      l2 = -9223372036854775807L;
      i2 = 0;
    }
    long l1;
    if (i1 < i4)
    {
      l1 = -(get(i1) - '0');
      i1 += 1;
    }
    else
    {
      l1 = 0L;
    }
    int i3;
    for (;;)
    {
      i3 = i1;
      if (i1 >= i4) {
        break label199;
      }
      i3 = i1 + 1;
      if (i1 >= size) {
        i1 = 26;
      } else {
        i1 = a.charAt(i1);
      }
      if ((i1 == 76) || (i1 == 83) || (i1 == 66)) {
        break label199;
      }
      if (l1 < -922337203685477580L) {
        break label187;
      }
      l1 *= 10L;
      long l3 = i1 - 48;
      if (l1 < l2 + l3) {
        break;
      }
      l1 -= l3;
      i1 = i3;
    }
    throw new NumberFormatException(format());
    label187:
    throw new NumberFormatException(format());
    label199:
    if (i2 != 0)
    {
      if (i3 > r + 1) {
        return l1;
      }
      throw new NumberFormatException(format());
    }
    return -l1;
  }
  
  public final float[] load(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 = i3 + i1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 91)
    {
      n = -1;
      return null;
    }
    i3 = b;
    i1 = i2 + 1;
    i2 = i3 + i2;
    if (i2 >= size) {
      i2 = 26;
    } else {
      i2 = a.charAt(i2);
    }
    Object localObject2 = new float[16];
    int i6 = 0;
    for (;;)
    {
      int i11 = b + i1 - 1;
      int i7;
      if (i2 == 45) {
        i7 = 1;
      } else {
        i7 = 0;
      }
      if (i7 != 0)
      {
        i2 = b;
        i3 = i1 + 1;
        i1 = i2 + i1;
        if (i1 >= size)
        {
          i2 = 26;
          i1 = i3;
        }
        else
        {
          i2 = a.charAt(i1);
          i1 = i3;
        }
      }
      if ((i2 < 48) || (i2 > 57)) {
        break;
      }
      i3 = i2 - 48;
      i2 = i1;
      i1 = i3;
      int i5;
      for (;;)
      {
        i3 = b;
        i4 = i2 + 1;
        i2 = i3 + i2;
        if (i2 >= size) {
          i5 = 26;
        } else {
          i5 = a.charAt(i2);
        }
        if ((i5 < 48) || (i5 > 57)) {
          break;
        }
        i1 = i1 * 10 + (i5 - 48);
        i2 = i4;
      }
      if (i5 == 46) {
        i2 = 1;
      } else {
        i2 = 0;
      }
      int i10;
      if (i2 != 0)
      {
        i2 = b;
        i3 = i4 + 1;
        i2 += i4;
        if (i2 >= size) {
          i2 = 26;
        } else {
          i2 = a.charAt(i2);
        }
        if ((i2 >= 48) && (i2 <= 57))
        {
          i2 = i1 * 10 + (i2 - 48);
          i1 = 10;
          for (;;)
          {
            i4 = b;
            i10 = i3 + 1;
            i3 = i4 + i3;
            if (i3 >= size) {
              i3 = 26;
            } else {
              i3 = a.charAt(i3);
            }
            i4 = i10;
            i5 = i3;
            i9 = i2;
            i8 = i1;
            if (i3 < 48) {
              break;
            }
            i4 = i10;
            i5 = i3;
            i9 = i2;
            i8 = i1;
            if (i3 > 57) {
              break;
            }
            i2 = i2 * 10 + (i3 - 48);
            i1 *= 10;
            i3 = i10;
          }
        }
        n = -1;
        return null;
      }
      int i8 = 1;
      int i9 = i1;
      if ((i5 != 101) && (i5 != 69)) {
        i10 = 0;
      } else {
        i10 = 1;
      }
      i3 = i4;
      if (i10 != 0)
      {
        i1 = b;
        i2 = i4 + 1;
        i1 += i4;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        if ((i1 != 43) && (i1 != 45)) {
          break label718;
        }
        i1 = b;
        i3 = i2 + 1;
        i1 += i2;
        if (i1 >= size)
        {
          i1 = 26;
          i2 = i3;
        }
        else
        {
          i1 = a.charAt(i1);
          i2 = i3;
        }
        for (;;)
        {
          label718:
          i3 = i2;
          i5 = i1;
          if (i1 < 48) {
            break;
          }
          i3 = i2;
          i5 = i1;
          if (i1 > 57) {
            break;
          }
          i1 = b + i2;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          i2 += 1;
        }
      }
      i1 = b + i3 - i11 - 1;
      float f1;
      if ((i10 == 0) && (i1 < 10))
      {
        float f2 = i9 / i8;
        f1 = f2;
        if (i7 != 0) {
          f1 = -f2;
        }
      }
      else
      {
        f1 = Float.parseFloat(toString(i11, i1));
      }
      Object localObject1 = localObject2;
      if (i6 >= localObject2.length)
      {
        localObject1 = new float[localObject2.length * 3 / 2];
        System.arraycopy(localObject2, 0, localObject1, 0, i6);
      }
      int i4 = i6 + 1;
      localObject1[i6] = f1;
      if (i5 == 44)
      {
        i1 = b + i3;
        if (i1 >= size) {
          i2 = 26;
        } else {
          i2 = a.charAt(i1);
        }
        i1 = i3 + 1;
      }
      else
      {
        i1 = i3;
        i2 = i5;
        if (i5 == 93)
        {
          i1 = b;
          i2 = i3 + 1;
          i1 += i3;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          localObject2 = localObject1;
          if (i4 != localObject1.length)
          {
            localObject2 = new float[i4];
            System.arraycopy(localObject1, 0, localObject2, 0, i4);
          }
          if (i1 == 44)
          {
            b += i2 - 1;
            next();
            n = 3;
            i = 16;
            return localObject2;
          }
          if (i1 == 125)
          {
            i1 = b;
            i3 = i2 + 1;
            i1 += i2;
            if (i1 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i1);
            }
            if (i1 == 44)
            {
              i = 16;
              b += i3 - 1;
              next();
            }
            else if (i1 == 93)
            {
              i = 15;
              b += i3 - 1;
              next();
            }
            else if (i1 == 125)
            {
              i = 13;
              b += i3 - 1;
              next();
            }
            else
            {
              if (i1 != 26) {
                break label1277;
              }
              b += i3 - 1;
              i = 20;
              c = '\032';
            }
            n = 4;
            return localObject2;
            label1277:
            n = -1;
            return null;
          }
          n = -1;
          return null;
        }
      }
      i6 = i4;
      localObject2 = localObject1;
    }
    n = -1;
    return null;
  }
  
  public char next()
  {
    int i1 = b + 1;
    b = i1;
    char c1;
    if (i1 >= size) {
      c1 = '\032';
    } else {
      c1 = a.charAt(i1);
    }
    c = c1;
    return c1;
  }
  
  public final void nextToken()
  {
    for (;;)
    {
      int i1 = c;
      if ((i1 <= 32) && ((i1 == 32) || (i1 == 10) || (i1 == 13) || (i1 == 9) || (i1 == 12) || (i1 == 8))) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      if (i1 == 0)
      {
        char c1 = c;
        if ((c1 != '_') && (!Character.isLetter(c1)))
        {
          read();
          return;
        }
        execute();
        return;
      }
      next();
    }
  }
  
  public final Number parse()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a78 = a77\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public boolean parse(boolean paramBoolean, int paramInt)
  {
    int i20;
    int i21;
    int i22;
    int i24;
    if ((!paramBoolean) && (paramInt > 13))
    {
      i20 = get(b);
      i21 = get(b + 1);
      i22 = get(b + 2);
      i23 = get(b + 3);
      i24 = get(b + 4);
      int i25 = get(b + 5);
      int i26 = get(b + paramInt - 1);
      int i27 = get(b + paramInt - 2);
      if ((i20 == 47) && (i21 == 68) && (i22 == 97) && (i23 == 116) && (i24 == 101) && (i25 == 40) && (i26 == 47) && (i27 == 41))
      {
        i20 = 6;
        for (i21 = -1; i20 < paramInt; i21 = i22)
        {
          i23 = get(b + i20);
          if (i23 == 43)
          {
            i22 = i20;
          }
          else
          {
            if (i23 < 48) {
              break;
            }
            i22 = i21;
            if (i23 > 57) {
              break;
            }
          }
          i20 += 1;
        }
        if (i21 == -1) {
          return false;
        }
        paramInt = b + 6;
        long l1 = Long.parseLong(toString(paramInt, i21 - paramInt));
        v = Calendar.getInstance(m, l);
        v.setTimeInMillis(l1);
        i = 5;
        return true;
      }
    }
    if ((paramInt != 8) && (paramInt != 14))
    {
      if (paramInt == 16)
      {
        i20 = get(b + 10);
        if ((i20 == 84) || (i20 == 32)) {
          break label2291;
        }
      }
      if ((paramInt != 17) || (get(b + 6) == '-'))
      {
        if (paramInt < 9) {
          return false;
        }
        i4 = get(b);
        int i1 = get(b + 1);
        i5 = get(b + 2);
        i3 = get(b + 3);
        int i19 = get(b + 4);
        i10 = get(b + 5);
        i13 = i10;
        int i11 = get(b + 6);
        int i18 = i11;
        int i8 = get(b + 7);
        int i17 = i8;
        int i6 = get(b + 8);
        int i16 = i6;
        int i14 = get(b + 9);
        int i15 = i14;
        if (((i19 == 45) && (i8 == 45)) || ((i19 == 47) && (i8 == 47)))
        {
          i8 = i1;
          i10 = i11;
          i20 = 10;
          i1 = i4;
          i16 = i5;
          i15 = i3;
          i11 = i13;
          i3 = i8;
          i4 = i10;
          i5 = i6;
          i6 = i16;
          i10 = i14;
          i8 = i15;
        }
        else if ((i19 == 45) && (i11 == 45))
        {
          if (i6 == 32)
          {
            i6 = i5;
            i13 = i3;
            i11 = 48;
            i5 = 48;
            i20 = 8;
            i3 = i1;
            i1 = i4;
            i4 = i10;
            i10 = i8;
            i8 = i13;
          }
          else
          {
            i13 = i3;
            i14 = i10;
            i10 = i6;
            i11 = 48;
            i20 = 9;
            i3 = i1;
            i6 = i5;
            i1 = i4;
            i4 = i14;
            i5 = i8;
            i8 = i13;
          }
        }
        else if (((i5 == 46) && (i10 == 46)) || ((i5 == 45) && (i10 == 45)))
        {
          i5 = i4;
          i10 = i1;
          i20 = 10;
          i11 = i3;
          i1 = i18;
          i3 = i17;
          i4 = i19;
          i6 = i16;
          i8 = i15;
        }
        else
        {
          if ((i19 != 24180) && (i19 != 45380)) {
            return false;
          }
          if ((i8 != 26376) && (i8 != 50900))
          {
            if ((i11 != 26376) && (i11 != 50900)) {
              return false;
            }
            if ((i6 != 26085) && (i6 != 51068))
            {
              if ((i14 != 26085) && (i14 != 51068)) {
                return false;
              }
              i13 = i3;
              i14 = i10;
              i10 = i6;
              i11 = 48;
              i20 = 10;
              i3 = i1;
              i6 = i5;
              i1 = i4;
              i4 = i14;
              i5 = i8;
              i8 = i13;
            }
            else
            {
              i6 = i5;
              i13 = i3;
              i11 = 48;
              i5 = 48;
              i20 = 10;
              i3 = i1;
              i1 = i4;
              i4 = i10;
              i10 = i8;
              i8 = i13;
            }
          }
          else if ((i14 != 26085) && (i14 != 51068))
          {
            if ((get(b + 10) != '?') && (get(b + 10) != 51068)) {
              return false;
            }
            i8 = i1;
            i10 = i11;
            i20 = 11;
            i1 = i4;
            i16 = i5;
            i15 = i3;
            i11 = i13;
            i3 = i8;
            i4 = i10;
            i5 = i6;
            i6 = i16;
            i10 = i14;
            i8 = i15;
          }
          else
          {
            i15 = 48;
            i20 = 10;
            i14 = i4;
            i8 = i3;
            i10 = i6;
            i6 = i5;
            i5 = i15;
            i4 = i11;
            i3 = i1;
            i1 = i14;
            i11 = i13;
          }
        }
        if (!load(i1, i3, i6, i8, i11, i4, i5, i10)) {
          return false;
        }
        add(i1, i3, i6, i8, i11, i4, i5, i10);
        i1 = get(b + i20);
        if ((i1 != 84) && ((i1 != 32) || (paramBoolean)))
        {
          if ((i1 != 34) && (i1 != 26) && (i1 != 26085) && (i1 != 51068))
          {
            if ((i1 != 43) && (i1 != 45)) {
              return false;
            }
            if ((size == i20 + 6) && (get(b + i20 + 3) == ':'))
            {
              if (get(b + i20 + 4) != '0') {
                break label3019;
              }
              if (get(b + i20 + 5) != '0') {
                return false;
              }
              add('0', '0', '0', '0', '0', '0');
              v.set(14, 0);
              format(i1, get(b + i20 + 1), get(b + i20 + 2));
              return true;
            }
            return false;
          }
          v.set(11, 0);
          v.set(12, 0);
          v.set(13, 0);
          v.set(14, 0);
          paramInt = b + i20;
          b = paramInt;
          c = get(paramInt);
          i = 5;
          return true;
        }
        i22 = i20 + 9;
        if (paramInt < i22) {
          return false;
        }
        if (get(b + i20 + 3) != ':') {
          return false;
        }
        if (get(b + i20 + 6) != ':') {
          return false;
        }
        i2 = get(b + i20 + 1);
        i3 = get(b + i20 + 2);
        i4 = get(b + i20 + 4);
        i5 = get(b + i20 + 5);
        i7 = get(b + i20 + 7);
        i9 = get(b + i20 + 8);
        if (!load(i2, i3, i4, i5, i7, i9)) {
          return false;
        }
        add(i2, i3, i4, i5, i7, i9);
        i21 = get(b + i20 + 9);
        if (i21 == 46)
        {
          i21 = i20 + 11;
          if (paramInt < i21) {
            return false;
          }
          i22 = get(b + i20 + 10);
          if (i22 >= 48)
          {
            if (i22 > 57) {
              return false;
            }
            i22 -= 48;
            if (paramInt > i21)
            {
              paramInt = get(b + i20 + 11);
              if ((paramInt >= 48) && (paramInt <= 57))
              {
                paramInt = i22 * 10 + (paramInt - 48);
                i21 = 2;
                break label1748;
              }
            }
            i21 = 1;
            paramInt = i22;
            label1748:
            i23 = paramInt;
            i22 = i21;
            if (i21 == 2)
            {
              i24 = get(b + i20 + 12);
              i23 = paramInt;
              i22 = i21;
              if (i24 >= 48)
              {
                i23 = paramInt;
                i22 = i21;
                if (i24 <= 57)
                {
                  i23 = paramInt * 10 + (i24 - 48);
                  i22 = 3;
                }
              }
            }
            v.set(14, i23);
            i2 = get(b + i20 + 10 + i22);
            if ((i2 != 43) && (i2 != 45))
            {
              if (i2 == 90)
              {
                if (v.getTimeZone().getRawOffset() != 0)
                {
                  localObject = TimeZone.getAvailableIDs(0);
                  if (localObject.length > 0)
                  {
                    localObject = TimeZone.getTimeZone(localObject[0]);
                    v.setTimeZone((TimeZone)localObject);
                  }
                }
                paramInt = 1;
              }
              else
              {
                paramInt = 0;
              }
            }
            else
            {
              i3 = get(b + i20 + 10 + i22 + 1);
              if (i3 < 48) {
                break label2200;
              }
              if (i3 > 49) {
                return false;
              }
              i4 = get(b + i20 + 10 + i22 + 2);
              if (i4 < 48) {
                break label2200;
              }
              if (i4 > 57) {
                return false;
              }
              paramInt = get(b + i20 + 10 + i22 + 3);
              if (paramInt == 58)
              {
                if (get(b + i20 + 10 + i22 + 4) != '0') {
                  return false;
                }
                if (get(b + i20 + 10 + i22 + 5) != '0') {
                  return false;
                }
                paramInt = 6;
              }
              else if (paramInt == 48)
              {
                if (get(b + i20 + 10 + i22 + 4) != '0') {
                  return false;
                }
                paramInt = 5;
              }
              else
              {
                paramInt = 3;
              }
              format(i2, i3, i4);
            }
            i21 = b;
            paramInt = i20 + 10 + i22 + paramInt;
            i20 = get(i21 + paramInt);
            if ((i20 != 26) && (i20 != 34)) {
              return false;
            }
            paramInt = b + paramInt;
            b = paramInt;
            c = get(paramInt);
            i = 5;
            return true;
          }
          label2200:
          return false;
        }
        v.set(14, 0);
        paramInt = b + i22;
        b = paramInt;
        c = get(paramInt);
        i = 5;
        if ((i21 != 90) || (v.getTimeZone().getRawOffset() == 0)) {
          break label3021;
        }
        Object localObject = TimeZone.getAvailableIDs(0);
        if (localObject.length <= 0) {
          break label3021;
        }
        localObject = TimeZone.getTimeZone(localObject[0]);
        v.setTimeZone((TimeZone)localObject);
        return true;
      }
    }
    label2291:
    int i23 = 0;
    if (paramBoolean) {
      return false;
    }
    int i9 = get(b);
    int i10 = get(b + 1);
    int i12 = get(b + 2);
    int i13 = get(b + 3);
    int i7 = get(b + 4);
    int i4 = get(b + 5);
    int i3 = get(b + 6);
    int i5 = get(b + 7);
    int i2 = get(b + 8);
    if ((i7 == 45) && (i5 == 45)) {
      i21 = 1;
    } else {
      i21 = 0;
    }
    if ((i21 != 0) && (paramInt == 16)) {
      i20 = 1;
    } else {
      i20 = 0;
    }
    if ((i21 != 0) && (paramInt == 17)) {
      i21 = 1;
    } else {
      i21 = 0;
    }
    if ((i21 == 0) && (i20 == 0)) {
      break label2511;
    }
    i5 = get(b + 9);
    i7 = i4;
    i4 = i3;
    i3 = i2;
    label2511:
    if (!load(i9, i10, i12, i13, i7, i4, i3, i5)) {
      return false;
    }
    add(i9, i10, i12, i13, i7, i4, i3, i5);
    if (paramInt != 8)
    {
      i10 = get(b + 9);
      i12 = get(b + 10);
      i3 = i12;
      i7 = get(b + 11);
      i4 = i7;
      i9 = get(b + 12);
      i5 = i9;
      i13 = get(b + 13);
      if (((i21 != 0) && (i12 == 84) && (i13 == 58) && (get(b + 16) == 'Z')) || ((i20 != 0) && ((i12 == 32) || (i12 == 84)) && (i13 == 58)))
      {
        i3 = get(b + 14);
        i10 = get(b + 15);
        i7 = 48;
        i5 = 48;
        i2 = i4;
        i4 = i9;
        i9 = i10;
      }
      else
      {
        i4 = i13;
        i9 = i7;
        i7 = i4;
        i4 = i10;
      }
      if (!load(i2, i4, i3, i9, i5, i7)) {
        return false;
      }
      if ((paramInt == 17) && (i21 == 0))
      {
        paramInt = get(b + 14);
        i20 = get(b + 15);
        i21 = get(b + 16);
        if (paramInt >= 48)
        {
          if (paramInt > 57) {
            return false;
          }
          if (i20 >= 48)
          {
            if (i20 > 57) {
              return false;
            }
            if (i21 >= 48)
            {
              if (i21 > 57) {
                return false;
              }
              paramInt = (paramInt - 48) * 100 + (i20 - 48) * 10 + (i21 - 48);
              break label2907;
            }
          }
        }
        return false;
      }
      else
      {
        paramInt = 0;
      }
      label2907:
      i20 = i4 - 48 + (i2 - 48) * 10;
      i21 = (i3 - 48) * 10 + (i9 - 48);
      i22 = (i5 - 48) * 10 + (i7 - 48);
    }
    else
    {
      i21 = 0;
      i22 = 0;
      paramInt = 0;
      i20 = i23;
    }
    v.set(11, i20);
    v.set(12, i21);
    v.set(13, i22);
    v.set(14, paramInt);
    i = 5;
    return true;
    label3019:
    return false;
    label3021:
    return true;
  }
  
  public final double[] parse(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 = i3 + i1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 91)
    {
      n = -1;
      return null;
    }
    i3 = b;
    i1 = i2 + 1;
    i2 = i3 + i2;
    if (i2 >= size) {
      i2 = 26;
    } else {
      i2 = a.charAt(i2);
    }
    Object localObject2 = new double[16];
    int i6 = 0;
    for (;;)
    {
      int i11 = b + i1 - 1;
      int i7;
      if (i2 == 45) {
        i7 = 1;
      } else {
        i7 = 0;
      }
      if (i7 != 0)
      {
        i2 = b;
        i3 = i1 + 1;
        i1 = i2 + i1;
        if (i1 >= size)
        {
          i2 = 26;
          i1 = i3;
        }
        else
        {
          i2 = a.charAt(i1);
          i1 = i3;
        }
      }
      if ((i2 < 48) || (i2 > 57)) {
        break;
      }
      i3 = i2 - 48;
      i2 = i1;
      i1 = i3;
      int i5;
      for (;;)
      {
        i3 = b;
        i4 = i2 + 1;
        i2 = i3 + i2;
        if (i2 >= size) {
          i5 = 26;
        } else {
          i5 = a.charAt(i2);
        }
        if ((i5 < 48) || (i5 > 57)) {
          break;
        }
        i1 = i1 * 10 + (i5 - 48);
        i2 = i4;
      }
      if (i5 == 46) {
        i2 = 1;
      } else {
        i2 = 0;
      }
      int i10;
      if (i2 != 0)
      {
        i2 = b;
        i3 = i4 + 1;
        i2 += i4;
        if (i2 >= size) {
          i2 = 26;
        } else {
          i2 = a.charAt(i2);
        }
        if ((i2 >= 48) && (i2 <= 57))
        {
          i2 = i1 * 10 + (i2 - 48);
          i1 = 10;
          for (;;)
          {
            i4 = b;
            i10 = i3 + 1;
            i3 = i4 + i3;
            if (i3 >= size) {
              i3 = 26;
            } else {
              i3 = a.charAt(i3);
            }
            i4 = i10;
            i5 = i3;
            i9 = i2;
            i8 = i1;
            if (i3 < 48) {
              break;
            }
            i4 = i10;
            i5 = i3;
            i9 = i2;
            i8 = i1;
            if (i3 > 57) {
              break;
            }
            i2 = i2 * 10 + (i3 - 48);
            i1 *= 10;
            i3 = i10;
          }
        }
        n = -1;
        return null;
      }
      int i8 = 1;
      int i9 = i1;
      if ((i5 != 101) && (i5 != 69)) {
        i10 = 0;
      } else {
        i10 = 1;
      }
      i3 = i4;
      if (i10 != 0)
      {
        i1 = b;
        i2 = i4 + 1;
        i1 += i4;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        if ((i1 != 43) && (i1 != 45)) {
          break label718;
        }
        i1 = b;
        i3 = i2 + 1;
        i1 += i2;
        if (i1 >= size)
        {
          i1 = 26;
          i2 = i3;
        }
        else
        {
          i1 = a.charAt(i1);
          i2 = i3;
        }
        for (;;)
        {
          label718:
          i3 = i2;
          i5 = i1;
          if (i1 < 48) {
            break;
          }
          i3 = i2;
          i5 = i1;
          if (i1 > 57) {
            break;
          }
          i1 = b + i2;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          i2 += 1;
        }
      }
      i1 = b + i3 - i11 - 1;
      double d1;
      if ((i10 == 0) && (i1 < 10))
      {
        d1 = i9;
        double d2 = i8;
        Double.isNaN(d1);
        Double.isNaN(d2);
        d2 = d1 / d2;
        d1 = d2;
        if (i7 != 0) {
          d1 = -d2;
        }
      }
      else
      {
        d1 = Double.parseDouble(toString(i11, i1));
      }
      Object localObject1 = localObject2;
      if (i6 >= localObject2.length)
      {
        localObject1 = new double[localObject2.length * 3 / 2];
        System.arraycopy(localObject2, 0, localObject1, 0, i6);
      }
      int i4 = i6 + 1;
      localObject1[i6] = d1;
      if (i5 == 44)
      {
        i1 = b + i3;
        if (i1 >= size) {
          i2 = 26;
        } else {
          i2 = a.charAt(i1);
        }
        i1 = i3 + 1;
      }
      else
      {
        i1 = i3;
        i2 = i5;
        if (i5 == 93)
        {
          i1 = b;
          i2 = i3 + 1;
          i1 += i3;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          localObject2 = localObject1;
          if (i4 != localObject1.length)
          {
            localObject2 = new double[i4];
            System.arraycopy(localObject1, 0, localObject2, 0, i4);
          }
          if (i1 == 44)
          {
            b += i2 - 1;
            next();
            n = 3;
            i = 16;
            return localObject2;
          }
          if (i1 == 125)
          {
            i1 = b;
            i3 = i2 + 1;
            i1 += i2;
            if (i1 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i1);
            }
            if (i1 == 44)
            {
              i = 16;
              b += i3 - 1;
              next();
            }
            else if (i1 == 93)
            {
              i = 15;
              b += i3 - 1;
              next();
            }
            else if (i1 == 125)
            {
              i = 13;
              b += i3 - 1;
              next();
            }
            else
            {
              if (i1 != 26) {
                break label1294;
              }
              b += i3 - 1;
              i = 20;
              c = '\032';
            }
            n = 4;
            return localObject2;
            label1294:
            n = -1;
            return null;
          }
          n = -1;
          return null;
        }
      }
      i6 = i4;
      localObject2 = localObject1;
    }
    n = -1;
    return null;
  }
  
  public final long parseLong()
  {
    r = 0;
    long l1;
    int i1;
    if (c == '-')
    {
      l1 = Long.MIN_VALUE;
      r += 1;
      i1 = b + 1;
      b = i1;
      if (i1 < size)
      {
        c = a.charAt(i1);
        i1 = 1;
      }
      else
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("syntax error, ");
        localStringBuilder.append(e());
        throw new JSONException(localStringBuilder.toString());
      }
    }
    else
    {
      l1 = -9223372036854775807L;
      i1 = 0;
    }
    long l2 = 0L;
    for (;;)
    {
      int i2 = c;
      if ((i2 < 48) || (i2 > 57)) {
        break label345;
      }
      if (l2 < -922337203685477580L) {
        break label287;
      }
      l2 *= 10L;
      long l3 = i2 - 48;
      if (l2 < l1 + l3) {
        break;
      }
      l2 -= l3;
      r += 1;
      i2 = b + 1;
      b = i2;
      char c1;
      if (i2 >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(i2);
      }
      c = c1;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("error long value, ");
    localStringBuilder.append(l2);
    localStringBuilder.append(", ");
    localStringBuilder.append(e());
    throw new JSONException(localStringBuilder.toString());
    label287:
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("error long value, ");
    localStringBuilder.append(l2);
    localStringBuilder.append(", ");
    localStringBuilder.append(e());
    throw new JSONException(localStringBuilder.toString());
    label345:
    if (i1 == 0) {
      return -l2;
    }
    return l2;
  }
  
  public final Number read(boolean paramBoolean)
  {
    int i1 = r + d - 1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    Object localObject1;
    if (i1 == 70)
    {
      try
      {
        float f1 = Float.parseFloat(format());
        return Float.valueOf(f1);
      }
      catch (NumberFormatException localNumberFormatException) {}
    }
    else
    {
      if (i1 == 68)
      {
        d1 = Double.parseDouble(format());
        return Double.valueOf(d1);
      }
      if (paramBoolean)
      {
        localObject1 = init();
        return localObject1;
      }
      i1 = r;
      int i2 = d;
      localObject1 = a;
      i2 = ((String)localObject1).charAt(i1 + i2 - 1);
      i1 = d;
      int i4;
      if ((i2 != 76) && (i2 != 83) && (i2 != 66) && (i2 != 70))
      {
        i4 = i1;
        if (i2 != 68) {}
      }
      else
      {
        i4 = i1 - 1;
      }
      i1 = r;
      i2 = s.length;
      int i5 = 0;
      if (i4 < i2)
      {
        localObject1 = a;
        localObject2 = s;
        ((String)localObject1).getChars(i1, i1 + i4, (char[])localObject2, 0);
        localObject1 = s;
      }
      else
      {
        localObject1 = new char[i4];
        localObject2 = a;
        ((String)localObject2).getChars(i1, i1 + i4, (char[])localObject1, 0);
      }
      if ((i4 <= 9) && (!p))
      {
        int i3 = localObject1[0];
        i2 = 2;
        if (i3 == 45)
        {
          i3 = localObject1[1];
          i1 = 1;
        }
        else if (i3 == 43)
        {
          i3 = localObject1[1];
          i1 = 0;
        }
        else
        {
          i1 = 0;
          i2 = 1;
        }
        int i6 = i3 - 48;
        i3 = i2;
        while (i3 < i4)
        {
          i2 = localObject1[i3];
          if (i2 == 46)
          {
            i2 = 1;
          }
          else
          {
            int i7 = i6 * 10 + (i2 - 48);
            i2 = i5;
            i6 = i7;
            if (i5 != 0)
            {
              i2 = i5 * 10;
              i6 = i7;
            }
          }
          i3 += 1;
          i5 = i2;
        }
        d1 = i6;
        double d2 = i5;
        Double.isNaN(d1);
        Double.isNaN(d2);
        d2 = d1 / d2;
        d1 = d2;
        if (i1 != 0) {
          d1 = -d2;
        }
        return Double.valueOf(d1);
      }
      double d1 = Double.parseDouble(new String((char[])localObject1, 0, i4));
      return Double.valueOf(d1);
    }
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(((NumberFormatException)localObject1).getMessage());
    ((StringBuilder)localObject2).append(", ");
    ((StringBuilder)localObject2).append(e());
    throw new JSONException(((StringBuilder)localObject2).toString());
  }
  
  public String read(char paramChar)
  {
    int i4 = b + 1;
    int i2 = a.indexOf(paramChar, i4);
    int i1 = i2;
    if (i2 != -1)
    {
      if (g)
      {
        localObject1 = a.substring(i4, i2);
      }
      else
      {
        i2 -= i4;
        localObject1 = new String(read(b + 1, i2), 0, i2);
      }
      i2 = i1;
      Object localObject2 = localObject1;
      if (((String)localObject1).indexOf('\\') != -1) {
        for (;;)
        {
          i2 = i1 - 1;
          int i3 = 0;
          while ((i2 >= 0) && (a.charAt(i2) == '\\'))
          {
            i3 += 1;
            i2 -= 1;
          }
          if (i3 % 2 == 0)
          {
            paramChar = i1 - i4;
            localObject2 = parse(read(b + 1, paramChar), paramChar);
            i2 = i1;
            break;
          }
          i1 = a.indexOf(paramChar, i1 + 1);
        }
      }
      b = (i2 + 1);
      paramChar = b;
      char c1;
      if (paramChar >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(paramChar);
      }
      c = c1;
      return localObject2;
    }
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("unclosed str, ");
    ((StringBuilder)localObject1).append(e());
    throw new JSONException(((StringBuilder)localObject1).toString());
  }
  
  public final void read()
  {
    int i2 = 0;
    d = 0;
    for (;;)
    {
      j = b;
      int i1 = c;
      if (i1 == 47)
      {
        decode();
      }
      else
      {
        if (i1 == 34)
        {
          write();
          return;
        }
        if ((i1 < 48) || (i1 > 57))
        {
          i1 = c;
          if (i1 != 45) {}
        }
        else
        {
          b();
          return;
        }
        if (i1 == 44)
        {
          next();
          i = 16;
          return;
        }
        char c1 = '\032';
        switch (i1)
        {
        default: 
          int i3 = b;
          int i4 = size;
          if (i3 == i4) {
            break label922;
          }
          if ((i1 != 26) || (i3 + 1 != i4)) {
            break;
          }
          break;
        case 125: 
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
          i = 13;
          return;
        case 123: 
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
          i = 12;
          return;
        case 116: 
          if (a.startsWith("true", b))
          {
            b += 4;
            c = get(b);
            i1 = c;
            if ((i1 == 32) || (i1 == 44) || (i1 == 125) || (i1 == 93) || (i1 == 10) || (i1 == 13) || (i1 == 9) || (i1 == 26) || (i1 == 12) || (i1 == 8) || (i1 == 58))
            {
              i = 6;
              return;
            }
          }
          throw new JSONException("scan true error");
        case 110: 
          if (a.startsWith("null", b))
          {
            b += 4;
            i1 = 8;
          }
          else
          {
            i1 = i2;
            if (a.startsWith("new", b))
            {
              b += 3;
              i1 = 9;
            }
          }
          if (i1 != 0)
          {
            c = get(b);
            i2 = c;
            if ((i2 == 32) || (i2 == 44) || (i2 == 125) || (i2 == 93) || (i2 == 10) || (i2 == 13) || (i2 == 9) || (i2 == 26) || (i2 == 12) || (i2 == 8))
            {
              i = i1;
              return;
            }
          }
          throw new JSONException("scan null/new error");
        case 102: 
          if (a.startsWith("false", b))
          {
            b += 5;
            c = get(b);
            i1 = c;
            if ((i1 == 32) || (i1 == 44) || (i1 == 125) || (i1 == 93) || (i1 == 10) || (i1 == 13) || (i1 == 9) || (i1 == 26) || (i1 == 12) || (i1 == 8) || (i1 == 58))
            {
              i = 7;
              return;
            }
          }
          throw new JSONException("scan false error");
        case 93: 
          next();
          i = 15;
          return;
        case 91: 
          i1 = b + 1;
          b = i1;
          if (i1 < size) {
            c1 = a.charAt(i1);
          }
          c = c1;
          i = 14;
          return;
        case 83: 
        case 84: 
        case 117: 
          execute();
          return;
        case 58: 
          next();
          i = 17;
          return;
        case 41: 
          next();
          i = 11;
          return;
        case 40: 
          next();
          i = 10;
          return;
        case 39: 
          write();
          return;
        case 8: 
        case 9: 
        case 10: 
        case 12: 
        case 13: 
        case 32: 
          next();
          break;
        }
        i1 = 0;
        break label924;
        label922:
        i1 = 1;
        label924:
        if (i1 != 0)
        {
          if (i != 20)
          {
            i = 20;
            i1 = N;
            b = i1;
            j = i1;
            return;
          }
          throw new JSONException("EOF error");
        }
        i1 = c;
        if ((i1 > 31) && (i1 != 127))
        {
          i = 1;
          next();
          return;
        }
        next();
      }
    }
  }
  
  final char[] read(int paramInt1, int paramInt2)
  {
    char[] arrayOfChar = s;
    if (paramInt2 < arrayOfChar.length)
    {
      a.getChars(paramInt1, paramInt2 + paramInt1, arrayOfChar, 0);
      return s;
    }
    arrayOfChar = new char[paramInt2];
    s = arrayOfChar;
    a.getChars(paramInt1, paramInt2 + paramInt1, arrayOfChar, 0);
    return arrayOfChar;
  }
  
  public final int[] read(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i2 = b;
    int i3 = i1 + 1;
    i1 = i2 + i1;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    if (i1 != 91)
    {
      n = -1;
      return null;
    }
    i1 = b;
    i2 = i3 + 1;
    i1 += i3;
    if (i1 >= size) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    Object localObject1 = new int[16];
    int i5;
    if (i1 == 93)
    {
      i1 = b;
      i3 = i2 + 1;
      i1 += i2;
      if (i1 >= size) {
        i1 = 26;
      } else {
        i1 = a.charAt(i1);
      }
      i5 = 0;
      i2 = i3;
    }
    else
    {
      i3 = 0;
    }
    for (Object localObject2 = localObject1;; localObject2 = localObject1)
    {
      int i4;
      int i6;
      if (i1 == 45)
      {
        i1 = b;
        i4 = i2 + 1;
        i1 += i2;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        i6 = 1;
        i2 = i4;
      }
      else
      {
        i6 = 0;
      }
      if (i1 < 48) {
        break;
      }
      if (i1 > 57) {
        break;
      }
      i1 -= 48;
      for (;;)
      {
        i5 = b;
        i4 = i2 + 1;
        i2 = i5 + i2;
        if (i2 >= size) {
          i2 = 26;
        } else {
          i2 = a.charAt(i2);
        }
        if ((i2 < 48) || (i2 > 57)) {
          break;
        }
        i1 = i1 * 10 + (i2 - 48);
        i2 = i4;
      }
      localObject1 = localObject2;
      if (i3 >= localObject2.length)
      {
        localObject1 = new int[localObject2.length * 3 / 2];
        System.arraycopy(localObject2, 0, localObject1, 0, i3);
      }
      i5 = i3 + 1;
      int i7 = i1;
      if (i6 != 0) {
        i7 = -i1;
      }
      localObject1[i3] = i7;
      if (i2 == 44)
      {
        i1 = b + i4;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        i3 = i4 + 1;
      }
      else
      {
        i3 = i4;
        i1 = i2;
        if (i2 == 93)
        {
          i1 = b;
          i2 = i4 + 1;
          i1 += i4;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          localObject2 = localObject1;
          if (i5 != localObject1.length)
          {
            localObject2 = new int[i5];
            System.arraycopy(localObject1, 0, localObject2, 0, i5);
          }
          if (i1 == 44)
          {
            b += i2 - 1;
            next();
            n = 3;
            i = 16;
            return localObject2;
          }
          if (i1 == 125)
          {
            i3 = b;
            i1 = i2 + 1;
            i2 = get(i3 + i2);
            if (i2 == 44)
            {
              i = 16;
              b += i1 - 1;
              next();
            }
            else if (i2 == 93)
            {
              i = 15;
              b += i1 - 1;
              next();
            }
            else if (i2 == 125)
            {
              i = 13;
              b += i1 - 1;
              next();
            }
            else
            {
              if (i2 != 26) {
                break label721;
              }
              b += i1 - 1;
              i = 20;
              c = '\032';
            }
            n = 4;
            return localObject2;
            label721:
            n = -1;
            return null;
          }
          n = -1;
          return null;
        }
      }
      i2 = i3;
      i3 = i5;
    }
    n = -1;
    return null;
  }
  
  public boolean reset()
  {
    boolean bool2 = a.startsWith("false", b);
    boolean bool1 = false;
    int i1 = 1;
    if (bool2)
    {
      i1 = 5;
    }
    else if (a.startsWith("true", b))
    {
      bool1 = true;
      i1 = 4;
    }
    else
    {
      int i2 = c;
      if (i2 == 49) {
        bool1 = true;
      } else {
        if (i2 != 48) {
          break label98;
        }
      }
    }
    b += i1;
    c = get(b);
    return bool1;
    label98:
    n = -1;
    return false;
  }
  
  public Date toString(long paramLong)
  {
    n = 0;
    int i1 = next(paramLong);
    if (i1 == 0) {
      return null;
    }
    int i3 = b;
    int i2 = i1 + 1;
    i1 += i3;
    int i4 = size;
    char c1 = '\032';
    if (i1 >= i4) {
      i1 = 26;
    } else {
      i1 = a.charAt(i1);
    }
    Date localDate;
    if (i1 == 34)
    {
      int i5 = b;
      i1 = i5 + i2;
      i4 = i2 + 1;
      i2 = i5 + i2;
      if (i2 < size) {
        a.charAt(i2);
      }
      i2 = a.indexOf('"', b + i4);
      if (i2 != -1)
      {
        i2 -= i1;
        b = i1;
        if (parse(false, i2))
        {
          localDate = v.getTime();
          i2 = i4 + i2;
          i1 = i2 + 1;
          i2 = get(i2 + i3);
          b = i3;
        }
        else
        {
          b = i3;
          n = -1;
          return null;
        }
      }
      else
      {
        throw new JSONException("unclosed str");
      }
    }
    else
    {
      if ((i1 < 48) || (i1 > 57)) {
        break label819;
      }
      paramLong = i1 - 48;
      for (i1 = i2;; i1 = i2)
      {
        i3 = b;
        i2 = i1 + 1;
        i1 = i3 + i1;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        if ((i1 < 48) || (i1 > 57)) {
          break;
        }
        paramLong = paramLong * 10L + (i1 - 48);
      }
      if (i1 == 46)
      {
        n = -1;
        return null;
      }
      if (i1 == 34)
      {
        i3 = b;
        i1 = i2 + 1;
        i2 = i3 + i2;
        if (i2 >= size) {
          i2 = 26;
        } else {
          i2 = a.charAt(i2);
        }
      }
      else
      {
        i3 = i2;
        i2 = i1;
        i1 = i3;
      }
      if (paramLong < 0L)
      {
        n = -1;
        return null;
      }
      localDate = new Date(paramLong);
    }
    if (i2 == 44)
    {
      b += i1 - 1;
      i1 = b + 1;
      b = i1;
      if (i1 < size) {
        c1 = a.charAt(i1);
      }
      c = c1;
      n = 3;
      i = 16;
      return localDate;
    }
    if (i2 == 125)
    {
      i3 = b;
      i2 = i1 + 1;
      i1 = get(i3 + i1);
      if (i1 == 44)
      {
        i = 16;
        b += i2 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
      else if (i1 == 93)
      {
        i = 15;
        b += i2 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
      else if (i1 == 125)
      {
        i = 13;
        b += i2 - 1;
        i1 = b + 1;
        b = i1;
        if (i1 < size) {
          c1 = a.charAt(i1);
        }
        c = c1;
      }
      else
      {
        if (i1 != 26) {
          break label805;
        }
        i = 20;
        b += i2 - 1;
        c = '\032';
      }
      n = 4;
      return localDate;
      label805:
      n = -1;
      return null;
    }
    n = -1;
    return null;
    label819:
    n = -1;
    return null;
  }
  
  final void update()
  {
    for (;;)
    {
      int i1 = c;
      if (i1 > 47) {
        break;
      }
      if ((i1 != 32) && (i1 != 13) && (i1 != 10) && (i1 != 9) && (i1 != 12) && (i1 != 8))
      {
        if (i1 != 47) {
          break;
        }
        decode();
      }
      else
      {
        next();
      }
    }
  }
  
  public final void write()
  {
    int i8 = c;
    int i3 = b + 1;
    int i2 = a.indexOf(i8, i3);
    int i1 = i2;
    if (i2 != -1)
    {
      i2 -= i3;
      localObject1 = read(b + 1, i2);
      int i5 = 0;
      boolean bool1 = false;
      while ((i2 > 0) && (localObject1[(i2 - 1)] == '\\'))
      {
        i3 = i2 - 2;
        int i4 = 1;
        while ((i3 >= 0) && (localObject1[i3] == '\\'))
        {
          i4 += 1;
          i3 -= 1;
        }
        if (i4 % 2 == 0) {
          break;
        }
        int i6 = a.indexOf(i8, i1 + 1);
        i3 = i6 - i1 + i2;
        Object localObject2 = localObject1;
        if (i3 >= localObject1.length)
        {
          int i7 = localObject1.length * 3 / 2;
          i4 = i7;
          if (i7 < i3) {
            i4 = i3;
          }
          localObject2 = new char[i4];
          System.arraycopy(localObject1, 0, localObject2, 0, localObject1.length);
        }
        a.getChars(i1, i6, (char[])localObject2, i2);
        i1 = i6;
        i2 = i3;
        bool1 = true;
        localObject1 = localObject2;
      }
      boolean bool2 = bool1;
      if (!bool1)
      {
        i3 = i5;
        for (;;)
        {
          bool2 = bool1;
          if (i3 >= i2) {
            break;
          }
          if (localObject1[i3] == '\\') {
            bool1 = true;
          }
          i3 += 1;
        }
      }
      s = ((char[])localObject1);
      d = i2;
      r = b;
      z = bool2;
      b = (i1 + 1);
      i1 = b;
      char c1;
      if (i1 >= size) {
        c1 = '\032';
      } else {
        c1 = a.charAt(i1);
      }
      c = c1;
      i = 4;
      return;
    }
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("unclosed str, ");
    ((StringBuilder)localObject1).append(e());
    throw new JSONException(((StringBuilder)localObject1).toString());
  }
  
  public boolean write(long paramLong)
  {
    int i2 = c;
    int i5 = b + 1;
    int i1 = 1;
    for (;;)
    {
      if ((i2 == 34) || (i2 == 39))
      {
        int i4 = i5;
        long l1 = -3750763034362895579L;
        int i3;
        for (;;)
        {
          i3 = i1;
          if (i4 >= size) {
            break;
          }
          i3 = a.charAt(i4);
          if (i3 == i2)
          {
            i3 = i1 + (i4 - i5 + 1);
            break;
          }
          l1 = 1099511628211L * (i3 ^ l1);
          i4 += 1;
        }
        if (l1 != paramLong)
        {
          n = -2;
          e = l1;
          return false;
        }
        i1 = b;
        i2 = i3 + 1;
        i1 += i3;
        if (i1 >= size) {
          i1 = 26;
        } else {
          i1 = a.charAt(i1);
        }
        for (;;)
        {
          if (i1 == 58)
          {
            i2 = b + i2;
            if (i2 >= size) {
              i1 = 26;
            } else {
              i1 = a.charAt(i2);
            }
            char c1;
            if (i1 == 123)
            {
              b = (i2 + 1);
              i1 = b;
              if (i1 >= size) {
                c1 = '\032';
              } else {
                c1 = a.charAt(i1);
              }
              c = c1;
              i = 12;
              return true;
            }
            if (i1 == 91)
            {
              b = (i2 + 1);
              i1 = b;
              if (i1 >= size) {
                c1 = '\032';
              } else {
                c1 = a.charAt(i1);
              }
              c = c1;
              i = 14;
              return true;
            }
            b = i2;
            i1 = b;
            if (i1 >= size) {
              c1 = '\032';
            } else {
              c1 = a.charAt(i1);
            }
            c = c1;
            read();
            return true;
          }
          if ((i1 > 32) || ((i1 != 32) && (i1 != 10) && (i1 != 13) && (i1 != 9) && (i1 != 12) && (i1 != 8))) {
            break;
          }
          i1 = b + i2;
          if (i1 >= size) {
            i1 = 26;
          } else {
            i1 = a.charAt(i1);
          }
          i2 += 1;
        }
        throw new JSONException("match feild error expect ':'");
      }
      if ((i2 > 32) || ((i2 != 32) && (i2 != 10) && (i2 != 13) && (i2 != 9) && (i2 != 12) && (i2 != 8))) {
        break;
      }
      i2 = b + i1;
      if (i2 >= size) {
        i2 = 26;
      } else {
        i2 = a.charAt(i2);
      }
      i1 += 1;
    }
    e = 0L;
    n = -2;
    return false;
  }
}
