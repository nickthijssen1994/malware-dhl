package com.jd.parser;

import com.jd.JSONException;
import com.jd.PropertyNamingStrategy;
import com.jd.framework.json.anotation.JSONCreator;
import com.jd.framework.json.anotation.JSONField;
import com.jd.framework.json.anotation.JSONType;
import com.jd.serializer.SerializerFeature;
import com.jd.views.Label;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

class d
{
  final Method a;
  final boolean b;
  final Constructor<?> c;
  boolean e;
  public final int f;
  public final String h;
  public final String i;
  final Label[] l;
  final Label[] m;
  final JSONType n;
  public final String[] s;
  final Constructor<?> t;
  final int y;
  
  d(Class paramClass, Constructor paramConstructor1, Constructor paramConstructor2, Method paramMethod, Label[] paramArrayOfLabel1, Label[] paramArrayOfLabel2, JSONType paramJSONType, String[] paramArrayOfString)
  {
    int i2 = 0;
    e = false;
    c = paramConstructor1;
    t = paramConstructor2;
    a = paramMethod;
    m = paramArrayOfLabel1;
    n = paramJSONType;
    if ((paramArrayOfString != null) && (paramArrayOfString.length == paramArrayOfLabel1.length)) {
      s = null;
    } else {
      s = paramArrayOfString;
    }
    int k;
    int j;
    if (paramJSONType != null)
    {
      paramArrayOfString = paramJSONType.typeName();
      paramConstructor2 = paramArrayOfString;
      if (paramArrayOfString.length() <= 0) {
        paramConstructor2 = paramClass.getName();
      }
      h = paramConstructor2;
      paramConstructor2 = paramJSONType.typeKey();
      paramClass = paramConstructor2;
      if (paramConstructor2.length() <= 0) {
        paramClass = null;
      }
      i = paramClass;
      paramClass = paramJSONType.parseFeatures();
      int i3 = paramClass.length;
      k = 0;
      j = 0;
      for (;;)
      {
        i1 = j;
        if (k >= i3) {
          break;
        }
        j |= mask;
        k += 1;
      }
    }
    h = paramClass.getName();
    i = null;
    int i1 = 0;
    f = i1;
    if (paramJSONType != null)
    {
      paramClass = paramJSONType.parseFeatures();
      k = paramClass.length;
      j = 0;
      boolean bool1 = false;
      for (;;)
      {
        bool2 = bool1;
        if (j >= k) {
          break;
        }
        if (paramClass[j] == Feature.SupportArrayToBean) {
          bool1 = true;
        }
        j += 1;
      }
    }
    boolean bool2 = false;
    b = bool2;
    paramConstructor2 = a(paramArrayOfLabel1, paramArrayOfLabel2);
    paramClass = paramConstructor2;
    if (Arrays.equals(paramArrayOfLabel1, paramConstructor2)) {
      paramClass = paramArrayOfLabel1;
    }
    l = paramClass;
    if (paramConstructor1 != null)
    {
      j = paramConstructor1.getParameterTypes().length;
    }
    else
    {
      j = i2;
      if (paramMethod != null) {
        j = paramMethod.getParameterTypes().length;
      }
    }
    y = j;
  }
  
  static boolean a(List paramList, Label paramLabel, boolean paramBoolean)
  {
    if (!paramBoolean)
    {
      int k = paramList.size();
      int j = 0;
      while (j < k)
      {
        Label localLabel = (Label)paramList.get(j);
        if (a.equals(a)) {
          if (f) {
            if (f) {
              break label84;
            }
          } else {
            return false;
          }
        }
        j += 1;
      }
    }
    paramList.add(paramLabel);
    return true;
    label84:
    return false;
  }
  
  private Label[] a(Label[] paramArrayOfLabel1, Label[] paramArrayOfLabel2)
  {
    Object localObject = n;
    if (localObject == null) {
      return paramArrayOfLabel2;
    }
    localObject = ((JSONType)localObject).orders();
    if ((localObject != null) && (localObject.length != 0))
    {
      int j = 0;
      while (j < localObject.length)
      {
        k = 0;
        while (k < paramArrayOfLabel2.length)
        {
          if (a.equals(localObject[j]))
          {
            k = 1;
            break label87;
          }
          k += 1;
        }
        k = 0;
        label87:
        if (k == 0)
        {
          j = 0;
          break label106;
        }
        j += 1;
      }
      j = 1;
      label106:
      if (j == 0) {
        return paramArrayOfLabel2;
      }
      if (localObject.length == paramArrayOfLabel1.length)
      {
        j = 0;
        while (j < localObject.length)
        {
          if (!a.equals(localObject[j]))
          {
            j = 0;
            break label159;
          }
          j += 1;
        }
        j = 1;
        label159:
        if (j != 0) {
          return paramArrayOfLabel2;
        }
        paramArrayOfLabel1 = new Label[paramArrayOfLabel2.length];
        j = 0;
        while (j < localObject.length)
        {
          k = 0;
          while (k < paramArrayOfLabel2.length)
          {
            if (a.equals(localObject[j]))
            {
              paramArrayOfLabel1[j] = paramArrayOfLabel2[k];
              break;
            }
            k += 1;
          }
          j += 1;
        }
        e = true;
        return paramArrayOfLabel1;
      }
      paramArrayOfLabel1 = new Label[paramArrayOfLabel2.length];
      j = 0;
      while (j < localObject.length)
      {
        k = 0;
        while (k < paramArrayOfLabel2.length)
        {
          if (a.equals(localObject[j]))
          {
            paramArrayOfLabel1[j] = paramArrayOfLabel2[k];
            break;
          }
          k += 1;
        }
        j += 1;
      }
      int k = localObject.length;
      j = 0;
      while (j < paramArrayOfLabel2.length)
      {
        int i1 = 0;
        while ((i1 < paramArrayOfLabel1.length) && (i1 < k))
        {
          if (paramArrayOfLabel1[j].b(paramArrayOfLabel2[i1]))
          {
            i2 = 1;
            break label369;
          }
          i1 += 1;
        }
        int i2 = 0;
        label369:
        i1 = k;
        if (i2 == 0)
        {
          paramArrayOfLabel1[k] = paramArrayOfLabel2[j];
          i1 = k + 1;
        }
        j += 1;
        k = i1;
      }
      e = true;
    }
    return paramArrayOfLabel2;
  }
  
  public static d init(Class paramClass, int paramInt, Type paramType, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, PropertyNamingStrategy paramPropertyNamingStrategy)
  {
    ArrayList localArrayList = new ArrayList();
    HashMap localHashMap = new HashMap();
    Object localObject10 = paramClass.getDeclaredConstructors();
    boolean bool = com.jd.views.StringBuilder.next(paramClass);
    int k = paramInt & 0x400;
    if ((k == 0) && ((localObject10.length == 1) || (!bool))) {}
    try
    {
      localObject1 = paramClass.getDeclaredConstructor(new Class[0]);
    }
    catch (Exception localException)
    {
      Object localObject1;
      int i1;
      int j;
      Object localObject4;
      Object localObject2;
      Object localObject6;
      Object localObject3;
      Object localObject9;
      Object localObject8;
      Object localObject5;
      Object localObject7;
      int i2;
      Object localObject11;
      Object localObject12;
      int i4;
      for (;;) {}
    }
    localObject1 = null;
    if (localObject1 == null) {
      if ((paramClass.isMemberClass()) && ((paramInt & 0x8) == 0))
      {
        i1 = localObject10.length;
        j = 0;
        while (j < i1)
        {
          localObject4 = localObject10[j];
          localObject2 = localObject4.getParameterTypes();
          if ((localObject2.length == 1) && (localObject2[0].equals(paramClass.getDeclaringClass()))) {
            break label167;
          }
          j += 1;
        }
      }
      else {}
    }
    localObject4 = localObject1;
    break label167;
    localObject4 = null;
    label167:
    localObject6 = null;
    if (paramBoolean1)
    {
      localObject3 = null;
      localObject9 = null;
    }
    else
    {
      localObject8 = new ArrayList();
      localObject2 = paramClass;
      localObject1 = null;
      while ((localObject2 != null) && (localObject2 != Object.class))
      {
        localObject5 = ((Class)localObject2).getDeclaredMethods();
        localObject3 = localObject5;
        i1 = localObject5.length;
        j = 0;
        while (j < i1)
        {
          localObject7 = localObject3[j];
          i2 = ((Method)localObject7).getModifiers();
          if ((i2 & 0x8) != 0)
          {
            if (((Method)localObject7).isAnnotationPresent(JSONCreator.class))
            {
              if (localObject1 == null) {
                localObject5 = localObject7;
              } else {
                throw new JSONException("multi-json creator");
              }
            }
            else {
              localObject5 = localObject1;
            }
          }
          else
          {
            localObject5 = localObject1;
            if ((i2 & 0x2) == 0)
            {
              localObject5 = localObject1;
              if ((i2 & 0x100) == 0) {
                if ((i2 & 0x4) != 0)
                {
                  localObject5 = localObject1;
                }
                else
                {
                  ((List)localObject8).add(localObject7);
                  localObject5 = localObject1;
                }
              }
            }
          }
          j += 1;
          localObject1 = localObject5;
        }
        localObject2 = ((Class)localObject2).getSuperclass();
      }
      localObject2 = new Method[((List)localObject8).size()];
      localObject3 = localObject2;
      ((List)localObject8).toArray((Object[])localObject2);
      localObject9 = localObject1;
    }
    localObject8 = paramClass.getDeclaredFields();
    if ((!paramClass.isInterface()) && (k == 0)) {
      j = 0;
    } else {
      j = 1;
    }
    if ((localObject4 != null) && (j == 0))
    {
      localObject2 = null;
      localObject5 = localObject6;
    }
    else
    {
      i1 = localObject10.length;
      k = 0;
      while (k < i1)
      {
        localObject1 = localObject10[k];
        if ((JSONCreator)((Constructor)localObject1).getAnnotation(JSONCreator.class) != null) {
          break label508;
        }
        k += 1;
      }
      localObject1 = null;
      label508:
      if (localObject1 != null)
      {
        com.jd.views.StringBuilder.get(paramClass, (Member)localObject1, paramInt);
        localObject6 = ((Constructor)localObject1).getParameterTypes();
        if (paramBoolean4) {
          localObject2 = ((Constructor)localObject1).getGenericParameterTypes();
        } else {
          localObject2 = localObject6;
        }
        localObject7 = ((Constructor)localObject1).getParameterAnnotations();
        j = 0;
        while (j < localObject6.length)
        {
          localObject5 = localObject7[j];
          i1 = localObject5.length;
          k = 0;
          while (k < i1)
          {
            localObject10 = localObject5[k];
            if ((localObject10 instanceof JSONField))
            {
              localObject5 = (JSONField)localObject10;
              break label624;
            }
            k += 1;
          }
          localObject5 = null;
          label624:
          if (localObject5 != null)
          {
            localObject10 = localObject6[j];
            localObject11 = localObject2[j];
            localObject12 = com.jd.views.StringBuilder.get(paramClass, ((JSONField)localObject5).name(), (Field[])localObject8, localHashMap);
            if (localObject12 != null) {
              com.jd.views.StringBuilder.get(paramClass, (Member)localObject12, paramInt);
            }
            k = ((JSONField)localObject5).ordinal();
            i1 = SerializerFeature.of(((JSONField)localObject5).serialzeFeatures());
            a(localArrayList, new Label(((JSONField)localObject5).name(), paramClass, (Class)localObject10, (Type)localObject11, (Field)localObject12, k, i1), paramBoolean1);
            j += 1;
          }
          else
          {
            throw new JSONException("illegal json creator");
          }
        }
        localObject2 = new Label[localArrayList.size()];
        localArrayList.toArray((Object[])localObject2);
        localObject5 = new Label[localObject2.length];
        System.arraycopy(localObject2, 0, localObject5, 0, localObject2.length);
        Arrays.sort((Object[])localObject5);
        if (paramBoolean2) {
          localObject5 = (JSONType)paramClass.getAnnotation(JSONType.class);
        }
        localObject5 = new String[localObject2.length];
        j = 0;
        while (j < localObject2.length)
        {
          localObject5[j] = a;
          j += 1;
        }
        localObject2 = localObject1;
      }
      else
      {
        localObject2 = localObject1;
        if (localObject9 != null)
        {
          com.jd.views.StringBuilder.get(paramClass, localObject9, paramInt);
          localObject1 = localObject9.getParameterTypes();
          localObject5 = localObject6;
          if (localObject1.length > 0)
          {
            if (paramBoolean4) {
              paramType = localObject9.getGenericParameterTypes();
            } else {
              paramType = (Type)localObject1;
            }
            localObject2 = localObject9.getParameterAnnotations();
            paramInt = 0;
            while (paramInt < localObject1.length)
            {
              paramPropertyNamingStrategy = localObject2[paramInt];
              k = paramPropertyNamingStrategy.length;
              j = 0;
              while (j < k)
              {
                localObject3 = paramPropertyNamingStrategy[j];
                if ((localObject3 instanceof JSONField))
                {
                  paramPropertyNamingStrategy = (JSONField)localObject3;
                  break label984;
                }
                j += 1;
              }
              paramPropertyNamingStrategy = null;
              label984:
              if (paramPropertyNamingStrategy != null)
              {
                localObject3 = localObject1[paramInt];
                localObject4 = paramType[paramInt];
                localObject5 = com.jd.views.StringBuilder.get(paramClass, paramPropertyNamingStrategy.name(), (Field[])localObject8, localHashMap);
                j = paramPropertyNamingStrategy.ordinal();
                k = SerializerFeature.of(paramPropertyNamingStrategy.serialzeFeatures());
                a(localArrayList, new Label(paramPropertyNamingStrategy.name(), paramClass, localObject3, (Type)localObject4, (Field)localObject5, j, k), paramBoolean1);
                paramInt += 1;
              }
              else
              {
                throw new JSONException("illegal json creator");
              }
            }
            localObject1 = new Label[localArrayList.size()];
            localArrayList.toArray((Object[])localObject1);
            paramPropertyNamingStrategy = new Label[localObject1.length];
            System.arraycopy(localObject1, 0, paramPropertyNamingStrategy, 0, localObject1.length);
            Arrays.sort(paramPropertyNamingStrategy);
            paramType = paramPropertyNamingStrategy;
            if (Arrays.equals((Object[])localObject1, paramPropertyNamingStrategy)) {
              paramType = (Type)localObject1;
            }
            if (paramBoolean2) {
              paramPropertyNamingStrategy = (JSONType)paramClass.getAnnotation(JSONType.class);
            } else {
              paramPropertyNamingStrategy = null;
            }
            return new d(paramClass, null, null, localObject9, (Label[])localObject1, paramType, paramPropertyNamingStrategy, null);
          }
        }
        else
        {
          localObject5 = localObject6;
          if (j == 0) {
            if ((bool) && (localObject10.length > 0))
            {
              localObject11 = com.jd.views.StringBuilder.read(paramClass);
              if (localObject11 != null)
              {
                k = localObject10.length;
                j = 0;
                for (localObject2 = localObject1; j < k; localObject2 = localObject1)
                {
                  localObject1 = localObject10[j];
                  localObject5 = ((Constructor)localObject1).getParameterTypes();
                  if ((localObject5.length > 0) && (localObject5[(localObject5.length - 1)].getName().equals("kotlin.jvm.internal.DefaultConstructorMarker"))) {
                    localObject1 = localObject2;
                  } else if ((localObject2 != null) && (((Constructor)localObject2).getParameterTypes().length >= localObject5.length)) {
                    localObject1 = localObject2;
                  }
                  j += 1;
                }
                ((Constructor)localObject2).setAccessible(true);
                com.jd.views.StringBuilder.get(paramClass, (Member)localObject2, paramInt);
                localObject10 = ((Constructor)localObject2).getParameterTypes();
                if (paramBoolean4) {
                  localObject5 = ((Constructor)localObject2).getGenericParameterTypes();
                } else {
                  localObject5 = localObject10;
                }
                localObject12 = ((Constructor)localObject2).getParameterAnnotations();
                j = 0;
                while (j < localObject10.length)
                {
                  localObject6 = localObject11[j];
                  localObject1 = localObject12[j];
                  i1 = localObject1.length;
                  k = 0;
                  while (k < i1)
                  {
                    localObject7 = localObject1[k];
                    if ((localObject7 instanceof JSONField))
                    {
                      localObject1 = (JSONField)localObject7;
                      break label1455;
                    }
                    k += 1;
                  }
                  localObject1 = null;
                  label1455:
                  Class localClass = localObject10[j];
                  Object localObject13 = localObject5[j];
                  Field localField = com.jd.views.StringBuilder.get(paramClass, (String)localObject6, (Field[])localObject8, localHashMap);
                  localObject7 = localObject1;
                  if (localField != null)
                  {
                    localObject7 = localObject1;
                    if (localObject1 == null) {
                      localObject7 = (JSONField)localField.getAnnotation(JSONField.class);
                    }
                  }
                  if (localObject7 != null)
                  {
                    k = ((JSONField)localObject7).ordinal();
                    i1 = SerializerFeature.of(((JSONField)localObject7).serialzeFeatures());
                    localObject7 = ((JSONField)localObject7).name();
                    localObject1 = localObject6;
                    if (((String)localObject7).length() != 0) {
                      localObject1 = localObject7;
                    }
                  }
                  else
                  {
                    k = 0;
                    i1 = 0;
                    localObject1 = localObject6;
                  }
                  a(localArrayList, new Label((String)localObject1, paramClass, localClass, (Type)localObject13, localField, k, i1), paramBoolean1);
                  j += 1;
                }
                localObject1 = new Label[localArrayList.size()];
                localArrayList.toArray((Object[])localObject1);
                localObject5 = new Label[localObject1.length];
                System.arraycopy(localObject1, 0, localObject5, 0, localObject1.length);
                Arrays.sort((Object[])localObject5);
                localObject5 = new String[localObject1.length];
                j = 0;
                while (j < localObject1.length)
                {
                  localObject5[j] = a;
                  j += 1;
                }
              }
              else
              {
                paramType = new StringBuilder();
                paramType.append("default constructor not found. ");
                paramType.append(paramClass);
                throw new JSONException(paramType.toString());
              }
            }
            else
            {
              paramType = new StringBuilder();
              paramType.append("default constructor not found. ");
              paramType.append(paramClass);
              throw new JSONException(paramType.toString());
            }
          }
        }
      }
    }
    localObject1 = localObject8;
    if (localObject4 != null) {
      com.jd.views.StringBuilder.get(paramClass, localObject4, paramInt);
    }
    if (!paramBoolean1)
    {
      localObject6 = localObject3;
      i4 = localObject3.length;
      i1 = 0;
      localObject3 = localObject1;
      while (i1 < i4)
      {
        localObject12 = localObject6[i1];
        localObject10 = ((Method)localObject12).getName();
        if (((String)localObject10).length() >= 4)
        {
          localObject1 = ((Method)localObject12).getReturnType();
          if ((localObject1 != Void.TYPE) && (localObject1 != ((Method)localObject12).getDeclaringClass())) {
            break label2517;
          }
          if (((Method)localObject12).getParameterTypes().length == 1)
          {
            if (paramBoolean3) {
              localObject1 = (JSONField)((Method)localObject12).getAnnotation(JSONField.class);
            } else {
              localObject1 = null;
            }
            localObject7 = localObject1;
            if (localObject1 == null)
            {
              localObject7 = localObject1;
              if (paramBoolean3) {
                localObject7 = com.jd.views.StringBuilder.load(paramClass, (Method)localObject12);
              }
            }
            if (localObject7 != null)
            {
              if (!((JSONField)localObject7).deserialize()) {
                break label2517;
              }
              i2 = ((JSONField)localObject7).ordinal();
              k = i2;
              int i3 = SerializerFeature.of(((JSONField)localObject7).serialzeFeatures());
              j = i3;
              if (((JSONField)localObject7).name().length() != 0)
              {
                a(localArrayList, new Label(((JSONField)localObject7).name(), (Method)localObject12, null, paramClass, paramType, i2, i3, (JSONField)localObject7, null, paramBoolean4), paramBoolean1);
                com.jd.views.StringBuilder.get(paramClass, (Member)localObject12, paramInt);
                break label2517;
              }
            }
            else
            {
              k = 0;
              j = 0;
            }
            localObject8 = localObject3;
            if (((String)localObject10).startsWith("set"))
            {
              char c1 = ((String)localObject10).charAt(3);
              if (Character.isUpperCase(c1))
              {
                if (com.jd.views.StringBuilder.mDesign)
                {
                  localObject1 = com.jd.views.StringBuilder.getName(((String)localObject10).substring(3));
                }
                else
                {
                  localObject1 = new StringBuilder();
                  ((StringBuilder)localObject1).append(Character.toLowerCase(((String)localObject10).charAt(3)));
                  ((StringBuilder)localObject1).append(((String)localObject10).substring(4));
                  localObject1 = ((StringBuilder)localObject1).toString();
                }
              }
              else if (c1 == '_')
              {
                localObject1 = ((String)localObject10).substring(4);
              }
              else if (c1 == 'f')
              {
                localObject1 = ((String)localObject10).substring(3);
              }
              else
              {
                if ((((String)localObject10).length() < 5) || (!Character.isUpperCase(((String)localObject10).charAt(4)))) {
                  break label2517;
                }
                localObject1 = com.jd.views.StringBuilder.getName(((String)localObject10).substring(3));
              }
              localObject11 = com.jd.views.StringBuilder.get(paramClass, (String)localObject1, (Field[])localObject8, localHashMap);
              localObject10 = localObject11;
              if (localObject11 == null) {
                if (localObject12.getParameterTypes()[0] == Boolean.TYPE)
                {
                  localObject10 = new StringBuilder();
                  ((StringBuilder)localObject10).append("is");
                  ((StringBuilder)localObject10).append(Character.toUpperCase(((String)localObject1).charAt(0)));
                  ((StringBuilder)localObject10).append(((String)localObject1).substring(1));
                  localObject10 = com.jd.views.StringBuilder.get(paramClass, ((StringBuilder)localObject10).toString(), (Field[])localObject8, localHashMap);
                }
                else
                {
                  localObject10 = localObject11;
                }
              }
              if (localObject10 != null)
              {
                if (paramBoolean3) {
                  localObject8 = (JSONField)((Field)localObject10).getAnnotation(JSONField.class);
                } else {
                  localObject8 = null;
                }
                if (localObject8 != null)
                {
                  k = ((JSONField)localObject8).ordinal();
                  j = SerializerFeature.of(((JSONField)localObject8).serialzeFeatures());
                  if (((JSONField)localObject8).name().length() != 0)
                  {
                    a(localArrayList, new Label(((JSONField)localObject8).name(), (Method)localObject12, (Field)localObject10, paramClass, paramType, k, j, (JSONField)localObject7, (JSONField)localObject8, paramBoolean4), paramBoolean1);
                    break label2517;
                  }
                  if (localObject7 == null) {
                    localObject7 = localObject8;
                  }
                }
                else {}
              }
              localObject10 = paramPropertyNamingStrategy;
              localObject8 = localObject1;
              if (localObject10 != null) {
                localObject8 = ((PropertyNamingStrategy)localObject10).translate((String)localObject1);
              }
              a(localArrayList, new Label((String)localObject8, (Method)localObject12, null, paramClass, paramType, k, j, (JSONField)localObject7, null, paramBoolean4), paramBoolean1);
              com.jd.views.StringBuilder.get(paramClass, (Member)localObject12, paramInt);
            }
          }
        }
        label2517:
        i1 += 1;
      }
      localObject1 = localObject3;
      localObject3 = localObject6;
    }
    localObject6 = new ArrayList(localObject1.length);
    i1 = localObject1.length;
    j = 0;
    while (j < i1)
    {
      localObject7 = localObject1[j];
      k = ((Field)localObject7).getModifiers();
      if ((k & 0x8) == 0) {
        if ((k & 0x10) != 0)
        {
          localObject8 = ((Field)localObject7).getType();
          if ((!Map.class.isAssignableFrom((Class)localObject8)) && (!Collection.class.isAssignableFrom((Class)localObject8))) {
            k = 0;
          } else {
            k = 1;
          }
          if (k == 0) {}
        }
        else if ((((Field)localObject7).getModifiers() & 0x1) != 0)
        {
          ((List)localObject6).add(localObject7);
        }
      }
      j += 1;
    }
    for (localObject1 = paramClass.getSuperclass(); (localObject1 != null) && (localObject1 != Object.class); localObject1 = ((Class)localObject1).getSuperclass())
    {
      localObject7 = ((Class)localObject1).getDeclaredFields();
      i1 = localObject7.length;
      j = 0;
      while (j < i1)
      {
        localObject8 = localObject7[j];
        i2 = ((Field)localObject8).getModifiers();
        if ((i2 & 0x8) == 0) {
          if ((i2 & 0x10) != 0)
          {
            localObject10 = ((Field)localObject8).getType();
            if ((!Map.class.isAssignableFrom((Class)localObject10)) && (!Collection.class.isAssignableFrom((Class)localObject10))) {
              k = 0;
            } else {
              k = 1;
            }
            if (k == 0) {}
          }
          else if ((i2 & 0x1) != 0)
          {
            ((List)localObject6).add(localObject8);
          }
        }
        j += 1;
      }
    }
    localObject10 = ((List)localObject6).iterator();
    while (((Iterator)localObject10).hasNext())
    {
      localObject11 = (Field)((Iterator)localObject10).next();
      localObject6 = ((Field)localObject11).getName();
      localObject1 = localObject6;
      i1 = localArrayList.size();
      j = 0;
      k = 0;
      while (j < i1)
      {
        if (geta.equals(localObject6)) {
          k = 1;
        }
        j += 1;
      }
      if (k == 0)
      {
        if (paramBoolean3) {
          localObject6 = (JSONField)((Field)localObject11).getAnnotation(JSONField.class);
        } else {
          localObject6 = null;
        }
        if (localObject6 != null)
        {
          k = ((JSONField)localObject6).ordinal();
          j = SerializerFeature.of(((JSONField)localObject6).serialzeFeatures());
          if (((JSONField)localObject6).name().length() != 0) {
            localObject1 = ((JSONField)localObject6).name();
          }
        }
        else
        {
          k = 0;
          j = 0;
        }
        localObject8 = paramPropertyNamingStrategy;
        localObject7 = localObject1;
        if (localObject8 != null) {
          localObject7 = ((PropertyNamingStrategy)localObject8).translate((String)localObject1);
        }
        com.jd.views.StringBuilder.get(paramClass, (Member)localObject11, paramInt);
        a(localArrayList, new Label((String)localObject7, null, (Field)localObject11, paramClass, paramType, k, j, null, (JSONField)localObject6, paramBoolean4), paramBoolean1);
      }
    }
    if (!paramBoolean1)
    {
      k = localObject3.length;
      j = 0;
      while (j < k)
      {
        localObject7 = localObject3[j];
        localObject8 = ((Method)localObject7).getName();
        if ((((String)localObject8).length() >= 4) && (((String)localObject8).startsWith("get")) && (Character.isUpperCase(((String)localObject8).charAt(3))) && (((Method)localObject7).getParameterTypes().length == 0))
        {
          paramPropertyNamingStrategy = ((Method)localObject7).getReturnType();
          if ((!Collection.class.isAssignableFrom(paramPropertyNamingStrategy)) && (!Map.class.isAssignableFrom(paramPropertyNamingStrategy))) {
            break label3338;
          }
          if (paramBoolean3) {
            paramPropertyNamingStrategy = (JSONField)((Method)localObject7).getAnnotation(JSONField.class);
          } else {
            paramPropertyNamingStrategy = null;
          }
          if (paramPropertyNamingStrategy != null)
          {
            localObject6 = paramPropertyNamingStrategy.name();
            localObject1 = localObject6;
            if (((String)localObject6).length() > 0) {}
          }
          else
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append(Character.toLowerCase(((String)localObject8).charAt(3)));
            ((StringBuilder)localObject1).append(((String)localObject8).substring(4));
            localObject1 = ((StringBuilder)localObject1).toString();
          }
          a(localArrayList, new Label((String)localObject1, (Method)localObject7, null, paramClass, paramType, 0, 0, paramPropertyNamingStrategy, null, paramBoolean4), paramBoolean1);
          com.jd.views.StringBuilder.get(paramClass, (Member)localObject7, paramInt);
        }
        label3338:
        j += 1;
      }
    }
    paramPropertyNamingStrategy = new Label[localArrayList.size()];
    localArrayList.toArray(paramPropertyNamingStrategy);
    localObject1 = new Label[paramPropertyNamingStrategy.length];
    System.arraycopy(paramPropertyNamingStrategy, 0, localObject1, 0, paramPropertyNamingStrategy.length);
    Arrays.sort((Object[])localObject1);
    if (paramBoolean2) {
      paramType = (JSONType)paramClass.getAnnotation(JSONType.class);
    } else {
      paramType = null;
    }
    return new d(paramClass, localObject4, (Constructor)localObject2, localObject9, paramPropertyNamingStrategy, (Label[])localObject1, paramType, (String[])localObject5);
  }
}
