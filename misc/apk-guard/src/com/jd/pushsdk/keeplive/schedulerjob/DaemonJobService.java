package com.jd.pushsdk.keeplive.schedulerjob;

import android.annotation.TargetApi;
import android.app.Service;
import android.app.job.JobInfo.Builder;
import android.app.job.JobParameters;
import android.app.job.JobScheduler;
import android.app.job.JobService;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Build.VERSION;
import android.util.Log;

@TargetApi(21)
public class DaemonJobService
  extends JobService
{
  private static final String PAGE_KEY = "DaemonJobService";
  
  public DaemonJobService() {}
  
  public static void startScheduleDaemonJob(Context paramContext)
  {
    if (Build.VERSION.SDK_INT < 21) {
      return;
    }
    try
    {
      JobInfo.Builder localBuilder = new JobInfo.Builder(1, new ComponentName(paramContext, DaemonJobService.class));
      if (Build.VERSION.SDK_INT >= 24)
      {
        localBuilder.setMinimumLatency(30000L);
        localBuilder.setOverrideDeadline(30000L);
        localBuilder.setMinimumLatency(30000L);
        localBuilder.setBackoffCriteria(30000L, 0);
      }
      else
      {
        localBuilder.setPeriodic(30000L);
      }
      localBuilder.setRequiredNetworkType(1);
      localBuilder.setRequiresCharging(true);
      paramContext = paramContext.getSystemService("jobscheduler");
      paramContext = (JobScheduler)paramContext;
      paramContext.schedule(localBuilder.build());
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public void onCreate()
  {
    super.onCreate();
    Log.i("DaemonJobService", "Service created");
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    Log.i("DaemonJobService", "Service destroyed");
  }
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    return 2;
  }
  
  public boolean onStartJob(JobParameters paramJobParameters)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("on start job: ");
    localStringBuilder.append(paramJobParameters.getJobId());
    Log.i("DaemonJobService", localStringBuilder.toString());
    return true;
  }
  
  public boolean onStopJob(JobParameters paramJobParameters)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("on stop job: ");
    localStringBuilder.append(paramJobParameters.getJobId());
    Log.i("DaemonJobService", localStringBuilder.toString());
    return true;
  }
}
