package com.jd.fireeye.network;

import android.text.TextUtils;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.DataOutputStream;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLException;

public class ByteVector
  implements Runnable
{
  private static final String buffer = "JDMob.Network.Request";
  private static Map<Object, WeakReference<f>> data = Collections.synchronizedMap(new WeakHashMap());
  private Object a;
  private final AtomicBoolean b = new AtomicBoolean();
  private boolean c;
  private Serializer f;
  private int g = 15000;
  private int l;
  private int length = 1;
  private String n;
  private Integer size;
  private Future val$input;
  private int z;
  
  public ByteVector(String paramString)
  {
    n = paramString;
  }
  
  private ByteVector(String paramString, int paramInt)
  {
    n = paramString;
    l = paramInt;
  }
  
  private ClassWriter a(Map paramMap, String paramString)
    throws Exception
  {
    if (!b.get())
    {
      Object localObject1 = new URL(n);
      if ("https".equals(((URL)localObject1).getProtocol().toLowerCase())) {
        localObject1 = (HttpsURLConnection)ShooterUrlConnectionInstrumentation.openConnection(((URL)localObject1).openConnection());
      } else {
        localObject1 = (HttpURLConnection)ShooterUrlConnectionInstrumentation.openConnection(((URL)localObject1).openConnection());
      }
      int i = g;
      ((HttpURLConnection)localObject1).setConnectTimeout(i);
      ((HttpURLConnection)localObject1).setReadTimeout(i);
      ((HttpURLConnection)localObject1).setDoInput(true);
      ((HttpURLConnection)localObject1).setDoOutput(true);
      Iterator localIterator;
      Object localObject2;
      if ((paramMap != null) && (!paramMap.isEmpty()))
      {
        localIterator = paramMap.keySet().iterator();
        while (localIterator.hasNext())
        {
          localObject2 = (String)localIterator.next();
          String str = (String)paramMap.get(localObject2);
          ((HttpURLConnection)localObject1).addRequestProperty((String)localObject2, str);
        }
      }
      ((HttpURLConnection)localObject1).setRequestProperty("Charset", "UTF-8");
      ((HttpURLConnection)localObject1).setRequestProperty("Content-Type", "application/json");
      switch (l)
      {
      default: 
        break;
      case 1: 
        ((HttpURLConnection)localObject1).setRequestMethod("GET");
        break;
      case 0: 
        ((HttpURLConnection)localObject1).setRequestMethod("POST");
        if (localObject1 != null)
        {
          paramMap = new DataOutputStream(((HttpURLConnection)localObject1).getOutputStream());
          if (paramString != null) {
            paramMap.write(paramString.getBytes());
          }
          paramMap.flush();
          paramMap.close();
        }
        break;
      }
      if (!b.get())
      {
        i = ((HttpURLConnection)localObject1).getResponseCode();
        if (i != -1)
        {
          paramMap = new ClassWriter();
          paramString = new HashMap();
          localIterator = ((HttpURLConnection)localObject1).getHeaderFields().entrySet().iterator();
          while (localIterator.hasNext())
          {
            localObject2 = (Map.Entry)localIterator.next();
            if (((Map.Entry)localObject2).getKey() != null) {
              paramString.put(((Map.Entry)localObject2).getKey(), ((List)((Map.Entry)localObject2).getValue()).get(0));
            }
          }
          paramMap.a(i);
          paramMap.put(paramString);
          paramMap.put(read((HttpURLConnection)localObject1));
          if (!b.get()) {
            return paramMap;
          }
          throw new NetworkException(64531);
        }
        throw new NetworkException(i);
      }
      throw new NetworkException(64531);
    }
    throw new NetworkException(64531);
  }
  
  private void a()
    throws InterruptedException
  {
    if (b.get())
    {
      add();
      return;
    }
    label651:
    Serializer localSerializer;
    try
    {
      bool1 = f.a();
      if (bool1)
      {
        new HashMap();
        String str = write();
        Object localObject1 = null;
        bool1 = true;
        NetworkException localNetworkException4;
        while (bool1)
        {
          int i = z;
          z = (i + 1);
          bool1 = f.b;
          if (bool1) {}
          try
          {
            localObject1 = new StringBuilder("Request.tag = ");
            localObject2 = a;
            ((StringBuilder)localObject1).append(localObject2);
            ((StringBuilder)localObject1).append(", url = ");
            localObject2 = n;
            ((StringBuilder)localObject1).append((String)localObject2);
            ((StringBuilder)localObject1).append(" executionCount = ");
            i = z;
            ((StringBuilder)localObject1).append(i);
            d.a("JDMob.Network.Request", ((StringBuilder)localObject1).toString());
            localObject1 = a(null, str);
            bool1 = f.b;
            if (bool1)
            {
              localObject2 = new StringBuilder("Response.tag = ");
              Object localObject3 = a;
              ((StringBuilder)localObject2).append(localObject3);
              ((StringBuilder)localObject2).append(", response.responseCode = ");
              ((StringBuilder)localObject2).append(((ClassWriter)localObject1).c());
              d.a("JDMob.Network.Request", ((StringBuilder)localObject2).toString());
            }
            bool1 = ((ClassWriter)localObject1).b();
            if (bool1)
            {
              localObject2 = b;
              bool1 = ((AtomicBoolean)localObject2).get();
              if (bool1) {
                break label651;
              }
              localObject2 = f;
              if (localObject2 == null) {
                break label651;
              }
              localObject2 = f;
              ((Serializer)localObject2).write((ClassWriter)localObject1);
              break label651;
            }
            localObject1 = new NetworkException(((ClassWriter)localObject1).c());
            throw ((Throwable)localObject1);
          }
          catch (Exception localException)
          {
            localObject1 = b;
            bool1 = ((AtomicBoolean)localObject1).get();
            if (bool1) {
              break label651;
            }
            i = z;
            bool1 = l.a(localException, i, this);
            boolean bool2 = bool1;
            if (bool1)
            {
              bool1 = c;
              if (bool1)
              {
                localObject1 = n;
                bool1 = TextUtils.isEmpty((CharSequence)localObject1);
                if (!bool1)
                {
                  localObject1 = n;
                  bool1 = ((String)localObject1).startsWith("https://");
                  if (bool1)
                  {
                    localObject1 = n;
                    localObject1 = ((String)localObject1).replaceFirst("https://", "http://");
                    n = ((String)localObject1);
                    bool1 = f.b;
                    if (bool1)
                    {
                      localObject1 = new StringBuilder("Request.tag = ");
                      localObject2 = a;
                      ((StringBuilder)localObject1).append(localObject2);
                      ((StringBuilder)localObject1).append(", after replace, url  = ");
                      localObject2 = n;
                      ((StringBuilder)localObject1).append((String)localObject2);
                      d.a("JDMob.Network.Request", ((StringBuilder)localObject1).toString());
                    }
                  }
                }
              }
            }
            Object localObject2 = new NetworkException(localException, 64534);
            boolean bool3 = f.b;
            bool1 = bool2;
            localObject1 = localObject2;
            if (bool3)
            {
              localException.printStackTrace();
              bool1 = bool2;
              localObject1 = localObject2;
            }
          }
          catch (NetworkException localNetworkException1)
          {
            i = z;
            bool1 = l.a(localNetworkException1, i, this);
            int j = localNetworkException1.c();
            i = j;
            if (j == 0) {
              i = 64533;
            }
            NetworkException localNetworkException2 = new NetworkException(localNetworkException1, i);
          }
          catch (SSLException localSSLException)
          {
            bool1 = f.b;
            if (bool1) {
              localSSLException.printStackTrace();
            }
            i = z;
            bool1 = l.a(localSSLException, i, this);
            NetworkException localNetworkException3 = new NetworkException(localSSLException, 64336);
          }
          catch (SocketTimeoutException localSocketTimeoutException)
          {
            bool1 = f.b;
            if (bool1) {
              localSocketTimeoutException.printStackTrace();
            }
            i = z;
            bool1 = l.a(localSocketTimeoutException, i, this);
            localNetworkException4 = new NetworkException(localSocketTimeoutException, 64535);
          }
        }
        throw localNetworkException4;
      }
      add();
      return;
    }
    catch (Throwable localThrowable) {}catch (NetworkException localNetworkException5)
    {
      localNetworkException5.printStackTrace();
      boolean bool1 = b.get();
      if (!bool1)
      {
        localSerializer = f;
        if (localSerializer != null) {
          f.write();
        }
      }
      add();
      return;
    }
    add();
    throw localSerializer;
  }
  
  private void a(HttpURLConnection paramHttpURLConnection, String paramString)
    throws IOException
  {
    switch (l)
    {
    default: 
      return;
    case 1: 
      paramHttpURLConnection.setRequestMethod("GET");
      return;
    }
    paramHttpURLConnection.setRequestMethod("POST");
    if (paramHttpURLConnection != null)
    {
      paramHttpURLConnection = new DataOutputStream(paramHttpURLConnection.getOutputStream());
      if (paramString != null) {
        paramHttpURLConnection.write(paramString.getBytes());
      }
      paramHttpURLConnection.flush();
      paramHttpURLConnection.close();
    }
  }
  
  private void add()
  {
    Object localObject = a;
    if (localObject == null) {
      return;
    }
    Map localMap = data;
    try
    {
      localMap.remove(localObject);
      return;
    }
    catch (Exception localException) {}
  }
  
  private int b()
  {
    return g;
  }
  
  private void b(boolean paramBoolean)
  {
    c = paramBoolean;
  }
  
  private void c()
    throws NetworkException
  {
    if (!f.a()) {
      return;
    }
    new HashMap();
    String str = write();
    Object localObject1 = null;
    boolean bool1 = true;
    NetworkException localNetworkException4;
    while (bool1)
    {
      z += 1;
      if (f.b) {}
      try
      {
        localObject1 = new StringBuilder("Request.tag = ");
        localObject2 = a;
        ((StringBuilder)localObject1).append(localObject2);
        ((StringBuilder)localObject1).append(", url = ");
        localObject2 = n;
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append(" executionCount = ");
        i = z;
        ((StringBuilder)localObject1).append(i);
        d.a("JDMob.Network.Request", ((StringBuilder)localObject1).toString());
        localObject1 = a(null, str);
        if (f.b)
        {
          localObject2 = new StringBuilder("Response.tag = ");
          Object localObject3 = a;
          ((StringBuilder)localObject2).append(localObject3);
          ((StringBuilder)localObject2).append(", response.responseCode = ");
          ((StringBuilder)localObject2).append(((ClassWriter)localObject1).c());
          d.a("JDMob.Network.Request", ((StringBuilder)localObject2).toString());
        }
        bool1 = ((ClassWriter)localObject1).b();
        if (bool1)
        {
          localObject2 = b;
          bool1 = ((AtomicBoolean)localObject2).get();
          if (bool1) {
            return;
          }
          if (f == null) {
            return;
          }
          localObject2 = f;
          ((Serializer)localObject2).write((ClassWriter)localObject1);
          return;
        }
        localObject1 = new NetworkException(((ClassWriter)localObject1).c());
        throw ((Throwable)localObject1);
      }
      catch (Exception localException)
      {
        if (b.get()) {
          return;
        }
        bool1 = l.a(localException, z, this);
        boolean bool2 = bool1;
        if ((bool1) && (c) && (!TextUtils.isEmpty(n)) && (n.startsWith("https://")))
        {
          n = n.replaceFirst("https://", "http://");
          if (f.b)
          {
            localObject1 = new StringBuilder("Request.tag = ");
            ((StringBuilder)localObject1).append(a);
            ((StringBuilder)localObject1).append(", after replace, url  = ");
            ((StringBuilder)localObject1).append(n);
            d.a("JDMob.Network.Request", ((StringBuilder)localObject1).toString());
          }
        }
        Object localObject2 = new NetworkException(localException, 64534);
        bool1 = bool2;
        localObject1 = localObject2;
        if (f.b)
        {
          localException.printStackTrace();
          bool1 = bool2;
          localObject1 = localObject2;
        }
      }
      catch (NetworkException localNetworkException1)
      {
        bool1 = l.a(localNetworkException1, z, this);
        int j = localNetworkException1.c();
        int i = j;
        if (j == 0) {
          i = 64533;
        }
        NetworkException localNetworkException2 = new NetworkException(localNetworkException1, i);
      }
      catch (SSLException localSSLException)
      {
        if (f.b) {
          localSSLException.printStackTrace();
        }
        bool1 = l.a(localSSLException, z, this);
        NetworkException localNetworkException3 = new NetworkException(localSSLException, 64336);
      }
      catch (SocketTimeoutException localSocketTimeoutException)
      {
        if (f.b) {
          localSocketTimeoutException.printStackTrace();
        }
        bool1 = l.a(localSocketTimeoutException, z, this);
        localNetworkException4 = new NetworkException(localSocketTimeoutException, 64535);
      }
    }
    throw localNetworkException4;
  }
  
  private Integer capacity()
  {
    return size;
  }
  
  private static HttpURLConnection connect(URL paramURL)
    throws IOException
  {
    if ("https".equals(paramURL.getProtocol().toLowerCase())) {
      return (HttpsURLConnection)ShooterUrlConnectionInstrumentation.openConnection(paramURL.openConnection());
    }
    return (HttpURLConnection)ShooterUrlConnectionInstrumentation.openConnection(paramURL.openConnection());
  }
  
  private static void copy()
  {
    if (!data.isEmpty())
    {
      Iterator localIterator = data.entrySet().iterator();
      while (localIterator.hasNext())
      {
        WeakReference localWeakReference = (WeakReference)((Map.Entry)localIterator.next()).getValue();
        if (localWeakReference != null)
        {
          ByteVector localByteVector = (ByteVector)localWeakReference.get();
          if (localByteVector != null)
          {
            localByteVector.read();
            localWeakReference.clear();
          }
        }
      }
    }
  }
  
  private int d()
  {
    return l;
  }
  
  private HttpURLConnection get(URL paramURL)
    throws IOException
  {
    if ("https".equals(paramURL.getProtocol().toLowerCase())) {
      paramURL = (HttpsURLConnection)ShooterUrlConnectionInstrumentation.openConnection(paramURL.openConnection());
    } else {
      paramURL = (HttpURLConnection)ShooterUrlConnectionInstrumentation.openConnection(paramURL.openConnection());
    }
    int i = g;
    ((HttpURLConnection)paramURL).setConnectTimeout(i);
    ((HttpURLConnection)paramURL).setReadTimeout(i);
    ((HttpURLConnection)paramURL).setDoInput(true);
    ((HttpURLConnection)paramURL).setDoOutput(true);
    return (HttpURLConnection)paramURL;
  }
  
  private boolean getWrapSelectorWheel()
  {
    return c;
  }
  
  private String length()
  {
    return n;
  }
  
  private static Map put()
  {
    return null;
  }
  
  private void put(ClassWriter paramClassWriter)
  {
    Serializer localSerializer = f;
    if (localSerializer != null) {
      localSerializer.write(paramClassWriter);
    }
  }
  
  private void put(NetworkException paramNetworkException)
  {
    paramNetworkException = f;
    if (paramNetworkException != null) {
      paramNetworkException.write();
    }
  }
  
  private void putShort(int paramInt)
  {
    length = paramInt;
  }
  
  private Object putUTF8()
  {
    return a;
  }
  
  private void read()
  {
    b.set(true);
    Future localFuture = val$input;
    if (localFuture != null) {
      localFuture.cancel(true);
    }
  }
  
  private static void read(Object paramObject)
  {
    if (paramObject == null) {
      return;
    }
    paramObject = (WeakReference)data.get(paramObject);
    if (paramObject != null)
    {
      ByteVector localByteVector = (ByteVector)paramObject.get();
      if (localByteVector != null)
      {
        localByteVector.read();
        paramObject.clear();
      }
    }
  }
  
  /* Error */
  private static byte[] read(HttpURLConnection paramHttpURLConnection)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 389	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   4: astore_3
    //   5: aload_3
    //   6: astore_0
    //   7: new 391	java/io/ByteArrayOutputStream
    //   10: dup
    //   11: invokespecial 392	java/io/ByteArrayOutputStream:<init>	()V
    //   14: astore_2
    //   15: sipush 1024
    //   18: newarray byte
    //   20: astore 4
    //   22: aload_3
    //   23: aload 4
    //   25: invokevirtual 397	java/io/InputStream:read	([B)I
    //   28: istore_1
    //   29: iload_1
    //   30: iconst_m1
    //   31: if_icmpeq +14 -> 45
    //   34: aload_2
    //   35: aload 4
    //   37: iconst_0
    //   38: iload_1
    //   39: invokevirtual 400	java/io/ByteArrayOutputStream:write	([BII)V
    //   42: goto -20 -> 22
    //   45: aload_2
    //   46: invokevirtual 401	java/io/ByteArrayOutputStream:flush	()V
    //   49: aload_2
    //   50: invokevirtual 402	java/io/ByteArrayOutputStream:close	()V
    //   53: aload_3
    //   54: invokevirtual 403	java/io/InputStream:close	()V
    //   57: aload_2
    //   58: invokevirtual 406	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   61: astore 4
    //   63: aload_3
    //   64: ifnull +7 -> 71
    //   67: aload_3
    //   68: invokevirtual 403	java/io/InputStream:close	()V
    //   71: aload_2
    //   72: invokevirtual 402	java/io/ByteArrayOutputStream:close	()V
    //   75: aload 4
    //   77: areturn
    //   78: astore 4
    //   80: aload_0
    //   81: astore_3
    //   82: aload_2
    //   83: astore_0
    //   84: aload 4
    //   86: astore_2
    //   87: goto +36 -> 123
    //   90: aload_0
    //   91: astore_3
    //   92: aload_2
    //   93: astore_0
    //   94: goto +51 -> 145
    //   97: astore_2
    //   98: aconst_null
    //   99: astore 4
    //   101: aload_0
    //   102: astore_3
    //   103: aload 4
    //   105: astore_0
    //   106: goto +17 -> 123
    //   109: aconst_null
    //   110: astore_2
    //   111: aload_0
    //   112: astore_3
    //   113: aload_2
    //   114: astore_0
    //   115: goto +30 -> 145
    //   118: astore_2
    //   119: aconst_null
    //   120: astore_0
    //   121: aconst_null
    //   122: astore_3
    //   123: aload_3
    //   124: ifnull +7 -> 131
    //   127: aload_3
    //   128: invokevirtual 403	java/io/InputStream:close	()V
    //   131: aload_0
    //   132: ifnull +7 -> 139
    //   135: aload_0
    //   136: invokevirtual 402	java/io/ByteArrayOutputStream:close	()V
    //   139: aload_2
    //   140: athrow
    //   141: aconst_null
    //   142: astore_3
    //   143: aconst_null
    //   144: astore_0
    //   145: aload_3
    //   146: ifnull +7 -> 153
    //   149: aload_3
    //   150: invokevirtual 403	java/io/InputStream:close	()V
    //   153: aload_0
    //   154: ifnull +21 -> 175
    //   157: aload_0
    //   158: invokevirtual 402	java/io/ByteArrayOutputStream:close	()V
    //   161: aconst_null
    //   162: areturn
    //   163: astore_0
    //   164: goto -23 -> 141
    //   167: astore_2
    //   168: goto -59 -> 109
    //   171: astore_3
    //   172: goto -82 -> 90
    //   175: aconst_null
    //   176: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	177	0	paramHttpURLConnection	HttpURLConnection
    //   28	11	1	i	int
    //   14	79	2	localObject1	Object
    //   97	1	2	localThrowable1	Throwable
    //   110	4	2	localObject2	Object
    //   118	22	2	localThrowable2	Throwable
    //   167	1	2	localIOException1	IOException
    //   4	146	3	localObject3	Object
    //   171	1	3	localIOException2	IOException
    //   20	56	4	arrayOfByte	byte[]
    //   78	7	4	localThrowable3	Throwable
    //   99	5	4	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   22	29	78	java/lang/Throwable
    //   34	42	78	java/lang/Throwable
    //   45	63	78	java/lang/Throwable
    //   7	15	97	java/lang/Throwable
    //   0	5	118	java/lang/Throwable
    //   0	5	163	java/io/IOException
    //   7	15	167	java/io/IOException
    //   22	29	171	java/io/IOException
    //   34	42	171	java/io/IOException
    //   45	63	171	java/io/IOException
  }
  
  private static void request(HttpURLConnection paramHttpURLConnection, String paramString)
    throws IOException
  {
    if (paramHttpURLConnection != null)
    {
      paramHttpURLConnection = new DataOutputStream(paramHttpURLConnection.getOutputStream());
      if (paramString != null) {
        paramHttpURLConnection.write(paramString.getBytes());
      }
      paramHttpURLConnection.flush();
      paramHttpURLConnection.close();
    }
  }
  
  private void trimToSize() {}
  
  private void write(Integer paramInteger)
  {
    size = paramInteger;
  }
  
  public final void a(Object paramObject)
  {
    a = paramObject;
  }
  
  public final void b(int paramInt)
  {
    g = 60000;
  }
  
  public final void b(Serializer paramSerializer)
  {
    f = paramSerializer;
  }
  
  public final void get()
  {
    if (a == null) {
      a = Long.valueOf(System.currentTimeMillis());
    }
    Object localObject = a;
    if (localObject != null) {
      data.put(localObject, new WeakReference(this));
    }
    val$input = ContextUtils.getApplicationPackage().execute(this);
  }
  
  public final int getSize()
  {
    int i = length;
    if (i <= 0) {
      return 1;
    }
    return i;
  }
  
  public final boolean putInt()
  {
    return b.get();
  }
  
  public void run()
  {
    AtomicBoolean localAtomicBoolean = b;
    try
    {
      boolean bool = localAtomicBoolean.get();
      if (bool)
      {
        add();
        return;
      }
      Serializer localSerializer;
      try
      {
        c();
        add();
        return;
      }
      catch (Throwable localThrowable) {}catch (NetworkException localNetworkException)
      {
        for (;;)
        {
          localNetworkException.printStackTrace();
          bool = b.get();
          if (!bool)
          {
            localSerializer = f;
            if (localSerializer != null) {
              f.write();
            }
          }
        }
      }
      add();
      throw localSerializer;
    }
    catch (InterruptedException localInterruptedException)
    {
      ((InterruptedException)localInterruptedException).printStackTrace();
    }
  }
  
  protected String write()
  {
    return null;
  }
}
