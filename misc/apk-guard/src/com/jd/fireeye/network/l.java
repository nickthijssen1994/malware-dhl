package com.jd.fireeye.network;

import java.util.HashSet;
import java.util.Iterator;

final class l
{
  private static final HashSet<Class<?>> a = new HashSet();
  private static final HashSet<Class<?>> b = new HashSet();
  
  l() {}
  
  private static void a(Class paramClass)
  {
    a.add(paramClass);
  }
  
  public static boolean a(Exception paramException, int paramInt, ByteVector paramByteVector)
  {
    if (paramInt < paramByteVector.getSize())
    {
      if (paramByteVector.putInt()) {
        return false;
      }
      if (write(a, paramException)) {
        return true;
      }
      return !write(b, paramException);
    }
    return false;
  }
  
  private static void draw(Class paramClass)
  {
    b.add(paramClass);
  }
  
  private static boolean write(HashSet paramHashSet, Throwable paramThrowable)
  {
    paramHashSet = paramHashSet.iterator();
    while (paramHashSet.hasNext()) {
      if (((Class)paramHashSet.next()).isInstance(paramThrowable)) {
        return true;
      }
    }
    return false;
  }
}
