package com.jd.fireeye.network;

import java.io.UnsupportedEncodingException;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public final class ClassWriter
{
  private byte[] a;
  private int b;
  private Map<String, String> c;
  
  public ClassWriter() {}
  
  private String a()
  {
    Object localObject = a;
    if (localObject == null) {
      return "";
    }
    Map localMap = c;
    try
    {
      localObject = new String((byte[])localObject, parseCharset(localMap, "UTF-8"));
      return localObject;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      for (;;) {}
    }
    return new String(a);
  }
  
  private String parseCharset(Map paramMap)
  {
    if (paramMap != null)
    {
      if (paramMap.isEmpty()) {
        return "UTF-8";
      }
      paramMap = (String)paramMap.get("Content-Type");
      if (paramMap != null)
      {
        paramMap = paramMap.split(";");
        int i = 1;
        while (i < paramMap.length)
        {
          String[] arrayOfString = paramMap[i].trim().split("=");
          if ((arrayOfString.length == 2) && (arrayOfString[0].equals("charset"))) {
            return arrayOfString[1];
          }
          i += 1;
        }
      }
    }
    return "UTF-8";
  }
  
  private static String parseCharset(Map paramMap, String paramString)
  {
    if (paramMap != null)
    {
      if (paramMap.isEmpty()) {
        return paramString;
      }
      paramMap = (String)paramMap.get("Content-Type");
      if (paramMap != null)
      {
        paramMap = paramMap.split(";");
        int i = 1;
        while (i < paramMap.length)
        {
          String[] arrayOfString = paramMap[i].trim().split("=");
          if ((arrayOfString.length == 2) && (arrayOfString[0].equals("charset"))) {
            return arrayOfString[1];
          }
          i += 1;
        }
      }
    }
    return paramString;
  }
  
  private JSONArray put()
  {
    if (a == null) {
      return null;
    }
    Object localObject = a();
    try
    {
      localObject = new JSONArray((String)localObject);
      return localObject;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
      return null;
    }
    catch (Exception localException) {}
    return null;
  }
  
  private byte[] toByteArray()
  {
    return a;
  }
  
  private Map visitInnerClass()
  {
    return c;
  }
  
  public final void a(int paramInt)
  {
    b = paramInt;
  }
  
  public final boolean b()
  {
    int i = b;
    return (i >= 200) && (i < 300);
  }
  
  public final int c()
  {
    return b;
  }
  
  public final JSONObject get()
  {
    if (a == null) {
      return null;
    }
    Object localObject = a();
    try
    {
      localObject = new JSONObject((String)localObject);
      return localObject;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
      return null;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public final void put(Map paramMap)
  {
    c = paramMap;
  }
  
  public final void put(byte[] paramArrayOfByte)
  {
    a = paramArrayOfByte;
  }
}
