package com.jd.fireeye.common;

import android.bluetooth.BluetoothAdapter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build.VERSION;
import android.provider.Settings.Secure;
import android.text.TextUtils;
import android.util.Base64;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.Reader;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

public final class f
{
  private static final String A = "cpa_ududud_new";
  private static final String ACTION_VIEW_STATES_KEY = "02:00:00:00:00:00";
  private static String a;
  private static volatile String d;
  private static final String e = "device_installtion_id";
  private static final boolean mPreventDispatchingItemsChanged = false;
  private static final String t = "JDMob.Security.UniqueId";
  
  public f() {}
  
  private static String a(android.content.Context paramContext)
  {
    if (!TextUtils.isEmpty(d)) {
      return d;
    }
    Object localObject = SparseArray.get("cpa_ududud_new", "");
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      localObject = new String(Base64.decode(((String)localObject).getBytes(), 2));
      if (Log.a((String)localObject))
      {
        d = (String)localObject;
        return localObject;
      }
    }
    paramContext = getValue(paramContext);
    if (Log.a(paramContext)) {
      d = paramContext;
    }
    try
    {
      boolean bool = Log.setText(paramContext);
      if (bool) {
        SparseArray.put("cpa_ududud_new", Base64.encodeToString(paramContext.getBytes(), 2));
      }
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    localObject = new StringBuilder("init cachedUniqueIdInSDK = ");
    ((StringBuilder)localObject).append(paramContext);
    ((StringBuilder)localObject).append(",cachedUniqueIdInSDK = ");
    ((StringBuilder)localObject).append(d);
    ByteVector.get("JDMob.Security.UniqueId", ((StringBuilder)localObject).toString());
    return paramContext;
  }
  
  private static boolean a()
  {
    if (TextUtils.isEmpty(d)) {
      d(com.jd.fireeye.security.ByteVector.a);
    }
    String str = getValue(com.jd.fireeye.security.ByteVector.a);
    boolean bool = TextUtils.equals(d, str);
    StringBuilder localStringBuilder = new StringBuilder("cachedUniqueIdInSDK = ");
    localStringBuilder.append(d);
    localStringBuilder.append(", getUniqueIdRealTimeInSDK = ");
    localStringBuilder.append(str);
    localStringBuilder.append(", isSame = ");
    localStringBuilder.append(bool);
    ByteVector.get("JDMob.Security.UniqueId", localStringBuilder.toString());
    if (!bool)
    {
      d = str;
      if (Log.setText(str)) {
        SparseArray.put("cpa_ududud_new", Base64.encodeToString(str.getBytes(), 2));
      }
    }
    return bool;
  }
  
  private static String b()
  {
    String str = load();
    StringBuilder localStringBuilder = new StringBuilder("get mac from NI = ");
    localStringBuilder.append(str);
    ByteVector.get("JDMob.Security.UniqueId", localStringBuilder.toString());
    return str;
  }
  
  public static String b(android.content.Context paramContext)
  {
    if ((!TextUtils.isEmpty(a)) && (a.length() > 2)) {
      return a;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(Context.get());
    localStringBuilder.append("-");
    paramContext = get(paramContext);
    if (!TextUtils.isEmpty(paramContext)) {
      localStringBuilder.append(paramContext.replace(":", ""));
    }
    paramContext = localStringBuilder.toString();
    a = paramContext;
    return paramContext;
  }
  
  private static String c(android.content.Context paramContext)
  {
    paramContext = SparseArray.get(paramContext).getString("device_installtion_id", "");
    if (!TextUtils.isEmpty(paramContext))
    {
      localStringBuilder = new StringBuilder("UniqueId.cached = ");
      localStringBuilder.append(paramContext);
      android.util.Log.i("JDMob.Security.UniqueId", localStringBuilder.toString());
      return paramContext;
    }
    paramContext = UUID.randomUUID().toString();
    StringBuilder localStringBuilder = new StringBuilder("UniqueId.randomUUID = ");
    localStringBuilder.append(paramContext);
    ByteVector.get("JDMob.Security.UniqueId", localStringBuilder.toString());
    SparseArray.put("device_installtion_id", paramContext);
    return paramContext;
  }
  
  public static String d(android.content.Context paramContext)
  {
    paramContext = a(paramContext);
    if (paramContext == null) {
      return "";
    }
    return paramContext;
  }
  
  private static String get(android.content.Context paramContext)
  {
    Object localObject3 = "";
    if (paramContext == null) {
      if (ByteVector.type) {
        localObject1 = localObject3;
      }
    }
    try
    {
      ByteVector.get("JDMob.Security.UniqueId", "get mac in sdk,context is null");
      return "";
    }
    catch (Exception paramContext)
    {
      Object localObject2;
      boolean bool;
      paramContext.printStackTrace();
    }
    localObject2 = localObject3;
    if (Build.VERSION.SDK_INT < 23)
    {
      localObject1 = localObject3;
      paramContext = paramContext.getSystemService("wifi");
      paramContext = (WifiManager)paramContext;
      localObject1 = localObject3;
      localObject3 = paramContext.getConnectionInfo().getMacAddress();
      paramContext = (android.content.Context)localObject3;
      localObject1 = paramContext;
      bool = TextUtils.equals("02:00:00:00:00:00", (CharSequence)localObject3);
      localObject2 = paramContext;
      if (!bool)
      {
        localObject1 = paramContext;
        localObject2 = new StringBuilder("mac below 23 = ");
        localObject1 = paramContext;
        ((StringBuilder)localObject2).append((String)localObject3);
        localObject1 = paramContext;
        ByteVector.get("JDMob.Security.UniqueId", ((StringBuilder)localObject2).toString());
        return localObject3;
      }
    }
    Object localObject1 = localObject2;
    paramContext = load();
    localObject1 = localObject2;
    localObject3 = new StringBuilder("get mac from NI = ");
    localObject1 = localObject2;
    ((StringBuilder)localObject3).append(paramContext);
    localObject1 = localObject2;
    ByteVector.get("JDMob.Security.UniqueId", ((StringBuilder)localObject3).toString());
    return paramContext;
    return localObject1;
  }
  
  public static String getDeviceId(android.content.Context paramContext)
  {
    try
    {
      paramContext = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
      return paramContext;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  private static String getLog()
  {
    Object localObject1 = "";
    try
    {
      Object localObject2 = Runtime.getRuntime().exec("cat /sys/class/net/wlan0/address ");
      localObject2 = new InputStreamReader(((Process)localObject2).getInputStream());
      LineNumberReader localLineNumberReader = new LineNumberReader((Reader)localObject2);
      while (localObject1 != null)
      {
        localObject2 = localLineNumberReader.readLine();
        localObject1 = localObject2;
        if (localObject2 != null)
        {
          localObject1 = ((String)localObject2).trim();
          return localObject1;
        }
      }
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return "";
  }
  
  private static String getValue(android.content.Context paramContext)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(Context.get());
    localStringBuilder.append("-");
    String str = get(paramContext);
    if (!TextUtils.isEmpty(str)) {
      localStringBuilder.append(str.replace(":", ""));
    }
    localStringBuilder.append("-");
    localStringBuilder.append(getDeviceId(paramContext));
    return localStringBuilder.toString();
  }
  
  public static String init(android.content.Context paramContext)
  {
    int i = 0;
    if (paramContext != null) {}
    try
    {
      boolean bool = Log.open();
      if (bool)
      {
        int j = paramContext.getPackageManager().checkPermission("android.permission.BLUETOOTH", paramContext.getPackageName());
        if (j == 0) {
          i = 1;
        }
      }
      else
      {
        i = 1;
      }
      if (i == 0) {
        return "";
      }
      BluetoothAdapter localBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
      String str = "";
      if (localBluetoothAdapter != null) {
        str = localBluetoothAdapter.getAddress();
      }
      bool = TextUtils.isEmpty(str);
      if (!bool)
      {
        bool = TextUtils.equals("02:00:00:00:00:00", str);
        if (!bool) {}
      }
      else
      {
        str = Settings.Secure.getString(paramContext.getContentResolver(), "bluetooth_address");
      }
      bool = TextUtils.isEmpty(str);
      if (bool) {
        return "";
      }
      return str;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  private static String load()
  {
    try
    {
      Object localObject1 = Collections.list(NetworkInterface.getNetworkInterfaces()).iterator();
      boolean bool;
      do
      {
        bool = ((Iterator)localObject1).hasNext();
        if (!bool) {
          break;
        }
        localObject2 = ((Iterator)localObject1).next();
        localObject2 = (NetworkInterface)localObject2;
        bool = ((NetworkInterface)localObject2).getName().equalsIgnoreCase("wlan0");
      } while (!bool);
      localObject1 = ((NetworkInterface)localObject2).getHardwareAddress();
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = new StringBuilder();
      int j = localObject1.length;
      int i = 0;
      while (i < j)
      {
        byte b = localObject1[i];
        ((StringBuilder)localObject2).append(String.format("%02x:", new Object[] { Byte.valueOf(b) }));
        i += 1;
      }
      i = ((StringBuilder)localObject2).length();
      if (i > 0)
      {
        i = ((StringBuilder)localObject2).length();
        ((StringBuilder)localObject2).deleteCharAt(i - 1);
      }
      localObject1 = ((StringBuilder)localObject2).toString();
      return localObject1;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    return "";
  }
}
