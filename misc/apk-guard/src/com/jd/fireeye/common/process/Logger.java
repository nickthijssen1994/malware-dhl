package com.jd.fireeye.common.process;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.text.TextUtils;
import com.jd.fireeye.common.ByteVector;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;

public final class Logger
{
  static final Hashtable<String, String> names = new Hashtable();
  
  public Logger() {}
  
  private static boolean contains(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    int i;
    if ((!TextUtils.isEmpty(paramString)) && ((paramString.startsWith("com.android")) || (paramString.contains("system")))) {
      i = 1;
    } else {
      i = 0;
    }
    return i == 0;
  }
  
  public static List doInBackground(Context paramContext, List paramList)
  {
    if (paramContext == null) {
      return new ArrayList();
    }
    Object localObject = ((ActivityManager)paramContext.getSystemService("activity")).getRunningServices(200);
    paramContext = new ArrayList();
    localObject = ((List)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      ActivityManager.RunningServiceInfo localRunningServiceInfo = (ActivityManager.RunningServiceInfo)((Iterator)localObject).next();
      String str = process;
      if (contains(str))
      {
        LiveAppModel localLiveAppModel;
        if (paramList != null)
        {
          localLiveAppModel = new LiveAppModel();
          count = pid;
          uid = uid;
          name = str;
          file = service.getClassName();
          if (paramList.contains(localLiveAppModel.next())) {
            paramContext.add(localLiveAppModel);
          }
        }
        else
        {
          localLiveAppModel = new LiveAppModel();
          count = pid;
          uid = uid;
          name = str;
          file = service.getClassName();
          paramContext.add(localLiveAppModel);
        }
      }
    }
    return paramContext;
  }
  
  private static boolean e(String paramString)
  {
    if (!TextUtils.isEmpty(paramString)) {
      return paramString.contains(":");
    }
    return false;
  }
  
  public static List execute(Context paramContext, List paramList)
  {
    if (paramContext == null) {
      return new ArrayList();
    }
    Object localObject1 = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses();
    ArrayList localArrayList = new ArrayList();
    localObject1 = ((List)localObject1).iterator();
    while (((Iterator)localObject1).hasNext())
    {
      Object localObject2 = (ActivityManager.RunningAppProcessInfo)((Iterator)localObject1).next();
      String str = processName;
      if (contains(str))
      {
        LiveAppModel localLiveAppModel;
        if (paramList != null)
        {
          localLiveAppModel = new LiveAppModel();
          count = pid;
          uid = uid;
          name = str;
          localObject2 = localLiveAppModel.next();
          file = getName(paramContext, (String)localObject2);
          if (paramList.contains(localObject2)) {
            localArrayList.add(localLiveAppModel);
          }
        }
        else
        {
          localLiveAppModel = new LiveAppModel();
          count = pid;
          uid = uid;
          name = str;
          file = getName(paramContext, localLiveAppModel.next());
          localArrayList.add(localLiveAppModel);
        }
      }
    }
    return localArrayList;
  }
  
  public static String getName(Context paramContext, String paramString)
  {
    Object localObject1 = names;
    try
    {
      boolean bool = ((Hashtable)localObject1).containsKey(paramString);
      if (bool)
      {
        paramContext = names;
        paramContext = paramContext.get(paramString);
        return (String)paramContext;
      }
      localObject1 = paramContext.getPackageManager();
      paramContext = paramContext.getPackageManager().getPackageInfo(paramString, 0);
      Object localObject2 = applicationInfo;
      localObject1 = ((PackageItemInfo)localObject2).loadLabel((PackageManager)localObject1).toString();
      localObject2 = names;
      paramContext = packageName;
      ((Hashtable)localObject2).put(paramContext, localObject1);
      return localObject1;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return paramString;
  }
  
  private static boolean ignore(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    return (paramString.contains("com.miui")) || (paramString.contains("com.huawei")) || (paramString.contains("com.zte")) || (paramString.contains("zte.com"));
  }
  
  public static List list(Context paramContext, List paramList)
  {
    ArrayList localArrayList = new ArrayList();
    File[] arrayOfFile = new File("/proc").listFiles();
    int i = 0;
    while (i < arrayOfFile.length)
    {
      Object localObject1 = arrayOfFile[i];
      if (((File)localObject1).isDirectory()) {}
      for (;;)
      {
        try
        {
          j = Integer.parseInt(((File)localObject1).getName());
        }
        catch (NumberFormatException localNumberFormatException)
        {
          int j;
          boolean bool;
          Object localObject2;
          continue;
        }
        try
        {
          localObject1 = new LiveAppModel(j);
          if (paramList != null)
          {
            bool = paramList.contains(((LiveAppModel)localObject1).next());
            if (bool)
            {
              localObject2 = getName(paramContext, ((LiveAppModel)localObject1).next());
              file = ((String)localObject2);
              localObject2 = name;
              bool = contains((String)localObject2);
              if (bool)
              {
                if (ByteVector.type)
                {
                  localObject2 = new StringBuilder("add process = ");
                  ((StringBuilder)localObject2).append(localObject1);
                  ByteVector.add(((StringBuilder)localObject2).toString());
                }
                localArrayList.add(localObject1);
              }
            }
          }
          else
          {
            localObject2 = getName(paramContext, ((LiveAppModel)localObject1).next());
            file = ((String)localObject2);
            localObject2 = name;
            bool = contains((String)localObject2);
            if (bool)
            {
              if (ByteVector.type)
              {
                localObject2 = new StringBuilder("add process = ");
                ((StringBuilder)localObject2).append(localObject1);
                ByteVector.add(((StringBuilder)localObject2).toString());
              }
              localArrayList.add(localObject1);
            }
          }
        }
        catch (LiveAppModel.NotAndroidAppProcessException localNotAndroidAppProcessException) {}catch (IOException localIOException) {}
      }
      i += 1;
    }
    return localArrayList;
  }
  
  private static boolean validate(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    return (paramString.startsWith("com.android")) || (paramString.contains("system"));
  }
}
