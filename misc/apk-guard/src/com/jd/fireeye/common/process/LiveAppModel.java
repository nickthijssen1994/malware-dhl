package com.jd.fireeye.common.process;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable.Creator;
import com.jd.fireeye.common.ByteVector;
import java.io.File;
import java.io.IOException;

public class LiveAppModel
  extends LiveProcessModel
{
  private static final boolean $assertionsDisabled = new File("/dev/cpuctl/tasks").exists();
  private static final String ACTION_UPDATE_ALL = "^([\\p{L}]{1}[\\p{L}\\p{N}_]*[\\.:])*[\\p{L}][\\p{L}\\p{N}_]*$";
  public static final Parcelable.Creator<LiveAppModel> CREATOR = new c();
  private static final String PAGE_KEY = "###";
  public boolean foreground;
  public int uid;
  
  public LiveAppModel() {}
  
  public LiveAppModel(int paramInt)
    throws IOException, LiveAppModel.NotAndroidAppProcessException
  {
    super(paramInt);
    boolean bool;
    if ((name != null) && (name.contains(".")) && (!name.contains("/")) && (name.matches("^([\\p{L}]{1}[\\p{L}\\p{N}_]*[\\.:])*[\\p{L}][\\p{L}\\p{N}_]*$"))) {
      if ($assertionsDisabled)
      {
        localObject2 = Cgroup.a(count);
        localObject1 = ((Cgroup)localObject2).getGroup("cpuacct");
        localObject2 = ((Cgroup)localObject2).getGroup("cpu");
        if (Build.VERSION.SDK_INT >= 21) {
          if ((localObject2 != null) && (localObject1 != null) && (name.contains("pid_")))
          {
            bool = name.contains("bg_non_interactive") ^ true;
            localObject1 = name;
          }
        }
      }
    }
    try
    {
      localObject1 = ((String)localObject1).split("/");
      localObject1 = localObject1[1];
      paramInt = Integer.parseInt(((String)localObject1).replace("uid_", ""));
    }
    catch (Exception localException1)
    {
      for (;;) {}
    }
    paramInt = Status.get(count).getUid();
    break label307;
    throw new NotAndroidAppProcessException(paramInt);
    if ((localObject2 != null) && (localObject1 != null) && (name.contains("apps")))
    {
      bool = name.contains("bg_non_interactive") ^ true;
      localObject2 = name;
      localObject1 = name;
    }
    try
    {
      paramInt = ((String)localObject1).lastIndexOf("/");
      paramInt = Integer.parseInt(((String)localObject2).substring(paramInt + 1));
    }
    catch (Exception localException2)
    {
      for (;;) {}
    }
    paramInt = Status.get(count).getUid();
    break label307;
    throw new NotAndroidAppProcessException(paramInt);
    Object localObject1 = Stat.get(count);
    Object localObject2 = Status.get(count);
    if (((Stat)localObject1).getMnc() == 0) {
      bool = true;
    } else {
      bool = false;
    }
    paramInt = ((Status)localObject2).getUid();
    label307:
    foreground = bool;
    uid = paramInt;
    return;
    if (ByteVector.type)
    {
      localObject1 = new StringBuilder("LiveAppModel.name = ");
      ((StringBuilder)localObject1).append(name);
      ByteVector.add(((StringBuilder)localObject1).toString());
    }
    throw new NotAndroidAppProcessException(paramInt);
  }
  
  protected LiveAppModel(Parcel paramParcel)
  {
    super(paramParcel);
    boolean bool;
    if (paramParcel.readByte() != 0) {
      bool = true;
    } else {
      bool = false;
    }
    foreground = bool;
    uid = paramParcel.readInt();
  }
  
  private PackageInfo getPackageInfo(Context paramContext, int paramInt)
    throws PackageManager.NameNotFoundException
  {
    return paramContext.getPackageManager().getPackageInfo(next(), paramInt);
  }
  
  public final String next()
  {
    return name.split(":")[0];
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(uid);
    localStringBuilder.append("###");
    localStringBuilder.append(count);
    localStringBuilder.append("###");
    localStringBuilder.append(name);
    localStringBuilder.append("###");
    localStringBuilder.append(file);
    return localStringBuilder.toString();
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    super.writeToParcel(paramParcel, paramInt);
    paramParcel.writeByte((byte)foreground);
    paramParcel.writeInt(uid);
  }
  
  public static final class NotAndroidAppProcessException
    extends Exception
  {
    public NotAndroidAppProcessException(int paramInt)
    {
      super();
    }
  }
}
