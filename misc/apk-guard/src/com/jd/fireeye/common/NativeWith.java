package com.jd.fireeye.common;

import android.content.Context;
import android.os.Build.VERSION;
import android.text.TextUtils;
import com.jd.fireeye.common.process.LiveAppModel;
import com.jd.fireeye.common.process.LiveProcessModel;
import com.jd.fireeye.common.process.Logger;
import com.jd.fireeye.security.ClassWriter;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;

public final class NativeWith
{
  public NativeWith() {}
  
  public static JSONObject get(Context paramContext)
  {
    JSONObject localJSONObject = new JSONObject();
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    Object localObject;
    if (Build.VERSION.SDK_INT < 21) {
      localObject = ClassWriter.this$0;
    }
    try
    {
      paramContext = Logger.execute(paramContext, (List)localObject);
      break label76;
      if (ClassWriter.items)
      {
        localObject = ClassWriter.this$0;
        paramContext = Logger.list(paramContext, (List)localObject);
      }
      else
      {
        localObject = ClassWriter.this$0;
        paramContext = Logger.doInBackground(paramContext, (List)localObject);
      }
      label76:
      if (paramContext != null)
      {
        int j = paramContext.size();
        if (j > 0)
        {
          paramContext = paramContext.iterator();
          for (;;)
          {
            boolean bool = paramContext.hasNext();
            if (!bool) {
              break;
            }
            localObject = paramContext.next();
            localObject = (LiveAppModel)localObject;
            String str = name;
            bool = TextUtils.isEmpty(str);
            if (!bool)
            {
              j = i + 1;
              i = j;
              if (j < 100)
              {
                localStringBuilder.append(((LiveAppModel)localObject).toString());
                localStringBuilder.append("$$$");
                i = j;
              }
            }
          }
          j = localStringBuilder.length();
          if (j > 3)
          {
            j = localStringBuilder.length();
            localStringBuilder.delete(j - 3, localStringBuilder.length());
          }
          localJSONObject.put("processCount", String.valueOf(i));
          localJSONObject.put("processList", localStringBuilder.toString());
          return localJSONObject;
        }
      }
    }
    catch (Exception paramContext) {}
    return localJSONObject;
  }
  
  public static JSONObject init(Context paramContext)
  {
    JSONObject localJSONObject = new JSONObject();
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    if (Build.VERSION.SDK_INT < 21) {}
    try
    {
      paramContext = Logger.execute(paramContext, null);
      break label58;
      if (ClassWriter.items) {
        paramContext = Logger.list(paramContext, null);
      } else {
        paramContext = Logger.doInBackground(paramContext, null);
      }
      label58:
      if (paramContext != null)
      {
        int j = paramContext.size();
        if (j > 0)
        {
          paramContext = paramContext.iterator();
          for (;;)
          {
            boolean bool = paramContext.hasNext();
            if (!bool) {
              break;
            }
            Object localObject = paramContext.next();
            localObject = (LiveAppModel)localObject;
            String str = name;
            bool = TextUtils.isEmpty(str);
            if (!bool)
            {
              j = i + 1;
              i = j;
              if (j < 100)
              {
                localStringBuilder.append(((LiveAppModel)localObject).toString());
                localStringBuilder.append("$$$");
                i = j;
              }
            }
          }
          j = localStringBuilder.length();
          if (j > 3)
          {
            j = localStringBuilder.length();
            localStringBuilder.delete(j - 3, localStringBuilder.length());
          }
          localJSONObject.put("processCount", String.valueOf(i));
          localJSONObject.put("processList", localStringBuilder.toString());
          return localJSONObject;
        }
      }
    }
    catch (Exception paramContext) {}
    return localJSONObject;
  }
}
