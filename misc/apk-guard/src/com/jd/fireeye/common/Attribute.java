package com.jd.fireeye.common;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.os.Build.VERSION;
import android.os.Process;
import android.text.TextUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.security.MessageDigest;

public final class Attribute
{
  private static final String CVS_ID = "AppBaseUtil";
  private static String a;
  
  public Attribute() {}
  
  private static String a(Context paramContext)
  {
    if (!TextUtils.isEmpty(a)) {
      return a;
    }
    if (paramContext != null)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramContext.getPackageName());
      localStringBuilder.append("_com.jma.track");
      a = localStringBuilder.toString();
    }
    return a;
  }
  
  private static String a(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder(paramArrayOfByte.length * 2);
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      Object localObject2 = Integer.toHexString(paramArrayOfByte[i]);
      Object localObject1 = localObject2;
      int j = ((String)localObject2).length();
      if (j == 1)
      {
        localObject1 = new StringBuilder("0");
        ((StringBuilder)localObject1).append((String)localObject2);
        localObject1 = ((StringBuilder)localObject1).toString();
      }
      localObject2 = localObject1;
      if (j > 2) {
        localObject2 = ((String)localObject1).substring(j - 2, j);
      }
      localStringBuilder.append(((String)localObject2).toLowerCase());
      i += 1;
    }
    return localStringBuilder.toString();
  }
  
  private static String encode(byte[] paramArrayOfByte)
  {
    try
    {
      byte[] arrayOfByte = MessageDigest.getInstance("SHA1").digest(paramArrayOfByte);
      int i = arrayOfByte.length;
      StringBuilder localStringBuilder = new StringBuilder(i * 2);
      i = 0;
      for (;;)
      {
        int j = arrayOfByte.length;
        if (i >= j) {
          break;
        }
        Object localObject = Integer.toHexString(arrayOfByte[i]);
        paramArrayOfByte = (byte[])localObject;
        j = ((String)localObject).length();
        if (j == 1)
        {
          paramArrayOfByte = new StringBuilder("0");
          paramArrayOfByte.append((String)localObject);
          paramArrayOfByte = paramArrayOfByte.toString();
        }
        localObject = paramArrayOfByte;
        if (j > 2) {
          localObject = paramArrayOfByte.substring(j - 2, j);
        }
        localStringBuilder.append(((String)localObject).toLowerCase());
        i += 1;
      }
      paramArrayOfByte = localStringBuilder.toString();
      return paramArrayOfByte;
    }
    catch (Throwable paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return "";
  }
  
  private static Signature[] evaluate(Context paramContext, String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = paramContext.getPackageInfo(paramString, 64);
      if (paramContext == null) {
        return null;
      }
      return signatures;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    if (ByteVector.type)
    {
      paramContext = new StringBuilder();
      paramContext.append(paramString);
      paramContext.append(" not installed!");
      ByteVector.get("AppBaseUtil", paramContext.toString());
      return null;
    }
    return null;
  }
  
  public static String get(Context paramContext, String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      ByteVector.get("AppBaseUtil", "pkName is null");
      return "";
    }
    if (paramContext == null)
    {
      ByteVector.get("AppBaseUtil", "context is null");
      return "";
    }
    try
    {
      paramContext = evaluate(paramContext, paramString);
      if (paramContext != null)
      {
        int i = paramContext.length;
        if (i != 0)
        {
          paramContext = paramContext[0];
          if (paramContext == null) {
            break label117;
          }
          paramContext = encode(paramContext.toByteArray());
          boolean bool = ByteVector.type;
          if (!bool) {
            return paramContext;
          }
          paramString = new StringBuilder("signatureStr = ");
          paramString.append(paramContext);
          ByteVector.get("AppBaseUtil", paramString.toString());
          return paramContext;
        }
      }
      ByteVector.get("AppBaseUtil", "sign is null");
      return "";
    }
    catch (Throwable paramContext)
    {
      paramContext.printStackTrace();
    }
    label117:
    return "";
    return paramContext;
  }
  
  private static String getName(Context paramContext)
  {
    paramContext = getPackageInfo(paramContext);
    if (paramContext == null) {
      return "";
    }
    return packageName;
  }
  
  private static String getNamespace()
  {
    return "4.1.3";
  }
  
  private static PackageInfo getPackageInfo(Context paramContext)
  {
    if (paramContext != null) {}
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    return null;
  }
  
  private static int getSdkIntInternal()
  {
    return Build.VERSION.SDK_INT;
  }
  
  public static String getString()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static int getVersion(Context paramContext)
  {
    paramContext = getPackageInfo(paramContext);
    if (paramContext == null) {
      return 0;
    }
    return versionCode;
  }
  
  public static String getVersionName(Context paramContext)
  {
    paramContext = getPackageInfo(paramContext);
    if (paramContext == null) {
      return "";
    }
    paramContext = versionName;
    if (!TextUtils.isEmpty(paramContext)) {
      return paramContext;
    }
    return "";
  }
  
  private static String read()
  {
    try
    {
      long l1 = System.currentTimeMillis();
      Object localObject1 = new StringBuilder("/proc/");
      ((StringBuilder)localObject1).append(Process.myPid());
      ((StringBuilder)localObject1).append("/cmdline");
      localObject1 = new File(((StringBuilder)localObject1).toString());
      Object localObject2 = new BufferedReader(new FileReader((File)localObject1));
      localObject1 = ((BufferedReader)localObject2).readLine().trim();
      ((BufferedReader)localObject2).close();
      localObject2 = new StringBuilder("getProcessName by file  = ");
      long l2 = System.currentTimeMillis();
      ((StringBuilder)localObject2).append(l2 - l1);
      ByteVector.add(((StringBuilder)localObject2).toString());
      return localObject1;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }
}
