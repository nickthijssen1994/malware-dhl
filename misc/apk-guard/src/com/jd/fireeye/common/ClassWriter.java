package com.jd.fireeye.common;

import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class ClassWriter
{
  public static final String[] a = { "/system", "/system/bin", "/system/sbin", "/system/xbin", "/vendor/bin", "/sbin", "/etc" };
  public static final String[] c;
  private static int k;
  public static final String[] m = { "eu.chainfire.supersu", "com.koushikdutta.superuser", "com.thirdparty.superuser", "com.yellowes.su", "com.qihoo.permmgr", "com.wmshua.wmroot", "com.baidu.easyroot", "com.baiyi_mobile.easyroot", "com.mgyun.shua.su", "com.z4mod.z4root", "com.shuame.rootgenius", "com.zhiqupk.root", "com.kingroot.kinguser", "com.apkol.root", "com.corner23.android.universalandroot", "com.roothelper" };
  public static final String[] s;
  
  static
  {
    c = new String[] { "de.robv.android.xposed.installer", "com.saurik.substrate", "com.zachspong.temprootremovejb", "com.amphoras.hidemyroot", "com.amphoras.hidemyrootadfree", "com.formyhm.hiderootPremium", "com.formyhm.hideroot" };
    s = new String[] { "/data/local/", "/data/local/bin/", "/data/local/xbin/", "/sbin/", "/su/bin/", "/system/bin/", "/system/bin/.ext/", "/system/bin/failsafe/", "/system/sd/xbin/", "/system/usr/we-need-root/", "/system/xbin/" };
  }
  
  public ClassWriter() {}
  
  public static int a()
  {
    String[] arrayOfString = s;
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      String str = arrayOfString[i];
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(str);
      localStringBuilder.append("su");
      if (new File(localStringBuilder.toString()).exists())
      {
        i = 1;
        break label74;
      }
      i += 1;
    }
    i = 0;
    label74:
    if (i != 0) {
      k = 1;
    } else if (doInBackground()) {
      k = 9;
    } else {
      k = 0;
    }
    return k;
  }
  
  public static int a(Context paramContext)
  {
    if (k != 0) {
      return 0;
    }
    HashSet localHashSet = new HashSet();
    localHashSet.addAll(Arrays.asList(m));
    localHashSet.addAll(com.jd.fireeye.security.ClassWriter.f);
    if (get(localHashSet, paramContext)) {
      return 1;
    }
    localHashSet = new HashSet();
    localHashSet.addAll(Arrays.asList(c));
    localHashSet.addAll(com.jd.fireeye.security.ClassWriter.a);
    if (get(localHashSet, paramContext)) {
      return 2;
    }
    if (get()) {
      return 3;
    }
    return 0;
  }
  
  private static boolean a(String paramString)
  {
    String[] arrayOfString = s;
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      String str = arrayOfString[i];
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(str);
      localStringBuilder.append(paramString);
      if (new File(localStringBuilder.toString()).exists()) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private static boolean doInBackground()
  {
    try
    {
      Object localObject = get("mount");
      if (localObject != null)
      {
        int i = ((ArrayList)localObject).size();
        if (i > 0)
        {
          Iterator localIterator = ((ArrayList)localObject).iterator();
          for (;;)
          {
            boolean bool = localIterator.hasNext();
            if (!bool) {
              break;
            }
            localObject = localIterator.next();
            localObject = (String)localObject;
            String[] arrayOfString2 = ((String)localObject).split("\\s+");
            int n = arrayOfString2.length;
            if (n >= 4)
            {
              String[] arrayOfString1 = null;
              i = 1;
              for (;;)
              {
                localObject = arrayOfString1;
                if (i >= n) {
                  break;
                }
                localObject = arrayOfString2[i];
                bool = ((String)localObject).startsWith("/");
                if (bool)
                {
                  localObject = arrayOfString2[i];
                  break;
                }
                i += 1;
              }
              if ((i < n) && (localObject != null))
              {
                arrayOfString1 = a;
                int i1 = arrayOfString1.length;
                int j = 0;
                while (j < i1)
                {
                  String str = arrayOfString1[j];
                  bool = str.equalsIgnoreCase((String)localObject);
                  if (bool)
                  {
                    j = 1;
                    break label187;
                  }
                  j += 1;
                }
                j = 0;
                label187:
                if (j != 0) {
                  while (i < n)
                  {
                    localObject = arrayOfString2[i];
                    bool = ((String)localObject).contains("rw");
                    if (bool)
                    {
                      localObject = arrayOfString2[i];
                      localObject = ((String)localObject).split("[(,)]");
                      i1 = localObject.length;
                      j = 0;
                      while (j < i1)
                      {
                        arrayOfString1 = localObject[j];
                        bool = "rw".equalsIgnoreCase(arrayOfString1);
                        if (bool) {
                          return true;
                        }
                        j += 1;
                      }
                    }
                    i += 1;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        return false;
      }
    }
    catch (Exception localException) {}
    return false;
  }
  
  /* Error */
  private static ArrayList get(String paramString)
  {
    // Byte code:
    //   0: new 177	java/util/ArrayList
    //   3: dup
    //   4: invokespecial 220	java/util/ArrayList:<init>	()V
    //   7: astore_3
    //   8: aconst_null
    //   9: astore_2
    //   10: new 222	java/io/BufferedReader
    //   13: dup
    //   14: new 224	java/io/InputStreamReader
    //   17: dup
    //   18: invokestatic 230	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   21: aload_0
    //   22: invokevirtual 234	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   25: invokevirtual 240	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   28: invokespecial 243	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   31: invokespecial 246	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   34: astore_1
    //   35: aload_1
    //   36: astore_0
    //   37: aload_1
    //   38: invokevirtual 249	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   41: astore_2
    //   42: aload_2
    //   43: ifnull +14 -> 57
    //   46: aload_1
    //   47: astore_0
    //   48: aload_3
    //   49: aload_2
    //   50: invokevirtual 253	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   53: pop
    //   54: goto -19 -> 35
    //   57: aload_1
    //   58: invokevirtual 256	java/io/BufferedReader:close	()V
    //   61: aload_3
    //   62: areturn
    //   63: astore_0
    //   64: aload_0
    //   65: invokevirtual 259	java/io/IOException:printStackTrace	()V
    //   68: aload_3
    //   69: areturn
    //   70: astore_2
    //   71: goto +12 -> 83
    //   74: astore_0
    //   75: aload_2
    //   76: astore_1
    //   77: goto +34 -> 111
    //   80: astore_2
    //   81: aconst_null
    //   82: astore_1
    //   83: aload_1
    //   84: astore_0
    //   85: aload_2
    //   86: invokevirtual 259	java/io/IOException:printStackTrace	()V
    //   89: aload_1
    //   90: ifnull +39 -> 129
    //   93: aload_1
    //   94: invokevirtual 256	java/io/BufferedReader:close	()V
    //   97: aconst_null
    //   98: areturn
    //   99: astore_0
    //   100: aload_0
    //   101: invokevirtual 259	java/io/IOException:printStackTrace	()V
    //   104: aconst_null
    //   105: areturn
    //   106: astore_2
    //   107: aload_0
    //   108: astore_1
    //   109: aload_2
    //   110: astore_0
    //   111: aload_1
    //   112: ifnull +15 -> 127
    //   115: aload_1
    //   116: invokevirtual 256	java/io/BufferedReader:close	()V
    //   119: goto +8 -> 127
    //   122: astore_1
    //   123: aload_1
    //   124: invokevirtual 259	java/io/IOException:printStackTrace	()V
    //   127: aload_0
    //   128: athrow
    //   129: aconst_null
    //   130: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	131	0	paramString	String
    //   34	82	1	localObject	Object
    //   122	2	1	localIOException1	java.io.IOException
    //   9	41	2	str	String
    //   70	6	2	localIOException2	java.io.IOException
    //   80	6	2	localIOException3	java.io.IOException
    //   106	4	2	localThrowable	Throwable
    //   7	62	3	localArrayList	ArrayList
    // Exception table:
    //   from	to	target	type
    //   57	61	63	java/io/IOException
    //   37	42	70	java/io/IOException
    //   48	54	70	java/io/IOException
    //   10	35	74	java/lang/Throwable
    //   10	35	80	java/io/IOException
    //   93	97	99	java/io/IOException
    //   37	42	106	java/lang/Throwable
    //   48	54	106	java/lang/Throwable
    //   85	89	106	java/lang/Throwable
    //   115	119	122	java/io/IOException
  }
  
  private static boolean get()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("ro.debuggable", "1");
    localHashMap.put("ro.secure", "0");
    try
    {
      Class localClass = Class.forName("android.os.SystemProperties");
      Method localMethod = localClass.getDeclaredMethod("get", new Class[] { String.class });
      Iterator localIterator = localHashMap.keySet().iterator();
      boolean bool;
      do
      {
        bool = localIterator.hasNext();
        if (!bool) {
          break;
        }
        Object localObject = localIterator.next();
        localObject = (String)localObject;
        bool = localMethod.invoke(localClass, new Object[] { localObject }).equals(localHashMap.get(localObject));
      } while (!bool);
      return true;
      return false;
    }
    catch (Exception localException) {}
    return false;
  }
  
  private static boolean get(Context paramContext)
  {
    HashSet localHashSet = new HashSet();
    localHashSet.addAll(Arrays.asList(c));
    localHashSet.addAll(com.jd.fireeye.security.ClassWriter.a);
    return get(localHashSet, paramContext);
  }
  
  private static boolean get(Set paramSet, Context paramContext)
  {
    paramContext = paramContext.getPackageManager();
    paramSet = paramSet.iterator();
    for (;;)
    {
      String str;
      if (paramSet.hasNext()) {
        str = (String)paramSet.next();
      }
      try
      {
        paramContext.getPackageInfo(str, 0);
        return true;
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException) {}
      return false;
    }
  }
  
  private static ArrayList newFloat()
  {
    return get("mount");
  }
  
  private static boolean put(Context paramContext)
  {
    HashSet localHashSet = new HashSet();
    localHashSet.addAll(Arrays.asList(m));
    localHashSet.addAll(com.jd.fireeye.security.ClassWriter.f);
    return get(localHashSet, paramContext);
  }
}
