package com.jd.fireeye.common;

import com.jd.fireeye.security.ByteVector;
import java.io.IOException;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

public final class Base64
{
  public static final String CIPHER = "AES";
  public static final String KEY_FACTORY_ALGORITHM = "RSA";
  public static final String MAP = "16-Bytes--String";
  public static final String PREFERRED_ENCODING = "UTF-8";
  
  public Base64() {}
  
  private static String decode(String paramString1, String paramString2)
    throws Exception
  {
    paramString2 = new PKCS8EncodedKeySpec(decode(paramString2));
    paramString2 = KeyFactory.getInstance("RSA").generatePrivate(paramString2);
    Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    localCipher.init(2, paramString2);
    return new String(localCipher.doFinal(decode(paramString1)), "UTF-8");
  }
  
  public static byte[] decode(String paramString)
    throws IOException
  {
    return android.util.Base64.decode(paramString.getBytes(), 0);
  }
  
  private static byte[] decode(byte[] paramArrayOfByte, String paramString, int paramInt)
    throws Exception
  {
    paramString = new SecretKeySpec(paramString.getBytes("UTF-8"), "AES");
    IvParameterSpec localIvParameterSpec = new IvParameterSpec("16-Bytes--String".getBytes("UTF-8"));
    Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    localCipher.init(paramInt, paramString, localIvParameterSpec);
    return localCipher.doFinal(paramArrayOfByte);
  }
  
  private static String decodeBase64(String paramString1, String paramString2)
    throws Exception
  {
    return new String(decode(decode(paramString1), paramString2, 2), "UTF-8");
  }
  
  public static String encode()
  {
    Random localRandom = new Random();
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    while (i < 16)
    {
      localStringBuffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".charAt(localRandom.nextInt(62)));
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  private static String encode(String paramString1, String paramString2)
    throws Exception
  {
    return encode(decode(paramString1.getBytes("UTF-8"), paramString2, 1));
  }
  
  public static String encode(byte[] paramArrayOfByte)
  {
    return new String(android.util.Base64.encode(paramArrayOfByte, 0));
  }
  
  public static String encrypt(String paramString1, String paramString2)
    throws Exception
  {
    paramString2 = new X509EncodedKeySpec(decode(paramString2));
    paramString2 = KeyFactory.getInstance("RSA").generatePublic(paramString2);
    Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    localCipher.init(1, paramString2);
    return encode(localCipher.doFinal(paramString1.getBytes("UTF-8")));
  }
  
  public static JSONObject write(String paramString)
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("appkey", ByteVector.getValue());
      localJSONObject.put("head", ByteVector.add());
      String str = ByteVector.put();
      localJSONObject.put("info", URLEncoder.encode(encode(decode(paramString.getBytes("UTF-8"), str, 1)), "UTF-8"));
      return localJSONObject;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return localJSONObject;
  }
}
