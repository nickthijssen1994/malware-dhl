package com.jd.fireeye.common;

public final class StringBuilder
{
  public StringBuilder() {}
  
  private static String ReadFile(String paramString)
  {
    return toString(paramString, "Unicode", "UTF-8");
  }
  
  private static String hexString(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      localStringBuffer.append(String.format("%02X", new Object[] { Byte.valueOf(paramArrayOfByte[i]) }));
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  private static byte[] hexStringToBytes(String paramString)
  {
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    while (i < j)
    {
      int k = i * 2;
      arrayOfByte[i] = Integer.valueOf(paramString.substring(k, k + 2), 16).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  private static String readResponseBody(String paramString)
  {
    return toString(paramString, "GBK", "UTF-8");
  }
  
  public static String readString(String paramString)
  {
    return toString(paramString, "UTF-8", "UTF-8");
  }
  
  private static String result(String paramString)
  {
    return toString(paramString, "GBK");
  }
  
  private static String slice(String paramString)
  {
    return toString(paramString, "Unicode");
  }
  
  private static String substring(String paramString)
  {
    return toString(paramString, "UTF-16LE");
  }
  
  public static String toString(String paramString)
  {
    return toString(paramString, "UTF-8");
  }
  
  public static String toString(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = paramString1.getBytes(paramString2);
      paramString2 = new StringBuffer();
      int i = 0;
      while (i < paramString1.length)
      {
        byte b = paramString1[i];
        paramString2.append(String.format("%02X", new Object[] { Byte.valueOf(b) }));
        i += 1;
      }
      paramString1 = paramString2.toString();
      return paramString1;
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
    return "";
  }
  
  public static String toString(String paramString1, String paramString2, String paramString3)
  {
    int j = paramString1.length() / 2;
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    while (i < j)
    {
      int k = i * 2;
      arrayOfByte[i] = Integer.valueOf(paramString1.substring(k, k + 2), 16).byteValue();
      i += 1;
    }
    try
    {
      boolean bool = paramString2.equals(paramString3);
      if (bool)
      {
        paramString1 = new String(arrayOfByte, paramString2);
        return paramString1;
      }
      paramString1 = new String(new String(arrayOfByte, paramString2).getBytes(), paramString3);
      return paramString1;
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
    return "";
  }
}
