package com.jd.fireeye.security;

import android.app.Application;
import android.content.Context;
import android.text.TextUtils;
import com.jd.fireeye.common.Base64;
import com.jd.fireeye.network.f;
import java.net.URLEncoder;
import java.security.Key;
import java.security.KeyFactory;
import java.security.spec.KeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Random;
import javax.crypto.Cipher;

public final class ByteVector
{
  public static Context a;
  private static boolean b;
  private static String buffer;
  public static Application c;
  private static String count;
  private static String data;
  private static String e;
  private static String key;
  private static String length;
  private static String n;
  private static String s;
  private static String size;
  private static String uri;
  
  public ByteVector() {}
  
  public static void a(String paramString)
  {
    if (com.jd.fireeye.common.ByteVector.type)
    {
      StringBuilder localStringBuilder = new StringBuilder("try update extUniqueId = ");
      localStringBuilder.append(paramString);
      com.jd.fireeye.common.ByteVector.add(localStringBuilder.toString());
    }
    if (!TextUtils.isEmpty(paramString)) {
      e = paramString;
    }
  }
  
  public static boolean a()
  {
    return b;
  }
  
  public static String add()
  {
    if (TextUtils.isEmpty(uri)) {
      com.jd.fireeye.common.ByteVector.a("FireEyeSDK Error", "encryptPrivateKey is NULL!");
    }
    return uri;
  }
  
  public static void add(String paramString)
  {
    n = paramString;
  }
  
  private static String b()
  {
    if (TextUtils.isEmpty(length)) {
      com.jd.fireeye.common.ByteVector.a("FireEyeSDK Error", "publicKey is NULL!");
    }
    return length;
  }
  
  public static void b(Context paramContext)
  {
    if (a == null) {
      if ((paramContext instanceof Application))
      {
        c = (Application)paramContext;
        a = paramContext;
      }
      else if (paramContext != null)
      {
        Context localContext = paramContext.getApplicationContext();
        a = localContext;
        if ((localContext instanceof Application)) {
          c = (Application)localContext;
        }
      }
    }
    if ((f.c == null) && (paramContext != null)) {
      f.c = paramContext.getApplicationContext();
    }
  }
  
  public static String d()
  {
    return n;
  }
  
  public static String get()
  {
    String str = buffer;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public static String getName()
  {
    String str = s;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public static String getTitle()
  {
    String str = e;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public static String getValue()
  {
    if (TextUtils.isEmpty(key)) {
      com.jd.fireeye.common.ByteVector.a("FireEyeSDK Error", "appKey  is NULL!");
    }
    return key;
  }
  
  public static void init(FireEyeBaseData paramFireEyeBaseData)
  {
    if (paramFireEyeBaseData != null)
    {
      e = paramFireEyeBaseData.getDeviceCode();
      size = paramFireEyeBaseData.getUnionId();
      count = paramFireEyeBaseData.getSubunionId();
      buffer = paramFireEyeBaseData.getPartner();
      s = paramFireEyeBaseData.getInstalltionid();
      n = paramFireEyeBaseData.getOaId();
      length = paramFireEyeBaseData.getPublicKey();
      key = paramFireEyeBaseData.getAppKey();
      paramFireEyeBaseData = new Random();
      StringBuffer localStringBuffer = new StringBuffer();
      int i = 0;
      while (i < 16)
      {
        localStringBuffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".charAt(paramFireEyeBaseData.nextInt(62)));
        i += 1;
      }
      data = localStringBuffer.toString();
      write();
    }
  }
  
  public static String length()
  {
    String str = count;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public static String put()
  {
    return data;
  }
  
  private static void putByte(String paramString)
  {
    key = paramString;
  }
  
  private static void putLong(String paramString)
  {
    length = paramString;
    write();
  }
  
  public static String read()
  {
    String str = size;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  private static void write()
  {
    String str = data;
    Object localObject = length;
    try
    {
      boolean bool = TextUtils.isEmpty((CharSequence)localObject);
      if (bool) {
        com.jd.fireeye.common.ByteVector.a("FireEyeSDK Error", "publicKey is NULL!");
      }
      localObject = length;
      localObject = Base64.decode((String)localObject);
      localObject = new X509EncodedKeySpec((byte[])localObject);
      localObject = KeyFactory.getInstance("RSA").generatePublic((KeySpec)localObject);
      Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
      localCipher.init(1, (Key)localObject);
      str = URLEncoder.encode(Base64.encode(localCipher.doFinal(str.getBytes("UTF-8"))), "UTF-8");
      uri = str;
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      uri = "";
    }
  }
  
  public static void write(boolean paramBoolean)
  {
    b = paramBoolean;
  }
}
