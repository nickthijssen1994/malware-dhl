package com.jd.android.sdk.coreinfo.util;

import android.content.ContentResolver;
import android.content.Context;
import android.os.Build.VERSION;
import android.os.IBinder;
import android.os.Process;
import android.provider.Settings.Secure;
import android.text.TextUtils;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashSet;

public final class d
{
  private static String a(Context paramContext, String paramString)
  {
    try
    {
      Method localMethod = Class.forName("android.os.UserHandle").getDeclaredMethod("getUserId", new Class[] { Integer.TYPE });
      localMethod.setAccessible(true);
      int i = ((Integer)localMethod.invoke(null, new Object[] { Integer.valueOf(Process.myUid()) })).intValue();
      localMethod = Class.forName("android.provider.Settings$Secure").getDeclaredMethod("getStringForUser", new Class[] { ContentResolver.class, String.class, Integer.TYPE });
      localMethod.setAccessible(true);
      paramContext = (String)localMethod.invoke(null, new Object[] { paramContext.getContentResolver(), paramString, Integer.valueOf(i) });
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
  }
  
  public static String c(Context paramContext)
  {
    Object localObject3 = "";
    Object localObject1;
    if (paramContext != null)
    {
      Object localObject2 = localObject3;
      try
      {
        int i = Build.VERSION.SDK_INT;
        localObject1 = localObject3;
        if (i < 28)
        {
          localObject2 = localObject3;
          localObject1 = get(paramContext, "android_id");
          localObject3 = localObject1;
          localObject2 = localObject3;
          bool = TextUtils.isEmpty((CharSequence)localObject1);
          localObject1 = localObject3;
          if (bool)
          {
            localObject2 = localObject3;
            localObject1 = a(paramContext, "android_id");
          }
        }
        localObject2 = localObject1;
        boolean bool = ((String)localObject1).equals("");
        if (!bool) {
          return localObject1;
        }
        localObject2 = localObject1;
        paramContext = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
        return paramContext;
      }
      catch (Throwable paramContext)
      {
        return localObject2;
      }
    }
    return "";
    return localObject1;
  }
  
  private static String get(Context paramContext, String paramString)
  {
    ContentResolver localContentResolver = paramContext.getContentResolver();
    for (;;)
    {
      try
      {
        paramContext = Class.forName("android.os.UserHandle").getDeclaredMethod("getUserId", new Class[] { Integer.TYPE });
        paramContext.setAccessible(true);
        j = ((Integer)paramContext.invoke(null, new Object[] { Integer.valueOf(Process.myUid()) })).intValue();
        paramContext = new HashSet();
        localHashSet = new HashSet();
        localObject1 = new HashSet();
      }
      catch (Throwable paramContext)
      {
        int j;
        HashSet localHashSet;
        Object localObject1;
        Object localObject2;
        Field localField;
        boolean bool;
        continue;
      }
      try
      {
        localObject2 = Class.forName("android.provider.Settings$Global");
        localField = ((Class)localObject2).getDeclaredField("MOVED_TO_SECURE");
        localField.setAccessible(true);
        localObject2 = localField.get(localObject2);
        paramContext = (HashSet)localObject2;
      }
      catch (Exception localException1)
      {
        continue;
      }
      catch (Throwable paramContext)
      {
        continue;
      }
      try
      {
        localObject2 = Class.forName("android.provider.Settings$Secure");
        localField = ((Class)localObject2).getDeclaredField("MOVED_TO_LOCK_SETTINGS");
        localField.setAccessible(true);
        localObject2 = localField.get(localObject2);
        localHashSet = (HashSet)localObject2;
      }
      catch (Exception localException2)
      {
        continue;
      }
      catch (Throwable paramContext)
      {
        continue;
      }
      try
      {
        localObject2 = Class.forName("android.provider.Settings$Secure");
        localField = ((Class)localObject2).getDeclaredField("MOVED_TO_GLOBAL");
        localField.setAccessible(true);
        localObject2 = localField.get(localObject2);
        localObject1 = (HashSet)localObject2;
      }
      catch (Exception localException3)
      {
        continue;
      }
      catch (Throwable paramContext)
      {
        continue;
      }
      try
      {
        bool = paramContext.contains(paramString);
        if (!bool)
        {
          bool = ((HashSet)localObject1).contains(paramString);
          if (bool)
          {
            paramContext = Class.forName("android.provider.Global").getDeclaredMethod("getStringForUser", new Class[] { ContentResolver.class, String.class, Integer.TYPE });
            paramContext.setAccessible(true);
            paramContext = (String)paramContext.invoke(null, new Object[] { localContentResolver, paramString, Integer.valueOf(j) });
            return paramContext;
          }
          bool = localHashSet.contains(paramString);
          if (bool)
          {
            paramContext = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[0]);
            paramContext.setAccessible(true);
            paramContext = (IBinder)paramContext.invoke(null, new Object[] { "lock_settings" });
            localObject1 = Class.forName("com.android.internal.widget.ILockSettings$Stub").getDeclaredMethod("asInterface", new Class[] { IBinder.class });
            ((Method)localObject1).setAccessible(true);
            paramContext = ((Method)localObject1).invoke(null, new Object[] { paramContext });
            int i = Process.myUid();
            if (i == 1000) {
              i = 1;
            } else {
              i = 0;
            }
            bool = localHashSet.contains(paramString);
            if ((bool) && (paramContext != null) && (i == 0))
            {
              paramContext = (String)paramContext.getClass().getDeclaredMethod("getString", new Class[] { String.class, String.class, Integer.TYPE }).invoke(paramString, new Object[] { "0", Integer.valueOf(j) });
              return paramContext;
            }
          }
        }
        paramContext = Class.forName("android.provider.Settings$Secure").getDeclaredField("sNameValueCache");
        paramContext.setAccessible(true);
        paramContext = paramContext.get(null);
        paramContext = (String)paramContext.getClass().getDeclaredMethod("getStringForUser", new Class[] { ContentResolver.class, String.class, Integer.TYPE }).invoke(paramContext, new Object[] { localContentResolver, paramString, Integer.valueOf(j) });
        return paramContext;
      }
      catch (Throwable paramContext) {}
    }
    return "";
  }
}
