package com.jd.android.sdk.coreinfo.c;

import android.os.IBinder;
import android.os.Parcel;
import android.text.TextUtils;
import java.lang.reflect.Field;

public final class Context
{
  public static String create(Class paramClass)
  {
    paramClass = paramClass.getDeclaredField("DESCRIPTOR");
    paramClass.setAccessible(true);
    return (String)paramClass.get(null);
  }
  
  public static String decode(String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    if ((!TextUtils.isEmpty(paramString)) && (paramString.startsWith("Result: Parcel")))
    {
      paramString = paramString.toCharArray();
      int m = paramString.length;
      int i = 0;
      int k;
      for (int j = 0; i < m; j = k)
      {
        char c = paramString[i];
        k = j;
        if (c == '\'') {
          k = j ^ 0x1;
        }
        if ((k != 0) && (Character.isLetterOrDigit(c))) {
          localStringBuffer.append(c);
        }
        i += 1;
      }
    }
    return localStringBuffer.toString();
  }
  
  public static int get(Object paramObject, String paramString)
  {
    paramString = paramObject.getClass().getEnclosingClass().getDeclaredField(paramString);
    paramString.setAccessible(true);
    return ((Integer)paramString.get(paramObject)).intValue();
  }
  
  public static String get(String paramString1, IBinder paramIBinder, String paramString2, int paramInt)
  {
    Parcel localParcel1 = Parcel.obtain();
    Parcel localParcel2 = Parcel.obtain();
    try
    {
      localParcel1.writeInterfaceToken(paramString2);
      boolean bool = TextUtils.isEmpty(paramString1);
      if (!bool) {
        localParcel1.writeString(paramString1);
      }
      paramIBinder.transact(paramInt, localParcel1, localParcel2, 0);
      localParcel2.readException();
      paramString1 = localParcel2.readString();
      localParcel2.recycle();
      localParcel1.recycle();
      return paramString1;
    }
    catch (Throwable paramString1)
    {
      localParcel2.recycle();
      localParcel1.recycle();
      throw paramString1;
    }
  }
  
  public static String toString(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString1)) {
      return paramString2;
    }
    return paramString1;
  }
}
