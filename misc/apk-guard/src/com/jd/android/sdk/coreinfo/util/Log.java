package com.jd.android.sdk.coreinfo.util;

import android.content.pm.PackageManager;
import android.os.Build.VERSION;
import android.os.IBinder;
import android.telephony.TelephonyManager;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public final class Log
{
  private static String configure(android.content.Context paramContext)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localObject = (TelephonyManager)paramContext.getSystemService("phone");
        localMethod = TelephonyManager.class.getDeclaredMethod("getITelephony", new Class[0]);
        localMethod.setAccessible(true);
        localObject = localMethod.invoke(localObject, new Object[0]);
        localObject.getClass().getDeclaredMethod("asBinder", new Class[0]).setAccessible(true);
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        Method localMethod;
        boolean bool;
        continue;
      }
      try
      {
        localMethod = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[] { String.class });
        if (localMethod == null) {
          continue;
        }
        str = (String)localMethod.invoke(localObject, new Object[] { paramContext.getPackageName() });
      }
      catch (Throwable paramContext) {}
    }
    str = "";
    try
    {
      bool = set(str);
      if (bool) {
        return str;
      }
      paramContext = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[0]);
      if (paramContext == null) {
        return str;
      }
      paramContext = (String)paramContext.invoke(localObject, new Object[0]);
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return str;
  }
  
  private static String decode(android.content.Context paramContext)
  {
    for (;;)
    {
      try
      {
        localObject = Class.forName("com.android.internal.telephony.ITelephony$Stub").getDeclaredField("TRANSACTION_getDeviceId");
        if (localObject == null) {
          break label117;
        }
        ((Field)localObject).setAccessible(true);
        i = ((Field)localObject).getInt(null);
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        int i;
        boolean bool;
        continue;
      }
      try
      {
        localObject = new StringBuilder("service call phone ");
        ((StringBuilder)localObject).append(i);
        ((StringBuilder)localObject).append(" s16 ");
        ((StringBuilder)localObject).append(paramContext.getPackageName());
        paramContext = com.jd.android.sdk.coreinfo.c.Context.decode(com.jd.android.sdk.coreinfo.c.TextUtils.get(((StringBuilder)localObject).toString()));
      }
      catch (Throwable paramContext) {}
    }
    paramContext = "";
    try
    {
      bool = set(paramContext);
      if (!bool) {
        paramContext = com.jd.android.sdk.coreinfo.c.Context.decode(com.jd.android.sdk.coreinfo.c.TextUtils.get("service call phone ".concat(String.valueOf(i))));
      }
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    label117:
    return "";
  }
  
  private static boolean encode(String paramString)
  {
    try
    {
      int i = paramString.length();
      Object localObject = paramString;
      if (i == 17) {
        localObject = paramString.substring(0, 15);
      }
      i = ((String)localObject).length();
      if (i == 15)
      {
        paramString = ((String)localObject).substring(14, 15);
        localObject = ((String)localObject).substring(0, 14).toCharArray();
        int j = 0;
        i = 0;
        for (;;)
        {
          int k = localObject.length;
          if (j >= k) {
            break;
          }
          k = Integer.parseInt(String.valueOf(localObject[j]));
          int m = j + 1;
          j = Integer.parseInt(String.valueOf(localObject[m]));
          j *= 2;
          if (j >= 10) {
            j -= 9;
          }
          i += k + j;
          j = m + 1;
        }
        i %= 10;
        if (i == 0) {
          i = 0;
        } else {
          i = 10 - i;
        }
        boolean bool = String.valueOf(i).equals(paramString);
        if (bool) {
          return true;
        }
      }
    }
    catch (Throwable paramString) {}
    return false;
  }
  
  private static String get(android.content.Context paramContext)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localObject = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
        ((Method)localObject).setAccessible(true);
        localObject = (IBinder)((Method)localObject).invoke(null, new Object[] { "iphonesubinfo" });
        localMethod = Class.forName("com.android.internal.telephony.IPhoneSubInfo$Stub").getDeclaredMethod("asInterface", new Class[] { IBinder.class });
        localMethod.setAccessible(true);
        localObject = localMethod.invoke(null, new Object[] { localObject });
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        Method localMethod;
        boolean bool;
        continue;
      }
      try
      {
        localMethod = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[] { String.class });
        if (localMethod == null) {
          continue;
        }
        str = (String)localMethod.invoke(localObject, new Object[] { paramContext.getPackageName() });
      }
      catch (Throwable paramContext) {}
    }
    str = "";
    try
    {
      bool = set(str);
      if (bool) {
        return str;
      }
      paramContext = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[0]);
      if (paramContext == null) {
        return str;
      }
      paramContext = (String)paramContext.invoke(localObject, new Object[0]);
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return str;
  }
  
  private static String getInstance(android.content.Context paramContext)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localObject1 = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
        ((Method)localObject1).setAccessible(true);
        localObject1 = (IBinder)((Method)localObject1).invoke(null, new Object[] { "iphonesubinfo" });
        localClass = Class.forName("com.android.internal.telephony.IPhoneSubInfo$Stub");
        localObject2 = localClass.getDeclaredMethod("asInterface", new Class[] { IBinder.class });
        ((Method)localObject2).setAccessible(true);
        localObject2 = ((Method)localObject2).invoke(null, new Object[] { localObject1 });
      }
      catch (Throwable paramContext)
      {
        Object localObject1;
        Class localClass;
        Object localObject2;
        Method localMethod;
        boolean bool;
        continue;
      }
      try
      {
        localMethod = localObject2.getClass().getDeclaredMethod("getDeviceId", new Class[] { String.class });
        if (localMethod == null) {
          continue;
        }
        str = com.jd.android.sdk.coreinfo.c.Context.get(paramContext.getPackageName(), (IBinder)localObject1, com.jd.android.sdk.coreinfo.c.Context.create(localClass), com.jd.android.sdk.coreinfo.c.Context.get(localObject2, "TRANSACTION_getDeviceId"));
      }
      catch (Throwable paramContext) {}
    }
    str = "";
    try
    {
      bool = set(str);
      if (bool) {
        return str;
      }
      paramContext = localObject2.getClass().getDeclaredMethod("getDeviceId", new Class[0]);
      if (paramContext == null) {
        return str;
      }
      paramContext = com.jd.android.sdk.coreinfo.c.Context.get("", (IBinder)localObject1, com.jd.android.sdk.coreinfo.c.Context.create(localClass), com.jd.android.sdk.coreinfo.c.Context.get(localObject2, "TRANSACTION_getDeviceId"));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return str;
  }
  
  private static String init(android.content.Context paramContext)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localObject = (TelephonyManager)paramContext.getSystemService("phone");
        localMethod = TelephonyManager.class.getDeclaredMethod("getSubscriberInfo", new Class[0]);
        localMethod.setAccessible(true);
        localObject = localMethod.invoke(localObject, new Object[0]);
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        Method localMethod;
        boolean bool;
        continue;
      }
      try
      {
        localMethod = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[] { String.class });
        if (localMethod == null) {
          continue;
        }
        str = (String)localMethod.invoke(localObject, new Object[] { paramContext.getPackageName() });
      }
      catch (Throwable paramContext) {}
    }
    str = "";
    try
    {
      bool = set(str);
      if (bool) {
        return str;
      }
      paramContext = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[0]);
      if (paramContext == null) {
        return str;
      }
      paramContext = (String)paramContext.invoke(localObject, new Object[0]);
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return str;
  }
  
  private static String initialize(android.content.Context paramContext)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localObject1 = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
        ((Method)localObject1).setAccessible(true);
        localObject1 = (IBinder)((Method)localObject1).invoke(null, new Object[] { "phone" });
        localClass = Class.forName("com.android.internal.telephony.ITelephony$Stub");
        localObject2 = localClass.getDeclaredMethod("asInterface", new Class[] { IBinder.class });
        ((Method)localObject2).setAccessible(true);
        localObject2 = ((Method)localObject2).invoke(null, new Object[] { localObject1 });
      }
      catch (Throwable paramContext)
      {
        Object localObject1;
        Class localClass;
        Object localObject2;
        Method localMethod;
        boolean bool;
        continue;
      }
      try
      {
        localMethod = localObject2.getClass().getDeclaredMethod("getDeviceId", new Class[] { String.class });
        if (localMethod == null) {
          continue;
        }
        str = com.jd.android.sdk.coreinfo.c.Context.get(paramContext.getPackageName(), (IBinder)localObject1, com.jd.android.sdk.coreinfo.c.Context.create(localClass), com.jd.android.sdk.coreinfo.c.Context.get(localObject2, "TRANSACTION_getDeviceId"));
      }
      catch (Throwable paramContext) {}
    }
    str = "";
    try
    {
      bool = set(str);
      if (bool) {
        return str;
      }
      paramContext = localObject2.getClass().getDeclaredMethod("getDeviceId", new Class[0]);
      if (paramContext == null) {
        return str;
      }
      paramContext = com.jd.android.sdk.coreinfo.c.Context.get("", (IBinder)localObject1, com.jd.android.sdk.coreinfo.c.Context.create(localClass), com.jd.android.sdk.coreinfo.c.Context.get(localObject2, "TRANSACTION_getDeviceId"));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return str;
  }
  
  private static String parse(android.content.Context paramContext)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localObject = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
        ((Method)localObject).setAccessible(true);
        localObject = (IBinder)((Method)localObject).invoke(null, new Object[] { "phone" });
        localMethod = Class.forName("com.android.internal.telephony.ITelephony$Stub").getDeclaredMethod("asInterface", new Class[] { IBinder.class });
        localMethod.setAccessible(true);
        localObject = localMethod.invoke(null, new Object[] { localObject });
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        Method localMethod;
        boolean bool;
        continue;
      }
      try
      {
        localMethod = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[] { String.class });
        if (localMethod == null) {
          continue;
        }
        str = (String)localMethod.invoke(localObject, new Object[] { paramContext.getPackageName() });
      }
      catch (Throwable paramContext) {}
    }
    str = "";
    try
    {
      bool = set(str);
      if (bool) {
        return str;
      }
      paramContext = localObject.getClass().getDeclaredMethod("getDeviceId", new Class[0]);
      if (paramContext == null) {
        return str;
      }
      paramContext = (String)paramContext.invoke(localObject, new Object[0]);
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return str;
  }
  
  private static boolean parse(String paramString)
  {
    boolean bool4 = false;
    boolean bool3 = false;
    boolean bool2 = bool4;
    try
    {
      String str1 = paramString.toUpperCase();
      paramString = str1;
      bool2 = bool4;
      int i = str1.length();
      if (i != 16)
      {
        bool2 = bool4;
        i = str1.length();
        if (i != 17) {}
      }
      else
      {
        bool2 = bool4;
        paramString = str1.substring(2, str1.length());
      }
      bool2 = bool4;
      i = paramString.length();
      boolean bool1 = bool3;
      str1 = paramString;
      if (i == 15)
      {
        bool2 = bool4;
        String str2 = paramString.substring(14, 15);
        bool2 = bool4;
        str1 = paramString.substring(0, 14);
        paramString = str1;
        int j = 0;
        i = 0;
        for (;;)
        {
          bool2 = bool4;
          int k = str1.length();
          if (j >= k) {
            break;
          }
          k = j + 1;
          bool2 = bool4;
          int m = Integer.parseInt(str1.substring(j, k), 16);
          if (j % 2 == 0)
          {
            i += m;
          }
          else
          {
            j = m * 2;
            i = i + j % 16 + j / 16;
          }
          j = k;
        }
        if (i % 16 == 0) {
          i = 0;
        } else {
          i = 16 - i % 16;
        }
        bool2 = bool4;
        j = Integer.parseInt(str2, 16);
        bool1 = bool3;
        str1 = paramString;
        if (j == i)
        {
          bool1 = true;
          str1 = paramString;
        }
      }
      bool2 = bool1;
      i = str1.length();
      bool2 = bool1;
      if (i == 14)
      {
        bool2 = bool1;
        bool3 = str1.startsWith("A");
        if (!bool3)
        {
          bool2 = bool1;
          bool3 = str1.startsWith("F");
          if (!bool3)
          {
            bool2 = bool1;
            bool3 = str1.startsWith("9");
            bool2 = bool1;
            if (!bool3) {
              break label327;
            }
          }
        }
        return true;
      }
    }
    catch (Throwable paramString) {}
    label327:
    return bool2;
  }
  
  private static boolean set(String paramString)
  {
    boolean bool2 = encode(paramString);
    boolean bool1 = bool2;
    if (!bool2) {
      bool1 = parse(paramString);
    }
    return bool1;
  }
  
  public static String start(android.content.Context paramContext)
  {
    Object localObject3 = "";
    Object localObject1;
    if (paramContext != null)
    {
      Object localObject2 = localObject3;
      try
      {
        localObject1 = paramContext.getPackageManager();
        if (localObject1 != null)
        {
          localObject2 = localObject3;
          int i = ((PackageManager)localObject1).checkPermission("android.permission.READ_PHONE_STATE", paramContext.getPackageName());
          if (i == 0)
          {
            localObject2 = localObject3;
            i = Build.VERSION.SDK_INT;
            localObject1 = localObject3;
            if (i < 28)
            {
              localObject2 = localObject3;
              localObject1 = decode(paramContext);
              localObject3 = localObject1;
              localObject2 = localObject3;
              bool = set((String)localObject1);
              localObject1 = localObject3;
              if (!bool)
              {
                localObject2 = localObject3;
                localObject1 = write(paramContext);
                localObject3 = localObject1;
                localObject2 = localObject3;
                bool = set((String)localObject1);
                localObject1 = localObject3;
                if (!bool)
                {
                  localObject2 = localObject3;
                  localObject1 = initialize(paramContext);
                  localObject3 = localObject1;
                  localObject2 = localObject3;
                  bool = set((String)localObject1);
                  localObject1 = localObject3;
                  if (!bool)
                  {
                    localObject2 = localObject3;
                    localObject1 = getInstance(paramContext);
                    localObject3 = localObject1;
                    localObject2 = localObject3;
                    bool = set((String)localObject1);
                    localObject1 = localObject3;
                    if (!bool)
                    {
                      localObject2 = localObject3;
                      localObject1 = parse(paramContext);
                      localObject3 = localObject1;
                      localObject2 = localObject3;
                      bool = set((String)localObject1);
                      localObject1 = localObject3;
                      if (!bool)
                      {
                        localObject2 = localObject3;
                        localObject1 = get(paramContext);
                        localObject3 = localObject1;
                        localObject2 = localObject3;
                        bool = set((String)localObject1);
                        localObject1 = localObject3;
                        if (!bool)
                        {
                          localObject2 = localObject3;
                          localObject1 = configure(paramContext);
                          localObject3 = localObject1;
                          localObject2 = localObject3;
                          bool = set((String)localObject1);
                          localObject1 = localObject3;
                          if (!bool)
                          {
                            localObject2 = localObject3;
                            localObject3 = init(paramContext);
                            localObject1 = localObject3;
                            localObject2 = localObject1;
                            bool = set((String)localObject3);
                            if (!bool) {
                              localObject1 = "";
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            localObject2 = localObject1;
            boolean bool = android.text.TextUtils.isEmpty((CharSequence)localObject1);
            if (!bool) {
              break label333;
            }
            localObject2 = localObject1;
            paramContext = (TelephonyManager)paramContext.getSystemService("phone");
            if (paramContext == null) {
              break label333;
            }
            localObject2 = localObject1;
            paramContext = paramContext.getDeviceId();
            if (paramContext != null) {
              return paramContext;
            }
            return "";
          }
        }
      }
      catch (Throwable paramContext)
      {
        return localObject2;
      }
    }
    return "";
    label333:
    return localObject1;
    return paramContext;
  }
  
  private static String write(android.content.Context paramContext)
  {
    for (;;)
    {
      try
      {
        localObject = Class.forName("com.android.internal.telephony.IPhoneSubInfo$Stub");
        Field localField = ((Class)localObject).getDeclaredField("TRANSACTION_getDeviceId");
        if (localField == null) {
          break label136;
        }
        localField.setAccessible(true);
        long l = localField.getLong(localObject);
        i = (int)l;
      }
      catch (Throwable paramContext)
      {
        Object localObject;
        int i;
        boolean bool;
        continue;
      }
      try
      {
        localObject = new StringBuilder("service call iphonesubinfo ");
        ((StringBuilder)localObject).append(i);
        ((StringBuilder)localObject).append(" s16 ");
        ((StringBuilder)localObject).append(paramContext.getPackageName());
        paramContext = com.jd.android.sdk.coreinfo.c.Context.decode(com.jd.android.sdk.coreinfo.c.TextUtils.get(((StringBuilder)localObject).toString()));
      }
      catch (Throwable paramContext) {}
    }
    paramContext = "";
    try
    {
      bool = set(paramContext);
      if (bool) {
        return paramContext;
      }
      paramContext = com.jd.android.sdk.coreinfo.c.Context.decode(com.jd.android.sdk.coreinfo.c.TextUtils.get("service call iphonesubinfo ".concat(String.valueOf(i))));
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    label136:
    return "";
    return paramContext;
  }
}
