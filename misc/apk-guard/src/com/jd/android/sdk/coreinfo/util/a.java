package com.jd.android.sdk.coreinfo.util;

import android.content.Context;
import android.content.pm.PackageManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import com.jd.android.sdk.coreinfo.c.Util;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public final class a
{
  private static String c;
  
  public static String a(Context paramContext)
  {
    String str1 = "";
    if (paramContext != null) {}
    try
    {
      boolean bool = android.text.TextUtils.isEmpty(c);
      if (bool) {
        c = getIcon();
      }
      bool = android.text.TextUtils.isEmpty("");
      if (!bool)
      {
        bool = "".equals("02:00:00:00:00:00");
        if (!bool) {}
      }
      else
      {
        str1 = read();
      }
      bool = android.text.TextUtils.isEmpty(str1);
      if (!bool)
      {
        bool = str1.equals("02:00:00:00:00:00");
        if (!bool) {}
      }
      else
      {
        str1 = doInBackground();
      }
      bool = android.text.TextUtils.isEmpty(str1);
      if (!bool)
      {
        bool = str1.equals("02:00:00:00:00:00");
        if (!bool) {}
      }
      else
      {
        str1 = getValue();
      }
      bool = android.text.TextUtils.isEmpty(str1);
      String str2;
      if (!bool)
      {
        bool = str1.equals("02:00:00:00:00:00");
        str2 = str1;
        if (!bool) {}
      }
      else
      {
        PackageManager localPackageManager = paramContext.getPackageManager();
        str2 = str1;
        if (localPackageManager != null)
        {
          int i = localPackageManager.checkPermission("android.permission.ACCESS_COARSE_LOCATION", paramContext.getPackageName());
          int j = localPackageManager.checkPermission("android.permission.ACCESS_FINE_LOCATION", paramContext.getPackageName());
          str2 = str1;
          if (i == 0)
          {
            str2 = str1;
            if (j == 0)
            {
              paramContext = (WifiManager)paramContext.getSystemService("wifi");
              str2 = str1;
              if (paramContext != null)
              {
                paramContext = paramContext.getConnectionInfo();
                str2 = str1;
                if (paramContext != null) {
                  str2 = paramContext.getMacAddress();
                }
              }
            }
          }
        }
      }
      return str2;
    }
    catch (Throwable paramContext)
    {
      for (;;) {}
    }
    return "";
    return "";
  }
  
  private static String doInBackground()
  {
    String str1 = "";
    String str2 = str1;
    try
    {
      Iterator localIterator = Collections.list(NetworkInterface.getNetworkInterfaces()).iterator();
      for (;;)
      {
        str2 = str1;
        boolean bool = localIterator.hasNext();
        if (!bool) {
          break;
        }
        str2 = str1;
        Object localObject = (NetworkInterface)localIterator.next();
        str2 = str1;
        bool = ((NetworkInterface)localObject).getName().equalsIgnoreCase(c);
        if (bool)
        {
          str2 = str1;
          localObject = ((NetworkInterface)localObject).getHardwareAddress();
          if (localObject != null)
          {
            str2 = str1;
            int i = localObject.length;
            if (i > 0)
            {
              str2 = str1;
              StringBuilder localStringBuilder = new StringBuilder();
              i = 0;
              for (;;)
              {
                str2 = str1;
                int j = localObject.length;
                if (i >= j) {
                  break;
                }
                str2 = str1;
                localStringBuilder.append(String.format("%02X:", new Object[] { Byte.valueOf(localObject[i]) }));
                i += 1;
              }
              str2 = str1;
              i = localStringBuilder.length();
              if (i > 0)
              {
                str2 = str1;
                i = localStringBuilder.length();
                str2 = str1;
                localStringBuilder.deleteCharAt(i - 1);
              }
              str2 = str1;
              str1 = localStringBuilder.toString();
            }
          }
        }
      }
      return str1;
    }
    catch (Throwable localThrowable) {}
    return str2;
  }
  
  private static String getIcon()
  {
    try
    {
      String str = com.jd.android.sdk.coreinfo.c.TextUtils.get("getprop wifi.interface");
      boolean bool = android.text.TextUtils.isEmpty(str);
      if (!bool) {
        return str;
      }
    }
    catch (Throwable localThrowable) {}
    return "wlan0";
  }
  
  /* Error */
  private static InetAddress getLocalIpAddress()
  {
    // Byte code:
    //   0: invokestatic 86	java/net/NetworkInterface:getNetworkInterfaces	()Ljava/util/Enumeration;
    //   3: astore_3
    //   4: aconst_null
    //   5: astore_1
    //   6: aload_1
    //   7: astore_2
    //   8: aload_3
    //   9: invokeinterface 170 1 0
    //   14: istore_0
    //   15: iload_0
    //   16: ifeq +114 -> 130
    //   19: aload_1
    //   20: astore_2
    //   21: aload_3
    //   22: invokeinterface 173 1 0
    //   27: astore 4
    //   29: aload 4
    //   31: checkcast 82	java/net/NetworkInterface
    //   34: astore 4
    //   36: aload_1
    //   37: astore_2
    //   38: aload 4
    //   40: invokevirtual 176	java/net/NetworkInterface:getInetAddresses	()Ljava/util/Enumeration;
    //   43: astore 4
    //   45: aload_1
    //   46: astore_2
    //   47: aload 4
    //   49: invokeinterface 170 1 0
    //   54: istore_0
    //   55: aload_1
    //   56: astore_2
    //   57: iload_0
    //   58: ifeq +52 -> 110
    //   61: aload_1
    //   62: astore_2
    //   63: aload 4
    //   65: invokeinterface 173 1 0
    //   70: astore_1
    //   71: aload_1
    //   72: checkcast 178	java/net/InetAddress
    //   75: astore_2
    //   76: aload_2
    //   77: invokevirtual 181	java/net/InetAddress:isLoopbackAddress	()Z
    //   80: istore_0
    //   81: iload_0
    //   82: ifne +23 -> 105
    //   85: aload_2
    //   86: invokevirtual 184	java/net/InetAddress:getHostAddress	()Ljava/lang/String;
    //   89: ldc -70
    //   91: invokevirtual 189	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   94: istore_0
    //   95: iload_0
    //   96: ifeq +6 -> 102
    //   99: goto +6 -> 105
    //   102: goto +8 -> 110
    //   105: aconst_null
    //   106: astore_1
    //   107: goto -62 -> 45
    //   110: aload_2
    //   111: astore_1
    //   112: aload_2
    //   113: ifnull -107 -> 6
    //   116: aload_2
    //   117: areturn
    //   118: aconst_null
    //   119: areturn
    //   120: astore_1
    //   121: goto -3 -> 118
    //   124: astore_1
    //   125: aload_2
    //   126: areturn
    //   127: astore_1
    //   128: aload_2
    //   129: areturn
    //   130: aload_1
    //   131: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   14	82	0	bool	boolean
    //   5	107	1	localObject1	Object
    //   120	1	1	localSocketException1	java.net.SocketException
    //   124	1	1	localSocketException2	java.net.SocketException
    //   127	4	1	localSocketException3	java.net.SocketException
    //   7	122	2	localObject2	Object
    //   3	19	3	localEnumeration	java.util.Enumeration
    //   27	37	4	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   0	4	120	java/net/SocketException
    //   8	15	124	java/net/SocketException
    //   21	29	124	java/net/SocketException
    //   38	45	124	java/net/SocketException
    //   47	55	124	java/net/SocketException
    //   63	71	124	java/net/SocketException
    //   76	81	127	java/net/SocketException
    //   85	95	127	java/net/SocketException
  }
  
  private static String getValue()
  {
    try
    {
      Object localObject = getLocalIpAddress();
      if (localObject != null)
      {
        byte[] arrayOfByte = NetworkInterface.getByInetAddress((InetAddress)localObject).getHardwareAddress();
        if (arrayOfByte != null)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          int i = 0;
          for (;;)
          {
            int j = arrayOfByte.length;
            if (i >= j) {
              break;
            }
            if (i != 0) {
              localStringBuilder.append(':');
            }
            j = arrayOfByte[i];
            String str = Integer.toHexString(j & 0xFF);
            localObject = str;
            j = str.length();
            if (j == 1) {
              localObject = "0".concat(String.valueOf(str));
            }
            localStringBuilder.append((String)localObject);
            i += 1;
          }
          localObject = localStringBuilder.toString();
          return localObject;
        }
      }
    }
    catch (Throwable localThrowable) {}
    return "";
  }
  
  private static String read()
  {
    try
    {
      Object localObject = new StringBuilder("/sys/class/net/");
      ((StringBuilder)localObject).append(c);
      ((StringBuilder)localObject).append("/address");
      localObject = Util.read(((StringBuilder)localObject).toString(), true);
      return localObject;
    }
    catch (Throwable localThrowable) {}
    return "";
  }
}
