package com.jd.android.sdk.coreinfo;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.content.res.Resources;
import android.hardware.SensorManager;
import android.hardware.fingerprint.FingerprintManager;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import android.os.storage.StorageManager;
import android.os.storage.StorageVolume;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import com.jd.android.sdk.coreinfo.c.Util;
import com.jd.android.sdk.coreinfo.c.l;
import com.jd.android.sdk.coreinfo.util.BlockAwareBinWindow;
import com.jd.android.sdk.coreinfo.util.Log;
import com.jd.android.sdk.coreinfo.util.d;
import com.jd.android.sdk.coreinfo.view.FileChooser;
import java.io.File;
import java.lang.reflect.Method;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

final class Buffer
{
  private static boolean NON_VOLATILE;
  private static boolean VOLATILE;
  private static String a;
  private static boolean active;
  private static String c;
  private static String color;
  private static boolean container;
  private static String data;
  private static long duration;
  private static boolean index;
  private static boolean isExecuted;
  private static String length;
  private static String mMessage;
  private static String mTitle;
  private static String mValue;
  private static boolean notify;
  private static String offset;
  private static boolean result;
  private static long size;
  private static boolean start;
  private static boolean status;
  private static String title;
  private static long value;
  
  static String a()
  {
    try
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "get wifi mac by getWifiMacAddressOver23()");
      Object localObject1 = Collections.list(NetworkInterface.getNetworkInterfaces()).iterator();
      boolean bool;
      do
      {
        bool = ((Iterator)localObject1).hasNext();
        if (!bool) {
          break;
        }
        localObject2 = ((Iterator)localObject1).next();
        localObject2 = (NetworkInterface)localObject2;
        bool = ((NetworkInterface)localObject2).getName().equalsIgnoreCase("wlan0");
      } while (!bool);
      localObject1 = ((NetworkInterface)localObject2).getHardwareAddress();
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = new StringBuilder();
      int j = localObject1.length;
      int i = 0;
      while (i < j)
      {
        byte b = localObject1[i];
        ((StringBuilder)localObject2).append(String.format("%02x:", new Object[] { Byte.valueOf(b) }));
        i += 1;
      }
      i = ((StringBuilder)localObject2).length();
      if (i > 0)
      {
        i = ((StringBuilder)localObject2).length();
        ((StringBuilder)localObject2).deleteCharAt(i - 1);
      }
      localObject1 = ((StringBuilder)localObject2).toString();
      return localObject1;
    }
    catch (Exception localException)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call getWifiMacAddressOver23()", localException);
    }
    return "";
  }
  
  static String a(android.content.Context paramContext)
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(com.jd.android.sdk.coreinfo.util.a.a(paramContext), "");
  }
  
  static String c()
  {
    if (TextUtils.isEmpty(c)) {
      c = l.a("ro.board.platform", "");
    }
    return c;
  }
  
  static String c(android.content.Context paramContext)
  {
    if (paramContext == null)
    {
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
      return "";
    }
    try
    {
      paramContext = paramContext.getResources().getDisplayMetrics();
      StringBuilder localStringBuilder = new StringBuilder();
      int i = widthPixels;
      localStringBuilder.append(i);
      localStringBuilder.append("*");
      i = heightPixels;
      localStringBuilder.append(i);
      paramContext = localStringBuilder.toString();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call getDisplayMetrics()", paramContext);
    }
    return "";
  }
  
  static String copyTo()
  {
    if (TextUtils.isEmpty(color)) {
      try
      {
        Object localObject = new File("/sys/devices/system/cpu/");
        localObject = ((File)localObject).listFiles(new FileChooser());
        int i = localObject.length;
        color = String.valueOf(i);
      }
      catch (Exception localException)
      {
        com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happens when call getCPUNum()", localException);
        return "1";
      }
    }
    return color;
  }
  
  /* Error */
  static String doInBackground()
  {
    // Byte code:
    //   0: getstatic 211	com/jd/android/sdk/coreinfo/Buffer:data	Ljava/lang/String;
    //   3: invokestatic 144	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   6: ifeq +169 -> 175
    //   9: ldc 90
    //   11: astore 5
    //   13: aconst_null
    //   14: astore 6
    //   16: new 213	java/io/InputStreamReader
    //   19: dup
    //   20: invokestatic 219	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   23: ldc -35
    //   25: invokevirtual 225	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   28: invokevirtual 231	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   31: invokespecial 234	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   34: astore_2
    //   35: new 236	java/io/LineNumberReader
    //   38: dup
    //   39: aload_2
    //   40: invokespecial 239	java/io/LineNumberReader:<init>	(Ljava/io/Reader;)V
    //   43: astore 6
    //   45: iconst_0
    //   46: istore_0
    //   47: aload 5
    //   49: astore_3
    //   50: iload_0
    //   51: bipush 100
    //   53: if_icmpge +89 -> 142
    //   56: aload 6
    //   58: invokevirtual 242	java/io/LineNumberReader:readLine	()Ljava/lang/String;
    //   61: astore_3
    //   62: aload_3
    //   63: ifnull +40 -> 103
    //   66: aload_3
    //   67: ldc -12
    //   69: invokevirtual 248	java/lang/String:indexOf	(Ljava/lang/String;)I
    //   72: istore_1
    //   73: iload_1
    //   74: iflt +29 -> 103
    //   77: aload_3
    //   78: ldc -6
    //   80: invokevirtual 248	java/lang/String:indexOf	(Ljava/lang/String;)I
    //   83: istore_1
    //   84: aload_3
    //   85: iload_1
    //   86: iconst_1
    //   87: iadd
    //   88: invokevirtual 253	java/lang/String:substring	(I)Ljava/lang/String;
    //   91: invokevirtual 256	java/lang/String:trim	()Ljava/lang/String;
    //   94: astore_3
    //   95: goto +47 -> 142
    //   98: astore_3
    //   99: aload_3
    //   100: invokevirtual 259	java/lang/Throwable:printStackTrace	()V
    //   103: iload_0
    //   104: iconst_1
    //   105: iadd
    //   106: iconst_1
    //   107: iadd
    //   108: istore_0
    //   109: goto -62 -> 47
    //   112: astore 4
    //   114: aload 6
    //   116: astore_3
    //   117: goto +17 -> 134
    //   120: astore 4
    //   122: aconst_null
    //   123: astore_3
    //   124: goto +10 -> 134
    //   127: astore 4
    //   129: aconst_null
    //   130: astore_3
    //   131: aload 6
    //   133: astore_2
    //   134: aload 4
    //   136: invokevirtual 259	java/lang/Throwable:printStackTrace	()V
    //   139: aload 5
    //   141: astore_3
    //   142: aload_3
    //   143: ldc 90
    //   145: invokestatic 136	com/jd/android/sdk/coreinfo/c/Context:toString	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   148: putstatic 211	com/jd/android/sdk/coreinfo/Buffer:data	Ljava/lang/String;
    //   151: goto +24 -> 175
    //   154: astore 4
    //   156: aload_2
    //   157: ifnull +7 -> 164
    //   160: aload_2
    //   161: invokevirtual 262	java/io/InputStreamReader:close	()V
    //   164: aload_3
    //   165: ifnull +7 -> 172
    //   168: aload_3
    //   169: invokevirtual 263	java/io/LineNumberReader:close	()V
    //   172: aload 4
    //   174: athrow
    //   175: getstatic 211	com/jd/android/sdk/coreinfo/Buffer:data	Ljava/lang/String;
    //   178: areturn
    //   179: astore_2
    //   180: goto -16 -> 164
    //   183: astore_2
    //   184: goto -12 -> 172
    // Local variable table:
    //   start	length	slot	name	signature
    //   46	63	0	i	int
    //   72	16	1	j	int
    //   34	127	2	localObject1	Object
    //   179	1	2	localException1	Exception
    //   183	1	2	localException2	Exception
    //   49	46	3	str1	String
    //   98	2	3	localThrowable1	Throwable
    //   116	53	3	localObject2	Object
    //   112	1	4	localThrowable2	Throwable
    //   120	1	4	localThrowable3	Throwable
    //   127	8	4	localThrowable4	Throwable
    //   154	19	4	localThrowable5	Throwable
    //   11	129	5	str2	String
    //   14	118	6	localLineNumberReader	java.io.LineNumberReader
    // Exception table:
    //   from	to	target	type
    //   56	62	98	java/lang/Throwable
    //   66	73	98	java/lang/Throwable
    //   77	84	98	java/lang/Throwable
    //   84	95	98	java/lang/Throwable
    //   99	103	112	java/lang/Throwable
    //   35	45	120	java/lang/Throwable
    //   16	35	127	java/lang/Throwable
    //   134	139	154	java/lang/Throwable
    //   160	164	179	java/lang/Exception
    //   168	172	183	java/lang/Exception
  }
  
  static String encode(android.content.Context paramContext)
  {
    if (TextUtils.isEmpty(length)) {
      length = com.jd.android.sdk.coreinfo.c.Context.toString(Log.start(paramContext), "");
    }
    return length;
  }
  
  static String evaluate()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.MANUFACTURER, "");
  }
  
  static boolean execute(android.content.Context paramContext)
  {
    if (!isExecuted)
    {
      if (paramContext == null)
      {
        com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
        return false;
      }
      if (Build.VERSION.SDK_INT >= 23)
      {
        paramContext = (FingerprintManager)paramContext.getSystemService("fingerprint");
        if (paramContext != null) {
          try
          {
            result = paramContext.isHardwareDetected();
            isExecuted = true;
          }
          catch (Throwable paramContext)
          {
            com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An error occors when call isFingerprintAvailable()", paramContext);
          }
        }
      }
      return false;
    }
    return result;
  }
  
  static boolean flush(android.content.Context paramContext)
  {
    if (paramContext == null)
    {
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
      return false;
    }
    if (Build.VERSION.SDK_INT >= 24) {}
    try
    {
      paramContext = paramContext.getSystemService("storage");
      paramContext = (StorageManager)paramContext;
      paramContext = paramContext.getStorageVolumes();
      if (paramContext != null)
      {
        paramContext = paramContext.iterator();
        do
        {
          Object localObject;
          do
          {
            bool = paramContext.hasNext();
            if (!bool) {
              break;
            }
            localObject = paramContext.next();
            localObject = (StorageVolume)localObject;
            bool = ((StorageVolume)localObject).isRemovable();
          } while (!bool);
          bool = ((StorageVolume)localObject).getState().equals("mounted");
        } while (!bool);
        return true;
      }
      return false;
    }
    catch (Exception paramContext)
    {
      boolean bool;
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call storageIsRemovable()", paramContext);
    }
    bool = process(paramContext);
    return bool;
    return false;
  }
  
  static String get(android.content.Context paramContext)
  {
    if (paramContext == null)
    {
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
      return "";
    }
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    try
    {
      paramContext = com.jd.android.sdk.coreinfo.c.Context.toString(paramContext.getSimSerialNumber(), "");
      return paramContext;
    }
    catch (SecurityException paramContext)
    {
      StringBuilder localStringBuilder = new StringBuilder("DeviceInfo.getSimSerialNo() exception: ");
      localStringBuilder.append(paramContext.getMessage());
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", localStringBuilder.toString());
    }
    return "";
  }
  
  static String[] get()
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return Build.SUPPORTED_ABIS;
    }
    if (TextUtils.isEmpty(Build.CPU_ABI2)) {
      return new String[] { Build.CPU_ABI };
    }
    return new String[] { Build.CPU_ABI, Build.CPU_ABI2 };
  }
  
  static String getBuildInfo()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.BOOTLOADER, "");
  }
  
  static String getContents()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.BOARD, "");
  }
  
  static String getDeviceId()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.DEVICE, "");
  }
  
  static String getDeviceInfo()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.PRODUCT, "");
  }
  
  static String getDeviceName()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.MODEL, "");
  }
  
  static String getNumber()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.HARDWARE, "");
  }
  
  static String getString()
  {
    if (TextUtils.isEmpty(mMessage)) {
      if (Build.VERSION.SDK_INT >= 26) {
        try
        {
          String str = com.jd.android.sdk.coreinfo.c.Context.toString(Build.getSerial(), "");
          mMessage = str;
        }
        catch (SecurityException localSecurityException)
        {
          StringBuilder localStringBuilder = new StringBuilder("DeviceInfo.getHardwareSerialNo() exception: ");
          localStringBuilder.append(localSecurityException.getMessage());
          com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", localStringBuilder.toString());
          return "";
        }
      } else {
        mMessage = com.jd.android.sdk.coreinfo.c.Context.toString(Build.SERIAL, "");
      }
    }
    return mMessage;
  }
  
  static String getTitle()
  {
    if (TextUtils.isEmpty(title))
    {
      String str = Util.read("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq", false);
      if (str.length() == 0) {
        return "";
      }
      title = com.jd.android.sdk.coreinfo.c.Context.toString(str, "");
    }
    return title;
  }
  
  private static String getType(android.content.Context paramContext)
  {
    if (paramContext == null)
    {
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
      return "";
    }
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext != null)
      {
        int i = paramContext.getNetworkType();
        if (i != 20)
        {
          switch (i)
          {
          default: 
            return "mobile";
          case 13: 
            return "4g";
          case 3: 
          case 5: 
          case 6: 
          case 8: 
          case 9: 
          case 10: 
          case 12: 
          case 14: 
          case 15: 
          case 17: 
            return "3g";
          }
          return "2g";
        }
        return "5g";
      }
    }
    catch (Throwable paramContext)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call getMobileDataType()", paramContext);
    }
    return "";
  }
  
  static String getUserAgent()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Build.BRAND, "");
  }
  
  static String getValue()
  {
    if (TextUtils.isEmpty(mValue)) {
      mValue = com.jd.android.sdk.coreinfo.c.Context.toString(Build.getRadioVersion(), "");
    }
    return mValue;
  }
  
  static String getValue(android.content.Context paramContext)
  {
    if (paramContext == null) {
      return "";
    }
    try
    {
      paramContext = paramContext.getResources().getDisplayMetrics();
      int i = densityDpi;
      return String.valueOf(i);
    }
    catch (Exception paramContext)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call getDensityDpi()", paramContext);
    }
    return "";
  }
  
  static long init()
  {
    if (value <= 0L)
    {
      File localFile = Environment.getDataDirectory();
      try
      {
        long l = read(localFile.getPath());
        value = l;
      }
      catch (Exception localException)
      {
        com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happens when call getRomSize()", localException);
        return 0L;
      }
    }
    return value;
  }
  
  static long initialize(android.content.Context paramContext)
  {
    if (paramContext == null)
    {
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
      return 0L;
    }
    try
    {
      paramContext = paramContext.getSystemService("activity");
      paramContext = (ActivityManager)paramContext;
      ActivityManager.MemoryInfo localMemoryInfo = new ActivityManager.MemoryInfo();
      paramContext.getMemoryInfo(localMemoryInfo);
      return availMem >> 10;
    }
    catch (Exception paramContext)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happens when call getMemAvailSize()", paramContext);
    }
    return 0L;
  }
  
  static String isWifiConnected(android.content.Context paramContext)
  {
    if (paramContext == null)
    {
      com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
      return "";
    }
    try
    {
      Object localObject1 = (ConnectivityManager)paramContext.getSystemService("connectivity");
      if (localObject1 == null) {
        return "";
      }
      Object localObject2 = ((ConnectivityManager)localObject1).getActiveNetworkInfo();
      if (localObject2 != null)
      {
        boolean bool = ((NetworkInfo)localObject2).isAvailable();
        if (bool)
        {
          try
          {
            localObject1 = ((ConnectivityManager)localObject1).getNetworkInfo(1);
            if (localObject1 != null)
            {
              localObject2 = ((NetworkInfo)localObject1).getState();
              if (localObject2 != null)
              {
                localObject1 = ((NetworkInfo)localObject1).getState();
                localObject2 = NetworkInfo.State.CONNECTED;
                if (localObject1 != localObject2)
                {
                  localObject2 = NetworkInfo.State.CONNECTING;
                  if (localObject1 != localObject2) {}
                }
                else
                {
                  return "wifi";
                }
              }
            }
          }
          catch (Throwable localThrowable)
          {
            com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call getNetworkType()", localThrowable);
          }
          return getType(paramContext);
        }
      }
      return "none";
    }
    catch (Throwable paramContext)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call getNetworkType()", paramContext);
    }
    return "";
  }
  
  private static boolean process(android.content.Context paramContext)
  {
    paramContext = (StorageManager)paramContext.getSystemService("storage");
    try
    {
      Object localObject1 = StorageManager.class.getMethod("getVolumeList", new Class[0]);
      ((Method)localObject1).setAccessible(true);
      paramContext = ((Method)localObject1).invoke(paramContext, new Object[0]);
      paramContext = (Object[])(Object[])paramContext;
      if (paramContext != null)
      {
        int j = paramContext.length;
        int i = 0;
        while (i < j)
        {
          localObject1 = paramContext[i];
          Object localObject2 = localObject1.getClass();
          localObject2 = ((Class)localObject2).getMethod("isRemovable", new Class[0]);
          localObject2 = ((Method)localObject2).invoke(localObject1, new Object[0]);
          localObject2 = (Boolean)localObject2;
          boolean bool = ((Boolean)localObject2).booleanValue();
          if (bool)
          {
            localObject2 = localObject1.getClass();
            localObject2 = ((Class)localObject2).getMethod("getState", new Class[0]);
            localObject1 = ((Method)localObject2).invoke(localObject1, new Object[0]);
            localObject1 = (String)localObject1;
            bool = ((String)localObject1).equals("mounted");
            if (bool) {
              return true;
            }
          }
          i += 1;
        }
      }
      return false;
    }
    catch (Exception paramContext)
    {
      com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happends when call storageIsRemovable()", paramContext);
    }
  }
  
  static long read()
  {
    if (size <= 0L)
    {
      File localFile = Environment.getExternalStorageDirectory();
      try
      {
        long l = read(localFile.getPath());
        size = l;
      }
      catch (Exception localException)
      {
        com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happens when call getExternalStorageSize()", localException);
        return 0L;
      }
    }
    return size;
  }
  
  static long read(android.content.Context paramContext)
  {
    if (duration <= 0L) {
      if (Build.VERSION.SDK_INT >= 16)
      {
        if (paramContext == null)
        {
          com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
          return 0L;
        }
        try
        {
          paramContext = paramContext.getSystemService("activity");
          paramContext = (ActivityManager)paramContext;
          ActivityManager.MemoryInfo localMemoryInfo = new ActivityManager.MemoryInfo();
          paramContext.getMemoryInfo(localMemoryInfo);
          duration = totalMem >> 10;
        }
        catch (Exception paramContext)
        {
          com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happens when call getMemTotalSize()", paramContext);
          return 0L;
        }
      }
      else
      {
        try
        {
          paramContext = Util.read("/proc/meminfo", true);
          int i = paramContext.length();
          long l;
          if (i == 0)
          {
            l = 0L;
          }
          else
          {
            i = paramContext.indexOf("MemTotal:");
            int j = paramContext.indexOf("kB", i);
            l = Long.parseLong(paramContext.substring(i + 9, j).trim());
          }
          duration = l;
        }
        catch (Exception paramContext)
        {
          com.jd.android.sdk.coreinfo.c.a.a("DeviceInfo", "An exception happens when call getMemTotalSizeLowerAPI16()", paramContext);
          return 0L;
        }
      }
    }
    return duration;
  }
  
  private static long read(String paramString)
  {
    paramString = new StatFs(paramString);
    if (Build.VERSION.SDK_INT >= 18) {
      return paramString.getBlockCountLong() * paramString.getBlockSizeLong();
    }
    return paramString.getBlockCount() * paramString.getBlockSize();
  }
  
  static String readString()
  {
    return com.jd.android.sdk.coreinfo.c.Context.toString(Util.read("/sys/block/mmcblk0/device/cid", false), "");
  }
  
  static String setTitle(android.content.Context paramContext)
  {
    if (TextUtils.isEmpty(mTitle)) {
      mTitle = com.jd.android.sdk.coreinfo.c.Context.toString(d.c(paramContext), "");
    }
    return mTitle;
  }
  
  static boolean start(android.content.Context paramContext)
  {
    if (!container)
    {
      boolean bool2 = false;
      if (paramContext == null)
      {
        com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
        return false;
      }
      paramContext = (LocationManager)paramContext.getSystemService("location");
      if (paramContext != null)
      {
        paramContext = paramContext.getAllProviders();
        boolean bool1 = bool2;
        if (paramContext != null)
        {
          bool1 = bool2;
          if (paramContext.contains("gps")) {
            bool1 = true;
          }
        }
        status = bool1;
        container = true;
      }
      else
      {
        return false;
      }
    }
    return status;
  }
  
  static boolean start(android.content.Context paramContext, int paramInt)
  {
    if (!index)
    {
      boolean bool2 = false;
      if (paramContext == null)
      {
        com.jd.android.sdk.coreinfo.c.a.b("DeviceInfo", "context is null");
        return false;
      }
      paramContext = (SensorManager)paramContext.getSystemService("sensor");
      if (paramContext != null)
      {
        paramContext = paramContext.getSensorList(paramInt);
        boolean bool1 = bool2;
        if (paramContext != null)
        {
          bool1 = bool2;
          if (paramContext.size() > 0) {
            bool1 = true;
          }
        }
        start = bool1;
        index = true;
      }
      else
      {
        return false;
      }
    }
    return start;
  }
  
  static String write()
  {
    if (TextUtils.isEmpty(a)) {
      a = com.jd.android.sdk.coreinfo.c.Context.toString(BlockAwareBinWindow.read(), "");
    }
    return a;
  }
  
  static String write(android.content.Context paramContext)
  {
    if (TextUtils.isEmpty(offset)) {
      offset = com.jd.android.sdk.coreinfo.c.Context.toString(com.jd.android.sdk.coreinfo.util.Context.get(paramContext), "");
    }
    return offset;
  }
}
