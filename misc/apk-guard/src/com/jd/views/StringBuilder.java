package com.jd.views;

import com.jd.JSONException;
import com.jd.PropertyNamingStrategy;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONObject;
import com.jd.framework.json.anotation.JSONField;
import com.jd.framework.json.anotation.JSONType;
import com.jd.parser.Context;
import com.jd.parser.f;
import com.jd.serializer.SerializerFeature;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.AccessControlException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class StringBuilder
{
  private static volatile Method a;
  private static volatile Method b;
  private static volatile Constructor buffer;
  private static volatile Class c;
  private static ConcurrentMap<String, Class<?>> cache = new ConcurrentHashMap();
  private static volatile Method index;
  private static volatile boolean l;
  private static volatile Map<Class, String[]> m;
  public static boolean mDesign;
  private static boolean quoting;
  private static volatile boolean s;
  private static volatile boolean state;
  private static volatile boolean w;
  
  static
  {
    cache.put("byte", Byte.TYPE);
    cache.put("short", Short.TYPE);
    cache.put("int", Integer.TYPE);
    cache.put("long", Long.TYPE);
    cache.put("float", Float.TYPE);
    cache.put("double", Double.TYPE);
    cache.put("boolean", Boolean.TYPE);
    cache.put("char", Character.TYPE);
    cache.put("[byte", [B.class);
    cache.put("[short", [S.class);
    cache.put("[int", [I.class);
    cache.put("[long", [J.class);
    cache.put("[float", [F.class);
    cache.put("[double", [D.class);
    cache.put("[boolean", [Z.class);
    cache.put("[char", [C.class);
    cache.put("[B", [B.class);
    cache.put("[S", [S.class);
    cache.put("[I", [I.class);
    cache.put("[J", [J.class);
    cache.put("[F", [F.class);
    cache.put("[D", [D.class);
    cache.put("[C", [C.class);
    cache.put("[Z", [Z.class);
    cache.put(HashMap.class.getName(), HashMap.class);
  }
  
  public static long a(String paramString)
  {
    long l1 = -3750763034362895579L;
    int i = 0;
    while (i < paramString.length())
    {
      int n = paramString.charAt(i);
      int j = n;
      long l2 = l1;
      if (n != 95) {
        if (n == 45)
        {
          l2 = l1;
        }
        else
        {
          int k = j;
          if (n >= 65)
          {
            k = j;
            if (n <= 90) {
              k = (char)(n + 32);
            }
          }
          l2 = (l1 ^ k) * 1099511628211L;
        }
      }
      i += 1;
      l1 = l2;
    }
    return l1;
  }
  
  private static boolean add(Class paramClass, String paramString)
  {
    if ((m == null) && (!w)) {}
    try
    {
      HashMap localHashMap = new HashMap();
      localHashMap.put(Class.forName("kotlin.ranges.CharRange"), new String[] { "getEndInclusive", "isEmpty" });
      localHashMap.put(Class.forName("kotlin.ranges.IntRange"), new String[] { "getEndInclusive", "isEmpty" });
      localHashMap.put(Class.forName("kotlin.ranges.LongRange"), new String[] { "getEndInclusive", "isEmpty" });
      localHashMap.put(Class.forName("kotlin.ranges.ClosedFloatRange"), new String[] { "getEndInclusive", "isEmpty" });
      localHashMap.put(Class.forName("kotlin.ranges.ClosedDoubleRange"), new String[] { "getEndInclusive", "isEmpty" });
      m = localHashMap;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    w = true;
    if (m == null) {
      return false;
    }
    paramClass = (String[])m.get(paramClass);
    if (paramClass == null) {
      return false;
    }
    return Arrays.binarySearch(paramClass, paramString) >= 0;
  }
  
  public static final BigDecimal apply(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof BigDecimal)) {
      return (BigDecimal)paramObject;
    }
    if ((paramObject instanceof BigInteger)) {
      return new BigDecimal((BigInteger)paramObject);
    }
    paramObject = paramObject.toString();
    if (paramObject.length() != 0)
    {
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        paramObject = new BigDecimal(paramObject);
        return paramObject;
      }
      catch (NumberFormatException paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    return null;
  }
  
  public static final Character deserialize(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Character)) {
      return (Character)paramObject;
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() == 0) {
        return null;
      }
      if (((String)localObject).length() != 1)
      {
        if (!Context.this$0) {
          return null;
        }
        localObject = new java.lang.StringBuilder();
        ((java.lang.StringBuilder)localObject).append("can not cast to char, value : ");
        ((java.lang.StringBuilder)localObject).append(paramObject);
        throw new JSONException(((java.lang.StringBuilder)localObject).toString());
      }
      try
      {
        char c1 = ((String)localObject).charAt(0);
        return Character.valueOf(c1);
      }
      catch (Exception paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    Object localObject = new java.lang.StringBuilder();
    ((java.lang.StringBuilder)localObject).append("can not cast to char, value : ");
    ((java.lang.StringBuilder)localObject).append(paramObject);
    throw new JSONException(((java.lang.StringBuilder)localObject).toString());
  }
  
  public static final Byte get(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Byte.valueOf(((Number)paramObject).byteValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        break label117;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        byte b1 = Byte.parseByte(paramObject);
        return Byte.valueOf(b1);
      }
      catch (NumberFormatException paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    java.lang.StringBuilder localStringBuilder = new java.lang.StringBuilder();
    localStringBuilder.append("can not cast to byte, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
    label117:
    return null;
  }
  
  public static Class get(String paramString, ClassLoader paramClassLoader)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      if (paramString.length() < 256)
      {
        Class localClass = (Class)cache.get(paramString);
        if (localClass != null) {
          return localClass;
        }
        if (paramString.charAt(0) == '[') {
          return Array.newInstance(get(paramString.substring(1), paramClassLoader), 0).getClass();
        }
        if ((paramString.startsWith("L")) && (paramString.endsWith(";"))) {
          return get(paramString.substring(1, paramString.length() - 1), paramClassLoader);
        }
        Object localObject1 = localClass;
        Object localObject3;
        if (paramClassLoader != null)
        {
          localObject1 = localClass;
          try
          {
            localClass = paramClassLoader.loadClass(paramString);
            localObject1 = localClass;
            localObject3 = cache;
            ((ConcurrentMap)localObject3).put(paramString, localClass);
            return localClass;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
          }
        }
        try
        {
          localObject3 = Thread.currentThread().getContextClassLoader();
          localObject2 = localObject1;
          if (localObject3 == null) {
            break label202;
          }
          localObject2 = localObject1;
          if (localObject3 == paramClassLoader) {
            break label202;
          }
          localObject2 = ((ClassLoader)localObject3).loadClass(paramString);
          paramClassLoader = cache;
          try
          {
            paramClassLoader.put(paramString, localObject2);
            return localObject2;
          }
          catch (Exception paramClassLoader)
          {
            localObject1 = localObject2;
          }
          paramClassLoader.printStackTrace();
        }
        catch (Exception paramClassLoader) {}
        Object localObject2 = localObject1;
        try
        {
          label202:
          paramClassLoader = Class.forName(paramString);
          localObject2 = paramClassLoader;
          localObject1 = cache;
          ((ConcurrentMap)localObject1).put(paramString, paramClassLoader);
          return paramClassLoader;
        }
        catch (Exception paramString)
        {
          paramString.printStackTrace();
          return localObject2;
        }
      }
      paramClassLoader = new java.lang.StringBuilder();
      paramClassLoader.append("className too long. ");
      paramClassLoader.append(paramString);
      throw new JSONException(paramClassLoader.toString());
    }
    return null;
  }
  
  public static Object get(Class paramClass)
  {
    if (paramClass == Byte.TYPE) {
      return Byte.valueOf((byte)0);
    }
    if (paramClass == Short.TYPE) {
      return Short.valueOf((short)0);
    }
    if (paramClass == Integer.TYPE) {
      return Integer.valueOf(0);
    }
    if (paramClass == Long.TYPE) {
      return Long.valueOf(0L);
    }
    if (paramClass == Float.TYPE) {
      return Float.valueOf(0.0F);
    }
    if (paramClass == Double.TYPE) {
      return Double.valueOf(0.0D);
    }
    if (paramClass == Boolean.TYPE) {
      return Boolean.FALSE;
    }
    if (paramClass == Character.TYPE) {
      return Character.valueOf('0');
    }
    return null;
  }
  
  public static final Object get(Object paramObject, Class paramClass)
  {
    return get(paramObject, paramClass, Context.pos);
  }
  
  public static final Object get(Object paramObject, Class paramClass, Context paramContext)
  {
    if (paramObject == null) {
      return null;
    }
    if (paramClass != null)
    {
      if (paramClass == paramObject.getClass()) {
        return paramObject;
      }
      Object localObject;
      if ((paramObject instanceof Map))
      {
        if (paramClass == Map.class) {
          return paramObject;
        }
        localObject = (Map)paramObject;
        if ((paramClass == Object.class) && (!((Map)localObject).containsKey("@type"))) {
          return paramObject;
        }
        return get((Map)localObject, paramClass, paramContext);
      }
      boolean bool = paramClass.isArray();
      int i = 0;
      if (bool)
      {
        if ((paramObject instanceof Collection))
        {
          localObject = (Collection)paramObject;
          paramObject = Array.newInstance(paramClass.getComponentType(), ((Collection)localObject).size());
          localObject = ((Collection)localObject).iterator();
          while (((Iterator)localObject).hasNext())
          {
            Array.set(paramObject, i, get(((Iterator)localObject).next(), paramClass.getComponentType(), paramContext));
            i += 1;
          }
          return paramObject;
        }
        if (paramClass == [B.class) {
          return toByteArray(paramObject);
        }
      }
      if (paramClass.isAssignableFrom(paramObject.getClass())) {
        return paramObject;
      }
      if ((paramClass != Boolean.TYPE) && (paramClass != Boolean.class))
      {
        if ((paramClass != Byte.TYPE) && (paramClass != Byte.class))
        {
          if (((paramClass == Character.TYPE) || (paramClass == Character.class)) && ((paramObject instanceof String)))
          {
            localObject = (String)paramObject;
            if (((String)localObject).length() == 1) {
              return Character.valueOf(((String)localObject).charAt(0));
            }
          }
          if ((paramClass != Short.TYPE) && (paramClass != Short.class))
          {
            if ((paramClass != Integer.TYPE) && (paramClass != Integer.class))
            {
              if ((paramClass != Long.TYPE) && (paramClass != Long.class))
              {
                if ((paramClass != Float.TYPE) && (paramClass != Float.class))
                {
                  if ((paramClass != Double.TYPE) && (paramClass != Double.class))
                  {
                    if (paramClass == String.class) {
                      return getValue(paramObject);
                    }
                    if (paramClass == BigDecimal.class) {
                      return apply(paramObject);
                    }
                    if (paramClass == BigInteger.class) {
                      return read(paramObject);
                    }
                    if (paramClass == Date.class) {
                      return parse(paramObject);
                    }
                    if (paramClass.isEnum()) {
                      return parse(paramObject, paramClass, paramContext);
                    }
                    if (Calendar.class.isAssignableFrom(paramClass))
                    {
                      paramContext = parse(paramObject);
                      if (paramClass == Calendar.class) {
                        paramObject = Calendar.getInstance(JDJSON.defaultTimeZone, JDJSON.defaultLocale);
                      }
                      try
                      {
                        paramObject = paramClass.newInstance();
                        paramObject = (Calendar)paramObject;
                        paramObject.setTime(paramContext);
                        return paramObject;
                      }
                      catch (Exception paramObject)
                      {
                        paramContext = new java.lang.StringBuilder();
                        paramContext.append("can not cast to : ");
                        paramContext.append(paramClass.getName());
                        throw new JSONException(paramContext.toString(), paramObject);
                      }
                    }
                    if ((paramObject instanceof String))
                    {
                      paramObject = (String)paramObject;
                      if (paramObject.length() != 0)
                      {
                        if ("null".equals(paramObject)) {
                          return null;
                        }
                        if (paramClass == Currency.class) {
                          return Currency.getInstance(paramObject);
                        }
                      }
                      else
                      {
                        return null;
                      }
                    }
                    paramObject = new java.lang.StringBuilder();
                    paramObject.append("can not cast to : ");
                    paramObject.append(paramClass.getName());
                    throw new JSONException(paramObject.toString());
                  }
                  return getDouble(paramObject);
                }
                return getFloat(paramObject);
              }
              return getLong(paramObject);
            }
            return getInt(paramObject);
          }
          return toString(paramObject);
        }
        return get(paramObject);
      }
      return getBoolean(paramObject);
    }
    throw new IllegalArgumentException("clazz is null");
  }
  
  public static final Object get(Object paramObject, ParameterizedType paramParameterizedType, Context paramContext)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a10 = a9\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static final Object get(Object paramObject, Type paramType, Context paramContext)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramType instanceof Class)) {
      return get(paramObject, (Class)paramType, paramContext);
    }
    if ((paramType instanceof ParameterizedType)) {
      return get(paramObject, (ParameterizedType)paramType, paramContext);
    }
    if ((paramObject instanceof String))
    {
      paramContext = (String)paramObject;
      if (paramContext.length() == 0) {
        break label113;
      }
      if ("null".equals(paramContext)) {
        return null;
      }
    }
    if ((paramType instanceof TypeVariable)) {
      return paramObject;
    }
    paramObject = new java.lang.StringBuilder();
    paramObject.append("can not cast to : ");
    paramObject.append(paramType);
    throw new JSONException(paramObject.toString());
    label113:
    return null;
  }
  
  public static final Object get(Map paramMap, Class paramClass, Context paramContext)
  {
    int i = 0;
    if (paramClass == StackTraceElement.class) {}
    try
    {
      paramClass = paramMap.get("className");
      paramClass = (String)paramClass;
      paramContext = paramMap.get("methodName");
      paramContext = (String)paramContext;
      localObject1 = paramMap.get("fileName");
      localObject1 = (String)localObject1;
      paramMap = paramMap.get("lineNumber");
      paramMap = (Number)paramMap;
      if (paramMap != null) {
        i = paramMap.intValue();
      }
      paramMap = new StackTraceElement(paramClass, paramContext, (String)localObject1, i);
      return paramMap;
    }
    catch (Exception paramMap)
    {
      Object localObject1;
      boolean bool;
      Object localObject2;
      Class localClass;
      throw new JSONException(paramMap.getMessage(), paramMap);
    }
    localObject1 = paramMap.get("@type");
    bool = localObject1 instanceof String;
    localObject2 = null;
    if (bool)
    {
      localObject1 = (String)localObject1;
      localClass = get((String)localObject1, null);
      if (localClass != null)
      {
        bool = localClass.equals(paramClass);
        if (!bool)
        {
          paramMap = get(paramMap, localClass, paramContext);
          return paramMap;
        }
      }
      else
      {
        paramMap = new java.lang.StringBuilder();
        paramMap.append((String)localObject1);
        paramMap.append(" not found");
        paramMap = new ClassNotFoundException(paramMap.toString());
        throw paramMap;
      }
    }
    bool = paramClass.isInterface();
    if (bool)
    {
      if ((paramMap instanceof JDJSONObject)) {
        paramMap = (JDJSONObject)paramMap;
      } else {
        paramMap = new JDJSONObject(paramMap);
      }
      localObject1 = paramContext;
      if (paramContext == null) {
        localObject1 = Context.get();
      }
      paramContext = ((Context)localObject1).get(paramClass);
      if (paramContext != null)
      {
        paramMap = JDJSON.parseObject(JDJSON.toJSONString(paramMap), paramClass);
        return paramMap;
      }
      paramContext = Thread.currentThread().getContextClassLoader();
      paramMap = Proxy.newProxyInstance(paramContext, new Class[] { paramClass }, paramMap);
      return paramMap;
    }
    if ((paramClass == String.class) && ((paramMap instanceof JDJSONObject)))
    {
      paramMap = paramMap.toString();
      return paramMap;
    }
    localObject1 = paramContext;
    if (paramContext == null) {
      localObject1 = Context.pos;
    }
    paramContext = ((Context)localObject1).get(paramClass);
    paramClass = localObject2;
    if ((paramContext instanceof com.jd.parser.Label)) {
      paramClass = (com.jd.parser.Label)paramContext;
    }
    if (paramClass != null)
    {
      paramMap = paramClass.a(paramMap, (Context)localObject1);
      return paramMap;
    }
    paramMap = new JSONException("can not get javaBeanDeserializer");
    throw paramMap;
  }
  
  public static Field get(Class paramClass, String paramString, Field[] paramArrayOfField, Map paramMap)
  {
    Object localObject2 = parse(paramClass, paramString, paramArrayOfField, paramMap);
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new java.lang.StringBuilder();
      ((java.lang.StringBuilder)localObject1).append("_");
      ((java.lang.StringBuilder)localObject1).append(paramString);
      localObject1 = parse(paramClass, ((java.lang.StringBuilder)localObject1).toString(), paramArrayOfField, paramMap);
    }
    localObject2 = localObject1;
    if (localObject1 == null)
    {
      localObject1 = new java.lang.StringBuilder();
      ((java.lang.StringBuilder)localObject1).append("m_");
      ((java.lang.StringBuilder)localObject1).append(paramString);
      localObject2 = parse(paramClass, ((java.lang.StringBuilder)localObject1).toString(), paramArrayOfField, paramMap);
    }
    if (localObject2 == null)
    {
      localObject1 = new java.lang.StringBuilder();
      ((java.lang.StringBuilder)localObject1).append("m");
      ((java.lang.StringBuilder)localObject1).append(paramString.substring(0, 1).toUpperCase());
      ((java.lang.StringBuilder)localObject1).append(paramString.substring(1));
      return parse(paramClass, ((java.lang.StringBuilder)localObject1).toString(), paramArrayOfField, paramMap);
    }
    return localObject2;
  }
  
  public static boolean get(Class paramClass, Member paramMember, int paramInt)
  {
    if (paramMember != null)
    {
      if (!quoting) {
        return false;
      }
      paramClass = paramClass.getSuperclass();
      if (((paramClass == null) || (paramClass == Object.class)) && ((paramMember.getModifiers() & 0x1) != 0) && ((paramInt & 0x1) != 0)) {
        return false;
      }
      paramClass = (AccessibleObject)paramMember;
    }
    try
    {
      paramClass.setAccessible(true);
      return true;
    }
    catch (AccessControlException paramClass)
    {
      for (;;) {}
    }
    quoting = false;
    return false;
  }
  
  public static final Boolean getBoolean(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Boolean)) {
      return (Boolean)paramObject;
    }
    if ((paramObject instanceof Number))
    {
      int i = ((Number)paramObject).intValue();
      boolean bool = true;
      if (i != 1) {
        bool = false;
      }
      return Boolean.valueOf(bool);
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() != 0)
      {
        if ("null".equals(localObject)) {
          return null;
        }
        if ((!"true".equalsIgnoreCase((String)localObject)) && (!"1".equals(localObject)))
        {
          if (("false".equalsIgnoreCase((String)localObject)) || ("0".equals(localObject))) {
            return Boolean.FALSE;
          }
        }
        else {
          return Boolean.TRUE;
        }
      }
      else
      {
        return null;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    Object localObject = new java.lang.StringBuilder();
    ((java.lang.StringBuilder)localObject).append("can not cast to boolean, value : ");
    ((java.lang.StringBuilder)localObject).append(paramObject);
    throw new JSONException(((java.lang.StringBuilder)localObject).toString());
  }
  
  public static Type getComponentType(Type paramType)
  {
    Type localType = paramType;
    if ((paramType instanceof Class)) {
      localType = getComponentType(((Class)paramType).getGenericSuperclass());
    }
    return localType;
  }
  
  public static final Double getDouble(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Double.valueOf(((Number)paramObject).doubleValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = paramObject.toString();
      if (paramObject.length() == 0) {
        break label117;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        double d = Double.parseDouble(paramObject);
        return Double.valueOf(d);
      }
      catch (NumberFormatException paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    java.lang.StringBuilder localStringBuilder = new java.lang.StringBuilder();
    localStringBuilder.append("can not cast to double, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
    label117:
    return null;
  }
  
  public static final Float getFloat(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Float.valueOf(((Number)paramObject).floatValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = paramObject.toString();
      if (paramObject.length() == 0) {
        break label117;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        float f = Float.parseFloat(paramObject);
        return Float.valueOf(f);
      }
      catch (NumberFormatException paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    java.lang.StringBuilder localStringBuilder = new java.lang.StringBuilder();
    localStringBuilder.append("can not cast to float, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
    label117:
    return null;
  }
  
  public static final Integer getInt(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Integer)) {
      return (Integer)paramObject;
    }
    if ((paramObject instanceof Number)) {
      return Integer.valueOf(((Number)paramObject).intValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        break label129;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        int i = Integer.parseInt(paramObject);
        return Integer.valueOf(i);
      }
      catch (NumberFormatException paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    java.lang.StringBuilder localStringBuilder = new java.lang.StringBuilder();
    localStringBuilder.append("can not cast to int, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
    label129:
    return null;
  }
  
  public static final Long getLong(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Long.valueOf(((Number)paramObject).longValue());
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).length() != 0) {
        if ("null".equals(localObject)) {
          return null;
        }
      }
    }
    try
    {
      long l1 = Long.parseLong((String)localObject);
      return Long.valueOf(l1);
    }
    catch (NumberFormatException localNumberFormatException)
    {
      f localF;
      for (;;) {}
    }
    localF = new f((String)localObject);
    if (localF.d(false)) {
      localObject = v;
    } else {
      localObject = null;
    }
    localF.d();
    if (localObject != null)
    {
      return Long.valueOf(((Calendar)localObject).getTimeInMillis());
      return null;
    }
    if (!Context.this$0) {
      return null;
    }
    Object localObject = new java.lang.StringBuilder();
    ((java.lang.StringBuilder)localObject).append("can not cast to long, value : ");
    ((java.lang.StringBuilder)localObject).append(paramObject);
    throw new JSONException(((java.lang.StringBuilder)localObject).toString());
  }
  
  public static String getName(String paramString)
  {
    String str = paramString;
    if (paramString != null)
    {
      str = paramString;
      if (paramString.length() != 0)
      {
        if ((paramString.length() > 1) && (Character.isUpperCase(paramString.charAt(1))) && (Character.isUpperCase(paramString.charAt(0)))) {
          return paramString;
        }
        paramString = paramString.toCharArray();
        paramString[0] = Character.toLowerCase(paramString[0]);
        str = new String(paramString);
      }
    }
    return str;
  }
  
  public static Class getRawType(Type paramType)
  {
    if (paramType.getClass() == Class.class) {
      return (Class)paramType;
    }
    if ((paramType instanceof ParameterizedType)) {
      return getRawType(((ParameterizedType)paramType).getRawType());
    }
    if ((paramType instanceof TypeVariable)) {
      return (Class)((TypeVariable)paramType).getBounds()[0];
    }
    if ((paramType instanceof WildcardType))
    {
      paramType = ((WildcardType)paramType).getUpperBounds();
      if (paramType.length == 1) {
        return getRawType(paramType[0]);
      }
    }
    return Object.class;
  }
  
  public static final String getValue(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    return paramObject.toString();
  }
  
  public static List init(Class paramClass, int paramInt, boolean paramBoolean1, JSONType paramJSONType, Map paramMap, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, PropertyNamingStrategy paramPropertyNamingStrategy)
  {
    int j = paramInt;
    Object localObject5 = paramMap;
    Object localObject4 = new LinkedHashMap();
    Object localObject8 = new HashMap();
    Object localObject6 = paramClass.getDeclaredFields();
    Object localObject3 = localObject6;
    int k = j;
    Object localObject1 = localObject4;
    Object localObject2 = paramMap;
    Object localObject7;
    if (!paramBoolean1)
    {
      paramBoolean1 = next(paramClass);
      localObject2 = new ArrayList();
      int n;
      int i1;
      for (localObject1 = paramClass; (localObject1 != null) && (localObject1 != Object.class); localObject1 = ((Class)localObject1).getSuperclass())
      {
        localObject6 = ((Class)localObject1).getDeclaredMethods();
        n = localObject6.length;
        k = 0;
        while (k < n)
        {
          localObject7 = localObject6[k];
          i1 = ((Method)localObject7).getModifiers();
          if (((i1 & 0x8) == 0) && ((i1 & 0x2) == 0) && ((i1 & 0x100) == 0) && ((i1 & 0x4) == 0) && (!((Method)localObject7).getReturnType().equals(Void.TYPE)) && (((Method)localObject7).getParameterTypes().length == 0) && (((Method)localObject7).getReturnType() != ClassLoader.class) && (((Method)localObject7).getDeclaringClass() != Object.class)) {
            ((List)localObject2).add(localObject7);
          }
          k += 1;
        }
      }
      Iterator localIterator = ((List)localObject2).iterator();
      Object localObject9 = null;
      Object localObject10 = null;
      localObject7 = null;
      localObject6 = null;
      localObject2 = localObject3;
      localObject3 = localObject8;
      localObject1 = localObject4;
      for (;;)
      {
        PropertyNamingStrategy localPropertyNamingStrategy = paramPropertyNamingStrategy;
        JSONType localJSONType = paramJSONType;
        if (!localIterator.hasNext()) {
          break;
        }
        Method localMethod = (Method)localIterator.next();
        String str = localMethod.getName();
        if ((!str.equals("getMetaClass")) || (!localMethod.getReturnType().getName().equals("groovy.lang.MetaClass")))
        {
          if (paramBoolean3) {
            localObject4 = (JSONField)localMethod.getAnnotation(JSONField.class);
          } else {
            localObject4 = null;
          }
          localObject8 = localObject4;
          if (localObject4 == null)
          {
            localObject8 = localObject4;
            if (paramBoolean3) {
              localObject8 = load(paramClass, localMethod);
            }
          }
          if ((!paramBoolean1) || (!add(paramClass, str)))
          {
            Object localObject11 = localObject9;
            Object localObject12 = localObject10;
            Object localObject14 = localObject7;
            Object localObject13 = localObject6;
            Object localObject15 = localObject8;
            if (localObject8 == null)
            {
              localObject11 = localObject9;
              localObject12 = localObject10;
              localObject14 = localObject7;
              localObject13 = localObject6;
              localObject15 = localObject8;
              if (paramBoolean1)
              {
                localObject11 = localObject9;
                localObject12 = localObject10;
                localObject4 = localObject7;
                localObject13 = localObject6;
                if (localObject10 == null)
                {
                  localObject12 = paramClass.getDeclaredConstructors();
                  if (localObject12.length == 1)
                  {
                    int i = 0;
                    localObject11 = localObject12[0].getParameterAnnotations();
                    localObject4 = read(paramClass);
                    if (localObject4 != null)
                    {
                      localObject6 = new String[localObject4.length];
                      System.arraycopy(localObject4, 0, localObject6, 0, localObject4.length);
                      Arrays.sort((Object[])localObject6);
                      localObject13 = new short[localObject4.length];
                      while (i < localObject4.length)
                      {
                        localObject13[Arrays.binarySearch(localObject6, localObject4[i])] = i;
                        i = (short)(i + 1);
                      }
                      localObject4 = localObject6;
                    }
                    else
                    {
                      localObject13 = localObject6;
                    }
                  }
                  else
                  {
                    localObject11 = localObject9;
                    localObject4 = localObject7;
                    localObject13 = localObject6;
                  }
                }
                if ((localObject4 != null) && (localObject13 != null) && (str.startsWith("get")))
                {
                  localObject6 = getName(str.substring(3));
                  i1 = Arrays.binarySearch((Object[])localObject4, localObject6);
                  n = i1;
                  if (i1 < 0)
                  {
                    k = 0;
                    for (;;)
                    {
                      n = i1;
                      if (k >= localObject4.length) {
                        break;
                      }
                      if (((String)localObject6).equalsIgnoreCase(localObject4[k]))
                      {
                        n = k;
                        break;
                      }
                      k += 1;
                    }
                  }
                  if (n >= 0)
                  {
                    localObject6 = localObject11[localObject13[n]];
                    if (localObject6 != null)
                    {
                      n = localObject6.length;
                      k = 0;
                      while (k < n)
                      {
                        localObject7 = localObject6[k];
                        if ((localObject7 instanceof JSONField))
                        {
                          localObject15 = (JSONField)localObject7;
                          localObject14 = localObject4;
                          break label779;
                        }
                        k += 1;
                      }
                    }
                  }
                  else {}
                }
                localObject14 = localObject4;
                localObject15 = localObject8;
              }
            }
            label779:
            if (localObject15 != null)
            {
              if (!((JSONField)localObject15).serialize())
              {
                localObject4 = localObject2;
                localObject2 = localObject5;
                break label2060;
              }
              i1 = ((JSONField)localObject15).ordinal();
              n = i1;
              int i2 = SerializerFeature.of(((JSONField)localObject15).serialzeFeatures());
              k = i2;
              if (((JSONField)localObject15).name().length() != 0)
              {
                localObject6 = ((JSONField)localObject15).name();
                localObject4 = localObject6;
                if (localObject5 != null)
                {
                  localObject4 = (String)((Map)localObject5).get(localObject6);
                  if (localObject4 == null)
                  {
                    localObject4 = localObject2;
                    localObject2 = localObject5;
                    break label2060;
                  }
                }
                get(paramClass, localMethod, j);
                ((Map)localObject1).put(localObject4, new Label((String)localObject4, localMethod, null, paramClass, null, i1, i2, (JSONField)localObject15, null, true));
                localObject4 = localObject2;
                j = paramInt;
                localObject2 = localObject5;
                break label2060;
              }
              j = n;
            }
            else
            {
              j = 0;
              k = 0;
            }
            localObject4 = localObject2;
            char c1;
            if (str.startsWith("get"))
            {
              if (str.length() >= 4)
              {
                if (str.equals("getClass"))
                {
                  j = paramInt;
                  localObject2 = localObject5;
                  break label2060;
                }
                c1 = str.charAt(3);
                if (Character.isUpperCase(c1))
                {
                  if (mDesign)
                  {
                    localObject2 = getName(str.substring(3));
                  }
                  else
                  {
                    localObject2 = new java.lang.StringBuilder();
                    ((java.lang.StringBuilder)localObject2).append(Character.toLowerCase(str.charAt(3)));
                    ((java.lang.StringBuilder)localObject2).append(str.substring(4));
                    localObject2 = ((java.lang.StringBuilder)localObject2).toString();
                  }
                }
                else if (c1 == '_')
                {
                  localObject2 = str.substring(4);
                }
                else if (c1 == 'f')
                {
                  localObject2 = str.substring(3);
                }
                else
                {
                  if ((str.length() < 5) || (!Character.isUpperCase(str.charAt(4)))) {
                    break label1481;
                  }
                  localObject2 = getName(str.substring(3));
                }
                if (process(paramClass, localJSONType, (String)localObject2))
                {
                  j = paramInt;
                  localObject2 = localObject5;
                  break label2060;
                }
                localObject8 = get(paramClass, (String)localObject2, (Field[])localObject4, (Map)localObject3);
                if (localObject8 != null)
                {
                  if (paramBoolean3) {
                    localObject6 = (JSONField)((Field)localObject8).getAnnotation(JSONField.class);
                  } else {
                    localObject6 = null;
                  }
                  if (localObject6 != null)
                  {
                    if (!((JSONField)localObject6).serialize())
                    {
                      j = paramInt;
                      localObject2 = localObject5;
                      break label2060;
                    }
                    j = ((JSONField)localObject6).ordinal();
                    k = SerializerFeature.of(((JSONField)localObject6).serialzeFeatures());
                    if (((JSONField)localObject6).name().length() != 0)
                    {
                      localObject7 = ((JSONField)localObject6).name();
                      localObject2 = localObject7;
                      if (localObject5 != null)
                      {
                        localObject2 = (String)((Map)localObject5).get(localObject7);
                        if (localObject2 == null)
                        {
                          j = paramInt;
                          localObject2 = localObject5;
                          break label2060;
                        }
                        localObject7 = localObject6;
                      }
                      else
                      {
                        localObject7 = localObject6;
                      }
                    }
                    else
                    {
                      localObject7 = localObject6;
                    }
                  }
                  else
                  {
                    localObject7 = localObject6;
                  }
                }
                else
                {
                  localObject7 = null;
                }
                localObject6 = localObject2;
                if (localPropertyNamingStrategy != null) {
                  localObject6 = localPropertyNamingStrategy.translate((String)localObject2);
                }
                if (localObject5 != null)
                {
                  localObject6 = (String)((Map)localObject5).get(localObject6);
                  if (localObject6 == null)
                  {
                    j = paramInt;
                    localObject2 = localObject5;
                    break label2060;
                  }
                }
                get(paramClass, localMethod, paramInt);
                localObject5 = new Label((String)localObject6, localMethod, (Field)localObject8, paramClass, null, j, k, (JSONField)localObject15, (JSONField)localObject7, paramBoolean4);
                localObject2 = localObject1;
                ((Map)localObject1).put(localObject6, localObject5);
                localObject1 = localObject2;
                n = k;
                i1 = j;
                break label1509;
                label1481:
                j = paramInt;
                localObject2 = paramMap;
                break label2060;
              }
              else
              {
                j = paramInt;
                localObject2 = paramMap;
                break label2060;
              }
            }
            else
            {
              i1 = j;
              n = k;
            }
            label1509:
            if (str.startsWith("is"))
            {
              if (str.length() < 3)
              {
                j = paramInt;
                localObject2 = paramMap;
              }
              else
              {
                c1 = str.charAt(2);
                if (Character.isUpperCase(c1))
                {
                  if (mDesign)
                  {
                    localObject2 = getName(str.substring(2));
                  }
                  else
                  {
                    localObject2 = new java.lang.StringBuilder();
                    ((java.lang.StringBuilder)localObject2).append(Character.toLowerCase(str.charAt(2)));
                    ((java.lang.StringBuilder)localObject2).append(str.substring(3));
                    localObject2 = ((java.lang.StringBuilder)localObject2).toString();
                  }
                }
                else if (c1 == '_')
                {
                  localObject2 = str.substring(3);
                }
                else
                {
                  if (c1 != 'f') {
                    break label2043;
                  }
                  localObject2 = str.substring(2);
                }
                if (process(paramClass, localJSONType, (String)localObject2))
                {
                  j = paramInt;
                  localObject2 = paramMap;
                }
                else
                {
                  localObject5 = get(paramClass, (String)localObject2, (Field[])localObject4, (Map)localObject3);
                  localObject6 = localObject5;
                  if (localObject5 == null) {
                    localObject6 = get(paramClass, str, (Field[])localObject4, (Map)localObject3);
                  }
                  if (localObject6 != null)
                  {
                    if (paramBoolean3) {
                      localObject5 = (JSONField)((Field)localObject6).getAnnotation(JSONField.class);
                    } else {
                      localObject5 = null;
                    }
                    if (localObject5 != null)
                    {
                      if (!((JSONField)localObject5).serialize())
                      {
                        j = paramInt;
                        localObject2 = paramMap;
                        break label2060;
                      }
                      k = ((JSONField)localObject5).ordinal();
                      j = SerializerFeature.of(((JSONField)localObject5).serialzeFeatures());
                      if (((JSONField)localObject5).name().length() != 0)
                      {
                        localObject8 = ((JSONField)localObject5).name();
                        localObject7 = localObject8;
                        localObject2 = paramMap;
                        if (paramMap != null)
                        {
                          localObject7 = (String)paramMap.get(localObject8);
                          if (localObject7 == null)
                          {
                            j = paramInt;
                            break label2060;
                          }
                          localObject2 = localObject7;
                          localObject8 = localObject5;
                        }
                        else
                        {
                          localObject2 = localObject7;
                          localObject8 = localObject5;
                        }
                      }
                      else
                      {
                        localObject8 = localObject5;
                      }
                    }
                    else
                    {
                      j = n;
                      k = i1;
                      localObject8 = localObject5;
                    }
                  }
                  else
                  {
                    localObject8 = null;
                    k = i1;
                    j = n;
                  }
                  localObject9 = paramPropertyNamingStrategy;
                  localObject7 = paramMap;
                  localObject5 = localObject2;
                  if (localObject9 != null) {
                    localObject5 = ((PropertyNamingStrategy)localObject9).translate((String)localObject2);
                  }
                  if (localObject7 != null)
                  {
                    localObject2 = (String)((Map)localObject7).get(localObject5);
                    if (localObject2 == null)
                    {
                      j = paramInt;
                      localObject2 = localObject7;
                      break label2060;
                    }
                  }
                  else
                  {
                    localObject2 = localObject5;
                  }
                  n = paramInt;
                  get(paramClass, (Member)localObject6, n);
                  get(paramClass, localMethod, n);
                  localObject5 = localObject1;
                  ((Map)localObject1).put(localObject2, new Label((String)localObject2, localMethod, (Field)localObject6, paramClass, null, k, j, (JSONField)localObject15, (JSONField)localObject8, paramBoolean4));
                  j = n;
                  localObject2 = localObject7;
                  localObject1 = localObject5;
                  break label2060;
                  label2043:
                  j = paramInt;
                  localObject2 = paramMap;
                }
              }
            }
            else
            {
              j = paramInt;
              localObject2 = paramMap;
            }
            label2060:
            localObject5 = localObject2;
            localObject2 = localObject4;
            localObject9 = localObject11;
            localObject10 = localObject12;
            localObject7 = localObject14;
            localObject6 = localObject13;
          }
        }
      }
      k = j;
      localObject6 = localObject2;
      localObject2 = localObject5;
    }
    localObject3 = new ArrayList(localObject6.length);
    j = localObject6.length;
    paramInt = 0;
    while (paramInt < j)
    {
      paramMap = localObject6[paramInt];
      if (((paramMap.getModifiers() & 0x8) == 0) && (!paramMap.getName().equals("this$0")) && ((paramMap.getModifiers() & 0x1) != 0)) {
        ((List)localObject3).add(paramMap);
      }
      paramInt += 1;
    }
    for (paramMap = paramClass.getSuperclass(); (paramMap != null) && (paramMap != Object.class); paramMap = paramMap.getSuperclass())
    {
      localObject4 = paramMap.getDeclaredFields();
      j = localObject4.length;
      paramInt = 0;
      while (paramInt < j)
      {
        localObject5 = localObject4[paramInt];
        if (((((Field)localObject5).getModifiers() & 0x8) == 0) && ((((Field)localObject5).getModifiers() & 0x1) != 0)) {
          ((List)localObject3).add(localObject5);
        }
        paramInt += 1;
      }
    }
    localObject6 = ((List)localObject3).iterator();
    while (((Iterator)localObject6).hasNext())
    {
      localObject7 = (Field)((Iterator)localObject6).next();
      if (paramBoolean3) {
        localObject3 = (JSONField)((Field)localObject7).getAnnotation(JSONField.class);
      } else {
        localObject3 = null;
      }
      paramMap = ((Field)localObject7).getName();
      if (localObject3 != null)
      {
        if (!((JSONField)localObject3).serialize()) {
          continue;
        }
        paramInt = ((JSONField)localObject3).ordinal();
        j = SerializerFeature.of(((JSONField)localObject3).serialzeFeatures());
        if (((JSONField)localObject3).name().length() != 0) {
          paramMap = ((JSONField)localObject3).name();
        } else {}
      }
      else
      {
        paramInt = 0;
        j = 0;
      }
      if (localObject2 != null)
      {
        paramMap = (String)((Map)localObject2).get(paramMap);
        if (paramMap == null) {
          continue;
        }
      }
      localObject5 = paramPropertyNamingStrategy;
      localObject4 = paramMap;
      if (localObject5 != null) {
        localObject4 = ((PropertyNamingStrategy)localObject5).translate(paramMap);
      }
      if (!((Map)localObject1).containsKey(localObject4))
      {
        get(paramClass, (Member)localObject7, k);
        ((Map)localObject1).put(localObject4, new Label((String)localObject4, null, (Field)localObject7, paramClass, null, paramInt, j, null, (JSONField)localObject3, paramBoolean4));
      }
    }
    paramMap = new ArrayList();
    if (paramJSONType != null)
    {
      paramJSONType = paramJSONType.orders();
      paramClass = paramJSONType;
      if ((paramJSONType != null) && (paramJSONType.length == ((Map)localObject1).size()))
      {
        j = paramJSONType.length;
        paramInt = 0;
        while (paramInt < j)
        {
          if (!((Map)localObject1).containsKey(paramJSONType[paramInt]))
          {
            paramInt = 0;
            break label2619;
          }
          paramInt += 1;
        }
        paramInt = 1;
      }
      else
      {
        paramInt = 0;
      }
    }
    else
    {
      paramClass = null;
      paramInt = 0;
    }
    label2619:
    if (paramInt != 0)
    {
      j = paramClass.length;
      paramInt = 0;
      while (paramInt < j)
      {
        paramMap.add((Label)((Map)localObject1).get(paramClass[paramInt]));
        paramInt += 1;
      }
    }
    paramClass = ((Map)localObject1).values().iterator();
    while (paramClass.hasNext()) {
      paramMap.add((Label)paramClass.next());
    }
    if (paramBoolean2) {
      Collections.sort(paramMap);
    }
    return paramMap;
  }
  
  public static boolean isAssignableFrom(Type paramType)
  {
    if ((paramType instanceof ParameterizedType)) {
      return true;
    }
    if ((paramType instanceof Class))
    {
      paramType = ((Class)paramType).getGenericSuperclass();
      return (paramType != Object.class) && (isAssignableFrom(paramType));
    }
    return false;
  }
  
  public static JSONField load(Class paramClass, Method paramMethod)
  {
    Object localObject1 = paramClass.getInterfaces();
    int n = localObject1.length;
    int i = 0;
    Object localObject2;
    int j;
    Object localObject3;
    int k;
    while (i < n)
    {
      localObject2 = localObject1[i].getMethods();
      int i1 = localObject2.length;
      j = 0;
      while (j < i1)
      {
        localObject3 = localObject2[j];
        if (((Method)localObject3).getName().equals(paramMethod.getName()))
        {
          Class[] arrayOfClass1 = ((Method)localObject3).getParameterTypes();
          Class[] arrayOfClass2 = paramMethod.getParameterTypes();
          if (arrayOfClass1.length == arrayOfClass2.length)
          {
            k = 0;
            while (k < arrayOfClass1.length)
            {
              if (!arrayOfClass1[k].equals(arrayOfClass2[k]))
              {
                k = 0;
                break label135;
              }
              k += 1;
            }
            k = 1;
            label135:
            if (k != 0)
            {
              localObject3 = (JSONField)((Method)localObject3).getAnnotation(JSONField.class);
              if (localObject3 != null) {
                return localObject3;
              }
            }
          }
        }
        j += 1;
      }
      i += 1;
    }
    localObject1 = paramClass.getSuperclass();
    if (localObject1 == null) {
      return null;
    }
    if (Modifier.isAbstract(((Class)localObject1).getModifiers()))
    {
      paramClass = paramMethod.getParameterTypes();
      localObject1 = ((Class)localObject1).getMethods();
      k = localObject1.length;
      i = 0;
      while (i < k)
      {
        localObject2 = localObject1[i];
        localObject3 = ((Method)localObject2).getParameterTypes();
        if ((localObject3.length == paramClass.length) && (((Method)localObject2).getName().equals(paramMethod.getName())))
        {
          j = 0;
          while (j < paramClass.length)
          {
            if (!localObject3[j].equals(paramClass[j]))
            {
              j = 0;
              break label304;
            }
            j += 1;
          }
          j = 1;
          label304:
          if (j != 0)
          {
            localObject2 = (JSONField)((Method)localObject2).getAnnotation(JSONField.class);
            if (localObject2 != null) {
              return localObject2;
            }
          }
        }
        i += 1;
      }
    }
    return null;
  }
  
  public static boolean next(Class paramClass)
  {
    if ((c == null) && (!l)) {}
    try
    {
      c = Class.forName("kotlin.Metadata");
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    l = true;
    if (c == null) {
      return false;
    }
    return paramClass.isAnnotationPresent(c);
  }
  
  public static final Object parse(Object paramObject, Class paramClass, Context paramContext)
  {
    if ((paramObject instanceof String)) {
      paramObject = (String)paramObject;
    }
    try
    {
      i = paramObject.length();
      if (i == 0) {
        return null;
      }
      paramObject = Enum.valueOf(paramClass, paramObject);
      return paramObject;
    }
    catch (Exception paramObject)
    {
      int i;
      paramContext = new java.lang.StringBuilder();
      paramContext.append("can not cast to : ");
      paramContext.append(paramClass.getName());
      throw new JSONException(paramContext.toString(), paramObject);
    }
    if ((paramObject instanceof Number))
    {
      paramObject = (Number)paramObject;
      i = paramObject.intValue();
      paramObject = paramClass.getEnumConstants();
      if (i < paramObject.length) {
        return paramObject[i];
      }
    }
    paramObject = new java.lang.StringBuilder();
    paramObject.append("can not cast to : ");
    paramObject.append(paramClass.getName());
    throw new JSONException(paramObject.toString());
  }
  
  private static Field parse(Class paramClass, String paramString, Field[] paramArrayOfField, Map paramMap)
  {
    int j = paramArrayOfField.length;
    int i = 0;
    Object localObject1;
    while (i < j)
    {
      localObject1 = paramArrayOfField[i];
      localObject2 = ((Field)localObject1).getName();
      if (paramString.equals(localObject2)) {
        return localObject1;
      }
      if (paramString.length() > 2)
      {
        int k = paramString.charAt(0);
        if ((k >= 97) && (k <= 122))
        {
          k = paramString.charAt(1);
          if ((k >= 65) && (k <= 90) && (paramString.equalsIgnoreCase((String)localObject2))) {
            return localObject1;
          }
        }
      }
      i += 1;
    }
    Object localObject2 = paramClass.getSuperclass();
    paramClass = null;
    if (localObject2 != null)
    {
      if (localObject2 == Object.class) {
        return null;
      }
      if (paramMap != null) {
        paramClass = (Field[])paramMap.get(localObject2);
      }
      paramArrayOfField = paramClass;
      if (paramClass == null)
      {
        localObject1 = ((Class)localObject2).getDeclaredFields();
        paramClass = (Class)localObject1;
        paramArrayOfField = paramClass;
        if (paramMap != null)
        {
          paramMap.put(localObject2, localObject1);
          paramArrayOfField = paramClass;
        }
      }
      return get((Class)localObject2, paramString, paramArrayOfField, paramMap);
    }
    return null;
  }
  
  public static final Date parse(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return ((Calendar)paramObject).getTime();
    }
    if ((paramObject instanceof Date)) {
      return (Date)paramObject;
    }
    long l1 = -1L;
    if ((paramObject instanceof Number)) {
      l1 = ((Number)paramObject).longValue();
    }
    if ((paramObject instanceof String))
    {
      localObject = (String)paramObject;
      if (((String)localObject).indexOf('-') != -1)
      {
        if (((String)localObject).length() == JDJSON.DEFFAULT_DATE_FORMAT.length()) {
          paramObject = JDJSON.DEFFAULT_DATE_FORMAT;
        } else if (((String)localObject).length() == 10) {
          paramObject = "yyyy-MM-dd";
        } else if (((String)localObject).length() == 19) {
          paramObject = "yyyy-MM-dd HH:mm:ss";
        } else if ((((String)localObject).length() == 29) && (((String)localObject).charAt(26) == ':') && (((String)localObject).charAt(28) == '0')) {
          paramObject = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX";
        } else {
          paramObject = "yyyy-MM-dd HH:mm:ss.SSS";
        }
        paramObject = new SimpleDateFormat(paramObject, JDJSON.defaultLocale);
        paramObject.setTimeZone(JDJSON.defaultTimeZone);
      }
    }
    try
    {
      paramObject = paramObject.parse((String)localObject);
      return paramObject;
    }
    catch (ParseException paramObject)
    {
      for (;;) {}
    }
    paramObject = new java.lang.StringBuilder();
    paramObject.append("can not cast to Date, value : ");
    paramObject.append((String)localObject);
    throw new JSONException(paramObject.toString());
    if (((String)localObject).length() != 0)
    {
      if ("null".equals(localObject)) {
        return null;
      }
      l1 = Long.parseLong((String)localObject);
    }
    else
    {
      return null;
    }
    if (l1 >= 0L) {
      return new Date(l1);
    }
    Object localObject = new java.lang.StringBuilder();
    ((java.lang.StringBuilder)localObject).append("can not cast to Date, value : ");
    ((java.lang.StringBuilder)localObject).append(paramObject);
    throw new JSONException(((java.lang.StringBuilder)localObject).toString());
  }
  
  private static boolean process(Class paramClass, JSONType paramJSONType, String paramString)
  {
    if ((paramJSONType != null) && (paramJSONType.ignores() != null))
    {
      paramJSONType = paramJSONType.ignores();
      int j = paramJSONType.length;
      int i = 0;
      while (i < j)
      {
        if (paramString.equalsIgnoreCase(paramJSONType[i])) {
          return true;
        }
        i += 1;
      }
    }
    paramClass = paramClass.getSuperclass();
    return (paramClass != Object.class) && (paramClass != null) && (process(paramClass, (JSONType)paramClass.getAnnotation(JSONType.class), paramString));
  }
  
  public static final BigInteger read(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof BigInteger)) {
      return (BigInteger)paramObject;
    }
    if ((!(paramObject instanceof Float)) && (!(paramObject instanceof Double)))
    {
      paramObject = paramObject.toString();
      if (paramObject.length() == 0) {
        break label91;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        paramObject = new BigInteger(paramObject);
        return paramObject;
      }
      catch (NumberFormatException paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    return BigInteger.valueOf(((Number)paramObject).longValue());
    label91:
    return null;
  }
  
  public static String[] read(Class paramClass)
  {
    if ((buffer == null) && (!state)) {}
    try
    {
      localObject1 = Class.forName("kotlin.reflect.jvm.internal.KClassImpl");
      buffer = ((Class)localObject1).getConstructor(new Class[] { Class.class });
      index = ((Class)localObject1).getMethod("getConstructors", new Class[0]);
      a = Class.forName("kotlin.reflect.KFunction").getMethod("getParameters", new Class[0]);
      b = Class.forName("kotlin.reflect.KParameter").getMethod("getName", new Class[0]);
    }
    catch (Throwable localThrowable)
    {
      Object localObject1;
      for (;;) {}
    }
    state = true;
    if (buffer == null) {
      return null;
    }
    if (s) {
      return null;
    }
    try
    {
      paramClass = buffer.newInstance(new Object[] { paramClass });
      localObject1 = ((Iterable)index.invoke(paramClass, new Object[0])).iterator();
      paramClass = null;
      for (;;)
      {
        boolean bool = ((Iterator)localObject1).hasNext();
        if (!bool) {
          break;
        }
        paramClass = ((Iterator)localObject1).next();
        ((Iterator)localObject1).hasNext();
      }
      paramClass = (List)a.invoke(paramClass, new Object[0]);
      localObject1 = new String[paramClass.size()];
      int i = 0;
      for (;;)
      {
        int j = paramClass.size();
        if (i >= j) {
          break;
        }
        Object localObject2 = paramClass.get(i);
        localObject1[i] = ((String)b.invoke(localObject2, new Object[0]));
        i += 1;
      }
      return localObject1;
    }
    catch (Throwable paramClass)
    {
      for (;;) {}
    }
    s = true;
    return null;
  }
  
  public static Type resolve(Type paramType)
  {
    if ((paramType instanceof ParameterizedType))
    {
      Type localType = ((ParameterizedType)paramType).getActualTypeArguments()[0];
      paramType = localType;
      if ((localType instanceof WildcardType))
      {
        Type[] arrayOfType = ((WildcardType)localType).getUpperBounds();
        paramType = localType;
        if (arrayOfType.length == 1) {
          paramType = arrayOfType[0];
        }
      }
    }
    else
    {
      if ((paramType instanceof Class))
      {
        paramType = (Class)paramType;
        if (!paramType.getName().startsWith("java."))
        {
          paramType = resolve(paramType.getGenericSuperclass());
          break label91;
        }
      }
      paramType = null;
    }
    label91:
    if (paramType == null) {
      return Object.class;
    }
    return paramType;
  }
  
  public static boolean resolve(Type[] paramArrayOfType1, TypeVariable[] paramArrayOfTypeVariable, Type[] paramArrayOfType2)
  {
    if (paramArrayOfType2 != null)
    {
      if (paramArrayOfTypeVariable.length == 0) {
        return false;
      }
      int i = 0;
      boolean bool1;
      for (boolean bool2 = false; i < paramArrayOfType1.length; bool2 = bool1)
      {
        Object localObject = paramArrayOfType1[i];
        if ((localObject instanceof ParameterizedType))
        {
          localObject = (ParameterizedType)localObject;
          Type[] arrayOfType = ((ParameterizedType)localObject).getActualTypeArguments();
          bool1 = bool2;
          if (resolve(arrayOfType, paramArrayOfTypeVariable, paramArrayOfType2))
          {
            paramArrayOfType1[i] = new Types.ParameterizedTypeImpl(arrayOfType, ((ParameterizedType)localObject).getOwnerType(), ((ParameterizedType)localObject).getRawType());
            bool1 = true;
          }
        }
        else
        {
          bool1 = bool2;
          if ((localObject instanceof TypeVariable))
          {
            int j = 0;
            for (;;)
            {
              bool1 = bool2;
              if (j >= paramArrayOfTypeVariable.length) {
                break;
              }
              if (localObject.equals(paramArrayOfTypeVariable[j]))
              {
                paramArrayOfType1[i] = paramArrayOfType2[j];
                bool2 = true;
              }
              j += 1;
            }
          }
        }
        i += 1;
      }
      return bool2;
    }
    return false;
  }
  
  public static final byte[] toByteArray(Object paramObject)
  {
    if ((paramObject instanceof byte[])) {
      return (byte[])paramObject;
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      return f.encode(paramObject, 0, paramObject.length());
    }
    java.lang.StringBuilder localStringBuilder = new java.lang.StringBuilder();
    localStringBuilder.append("can not cast to int, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
  }
  
  public static final Short toString(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Number)) {
      return Short.valueOf(((Number)paramObject).shortValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        break label117;
      }
      if ("null".equals(paramObject)) {
        return null;
      }
      try
      {
        short s1 = Short.parseShort(paramObject);
        return Short.valueOf(s1);
      }
      catch (Exception paramObject)
      {
        if (!Context.this$0) {
          return null;
        }
        throw paramObject;
      }
    }
    if (!Context.this$0) {
      return null;
    }
    java.lang.StringBuilder localStringBuilder = new java.lang.StringBuilder();
    localStringBuilder.append("can not cast to short, value : ");
    localStringBuilder.append(paramObject);
    throw new JSONException(localStringBuilder.toString());
    label117:
    return null;
  }
}
