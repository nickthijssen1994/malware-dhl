package com.jd.views;

import com.jd.framework.json.anotation.JSONField;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;

public class Label
  implements Comparable<com.jd.a.a>
{
  public final String a;
  public final long b;
  public final boolean c;
  public final Method d;
  public final boolean e;
  public final boolean f;
  public final Field g;
  private int h = 0;
  public final Type i;
  public final String[] j;
  private final JSONField k;
  public final String l;
  public final boolean n;
  private final JSONField o;
  public final Class<?> owner;
  public final Class<?> type;
  
  public Label(String paramString, Class paramClass1, Class paramClass2, Type paramType, Field paramField, int paramInt1, int paramInt2)
  {
    a = paramString;
    owner = paramClass1;
    type = paramClass2;
    i = paramType;
    d = null;
    g = paramField;
    h = paramInt1;
    boolean bool1 = paramClass2.isEnum();
    boolean bool2 = true;
    if ((bool1) && (!com.jd.a.class.isAssignableFrom(paramClass2))) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    c = bool1;
    o = null;
    k = null;
    if (paramField != null)
    {
      paramInt1 = paramField.getModifiers();
      bool1 = bool2;
      if ((paramInt1 & 0x1) == 0) {
        if (d == null) {
          bool1 = bool2;
        } else {
          bool1 = false;
        }
      }
      n = bool1;
      e = Modifier.isTransient(paramInt1);
    }
    else
    {
      n = false;
      e = false;
    }
    f = false;
    long l1 = -3750763034362895579L;
    paramInt1 = 0;
    while (paramInt1 < paramString.length())
    {
      l1 = (l1 ^ paramString.charAt(paramInt1)) * 1099511628211L;
      paramInt1 += 1;
    }
    b = l1;
    l = null;
    j = new String[0];
  }
  
  public Label(String paramString, Method paramMethod, Field paramField, Class paramClass, Type paramType, int paramInt1, int paramInt2, JSONField paramJSONField1, JSONField paramJSONField2, boolean paramBoolean)
  {
    a = paramString;
    d = paramMethod;
    g = paramField;
    h = paramInt1;
    k = paramJSONField1;
    o = paramJSONField2;
    Object localObject2 = a();
    Object localObject1 = null;
    if (localObject2 != null)
    {
      paramJSONField2 = ((JSONField)localObject2).format();
      paramJSONField1 = paramJSONField2;
      if (paramJSONField2.trim().length() == 0) {
        paramJSONField1 = null;
      }
      j = ((JSONField)localObject2).alternateNames();
    }
    else
    {
      j = new String[0];
      paramJSONField1 = null;
    }
    l = paramJSONField1;
    boolean bool3 = true;
    boolean bool2 = true;
    if (paramField != null)
    {
      paramInt1 = paramField.getModifiers();
      boolean bool1;
      if ((paramMethod != null) && (((paramInt1 & 0x1) == 0) || (paramMethod.getReturnType() != paramField.getType()))) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      n = bool1;
      if ((paramInt1 & 0x80) != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      e = bool1;
    }
    else
    {
      n = false;
      e = false;
    }
    long l1 = -3750763034362895579L;
    paramInt1 = 0;
    while (paramInt1 < paramString.length())
    {
      l1 = (l1 ^ paramString.charAt(paramInt1)) * 1099511628211L;
      paramInt1 += 1;
    }
    b = l1;
    if (paramMethod != null)
    {
      paramString = paramMethod.getParameterTypes();
      if (paramString.length == 1)
      {
        paramField = paramString[0];
        if ((paramField != Class.class) && (paramField != String.class) && (!paramField.isPrimitive()))
        {
          if (paramBoolean) {
            paramString = paramMethod.getGenericParameterTypes()[0];
          } else {
            paramString = paramField;
          }
        }
        else {
          paramString = paramField;
        }
        f = false;
        paramJSONField1 = paramField;
        paramField = paramString;
      }
      else
      {
        paramString = paramMethod.getReturnType();
        paramJSONField1 = paramString;
        if ((paramString != Class.class) && (paramBoolean)) {
          paramString = paramMethod.getGenericReturnType();
        }
        f = true;
        paramField = paramString;
      }
      owner = paramMethod.getDeclaringClass();
      paramString = paramJSONField1;
      paramMethod = paramField;
    }
    else
    {
      paramString = paramField.getType();
      paramJSONField1 = paramString;
      if ((!paramString.isPrimitive()) && (paramString != String.class) && (!paramString.isEnum())) {
        if (paramBoolean) {
          paramString = paramField.getGenericType();
        } else {}
      }
      owner = paramField.getDeclaringClass();
      f = Modifier.isFinal(paramField.getModifiers());
      paramMethod = paramString;
      paramString = paramJSONField1;
    }
    if ((paramClass != null) && (paramString == Object.class) && ((paramMethod instanceof TypeVariable)))
    {
      localObject2 = (TypeVariable)paramMethod;
      if ((paramType instanceof ParameterizedType)) {
        paramField = ((ParameterizedType)paramType).getActualTypeArguments();
      } else {
        paramField = null;
      }
      paramJSONField1 = paramClass;
      while ((paramJSONField1 != null) && (paramJSONField1 != Object.class) && (paramJSONField1 != owner))
      {
        Type localType = paramJSONField1.getGenericSuperclass();
        paramJSONField2 = paramField;
        if ((localType instanceof ParameterizedType))
        {
          paramJSONField2 = ((ParameterizedType)localType).getActualTypeArguments();
          StringBuilder.resolve(paramJSONField2, paramJSONField1.getTypeParameters(), paramField);
        }
        paramJSONField1 = paramJSONField1.getSuperclass();
        paramField = paramJSONField2;
      }
      paramJSONField1 = localObject1;
      if (paramField != null)
      {
        paramJSONField2 = owner.getTypeParameters();
        paramInt1 = 0;
        for (;;)
        {
          paramJSONField1 = localObject1;
          if (paramInt1 >= paramJSONField2.length) {
            break;
          }
          if (localObject2.equals(paramJSONField2[paramInt1]))
          {
            paramJSONField1 = paramField[paramInt1];
            break;
          }
          paramInt1 += 1;
        }
      }
      if (paramJSONField1 != null)
      {
        type = StringBuilder.getRawType(paramJSONField1);
        i = paramJSONField1;
        if ((paramString.isEnum()) && (!com.jd.a.class.isAssignableFrom(paramString))) {
          paramBoolean = bool2;
        } else {
          paramBoolean = false;
        }
        c = paramBoolean;
        return;
      }
    }
    if (!(paramMethod instanceof Class))
    {
      if (paramType != null) {
        paramField = paramType;
      } else {
        paramField = paramClass;
      }
      paramJSONField1 = resolve(paramClass, (Type)paramField, (Type)paramMethod);
      paramClass = paramJSONField1;
      paramField = paramString;
      paramType = paramClass;
      if (paramJSONField1 != paramMethod) {
        if ((paramJSONField1 instanceof ParameterizedType))
        {
          paramField = StringBuilder.getRawType(paramJSONField1);
          paramType = paramClass;
        }
        else
        {
          paramField = paramString;
          paramType = paramClass;
          if ((paramJSONField1 instanceof Class))
          {
            paramField = StringBuilder.getRawType(paramJSONField1);
            paramType = paramClass;
          }
        }
      }
    }
    else
    {
      paramType = paramMethod;
      paramField = paramString;
    }
    i = ((Type)paramType);
    type = paramField;
    if ((!paramField.isArray()) && (paramField.isEnum()) && (!com.jd.a.class.isAssignableFrom(paramField))) {
      paramBoolean = bool3;
    } else {
      paramBoolean = false;
    }
    c = paramBoolean;
  }
  
  public static Type resolve(Class paramClass, Type paramType1, Type paramType2)
  {
    if (paramClass != null)
    {
      if (paramType1 == null) {
        return paramType2;
      }
      Object localObject1;
      if ((paramType2 instanceof GenericArrayType))
      {
        localObject1 = ((GenericArrayType)paramType2).getGenericComponentType();
        paramClass = resolve(paramClass, paramType1, (Type)localObject1);
        if (localObject1 != paramClass) {
          return Array.newInstance(StringBuilder.getRawType(paramClass), 0).getClass();
        }
        return paramType2;
      }
      if (!StringBuilder.isAssignableFrom(paramType1)) {
        return paramType2;
      }
      Object localObject2;
      Object localObject3;
      int m;
      if ((paramType2 instanceof TypeVariable))
      {
        localObject1 = (ParameterizedType)StringBuilder.getComponentType(paramType1);
        localObject2 = StringBuilder.getRawType((Type)localObject1);
        localObject3 = (TypeVariable)paramType2;
        m = 0;
        while (m < ((Class)localObject2).getTypeParameters().length)
        {
          if (localObject2.getTypeParameters()[m].getName().equals(((TypeVariable)localObject3).getName())) {
            return localObject1.getActualTypeArguments()[m];
          }
          m += 1;
        }
      }
      if ((paramType2 instanceof ParameterizedType))
      {
        localObject3 = (ParameterizedType)paramType2;
        Type[] arrayOfType = ((ParameterizedType)localObject3).getActualTypeArguments();
        if ((paramType1 instanceof ParameterizedType))
        {
          localObject1 = (ParameterizedType)paramType1;
          paramType1 = paramClass.getTypeParameters();
        }
        else if ((paramClass.getGenericSuperclass() instanceof ParameterizedType))
        {
          localObject1 = (ParameterizedType)paramClass.getGenericSuperclass();
          paramType1 = paramClass.getSuperclass().getTypeParameters();
        }
        else
        {
          paramType1 = null;
          localObject1 = null;
        }
        paramClass = null;
        int i1 = 0;
        m = 0;
        while ((i1 < arrayOfType.length) && (localObject1 != null))
        {
          Object localObject4 = arrayOfType[i1];
          int i3 = m;
          localObject2 = paramClass;
          if ((localObject4 instanceof TypeVariable))
          {
            localObject4 = (TypeVariable)localObject4;
            int i2 = 0;
            for (;;)
            {
              i3 = m;
              localObject2 = paramClass;
              if (i2 >= paramType1.length) {
                break;
              }
              localObject2 = paramClass;
              if (paramType1[i2].getName().equals(((TypeVariable)localObject4).getName()))
              {
                localObject2 = paramClass;
                if (paramClass == null) {
                  localObject2 = ((ParameterizedType)localObject1).getActualTypeArguments();
                }
                arrayOfType[i1] = localObject2[i2];
                m = 1;
              }
              i2 += 1;
              paramClass = (Class)localObject2;
            }
          }
          i1 += 1;
          m = i3;
          paramClass = (Class)localObject2;
        }
        if (m != 0) {
          return new Types.ParameterizedTypeImpl(arrayOfType, ((ParameterizedType)localObject3).getOwnerType(), ((ParameterizedType)localObject3).getRawType());
        }
      }
    }
    return paramType2;
  }
  
  public JSONField a()
  {
    JSONField localJSONField = o;
    if (localJSONField != null) {
      return localJSONField;
    }
    return k;
  }
  
  public Object a(Object paramObject)
    throws IllegalAccessException, InvocationTargetException
  {
    if (n) {
      return g.get(paramObject);
    }
    return d.invoke(paramObject, new Object[0]);
  }
  
  public boolean b(Label paramLabel)
  {
    if (paramLabel == this) {
      return true;
    }
    return compareTo(paramLabel) == 0;
  }
  
  public int compareTo(Label paramLabel)
  {
    int m = h;
    int i1 = h;
    if (m < i1) {
      return -1;
    }
    if (m > i1) {
      return 1;
    }
    return a.compareTo(a);
  }
  
  public void equals(Object paramObject1, Object paramObject2)
    throws IllegalAccessException, InvocationTargetException
  {
    Method localMethod = d;
    if (localMethod != null)
    {
      localMethod.invoke(paramObject1, new Object[] { paramObject2 });
      return;
    }
    g.set(paramObject1, paramObject2);
  }
  
  public String toString()
  {
    return a;
  }
}
