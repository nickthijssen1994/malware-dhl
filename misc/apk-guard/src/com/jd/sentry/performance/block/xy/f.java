package com.jd.sentry.performance.block.xy;

import android.os.Build.VERSION;
import android.text.TextUtils;
import com.jd.sentry.Sentry;
import com.jd.sentry.SentryConfig;
import com.jd.sentry.performance.block.a;
import com.jd.sentry.performance.block.c.c;
import com.jd.sentry.performance.block.manager.Attribute;
import com.jd.sentry.performance.block.manager.l;
import com.jd.sentry.util.Log;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

public class f
  extends i
{
  private static int r;
  private int a = 0;
  private long b = 0L;
  private final LinkedHashMap<Long, c> c = new LinkedHashMap();
  private long d = 0L;
  private long e = 0L;
  private long h = 0L;
  private long n = 0L;
  private final int s = (int)((float)b() * 1.2F);
  private long x = 0L;
  
  public f(long paramLong)
  {
    super(paramLong);
  }
  
  private void a(String paramString1, String paramString2)
  {
    paramString1 = paramString1.split(" ");
    if (paramString1.length < 9) {
      return;
    }
    long l1 = Long.parseLong(paramString1[2]);
    long l5 = Long.parseLong(paramString1[3]);
    long l2 = Long.parseLong(paramString1[4]);
    long l3 = Long.parseLong(paramString1[5]);
    long l4 = Long.parseLong(paramString1[6]);
    l5 = l5 + l1 + l2 + l3 + l4 + Long.parseLong(paramString1[7]) + Long.parseLong(paramString1[8]);
    paramString1 = paramString2.split(" ");
    if (paramString1.length < 17) {
      return;
    }
    long l6 = Long.parseLong(paramString1[13]) + Long.parseLong(paramString1[14]) + Long.parseLong(paramString1[15]) + Long.parseLong(paramString1[16]);
    if (b != 0L)
    {
      paramString1 = Attribute.next();
      long l7 = h;
      long l8 = l5 - b;
      double d2 = l8 - (l3 - l7);
      double d1 = l8;
      Double.isNaN(d2);
      Double.isNaN(d1);
      d2 /= d1;
      double d3 = l6 - n;
      Double.isNaN(d3);
      Double.isNaN(d1);
      d3 /= d1;
      double d4 = l1 - e;
      Double.isNaN(d4);
      Double.isNaN(d1);
      d4 /= d1;
      double d5 = l2 - d;
      Double.isNaN(d5);
      Double.isNaN(d1);
      d5 /= d1;
      double d6 = l4 - x;
      Double.isNaN(d6);
      Double.isNaN(d1);
      d1 = d6 / d1;
      l7 = System.currentTimeMillis();
      d = l7;
      paramString2 = NumberFormat.getPercentInstance();
      paramString2.setMaximumFractionDigits(2);
      a = paramString2.format(d2);
      e = paramString2.format(d3);
      b = paramString2.format(d4);
      s = paramString2.format(d5);
      i = paramString2.format(d1);
      add(l7, paramString1);
    }
    e = l1;
    d = l2;
    h = l3;
    x = l4;
    b = l5;
    n = l6;
  }
  
  private void add(long paramLong, Attribute paramAttribute)
  {
    LinkedHashMap localLinkedHashMap = c;
    try
    {
      c.put(Long.valueOf(paramLong), paramAttribute);
      if (c.size() > r)
      {
        paramAttribute = c.entrySet().iterator();
        if (paramAttribute.hasNext())
        {
          paramAttribute = (Long)((Map.Entry)paramAttribute.next()).getKey();
          paramAttribute = (Attribute)c.remove(paramAttribute);
          if (paramAttribute != null) {
            paramAttribute.a();
          }
        }
      }
      return;
    }
    catch (Throwable paramAttribute)
    {
      throw paramAttribute;
    }
  }
  
  /* Error */
  private void close()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: new 165	java/io/BufferedReader
    //   6: dup
    //   7: new 167	java/io/InputStreamReader
    //   10: dup
    //   11: new 169	java/io/FileInputStream
    //   14: dup
    //   15: ldc -85
    //   17: invokespecial 174	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   20: invokespecial 177	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   23: sipush 1000
    //   26: invokespecial 180	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   29: astore 4
    //   31: aload 4
    //   33: invokevirtual 184	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   36: astore_3
    //   37: aload_3
    //   38: astore_2
    //   39: aload_3
    //   40: ifnonnull +6 -> 46
    //   43: ldc -70
    //   45: astore_2
    //   46: aload_0
    //   47: getfield 33	com/jd/sentry/performance/block/xy/f:a	I
    //   50: istore_1
    //   51: iload_1
    //   52: ifne +10 -> 62
    //   55: aload_0
    //   56: invokestatic 191	android/os/Process:myPid	()I
    //   59: putfield 33	com/jd/sentry/performance/block/xy/f:a	I
    //   62: new 193	java/lang/StringBuilder
    //   65: dup
    //   66: invokespecial 194	java/lang/StringBuilder:<init>	()V
    //   69: astore_3
    //   70: aload_3
    //   71: ldc -60
    //   73: invokevirtual 200	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   76: pop
    //   77: aload_3
    //   78: aload_0
    //   79: getfield 33	com/jd/sentry/performance/block/xy/f:a	I
    //   82: invokevirtual 203	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   85: pop
    //   86: aload_3
    //   87: ldc -51
    //   89: invokevirtual 200	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   92: pop
    //   93: new 165	java/io/BufferedReader
    //   96: dup
    //   97: new 167	java/io/InputStreamReader
    //   100: dup
    //   101: new 169	java/io/FileInputStream
    //   104: dup
    //   105: aload_3
    //   106: invokevirtual 208	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   109: invokespecial 174	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   112: invokespecial 177	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   115: sipush 1000
    //   118: invokespecial 180	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   121: astore 6
    //   123: aload 6
    //   125: invokevirtual 184	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   128: astore 5
    //   130: aload 5
    //   132: astore_3
    //   133: aload 5
    //   135: ifnonnull +6 -> 141
    //   138: ldc -70
    //   140: astore_3
    //   141: aload_0
    //   142: aload_2
    //   143: aload_3
    //   144: invokespecial 210	com/jd/sentry/performance/block/xy/f:a	(Ljava/lang/String;Ljava/lang/String;)V
    //   147: aload 4
    //   149: invokevirtual 212	java/io/BufferedReader:close	()V
    //   152: aload 6
    //   154: invokevirtual 212	java/io/BufferedReader:close	()V
    //   157: return
    //   158: aload 6
    //   160: astore_2
    //   161: aload 4
    //   163: astore_3
    //   164: goto +8 -> 172
    //   167: aconst_null
    //   168: astore_3
    //   169: aload 5
    //   171: astore_2
    //   172: aload_3
    //   173: ifnull +7 -> 180
    //   176: aload_3
    //   177: invokevirtual 212	java/io/BufferedReader:close	()V
    //   180: aload_2
    //   181: ifnull +29 -> 210
    //   184: aload_2
    //   185: invokevirtual 212	java/io/BufferedReader:close	()V
    //   188: return
    //   189: astore_2
    //   190: goto -23 -> 167
    //   193: astore_2
    //   194: aload 5
    //   196: astore_2
    //   197: aload 4
    //   199: astore_3
    //   200: goto -28 -> 172
    //   203: astore_2
    //   204: goto -46 -> 158
    //   207: astore_2
    //   208: return
    //   209: astore_2
    //   210: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	211	0	this	f
    //   50	2	1	i	int
    //   38	147	2	localObject1	Object
    //   189	1	2	localThrowable1	Throwable
    //   193	1	2	localThrowable2	Throwable
    //   196	1	2	str1	String
    //   203	1	2	localThrowable3	Throwable
    //   207	1	2	localIOException1	java.io.IOException
    //   209	1	2	localIOException2	java.io.IOException
    //   36	164	3	localObject2	Object
    //   29	169	4	localBufferedReader1	BufferedReader
    //   1	194	5	str2	String
    //   121	38	6	localBufferedReader2	BufferedReader
    // Exception table:
    //   from	to	target	type
    //   3	31	189	java/lang/Throwable
    //   31	37	193	java/lang/Throwable
    //   46	51	193	java/lang/Throwable
    //   55	62	193	java/lang/Throwable
    //   62	123	193	java/lang/Throwable
    //   123	130	203	java/lang/Throwable
    //   141	147	203	java/lang/Throwable
    //   147	157	207	java/io/IOException
    //   176	180	209	java/io/IOException
    //   184	188	209	java/io/IOException
  }
  
  private int d(String paramString)
  {
    if (paramString.contains("CPU"))
    {
      paramString = paramString.split("\\s+");
      int i = 0;
      while (i < paramString.length)
      {
        if (paramString[i].contains("CPU")) {
          return i;
        }
        i += 1;
      }
    }
    return -1;
  }
  
  private void d()
  {
    e = 0L;
    d = 0L;
    h = 0L;
    x = 0L;
    b = 0L;
    n = 0L;
  }
  
  private void doInBackground()
  {
    Attribute localAttribute = Attribute.next();
    Object localObject1 = null;
    try
    {
      Process localProcess2 = Runtime.getRuntime().exec("top -n 1");
      Process localProcess1 = localProcess2;
      localObject1 = localProcess1;
      BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(localProcess2.getInputStream()));
      int i = -1;
      for (;;)
      {
        localObject1 = localProcess1;
        Object localObject2 = localBufferedReader.readLine();
        if (localObject2 == null) {
          break;
        }
        localObject1 = localProcess1;
        localObject2 = ((String)localObject2).trim();
        localObject1 = localProcess1;
        boolean bool = TextUtils.isEmpty((CharSequence)localObject2);
        if (!bool)
        {
          localObject1 = localProcess1;
          int j = d((String)localObject2);
          if (j != -1)
          {
            i = j;
          }
          else
          {
            localObject1 = localProcess1;
            bool = ((String)localObject2).startsWith(String.valueOf(android.os.Process.myPid()));
            if ((bool) && (i != -1))
            {
              localObject1 = localProcess1;
              localObject2 = ((String)localObject2).split("\\s+");
              localObject1 = localProcess1;
              j = localObject2.length;
              if (j > i)
              {
                Object localObject3 = localObject2[i];
                localObject1 = localProcess1;
                bool = localObject3.endsWith("%");
                localObject2 = localObject3;
                if (bool)
                {
                  localObject1 = localProcess1;
                  localObject2 = localObject3.substring(0, localObject3.lastIndexOf("%"));
                }
                localObject1 = localProcess1;
                long l = System.currentTimeMillis();
                localObject1 = localProcess1;
                float f1 = Float.parseFloat((String)localObject2);
                localObject1 = localProcess1;
                float f2 = Runtime.getRuntime().availableProcessors();
                f1 /= f2;
                localObject1 = localProcess1;
                localObject2 = NumberFormat.getPercentInstance();
                localObject1 = localProcess1;
                ((NumberFormat)localObject2).setMaximumFractionDigits(2);
                localObject1 = localProcess1;
                d = l;
                localObject1 = localProcess1;
                e = ((NumberFormat)localObject2).format(f1);
                localObject1 = localProcess1;
                a = ((NumberFormat)localObject2).format(0L);
                localObject1 = localProcess1;
                b = ((NumberFormat)localObject2).format(0L);
                localObject1 = localProcess1;
                s = ((NumberFormat)localObject2).format(0L);
                localObject1 = localProcess1;
                i = ((NumberFormat)localObject2).format(0L);
                localObject1 = localProcess1;
                add(l, localAttribute);
              }
            }
          }
        }
      }
      if (localProcess2 == null) {
        return;
      }
      localObject1 = localProcess1;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    if (localObject1 != null)
    {
      localObject1.destroy();
      return;
    }
  }
  
  public List a(String paramString, long paramLong1, long paramLong2)
  {
    ArrayList localArrayList = new ArrayList();
    LinkedHashMap localLinkedHashMap = c;
    try
    {
      Iterator localIterator = c.keySet().iterator();
      while (localIterator.hasNext())
      {
        Long localLong = (Long)localIterator.next();
        if ((paramLong1 < localLong.longValue()) && (localLong.longValue() < paramLong2))
        {
          l localL = new l();
          g = paramString;
          n = c.get(localLong)).d;
          h = c.get(localLong)).i;
          i = c.get(localLong)).a;
          e = c.get(localLong)).e;
          c = c.get(localLong)).s;
          d = c.get(localLong)).b;
          localArrayList.add(localL);
        }
      }
      return localArrayList;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  protected void a()
  {
    if ((Log.LOGSWITCH) && (Log.LOGSWICTH_BLOCK)) {
      Log.d("block", "CpuSamper doSample");
    }
    if (Build.VERSION.SDK_INT >= 26)
    {
      doInBackground();
      return;
    }
    close();
  }
  
  long b()
  {
    return Sentry.getSentryConfig().getBlockContext().b();
  }
  
  public void clear()
  {
    super.clear();
    d();
  }
}
