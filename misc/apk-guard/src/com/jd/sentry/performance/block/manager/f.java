package com.jd.sentry.performance.block.manager;

import com.jd.sentry.util.Log;

public class f
{
  private static final Object a = new Object();
  private static f c;
  private static int i = 0;
  f b;
  public String e;
  public StackTraceElement[] f;
  int k = 0;
  public String q;
  
  public f() {}
  
  public static f a()
  {
    Object localObject = a;
    try
    {
      if (c != null)
      {
        f localF = c;
        c = b;
        b = null;
        k = 0;
        i -= 1;
        return localF;
      }
      return new f();
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public String b()
  {
    Object localObject = f;
    if (localObject != null)
    {
      if (localObject.length <= 0) {
        return null;
      }
      int m = localObject.length - 6;
      if (m < 0) {
        return null;
      }
      localObject = new StringBuilder();
      int j = 0;
      while (j < m)
      {
        ((StringBuilder)localObject).append(f[j].toString());
        ((StringBuilder)localObject).append("\r\n");
        j += 1;
      }
      return ((StringBuilder)localObject).toString();
    }
    return null;
  }
  
  public void c()
  {
    if (g())
    {
      if ((Log.LOGSWITCH) && (Log.LOGSWICTH_BLOCK)) {
        Log.d("ObtainObject", "This message cannot be recycled because it is still in ObjectPool.");
      }
    }
    else
    {
      d();
      f = null;
      e = "";
      q = "";
    }
  }
  
  public void d()
  {
    k = 1;
    Object localObject = a;
    try
    {
      if (i < 10)
      {
        b = c;
        c = this;
        i += 1;
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  boolean g()
  {
    return (k & 0x1) == 1;
  }
}
