package com.jd.sentry.performance.block.xy;

import com.jd.sentry.Sentry;
import com.jd.sentry.SentryConfig;
import com.jd.sentry.performance.block.a;
import com.jd.sentry.performance.block.c.d;
import com.jd.sentry.performance.block.e.ByteVector;
import com.jd.sentry.performance.block.manager.e;
import com.jd.sentry.performance.block.manager.f;
import com.jd.sentry.util.Log;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Set;

public class c
  extends i
{
  private static final LinkedHashMap<Long, d> c = new LinkedHashMap();
  private Thread a;
  private int k = 40;
  
  public c(Thread paramThread, int paramInt, long paramLong)
  {
    super(paramLong);
    a = paramThread;
    k = paramInt;
  }
  
  public c(Thread paramThread, long paramLong)
  {
    this(paramThread, 40, paramLong);
  }
  
  public ArrayList a(long paramLong1, long paramLong2, String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    LinkedHashMap localLinkedHashMap = c;
    Object localObject1 = "";
    Object localObject2 = "";
    label408:
    label417:
    for (;;)
    {
      int i;
      try
      {
        Iterator localIterator = c.keySet().iterator();
        if (localIterator.hasNext())
        {
          Object localObject3 = (Long)localIterator.next();
          if ((paramLong1 >= ((Long)localObject3).longValue()) || (((Long)localObject3).longValue() >= paramLong2)) {
            break label417;
          }
          if ((cgete.equals(localObject1)) && (cgetq.equals(localObject2)))
          {
            localObject3 = (e)localArrayList.get(localArrayList.size() - 1);
            h += 1;
            getsize1k = true;
            continue;
          }
          localObject1 = new e();
          i = paramString;
          d = ((Long)localObject3).longValue();
          e = cgete;
          a = cgetq;
          j = ((f)c.get(localObject3)).b();
          if ((cgetf != null) && (cgetf.length > 1))
          {
            c = e;
            localObject2 = cgetf;
            int j = localObject2.length;
            i = 0;
            if (i < j)
            {
              localObject3 = localObject2[i];
              if (!ByteVector.a().a(((StackTraceElement)localObject3).toString())) {
                break label408;
              }
              c = ((StackTraceElement)localObject3).toString();
            }
          }
          localArrayList.add(localObject1);
          localObject2 = a;
          localObject1 = e;
        }
        else
        {
          return localArrayList;
        }
      }
      catch (Throwable paramString)
      {
        throw paramString;
      }
      i += 1;
    }
  }
  
  protected void a()
  {
    if ((Log.LOGSWITCH) && (Log.LOGSWICTH_BLOCK)) {
      Log.d("block", "StackSampler doSample");
    }
    try
    {
      f localF1 = f.a();
      Object localObject = a;
      StackTraceElement[] arrayOfStackTraceElement = ((Thread)localObject).getStackTrace();
      localObject = c;
      try
      {
        if ((c.size() == k) && (k > 0))
        {
          f localF2 = (f)c.remove(c.keySet().iterator().next());
          if (localF2 != null) {
            localF2.c();
          }
        }
        if (arrayOfStackTraceElement.length > 2)
        {
          f = arrayOfStackTraceElement;
          e = arrayOfStackTraceElement[0].toString();
          q = arrayOfStackTraceElement[1].toString();
          c.put(Long.valueOf(System.currentTimeMillis()), localF1);
        }
        return;
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      return;
    }
    catch (Exception localException)
    {
      Log.e(((Exception)localException).getMessage());
    }
  }
  
  long b()
  {
    return Sentry.getSentryConfig().getBlockContext().c();
  }
}
