package com.jd.sentry.performance.block.data;

import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import android.util.Printer;
import com.jd.sentry.Sentry;
import com.jd.sentry.SentryConfig;
import com.jd.sentry.performance.block.a;
import java.lang.reflect.Field;

public class h
  implements Printer
{
  private long a = 1000L;
  private final long b;
  private long c = 0L;
  private Printer g = null;
  private Item h = null;
  private boolean r = false;
  private long t = 0L;
  
  h(Item paramItem, long paramLong)
  {
    h = paramItem;
    b = paramLong;
    g = create();
  }
  
  private void b()
  {
    if (aa != null) {
      aa.setTitle();
    }
    if (ad != null) {
      ad.setTitle();
    }
  }
  
  private void e()
  {
    if (Sentry.getSentryConfig().isEnableBlockDetect())
    {
      if (aa != null) {
        aa.clear();
      }
      if (ad != null) {
        ad.clear();
      }
    }
  }
  
  private void e(long paramLong)
  {
    long l1 = c;
    long l2 = t;
    long l3 = SystemClock.currentThreadTimeMillis();
    f.b().post(new Label(this, l1, paramLong, l2, l3));
  }
  
  private boolean i(long paramLong)
  {
    if (!Sentry.getSentryConfig().isEnableBlockDetect()) {
      return false;
    }
    return paramLong - c > Sentry.getSentryConfig().getBlockContext().a();
  }
  
  public Printer create()
  {
    try
    {
      Object localObject = Looper.class.getDeclaredField("mLogging");
      ((Field)localObject).setAccessible(true);
      localObject = ((Field)localObject).get(Looper.getMainLooper());
      localObject = (Printer)localObject;
      if (localObject != null) {
        return localObject;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }
  
  public void println(String paramString)
  {
    Printer localPrinter = g;
    if (localPrinter != null) {
      localPrinter.println(paramString);
    }
    if (!r)
    {
      c = System.currentTimeMillis();
      t = SystemClock.currentThreadTimeMillis();
      r = true;
      e();
      return;
    }
    long l = System.currentTimeMillis();
    r = false;
    if (i(l)) {
      e(l);
    }
    b();
  }
}
