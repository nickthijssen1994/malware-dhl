package com.jd.sentry.performance.block.asm;

import com.jd.sentry.Sentry;
import com.jd.sentry.SentryConfig;
import com.jd.sentry.performance.block.manager.Label;
import com.jd.sentry.util.Log;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class d
{
  private boolean b;
  private final Runnable c = new MonthByWeekFragment.2(this);
  private Item g;
  private volatile boolean i;
  private ArrayDeque<com.jd.sentry.performance.block.c.a> q;
  final ByteVector r;
  private Thread t;
  
  public d()
  {
    this(new Item(5, 30000L));
  }
  
  public d(Item paramItem)
  {
    g = paramItem;
    q = new ArrayDeque();
    r = new ByteVector();
    t = new Thread(c, "BlockCacheMemoryPool");
    t.setDaemon(false);
    t.setPriority(1);
  }
  
  private void a()
  {
    if ((Log.LOGSWITCH) && (Log.LOGSWICTH_BLOCK)) {
      Log.d("block", "BlockCacheMemory submitDataDisk....");
    }
    for (;;)
    {
      int j;
      try
      {
        if ((q != null) && (q.size() == 0)) {
          return;
        }
        ArrayList localArrayList = new ArrayList();
        int k = q.size();
        j = 0;
        if (j < k)
        {
          localObject1 = (Label)q.remove();
          if (localObject1 == null) {
            break label343;
          }
          localArrayList.addAll(((Label)localObject1).a());
          ((Label)localObject1).b();
          break label343;
        }
        r.putShort();
        Object localObject1 = Sentry.getSentryConfig().getBlockDetectStratety();
        if (localObject1 != null)
        {
          if ((Sentry.isDebug()) && (Sentry.getSentryConfig().isEnableBlockDetect()) && (Log.LOGSWITCH))
          {
            Iterator localIterator1 = localArrayList.iterator();
            if (localIterator1.hasNext())
            {
              Object localObject2 = (HashMap)localIterator1.next();
              Iterator localIterator2 = ((HashMap)localObject2).keySet().iterator();
              StringBuffer localStringBuffer = new StringBuffer();
              if (localIterator2.hasNext())
              {
                Object localObject3 = localIterator2.next();
                Object localObject4 = ((HashMap)localObject2).get(localObject3);
                StringBuilder localStringBuilder = new StringBuilder();
                localStringBuilder.append(localObject3.toString());
                localStringBuilder.append(" ");
                localStringBuilder.append(localObject4.toString());
                localStringBuilder.append(" ");
                localStringBuffer.append(localStringBuilder.toString());
                continue;
              }
              if ((!Log.LOGSWITCH) || (!Log.LOGSWICTH_BLOCK)) {
                continue;
              }
              localObject2 = new StringBuilder();
              ((StringBuilder)localObject2).append("testStr is ");
              ((StringBuilder)localObject2).append(localStringBuffer);
              Log.d("BlockCacheMemoryPool", ((StringBuilder)localObject2).toString());
              continue;
            }
          }
          ((com.jd.sentry.strategy.a)localObject1).a(localArrayList);
          return;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      return;
      label343:
      j += 1;
    }
  }
  
  public void a(Label paramLabel)
  {
    try
    {
      q.offer(paramLabel);
      r.putByte();
      if (r.b >= g.d) {
        try
        {
          a();
          return;
        }
        catch (Exception paramLabel)
        {
          paramLabel.printStackTrace();
          return;
        }
      }
      return;
    }
    catch (Throwable paramLabel)
    {
      throw paramLabel;
    }
  }
  
  public void add()
  {
    try
    {
      if (i == true)
      {
        notify();
      }
      else if (!b)
      {
        t.start();
        b = true;
      }
      i = false;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public void d()
  {
    if (!b) {
      return;
    }
    i = true;
  }
}
