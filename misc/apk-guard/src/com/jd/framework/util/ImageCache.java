package com.jd.framework.util;

import com.jd.framework.network.JDResponseListener;
import com.jd.framework.network.request.JDRequest;
import com.jd.framework.util.transport.Session;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import java.util.concurrent.TimeUnit;
import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.OkHttpClient.Builder;
import okhttp3.Request;

public class ImageCache
{
  private OkHttpClient client = ((OkHttpClient.Builder)ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder())).connectTimeout(10000L, TimeUnit.MILLISECONDS).readTimeout(15000L, TimeUnit.MILLISECONDS).retryOnConnectionFailure(false).build();
  private Session this$0 = new Session();
  
  public ImageCache() {}
  
  public void get(JDRequest paramJDRequest, boolean paramBoolean)
  {
    JDResponseListener localJDResponseListener = paramJDRequest.getResponseListener();
    Request localRequest = this$0.doInBackground(paramJDRequest);
    ShooterOkhttp3Instrumentation.newCall(client, localRequest).enqueue(new Network.1(this, localJDResponseListener, paramBoolean, paramJDRequest));
  }
  
  public void removeFromCache(JDRequest paramJDRequest)
  {
    try
    {
      JDResponseListener localJDResponseListener = paramJDRequest.getResponseListener();
      if (localJDResponseListener != null) {
        localJDResponseListener.onStart();
      }
      get(paramJDRequest, false);
      return;
    }
    catch (Throwable paramJDRequest) {}
  }
}
