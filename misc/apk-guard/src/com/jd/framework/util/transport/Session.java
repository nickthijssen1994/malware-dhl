package com.jd.framework.util.transport;

import android.text.TextUtils;
import com.jd.framework.network.JDNetworkResponse;
import com.jd.framework.network.JDResponse;
import com.jd.framework.network.error.JDError;
import com.jd.framework.network.request.JDRequest;
import com.jd.framework.util.toolbox.ByteArrayPool;
import com.jingdong.jdsdk.network.JDHttpTookit;
import com.jingdong.jdsdk.network.JDHttpTookit.Engine;
import com.jingdong.jdsdk.network.dependency.ILoginUserController;
import com.jingdong.sdk.oklog.OKLog;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import okhttp3.Headers;
import okhttp3.Request;
import okhttp3.Request.Builder;
import okhttp3.Response;

public class Session
{
  public static final String a = "a";
  public static String inputFile;
  private static int session_id;
  protected final ByteArrayPool mPool = new ByteArrayPool(session_id);
  
  public Session() {}
  
  private byte[] load(Response paramResponse)
    throws IOException
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a5 = a4\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static String parse(Response paramResponse, String paramString)
  {
    String str = paramResponse.header("Content-Type");
    Object localObject = str;
    if (str == null) {
      localObject = paramResponse.header("content-type");
    }
    if (localObject != null)
    {
      paramResponse = ((String)localObject).split(";");
      int i = 1;
      while (i < paramResponse.length)
      {
        localObject = paramResponse[i].trim().split("=");
        if ((localObject.length == 2) && (localObject[0].equals("charset"))) {
          return localObject[1];
        }
        i += 1;
      }
    }
    return paramString;
  }
  
  private HashMap parse(Headers paramHeaders)
  {
    if ((paramHeaders == null) && (paramHeaders.size() <= 0)) {
      return null;
    }
    HashMap localHashMap = new HashMap();
    int i = 0;
    int j = paramHeaders.size();
    while (i < j)
    {
      if ((!TextUtils.isEmpty(paramHeaders.name(i))) && (!TextUtils.isEmpty(paramHeaders.value(i)))) {
        localHashMap.put(paramHeaders.name(i), paramHeaders.value(i));
      }
      i += 1;
    }
    return localHashMap;
  }
  
  private void put(Request.Builder paramBuilder, JDRequest paramJDRequest)
    throws IOException
  {
    int i = paramJDRequest.getMethod();
    if (i != 0)
    {
      if (i == 3)
      {
        paramBuilder.delete();
        return;
      }
      throw new IllegalStateException("Unknown method type.");
    }
    paramBuilder.get();
  }
  
  public JDError create(JDRequest paramJDRequest, Exception paramException, Response paramResponse)
  {
    Map localMap = null;
    try
    {
      paramResponse = get(paramJDRequest, paramResponse);
    }
    catch (Exception paramJDRequest)
    {
      paramJDRequest.printStackTrace();
      paramResponse = null;
    }
    paramJDRequest = localMap;
    if (paramException != null) {
      paramJDRequest = new JDError(paramException);
    }
    if (paramResponse != null)
    {
      int i = paramResponse.getStatusCode();
      localMap = paramResponse.getHeaders();
      if (paramResponse.getData() != null) {
        paramException = paramResponse.getData().toString();
      } else {
        paramException = "";
      }
      networkResponse = new JDNetworkResponse(i, localMap, paramException);
    }
    return paramJDRequest;
  }
  
  public Request doInBackground(JDRequest paramJDRequest)
  {
    Object localObject1 = paramJDRequest.getUrl();
    localObject1 = new Request.Builder().url((String)localObject1);
    if (OKLog.c) {
      OKLog.append(a, "request Header Fields : ");
    }
    Object localObject2 = paramJDRequest.getHeader();
    Iterator localIterator = ((Map)localObject2).keySet().iterator();
    while (localIterator.hasNext())
    {
      String str1 = (String)localIterator.next();
      ((Request.Builder)localObject1).addHeader(str1, (String)((Map)localObject2).get(str1));
      if (OKLog.c)
      {
        String str2 = a;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(str1);
        localStringBuilder.append(" : ");
        localStringBuilder.append((String)((Map)localObject2).get(str1));
        OKLog.append(str2, localStringBuilder.toString());
      }
    }
    try
    {
      localObject2 = JDHttpTookit.getEngine().getLoginUserControllerImpl().getCookie();
      boolean bool = TextUtils.isEmpty((CharSequence)localObject2);
      if (!bool)
      {
        ((Request.Builder)localObject1).addHeader("Cookie", (String)localObject2);
        ((Request.Builder)localObject1).addHeader("jdc-backup", (String)localObject2);
      }
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    if (!TextUtils.isEmpty(paramJDRequest.getTag())) {
      ((Request.Builder)localObject1).tag(paramJDRequest.getTag());
    }
    try
    {
      put((Request.Builder)localObject1, paramJDRequest);
    }
    catch (IOException paramJDRequest)
    {
      paramJDRequest.printStackTrace();
    }
    return ((Request.Builder)localObject1).build();
  }
  
  public JDResponse get(JDRequest paramJDRequest, Response paramResponse)
  {
    paramJDRequest = new JDResponse();
    if (paramResponse != null)
    {
      if (paramResponse.body() != null) {}
      try
      {
        byte[] arrayOfByte = load(paramResponse);
        String str = inputFile;
        paramJDRequest.setData(new String(arrayOfByte, parse(paramResponse, str)));
      }
      catch (IOException localIOException)
      {
        for (;;) {}
      }
      paramJDRequest.setHeaders(parse(paramResponse.headers()));
      return paramJDRequest;
    }
    return paramJDRequest;
  }
}
