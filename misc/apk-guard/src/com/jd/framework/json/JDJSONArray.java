package com.jd.framework.json;

import android.util.Log;
import java.io.Serializable;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;

public class JDJSONArray
  extends JDJSON
  implements Serializable, Cloneable, List<Object>, RandomAccess
{
  protected transient Type componentType;
  private final List<Object> list;
  protected transient Object relatedArray;
  
  public JDJSONArray()
  {
    list = new ArrayList(10);
  }
  
  public JDJSONArray(int paramInt)
  {
    list = new ArrayList(paramInt);
  }
  
  public JDJSONArray(List paramList)
  {
    list = paramList;
  }
  
  public void add(int paramInt, Object paramObject)
  {
    list.add(paramInt, paramObject);
  }
  
  public boolean add(Object paramObject)
  {
    return list.add(paramObject);
  }
  
  public boolean addAll(int paramInt, Collection paramCollection)
  {
    return list.addAll(paramInt, paramCollection);
  }
  
  public boolean addAll(Collection paramCollection)
  {
    return list.addAll(paramCollection);
  }
  
  public void clear()
  {
    list.clear();
  }
  
  public Object clone()
  {
    return new JDJSONArray(new ArrayList(list));
  }
  
  public boolean contains(Object paramObject)
  {
    return list.contains(paramObject);
  }
  
  public boolean containsAll(Collection paramCollection)
  {
    return list.containsAll(paramCollection);
  }
  
  public boolean equals(Object paramObject)
  {
    return list.equals(paramObject);
  }
  
  public Object get(int paramInt)
  {
    return list.get(paramInt);
  }
  
  public BigDecimal getBigDecimal(int paramInt)
  {
    return com.jd.views.StringBuilder.apply(get(paramInt));
  }
  
  public BigInteger getBigInteger(int paramInt)
  {
    return com.jd.views.StringBuilder.read(get(paramInt));
  }
  
  public Boolean getBoolean(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return null;
    }
    return com.jd.views.StringBuilder.getBoolean(localObject);
  }
  
  public boolean getBooleanValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return false;
    }
    return com.jd.views.StringBuilder.getBoolean(localObject).booleanValue();
  }
  
  public Byte getByte(int paramInt)
  {
    return com.jd.views.StringBuilder.get(get(paramInt));
  }
  
  public byte getByteValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return 0;
    }
    return com.jd.views.StringBuilder.get(localObject).byteValue();
  }
  
  public Type getComponentType()
  {
    return componentType;
  }
  
  public Date getDate(int paramInt)
  {
    return com.jd.views.StringBuilder.parse(get(paramInt));
  }
  
  public Double getDouble(int paramInt)
  {
    return com.jd.views.StringBuilder.getDouble(get(paramInt));
  }
  
  public double getDoubleValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return 0.0D;
    }
    return com.jd.views.StringBuilder.getDouble(localObject).doubleValue();
  }
  
  public Float getFloat(int paramInt)
  {
    return com.jd.views.StringBuilder.getFloat(get(paramInt));
  }
  
  public float getFloatValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return 0.0F;
    }
    return com.jd.views.StringBuilder.getFloat(localObject).floatValue();
  }
  
  public int getIntValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return 0;
    }
    return com.jd.views.StringBuilder.getInt(localObject).intValue();
  }
  
  public Integer getInteger(int paramInt)
  {
    return com.jd.views.StringBuilder.getInt(get(paramInt));
  }
  
  public JDJSONArray getJSONArray(int paramInt)
  {
    Object localObject = list.get(paramInt);
    if ((localObject instanceof JDJSONArray)) {
      return (JDJSONArray)localObject;
    }
    return (JDJSONArray)JDJSON.toJSON(localObject);
  }
  
  public JDJSONObject getJSONObject(int paramInt)
  {
    Object localObject = list.get(paramInt);
    if ((localObject instanceof JDJSONObject)) {
      return (JDJSONObject)localObject;
    }
    return (JDJSONObject)JDJSON.toJSON(localObject);
  }
  
  public Long getLong(int paramInt)
  {
    return com.jd.views.StringBuilder.getLong(get(paramInt));
  }
  
  public long getLongValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return 0L;
    }
    return com.jd.views.StringBuilder.getLong(localObject).longValue();
  }
  
  public Object getObject(int paramInt, Class paramClass)
  {
    return com.jd.views.StringBuilder.get(list.get(paramInt), paramClass);
  }
  
  public Object getRelatedArray()
  {
    return relatedArray;
  }
  
  public Short getShort(int paramInt)
  {
    return com.jd.views.StringBuilder.toString(get(paramInt));
  }
  
  public short getShortValue(int paramInt)
  {
    Object localObject = get(paramInt);
    if (localObject == null) {
      return 0;
    }
    return com.jd.views.StringBuilder.toString(localObject).shortValue();
  }
  
  public String getString(int paramInt)
  {
    return com.jd.views.StringBuilder.getValue(get(paramInt));
  }
  
  public int hashCode()
  {
    return list.hashCode();
  }
  
  public int indexOf(Object paramObject)
  {
    return list.indexOf(paramObject);
  }
  
  public boolean isEmpty()
  {
    return list.isEmpty();
  }
  
  public boolean isNull(int paramInt)
  {
    Object localObject = get(paramInt);
    return (localObject == null) || (localObject == JDJSONObject.NULL);
  }
  
  public Iterator iterator()
  {
    return list.iterator();
  }
  
  public int lastIndexOf(Object paramObject)
  {
    return list.lastIndexOf(paramObject);
  }
  
  public ListIterator listIterator()
  {
    return list.listIterator();
  }
  
  public ListIterator listIterator(int paramInt)
  {
    return list.listIterator(paramInt);
  }
  
  public boolean optBoolean(int paramInt)
  {
    return optBoolean(paramInt, false);
  }
  
  public boolean optBoolean(int paramInt, boolean paramBoolean)
  {
    try
    {
      localObject = getBoolean(paramInt);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse boolean error with index : ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return ((Boolean)localObject).booleanValue();
    }
    return paramBoolean;
  }
  
  public double optDouble(int paramInt)
  {
    return optDouble(paramInt, NaN.0D);
  }
  
  public double optDouble(int paramInt, double paramDouble)
  {
    try
    {
      localObject = getDouble(paramInt);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse double error with index : ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return ((Double)localObject).doubleValue();
    }
    return paramDouble;
  }
  
  public int optInt(int paramInt)
  {
    return optInt(paramInt, 0);
  }
  
  public int optInt(int paramInt1, int paramInt2)
  {
    try
    {
      localObject = getInteger(paramInt1);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse int error with index : ");
      ((StringBuilder)localObject).append(paramInt1);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return ((Integer)localObject).intValue();
    }
    return paramInt2;
  }
  
  public JDJSONArray optJSONArray(int paramInt)
  {
    try
    {
      localObject = getJSONArray(paramInt);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse jsonarray error with index : ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return localObject;
    }
    return null;
  }
  
  public JDJSONObject optJSONObject(int paramInt)
  {
    try
    {
      localObject = getJSONObject(paramInt);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse jsonobject error with index : ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return localObject;
    }
    return null;
  }
  
  public long optLong(int paramInt)
  {
    return optLong(paramInt, 0L);
  }
  
  public long optLong(int paramInt, long paramLong)
  {
    try
    {
      localObject = getLong(paramInt);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse long error with index : ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return ((Long)localObject).longValue();
    }
    return paramLong;
  }
  
  public String optString(int paramInt)
  {
    return optString(paramInt, "");
  }
  
  public String optString(int paramInt, String paramString)
  {
    try
    {
      localObject = getString(paramInt);
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse String error with index : ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    localObject = null;
    if (localObject != null) {
      return localObject;
    }
    return paramString;
  }
  
  public Object remove(int paramInt)
  {
    return list.remove(paramInt);
  }
  
  public boolean remove(Object paramObject)
  {
    return list.remove(paramObject);
  }
  
  public boolean removeAll(Collection paramCollection)
  {
    return list.removeAll(paramCollection);
  }
  
  public boolean retainAll(Collection paramCollection)
  {
    return list.retainAll(paramCollection);
  }
  
  public Object set(int paramInt, Object paramObject)
  {
    return list.set(paramInt, paramObject);
  }
  
  public void setComponentType(Type paramType)
  {
    componentType = paramType;
  }
  
  public void setRelatedArray(Object paramObject)
  {
    relatedArray = paramObject;
  }
  
  public int size()
  {
    return list.size();
  }
  
  public List subList(int paramInt1, int paramInt2)
  {
    return list.subList(paramInt1, paramInt2);
  }
  
  public Object[] toArray()
  {
    return list.toArray();
  }
  
  public Object[] toArray(Object[] paramArrayOfObject)
  {
    return list.toArray(paramArrayOfObject);
  }
}
