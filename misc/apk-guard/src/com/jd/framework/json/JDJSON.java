package com.jd.framework.json;

import com.jd.JSONException;
import com.jd.JSONStreamAware;
import com.jd.JSONString;
import com.jd.parser.ClassWriter;
import com.jd.parser.Context;
import com.jd.parser.Feature;
import com.jd.parser.asm.AnnotationWriter;
import com.jd.parser.asm.e;
import com.jd.parser.f;
import com.jd.serializer.SerializerFeature;
import com.jd.serializer.a;
import com.jd.serializer.ab;
import com.jd.serializer.d;
import com.jd.serializer.m;
import com.jd.serializer.r;
import com.jd.serializer.u;
import com.jd.serializer.v;
import com.jd.serializer.y;
import com.jd.serializer.z;
import com.jd.views.StringBuilder;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

public abstract class JDJSON
  implements JSONString, JSONStreamAware
{
  public static int DEFAULT_GENERATE_FEATURE = QuoteFieldNamesmask | 0x0 | SkipTransientFieldmask | WriteEnumUsingToStringmask | SortFieldmask;
  public static int DEFAULT_PARSER_FEATURE = 0;
  public static final String DEFAULT_TYPE_KEY = "@type";
  public static String DEFFAULT_DATE_FORMAT;
  public static final String VERSION = "1.1.65";
  public static boolean debug;
  public static Locale defaultLocale;
  public static TimeZone defaultTimeZone = ;
  
  static
  {
    defaultLocale = Locale.getDefault();
    DEFAULT_PARSER_FEATURE = UseBigDecimalmask | 0x0 | SortFeidFastMatchmask | IgnoreNotMatchmask;
    DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    debug = true;
  }
  
  public JDJSON() {}
  
  public static void init(boolean paramBoolean)
  {
    debug = paramBoolean;
  }
  
  public static final Object parse(String paramString)
  {
    return parse(paramString, DEFAULT_PARSER_FEATURE);
  }
  
  public static final Object parse(String paramString, int paramInt)
  {
    if (paramString == null) {
      return null;
    }
    paramString = new ClassWriter(paramString, Context.pos, paramInt);
    Object localObject = paramString.get(null);
    paramString.b(localObject);
    paramString.close();
    return localObject;
  }
  
  public static Object parse(String paramString, Context paramContext)
  {
    return parse(paramString, paramContext, DEFAULT_PARSER_FEATURE);
  }
  
  public static Object parse(String paramString, Context paramContext, int paramInt)
  {
    if (paramString == null) {
      return null;
    }
    paramString = new ClassWriter(paramString, paramContext, paramInt);
    paramContext = paramString.getValue();
    paramString.b(paramContext);
    paramString.close();
    return paramContext;
  }
  
  public static final Object parse(String paramString, Feature... paramVarArgs)
  {
    int j = DEFAULT_PARSER_FEATURE;
    int k = paramVarArgs.length;
    int i = 0;
    while (i < k)
    {
      j |= mask;
      i += 1;
    }
    return parse(paramString, j);
  }
  
  public static final Object parse(byte[] paramArrayOfByte, Feature... paramVarArgs)
  {
    try
    {
      paramArrayOfByte = parseObject(new String(paramArrayOfByte, "UTF-8"), paramVarArgs);
      return paramArrayOfByte;
    }
    catch (UnsupportedEncodingException paramArrayOfByte)
    {
      throw new JSONException("UTF-8 not support", paramArrayOfByte);
    }
  }
  
  public static final JDJSONArray parseArray(String paramString)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    ClassWriter localClassWriter = new ClassWriter(paramString, Context.pos);
    paramString = a;
    int i = paramString.f();
    if (i == 8)
    {
      paramString.read();
      paramString = localObject;
    }
    else if (i == 20)
    {
      paramString = localObject;
    }
    else
    {
      paramString = new JDJSONArray();
      localClassWriter.put(paramString);
      localClassWriter.b(paramString);
    }
    localClassWriter.close();
    return paramString;
  }
  
  public static final List parseArray(String paramString, Class paramClass)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    ClassWriter localClassWriter = new ClassWriter(paramString, Context.pos);
    paramString = a;
    int i = paramString.f();
    if (i == 8)
    {
      paramString.read();
      paramString = localObject;
    }
    else if ((i == 20) && (paramString.encode()))
    {
      paramString = localObject;
    }
    else
    {
      paramString = new ArrayList();
      localClassWriter.put(paramClass, paramString);
      localClassWriter.b(paramString);
    }
    localClassWriter.close();
    return paramString;
  }
  
  public static final List parseArray(String paramString, Type[] paramArrayOfType)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    ClassWriter localClassWriter = new ClassWriter(paramString, Context.pos);
    paramString = localClassWriter.a(paramArrayOfType);
    if (paramString == null) {
      paramString = localObject;
    } else {
      paramString = Arrays.asList(paramString);
    }
    localClassWriter.b(paramString);
    localClassWriter.close();
    return paramString;
  }
  
  public static final JDJSONObject parseObject(String paramString)
  {
    paramString = parse(paramString);
    if ((paramString instanceof JDJSONObject)) {
      return (JDJSONObject)paramString;
    }
    return (JDJSONObject)toJSON(paramString);
  }
  
  public static final JDJSONObject parseObject(String paramString, Feature... paramVarArgs)
  {
    return (JDJSONObject)parse(paramString, paramVarArgs);
  }
  
  public static final Object parseObject(String paramString, com.jd.PemObject paramPemObject, Feature... paramVarArgs)
  {
    return parseObject(paramString, type, Context.pos, DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static final Object parseObject(String paramString, Class paramClass)
  {
    return parseObject(paramString, paramClass, new Feature[0]);
  }
  
  public static final Object parseObject(String paramString, Class paramClass, com.jd.parser.asm.PemObject paramPemObject, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramClass, Context.pos, paramPemObject, DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static final Object parseObject(String paramString, Class paramClass, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramClass, Context.pos, DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static final Object parseObject(String paramString, Type paramType, int paramInt, Feature... paramVarArgs)
  {
    if (paramString == null) {
      return null;
    }
    int k = paramVarArgs.length;
    int j = 0;
    int i = paramInt;
    paramInt = j;
    while (paramInt < k)
    {
      i |= mask;
      paramInt += 1;
    }
    paramString = new ClassWriter(paramString, Context.pos, i);
    paramType = paramString.b(paramType);
    paramString.b(paramType);
    paramString.close();
    return paramType;
  }
  
  public static final Object parseObject(String paramString, Type paramType, Context paramContext, int paramInt, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramType, paramContext, null, paramInt, paramVarArgs);
  }
  
  public static final Object parseObject(String paramString, Type paramType, Context paramContext, com.jd.parser.asm.PemObject paramPemObject, int paramInt, Feature... paramVarArgs)
  {
    if (paramString == null) {
      return null;
    }
    int k = paramVarArgs.length;
    int j = 0;
    int i = paramInt;
    paramInt = j;
    while (paramInt < k)
    {
      i |= mask;
      paramInt += 1;
    }
    paramString = new ClassWriter(paramString, paramContext, i);
    if ((paramPemObject instanceof com.jd.parser.asm.x)) {
      paramString.get().add((com.jd.parser.asm.x)paramPemObject);
    }
    if ((paramPemObject instanceof e)) {
      paramString.toByteArray().add((e)paramPemObject);
    }
    if ((paramPemObject instanceof AnnotationWriter)) {
      h = ((AnnotationWriter)paramPemObject);
    }
    paramType = paramString.b(paramType);
    paramString.b(paramType);
    paramString.close();
    return paramType;
  }
  
  public static final Object parseObject(String paramString, Type paramType, com.jd.parser.asm.PemObject paramPemObject, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramType, Context.pos, paramPemObject, DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static final Object parseObject(String paramString, Type paramType, Feature... paramVarArgs)
  {
    return parseObject(paramString, paramType, Context.pos, DEFAULT_PARSER_FEATURE, paramVarArgs);
  }
  
  public static final Object parseObject(byte[] paramArrayOfByte, Type paramType, Feature... paramVarArgs)
  {
    try
    {
      paramArrayOfByte = parseObject(new String(paramArrayOfByte, "UTF-8"), paramType, paramVarArgs);
      return paramArrayOfByte;
    }
    catch (UnsupportedEncodingException paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new JSONException("UTF-8 not support");
  }
  
  public static final Object parseObject(char[] paramArrayOfChar, int paramInt, Type paramType, Feature... paramVarArgs)
  {
    if ((paramArrayOfChar != null) && (paramArrayOfChar.length != 0))
    {
      int j = DEFAULT_PARSER_FEATURE;
      int k = paramVarArgs.length;
      int i = 0;
      while (i < k)
      {
        j |= mask;
        i += 1;
      }
      paramArrayOfChar = new ClassWriter(paramArrayOfChar, paramInt, Context.pos, j);
      paramType = paramArrayOfChar.b(paramType);
      paramArrayOfChar.b(paramType);
      paramArrayOfChar.close();
      return paramType;
    }
    return null;
  }
  
  public static final List parseTemplateArray(String paramString, Type[] paramArrayOfType)
  {
    Object localObject = null;
    if (paramString == null) {
      return null;
    }
    ClassWriter localClassWriter = new ClassWriter(paramString, Context.pos);
    paramString = (Object[])localClassWriter.a(paramArrayOfType);
    if (paramString == null) {
      paramString = localObject;
    } else {
      paramString = Arrays.asList(paramString);
    }
    localClassWriter.b(paramString);
    localClassWriter.close();
    return paramString;
  }
  
  public static final Object toJSON(Object paramObject)
  {
    return toJSON(paramObject, com.jd.serializer.x.a);
  }
  
  public static final Object toJSON(Object paramObject, Context paramContext)
  {
    return toJSON(paramObject, com.jd.serializer.x.a);
  }
  
  public static Object toJSON(Object paramObject, com.jd.serializer.x paramX)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a5 = a4\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static final byte[] toJSONBytes(Object paramObject, com.jd.serializer.x paramX, SerializerFeature... paramVarArgs)
  {
    paramVarArgs = new z(null, DEFAULT_GENERATE_FEATURE, paramVarArgs);
    try
    {
      new m(paramVarArgs, paramX).b(paramObject);
      paramObject = paramVarArgs.a("UTF-8");
      paramVarArgs.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      paramVarArgs.close();
      throw paramObject;
    }
  }
  
  public static final byte[] toJSONBytes(Object paramObject, SerializerFeature... paramVarArgs)
  {
    paramVarArgs = new z(null, DEFAULT_GENERATE_FEATURE, paramVarArgs);
    try
    {
      new m(paramVarArgs, com.jd.serializer.x.a).b(paramObject);
      paramObject = paramVarArgs.a("UTF-8");
      paramVarArgs.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      paramVarArgs.close();
      throw paramObject;
    }
  }
  
  public static final String toJSONString(Object paramObject)
  {
    return toJSONString(paramObject, com.jd.serializer.x.a, null, null, DEFAULT_GENERATE_FEATURE, new SerializerFeature[0]);
  }
  
  public static final String toJSONString(Object paramObject, int paramInt, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, com.jd.serializer.x.a, null, null, paramInt, paramVarArgs);
  }
  
  public static final String toJSONString(Object paramObject, com.jd.serializer.x paramX, y paramY, SerializerFeature... paramVarArgs)
  {
    int i = DEFAULT_GENERATE_FEATURE;
    return toJSONString(paramObject, paramX, new y[] { paramY }, null, i, paramVarArgs);
  }
  
  public static final String toJSONString(Object paramObject, com.jd.serializer.x paramX, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, paramX, null, null, DEFAULT_GENERATE_FEATURE, paramVarArgs);
  }
  
  public static String toJSONString(Object paramObject, com.jd.serializer.x paramX, y[] paramArrayOfY, String paramString, int paramInt, SerializerFeature... paramVarArgs)
  {
    z localZ = new z(null, paramInt, paramVarArgs);
    try
    {
      paramX = new m(localZ, paramX);
      int j = paramVarArgs.length;
      int i = 0;
      paramInt = 0;
      while (paramInt < j)
      {
        paramX.a(paramVarArgs[paramInt], true);
        paramInt += 1;
      }
      if (paramString != null)
      {
        paramInt = paramString.length();
        if (paramInt != 0)
        {
          paramX.a(paramString);
          paramX.a(SerializerFeature.WriteDateUseDateFormat, true);
        }
      }
      if (paramArrayOfY != null)
      {
        j = paramArrayOfY.length;
        paramInt = i;
        while (paramInt < j)
        {
          paramString = paramArrayOfY[paramInt];
          if (paramString != null)
          {
            boolean bool = paramString instanceof v;
            if (bool) {
              paramX.i().add((v)paramString);
            }
            bool = paramString instanceof r;
            if (bool) {
              paramX.h().add((r)paramString);
            }
            bool = paramString instanceof ab;
            if (bool) {
              paramX.b().add((ab)paramString);
            }
            bool = paramString instanceof u;
            if (bool) {
              paramX.j().add((u)paramString);
            }
            bool = paramString instanceof d;
            if (bool) {
              paramX.f().add((d)paramString);
            }
            bool = paramString instanceof a;
            if (bool) {
              paramX.g().add((a)paramString);
            }
          }
          paramInt += 1;
        }
      }
      paramX.b(paramObject);
      paramObject = localZ.toString();
      localZ.close();
      return paramObject;
    }
    catch (Throwable paramObject)
    {
      localZ.close();
      throw paramObject;
    }
  }
  
  public static final String toJSONString(Object paramObject, com.jd.serializer.x paramX, y[] paramArrayOfY, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, paramX, paramArrayOfY, null, DEFAULT_GENERATE_FEATURE, paramVarArgs);
  }
  
  public static final String toJSONString(Object paramObject, y paramY, SerializerFeature... paramVarArgs)
  {
    com.jd.serializer.x localX = com.jd.serializer.x.a;
    int i = DEFAULT_GENERATE_FEATURE;
    return toJSONString(paramObject, localX, new y[] { paramY }, null, i, paramVarArgs);
  }
  
  public static final String toJSONString(Object paramObject, boolean paramBoolean)
  {
    if (!paramBoolean) {
      return toJSONString(paramObject);
    }
    return toJSONString(paramObject, new SerializerFeature[] { SerializerFeature.PrettyFormat });
  }
  
  public static final String toJSONString(Object paramObject, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, DEFAULT_GENERATE_FEATURE, paramVarArgs);
  }
  
  public static final String toJSONString(Object paramObject, y[] paramArrayOfY, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, com.jd.serializer.x.a, paramArrayOfY, null, DEFAULT_GENERATE_FEATURE, paramVarArgs);
  }
  
  public static final String toJSONStringWithDateFormat(Object paramObject, String paramString, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, com.jd.serializer.x.a, null, paramString, DEFAULT_GENERATE_FEATURE, paramVarArgs);
  }
  
  public static final String toJSONStringZ(Object paramObject, com.jd.serializer.x paramX, SerializerFeature... paramVarArgs)
  {
    return toJSONString(paramObject, com.jd.serializer.x.a, null, null, 0, paramVarArgs);
  }
  
  public static final Object toJavaObject(JDJSON paramJDJSON, Class paramClass)
  {
    return StringBuilder.get(paramJDJSON, paramClass, Context.pos);
  }
  
  public static final void writeJSONStringTo(Object paramObject, Writer paramWriter, SerializerFeature... paramVarArgs)
  {
    paramWriter = new z(paramWriter, DEFAULT_GENERATE_FEATURE, paramVarArgs);
    try
    {
      new m(paramWriter, com.jd.serializer.x.a).b(paramObject);
      paramWriter.close();
      return;
    }
    catch (Throwable paramObject)
    {
      paramWriter.close();
      throw paramObject;
    }
  }
  
  public String toJSONString()
  {
    z localZ = new z(null, DEFAULT_GENERATE_FEATURE, SerializerFeature.EMPTY);
    try
    {
      new m(localZ, com.jd.serializer.x.a).b(this);
      String str = localZ.toString();
      localZ.close();
      return str;
    }
    catch (Throwable localThrowable)
    {
      localZ.close();
      throw localThrowable;
    }
  }
  
  public Object toJavaObject(Class paramClass)
  {
    return StringBuilder.get(this, paramClass, Context.get());
  }
  
  public String toString()
  {
    return toJSONString();
  }
  
  public void writeJSONString(Appendable paramAppendable)
  {
    z localZ = new z(null, DEFAULT_GENERATE_FEATURE, SerializerFeature.EMPTY);
    com.jd.serializer.x localX = com.jd.serializer.x.a;
    try
    {
      new m(localZ, localX).b(this);
      paramAppendable.append(localZ.toString());
      localZ.close();
      return;
    }
    catch (Throwable paramAppendable) {}catch (IOException paramAppendable)
    {
      throw new JSONException(paramAppendable.getMessage(), paramAppendable);
    }
    localZ.close();
    throw paramAppendable;
  }
}
