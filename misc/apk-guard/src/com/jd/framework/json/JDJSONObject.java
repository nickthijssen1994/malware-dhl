package com.jd.framework.json;

import android.util.Log;
import com.jd.JSONException;
import com.jd.framework.json.anotation.JSONField;
import com.jd.parser.Context;
import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class JDJSONObject
  extends JDJSON
  implements Serializable, Cloneable, InvocationHandler, Map<String, Object>
{
  public static final Object NULL = new Object()
  {
    public boolean equals(Object paramAnonymousObject)
    {
      return (paramAnonymousObject == this) || (paramAnonymousObject == null);
    }
    
    public String toString()
    {
      return "null";
    }
  };
  private final Map<String, Object> data;
  
  public JDJSONObject()
  {
    this(16, false);
  }
  
  public JDJSONObject(int paramInt)
  {
    this(paramInt, false);
  }
  
  public JDJSONObject(int paramInt, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      data = new LinkedHashMap(paramInt);
      return;
    }
    data = new HashMap(paramInt);
  }
  
  public JDJSONObject(Map paramMap)
  {
    data = paramMap;
  }
  
  public JDJSONObject(boolean paramBoolean)
  {
    this(16, paramBoolean);
  }
  
  public void clear()
  {
    data.clear();
  }
  
  public Object clone()
  {
    return new JDJSONObject(new LinkedHashMap(data));
  }
  
  public boolean containsKey(Object paramObject)
  {
    return data.containsKey(paramObject);
  }
  
  public boolean containsValue(Object paramObject)
  {
    return data.containsValue(paramObject);
  }
  
  public Set entrySet()
  {
    return data.entrySet();
  }
  
  public boolean equals(Object paramObject)
  {
    return data.equals(paramObject);
  }
  
  public Object get(Object paramObject)
  {
    return data.get(paramObject);
  }
  
  public Object get(String paramString, Object paramObject)
  {
    return data.put(paramString, paramObject);
  }
  
  public BigDecimal getBigDecimal(String paramString)
  {
    return com.jd.views.StringBuilder.apply(get(paramString));
  }
  
  public BigInteger getBigInteger(String paramString)
  {
    return com.jd.views.StringBuilder.read(get(paramString));
  }
  
  public Boolean getBoolean(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return null;
    }
    return com.jd.views.StringBuilder.getBoolean(paramString);
  }
  
  public boolean getBooleanValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.getBoolean(get(paramString));
    if (paramString == null) {
      return false;
    }
    return paramString.booleanValue();
  }
  
  public Byte getByte(String paramString)
  {
    return com.jd.views.StringBuilder.get(get(paramString));
  }
  
  public byte getByteValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.get(get(paramString));
    if (paramString == null) {
      return 0;
    }
    return paramString.byteValue();
  }
  
  public byte[] getBytes(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return null;
    }
    return com.jd.views.StringBuilder.toByteArray(paramString);
  }
  
  public Date getDate(String paramString)
  {
    return com.jd.views.StringBuilder.parse(get(paramString));
  }
  
  public Double getDouble(String paramString)
  {
    return com.jd.views.StringBuilder.getDouble(get(paramString));
  }
  
  public double getDoubleValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.getDouble(get(paramString));
    if (paramString == null) {
      return 0.0D;
    }
    return paramString.doubleValue();
  }
  
  public Float getFloat(String paramString)
  {
    return com.jd.views.StringBuilder.getFloat(get(paramString));
  }
  
  public float getFloatValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.getFloat(get(paramString));
    if (paramString == null) {
      return 0.0F;
    }
    return paramString.floatValue();
  }
  
  public Map getInnerMap()
  {
    return data;
  }
  
  public int getIntValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.getInt(get(paramString));
    if (paramString == null) {
      return 0;
    }
    return paramString.intValue();
  }
  
  public Integer getInteger(String paramString)
  {
    return com.jd.views.StringBuilder.getInt(get(paramString));
  }
  
  public JDJSONArray getJSONArray(String paramString)
  {
    paramString = data.get(paramString);
    if ((paramString instanceof JDJSONArray)) {
      return (JDJSONArray)paramString;
    }
    if ((paramString instanceof String)) {
      return (JDJSONArray)JDJSON.parse((String)paramString);
    }
    return (JDJSONArray)JDJSON.toJSON(paramString);
  }
  
  public JDJSONObject getJSONObject(String paramString)
  {
    paramString = data.get(paramString);
    if ((paramString instanceof JDJSONObject)) {
      return (JDJSONObject)paramString;
    }
    if ((paramString instanceof String)) {
      return JDJSON.parseObject((String)paramString);
    }
    return (JDJSONObject)JDJSON.toJSON(paramString);
  }
  
  public Long getLong(String paramString)
  {
    return com.jd.views.StringBuilder.getLong(get(paramString));
  }
  
  public long getLongValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.getLong(get(paramString));
    if (paramString == null) {
      return 0L;
    }
    return paramString.longValue();
  }
  
  public Object getObject(String paramString, Class paramClass)
  {
    return com.jd.views.StringBuilder.get(data.get(paramString), paramClass);
  }
  
  public Short getShort(String paramString)
  {
    return com.jd.views.StringBuilder.toString(get(paramString));
  }
  
  public short getShortValue(String paramString)
  {
    paramString = com.jd.views.StringBuilder.toString(get(paramString));
    if (paramString == null) {
      return 0;
    }
    return paramString.shortValue();
  }
  
  public String getString(String paramString)
  {
    paramString = get(paramString);
    if (paramString == null) {
      return null;
    }
    return paramString.toString();
  }
  
  public int hashCode()
  {
    return data.hashCode();
  }
  
  public Object invoke(Object paramObject, Method paramMethod, Object[] paramArrayOfObject)
    throws Throwable
  {
    paramObject = paramMethod.getParameterTypes();
    int i = paramObject.length;
    Object localObject = null;
    if (i == 1)
    {
      if (paramMethod.getName().equals("equals")) {
        return Boolean.valueOf(equals(paramArrayOfObject[0]));
      }
      if (paramMethod.getReturnType() == Void.TYPE)
      {
        paramObject = (JSONField)paramMethod.getAnnotation(JSONField.class);
        if ((paramObject != null) && (paramObject.name().length() != 0)) {
          paramObject = paramObject.name();
        } else {
          paramObject = null;
        }
        localObject = paramObject;
        if (paramObject == null)
        {
          paramObject = paramMethod.getName();
          if (paramObject.startsWith("set"))
          {
            paramObject = paramObject.substring(3);
            if (paramObject.length() != 0)
            {
              paramMethod = new StringBuilder();
              paramMethod.append(Character.toLowerCase(paramObject.charAt(0)));
              paramMethod.append(paramObject.substring(1));
              localObject = paramMethod.toString();
            }
            else
            {
              throw new JSONException("illegal setter");
            }
          }
          else
          {
            throw new JSONException("illegal setter");
          }
        }
        data.put(localObject, paramArrayOfObject[0]);
        return null;
      }
      throw new JSONException("illegal setter");
    }
    if (paramObject.length == 0)
    {
      if (paramMethod.getReturnType() != Void.TYPE)
      {
        paramArrayOfObject = (JSONField)paramMethod.getAnnotation(JSONField.class);
        paramObject = localObject;
        if (paramArrayOfObject != null)
        {
          paramObject = localObject;
          if (paramArrayOfObject.name().length() != 0) {
            paramObject = paramArrayOfObject.name();
          }
        }
        paramArrayOfObject = paramObject;
        if (paramObject == null)
        {
          paramObject = paramMethod.getName();
          if (paramObject.startsWith("get"))
          {
            paramObject = paramObject.substring(3);
            if (paramObject.length() != 0)
            {
              paramArrayOfObject = new StringBuilder();
              paramArrayOfObject.append(Character.toLowerCase(paramObject.charAt(0)));
              paramArrayOfObject.append(paramObject.substring(1));
              paramArrayOfObject = paramArrayOfObject.toString();
            }
            else
            {
              throw new JSONException("illegal getter");
            }
          }
          else if (paramObject.startsWith("is"))
          {
            paramObject = paramObject.substring(2);
            if (paramObject.length() != 0)
            {
              paramArrayOfObject = new StringBuilder();
              paramArrayOfObject.append(Character.toLowerCase(paramObject.charAt(0)));
              paramArrayOfObject.append(paramObject.substring(1));
              paramArrayOfObject = paramArrayOfObject.toString();
            }
            else
            {
              throw new JSONException("illegal getter");
            }
          }
          else
          {
            if (paramObject.startsWith("hashCode")) {
              return Integer.valueOf(hashCode());
            }
            if (paramObject.startsWith("toString")) {
              return toString();
            }
            throw new JSONException("illegal getter");
          }
        }
        return com.jd.views.StringBuilder.get(data.get(paramArrayOfObject), paramMethod.getGenericReturnType(), Context.pos);
      }
      throw new JSONException("illegal getter");
    }
    throw new UnsupportedOperationException(paramMethod.toGenericString());
  }
  
  public boolean isEmpty()
  {
    return data.isEmpty();
  }
  
  public boolean isNull(String paramString)
  {
    paramString = get(paramString);
    return (paramString == null) || (paramString == NULL);
  }
  
  public Set keySet()
  {
    return data.keySet();
  }
  
  public boolean optBoolean(String paramString)
  {
    return optBoolean(paramString, false);
  }
  
  public boolean optBoolean(String paramString, boolean paramBoolean)
  {
    try
    {
      localObject = getBoolean(paramString);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse boolean error with key : ");
      ((StringBuilder)localObject).append(paramString);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString = null;
    if (paramString != null) {
      return paramString.booleanValue();
    }
    return paramBoolean;
  }
  
  public double optDouble(String paramString)
  {
    return optDouble(paramString, NaN.0D);
  }
  
  public double optDouble(String paramString, double paramDouble)
  {
    try
    {
      localObject = getDouble(paramString);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse double error with key : ");
      ((StringBuilder)localObject).append(paramString);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString = null;
    if (paramString != null) {
      return paramString.doubleValue();
    }
    return paramDouble;
  }
  
  public int optInt(String paramString)
  {
    return optInt(paramString, 0);
  }
  
  public int optInt(String paramString, int paramInt)
  {
    try
    {
      localObject = getInteger(paramString);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse int error with key : ");
      ((StringBuilder)localObject).append(paramString);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString = null;
    if (paramString != null) {
      return paramString.intValue();
    }
    return paramInt;
  }
  
  public JDJSONArray optJSONArray(String paramString)
  {
    try
    {
      localObject = getJSONArray(paramString);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse jsonarray error with key : ");
      ((StringBuilder)localObject).append(paramString);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString = null;
    if (paramString != null) {
      return paramString;
    }
    return null;
  }
  
  public JDJSONObject optJSONObject(String paramString)
  {
    try
    {
      localObject = getJSONObject(paramString);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse jsonobject error with key : ");
      ((StringBuilder)localObject).append(paramString);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString = null;
    if (paramString != null) {
      return paramString;
    }
    return null;
  }
  
  public long optLong(String paramString)
  {
    return optLong(paramString, 0L);
  }
  
  public long optLong(String paramString, long paramLong)
  {
    try
    {
      localObject = getLong(paramString);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse long error with key : ");
      ((StringBuilder)localObject).append(paramString);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString = null;
    if (paramString != null) {
      return paramString.longValue();
    }
    return paramLong;
  }
  
  public String optString(String paramString)
  {
    return optString(paramString, "");
  }
  
  public String optString(String paramString1, String paramString2)
  {
    try
    {
      localObject = getString(paramString1);
      paramString1 = (String)localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    if (JDJSON.debug)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("parse String error with key : ");
      ((StringBuilder)localObject).append(paramString1);
      Log.e("jdjson", ((StringBuilder)localObject).toString());
    }
    paramString1 = null;
    if (paramString1 != null) {
      return paramString1;
    }
    return paramString2;
  }
  
  public void putAll(Map paramMap)
  {
    data.putAll(paramMap);
  }
  
  public Object remove(Object paramObject)
  {
    return data.remove(paramObject);
  }
  
  public int size()
  {
    return data.size();
  }
  
  public Collection values()
  {
    return data.values();
  }
}
