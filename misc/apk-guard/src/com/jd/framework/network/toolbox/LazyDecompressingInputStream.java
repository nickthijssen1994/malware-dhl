package com.jd.framework.network.toolbox;

import java.io.IOException;
import java.io.InputStream;

class LazyDecompressingInputStream
  extends InputStream
{
  private final DecompressingEntity decompressingEntity;
  private final InputStream wrappedStream;
  private InputStream wrapperStream;
  
  public LazyDecompressingInputStream(InputStream paramInputStream, DecompressingEntity paramDecompressingEntity)
  {
    wrappedStream = paramInputStream;
    decompressingEntity = paramDecompressingEntity;
  }
  
  private void initWrapper()
    throws IOException
  {
    if (wrapperStream == null) {
      wrapperStream = decompressingEntity.decorate(wrappedStream);
    }
  }
  
  public int available()
    throws IOException
  {
    initWrapper();
    return wrapperStream.available();
  }
  
  public void close()
    throws IOException
  {
    try
    {
      InputStream localInputStream = wrapperStream;
      if (localInputStream != null) {
        wrapperStream.close();
      }
      wrappedStream.close();
      return;
    }
    catch (Throwable localThrowable)
    {
      wrappedStream.close();
      throw localThrowable;
    }
  }
  
  public boolean markSupported()
  {
    return false;
  }
  
  public int read()
    throws IOException
  {
    initWrapper();
    return wrapperStream.read();
  }
  
  public int read(byte[] paramArrayOfByte)
    throws IOException
  {
    initWrapper();
    return wrapperStream.read(paramArrayOfByte);
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    throws IOException
  {
    initWrapper();
    return wrapperStream.read(paramArrayOfByte, paramInt1, paramInt2);
  }
  
  public long skip(long paramLong)
    throws IOException
  {
    initWrapper();
    return wrapperStream.skip(paramLong);
  }
}
