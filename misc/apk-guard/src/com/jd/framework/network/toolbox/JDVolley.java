package com.jd.framework.network.toolbox;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.text.TextUtils;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.BasicNetwork;
import com.android.volley.toolbox.DiskBasedCache;
import com.android.volley.toolbox.HttpStackFactory;
import com.jingdong.jdsdk.network.JDHttpTookit;
import com.jingdong.jdsdk.network.JDHttpTookit.Engine;
import com.jingdong.jdsdk.network.config.RuntimeConfigHelper;
import java.io.File;
import java.util.concurrent.ConcurrentHashMap;

public class JDVolley
{
  private static final String DEFAULT_CACHE_DIR = "jd_volley";
  private static final int JD_DISK_USAGE_BYTES = 5242880;
  private static ConcurrentHashMap<String, String> additionalHeaders;
  
  public JDVolley() {}
  
  public static RequestQueue addToRequestQueue(Context paramContext, Request paramRequest)
  {
    paramContext = newRequestQueue(paramContext);
    paramContext.add(paramRequest);
    return paramContext;
  }
  
  private static ConcurrentHashMap getAdditionalHeaders()
  {
    try
    {
      if (additionalHeaders == null)
      {
        localConcurrentHashMap = new ConcurrentHashMap();
        localConcurrentHashMap.put("Connection", "keep-alive");
        if (RuntimeConfigHelper.enableBrCompress()) {
          localConcurrentHashMap.put("Accept-Encoding", "br,gzip,deflate");
        } else {
          localConcurrentHashMap.put("Accept-Encoding", "gzip,deflate");
        }
        localConcurrentHashMap.put("Charset", "UTF-8");
        if ((JDHttpTookit.getEngine() != null) && (!TextUtils.isEmpty(JDHttpTookit.getEngine().getUserAgent()))) {
          localConcurrentHashMap.put("User-Agent", JDHttpTookit.getEngine().getUserAgent());
        }
        additionalHeaders = localConcurrentHashMap;
      }
      ConcurrentHashMap localConcurrentHashMap = additionalHeaders;
      return localConcurrentHashMap;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static RequestQueue newRequestQueue(Context paramContext)
  {
    return newRequestQueue(paramContext, null);
  }
  
  public static RequestQueue newRequestQueue(Context paramContext, HttpStackFactory paramHttpStackFactory)
  {
    File localFile = new File(paramContext.getCacheDir(), "jd_volley");
    try
    {
      String str = paramContext.getPackageName();
      paramContext = paramContext.getPackageManager().getPackageInfo(str, 0);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(str);
      localStringBuilder.append("/");
      int i = versionCode;
      localStringBuilder.append(i);
      localStringBuilder.toString();
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;) {}
    }
    paramContext = paramHttpStackFactory;
    if (paramHttpStackFactory == null) {
      paramContext = new HttpStackFactory();
    }
    paramContext = new BasicNetwork(paramContext, getAdditionalHeaders());
    paramContext = new RequestQueue(new DiskBasedCache(localFile, 5242880), paramContext);
    paramContext.start();
    return paramContext;
  }
  
  public static void updateAdditionalHeaders(boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        ConcurrentHashMap localConcurrentHashMap = getAdditionalHeaders();
        if (paramBoolean)
        {
          String str1 = "Keep-Alive";
          localConcurrentHashMap.put("Connection", str1);
          return;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      String str2 = "close";
    }
  }
}
