package com.jd.framework.network.toolbox;

import com.jingdong.jdsdk.network.JDHttpTookit;
import com.jingdong.jdsdk.network.JDHttpTookit.Engine;
import com.jingdong.jdsdk.network.dependency.IStatInfoConfig;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class JDNetworkStatisticTool
{
  public static final String KEY_DOMAIN2IP_DOWNGRADE_REQUEST_COUNT = "domain2IpDowngradRequestCount";
  public static final String KEY_DOWNGRADE2BUILDIN_REQUEST_COUNT = "downgrade2BuildInIpRequestCount";
  public static final String KEY_DOWNGRADE2HTTPDNS_BACKUP_REQUEST_COUNT = "downgrade2HttpDnsBackupIpRequestCount";
  public static final String KEY_DOWNGRADE2HTTPDNS_REQUEST_COUNT = "downgrade2HttpDnsIpRequestCount";
  public static final String KEY_FINAL_DOWNGRADE_REQUEST_COUNT = "finalDowngradRequestCount";
  public static final String KEY_SUCCEED_REQUEST_COUNT = "succeedRequestCount";
  public static final String KEY_TOTAL_HTTPS_REQUEST_COUNT = "totalHttpsRequestCount";
  public static final String KEY_TOTAL_REQUEST_COUNT = "totalRequestCount";
  public static final String PAGE_KEY = "JDNetworkStatisticTool";
  private static JDNetworkStatisticTool instance;
  private AtomicInteger domain2IpDowngradRequestCount = new AtomicInteger(0);
  private AtomicInteger downgrade2BuildInIpRequestCount = new AtomicInteger(0);
  private AtomicInteger downgrade2HttpDnsBackupIpRequestCount = new AtomicInteger(0);
  private AtomicInteger downgrade2HttpDnsIpRequestCount = new AtomicInteger(0);
  private AtomicInteger finalDowngradRequestCount = new AtomicInteger(0);
  private AtomicInteger httpsDowngrade2HttpRequestCount = new AtomicInteger(0);
  public boolean isSendLastResults = false;
  private AtomicInteger succeedRequestCount = new AtomicInteger(0);
  private AtomicInteger totalHttpsRequestCount = new AtomicInteger(0);
  private AtomicInteger totalRequestCount = new AtomicInteger(0);
  
  private JDNetworkStatisticTool() {}
  
  public static JDNetworkStatisticTool getInstance()
  {
    if (instance == null) {
      try
      {
        if (instance == null) {
          instance = new JDNetworkStatisticTool();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return instance;
  }
  
  public int getDomain2IpDowngradRequestCount()
  {
    return domain2IpDowngradRequestCount.get();
  }
  
  public int getDowngrade2BackupIpRequestCount()
  {
    return downgrade2HttpDnsBackupIpRequestCount.get();
  }
  
  public int getDowngrade2BuildInIpRequestCount()
  {
    return downgrade2BuildInIpRequestCount.get();
  }
  
  public int getDowngrade2HttpDnsIpRequestCount()
  {
    return downgrade2HttpDnsIpRequestCount.get();
  }
  
  public int getFinalDowngradRequestCount()
  {
    return finalDowngradRequestCount.get();
  }
  
  public int getHttpsDowngrade2HttpRequestCount()
  {
    return httpsDowngrade2HttpRequestCount.get();
  }
  
  public int getSucceedRequestCount()
  {
    return succeedRequestCount.get();
  }
  
  public int getTotalHttpsRequestCount()
  {
    return totalHttpsRequestCount.get();
  }
  
  public int getTotalRequestCount()
  {
    return totalRequestCount.get();
  }
  
  public int incrDomain2IpDowngradRequestCount()
  {
    return domain2IpDowngradRequestCount.incrementAndGet();
  }
  
  public int incrDowngrade2BackupIpRequestCount()
  {
    return downgrade2HttpDnsBackupIpRequestCount.incrementAndGet();
  }
  
  public int incrDowngrade2BuildInIpRequestCount()
  {
    return downgrade2BuildInIpRequestCount.incrementAndGet();
  }
  
  public int incrDowngrade2HttpDnsIpRequestCount()
  {
    return downgrade2HttpDnsIpRequestCount.incrementAndGet();
  }
  
  public int incrFinalDowngradeRequestCount()
  {
    return finalDowngradRequestCount.incrementAndGet();
  }
  
  public int incrHttpsDowngrade2HttpRequestCount()
  {
    return httpsDowngrade2HttpRequestCount.incrementAndGet();
  }
  
  public int incrSucceedRequestCount()
  {
    return succeedRequestCount.incrementAndGet();
  }
  
  public int incrTotalHttpsRequestCount()
  {
    try
    {
      int i = totalHttpsRequestCount.incrementAndGet();
      return i;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int incrTotalRequestCount()
  {
    return totalRequestCount.incrementAndGet();
  }
  
  public void reportTlsStatEntry(TlsStatEntry paramTlsStatEntry)
  {
    JDHttpTookit.getEngine().getStatInfoConfigImpl().reportTlsHandshakeStatData(paramTlsStatEntry);
  }
  
  public void saveNetworkStatisticResult()
  {
    if (!getInstanceisSendLastResults) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("totalRequestCount", Integer.valueOf(getTotalRequestCount()));
    localHashMap.put("succeedRequestCount", Integer.valueOf(getSucceedRequestCount()));
    localHashMap.put("domain2IpDowngradRequestCount", Integer.valueOf(getDomain2IpDowngradRequestCount()));
    localHashMap.put("finalDowngradRequestCount", Integer.valueOf(getFinalDowngradRequestCount()));
    localHashMap.put("downgrade2BuildInIpRequestCount", Integer.valueOf(getDowngrade2BuildInIpRequestCount()));
    localHashMap.put("downgrade2HttpDnsIpRequestCount", Integer.valueOf(getDowngrade2HttpDnsIpRequestCount()));
    localHashMap.put("downgrade2HttpDnsBackupIpRequestCount", Integer.valueOf(getDowngrade2BackupIpRequestCount()));
    localHashMap.put("totalHttpsRequestCount", Integer.valueOf(getTotalHttpsRequestCount()));
    JDHttpTookit.getEngine().getStatInfoConfigImpl().saveNetworkStatistic(localHashMap);
  }
  
  public static class TlsStatEntry
  {
    public String route;
    public long timeCost;
    public String tlsVersion;
    
    public TlsStatEntry() {}
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("TlsEntry: [ url : ");
      localStringBuilder.append(route);
      localStringBuilder.append(", tlsVersion : ");
      localStringBuilder.append(tlsVersion);
      localStringBuilder.append(", timeCost   : ");
      localStringBuilder.append(timeCost);
      return localStringBuilder.toString();
    }
  }
}
