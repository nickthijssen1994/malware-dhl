package com.jd.framework.network.request;

import com.android.volley.VolleyLog;
import com.jd.framework.network.file.JDFileGuider;
import com.jd.framework.network.file.JDFileResponseListener;
import com.jd.framework.network.file.JDStopController;
import com.jingdong.sdk.oklog.OKLog;
import java.io.File;

public class JDFileRequest
  extends JDRequest<File>
  implements JDStopController, Comparable<JDRequest<File>>
{
  private int attemptsTime;
  private boolean isBreakpointTransmission;
  private boolean isExclusiveTask = false;
  private boolean isTopPriority = false;
  private JDFileResponseListener<File> mResponseListener;
  private JDFileGuider savePath;
  private int startPosBreakpointTransmission;
  private boolean stopFlag;
  
  public JDFileRequest(String paramString)
  {
    super(paramString);
  }
  
  public JDFileRequest(String paramString, JDFileResponseListener paramJDFileResponseListener)
  {
    super(paramString);
    mResponseListener = paramJDFileResponseListener;
  }
  
  public int compareTo(JDRequest paramJDRequest)
  {
    JDRequest.Priority localPriority1 = getPriority();
    JDRequest.Priority localPriority2 = paramJDRequest.getPriority();
    if (localPriority1 == localPriority2) {
      return mSequence - mSequence;
    }
    try
    {
      int i = localPriority2.ordinal();
      int j = localPriority1.ordinal();
      return i - j;
    }
    catch (Exception localException)
    {
      if (VolleyLog.DEBUG)
      {
        localException.printStackTrace();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("this request url ");
        localStringBuilder.append(getUrl());
        localStringBuilder.append(",priority : ");
        localStringBuilder.append(getPriority());
        localStringBuilder.append(", another request url ");
        localStringBuilder.append(paramJDRequest.getUrl());
        localStringBuilder.append(", priority : ");
        localStringBuilder.append(paramJDRequest.getPriority());
        OKLog.e("WG", localStringBuilder.toString());
      }
    }
    return 0;
  }
  
  public int getAttemptsTime()
  {
    return attemptsTime;
  }
  
  public JDFileResponseListener getResponseListener()
  {
    return mResponseListener;
  }
  
  public JDFileGuider getSavePath()
  {
    return savePath;
  }
  
  public int getStartPosBreakpointTransmission()
  {
    return startPosBreakpointTransmission;
  }
  
  public boolean isBreakpointTransmission()
  {
    return isBreakpointTransmission;
  }
  
  public boolean isExclusiveTask()
  {
    return isExclusiveTask;
  }
  
  public boolean isStop()
  {
    return stopFlag;
  }
  
  public boolean isTopPriority()
  {
    return isTopPriority;
  }
  
  public void setAttemptsTime(int paramInt)
  {
    attemptsTime = paramInt;
  }
  
  public void setBreakpointTransmission(boolean paramBoolean)
  {
    isBreakpointTransmission = paramBoolean;
  }
  
  public void setExclusiveTask(boolean paramBoolean)
  {
    isExclusiveTask = paramBoolean;
  }
  
  public void setResponseListener(JDFileResponseListener paramJDFileResponseListener)
  {
    mResponseListener = paramJDFileResponseListener;
  }
  
  public void setSavePath(JDFileGuider paramJDFileGuider)
  {
    savePath = paramJDFileGuider;
  }
  
  public void setStartPosBreakpointTransmission(int paramInt)
  {
    startPosBreakpointTransmission = paramInt;
  }
  
  public void setTopPriority(boolean paramBoolean)
  {
    isTopPriority = paramBoolean;
  }
  
  public void stop()
  {
    stopFlag = true;
  }
}
