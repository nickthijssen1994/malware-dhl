package com.jd.framework.network.impl;

import android.content.Context;
import com.android.volley.Cache;
import com.android.volley.Cache.Entry;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.RequestQueue.RequestFilter;
import com.jd.framework.network.JDCacheChecker;
import com.jd.framework.network.JDRequestQueue;
import com.jd.framework.network.filedown.JDFileDownloader;
import com.jd.framework.network.request.JDAdRequest;
import com.jd.framework.network.request.JDFileRequest;
import com.jd.framework.network.request.JDRequest;
import com.jd.framework.network.toolbox.JDNetworkConvertor;
import com.jd.framework.network.toolbox.JDVolley;
import com.jd.framework.util.ImageCache;

public class JDRequestQueueDefalut
  implements JDRequestQueue
{
  private Context context;
  private final ImageCache mOkHttpNetworkFetcher;
  private final RequestQueue mRequestQueue;
  
  public JDRequestQueueDefalut(Context paramContext)
  {
    context = paramContext;
    mRequestQueue = JDVolley.newRequestQueue(paramContext);
    mOkHttpNetworkFetcher = new ImageCache();
  }
  
  public JDRequest addRequest(JDRequest paramJDRequest)
  {
    if ((paramJDRequest instanceof JDFileRequest))
    {
      JDFileDownloader.getInstance(context).addRequest((JDFileRequest)paramJDRequest);
      return paramJDRequest;
    }
    if ((paramJDRequest instanceof JDAdRequest))
    {
      mOkHttpNetworkFetcher.removeFromCache(paramJDRequest);
      return paramJDRequest;
    }
    Request localRequest = JDNetworkConvertor.toRequest(paramJDRequest);
    mRequestQueue.add(localRequest);
    return paramJDRequest;
  }
  
  public void cancelAll()
  {
    mRequestQueue.cancelAll(new RequestQueue.RequestFilter()
    {
      public boolean apply(Request paramAnonymousRequest)
      {
        return true;
      }
    });
  }
  
  public void cancelByTag(final String paramString)
  {
    if (paramString != null)
    {
      mRequestQueue.cancelAll(new RequestQueue.RequestFilter()
      {
        public boolean apply(Request paramAnonymousRequest)
        {
          return paramString.equals(paramAnonymousRequest.getTag());
        }
      });
      return;
    }
    throw new IllegalArgumentException("Cannot cancelAll with a null tag");
  }
  
  public Cache getCache()
  {
    RequestQueue localRequestQueue = mRequestQueue;
    if (localRequestQueue == null) {
      return null;
    }
    return localRequestQueue.getCache();
  }
  
  public boolean isCacheExpired(String paramString)
  {
    Cache localCache = getCache();
    if (localCache == null) {
      return false;
    }
    paramString = localCache.get(paramString);
    if (paramString == null) {
      return false;
    }
    return paramString.isExpired();
  }
  
  public void setCacheChecker(JDCacheChecker paramJDCacheChecker)
  {
    mRequestQueue.setCacheChecker(paramJDCacheChecker);
  }
  
  public void stop()
  {
    mRequestQueue.stop();
  }
}
