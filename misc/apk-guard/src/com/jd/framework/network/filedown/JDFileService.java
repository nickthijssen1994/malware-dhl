package com.jd.framework.network.filedown;

import android.content.Context;
import android.os.Environment;
import android.os.StatFs;
import android.util.Log;
import com.android.volley.VolleyLog;
import com.jd.framework.network.file.JDFileGuider;
import com.jd.framework.network.request.JDFileRequest;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

public class JDFileService
{
  public static final int EXTERNAL = 2;
  public static final String FILE_DIR = "/file";
  public static final String FILE_DIR_MODE_FOR_INTERNAL = "771";
  public static final String FILE_MODE_WORLD_ACCESS = "755";
  public static final String FILE_MODE_WORLD_READABLE = "664";
  public static final String FILE_MODE_WORLD_WRITEABLE = "662";
  public static final int INTERNAL = 1;
  private static final String PAGE_KEY = "JDFileService";
  public static final String SYSTEM_OPERATOR = "/";
  public static final String aplcationDir = "/jingdong";
  
  public JDFileService() {}
  
  public static void chModFile(String paramString, File paramFile)
  {
    try
    {
      boolean bool = paramFile.exists();
      if (!bool) {
        paramFile.createNewFile();
      }
      Object localObject = Runtime.getRuntime();
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("chmod ");
      localStringBuilder.append(paramString);
      localStringBuilder.append(" ");
      localStringBuilder.append(paramFile);
      ((Runtime)localObject).exec(localStringBuilder.toString());
      if (VolleyLog.DEBUG)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("change mode file : ");
        ((StringBuilder)localObject).append(paramFile.getAbsolutePath());
        ((StringBuilder)localObject).append(" with mode : ");
        ((StringBuilder)localObject).append(paramString);
        Log.d("JDFileService", ((StringBuilder)localObject).toString());
        return;
      }
    }
    catch (Exception localException)
    {
      StringBuilder localStringBuilder;
      if (VolleyLog.DEBUG)
      {
        localException.printStackTrace();
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(" -->> chModFile mode:");
        localStringBuilder.append(paramString);
        localStringBuilder.append(" file:");
        localStringBuilder.append(paramFile);
        localStringBuilder.append(" error:");
        localStringBuilder.append(localException.getMessage());
        Log.d("JDFileService", localStringBuilder.toString());
      }
    }
  }
  
  public static long getAvailableExternalMemorySize(Context paramContext)
  {
    if (paramContext == null) {
      return -1L;
    }
    paramContext = paramContext.getExternalFilesDir(null);
    try
    {
      paramContext = new StatFs(paramContext.getPath());
      int i = paramContext.getBlockSize();
      long l = i;
      i = paramContext.getAvailableBlocks();
      return i * l;
    }
    catch (Exception paramContext)
    {
      if (VolleyLog.DEBUG)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("getAvailableExternalMemorySize(null) -->> ");
        localStringBuilder.append(paramContext);
        Log.d("JDFileService", localStringBuilder.toString());
        paramContext.printStackTrace();
      }
    }
    return -1L;
  }
  
  public static long getAvailableInternalMemorySize()
  {
    StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
    long l = localStatFs.getBlockSize();
    return localStatFs.getAvailableBlocks() * l;
  }
  
  public static File getFilePath(int paramInt, Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    if (paramInt == 2)
    {
      paramContext = paramContext.getExternalFilesDir(paramString2);
      if (paramContext != null)
      {
        if (paramContext.exists())
        {
          if (!paramContext.isDirectory())
          {
            paramString1 = new StringBuilder();
            paramString1.append(paramContext.getAbsolutePath());
            paramString1.append(" already exists and is not a directory");
            throw new IllegalStateException(paramString1.toString());
          }
        }
        else {
          if (!paramContext.mkdirs()) {
            break label122;
          }
        }
        paramString2 = new StringBuilder();
        paramString2.append("/jingdong/file/");
        if (paramString1 == null) {
          paramString1 = "";
        }
        paramString2.append(paramString1);
        paramContext = new File(paramContext, paramString2.toString());
        break label193;
        label122:
        paramString1 = new StringBuilder();
        paramString1.append("Unable to create directory: ");
        paramString1.append(paramContext.getAbsolutePath());
        throw new IllegalStateException(paramString1.toString());
      }
      else
      {
        throw new IllegalStateException("Failed to get external storage files directory");
      }
    }
    else
    {
      paramContext = paramContext.getFilesDir();
      if (paramString1 == null) {
        paramString1 = "";
      }
      paramContext = new File(paramContext, paramString1);
    }
    label193:
    if (!paramContext.exists()) {
      if (paramContext.mkdirs())
      {
        chModFile("771", paramContext);
      }
      else
      {
        paramString1 = new StringBuilder();
        paramString1.append("Unable to create directory: ");
        paramString1.append(paramContext.getAbsolutePath());
        throw new IllegalStateException(paramString1.toString());
      }
    }
    return new File(paramContext, paramString3);
  }
  
  public static File getFileSavePath(JDFileGuider paramJDFileGuider, Context paramContext)
  {
    long l = paramJDFileGuider.getAvailableSize();
    boolean bool = paramJDFileGuider.isImmutable();
    if (VolleyLog.DEBUG)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("availableSize : ");
      ((StringBuilder)localObject).append(l);
      Log.i("JDFileService", ((StringBuilder)localObject).toString());
    }
    if (0L != l)
    {
      if ((1 == paramJDFileGuider.getSpace()) && (getAvailableInternalMemorySize() < l))
      {
        if (VolleyLog.DEBUG)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("internal not enough: ");
          ((StringBuilder)localObject).append(getAvailableInternalMemorySize());
          Log.i("JDFileService", ((StringBuilder)localObject).toString());
        }
        if (bool)
        {
          if (VolleyLog.DEBUG) {
            Log.i("JDFileService", "internal not enough, try external");
          }
          paramJDFileGuider.setSpace(2);
          paramJDFileGuider.setImmutable(false);
          return getFileSavePath(paramJDFileGuider, paramContext);
        }
        return null;
      }
      if ((2 == paramJDFileGuider.getSpace()) && (getAvailableExternalMemorySize(paramContext) < l))
      {
        if (VolleyLog.DEBUG)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("external not enough: ");
          ((StringBuilder)localObject).append(getAvailableExternalMemorySize(paramContext));
          Log.i("JDFileService", ((StringBuilder)localObject).toString());
        }
        if (bool)
        {
          if (VolleyLog.DEBUG) {
            Log.i("JDFileService", "external not enough, try internal");
          }
          paramJDFileGuider.setSpace(1);
          paramJDFileGuider.setImmutable(false);
          return getFileSavePath(paramJDFileGuider, paramContext);
        }
        return null;
      }
    }
    Object localObject = paramJDFileGuider.getChildDirName();
    if (VolleyLog.DEBUG)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("childDirName:");
      localStringBuilder.append((String)localObject);
      Log.v("JDFileService", localStringBuilder.toString());
    }
    try
    {
      paramJDFileGuider = getFilePath(paramJDFileGuider.getSpace(), paramContext, (String)localObject, null, paramJDFileGuider.getFileName());
      if (!VolleyLog.DEBUG) {
        break label378;
      }
      paramContext = new StringBuilder();
      paramContext.append("save file:");
      paramContext.append(paramJDFileGuider.getAbsolutePath());
      Log.v("JDFileService", paramContext.toString());
      return paramJDFileGuider;
    }
    catch (Exception paramJDFileGuider)
    {
      for (;;) {}
    }
    if (VolleyLog.DEBUG)
    {
      Log.v("JDFileService", "get file directory error!");
      return null;
      label378:
      return paramJDFileGuider;
    }
    return null;
  }
  
  public static BufferedOutputStream openFileOutput(JDFileGuider paramJDFileGuider, File paramFile)
    throws FileNotFoundException
  {
    if ((paramFile != null) && (paramFile.isDirectory())) {
      throw new IllegalArgumentException("can't open output stream for directory!");
    }
    try
    {
      localObject = new BufferedOutputStream(new FileOutputStream(paramFile));
      setFilePermissionsFromMode(paramJDFileGuider, paramFile);
      return localObject;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      Object localObject;
      for (;;) {}
    }
    localObject = paramFile.getParentFile();
    ((File)localObject).mkdir();
    chModFile("771", (File)localObject);
    localObject = new BufferedOutputStream(new FileOutputStream(paramFile));
    setFilePermissionsFromMode(paramJDFileGuider, paramFile);
    return localObject;
  }
  
  public static void resetSaveFileParam(JDFileRequest paramJDFileRequest, Context paramContext, JDFileGuider paramJDFileGuider, boolean paramBoolean, int paramInt)
  {
    Object localObject;
    if (paramJDFileRequest.isBreakpointTransmission())
    {
      if (paramJDFileRequest.getStartPosBreakpointTransmission() != 0) {
        localObject = paramJDFileGuider.getChildDirName();
      }
    }
    else
    {
      try
      {
        localObject = getFilePath(paramJDFileGuider.getSpace(), paramContext, (String)localObject, null, paramJDFileGuider.getFileName());
        if (VolleyLog.DEBUG)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("resetSaveFileParam file : ");
          localStringBuilder.append(((File)localObject).getAbsolutePath());
          Log.i("JDFileService", localStringBuilder.toString());
        }
        if (((File)localObject).exists())
        {
          paramJDFileGuider.setImmutable(false);
          return;
        }
        if (paramJDFileGuider.isImmutable())
        {
          int j = paramJDFileGuider.getSpace();
          int i = 2;
          if (j == 2) {
            i = 1;
          }
          paramJDFileGuider.setSpace(i);
          paramJDFileGuider.setImmutable(false);
          resetSaveFileParam(paramJDFileRequest, paramContext, paramJDFileGuider, paramBoolean, paramInt);
          return;
        }
        paramJDFileRequest.setStartPosBreakpointTransmission(0);
        paramJDFileGuider.setImmutable(paramBoolean);
        paramJDFileGuider.setSpace(paramInt);
        return;
      }
      catch (Exception paramJDFileRequest)
      {
        for (;;) {}
      }
      if (VolleyLog.DEBUG)
      {
        Log.v("JDFileService", "get file directory error!");
        return;
      }
    }
  }
  
  public static void setFilePermissionsFromMode(JDFileGuider paramJDFileGuider, File paramFile)
  {
    int i = paramJDFileGuider.getMode();
    if (paramJDFileGuider.getSpace() == 1)
    {
      if (i == 1)
      {
        chModFile("664", paramFile);
        return;
      }
      if (i == 2)
      {
        chModFile("662", paramFile);
        return;
      }
      chModFile("755", paramFile);
    }
  }
}
