package com.jd.framework.network.filedown;

import android.content.Context;
import android.os.Process;
import android.util.Log;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.HttpStackFactory;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.toolbox.OkHttpStack;
import com.android.volley.utils.UrlUtil;
import com.jd.framework.network.JDResponse;
import com.jd.framework.network.JDResponseListener;
import com.jd.framework.network.error.JDError;
import com.jd.framework.network.error.JDFileDownloadError;
import com.jd.framework.network.file.JDFileGuider;
import com.jd.framework.network.file.JDFileResponseListener;
import com.jd.framework.network.file.JDStopController;
import com.jd.framework.network.request.JDFileRequest;
import com.jd.framework.network.request.JDFileRequestQueue;
import com.jd.framework.network.request.JDRequest;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class JDFileRequestConsumer
  extends Thread
{
  private static final int BUFFER_SIZE = 16384;
  public static final String TAG = "JDFileRequestConsumer";
  private final Context mContext;
  private HurlStack mHurlStack;
  private OkHttpStack mOkHttpStack;
  private final JDFileRequestQueue mQueue;
  private volatile boolean mQuit = false;
  
  public JDFileRequestConsumer(JDFileRequestQueue paramJDFileRequestQueue, HttpStackFactory paramHttpStackFactory, Context paramContext)
  {
    mQueue = paramJDFileRequestQueue;
    mContext = paramContext;
    if (paramHttpStackFactory != null)
    {
      mHurlStack = ((HurlStack)paramHttpStackFactory.getHttpStack(false));
      mOkHttpStack = ((OkHttpStack)paramHttpStackFactory.getHttpStack(true));
    }
  }
  
  private void performRequest(JDFileRequest paramJDFileRequest)
  {
    if (paramJDFileRequest.isTopPriority()) {
      Process.setThreadPriority(-8);
    } else {
      Process.setThreadPriority(19);
    }
    Object localObject1;
    Object localObject2;
    if (VolleyLog.DEBUG)
    {
      localObject1 = TAG;
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Start Downloading----> TID: ");
      ((StringBuilder)localObject2).append(getId());
      ((StringBuilder)localObject2).append(", isExclusiveTask : ");
      ((StringBuilder)localObject2).append(paramJDFileRequest.isExclusiveTask());
      ((StringBuilder)localObject2).append("RequestUrl:");
      ((StringBuilder)localObject2).append(paramJDFileRequest.getUrl());
      Log.d((String)localObject1, ((StringBuilder)localObject2).toString());
    }
    boolean bool1 = paramJDFileRequest.isBreakpointTransmission();
    JDFileResponseListener localJDFileResponseListener = paramJDFileRequest.getResponseListener();
    localJDFileResponseListener.onStart();
    int j = Math.min(2, paramJDFileRequest.getMaxNumRetries()) + 1;
    int i = j;
    if (j < 2) {
      i = 2;
    }
    j = 0;
    boolean bool2;
    Object localObject3;
    for (;;)
    {
      localObject2 = null;
      if (j < i) {
        try
        {
          bool2 = VolleyLog.DEBUG;
          if (bool2)
          {
            localObject1 = TAG;
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("retry:");
            ((StringBuilder)localObject3).append(j);
            ((StringBuilder)localObject3).append(" within total : ");
            ((StringBuilder)localObject3).append(i);
            ((StringBuilder)localObject3).append(" , RequestUrl:");
            ((StringBuilder)localObject3).append(paramJDFileRequest.getUrl());
            Log.d((String)localObject1, ((StringBuilder)localObject3).toString());
          }
          bool2 = paramJDFileRequest.getUseOkhttpFlag();
          if (bool2)
          {
            localObject2 = mOkHttpStack.getResponse(paramJDFileRequest);
            localObject1 = null;
          }
          else
          {
            localObject1 = mHurlStack.getFileUrlConnection(paramJDFileRequest);
          }
        }
        catch (Throwable localThrowable1)
        {
          if (VolleyLog.DEBUG) {
            localThrowable1.printStackTrace();
          }
          if (UrlUtil.isHttps(paramJDFileRequest.getUrl()))
          {
            if (VolleyLog.DEBUG)
            {
              localObject2 = TAG;
              localObject3 = new StringBuilder();
              ((StringBuilder)localObject3).append("errorInfo:");
              ((StringBuilder)localObject3).append(localThrowable1.toString());
              Log.e((String)localObject2, ((StringBuilder)localObject3).toString());
              localObject2 = TAG;
              localObject3 = new StringBuilder();
              ((StringBuilder)localObject3).append("FileRequest URL : ");
              ((StringBuilder)localObject3).append(paramJDFileRequest.getUrl());
              Log.d((String)localObject2, ((StringBuilder)localObject3).toString());
            }
            if ((localThrowable1 instanceof JDError)) {
              localJDFileDownloadError = new JDFileDownloadError((JDError)localThrowable1, false);
            } else {
              localJDFileDownloadError = new JDFileDownloadError(paramJDFileRequest.getUrl(), localJDFileDownloadError, false);
            }
            localJDFileResponseListener.onError(localJDFileDownloadError);
            if (VolleyLog.DEBUG) {
              Log.d(TAG, "Prepare to retry--------------");
            }
            paramJDFileRequest.setUrl(paramJDFileRequest.getUrl().replaceFirst("(?i)https", "http"));
            j += 1;
          }
          else
          {
            if ((localJDFileDownloadError instanceof JDError)) {
              paramJDFileRequest = new JDFileDownloadError((JDError)localJDFileDownloadError, true);
            } else {
              paramJDFileRequest = new JDFileDownloadError(paramJDFileRequest.getUrl(), localJDFileDownloadError, true);
            }
            localJDFileResponseListener.onError(paramJDFileRequest);
            return;
          }
        }
      }
    }
    JDFileDownloadError localJDFileDownloadError = null;
    try
    {
      bool2 = paramJDFileRequest.getUseOkhttpFlag();
      long l;
      if (bool2)
      {
        if (localObject2 != null)
        {
          localObject3 = ((Response)localObject2).body().byteStream();
          l = ((Response)localObject2).body().contentLength();
          localObject2 = localObject3;
        }
        else
        {
          throw new IOException("cannot read from null response");
        }
      }
      else
      {
        if (localJDFileDownloadError == null) {
          break label714;
        }
        localObject2 = localJDFileDownloadError.getInputStream();
        i = localJDFileDownloadError.getContentLength();
        l = i;
      }
      try
      {
        saveFile(paramJDFileRequest, mContext, bool1, localJDFileResponseListener, l, (InputStream)localObject2);
        bool1 = VolleyLog.DEBUG;
        if (bool1)
        {
          localObject3 = TAG;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("downsuccess:");
          localStringBuilder.append(paramJDFileRequest.getUrl());
          Log.d((String)localObject3, localStringBuilder.toString());
        }
        ((InputStream)localObject2).close();
        if (localJDFileDownloadError == null) {
          return;
        }
        localJDFileDownloadError.disconnect();
        return;
      }
      catch (Throwable localThrowable3)
      {
        ((InputStream)localObject2).close();
        if (localJDFileDownloadError != null) {
          localJDFileDownloadError.disconnect();
        }
        throw localThrowable3;
      }
      label714:
      throw new IOException("cannot read from null conn");
    }
    catch (Throwable localThrowable2)
    {
      if (VolleyLog.DEBUG) {
        localThrowable2.printStackTrace();
      }
      localJDFileResponseListener.onError(new JDFileDownloadError(paramJDFileRequest.getUrl(), localThrowable2, true));
    }
  }
  
  private void readAsFile(InputStream paramInputStream, BufferedOutputStream paramBufferedOutputStream, JDFileResponseListener paramJDFileResponseListener, long paramLong, JDStopController paramJDStopController)
    throws IOException
  {
    byte[] arrayOfByte = new byte['?'];
    int i = 0;
    for (;;)
    {
      int j = paramInputStream.read(arrayOfByte);
      if ((j == -1) || (paramJDStopController.isStop())) {
        break;
      }
      paramBufferedOutputStream.write(arrayOfByte, 0, j);
      j = i + j;
      i = j;
      if (paramJDFileResponseListener != null)
      {
        paramJDFileResponseListener.onProgress(Long.valueOf(paramLong).intValue(), j);
        i = j;
      }
    }
  }
  
  private void readAsFile(InputStream paramInputStream, File paramFile, long paramLong1, JDFileResponseListener paramJDFileResponseListener, long paramLong2, JDStopController paramJDStopController)
    throws IOException
  {
    paramFile = new RandomAccessFile(paramFile, "rw");
    try
    {
      paramFile.seek(paramLong1);
      byte[] arrayOfByte = new byte['?'];
      int i = (int)paramLong1;
      paramLong1 = 0L;
      for (;;)
      {
        int j = paramInputStream.read(arrayOfByte);
        if (j == -1) {
          break;
        }
        boolean bool = paramJDStopController.isStop();
        if (bool) {
          break;
        }
        paramFile.write(arrayOfByte, 0, j);
        j = i + j;
        i = j;
        if (paramJDFileResponseListener != null)
        {
          long l = System.currentTimeMillis();
          i = j;
          if (l - paramLong1 > 500L)
          {
            paramJDFileResponseListener.onProgress(Long.valueOf(paramLong2).intValue(), j);
            paramLong1 = l;
            i = j;
          }
        }
      }
      paramFile.close();
      return;
    }
    catch (Throwable paramInputStream)
    {
      paramFile.close();
      throw paramInputStream;
    }
  }
  
  private void saveFile(JDFileRequest paramJDFileRequest, Context paramContext, boolean paramBoolean, JDFileResponseListener paramJDFileResponseListener, long paramLong, InputStream paramInputStream)
    throws IOException
  {
    JDFileGuider localJDFileGuider = paramJDFileRequest.getSavePath();
    localJDFileGuider.setAvailableSize(paramLong);
    JDFileService.resetSaveFileParam(paramJDFileRequest, paramContext, localJDFileGuider, localJDFileGuider.isImmutable(), localJDFileGuider.getSpace());
    File localFile = JDFileService.getFileSavePath(localJDFileGuider, paramContext);
    if (localFile == null)
    {
      if (VolleyLog.DEBUG)
      {
        paramContext = TAG;
        paramJDFileResponseListener = new StringBuilder();
        paramJDFileResponseListener.append("requestID:");
        paramJDFileResponseListener.append(paramJDFileRequest.getSequence());
        paramJDFileResponseListener.append(",????????????");
        Log.d(paramContext, paramJDFileResponseListener.toString());
      }
      throw new IOException("Not enough storage space?");
    }
    if (paramBoolean) {
      readAsFile(paramInputStream, localFile, paramJDFileRequest.getStartPosBreakpointTransmission(), paramJDFileResponseListener, localJDFileGuider.getAvailableSize(), paramJDFileRequest);
    } else {
      paramContext = JDFileService.openFileOutput(paramJDFileRequest.getSavePath(), localFile);
    }
    try
    {
      readAsFile(paramInputStream, paramContext, paramJDFileResponseListener, localJDFileGuider.getAvailableSize(), paramJDFileRequest);
      if (paramContext != null) {
        try
        {
          paramContext.flush();
        }
        catch (Throwable paramJDFileRequest)
        {
          if (paramContext != null) {
            paramContext.close();
          }
          throw paramJDFileRequest;
        }
      }
      if (paramContext != null) {
        paramContext.close();
      }
      if (paramJDFileRequest.isStop()) {
        localFile.delete();
      }
      if (!paramJDFileRequest.isStop())
      {
        paramJDFileRequest = new JDResponse();
        paramJDFileRequest.setData(localFile);
        paramJDFileResponseListener.onEnd(paramJDFileRequest);
        return;
      }
      paramJDFileResponseListener.onPause();
      return;
    }
    catch (Throwable paramJDFileRequest)
    {
      if (paramContext != null) {
        try
        {
          paramContext.flush();
        }
        catch (Throwable paramJDFileRequest)
        {
          if (paramContext != null) {
            paramContext.close();
          }
          throw paramJDFileRequest;
        }
      }
      if (paramContext != null) {
        paramContext.close();
      }
      throw paramJDFileRequest;
    }
  }
  
  public void quit()
  {
    mQuit = true;
    interrupt();
  }
  
  public void run()
  {
    do
    {
      for (;;)
      {
        Object localObject = mQueue;
        try
        {
          localObject = ((JDFileRequestQueue)localObject).take();
          performRequest((JDFileRequest)localObject);
        }
        catch (InterruptedException localInterruptedException)
        {
          for (;;) {}
        }
      }
    } while (!mQuit);
  }
}
