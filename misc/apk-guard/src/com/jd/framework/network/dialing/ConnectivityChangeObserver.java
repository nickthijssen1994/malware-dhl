package com.jd.framework.network.dialing;

import android.content.Context;
import android.net.NetworkInfo;
import android.net.NetworkInfo.DetailedState;
import android.text.TextUtils;
import com.jingdong.jdsdk.network.toolbox.GlobalExecutorService;
import com.jingdong.sdk.oklog.OKLog;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;

public class ConnectivityChangeObserver
{
  public static final String PAGE_KEY = "ConnectivityChangeObserver";
  public static NetworkInfo lastActiveNetworkInfo;
  public static boolean lastConnected;
  public Context context;
  private ArrayList<Event> eventListenerList = new ArrayList();
  
  public ConnectivityChangeObserver(Context paramContext)
  {
    context = paramContext;
  }
  
  public void addEventListener(Event paramEvent)
  {
    ArrayList localArrayList = eventListenerList;
    if (localArrayList != null) {
      localArrayList.add(paramEvent);
    }
  }
  
  public void checkConnect(final NetworkInfo paramNetworkInfo)
  {
    GlobalExecutorService.lightExecutorService().execute(new Runnable()
    {
      public void run()
      {
        NetworkInfo localNetworkInfo = paramNetworkInfo;
        if (localNetworkInfo == null)
        {
          ConnectivityChangeObserver.lastActiveNetworkInfo = null;
          onNetworkChange();
          return;
        }
        if (localNetworkInfo.getDetailedState() != NetworkInfo.DetailedState.CONNECTED)
        {
          if (ConnectivityChangeObserver.lastConnected) {
            ConnectivityChangeObserver.lastActiveNetworkInfo = null;
          }
          onNetworkChange();
          ConnectivityChangeObserver.lastConnected = false;
          return;
        }
        if (isNetworkChange(paramNetworkInfo)) {
          onNetworkChange();
        }
        ConnectivityChangeObserver.lastConnected = true;
      }
    });
  }
  
  public boolean isNetworkChange(NetworkInfo paramNetworkInfo)
  {
    NetworkInfo localNetworkInfo = lastActiveNetworkInfo;
    if ((localNetworkInfo != null) && (localNetworkInfo.getExtraInfo() != null) && (paramNetworkInfo.getExtraInfo() != null) && (TextUtils.equals(lastActiveNetworkInfo.getExtraInfo(), paramNetworkInfo.getExtraInfo())) && (lastActiveNetworkInfo.getSubtype() == paramNetworkInfo.getSubtype()) && (lastActiveNetworkInfo.getType() == paramNetworkInfo.getType())) {
      return false;
    }
    localNetworkInfo = lastActiveNetworkInfo;
    if ((localNetworkInfo != null) && (localNetworkInfo.getExtraInfo() == null) && (paramNetworkInfo.getExtraInfo() == null) && (lastActiveNetworkInfo.getSubtype() == paramNetworkInfo.getSubtype()) && (lastActiveNetworkInfo.getType() == paramNetworkInfo.getType()))
    {
      OKLog.append("ConnectivityChangeObserver", "Same Network, do not NetworkChanged");
      return false;
    }
    lastActiveNetworkInfo = paramNetworkInfo;
    return true;
  }
  
  public void onNetworkChange()
  {
    Object localObject = eventListenerList;
    if (localObject != null)
    {
      localObject = ((ArrayList)localObject).iterator();
      while (((Iterator)localObject).hasNext()) {
        ((Event)((Iterator)localObject).next()).onNetworkChange();
      }
    }
  }
  
  public void removeEventListener(Event paramEvent)
  {
    ArrayList localArrayList = eventListenerList;
    if ((localArrayList != null) && (localArrayList.contains(paramEvent))) {
      eventListenerList.remove(paramEvent);
    }
  }
  
  public static abstract interface Event
  {
    public abstract void onNetworkChange();
  }
}
