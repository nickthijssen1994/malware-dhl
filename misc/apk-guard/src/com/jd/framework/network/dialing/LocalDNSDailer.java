package com.jd.framework.network.dialing;

import android.text.TextUtils;
import com.jingdong.jdsdk.network.toolbox.GlobalExecutorService;
import com.jingdong.sdk.oklog.OKLog;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import okhttp3.Dns;

public class LocalDNSDailer
  implements ConnectivityChangeObserver.Event
{
  static final String PAGE_KEY = "LocalDNSDailer";
  static Dns SYSTEM = new Dns()
  {
    public List lookup(String paramAnonymousString)
      throws UnknownHostException
    {
      if (paramAnonymousString != null) {
        return Arrays.asList(InetAddress.getAllByName(paramAnonymousString));
      }
      throw new UnknownHostException("hostname == null");
    }
  };
  private static LocalDNSDailer instance;
  private static boolean isFinished;
  private String cachedResult;
  
  private LocalDNSDailer() {}
  
  private void clear()
  {
    try
    {
      cachedResult = null;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static LocalDNSDailer getInstance()
  {
    try
    {
      if (instance == null) {
        instance = new LocalDNSDailer();
      }
      LocalDNSDailer localLocalDNSDailer = instance;
      return localLocalDNSDailer;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  List dnsLookup()
  {
    Object localObject = GlobalExecutorService.lightExecutorService().submit(new Callable()
    {
      public List call()
      {
        try
        {
          List localList = LocalDNSDailer.SYSTEM.lookup("api.m.jd.com");
          return localList;
        }
        catch (Throwable localThrowable)
        {
          localThrowable.printStackTrace();
        }
        return null;
      }
    });
    TimeUnit localTimeUnit = TimeUnit.MILLISECONDS;
    try
    {
      localObject = ((Future)localObject).get(250L, localTimeUnit);
      return (List)localObject;
    }
    catch (Exception localException)
    {
      OKLog.setNode("LocalDNSDailer", localException);
    }
    return null;
  }
  
  public String getBestLocalDnsIp(String paramString)
  {
    if (!TextUtils.equals(paramString, "api.m.jd.com")) {
      return null;
    }
    try
    {
      paramString = selectBestUniformIp();
      return paramString;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public void onNetworkChange()
  {
    clear();
  }
  
  public String selectBestUniformIp()
  {
    try
    {
      Object localObject1;
      if (isFinished)
      {
        localObject1 = cachedResult;
        return localObject1;
      }
      if (OKLog.c) {
        OKLog.append("LocalDNSDailer", "start local dns detect.");
      }
      long l1 = System.currentTimeMillis();
      Object localObject2 = dnsLookup();
      if ((localObject2 != null) && (((List)localObject2).size() >= 2))
      {
        long l2 = System.currentTimeMillis();
        if (OKLog.c)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("dns look up cost : ");
          ((StringBuilder)localObject1).append(l2 - l1);
          ((StringBuilder)localObject1).append(" ms.");
          OKLog.append("LocalDNSDailer", ((StringBuilder)localObject1).toString());
        }
        localObject1 = new ArrayList();
        if ((localObject2 != null) && (((List)localObject2).size() > 0))
        {
          localObject2 = ((List)localObject2).iterator();
          while (((Iterator)localObject2).hasNext())
          {
            InetAddress localInetAddress = (InetAddress)((Iterator)localObject2).next();
            IPEntity localIPEntity = new IPEntity();
            destination = localInetAddress.getHostAddress();
            if ((localInetAddress instanceof Inet4Address)) {
              isV6 = false;
            } else if ((localInetAddress instanceof Inet6Address)) {
              isV6 = true;
            }
            ((ArrayList)localObject1).add(localIPEntity);
          }
        }
        if (OKLog.c)
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("entities : ");
          ((StringBuilder)localObject2).append(localObject1);
          OKLog.append("LocalDNSDailer", ((StringBuilder)localObject2).toString());
        }
        l1 = System.currentTimeMillis();
        localObject1 = DialingExecutor.select((ArrayList)localObject1, 2000);
        if (localObject1 == null)
        {
          isFinished = true;
          cachedResult = null;
          return null;
        }
        if (isV6) {
          localObject1 = String.format("[%s]", new Object[] { destination });
        } else {
          localObject1 = destination;
        }
        l2 = System.currentTimeMillis();
        if (OKLog.c)
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("choose best result cost : ");
          ((StringBuilder)localObject2).append(l2 - l1);
          ((StringBuilder)localObject2).append(" ms.");
          OKLog.append("LocalDNSDailer", ((StringBuilder)localObject2).toString());
        }
        isFinished = true;
        cachedResult = ((String)localObject1);
        if (OKLog.c)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("choose best result : ");
          ((StringBuilder)localObject1).append(cachedResult);
          OKLog.append("LocalDNSDailer", ((StringBuilder)localObject1).toString());
        }
        localObject1 = cachedResult;
        return localObject1;
      }
      isFinished = true;
      cachedResult = null;
      return null;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
