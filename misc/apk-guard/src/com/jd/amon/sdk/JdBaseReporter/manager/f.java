package com.jd.amon.sdk.JdBaseReporter.manager;

import com.jd.amon.sdk.JdBaseReporter.d.b;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.zip.GZIPInputStream;
import javax.net.ssl.HttpsURLConnection;

public abstract class f
{
  protected static final String host = "com.jd.amon.sdk.JdBaseReporter.c.c";
  protected int B;
  protected long a = 0L;
  protected int b = 2;
  b c;
  protected String d = "utf-8";
  protected byte[] e;
  protected HashMap<String, String> elements = new HashMap();
  protected HashMap<String, String> entries = new HashMap();
  protected String f = "utf-8";
  protected boolean g = true;
  protected String h;
  protected boolean i = false;
  protected String l;
  protected int s;
  protected long t = 0L;
  protected URL url;
  protected int v;
  
  public f() {}
  
  public f(int paramInt1, int paramInt2, int paramInt3, String paramString1, String paramString2, boolean paramBoolean)
  {
    a(paramInt1, paramInt2, paramInt3, paramString1, paramString2, paramBoolean);
  }
  
  public void a()
  {
    c.a();
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, String paramString1, String paramString2, boolean paramBoolean)
  {
    s = paramInt1;
    B = paramInt2;
    b = paramInt3;
    d = paramString1;
    f = paramString2;
    g = paramBoolean;
  }
  
  public void a(b paramB)
  {
    c = paramB;
  }
  
  public void add(String paramString1, String paramString2)
  {
    entries.put(paramString1, paramString2);
  }
  
  public void b(String paramString)
  {
    l = paramString;
  }
  
  public String c()
  {
    return l;
  }
  
  public void d(String paramString)
  {
    h = paramString;
  }
  
  public byte[] e()
  {
    return e;
  }
  
  protected void fetch(HttpURLConnection paramHttpURLConnection, ByteArrayOutputStream paramByteArrayOutputStream)
  {
    parse(paramHttpURLConnection);
    byte[] arrayOfByte = paramByteArrayOutputStream.toByteArray();
    paramHttpURLConnection = arrayOfByte;
    if ((arrayOfByte != null) && (arrayOfByte.length != 0))
    {
      Object localObject = get();
      paramByteArrayOutputStream = paramHttpURLConnection;
      if (localObject != null)
      {
        localObject = (String)((HashMap)localObject).get("content-encoding");
        paramByteArrayOutputStream = paramHttpURLConnection;
        if (localObject != null)
        {
          paramByteArrayOutputStream = paramHttpURLConnection;
          if (((String)localObject).contains("gzip"))
          {
            paramByteArrayOutputStream = new ByteArrayInputStream(arrayOfByte);
            paramHttpURLConnection = new ByteArrayOutputStream(1024);
            paramByteArrayOutputStream = new GZIPInputStream(paramByteArrayOutputStream);
            arrayOfByte = new byte['?'];
            for (;;)
            {
              int j = paramByteArrayOutputStream.read(arrayOfByte, 0, 1024);
              if (j == -1) {
                break;
              }
              paramHttpURLConnection.write(arrayOfByte, 0, j);
            }
            paramByteArrayOutputStream.close();
            paramByteArrayOutputStream = paramHttpURLConnection.toByteArray();
          }
        }
      }
      e = paramByteArrayOutputStream;
      return;
    }
    e = null;
  }
  
  public HashMap get()
  {
    return elements;
  }
  
  public HttpsURLConnection getConnection()
  {
    if (!"".equals(h))
    {
      url = new URL(h);
      localObject = url;
      if (localObject != null)
      {
        localObject = (HttpsURLConnection)((URL)localObject).openConnection();
        if (localObject != null) {
          return localObject;
        }
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(host);
        ((StringBuilder)localObject).append("|getConnect|mConn is empty");
        throw new IOException(((StringBuilder)localObject).toString());
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(host);
      ((StringBuilder)localObject).append("|getConnect|mUrl is empty");
      throw new IOException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(host);
    ((StringBuilder)localObject).append("|getConnect|mStrUrl is empty");
    throw new IOException(((StringBuilder)localObject).toString());
  }
  
  public HashMap getItem()
  {
    return entries;
  }
  
  protected void parse(HttpURLConnection paramHttpURLConnection)
  {
    paramHttpURLConnection.getLastModified();
    paramHttpURLConnection = paramHttpURLConnection.getHeaderFields();
    if (paramHttpURLConnection == null) {
      return;
    }
    Iterator localIterator1 = paramHttpURLConnection.entrySet().iterator();
    while (localIterator1.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator1.next();
      Object localObject = (List)localEntry.getValue();
      int j = 0;
      paramHttpURLConnection = "";
      Iterator localIterator2 = ((List)localObject).iterator();
      while (localIterator2.hasNext())
      {
        String str = (String)localIterator2.next();
        localObject = paramHttpURLConnection;
        if (j > 0)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append(paramHttpURLConnection);
          ((StringBuilder)localObject).append("<--->");
          localObject = ((StringBuilder)localObject).toString();
        }
        paramHttpURLConnection = new StringBuilder();
        paramHttpURLConnection.append((String)localObject);
        paramHttpURLConnection.append(str);
        paramHttpURLConnection = paramHttpURLConnection.toString();
        j += 1;
      }
      elements.put(String.valueOf(localEntry.getKey()).toLowerCase(Locale.getDefault()), paramHttpURLConnection);
    }
  }
}
