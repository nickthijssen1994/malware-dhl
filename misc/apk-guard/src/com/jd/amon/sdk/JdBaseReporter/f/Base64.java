package com.jd.amon.sdk.JdBaseReporter.f;

import java.io.ByteArrayOutputStream;
import java.util.zip.GZIPOutputStream;

public class Base64
{
  private static byte[] CRLF = new byte['?'];
  private static final char[] charTab = { 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
  
  public static String encode(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int j = 0;
    while (j <= paramArrayOfByte.length - 1)
    {
      byte[] arrayOfByte = new byte[4];
      int k = 0;
      int i = 0;
      while (k <= 2)
      {
        int m = j + k;
        if (m <= paramArrayOfByte.length - 1)
        {
          arrayOfByte[k] = ((byte)(i | (paramArrayOfByte[m] & 0xFF) >>> k * 2 + 2));
          i = (byte)(((paramArrayOfByte[m] & 0xFF) << (2 - k) * 2 + 2 & 0xFF) >>> 2);
        }
        else
        {
          arrayOfByte[k] = i;
          i = 64;
        }
        k += 1;
      }
      arrayOfByte[3] = i;
      k = 0;
      while (k <= 3)
      {
        char c;
        if (arrayOfByte[k] <= 63) {
          c = charTab[arrayOfByte[k]];
        } else {
          c = '=';
        }
        localStringBuilder.append(c);
        k += 1;
      }
      j += 3;
    }
    return localStringBuilder.toString();
  }
  
  public static byte[] encodeBytes(byte[] paramArrayOfByte)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      localObject1 = localObject2;
      GZIPOutputStream localGZIPOutputStream = new GZIPOutputStream(localByteArrayOutputStream);
      localObject1 = localObject2;
      localGZIPOutputStream.write(paramArrayOfByte);
      localObject1 = localObject2;
      localGZIPOutputStream.finish();
      localObject1 = localObject2;
      localGZIPOutputStream.close();
      localObject1 = localObject2;
      paramArrayOfByte = localByteArrayOutputStream.toByteArray();
      localObject1 = paramArrayOfByte;
      localByteArrayOutputStream.close();
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return localObject1;
  }
}
