package com.jd.amon.sdk.JdBaseReporter.f;

import android.text.TextUtils;
import android.util.Log;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class Attribute
{
  public static boolean b;
  
  public static String a(HashMap paramHashMap, String paramString)
  {
    if ((paramHashMap != null) && (!paramHashMap.isEmpty()))
    {
      if (TextUtils.isEmpty(paramString)) {
        return null;
      }
      Object localObject2 = new TreeSet();
      Object localObject1 = paramHashMap.keySet().iterator();
      while (((Iterator)localObject1).hasNext()) {
        ((TreeSet)localObject2).add((String)((Iterator)localObject1).next());
      }
      localObject1 = new StringBuffer();
      localObject2 = ((TreeSet)localObject2).iterator();
      while (((Iterator)localObject2).hasNext())
      {
        String str1 = ((Iterator)localObject2).next().toString();
        String str2 = (String)paramHashMap.get(str1);
        if (b)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("sorted key : ");
          localStringBuilder.append(str1);
          localStringBuilder.append(", value : ");
          localStringBuilder.append(str2);
          Log.d("GatewaySignatureHelper", localStringBuilder.toString());
        }
        if (!TextUtils.isEmpty(str2))
        {
          ((StringBuffer)localObject1).append(str2);
          ((StringBuffer)localObject1).append("&");
        }
      }
      localObject2 = ((StringBuffer)localObject1).toString();
      localObject1 = localObject2;
      paramHashMap = (HashMap)localObject1;
      if (((String)localObject2).endsWith("&"))
      {
        paramHashMap = (HashMap)localObject1;
        if (((String)localObject2).length() > 1) {
          paramHashMap = ((String)localObject2).substring(0, ((String)localObject2).length() - 1);
        }
      }
      if (b)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("raw signature param str : ");
        ((StringBuilder)localObject1).append(paramHashMap);
        Log.d("GatewaySignatureHelper", ((StringBuilder)localObject1).toString());
      }
      return read(getBytes(paramHashMap), getBytes(paramString));
    }
    return null;
  }
  
  public static String encode(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    while ((paramArrayOfByte != null) && (i < paramArrayOfByte.length))
    {
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      if (str.length() == 1) {
        localStringBuilder.append('0');
      }
      localStringBuilder.append(str);
      i += 1;
    }
    return localStringBuilder.toString().toLowerCase();
  }
  
  public static byte[] getBytes(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    try
    {
      paramString = paramString.getBytes("UTF-8");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      paramString.printStackTrace();
    }
    return new byte[0];
  }
  
  private static String read(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    try
    {
      paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, "HmacSHA256");
      Mac localMac = Mac.getInstance("HmacSHA256");
      localMac.init(paramArrayOfByte2);
      paramArrayOfByte1 = encode(localMac.doFinal(paramArrayOfByte1));
      return paramArrayOfByte1;
    }
    catch (InvalidKeyException paramArrayOfByte1)
    {
      paramArrayOfByte1.printStackTrace();
    }
    catch (NoSuchAlgorithmException paramArrayOfByte1)
    {
      paramArrayOfByte1.printStackTrace();
    }
    return null;
  }
}
