package com.jd.amon.sdk.JdBaseReporter.b;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteProgram;
import android.database.sqlite.SQLiteStatement;
import com.jd.amon.sdk.JdBaseReporter.e.h;
import com.jd.amon.sdk.JdBaseReporter.f.e;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class d
{
  protected Context a;
  private long c;
  protected String h;
  
  public d(Context paramContext, String paramString)
  {
    a = paramContext;
    h = paramString;
  }
  
  private boolean a(long paramLong)
  {
    return 100000L <= paramLong;
  }
  
  private SQLiteDatabase e()
  {
    return b.a(a).getReadableDatabase();
  }
  
  private SQLiteDatabase getDatabase()
  {
    return b.a(a).getWritableDatabase();
  }
  
  /* Error */
  public int a(long paramLong1, long paramLong2)
  {
    // Byte code:
    //   0: lload_1
    //   1: ldc2_w 43
    //   4: lcmp
    //   5: ifne +13 -> 18
    //   8: lload_3
    //   9: ldc2_w 43
    //   12: lcmp
    //   13: ifne +5 -> 18
    //   16: iconst_m1
    //   17: ireturn
    //   18: aload_0
    //   19: invokevirtual 48	com/jd/amon/sdk/JdBaseReporter/b/d:b	()J
    //   22: pop2
    //   23: iconst_0
    //   24: istore 5
    //   26: iconst_2
    //   27: anewarray 50	java/lang/String
    //   30: astore 14
    //   32: lload_1
    //   33: lload_3
    //   34: lcmp
    //   35: ifgt +118 -> 153
    //   38: new 52	java/lang/StringBuilder
    //   41: dup
    //   42: invokespecial 53	java/lang/StringBuilder:<init>	()V
    //   45: astore 8
    //   47: aload 8
    //   49: ldc 55
    //   51: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   54: pop
    //   55: aload 8
    //   57: lload_1
    //   58: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   61: pop
    //   62: aload 8
    //   64: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   67: astore 8
    //   69: aload 14
    //   71: iconst_0
    //   72: aload 8
    //   74: aastore
    //   75: new 52	java/lang/StringBuilder
    //   78: dup
    //   79: invokespecial 53	java/lang/StringBuilder:<init>	()V
    //   82: astore 8
    //   84: aload 8
    //   86: ldc 55
    //   88: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: pop
    //   92: aload 8
    //   94: lload_3
    //   95: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   98: pop
    //   99: aload 8
    //   101: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   104: astore 8
    //   106: aload 14
    //   108: iconst_1
    //   109: aload 8
    //   111: aastore
    //   112: aload_0
    //   113: invokespecial 68	com/jd/amon/sdk/JdBaseReporter/b/d:getDatabase	()Landroid/database/sqlite/SQLiteDatabase;
    //   116: astore 8
    //   118: aload_0
    //   119: getfield 19	com/jd/amon/sdk/JdBaseReporter/b/d:h	Ljava/lang/String;
    //   122: astore 9
    //   124: aload 14
    //   126: checkcast 70	[Ljava/lang/String;
    //   129: astore 10
    //   131: aload 8
    //   133: aload 9
    //   135: ldc 72
    //   137: aload 10
    //   139: invokevirtual 78	android/database/sqlite/SQLiteDatabase:delete	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
    //   142: istore 6
    //   144: iload 6
    //   146: iconst_0
    //   147: iadd
    //   148: istore 5
    //   150: goto +419 -> 569
    //   153: aconst_null
    //   154: astore 12
    //   156: aconst_null
    //   157: astore 9
    //   159: aconst_null
    //   160: astore 11
    //   162: aload_0
    //   163: invokespecial 80	com/jd/amon/sdk/JdBaseReporter/b/d:e	()Landroid/database/sqlite/SQLiteDatabase;
    //   166: astore 8
    //   168: aload_0
    //   169: getfield 19	com/jd/amon/sdk/JdBaseReporter/b/d:h	Ljava/lang/String;
    //   172: astore 10
    //   174: aload 8
    //   176: aload 10
    //   178: iconst_1
    //   179: anewarray 50	java/lang/String
    //   182: dup
    //   183: iconst_0
    //   184: ldc 82
    //   186: aastore
    //   187: aconst_null
    //   188: aconst_null
    //   189: aconst_null
    //   190: aconst_null
    //   191: aconst_null
    //   192: invokevirtual 86	android/database/sqlite/SQLiteDatabase:query	(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
    //   195: astore 13
    //   197: aload 13
    //   199: astore 8
    //   201: aload 8
    //   203: astore 9
    //   205: aload 13
    //   207: invokeinterface 92 1 0
    //   212: pop
    //   213: aload 8
    //   215: astore 9
    //   217: aload 13
    //   219: iconst_0
    //   220: invokeinterface 96 2 0
    //   225: astore 10
    //   227: aload 10
    //   229: astore 9
    //   231: aload 13
    //   233: ifnull +93 -> 326
    //   236: aload 13
    //   238: invokeinterface 99 1 0
    //   243: istore 7
    //   245: aload 10
    //   247: astore 9
    //   249: iload 7
    //   251: ifne +75 -> 326
    //   254: aload 10
    //   256: astore 9
    //   258: aload 8
    //   260: invokeinterface 102 1 0
    //   265: goto +61 -> 326
    //   268: astore 10
    //   270: goto +13 -> 283
    //   273: astore 8
    //   275: goto +224 -> 499
    //   278: astore 10
    //   280: aconst_null
    //   281: astore 8
    //   283: aload 8
    //   285: astore 9
    //   287: aload 10
    //   289: invokevirtual 105	java/lang/Exception:printStackTrace	()V
    //   292: aload 12
    //   294: astore 9
    //   296: aload 8
    //   298: ifnull +28 -> 326
    //   301: aload 8
    //   303: invokeinterface 99 1 0
    //   308: istore 7
    //   310: aload 12
    //   312: astore 9
    //   314: iload 7
    //   316: ifne +10 -> 326
    //   319: aload 11
    //   321: astore 9
    //   323: goto -65 -> 258
    //   326: new 52	java/lang/StringBuilder
    //   329: dup
    //   330: invokespecial 53	java/lang/StringBuilder:<init>	()V
    //   333: astore 8
    //   335: aload 8
    //   337: ldc 55
    //   339: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   342: pop
    //   343: aload 8
    //   345: lload_1
    //   346: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   349: pop
    //   350: aload 8
    //   352: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   355: astore 8
    //   357: aload 14
    //   359: iconst_0
    //   360: aload 8
    //   362: aastore
    //   363: aload 14
    //   365: iconst_1
    //   366: aload 9
    //   368: aastore
    //   369: aload_0
    //   370: invokespecial 68	com/jd/amon/sdk/JdBaseReporter/b/d:getDatabase	()Landroid/database/sqlite/SQLiteDatabase;
    //   373: astore 8
    //   375: aload_0
    //   376: getfield 19	com/jd/amon/sdk/JdBaseReporter/b/d:h	Ljava/lang/String;
    //   379: astore 9
    //   381: aload 14
    //   383: checkcast 70	[Ljava/lang/String;
    //   386: astore 10
    //   388: aload 8
    //   390: aload 9
    //   392: ldc 72
    //   394: aload 10
    //   396: invokevirtual 78	android/database/sqlite/SQLiteDatabase:delete	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
    //   399: istore 6
    //   401: iload 6
    //   403: iconst_0
    //   404: iadd
    //   405: istore 5
    //   407: aload 14
    //   409: iconst_0
    //   410: ldc 107
    //   412: aastore
    //   413: new 52	java/lang/StringBuilder
    //   416: dup
    //   417: invokespecial 53	java/lang/StringBuilder:<init>	()V
    //   420: astore 8
    //   422: aload 8
    //   424: ldc 55
    //   426: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   429: pop
    //   430: aload 8
    //   432: lload_3
    //   433: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   436: pop
    //   437: aload 8
    //   439: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   442: astore 8
    //   444: aload 14
    //   446: iconst_1
    //   447: aload 8
    //   449: aastore
    //   450: aload_0
    //   451: invokespecial 68	com/jd/amon/sdk/JdBaseReporter/b/d:getDatabase	()Landroid/database/sqlite/SQLiteDatabase;
    //   454: astore 8
    //   456: aload_0
    //   457: getfield 19	com/jd/amon/sdk/JdBaseReporter/b/d:h	Ljava/lang/String;
    //   460: astore 9
    //   462: aload 14
    //   464: checkcast 70	[Ljava/lang/String;
    //   467: astore 10
    //   469: aload 8
    //   471: aload 9
    //   473: ldc 72
    //   475: aload 10
    //   477: invokevirtual 78	android/database/sqlite/SQLiteDatabase:delete	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
    //   480: istore 6
    //   482: iload 6
    //   484: iload 5
    //   486: iadd
    //   487: istore 5
    //   489: goto +80 -> 569
    //   492: astore 8
    //   494: goto +50 -> 544
    //   497: astore 8
    //   499: aload 9
    //   501: ifnull +38 -> 539
    //   504: aload 9
    //   506: checkcast 88	android/database/Cursor
    //   509: astore 10
    //   511: aload 10
    //   513: invokeinterface 99 1 0
    //   518: istore 7
    //   520: iload 7
    //   522: ifne +17 -> 539
    //   525: aload 9
    //   527: checkcast 88	android/database/Cursor
    //   530: astore 9
    //   532: aload 9
    //   534: invokeinterface 102 1 0
    //   539: aload 8
    //   541: athrow
    //   542: astore 8
    //   544: aload 8
    //   546: checkcast 40	java/lang/Exception
    //   549: invokevirtual 105	java/lang/Exception:printStackTrace	()V
    //   552: invokestatic 112	com/jd/amon/sdk/JdBaseReporter/a:a	()Lcom/jd/amon/sdk/JdBaseReporter/a;
    //   555: invokevirtual 115	com/jd/amon/sdk/JdBaseReporter/a:c	()Lcom/jd/amon/sdk/JdBaseReporter/d/a;
    //   558: ldc 117
    //   560: ldc 118
    //   562: aload 8
    //   564: invokeinterface 123 4 0
    //   569: aload_0
    //   570: aload_0
    //   571: getfield 125	com/jd/amon/sdk/JdBaseReporter/b/d:c	J
    //   574: iload 5
    //   576: i2l
    //   577: lsub
    //   578: putfield 125	com/jd/amon/sdk/JdBaseReporter/b/d:c	J
    //   581: new 52	java/lang/StringBuilder
    //   584: dup
    //   585: invokespecial 53	java/lang/StringBuilder:<init>	()V
    //   588: astore 8
    //   590: aload 8
    //   592: ldc 127
    //   594: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   597: pop
    //   598: aload 8
    //   600: lload_1
    //   601: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   604: pop
    //   605: aload 8
    //   607: ldc -127
    //   609: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   612: pop
    //   613: aload 8
    //   615: lload_3
    //   616: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   619: pop
    //   620: aload 8
    //   622: ldc -125
    //   624: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   627: pop
    //   628: aload 8
    //   630: iload 5
    //   632: invokevirtual 134	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   635: pop
    //   636: aload 8
    //   638: ldc -120
    //   640: invokevirtual 59	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   643: pop
    //   644: aload 8
    //   646: aload_0
    //   647: getfield 125	com/jd/amon/sdk/JdBaseReporter/b/d:c	J
    //   650: invokevirtual 62	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   653: pop
    //   654: aload 8
    //   656: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   659: invokestatic 141	com/jd/amon/sdk/JdBaseReporter/f/e:a	(Ljava/lang/String;)V
    //   662: iload 5
    //   664: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	665	0	this	d
    //   0	665	1	paramLong1	long
    //   0	665	3	paramLong2	long
    //   24	639	5	i	int
    //   142	345	6	j	int
    //   243	278	7	bool	boolean
    //   45	214	8	localObject1	Object
    //   273	1	8	localThrowable1	Throwable
    //   281	189	8	localObject2	Object
    //   492	1	8	localException1	Exception
    //   497	43	8	localThrowable2	Throwable
    //   542	21	8	localException2	Exception
    //   588	67	8	localStringBuilder	StringBuilder
    //   122	411	9	localObject3	Object
    //   129	126	10	localObject4	Object
    //   268	1	10	localException3	Exception
    //   278	10	10	localException4	Exception
    //   386	126	10	localObject5	Object
    //   160	160	11	localObject6	Object
    //   154	157	12	localObject7	Object
    //   195	42	13	localCursor	Cursor
    //   30	433	14	arrayOfString	String[]
    // Exception table:
    //   from	to	target	type
    //   205	213	268	java/lang/Exception
    //   217	227	268	java/lang/Exception
    //   162	168	273	java/lang/Throwable
    //   174	197	273	java/lang/Throwable
    //   162	168	278	java/lang/Exception
    //   174	197	278	java/lang/Exception
    //   413	444	492	java/lang/Exception
    //   450	456	492	java/lang/Exception
    //   469	482	492	java/lang/Exception
    //   205	213	497	java/lang/Throwable
    //   217	227	497	java/lang/Throwable
    //   287	292	497	java/lang/Throwable
    //   38	69	542	java/lang/Exception
    //   75	106	542	java/lang/Exception
    //   112	118	542	java/lang/Exception
    //   131	144	542	java/lang/Exception
    //   236	245	542	java/lang/Exception
    //   258	265	542	java/lang/Exception
    //   301	310	542	java/lang/Exception
    //   326	357	542	java/lang/Exception
    //   369	375	542	java/lang/Exception
    //   388	401	542	java/lang/Exception
    //   511	520	542	java/lang/Exception
    //   532	539	542	java/lang/Exception
    //   539	542	542	java/lang/Exception
  }
  
  public ArrayList a(Long paramLong)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramLong.longValue() == 0L) {
      return localArrayList;
    }
    Object localObject7 = null;
    Object localObject8 = null;
    Object localObject1 = null;
    String[] arrayOfString = new String[4];
    arrayOfString[0] = "id";
    arrayOfString[1] = "time";
    arrayOfString[2] = "data";
    arrayOfString[3] = "reserve";
    Object localObject4 = localObject1;
    Object localObject5 = localObject7;
    Object localObject6 = localObject8;
    try
    {
      long l = paramLong.longValue();
      SQLiteDatabase localSQLiteDatabase;
      String str;
      if (l > 0L)
      {
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        localSQLiteDatabase = e();
        str = h;
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        StringBuilder localStringBuilder = new StringBuilder();
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        localStringBuilder.append("");
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        localStringBuilder.append(paramLong);
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        localObject7 = localSQLiteDatabase.query(str, arrayOfString, null, null, null, null, "time asc", localStringBuilder.toString());
      }
      else
      {
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        localSQLiteDatabase = e();
        str = h;
        localObject4 = localObject1;
        localObject5 = localObject7;
        localObject6 = localObject8;
        localObject7 = localSQLiteDatabase.query(str, arrayOfString, null, null, null, null, "time asc");
      }
      localObject1 = localObject7;
      localObject4 = localObject1;
      localObject5 = localObject1;
      localObject6 = localObject1;
      ((Cursor)localObject7).moveToFirst();
      for (;;)
      {
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        boolean bool = localObject1.isAfterLast();
        if (bool) {
          break;
        }
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject7 = new h();
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        ((h)localObject7).c(localObject1.getString(0));
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        ((h)localObject7).e(localObject1.getString(2));
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localArrayList.add(localObject7);
        localObject4 = localObject1;
        localObject5 = localObject1;
        localObject6 = localObject1;
        localObject1.moveToNext();
      }
      if ((localObject1 == null) || (localObject1.isClosed())) {
        break label555;
      }
    }
    catch (Throwable paramLong)
    {
      break label609;
    }
    catch (Exception localException)
    {
      localObject4 = localObject5;
      localException.printStackTrace();
      localObject4 = localObject5;
      com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "query", localException);
      if ((localObject5 == null) || (localObject5.isClosed())) {
        break label555;
      }
      Object localObject2 = localObject5;
    }
    catch (StackOverflowError localStackOverflowError)
    {
      localObject4 = localObject6;
      localStackOverflowError.printStackTrace();
      localObject4 = localObject6;
      com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "query", localStackOverflowError);
      if (localObject6 == null) {
        break label555;
      }
    }
    if (!localObject6.isClosed())
    {
      localObject3 = localObject6;
      ((Cursor)localObject3).close();
    }
    label555:
    Object localObject3 = new StringBuilder();
    ((StringBuilder)localObject3).append("????????");
    ((StringBuilder)localObject3).append(paramLong);
    ((StringBuilder)localObject3).append("???,????????");
    ((StringBuilder)localObject3).append(localArrayList.size());
    e.a(((StringBuilder)localObject3).toString());
    return localArrayList;
    label609:
    if ((localObject4 != null) && (!localObject4.isClosed())) {
      localObject4.close();
    }
    throw paramLong;
  }
  
  public void a()
  {
    Object localObject;
    if (b() <= 0L)
    {
      if (e.a)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(h);
        ((StringBuilder)localObject).append(" --->  mCurrentSize <= 0 return ");
        e.a("BaseTable", ((StringBuilder)localObject).toString());
      }
    }
    else
    {
      localObject = Calendar.getInstance();
      ((Calendar)localObject).set(((Calendar)localObject).get(1), ((Calendar)localObject).get(2), ((Calendar)localObject).get(5), 0, 0, 0);
      long l = ((Calendar)localObject).getTimeInMillis();
      if (e.a)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(h);
        ((StringBuilder)localObject).append(" ---> before clean obsolete size is ");
        ((StringBuilder)localObject).append(c);
        e.a("BaseTable", ((StringBuilder)localObject).toString());
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("DELETE FROM ");
      ((StringBuilder)localObject).append(h);
      ((StringBuilder)localObject).append(" WHERE CAST(");
      ((StringBuilder)localObject).append("time");
      ((StringBuilder)localObject).append(" AS LONG) < ");
      ((StringBuilder)localObject).append(l);
      localObject = ((StringBuilder)localObject).toString();
      try
      {
        getDatabase().beginTransaction();
        getDatabase().execSQL((String)localObject);
        getDatabase().setTransactionSuccessful();
        getDatabase().endTransaction();
      }
      catch (Throwable localThrowable)
      {
        break label301;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
          com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "removeObsoleteData", localException);
        }
      }
      c = c();
      if (e.a)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(h);
        localStringBuilder.append(" ---> after clean obsolete size is ");
        localStringBuilder.append(c);
        e.a("BaseTable", localStringBuilder.toString());
        return;
        label301:
        getDatabase().endTransaction();
        throw localStringBuilder;
      }
    }
  }
  
  public void a(List paramList)
  {
    if ((!a(b())) && (paramList != null) && (paramList.size() > 0)) {
      try
      {
        Object localObject1 = getDatabase();
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("insert into ");
        Object localObject3 = h;
        ((StringBuilder)localObject2).append((String)localObject3);
        ((StringBuilder)localObject2).append("(");
        ((StringBuilder)localObject2).append("time");
        ((StringBuilder)localObject2).append(",");
        ((StringBuilder)localObject2).append("data");
        ((StringBuilder)localObject2).append(",");
        ((StringBuilder)localObject2).append("reserve");
        ((StringBuilder)localObject2).append(")values(?,?,?)");
        localObject2 = ((SQLiteDatabase)localObject1).compileStatement(((StringBuilder)localObject2).toString());
        ((SQLiteDatabase)localObject1).beginTransaction();
        int i = 0;
        localObject3 = paramList.iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject3).hasNext();
          if (!bool) {
            break;
          }
          Object localObject4 = ((Iterator)localObject3).next();
          localObject4 = (String)localObject4;
          ((SQLiteProgram)localObject2).bindString(1, String.valueOf(System.currentTimeMillis()));
          ((SQLiteProgram)localObject2).bindString(2, (String)localObject4);
          ((SQLiteProgram)localObject2).bindString(3, "-1");
          long l = ((SQLiteStatement)localObject2).executeInsert();
          if (l != -1L) {
            i += 1;
          }
        }
        ((SQLiteDatabase)localObject1).setTransactionSuccessful();
        ((SQLiteDatabase)localObject1).endTransaction();
        c += i;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("????????,??:");
        ((StringBuilder)localObject1).append(paramList.size());
        ((StringBuilder)localObject1).append("???:");
        ((StringBuilder)localObject1).append(i);
        e.a(((StringBuilder)localObject1).toString());
        return;
      }
      catch (Exception paramList)
      {
        e.d("????????");
        paramList.printStackTrace();
        com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "put", paramList);
      }
    }
  }
  
  public void a(List paramList, String paramString)
  {
    if ((!a(b())) && (paramList != null) && (paramList.size() > 0)) {
      try
      {
        SQLiteDatabase localSQLiteDatabase = getDatabase();
        Object localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("insert into ");
        Object localObject2 = h;
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append("(");
        ((StringBuilder)localObject1).append("time");
        ((StringBuilder)localObject1).append(",");
        ((StringBuilder)localObject1).append("data");
        ((StringBuilder)localObject1).append(",");
        ((StringBuilder)localObject1).append("reserve");
        ((StringBuilder)localObject1).append(")values(?,?,?)");
        localObject1 = localSQLiteDatabase.compileStatement(((StringBuilder)localObject1).toString());
        localSQLiteDatabase.beginTransaction();
        int i = 0;
        localObject2 = paramList.iterator();
        for (;;)
        {
          boolean bool = ((Iterator)localObject2).hasNext();
          if (!bool) {
            break;
          }
          Object localObject3 = ((Iterator)localObject2).next();
          localObject3 = (HashMap)localObject3;
          ((SQLiteProgram)localObject1).bindString(1, String.valueOf(System.currentTimeMillis()));
          ((SQLiteProgram)localObject1).bindString(2, com.jd.amon.sdk.JdBaseReporter.a.a.a((HashMap)localObject3));
          ((SQLiteProgram)localObject1).bindString(3, paramString);
          long l = ((SQLiteStatement)localObject1).executeInsert();
          if (l != -1L) {
            i += 1;
          }
        }
        localSQLiteDatabase.setTransactionSuccessful();
        localSQLiteDatabase.endTransaction();
        c += i;
        paramString = new StringBuilder();
        paramString.append("????????,??:");
        paramString.append(paramList.size());
        paramString.append("???:");
        paramString.append(i);
        e.a(paramString.toString());
        return;
      }
      catch (Exception paramList)
      {
        e.d("????????");
        paramList.printStackTrace();
        com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "putHashMap", paramList);
      }
    }
  }
  
  public long b()
  {
    if (c <= 0L) {
      c = c();
    }
    return c;
  }
  
  public long c()
  {
    Cursor localCursor3 = null;
    Cursor localCursor2 = null;
    long l2 = 0L;
    Object localObject1 = localCursor2;
    Cursor localCursor1 = localCursor3;
    long l1 = l2;
    long l3;
    for (;;)
    {
      try
      {
        Object localObject2 = e();
        String str = h;
        localObject1 = localCursor2;
        localCursor1 = localCursor3;
        l1 = l2;
        localCursor3 = ((SQLiteDatabase)localObject2).query(str, new String[] { "count(*)" }, null, null, null, null, null);
        localCursor2 = localCursor3;
        localObject1 = localCursor2;
        localCursor1 = localCursor2;
        l1 = l2;
        localCursor3.moveToFirst();
        localObject1 = localCursor2;
        localCursor1 = localCursor2;
        l1 = l2;
        int i = localCursor3.getInt(0);
        l2 = i;
        localObject1 = localCursor2;
        localCursor1 = localCursor2;
        l1 = l2;
        localObject2 = new StringBuilder();
        localObject1 = localCursor2;
        localCursor1 = localCursor2;
        l1 = l2;
        ((StringBuilder)localObject2).append("?????????? ????");
        localObject1 = localCursor2;
        localCursor1 = localCursor2;
        l1 = l2;
        ((StringBuilder)localObject2).append(l2);
        localObject1 = localCursor2;
        localCursor1 = localCursor2;
        l1 = l2;
        e.a(((StringBuilder)localObject2).toString());
        if (localCursor3 == null) {
          break;
        }
        l3 = l2;
        if (localCursor3.isClosed()) {
          break label317;
        }
        l1 = l2;
        localCursor1 = localCursor2;
        localCursor1.close();
        return l1;
      }
      catch (Throwable localThrowable) {}catch (Exception localException)
      {
        localObject1 = localThrowable;
        localException.printStackTrace();
        localObject1 = localThrowable;
        com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "querySize", localException);
        l3 = l1;
        if (localThrowable == null) {
          break label317;
        }
      }
      l3 = l1;
      if (localThrowable.isClosed()) {
        break label317;
      }
    }
    return l2;
    if ((localObject1 != null) && (!((Cursor)localObject1).isClosed())) {
      ((Cursor)localObject1).close();
    }
    throw localThrowable;
    label317:
    return l3;
  }
  
  public void create(SQLiteDatabase paramSQLiteDatabase)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("CREATE TABLE ");
    localStringBuilder.append(h);
    localStringBuilder.append(" (");
    localStringBuilder.append("id");
    localStringBuilder.append(" INTEGER PRIMARY KEY, ");
    localStringBuilder.append("time");
    localStringBuilder.append(" TEXT, ");
    localStringBuilder.append("data");
    localStringBuilder.append(" TEXT, ");
    localStringBuilder.append("reserve");
    localStringBuilder.append(" TEXT);");
    paramSQLiteDatabase.execSQL(localStringBuilder.toString());
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("create index if not exists timeindex on ");
    localStringBuilder.append(h);
    localStringBuilder.append("(");
    localStringBuilder.append("time");
    localStringBuilder.append(")");
    paramSQLiteDatabase.execSQL(localStringBuilder.toString());
  }
  
  public void delete(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("DROP TABLE IF EXISTS ");
    localStringBuilder.append(h);
    paramSQLiteDatabase.execSQL(localStringBuilder.toString());
    create(paramSQLiteDatabase);
  }
  
  public String f()
  {
    return h;
  }
  
  public void onPageScrollStateChanged() {}
}
