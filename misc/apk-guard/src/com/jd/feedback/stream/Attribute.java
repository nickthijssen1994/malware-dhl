package com.jd.feedback.stream;

import android.text.TextUtils;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class Attribute
{
  public static final String type = "f";
  
  public Attribute() {}
  
  private static String encode(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    while ((paramArrayOfByte != null) && (i < paramArrayOfByte.length))
    {
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      if (str.length() == 1) {
        localStringBuilder.append('0');
      }
      localStringBuilder.append(str);
      i += 1;
    }
    return localStringBuilder.toString().toLowerCase();
  }
  
  private static String encode(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    try
    {
      paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, "HmacSHA256");
      Mac localMac = Mac.getInstance("HmacSHA256");
      localMac.init(paramArrayOfByte2);
      paramArrayOfByte1 = encode(localMac.doFinal(paramArrayOfByte1));
      return paramArrayOfByte1;
    }
    catch (InvalidKeyException paramArrayOfByte1)
    {
      paramArrayOfByte1.printStackTrace();
    }
    catch (NoSuchAlgorithmException paramArrayOfByte1)
    {
      paramArrayOfByte1.printStackTrace();
    }
    return null;
  }
  
  private static byte[] getBytes(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return paramString.getBytes();
  }
  
  public static String write(Map paramMap, String paramString)
  {
    Object localObject2 = new TreeSet();
    Object localObject1 = paramMap.keySet().iterator();
    while (((Iterator)localObject1).hasNext()) {
      ((TreeSet)localObject2).add((String)((Iterator)localObject1).next());
    }
    localObject1 = new StringBuffer();
    localObject2 = ((TreeSet)localObject2).iterator();
    while (((Iterator)localObject2).hasNext())
    {
      String str = (String)paramMap.get((String)((Iterator)localObject2).next());
      if (!TextUtils.isEmpty(str))
      {
        ((StringBuffer)localObject1).append(str);
        ((StringBuffer)localObject1).append("&");
      }
    }
    localObject2 = ((StringBuffer)localObject1).toString();
    paramMap = (Map)localObject2;
    localObject1 = paramMap;
    if (((String)localObject2).endsWith("&"))
    {
      localObject1 = paramMap;
      if (((String)localObject2).length() > 1) {
        localObject1 = ((String)localObject2).substring(0, ((String)localObject2).length() - 1);
      }
    }
    return encode(getBytes((String)localObject1), getBytes(paramString));
  }
}
