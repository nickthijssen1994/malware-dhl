package com.jd.feedback.stream;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.provider.MediaStore.Images.Media;
import android.util.Log;
import androidx.core.content.ContextCompat;
import com.jd.feedback.FeedbackSDK;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class Context
{
  public static Uri get(android.content.Context paramContext, String paramString)
  {
    if (paramContext == null)
    {
      Log.w("FeedbackSdk.ImageUtil", "context is null");
      return null;
    }
    if ((paramString != null) && (paramString.trim().length() != 0))
    {
      if (ContextCompat.checkSelfPermission(paramContext, "android.permission.READ_EXTERNAL_STORAGE") != 0)
      {
        Log.w("FeedbackSdk.ImageUtil", "No READ_EXTERNAL_STORAGE premission");
        return null;
      }
      paramContext = paramContext.getContentResolver();
      Uri localUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
      paramString = paramString.trim();
      paramContext = paramContext.query(localUri, new String[] { "_id" }, "_data = ?", new String[] { paramString }, null);
      Log.d("FeedbackSdk.ImageUtil", "cursor: ".concat(String.valueOf(paramContext)));
      if ((paramContext != null) && (paramContext.getCount() > 0))
      {
        paramString = new StringBuilder("cursor rows: ");
        paramString.append(paramContext.getCount());
        Log.d("FeedbackSdk.ImageUtil", paramString.toString());
        paramContext.moveToFirst();
        paramString = new StringBuilder("content://media/external/images/media/");
        paramString.append(paramContext.getLong(0));
        paramString = Uri.parse(paramString.toString());
        paramContext.close();
        return paramString;
      }
    }
    else
    {
      Log.w("FeedbackSdk.ImageUtil", "path is empty");
    }
    return null;
  }
  
  public static String getPath(android.content.Context paramContext, Uri paramUri)
  {
    if ((paramContext != null) && (paramUri != null))
    {
      paramUri = paramUri.toString();
      Log.d("FeedbackSdk.ImageUtil", "parse id from uri: ".concat(String.valueOf(paramUri)));
      if (!paramUri.startsWith("content://media/external/images/media/")) {}
    }
    try
    {
      long l = Long.parseLong(paramUri.substring(38));
      if (ContextCompat.checkSelfPermission(paramContext, "android.permission.READ_EXTERNAL_STORAGE") != 0)
      {
        Log.w("FeedbackSdk.ImageUtil", "No READ_EXTERNAL_STORAGE premission");
        return null;
      }
      paramContext = paramContext.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, new String[] { "_data" }, "_id = ?", new String[] { String.valueOf(l) }, null);
      Log.d("FeedbackSdk.ImageUtil", "cursor: ".concat(String.valueOf(paramContext)));
      if ((paramContext == null) || (paramContext.getCount() <= 0)) {
        break label219;
      }
      paramUri = new StringBuilder("cursor rows: ");
      paramUri.append(paramContext.getCount());
      Log.d("FeedbackSdk.ImageUtil", paramUri.toString());
      paramContext.moveToFirst();
      paramUri = paramContext.getString(0);
      paramContext.close();
      return paramUri;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    Log.w("FeedbackSdk.ImageUtil", "uri is invalid, parse id failed");
    return null;
    Log.w("FeedbackSdk.ImageUtil", "uri is invalid");
    return null;
    Log.w("FeedbackSdk.ImageUtil", "context or uri is null");
    return null;
    label219:
    return null;
  }
  
  public static ArrayList parse(List paramList, boolean paramBoolean)
  {
    Object localObject = new ArrayList();
    if ((paramList != null) && (paramList.size() > 0))
    {
      Iterator localIterator = paramList.iterator();
      while (localIterator.hasNext())
      {
        paramList = localIterator.next();
        boolean bool = paramList instanceof String;
        if ((!bool) && (!(paramList instanceof Uri)))
        {
          if (!paramBoolean) {
            throw new IllegalArgumentException("Type of item of images is invalid, should be Uri or String");
          }
        }
        else if (bool)
        {
          Uri localUri = get(FeedbackSDK.getContext(), (String)paramList);
          if (localUri == null)
          {
            if (!paramBoolean)
            {
              localObject = new StringBuilder("cannot get image uri from path ");
              ((StringBuilder)localObject).append(paramList.toString());
              throw new IllegalStateException(((StringBuilder)localObject).toString());
            }
          }
          else {
            ((ArrayList)localObject).add(localUri);
          }
        }
        else
        {
          ((ArrayList)localObject).add((Uri)paramList);
        }
      }
    }
    return localObject;
  }
}
