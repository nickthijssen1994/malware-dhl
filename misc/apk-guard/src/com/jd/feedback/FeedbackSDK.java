package com.jd.feedback;

import android.content.Intent;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.BaseBundle;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.widget.ImageView;
import androidx.lifecycle.LifecycleOwner;
import com.jd.android.sdk.coreinfo.a.b;
import com.jd.feedback.album.Label;
import com.jd.feedback.album.LayoutManager;
import com.jd.feedback.album.c;
import com.jd.feedback.album.f;
import com.jd.feedback.album.h;
import com.jd.feedback.network.MimeType;
import com.jd.feedback.network.result.FeedbackRequestResult;
import com.jd.feedback.network.result.MessageRequestResult;
import com.jd.feedback.network.result.StatisticsRequestResult;
import com.jd.feedback.stream.LoginActivity.8;
import com.jd.feedback.stream.PackageManagerWrapper;
import com.uber.autodispose.l;
import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.Single;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.schedulers.Schedulers;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FeedbackSDK
{
  public static final String INTENT_KEY_IMAGES2ADD = "imagesToAdd";
  public static final String PAGE_KEY = "FeedbackSDK";
  private static final String SDK_VERSION = "1.3.7.4";
  private static boolean initialized = false;
  private static boolean isTest;
  private static a sConfig;
  private static android.content.Context sContext;
  private static ImageLoader sImageLoader = ImageLoader.DEFAULT;
  
  static
  {
    isTest = false;
  }
  
  public FeedbackSDK() {}
  
  public static void api_getFeedbackHistories(LifecycleOwner paramLifecycleOwner, String paramString, FeedbackRequestListener paramFeedbackRequestListener)
  {
    
    if ((paramString != null) && (!Pattern.compile("^\\d+$").matcher(paramString).matches())) {
      return;
    }
    ((l)MimeType.create(paramString).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(com.uber.autodispose.a.a(com.uber.autodispose.android.lifecycle.a.a(paramLifecycleOwner)))).a(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("????????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_getFeedbackHistories(String paramString, FeedbackRequestListener paramFeedbackRequestListener)
  {
    
    if ((paramString != null) && (!Pattern.compile("^\\d+$").matcher(paramString).matches())) {
      return;
    }
    MimeType.create(paramString).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("????????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_getFeedbackStatistics(LifecycleOwner paramLifecycleOwner, FeedbackRequestListener paramFeedbackRequestListener)
  {
    checkFeedbackSDKState();
    ((l)MimeType.create().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(com.uber.autodispose.a.a(com.uber.autodispose.android.lifecycle.a.a(paramLifecycleOwner)))).a(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("????????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_getFeedbackStatistics(FeedbackRequestListener paramFeedbackRequestListener)
  {
    checkFeedbackSDKState();
    MimeType.create().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("????????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_getReplyInformation(LifecycleOwner paramLifecycleOwner, String paramString1, String paramString2, FeedbackRequestListener paramFeedbackRequestListener)
  {
    
    if ((paramString1 != null) && (!Pattern.compile("^\\d+$").matcher(paramString1).matches())) {
      return;
    }
    ((l)MimeType.get(paramString1, paramString2).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(com.uber.autodispose.a.a(com.uber.autodispose.android.lifecycle.a.a(paramLifecycleOwner)))).a(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("????????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_getReplyInformation(String paramString1, String paramString2, FeedbackRequestListener paramFeedbackRequestListener)
  {
    
    if ((paramString1 != null) && (!Pattern.compile("^\\d+$").matcher(paramString1).matches())) {
      return;
    }
    MimeType.get(paramString1, paramString2).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("????????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_pullconfig(LifecycleOwner paramLifecycleOwner, PullConfigListener paramPullConfigListener)
  {
    checkFeedbackSDKState();
    ((l)Log.parse().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).as(com.uber.autodispose.a.a(com.uber.autodispose.android.lifecycle.a.a(paramLifecycleOwner)))).a(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("??????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_pullconfig(PullConfigListener paramPullConfigListener)
  {
    checkFeedbackSDKState();
    Log.parse().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("??????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_uploadFeedback(LifecycleOwner paramLifecycleOwner, String paramString1, final String paramString2, final String paramString3, List paramList, UploadFeedbackListener paramUploadFeedbackListener)
  {
    checkFeedbackSDKState();
    paramList = com.jd.feedback.stream.Context.parse(paramList, false);
    ((l)Scope.create(paramList).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer() {}).flatMapObservable(new Function() {}).observeOn(AndroidSchedulers.mainThread()).as(com.uber.autodispose.a.a(com.uber.autodispose.android.lifecycle.a.a(paramLifecycleOwner)))).a(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("??????? ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_uploadFeedback(String paramString1, final String paramString2, final String paramString3, List paramList, UploadFeedbackListener paramUploadFeedbackListener)
  {
    checkFeedbackSDKState();
    paramList = com.jd.feedback.stream.Context.parse(paramList, false);
    Scope.create(paramList).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer() {}).flatMapObservable(new Function() {}).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("??????: ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_uploadReply(LifecycleOwner paramLifecycleOwner, String paramString1, List paramList, final String paramString2, FeedbackRequestListener paramFeedbackRequestListener)
  {
    checkFeedbackSDKState();
    paramList = com.jd.feedback.stream.Context.parse(paramList, false);
    ((l)Scope.create(paramList, paramString2).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer() {}).flatMapObservable(new Function() {}).observeOn(AndroidSchedulers.mainThread()).as(com.uber.autodispose.a.a(com.uber.autodispose.android.lifecycle.a.a(paramLifecycleOwner)))).a(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("??????? ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  public static void api_uploadReply(String paramString1, List paramList, final String paramString2, FeedbackRequestListener paramFeedbackRequestListener)
  {
    checkFeedbackSDKState();
    paramList = com.jd.feedback.stream.Context.parse(paramList, false);
    Scope.create(paramList, paramString2).subscribeOn(Schedulers.io()).toList().doOnSuccess(new Consumer() {}).flatMapObservable(new Function() {}).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer()
    {
      public final void onComplete() {}
      
      public final void onError(Throwable paramAnonymousThrowable)
      {
        Object localObject = this$0;
        if (localObject != null) {
          ((FeedbackSDK.FeedbackRequestListener)localObject).onFailure(paramAnonymousThrowable);
        }
        localObject = new StringBuilder("??????? ");
        ((StringBuilder)localObject).append(paramAnonymousThrowable.getMessage());
        android.util.Log.e("FeedbackSDK", ((StringBuilder)localObject).toString(), paramAnonymousThrowable);
      }
      
      public final void onSubscribe(Disposable paramAnonymousDisposable) {}
    });
  }
  
  private static void checkFeedbackSDKState()
  {
    if (sContext != null) {
      return;
    }
    throw new IllegalStateException("FeedbackSDK is uninitialized");
  }
  
  private static void checkMateData(android.content.Context paramContext)
  {
    try
    {
      paramContext = paramContext.getApplicationContext().getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      if ((paramContext != null) && (metaData != null))
      {
        paramContext = metaData;
        boolean bool = paramContext.getBoolean("feedbackSdk-isTest", false);
        isTest = bool;
        return;
      }
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static byte[] getAesIV()
  {
    return getConfiguserType;
  }
  
  public static String getAppId()
  {
    return getConfigmAppId;
  }
  
  public static String getAppKey()
  {
    return getConfigorgName;
  }
  
  public static String getBrand()
  {
    return Build.BRAND;
  }
  
  public static String getBuild()
  {
    return getConfigbuild;
  }
  
  public static String getClient()
  {
    return "android";
  }
  
  public static String getClientVersion()
  {
    return getConfigclientVersion;
  }
  
  private static a getConfig()
  {
    checkFeedbackSDKState();
    return sConfig;
  }
  
  public static android.content.Context getContext()
  {
    checkFeedbackSDKState();
    return sContext;
  }
  
  public static String getExt()
  {
    return getConfigdownloadToFile;
  }
  
  public static String getHostSecretKey()
  {
    return getConfigapiBase;
  }
  
  public static ImageLoader getImageLoader()
  {
    return sImageLoader;
  }
  
  public static boolean getIsJailbroken()
  {
    getContext();
    return LoginActivity.8.checkSu();
  }
  
  public static String getModel()
  {
    return Build.MODEL;
  }
  
  public static String getNetworkCode()
  {
    return "";
  }
  
  public static String getNetworkName()
  {
    android.content.Context localContext = getContext();
    String str = "";
    if (PackageManagerWrapper.hasPermission("android.permission.READ_PHONE_STATE")) {
      str = a.b.c(localContext);
    }
    if ((!str.startsWith("46000")) && (!str.startsWith("46002")) && (!str.startsWith("46004")) && (!str.startsWith("46007")) && (!str.startsWith("46008")))
    {
      if ((!str.startsWith("46001")) && (!str.startsWith("46006")) && (!str.startsWith("46009")))
      {
        if ((!str.startsWith("46003")) && (!str.startsWith("46005")) && (!str.startsWith("46011"))) {
          return "??";
        }
        return "????";
      }
      return "????";
    }
    return "????";
  }
  
  public static String getNetworkType()
  {
    return a.b.m(getContext());
  }
  
  public static String getOsVersion()
  {
    return String.valueOf(Build.VERSION.RELEASE);
  }
  
  public static String getPackageName()
  {
    return getConfigPackageName;
  }
  
  public static String getPartner()
  {
    return getConfigerrorReason;
  }
  
  public static String getResolution()
  {
    return a.b.h(getContext());
  }
  
  public static String getScreen()
  {
    Object localObject = getContext();
    float f1 = getResourcesgetDisplayMetricsscaledDensity;
    f1 = getResourcesgetDisplayMetricsdensity;
    float f2 = getResourcesgetDisplayMetricsxdpi;
    f1 = getResourcesgetDisplayMetricsydpi;
    int i = getResourcesgetDisplayMetricswidthPixels;
    int j = getResourcesgetDisplayMetricsheightPixels;
    f2 = i / f2;
    f1 = j / f1;
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append(f2 * f2);
    ((StringBuilder)localObject).append("x");
    ((StringBuilder)localObject).append(f1 * f2);
    return ((StringBuilder)localObject).toString();
  }
  
  public static String getSdkVersion()
  {
    return "1.3.7.4";
  }
  
  public static String getSecretKey()
  {
    return getConfigsecretKey;
  }
  
  public static String getSource()
  {
    return getConfigsrcName;
  }
  
  public static String getTime()
  {
    return String.valueOf(System.currentTimeMillis());
  }
  
  public static String getUserId()
  {
    return getConfigmUserId;
  }
  
  public static String getUserName()
  {
    return getConfigmUserName;
  }
  
  public static String getUserPhoneNumber()
  {
    return getConfigmacaddr;
  }
  
  public static String getUuid()
  {
    return getConfiguuid;
  }
  
  public static void init(android.content.Context paramContext, ImageLoader paramImageLoader)
  {
    if (initialized)
    {
      android.util.Log.i("FeedbackSDK", "FeedbackSDK has been initialized!");
      return;
    }
    if (paramContext != null)
    {
      if (paramContext.getApplicationContext() == null) {
        sContext = paramContext;
      } else {
        sContext = paramContext.getApplicationContext();
      }
      if (paramImageLoader != null) {
        sImageLoader = paramImageLoader;
      }
      checkMateData(sContext);
      sConfig = new a((byte)0);
      Log.init(sContext);
      paramContext = f.p();
      a = new c()
      {
        public final void a(ImageView paramAnonymousImageView, Label paramAnonymousLabel)
        {
          FeedbackSDK.ImageLoader localImageLoader = FeedbackSDK.sImageLoader;
          StringBuilder localStringBuilder = new StringBuilder("content://media/external/images/media/");
          localStringBuilder.append(f);
          localImageLoader.load(paramAnonymousImageView, Uri.parse(localStringBuilder.toString()), FeedbackSDK.sContext.getResources().getDrawable(R.drawable.placeholder), FeedbackSDK.sContext.getResources().getDrawable(R.drawable.placeholder), "center_crop");
        }
        
        public final void b(ImageView paramAnonymousImageView, String paramAnonymousString)
        {
          paramAnonymousString = com.jd.feedback.stream.Context.get(FeedbackSDK.getContext(), paramAnonymousString);
          StringBuilder localStringBuilder = new StringBuilder("image uri: ");
          localStringBuilder.append(paramAnonymousString.toString());
          android.util.Log.d("FeedbackSDK", localStringBuilder.toString());
          if (paramAnonymousString == null)
          {
            android.util.Log.w("FeedbackSDK", "image uri is null");
            return;
          }
          FeedbackSDK.sImageLoader.load(paramAnonymousImageView, paramAnonymousString, FeedbackSDK.sContext.getResources().getDrawable(R.drawable.placeholder), FeedbackSDK.sContext.getResources().getDrawable(R.drawable.placeholder), "center_crop");
        }
      };
      paramContext = paramContext.a();
      if (h.b == null) {
        h.b = paramContext;
      } else {
        android.util.Log.w("Album", new IllegalStateException("Illegal operation, only allowed to configure once."));
      }
      initialized = true;
      return;
    }
    throw new IllegalStateException("Failed to initial FeedbackSDK as context is null");
  }
  
  public static boolean isTest()
  {
    return isTest;
  }
  
  public static void launch(android.content.Context paramContext, ArrayList paramArrayList)
  {
    
    try
    {
      paramArrayList = com.jd.feedback.stream.Context.parse(paramArrayList, true);
    }
    catch (Exception paramArrayList)
    {
      android.util.Log.w("FeedbackSDK", "get image uri from path failed");
      paramArrayList.printStackTrace();
      paramArrayList = new ArrayList();
    }
    Intent localIntent = new Intent(paramContext, FeedbackActivity.class);
    localIntent.putParcelableArrayListExtra("imagesToAdd", paramArrayList);
    paramContext.startActivity(localIntent);
  }
  
  public static void setAppKey(String paramString)
  {
    getConfigorgName = paramString;
  }
  
  public static void setBuild(String paramString)
  {
    getConfigbuild = paramString;
  }
  
  public static void setClientVersion(String paramString)
  {
    getConfigclientVersion = paramString;
  }
  
  public static void setExt(String paramString)
  {
    getConfigdownloadToFile = paramString;
  }
  
  public static void setPackageName(String paramString)
  {
    getConfigPackageName = paramString;
  }
  
  public static void setPartner(String paramString)
  {
    getConfigerrorReason = paramString;
  }
  
  public static void setSecret(String paramString)
  {
    getConfigsecretKey = paramString;
  }
  
  public static void setSource(String paramString)
  {
    getConfigsrcName = paramString;
  }
  
  public static void setUserId(String paramString)
  {
    getConfigmUserId = paramString;
  }
  
  public static void setUserName(String paramString)
  {
    getConfigmUserName = paramString;
  }
  
  public static void setUserPhoneNumber(String paramString)
  {
    getConfigmacaddr = paramString;
  }
  
  public static void setUuid(String paramString)
  {
    getConfiguuid = paramString;
  }
  
  public static abstract interface FeedbackRequestListener
  {
    public abstract void onFailure(Throwable paramThrowable);
    
    public abstract void onSuccess(String paramString);
  }
  
  public static abstract interface ImageLoader
  {
    public static final ImageLoader DEFAULT = new ImageLoader()
    {
      public final void load(ImageView paramAnonymousImageView, Uri paramAnonymousUri, Drawable paramAnonymousDrawable1, Drawable paramAnonymousDrawable2, String paramAnonymousString) {}
    };
    public static final String OPTION_CENTER_CROP = "center_crop";
    public static final String OPTION_FIT_CENTER = "fit_center";
    
    public abstract void load(ImageView paramImageView, Uri paramUri, Drawable paramDrawable1, Drawable paramDrawable2, String paramString);
  }
  
  public static abstract interface PullConfigListener
    extends FeedbackSDK.FeedbackRequestListener
  {}
  
  public static abstract interface UploadFeedbackListener
    extends FeedbackSDK.FeedbackRequestListener
  {}
  
  static final class a
  {
    String PackageName;
    String apiBase = "48c1055755f6421cb03046f6362fca35";
    String build;
    String clientVersion = "";
    String downloadToFile;
    String errorReason;
    String mAppId = "open-feedback-app";
    String mUserId;
    String mUserName;
    String macaddr;
    String orgName;
    String secretKey;
    String srcName = "Android";
    byte[] userType = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    String uuid;
    
    private a() {}
  }
}
