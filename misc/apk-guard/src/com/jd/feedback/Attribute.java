package com.jd.feedback;

import android.content.Context;
import android.content.SharedPreferences;
import android.text.TextUtils;
import com.google.gson.Gson;
import com.jd.feedback.network.MimeType;
import com.jd.feedback.network.result.MessageRequestResult.FeedbackMessages;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.schedulers.Schedulers;
import java.util.ArrayList;
import java.util.List;

public final class Attribute
{
  private static Context a;
  private static List<MessageRequestResult.FeedbackMessages> l = new ArrayList();
  
  public static void a(Context paramContext)
  {
    a = paramContext.getApplicationContext();
    if (!TextUtils.isEmpty(FeedbackSDK.getUserId()))
    {
      l.clear();
      paramContext = a.getSharedPreferences("feedback_cache", 0);
      StringBuilder localStringBuilder = new StringBuilder("feedback_history_");
      localStringBuilder.append(FeedbackSDK.getUserId());
      paramContext = paramContext.getString(localStringBuilder.toString(), "");
      if (!TextUtils.isEmpty(paramContext)) {
        l.add((MessageRequestResult.FeedbackMessages)new Gson().fromJson(paramContext, MessageRequestResult.FeedbackMessages.class));
      }
    }
  }
  
  public static void call(Observable paramObservable)
  {
    if (TextUtils.isEmpty(FeedbackSDK.getUserId())) {
      return;
    }
    MimeType.create("1").doOnNext(new ReplaySubject.UnboundedReplayState()).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observable.12(paramObservable));
  }
  
  public static List getValue()
  {
    return l;
  }
}
