package com.jd.feedback.network;

import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import com.jd.feedback.FeedbackSDK;
import com.jd.feedback.stream.Attribute;
import com.jd.feedback.stream.ByteBufferList;
import io.reactivex.Observable;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public final class MimeType
{
  private static String append(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    return paramString;
  }
  
  public static Observable create()
  {
    parse(new String[] { "clientVersion", "build", "partner", "appKey", "secretKey", "userId" });
    Log.i("FeedbackRequestHelper", ">>>>>>>>>>>> Request openFeedbackStatistics >>>>>>>>>>>>");
    LinkedHashMap localLinkedHashMap = get("openFeedbackStatistics");
    Object localObject1 = new ArrayList();
    ((List)localObject1).add("appKey");
    ((List)localObject1).add("userId");
    ((List)localObject1).add("sdkVersion");
    localObject1 = parse((List)localObject1, localLinkedHashMap);
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(((JSONObject)localObject1).get("appKey"));
      Object localObject2 = localLinkedHashMap.get("client");
      localObject2 = (String)localObject2;
      localStringBuilder.append((String)localObject2);
      localStringBuilder.append(((JSONObject)localObject1).get("userId"));
      localStringBuilder.append(((JSONObject)localObject1).get("sdkVersion"));
      ((JSONObject)localObject1).put("sign", parse(localStringBuilder.toString()));
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    localLinkedHashMap.put("body", ((JSONObject)localObject1).toString());
    write(localLinkedHashMap);
    return ((IFeedbackApiService)StatementExecutor.create(IFeedbackApiService.class)).filter("openFeedbackStatistics", localLinkedHashMap).doOnNext(new ReplaySubject.UnboundedReplayState());
  }
  
  public static Observable create(String paramString)
  {
    parse(new String[] { "clientVersion", "build", "partner", "appKey", "secretKey", "userId" });
    return parse(paramString, false, null);
  }
  
  public static Observable create(LinkedHashMap paramLinkedHashMap, String paramString)
  {
    write(paramLinkedHashMap);
    return ((IFeedbackApiService)StatementExecutor.create(IFeedbackApiService.class)).empty(paramString, paramLinkedHashMap).doOnNext(new FromMatchesFilter(paramString));
  }
  
  public static Observable get(String paramString1, String paramString2)
  {
    parse(new String[] { "clientVersion", "build", "partner", "appKey", "secretKey", "userId" });
    return parse(paramString1, true, paramString2);
  }
  
  public static Observable get(String paramString1, String paramString2, String paramString3, List paramList)
  {
    parse(new String[] { "clientVersion", "build", "partner", "appKey", "secretKey" });
    return parse(false, paramString1, paramString2, paramList, paramString3, null);
  }
  
  public static Observable get(String paramString1, List paramList, String paramString2)
  {
    parse(new String[] { "clientVersion", "build", "partner", "appKey", "secretKey", "userId" });
    return parse(true, null, paramString1, paramList, null, paramString2);
  }
  
  public static Observable get(boolean paramBoolean, String paramString1, String paramString2)
  {
    Object localObject1 = new StringBuilder(">>>>>>>>>>>> Request openFeedbackImage, isReply: ");
    ((StringBuilder)localObject1).append(paramBoolean);
    ((StringBuilder)localObject1).append(" >>>>>>>>>>>>");
    Log.i("FeedbackRequestHelper", ((StringBuilder)localObject1).toString());
    LinkedHashMap localLinkedHashMap = get("openFeedbackImage");
    localObject1 = new ArrayList();
    ((List)localObject1).add("sdkVersion");
    ((List)localObject1).add("appKey");
    ((List)localObject1).add("isJailbroken");
    ((List)localObject1).add("resolution");
    ((List)localObject1).add("userId");
    if (!paramBoolean)
    {
      ((List)localObject1).add("packageName");
      ((List)localObject1).add("networkName");
      ((List)localObject1).add("userName");
    }
    JSONObject localJSONObject = parse((List)localObject1, localLinkedHashMap);
    if (paramBoolean) {}
    try
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramString2);
      ((StringBuilder)localObject1).append(localJSONObject.get("userId"));
      ((StringBuilder)localObject1).append(localJSONObject.get("sdkVersion"));
      ((StringBuilder)localObject1).append(localJSONObject.get("appKey"));
      localObject1 = ((StringBuilder)localObject1).toString();
      break label300;
      localObject1 = new StringBuilder();
      Object localObject2 = localLinkedHashMap.get("clientVersion");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      localObject2 = localLinkedHashMap.get("build");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      localObject2 = localLinkedHashMap.get("uuid");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      ((StringBuilder)localObject1).append(localJSONObject.get("sdkVersion"));
      ((StringBuilder)localObject1).append(localJSONObject.get("appKey"));
      localObject1 = ((StringBuilder)localObject1).toString();
      label300:
      localJSONObject.put("sign", parse((String)localObject1));
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    if (paramBoolean) {}
    try
    {
      localJSONObject.put("feedbackId", append(paramString2));
      localJSONObject.put("module", "reply");
      localJSONObject.put("image", paramString1);
    }
    catch (JSONException paramString1)
    {
      paramString1.printStackTrace();
    }
    localLinkedHashMap.put("body", localJSONObject.toString());
    return create(localLinkedHashMap, "openFeedbackImage");
  }
  
  public static LinkedHashMap get(String paramString)
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    localLinkedHashMap.put("appid", append(FeedbackSDK.getAppId()));
    localLinkedHashMap.put("functionId", paramString);
    localLinkedHashMap.put("t", append(FeedbackSDK.getTime()));
    localLinkedHashMap.put("client", append(FeedbackSDK.getClient()));
    localLinkedHashMap.put("clientVersion", append(FeedbackSDK.getClientVersion()));
    localLinkedHashMap.put("build", append(FeedbackSDK.getBuild()));
    localLinkedHashMap.put("uuid", append(FeedbackSDK.getUuid()));
    localLinkedHashMap.put("osVersion", append(FeedbackSDK.getOsVersion()));
    localLinkedHashMap.put("networkType", append(FeedbackSDK.getNetworkType()));
    localLinkedHashMap.put("partner", append(FeedbackSDK.getPartner()));
    localLinkedHashMap.put("screen", append(FeedbackSDK.getScreen()));
    localLinkedHashMap.put("d_brand", append(FeedbackSDK.getBrand()));
    localLinkedHashMap.put("d_model", append(FeedbackSDK.getModel()));
    return localLinkedHashMap;
  }
  
  private static Observable parse(String paramString1, boolean paramBoolean, String paramString2)
  {
    Object localObject1 = new StringBuilder(">>>>>>>>>>>> Request openFeedbackList, isReply: ");
    ((StringBuilder)localObject1).append(paramBoolean);
    ((StringBuilder)localObject1).append(" >>>>>>>>>>>>");
    Log.i("FeedbackRequestHelper", ((StringBuilder)localObject1).toString());
    LinkedHashMap localLinkedHashMap = get("openFeedbackList");
    localObject1 = new ArrayList();
    ((List)localObject1).add("sdkVersion");
    ((List)localObject1).add("appKey");
    ((List)localObject1).add("isJailbroken");
    ((List)localObject1).add("resolution");
    ((List)localObject1).add("userId");
    JSONObject localJSONObject = parse((List)localObject1, localLinkedHashMap);
    if (paramBoolean) {}
    try
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramString2);
      ((StringBuilder)localObject1).append(localJSONObject.get("userId"));
      ((StringBuilder)localObject1).append(localJSONObject.get("sdkVersion"));
      ((StringBuilder)localObject1).append(localJSONObject.get("appKey"));
      localObject1 = ((StringBuilder)localObject1).toString();
      break label269;
      localObject1 = new StringBuilder();
      Object localObject2 = localLinkedHashMap.get("clientVersion");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      localObject2 = localLinkedHashMap.get("build");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      localObject2 = localLinkedHashMap.get("uuid");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      ((StringBuilder)localObject1).append(localJSONObject.get("sdkVersion"));
      ((StringBuilder)localObject1).append(localJSONObject.get("appKey"));
      localObject1 = ((StringBuilder)localObject1).toString();
      label269:
      localJSONObject.put("sign", parse((String)localObject1));
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    try
    {
      localJSONObject.put("pageNumber", append(paramString1));
      if (paramBoolean)
      {
        localJSONObject.put("module", "reply");
        localJSONObject.put("feedbackId", append(paramString2));
      }
    }
    catch (JSONException paramString1)
    {
      paramString1.printStackTrace();
    }
    localLinkedHashMap.put("body", localJSONObject.toString());
    write(localLinkedHashMap);
    return ((IFeedbackApiService)StatementExecutor.create(IFeedbackApiService.class)).create("openFeedbackList", localLinkedHashMap).doOnNext(new OrFilter("openFeedbackList"));
  }
  
  private static Observable parse(boolean paramBoolean, String paramString1, String paramString2, List paramList, String paramString3, String paramString4)
  {
    Object localObject1 = new StringBuilder(">>>>>>>>>>>> Request openFeedback, isReply: ");
    ((StringBuilder)localObject1).append(paramBoolean);
    ((StringBuilder)localObject1).append(" >>>>>>>>>>>>");
    Log.i("FeedbackRequestHelper", ((StringBuilder)localObject1).toString());
    LinkedHashMap localLinkedHashMap = get("openFeedback");
    localObject1 = new ArrayList();
    ((List)localObject1).add("sdkVersion");
    ((List)localObject1).add("appKey");
    ((List)localObject1).add("userId");
    if (!paramBoolean)
    {
      ((List)localObject1).add("packageName");
      ((List)localObject1).add("isJailbroken");
      ((List)localObject1).add("resolution");
      ((List)localObject1).add("networkName");
      ((List)localObject1).add("userName");
    }
    JSONObject localJSONObject = parse((List)localObject1, localLinkedHashMap);
    if (paramBoolean) {}
    Object localObject2;
    try
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramString4);
      ((StringBuilder)localObject1).append(localJSONObject.get("userId"));
      ((StringBuilder)localObject1).append(localJSONObject.get("sdkVersion"));
      ((StringBuilder)localObject1).append(localJSONObject.get("appKey"));
      localObject1 = ((StringBuilder)localObject1).toString();
      break label332;
      localObject1 = new StringBuilder();
      localObject2 = localLinkedHashMap.get("clientVersion");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      localObject2 = localLinkedHashMap.get("build");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      localObject2 = localLinkedHashMap.get("uuid");
      localObject2 = (String)localObject2;
      ((StringBuilder)localObject1).append((String)localObject2);
      ((StringBuilder)localObject1).append(localJSONObject.get("sdkVersion"));
      ((StringBuilder)localObject1).append(localJSONObject.get("appKey"));
      localObject1 = ((StringBuilder)localObject1).toString();
      label332:
      localJSONObject.put("sign", parse((String)localObject1));
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      paramList = paramList.iterator();
      for (;;)
      {
        bool = paramList.hasNext();
        if (!bool) {
          break;
        }
        localObject2 = paramList.next();
        localObject2 = (String)localObject2;
        localStringBuilder.append((String)localObject2);
        localStringBuilder.append(',');
      }
      boolean bool = localStringBuilder.toString().endsWith(",");
      if (bool)
      {
        int i = localStringBuilder.length();
        localStringBuilder.deleteCharAt(i - 1);
      }
      localJSONObject.put("images", localStringBuilder.toString());
      localJSONObject.put("content", paramString2);
      if (paramBoolean)
      {
        localJSONObject.put("module", "reply");
        localJSONObject.put("feedbackId", append(paramString4));
      }
      else
      {
        localJSONObject.put("type", append(paramString1));
        localJSONObject.put("phone", append(paramString3));
        localJSONObject.put("source", append(FeedbackSDK.getSource()));
        paramBoolean = TextUtils.isEmpty(FeedbackSDK.getExt());
        if (!paramBoolean) {
          localJSONObject.put("ext", FeedbackSDK.getExt());
        }
      }
    }
    catch (JSONException paramString1)
    {
      paramString1.printStackTrace();
    }
    localLinkedHashMap.put("body", localJSONObject.toString());
    return create(localLinkedHashMap, "openFeedback");
  }
  
  private static String parse(String paramString)
  {
    return new String(Base64.encode(ByteBufferList.encrypt(paramString.getBytes(), FeedbackSDK.getSecretKey().getBytes(), FeedbackSDK.getAesIV()), 2));
  }
  
  public static JSONObject parse(List paramList, Map paramMap)
  {
    JSONObject localJSONObject;
    if (paramMap != null)
    {
      localJSONObject = new JSONObject();
      if (paramList.size() > 0)
      {
        paramList = paramList.iterator();
        while (paramList.hasNext())
        {
          Object localObject1 = (String)paramList.next();
          int i = -1;
          try
          {
            int j = ((String)localObject1).hashCode();
            boolean bool;
            switch (j)
            {
            default: 
              break;
            case 1878245817: 
              bool = ((String)localObject1).equals("isJailbroken");
              if (bool) {
                i = 4;
              }
              break;
            case 908759025: 
              bool = ((String)localObject1).equals("packageName");
              if (bool) {
                i = 2;
              }
              break;
            case 3530173: 
              bool = ((String)localObject1).equals("sign");
              if (bool) {
                i = 3;
              }
              break;
            case -266666762: 
              bool = ((String)localObject1).equals("userName");
              if (bool) {
                i = 8;
              }
              break;
            case -836030906: 
              bool = ((String)localObject1).equals("userId");
              if (bool) {
                i = 7;
              }
              break;
            case -1411093378: 
              bool = ((String)localObject1).equals("appKey");
              if (bool) {
                i = 1;
              }
              break;
            case -1600030548: 
              bool = ((String)localObject1).equals("resolution");
              if (bool) {
                i = 5;
              }
              break;
            case -1940815399: 
              bool = ((String)localObject1).equals("networkName");
              if (bool) {
                i = 6;
              }
              break;
            case -1962630338: 
              bool = ((String)localObject1).equals("sdkVersion");
              if (bool) {
                i = 0;
              }
              break;
            }
            Object localObject2;
            switch (i)
            {
            default: 
              break;
            case 8: 
              localJSONObject.put("userName", append(FeedbackSDK.getUserName()));
              break;
            case 7: 
              localJSONObject.put("userId", append(FeedbackSDK.getUserId()));
              break;
            case 6: 
              localObject1 = paramMap.get("networkType");
              localObject1 = (String)localObject1;
              bool = append((String)localObject1).equals("WIFI");
              if (!bool) {
                localJSONObject.put("networkName", FeedbackSDK.getNetworkName());
              }
              break;
            case 5: 
              localJSONObject.put("resolution", append(FeedbackSDK.getResolution()));
              break;
            case 4: 
              localJSONObject.put("isJailbroken", FeedbackSDK.getIsJailbroken());
              break;
            case 3: 
              localObject1 = paramMap.get("clientVersion");
              localObject1 = (String)localObject1;
              localObject1 = append((String)localObject1);
              localObject2 = paramMap.get("build");
              localObject2 = (String)localObject2;
              localObject2 = append((String)localObject2);
              Object localObject3 = paramMap.get("uuid");
              localObject3 = (String)localObject3;
              localObject3 = append((String)localObject3);
              String str1 = append(FeedbackSDK.getSdkVersion());
              String str2 = append(FeedbackSDK.getAppKey());
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append((String)localObject1);
              localStringBuilder.append((String)localObject2);
              localStringBuilder.append((String)localObject3);
              localStringBuilder.append(str1);
              localStringBuilder.append(str2);
              localJSONObject.put("sign", parse(localStringBuilder.toString()));
              break;
            case 2: 
              localJSONObject.put("packageName", append(FeedbackSDK.getPackageName()));
              break;
            case 1: 
              localJSONObject.put("appKey", append(FeedbackSDK.getAppKey()));
              break;
            case 0: 
              localJSONObject.put("sdkVersion", append(FeedbackSDK.getSdkVersion()));
              continue;
              localObject2 = new StringBuilder("Not support body param '");
              ((StringBuilder)localObject2).append((String)localObject1);
              ((StringBuilder)localObject2).append("'");
              localObject1 = new InvalidParameterException(((StringBuilder)localObject2).toString());
              throw ((Throwable)localObject1);
            }
          }
          catch (JSONException localJSONException)
          {
            localJSONException.printStackTrace();
          }
        }
      }
      return localJSONObject;
    }
    throw new NullPointerException("Parameter 'commonParamMap' can not null !!!");
    return localJSONObject;
  }
  
  public static void parse(String... paramVarArgs)
  {
    int m = paramVarArgs.length;
    int j = 0;
    while (j < m)
    {
      String str = paramVarArgs[j];
      int i = -1;
      int n = str.hashCode();
      int k = 1;
      switch (n)
      {
      default: 
        break;
      case 908759025: 
        if (str.equals("packageName")) {
          i = 5;
        }
        break;
      case 771880589: 
        if (str.equals("clientVersion")) {
          i = 0;
        }
        break;
      case 94094958: 
        if (str.equals("build")) {
          i = 1;
        }
        break;
      case -739567217: 
        if (str.equals("secretKey")) {
          i = 4;
        }
        break;
      case -792929080: 
        if (str.equals("partner")) {
          i = 2;
        }
        break;
      case -836030906: 
        if (str.equals("userId")) {
          i = 6;
        }
        break;
      case -1411093378: 
        if (str.equals("appKey")) {
          i = 3;
        }
        break;
      }
      switch (i)
      {
      default: 
        i = k;
        break;
      case 6: 
        if (FeedbackSDK.getUserId() != null)
        {
          i = k;
          if (FeedbackSDK.getUserId().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      case 5: 
        if (FeedbackSDK.getPackageName() != null)
        {
          i = k;
          if (FeedbackSDK.getPackageName().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      case 4: 
        if (FeedbackSDK.getSecretKey() != null)
        {
          i = k;
          if (FeedbackSDK.getSecretKey().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      case 3: 
        if (FeedbackSDK.getAppKey() != null)
        {
          i = k;
          if (FeedbackSDK.getAppKey().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      case 2: 
        if (FeedbackSDK.getPartner() != null)
        {
          i = k;
          if (FeedbackSDK.getPartner().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      case 1: 
        if (FeedbackSDK.getBuild() != null)
        {
          i = k;
          if (FeedbackSDK.getBuild().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      case 0: 
        if (FeedbackSDK.getClientVersion() != null)
        {
          i = k;
          if (FeedbackSDK.getClientVersion().trim().length() != 0) {
            break;
          }
        }
        else
        {
          i = 0;
        }
        break;
      }
      if (i != 0)
      {
        j += 1;
      }
      else
      {
        paramVarArgs = new StringBuilder("Param '");
        paramVarArgs.append(str);
        paramVarArgs.append("' is necessary.");
        throw new IllegalStateException(paramVarArgs.toString());
      }
    }
  }
  
  private static void write(LinkedHashMap paramLinkedHashMap)
  {
    paramLinkedHashMap.put("sign", Attribute.write(paramLinkedHashMap, FeedbackSDK.getHostSecretKey()));
    Log.i("FeedbackRequestHelper", "params: -----------------------");
    paramLinkedHashMap = paramLinkedHashMap.entrySet().iterator();
    while (paramLinkedHashMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramLinkedHashMap.next();
      StringBuilder localStringBuilder = new StringBuilder("   ");
      localStringBuilder.append(localEntry.getKey());
      localStringBuilder.append(": ");
      localStringBuilder.append(localEntry.getValue());
      Log.i("FeedbackRequestHelper", localStringBuilder.toString());
    }
    Log.i("FeedbackRequestHelper", "-------------------- params end");
  }
}
