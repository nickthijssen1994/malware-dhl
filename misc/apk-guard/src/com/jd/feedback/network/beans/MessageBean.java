package com.jd.feedback.network.beans;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class MessageBean
  implements Comparable
{
  String content;
  String createTime;
  String images;
  String mId;
  String replier;
  String replyState;
  String type;
  String unreadReplyCount;
  String userid;
  
  public MessageBean() {}
  
  public MessageBean clone()
  {
    MessageBean localMessageBean = new MessageBean();
    localMessageBean.setId(mId);
    localMessageBean.setUserid(userid);
    localMessageBean.setContent(content);
    localMessageBean.setImages(images);
    localMessageBean.setCreateTime(createTime);
    localMessageBean.setType(type);
    localMessageBean.setUnreadReplyCount(unreadReplyCount);
    localMessageBean.setReplyState(replyState);
    localMessageBean.setReplier(replier);
    return localMessageBean;
  }
  
  public int compareTo(Object paramObject)
  {
    if (paramObject == this) {
      return 0;
    }
    if (!(paramObject instanceof MessageBean)) {
      return 1;
    }
    Object localObject = (MessageBean)paramObject;
    try
    {
      SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      paramObject = localSimpleDateFormat.parse(getCreateTime());
      localObject = localSimpleDateFormat.parse(((MessageBean)localObject).getCreateTime());
      long l1 = paramObject.getTime();
      long l2 = ((Date)localObject).getTime();
      if (l1 >= l2)
      {
        l1 = paramObject.getTime();
        l2 = ((Date)localObject).getTime();
        if (l1 == l2) {
          return 0;
        }
        return 1;
      }
      return -1;
    }
    catch (ParseException paramObject) {}
    return 1;
  }
  
  public String getContent()
  {
    String str = content;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getCreateTime()
  {
    String str = createTime;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getId()
  {
    return mId;
  }
  
  public List getImageUrls()
  {
    String str = images;
    if ((str != null) && (str.trim().length() != 0)) {
      return Arrays.asList(images.split(","));
    }
    return new ArrayList();
  }
  
  public String getImages()
  {
    String str = images;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getReplier()
  {
    String str = replier;
    if (str == null) {
      return "1";
    }
    return str;
  }
  
  public String getReplyState()
  {
    String str = replyState;
    if (str == null) {
      return "1";
    }
    return str;
  }
  
  public String getType()
  {
    String str = type;
    if (str == null) {
      return "";
    }
    return str;
  }
  
  public String getUnreadReplyCount()
  {
    if (replyState == null) {
      return "0";
    }
    return unreadReplyCount;
  }
  
  public String getUserid()
  {
    return userid;
  }
  
  public boolean hasReplied()
  {
    return !getReplyState().equals("1");
  }
  
  public boolean isFromUser()
  {
    return getReplier().equals("1");
  }
  
  public void setContent(String paramString)
  {
    content = paramString;
  }
  
  public void setCreateTime(String paramString)
  {
    createTime = paramString;
  }
  
  public void setId(String paramString)
  {
    mId = paramString;
  }
  
  public void setImages(String paramString)
  {
    images = paramString;
  }
  
  public void setReplier(String paramString)
  {
    replier = paramString;
  }
  
  public void setReplyState(String paramString)
  {
    replyState = paramString;
  }
  
  public void setType(String paramString)
  {
    type = paramString;
  }
  
  public void setUnreadReplyCount(String paramString)
  {
    unreadReplyCount = paramString;
  }
  
  public void setUserid(String paramString)
  {
    userid = paramString;
  }
}
