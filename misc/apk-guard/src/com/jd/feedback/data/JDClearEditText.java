package com.jd.feedback.data;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnFocusChangeListener;
import androidx.appcompat.widget.AppCompatEditText;
import com.jd.feedback.R.drawable;

public class JDClearEditText
  extends AppCompatEditText
  implements TextWatcher, View.OnFocusChangeListener
{
  private a clickListener;
  private Drawable icon = getCompoundDrawables()[2];
  private boolean mSave;
  
  public JDClearEditText(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public JDClearEditText(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 16842862);
  }
  
  public JDClearEditText(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    if (icon == null) {
      icon = getResources().getDrawable(R.drawable.delete);
    }
    paramContext = icon;
    paramInt = paramContext.getIntrinsicWidth();
    int i = icon.getIntrinsicHeight();
    boolean bool = false;
    paramContext.setBounds(0, 0, paramInt, i);
    if (!TextUtils.isEmpty(getText()))
    {
      if (getText().length() > 0) {
        bool = true;
      }
      setClearIconVisible(bool);
    }
    else
    {
      setClearIconVisible(false);
    }
    setOnFocusChangeListener(this);
    addTextChangedListener(this);
  }
  
  public void afterTextChanged(Editable paramEditable) {}
  
  public void beforeTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3) {}
  
  public void onFocusChange(View paramView, boolean paramBoolean)
  {
    mSave = paramBoolean;
    boolean bool = false;
    if (paramBoolean)
    {
      paramBoolean = bool;
      if (getText().length() > 0) {
        paramBoolean = true;
      }
      setClearIconVisible(paramBoolean);
      return;
    }
    setClearIconVisible(false);
  }
  
  public void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    if (mSave)
    {
      boolean bool;
      if (paramCharSequence.length() > 0) {
        bool = true;
      } else {
        bool = false;
      }
      setClearIconVisible(bool);
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int j = paramMotionEvent.getAction();
    int i = 1;
    if ((j == 1) && (getCompoundDrawables()[2] != null))
    {
      if ((paramMotionEvent.getX() <= getWidth() - getTotalPaddingRight()) || (paramMotionEvent.getX() >= getWidth() - getPaddingRight())) {
        i = 0;
      }
      if (i != 0) {
        setText("");
      }
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void setClearIconVisible(boolean paramBoolean)
  {
    Drawable localDrawable;
    if (paramBoolean) {
      localDrawable = icon;
    } else {
      localDrawable = null;
    }
    setCompoundDrawables(getCompoundDrawables()[0], getCompoundDrawables()[1], localDrawable, getCompoundDrawables()[3]);
  }
  
  public void setListener(a paramA)
  {
    clickListener = paramA;
  }
  
  public abstract interface a {}
}
