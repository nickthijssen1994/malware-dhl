package com.jd.feedback;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.text.TextUtils;
import com.jd.feedback.network.MimeType;
import io.reactivex.Observable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import org.json.JSONException;
import org.json.JSONObject;

public final class Log
{
  private static boolean _debug;
  private static Context context;
  private static String d;
  private static String data;
  private static String e;
  private static boolean enabled;
  private static String h;
  private static boolean i;
  private static String id;
  private static String log;
  private static String name;
  private static java.util.List<String> status;
  private static String text;
  private static String title;
  private static String value;
  private static String version;
  
  public static String a()
  {
    if (com.jd.feedback.stream.List.add(d)) {
      return d;
    }
    return getColor();
  }
  
  private static void append()
  {
    if (context != null) {
      return;
    }
    throw new IllegalStateException("FeedBackConfig is uninitialized");
  }
  
  public static java.util.List build()
  {
    java.util.List localList2 = status;
    java.util.List localList1 = localList2;
    if (localList2 == null) {
      localList1 = load();
    }
    return localList1;
  }
  
  public static String d()
  {
    String str2 = h;
    String str1 = str2;
    if (str2 == null) {
      str1 = getMessage();
    }
    return str1;
  }
  
  public static String e()
  {
    if (TextUtils.isEmpty(e)) {
      return error();
    }
    return e;
  }
  
  private static String error()
  {
    append();
    return context.getResources().getString(R.string.default_button_text);
  }
  
  private static String format()
  {
    append();
    return context.getResources().getString(R.string.default_phone_title);
  }
  
  public static String get()
  {
    StringBuilder localStringBuilder = new StringBuilder("navigation_fontColor: ");
    localStringBuilder.append(text);
    android.util.Log.i("FeedBackConfig", localStringBuilder.toString());
    if (com.jd.feedback.stream.List.add(text)) {
      return text;
    }
    return getText();
  }
  
  private static boolean getBoolean()
  {
    append();
    return context.getResources().getBoolean(R.bool.default_feedback_reply_enable);
  }
  
  private static String getColor()
  {
    append();
    return context.getResources().getString(R.string.default_button_fontColor);
  }
  
  public static String getDisplayName()
  {
    String str2 = name;
    String str1 = str2;
    if (str2 == null) {
      str1 = getString();
    }
    return str1;
  }
  
  public static String getId()
  {
    if (com.jd.feedback.stream.List.add(id)) {
      return id;
    }
    return getIdentifier();
  }
  
  private static String getIdentifier()
  {
    append();
    return context.getResources().getString(R.string.default_button_backgroundColor_enabled);
  }
  
  public static String getItem()
  {
    if (TextUtils.isEmpty(data)) {
      return format();
    }
    return data;
  }
  
  private static String getLog()
  {
    append();
    return context.getResources().getString(R.string.default_backgroundColor);
  }
  
  public static String getLogger()
  {
    if (com.jd.feedback.stream.List.add(log)) {
      return log;
    }
    return getLog();
  }
  
  private static String getMessage()
  {
    append();
    return context.getResources().getString(R.string.default_phone_tip);
  }
  
  public static String getName()
  {
    StringBuilder localStringBuilder = new StringBuilder("navigation_title: ");
    localStringBuilder.append(title);
    android.util.Log.i("FeedBackConfig", localStringBuilder.toString());
    if (TextUtils.isEmpty(title)) {
      return getTitle();
    }
    return title;
  }
  
  private static String getString()
  {
    append();
    return context.getResources().getString(R.string.default_feedback_tip);
  }
  
  private static String getText()
  {
    append();
    return context.getResources().getString(R.string.default_navigation_fontColor);
  }
  
  private static String getTitle()
  {
    append();
    return context.getResources().getString(R.string.default_navigation_title);
  }
  
  private static String getValue()
  {
    append();
    return context.getResources().getString(R.string.default_navigation_backgroundColor);
  }
  
  public static String getVersion()
  {
    String str2 = version;
    String str1 = str2;
    if (str2 == null) {
      str1 = getVersionName();
    }
    return str1;
  }
  
  private static String getVersionName()
  {
    append();
    return context.getResources().getString(R.string.default_feedback_type_title);
  }
  
  public static boolean i()
  {
    return i;
  }
  
  public static void init(Context paramContext)
  {
    if (paramContext != null)
    {
      context = paramContext;
      title = getTitle();
      text = getText();
      value = getValue();
      enabled = getBoolean();
      version = getVersionName();
      status = load();
      name = getString();
      append();
      _debug = context.getResources().getBoolean(R.bool.default_phone_enable);
      data = format();
      h = getMessage();
      append();
      i = context.getResources().getBoolean(R.bool.default_phone_required);
      e = error();
      d = getColor();
      id = getIdentifier();
      log = getLog();
      append();
      paramContext = context.getSharedPreferences("feedback_sdk", 0);
      if (paramContext != null)
      {
        paramContext = paramContext.getString("ui_config", "");
        if (!TextUtils.isEmpty(paramContext)) {
          init(paramContext);
        }
      }
    }
    else
    {
      throw new IllegalArgumentException("Failed to initial FeedBackConfig as context is null");
    }
  }
  
  private static void init(String paramString)
  {
    append();
    android.util.Log.d("FeedBackConfig", "Feedback config: ".concat(String.valueOf(paramString)));
    try
    {
      JSONObject localJSONObject1 = new JSONObject(paramString);
      JSONObject localJSONObject2 = localJSONObject1.optJSONObject("navigation");
      if (localJSONObject2 != null)
      {
        title = localJSONObject2.optString("title", getTitle());
        str = localJSONObject2.optString("fontColor");
        paramString = str;
        if (!com.jd.feedback.stream.List.add(str)) {
          paramString = getText();
        }
        text = paramString;
        str = localJSONObject2.optString("backgroundColor");
        paramString = str;
        if (!com.jd.feedback.stream.List.add(str)) {
          paramString = getValue();
        }
        value = paramString;
      }
      paramString = localJSONObject1.optJSONObject("switch");
      boolean bool2 = false;
      boolean bool1;
      if (paramString != null)
      {
        if (paramString.optInt("showReply", 2) == 1) {
          bool1 = true;
        } else {
          bool1 = false;
        }
        enabled = bool1;
      }
      else
      {
        enabled = getBoolean();
      }
      paramString = localJSONObject1.optJSONObject("feedback");
      if (paramString != null)
      {
        version = paramString.optString("title");
        str = paramString.optString("types");
        if (!TextUtils.isEmpty(str)) {
          status = Arrays.asList(str.split(","));
        }
        name = paramString.optString("tip");
      }
      paramString = localJSONObject1.optJSONObject("phone");
      if (paramString != null)
      {
        _debug = true;
        h = paramString.optString("tip");
        bool1 = bool2;
        if (paramString.optInt("phoneRequired", 2) == 1) {
          bool1 = true;
        }
        i = bool1;
        data = paramString.optString("barTitle", format());
      }
      else
      {
        _debug = false;
      }
      localJSONObject2 = localJSONObject1.optJSONObject("button");
      if (localJSONObject2 != null)
      {
        e = localJSONObject2.optString("text", error());
        str = localJSONObject2.optString("fontColor");
        paramString = str;
        if (!com.jd.feedback.stream.List.add(str)) {
          paramString = getColor();
        }
        d = paramString;
        str = localJSONObject2.optString("backgroundColor");
        paramString = str;
        if (!com.jd.feedback.stream.List.add(str)) {
          paramString = getIdentifier();
        }
        id = paramString;
      }
      String str = localJSONObject1.optString("backgroundColor");
      paramString = str;
      if (!com.jd.feedback.stream.List.add(str)) {
        paramString = getLog();
      }
      log = paramString;
      return;
    }
    catch (JSONException localJSONException)
    {
      android.util.Log.i("FeedBackConfig", "sync2Memory error when new JSONObject from ".concat(String.valueOf(paramString)));
      localJSONException.printStackTrace();
    }
  }
  
  public static boolean isDebugEnabled()
  {
    return _debug;
  }
  
  public static boolean isEnabled()
  {
    return enabled;
  }
  
  private static java.util.List load()
  {
    append();
    return Arrays.asList(context.getResources().getStringArray(R.array.default_feedback_types));
  }
  
  public static Observable parse()
  {
    append();
    android.util.Log.i("FeedbackRequestHelper", ">>>>>>>>>>>> Request openFeedbackConfig >>>>>>>>>>>>");
    MimeType.parse(new String[] { "clientVersion", "build", "partner", "appKey", "secretKey" });
    LinkedHashMap localLinkedHashMap = MimeType.get("openFeedbackConfig");
    ArrayList localArrayList = new ArrayList();
    localArrayList.add("sdkVersion");
    localArrayList.add("appKey");
    localArrayList.add("packageName");
    localArrayList.add("sign");
    localArrayList.add("isJailbroken");
    localArrayList.add("resolution");
    localArrayList.add("networkName");
    localArrayList.add("userId");
    localArrayList.add("userName");
    localLinkedHashMap.put("body", MimeType.parse(localArrayList, localLinkedHashMap).toString());
    return MimeType.create(localLinkedHashMap, "openFeedbackConfig").map(new Event()).doOnNext(new DOMParser());
  }
  
  public static String remove()
  {
    StringBuilder localStringBuilder = new StringBuilder("navigation_backgroundColor: ");
    localStringBuilder.append(value);
    android.util.Log.i("FeedBackConfig", localStringBuilder.toString());
    if (com.jd.feedback.stream.List.add(value)) {
      return value;
    }
    return getValue();
  }
}
