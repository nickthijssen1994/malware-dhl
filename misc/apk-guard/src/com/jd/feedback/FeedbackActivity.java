package com.jd.feedback;

import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Color;
import android.net.Uri;
import android.os.BaseBundle;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.lifecycle.LifecycleOwner;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.Adapter;
import com.google.gson.Gson;
import com.jakewharton.rxbinding2.b.f;
import com.jd.feedback.album.xy.asm.ClassWriter;
import com.jd.feedback.album.xy.asm.Label;
import com.jd.feedback.album.xy.e;
import com.jd.feedback.data.Item;
import com.jd.feedback.data.MaterialDialog.Builder;
import com.jd.feedback.data.Point;
import com.jd.feedback.data.t;
import com.jd.feedback.data.xy.g;
import com.jd.feedback.network.result.FeedbackRequestResult;
import com.jd.feedback.network.result.StatisticsRequestResult;
import com.jd.feedback.network.result.StatisticsRequestResult.Data;
import io.reactivex.Notification;
import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.BiPredicate;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.functions.Function3;
import io.reactivex.functions.Predicate;
import io.reactivex.subjects.ReplaySubject;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class FeedbackActivity
  extends AppCompatActivity
{
  private List<com.jd.feedback.ui.a> a = new ArrayList();
  private String action = null;
  private RecyclerView c;
  private Observable<Object> context;
  Observable<Integer> data;
  private TextView date;
  private Dialog dialog;
  private ArrayList<com.jd.feedback.album.d> e = new ArrayList();
  private List<com.jd.feedback.ui.a> elements;
  private com.jd.feedback.ui.a.a<com.jd.feedback.ui.a> h;
  private View.OnTouchListener key = new View.OnTouchListener()
  {
    public final boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
    {
      if (paramAnonymousView.getId() == R.id.feedback_scrollview)
      {
        if (paramAnonymousView.getId() != R.id.feedback_edit_content)
        {
          FeedbackActivity.hideKeyboard(FeedbackActivity.this, paramAnonymousView);
          return false;
        }
      }
      else if (paramAnonymousView.getId() == R.id.feedback_edit_content)
      {
        if (paramAnonymousMotionEvent.getAction() == 1)
        {
          FeedbackActivity.access$getMListView(FeedbackActivity.this).requestDisallowInterceptTouchEvent(false);
          return false;
        }
        FeedbackActivity.access$getMListView(FeedbackActivity.this).requestDisallowInterceptTouchEvent(true);
      }
      return false;
    }
  };
  private Button label;
  private ConstraintLayout list;
  private Dialog mAbout;
  private final String mAction = "PHONE";
  private List<String> mContext = new ArrayList();
  private Dialog mDialog;
  private TextView mError;
  private ImageView mImage;
  private ScrollView mListView;
  private final String mName = "COO_IMAGES";
  private Dialog mProgressDialog;
  private RecyclerView mRecyclerView;
  private View mRefreshButton;
  private AppCompatImageView mToggleButton;
  private final String mUrl = "SELECTED_TYPE_INDEX";
  private TextView mView;
  ReplaySubject<Integer> n;
  private EditText name;
  Observable<Integer> parent;
  private final int pattern = 101;
  private int position;
  private final int priority = 102;
  private boolean result = false;
  private String text;
  private t this$0;
  private EditText title;
  private TextView top;
  private TextView type;
  private boolean value = false;
  private View view;
  
  public FeedbackActivity() {}
  
  private void a()
  {
    e localE = (e)com.jd.feedback.album.h.a((android.content.Context)this).a();
    f = true;
    localE = (e)localE;
    b = 4;
    localE = (e)localE;
    b = 3;
    e = e;
    ClassWriter localClassWriter = Label.b((android.content.Context)this);
    a = "????";
    c = localClassWriter.a();
    localE = (e)localE;
    m = new com.jd.feedback.album.Paint() {};
    localE = (e)localE;
    n = new com.jd.feedback.album.Paint() {};
    ((e)localE).a();
  }
  
  private List create(List paramList)
  {
    ArrayList localArrayList = new ArrayList();
    if ((paramList != null) && (paramList.size() > 0))
    {
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        Uri localUri = (Uri)paramList.next();
        String str = com.jd.feedback.stream.Context.getPath((android.content.Context)this, localUri);
        if (str != null) {
          localArrayList.add(new Item(localUri, str));
        }
      }
    }
    return localArrayList;
  }
  
  private void init(boolean paramBoolean)
  {
    label.setEnabled(paramBoolean);
    label.setClickable(paramBoolean);
    if (paramBoolean)
    {
      label.setBackgroundColor(Color.parseColor(Log.getId()));
      return;
    }
    label.setBackgroundColor(getResources().getColor(R.color.frame_gray));
  }
  
  private void onCreate()
  {
    mRefreshButton.setBackgroundColor(Color.parseColor(Log.remove()));
    top.setTextColor(Color.parseColor(Log.get()));
    if (result) {
      top.setText(getResources().getString(R.string.feedback_title_reply));
    } else {
      top.setText(Log.getName());
    }
    if ((!result) && (Log.isEnabled()))
    {
      mImage.setVisibility(0);
    }
    else
    {
      mImage.setVisibility(8);
      mError.setVisibility(8);
    }
    mView.setText(Log.getVersion());
    mContext.clear();
    mContext.addAll(Log.build());
    this$0.a(mContext);
    if (value) {
      this$0.a(position);
    }
    this$0.notifyDataSetChanged();
    name.setHint(Log.getDisplayName());
    Object localObject2;
    if ((Log.isDebugEnabled()) && (!result))
    {
      localObject1 = view;
      localObject2 = this;
      ((View)localObject1).setVisibility(0);
      type.setVisibility(0);
      TextView localTextView = type;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(Log.getItem());
      if (Log.i()) {
        localObject1 = "(??)";
      } else {
        localObject1 = "";
      }
      localStringBuilder.append((String)localObject1);
      localTextView.setText(localStringBuilder.toString());
      title.setVisibility(0);
      title.setHint(Log.d());
    }
    else
    {
      localObject2 = view;
      localObject1 = this;
      ((View)localObject2).setVisibility(8);
      type.setVisibility(8);
      title.setVisibility(8);
    }
    Object localObject1 = this;
    label.setText(Log.e());
    label.setTextColor(Color.parseColor(Log.a()));
    list.setBackgroundColor(Color.parseColor(Log.getLogger()));
    if (result)
    {
      if ((h.getCount() <= 0) && (name.getText().toString().trim().length() <= 0))
      {
        ((FeedbackActivity)localObject1).init(false);
        return;
      }
      ((FeedbackActivity)localObject1).init(true);
      return;
    }
    if (((h.getCount() <= 0) && (name.getText().toString().trim().length() <= 0)) || ((Log.i()) && (title.getText().toString().trim().length() <= 0)))
    {
      ((FeedbackActivity)localObject1).init(false);
      return;
    }
    ((FeedbackActivity)localObject1).init(true);
  }
  
  private void onSaveInstanceState()
  {
    if (TextUtils.isEmpty(FeedbackSDK.getUserId())) {
      return;
    }
    if ((!result) && (mImage.getVisibility() == 0))
    {
      FeedbackSDK.FeedbackRequestListener local18 = new FeedbackSDK.FeedbackRequestListener()
      {
        public final void onFailure(Throwable paramAnonymousThrowable)
        {
          FeedbackActivity.access$getMError(FeedbackActivity.this).setVisibility(8);
        }
        
        public final void onSuccess(String paramAnonymousString)
        {
          paramAnonymousString = (StatisticsRequestResult)new Gson().fromJson(paramAnonymousString, StatisticsRequestResult.class);
          if (paramAnonymousString.getData().getUnreadReplyCount() > 0)
          {
            FeedbackActivity.access$getMError(FeedbackActivity.this).setVisibility(0);
            FeedbackActivity.access$getMError(FeedbackActivity.this).setText(String.valueOf(paramAnonymousString.getData().getUnreadReplyCount()));
            return;
          }
          FeedbackActivity.access$getMError(FeedbackActivity.this).setVisibility(8);
        }
      };
      FeedbackSDK.api_getFeedbackStatistics((LifecycleOwner)this, local18);
      return;
    }
    mError.setVisibility(8);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a9 = a8\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    Dialog localDialog = mAbout;
    if (localDialog != null) {
      localDialog.dismiss();
    }
    localDialog = dialog;
    if (localDialog != null) {
      localDialog.dismiss();
    }
    localDialog = mProgressDialog;
    if (localDialog != null) {
      localDialog.dismiss();
    }
  }
  
  public void onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt)
  {
    switch (paramInt)
    {
    default: 
      return;
    case 102: 
      if (paramArrayOfInt[0] != 0)
      {
        android.util.Log.d("FeedbackActivity", "???????????????.");
        a.clear();
        e.clear();
        h.a = a;
        MaterialDialog.Builder.show((Activity)this, "????-->???????????????????").show();
      }
      h.notifyDataSetChanged();
      return;
    }
    StringBuffer localStringBuffer = new StringBuffer();
    paramInt = 0;
    while (paramInt < paramArrayOfInt.length)
    {
      if (paramArrayOfInt[paramInt] != 0)
      {
        if (localStringBuffer.length() > 0) {
          localStringBuffer.append("?");
        }
        if (paramArrayOfString[paramInt].endsWith("STORAGE")) {
          localStringBuffer.append("????");
        } else if (paramArrayOfString[paramInt].endsWith("CAMERA")) {
          localStringBuffer.append("??");
        }
      }
      paramInt += 1;
    }
    if (localStringBuffer.length() > 0)
    {
      localStringBuffer.insert(0, "????-->???????????");
      localStringBuffer.append("????");
      paramArrayOfString = localStringBuffer.toString();
      MaterialDialog.Builder.show((Activity)this, paramArrayOfString).show();
      return;
    }
    a();
  }
  
  protected void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    Object localObject = title;
    if (localObject != null) {
      paramBundle.putString("PHONE", ((EditText)localObject).getText().toString());
    }
    localObject = h;
    if (localObject != null) {
      paramBundle.putParcelableArrayList("COO_IMAGES", new ArrayList(((com.jd.feedback.data.xy.h)localObject).a()));
    }
    localObject = this$0;
    if (localObject != null) {
      paramBundle.putInt("SELECTED_TYPE_INDEX", c);
    }
  }
  
  protected void onStart()
  {
    super.onStart();
    onSaveInstanceState();
  }
}
