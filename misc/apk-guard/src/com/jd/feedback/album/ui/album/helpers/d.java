package com.jd.feedback.album.ui.album.helpers;

import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.media.MediaPlayer;
import android.net.Uri;
import android.provider.MediaStore.Images.Media;
import android.text.TextUtils;
import android.util.Log;
import androidx.core.content.ContextCompat;
import com.jd.feedback.album.Label;
import com.jd.feedback.album.Marker;
import com.jd.feedback.album.g;
import com.jd.feedback.album.view.f;
import java.io.File;

public final class d
{
  private g<String> a;
  private g<Long> b;
  private g<Long> c;
  private Context mContext;
  
  public d(Context paramContext, Marker paramMarker1, Marker paramMarker2, Marker paramMarker3)
  {
    mContext = paramContext;
    c = paramMarker1;
    a = paramMarker2;
    b = paramMarker3;
  }
  
  public final Label doInBackground(String paramString)
  {
    Object localObject1 = new File(paramString);
    Label localLabel = new Label();
    Object localObject2 = mContext;
    int i = 0;
    int j = 0;
    long l;
    if (localObject2 == null)
    {
      Log.w("PathConversion", "context is null");
      l = -1L;
    }
    else if ((paramString != null) && (paramString.trim().length() != 0))
    {
      if (ContextCompat.checkSelfPermission((Context)localObject2, "android.permission.READ_EXTERNAL_STORAGE") != 0)
      {
        Log.w("PathConversion", "No READ_EXTERNAL_STORAGE premission");
        l = -1L;
      }
      else
      {
        localObject2 = ((Context)localObject2).getContentResolver();
        Object localObject3 = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        String str = paramString.trim();
        localObject2 = ((ContentResolver)localObject2).query((Uri)localObject3, new String[] { "_id" }, "_data = ?", new String[] { str }, null);
        Log.d("PathConversion", "cursor: ".concat(String.valueOf(localObject2)));
        if ((localObject2 != null) && (((Cursor)localObject2).getCount() > 0))
        {
          localObject3 = new StringBuilder("cursor rows: ");
          ((StringBuilder)localObject3).append(((Cursor)localObject2).getCount());
          Log.d("PathConversion", ((StringBuilder)localObject3).toString());
          ((Cursor)localObject2).moveToFirst();
          l = ((Cursor)localObject2).getLong(0);
          ((Cursor)localObject2).close();
        }
        else
        {
          l = -1L;
        }
      }
    }
    else
    {
      Log.w("PathConversion", "path is empty");
      l = -1L;
    }
    if (l != -1L) {
      f = l;
    }
    c = paramString;
    d = ((File)localObject1).getParentFile().getName();
    localObject2 = f.getMimeType(paramString);
    id = ((String)localObject2);
    date = System.currentTimeMillis();
    size = ((File)localObject1).length();
    if (!TextUtils.isEmpty((CharSequence)localObject2))
    {
      i = j;
      if (((String)localObject2).contains("video")) {
        i = 2;
      }
      if (((String)localObject2).contains("image")) {
        i = 1;
      }
    }
    a = i;
    localObject2 = c;
    if (localObject2 != null)
    {
      ((File)localObject1).length();
      if (((Marker)localObject2).equals()) {
        e = true;
      }
    }
    localObject1 = a;
    if ((localObject1 != null) && (((Marker)localObject1).equals())) {
      e = true;
    }
    if (i == 2)
    {
      localObject1 = new MediaPlayer();
      try
      {
        try
        {
          ((MediaPlayer)localObject1).setDataSource(paramString);
          ((MediaPlayer)localObject1).prepare();
          i = ((MediaPlayer)localObject1).getDuration();
          x = i;
        }
        catch (Throwable paramString)
        {
          ((MediaPlayer)localObject1).release();
          throw paramString;
        }
      }
      catch (Exception paramString)
      {
        for (;;) {}
      }
      ((MediaPlayer)localObject1).release();
      paramString = b;
      if (paramString != null)
      {
        l = x;
        if (paramString.equals())
        {
          e = true;
          return localLabel;
        }
      }
    }
    return localLabel;
  }
}
