package com.jd.feedback.album.ui.album.helpers;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.media.MediaMetadataRetriever;
import android.os.Environment;
import android.text.TextUtils;
import android.webkit.URLUtil;
import com.jd.feedback.album.view.f;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashMap;

public final class DownloadFile
{
  private File file;
  
  public DownloadFile(Context paramContext)
  {
    boolean bool;
    if (Environment.getExternalStorageState().equals("mounted")) {
      bool = Environment.getExternalStorageDirectory().canWrite();
    } else {
      bool = false;
    }
    if (bool) {
      paramContext = new File(Environment.getExternalStorageDirectory(), "AlbumCache");
    } else {
      paramContext = new File(paramContext.getFilesDir(), "AlbumCache");
    }
    file = paramContext;
    if ((file.exists()) && (file.isFile())) {
      file.delete();
    }
    if (!file.exists()) {
      file.mkdirs();
    }
  }
  
  private static Bitmap decode(String paramString)
  {
    File localFile = new File(paramString);
    if (localFile.exists()) {}
    for (;;)
    {
      try
      {
        localObject1 = new BufferedInputStream(new FileInputStream(localFile));
        localOptions = new BitmapFactory.Options();
        inJustDecodeBounds = true;
        BitmapFactory.decodeStream((InputStream)localObject1, null, localOptions);
        ((BufferedInputStream)localObject1).close();
        int j = 0;
        inJustDecodeBounds = false;
        if ((outWidth <= 360) && (outHeight <= 360))
        {
          i = 1;
        }
        else
        {
          f = outWidth / 360.0F;
          i = Math.round(f);
          f = outHeight / 360.0F;
          i = Math.min(i, Math.round(f));
        }
        inSampleSize = i;
        localObject1 = null;
        i = j;
        if (i == 0) {
          localBufferedInputStream = new BufferedInputStream(new FileInputStream(localFile));
        }
      }
      catch (Exception paramString)
      {
        Object localObject1;
        BitmapFactory.Options localOptions;
        int i;
        float f;
        BufferedInputStream localBufferedInputStream;
        Object localObject2;
        boolean bool;
        return null;
      }
      try
      {
        localObject2 = BitmapFactory.decodeStream(localBufferedInputStream, null, localOptions);
        i = 1;
        localObject1 = localObject2;
      }
      catch (Exception localException)
      {
        continue;
      }
      inSampleSize *= 2;
      try
      {
        localBufferedInputStream.close();
      }
      catch (Exception paramString) {}
    }
    localObject2 = paramString.toLowerCase();
    bool = ((String)localObject2).endsWith(".jpg");
    if (!bool)
    {
      bool = ((String)localObject2).endsWith(".jpeg");
      if (!bool) {}
    }
    else
    {
      i = getOrientation(paramString);
      if (i > 0)
      {
        paramString = new Matrix();
        f = i;
        paramString.setRotate(f);
        paramString = Bitmap.createBitmap((Bitmap)localObject1, 0, 0, ((Bitmap)localObject1).getWidth(), ((Bitmap)localObject1).getHeight(), paramString, true);
        if (paramString != localObject1)
        {
          ((Bitmap)localObject1).recycle();
          return paramString;
        }
      }
    }
    return localObject1;
    return null;
    return null;
  }
  
  private File getFile(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(f.hash(paramString));
    localStringBuilder.append(".album");
    paramString = localStringBuilder.toString();
    return new File(file, paramString);
  }
  
  private static int getOrientation(String paramString)
  {
    try
    {
      int i = new ExifInterface(paramString).getAttributeInt("Orientation", 1);
      if (i != 3)
      {
        if (i != 6)
        {
          if (i != 8) {
            return 0;
          }
          return 270;
        }
        return 90;
      }
      return 180;
    }
    catch (Exception paramString) {}
    return 0;
  }
  
  public final String doInBackground(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    File localFile = getFile(paramString);
    if (localFile.exists()) {
      return localFile.getAbsolutePath();
    }
    try
    {
      Object localObject = new MediaMetadataRetriever();
      boolean bool = URLUtil.isNetworkUrl(paramString);
      if (bool) {
        ((MediaMetadataRetriever)localObject).setDataSource(paramString, new HashMap());
      } else {
        ((MediaMetadataRetriever)localObject).setDataSource(paramString);
      }
      paramString = ((MediaMetadataRetriever)localObject).getFrameAtTime();
      localFile.createNewFile();
      localObject = Bitmap.CompressFormat.JPEG;
      paramString.compress((Bitmap.CompressFormat)localObject, 80, new FileOutputStream(localFile));
      paramString = localFile.getAbsolutePath();
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  public final String download(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    if (!new File(paramString).exists()) {
      return null;
    }
    File localFile = getFile(paramString);
    if (localFile.exists()) {
      return localFile.getAbsolutePath();
    }
    Object localObject = decode(paramString);
    if (localObject == null) {
      return null;
    }
    paramString = new ByteArrayOutputStream();
    ((Bitmap)localObject).compress(Bitmap.CompressFormat.JPEG, 80, paramString);
    try
    {
      paramString.close();
      localFile.createNewFile();
      localObject = new FileOutputStream(localFile);
      ((FileOutputStream)localObject).write(paramString.toByteArray());
      ((FileOutputStream)localObject).flush();
      ((FileOutputStream)localObject).close();
      paramString = localFile.getAbsolutePath();
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
}
