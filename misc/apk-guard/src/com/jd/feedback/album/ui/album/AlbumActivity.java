package com.jd.feedback.album.ui.album;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.os.BaseBundle;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.MenuInflater;
import android.view.View;
import android.widget.CompoundButton;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.PopupMenu;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.jd.feedback.R.layout;
import com.jd.feedback.R.menu;
import com.jd.feedback.R.plurals;
import com.jd.feedback.R.string;
import com.jd.feedback.album.Marker;
import com.jd.feedback.album.Paint;
import com.jd.feedback.album.app.album.GalleryActivity;
import com.jd.feedback.album.g;
import com.jd.feedback.album.mvp.BaseActivity;
import com.jd.feedback.album.ui.album.helpers.AboutActivity.1;
import com.jd.feedback.album.ui.album.helpers.MainActivity.8;
import com.jd.feedback.album.ui.album.helpers.c;
import com.jd.feedback.album.ui.i;
import com.jd.feedback.album.view.f;
import com.jd.feedback.album.widget.AlertDialog;
import com.jd.feedback.album.xy.l;
import com.jd.feedback.album.xy.streams.ByteVector;
import com.jd.feedback.album.xy.x;
import com.jd.feedback.data.MaterialDialog.Builder;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class AlbumActivity
  extends BaseActivity
  implements com.jd.feedback.album.ui.h, GalleryActivity.a, c, com.jd.feedback.album.ui.album.helpers.e, com.jd.feedback.album.ui.album.helpers.a
{
  public static g<Long> b;
  public static g<String> e;
  public static com.jd.feedback.album.a<String> o;
  public static com.jd.feedback.album.a<ArrayList<com.jd.feedback.album.d>> q;
  public static g<Long> s;
  private int B;
  private i a;
  private long c;
  private com.jd.feedback.album.a<String> d = new Paint() {};
  private AlertDialog dialog;
  private AboutActivity.1 f;
  private boolean g;
  private boolean h;
  private int i;
  private com.yanzhenjie.mediascanner.a j;
  private int k;
  private ArrayList<com.jd.feedback.album.d> l;
  private List<com.jd.feedback.album.e> m;
  private PopupMenu mPopupMenu;
  private int n;
  private long p;
  private com.jd.feedback.album.xy.asm.Label r;
  private int t;
  private Frame u;
  private int x;
  
  public AlbumActivity() {}
  
  private void a()
  {
    int i1 = B;
    if (i1 == 0) {
      localObject = f.c();
    } else {
      localObject = f.a(new File(m.get(i1)).a.get(0)).c).getParentFile(), ".mp4");
    }
    l localL = (l)com.jd.feedback.album.h.b((Context)this).b();
    c = ((String)localObject);
    Object localObject = (l)localL;
    e = x;
    d = p;
    c = c;
    j = d;
    ((l)localObject).a();
  }
  
  private void b(int paramInt)
  {
    B = paramInt;
    com.jd.feedback.album.b localB = (com.jd.feedback.album.b)m.get(paramInt);
    a.a(localB);
  }
  
  private void c()
  {
    int i1 = B;
    if (i1 == 0) {
      localObject = f.a();
    } else {
      localObject = f.a(new File(m.get(i1)).a.get(0)).c).getParentFile(), ".jpg");
    }
    x localX = (x)com.jd.feedback.album.h.b((Context)this).a();
    c = ((String)localObject);
    Object localObject = (x)localX;
    j = d;
    ((x)localObject).a();
  }
  
  private void clear()
  {
    ArrayList localArrayList = l;
    new MainActivity.8((Context)this, localArrayList, this).execute(new Void[0]);
  }
  
  private void dismiss()
  {
    AlertDialog localAlertDialog = dialog;
    if ((localAlertDialog != null) && (localAlertDialog.isShowing())) {
      dialog.dismiss();
    }
  }
  
  private void i()
  {
    Paint localPaint = o;
    if (localPaint != null) {
      localPaint.a("User canceled.");
    }
    finish();
  }
  
  private void setTitle()
  {
    int i1 = l.size();
    a.e(i1);
  }
  
  private void showDialog()
  {
    if (dialog == null)
    {
      dialog = new AlertDialog((Context)this);
      dialog.a(r);
    }
    if (!dialog.isShowing()) {
      dialog.show();
    }
  }
  
  public final void a(int paramInt)
  {
    switch (n)
    {
    default: 
      throw new AssertionError("This should not be the case.");
    case 2: 
      localObject = (com.jd.feedback.album.Label)m.get(B)).a.get(paramInt);
      l.add(localObject);
      setTitle();
      clear();
      return;
    }
    GalleryActivity.c = m.get(B)).a;
    GalleryActivity.e = l.size();
    GalleryActivity.g = paramInt;
    GalleryActivity.l = this;
    Object localObject = new Intent((Context)this, GalleryActivity.class);
    ((Intent)localObject).putExtras(getIntent());
    startActivity((Intent)localObject);
  }
  
  public final void a(CompoundButton paramCompoundButton, int paramInt)
  {
    Object localObject = (com.jd.feedback.album.Label)m.get(B)).a.get(paramInt);
    if (paramCompoundButton.isChecked())
    {
      if (l.size() >= i)
      {
        switch (k)
        {
        default: 
          throw new AssertionError("This should not be the case.");
        case 2: 
          paramInt = R.plurals.album_check_album_limit;
          break;
        case 1: 
          paramInt = R.plurals.album_check_video_limit;
          break;
        case 0: 
          paramInt = R.plurals.album_check_image_limit;
        }
        localObject = a;
        Resources localResources = getResources();
        int i1 = i;
        ((com.jd.feedback.album.mvp.h)localObject).d(localResources.getQuantityString(paramInt, i1, new Object[] { Integer.valueOf(i1) }));
        paramCompoundButton.setChecked(false);
        return;
      }
      b = true;
      l.add(localObject);
      setTitle();
      return;
    }
    b = false;
    l.remove(localObject);
    setTitle();
  }
  
  public final void a(com.jd.feedback.album.Label paramLabel)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  public final void a(ArrayList paramArrayList)
  {
    Paint localPaint = q;
    if (localPaint != null) {
      localPaint.a(paramArrayList);
    }
    dismiss();
    finish();
  }
  
  public final void a(ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    f = null;
    switch (n)
    {
    default: 
      throw new AssertionError("This should not be the case.");
    }
    a.a(false);
    m = paramArrayList1;
    l = paramArrayList2;
    if (m.get(0)).a.isEmpty())
    {
      paramArrayList1 = new Intent((Context)this, com.jd.feedback.album.app.album.NullActivity.class);
      paramArrayList1.putExtras(getIntent());
      startActivityForResult(paramArrayList1, 1);
      return;
    }
    b(0);
    int i1 = l.size();
    a.e(i1);
  }
  
  public final void b()
  {
    if (l.isEmpty())
    {
      int i1;
      switch (k)
      {
      default: 
        throw new AssertionError("This should not be the case.");
      case 2: 
        i1 = R.string.album_check_album_little;
        break;
      case 1: 
        i1 = R.string.album_check_video_little;
        break;
      case 0: 
        i1 = R.string.album_check_image_little;
      }
      a.d(i1);
      return;
    }
    clear();
  }
  
  public final void b(com.jd.feedback.album.Label paramLabel)
  {
    int i2 = m.get(B)).a.indexOf(paramLabel);
    int i1 = i2;
    if (g) {
      i1 = i2 + 1;
    }
    a.a(i1);
    if (b)
    {
      if (!l.contains(paramLabel)) {
        l.add(paramLabel);
      }
    }
    else if (l.contains(paramLabel)) {
      l.remove(paramLabel);
    }
    setTitle();
  }
  
  public void clickCamera(View paramView)
  {
    if (l.size() >= i)
    {
      int i1;
      switch (k)
      {
      default: 
        throw new AssertionError("This should not be the case.");
      case 2: 
        i1 = R.plurals.album_check_album_limit_camera;
        break;
      case 1: 
        i1 = R.plurals.album_check_video_limit_camera;
        break;
      case 0: 
        i1 = R.plurals.album_check_image_limit_camera;
      }
      paramView = a;
      Resources localResources = getResources();
      int i2 = i;
      paramView.d(localResources.getQuantityString(i1, i2, new Object[] { Integer.valueOf(i2) }));
      return;
    }
    switch (k)
    {
    default: 
      throw new AssertionError("This should not be the case.");
    case 2: 
      if (mPopupMenu == null)
      {
        mPopupMenu = new PopupMenu((Context)this, paramView);
        mPopupMenu.getMenuInflater().inflate(R.menu.album_menu_item_camera, mPopupMenu.getMenu());
        mPopupMenu.setOnMenuItemClickListener(new AlbumActivity.2(this));
      }
      mPopupMenu.show();
      return;
    case 1: 
      a();
      return;
    }
    c();
  }
  
  public final void d()
  {
    if (u == null)
    {
      com.jd.feedback.album.xy.asm.Label localLabel = r;
      List localList = m;
      AlbumActivity.1 local1 = new AlbumActivity.1(this);
      u = new Frame((Context)this, localLabel, localList, local1);
    }
    if (!u.isShowing()) {
      u.show();
    }
  }
  
  public final void e()
  {
    clear();
  }
  
  public void finish()
  {
    s = null;
    e = null;
    b = null;
    q = null;
    o = null;
    super.finish();
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (paramInt1 != 1) {
      return;
    }
    if (paramInt2 == -1)
    {
      paramIntent = NullActivity.getStringExtra(paramIntent);
      if (!TextUtils.isEmpty(f.getMimeType(paramIntent))) {
        d.a(paramIntent);
      }
    }
    else
    {
      i();
    }
  }
  
  public void onBackPressed()
  {
    AboutActivity.1 local1 = f;
    if (local1 != null) {
      local1.cancel(true);
    }
    i();
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    a.a(paramConfiguration);
    paramConfiguration = u;
    if ((paramConfiguration != null) && (!paramConfiguration.isShowing())) {
      u = null;
    }
  }
  
  public final void onCreate()
  {
    String str = getResources().getString(R.string.album_permission_storage_failed_hint);
    MaterialDialog.Builder.show((Activity)this, str).show();
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = getIntent().getExtras();
    if ((!ws) && (paramBundle == null)) {
      throw new AssertionError();
    }
    r = ((com.jd.feedback.album.xy.asm.Label)paramBundle.getParcelable("KEY_INPUT_WIDGET"));
    k = paramBundle.getInt("KEY_INPUT_FUNCTION");
    n = paramBundle.getInt("KEY_INPUT_CHOICE_MODE");
    t = paramBundle.getInt("KEY_INPUT_COLUMN_COUNT");
    g = paramBundle.getBoolean("KEY_INPUT_ALLOW_CAMERA");
    i = paramBundle.getInt("KEY_INPUT_LIMIT_COUNT");
    x = paramBundle.getInt("KEY_INPUT_CAMERA_QUALITY");
    p = paramBundle.getLong("KEY_INPUT_CAMERA_DURATION");
    c = paramBundle.getLong("KEY_INPUT_CAMERA_BYTES");
    h = paramBundle.getBoolean("KEY_INPUT_FILTER_VISIBILITY");
    int i1;
    switch (r.b)
    {
    default: 
      throw new AssertionError("This should not be the case.");
    case 2: 
      i1 = R.layout.album_activity_album_dark;
      break;
    case 1: 
      i1 = R.layout.album_activity_album_light;
    }
    setContentView(i1);
    a = new b(this, this, i);
    a.a(r, t, g, n);
    a.d(r.a);
    a.a(true);
    get(BaseActivity.b, 1);
  }
  
  public final void onItemClick()
  {
    showDialog();
    dialog.setTitle(R.string.album_converting);
  }
  
  public final void onOptionsItemSelected(int paramInt)
  {
    ArrayList localArrayList = getIntent().getParcelableArrayListExtra("KEY_INPUT_CHECKED_LIST");
    Object localObject = s;
    Marker localMarker1 = e;
    Marker localMarker2 = b;
    boolean bool = h;
    localObject = new com.jd.feedback.album.ui.album.helpers.b((Context)this, (Marker)localObject, localMarker1, localMarker2, bool);
    f = new AboutActivity.1(k, localArrayList, (com.jd.feedback.album.ui.album.helpers.b)localObject, this);
    f.execute(new Void[0]);
  }
  
  public final void show()
  {
    showDialog();
    dialog.setTitle(R.string.album_thumbnail);
  }
}
