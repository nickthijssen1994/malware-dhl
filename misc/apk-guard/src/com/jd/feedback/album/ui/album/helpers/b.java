package com.jd.feedback.album.ui.album.helpers;

import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.provider.MediaStore.Images.Media;
import android.provider.MediaStore.Video.Media;
import com.jd.feedback.R.string;
import com.jd.feedback.album.Label;
import com.jd.feedback.album.Marker;
import com.jd.feedback.album.g;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public final class b
{
  private static final String[] a = { "_id", "_data", "bucket_display_name", "mime_type", "date_added", "latitude", "longitude", "_size" };
  private static final String[] m = { "_id", "_data", "bucket_display_name", "mime_type", "date_added", "latitude", "longitude", "_size", "duration" };
  private g<Long> b;
  private g<Long> c;
  private g<String> e;
  private boolean i;
  Context mContext;
  
  public b(Context paramContext, Marker paramMarker1, Marker paramMarker2, Marker paramMarker3, boolean paramBoolean)
  {
    mContext = paramContext;
    c = paramMarker1;
    e = paramMarker2;
    b = paramMarker3;
    i = paramBoolean;
  }
  
  private void a(Map paramMap, com.jd.feedback.album.b paramB)
  {
    Object localObject2 = mContext.getContentResolver().query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, m, null, null, null);
    Object localObject1 = localObject2;
    if (localObject2 != null)
    {
      while (localObject1.moveToNext())
      {
        long l1 = localObject1.getLong(0);
        Object localObject3 = localObject1.getString(1);
        localObject2 = localObject1.getString(2);
        String str = localObject1.getString(3);
        long l2 = localObject1.getLong(4);
        float f1 = localObject1.getFloat(5);
        float f2 = localObject1.getFloat(6);
        long l3 = localObject1.getLong(7);
        long l4 = localObject1.getLong(8);
        Label localLabel = new Label();
        a = 2;
        f = l1;
        c = ((String)localObject3);
        d = ((String)localObject2);
        id = str;
        date = l2;
        start = f1;
        y = f2;
        size = l3;
        x = l4;
        localObject3 = c;
        if ((localObject3 != null) && (((Marker)localObject3).equals())) {
          if (i) {
            e = true;
          } else {
            continue;
          }
        }
        localObject3 = e;
        if ((localObject3 != null) && (((Marker)localObject3).equals())) {
          if (i) {
            e = true;
          } else {
            continue;
          }
        }
        localObject3 = b;
        if ((localObject3 != null) && (((Marker)localObject3).equals())) {
          if (i) {
            e = true;
          } else {
            continue;
          }
        }
        paramB.write(localLabel);
        localObject3 = (com.jd.feedback.album.b)paramMap.get(localObject2);
        if (localObject3 != null)
        {
          ((com.jd.feedback.album.b)localObject3).write(localLabel);
        }
        else
        {
          localObject3 = new com.jd.feedback.album.b();
          c = ((String)localObject2);
          ((com.jd.feedback.album.b)localObject3).write(localLabel);
          paramMap.put(localObject2, localObject3);
        }
      }
      localObject1.close();
    }
  }
  
  public final ArrayList a()
  {
    Object localObject = new HashMap();
    com.jd.feedback.album.b localB = new com.jd.feedback.album.b();
    e = true;
    c = mContext.getString(R.string.album_all_images_videos);
    doInBackground((Map)localObject, localB);
    a((Map)localObject, localB);
    ArrayList localArrayList = new ArrayList();
    Collections.sort(a);
    localArrayList.add(localB);
    localObject = ((Map)localObject).entrySet().iterator();
    while (((Iterator)localObject).hasNext())
    {
      localB = (com.jd.feedback.album.b)((Map.Entry)((Iterator)localObject).next()).getValue();
      Collections.sort(a);
      localArrayList.add(localB);
    }
    return localArrayList;
  }
  
  final void doInBackground(Map paramMap, com.jd.feedback.album.b paramB)
  {
    Cursor localCursor = mContext.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, a, null, null, null);
    if (localCursor != null)
    {
      while (localCursor.moveToNext())
      {
        long l1 = localCursor.getLong(0);
        Object localObject = localCursor.getString(1);
        String str1 = localCursor.getString(2);
        String str2 = localCursor.getString(3);
        long l2 = localCursor.getLong(4);
        float f1 = localCursor.getFloat(5);
        float f2 = localCursor.getFloat(6);
        long l3 = localCursor.getLong(7);
        Label localLabel = new Label();
        a = 1;
        f = l1;
        c = ((String)localObject);
        d = str1;
        id = str2;
        date = l2;
        start = f1;
        y = f2;
        size = l3;
        localObject = c;
        if ((localObject != null) && (((Marker)localObject).equals()))
        {
          if (i) {
            e = true;
          }
        }
        else
        {
          localObject = e;
          if ((localObject != null) && (((Marker)localObject).equals()))
          {
            if (!i) {
              continue;
            }
            e = true;
          }
          paramB.write(localLabel);
          localObject = (com.jd.feedback.album.b)paramMap.get(str1);
          if (localObject != null)
          {
            ((com.jd.feedback.album.b)localObject).write(localLabel);
          }
          else
          {
            localObject = new com.jd.feedback.album.b();
            c = str1;
            ((com.jd.feedback.album.b)localObject).write(localLabel);
            paramMap.put(str1, localObject);
          }
        }
      }
      localCursor.close();
    }
  }
  
  public final ArrayList run()
  {
    Object localObject = new HashMap();
    com.jd.feedback.album.b localB = new com.jd.feedback.album.b();
    e = true;
    c = mContext.getString(R.string.album_all_videos);
    a((Map)localObject, localB);
    ArrayList localArrayList = new ArrayList();
    Collections.sort(a);
    localArrayList.add(localB);
    localObject = ((Map)localObject).entrySet().iterator();
    while (((Iterator)localObject).hasNext())
    {
      localB = (com.jd.feedback.album.b)((Map.Entry)((Iterator)localObject).next()).getValue();
      Collections.sort(a);
      localArrayList.add(localB);
    }
    return localArrayList;
  }
}
