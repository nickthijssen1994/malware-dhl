package com.jd.feedback.album.ui.album;

import android.app.Activity;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.Adapter;
import com.jd.feedback.R.color;
import com.jd.feedback.R.dimen;
import com.jd.feedback.R.drawable;
import com.jd.feedback.R.id;
import com.jd.feedback.R.string;
import com.jd.feedback.album.curve.d;
import com.jd.feedback.album.ui.i;
import com.jd.feedback.album.view.Type;
import com.jd.feedback.album.widget.ColorProgressBar;
import com.jd.feedback.album.widget.util.PagerSlidingTabStrip;
import com.jd.feedback.album.xy.asm.Label;

final class b
  extends i
  implements View.OnClickListener
{
  private TextView a;
  private ImageView b;
  private Button c;
  private RecyclerView d;
  private AlbumActivity e;
  private GridLayoutManager f;
  private t g;
  private int h;
  private ConstraintLayout i;
  private ColorProgressBar j;
  private LinearLayout l;
  
  public b(AlbumActivity paramAlbumActivity, com.jd.feedback.album.ui.h paramH, int paramInt)
  {
    super((Activity)paramAlbumActivity, paramH);
    e = paramAlbumActivity;
    h = paramInt;
    i = ((ConstraintLayout)paramAlbumActivity.findViewById(R.id.app_bar_layout));
    d = ((RecyclerView)paramAlbumActivity.findViewById(R.id.recycler_view));
    c = ((Button)paramAlbumActivity.findViewById(R.id.btn_switch_dir));
    a = ((TextView)paramAlbumActivity.findViewById(R.id.tv_complete));
    b = ((ImageView)paramAlbumActivity.findViewById(R.id.iv_back));
    l = ((LinearLayout)paramAlbumActivity.findViewById(R.id.layout_loading));
    j = ((ColorProgressBar)paramAlbumActivity.findViewById(R.id.progress_bar));
    i.setOnClickListener(new d(this));
    c.setOnClickListener(this);
    a.setOnClickListener(this);
    b.setOnClickListener(this);
  }
  
  private static int toString(Configuration paramConfiguration)
  {
    switch (orientation)
    {
    default: 
      throw new AssertionError("This should not be the case.");
    case 2: 
      return 0;
    }
    return 1;
  }
  
  public final void a(int paramInt)
  {
    g.notifyItemChanged(paramInt);
  }
  
  public final void a(Configuration paramConfiguration)
  {
    int k = f.findFirstVisibleItemPosition();
    f.setOrientation(toString(paramConfiguration));
    d.setAdapter(g);
    f.scrollToPosition(k);
  }
  
  public final void a(com.jd.feedback.album.b paramB)
  {
    c.setText(c);
    g.a = a;
    g.notifyDataSetChanged();
    d.scrollToPosition(0);
  }
  
  public final void a(Label paramLabel, int paramInt1, boolean paramBoolean, int paramInt2)
  {
    Object localObject = e;
    int k = e;
    Type.create((Activity)localObject, k);
    k = g;
    if (b == 1)
    {
      if (Type.add(((Activity)e).getWindow()))
      {
        Type.a((Activity)e, k);
      }
      else
      {
        localObject = e;
        k = getCount(R.color.albumColorPrimaryBlack);
        Type.a((Activity)localObject, k);
      }
      j.setColorFilter(getCount(R.color.albumLoadingDark));
      localObject = getIcon(R.drawable.album_ic_back_white);
      com.jd.feedback.album.view.f.setIcon((Drawable)localObject, getCount(R.color.albumIconDark));
      a((Drawable)localObject);
    }
    else
    {
      j.setColorFilter(d);
      Type.a((Activity)e, k);
      f(R.drawable.album_ic_back_white);
    }
    i.setBackgroundColor(d);
    localObject = e.getResources().getConfiguration();
    f = new GridLayoutManager(b.getContext(), paramInt1, toString((Configuration)localObject), false);
    d.setLayoutManager(f);
    paramInt1 = setTitle().getDimensionPixelSize(R.dimen.album_dp_4);
    d.addItemDecoration(new PagerSlidingTabStrip(paramInt1, paramInt1));
    g = new t(b.getContext(), paramBoolean, paramInt2, c);
    g.d = new ByteVector(this);
    g.e = new Attribute(this);
    g.c = new AnnotationWriter(this);
    d.setAdapter(g);
  }
  
  public final void a(boolean paramBoolean)
  {
    LinearLayout localLinearLayout = l;
    int k;
    if (paramBoolean) {
      k = 0;
    } else {
      k = 8;
    }
    localLinearLayout.setVisibility(k);
  }
  
  public final void add(int paramInt)
  {
    g.notifyItemInserted(paramInt);
  }
  
  public final void e(int paramInt)
  {
    TextView localTextView = a;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(c(R.string.album_menu_finish));
    localStringBuilder.append(" (");
    localStringBuilder.append(paramInt);
    localStringBuilder.append("/");
    localStringBuilder.append(h);
    localStringBuilder.append(")");
    localTextView.setText(localStringBuilder.toString());
  }
  
  public final void onClick(View paramView)
  {
    if (paramView == i)
    {
      d.smoothScrollToPosition(0);
      return;
    }
    if (paramView == c)
    {
      ((com.jd.feedback.album.ui.h)f).d();
      return;
    }
    if (paramView == a)
    {
      ((com.jd.feedback.album.ui.h)f).b();
      return;
    }
    if (paramView == b) {
      e.finish();
    }
  }
}
