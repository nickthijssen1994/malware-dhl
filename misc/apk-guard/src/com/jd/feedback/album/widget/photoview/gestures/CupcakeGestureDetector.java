package com.jd.feedback.album.widget.photoview.gestures;

import android.content.Context;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.ViewConfiguration;

public class CupcakeGestureDetector
  implements GestureDetector
{
  float mDownX;
  float mDownY;
  private boolean mIsDragging;
  private final float mLastTouchX;
  private final float mLastTouchY;
  protected OnGestureListener mListener;
  private VelocityTracker mVelocityTracker;
  
  public CupcakeGestureDetector(Context paramContext)
  {
    paramContext = ViewConfiguration.get(paramContext);
    mLastTouchX = paramContext.getScaledMinimumFlingVelocity();
    mLastTouchY = paramContext.getScaledTouchSlop();
  }
  
  float getActiveX(MotionEvent paramMotionEvent)
  {
    return paramMotionEvent.getX();
  }
  
  float getActiveY(MotionEvent paramMotionEvent)
  {
    return paramMotionEvent.getY();
  }
  
  public final boolean isDragging()
  {
    return mIsDragging;
  }
  
  public boolean isScaling()
  {
    return false;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i = paramMotionEvent.getAction();
    boolean bool = false;
    float f1;
    float f2;
    VelocityTracker localVelocityTracker;
    switch (i)
    {
    default: 
      return true;
    case 3: 
      paramMotionEvent = mVelocityTracker;
      if (paramMotionEvent != null)
      {
        paramMotionEvent.recycle();
        mVelocityTracker = null;
        return true;
      }
      break;
    case 2: 
      f1 = getActiveX(paramMotionEvent);
      f2 = getActiveY(paramMotionEvent);
      float f3 = f1 - mDownX;
      float f4 = f2 - mDownY;
      if (!mIsDragging)
      {
        if (Math.sqrt(f3 * f3 + f4 * f4) >= mLastTouchY) {
          bool = true;
        }
        mIsDragging = bool;
      }
      if (mIsDragging)
      {
        mListener.onDrag(f3, f4);
        mDownX = f1;
        mDownY = f2;
        localVelocityTracker = mVelocityTracker;
        if (localVelocityTracker != null)
        {
          localVelocityTracker.addMovement(paramMotionEvent);
          return true;
        }
      }
      break;
    case 1: 
      if ((mIsDragging) && (mVelocityTracker != null))
      {
        mDownX = getActiveX(paramMotionEvent);
        mDownY = getActiveY(paramMotionEvent);
        mVelocityTracker.addMovement(paramMotionEvent);
        mVelocityTracker.computeCurrentVelocity(1000);
        f1 = mVelocityTracker.getXVelocity();
        f2 = mVelocityTracker.getYVelocity();
        if (Math.max(Math.abs(f1), Math.abs(f2)) >= mLastTouchX) {
          mListener.fling(-f1, -f2);
        }
      }
      paramMotionEvent = mVelocityTracker;
      if (paramMotionEvent != null)
      {
        paramMotionEvent.recycle();
        mVelocityTracker = null;
        return true;
      }
      break;
    case 0: 
      mVelocityTracker = VelocityTracker.obtain();
      localVelocityTracker = mVelocityTracker;
      if (localVelocityTracker != null) {
        localVelocityTracker.addMovement(paramMotionEvent);
      }
      mDownX = getActiveX(paramMotionEvent);
      mDownY = getActiveY(paramMotionEvent);
      mIsDragging = false;
    }
    return true;
  }
  
  public final void setOnGestureListener(OnGestureListener paramOnGestureListener)
  {
    mListener = paramOnGestureListener;
  }
}
