package com.jd.feedback.album.widget.util;

import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.view.View;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.LayoutManager;
import androidx.recyclerview.widget.RecyclerView.State;

public final class PagerSlidingTabStrip
  extends PreferenceFragmentCompat.DividerDecoration
{
  private final d a;
  private final int w;
  private final int x;
  
  public PagerSlidingTabStrip(int paramInt1, int paramInt2)
  {
    w = Math.round(paramInt1 / 2.0F);
    x = Math.round(paramInt2 / 2.0F);
    a = new c(w, x);
  }
  
  public final void getItemOffsets(Rect paramRect, View paramView, RecyclerView paramRecyclerView, RecyclerView.State paramState)
  {
    int i = w;
    int j = x;
    paramRect.set(i, j, i, j);
  }
  
  public final void onDraw(Canvas paramCanvas, RecyclerView paramRecyclerView, RecyclerView.State paramState)
  {
    paramCanvas.save();
    paramRecyclerView = paramRecyclerView.getLayoutManager();
    int j = paramRecyclerView.getChildCount();
    int i = 0;
    while (i < j)
    {
      paramState = paramRecyclerView.getChildAt(i);
      d localD = a;
      int k = paramState.getLeft() - k;
      int m = paramState.getTop();
      int n = l;
      int i1 = k;
      int i2 = paramState.getBottom();
      int i3 = l;
      a.setBounds(k, m - n, i1 + k, i2 + i3);
      a.draw(paramCanvas);
      localD = a;
      k = paramState.getLeft();
      m = k;
      n = paramState.getTop() - l;
      i1 = paramState.getRight();
      i2 = k;
      i3 = l;
      a.setBounds(k - m, n, i1 + i2, i3 + n);
      a.draw(paramCanvas);
      localD = a;
      k = paramState.getRight();
      m = paramState.getTop();
      n = l;
      i1 = k;
      i2 = paramState.getBottom();
      i3 = l;
      a.setBounds(k, m - n, i1 + k, i2 + i3);
      a.draw(paramCanvas);
      localD = a;
      k = paramState.getLeft();
      m = k;
      n = paramState.getBottom();
      i1 = paramState.getRight();
      i2 = k;
      i3 = l;
      a.setBounds(k - m, n, i1 + i2, i3 + n);
      a.draw(paramCanvas);
      i += 1;
    }
    paramCanvas.restore();
  }
}
