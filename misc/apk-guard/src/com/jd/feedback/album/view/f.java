package com.jd.feedback.album.view;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Environment;
import android.text.TextUtils;
import android.webkit.MimeTypeMap;
import androidx.core.content.FileProvider;
import androidx.core.graphics.drawable.DrawableCompat;
import com.jd.feedback.album.provider.CameraFileProvider;
import java.io.File;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;

public final class f
{
  public static String a()
  {
    return a(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM), ".jpg");
  }
  
  public static String a(long paramLong)
  {
    paramLong /= 1000L;
    int i = (int)(paramLong / 3600L);
    paramLong -= i * 3600;
    int j = (int)(paramLong / 60L);
    int k = (int)(paramLong - j * 60);
    Object localObject1 = "";
    String str;
    if (i > 0)
    {
      if (i >= 10) {
        str = Integer.toString(i);
      } else {
        str = "0".concat(String.valueOf(i));
      }
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(str);
      ((StringBuilder)localObject1).append(":");
      localObject1 = ((StringBuilder)localObject1).toString();
    }
    if (j > 0)
    {
      if (j >= 10) {
        str = Integer.toString(j);
      } else {
        str = "0".concat(String.valueOf(j));
      }
    }
    else {
      str = "00";
    }
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(str);
    ((StringBuilder)localObject2).append(":");
    localObject2 = ((StringBuilder)localObject2).toString();
    if (k > 0)
    {
      if (k >= 10) {
        str = Integer.toString(k);
      } else {
        str = "0".concat(String.valueOf(k));
      }
    }
    else {
      str = "00";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append((String)localObject1);
    localStringBuilder.append((String)localObject2);
    localStringBuilder.append(str);
    return localStringBuilder.toString();
  }
  
  public static String a(File paramFile, String paramString)
  {
    if ((paramFile.exists()) && (paramFile.isFile())) {
      paramFile.delete();
    }
    if (!paramFile.exists()) {
      paramFile.mkdirs();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(processMessage("yyyyMMdd_HHmmssSSS"));
    localStringBuilder.append("_");
    localStringBuilder.append(hash(UUID.randomUUID().toString()));
    localStringBuilder.append(paramString);
    return new File(paramFile, localStringBuilder.toString()).getAbsolutePath();
  }
  
  public static String c()
  {
    return a(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), ".mp4");
  }
  
  private static String getFileExtension(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      paramString = "";
    } else {
      paramString = paramString.toLowerCase();
    }
    paramString = MimeTypeMap.getFileExtensionFromUrl(paramString);
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    return paramString;
  }
  
  public static String getMimeType(String paramString)
  {
    paramString = getFileExtension(paramString);
    if (!MimeTypeMap.getSingleton().hasExtension(paramString)) {
      return "";
    }
    paramString = MimeTypeMap.getSingleton().getMimeTypeFromExtension(paramString);
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    return paramString;
  }
  
  public static Uri getUriForFile(Context paramContext, File paramFile)
  {
    if (Build.VERSION.SDK_INT < 24) {
      return Uri.fromFile(paramFile);
    }
    return FileProvider.getUriForFile(paramContext, CameraFileProvider.getLogFile(paramContext), paramFile);
  }
  
  public static String hash(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    try
    {
      byte[] arrayOfByte = MessageDigest.getInstance("MD5").digest(paramString.getBytes());
      int i = 0;
      while (i < arrayOfByte.length)
      {
        int k = arrayOfByte[i];
        int j = k;
        if (k < 0) {
          j = k + 256;
        }
        if (j < 16) {
          localStringBuilder.append("0");
        }
        localStringBuilder.append(Integer.toHexString(j));
        i += 1;
      }
      return localStringBuilder.toString();
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    return Integer.toString(paramString.hashCode());
  }
  
  private static String processMessage(String paramString)
  {
    return new SimpleDateFormat(paramString, Locale.ENGLISH).format(new Date(System.currentTimeMillis()));
  }
  
  public static void setIcon(Drawable paramDrawable, int paramInt)
  {
    DrawableCompat.setTint(DrawableCompat.wrap(paramDrawable.mutate()), paramInt);
  }
  
  public static ColorStateList valueOf(int paramInt1, int paramInt2)
  {
    int[] arrayOfInt1 = { 16842912 };
    int[] arrayOfInt2 = new int[0];
    int[] arrayOfInt3 = new int[0];
    int[] arrayOfInt4 = new int[0];
    return new ColorStateList(new int[][] { arrayOfInt1, { 16842919 }, { 16842913 }, arrayOfInt2, arrayOfInt3, arrayOfInt4 }, new int[] { paramInt2, paramInt2, paramInt2, paramInt1, paramInt1, paramInt1 });
  }
}
