package com.jd.commons.flutter.plugins.imagepicker;

import android.app.Activity;
import android.content.ContextWrapper;
import android.content.Intent;
import com.jd.lib.unification.album.activity.PhotoAlbumActivity;
import com.jd.lib.unification.album.entity.AlbumParam;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.video.recorder.VideoRecorderActivity;
import com.jingdong.common.widget.image.UnImageLoader;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel.Result;
import io.flutter.plugin.common.PluginRegistry.ActivityResultListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class f
  implements PluginRegistry.ActivityResultListener
{
  private MethodCall b;
  private MethodChannel.Result c;
  final String d;
  
  public f(File paramFile)
  {
    this(paramFile, null, null);
  }
  
  f(File paramFile, MethodChannel.Result paramResult, MethodCall paramMethodCall)
  {
    if (Lookup.getActivity() != null)
    {
      paramFile = new StringBuilder();
      paramFile.append(Lookup.getActivity().getPackageName());
      paramFile.append(".flutter.image_provider");
      d = paramFile.toString();
    }
    else
    {
      d = "";
    }
    c = paramResult;
    b = paramMethodCall;
  }
  
  private void a(int paramInt, Intent paramIntent)
  {
    if (paramInt == -1)
    {
      paramIntent = paramIntent.getStringExtra("photoPath");
      ArrayList localArrayList = new ArrayList();
      localArrayList.add(paramIntent);
      new Label().a(localArrayList, new d(this));
      return;
    }
    a(null);
  }
  
  private void a(List paramList)
  {
    c.success(paramList);
    d();
  }
  
  private void add(int paramInt, Intent paramIntent)
  {
    if ((paramInt == -1) && (paramIntent != null))
    {
      Object localObject = paramIntent.getParcelableArrayListExtra("selcteMedias");
      paramIntent = new ArrayList();
      localObject = ((List)localObject).iterator();
      while (((Iterator)localObject).hasNext()) {
        paramIntent.add(((LocalMedia)((Iterator)localObject).next()).getPath());
      }
      new Label().a(paramIntent, new e(this));
      return;
    }
    a(null);
  }
  
  private void add(String paramString1, String paramString2)
  {
    c.error(paramString1, paramString2, null);
    d();
  }
  
  private void add(List paramList)
  {
    if (c != null)
    {
      a(paramList);
      return;
    }
    throw new IllegalStateException("Received image from picker that was not requested");
  }
  
  private boolean b(MethodCall paramMethodCall, MethodChannel.Result paramResult)
  {
    if (c != null) {
      return false;
    }
    b = paramMethodCall;
    c = paramResult;
    return true;
  }
  
  private void d()
  {
    b = null;
    c = null;
  }
  
  private void i()
  {
    add("already_active", "Image picker is already active");
  }
  
  public void a(MethodCall paramMethodCall, MethodChannel.Result paramResult)
  {
    if (!b(paramMethodCall, paramResult))
    {
      i();
      return;
    }
    if (Lookup.getActivity() == null) {
      return;
    }
    UnImageLoader.getUnImageLoader().init(1);
    paramResult = (Integer)paramMethodCall.argument("maxPickSize");
    paramMethodCall = new AlbumParam();
    cameraOrVideoAction = 0;
    loadCameraOrVideo = 1;
    canSelectMediaCount = paramResult.intValue();
    videoEditorAction = 0;
    paramResult = new Intent(Lookup.getActivity(), PhotoAlbumActivity.class);
    paramResult.putExtra("albumParam", paramMethodCall);
    Lookup.getActivity().startActivityForResult(paramResult, 2342);
  }
  
  public void edit(MethodCall paramMethodCall, MethodChannel.Result paramResult)
  {
    if (!b(paramMethodCall, paramResult))
    {
      i();
      return;
    }
    if (Lookup.getActivity() == null) {
      return;
    }
    paramMethodCall = new Intent(Lookup.getActivity(), VideoRecorderActivity.class);
    paramResult = new VideoParam();
    recordFunctionControl = 2;
    needEditorPic = false;
    editorFunctionControl = 0;
    paramMethodCall.putExtra("videoParam", paramResult);
    Lookup.getActivity().startActivityForResult(paramMethodCall, 2343);
  }
  
  public boolean onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    switch (paramInt1)
    {
    default: 
      return false;
    case 2343: 
      a(paramInt2, paramIntent);
      break;
    case 2342: 
      add(paramInt2, paramIntent);
    }
    return true;
  }
}
