package com.jd.commons.flutter.plugins.imagepicker;

import android.app.Activity;
import android.content.ContextWrapper;
import android.os.Environment;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.embedding.engine.plugins.FlutterPlugin.FlutterPluginBinding;
import io.flutter.embedding.engine.plugins.activity.ActivityAware;
import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.MethodChannel.MethodCallHandler;
import io.flutter.plugin.common.MethodChannel.Result;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import java.lang.ref.WeakReference;

public class Lookup
  implements FlutterPlugin, ActivityAware, MethodChannel.MethodCallHandler
{
  private static WeakReference<Activity> listener;
  private f cache;
  private MethodChannel context;
  private FlutterPlugin.FlutterPluginBinding name;
  private ActivityPluginBinding resolver;
  
  public Lookup() {}
  
  public static Activity getActivity()
  {
    return (Activity)listener.get();
  }
  
  public void initialize(BinaryMessenger paramBinaryMessenger, Activity paramActivity, PluginRegistry.Registrar paramRegistrar, ActivityPluginBinding paramActivityPluginBinding)
  {
    listener = new WeakReference(paramActivity);
    context = new MethodChannel(paramBinaryMessenger, "plugins.flutter.jd.mrd/image_picker");
    context.setMethodCallHandler(this);
    cache = new f(paramActivity.getExternalFilesDir(Environment.DIRECTORY_PICTURES));
    if (paramRegistrar != null)
    {
      paramRegistrar.addActivityResultListener(cache);
      return;
    }
    paramActivityPluginBinding.addActivityResultListener(cache);
  }
  
  public void onAttachedToActivity(ActivityPluginBinding paramActivityPluginBinding)
  {
    resolver = paramActivityPluginBinding;
    initialize(name.getBinaryMessenger(), resolver.getActivity(), null, paramActivityPluginBinding);
  }
  
  public void onAttachedToEngine(FlutterPlugin.FlutterPluginBinding paramFlutterPluginBinding)
  {
    name = paramFlutterPluginBinding;
  }
  
  public void onDetachedFromActivity()
  {
    resolver.removeActivityResultListener(cache);
    context.setMethodCallHandler(null);
  }
  
  public void onDetachedFromActivityForConfigChanges()
  {
    onDetachedFromActivity();
  }
  
  public void onDetachedFromEngine(FlutterPlugin.FlutterPluginBinding paramFlutterPluginBinding) {}
  
  public void onMethodCall(MethodCall paramMethodCall, MethodChannel.Result paramResult)
  {
    if ((listener.get() != null) && (!((Activity)listener.get()).isFinishing()))
    {
      if (method.equals("pickImage"))
      {
        int i = ((Integer)paramMethodCall.argument("source")).intValue();
        switch (i)
        {
        default: 
          paramMethodCall = new StringBuilder();
          paramMethodCall.append("Invalid image source: ");
          paramMethodCall.append(i);
          throw new IllegalArgumentException(paramMethodCall.toString());
        case 1: 
          cache.a(paramMethodCall, paramResult);
          return;
        }
        cache.edit(paramMethodCall, paramResult);
        return;
      }
      if (method.equals("compressImages"))
      {
        new Label().b(paramMethodCall, paramResult);
        return;
      }
      paramResult.notImplemented();
      return;
    }
    paramResult.error("no_activity", "image_picker plugin requires a foreground activity.", null);
  }
  
  public void onReattachedToActivityForConfigChanges(ActivityPluginBinding paramActivityPluginBinding)
  {
    onAttachedToActivity(paramActivityPluginBinding);
  }
}
