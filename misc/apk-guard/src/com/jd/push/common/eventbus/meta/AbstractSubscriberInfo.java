package com.jd.push.common.eventbus.meta;

import com.jd.push.common.eventbus.EventBusException;
import com.jd.push.common.eventbus.SubscriberMethod;
import com.jd.push.common.eventbus.ThreadMode;

public abstract class AbstractSubscriberInfo
  implements SubscriberInfo
{
  private final boolean shouldCheckSuperclass;
  private final Class subscriberClass;
  private final Class<? extends SubscriberInfo> superSubscriberInfoClass;
  
  protected AbstractSubscriberInfo(Class paramClass1, Class paramClass2, boolean paramBoolean)
  {
    subscriberClass = paramClass1;
    superSubscriberInfoClass = paramClass2;
    shouldCheckSuperclass = paramBoolean;
  }
  
  protected SubscriberMethod createSubscriberMethod(String paramString, Class paramClass)
  {
    return createSubscriberMethod(paramString, paramClass, ThreadMode.POSTING, 0, false);
  }
  
  protected SubscriberMethod createSubscriberMethod(String paramString, Class paramClass, ThreadMode paramThreadMode)
  {
    return createSubscriberMethod(paramString, paramClass, paramThreadMode, 0, false);
  }
  
  protected SubscriberMethod createSubscriberMethod(String paramString, Class paramClass, ThreadMode paramThreadMode, int paramInt, boolean paramBoolean)
  {
    Class localClass = subscriberClass;
    try
    {
      paramString = localClass.getDeclaredMethod(paramString, new Class[] { paramClass });
      paramString = new SubscriberMethod(paramString, paramClass, paramThreadMode, paramInt, paramBoolean);
      return paramString;
    }
    catch (NoSuchMethodException paramString)
    {
      paramClass = new StringBuilder();
      paramClass.append("Could not find subscriber method in ");
      paramClass.append(subscriberClass);
      paramClass.append(". Maybe a missing ProGuard rule?");
      throw new EventBusException(paramClass.toString(), paramString);
    }
  }
  
  public Class getSubscriberClass()
  {
    return subscriberClass;
  }
  
  public SubscriberInfo getSuperSubscriberInfo()
  {
    Object localObject = superSubscriberInfoClass;
    if (localObject == null) {
      return null;
    }
    try
    {
      localObject = ((Class)localObject).newInstance();
      return (SubscriberInfo)localObject;
    }
    catch (IllegalAccessException localIllegalAccessException) {}catch (InstantiationException localInstantiationException) {}
    throw new RuntimeException(localInstantiationException);
  }
  
  public boolean shouldCheckSuperclass()
  {
    return shouldCheckSuperclass;
  }
}
