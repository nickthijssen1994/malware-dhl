package com.jd.push.common.eventbus;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.SystemClock;

final class HandlerPoster
  extends Handler
{
  private final EventBus eventBus;
  private boolean handlerActive;
  private final int maxMillisInsideHandleMessage;
  private final PendingPostQueue queue;
  
  HandlerPoster(EventBus paramEventBus, Looper paramLooper, int paramInt)
  {
    super(paramLooper);
    eventBus = paramEventBus;
    maxMillisInsideHandleMessage = paramInt;
    queue = new PendingPostQueue();
  }
  
  void enqueue(Subscription paramSubscription, Object paramObject)
  {
    paramSubscription = PendingPost.obtainPendingPost(paramSubscription, paramObject);
    try
    {
      queue.enqueue(paramSubscription);
      if (!handlerActive)
      {
        handlerActive = true;
        if (!sendMessage(obtainMessage())) {
          throw new EventBusException("Could not send handler message");
        }
      }
      return;
    }
    catch (Throwable paramSubscription)
    {
      throw paramSubscription;
    }
  }
  
  public void handleMessage(Message paramMessage)
  {
    try
    {
      long l1 = SystemClock.uptimeMillis();
      long l2;
      long l3;
      do
      {
        PendingPost localPendingPost = queue.poll();
        paramMessage = localPendingPost;
        if (localPendingPost == null) {
          try
          {
            localPendingPost = queue.poll();
            paramMessage = localPendingPost;
            if (localPendingPost == null)
            {
              handlerActive = false;
              handlerActive = false;
              return;
            }
          }
          catch (Throwable paramMessage)
          {
            throw paramMessage;
          }
        }
        eventBus.invokeSubscriber(paramMessage);
        l2 = SystemClock.uptimeMillis();
        l3 = maxMillisInsideHandleMessage;
      } while (l2 - l1 < l3);
      boolean bool = sendMessage(obtainMessage());
      if (bool)
      {
        handlerActive = true;
        return;
      }
      throw new EventBusException("Could not send handler message");
    }
    catch (Throwable paramMessage)
    {
      handlerActive = false;
      throw paramMessage;
    }
  }
}
