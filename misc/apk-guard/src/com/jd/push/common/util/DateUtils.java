package com.jd.push.common.util;

import android.text.TextUtils;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

public class DateUtils
{
  public static final String DATE_FORMAT = "yyyy-MM-dd";
  public static final String FORMAT_HH_MM = "HH:mm";
  public static final String FORMAT_HH_MM_SS = "HH:mm:ss";
  public static final String FORMAT_MMCDD = "MM?dd?";
  public static final String FORMAT_MMCDD_HH_MM = "MM?dd? HH:mm";
  public static final String FORMAT_MM_DD_HH_MM = "MM-dd HH:mm";
  public static final String FORMAT_MM_DD_HH_MM_SS = "MM-dd HH:mm:ss";
  public static final String FORMAT_MM_SS = "mm:ss";
  public static final String FORMAT_YYYY = "yyyy";
  public static final String FORMAT_YYYY2MM2DD = "yyyy.MM.dd";
  public static final String FORMAT_YYYY2MM2DD_HH_MM = "yyyy.MM.dd HH:mm";
  public static final String FORMAT_YYYYCMMCDD = "yyyy?MM?dd?";
  public static final String FORMAT_YYYY_MM = "yyyy-MM";
  public static final String FORMAT_YYYY_MM_DD_HH_MM = "yyyy-MM-dd HH:mm";
  public static final long ONE_DAY = 86400000L;
  public static final String TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
  
  public DateUtils() {}
  
  public static long convertToLong(String paramString1, String paramString2)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString1);
      if (!bool)
      {
        bool = TextUtils.isEmpty(paramString2);
        if (bool) {
          paramString2 = "yyyy-MM-dd HH:mm:ss";
        }
        long l = new SimpleDateFormat(paramString2, Locale.getDefault()).parse(paramString1).getTime();
        return l;
      }
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return 0L;
  }
  
  public static String convertToString(long paramLong)
  {
    if (paramLong > 0L) {
      return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(new Date(paramLong));
    }
    return "";
  }
  
  public static String currentTime()
  {
    return convertToString(System.currentTimeMillis());
  }
  
  public static Calendar getCalendar(long paramLong)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTimeInMillis(paramLong);
    return localCalendar;
  }
  
  public static int getDayOfMonth(int paramInt1, int paramInt2)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.set(paramInt1, paramInt2, 0);
    return localCalendar.get(5);
  }
  
  public static int getDayOffset(long paramLong1, long paramLong2)
  {
    if (paramLong1 > paramLong2) {
      paramLong2 = getDayStartTime(getCalendar(paramLong2)).getTimeInMillis();
    } else {
      paramLong1 = getDayStartTime(getCalendar(paramLong1)).getTimeInMillis();
    }
    return (int)((paramLong1 - paramLong2) / 86400000L);
  }
  
  public static Calendar getDayStartTime(Calendar paramCalendar)
  {
    paramCalendar.set(11, 0);
    paramCalendar.set(12, 0);
    paramCalendar.set(13, 0);
    paramCalendar.set(14, 0);
    return paramCalendar;
  }
  
  public static String getDurationInString(long paramLong)
  {
    if (paramLong == 0L) {
      return "0?";
    }
    long l1 = paramLong / 1000L;
    paramLong = l1 / 3600L;
    l1 -= 3600L * paramLong;
    long l2 = l1 / 60L;
    StringBuilder localStringBuilder;
    if (paramLong != 0L)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramLong);
      localStringBuilder.append("?");
      localStringBuilder.append(l2);
      localStringBuilder.append("?");
    }
    for (;;)
    {
      localStringBuilder.append(l1 - 60L * l2);
      localStringBuilder.append("?");
      return localStringBuilder.toString();
      if (l2 != 0L)
      {
        localStringBuilder = new StringBuilder();
        break;
      }
      localStringBuilder = new StringBuilder();
    }
  }
  
  public static String getWeekOfDate(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    int j = localCalendar.get(7) - 1;
    int i = j;
    if (j < 0) {
      i = 0;
    }
    return new String[] { "???", "???", "???", "???", "???", "???", "???" }[i];
  }
  
  public static boolean isThisMonth(Date paramDate)
  {
    return isThisTime(paramDate, "yyyy-MM");
  }
  
  private static boolean isThisTime(Date paramDate, String paramString)
  {
    paramString = new SimpleDateFormat(paramString);
    return paramString.format(paramDate).equals(paramString.format(new Date()));
  }
  
  public static boolean isThisWeek(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance(Locale.CHINA);
    localCalendar.setFirstDayOfWeek(2);
    int i = localCalendar.get(3);
    localCalendar.setTime(paramDate);
    return localCalendar.get(3) == i;
  }
  
  public static boolean isThisYear(Date paramDate)
  {
    return isThisTime(paramDate, "yyyy");
  }
  
  public static boolean isToday(Date paramDate)
  {
    return isThisTime(paramDate, "yyyy-MM-dd");
  }
  
  public static boolean isYesterDay(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    long l = paramDate.getTime() / 86400000L;
    return localCalendar.getTimeInMillis() / 86400000L - l == 1L;
  }
}
