package com.jd.push.common.util;

import android.content.Context;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class JdPushCrashHandler
  implements Thread.UncaughtExceptionHandler
{
  private static JdPushCrashHandler INSTANCE;
  public static final String SQL_UPDATE_6_4 = "CrashHandler";
  private DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss", Locale.getDefault());
  private Map<String, String> infos = new HashMap();
  private Context mContext;
  private Thread.UncaughtExceptionHandler mDefaultHandler;
  
  private JdPushCrashHandler() {}
  
  public static JdPushCrashHandler getInstance()
  {
    if (INSTANCE == null) {
      INSTANCE = new JdPushCrashHandler();
    }
    return INSTANCE;
  }
  
  private boolean handleException(Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return false;
    }
    uploadLog(paramThrowable);
    return true;
  }
  
  private String saveCrashInfo2File(Throwable paramThrowable)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject1 = infos.entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (Map.Entry)((Iterator)localObject1).next();
      localObject2 = (String)((Map.Entry)localObject3).getKey();
      localObject3 = (String)((Map.Entry)localObject3).getValue();
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append((String)localObject2);
      localStringBuilder.append("=");
      localStringBuilder.append((String)localObject3);
      localStringBuilder.append("\n");
      localStringBuffer.append(localStringBuilder.toString());
    }
    Object localObject2 = new StringWriter();
    Object localObject3 = new PrintWriter((Writer)localObject2);
    do
    {
      paramThrowable.printStackTrace((PrintWriter)localObject3);
      localObject1 = paramThrowable.getCause();
      paramThrowable = (Throwable)localObject1;
    } while (localObject1 != null);
    ((PrintWriter)localObject3).close();
    localStringBuffer.append(localObject2.toString());
    try
    {
      long l = System.currentTimeMillis();
      paramThrowable = formatter;
      paramThrowable = paramThrowable.format(new Date());
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("crash-");
      ((StringBuilder)localObject1).append(paramThrowable);
      ((StringBuilder)localObject1).append("-");
      ((StringBuilder)localObject1).append(l);
      ((StringBuilder)localObject1).append(".log");
      paramThrowable = ((StringBuilder)localObject1).toString();
      return paramThrowable;
    }
    catch (Exception paramThrowable)
    {
      for (;;) {}
    }
    return null;
  }
  
  public void collectDeviceInfo(Context paramContext) {}
  
  public void init(Context paramContext)
  {
    mContext = paramContext;
    mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();
    Thread.setDefaultUncaughtExceptionHandler(this);
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable) {}
  
  public String uploadLog(Throwable paramThrowable)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject1 = infos.entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (Map.Entry)((Iterator)localObject1).next();
      localObject2 = (String)((Map.Entry)localObject3).getKey();
      localObject3 = (String)((Map.Entry)localObject3).getValue();
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append((String)localObject2);
      localStringBuilder.append("=");
      localStringBuilder.append((String)localObject3);
      localStringBuilder.append("\n");
      localStringBuffer.append(localStringBuilder.toString());
    }
    Object localObject2 = new StringWriter();
    Object localObject3 = new PrintWriter((Writer)localObject2);
    for (;;)
    {
      localObject1 = paramThrowable.getCause();
      paramThrowable = (Throwable)localObject1;
      if (localObject1 == null) {
        break;
      }
      ((Throwable)localObject1).printStackTrace((PrintWriter)localObject3);
    }
    ((PrintWriter)localObject3).close();
    localStringBuffer.append(localObject2.toString());
    return null;
  }
}
