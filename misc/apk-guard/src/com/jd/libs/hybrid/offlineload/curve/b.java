package com.jd.libs.hybrid.offlineload.curve;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteQuery;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.jd.libs.hybrid.offlineload.curve.converter.RoomDateConverts;
import com.jd.libs.hybrid.offlineload.entity.CommonEntity;
import com.jd.libs.hybrid.offlineload.entity.FileDetail;
import java.util.ArrayList;
import java.util.List;

public final class b
  implements a
{
  private final SharedSQLiteStatement a;
  private final RoomDatabase b;
  final RoomDateConverts c = new RoomDateConverts();
  private final EntityDeletionOrUpdateAdapter f;
  private final EntityDeletionOrUpdateAdapter h;
  private final EntityInsertionAdapter i;
  
  public b(RoomDatabase paramRoomDatabase)
  {
    b = paramRoomDatabase;
    i = new DefaultManagedHttpClientConnection(this, paramRoomDatabase);
    f = new SessionInputBufferImpl(this, paramRoomDatabase);
    h = new BHttpConnectionBase(this, paramRoomDatabase);
    a = new AboutActivity.2(this, paramRoomDatabase);
  }
  
  public final void a(CommonEntity paramCommonEntity)
  {
    b.beginTransaction();
    try
    {
      h.handle(paramCommonEntity);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramCommonEntity)
    {
      b.endTransaction();
      throw paramCommonEntity;
    }
  }
  
  public final void a(List paramList)
  {
    b.beginTransaction();
    try
    {
      h.handleMultiple(paramList);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      b.endTransaction();
      throw paramList;
    }
  }
  
  public final void close()
  {
    SupportSQLiteStatement localSupportSQLiteStatement = a.acquire();
    b.beginTransaction();
    try
    {
      localSupportSQLiteStatement.executeUpdateDelete();
      b.setTransactionSuccessful();
      b.endTransaction();
      a.release(localSupportSQLiteStatement);
      return;
    }
    catch (Throwable localThrowable)
    {
      b.endTransaction();
      a.release(localSupportSQLiteStatement);
      throw localThrowable;
    }
  }
  
  public final void close(CommonEntity paramCommonEntity)
  {
    b.beginTransaction();
    try
    {
      f.handle(paramCommonEntity);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramCommonEntity)
    {
      b.endTransaction();
      throw paramCommonEntity;
    }
  }
  
  public final void close(List paramList)
  {
    b.beginTransaction();
    try
    {
      f.handleMultiple(paramList);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      b.endTransaction();
      throw paramList;
    }
  }
  
  public final List doInBackground()
  {
    Object localObject2 = RoomSQLiteQuery.acquire("SELECT * FROM HybridOfflineCommonEntity", 0);
    Object localObject1 = localObject2;
    Cursor localCursor = b.query((SupportSQLiteQuery)localObject2);
    localObject2 = localObject1;
    try
    {
      int j = localCursor.getColumnIndexOrThrow("id");
      localObject2 = localObject1;
      int k = localCursor.getColumnIndexOrThrow("url");
      localObject2 = localObject1;
      int m = localCursor.getColumnIndexOrThrow("versionCode");
      localObject2 = localObject1;
      int n = localCursor.getColumnIndexOrThrow("md5");
      localObject2 = localObject1;
      int i1 = localCursor.getColumnIndexOrThrow("available");
      localObject2 = localObject1;
      int i2 = localCursor.getColumnIndexOrThrow("createTimestamp");
      localObject2 = localObject1;
      int i3 = localCursor.getColumnIndexOrThrow("headersMap");
      localObject2 = localObject1;
      int i4 = localCursor.getColumnIndexOrThrow("localfile_path");
      localObject2 = localObject1;
      int i5 = localCursor.getColumnIndexOrThrow("localfile_lastModified");
      localObject2 = localObject1;
      int i6 = localCursor.getColumnIndexOrThrow("localfile_totalSpace");
      localObject2 = localObject1;
      ArrayList localArrayList = new ArrayList(localCursor.getCount());
      for (;;)
      {
        localObject2 = localObject1;
        boolean bool = localCursor.moveToNext();
        if (bool)
        {
          localObject2 = localObject1;
          bool = localCursor.isNull(i4);
          if (bool)
          {
            localObject2 = localObject1;
            bool = localCursor.isNull(i5);
            if (bool)
            {
              localObject2 = localObject1;
              bool = localCursor.isNull(i6);
              if (bool)
              {
                localObject2 = null;
                break label340;
              }
            }
          }
          localObject2 = localObject1;
          Object localObject3 = new FileDetail();
          localObject2 = localObject1;
          ((FileDetail)localObject3).setPath(localCursor.getString(i4));
          try
          {
            ((FileDetail)localObject3).setLastModified(localCursor.getLong(i5));
            ((FileDetail)localObject3).setTotalSpace(localCursor.getLong(i6));
            localObject2 = localObject3;
            label340:
            localObject3 = new CommonEntity();
            ((CommonEntity)localObject3).setId(localCursor.getString(j));
            ((CommonEntity)localObject3).setUrl(localCursor.getString(k));
            ((CommonEntity)localObject3).setVersionCode(localCursor.getInt(m));
            ((CommonEntity)localObject3).setMd5(localCursor.getString(n));
            int i7 = localCursor.getInt(i1);
            if (i7 != 0) {
              bool = true;
            } else {
              bool = false;
            }
            ((CommonEntity)localObject3).setAvailable(bool);
            ((CommonEntity)localObject3).setCreateTimestamp(localCursor.getLong(i2));
            String str = localCursor.getString(i3);
            ((CommonEntity)localObject3).setHeadersMap(c.fromString(str));
            ((CommonEntity)localObject3).setFileDetail((FileDetail)localObject2);
            localArrayList.add(localObject3);
          }
          catch (Throwable localThrowable2)
          {
            localObject2 = localObject1;
            localObject1 = localThrowable2;
            break label523;
          }
        }
      }
      localCursor.close();
      localObject1.release();
      return localArrayList;
    }
    catch (Throwable localThrowable1)
    {
      label523:
      localCursor.close();
      ((RoomSQLiteQuery)localObject2).release();
      throw localThrowable1;
    }
  }
  
  public final void update(List paramList)
  {
    b.beginTransaction();
    try
    {
      i.insert(paramList);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      b.endTransaction();
      throw paramList;
    }
  }
}
