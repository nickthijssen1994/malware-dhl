package com.jd.libs.hybrid.offlineload.loader;

import android.content.Context;
import android.text.TextUtils;
import com.jd.libs.hybrid.base.asm.BackendFuser;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.base.asm.Statement;
import com.jd.libs.hybrid.base.f;
import com.jd.libs.hybrid.offlineload.Label;
import com.jd.libs.hybrid.offlineload.entity.FileDetail;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;

public final class b
  implements Runnable
{
  public b(i paramI, String paramString, Label paramLabel) {}
  
  private static void write(String paramString1, String paramString2)
  {
    if (Log.i())
    {
      StringBuilder localStringBuilder = new StringBuilder("?????????????");
      localStringBuilder.append(paramString2);
      localStringBuilder.append("(");
      localStringBuilder.append(paramString1);
      localStringBuilder.append(")");
      Log.w("OfflineService", localStringBuilder.toString());
    }
  }
  
  public final void run()
  {
    Object localObject1 = a;
    try
    {
      boolean bool2 = TextUtils.isEmpty((CharSequence)localObject1);
      boolean bool1 = false;
      if (!bool2)
      {
        bool2 = f.e();
        if (!bool2)
        {
          localObject1 = a;
          int j = BackendFuser.update((String)localObject1);
          localObject1 = a;
          Object localObject2 = BackendFuser.format((String)localObject1);
          if (-1 != j)
          {
            localObject1 = d.a;
            localObject1 = ((com.jd.libs.hybrid.offlineload.curve.i)localObject1).getAccounts((String)localObject2, j);
          }
          else
          {
            localObject1 = d.a;
            localObject1 = ((com.jd.libs.hybrid.offlineload.curve.i)localObject1).getAccounts((String)localObject2);
          }
          if (localObject1 != null)
          {
            Object localObject3 = d;
            if (localObject1 != null)
            {
              ((OfflineEntity)localObject1).markVisited();
              ((OfflineEntity)localObject1).tryIncreaseLpWhenVisited();
              localObject3 = a;
              ((com.jd.libs.hybrid.offlineload.curve.i)localObject3).add((OfflineEntity)localObject1);
            }
            bool2 = ((OfflineEntity)localObject1).isAvailable();
            if (bool2)
            {
              localObject3 = new StringBuilder("[Offline-file] Query local offline files [found] for ");
              String str = a;
              ((StringBuilder)localObject3).append(str);
              Log.d(((StringBuilder)localObject3).toString());
              localObject3 = ((OfflineEntity)localObject1).getDocumentDir();
              if (localObject3 != null)
              {
                bool2 = ((OfflineEntity)localObject1).getDocumentFile().hasChanged();
                if (bool2) {}
              }
              else
              {
                localObject3 = ((OfflineEntity)localObject1).getSourceDir();
                if (localObject3 == null) {
                  break label253;
                }
                bool2 = ((OfflineEntity)localObject1).getSourceFile().hasChanged();
                if (!bool2) {
                  break label253;
                }
              }
              int i = 1;
              break label255;
              label253:
              i = 0;
              label255:
              if (i != 0)
              {
                bool1 = Log.i();
                if (bool1)
                {
                  localObject2 = a;
                  write((String)localObject2, "????????");
                }
                localObject2 = new StringBuilder("[Offline-file] Local files have been changed for ");
                localObject3 = a;
                ((StringBuilder)localObject2).append((String)localObject3);
                Log.d("OfflineService", ((StringBuilder)localObject2).toString());
                localObject2 = d;
                i.add((i)localObject2, (OfflineEntity)localObject1);
                localObject1 = b;
                ((Label)localObject1).a(null, false);
                return;
              }
              localObject3 = d.c;
              bool2 = Statement.evaluate((Context)localObject3, ((OfflineEntity)localObject1).getAppMin(), ((OfflineEntity)localObject1).getAppMax());
              if (!bool2)
              {
                bool1 = Log.i();
                if (bool1)
                {
                  localObject2 = a;
                  write((String)localObject2, "App??????????");
                }
                localObject2 = new StringBuilder("[Offline-file] App's version doesn't meet the offline's requirement: (");
                ((StringBuilder)localObject2).append(((OfflineEntity)localObject1).getAppMin());
                ((StringBuilder)localObject2).append("~");
                ((StringBuilder)localObject2).append(((OfflineEntity)localObject1).getAppMax());
                ((StringBuilder)localObject2).append(")");
                Log.d("OfflineService", ((StringBuilder)localObject2).toString());
                localObject1 = b;
                ((Label)localObject1).a(null, false);
                return;
              }
              if (-1 == j) {
                bool1 = ((OfflineEntity)localObject1).needCheckLatest();
              }
              localObject3 = b;
              ((Label)localObject3).a(i.add(true, (OfflineEntity)localObject1), bool1);
              if (!bool1) {
                return;
              }
              Log.d("OfflineService", "[Offline-file] Try to fetch latest config for ".concat(String.valueOf(localObject2)));
              localObject3 = d.b;
              str = ((OfflineEntity)localObject1).getAppid();
              ((OfflineEntityLoader)localObject3).f(str, new b.4.1(this, (String)localObject2, (OfflineEntity)localObject1));
              return;
            }
            localObject2 = new StringBuilder("[Offline-file] Available local offline files [NOT Found] for ");
            localObject3 = a;
            ((StringBuilder)localObject2).append((String)localObject3);
            Log.d("OfflineService", ((StringBuilder)localObject2).toString());
            localObject2 = b;
            ((Label)localObject2).a(i.add(false, (OfflineEntity)localObject1), false);
            return;
          }
          bool1 = Log.i();
          if (bool1)
          {
            localObject1 = a;
            write((String)localObject1, "???????");
          }
          localObject1 = new StringBuilder("[Offline-file] config [NOT Found] in DB for ");
          localObject2 = a;
          ((StringBuilder)localObject1).append((String)localObject2);
          Log.d("OfflineService", ((StringBuilder)localObject1).toString());
          localObject1 = b;
          ((Label)localObject1).a(null, false);
          return;
        }
      }
      bool1 = Log.i();
      if (bool1)
      {
        localObject1 = a;
        write((String)localObject1, "?????");
      }
      localObject1 = b;
      ((Label)localObject1).a(null, false);
      return;
    }
    catch (Exception localException)
    {
      Log.e("OfflineService", localException);
    }
  }
}
