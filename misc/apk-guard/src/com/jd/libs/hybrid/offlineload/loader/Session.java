package com.jd.libs.hybrid.offlineload.loader;

import android.content.Context;
import android.text.TextUtils;
import com.jd.libs.hybrid.base.a.TIntLongMap;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.base.f;
import com.jd.libs.hybrid.offlineload.Item;
import com.jd.libs.hybrid.offlineload.asm.Attribute;
import com.jd.libs.hybrid.offlineload.asm.GenericField;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntityInfo;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public final class Session
  implements Runnable
{
  public Session(i paramI, List paramList) {}
  
  public final void run()
  {
    Object localObject1 = q;
    try
    {
      Object localObject8 = TIntLongMap.put((List)localObject1);
      Object localObject2 = b;
      Object localObject4 = q;
      localObject1 = new Item();
      Object localObject3 = a;
      Object localObject7 = ((com.jd.libs.hybrid.offlineload.curve.i)localObject3).getCookies();
      Object localObject5 = new HashMap(((List)localObject4).size());
      localObject3 = new HashMap(((List)localObject7).size());
      Object localObject6 = ((List)localObject4).iterator();
      boolean bool;
      Object localObject9;
      for (;;)
      {
        bool = ((Iterator)localObject6).hasNext();
        if (!bool) {
          break;
        }
        localObject9 = ((Iterator)localObject6).next();
        localObject9 = (OfflineEntity)localObject9;
        OfflineEntity.resetDbUrl((OfflineEntity)localObject9);
        ((Map)localObject5).put(((OfflineEntity)localObject9).getDocumentUrl(), localObject9);
      }
      localObject6 = new HashSet(((List)localObject8).size());
      localObject8 = ((List)localObject8).iterator();
      for (;;)
      {
        bool = ((Iterator)localObject8).hasNext();
        if (!bool) {
          break;
        }
        localObject9 = ((Iterator)localObject8).next();
        localObject9 = (OfflineEntity)localObject9;
        bool = TextUtils.isEmpty(((OfflineEntity)localObject9).getAppid());
        if (!bool) {
          ((HashSet)localObject6).add(((OfflineEntity)localObject9).getAppid());
        }
      }
      localObject8 = new ArrayList();
      localObject7 = ((List)localObject7).iterator();
      Object localObject10;
      for (;;)
      {
        bool = ((Iterator)localObject7).hasNext();
        if (!bool) {
          break;
        }
        localObject9 = ((Iterator)localObject7).next();
        localObject9 = (OfflineEntity)localObject9;
        ((Map)localObject3).put(((OfflineEntity)localObject9).getDocumentUrl(), localObject9);
        localObject10 = ((Map)localObject5).get(((OfflineEntity)localObject9).getDocumentUrl());
        localObject10 = (OfflineEntity)localObject10;
        bool = ((HashSet)localObject6).contains(((OfflineEntity)localObject9).getAppid());
        if ((bool) || (localObject10 == null))
        {
          localObject10 = new StringBuilder("[Offline-file] Delete DB config and local files, because server's config list doesn't contain it or it is corrupted. ");
          ((StringBuilder)localObject10).append(((OfflineEntity)localObject9).getDocumentUrl());
          Log.d("OfflineService", ((StringBuilder)localObject10).toString());
          localObject10 = c;
          Attribute.a((Context)localObject10, (OfflineEntity)localObject9);
          ((List)localObject8).add(localObject9);
        }
      }
      x = ((List)localObject8);
      long l = f.i;
      if (l != 0L)
      {
        bool = GenericField.set(l, System.currentTimeMillis());
        if (bool)
        {
          Log.d("OfflineService-Priority", "[Offline-file] No need to recalculate priority for today. last time = ".concat(String.valueOf(l)));
          i = 0;
          break label473;
        }
      }
      f.add(System.currentTimeMillis());
      Log.d("OfflineService-Priority", "[Offline-file] Need to recalculate every existed entity's priority for today. last time = ".concat(String.valueOf(l)));
      int i = 1;
      label473:
      localObject5 = new ArrayList();
      localObject6 = new ArrayList();
      localObject4 = ((List)localObject4).iterator();
      for (;;)
      {
        bool = ((Iterator)localObject4).hasNext();
        if (!bool) {
          break;
        }
        localObject7 = ((Iterator)localObject4).next();
        localObject7 = (OfflineEntity)localObject7;
        localObject8 = ((Map)localObject3).get(((OfflineEntity)localObject7).getDocumentUrl());
        localObject8 = (OfflineEntity)localObject8;
        if (localObject8 == null)
        {
          localObject8 = new StringBuilder("[Offline-file] Insert new config into DB for ");
          ((StringBuilder)localObject8).append(((OfflineEntity)localObject7).getDocumentUrl());
          Log.d("OfflineService", ((StringBuilder)localObject8).toString());
          ((OfflineEntity)localObject7).setCreateTime();
          ((OfflineEntity)localObject7).setAvailable(false);
          ((List)localObject5).add(localObject7);
        }
        else
        {
          int j = ((OfflineEntity)localObject7).getFileInfo().getVersionCode();
          int k = ((OfflineEntity)localObject8).getFileInfo().getVersionCode();
          if (j == k)
          {
            bool = ((OfflineEntity)localObject7).getFileInfo().getUrl().equalsIgnoreCase(((OfflineEntity)localObject8).getFileInfo().getUrl());
            if (bool)
            {
              ((OfflineEntity)localObject7).copyLocalFileInfoFromOld((OfflineEntity)localObject8);
              break label765;
            }
          }
          localObject9 = Locale.getDefault();
          localObject10 = ((OfflineEntity)localObject8).getDocumentUrl();
          j = ((OfflineEntity)localObject8).getFileInfo().getVersionCode();
          k = ((OfflineEntity)localObject7).getFileInfo().getVersionCode();
          Log.d("OfflineService", String.format((Locale)localObject9, "[Offline-file] Delete local files because versions/zipUrl differ for %s, ver: old=%d, new=%d", new Object[] { localObject10, Integer.valueOf(j), Integer.valueOf(k) }));
          localObject9 = c;
          Attribute.a((Context)localObject9, (OfflineEntity)localObject8);
          ((OfflineEntity)localObject8).setAvailable(false);
          ((OfflineEntity)localObject7).setAvailable(false);
          label765:
          ((OfflineEntity)localObject7).copyLocalInfoFromOld((OfflineEntity)localObject8);
          if (i != 0) {
            ((OfflineEntity)localObject7).calculateLpEveryTimeGap();
          }
          localObject9 = new StringBuilder("[Offline-file] Update DB config for ");
          ((StringBuilder)localObject9).append(((OfflineEntity)localObject8).getDocumentUrl());
          Log.d("OfflineService", ((StringBuilder)localObject9).toString());
          ((List)localObject6).add(localObject7);
        }
      }
      b = ((List)localObject5);
      c = ((List)localObject6);
      localObject2 = b;
      localObject2 = i.a((i)localObject2, (Item)localObject1);
      if (x != null)
      {
        localObject3 = b.a;
        localObject4 = x;
        ((com.jd.libs.hybrid.offlineload.curve.i)localObject3).a((List)localObject4);
      }
      if (b != null)
      {
        localObject3 = b.a;
        localObject4 = b;
        ((com.jd.libs.hybrid.offlineload.curve.i)localObject3).update((List)localObject4);
      }
      if (c != null)
      {
        localObject3 = b.a;
        localObject1 = c;
        ((com.jd.libs.hybrid.offlineload.curve.i)localObject3).add((List)localObject1);
      }
      if (localObject2 != null)
      {
        bool = ((List)localObject2).isEmpty();
        if (!bool)
        {
          localObject1 = b;
          i.a((i)localObject1, (List)localObject2);
          return;
        }
      }
      Log.d("OfflineService", "[Offline-file] No new file need to download");
      return;
    }
    catch (Exception localException)
    {
      Log.e("OfflineService", localException);
    }
  }
}
