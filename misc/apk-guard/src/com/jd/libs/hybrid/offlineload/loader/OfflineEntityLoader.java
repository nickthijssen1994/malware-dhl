package com.jd.libs.hybrid.offlineload.loader;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jd.libs.hybrid.base.ClassWriter;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.base.f;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.jingdong.common.network.HttpGroupUtils;
import com.jingdong.jdsdk.network.toolbox.HttpError;
import com.jingdong.jdsdk.network.toolbox.HttpGroup;
import com.jingdong.jdsdk.network.toolbox.HttpGroup.HttpTaskListener;
import com.jingdong.jdsdk.network.toolbox.HttpGroup.OnAllListener;
import com.jingdong.jdsdk.network.toolbox.HttpResponse;
import com.jingdong.jdsdk.network.toolbox.HttpSetting;
import com.jingdong.jdsdk.network.utils.Base64;
import com.jingdong.jdsdk.utils.JSONObjectProxy;

public class OfflineEntityLoader
{
  public OfflineEntityLoader() {}
  
  private static String getAppVersionCode()
  {
    try
    {
      PackageInfo localPackageInfo = f.getContext().getPackageManager().getPackageInfo(f.getContext().getPackageName(), 0);
      return versionName;
    }
    catch (Exception localException)
    {
      Log.e("OfflineEntityLoader", localException);
    }
    return "";
  }
  
  private static String read(String paramString)
  {
    if (!TextUtils.isEmpty(paramString)) {
      try
      {
        int i = paramString.length();
        int k;
        if (i > 3)
        {
          int j = i - 3;
          k = paramString.charAt(j);
          k -= 48;
          if ((k >= 0) && (k <= 9))
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append(paramString.substring(0, j));
            ((StringBuilder)localObject).append(paramString.substring(i - 2));
            localObject = ((StringBuilder)localObject).toString().substring(k);
            localObject = new String(Base64.decode((String)localObject), "utf-8");
            return localObject;
          }
        }
        for (Object localObject = "Fail to decrypt. Encrypted string's insert-count is wrong, count = ".concat(String.valueOf(k));; localObject = "Fail to decrypt. Encrypted string too short, string = ".concat(String.valueOf(paramString)))
        {
          Log.e("OfflineEntityLoader", (String)localObject);
          break;
        }
        Log.e("OfflineEntityLoader", "Return the raw data = ".concat(String.valueOf(paramString)));
      }
      catch (Exception localException)
      {
        Log.e("OfflineEntityLoader", "Fail to decrypt.", localException);
      }
    }
    return paramString;
  }
  
  private static void sendUpdate(HttpSetting paramHttpSetting)
  {
    paramHttpSetting.putQueryParam("client", "android");
    paramHttpSetting.putQueryParam("clientVersion", getAppVersionCode());
    paramHttpSetting.putQueryParam("osVersion", Build.VERSION.RELEASE);
    paramHttpSetting.putQueryParam("d_model", Build.MODEL);
  }
  
  public void f(final Callback paramCallback)
  {
    HttpSetting localHttpSetting = new HttpSetting();
    localHttpSetting.setCacheMode(2);
    localHttpSetting.setPost(false);
    if (ClassWriter.get()) {
      localHttpSetting.setUseHttps(false);
    }
    if (ClassWriter.b())
    {
      localHttpSetting.setFunctionId("hybrid");
      localHttpSetting.putJsonParam("api-version", "1.2.0");
      localHttpSetting.putJsonParam("app-key", f.a());
      localHttpSetting.putJsonParam("app-type", "android");
      sendUpdate(localHttpSetting);
      localHttpSetting.setHost(ClassWriter.c());
    }
    else
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(ClassWriter.a());
      localStringBuilder.append("?api-version=1.2.0&app-key=");
      localStringBuilder.append(f.a());
      localStringBuilder.append("&app-type=android&client=android&clientVersion=");
      localStringBuilder.append(getAppVersionCode());
      localHttpSetting.setFinalUrl(localStringBuilder.toString());
    }
    localHttpSetting.setListener((HttpGroup.HttpTaskListener)new a()
    {
      public final void onEnd(HttpResponse paramAnonymousHttpResponse)
      {
        try
        {
          paramAnonymousHttpResponse = paramAnonymousHttpResponse.getJSONObject();
          if (paramAnonymousHttpResponse != null)
          {
            boolean bool = paramAnonymousHttpResponse.has("data");
            if (bool)
            {
              paramAnonymousHttpResponse = OfflineEntityLoader.get(paramAnonymousHttpResponse.getString("data"));
              localCallback = paramCallback;
              localCallback.a(paramAnonymousHttpResponse);
              return;
            }
          }
          paramAnonymousHttpResponse = paramCallback;
          paramAnonymousHttpResponse.add(new IllegalArgumentException());
          return;
        }
        catch (Exception paramAnonymousHttpResponse)
        {
          OfflineEntityLoader.Callback localCallback = paramCallback;
          if (localCallback != null) {
            localCallback.add(paramAnonymousHttpResponse);
          }
        }
      }
      
      public final void onError(HttpError paramAnonymousHttpError)
      {
        OfflineEntityLoader.Callback localCallback = paramCallback;
        if (localCallback != null) {
          localCallback.add((Exception)paramAnonymousHttpError);
        }
      }
    });
    Log.d("OfflineEntityLoader", "Start to request all configs.");
    HttpGroupUtils.getHttpGroupaAsynPool().add(localHttpSetting);
  }
  
  public void f(String paramString, final Callback paramCallback)
  {
    HttpSetting localHttpSetting = new HttpSetting();
    localHttpSetting.setCacheMode(2);
    localHttpSetting.setPost(false);
    if (ClassWriter.get()) {
      localHttpSetting.setUseHttps(false);
    }
    if (ClassWriter.b())
    {
      localHttpSetting.setFunctionId("hybridResourceItem");
      localHttpSetting.putJsonParam("id", paramString);
      localHttpSetting.putJsonParam("app-key", f.a());
      localHttpSetting.putJsonParam("app-type", "android");
      localHttpSetting.putJsonParam("api-version", "1.2.0");
      sendUpdate(localHttpSetting);
      localHttpSetting.setHost(ClassWriter.c());
    }
    else
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(ClassWriter.a());
      localStringBuilder.append("/resource/item?id=");
      localStringBuilder.append(paramString);
      localStringBuilder.append("&api-version=1.2.0&app-key=");
      localStringBuilder.append(f.a());
      localStringBuilder.append("&app-type=android&client=android&clientVersion=");
      localStringBuilder.append(getAppVersionCode());
      localHttpSetting.setFinalUrl(localStringBuilder.toString());
      if (f.c()) {
        localHttpSetting.setUseHttps(false);
      }
    }
    localHttpSetting.setListener((HttpGroup.HttpTaskListener)new a()
    {
      public final void onEnd(HttpResponse paramAnonymousHttpResponse)
      {
        try
        {
          paramAnonymousHttpResponse = paramAnonymousHttpResponse.getJSONObject();
          if (paramAnonymousHttpResponse != null)
          {
            boolean bool = paramAnonymousHttpResponse.has("data");
            if (bool)
            {
              paramAnonymousHttpResponse = OfflineEntityLoader.get(paramAnonymousHttpResponse.getString("data"));
              bool = TextUtils.isEmpty(paramAnonymousHttpResponse);
              if (!bool)
              {
                bool = paramAnonymousHttpResponse.equalsIgnoreCase("null");
                if (!bool)
                {
                  if (paramCallback == null) {
                    return;
                  }
                  paramAnonymousHttpResponse = JDJSON.parseObject(paramAnonymousHttpResponse, OfflineEntity.class);
                  paramAnonymousHttpResponse = (OfflineEntity)paramAnonymousHttpResponse;
                  bool = paramAnonymousHttpResponse.useful();
                  if (bool)
                  {
                    localCallback = paramCallback;
                    localCallback.a(paramAnonymousHttpResponse);
                    return;
                  }
                  paramAnonymousHttpResponse = paramCallback;
                  paramAnonymousHttpResponse.add(new IllegalArgumentException());
                  return;
                }
              }
              paramAnonymousHttpResponse = paramCallback;
              paramAnonymousHttpResponse.add(new OfflineEntityLoader.Callback.a());
              return;
            }
          }
          paramAnonymousHttpResponse = paramCallback;
          paramAnonymousHttpResponse.add(new IllegalArgumentException());
          return;
        }
        catch (Exception paramAnonymousHttpResponse)
        {
          OfflineEntityLoader.Callback localCallback = paramCallback;
          if (localCallback != null) {
            localCallback.add(paramAnonymousHttpResponse);
          }
        }
      }
      
      public final void onError(HttpError paramAnonymousHttpError)
      {
        OfflineEntityLoader.Callback localCallback = paramCallback;
        if (localCallback != null) {
          localCallback.add((Exception)paramAnonymousHttpError);
        }
      }
    });
    Log.d("OfflineEntityLoader", "Start to request config for appId = ".concat(String.valueOf(paramString)));
    HttpGroupUtils.getHttpGroupaAsynPool().add(localHttpSetting);
  }
  
  public static abstract interface Callback<T>
  {
    public abstract void a(Object paramObject);
    
    public abstract void add(Exception paramException);
    
    public static final class a
      extends Exception
    {
      public a() {}
    }
  }
  
  static abstract class a
    implements HttpGroup.OnAllListener
  {
    a() {}
    
    public void onEnd(HttpResponse paramHttpResponse) {}
    
    public void onError(HttpError paramHttpError) {}
    
    public void onProgress(int paramInt1, int paramInt2) {}
    
    public void onStart() {}
  }
}
