package com.jd.libs.hybrid.offlineload.curve;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.jd.libs.hybrid.offlineload.entity.FileDetail;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntityInfo;
import java.util.ArrayList;
import java.util.List;

public final class d
  implements i
{
  private final EntityInsertionAdapter mContext;
  private final RoomDatabase mDb;
  private final EntityDeletionOrUpdateAdapter mId;
  private final SharedSQLiteStatement process;
  private final EntityDeletionOrUpdateAdapter this$0;
  
  public d(RoomDatabase paramRoomDatabase)
  {
    mDb = paramRoomDatabase;
    mContext = new Label(this, paramRoomDatabase);
    mId = new SettingsActivity(this, paramRoomDatabase);
    this$0 = new c(this, paramRoomDatabase);
    process = new ColorPickerDialog(this, paramRoomDatabase);
  }
  
  public final void a(OfflineEntity paramOfflineEntity)
  {
    mDb.beginTransaction();
    try
    {
      mId.handle(paramOfflineEntity);
      mDb.setTransactionSuccessful();
      mDb.endTransaction();
      return;
    }
    catch (Throwable paramOfflineEntity)
    {
      mDb.endTransaction();
      throw paramOfflineEntity;
    }
  }
  
  public final void a(List paramList)
  {
    mDb.beginTransaction();
    try
    {
      mId.handleMultiple(paramList);
      mDb.setTransactionSuccessful();
      mDb.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      mDb.endTransaction();
      throw paramList;
    }
  }
  
  public final void add(OfflineEntity paramOfflineEntity)
  {
    mDb.beginTransaction();
    try
    {
      this$0.handle(paramOfflineEntity);
      mDb.setTransactionSuccessful();
      mDb.endTransaction();
      return;
    }
    catch (Throwable paramOfflineEntity)
    {
      mDb.endTransaction();
      throw paramOfflineEntity;
    }
  }
  
  public final void add(List paramList)
  {
    mDb.beginTransaction();
    try
    {
      this$0.handleMultiple(paramList);
      mDb.setTransactionSuccessful();
      mDb.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      mDb.endTransaction();
      throw paramList;
    }
  }
  
  public final void close()
  {
    SupportSQLiteStatement localSupportSQLiteStatement = process.acquire();
    mDb.beginTransaction();
    try
    {
      localSupportSQLiteStatement.executeUpdateDelete();
      mDb.setTransactionSuccessful();
      mDb.endTransaction();
      process.release(localSupportSQLiteStatement);
      return;
    }
    catch (Throwable localThrowable)
    {
      mDb.endTransaction();
      process.release(localSupportSQLiteStatement);
      throw localThrowable;
    }
  }
  
  public final OfflineEntity getAccounts(String paramString)
  {
    RoomSQLiteQuery localRoomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM HybridOfflineEntity WHERE documentUrl=? OR originalUrl=? LIMIT 1", 2);
    if (paramString == null) {
      localRoomSQLiteQuery.bindNull(1);
    } else {
      localRoomSQLiteQuery.bindString(1, paramString);
    }
    if (paramString == null) {
      localRoomSQLiteQuery.bindNull(2);
    } else {
      localRoomSQLiteQuery.bindString(2, paramString);
    }
    Cursor localCursor = mDb.query(localRoomSQLiteQuery);
    try
    {
      int m = localCursor.getColumnIndexOrThrow("appid");
      int n = localCursor.getColumnIndexOrThrow("name");
      int i1 = localCursor.getColumnIndexOrThrow("documentUrl");
      int i2 = localCursor.getColumnIndexOrThrow("originalUrl");
      int i3 = localCursor.getColumnIndexOrThrow("documentDir");
      int i4 = localCursor.getColumnIndexOrThrow("sourceRoot");
      int i5 = localCursor.getColumnIndexOrThrow("sourceDir");
      int i6 = localCursor.getColumnIndexOrThrow("appMin");
      int i7 = localCursor.getColumnIndexOrThrow("appMax");
      int i8 = localCursor.getColumnIndexOrThrow("serverPriority");
      int i9 = localCursor.getColumnIndexOrThrow("checkType");
      int i10 = localCursor.getColumnIndexOrThrow("available");
      int i = localCursor.getColumnIndexOrThrow("createTimestamp");
      int j = localCursor.getColumnIndexOrThrow("lastVisitTimestamp");
      try
      {
        int k = localCursor.getColumnIndexOrThrow("localPriorityInfo");
        int i11 = localCursor.getColumnIndexOrThrow("file_url");
        int i12 = localCursor.getColumnIndexOrThrow("file_version");
        int i13 = localCursor.getColumnIndexOrThrow("file_versionCode");
        int i14 = localCursor.getColumnIndexOrThrow("file_md5");
        int i15 = localCursor.getColumnIndexOrThrow("file_fileType");
        int i16 = localCursor.getColumnIndexOrThrow("file_password");
        int i17 = localCursor.getColumnIndexOrThrow("document_path");
        int i18 = localCursor.getColumnIndexOrThrow("document_lastModified");
        int i19 = localCursor.getColumnIndexOrThrow("document_totalSpace");
        int i20 = localCursor.getColumnIndexOrThrow("source_path");
        int i21 = localCursor.getColumnIndexOrThrow("source_lastModified");
        int i22 = localCursor.getColumnIndexOrThrow("source_totalSpace");
        int i23 = localCursor.getColumnIndexOrThrow("zip_path");
        int i24 = localCursor.getColumnIndexOrThrow("zip_lastModified");
        int i25 = localCursor.getColumnIndexOrThrow("zip_totalSpace");
        boolean bool = localCursor.moveToFirst();
        paramString = null;
        if (bool)
        {
          bool = localCursor.isNull(i11);
          if (bool)
          {
            bool = localCursor.isNull(i12);
            if (bool)
            {
              bool = localCursor.isNull(i13);
              if (bool)
              {
                bool = localCursor.isNull(i14);
                if (bool)
                {
                  bool = localCursor.isNull(i15);
                  if (bool)
                  {
                    bool = localCursor.isNull(i16);
                    if (bool)
                    {
                      paramString = null;
                      break label593;
                    }
                  }
                }
              }
            }
          }
          paramString = new OfflineEntityInfo();
          paramString.setUrl(localCursor.getString(i11));
          paramString.setVersion(localCursor.getString(i12));
          paramString.setVersionCode(localCursor.getInt(i13));
          paramString.setMd5(localCursor.getString(i14));
          paramString.setFileType(localCursor.getString(i15));
          paramString.setPassword(localCursor.getString(i16));
          label593:
          bool = localCursor.isNull(i17);
          if (bool)
          {
            bool = localCursor.isNull(i18);
            if (bool)
            {
              bool = localCursor.isNull(i19);
              if (bool)
              {
                localFileDetail1 = null;
                break label701;
              }
            }
          }
          FileDetail localFileDetail1 = new FileDetail();
          localFileDetail1.setPath(localCursor.getString(i17));
          localFileDetail1.setLastModified(localCursor.getLong(i18));
          localFileDetail1.setTotalSpace(localCursor.getLong(i19));
          label701:
          bool = localCursor.isNull(i20);
          if (bool)
          {
            bool = localCursor.isNull(i21);
            if (bool)
            {
              bool = localCursor.isNull(i22);
              if (bool)
              {
                localFileDetail2 = null;
                break label809;
              }
            }
          }
          FileDetail localFileDetail2 = new FileDetail();
          localFileDetail2.setPath(localCursor.getString(i20));
          localFileDetail2.setLastModified(localCursor.getLong(i21));
          localFileDetail2.setTotalSpace(localCursor.getLong(i22));
          label809:
          bool = localCursor.isNull(i23);
          if (bool)
          {
            bool = localCursor.isNull(i24);
            if (bool)
            {
              bool = localCursor.isNull(i25);
              if (bool)
              {
                localFileDetail3 = null;
                break label917;
              }
            }
          }
          FileDetail localFileDetail3 = new FileDetail();
          localFileDetail3.setPath(localCursor.getString(i23));
          localFileDetail3.setLastModified(localCursor.getLong(i24));
          localFileDetail3.setTotalSpace(localCursor.getLong(i25));
          label917:
          OfflineEntity localOfflineEntity = new OfflineEntity();
          localOfflineEntity.setAppid(localCursor.getString(m));
          localOfflineEntity.setName(localCursor.getString(n));
          localOfflineEntity.setDocumentUrl(localCursor.getString(i1));
          localOfflineEntity.setOriginalUrl(localCursor.getString(i2));
          localOfflineEntity.setDocumentDir(localCursor.getString(i3));
          localOfflineEntity.setSourceRoot(localCursor.getString(i4));
          localOfflineEntity.setSourceDir(localCursor.getString(i5));
          localOfflineEntity.setAppMin(localCursor.getString(i6));
          localOfflineEntity.setAppMax(localCursor.getString(i7));
          localOfflineEntity.setServerPriority(localCursor.getInt(i8));
          localOfflineEntity.setCheckType(localCursor.getString(i9));
          m = localCursor.getInt(i10);
          if (m != 0) {
            bool = true;
          } else {
            bool = false;
          }
          localOfflineEntity.setAvailable(bool);
          localOfflineEntity.setCreateTimestamp(localCursor.getLong(i));
          localOfflineEntity.setLastVisitTimestamp(localCursor.getLong(j));
          localOfflineEntity.setLocalPriorityInfo(localCursor.getString(k));
          localOfflineEntity.setFileInfo(paramString);
          localOfflineEntity.setDocumentFile(localFileDetail1);
          localOfflineEntity.setSourceFile(localFileDetail2);
          localOfflineEntity.setZipFile(localFileDetail3);
          paramString = localOfflineEntity;
        }
        localCursor.close();
        localRoomSQLiteQuery.release();
        return paramString;
      }
      catch (Throwable paramString) {}
      localCursor.close();
    }
    catch (Throwable paramString) {}
    localRoomSQLiteQuery.release();
    throw paramString;
  }
  
  public final OfflineEntity getAccounts(String paramString, int paramInt)
  {
    RoomSQLiteQuery localRoomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM HybridOfflineEntity WHERE (documentUrl=? OR originalUrl=?) AND file_versionCode= ? LIMIT 1", 3);
    if (paramString == null) {
      localRoomSQLiteQuery.bindNull(1);
    } else {
      localRoomSQLiteQuery.bindString(1, paramString);
    }
    if (paramString == null) {
      localRoomSQLiteQuery.bindNull(2);
    } else {
      localRoomSQLiteQuery.bindString(2, paramString);
    }
    localRoomSQLiteQuery.bindLong(3, paramInt);
    Cursor localCursor = mDb.query(localRoomSQLiteQuery);
    try
    {
      int k = localCursor.getColumnIndexOrThrow("appid");
      int m = localCursor.getColumnIndexOrThrow("name");
      int n = localCursor.getColumnIndexOrThrow("documentUrl");
      int i1 = localCursor.getColumnIndexOrThrow("originalUrl");
      int i2 = localCursor.getColumnIndexOrThrow("documentDir");
      int i3 = localCursor.getColumnIndexOrThrow("sourceRoot");
      int i4 = localCursor.getColumnIndexOrThrow("sourceDir");
      int i5 = localCursor.getColumnIndexOrThrow("appMin");
      int i6 = localCursor.getColumnIndexOrThrow("appMax");
      int i7 = localCursor.getColumnIndexOrThrow("serverPriority");
      int i8 = localCursor.getColumnIndexOrThrow("checkType");
      int i9 = localCursor.getColumnIndexOrThrow("available");
      paramInt = localCursor.getColumnIndexOrThrow("createTimestamp");
      int i = localCursor.getColumnIndexOrThrow("lastVisitTimestamp");
      try
      {
        int j = localCursor.getColumnIndexOrThrow("localPriorityInfo");
        int i10 = localCursor.getColumnIndexOrThrow("file_url");
        int i11 = localCursor.getColumnIndexOrThrow("file_version");
        int i12 = localCursor.getColumnIndexOrThrow("file_versionCode");
        int i13 = localCursor.getColumnIndexOrThrow("file_md5");
        int i14 = localCursor.getColumnIndexOrThrow("file_fileType");
        int i15 = localCursor.getColumnIndexOrThrow("file_password");
        int i16 = localCursor.getColumnIndexOrThrow("document_path");
        int i17 = localCursor.getColumnIndexOrThrow("document_lastModified");
        int i18 = localCursor.getColumnIndexOrThrow("document_totalSpace");
        int i19 = localCursor.getColumnIndexOrThrow("source_path");
        int i20 = localCursor.getColumnIndexOrThrow("source_lastModified");
        int i21 = localCursor.getColumnIndexOrThrow("source_totalSpace");
        int i22 = localCursor.getColumnIndexOrThrow("zip_path");
        int i23 = localCursor.getColumnIndexOrThrow("zip_lastModified");
        int i24 = localCursor.getColumnIndexOrThrow("zip_totalSpace");
        boolean bool = localCursor.moveToFirst();
        paramString = null;
        if (bool)
        {
          bool = localCursor.isNull(i10);
          if (bool)
          {
            bool = localCursor.isNull(i11);
            if (bool)
            {
              bool = localCursor.isNull(i12);
              if (bool)
              {
                bool = localCursor.isNull(i13);
                if (bool)
                {
                  bool = localCursor.isNull(i14);
                  if (bool)
                  {
                    bool = localCursor.isNull(i15);
                    if (bool)
                    {
                      paramString = null;
                      break label602;
                    }
                  }
                }
              }
            }
          }
          paramString = new OfflineEntityInfo();
          paramString.setUrl(localCursor.getString(i10));
          paramString.setVersion(localCursor.getString(i11));
          paramString.setVersionCode(localCursor.getInt(i12));
          paramString.setMd5(localCursor.getString(i13));
          paramString.setFileType(localCursor.getString(i14));
          paramString.setPassword(localCursor.getString(i15));
          label602:
          bool = localCursor.isNull(i16);
          if (bool)
          {
            bool = localCursor.isNull(i17);
            if (bool)
            {
              bool = localCursor.isNull(i18);
              if (bool)
              {
                localFileDetail1 = null;
                break label710;
              }
            }
          }
          FileDetail localFileDetail1 = new FileDetail();
          localFileDetail1.setPath(localCursor.getString(i16));
          localFileDetail1.setLastModified(localCursor.getLong(i17));
          localFileDetail1.setTotalSpace(localCursor.getLong(i18));
          label710:
          bool = localCursor.isNull(i19);
          if (bool)
          {
            bool = localCursor.isNull(i20);
            if (bool)
            {
              bool = localCursor.isNull(i21);
              if (bool)
              {
                localFileDetail2 = null;
                break label818;
              }
            }
          }
          FileDetail localFileDetail2 = new FileDetail();
          localFileDetail2.setPath(localCursor.getString(i19));
          localFileDetail2.setLastModified(localCursor.getLong(i20));
          localFileDetail2.setTotalSpace(localCursor.getLong(i21));
          label818:
          bool = localCursor.isNull(i22);
          if (bool)
          {
            bool = localCursor.isNull(i23);
            if (bool)
            {
              bool = localCursor.isNull(i24);
              if (bool)
              {
                localFileDetail3 = null;
                break label926;
              }
            }
          }
          FileDetail localFileDetail3 = new FileDetail();
          localFileDetail3.setPath(localCursor.getString(i22));
          localFileDetail3.setLastModified(localCursor.getLong(i23));
          localFileDetail3.setTotalSpace(localCursor.getLong(i24));
          label926:
          OfflineEntity localOfflineEntity = new OfflineEntity();
          localOfflineEntity.setAppid(localCursor.getString(k));
          localOfflineEntity.setName(localCursor.getString(m));
          localOfflineEntity.setDocumentUrl(localCursor.getString(n));
          localOfflineEntity.setOriginalUrl(localCursor.getString(i1));
          localOfflineEntity.setDocumentDir(localCursor.getString(i2));
          localOfflineEntity.setSourceRoot(localCursor.getString(i3));
          localOfflineEntity.setSourceDir(localCursor.getString(i4));
          localOfflineEntity.setAppMin(localCursor.getString(i5));
          localOfflineEntity.setAppMax(localCursor.getString(i6));
          localOfflineEntity.setServerPriority(localCursor.getInt(i7));
          localOfflineEntity.setCheckType(localCursor.getString(i8));
          k = localCursor.getInt(i9);
          if (k != 0) {
            bool = true;
          } else {
            bool = false;
          }
          localOfflineEntity.setAvailable(bool);
          localOfflineEntity.setCreateTimestamp(localCursor.getLong(paramInt));
          localOfflineEntity.setLastVisitTimestamp(localCursor.getLong(i));
          localOfflineEntity.setLocalPriorityInfo(localCursor.getString(j));
          localOfflineEntity.setFileInfo(paramString);
          localOfflineEntity.setDocumentFile(localFileDetail1);
          localOfflineEntity.setSourceFile(localFileDetail2);
          localOfflineEntity.setZipFile(localFileDetail3);
          paramString = localOfflineEntity;
        }
        localCursor.close();
        localRoomSQLiteQuery.release();
        return paramString;
      }
      catch (Throwable paramString) {}
      localCursor.close();
    }
    catch (Throwable paramString) {}
    localRoomSQLiteQuery.release();
    throw paramString;
  }
  
  public final List getCookies()
  {
    RoomSQLiteQuery localRoomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM HybridOfflineEntity", 0);
    Cursor localCursor = mDb.query(localRoomSQLiteQuery);
    try
    {
      int j = localCursor.getColumnIndexOrThrow("appid");
      int n = localCursor.getColumnIndexOrThrow("name");
      int i1 = localCursor.getColumnIndexOrThrow("documentUrl");
      int i2 = localCursor.getColumnIndexOrThrow("originalUrl");
      int i3 = localCursor.getColumnIndexOrThrow("documentDir");
      int i4 = localCursor.getColumnIndexOrThrow("sourceRoot");
      int i5 = localCursor.getColumnIndexOrThrow("sourceDir");
      int i6 = localCursor.getColumnIndexOrThrow("appMin");
      int i7 = localCursor.getColumnIndexOrThrow("appMax");
      int i8 = localCursor.getColumnIndexOrThrow("serverPriority");
      int i = localCursor.getColumnIndexOrThrow("checkType");
      int i9 = localCursor.getColumnIndexOrThrow("available");
      int i10 = localCursor.getColumnIndexOrThrow("createTimestamp");
      int i11 = localCursor.getColumnIndexOrThrow("lastVisitTimestamp");
      try
      {
        int i12 = localCursor.getColumnIndexOrThrow("localPriorityInfo");
        int i13 = localCursor.getColumnIndexOrThrow("file_url");
        int i14 = localCursor.getColumnIndexOrThrow("file_version");
        int i15 = localCursor.getColumnIndexOrThrow("file_versionCode");
        int i16 = localCursor.getColumnIndexOrThrow("file_md5");
        int i17 = localCursor.getColumnIndexOrThrow("file_fileType");
        int i18 = localCursor.getColumnIndexOrThrow("file_password");
        int i19 = localCursor.getColumnIndexOrThrow("document_path");
        int i20 = localCursor.getColumnIndexOrThrow("document_lastModified");
        int i21 = localCursor.getColumnIndexOrThrow("document_totalSpace");
        int i22 = localCursor.getColumnIndexOrThrow("source_path");
        int i23 = localCursor.getColumnIndexOrThrow("source_lastModified");
        int i24 = localCursor.getColumnIndexOrThrow("source_totalSpace");
        int i25 = localCursor.getColumnIndexOrThrow("zip_path");
        int m = localCursor.getColumnIndexOrThrow("zip_lastModified");
        int k = localCursor.getColumnIndexOrThrow("zip_totalSpace");
        Object localObject2;
        for (Object localObject1 = new ArrayList(localCursor.getCount());; localObject1 = localObject2)
        {
          boolean bool = localCursor.moveToNext();
          if (!bool) {
            break;
          }
          bool = localCursor.isNull(i13);
          if (bool)
          {
            bool = localCursor.isNull(i14);
            if (bool)
            {
              bool = localCursor.isNull(i15);
              if (bool)
              {
                bool = localCursor.isNull(i16);
                if (bool)
                {
                  bool = localCursor.isNull(i17);
                  if (bool)
                  {
                    bool = localCursor.isNull(i18);
                    if (bool)
                    {
                      localObject2 = null;
                      break label575;
                    }
                  }
                }
              }
            }
          }
          localObject2 = new OfflineEntityInfo();
          ((OfflineEntityInfo)localObject2).setUrl(localCursor.getString(i13));
          ((OfflineEntityInfo)localObject2).setVersion(localCursor.getString(i14));
          ((OfflineEntityInfo)localObject2).setVersionCode(localCursor.getInt(i15));
          ((OfflineEntityInfo)localObject2).setMd5(localCursor.getString(i16));
          ((OfflineEntityInfo)localObject2).setFileType(localCursor.getString(i17));
          ((OfflineEntityInfo)localObject2).setPassword(localCursor.getString(i18));
          label575:
          bool = localCursor.isNull(i19);
          if (bool)
          {
            bool = localCursor.isNull(i20);
            if (bool)
            {
              bool = localCursor.isNull(i21);
              if (bool)
              {
                localFileDetail1 = null;
                break label683;
              }
            }
          }
          FileDetail localFileDetail1 = new FileDetail();
          localFileDetail1.setPath(localCursor.getString(i19));
          localFileDetail1.setLastModified(localCursor.getLong(i20));
          localFileDetail1.setTotalSpace(localCursor.getLong(i21));
          label683:
          bool = localCursor.isNull(i22);
          if (bool)
          {
            bool = localCursor.isNull(i23);
            if (bool)
            {
              bool = localCursor.isNull(i24);
              if (bool)
              {
                localFileDetail2 = null;
                break label791;
              }
            }
          }
          FileDetail localFileDetail2 = new FileDetail();
          localFileDetail2.setPath(localCursor.getString(i22));
          localFileDetail2.setLastModified(localCursor.getLong(i23));
          localFileDetail2.setTotalSpace(localCursor.getLong(i24));
          label791:
          bool = localCursor.isNull(i25);
          if (bool)
          {
            bool = localCursor.isNull(m);
            if (bool)
            {
              bool = localCursor.isNull(k);
              if (bool)
              {
                localFileDetail3 = null;
                break label900;
              }
            }
            else {}
          }
          FileDetail localFileDetail3 = new FileDetail();
          localFileDetail3.setPath(localCursor.getString(i25));
          localFileDetail3.setLastModified(localCursor.getLong(m));
          localFileDetail3.setTotalSpace(localCursor.getLong(k));
          label900:
          OfflineEntity localOfflineEntity = new OfflineEntity();
          localOfflineEntity.setAppid(localCursor.getString(j));
          localOfflineEntity.setName(localCursor.getString(n));
          localOfflineEntity.setDocumentUrl(localCursor.getString(i1));
          localOfflineEntity.setOriginalUrl(localCursor.getString(i2));
          localOfflineEntity.setDocumentDir(localCursor.getString(i3));
          localOfflineEntity.setSourceRoot(localCursor.getString(i4));
          localOfflineEntity.setSourceDir(localCursor.getString(i5));
          localOfflineEntity.setAppMin(localCursor.getString(i6));
          localOfflineEntity.setAppMax(localCursor.getString(i7));
          localOfflineEntity.setServerPriority(localCursor.getInt(i8));
          localOfflineEntity.setCheckType(localCursor.getString(i));
          int i26 = localCursor.getInt(i9);
          if (i26 != 0) {
            bool = true;
          } else {
            bool = false;
          }
          localOfflineEntity.setAvailable(bool);
          localOfflineEntity.setCreateTimestamp(localCursor.getLong(i10));
          localOfflineEntity.setLastVisitTimestamp(localCursor.getLong(i11));
          localOfflineEntity.setLocalPriorityInfo(localCursor.getString(i12));
          localOfflineEntity.setFileInfo((OfflineEntityInfo)localObject2);
          localOfflineEntity.setDocumentFile(localFileDetail1);
          localOfflineEntity.setSourceFile(localFileDetail2);
          localOfflineEntity.setZipFile(localFileDetail3);
          localObject2 = localObject1;
          ((List)localObject1).add(localOfflineEntity);
        }
        localCursor.close();
        localRoomSQLiteQuery.release();
        return localObject1;
      }
      catch (Throwable localThrowable1) {}
      localCursor.close();
    }
    catch (Throwable localThrowable2) {}
    localRoomSQLiteQuery.release();
    throw localThrowable2;
  }
  
  public final void update(List paramList)
  {
    mDb.beginTransaction();
    try
    {
      mContext.insert(paramList);
      mDb.setTransactionSuccessful();
      mDb.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      mDb.endTransaction();
      throw paramList;
    }
  }
}
