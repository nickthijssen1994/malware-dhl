package com.jd.libs.hybrid.offlineload.loader;

import android.text.TextUtils;
import com.jd.framework.network.JDResponse;
import com.jd.framework.network.error.JDError;
import com.jd.hybrid.downloader.Fragment;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import java.io.File;
import java.util.concurrent.Executor;
import net.lingala.zip4j.a;
import net.lingala.zip4j.exception.ZipException;

final class AppCompatDelegateImplV7
  extends Fragment
{
  private final OfflineEntity y;
  private final int z;
  
  AppCompatDelegateImplV7(i paramI, OfflineEntity paramOfflineEntity, int paramInt)
  {
    y = paramOfflineEntity;
    z = paramInt;
  }
  
  private static boolean a(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString1 = new a(paramString1);
      boolean bool = paramString1.a();
      if (bool)
      {
        bool = TextUtils.isEmpty(paramString3);
        if (bool)
        {
          Log.e("OfflineService", "[Offline-file] zip is encrypted, but password is empty.");
          return false;
        }
        paramString1.a(paramString3.toCharArray());
      }
      paramString1.a(paramString2);
      return true;
    }
    catch (ZipException paramString1)
    {
      Log.e("OfflineService", paramString1.getMessage());
    }
    return false;
  }
  
  public final void onEnd(JDResponse paramJDResponse)
  {
    paramJDResponse = (File)paramJDResponse.getData();
    com.jd.libs.hybrid.base.asm.f.a().e().execute(new b.a.1(this, paramJDResponse));
  }
  
  public final void onError(JDError paramJDError)
  {
    if (z < com.jd.libs.hybrid.base.f.b)
    {
      paramJDError = new StringBuilder("[Offline-file] Retry download ");
      paramJDError.append(y.getDocumentUrl());
      Log.d("OfflineService", paramJDError.toString());
      i.add(l, y, z + 1);
      Connection.removeConnectionListener(y);
      return;
    }
    Connection.cleanup(y);
  }
}
