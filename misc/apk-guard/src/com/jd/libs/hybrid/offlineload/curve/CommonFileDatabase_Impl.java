package com.jd.libs.hybrid.offlineload.curve;

import android.database.Cursor;
import androidx.room.DatabaseConfiguration;
import androidx.room.InvalidationTracker;
import androidx.room.RoomDatabase;
import androidx.room.RoomOpenHelper;
import androidx.sqlite.db.SupportSQLiteDatabase;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Callback;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Factory;

public final class CommonFileDatabase_Impl
  extends CommonFileDatabase
{
  private volatile a iterator;
  
  public CommonFileDatabase_Impl() {}
  
  public final void clearAllTables()
  {
    super.assertNotMainThread();
    SupportSQLiteDatabase localSupportSQLiteDatabase = super.getOpenHelper().getWritableDatabase();
    try
    {
      super.beginTransaction();
      localSupportSQLiteDatabase.execSQL("DELETE FROM `HybridOfflineCommonEntity`");
      super.setTransactionSuccessful();
      super.endTransaction();
      localSupportSQLiteDatabase.query("PRAGMA wal_checkpoint(FULL)").close();
      if (!localSupportSQLiteDatabase.inTransaction())
      {
        localSupportSQLiteDatabase.execSQL("VACUUM");
        return;
      }
    }
    catch (Throwable localThrowable)
    {
      super.endTransaction();
      localSupportSQLiteDatabase.query("PRAGMA wal_checkpoint(FULL)").close();
      if (!localSupportSQLiteDatabase.inTransaction()) {
        localSupportSQLiteDatabase.execSQL("VACUUM");
      }
      throw localThrowable;
    }
  }
  
  protected final InvalidationTracker createInvalidationTracker()
  {
    return new InvalidationTracker(this, new String[] { "HybridOfflineCommonEntity" });
  }
  
  protected final SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration paramDatabaseConfiguration)
  {
    Object localObject = new RoomOpenHelper(paramDatabaseConfiguration, new CommonFileDatabase_Impl.1(this), "0acf1b3dee67772b0187a6a87b97663f", "8cb470cb0ed18b063057f89bb5350c35");
    localObject = SupportSQLiteOpenHelper.Configuration.builder(context).name(name).callback((SupportSQLiteOpenHelper.Callback)localObject).build();
    return sqliteOpenHelperFactory.create((SupportSQLiteOpenHelper.Configuration)localObject);
  }
  
  public final a iterator()
  {
    if (iterator != null) {
      return iterator;
    }
    try
    {
      if (iterator == null) {
        iterator = new b(this);
      }
      a localA = iterator;
      return localA;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
