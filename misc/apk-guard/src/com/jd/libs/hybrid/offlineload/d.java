package com.jd.libs.hybrid.offlineload;

import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jd.libs.hybrid.base.asm.ClassWriter;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.base.f;
import com.jd.libs.hybrid.offlineload.entity.CommonFile;
import com.jd.libs.hybrid.offlineload.entity.OfflineFiles;
import com.jd.sentry.performance.network.instrumentation.x5webview.ShooterX5WebViewClient;
import com.tencent.smtt.export.external.interfaces.WebResourceRequest;
import com.tencent.smtt.export.external.interfaces.WebResourceResponse;
import com.tencent.smtt.sdk.WebView;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class d
  extends ShooterX5WebViewClient
{
  private volatile WebView a = null;
  private boolean b = false;
  private volatile OfflineFiles c;
  private volatile boolean d = false;
  private volatile Runnable e = null;
  private volatile Handler f = null;
  private int h = f.s;
  private volatile boolean i = false;
  private String j;
  private boolean k = false;
  private i l = null;
  private b m;
  private Uri o;
  private volatile List<CommonFile> q;
  private Uri u;
  
  public d(String paramString)
  {
    if (!f.f()) {
      return;
    }
    j = paramString;
    if (!TextUtils.isEmpty(paramString))
    {
      m = new b(f.getContext());
      m.a(paramString, new a(this));
      m.a(new Attribute(this));
    }
  }
  
  private OfflineWebRezResp a(WebView paramWebView, Uri paramUri)
  {
    if (f.f())
    {
      if (paramUri == null) {
        return null;
      }
      Object localObject1 = c;
      int i3 = 0;
      int i2 = 0;
      if ((localObject1 != null) && (!TextUtils.isEmpty(c.getHtmlPath())))
      {
        if (!c.isAvailable())
        {
          k = false;
          return null;
        }
        if (o == null) {}
        try
        {
          d();
          boolean bool1;
          if (o != null)
          {
            localObject1 = o;
            localObject1 = ((Uri)localObject1).getHost();
            if (localObject1 != null)
            {
              localObject1 = o;
              bool1 = ((Uri)localObject1).getHost().equals(paramUri.getHost());
              if (bool1)
              {
                localObject1 = o;
                localObject1 = ((Uri)localObject1).getPath();
                if (localObject1 != null)
                {
                  localObject1 = o;
                  bool1 = ((Uri)localObject1).getPath().equals(paramUri.getPath());
                  if (bool1)
                  {
                    n = 1;
                    break label173;
                  }
                }
              }
            }
          }
          int n = 0;
          label173:
          if (u != null)
          {
            localObject1 = u;
            localObject1 = ((Uri)localObject1).getHost();
            if (localObject1 != null)
            {
              localObject1 = u;
              bool1 = ((Uri)localObject1).getHost().equals(paramUri.getHost());
              if (bool1)
              {
                localObject1 = u;
                localObject1 = ((Uri)localObject1).getPath();
                if (localObject1 != null)
                {
                  localObject1 = u;
                  bool1 = ((Uri)localObject1).getPath().equals(paramUri.getPath());
                  if (bool1)
                  {
                    i1 = 1;
                    break label275;
                  }
                }
              }
            }
          }
          int i1 = 0;
          label275:
          Object localObject2;
          Object localObject3;
          label443:
          Object localObject4;
          if ((n == 0) && (i1 == 0))
          {
            localObject1 = c;
            bool1 = TextUtils.isEmpty(((OfflineFiles)localObject1).getStaticPath());
            if (!bool1)
            {
              localObject1 = paramUri.toString();
              localObject2 = c;
              bool1 = ((String)localObject1).startsWith(((OfflineFiles)localObject2).getStaticPath());
              if (bool1)
              {
                localObject1 = new StringBuilder();
                localObject2 = c;
                ((StringBuilder)localObject1).append(((OfflineFiles)localObject2).getStaticDir());
                localObject2 = File.separator;
                ((StringBuilder)localObject1).append((String)localObject2);
                localObject2 = paramUri.toString();
                localObject3 = c;
                ((StringBuilder)localObject1).append(((String)localObject2).substring(((OfflineFiles)localObject3).getStaticPath().length()));
                localObject1 = ((StringBuilder)localObject1).toString();
                localObject2 = null;
                n = i2;
                break label443;
              }
            }
            localObject2 = new HashMap();
            localObject1 = getTitle(paramUri, (Map)localObject2);
            n = 1;
            bool1 = false;
            localObject4 = localObject1;
          }
          else
          {
            localObject1 = c;
            localObject4 = ((OfflineFiles)localObject1).getHtmlFile();
            localObject2 = null;
            bool1 = true;
            n = i3;
          }
          boolean bool2 = TextUtils.isEmpty((CharSequence)localObject4);
          if (!bool2)
          {
            localObject1 = new File((String)localObject4);
            bool2 = ((File)localObject1).exists();
            if (bool2)
            {
              bool2 = ((File)localObject1).isFile();
              if (bool2)
              {
                bool2 = ((String)localObject4).endsWith(".js");
                if (bool2) {
                  localObject1 = "text/txt";
                }
                for (localObject3 = "utf-8";; localObject3 = null)
                {
                  break label727;
                  bool2 = ((String)localObject4).endsWith(".css");
                  if (bool2)
                  {
                    localObject1 = "text/css";
                    break;
                  }
                  bool2 = ((String)localObject4).endsWith("gif");
                  if (!bool2)
                  {
                    bool2 = ((String)localObject4).endsWith("png");
                    if (!bool2)
                    {
                      bool2 = ((String)localObject4).endsWith("jpg");
                      if (!bool2)
                      {
                        bool2 = ((String)localObject4).endsWith("jpeg");
                        if (!bool2)
                        {
                          bool2 = ((String)localObject4).endsWith("htm");
                          if (!bool2)
                          {
                            bool2 = ((String)localObject4).endsWith("html");
                            if (!bool2)
                            {
                              bool2 = ((String)localObject4).endsWith("ttf");
                              if (bool2)
                              {
                                localObject2 = new HashMap();
                                ((Map)localObject2).put("access-control-allow-origin", "*");
                                localObject1 = "text/html";
                                localObject3 = null;
                                break label727;
                              }
                              localObject1 = "text/html";
                              break;
                            }
                          }
                          localObject1 = "text/html";
                          break;
                        }
                      }
                    }
                  }
                  localObject1 = "image/*";
                }
                label727:
                bool2 = Log.i();
                Object localObject6;
                if (bool2)
                {
                  localObject6 = new StringBuilder("??????????????????");
                  if (n != 0) {
                    localObject5 = "??";
                  } else {
                    localObject5 = "??";
                  }
                  ((StringBuilder)localObject6).append((String)localObject5);
                  ((StringBuilder)localObject6).append("????url?");
                  ((StringBuilder)localObject6).append(paramUri.toString());
                  ((StringBuilder)localObject6).append(")");
                  Log.w("OfflineWebClient", ((StringBuilder)localObject6).toString());
                  localObject5 = new StringBuilder("Assembling local response(miniType = ");
                  ((StringBuilder)localObject5).append((String)localObject1);
                  ((StringBuilder)localObject5).append(", encoding = ");
                  ((StringBuilder)localObject5).append((String)localObject3);
                  ((StringBuilder)localObject5).append(", file[");
                  ((StringBuilder)localObject5).append((String)localObject4);
                  ((StringBuilder)localObject5).append("]), for url[");
                  ((StringBuilder)localObject5).append(paramUri);
                  ((StringBuilder)localObject5).append("]");
                  Log.d("OfflineWebClient", ((StringBuilder)localObject5).toString());
                }
                Object localObject5 = new FileInputStream((String)localObject4);
                if (bool1)
                {
                  localObject6 = new StringBuilder("Use local offline file for main resource(url: ");
                  ((StringBuilder)localObject6).append(paramUri);
                  ((StringBuilder)localObject6).append("), local file[");
                  ((StringBuilder)localObject6).append((String)localObject4);
                  ((StringBuilder)localObject6).append("])");
                  Log.i("OfflineWebClient", ((StringBuilder)localObject6).toString());
                  k = true;
                  if (l != null)
                  {
                    localObject6 = l;
                    ((i)localObject6).a(paramUri.toString(), (String)localObject4);
                  }
                  ClassWriter.a(paramWebView);
                }
                paramWebView = new OfflineWebRezResp((String)localObject1, (String)localObject3, (InputStream)localObject5, (String)localObject4, bool1);
                if (localObject2 == null) {
                  return paramWebView;
                }
                bool1 = ((Map)localObject2).isEmpty();
                if (bool1) {
                  return paramWebView;
                }
                paramWebView.setMimeType("");
                add("Content-Length", (Map)localObject2);
                paramWebView.setResponseHeaders((Map)localObject2);
                return paramWebView;
              }
            }
            paramWebView = new StringBuilder("Offline local file NOT exists for url[");
            paramWebView.append(paramUri);
            paramWebView.append("], File[");
            paramWebView.append((String)localObject4);
            paramWebView.append("]");
          }
          for (paramWebView = paramWebView.toString();; paramWebView = paramWebView.toString())
          {
            Log.d("OfflineWebClient", paramWebView);
            return null;
            paramWebView = new StringBuilder("Offline target NOT found for url[");
            paramWebView.append(paramUri);
            paramWebView.append("]");
          }
          k = false;
        }
        catch (Exception paramWebView)
        {
          Log.e("OfflineWebClient", paramWebView);
          return null;
        }
      }
      o = null;
      u = null;
    }
    return null;
    return paramWebView;
  }
  
  private void a(boolean paramBoolean, OfflineFiles paramOfflineFiles)
  {
    for (;;)
    {
      try
      {
        boolean bool = i;
        if (!bool) {
          return;
        }
        i = false;
        if (f != null)
        {
          if (e != null)
          {
            Log.d("OfflineWebClient", "Cancel timer.");
            f.removeCallbacks(e);
            e = null;
          }
          f = null;
        }
        if ((c != null) && (paramOfflineFiles != null))
        {
          n = c.getVersion();
          int i2 = paramOfflineFiles.getVersion();
          int i1 = 1;
          if (n != i2)
          {
            Log.i("OfflineWebClient", "Latest info differs with cache, load URL for web on network.");
            n = i1;
            if (Log.i())
            {
              Log.write("OfflineWebClient", "?????????????????????H5??????", JDJSON.toJSONString(paramOfflineFiles));
              n = i1;
            }
          }
          else
          {
            if (paramOfflineFiles.isAvailable()) {
              break label287;
            }
            Log.i("OfflineWebClient", "Fail to fetch latest info, load URL for web on network.");
            n = i1;
            if (Log.i())
            {
              Log.w("OfflineWebClient", "???????????????????????????H5");
              n = i1;
            }
          }
          if (n != 0)
          {
            o = null;
            u = null;
            c = paramOfflineFiles;
            cancel();
            return;
          }
          Log.d("OfflineWebClient", "Latest info's version is same with cache's, do nothing.");
        }
        else
        {
          if (paramBoolean)
          {
            Log.i("OfflineWebClient", "Fetch info timeout, load URL for real web.");
            if (Log.i())
            {
              paramOfflineFiles = "??????????????????????????????H5";
              Log.w("OfflineWebClient", paramOfflineFiles);
            }
          }
          else
          {
            Log.i("OfflineWebClient", "Has no config on server, load URL for real web.");
            if (Log.i())
            {
              paramOfflineFiles = "?????????????????????????????H5";
              continue;
            }
          }
          o = null;
          u = null;
          c = null;
          cancel();
          return;
        }
      }
      catch (Throwable paramOfflineFiles)
      {
        throw paramOfflineFiles;
      }
      label287:
      int n = 0;
    }
  }
  
  private static void add(String paramString, Map paramMap)
  {
    Iterator localIterator = paramMap.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      if ((!TextUtils.isEmpty(str)) && (str.equals(paramString)) && (!TextUtils.isEmpty((CharSequence)paramMap.get(str)))) {
        paramMap.remove(str);
      }
    }
  }
  
  private void cancel()
  {
    if (a != null)
    {
      NumberPicker.BeginSoftInputOnLongPressCommand localBeginSoftInputOnLongPressCommand = new NumberPicker.BeginSoftInputOnLongPressCommand(this);
      if (Looper.myLooper() == Looper.getMainLooper())
      {
        localBeginSoftInputOnLongPressCommand.run();
        return;
      }
      a.post(localBeginSoftInputOnLongPressCommand);
    }
  }
  
  private void d()
  {
    o = Uri.parse(c.getHtmlPath());
    Uri localUri;
    if (!TextUtils.isEmpty(c.getOriginHtmlPath())) {
      localUri = Uri.parse(c.getOriginHtmlPath());
    } else {
      localUri = null;
    }
    u = localUri;
  }
  
  private String getTitle(Uri paramUri, Map paramMap)
  {
    if ((paramUri != null) && (!TextUtils.isEmpty(paramUri.toString())) && (q != null))
    {
      if (q.isEmpty()) {
        return null;
      }
      Iterator localIterator = q.iterator();
      while (localIterator.hasNext())
      {
        CommonFile localCommonFile = (CommonFile)localIterator.next();
        if (localCommonFile.getUrl().equalsIgnoreCase(paramUri.toString()))
        {
          if (localCommonFile.getHeaderParams() != null)
          {
            paramMap.putAll(localCommonFile.getHeaderParams());
            paramMap.put("X-Cache", "jd");
          }
          return localCommonFile.getFilePath();
        }
      }
    }
    return null;
  }
  
  public void a()
  {
    Log.d("OfflineWebClient", "Calling destroy for OfflineWebClient.");
    d = true;
    a = null;
    i = false;
    q = null;
    c = null;
    if (f != null)
    {
      if (e != null)
      {
        f.removeCallbacks(e);
        e = null;
      }
      f = null;
    }
    m = null;
  }
  
  public void a(i paramI)
  {
    l = paramI;
  }
  
  public OfflineFiles c()
  {
    return c;
  }
  
  public void onPageFinished(WebView paramWebView, String paramString)
  {
    k = false;
    super.onPageFinished(paramWebView, paramString);
  }
  
  public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
  {
    super.onPageStarted(paramWebView, paramString, paramBitmap);
    if (b) {
      return;
    }
    if (c != null)
    {
      if (TextUtils.isEmpty(c.getHtmlPath())) {
        return;
      }
      if (o == null) {
        d();
      }
      paramWebView = Uri.parse(paramString);
      paramBitmap = o;
      int i2 = 0;
      int n;
      if ((paramBitmap != null) && (paramBitmap.getHost() != null) && (o.getHost().equals(paramWebView.getHost())) && (o.getPath() != null) && (o.getPath().equals(paramWebView.getPath()))) {
        n = 1;
      } else {
        n = 0;
      }
      paramBitmap = u;
      int i1 = i2;
      if (paramBitmap != null)
      {
        i1 = i2;
        if (paramBitmap.getHost() != null)
        {
          i1 = i2;
          if (u.getHost().equals(paramWebView.getHost()))
          {
            i1 = i2;
            if (u.getPath() != null)
            {
              i1 = i2;
              if (u.getPath().equals(paramWebView.getPath())) {
                i1 = 1;
              }
            }
          }
        }
      }
      if ((n != 0) || (i1 != 0))
      {
        b = true;
        paramWebView = l;
        if (paramWebView != null) {
          paramWebView.add(paramString, true, k);
        }
      }
    }
  }
  
  public WebResourceResponse shouldInterceptRequest(WebView paramWebView, WebResourceRequest paramWebResourceRequest)
  {
    a = paramWebView;
    if (Build.VERSION.SDK_INT >= 21)
    {
      OfflineWebRezResp localOfflineWebRezResp = a(paramWebView, paramWebResourceRequest.getUrl());
      if (localOfflineWebRezResp != null) {
        return localOfflineWebRezResp;
      }
    }
    return super.shouldInterceptRequest(paramWebView, paramWebResourceRequest);
  }
}
