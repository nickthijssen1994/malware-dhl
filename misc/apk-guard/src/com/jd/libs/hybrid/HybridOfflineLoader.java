package com.jd.libs.hybrid;

import android.graphics.Bitmap;
import android.text.TextUtils;
import androidx.annotation.Keep;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.offlineload.d;
import com.jd.libs.hybrid.offlineload.entity.OfflineFiles;
import com.jd.libs.hybrid.offlineload.i;
import com.jd.sentry.performance.network.instrumentation.x5webview.ShooterX5WebViewClient;
import com.tencent.smtt.export.external.interfaces.WebResourceRequest;
import com.tencent.smtt.export.external.interfaces.WebResourceResponse;
import com.tencent.smtt.sdk.WebView;

@Keep
public class HybridOfflineLoader
{
  private d mWebClient;
  
  private HybridOfflineLoader(String paramString)
  {
    mWebClient = new d(paramString);
  }
  
  public static HybridOfflineLoader getLoader(String paramString)
  {
    if (!HybridSDK.isInited())
    {
      Log.e("HybridOfflineLoader", "Hybrid SDK is not initialized!");
      return null;
    }
    if (!TextUtils.isEmpty(paramString)) {
      return new HybridOfflineLoader(paramString);
    }
    return null;
  }
  
  public void destroy()
  {
    d localD = mWebClient;
    if (localD != null)
    {
      localD.a();
      mWebClient = null;
    }
  }
  
  public d getWebClient()
  {
    return mWebClient;
  }
  
  public boolean hasOfflineConfig()
  {
    d localD = mWebClient;
    return (localD != null) && (localD.c() != null);
  }
  
  public boolean hasOfflineFiles()
  {
    d localD = mWebClient;
    return (localD != null) && (localD.c() != null) && (mWebClient.c().isAvailable());
  }
  
  public void onPageFinished(WebView paramWebView, String paramString)
  {
    d localD = mWebClient;
    if (localD != null) {
      localD.onPageFinished(paramWebView, paramString);
    }
  }
  
  public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
  {
    d localD = mWebClient;
    if (localD != null) {
      localD.onPageStarted(paramWebView, paramString, paramBitmap);
    }
  }
  
  public void setCallback(i paramI)
  {
    d localD = mWebClient;
    if (localD != null) {
      localD.a(paramI);
    }
  }
  
  public WebResourceResponse shouldInterceptRequest(WebView paramWebView, WebResourceRequest paramWebResourceRequest)
  {
    d localD = mWebClient;
    if (localD != null) {
      return localD.shouldInterceptRequest(paramWebView, paramWebResourceRequest);
    }
    return null;
  }
  
  public WebResourceResponse shouldInterceptRequest(WebView paramWebView, String paramString)
  {
    d localD = mWebClient;
    if (localD != null) {
      return localD.shouldInterceptRequest(paramWebView, paramString);
    }
    return null;
  }
}
