package com.jd.libs.hybrid.base;

import android.content.Context;
import android.text.TextUtils;
import com.jd.libs.hybrid.base.asm.ByteVector;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class f
{
  public static int B;
  private static String a;
  public static int b = 0;
  private static Context c;
  public static boolean d;
  private static boolean f;
  public static Set<String> g = new HashSet(Collections.singletonList("wifi"));
  public static boolean h;
  public static long i = 0L;
  private static boolean l;
  private static List<a.a> q;
  public static int s;
  public static int t = 50;
  public static float y = 0.4F;
  
  static
  {
    d = false;
    h = false;
  }
  
  public static String a()
  {
    return a;
  }
  
  public static void a(float paramFloat)
  {
    if ((paramFloat >= 0.0F) && (paramFloat <= 1.0F))
    {
      y = paramFloat;
      ByteVector.put(c, "preference_sp_ratio", paramFloat);
    }
  }
  
  public static void a(int paramInt)
  {
    if (paramInt > 0)
    {
      B = paramInt;
      ByteVector.putInt(c, "preference_condition_thread", paramInt);
      Object localObject = q;
      if ((localObject != null) && (!((List)localObject).isEmpty()))
      {
        localObject = q.iterator();
        while (((Iterator)localObject).hasNext()) {
          ((p)((Iterator)localObject).next()).a();
        }
      }
    }
  }
  
  public static void a(Context paramContext)
  {
    c = paramContext;
    s = ByteVector.a(paramContext, "preference_fetch_time", s);
    B = ByteVector.a(paramContext, "preference_condition_thread", B);
    g = ByteVector.get(paramContext, "preference_condition_network", g);
    b = ByteVector.a(c, "preference_hybrid_download_retry", b);
    i = ByteVector.get(c, "preference_last_set_lp_time", i);
    t = ByteVector.a(c, "preference_max_offline_pack", t);
    y = ByteVector.get(c, "preference_sp_ratio", y);
  }
  
  public static void a(p paramP)
  {
    if (paramP == null) {
      return;
    }
    if (q == null) {
      q = new ArrayList();
    }
    q.add(paramP);
  }
  
  public static void a(List paramList)
  {
    if ((paramList != null) && (!paramList.isEmpty()))
    {
      HashSet localHashSet = new HashSet(paramList.size());
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        String str = (String)paramList.next();
        if (!TextUtils.isEmpty(str)) {
          localHashSet.add(str.toLowerCase());
        }
      }
      g = localHashSet;
      ByteVector.put(c, "preference_condition_network", localHashSet);
      paramList = q;
      if ((paramList != null) && (!paramList.isEmpty()))
      {
        paramList = q.iterator();
        while (paramList.hasNext()) {
          ((p)paramList.next()).a();
        }
      }
    }
  }
  
  public static void add(long paramLong)
  {
    i = paramLong;
    ByteVector.put(c, "preference_last_set_lp_time", paramLong);
  }
  
  public static void b(int paramInt)
  {
    b = paramInt;
    ByteVector.putInt(c, "preference_hybrid_download_retry", paramInt);
  }
  
  public static void b(String paramString)
  {
    a = paramString;
  }
  
  public static void b(boolean paramBoolean)
  {
    l = paramBoolean;
  }
  
  public static void c(int paramInt)
  {
    if (paramInt > 0)
    {
      s = paramInt;
      ByteVector.putInt(c, "preference_fetch_time", paramInt);
    }
  }
  
  public static boolean c()
  {
    return l;
  }
  
  public static void d(int paramInt)
  {
    if (paramInt > 0)
    {
      t = paramInt;
      ByteVector.putInt(c, "preference_max_offline_pack", paramInt);
    }
  }
  
  public static void d(boolean paramBoolean)
  {
    d = paramBoolean;
  }
  
  public static boolean d()
  {
    return h;
  }
  
  public static void e(boolean paramBoolean)
  {
    h = paramBoolean;
  }
  
  public static boolean e()
  {
    return d;
  }
  
  public static void f(boolean paramBoolean)
  {
    f = paramBoolean;
  }
  
  public static boolean f()
  {
    return f;
  }
  
  public static Context getContext()
  {
    return c;
  }
}
