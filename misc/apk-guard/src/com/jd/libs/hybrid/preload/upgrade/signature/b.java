package com.jd.libs.hybrid.preload.upgrade.signature;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.jd.libs.hybrid.preload.entity.PreloadInfoEntity;
import com.jd.libs.hybrid.preload.upgrade.converter.RoomJdJsonObjConverts;
import com.jd.libs.hybrid.preload.upgrade.converter.RoomListStrConverts;
import com.jd.libs.hybrid.preload.upgrade.converter.RoomMapConverts;
import java.util.ArrayList;
import java.util.List;

public final class b
  implements a
{
  private final SharedSQLiteStatement a;
  private final RoomDatabase b;
  final RoomListStrConverts c = new RoomListStrConverts();
  private final EntityDeletionOrUpdateAdapter f;
  private final EntityDeletionOrUpdateAdapter h;
  private final EntityInsertionAdapter i;
  final RoomMapConverts this$0 = new RoomMapConverts();
  final RoomJdJsonObjConverts x = new RoomJdJsonObjConverts();
  
  public b(RoomDatabase paramRoomDatabase)
  {
    b = paramRoomDatabase;
    i = new BHttpConnectionBase(this, paramRoomDatabase);
    f = new c(this, paramRoomDatabase);
    h = new DefaultManagedHttpClientConnection(this, paramRoomDatabase);
    a = new e(this, paramRoomDatabase);
  }
  
  public final void a(List paramList)
  {
    b.beginTransaction();
    try
    {
      i.insert(paramList);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      b.endTransaction();
      throw paramList;
    }
  }
  
  public final void close()
  {
    SupportSQLiteStatement localSupportSQLiteStatement = a.acquire();
    b.beginTransaction();
    try
    {
      localSupportSQLiteStatement.executeUpdateDelete();
      b.setTransactionSuccessful();
      b.endTransaction();
      a.release(localSupportSQLiteStatement);
      return;
    }
    catch (Throwable localThrowable)
    {
      b.endTransaction();
      a.release(localSupportSQLiteStatement);
      throw localThrowable;
    }
  }
  
  public final void close(List paramList)
  {
    b.beginTransaction();
    try
    {
      f.handleMultiple(paramList);
      b.setTransactionSuccessful();
      b.endTransaction();
      return;
    }
    catch (Throwable paramList)
    {
      b.endTransaction();
      throw paramList;
    }
  }
  
  public final List doInBackground()
  {
    RoomSQLiteQuery localRoomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM HybridPreloadInfo", 0);
    Cursor localCursor = b.query(localRoomSQLiteQuery);
    try
    {
      int j = localCursor.getColumnIndexOrThrow("appid");
      int k = localCursor.getColumnIndexOrThrow("url");
      int m = localCursor.getColumnIndexOrThrow("originalUrl");
      int n = localCursor.getColumnIndexOrThrow("requestUrl");
      int i1 = localCursor.getColumnIndexOrThrow("requestType");
      int i2 = localCursor.getColumnIndexOrThrow("functionId");
      int i3 = localCursor.getColumnIndexOrThrow("method");
      int i4 = localCursor.getColumnIndexOrThrow("header");
      int i5 = localCursor.getColumnIndexOrThrow("params");
      int i6 = localCursor.getColumnIndexOrThrow("body");
      int i7 = localCursor.getColumnIndexOrThrow("extraKeys");
      int i8 = localCursor.getColumnIndexOrThrow("mappings");
      int i9 = localCursor.getColumnIndexOrThrow("urlParamsState");
      try
      {
        int i10 = localCursor.getColumnIndexOrThrow("appMin");
        int i11 = localCursor.getColumnIndexOrThrow("appMax");
        ArrayList localArrayList = new ArrayList(localCursor.getCount());
        for (;;)
        {
          b localB = this;
          boolean bool = localCursor.moveToNext();
          if (!bool) {
            break;
          }
          PreloadInfoEntity localPreloadInfoEntity = new PreloadInfoEntity();
          localPreloadInfoEntity.setAppid(localCursor.getString(j));
          localPreloadInfoEntity.setUrl(localCursor.getString(k));
          localPreloadInfoEntity.setOriginalUrl(localCursor.getString(m));
          localPreloadInfoEntity.setRequestUrl(localCursor.getString(n));
          localPreloadInfoEntity.setRequestType(localCursor.getString(i1));
          localPreloadInfoEntity.setFunctionId(localCursor.getString(i2));
          localPreloadInfoEntity.setMethod(localCursor.getString(i3));
          String str = localCursor.getString(i4);
          localPreloadInfoEntity.setHeader(this$0.toMap(str));
          str = localCursor.getString(i5);
          localPreloadInfoEntity.setParams(this$0.toMap(str));
          str = localCursor.getString(i6);
          localPreloadInfoEntity.setBody(x.toJson(str));
          str = localCursor.getString(i7);
          localPreloadInfoEntity.setExtraKeys(c.toArray(str));
          str = localCursor.getString(i8);
          localPreloadInfoEntity.setMappings(this$0.toMap(str));
          localPreloadInfoEntity.setUrlParamsState(localCursor.getInt(i9));
          localPreloadInfoEntity.setAppMin(localCursor.getString(i10));
          localPreloadInfoEntity.setAppMax(localCursor.getString(i11));
          localArrayList.add(localPreloadInfoEntity);
        }
        localCursor.close();
        localRoomSQLiteQuery.release();
        return localArrayList;
      }
      catch (Throwable localThrowable1) {}
      localCursor.close();
    }
    catch (Throwable localThrowable2) {}
    localRoomSQLiteQuery.release();
    throw localThrowable2;
  }
  
  public final PreloadInfoEntity run(String paramString)
  {
    RoomSQLiteQuery localRoomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM HybridPreloadInfo WHERE url=? OR originalUrl=? LIMIT 1", 2);
    if (paramString == null) {
      localRoomSQLiteQuery.bindNull(1);
    } else {
      localRoomSQLiteQuery.bindString(1, paramString);
    }
    if (paramString == null) {
      localRoomSQLiteQuery.bindNull(2);
    } else {
      localRoomSQLiteQuery.bindString(2, paramString);
    }
    Cursor localCursor = b.query(localRoomSQLiteQuery);
    try
    {
      int j = localCursor.getColumnIndexOrThrow("appid");
      int k = localCursor.getColumnIndexOrThrow("url");
      int m = localCursor.getColumnIndexOrThrow("originalUrl");
      int n = localCursor.getColumnIndexOrThrow("requestUrl");
      int i1 = localCursor.getColumnIndexOrThrow("requestType");
      int i2 = localCursor.getColumnIndexOrThrow("functionId");
      int i3 = localCursor.getColumnIndexOrThrow("method");
      int i4 = localCursor.getColumnIndexOrThrow("header");
      int i5 = localCursor.getColumnIndexOrThrow("params");
      int i6 = localCursor.getColumnIndexOrThrow("body");
      int i7 = localCursor.getColumnIndexOrThrow("extraKeys");
      int i8 = localCursor.getColumnIndexOrThrow("mappings");
      int i9 = localCursor.getColumnIndexOrThrow("urlParamsState");
      try
      {
        int i10 = localCursor.getColumnIndexOrThrow("appMin");
        int i11 = localCursor.getColumnIndexOrThrow("appMax");
        boolean bool = localCursor.moveToFirst();
        if (bool)
        {
          paramString = new PreloadInfoEntity();
          paramString.setAppid(localCursor.getString(j));
          paramString.setUrl(localCursor.getString(k));
          paramString.setOriginalUrl(localCursor.getString(m));
          paramString.setRequestUrl(localCursor.getString(n));
          paramString.setRequestType(localCursor.getString(i1));
          paramString.setFunctionId(localCursor.getString(i2));
          paramString.setMethod(localCursor.getString(i3));
          String str = localCursor.getString(i4);
          paramString.setHeader(this$0.toMap(str));
          str = localCursor.getString(i5);
          paramString.setParams(this$0.toMap(str));
          str = localCursor.getString(i6);
          paramString.setBody(x.toJson(str));
          str = localCursor.getString(i7);
          paramString.setExtraKeys(c.toArray(str));
          str = localCursor.getString(i8);
          paramString.setMappings(this$0.toMap(str));
          paramString.setUrlParamsState(localCursor.getInt(i9));
          paramString.setAppMin(localCursor.getString(i10));
          paramString.setAppMax(localCursor.getString(i11));
        }
        else
        {
          paramString = null;
        }
        localCursor.close();
        localRoomSQLiteQuery.release();
        return paramString;
      }
      catch (Throwable paramString) {}
      localCursor.close();
    }
    catch (Throwable paramString) {}
    localRoomSQLiteQuery.release();
    throw paramString;
  }
}
