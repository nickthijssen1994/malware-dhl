package com.jd.libs.hybrid.preload.signature;

import android.text.TextUtils;
import com.jd.framework.json.JDJSONObject;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.jdsdk.network.toolbox.HttpSetting;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import okhttp3.OkHttpClient;
import okhttp3.OkHttpClient.Builder;
import okhttp3.Request;

public final class HttpRequest
  extends HttpSetting
{
  private String address;
  public OkHttpClient client;
  public JDJSONObject mContext;
  public Map<String, String> mDataProvider;
  public String name;
  public boolean uri;
  private String url;
  
  public HttpRequest(String paramString, boolean paramBoolean)
  {
    address = paramString.trim();
    uri = paramBoolean;
    mContext = new JDJSONObject();
    mDataProvider = new HashMap();
    url = "";
    name = "";
    client = start();
  }
  
  private static String get(String paramString, Map paramMap)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramString);
    if (paramString.contains("?")) {
      paramString = "&";
    } else {
      paramString = "?";
    }
    ((StringBuilder)localObject).append(paramString);
    localStringBuilder.append(((StringBuilder)localObject).toString());
    if ((paramMap != null) && (!paramMap.isEmpty()))
    {
      paramString = paramMap.keySet().iterator();
      while (paramString.hasNext())
      {
        localObject = (String)paramString.next();
        localStringBuilder.append((String)localObject);
        localStringBuilder.append("=");
        localStringBuilder.append((String)paramMap.get(localObject));
        localStringBuilder.append("&");
      }
    }
    return localStringBuilder.deleteCharAt(localStringBuilder.length() - 1).toString();
  }
  
  public final Request doInBackground()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a3 = a2\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public final String getRequestUrl()
  {
    if (TextUtils.isEmpty(url)) {
      return "";
    }
    return url;
  }
  
  public final void setRequestUrl(String paramString)
  {
    url = paramString;
  }
  
  public final OkHttpClient start()
  {
    if (client == null) {
      try
      {
        Object localObject1 = ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder());
        localObject1 = (OkHttpClient.Builder)localObject1;
        localObject2 = TimeUnit.MILLISECONDS;
        localObject1 = ((OkHttpClient.Builder)localObject1).connectTimeout(5000L, (TimeUnit)localObject2);
        localObject2 = TimeUnit.MILLISECONDS;
        localObject1 = ((OkHttpClient.Builder)localObject1).readTimeout(3000L, (TimeUnit)localObject2);
        localObject2 = TimeUnit.MILLISECONDS;
        localObject1 = ((OkHttpClient.Builder)localObject1).writeTimeout(3000L, (TimeUnit)localObject2).followRedirects(false).followSslRedirects(false).retryOnConnectionFailure(false).build();
        return localObject1;
      }
      catch (Exception localException)
      {
        Object localObject2 = new StringBuilder("initOkHttpClient error --> ");
        ((StringBuilder)localObject2).append(localException.toString());
        Log.d("OKHttpSetting", ((StringBuilder)localObject2).toString());
      }
    }
    return client;
  }
}
