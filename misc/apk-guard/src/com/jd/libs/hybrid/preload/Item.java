package com.jd.libs.hybrid.preload;

import android.content.Context;
import android.os.SystemClock;
import android.text.TextUtils;
import com.jd.libs.hybrid.base.asm.Log;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class Item
{
  private static Item k;
  private static Label next;
  private f b;
  private Map<String, a.a> c;
  
  private Item()
  {
    if (k == null) {
      return;
    }
    throw new IllegalStateException("instance is not null !");
  }
  
  public static Item a()
  {
    if (k == null) {
      try
      {
        if (k == null) {
          k = new Item();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return k;
  }
  
  private static Map get(Map paramMap, String paramString)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a6 = a5\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static void set(Label paramLabel)
  {
    next = paramLabel;
  }
  
  public static String toString(String paramString1, String paramString2, String paramString3)
  {
    Object localObject = paramString1;
    if (!TextUtils.isEmpty(paramString1))
    {
      localObject = paramString1;
      if (!TextUtils.isEmpty(paramString2))
      {
        localObject = new StringBuilder("(");
        ((StringBuilder)localObject).append(paramString2);
        ((StringBuilder)localObject).append("=[^&]*)");
        localObject = ((StringBuilder)localObject).toString();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(paramString2);
        localStringBuilder.append("=");
        localStringBuilder.append(paramString3);
        localObject = paramString1.replaceAll((String)localObject, localStringBuilder.toString());
      }
    }
    return localObject;
  }
  
  public void a(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      add(paramContext, paramString1, null, paramString2);
      return;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
  
  public void a(String paramString)
  {
    try
    {
      Log.d("DataProvider", "Calling preload destroy for timestamp = ".concat(String.valueOf(paramString)));
      if (b != null) {
        b.a(paramString);
      }
      if (c != null)
      {
        Object localObject = null;
        Iterator localIterator = c.keySet().iterator();
        while (localIterator.hasNext())
        {
          String str = (String)localIterator.next();
          if (str.endsWith(paramString)) {
            localObject = str;
          }
        }
        if (localObject != null) {
          c.remove(localObject);
        }
      }
      return;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public void a(String paramString, x paramX)
  {
    try
    {
      if (b == null)
      {
        paramX.a(-2, null);
        return;
      }
      int i = b.e(paramString);
      if (i == 1)
      {
        paramX.a(200, b.b(paramString));
        b.a(paramString);
        return;
      }
      if (i == 2)
      {
        paramX.a(-1, null);
        b.a(paramString);
        return;
      }
      if (i == 0)
      {
        if (c == null) {
          c = new HashMap();
        }
        c.put(paramString, paramX);
        return;
      }
      paramX.a(-2, null);
      return;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public void add(Context paramContext, String paramString1, Map paramMap, String paramString2)
  {
    try
    {
      boolean bool = TextUtils.isEmpty(paramString1);
      if (bool) {
        return;
      }
      SystemClock.elapsedRealtime();
      new ByteVector(paramContext).add(paramString1, new e(this, paramString1, paramMap, paramString2));
      return;
    }
    catch (Throwable paramContext)
    {
      throw paramContext;
    }
  }
}
