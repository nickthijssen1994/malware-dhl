package com.jd.libs.hybrid.performance;

import android.app.Activity;
import android.app.Application;
import android.net.http.SslCertificate;
import android.net.http.SslCertificate.DName;
import android.text.TextUtils;
import com.jd.framework.json.JDJSONObject;
import com.tencent.smtt.export.external.interfaces.SslError;
import com.tencent.smtt.sdk.WebView;
import java.util.Date;

public class WebPerfMonitor
{
  private static boolean Connected;
  private static Application application;
  private static String second;
  private static String step;
  private static a via;
  
  private WebPerfMonitor() {}
  
  public static Application getApplication()
  {
    return application;
  }
  
  public static a getPerfSettings()
  {
    return via;
  }
  
  public static void init(Application paramApplication, a paramA)
  {
    application = paramApplication;
    via = paramA;
    ClassWriter.c();
  }
  
  public static void initEnd(Activity paramActivity)
  {
    second = String.valueOf(System.currentTimeMillis());
  }
  
  public static void initStart(Activity paramActivity)
  {
    step = String.valueOf(System.currentTimeMillis());
  }
  
  public static void onLoadUrl(WebView paramWebView, String paramString)
  {
    if ((application != null) && (Connected) && (paramWebView != null))
    {
      if (TextUtils.isEmpty(paramString)) {
        return;
      }
      paramWebView.addJavascriptInterface(new com.jd.libs.hybrid.performance.service.ClassWriter(paramWebView), "JDPerformance");
      paramString = new f(paramWebView);
      paramString.add("initStart", step);
      paramString.add("initFinish", second);
      paramWebView.setTag(paramString);
    }
  }
  
  public static void onMatchOffline(WebView paramWebView)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f))) {
      ((f)paramWebView.getTag()).add("businessType", "1");
    }
  }
  
  public static void onOfflineBingo(WebView paramWebView)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f))) {
      ((f)paramWebView.getTag()).add("businessBingo", "1");
    }
  }
  
  public static void onPageCommitVisible(WebView paramWebView, String paramString)
  {
    if ((application != null) && (Connected) && (paramWebView != null)) {
      paramWebView.getTag();
    }
  }
  
  public static void onPageFinish(WebView paramWebView, String paramString)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f)))
    {
      long l = System.currentTimeMillis();
      f localF = (f)paramWebView.getTag();
      localF.e(null);
      ByteVector localByteVector2 = localF.b(paramString);
      ByteVector localByteVector1 = localByteVector2;
      if (localByteVector2 != null)
      {
        if (localF.c(paramString)) {
          localObject = "combinedPageFinish";
        } else {
          localObject = "pageFinish";
        }
        localByteVector2.a((String)localObject, String.valueOf(l));
        localByteVector2.b(null);
      }
      Object localObject = localByteVector1;
      if (paramWebView.getProgress() >= 100)
      {
        if (localByteVector2 == null) {
          localByteVector1 = localF.a(paramString);
        }
        if (localByteVector1 != null)
        {
          localByteVector1.b(null);
          localByteVector1.a("pageFinish100", String.valueOf(l));
        }
        paramWebView.loadUrl(String.format("javascript:window.%s&&%s.sendResource(JSON.stringify(window.performance.timing));", new Object[] { "JDPerformance", "JDPerformance" }));
        localObject = localByteVector1;
      }
      if (localObject != null)
      {
        ((ByteVector)localObject).add(l);
        localF.a((ByteVector)localObject, false);
      }
    }
  }
  
  public static void onPageStart(WebView paramWebView, String paramString)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f)))
    {
      f localF = (f)paramWebView.getTag();
      localF.e("load");
      Object localObject = localF.b();
      paramWebView = (WebView)localObject;
      if ((localObject == null) || (((ByteVector)localObject).a("pageStart")) || (((ByteVector)localObject).a())) {
        paramWebView = localF.a();
      }
      if (localF.c(paramString)) {
        localObject = "combinedPageStart";
      } else {
        localObject = "pageStart";
      }
      localF.add((String)localObject, String.valueOf(System.currentTimeMillis()));
      localF.add("url", paramString);
      if (paramWebView != null) {
        paramWebView.b("load");
      }
    }
  }
  
  public static void onPreloadStatusChange(WebView paramWebView, String paramString)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f))) {
      ((f)paramWebView.getTag()).add("preloadStatus", paramString);
    }
  }
  
  public static void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f)))
    {
      paramWebView = (f)paramWebView.getTag();
      paramWebView.e(null);
      ByteVector localByteVector = paramWebView.b();
      if (localByteVector != null) {
        localByteVector.b(null);
      }
      paramWebView.d(true);
      paramWebView.d(paramString2);
      paramWebView.add("errorCode", String.valueOf(paramInt));
      paramWebView.add("errorMsg", paramString1);
    }
  }
  
  public static void onReceivedHttpError(WebView paramWebView, String paramString1, int paramInt, String paramString2)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f)))
    {
      paramWebView = (f)paramWebView.getTag();
      paramWebView.c(true);
      JDJSONObject localJDJSONObject = new JDJSONObject();
      localJDJSONObject.get("url", paramString1);
      localJDJSONObject.get("errorCode", String.valueOf(paramInt));
      localJDJSONObject.get("msg", paramString2);
      paramWebView.c(localJDJSONObject);
    }
  }
  
  public static void onResume(WebView paramWebView)
  {
    if ((application != null) && (Connected) && (paramWebView != null)) {
      paramWebView.getTag();
    }
  }
  
  public static void onSSLErr(WebView paramWebView, String paramString, SslError paramSslError)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f)))
    {
      f localF = (f)paramWebView.getTag();
      localF.c(true);
      localF.d(paramWebView.getUrl());
      paramWebView = new JDJSONObject();
      try
      {
        paramWebView.get("url", paramString);
        paramWebView.get("errorCode", String.valueOf(paramSslError.getPrimaryError()));
        int i = paramSslError.getPrimaryError();
        paramString = paramSslError.getCertificate().toString();
        String str1 = paramSslError.getCertificate().getIssuedTo().getDName();
        String str2 = paramSslError.getCertificate().getIssuedBy().getDName();
        Date localDate = paramSslError.getCertificate().getValidNotBeforeDate();
        paramSslError = paramSslError.getCertificate().getValidNotAfterDate();
        paramWebView.get("msg", String.format("SSL primaryError: %s;\nSslCertificate:  %s;\nIssued to: %s;\nIssued by: %s;\nValidNotBeforeDate: %s;\nValidNotAfterDate: %s;", new Object[] { Integer.valueOf(i), paramString, str1, str2, localDate, paramSslError }));
      }
      catch (Exception paramString)
      {
        for (;;) {}
      }
      localF.b(paramWebView);
      return;
    }
  }
  
  public static void onStop(WebView paramWebView)
  {
    if ((application != null) && (Connected) && (paramWebView != null) && ((paramWebView.getTag() instanceof f))) {
      ((f)paramWebView.getTag()).e();
    }
  }
  
  public static void setApplication(Application paramApplication)
  {
    application = paramApplication;
  }
  
  public static abstract interface a
  {
    public abstract String format();
    
    public abstract String getAsString();
    
    public abstract String getSort();
    
    public abstract String getString();
    
    public abstract String replace();
  }
}
