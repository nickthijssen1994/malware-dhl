package com.jd.libs.hybrid.performance;

import android.text.TextUtils;
import android.util.Log;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONObject;
import com.jingdong.sdk.oklog.OKLog;
import java.net.InetAddress;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import performance.jd.jdreportperformance.entity.StategyEntity;

public class i
{
  private static i l;
  private boolean a;
  private volatile boolean b;
  private ExecutorService e;
  
  private i()
  {
    boolean bool2 = false;
    a = false;
    b = false;
    try
    {
      Object localObject1 = ClassWriter.a(WebPerfMonitor.getApplication(), "7", "4");
      if (localObject1 == null) {
        return;
      }
      Object localObject2 = ret;
      boolean bool1 = "1".equals(localObject2);
      a = bool1;
      if (a)
      {
        localObject2 = Executors.newFixedThreadPool(1);
        e = ((ExecutorService)localObject2);
      }
      localObject1 = param;
      localObject1 = JDJSON.parseObject((String)localObject1);
      bool1 = bool2;
      if (localObject1 != null)
      {
        int i = ((JDJSONObject)localObject1).getIntValue("detail");
        bool1 = bool2;
        if (1 == i) {
          bool1 = true;
        }
      }
      b = bool1;
      if (OKLog.c)
      {
        localObject1 = new StringBuilder("?????????, enable = ");
        bool1 = a;
        ((StringBuilder)localObject1).append(bool1);
        ((StringBuilder)localObject1).append(", reportDetail = ");
        bool1 = b;
        ((StringBuilder)localObject1).append(bool1);
        OKLog.append("WebPerfManager", ((StringBuilder)localObject1).toString());
        return;
      }
    }
    catch (Exception localException)
    {
      Log.e("WebPerfManager", localException.getMessage(), localException);
    }
  }
  
  public static i a()
  {
    if (l == null) {
      try
      {
        if (l == null) {
          l = new i();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return l;
  }
  
  private static String read(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    try
    {
      paramString = InetAddress.getByName(paramString);
      if (paramString != null)
      {
        paramString = paramString.getHostAddress();
        return paramString;
      }
      return "";
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    return "";
  }
  
  public void a(ByteVector paramByteVector)
  {
    Object localObject1 = this;
    try
    {
      boolean bool = a;
      i localI = this;
      if ((bool) && (paramByteVector != null))
      {
        localObject1 = localI;
        if (!paramByteVector.a())
        {
          localObject1 = localI;
          if (paramByteVector.getValue() != null)
          {
            localObject1 = localI;
            if (!paramByteVector.getValue().isEmpty())
            {
              localObject1 = localI;
              Object localObject2 = e;
              if (localObject2 != null)
              {
                localObject1 = localI;
                try
                {
                  bool = paramByteVector.a("occurTime");
                  if (!bool)
                  {
                    localObject1 = localI;
                    long l1 = System.currentTimeMillis();
                    double d = l1;
                    Double.isNaN(d);
                    d /= 1000.0D;
                    localObject1 = localI;
                    paramByteVector.a("occurTime", new DecimalFormat("0.000000").format(d));
                  }
                  localObject1 = localI;
                  paramByteVector.a(true);
                  localObject1 = localI;
                  bool = TextUtils.isEmpty(paramByteVector.e());
                  if (!bool)
                  {
                    localObject1 = localI;
                    localObject2 = paramByteVector.e();
                  }
                  else
                  {
                    localObject1 = localI;
                    localObject2 = paramByteVector.get();
                  }
                  ExecutorService localExecutorService = e;
                  localObject1 = localI;
                  localExecutorService.submit(new Plot.a(paramByteVector.getValue(), paramByteVector.add(), (String)localObject2));
                  return;
                }
                catch (Exception paramByteVector)
                {
                  localObject1 = localI;
                  Log.e("WebPerfManager", ((Exception)paramByteVector).getMessage(), paramByteVector);
                }
              }
              return;
            }
          }
          return;
        }
      }
      return;
    }
    catch (Throwable paramByteVector)
    {
      throw paramByteVector;
    }
  }
  
  public void add(HashMap paramHashMap)
  {
    if ((a) && (paramHashMap != null))
    {
      if (paramHashMap.isEmpty()) {
        return;
      }
      try
      {
        boolean bool = paramHashMap.containsKey("occurTime");
        if (!bool)
        {
          long l1 = System.currentTimeMillis();
          double d = l1;
          Double.isNaN(d);
          d /= 1000.0D;
          paramHashMap.put("occurTime", new DecimalFormat("0.000000").format(d));
        }
        paramHashMap.put("typeId", "7");
        paramHashMap.put("chId", "4");
        if (OKLog.c)
        {
          StringBuilder localStringBuilder = new StringBuilder("?????? = ");
          localStringBuilder.append(paramHashMap.toString());
          OKLog.append("WebPerfManager", localStringBuilder.toString());
        }
        ClassWriter.a(paramHashMap);
        return;
      }
      catch (Exception paramHashMap)
      {
        Log.e("WebPerfManager", ((Exception)paramHashMap).getMessage(), paramHashMap);
      }
    }
  }
  
  public boolean b()
  {
    return b;
  }
  
  public boolean c()
  {
    return a;
  }
}
