package com.jd.libs.hybrid;

import android.content.Context;
import android.os.Build.VERSION;
import androidx.annotation.Keep;
import com.jd.libs.hybrid.base.a.b.a;
import com.jd.libs.hybrid.base.a.b.d;
import com.jd.libs.hybrid.base.a.TIntLongMap;
import com.jd.libs.hybrid.base.a.a;
import com.jd.libs.hybrid.base.asm.Log;
import com.jd.libs.hybrid.base.f;
import com.jd.libs.hybrid.offlineload.entity.CommonEntity;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader;
import com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.Callback;
import com.jd.libs.hybrid.preload.CustomParamProvider;
import com.jd.libs.hybrid.preload.CustomParamProvider.ParamGetter;
import com.jd.libs.hybrid.preload.Item;
import com.jd.libs.hybrid.preload.Label;
import com.jd.libs.hybrid.preload.entity.PreloadInfoEntity;
import com.jd.libs.xconsole.Configurator;
import java.util.List;

@Keep
public class HybridSDK
{
  private static final String PAGE_KEY = "HybridSDK";
  
  public HybridSDK() {}
  
  public static int getMaxOfflineFetchTime()
  {
    return f.s;
  }
  
  public static void initSDK(Context paramContext, String paramString)
  {
    if (isInited())
    {
      Log.d("HybridSDK", "Hybrid was inited before.");
      return;
    }
    if (Build.VERSION.SDK_INT < 19)
    {
      Log.d("HybridSDK", "Web Hybrid SDK does NOT support SDK less than 19(API < KITKAT).");
      return;
    }
    f.f(true);
    f.a(paramContext);
    f.b(paramString);
    com.jd.hybrid.downloader.ClassWriter.a(com.jd.hybrid.downloader.ClassWriter.b(paramContext));
    Configurator.b(paramContext);
  }
  
  public static void initSDK(Context paramContext, String paramString, boolean paramBoolean)
  {
    setDebug(paramBoolean);
    initSDK(paramContext, paramString);
  }
  
  public static boolean isDebug()
  {
    return f.c();
  }
  
  public static boolean isInited()
  {
    return f.f();
  }
  
  public static void loadConfig()
  {
    if (!isInited())
    {
      Log.e("Hybrid SDK is not initialized!");
      return;
    }
    if ((f.e()) && (f.d())) {
      return;
    }
    new OfflineEntityLoader().f(new OfflineEntityLoader.Callback()
    {
      public final void add(Exception paramAnonymousException)
      {
        f.e(true);
        f.d(true);
        StringBuilder localStringBuilder = new StringBuilder("Hybrid???????Hybrid???????");
        Object localObject;
        if (paramAnonymousException != null)
        {
          localObject = new StringBuilder("error: ");
          ((StringBuilder)localObject).append(paramAnonymousException.getMessage());
          localObject = ((StringBuilder)localObject).toString();
        }
        else
        {
          localObject = "";
        }
        localStringBuilder.append((String)localObject);
        Log.log("HybridSDK", localStringBuilder.toString());
        Log.e("HybridSDK", paramAnonymousException);
      }
    });
  }
  
  public static void setDebug(boolean paramBoolean)
  {
    f.b(paramBoolean);
  }
  
  public static void setForceHttp(boolean paramBoolean)
  {
    com.jd.libs.hybrid.base.ClassWriter.c(paramBoolean);
  }
  
  public static void setGatewaySettings(a.b.d paramD)
  {
    com.jd.libs.hybrid.base.ClassWriter.c(paramD);
  }
  
  public static void setMaxOfflineFetchTime(int paramInt)
  {
    if (paramInt > 0) {
      f.c(paramInt);
    }
  }
  
  public static void setPreloadCustomParamsGetter(CustomParamProvider.ParamGetter paramParamGetter)
  {
    CustomParamProvider.setHeaders(paramParamGetter);
  }
  
  public static void setPreloadDataProvider(a.b.a paramA)
  {
    com.jd.libs.hybrid.base.ClassWriter.b(paramA);
  }
  
  public static void setPreloadExtraParamsGetter(Label paramLabel)
  {
    Item.set(paramLabel);
  }
  
  @Keep
  static class HybridResult
    implements a
  {
    HybridSDK.Offline offlinePackage;
    HybridSDK.Preload preload;
    
    HybridResult() {}
    
    public HybridSDK.Offline getOfflinePackage()
    {
      return offlinePackage;
    }
    
    public HybridSDK.Preload getPreload()
    {
      return preload;
    }
    
    public void setOfflinePackage(HybridSDK.Offline paramOffline)
    {
      offlinePackage = paramOffline;
    }
    
    public void setPreload(HybridSDK.Preload paramPreload)
    {
      preload = paramPreload;
    }
    
    public boolean useful()
    {
      Object localObject = preload;
      if ((localObject == null) || (((HybridSDK.Preload)localObject).useful())) {
        localObject = offlinePackage;
      }
      return (localObject == null) || (((HybridSDK.Offline)localObject).useful());
    }
  }
  
  @Keep
  static class Offline
    implements a
  {
    List<CommonEntity> common;
    int dUpper = 50;
    int maxThread;
    List<OfflineEntity> modules;
    List<String> network;
    int retry = 0;
    float spRatio = 0.4F;
    int timeout;
    
    Offline() {}
    
    public List getCommon()
    {
      return common;
    }
    
    public int getMaxThread()
    {
      return maxThread;
    }
    
    public List getModules()
    {
      return modules;
    }
    
    public List getNetwork()
    {
      return network;
    }
    
    public int getRetry()
    {
      return retry;
    }
    
    public float getSpRatio()
    {
      return spRatio;
    }
    
    public int getTimeout()
    {
      return timeout;
    }
    
    public int getdUpper()
    {
      return dUpper;
    }
    
    public void setCommon(List paramList)
    {
      common = paramList;
    }
    
    public void setMaxThread(int paramInt)
    {
      maxThread = paramInt;
    }
    
    public void setModules(List paramList)
    {
      modules = paramList;
    }
    
    public void setNetwork(List paramList)
    {
      network = paramList;
    }
    
    public void setRetry(int paramInt)
    {
      retry = paramInt;
    }
    
    public void setSpRatio(float paramFloat)
    {
      spRatio = paramFloat;
    }
    
    public void setTimeout(int paramInt)
    {
      timeout = paramInt;
    }
    
    public void setdUpper(int paramInt)
    {
      dUpper = paramInt;
    }
    
    public boolean useful()
    {
      return TIntLongMap.putAll(modules, true);
    }
  }
  
  @Keep
  static class Preload
    implements a
  {
    List<PreloadInfoEntity> modules;
    
    Preload() {}
    
    public List getModules()
    {
      return modules;
    }
    
    public void setModules(List paramList)
    {
      modules = paramList;
    }
    
    public boolean useful()
    {
      return TIntLongMap.putAll(modules, true);
    }
  }
}
