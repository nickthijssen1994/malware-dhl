package com.hashedin.geography;

import android.content.Context;
import android.content.SharedPreferences;
import com.alibaba.fastjson.parser.JSONLexer;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.InflaterInputStream;
import java.util.zip.InflaterOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

/* loaded from: classes.dex */
final class d implements Closeable {
    private static final String m;
    private static final String n;
    private final File p;
    private final long q;
    private final File r;
    private final RandomAccessFile s;
    private final FileChannel t;
    private final FileLock u;
    public static final String a = a.a;
    public static final String b = a.i;
    private static final String c = c.a;
    private static final String d = a.h;
    private static final String e = a(344);
    private static final String f = a(359);
    private static final String g = a(374);
    private static final String h = a(389);
    private static final String i = a(404);
    private static final String j = a(419);
    private static final String k = a.g;
    private static final String l = a.d;
    private static final String o = a.b;

    static {
        String str = a.c;
        m = str;
        StringBuilder sb = new StringBuilder();
        sb.append(a(504));
        String str2 = File.separator;
        sb.append(str2);
        sb.append(str);
        sb.append(str2);
        n = sb.toString();
    }

    public d(File file, File file2) {
        StringBuilder sb = new StringBuilder();
        sb.append(a(619));
        sb.append(file.getPath());
        sb.append(a(631));
        sb.append(file2.getPath());
        sb.append(a(643));
        this.p = file;
        this.r = file2;
        this.q = b(file);
        File file3 = new File(file2, k);
        RandomAccessFile randomAccessFile = new RandomAccessFile(file3, a(703));
        this.s = randomAccessFile;
        try {
            FileChannel channel = randomAccessFile.getChannel();
            this.t = channel;
            try {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(a(733));
                sb2.append(file3.getPath());
                this.u = channel.lock();
                StringBuilder sb3 = new StringBuilder();
                sb3.append(file3.getPath());
                sb3.append(a(804));
            } catch (IOException | Error | RuntimeException e2) {
                a(this.t);
                throw e2;
            }
        } catch (IOException | Error | RuntimeException e3) {
            a(this.s);
            throw e3;
        }
    }

    private static long a(File file) {
        long lastModified = file.lastModified();
        return lastModified == -1 ? lastModified - 1 : lastModified;
    }

    private static SharedPreferences a(Context context) {
        return context.getSharedPreferences(e, 4);
    }

    private static String a(int i2) {
        int i3 = 0;
        try {
            if (i2 == 344) {
                byte[] bArr = new byte[16];
                bArr[0] = 53;
                bArr[1] = 45;
                bArr[2] = 52;
                bArr[3] = 44;
                bArr[4] = 49;
                bArr[5] = 60;
                bArr[6] = 61;
                bArr[7] = 32;
                bArr[8] = 118;
                bArr[9] = 46;
                bArr[10] = 61;
                bArr[11] = 42;
                bArr[12] = 43;
                bArr[13] = 49;
                bArr[14] = 55;
                bArr[15] = 54;
                while (i3 < 16) {
                    bArr[i3] = (byte) ((byte) (bArr[i3] ^ i2));
                    i3++;
                }
                return new String(bArr, StandardCharsets.UTF_8);
            } else if (i2 == 359) {
                byte[] bArr2 = new byte[9];
                bArr2[0] = 19;
                bArr2[1] = 14;
                bArr2[2] = 10;
                bArr2[3] = 2;
                bArr2[4] = 20;
                bArr2[5] = 19;
                bArr2[6] = 6;
                bArr2[7] = 10;
                bArr2[8] = 23;
                while (i3 < 9) {
                    bArr2[i3] = (byte) ((byte) (bArr2[i3] ^ i2));
                    i3++;
                }
                return new String(bArr2, StandardCharsets.UTF_8);
            } else if (i2 == 374) {
                byte[] bArr3 = new byte[3];
                bArr3[0] = 21;
                bArr3[1] = 4;
                bArr3[2] = 21;
                while (i3 < 3) {
                    bArr3[i3] = (byte) ((byte) (bArr3[i3] ^ i2));
                    i3++;
                }
                return new String(bArr3, StandardCharsets.UTF_8);
            } else if (i2 == 389) {
                byte[] bArr4 = new byte[10];
                bArr4[0] = -31;
                bArr4[1] = -32;
                bArr4[2] = -3;
                bArr4[3] = -85;
                bArr4[4] = -21;
                bArr4[5] = -16;
                bArr4[6] = -24;
                bArr4[7] = -25;
                bArr4[8] = -32;
                bArr4[9] = -9;
                while (i3 < 10) {
                    bArr4[i3] = (byte) ((byte) (bArr4[i3] ^ i2));
                    i3++;
                }
                return new String(bArr4, StandardCharsets.UTF_8);
            } else if (i2 == 404) {
                byte[] bArr5 = new byte[8];
                bArr5[0] = -16;
                bArr5[1] = -15;
                bArr5[2] = -20;
                bArr5[3] = -70;
                bArr5[4] = -9;
                bArr5[5] = -26;
                bArr5[6] = -9;
                bArr5[7] = -70;
                while (i3 < 8) {
                    bArr5[i3] = (byte) ((byte) (bArr5[i3] ^ i2));
                    i3++;
                }
                return new String(bArr5, StandardCharsets.UTF_8);
            } else if (i2 == 419) {
                byte[] bArr6 = new byte[9];
                bArr6[0] = -57;
                bArr6[1] = -58;
                bArr6[2] = -37;
                bArr6[3] = -115;
                bArr6[4] = -41;
                bArr6[5] = -54;
                bArr6[6] = -50;
                bArr6[7] = -58;
                bArr6[8] = -115;
                while (i3 < 9) {
                    bArr6[i3] = (byte) ((byte) (bArr6[i3] ^ i2));
                    i3++;
                }
                return new String(bArr6, StandardCharsets.UTF_8);
            } else if (i2 == 504) {
                byte[] bArr7 = new byte[6];
                bArr7[0] = -103;
                bArr7[1] = -117;
                bArr7[2] = -117;
                bArr7[3] = -99;
                bArr7[4] = -116;
                bArr7[5] = -117;
                while (i3 < 6) {
                    bArr7[i3] = (byte) ((byte) (bArr7[i3] ^ i2));
                    i3++;
                }
                return new String(bArr7, StandardCharsets.UTF_8);
            } else if (i2 == 619) {
                byte[] bArr8 = new byte[18];
                bArr8[0] = 38;
                bArr8[1] = 30;
                bArr8[2] = 7;
                bArr8[3] = 31;
                bArr8[4] = 2;
                bArr8[5] = 47;
                bArr8[6] = 14;
                bArr8[7] = 19;
                bArr8[8] = 46;
                bArr8[9] = 19;
                bArr8[10] = 31;
                bArr8[11] = 25;
                bArr8[12] = 10;
                bArr8[13] = 8;
                bArr8[14] = 31;
                bArr8[15] = 4;
                bArr8[16] = 25;
                bArr8[17] = 67;
                while (i3 < 18) {
                    bArr8[i3] = (byte) ((byte) (bArr8[i3] ^ i2));
                    i3++;
                }
                return new String(bArr8, StandardCharsets.UTF_8);
            } else if (i2 == 631) {
                byte[] bArr9 = new byte[2];
                bArr9[0] = 91;
                bArr9[1] = 87;
                while (i3 < 2) {
                    bArr9[i3] = (byte) ((byte) (bArr9[i3] ^ i2));
                    i3++;
                }
                return new String(bArr9, StandardCharsets.UTF_8);
            } else if (i2 == 643) {
                byte[] bArr10 = new byte[1];
                bArr10[0] = -86;
                for (int i4 = 0; i4 <= 0; i4++) {
                    bArr10[0] = (byte) ((byte) (bArr10[0] ^ i2));
                }
                return new String(bArr10, StandardCharsets.UTF_8);
            } else if (i2 == 703) {
                byte[] bArr11 = new byte[2];
                bArr11[0] = -51;
                bArr11[1] = -56;
                while (i3 < 2) {
                    bArr11[i3] = (byte) ((byte) (bArr11[i3] ^ i2));
                    i3++;
                }
                return new String(bArr11, StandardCharsets.UTF_8);
            } else if (i2 == 733) {
                byte[] bArr12 = new byte[17];
                bArr12[0] = -97;
                bArr12[1] = -79;
                bArr12[2] = -78;
                bArr12[3] = -66;
                bArr12[4] = -74;
                bArr12[5] = -76;
                bArr12[6] = -77;
                bArr12[7] = -70;
                bArr12[8] = -3;
                bArr12[9] = -78;
                bArr12[10] = -77;
                bArr12[11] = -3;
                bArr12[12] = -79;
                bArr12[13] = -78;
                bArr12[14] = -66;
                bArr12[15] = -74;
                bArr12[16] = -3;
                while (i3 < 17) {
                    bArr12[i3] = (byte) ((byte) (bArr12[i3] ^ i2));
                    i3++;
                }
                return new String(bArr12, StandardCharsets.UTF_8);
            } else if (i2 == 804) {
                byte[] bArr13 = new byte[7];
                bArr13[0] = 4;
                bArr13[1] = 72;
                bArr13[2] = 75;
                bArr13[3] = 71;
                bArr13[4] = 79;
                bArr13[5] = 65;
                bArr13[6] = 64;
                while (i3 < 7) {
                    bArr13[i3] = (byte) ((byte) (bArr13[i3] ^ i2));
                    i3++;
                }
                return new String(bArr13, StandardCharsets.UTF_8);
            } else if (i2 == 1391) {
                byte[] bArr14 = new byte[4];
                bArr14[0] = 27;
                bArr14[1] = 2;
                bArr14[2] = 31;
                bArr14[3] = 66;
                while (i3 < 4) {
                    bArr14[i3] = (byte) ((byte) (bArr14[i3] ^ i2));
                    i3++;
                }
                return new String(bArr14, StandardCharsets.UTF_8);
            } else if (i2 == 1416) {
                byte[] bArr15 = new byte[11];
                bArr15[0] = -51;
                bArr15[1] = -16;
                bArr15[2] = -4;
                bArr15[3] = -6;
                bArr15[4] = -23;
                bArr15[5] = -21;
                bArr15[6] = -4;
                bArr15[7] = -31;
                bArr15[8] = -26;
                bArr15[9] = -17;
                bArr15[10] = -88;
                while (i3 < 11) {
                    bArr15[i3] = (byte) ((byte) (bArr15[i3] ^ i2));
                    i3++;
                }
                return new String(bArr15, StandardCharsets.UTF_8);
            } else if (i2 == 1468) {
                byte[] bArr16 = new byte[11];
                bArr16[0] = -33;
                bArr16[1] = -48;
                bArr16[2] = -35;
                bArr16[3] = -49;
                bArr16[4] = -49;
                bArr16[5] = -39;
                bArr16[6] = -49;
                bArr16[7] = -110;
                bArr16[8] = -40;
                bArr16[9] = -39;
                bArr16[10] = -60;
                while (i3 < 11) {
                    bArr16[i3] = (byte) ((byte) (bArr16[i3] ^ i2));
                    i3++;
                }
                return new String(bArr16, StandardCharsets.UTF_8);
            } else if (i2 == 1568) {
                byte[] bArr17 = new byte[25];
                bArr17[0] = 102;
                bArr17[1] = 65;
                bArr17[2] = 73;
                bArr17[3] = 76;
                bArr17[4] = 69;
                bArr17[5] = 68;
                bArr17[6] = 0;
                bArr17[7] = 84;
                bArr17[8] = 79;
                bArr17[9] = 0;
                bArr17[10] = 77;
                bArr17[11] = 65;
                bArr17[12] = 82;
                bArr17[13] = 75;
                bArr17[14] = 0;
                bArr17[15] = 82;
                bArr17[16] = 69;
                bArr17[17] = 65;
                bArr17[18] = 68;
                bArr17[19] = 79;
                bArr17[20] = 78;
                bArr17[21] = 76;
                bArr17[22] = 89;
                bArr17[23] = 0;
                bArr17[24] = 2;
                while (i3 < 25) {
                    bArr17[i3] = (byte) ((byte) (bArr17[i3] ^ i2));
                    i3++;
                }
                return new String(bArr17, StandardCharsets.UTF_8);
            } else if (i2 == 1580) {
                byte[] bArr18 = new byte[11];
                bArr18[0] = 14;
                bArr18[1] = 12;
                bArr18[2] = 4;
                bArr18[3] = 88;
                bArr18[4] = 65;
                bArr18[5] = 92;
                bArr18[6] = 12;
                bArr18[7] = 67;
                bArr18[8] = 74;
                bArr18[9] = 12;
                bArr18[10] = 14;
                while (i3 < 11) {
                    bArr18[i3] = (byte) ((byte) (bArr18[i3] ^ i2));
                    i3++;
                }
                return new String(bArr18, StandardCharsets.UTF_8);
            } else if (i2 == 1592) {
                byte[] bArr19 = new byte[2];
                bArr19[0] = JSONLexer.EOI;
                bArr19[1] = 17;
                while (i3 < 2) {
                    bArr19[i3] = (byte) ((byte) (bArr19[i3] ^ i2));
                    i3++;
                }
                return new String(bArr19, StandardCharsets.UTF_8);
            } else if (i2 == 1605) {
                byte[] bArr20 = new byte[12];
                bArr20[0] = 23;
                bArr20[1] = 32;
                bArr20[2] = 43;
                bArr20[3] = 36;
                bArr20[4] = 40;
                bArr20[5] = 44;
                bArr20[6] = 43;
                bArr20[7] = 34;
                bArr20[8] = 101;
                bArr20[9] = 49;
                bArr20[10] = 42;
                bArr20[11] = 101;
                while (i3 < 12) {
                    bArr20[i3] = (byte) ((byte) (bArr20[i3] ^ i2));
                    i3++;
                }
                return new String(bArr20, StandardCharsets.UTF_8);
            } else if (i2 == 1637) {
                byte[] bArr21 = new byte[18];
                bArr21[0] = 35;
                bArr21[1] = 4;
                bArr21[2] = 12;
                bArr21[3] = 9;
                bArr21[4] = 0;
                bArr21[5] = 1;
                bArr21[6] = 69;
                bArr21[7] = 17;
                bArr21[8] = 10;
                bArr21[9] = 69;
                bArr21[10] = 23;
                bArr21[11] = 0;
                bArr21[12] = 11;
                bArr21[13] = 4;
                bArr21[14] = 8;
                bArr21[15] = 0;
                bArr21[16] = 69;
                bArr21[17] = 71;
                while (i3 < 18) {
                    bArr21[i3] = (byte) ((byte) (bArr21[i3] ^ i2));
                    i3++;
                }
                return new String(bArr21, StandardCharsets.UTF_8);
            } else if (i2 == 1649) {
                byte[] bArr22 = new byte[6];
                bArr22[0] = 83;
                bArr22[1] = 81;
                bArr22[2] = 5;
                bArr22[3] = 30;
                bArr22[4] = 81;
                bArr22[5] = 83;
                while (i3 < 6) {
                    bArr22[i3] = (byte) ((byte) (bArr22[i3] ^ i2));
                    i3++;
                }
                return new String(bArr22, StandardCharsets.UTF_8);
            } else if (i2 == 1661) {
                byte[] bArr23 = new byte[1];
                bArr23[0] = 95;
                for (int i5 = 0; i5 <= 0; i5++) {
                    bArr23[0] = (byte) ((byte) (bArr23[0] ^ i2));
                }
                return new String(bArr23, StandardCharsets.UTF_8);
            } else if (i2 == 1737) {
                byte[] bArr24 = new byte[24];
                bArr24[0] = -113;
                bArr24[1] = -88;
                bArr24[2] = -96;
                bArr24[3] = -91;
                bArr24[4] = -84;
                bArr24[5] = -83;
                bArr24[6] = -23;
                bArr24[7] = -67;
                bArr24[8] = -90;
                bArr24[9] = -23;
                bArr24[10] = -86;
                bArr24[11] = -91;
                bArr24[12] = -90;
                bArr24[13] = -70;
                bArr24[14] = -84;
                bArr24[15] = -23;
                bArr24[16] = -69;
                bArr24[17] = -84;
                bArr24[18] = -70;
                bArr24[19] = -90;
                bArr24[20] = -68;
                bArr24[21] = -69;
                bArr24[22] = -86;
                bArr24[23] = -84;
                while (i3 < 24) {
                    bArr24[i3] = (byte) ((byte) (bArr24[i3] ^ i2));
                    i3++;
                }
                return new String(bArr24, StandardCharsets.UTF_8);
            } else if (i2 == 1788) {
                byte[] bArr25 = new byte[23];
                bArr25[0] = -79;
                bArr25[1] = -119;
                bArr25[2] = -112;
                bArr25[3] = -120;
                bArr25[4] = -107;
                bArr25[5] = -72;
                bArr25[6] = -103;
                bArr25[7] = -124;
                bArr25[8] = -71;
                bArr25[9] = -124;
                bArr25[10] = -120;
                bArr25[11] = -114;
                bArr25[12] = -99;
                bArr25[13] = -97;
                bArr25[14] = -120;
                bArr25[15] = -109;
                bArr25[16] = -114;
                bArr25[17] = -46;
                bArr25[18] = -112;
                bArr25[19] = -109;
                bArr25[20] = -99;
                bArr25[21] = -104;
                bArr25[22] = -44;
                while (i3 < 23) {
                    bArr25[i3] = (byte) ((byte) (bArr25[i3] ^ i2));
                    i3++;
                }
                return new String(bArr25, StandardCharsets.UTF_8);
            } else if (i2 == 1800) {
                byte[] bArr26 = new byte[2];
                bArr26[0] = 36;
                bArr26[1] = 40;
                while (i3 < 2) {
                    bArr26[i3] = (byte) ((byte) (bArr26[i3] ^ i2));
                    i3++;
                }
                return new String(bArr26, StandardCharsets.UTF_8);
            } else if (i2 == 1808) {
                byte[] bArr27 = new byte[2];
                bArr27[0] = 60;
                bArr27[1] = 48;
                while (i3 < 2) {
                    bArr27[i3] = (byte) ((byte) (bArr27[i3] ^ i2));
                    i3++;
                }
                return new String(bArr27, StandardCharsets.UTF_8);
            } else if (i2 == 1816) {
                byte[] bArr28 = new byte[1];
                bArr28[0] = 49;
                for (int i6 = 0; i6 <= 0; i6++) {
                    bArr28[0] = (byte) ((byte) (bArr28[0] ^ i2));
                }
                return new String(bArr28, StandardCharsets.UTF_8);
            } else if (i2 == 1839) {
                byte[] bArr29 = new byte[28];
                bArr29[0] = 98;
                bArr29[1] = 90;
                bArr29[2] = 67;
                bArr29[3] = 91;
                bArr29[4] = 70;
                bArr29[5] = 107;
                bArr29[6] = 74;
                bArr29[7] = 87;
                bArr29[8] = 106;
                bArr29[9] = 87;
                bArr29[10] = 91;
                bArr29[11] = 93;
                bArr29[12] = 78;
                bArr29[13] = 76;
                bArr29[14] = 91;
                bArr29[15] = 64;
                bArr29[16] = 93;
                bArr29[17] = 15;
                bArr29[18] = 88;
                bArr29[19] = 78;
                bArr29[20] = 92;
                bArr29[21] = 15;
                bArr29[22] = 76;
                bArr29[23] = 67;
                bArr29[24] = 64;
                bArr29[25] = 92;
                bArr29[26] = 74;
                bArr29[27] = 75;
                while (i3 < 28) {
                    bArr29[i3] = (byte) ((byte) (bArr29[i3] ^ i2));
                    i3++;
                }
                return new String(bArr29, StandardCharsets.UTF_8);
            } else if (i2 == 1916) {
                byte[] bArr30 = new byte[56];
                bArr30[0] = 58;
                bArr30[1] = 29;
                bArr30[2] = 21;
                bArr30[3] = 16;
                bArr30[4] = 25;
                bArr30[5] = 24;
                bArr30[6] = 92;
                bArr30[7] = 8;
                bArr30[8] = 19;
                bArr30[9] = 92;
                bArr30[10] = 14;
                bArr30[11] = 25;
                bArr30[12] = 16;
                bArr30[13] = 19;
                bArr30[14] = 29;
                bArr30[15] = 24;
                bArr30[16] = 92;
                bArr30[17] = 25;
                bArr30[18] = 4;
                bArr30[19] = 21;
                bArr30[20] = 15;
                bArr30[21] = 8;
                bArr30[22] = 21;
                bArr30[23] = 18;
                bArr30[24] = 27;
                bArr30[25] = 92;
                bArr30[26] = 25;
                bArr30[27] = 4;
                bArr30[28] = 8;
                bArr30[29] = 14;
                bArr30[30] = 29;
                bArr30[31] = 31;
                bArr30[32] = 8;
                bArr30[33] = 25;
                bArr30[34] = 24;
                bArr30[35] = 92;
                bArr30[36] = 15;
                bArr30[37] = 25;
                bArr30[38] = 31;
                bArr30[39] = 19;
                bArr30[40] = 18;
                bArr30[41] = 24;
                bArr30[42] = 29;
                bArr30[43] = 14;
                bArr30[44] = 5;
                bArr30[45] = 92;
                bArr30[46] = 24;
                bArr30[47] = 25;
                bArr30[48] = 4;
                bArr30[49] = 92;
                bArr30[50] = JSONLexer.EOI;
                bArr30[51] = 21;
                bArr30[52] = 16;
                bArr30[53] = 25;
                bArr30[54] = 15;
                bArr30[55] = 80;
                while (i3 < 56) {
                    bArr30[i3] = (byte) ((byte) (bArr30[i3] ^ i2));
                    i3++;
                }
                return new String(bArr30, StandardCharsets.UTF_8);
            } else if (i2 == 1920) {
                byte[] bArr31 = new byte[33];
                bArr31[0] = -96;
                bArr31[1] = -26;
                bArr31[2] = -31;
                bArr31[3] = -20;
                bArr31[4] = -20;
                bArr31[5] = -23;
                bArr31[6] = -18;
                bArr31[7] = -25;
                bArr31[8] = -96;
                bArr31[9] = -30;
                bArr31[10] = -31;
                bArr31[11] = -29;
                bArr31[12] = -21;
                bArr31[13] = -96;
                bArr31[14] = -12;
                bArr31[15] = -17;
                bArr31[16] = -96;
                bArr31[17] = -26;
                bArr31[18] = -14;
                bArr31[19] = -27;
                bArr31[20] = -13;
                bArr31[21] = -24;
                bArr31[22] = -96;
                bArr31[23] = -27;
                bArr31[24] = -8;
                bArr31[25] = -12;
                bArr31[26] = -14;
                bArr31[27] = -31;
                bArr31[28] = -29;
                bArr31[29] = -12;
                bArr31[30] = -23;
                bArr31[31] = -17;
                bArr31[32] = -18;
                while (i3 < 33) {
                    bArr31[i3] = (byte) ((byte) (bArr31[i3] ^ i2));
                    i3++;
                }
                return new String(bArr31, StandardCharsets.UTF_8);
            } else if (i2 == 1980) {
                byte[] bArr32 = new byte[36];
                bArr32[0] = -6;
                bArr32[1] = -45;
                bArr32[2] = -50;
                bArr32[3] = -33;
                bArr32[4] = -39;
                bArr32[5] = -40;
                bArr32[6] = -100;
                bArr32[7] = -39;
                bArr32[8] = -60;
                bArr32[9] = -56;
                bArr32[10] = -50;
                bArr32[11] = -35;
                bArr32[12] = -33;
                bArr32[13] = -56;
                bArr32[14] = -43;
                bArr32[15] = -45;
                bArr32[16] = -46;
                bArr32[17] = -100;
                bArr32[18] = -47;
                bArr32[19] = -55;
                bArr32[20] = -49;
                bArr32[21] = -56;
                bArr32[22] = -100;
                bArr32[23] = -34;
                bArr32[24] = -39;
                bArr32[25] = -100;
                bArr32[26] = -52;
                bArr32[27] = -39;
                bArr32[28] = -50;
                bArr32[29] = -38;
                bArr32[30] = -45;
                bArr32[31] = -50;
                bArr32[32] = -47;
                bArr32[33] = -39;
                bArr32[34] = -40;
                bArr32[35] = -110;
                while (i3 < 36) {
                    bArr32[i3] = (byte) ((byte) (bArr32[i3] ^ i2));
                    i3++;
                }
                return new String(bArr32, StandardCharsets.UTF_8);
            } else if (i2 == 1997) {
                byte[] bArr33 = new byte[43];
                bArr33[0] = -119;
                bArr33[1] = -88;
                bArr33[2] = -71;
                bArr33[3] = -88;
                bArr33[4] = -82;
                bArr33[5] = -71;
                bArr33[6] = -88;
                bArr33[7] = -87;
                bArr33[8] = -19;
                bArr33[9] = -71;
                bArr33[10] = -91;
                bArr33[11] = -84;
                bArr33[12] = -71;
                bArr33[13] = -19;
                bArr33[14] = -88;
                bArr33[15] = -75;
                bArr33[16] = -71;
                bArr33[17] = -65;
                bArr33[18] = -84;
                bArr33[19] = -82;
                bArr33[20] = -71;
                bArr33[21] = -92;
                bArr33[22] = -94;
                bArr33[23] = -93;
                bArr33[24] = -19;
                bArr33[25] = -96;
                bArr33[26] = -72;
                bArr33[27] = -66;
                bArr33[28] = -71;
                bArr33[29] = -19;
                bArr33[30] = -81;
                bArr33[31] = -88;
                bArr33[32] = -19;
                bArr33[33] = -67;
                bArr33[34] = -88;
                bArr33[35] = -65;
                bArr33[36] = -85;
                bArr33[37] = -94;
                bArr33[38] = -65;
                bArr33[39] = -96;
                bArr33[40] = -88;
                bArr33[41] = -87;
                bArr33[42] = -29;
                while (i3 < 43) {
                    bArr33[i3] = (byte) ((byte) (bArr33[i3] ^ i2));
                    i3++;
                }
                return new String(bArr33, StandardCharsets.UTF_8);
            } else if (i2 == 2042) {
                byte[] bArr34 = new byte[11];
                bArr34[0] = -106;
                bArr34[1] = -107;
                bArr34[2] = -101;
                bArr34[3] = -98;
                bArr34[4] = -38;
                bArr34[5] = -100;
                bArr34[6] = -107;
                bArr34[7] = -113;
                bArr34[8] = -108;
                bArr34[9] = -98;
                bArr34[10] = -38;
                while (i3 < 11) {
                    bArr34[i3] = (byte) ((byte) (bArr34[i3] ^ i2));
                    i3++;
                }
                return new String(bArr34, StandardCharsets.UTF_8);
            } else if (i2 == 2054) {
                byte[] bArr35 = new byte[20];
                bArr35[0] = 38;
                bArr35[1] = 117;
                bArr35[2] = 99;
                bArr35[3] = 101;
                bArr35[4] = 105;
                bArr35[5] = 104;
                bArr35[6] = 98;
                bArr35[7] = 103;
                bArr35[8] = 116;
                bArr35[9] = Byte.MAX_VALUE;
                bArr35[10] = 38;
                bArr35[11] = 98;
                bArr35[12] = 99;
                bArr35[13] = 126;
                bArr35[14] = 38;
                bArr35[15] = 96;
                bArr35[16] = 111;
                bArr35[17] = 106;
                bArr35[18] = 99;
                bArr35[19] = 117;
                while (i3 < 20) {
                    bArr35[i3] = (byte) ((byte) (bArr35[i3] ^ i2));
                    i3++;
                }
                return new String(bArr35, StandardCharsets.UTF_8);
            } else if (i2 == 2138) {
                byte[] bArr36 = new byte[36];
                bArr36[0] = 54;
                bArr36[1] = 53;
                bArr36[2] = 59;
                bArr36[3] = 62;
                bArr36[4] = 51;
                bArr36[5] = 52;
                bArr36[6] = 61;
                bArr36[7] = 122;
                bArr36[8] = 63;
                bArr36[9] = 34;
                bArr36[10] = 51;
                bArr36[11] = 41;
                bArr36[12] = 46;
                bArr36[13] = 51;
                bArr36[14] = 52;
                bArr36[15] = 61;
                bArr36[16] = 122;
                bArr36[17] = 41;
                bArr36[18] = 63;
                bArr36[19] = 57;
                bArr36[20] = 53;
                bArr36[21] = 52;
                bArr36[22] = 62;
                bArr36[23] = 59;
                bArr36[24] = 40;
                bArr36[25] = 35;
                bArr36[26] = 122;
                bArr36[27] = 62;
                bArr36[28] = 63;
                bArr36[29] = 34;
                bArr36[30] = 122;
                bArr36[31] = 60;
                bArr36[32] = 51;
                bArr36[33] = 54;
                bArr36[34] = 63;
                bArr36[35] = 41;
                while (i3 < 36) {
                    bArr36[i3] = (byte) ((byte) (bArr36[i3] ^ i2));
                    i3++;
                }
                return new String(bArr36, StandardCharsets.UTF_8);
            } else if (i2 == 2405) {
                byte[] bArr37 = new byte[23];
                bArr37[0] = 44;
                bArr37[1] = 11;
                bArr37[2] = 19;
                bArr37[3] = 4;
                bArr37[4] = 9;
                bArr37[5] = 12;
                bArr37[6] = 1;
                bArr37[7] = 69;
                bArr37[8] = 0;
                bArr37[9] = 29;
                bArr37[10] = 17;
                bArr37[11] = 23;
                bArr37[12] = 4;
                bArr37[13] = 6;
                bArr37[14] = 17;
                bArr37[15] = 0;
                bArr37[16] = 1;
                bArr37[17] = 69;
                bArr37[18] = 1;
                bArr37[19] = 0;
                bArr37[20] = 29;
                bArr37[21] = 95;
                bArr37[22] = 69;
                while (i3 < 23) {
                    bArr37[i3] = (byte) ((byte) (bArr37[i3] ^ i2));
                    i3++;
                }
                return new String(bArr37, StandardCharsets.UTF_8);
            } else if (i2 == 2413) {
                byte[] bArr38 = new byte[7];
                bArr38[0] = 77;
                bArr38[1] = 69;
                bArr38[2] = 6;
                bArr38[3] = 8;
                bArr38[4] = 20;
                bArr38[5] = 77;
                bArr38[6] = 79;
                while (i3 < 7) {
                    bArr38[i3] = (byte) ((byte) (bArr38[i3] ^ i2));
                    i3++;
                }
                return new String(bArr38, StandardCharsets.UTF_8);
            } else if (i2 == 2421) {
                byte[] bArr39 = new byte[32];
                bArr39[0] = 87;
                bArr39[1] = 92;
                bArr39[2] = 89;
                bArr39[3] = 85;
                bArr39[4] = 16;
                bArr39[5] = 13;
                bArr39[6] = 5;
                bArr39[7] = 16;
                bArr39[8] = 22;
                bArr39[9] = 1;
                bArr39[10] = 16;
                bArr39[11] = 17;
                bArr39[12] = 85;
                bArr39[13] = 24;
                bArr39[14] = JSONLexer.EOI;
                bArr39[15] = 17;
                bArr39[16] = 28;
                bArr39[17] = 19;
                bArr39[18] = 28;
                bArr39[19] = 22;
                bArr39[20] = 20;
                bArr39[21] = 1;
                bArr39[22] = 28;
                bArr39[23] = JSONLexer.EOI;
                bArr39[24] = 27;
                bArr39[25] = 85;
                bArr39[26] = 1;
                bArr39[27] = 28;
                bArr39[28] = 24;
                bArr39[29] = 16;
                bArr39[30] = 79;
                bArr39[31] = 85;
                while (i3 < 32) {
                    bArr39[i3] = (byte) ((byte) (bArr39[i3] ^ i2));
                    i3++;
                }
                return new String(bArr39, StandardCharsets.UTF_8);
            } else if (i2 == 2429) {
                byte[] bArr40 = new byte[21];
                bArr40[0] = 81;
                bArr40[1] = 93;
                bArr40[2] = 16;
                bArr40[3] = 18;
                bArr40[4] = 25;
                bArr40[5] = 20;
                bArr40[6] = 27;
                bArr40[7] = 20;
                bArr40[8] = 30;
                bArr40[9] = 28;
                bArr40[10] = 9;
                bArr40[11] = 20;
                bArr40[12] = 18;
                bArr40[13] = 19;
                bArr40[14] = 93;
                bArr40[15] = 9;
                bArr40[16] = 20;
                bArr40[17] = 16;
                bArr40[18] = 24;
                bArr40[19] = 71;
                bArr40[20] = 93;
                while (i3 < 21) {
                    bArr40[i3] = (byte) ((byte) (bArr40[i3] ^ i2));
                    i3++;
                }
                return new String(bArr40, StandardCharsets.UTF_8);
            } else if (i2 == 2437) {
                byte[] bArr41 = new byte[16];
                bArr41[0] = -87;
                bArr41[1] = -91;
                bArr41[2] = -32;
                bArr41[3] = -3;
                bArr41[4] = -11;
                bArr41[5] = -32;
                bArr41[6] = -26;
                bArr41[7] = -15;
                bArr41[8] = -32;
                bArr41[9] = -31;
                bArr41[10] = -91;
                bArr41[11] = -26;
                bArr41[12] = -9;
                bArr41[13] = -26;
                bArr41[14] = -65;
                bArr41[15] = -91;
                while (i3 < 16) {
                    bArr41[i3] = (byte) ((byte) (bArr41[i3] ^ i2));
                    i3++;
                }
                return new String(bArr41, StandardCharsets.UTF_8);
            } else if (i2 == 2445) {
                byte[] bArr42 = new byte[12];
                bArr42[0] = -95;
                bArr42[1] = -83;
                bArr42[2] = -21;
                bArr42[3] = -28;
                bArr42[4] = -31;
                bArr42[5] = -24;
                bArr42[6] = -83;
                bArr42[7] = -18;
                bArr42[8] = -1;
                bArr42[9] = -18;
                bArr42[10] = -73;
                bArr42[11] = -83;
                while (i3 < 12) {
                    bArr42[i3] = (byte) ((byte) (bArr42[i3] ^ i2));
                    i3++;
                }
                return new String(bArr42, StandardCharsets.UTF_8);
            } else if (i2 == 2477) {
                byte[] bArr43 = new byte[38];
                bArr43[0] = -32;
                bArr43[1] = -60;
                bArr43[2] = -34;
                bArr43[3] = -34;
                bArr43[4] = -60;
                bArr43[5] = -61;
                bArr43[6] = -54;
                bArr43[7] = -115;
                bArr43[8] = -56;
                bArr43[9] = -43;
                bArr43[10] = -39;
                bArr43[11] = -33;
                bArr43[12] = -52;
                bArr43[13] = -50;
                bArr43[14] = -39;
                bArr43[15] = -56;
                bArr43[16] = -55;
                bArr43[17] = -115;
                bArr43[18] = -34;
                bArr43[19] = -56;
                bArr43[20] = -50;
                bArr43[21] = -62;
                bArr43[22] = -61;
                bArr43[23] = -55;
                bArr43[24] = -52;
                bArr43[25] = -33;
                bArr43[26] = -44;
                bArr43[27] = -115;
                bArr43[28] = -55;
                bArr43[29] = -56;
                bArr43[30] = -43;
                bArr43[31] = -115;
                bArr43[32] = -53;
                bArr43[33] = -60;
                bArr43[34] = -63;
                bArr43[35] = -56;
                bArr43[36] = -115;
                bArr43[37] = -118;
                while (i3 < 38) {
                    bArr43[i3] = (byte) ((byte) (bArr43[i3] ^ i2));
                    i3++;
                }
                return new String(bArr43, StandardCharsets.UTF_8);
            } else if (i2 == 2489) {
                byte[] bArr44 = new byte[1];
                bArr44[0] = -98;
                for (int i7 = 0; i7 <= 0; i7++) {
                    bArr44[0] = (byte) ((byte) (bArr44[0] ^ i2));
                }
                return new String(bArr44, StandardCharsets.UTF_8);
            } else if (i2 == 2684) {
                byte[] bArr45 = new byte[30];
                bArr45[0] = 57;
                bArr45[1] = 4;
                bArr45[2] = 8;
                bArr45[3] = 14;
                bArr45[4] = 29;
                bArr45[5] = 31;
                bArr45[6] = 8;
                bArr45[7] = 21;
                bArr45[8] = 19;
                bArr45[9] = 18;
                bArr45[10] = 92;
                bArr45[11] = 21;
                bArr45[12] = 15;
                bArr45[13] = 92;
                bArr45[14] = 18;
                bArr45[15] = 25;
                bArr45[16] = 25;
                bArr45[17] = 24;
                bArr45[18] = 25;
                bArr45[19] = 24;
                bArr45[20] = 92;
                bArr45[21] = JSONLexer.EOI;
                bArr45[22] = 19;
                bArr45[23] = 14;
                bArr45[24] = 92;
                bArr45[25] = JSONLexer.EOI;
                bArr45[26] = 21;
                bArr45[27] = 16;
                bArr45[28] = 25;
                bArr45[29] = 92;
                while (i3 < 30) {
                    bArr45[i3] = (byte) ((byte) (bArr45[i3] ^ i2));
                    i3++;
                }
                return new String(bArr45, StandardCharsets.UTF_8);
            } else if (i2 == 2800) {
                byte[] bArr46 = new byte[24];
                bArr46[0] = -74;
                bArr46[1] = -111;
                bArr46[2] = -103;
                bArr46[3] = -100;
                bArr46[4] = -107;
                bArr46[5] = -108;
                bArr46[6] = -48;
                bArr46[7] = -124;
                bArr46[8] = -97;
                bArr46[9] = -48;
                bArr46[10] = -126;
                bArr46[11] = -107;
                bArr46[12] = -111;
                bArr46[13] = -108;
                bArr46[14] = -48;
                bArr46[15] = -109;
                bArr46[16] = -126;
                bArr46[17] = -109;
                bArr46[18] = -48;
                bArr46[19] = -106;
                bArr46[20] = -126;
                bArr46[21] = -97;
                bArr46[22] = -99;
                bArr46[23] = -48;
                while (i3 < 24) {
                    bArr46[i3] = (byte) ((byte) (bArr46[i3] ^ i2));
                    i3++;
                }
                return new String(bArr46, StandardCharsets.UTF_8);
            } else if (i2 == 2825) {
                byte[] bArr47 = new byte[11];
                bArr47[0] = 76;
                bArr47[1] = 113;
                bArr47[2] = 125;
                bArr47[3] = 123;
                bArr47[4] = 104;
                bArr47[5] = 106;
                bArr47[6] = 125;
                bArr47[7] = 96;
                bArr47[8] = 102;
                bArr47[9] = 103;
                bArr47[10] = 41;
                while (i3 < 11) {
                    bArr47[i3] = (byte) ((byte) (bArr47[i3] ^ i2));
                    i3++;
                }
                return new String(bArr47, StandardCharsets.UTF_8);
            } else if (i2 == 2834) {
                byte[] bArr48 = new byte[9];
                bArr48[0] = 97;
                bArr48[1] = 103;
                bArr48[2] = 113;
                bArr48[3] = 113;
                bArr48[4] = 119;
                bArr48[5] = 119;
                bArr48[6] = 118;
                bArr48[7] = 119;
                bArr48[8] = 118;
                while (i3 < 9) {
                    bArr48[i3] = (byte) ((byte) (bArr48[i3] ^ i2));
                    i3++;
                }
                return new String(bArr48, StandardCharsets.UTF_8);
            } else if (i2 == 2838) {
                byte[] bArr49 = new byte[6];
                bArr49[0] = 112;
                bArr49[1] = 119;
                bArr49[2] = Byte.MAX_VALUE;
                bArr49[3] = 122;
                bArr49[4] = 115;
                bArr49[5] = 114;
                while (i3 < 6) {
                    bArr49[i3] = (byte) ((byte) (bArr49[i3] ^ i2));
                    i3++;
                }
                return new String(bArr49, StandardCharsets.UTF_8);
            } else if (i2 == 2843) {
                byte[] bArr50 = new byte[2];
                bArr50[0] = 59;
                bArr50[1] = 60;
                while (i3 < 2) {
                    bArr50[i3] = (byte) ((byte) (bArr50[i3] ^ i2));
                    i3++;
                }
                return new String(bArr50, StandardCharsets.UTF_8);
            } else if (i2 == 2855) {
                byte[] bArr51 = new byte[10];
                bArr51[0] = 0;
                bArr51[1] = 29;
                bArr51[2] = 7;
                bArr51[3] = 75;
                bArr51[4] = 66;
                bArr51[5] = 73;
                bArr51[6] = 64;
                bArr51[7] = 83;
                bArr51[8] = 79;
                bArr51[9] = 7;
                while (i3 < 10) {
                    bArr51[i3] = (byte) ((byte) (bArr51[i3] ^ i2));
                    i3++;
                }
                return new String(bArr51, StandardCharsets.UTF_8);
            } else if (i2 == 2867) {
                byte[] bArr52 = new byte[8];
                bArr52[0] = 19;
                bArr52[1] = 30;
                bArr52[2] = 19;
                bArr52[3] = 80;
                bArr52[4] = 65;
                bArr52[5] = 80;
                bArr52[6] = 9;
                bArr52[7] = 19;
                while (i3 < 8) {
                    bArr52[i3] = (byte) ((byte) (bArr52[i3] ^ i2));
                    i3++;
                }
                return new String(bArr52, StandardCharsets.UTF_8);
            } else if (i2 == 2913) {
                byte[] bArr53 = new byte[42];
                bArr53[0] = 39;
                bArr53[1] = 0;
                bArr53[2] = 8;
                bArr53[3] = 13;
                bArr53[4] = 4;
                bArr53[5] = 5;
                bArr53[6] = 65;
                bArr53[7] = 21;
                bArr53[8] = 14;
                bArr53[9] = 65;
                bArr53[10] = 5;
                bArr53[11] = 4;
                bArr53[12] = 13;
                bArr53[13] = 4;
                bArr53[14] = 21;
                bArr53[15] = 4;
                bArr53[16] = 65;
                bArr53[17] = 2;
                bArr53[18] = 14;
                bArr53[19] = 19;
                bArr53[20] = 19;
                bArr53[21] = 20;
                bArr53[22] = 17;
                bArr53[23] = 21;
                bArr53[24] = 4;
                bArr53[25] = 5;
                bArr53[26] = 65;
                bArr53[27] = 18;
                bArr53[28] = 4;
                bArr53[29] = 2;
                bArr53[30] = 14;
                bArr53[31] = 15;
                bArr53[32] = 5;
                bArr53[33] = 0;
                bArr53[34] = 19;
                bArr53[35] = 24;
                bArr53[36] = 65;
                bArr53[37] = 5;
                bArr53[38] = 4;
                bArr53[39] = 25;
                bArr53[40] = 65;
                bArr53[41] = 70;
                while (i3 < 42) {
                    bArr53[i3] = (byte) ((byte) (bArr53[i3] ^ i2));
                    i3++;
                }
                return new String(bArr53, StandardCharsets.UTF_8);
            } else if (i2 == 2925) {
                byte[] bArr54 = new byte[1];
                bArr54[0] = 74;
                for (int i8 = 0; i8 <= 0; i8++) {
                    bArr54[0] = (byte) ((byte) (bArr54[0] ^ i2));
                }
                return new String(bArr54, StandardCharsets.UTF_8);
            } else if (i2 == 2950) {
                byte[] bArr55 = new byte[26];
                bArr55[0] = -59;
                bArr55[1] = -23;
                bArr55[2] = -13;
                bArr55[3] = -22;
                bArr55[4] = -30;
                bArr55[5] = -90;
                bArr55[6] = -24;
                bArr55[7] = -23;
                bArr55[8] = -14;
                bArr55[9] = -90;
                bArr55[10] = -27;
                bArr55[11] = -12;
                bArr55[12] = -29;
                bArr55[13] = -25;
                bArr55[14] = -14;
                bArr55[15] = -29;
                bArr55[16] = -90;
                bArr55[17] = -4;
                bArr55[18] = -17;
                bArr55[19] = -10;
                bArr55[20] = -90;
                bArr55[21] = -32;
                bArr55[22] = -17;
                bArr55[23] = -22;
                bArr55[24] = -29;
                bArr55[25] = -90;
                while (i3 < 26) {
                    bArr55[i3] = (byte) ((byte) (bArr55[i3] ^ i2));
                    i3++;
                }
                return new String(bArr55, StandardCharsets.UTF_8);
            } else if (i2 == 2962) {
                byte[] bArr56 = new byte[20];
                bArr56[0] = -78;
                bArr56[1] = -12;
                bArr56[2] = -3;
                bArr56[3] = -32;
                bArr56[4] = -78;
                bArr56[5] = -31;
                bArr56[6] = -9;
                bArr56[7] = -15;
                bArr56[8] = -3;
                bArr56[9] = -4;
                bArr56[10] = -10;
                bArr56[11] = -13;
                bArr56[12] = -32;
                bArr56[13] = -21;
                bArr56[14] = -78;
                bArr56[15] = -10;
                bArr56[16] = -9;
                bArr56[17] = -22;
                bArr56[18] = -78;
                bArr56[19] = -70;
                while (i3 < 20) {
                    bArr56[i3] = (byte) ((byte) (bArr56[i3] ^ i2));
                    i3++;
                }
                return new String(bArr56, StandardCharsets.UTF_8);
            } else if (i2 == 2970) {
                byte[] bArr57 = new byte[1];
                bArr57[0] = -77;
                for (int i9 = 0; i9 <= 0; i9++) {
                    bArr57[0] = (byte) ((byte) (bArr57[0] ^ i2));
                }
                return new String(bArr57, StandardCharsets.UTF_8);
            } else if (i2 == 3043) {
                byte[] bArr58 = new byte[24];
                bArr58[0] = -91;
                bArr58[1] = -126;
                bArr58[2] = -118;
                bArr58[3] = -113;
                bArr58[4] = -122;
                bArr58[5] = -121;
                bArr58[6] = -61;
                bArr58[7] = -105;
                bArr58[8] = -116;
                bArr58[9] = -61;
                bArr58[10] = Byte.MIN_VALUE;
                bArr58[11] = -113;
                bArr58[12] = -116;
                bArr58[13] = -112;
                bArr58[14] = -122;
                bArr58[15] = -61;
                bArr58[16] = -111;
                bArr58[17] = -122;
                bArr58[18] = -112;
                bArr58[19] = -116;
                bArr58[20] = -106;
                bArr58[21] = -111;
                bArr58[22] = Byte.MIN_VALUE;
                bArr58[23] = -122;
                while (i3 < 24) {
                    bArr58[i3] = (byte) ((byte) (bArr58[i3] ^ i2));
                    i3++;
                }
                return new String(bArr58, StandardCharsets.UTF_8);
            } else if (i2 == 3148) {
                byte[] bArr59 = new byte[42];
                bArr59[0] = 10;
                bArr59[1] = 45;
                bArr59[2] = 37;
                bArr59[3] = 32;
                bArr59[4] = 41;
                bArr59[5] = 40;
                bArr59[6] = 108;
                bArr59[7] = 56;
                bArr59[8] = 35;
                bArr59[9] = 108;
                bArr59[10] = 32;
                bArr59[11] = 37;
                bArr59[12] = 63;
                bArr59[13] = 56;
                bArr59[14] = 108;
                bArr59[15] = 63;
                bArr59[16] = 41;
                bArr59[17] = 47;
                bArr59[18] = 35;
                bArr59[19] = 34;
                bArr59[20] = 40;
                bArr59[21] = 45;
                bArr59[22] = 62;
                bArr59[23] = 53;
                bArr59[24] = 108;
                bArr59[25] = 40;
                bArr59[26] = 41;
                bArr59[27] = 52;
                bArr59[28] = 108;
                bArr59[29] = 40;
                bArr59[30] = 37;
                bArr59[31] = 62;
                bArr59[32] = 108;
                bArr59[33] = 47;
                bArr59[34] = 35;
                bArr59[35] = 34;
                bArr59[36] = 56;
                bArr59[37] = 41;
                bArr59[38] = 34;
                bArr59[39] = 56;
                bArr59[40] = 108;
                bArr59[41] = 100;
                while (i3 < 42) {
                    bArr59[i3] = (byte) ((byte) (bArr59[i3] ^ i2));
                    i3++;
                }
                return new String(bArr59, StandardCharsets.UTF_8);
            } else if (i2 == 3160) {
                byte[] bArr60 = new byte[2];
                bArr60[0] = 113;
                bArr60[1] = 118;
                while (i3 < 2) {
                    bArr60[i3] = (byte) ((byte) (bArr60[i3] ^ i2));
                    i3++;
                }
                return new String(bArr60, StandardCharsets.UTF_8);
            } else if (i2 == 3190) {
                byte[] bArr61 = new byte[26];
                bArr61[0] = 34;
                bArr61[1] = 4;
                bArr61[2] = 15;
                bArr61[3] = 31;
                bArr61[4] = 24;
                bArr61[5] = 17;
                bArr61[6] = 86;
                bArr61[7] = 2;
                bArr61[8] = 25;
                bArr61[9] = 86;
                bArr61[10] = 18;
                bArr61[11] = 19;
                bArr61[12] = JSONLexer.EOI;
                bArr61[13] = 19;
                bArr61[14] = 2;
                bArr61[15] = 19;
                bArr61[16] = 86;
                bArr61[17] = 25;
                bArr61[18] = JSONLexer.EOI;
                bArr61[19] = 18;
                bArr61[20] = 86;
                bArr61[21] = 16;
                bArr61[22] = 31;
                bArr61[23] = JSONLexer.EOI;
                bArr61[24] = 19;
                bArr61[25] = 86;
                while (i3 < 26) {
                    bArr61[i3] = (byte) ((byte) (bArr61[i3] ^ i2));
                    i3++;
                }
                return new String(bArr61, StandardCharsets.UTF_8);
            } else if (i2 == 3202) {
                byte[] bArr62 = new byte[9];
                bArr62[0] = -94;
                bArr62[1] = -19;
                bArr62[2] = -28;
                bArr62[3] = -94;
                bArr62[4] = -15;
                bArr62[5] = -21;
                bArr62[6] = -8;
                bArr62[7] = -25;
                bArr62[8] = -94;
                while (i3 < 9) {
                    bArr62[i3] = (byte) ((byte) (bArr62[i3] ^ i2));
                    i3++;
                }
                return new String(bArr62, StandardCharsets.UTF_8);
            } else if (i2 == 3234) {
                byte[] bArr63 = new byte[26];
                bArr63[0] = -28;
                bArr63[1] = -61;
                bArr63[2] = -53;
                bArr63[3] = -50;
                bArr63[4] = -57;
                bArr63[5] = -58;
                bArr63[6] = -126;
                bArr63[7] = -42;
                bArr63[8] = -51;
                bArr63[9] = -126;
                bArr63[10] = -58;
                bArr63[11] = -57;
                bArr63[12] = -50;
                bArr63[13] = -57;
                bArr63[14] = -42;
                bArr63[15] = -57;
                bArr63[16] = -126;
                bArr63[17] = -51;
                bArr63[18] = -50;
                bArr63[19] = -58;
                bArr63[20] = -126;
                bArr63[21] = -60;
                bArr63[22] = -53;
                bArr63[23] = -50;
                bArr63[24] = -57;
                bArr63[25] = -126;
                while (i3 < 26) {
                    bArr63[i3] = (byte) ((byte) (bArr63[i3] ^ i2));
                    i3++;
                }
                return new String(bArr63, StandardCharsets.UTF_8);
            } else if (i2 != 3259) {
                return null;
            } else {
                byte[] bArr64 = new byte[17];
                bArr64[0] = -1;
                bArr64[1] = -34;
                bArr64[2] = -41;
                bArr64[3] = -34;
                bArr64[4] = -49;
                bArr64[5] = -34;
                bArr64[6] = -33;
                bArr64[7] = -101;
                bArr64[8] = -44;
                bArr64[9] = -41;
                bArr64[10] = -33;
                bArr64[11] = -101;
                bArr64[12] = -35;
                bArr64[13] = -46;
                bArr64[14] = -41;
                bArr64[15] = -34;
                bArr64[16] = -101;
                while (i3 < 17) {
                    bArr64[i3] = (byte) ((byte) (bArr64[i3] ^ i2));
                    i3++;
                }
                return new String(bArr64, StandardCharsets.UTF_8);
            }
        } catch (Exception e2) {
            return null;
        }
    }

    private List<f> a(Context context, String str) {
        a(2138);
        String str2 = this.p.getName() + d;
        SharedPreferences a2 = a(context);
        int i2 = a2.getInt(str + h, 1);
        ArrayList arrayList = new ArrayList(i2 + -1);
        for (int i3 = 2; i3 <= i2; i3++) {
            f fVar = new f(this.r, str2 + i3 + b);
            if (fVar.isFile()) {
                fVar.a = b(fVar);
                long j2 = a2.getLong(str + i + i3, -1);
                long j3 = a2.getLong(str + j + i3, -1);
                long lastModified = fVar.lastModified();
                if (j3 == lastModified && j2 == fVar.a) {
                    arrayList.add(fVar);
                } else {
                    throw new IOException(a(2405) + fVar + a(2413) + str + a(2421) + j3 + a(2429) + lastModified + a(2437) + j2 + a(2445) + fVar.a);
                }
            } else {
                throw new IOException(a(2477) + fVar.getPath() + a(2489));
            }
        }
        return arrayList;
    }

    private static void a(Context context, String str, long j2, long j3, List<f> list) {
        SharedPreferences.Editor edit = a(context).edit();
        edit.putLong(str + f, j2);
        edit.putLong(str + g, j3);
        edit.putInt(str + h, list.size() + 1);
        int i2 = 2;
        for (f fVar : list) {
            edit.putLong(str + i + i2, fVar.a);
            edit.putLong(str + j + i2, fVar.lastModified());
            i2++;
        }
        edit.apply();
    }

    private static void a(Closeable closeable) {
        try {
            closeable.close();
        } catch (IOException e2) {
            a(1737);
        }
    }

    private static void a(ZipFile zipFile, ZipEntry zipEntry, File file, String str) {
        InputStream inputStream = zipFile.getInputStream(zipEntry);
        File createTempFile = File.createTempFile(a(1391) + str, b, file.getParentFile());
        StringBuilder sb = new StringBuilder();
        sb.append(a(1416));
        sb.append(createTempFile.getPath());
        try {
            ZipOutputStream zipOutputStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(createTempFile)));
            try {
                ZipEntry zipEntry2 = new ZipEntry(a(1468));
                zipEntry2.setTime(zipEntry.getTime());
                zipOutputStream.putNextEntry(zipEntry2);
                String str2 = l;
                InflaterInputStream inflaterInputStream = new InflaterInputStream(inputStream);
                InflaterOutputStream inflaterOutputStream = new InflaterOutputStream(zipOutputStream);
                k.a(str2, inflaterInputStream, inflaterOutputStream);
                inflaterOutputStream.close();
                inflaterInputStream.close();
                zipOutputStream.closeEntry();
            } catch (Exception e2) {
            } catch (Throwable th) {
                zipOutputStream.close();
                throw th;
            }
            zipOutputStream.close();
            if (createTempFile.setReadOnly()) {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(a(1605));
                sb2.append(file.getPath());
                if (!createTempFile.renameTo(file)) {
                    throw new IOException(a(1637) + createTempFile.getAbsolutePath() + a(1649) + file.getAbsolutePath() + a(1661));
                }
                return;
            }
            throw new IOException(a(1568) + createTempFile.getAbsolutePath() + a(1580) + file.getAbsolutePath() + a(1592));
        } finally {
            a(inputStream);
            createTempFile.delete();
        }
    }

    private static long b(File file) {
        long a2 = g.a(file);
        return a2 == -1 ? a2 - 1 : a2;
    }

    private void b() {
        File[] listFiles = this.r.listFiles(new e(this));
        if (listFiles == null) {
            StringBuilder sb = new StringBuilder();
            sb.append(a(3148));
            sb.append(this.r.getPath());
            sb.append(a(3160));
            return;
        }
        for (File file : listFiles) {
            StringBuilder sb2 = new StringBuilder();
            sb2.append(a(3190));
            sb2.append(file.getPath());
            sb2.append(a(3202));
            sb2.append(file.length());
            if (!file.delete()) {
                StringBuilder sb3 = new StringBuilder();
                sb3.append(a(3234));
                sb3.append(file.getPath());
            } else {
                StringBuilder sb4 = new StringBuilder();
                sb4.append(a(3259));
                sb4.append(file.getPath());
            }
        }
    }

    private List<f> c() {
        String str = this.p.getName() + d;
        b();
        ArrayList arrayList = new ArrayList();
        ZipFile zipFile = new ZipFile(this.p);
        try {
            ZipEntry entry = zipFile.getEntry(n + o + 1 + a);
            int i2 = 1;
            while (entry != null) {
                f fVar = new f(this.r, str + i2 + b);
                arrayList.add(fVar);
                StringBuilder sb = new StringBuilder();
                sb.append(a(2684));
                sb.append(fVar);
                boolean z = false;
                int i3 = 0;
                while (i3 < 3 && !z) {
                    int i4 = i3 + 1;
                    a(zipFile, entry, fVar, str);
                    try {
                        fVar.a = b(fVar);
                        z = true;
                    } catch (IOException e2) {
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(a(2800));
                        sb2.append(fVar.getAbsolutePath());
                        z = false;
                    }
                    StringBuilder sb3 = new StringBuilder();
                    sb3.append(a(2825));
                    sb3.append(z ? a(2834) : a(2838));
                    sb3.append(a(2843));
                    sb3.append(fVar.getAbsolutePath());
                    sb3.append(a(2855));
                    sb3.append(fVar.length());
                    sb3.append(a(2867));
                    sb3.append(fVar.a);
                    if (!z) {
                        fVar.delete();
                        if (fVar.exists()) {
                            StringBuilder sb4 = new StringBuilder();
                            sb4.append(a(2913));
                            sb4.append(fVar.getPath());
                            sb4.append(a(2925));
                            i3 = i4;
                        }
                    }
                    i3 = i4;
                }
                if (z) {
                    int i5 = i2 + 1;
                    entry = zipFile.getEntry(n + o + i5 + a);
                    i2 = i5;
                } else {
                    throw new IOException(a(2950) + fVar.getAbsolutePath() + a(2962) + i2 + a(2970));
                }
            }
            return arrayList;
        } finally {
            try {
                zipFile.close();
            } catch (IOException e3) {
                a(3043);
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:23:0x0085 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final java.util.List<? extends java.io.File> a(android.content.Context r11, java.lang.String r12, boolean r13) {
        /*
            r10 = this;
            r8 = -1
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r1 = 1788(0x6fc, float:2.506E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            java.io.File r1 = r10.p
            java.lang.String r1 = r1.getPath()
            r0.append(r1)
            r1 = 1800(0x708, float:2.522E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            r0.append(r13)
            r1 = 1808(0x710, float:2.534E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            r0.append(r12)
            r1 = 1816(0x718, float:2.545E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            java.nio.channels.FileLock r0 = r10.u
            boolean r0 = r0.isValid()
            if (r0 == 0) goto L_0x00e2
            if (r13 != 0) goto L_0x00d4
            java.io.File r0 = r10.p
            long r1 = r10.q
            android.content.SharedPreferences r3 = a(r11)
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            r4.append(r12)
            java.lang.String r5 = com.hashedin.geography.d.f
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            long r4 = r3.getLong(r4, r8)
            long r6 = a(r0)
            int r0 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r0 != 0) goto L_0x00a8
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r12)
            java.lang.String r4 = com.hashedin.geography.d.g
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            long r3 = r3.getLong(r0, r8)
            int r0 = (r3 > r1 ? 1 : (r3 == r1 ? 0 : -1))
            if (r0 != 0) goto L_0x00a8
            r0 = 0
        L_0x0083:
            if (r0 != 0) goto L_0x00d4
            java.util.List r6 = r10.a(r11, r12)     // Catch: IOException -> 0x00aa
        L_0x0089:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r1 = 2042(0x7fa, float:2.861E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            int r1 = r6.size()
            r0.append(r1)
            r1 = 2054(0x806, float:2.878E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            return r6
        L_0x00a8:
            r0 = 1
            goto L_0x0083
        L_0x00aa:
            r0 = move-exception
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r1 = 1916(0x77c, float:2.685E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
            r1 = 1920(0x780, float:2.69E-42)
            java.lang.String r1 = a(r1)
            r0.append(r1)
        L_0x00c2:
            java.util.List r6 = r10.c()
            java.io.File r0 = r10.p
            long r2 = a(r0)
            long r4 = r10.q
            r0 = r11
            r1 = r12
            a(r0, r1, r2, r4, r6)
            goto L_0x0089
        L_0x00d4:
            if (r13 == 0) goto L_0x00dc
            r0 = 1980(0x7bc, float:2.775E-42)
            a(r0)
            goto L_0x00c2
        L_0x00dc:
            r0 = 1997(0x7cd, float:2.798E-42)
            a(r0)
            goto L_0x00c2
        L_0x00e2:
            java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
            r1 = 1839(0x72f, float:2.577E-42)
            java.lang.String r1 = a(r1)
            r0.<init>(r1)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.hashedin.geography.d.a(android.content.Context, java.lang.String, boolean):java.util.List");
    }

    @Override // java.io.Closeable, java.lang.AutoCloseable
    public final void close() {
        this.u.release();
        this.t.close();
        this.s.close();
    }
}
