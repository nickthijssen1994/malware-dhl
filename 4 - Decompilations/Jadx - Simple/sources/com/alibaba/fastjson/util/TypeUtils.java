package com.alibaba.fastjson.util;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.ASMException;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.facebook.react.devsupport.StackTraceHelper;
import com.jd.push.common.util.DateUtils;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.AccessControlException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class TypeUtils {
    public static boolean compatibleWithJavaBean;
    private static ConcurrentMap<String, Class<?>> mappings;
    private static boolean setAccessibleEnable;

    static {
        try {
            String property = System.getProperty("fastjson.compatibleWithJavaBean");
            if ("true".equals(property)) {
                compatibleWithJavaBean = true;
            } else if ("false".equals(property)) {
                compatibleWithJavaBean = false;
            }
        } catch (Throwable unused) {
        }
        mappings = new ConcurrentHashMap();
        addBaseClassMappings();
    }

    public static String castToString(Object obj) {
        if (obj == null) {
            return null;
        }
        return obj.toString();
    }

    public static Byte castToByte(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Byte.valueOf(((Number) obj).byteValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() != 0 && !"null".equals(str) && !"NULL".equals(str)) {
                return Byte.valueOf(Byte.parseByte(str));
            }
            return null;
        }
        throw new JSONException("can not cast to byte, value : " + obj);
    }

    public static Character castToChar(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Character) {
            return (Character) obj;
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0) {
                return null;
            }
            if (str.length() == 1) {
                return Character.valueOf(str.charAt(0));
            }
            throw new JSONException("can not cast to byte, value : " + obj);
        }
        throw new JSONException("can not cast to byte, value : " + obj);
    }

    public static Short castToShort(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Short.valueOf(((Number) obj).shortValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() != 0 && !"null".equals(str) && !"NULL".equals(str)) {
                return Short.valueOf(Short.parseShort(str));
            }
            return null;
        }
        throw new JSONException("can not cast to short, value : " + obj);
    }

    public static BigDecimal castToBigDecimal(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof BigDecimal) {
            return (BigDecimal) obj;
        }
        if (obj instanceof BigInteger) {
            return new BigDecimal((BigInteger) obj);
        }
        String obj2 = obj.toString();
        if (obj2.length() == 0) {
            return null;
        }
        return new BigDecimal(obj2);
    }

    public static BigInteger castToBigInteger(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof BigInteger) {
            return (BigInteger) obj;
        }
        if ((obj instanceof Float) || (obj instanceof Double)) {
            return BigInteger.valueOf(((Number) obj).longValue());
        }
        String obj2 = obj.toString();
        if (obj2.length() == 0) {
            return null;
        }
        return new BigInteger(obj2);
    }

    public static Float castToFloat(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Float.valueOf(((Number) obj).floatValue());
        }
        if (obj instanceof String) {
            String obj2 = obj.toString();
            if (obj2.length() != 0 && !"null".equals(obj2) && !"NULL".equals(obj2)) {
                return Float.valueOf(Float.parseFloat(obj2));
            }
            return null;
        }
        throw new JSONException("can not cast to float, value : " + obj);
    }

    public static Double castToDouble(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Double.valueOf(((Number) obj).doubleValue());
        }
        if (obj instanceof String) {
            String obj2 = obj.toString();
            if (obj2.length() != 0 && !"null".equals(obj2) && !"NULL".equals(obj2)) {
                return Double.valueOf(Double.parseDouble(obj2));
            }
            return null;
        }
        throw new JSONException("can not cast to double, value : " + obj);
    }

    public static Date castToDate(Object obj) {
        String str;
        if (obj == null) {
            return null;
        }
        if (obj instanceof Calendar) {
            return ((Calendar) obj).getTime();
        }
        if (obj instanceof Date) {
            return (Date) obj;
        }
        long j = -1;
        if (obj instanceof Number) {
            return new Date(((Number) obj).longValue());
        }
        if (obj instanceof String) {
            String str2 = (String) obj;
            if (str2.indexOf(45) != -1) {
                if (str2.length() == JSON.DEFFAULT_DATE_FORMAT.length()) {
                    str = JSON.DEFFAULT_DATE_FORMAT;
                } else if (str2.length() == 10) {
                    str = DateUtils.DATE_FORMAT;
                } else {
                    str = str2.length() == 19 ? DateUtils.TIME_FORMAT : "yyyy-MM-dd HH:mm:ss.SSS";
                }
                try {
                    return new SimpleDateFormat(str).parse(str2);
                } catch (ParseException unused) {
                    throw new JSONException("can not cast to Date, value : " + str2);
                }
            } else if (str2.length() == 0) {
                return null;
            } else {
                j = Long.parseLong(str2);
            }
        }
        if (j >= 0) {
            return new Date(j);
        }
        throw new JSONException("can not cast to Date, value : " + obj);
    }

    public static java.sql.Date castToSqlDate(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Calendar) {
            return new java.sql.Date(((Calendar) obj).getTimeInMillis());
        }
        if (obj instanceof java.sql.Date) {
            return (java.sql.Date) obj;
        }
        if (obj instanceof Date) {
            return new java.sql.Date(((Date) obj).getTime());
        }
        long longValue = obj instanceof Number ? ((Number) obj).longValue() : 0;
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0) {
                return null;
            }
            longValue = Long.parseLong(str);
        }
        if (longValue > 0) {
            return new java.sql.Date(longValue);
        }
        throw new JSONException("can not cast to Date, value : " + obj);
    }

    public static Timestamp castToTimestamp(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Calendar) {
            return new Timestamp(((Calendar) obj).getTimeInMillis());
        }
        if (obj instanceof Timestamp) {
            return (Timestamp) obj;
        }
        if (obj instanceof Date) {
            return new Timestamp(((Date) obj).getTime());
        }
        long longValue = obj instanceof Number ? ((Number) obj).longValue() : 0;
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0) {
                return null;
            }
            longValue = Long.parseLong(str);
        }
        if (longValue > 0) {
            return new Timestamp(longValue);
        }
        throw new JSONException("can not cast to Date, value : " + obj);
    }

    public static Long castToLong(Object obj) {
        Calendar calendar = null;
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Long.valueOf(((Number) obj).longValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str) || "NULL".equals(str)) {
                return null;
            }
            try {
                return Long.valueOf(Long.parseLong(str));
            } catch (NumberFormatException unused) {
                JSONScanner jSONScanner = new JSONScanner(str);
                if (jSONScanner.scanISO8601DateIfMatch(false)) {
                    calendar = jSONScanner.getCalendar();
                }
                jSONScanner.close();
                if (calendar != null) {
                    return Long.valueOf(calendar.getTimeInMillis());
                }
            }
        }
        throw new JSONException("can not cast to long, value : " + obj);
    }

    public static Integer castToInt(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Integer) {
            return (Integer) obj;
        }
        if (obj instanceof Number) {
            return Integer.valueOf(((Number) obj).intValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() != 0 && !"null".equals(str) && !"null".equals(str) && !"NULL".equals(str)) {
                return Integer.valueOf(Integer.parseInt(str));
            }
            return null;
        }
        throw new JSONException("can not cast to int, value : " + obj);
    }

    public static byte[] castToBytes(Object obj) {
        if (obj instanceof byte[]) {
            return (byte[]) obj;
        }
        if (obj instanceof String) {
            return Base64.decodeFast((String) obj);
        }
        throw new JSONException("can not cast to int, value : " + obj);
    }

    public static Boolean castToBoolean(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Boolean) {
            return (Boolean) obj;
        }
        if (obj instanceof Number) {
            boolean z = true;
            if (((Number) obj).intValue() != 1) {
                z = false;
            }
            return Boolean.valueOf(z);
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0) {
                return null;
            }
            if ("true".equalsIgnoreCase(str)) {
                return Boolean.TRUE;
            }
            if ("false".equalsIgnoreCase(str)) {
                return Boolean.FALSE;
            }
            if ("1".equals(str)) {
                return Boolean.TRUE;
            }
            if ("0".equals(str)) {
                return Boolean.FALSE;
            }
            if ("null".equals(str) || "NULL".equals(str)) {
                return null;
            }
        }
        throw new JSONException("can not cast to boolean, value : " + obj);
    }

    public static <T> T castToJavaBean(Object obj, Class<T> cls) {
        return (T) cast(obj, (Class<Object>) cls, ParserConfig.getGlobalInstance());
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static <T> T cast(Object obj, Class<T> cls, ParserConfig parserConfig) {
        T t;
        if (obj == 0) {
            return null;
        }
        if (cls == null) {
            throw new IllegalArgumentException("clazz is null");
        } else if (cls == obj.getClass()) {
            return obj;
        } else {
            if (!(obj instanceof Map)) {
                if (cls.isArray()) {
                    if (obj instanceof Collection) {
                        Collection<Object> collection = (Collection) obj;
                        int i = 0;
                        T t2 = (T) Array.newInstance(cls.getComponentType(), collection.size());
                        for (Object obj2 : collection) {
                            Array.set(t2, i, cast(obj2, (Class<Object>) cls.getComponentType(), parserConfig));
                            i++;
                        }
                        return t2;
                    } else if (cls == byte[].class) {
                        return (T) castToBytes(obj);
                    }
                }
                if (cls.isAssignableFrom(obj.getClass())) {
                    return obj;
                }
                if (cls == Boolean.TYPE || cls == Boolean.class) {
                    return (T) castToBoolean(obj);
                }
                if (cls == Byte.TYPE || cls == Byte.class) {
                    return (T) castToByte(obj);
                }
                if (cls == Short.TYPE || cls == Short.class) {
                    return (T) castToShort(obj);
                }
                if (cls == Integer.TYPE || cls == Integer.class) {
                    return (T) castToInt(obj);
                }
                if (cls == Long.TYPE || cls == Long.class) {
                    return (T) castToLong(obj);
                }
                if (cls == Float.TYPE || cls == Float.class) {
                    return (T) castToFloat(obj);
                }
                if (cls == Double.TYPE || cls == Double.class) {
                    return (T) castToDouble(obj);
                }
                if (cls == String.class) {
                    return (T) castToString(obj);
                }
                if (cls == BigDecimal.class) {
                    return (T) castToBigDecimal(obj);
                }
                if (cls == BigInteger.class) {
                    return (T) castToBigInteger(obj);
                }
                if (cls == Date.class) {
                    return (T) castToDate(obj);
                }
                if (cls == java.sql.Date.class) {
                    return (T) castToSqlDate(obj);
                }
                if (cls == Timestamp.class) {
                    return (T) castToTimestamp(obj);
                }
                if (cls.isEnum()) {
                    return (T) castToEnum(obj, cls, parserConfig);
                }
                if (Calendar.class.isAssignableFrom(cls)) {
                    Date castToDate = castToDate(obj);
                    if (cls == Calendar.class) {
                        t = (T) Calendar.getInstance();
                    } else {
                        try {
                            t = (T) ((Calendar) cls.newInstance());
                        } catch (Exception e) {
                            throw new JSONException("can not cast to : " + cls.getName(), e);
                        }
                    }
                    ((Calendar) t).setTime(castToDate);
                    return t;
                }
                if (obj instanceof String) {
                    String str = (String) obj;
                    if (str.length() == 0) {
                        return null;
                    }
                    if (cls == Currency.class) {
                        return (T) Currency.getInstance(str);
                    }
                }
                throw new JSONException("can not cast to : " + cls.getName());
            } else if (cls == Map.class) {
                return obj;
            } else {
                Map map = (Map) obj;
                if (cls != Object.class || map.containsKey(JSON.DEFAULT_TYPE_KEY)) {
                    return (T) castToJavaBean(map, cls, parserConfig);
                }
                return obj;
            }
        }
    }

    /* JADX WARN: Type inference failed for: r2v3, types: [java.lang.Enum, T] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static <T> T castToEnum(java.lang.Object r4, java.lang.Class<T> r5, com.alibaba.fastjson.parser.ParserConfig r6) {
        /*
            boolean r6 = r4 instanceof java.lang.String     // Catch: Exception -> 0x005c
            r0 = 0
            if (r6 == 0) goto L_0x0013
            java.lang.String r4 = (java.lang.String) r4     // Catch: Exception -> 0x005c
            int r6 = r4.length()     // Catch: Exception -> 0x005c
            if (r6 != 0) goto L_0x000e
            return r0
        L_0x000e:
            java.lang.Enum r4 = java.lang.Enum.valueOf(r5, r4)     // Catch: Exception -> 0x005c
            return r4
        L_0x0013:
            boolean r6 = r4 instanceof java.lang.Number     // Catch: Exception -> 0x005c
            if (r6 == 0) goto L_0x0041
            java.lang.Number r4 = (java.lang.Number) r4     // Catch: Exception -> 0x005c
            int r4 = r4.intValue()     // Catch: Exception -> 0x005c
            java.lang.String r6 = "values"
            r1 = 0
            java.lang.Class[] r2 = new java.lang.Class[r1]     // Catch: Exception -> 0x005c
            java.lang.reflect.Method r6 = r5.getMethod(r6, r2)     // Catch: Exception -> 0x005c
            java.lang.Object[] r2 = new java.lang.Object[r1]     // Catch: Exception -> 0x005c
            java.lang.Object r6 = r6.invoke(r0, r2)     // Catch: Exception -> 0x005c
            java.lang.Object[] r6 = (java.lang.Object[]) r6     // Catch: Exception -> 0x005c
            java.lang.Object[] r6 = (java.lang.Object[]) r6     // Catch: Exception -> 0x005c
            int r0 = r6.length     // Catch: Exception -> 0x005c
        L_0x0031:
            if (r1 >= r0) goto L_0x0041
            r2 = r6[r1]     // Catch: Exception -> 0x005c
            java.lang.Enum r2 = (java.lang.Enum) r2     // Catch: Exception -> 0x005c
            int r3 = r2.ordinal()     // Catch: Exception -> 0x005c
            if (r3 != r4) goto L_0x003e
            return r2
        L_0x003e:
            int r1 = r1 + 1
            goto L_0x0031
        L_0x0041:
            com.alibaba.fastjson.JSONException r4 = new com.alibaba.fastjson.JSONException
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r0 = "can not cast to : "
            r6.append(r0)
            java.lang.String r5 = r5.getName()
            r6.append(r5)
            java.lang.String r5 = r6.toString()
            r4.<init>(r5)
            throw r4
        L_0x005c:
            r4 = move-exception
            com.alibaba.fastjson.JSONException r6 = new com.alibaba.fastjson.JSONException
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "can not cast to : "
            r0.append(r1)
            java.lang.String r5 = r5.getName()
            r0.append(r5)
            java.lang.String r5 = r0.toString()
            r6.<init>(r5, r4)
            throw r6
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.alibaba.fastjson.util.TypeUtils.castToEnum(java.lang.Object, java.lang.Class, com.alibaba.fastjson.parser.ParserConfig):java.lang.Object");
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static <T> T cast(Object obj, Type type, ParserConfig parserConfig) {
        if (obj == 0) {
            return null;
        }
        if (type instanceof Class) {
            return (T) cast(obj, (Class<Object>) ((Class) type), parserConfig);
        }
        if (type instanceof ParameterizedType) {
            return (T) cast(obj, (ParameterizedType) type, parserConfig);
        }
        if ((obj instanceof String) && ((String) obj).length() == 0) {
            return null;
        }
        if (type instanceof TypeVariable) {
            return obj;
        }
        throw new JSONException("can not cast to : " + type);
    }

    /* JADX WARN: Type inference failed for: r7v2, types: [T, java.util.Map, java.util.HashMap] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static <T> T cast(java.lang.Object r6, java.lang.reflect.ParameterizedType r7, com.alibaba.fastjson.parser.ParserConfig r8) {
        /*
            java.lang.reflect.Type r0 = r7.getRawType()
            java.lang.Class<java.util.Set> r1 = java.util.Set.class
            r2 = 0
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.HashSet> r1 = java.util.HashSet.class
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.TreeSet> r1 = java.util.TreeSet.class
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.List> r1 = java.util.List.class
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.ArrayList> r1 = java.util.ArrayList.class
            if (r0 != r1) goto L_0x005a
        L_0x0019:
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            r1 = r1[r2]
            boolean r3 = r6 instanceof java.lang.Iterable
            if (r3 == 0) goto L_0x005a
            java.lang.Class<java.util.Set> r7 = java.util.Set.class
            if (r0 == r7) goto L_0x003c
            java.lang.Class<java.util.HashSet> r7 = java.util.HashSet.class
            if (r0 != r7) goto L_0x002c
            goto L_0x003c
        L_0x002c:
            java.lang.Class<java.util.TreeSet> r7 = java.util.TreeSet.class
            if (r0 != r7) goto L_0x0036
            java.util.TreeSet r7 = new java.util.TreeSet
            r7.<init>()
            goto L_0x0041
        L_0x0036:
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            goto L_0x0041
        L_0x003c:
            java.util.HashSet r7 = new java.util.HashSet
            r7.<init>()
        L_0x0041:
            java.lang.Iterable r6 = (java.lang.Iterable) r6
            java.util.Iterator r6 = r6.iterator()
        L_0x0047:
            boolean r0 = r6.hasNext()
            if (r0 == 0) goto L_0x0059
            java.lang.Object r0 = r6.next()
            java.lang.Object r0 = cast(r0, r1, r8)
            r7.add(r0)
            goto L_0x0047
        L_0x0059:
            return r7
        L_0x005a:
            java.lang.Class<java.util.Map> r1 = java.util.Map.class
            r3 = 1
            if (r0 == r1) goto L_0x0063
            java.lang.Class<java.util.HashMap> r1 = java.util.HashMap.class
            if (r0 != r1) goto L_0x00a3
        L_0x0063:
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            r1 = r1[r2]
            java.lang.reflect.Type[] r4 = r7.getActualTypeArguments()
            r4 = r4[r3]
            boolean r5 = r6 instanceof java.util.Map
            if (r5 == 0) goto L_0x00a3
            java.util.HashMap r7 = new java.util.HashMap
            r7.<init>()
            java.util.Map r6 = (java.util.Map) r6
            java.util.Set r6 = r6.entrySet()
            java.util.Iterator r6 = r6.iterator()
        L_0x0082:
            boolean r0 = r6.hasNext()
            if (r0 == 0) goto L_0x00a2
            java.lang.Object r0 = r6.next()
            java.util.Map$Entry r0 = (java.util.Map.Entry) r0
            java.lang.Object r2 = r0.getKey()
            java.lang.Object r2 = cast(r2, r1, r8)
            java.lang.Object r0 = r0.getValue()
            java.lang.Object r0 = cast(r0, r4, r8)
            r7.put(r2, r0)
            goto L_0x0082
        L_0x00a2:
            return r7
        L_0x00a3:
            boolean r1 = r6 instanceof java.lang.String
            if (r1 == 0) goto L_0x00b2
            r1 = r6
            java.lang.String r1 = (java.lang.String) r1
            int r1 = r1.length()
            if (r1 != 0) goto L_0x00b2
            r6 = 0
            return r6
        L_0x00b2:
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            int r1 = r1.length
            if (r1 != r3) goto L_0x00c8
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            r1 = r1[r2]
            boolean r1 = r1 instanceof java.lang.reflect.WildcardType
            if (r1 == 0) goto L_0x00c8
            java.lang.Object r6 = cast(r6, r0, r8)
            return r6
        L_0x00c8:
            com.alibaba.fastjson.JSONException r6 = new com.alibaba.fastjson.JSONException
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r0 = "can not cast to : "
            r8.append(r0)
            r8.append(r7)
            java.lang.String r7 = r8.toString()
            r6.<init>(r7)
            throw r6
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.alibaba.fastjson.util.TypeUtils.cast(java.lang.Object, java.lang.reflect.ParameterizedType, com.alibaba.fastjson.parser.ParserConfig):java.lang.Object");
    }

    public static <T> T castToJavaBean(Map<String, Object> map, Class<T> cls, ParserConfig parserConfig) {
        JSONObject jSONObject;
        int i = 0;
        try {
            if (cls == StackTraceElement.class) {
                String str = (String) map.get("className");
                String str2 = (String) map.get("methodName");
                String str3 = (String) map.get("fileName");
                Number number = (Number) map.get(StackTraceHelper.LINE_NUMBER_KEY);
                if (number != null) {
                    i = number.intValue();
                }
                return (T) new StackTraceElement(str, str2, str3, i);
            }
            Object obj = map.get(JSON.DEFAULT_TYPE_KEY);
            if (obj instanceof String) {
                String str4 = (String) obj;
                Class<?> loadClass = loadClass(str4);
                if (loadClass == null) {
                    throw new ClassNotFoundException(str4 + " not found");
                } else if (!loadClass.equals(cls)) {
                    return (T) castToJavaBean(map, loadClass, parserConfig);
                }
            }
            if (cls.isInterface()) {
                if (map instanceof JSONObject) {
                    jSONObject = (JSONObject) map;
                } else {
                    jSONObject = new JSONObject(map);
                }
                return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{cls}, jSONObject);
            }
            if (parserConfig == null) {
                parserConfig = ParserConfig.getGlobalInstance();
            }
            Map<String, FieldDeserializer> fieldDeserializers = parserConfig.getFieldDeserializers(cls);
            Constructor<T> declaredConstructor = cls.getDeclaredConstructor(new Class[0]);
            if (!declaredConstructor.isAccessible()) {
                declaredConstructor.setAccessible(true);
            }
            T newInstance = declaredConstructor.newInstance(new Object[0]);
            for (Map.Entry<String, FieldDeserializer> entry : fieldDeserializers.entrySet()) {
                String key = entry.getKey();
                FieldDeserializer value = entry.getValue();
                if (map.containsKey(key)) {
                    Object obj2 = map.get(key);
                    Method method = value.getMethod();
                    if (method != null) {
                        method.invoke(newInstance, cast(obj2, method.getGenericParameterTypes()[0], parserConfig));
                    } else {
                        value.getField().set(newInstance, cast(obj2, value.getFieldType(), parserConfig));
                    }
                }
            }
            return newInstance;
        } catch (Exception e) {
            throw new JSONException(e.getMessage(), e);
        }
    }

    public static void addClassMapping(String str, Class<?> cls) {
        if (str == null) {
            str = cls.getName();
        }
        mappings.put(str, cls);
    }

    public static void addBaseClassMappings() {
        mappings.put("byte", Byte.TYPE);
        mappings.put("short", Short.TYPE);
        mappings.put("int", Integer.TYPE);
        mappings.put("long", Long.TYPE);
        mappings.put("float", Float.TYPE);
        mappings.put("double", Double.TYPE);
        mappings.put("boolean", Boolean.TYPE);
        mappings.put("char", Character.TYPE);
        mappings.put("[byte", byte[].class);
        mappings.put("[short", short[].class);
        mappings.put("[int", int[].class);
        mappings.put("[long", long[].class);
        mappings.put("[float", float[].class);
        mappings.put("[double", double[].class);
        mappings.put("[boolean", boolean[].class);
        mappings.put("[char", char[].class);
        mappings.put(HashMap.class.getName(), HashMap.class);
    }

    public static void clearClassMapping() {
        mappings.clear();
        addBaseClassMappings();
    }

    public static Class<?> loadClass(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        Class<?> cls = mappings.get(str);
        if (cls != null) {
            return cls;
        }
        if (str.charAt(0) == '[') {
            return Array.newInstance(loadClass(str.substring(1)), 0).getClass();
        }
        if (str.startsWith("L") && str.endsWith(";")) {
            return loadClass(str.substring(1, str.length() - 1));
        }
        try {
            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            if (contextClassLoader != null) {
                cls = contextClassLoader.loadClass(str);
                addClassMapping(str, cls);
                return cls;
            }
        } catch (Throwable unused) {
        }
        try {
            cls = Class.forName(str);
            addClassMapping(str, cls);
            return cls;
        } catch (Throwable unused2) {
            return cls;
        }
    }

    public static List<FieldInfo> computeGetters(Class<?> cls, Map<String, String> map) {
        return computeGetters(cls, map, true);
    }

    public static List<FieldInfo> computeGetters(Class<?> cls, Map<String, String> map, boolean z) {
        Object[] objArr;
        boolean z2;
        String str;
        int i;
        int i2;
        String str2;
        int i3;
        Method[] methodArr;
        int i4;
        int i5;
        String str3;
        int i6;
        String str4;
        String str5;
        String str6;
        int i7;
        JSONField jSONField;
        String str7;
        int i8;
        JSONField jSONField2;
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Method[] methods = cls.getMethods();
        int length = methods.length;
        int i9 = 0;
        while (true) {
            objArr = null;
            r7 = null;
            String str8 = null;
            if (i9 >= length) {
                break;
            }
            Method method = methods[i9];
            String name = method.getName();
            if (Modifier.isStatic(method.getModifiers())) {
                methodArr = methods;
                i3 = length;
            } else if (method.getReturnType().equals(Void.TYPE)) {
                methodArr = methods;
                i3 = length;
            } else if (method.getParameterTypes().length != 0) {
                methodArr = methods;
                i3 = length;
            } else if (method.getReturnType() == ClassLoader.class) {
                methodArr = methods;
                i3 = length;
            } else if (!method.getName().equals("getMetaClass") || !method.getReturnType().getName().equals("groovy.lang.MetaClass")) {
                JSONField jSONField3 = (JSONField) method.getAnnotation(JSONField.class);
                if (jSONField3 == null) {
                    jSONField3 = getSupperMethodAnnotation(cls, method);
                }
                if (jSONField3 == null) {
                    i5 = 0;
                    i4 = 0;
                } else if (!jSONField3.serialize()) {
                    methodArr = methods;
                    i3 = length;
                } else {
                    i5 = jSONField3.ordinal();
                    i4 = SerializerFeature.of(jSONField3.serialzeFeatures());
                    if (jSONField3.name().length() != 0) {
                        String name2 = jSONField3.name();
                        if (map == null || (name2 = map.get(name2)) != null) {
                            linkedHashMap.put(name2, new FieldInfo(name2, method, null, i5, i4, jSONField3.label()));
                            methodArr = methods;
                            i3 = length;
                        } else {
                            methodArr = methods;
                            i3 = length;
                        }
                    } else if (jSONField3.label().length() != 0) {
                        str8 = jSONField3.label();
                    }
                }
                if (!name.startsWith("get")) {
                    methodArr = methods;
                    i3 = length;
                    str4 = name;
                    str3 = str8;
                    i6 = i5;
                } else if (name.length() < 4) {
                    methodArr = methods;
                    i3 = length;
                } else if (name.equals("getClass")) {
                    methodArr = methods;
                    i3 = length;
                } else {
                    char charAt = name.charAt(3);
                    if (Character.isUpperCase(charAt)) {
                        if (compatibleWithJavaBean) {
                            str7 = decapitalize(name.substring(3));
                        } else {
                            str7 = Character.toLowerCase(name.charAt(3)) + name.substring(4);
                        }
                    } else if (charAt == '_') {
                        str7 = name.substring(4);
                    } else if (charAt == 'f') {
                        str7 = name.substring(3);
                    } else if (name.length() < 5 || !Character.isUpperCase(name.charAt(4))) {
                        methodArr = methods;
                        i3 = length;
                    } else {
                        str7 = decapitalize(name.substring(3));
                    }
                    if (isJSONTypeIgnore(cls, str7)) {
                        methodArr = methods;
                        i3 = length;
                    } else {
                        Field field = ParserConfig.getField(cls, str7);
                        if (field == null || (jSONField2 = (JSONField) field.getAnnotation(JSONField.class)) == null) {
                            str3 = str8;
                            i6 = i5;
                            i8 = i4;
                        } else if (!jSONField2.serialize()) {
                            methodArr = methods;
                            i3 = length;
                        } else {
                            int ordinal = jSONField2.ordinal();
                            int of = SerializerFeature.of(jSONField2.serialzeFeatures());
                            if (jSONField2.name().length() != 0) {
                                str7 = jSONField2.name();
                                if (map != null && (str7 = map.get(str7)) == null) {
                                    methodArr = methods;
                                    i3 = length;
                                }
                            }
                            if (jSONField2.label().length() != 0) {
                                str3 = jSONField2.label();
                                i6 = ordinal;
                                i8 = of;
                            } else {
                                str3 = str8;
                                i6 = ordinal;
                                i8 = of;
                            }
                        }
                        if (map == null || (str7 = map.get(str7)) != null) {
                            methodArr = methods;
                            i4 = i8;
                            i3 = length;
                            str4 = name;
                            linkedHashMap.put(str7, new FieldInfo(str7, method, field, i6, i4, str3));
                        } else {
                            methodArr = methods;
                            i3 = length;
                        }
                    }
                }
                if (str4.startsWith("is") && str4.length() >= 3) {
                    char charAt2 = str4.charAt(2);
                    if (Character.isUpperCase(charAt2)) {
                        if (compatibleWithJavaBean) {
                            str5 = decapitalize(str4.substring(2));
                        } else {
                            str5 = Character.toLowerCase(str4.charAt(2)) + str4.substring(3);
                        }
                    } else if (charAt2 == '_') {
                        str5 = str4.substring(3);
                    } else if (charAt2 == 'f') {
                        str5 = str4.substring(2);
                    }
                    Field field2 = ParserConfig.getField(cls, str5);
                    Field field3 = field2 == null ? ParserConfig.getField(cls, str4) : field2;
                    if (field3 == null || (jSONField = (JSONField) field3.getAnnotation(JSONField.class)) == null) {
                        i7 = i6;
                        str6 = str3;
                    } else if (jSONField.serialize()) {
                        int ordinal2 = jSONField.ordinal();
                        int of2 = SerializerFeature.of(jSONField.serialzeFeatures());
                        if (jSONField.name().length() != 0) {
                            str5 = jSONField.name();
                            if (map != null && (str5 = map.get(str5)) == null) {
                            }
                        }
                        if (jSONField.label().length() != 0) {
                            str6 = jSONField.label();
                            i7 = ordinal2;
                            i4 = of2;
                        } else {
                            i7 = ordinal2;
                            i4 = of2;
                            str6 = str3;
                        }
                    }
                    if (map == null || (str5 = map.get(str5)) != null) {
                        linkedHashMap.put(str5, new FieldInfo(str5, method, field3, i7, i4, str6));
                    }
                }
            } else {
                methodArr = methods;
                i3 = length;
            }
            i9++;
            methods = methodArr;
            length = i3;
        }
        Field[] fields = cls.getFields();
        for (Field field4 : fields) {
            if (!Modifier.isStatic(field4.getModifiers())) {
                JSONField jSONField4 = (JSONField) field4.getAnnotation(JSONField.class);
                String name3 = field4.getName();
                if (jSONField4 == null) {
                    str = null;
                    i2 = 0;
                    i = 0;
                } else if (jSONField4.serialize()) {
                    int ordinal3 = jSONField4.ordinal();
                    int of3 = SerializerFeature.of(jSONField4.serialzeFeatures());
                    if (jSONField4.name().length() != 0) {
                        name3 = jSONField4.name();
                    }
                    if (jSONField4.label().length() != 0) {
                        str = jSONField4.label();
                        i2 = ordinal3;
                        i = of3;
                    } else {
                        str = null;
                        i2 = ordinal3;
                        i = of3;
                    }
                }
                if (map != null) {
                    str2 = map.get(name3);
                    if (str2 == null) {
                    }
                } else {
                    str2 = name3;
                }
                if (!linkedHashMap.containsKey(str2)) {
                    linkedHashMap.put(str2, new FieldInfo(str2, null, field4, i2, i, str));
                }
            }
        }
        ArrayList arrayList = new ArrayList();
        JSONType jSONType = (JSONType) cls.getAnnotation(JSONType.class);
        if (jSONType != null) {
            objArr = jSONType.orders();
            if (objArr != null && objArr.length == linkedHashMap.size()) {
                int length2 = objArr.length;
                int i10 = 0;
                while (true) {
                    if (i10 >= length2) {
                        z2 = true;
                        break;
                    } else if (!linkedHashMap.containsKey(objArr[i10])) {
                        z2 = false;
                        break;
                    } else {
                        i10++;
                    }
                }
            } else {
                z2 = false;
            }
        } else {
            z2 = false;
        }
        if (z2) {
            for (Object obj : objArr) {
                arrayList.add((FieldInfo) linkedHashMap.get(obj));
            }
        } else {
            for (FieldInfo fieldInfo : linkedHashMap.values()) {
                arrayList.add(fieldInfo);
            }
            if (z) {
                Collections.sort(arrayList);
            }
        }
        return arrayList;
    }

    public static JSONField getSupperMethodAnnotation(Class<?> cls, Method method) {
        boolean z;
        JSONField jSONField;
        for (Class<?> cls2 : cls.getInterfaces()) {
            Method[] methods = cls2.getMethods();
            for (Method method2 : methods) {
                if (method2.getName().equals(method.getName()) && method2.getParameterTypes().length == method.getParameterTypes().length) {
                    int i = 0;
                    while (true) {
                        if (i >= method2.getParameterTypes().length) {
                            z = true;
                            break;
                        } else if (!method2.getParameterTypes()[i].equals(method.getParameterTypes()[i])) {
                            z = false;
                            break;
                        } else {
                            i++;
                        }
                    }
                    if (z && (jSONField = (JSONField) method2.getAnnotation(JSONField.class)) != null) {
                        return jSONField;
                    }
                }
            }
        }
        return null;
    }

    private static boolean isJSONTypeIgnore(Class<?> cls, String str) {
        JSONType jSONType = (JSONType) cls.getAnnotation(JSONType.class);
        if (jSONType != null) {
            String[] includes = jSONType.includes();
            if (includes.length > 0) {
                for (String str2 : includes) {
                    if (str.equals(str2)) {
                        return false;
                    }
                }
                return true;
            }
            for (String str3 : jSONType.ignores()) {
                if (str.equals(str3)) {
                    return true;
                }
            }
        }
        return (cls.getSuperclass() == Object.class || cls.getSuperclass() == null || !isJSONTypeIgnore(cls.getSuperclass(), str)) ? false : true;
    }

    public static boolean isGenericParamType(Type type) {
        if (type instanceof ParameterizedType) {
            return true;
        }
        if (type instanceof Class) {
            return isGenericParamType(((Class) type).getGenericSuperclass());
        }
        return false;
    }

    public static Type getGenericParamType(Type type) {
        if (type instanceof ParameterizedType) {
            return type;
        }
        return type instanceof Class ? getGenericParamType(((Class) type).getGenericSuperclass()) : type;
    }

    public static Type unwrap(Type type) {
        if (type instanceof GenericArrayType) {
            Type genericComponentType = ((GenericArrayType) type).getGenericComponentType();
            if (genericComponentType == Byte.TYPE) {
                return byte[].class;
            }
            if (genericComponentType == Character.TYPE) {
                return char[].class;
            }
        }
        return type;
    }

    public static Class<?> getClass(Type type) {
        if (type.getClass() == Class.class) {
            return (Class) type;
        }
        if (type instanceof ParameterizedType) {
            return getClass(((ParameterizedType) type).getRawType());
        }
        return Object.class;
    }

    public static Field getField(Class<?> cls, String str) {
        Field[] declaredFields = cls.getDeclaredFields();
        for (Field field : declaredFields) {
            if (str.equals(field.getName())) {
                return field;
            }
        }
        Class<? super Object> superclass = cls.getSuperclass();
        if (superclass == null || superclass == Object.class) {
            return null;
        }
        return getField(superclass, str);
    }

    public static JSONType getJSONType(Class<?> cls) {
        return (JSONType) cls.getAnnotation(JSONType.class);
    }

    public static int getSerializeFeatures(Class<?> cls) {
        JSONType jSONType = (JSONType) cls.getAnnotation(JSONType.class);
        if (jSONType == null) {
            return 0;
        }
        return SerializerFeature.of(jSONType.serialzeFeatures());
    }

    public static int getParserFeatures(Class<?> cls) {
        JSONType jSONType = (JSONType) cls.getAnnotation(JSONType.class);
        if (jSONType == null) {
            return 0;
        }
        return Feature.of(jSONType.parseFeatures());
    }

    public static String decapitalize(String str) {
        if (str == null || str.length() == 0) {
            return str;
        }
        if (str.length() > 1 && Character.isUpperCase(str.charAt(1)) && Character.isUpperCase(str.charAt(0))) {
            return str;
        }
        char[] charArray = str.toCharArray();
        charArray[0] = Character.toLowerCase(charArray[0]);
        return new String(charArray);
    }

    public static void setAccessible(AccessibleObject accessibleObject) {
        if (setAccessibleEnable && !accessibleObject.isAccessible()) {
            try {
                accessibleObject.setAccessible(true);
            } catch (AccessControlException unused) {
                setAccessibleEnable = false;
            }
        }
    }

    public static Class<?> getCollectionItemClass(Type type) {
        if (!(type instanceof ParameterizedType)) {
            return Object.class;
        }
        Type type2 = ((ParameterizedType) type).getActualTypeArguments()[0];
        if (type2 instanceof Class) {
            Class<?> cls = (Class) type2;
            if (Modifier.isPublic(cls.getModifiers())) {
                return cls;
            }
            throw new ASMException("can not create ASMParser");
        }
        throw new ASMException("can not create ASMParser");
    }
}
