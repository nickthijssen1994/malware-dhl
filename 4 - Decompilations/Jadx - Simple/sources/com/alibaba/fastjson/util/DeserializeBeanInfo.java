package com.alibaba.fastjson.util;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.annotation.JSONCreator;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class DeserializeBeanInfo {
    private final Class<?> clazz;
    private Constructor<?> creatorConstructor;
    private Constructor<?> defaultConstructor;
    private Method factoryMethod;
    private int parserFeatures;
    private final List<FieldInfo> fieldList = new ArrayList();
    private final List<FieldInfo> sortedFieldList = new ArrayList();

    public DeserializeBeanInfo(Class<?> cls) {
        this.parserFeatures = 0;
        this.clazz = cls;
        this.parserFeatures = TypeUtils.getParserFeatures(cls);
    }

    public Constructor<?> getDefaultConstructor() {
        return this.defaultConstructor;
    }

    public void setDefaultConstructor(Constructor<?> constructor) {
        this.defaultConstructor = constructor;
    }

    public Constructor<?> getCreatorConstructor() {
        return this.creatorConstructor;
    }

    public void setCreatorConstructor(Constructor<?> constructor) {
        this.creatorConstructor = constructor;
    }

    public Method getFactoryMethod() {
        return this.factoryMethod;
    }

    public void setFactoryMethod(Method method) {
        this.factoryMethod = method;
    }

    public Class<?> getClazz() {
        return this.clazz;
    }

    public List<FieldInfo> getFieldList() {
        return this.fieldList;
    }

    public List<FieldInfo> getSortedFieldList() {
        return this.sortedFieldList;
    }

    public FieldInfo getField(String str) {
        for (FieldInfo fieldInfo : this.fieldList) {
            if (fieldInfo.getName().equals(str)) {
                return fieldInfo;
            }
        }
        return null;
    }

    public boolean add(FieldInfo fieldInfo) {
        for (FieldInfo fieldInfo2 : this.fieldList) {
            if (fieldInfo2.getName().equals(fieldInfo.getName()) && (!fieldInfo2.isGetOnly() || fieldInfo.isGetOnly())) {
                if (!fieldInfo2.getFieldClass().isAssignableFrom(fieldInfo.getFieldClass())) {
                    return false;
                }
                this.fieldList.remove(fieldInfo2);
                this.fieldList.add(fieldInfo);
                this.sortedFieldList.add(fieldInfo);
                Collections.sort(this.sortedFieldList);
                return true;
            }
        }
        this.fieldList.add(fieldInfo);
        this.sortedFieldList.add(fieldInfo);
        Collections.sort(this.sortedFieldList);
        return true;
    }

    public static DeserializeBeanInfo computeSetters(Class<?> cls, Type type) {
        String str;
        int i;
        int i2;
        String str2;
        Method method;
        int i3;
        int i4;
        String str3;
        int i5;
        int i6;
        JSONField jSONField;
        JSONField jSONField2;
        JSONField jSONField3;
        DeserializeBeanInfo deserializeBeanInfo = new DeserializeBeanInfo(cls);
        Constructor<?> defaultConstructor = getDefaultConstructor(cls);
        if (defaultConstructor != null) {
            TypeUtils.setAccessible(defaultConstructor);
            deserializeBeanInfo.setDefaultConstructor(defaultConstructor);
        } else if (defaultConstructor == null && !cls.isInterface() && !Modifier.isAbstract(cls.getModifiers())) {
            Constructor<?> creatorConstructor = getCreatorConstructor(cls);
            if (creatorConstructor != null) {
                TypeUtils.setAccessible(creatorConstructor);
                deserializeBeanInfo.setCreatorConstructor(creatorConstructor);
                for (int i7 = 0; i7 < creatorConstructor.getParameterTypes().length; i7++) {
                    Annotation[] annotationArr = creatorConstructor.getParameterAnnotations()[i7];
                    int length = annotationArr.length;
                    int i8 = 0;
                    while (true) {
                        if (i8 >= length) {
                            jSONField3 = null;
                            break;
                        }
                        Annotation annotation = annotationArr[i8];
                        if (annotation instanceof JSONField) {
                            jSONField3 = (JSONField) annotation;
                            break;
                        }
                        i8++;
                    }
                    if (jSONField3 != null) {
                        deserializeBeanInfo.add(new FieldInfo(jSONField3.name(), cls, creatorConstructor.getParameterTypes()[i7], creatorConstructor.getGenericParameterTypes()[i7], TypeUtils.getField(cls, jSONField3.name()), jSONField3.ordinal(), SerializerFeature.of(jSONField3.serialzeFeatures())));
                    } else {
                        throw new JSONException("illegal json creator");
                    }
                }
                return deserializeBeanInfo;
            }
            Method factoryMethod = getFactoryMethod(cls);
            if (factoryMethod != null) {
                TypeUtils.setAccessible(factoryMethod);
                deserializeBeanInfo.setFactoryMethod(factoryMethod);
                for (int i9 = 0; i9 < factoryMethod.getParameterTypes().length; i9++) {
                    Annotation[] annotationArr2 = factoryMethod.getParameterAnnotations()[i9];
                    int length2 = annotationArr2.length;
                    int i10 = 0;
                    while (true) {
                        if (i10 >= length2) {
                            jSONField2 = null;
                            break;
                        }
                        Annotation annotation2 = annotationArr2[i10];
                        if (annotation2 instanceof JSONField) {
                            jSONField2 = (JSONField) annotation2;
                            break;
                        }
                        i10++;
                    }
                    if (jSONField2 != null) {
                        deserializeBeanInfo.add(new FieldInfo(jSONField2.name(), cls, factoryMethod.getParameterTypes()[i9], factoryMethod.getGenericParameterTypes()[i9], TypeUtils.getField(cls, jSONField2.name()), jSONField2.ordinal(), SerializerFeature.of(jSONField2.serialzeFeatures())));
                    } else {
                        throw new JSONException("illegal json creator");
                    }
                }
                return deserializeBeanInfo;
            }
            throw new JSONException("default constructor not found. " + cls);
        }
        Method[] methods = cls.getMethods();
        for (Method method2 : methods) {
            String name = method2.getName();
            if (name.length() >= 4 && !Modifier.isStatic(method2.getModifiers()) && ((method2.getReturnType().equals(Void.TYPE) || method2.getReturnType().equals(cls)) && method2.getParameterTypes().length == 1)) {
                JSONField jSONField4 = (JSONField) method2.getAnnotation(JSONField.class);
                if (jSONField4 == null) {
                    jSONField4 = TypeUtils.getSupperMethodAnnotation(cls, method2);
                }
                if (jSONField4 == null) {
                    method = method2;
                    i4 = 0;
                    i3 = 0;
                } else if (jSONField4.deserialize()) {
                    i4 = jSONField4.ordinal();
                    i3 = SerializerFeature.of(jSONField4.serialzeFeatures());
                    if (jSONField4.name().length() != 0) {
                        deserializeBeanInfo.add(new FieldInfo(jSONField4.name(), method2, (Field) null, cls, type, i4, i3));
                        TypeUtils.setAccessible(method2);
                    } else {
                        method = method2;
                    }
                }
                if (name.startsWith("set")) {
                    char charAt = name.charAt(3);
                    if (Character.isUpperCase(charAt)) {
                        if (TypeUtils.compatibleWithJavaBean) {
                            str3 = TypeUtils.decapitalize(name.substring(3));
                        } else {
                            str3 = Character.toLowerCase(name.charAt(3)) + name.substring(4);
                        }
                    } else if (charAt == '_') {
                        str3 = name.substring(4);
                    } else if (charAt == 'f') {
                        str3 = name.substring(3);
                    } else if (name.length() >= 5 && Character.isUpperCase(name.charAt(4))) {
                        str3 = TypeUtils.decapitalize(name.substring(3));
                    }
                    Field field = TypeUtils.getField(cls, str3);
                    Field field2 = (field == null && method.getParameterTypes()[0] == Boolean.TYPE) ? TypeUtils.getField(cls, "is" + Character.toUpperCase(str3.charAt(0)) + str3.substring(1)) : field;
                    if (field2 == null || (jSONField = (JSONField) field2.getAnnotation(JSONField.class)) == null) {
                        i6 = i4;
                        i5 = i3;
                    } else {
                        i6 = jSONField.ordinal();
                        i5 = SerializerFeature.of(jSONField.serialzeFeatures());
                        if (jSONField.name().length() != 0) {
                            deserializeBeanInfo.add(new FieldInfo(jSONField.name(), method, field2, cls, type, i6, i5));
                        }
                    }
                    deserializeBeanInfo.add(new FieldInfo(str3, method, (Field) null, cls, type, i6, i5));
                    TypeUtils.setAccessible(method);
                }
            }
        }
        Field[] fields = cls.getFields();
        for (Field field3 : fields) {
            if (!Modifier.isStatic(field3.getModifiers())) {
                boolean z = false;
                for (FieldInfo fieldInfo : deserializeBeanInfo.getFieldList()) {
                    if (fieldInfo.getName().equals(field3.getName())) {
                        z = true;
                    }
                }
                if (!z) {
                    String name2 = field3.getName();
                    JSONField jSONField5 = (JSONField) field3.getAnnotation(JSONField.class);
                    if (jSONField5 != null) {
                        int ordinal = jSONField5.ordinal();
                        int of = SerializerFeature.of(jSONField5.serialzeFeatures());
                        if (jSONField5.name().length() != 0) {
                            str2 = jSONField5.name();
                            i2 = ordinal;
                            i = of;
                        } else {
                            str2 = name2;
                            i2 = ordinal;
                            i = of;
                        }
                    } else {
                        str2 = name2;
                        i2 = 0;
                        i = 0;
                    }
                    deserializeBeanInfo.add(new FieldInfo(str2, (Method) null, field3, cls, type, i2, i));
                }
            }
        }
        Method[] methods2 = cls.getMethods();
        for (Method method3 : methods2) {
            String name3 = method3.getName();
            if (name3.length() >= 4 && !Modifier.isStatic(method3.getModifiers()) && name3.startsWith("get") && Character.isUpperCase(name3.charAt(3)) && method3.getParameterTypes().length == 0 && (Collection.class.isAssignableFrom(method3.getReturnType()) || Map.class.isAssignableFrom(method3.getReturnType()) || AtomicBoolean.class == method3.getReturnType() || AtomicInteger.class == method3.getReturnType() || AtomicLong.class == method3.getReturnType())) {
                JSONField jSONField6 = (JSONField) method3.getAnnotation(JSONField.class);
                if (jSONField6 == null || jSONField6.name().length() <= 0) {
                    str = Character.toLowerCase(name3.charAt(3)) + name3.substring(4);
                } else {
                    str = jSONField6.name();
                }
                if (deserializeBeanInfo.getField(str) == null) {
                    deserializeBeanInfo.add(new FieldInfo(str, method3, (Field) null, cls, type));
                    TypeUtils.setAccessible(method3);
                }
            }
        }
        return deserializeBeanInfo;
    }

    public static Constructor<?> getDefaultConstructor(Class<?> cls) {
        Constructor<?> constructor = null;
        if (Modifier.isAbstract(cls.getModifiers())) {
            return null;
        }
        Constructor<?>[] declaredConstructors = cls.getDeclaredConstructors();
        int length = declaredConstructors.length;
        int i = 0;
        while (true) {
            if (i >= length) {
                break;
            }
            Constructor<?> constructor2 = declaredConstructors[i];
            if (constructor2.getParameterTypes().length == 0) {
                constructor = constructor2;
                break;
            }
            i++;
        }
        if (constructor != null || !cls.isMemberClass() || Modifier.isStatic(cls.getModifiers())) {
            return constructor;
        }
        Constructor<?>[] declaredConstructors2 = cls.getDeclaredConstructors();
        for (Constructor<?> constructor3 : declaredConstructors2) {
            if (constructor3.getParameterTypes().length == 1 && constructor3.getParameterTypes()[0].equals(cls.getDeclaringClass())) {
                return constructor3;
            }
        }
        return constructor;
    }

    public static Constructor<?> getCreatorConstructor(Class<?> cls) {
        Constructor<?>[] declaredConstructors = cls.getDeclaredConstructors();
        for (Constructor<?> constructor : declaredConstructors) {
            if (((JSONCreator) constructor.getAnnotation(JSONCreator.class)) != null) {
                return constructor;
            }
        }
        return null;
    }

    public static Method getFactoryMethod(Class<?> cls) {
        Method[] declaredMethods = cls.getDeclaredMethods();
        for (Method method : declaredMethods) {
            if (Modifier.isStatic(method.getModifiers()) && cls.isAssignableFrom(method.getReturnType()) && ((JSONCreator) method.getAnnotation(JSONCreator.class)) != null) {
                return method;
            }
        }
        return null;
    }

    public int getParserFeatures() {
        return this.parserFeatures;
    }
}
