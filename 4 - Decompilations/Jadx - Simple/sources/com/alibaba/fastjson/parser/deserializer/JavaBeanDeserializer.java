package com.alibaba.fastjson.parser.deserializer;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.FilterUtils;
import com.alibaba.fastjson.util.DeserializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.Constructor;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class JavaBeanDeserializer implements ObjectDeserializer {
    private DeserializeBeanInfo beanInfo;
    private final Class<?> clazz;
    private final Map<String, FieldDeserializer> feildDeserializerMap;
    private final List<FieldDeserializer> fieldDeserializers;
    private final List<FieldDeserializer> sortedFieldDeserializers;

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public int getFastMatchToken() {
        return 12;
    }

    public JavaBeanDeserializer(ParserConfig parserConfig, Class<?> cls) {
        this(parserConfig, cls, cls);
    }

    public JavaBeanDeserializer(ParserConfig parserConfig, Class<?> cls, Type type) {
        this.feildDeserializerMap = new IdentityHashMap();
        this.fieldDeserializers = new ArrayList();
        this.sortedFieldDeserializers = new ArrayList();
        this.clazz = cls;
        this.beanInfo = DeserializeBeanInfo.computeSetters(cls, type);
        for (FieldInfo fieldInfo : this.beanInfo.getFieldList()) {
            addFieldDeserializer(parserConfig, cls, fieldInfo);
        }
        for (FieldInfo fieldInfo2 : this.beanInfo.getSortedFieldList()) {
            this.sortedFieldDeserializers.add(this.feildDeserializerMap.get(fieldInfo2.getName().intern()));
        }
    }

    public Map<String, FieldDeserializer> getFieldDeserializerMap() {
        return this.feildDeserializerMap;
    }

    public FieldDeserializer getFieldDeserializer(String str) {
        FieldDeserializer fieldDeserializer = this.feildDeserializerMap.get(str);
        if (fieldDeserializer != null) {
            return fieldDeserializer;
        }
        for (Map.Entry<String, FieldDeserializer> entry : this.feildDeserializerMap.entrySet()) {
            if (str.equals(entry.getKey())) {
                return entry.getValue();
            }
        }
        return null;
    }

    public Class<?> getClazz() {
        return this.clazz;
    }

    private void addFieldDeserializer(ParserConfig parserConfig, Class<?> cls, FieldInfo fieldInfo) {
        String intern = fieldInfo.getName().intern();
        FieldDeserializer createFieldDeserializer = createFieldDeserializer(parserConfig, cls, fieldInfo);
        this.feildDeserializerMap.put(intern, createFieldDeserializer);
        this.fieldDeserializers.add(createFieldDeserializer);
    }

    public FieldDeserializer createFieldDeserializer(ParserConfig parserConfig, Class<?> cls, FieldInfo fieldInfo) {
        return parserConfig.createFieldDeserializer(parserConfig, cls, fieldInfo);
    }

    public Object createInstance(DefaultJSONParser defaultJSONParser, Type type) {
        Object obj;
        if ((type instanceof Class) && this.clazz.isInterface()) {
            return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{(Class) type}, new JSONObject());
        }
        if (this.beanInfo.getDefaultConstructor() == null) {
            return null;
        }
        try {
            Constructor<?> defaultConstructor = this.beanInfo.getDefaultConstructor();
            if (defaultConstructor.getParameterTypes().length == 0) {
                obj = defaultConstructor.newInstance(new Object[0]);
            } else {
                obj = defaultConstructor.newInstance(defaultJSONParser.getContext().getObject());
            }
            if (defaultJSONParser.isEnabled(Feature.InitStringFieldAsEmpty)) {
                for (FieldInfo fieldInfo : this.beanInfo.getFieldList()) {
                    if (fieldInfo.getFieldClass() == String.class) {
                        try {
                            fieldInfo.set(obj, "");
                        } catch (Exception e) {
                            throw new JSONException("create instance error, class " + this.clazz.getName(), e);
                        }
                    }
                }
            }
            return obj;
        } catch (Exception e2) {
            throw new JSONException("create instance error, class " + this.clazz.getName(), e2);
        }
    }

    @Override // com.alibaba.fastjson.parser.deserializer.ObjectDeserializer
    public <T> T deserialze(DefaultJSONParser defaultJSONParser, Type type, Object obj) {
        return (T) deserialze(defaultJSONParser, type, obj, null);
    }

    public <T> T deserialzeArrayMapping(DefaultJSONParser defaultJSONParser, Type type, Object obj, Object obj2) {
        JSONLexer lexer = defaultJSONParser.getLexer();
        if (lexer.token() == 14) {
            T t = (T) createInstance(defaultJSONParser, type);
            int size = this.sortedFieldDeserializers.size();
            int i = 0;
            while (i < size) {
                char c = i == size + -1 ? ']' : ',';
                FieldDeserializer fieldDeserializer = this.sortedFieldDeserializers.get(i);
                Class<?> fieldClass = fieldDeserializer.getFieldClass();
                if (fieldClass == Integer.TYPE) {
                    fieldDeserializer.setValue((Object) t, lexer.scanInt(c));
                } else if (fieldClass == String.class) {
                    fieldDeserializer.setValue((Object) t, lexer.scanString(c));
                } else if (fieldClass == Long.TYPE) {
                    fieldDeserializer.setValue(t, lexer.scanLong(c));
                } else if (fieldClass.isEnum()) {
                    fieldDeserializer.setValue(t, lexer.scanEnum(fieldClass, defaultJSONParser.getSymbolTable(), c));
                } else {
                    lexer.nextToken(14);
                    fieldDeserializer.setValue(t, defaultJSONParser.parseObject(fieldDeserializer.getFieldType()));
                    if (c == ']') {
                        if (lexer.token() == 15) {
                            lexer.nextToken(16);
                        } else {
                            throw new JSONException("syntax error");
                        }
                    } else if (c == ',' && lexer.token() != 16) {
                        throw new JSONException("syntax error");
                    }
                }
                i++;
            }
            lexer.nextToken(16);
            return t;
        }
        throw new JSONException("error");
    }

    /* JADX WARN: Code restructure failed: missing block: B:100:0x01c3, code lost:
        r0 = com.alibaba.fastjson.util.TypeUtils.loadClass(r4);
        r0 = (T) r20.getConfig().getDeserializer(r0).deserialze(r20, r0, r22);
     */
    /* JADX WARN: Code restructure failed: missing block: B:101:0x01d3, code lost:
        if (r3 == null) goto L_0x01d8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x01d5, code lost:
        r3.setObject(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:103:0x01d8, code lost:
        r20.setContext(r13);
     */
    /* JADX WARN: Code restructure failed: missing block: B:104:0x01db, code lost:
        return r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:127:0x0236, code lost:
        r2 = r17;
        r3 = r18;
        r1 = (T) r16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:128:0x023c, code lost:
        if (r1 != null) goto L_0x02df;
     */
    /* JADX WARN: Code restructure failed: missing block: B:129:0x023e, code lost:
        if (r2 != null) goto L_0x0253;
     */
    /* JADX WARN: Code restructure failed: missing block: B:130:0x0240, code lost:
        r1 = (T) createInstance(r20, r21);
     */
    /* JADX WARN: Code restructure failed: missing block: B:131:0x0244, code lost:
        if (r3 != null) goto L_0x024a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:132:0x0246, code lost:
        r3 = r20.setContext(r13, r1, r22);
     */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x024a, code lost:
        if (r3 == null) goto L_0x024f;
     */
    /* JADX WARN: Code restructure failed: missing block: B:134:0x024c, code lost:
        r3.setObject(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:135:0x024f, code lost:
        r20.setContext(r13);
     */
    /* JADX WARN: Code restructure failed: missing block: B:136:0x0252, code lost:
        return r1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x0253, code lost:
        r0 = r19.beanInfo.getFieldList();
        r4 = r0.size();
        r5 = new java.lang.Object[r4];
        r6 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x0260, code lost:
        if (r6 >= r4) goto L_0x0275;
     */
    /* JADX WARN: Code restructure failed: missing block: B:139:0x0262, code lost:
        r5[r6] = r2.get(r0.get(r6).getName());
        r6 = r6 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x027b, code lost:
        if (r19.beanInfo.getCreatorConstructor() == null) goto L_0x02aa;
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x027d, code lost:
        r1 = (T) r19.beanInfo.getCreatorConstructor().newInstance(r5);
     */
    /* JADX WARN: Code restructure failed: missing block: B:143:0x0288, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:145:0x02a9, code lost:
        throw new com.alibaba.fastjson.JSONException("create instance error, " + r19.beanInfo.getCreatorConstructor().toGenericString(), r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:147:0x02b0, code lost:
        if (r19.beanInfo.getFactoryMethod() == null) goto L_0x02df;
     */
    /* JADX WARN: Code restructure failed: missing block: B:148:0x02b2, code lost:
        r1 = (T) r19.beanInfo.getFactoryMethod().invoke(null, r5);
     */
    /* JADX WARN: Code restructure failed: missing block: B:149:0x02bd, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x02de, code lost:
        throw new com.alibaba.fastjson.JSONException("create factory method error, " + r19.beanInfo.getFactoryMethod().toString(), r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:152:0x02df, code lost:
        if (r3 == null) goto L_0x02e4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:153:0x02e1, code lost:
        r3.setObject(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:154:0x02e4, code lost:
        r20.setContext(r13);
     */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x02e7, code lost:
        return (T) r1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public <T> T deserialze(com.alibaba.fastjson.parser.DefaultJSONParser r20, java.lang.reflect.Type r21, java.lang.Object r22, java.lang.Object r23) {
        /*
        // Method dump skipped, instructions count: 823
        */
        throw new UnsupportedOperationException("Method not decompiled: com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object):java.lang.Object");
    }

    public boolean parseField(DefaultJSONParser defaultJSONParser, String str, Object obj, Type type, Map<String, Object> map) {
        JSONLexer lexer = defaultJSONParser.getLexer();
        FieldDeserializer fieldDeserializer = this.feildDeserializerMap.get(str);
        if (fieldDeserializer == null) {
            Iterator<Map.Entry<String, FieldDeserializer>> it = this.feildDeserializerMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                Map.Entry<String, FieldDeserializer> next = it.next();
                if (next.getKey().equalsIgnoreCase(str)) {
                    fieldDeserializer = next.getValue();
                    break;
                }
            }
        }
        if (fieldDeserializer == null) {
            parseExtra(defaultJSONParser, obj, str);
            return false;
        }
        lexer.nextTokenWithColon(fieldDeserializer.getFastMatchToken());
        fieldDeserializer.parseField(defaultJSONParser, obj, type, map);
        return true;
    }

    void parseExtra(DefaultJSONParser defaultJSONParser, Object obj, String str) {
        Object obj2;
        JSONLexer lexer = defaultJSONParser.getLexer();
        if (lexer.isEnabled(Feature.IgnoreNotMatch)) {
            lexer.nextTokenWithColon();
            Type extratype = FilterUtils.getExtratype(defaultJSONParser, obj, str);
            if (extratype == null) {
                obj2 = defaultJSONParser.parse();
            } else {
                obj2 = defaultJSONParser.parseObject(extratype);
            }
            FilterUtils.processExtra(defaultJSONParser, obj, str, obj2);
            return;
        }
        throw new JSONException("setter not found, class " + this.clazz.getName() + ", property " + str);
    }

    public List<FieldDeserializer> getSortedFieldDeserializers() {
        return this.sortedFieldDeserializers;
    }

    public final boolean isSupportArrayToBean(JSONLexer jSONLexer) {
        return Feature.isEnabled(this.beanInfo.getParserFeatures(), Feature.SupportArrayToBean) || jSONLexer.isEnabled(Feature.SupportArrayToBean);
    }
}
