package com.alibaba.fastjson.parser;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.deserializer.CollectionResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ListResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.serializer.IntegerCodec;
import com.alibaba.fastjson.serializer.LongCodec;
import com.alibaba.fastjson.serializer.StringCodec;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.Closeable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class DefaultJSONParser extends AbstractJSONParser implements Closeable {
    public static final int NONE;
    public static final int NeedToResolve;
    public static final int TypeNameRedirect;
    private static final Set<Class<?>> primitiveClasses = new HashSet();
    protected ParserConfig config;
    protected ParseContext context;
    private ParseContext[] contextArray;
    private int contextArrayIndex;
    private DateFormat dateFormat;
    private String dateFormatPattern;
    private List<ExtraProcessor> extraProcessors;
    private List<ExtraTypeProvider> extraTypeProviders;
    protected final Object input;
    protected final JSONLexer lexer;
    private int resolveStatus;
    private List<ResolveTask> resolveTaskList;
    protected final SymbolTable symbolTable;

    static {
        primitiveClasses.add(Boolean.TYPE);
        primitiveClasses.add(Byte.TYPE);
        primitiveClasses.add(Short.TYPE);
        primitiveClasses.add(Integer.TYPE);
        primitiveClasses.add(Long.TYPE);
        primitiveClasses.add(Float.TYPE);
        primitiveClasses.add(Double.TYPE);
        primitiveClasses.add(Boolean.class);
        primitiveClasses.add(Byte.class);
        primitiveClasses.add(Short.class);
        primitiveClasses.add(Integer.class);
        primitiveClasses.add(Long.class);
        primitiveClasses.add(Float.class);
        primitiveClasses.add(Double.class);
        primitiveClasses.add(BigInteger.class);
        primitiveClasses.add(BigDecimal.class);
        primitiveClasses.add(String.class);
    }

    public String getDateFomartPattern() {
        return this.dateFormatPattern;
    }

    public DateFormat getDateFormat() {
        if (this.dateFormat == null) {
            this.dateFormat = new SimpleDateFormat(this.dateFormatPattern);
        }
        return this.dateFormat;
    }

    public void setDateFormat(String str) {
        this.dateFormatPattern = str;
        this.dateFormat = null;
    }

    public void setDateFomrat(DateFormat dateFormat) {
        this.dateFormat = dateFormat;
    }

    public DefaultJSONParser(String str) {
        this(str, ParserConfig.getGlobalInstance(), JSON.DEFAULT_PARSER_FEATURE);
    }

    public DefaultJSONParser(String str, ParserConfig parserConfig) {
        this(str, new JSONScanner(str, JSON.DEFAULT_PARSER_FEATURE), parserConfig);
    }

    public DefaultJSONParser(String str, ParserConfig parserConfig, int i) {
        this(str, new JSONScanner(str, i), parserConfig);
    }

    public DefaultJSONParser(char[] cArr, int i, ParserConfig parserConfig, int i2) {
        this(cArr, new JSONScanner(cArr, i, i2), parserConfig);
    }

    public DefaultJSONParser(JSONLexer jSONLexer) {
        this(jSONLexer, ParserConfig.getGlobalInstance());
    }

    public DefaultJSONParser(JSONLexer jSONLexer, ParserConfig parserConfig) {
        this((Object) null, jSONLexer, parserConfig);
    }

    public DefaultJSONParser(Object obj, JSONLexer jSONLexer, ParserConfig parserConfig) {
        this.dateFormatPattern = JSON.DEFFAULT_DATE_FORMAT;
        this.contextArray = new ParseContext[8];
        this.contextArrayIndex = 0;
        this.resolveStatus = 0;
        this.extraTypeProviders = null;
        this.extraProcessors = null;
        this.lexer = jSONLexer;
        this.input = obj;
        this.config = parserConfig;
        this.symbolTable = parserConfig.getSymbolTable();
        jSONLexer.nextToken(12);
    }

    public SymbolTable getSymbolTable() {
        return this.symbolTable;
    }

    public String getInput() {
        Object obj = this.input;
        if (obj instanceof char[]) {
            return new String((char[]) obj);
        }
        return obj.toString();
    }

    /* JADX WARN: Code restructure failed: missing block: B:101:0x0223, code lost:
        if ((r19 instanceof java.lang.Integer) != false) goto L_0x0228;
     */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x0225, code lost:
        popContext();
     */
    /* JADX WARN: Code restructure failed: missing block: B:105:0x0235, code lost:
        return r17.config.getDeserializer(r7).deserialze(r17, r7, r19);
     */
    /* JADX WARN: Code restructure failed: missing block: B:78:0x01d2, code lost:
        r3.nextToken(16);
     */
    /* JADX WARN: Code restructure failed: missing block: B:79:0x01db, code lost:
        if (r3.token() != 13) goto L_0x021a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:80:0x01dd, code lost:
        r3.nextToken(16);
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x01e0, code lost:
        r0 = r17.config.getDeserializer(r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:82:0x01e8, code lost:
        if ((r0 instanceof com.alibaba.fastjson.parser.deserializer.ASMJavaBeanDeserializer) == false) goto L_0x01f1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x01ea, code lost:
        r5 = ((com.alibaba.fastjson.parser.deserializer.ASMJavaBeanDeserializer) r0).createInstance(r17, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x01f3, code lost:
        if ((r0 instanceof com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer) == false) goto L_0x01fc;
     */
    /* JADX WARN: Code restructure failed: missing block: B:86:0x01f5, code lost:
        r5 = ((com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer) r0).createInstance(r17, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x01fc, code lost:
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:88:0x01fd, code lost:
        if (r5 != null) goto L_0x020d;
     */
    /* JADX WARN: Code restructure failed: missing block: B:90:0x0201, code lost:
        if (r7 != java.lang.Cloneable.class) goto L_0x0209;
     */
    /* JADX WARN: Code restructure failed: missing block: B:91:0x0203, code lost:
        r5 = new java.util.HashMap();
     */
    /* JADX WARN: Code restructure failed: missing block: B:92:0x0209, code lost:
        r5 = r7.newInstance();
     */
    /* JADX WARN: Code restructure failed: missing block: B:94:0x0210, code lost:
        return r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:95:0x0211, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:97:0x0219, code lost:
        throw new com.alibaba.fastjson.JSONException("create instance error", r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:98:0x021a, code lost:
        setResolveStatus(2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:99:0x021f, code lost:
        if (r17.context == null) goto L_0x0228;
     */
    /* JADX WARN: Removed duplicated region for block: B:145:0x02e8 A[Catch: all -> 0x04e3, TRY_LEAVE, TryCatch #0 {all -> 0x04e3, blocks: (B:13:0x0046, B:16:0x0059, B:19:0x0074, B:22:0x0086, B:23:0x00a8, B:25:0x00ab, B:30:0x00bc, B:32:0x00c4, B:35:0x00d6, B:36:0x00f0, B:37:0x00f1, B:38:0x00f8, B:45:0x0105, B:47:0x0111, B:48:0x0117, B:49:0x011c, B:52:0x0125, B:53:0x0147, B:59:0x0151, B:61:0x0159, B:64:0x016a, B:65:0x018c, B:66:0x018d, B:67:0x0194, B:68:0x0195, B:70:0x019f, B:71:0x01a5, B:73:0x01b2, B:75:0x01ba, B:77:0x01c8, B:78:0x01d2, B:80:0x01dd, B:81:0x01e0, B:83:0x01ea, B:84:0x01f1, B:86:0x01f5, B:91:0x0203, B:92:0x0209, B:96:0x0212, B:97:0x0219, B:98:0x021a, B:100:0x0221, B:102:0x0225, B:103:0x0228, B:108:0x023a, B:110:0x0242, B:112:0x024d, B:114:0x025c, B:116:0x0262, B:118:0x026e, B:121:0x0274, B:123:0x027a, B:125:0x0285, B:127:0x028d, B:129:0x0297, B:130:0x029c, B:131:0x02a9, B:134:0x02b2, B:136:0x02b8, B:137:0x02bd, B:139:0x02c3, B:140:0x02c9, B:141:0x02d6, B:143:0x02e2, B:145:0x02e8, B:148:0x02f1, B:149:0x02f8, B:150:0x02f9, B:151:0x0317, B:153:0x031a, B:154:0x031e, B:158:0x032b, B:162:0x0337, B:164:0x0346, B:166:0x0351, B:167:0x0359, B:168:0x035c, B:172:0x0366, B:174:0x036f, B:175:0x0374, B:176:0x037e, B:177:0x0381, B:179:0x038a, B:182:0x0395, B:185:0x03a5, B:186:0x03c7, B:189:0x03cc, B:191:0x03e0, B:194:0x03e7, B:197:0x03f1, B:198:0x03f8, B:201:0x03fd, B:203:0x0402, B:207:0x040f, B:209:0x041c, B:211:0x0422, B:214:0x042a, B:215:0x042d, B:217:0x043c, B:218:0x0444, B:220:0x0449, B:221:0x044c, B:223:0x0452, B:226:0x045c, B:229:0x0465, B:230:0x047f, B:231:0x0480, B:233:0x048f, B:234:0x0493, B:236:0x049c, B:239:0x04a3, B:242:0x04b0, B:243:0x04d2, B:244:0x04d3, B:245:0x04da, B:246:0x04db, B:247:0x04e2), top: B:251:0x0046, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:148:0x02f1 A[Catch: all -> 0x04e3, TRY_ENTER, TryCatch #0 {all -> 0x04e3, blocks: (B:13:0x0046, B:16:0x0059, B:19:0x0074, B:22:0x0086, B:23:0x00a8, B:25:0x00ab, B:30:0x00bc, B:32:0x00c4, B:35:0x00d6, B:36:0x00f0, B:37:0x00f1, B:38:0x00f8, B:45:0x0105, B:47:0x0111, B:48:0x0117, B:49:0x011c, B:52:0x0125, B:53:0x0147, B:59:0x0151, B:61:0x0159, B:64:0x016a, B:65:0x018c, B:66:0x018d, B:67:0x0194, B:68:0x0195, B:70:0x019f, B:71:0x01a5, B:73:0x01b2, B:75:0x01ba, B:77:0x01c8, B:78:0x01d2, B:80:0x01dd, B:81:0x01e0, B:83:0x01ea, B:84:0x01f1, B:86:0x01f5, B:91:0x0203, B:92:0x0209, B:96:0x0212, B:97:0x0219, B:98:0x021a, B:100:0x0221, B:102:0x0225, B:103:0x0228, B:108:0x023a, B:110:0x0242, B:112:0x024d, B:114:0x025c, B:116:0x0262, B:118:0x026e, B:121:0x0274, B:123:0x027a, B:125:0x0285, B:127:0x028d, B:129:0x0297, B:130:0x029c, B:131:0x02a9, B:134:0x02b2, B:136:0x02b8, B:137:0x02bd, B:139:0x02c3, B:140:0x02c9, B:141:0x02d6, B:143:0x02e2, B:145:0x02e8, B:148:0x02f1, B:149:0x02f8, B:150:0x02f9, B:151:0x0317, B:153:0x031a, B:154:0x031e, B:158:0x032b, B:162:0x0337, B:164:0x0346, B:166:0x0351, B:167:0x0359, B:168:0x035c, B:172:0x0366, B:174:0x036f, B:175:0x0374, B:176:0x037e, B:177:0x0381, B:179:0x038a, B:182:0x0395, B:185:0x03a5, B:186:0x03c7, B:189:0x03cc, B:191:0x03e0, B:194:0x03e7, B:197:0x03f1, B:198:0x03f8, B:201:0x03fd, B:203:0x0402, B:207:0x040f, B:209:0x041c, B:211:0x0422, B:214:0x042a, B:215:0x042d, B:217:0x043c, B:218:0x0444, B:220:0x0449, B:221:0x044c, B:223:0x0452, B:226:0x045c, B:229:0x0465, B:230:0x047f, B:231:0x0480, B:233:0x048f, B:234:0x0493, B:236:0x049c, B:239:0x04a3, B:242:0x04b0, B:243:0x04d2, B:244:0x04d3, B:245:0x04da, B:246:0x04db, B:247:0x04e2), top: B:251:0x0046, inners: #1 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final java.lang.Object parseObject(java.util.Map r18, java.lang.Object r19) {
        /*
        // Method dump skipped, instructions count: 1257
        */
        throw new UnsupportedOperationException("Method not decompiled: com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.util.Map, java.lang.Object):java.lang.Object");
    }

    public ParserConfig getConfig() {
        return this.config;
    }

    public void setConfig(ParserConfig parserConfig) {
        this.config = parserConfig;
    }

    public <T> T parseObject(Class<T> cls) {
        return (T) parseObject((Type) cls);
    }

    public <T> T parseObject(Type type) {
        if (this.lexer.token() == 8) {
            this.lexer.nextToken();
            return null;
        }
        if (this.lexer.token() == 4) {
            type = TypeUtils.unwrap(type);
            if (type == byte[].class) {
                T t = (T) this.lexer.bytesValue();
                this.lexer.nextToken();
                return t;
            } else if (type == char[].class) {
                String stringVal = this.lexer.stringVal();
                this.lexer.nextToken();
                return (T) stringVal.toCharArray();
            }
        }
        try {
            return (T) this.config.getDeserializer(type).deserialze(this, type, null);
        } catch (JSONException e) {
            throw e;
        } catch (Throwable th) {
            throw new JSONException(th.getMessage(), th);
        }
    }

    public <T> List<T> parseArray(Class<T> cls) {
        ArrayList arrayList = new ArrayList();
        parseArray((Class<?>) cls, (Collection) arrayList);
        return arrayList;
    }

    public void parseArray(Class<?> cls, Collection collection) {
        parseArray((Type) cls, collection);
    }

    public void parseArray(Type type, Collection collection) {
        parseArray(type, collection, null);
    }

    /* JADX WARN: Finally extract failed */
    public void parseArray(Type type, Collection collection, Object obj) {
        ObjectDeserializer objectDeserializer;
        if (this.lexer.token() == 21 || this.lexer.token() == 22) {
            this.lexer.nextToken();
        }
        if (this.lexer.token() == 14) {
            if (Integer.TYPE == type) {
                objectDeserializer = IntegerCodec.instance;
                this.lexer.nextToken(2);
            } else if (String.class == type) {
                objectDeserializer = StringCodec.instance;
                this.lexer.nextToken(4);
            } else {
                objectDeserializer = this.config.getDeserializer(type);
                this.lexer.nextToken(objectDeserializer.getFastMatchToken());
            }
            ParseContext context = getContext();
            setContext(collection, obj);
            int i = 0;
            while (true) {
                try {
                    if (isEnabled(Feature.AllowArbitraryCommas)) {
                        while (this.lexer.token() == 16) {
                            this.lexer.nextToken();
                        }
                    }
                    if (this.lexer.token() == 15) {
                        setContext(context);
                        this.lexer.nextToken(16);
                        return;
                    }
                    Object obj2 = null;
                    if (Integer.TYPE == type) {
                        collection.add(IntegerCodec.instance.deserialze(this, null, null));
                    } else if (String.class == type) {
                        if (this.lexer.token() == 4) {
                            obj2 = this.lexer.stringVal();
                            this.lexer.nextToken(16);
                        } else {
                            Object parse = parse();
                            if (parse != null) {
                                obj2 = parse.toString();
                            }
                        }
                        collection.add(obj2);
                    } else {
                        if (this.lexer.token() == 8) {
                            this.lexer.nextToken();
                        } else {
                            obj2 = objectDeserializer.deserialze(this, type, Integer.valueOf(i));
                        }
                        collection.add(obj2);
                        checkListResolve(collection);
                    }
                    if (this.lexer.token() == 16) {
                        this.lexer.nextToken(objectDeserializer.getFastMatchToken());
                    }
                    i++;
                } catch (Throwable th) {
                    setContext(context);
                    throw th;
                }
            }
        } else {
            throw new JSONException("exepct '[', but " + JSONToken.name(this.lexer.token()));
        }
    }

    public Object[] parseArray(Type[] typeArr) {
        Object obj;
        boolean z;
        Class<?> cls;
        if (this.lexer.token() == 8) {
            this.lexer.nextToken(16);
            return null;
        } else if (this.lexer.token() == 14) {
            Object[] objArr = new Object[typeArr.length];
            if (typeArr.length == 0) {
                this.lexer.nextToken(15);
                if (this.lexer.token() == 15) {
                    this.lexer.nextToken(16);
                    return new Object[0];
                }
                throw new JSONException("syntax error");
            }
            this.lexer.nextToken(2);
            for (int i = 0; i < typeArr.length; i++) {
                if (this.lexer.token() == 8) {
                    this.lexer.nextToken(16);
                    obj = null;
                } else {
                    Type type = typeArr[i];
                    if (type == Integer.TYPE || type == Integer.class) {
                        if (this.lexer.token() == 2) {
                            obj = Integer.valueOf(this.lexer.intValue());
                            this.lexer.nextToken(16);
                        } else {
                            obj = TypeUtils.cast(parse(), type, this.config);
                        }
                    } else if (type != String.class) {
                        if (i != typeArr.length - 1 || !(type instanceof Class)) {
                            cls = null;
                            z = false;
                        } else {
                            Class cls2 = (Class) type;
                            z = cls2.isArray();
                            cls = cls2.getComponentType();
                        }
                        if (!z || this.lexer.token() == 14) {
                            obj = this.config.getDeserializer(type).deserialze(this, type, null);
                        } else {
                            ArrayList arrayList = new ArrayList();
                            ObjectDeserializer deserializer = this.config.getDeserializer(cls);
                            int fastMatchToken = deserializer.getFastMatchToken();
                            if (this.lexer.token() != 15) {
                                while (true) {
                                    arrayList.add(deserializer.deserialze(this, type, null));
                                    if (this.lexer.token() != 16) {
                                        break;
                                    }
                                    this.lexer.nextToken(fastMatchToken);
                                }
                                if (this.lexer.token() != 15) {
                                    throw new JSONException("syntax error :" + JSONToken.name(this.lexer.token()));
                                }
                            }
                            obj = TypeUtils.cast(arrayList, type, this.config);
                        }
                    } else if (this.lexer.token() == 4) {
                        obj = this.lexer.stringVal();
                        this.lexer.nextToken(16);
                    } else {
                        obj = TypeUtils.cast(parse(), type, this.config);
                    }
                }
                objArr[i] = obj;
                if (this.lexer.token() == 15) {
                    break;
                } else if (this.lexer.token() == 16) {
                    if (i == typeArr.length - 1) {
                        this.lexer.nextToken(15);
                    } else {
                        this.lexer.nextToken(2);
                    }
                } else {
                    throw new JSONException("syntax error :" + JSONToken.name(this.lexer.token()));
                }
            }
            if (this.lexer.token() == 15) {
                this.lexer.nextToken(16);
                return objArr;
            }
            throw new JSONException("syntax error");
        } else {
            throw new JSONException("syntax error : " + this.lexer.tokenName());
        }
    }

    public void parseObject(Object obj) {
        Object obj2;
        Class<?> cls = obj.getClass();
        Map<String, FieldDeserializer> fieldDeserializers = this.config.getFieldDeserializers(cls);
        if (this.lexer.token() == 12 || this.lexer.token() == 16) {
            while (true) {
                String scanSymbol = this.lexer.scanSymbol(this.symbolTable);
                if (scanSymbol == null) {
                    if (this.lexer.token() == 13) {
                        this.lexer.nextToken(16);
                        return;
                    } else if (this.lexer.token() == 16 && isEnabled(Feature.AllowArbitraryCommas)) {
                    }
                }
                FieldDeserializer fieldDeserializer = fieldDeserializers.get(scanSymbol);
                if (fieldDeserializer == null && scanSymbol != null) {
                    Iterator<Map.Entry<String, FieldDeserializer>> it = fieldDeserializers.entrySet().iterator();
                    while (true) {
                        if (!it.hasNext()) {
                            break;
                        }
                        Map.Entry<String, FieldDeserializer> next = it.next();
                        if (scanSymbol.equalsIgnoreCase(next.getKey())) {
                            fieldDeserializer = next.getValue();
                            break;
                        }
                    }
                }
                if (fieldDeserializer != null) {
                    Class<?> fieldClass = fieldDeserializer.getFieldClass();
                    Type fieldType = fieldDeserializer.getFieldType();
                    if (fieldClass == Integer.TYPE) {
                        this.lexer.nextTokenWithColon(2);
                        obj2 = IntegerCodec.instance.deserialze(this, fieldType, null);
                    } else if (fieldClass == String.class) {
                        this.lexer.nextTokenWithColon(4);
                        obj2 = StringCodec.deserialze(this);
                    } else if (fieldClass == Long.TYPE) {
                        this.lexer.nextTokenWithColon(2);
                        obj2 = LongCodec.instance.deserialze(this, fieldType, null);
                    } else {
                        ObjectDeserializer deserializer = this.config.getDeserializer(fieldClass, fieldType);
                        this.lexer.nextTokenWithColon(deserializer.getFastMatchToken());
                        obj2 = deserializer.deserialze(this, fieldType, null);
                    }
                    fieldDeserializer.setValue(obj, obj2);
                    if (this.lexer.token() != 16 && this.lexer.token() == 13) {
                        this.lexer.nextToken(16);
                        return;
                    }
                } else if (isEnabled(Feature.IgnoreNotMatch)) {
                    this.lexer.nextTokenWithColon();
                    parse();
                    if (this.lexer.token() == 13) {
                        this.lexer.nextToken();
                        return;
                    }
                } else {
                    throw new JSONException("setter not found, class " + cls.getName() + ", property " + scanSymbol);
                }
            }
        } else {
            throw new JSONException("syntax error, expect {, actual " + this.lexer.tokenName());
        }
    }

    public Object parseArrayWithType(Type type) {
        if (this.lexer.token() == 8) {
            this.lexer.nextToken();
            return null;
        }
        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
        if (actualTypeArguments.length == 1) {
            Type type2 = actualTypeArguments[0];
            if (type2 instanceof Class) {
                ArrayList arrayList = new ArrayList();
                parseArray((Class) type2, (Collection) arrayList);
                return arrayList;
            } else if (type2 instanceof WildcardType) {
                WildcardType wildcardType = (WildcardType) type2;
                Type type3 = wildcardType.getUpperBounds()[0];
                if (!Object.class.equals(type3)) {
                    ArrayList arrayList2 = new ArrayList();
                    parseArray((Class) type3, (Collection) arrayList2);
                    return arrayList2;
                } else if (wildcardType.getLowerBounds().length == 0) {
                    return parse();
                } else {
                    throw new JSONException("not support type : " + type);
                }
            } else {
                if (type2 instanceof TypeVariable) {
                    TypeVariable typeVariable = (TypeVariable) type2;
                    Type[] bounds = typeVariable.getBounds();
                    if (bounds.length == 1) {
                        Type type4 = bounds[0];
                        if (type4 instanceof Class) {
                            ArrayList arrayList3 = new ArrayList();
                            parseArray((Class) type4, (Collection) arrayList3);
                            return arrayList3;
                        }
                    } else {
                        throw new JSONException("not support : " + typeVariable);
                    }
                }
                if (type2 instanceof ParameterizedType) {
                    ArrayList arrayList4 = new ArrayList();
                    parseArray((ParameterizedType) type2, arrayList4);
                    return arrayList4;
                }
                throw new JSONException("TODO : " + type);
            }
        } else {
            throw new JSONException("not support type " + type);
        }
    }

    public void acceptType(String str) {
        JSONLexer jSONLexer = this.lexer;
        jSONLexer.nextTokenWithColon();
        if (jSONLexer.token() != 4) {
            throw new JSONException("type not match error");
        } else if (str.equals(jSONLexer.stringVal())) {
            jSONLexer.nextToken();
            if (jSONLexer.token() == 16) {
                jSONLexer.nextToken();
            }
        } else {
            throw new JSONException("type not match error");
        }
    }

    public int getResolveStatus() {
        return this.resolveStatus;
    }

    public void setResolveStatus(int i) {
        this.resolveStatus = i;
    }

    public Object getObject(String str) {
        for (int i = 0; i < this.contextArrayIndex; i++) {
            if (str.equals(this.contextArray[i].getPath())) {
                return this.contextArray[i].getObject();
            }
        }
        return null;
    }

    public void checkListResolve(Collection collection) {
        if (this.resolveStatus != 1) {
            return;
        }
        if (collection instanceof List) {
            ResolveTask lastResolveTask = getLastResolveTask();
            lastResolveTask.setFieldDeserializer(new ListResolveFieldDeserializer(this, (List) collection, collection.size() - 1));
            lastResolveTask.setOwnerContext(this.context);
            setResolveStatus(0);
            return;
        }
        ResolveTask lastResolveTask2 = getLastResolveTask();
        lastResolveTask2.setFieldDeserializer(new CollectionResolveFieldDeserializer(this, collection));
        lastResolveTask2.setOwnerContext(this.context);
        setResolveStatus(0);
    }

    public void checkMapResolve(Map map, String str) {
        if (this.resolveStatus == 1) {
            MapResolveFieldDeserializer mapResolveFieldDeserializer = new MapResolveFieldDeserializer(map, str);
            ResolveTask lastResolveTask = getLastResolveTask();
            lastResolveTask.setFieldDeserializer(mapResolveFieldDeserializer);
            lastResolveTask.setOwnerContext(this.context);
            setResolveStatus(0);
        }
    }

    public Object parseObject(Map map) {
        return parseObject(map, null);
    }

    public JSONObject parseObject() {
        JSONObject jSONObject = new JSONObject(isEnabled(Feature.OrderedField));
        parseObject((Map) jSONObject);
        return jSONObject;
    }

    public final void parseArray(Collection collection) {
        parseArray(collection, (Object) null);
    }

    public final void parseArray(Collection collection, Object obj) {
        Object obj2;
        JSONLexer lexer = getLexer();
        if (lexer.token() == 21 || lexer.token() == 22) {
            lexer.nextToken();
        }
        if (lexer.token() == 14) {
            lexer.nextToken(4);
            ParseContext context = getContext();
            setContext(collection, obj);
            int i = 0;
            while (true) {
                try {
                    if (isEnabled(Feature.AllowArbitraryCommas)) {
                        while (lexer.token() == 16) {
                            lexer.nextToken();
                        }
                    }
                    Object obj3 = null;
                    obj3 = null;
                    switch (lexer.token()) {
                        case 2:
                            Object integerValue = lexer.integerValue();
                            lexer.nextToken(16);
                            obj3 = integerValue;
                            break;
                        case 3:
                            if (lexer.isEnabled(Feature.UseBigDecimal)) {
                                obj2 = lexer.decimalValue(true);
                            } else {
                                obj2 = lexer.decimalValue(false);
                            }
                            lexer.nextToken(16);
                            obj3 = obj2;
                            break;
                        case 4:
                            String stringVal = lexer.stringVal();
                            lexer.nextToken(16);
                            obj3 = stringVal;
                            if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {
                                JSONScanner jSONScanner = new JSONScanner(stringVal);
                                Object obj4 = stringVal;
                                if (jSONScanner.scanISO8601DateIfMatch()) {
                                    obj4 = jSONScanner.getCalendar().getTime();
                                }
                                jSONScanner.close();
                                obj3 = obj4;
                                break;
                            }
                            break;
                        case 6:
                            Object obj5 = Boolean.TRUE;
                            lexer.nextToken(16);
                            obj3 = obj5;
                            break;
                        case 7:
                            Object obj6 = Boolean.FALSE;
                            lexer.nextToken(16);
                            obj3 = obj6;
                            break;
                        case 8:
                            lexer.nextToken(4);
                            break;
                        case 12:
                            obj3 = parseObject(new JSONObject(isEnabled(Feature.OrderedField)), Integer.valueOf(i));
                            break;
                        case 14:
                            Collection jSONArray = new JSONArray();
                            parseArray(jSONArray, Integer.valueOf(i));
                            obj3 = jSONArray;
                            break;
                        case 15:
                            lexer.nextToken(16);
                            return;
                        case 20:
                            throw new JSONException("unclosed jsonArray");
                        case 23:
                            lexer.nextToken(4);
                            break;
                        default:
                            obj3 = parse();
                            break;
                    }
                    collection.add(obj3 == 1 ? 1 : 0);
                    checkListResolve(collection);
                    if (lexer.token() == 16) {
                        lexer.nextToken(4);
                    }
                    i++;
                } finally {
                    setContext(context);
                }
            }
        } else {
            throw new JSONException("syntax error, expect [, actual " + JSONToken.name(lexer.token()) + ", pos " + lexer.pos());
        }
    }

    public ParseContext getContext() {
        return this.context;
    }

    public List<ResolveTask> getResolveTaskList() {
        if (this.resolveTaskList == null) {
            this.resolveTaskList = new ArrayList(2);
        }
        return this.resolveTaskList;
    }

    public List<ResolveTask> getResolveTaskListDirect() {
        return this.resolveTaskList;
    }

    public void addResolveTask(ResolveTask resolveTask) {
        if (this.resolveTaskList == null) {
            this.resolveTaskList = new ArrayList(2);
        }
        this.resolveTaskList.add(resolveTask);
    }

    public ResolveTask getLastResolveTask() {
        List<ResolveTask> list = this.resolveTaskList;
        return list.get(list.size() - 1);
    }

    public List<ExtraProcessor> getExtraProcessors() {
        if (this.extraProcessors == null) {
            this.extraProcessors = new ArrayList(2);
        }
        return this.extraProcessors;
    }

    public List<ExtraProcessor> getExtraProcessorsDirect() {
        return this.extraProcessors;
    }

    public List<ExtraTypeProvider> getExtraTypeProviders() {
        if (this.extraTypeProviders == null) {
            this.extraTypeProviders = new ArrayList(2);
        }
        return this.extraTypeProviders;
    }

    public List<ExtraTypeProvider> getExtraTypeProvidersDirect() {
        return this.extraTypeProviders;
    }

    public void setContext(ParseContext parseContext) {
        if (!isEnabled(Feature.DisableCircularReferenceDetect)) {
            this.context = parseContext;
        }
    }

    public void popContext() {
        if (!isEnabled(Feature.DisableCircularReferenceDetect)) {
            this.context = this.context.getParentContext();
            ParseContext[] parseContextArr = this.contextArray;
            int i = this.contextArrayIndex;
            parseContextArr[i - 1] = null;
            this.contextArrayIndex = i - 1;
        }
    }

    public ParseContext setContext(Object obj, Object obj2) {
        if (isEnabled(Feature.DisableCircularReferenceDetect)) {
            return null;
        }
        return setContext(this.context, obj, obj2);
    }

    public ParseContext setContext(ParseContext parseContext, Object obj, Object obj2) {
        if (isEnabled(Feature.DisableCircularReferenceDetect)) {
            return null;
        }
        this.context = new ParseContext(parseContext, obj, obj2);
        addContext(this.context);
        return this.context;
    }

    private void addContext(ParseContext parseContext) {
        int i = this.contextArrayIndex;
        this.contextArrayIndex = i + 1;
        ParseContext[] parseContextArr = this.contextArray;
        if (i >= parseContextArr.length) {
            ParseContext[] parseContextArr2 = new ParseContext[(parseContextArr.length * 3) / 2];
            System.arraycopy(parseContextArr, 0, parseContextArr2, 0, parseContextArr.length);
            this.contextArray = parseContextArr2;
        }
        this.contextArray[i] = parseContext;
    }

    public Object parse() {
        return parse(null);
    }

    public Object parseKey() {
        if (this.lexer.token() != 18) {
            return parse(null);
        }
        String stringVal = this.lexer.stringVal();
        this.lexer.nextToken(16);
        return stringVal;
    }

    public Object parse(Object obj) {
        JSONLexer lexer = getLexer();
        switch (lexer.token()) {
            case 2:
                Number integerValue = lexer.integerValue();
                lexer.nextToken();
                return integerValue;
            case 3:
                Number decimalValue = lexer.decimalValue(isEnabled(Feature.UseBigDecimal));
                lexer.nextToken();
                return decimalValue;
            case 4:
                String stringVal = lexer.stringVal();
                lexer.nextToken(16);
                if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {
                    JSONScanner jSONScanner = new JSONScanner(stringVal);
                    try {
                        if (jSONScanner.scanISO8601DateIfMatch()) {
                            return jSONScanner.getCalendar().getTime();
                        }
                    } finally {
                        jSONScanner.close();
                    }
                }
                return stringVal;
            case 5:
            case 10:
            case 11:
            case 13:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            default:
                throw new JSONException("syntax error, pos " + lexer.getBufferPosition());
            case 6:
                lexer.nextToken();
                return Boolean.TRUE;
            case 7:
                lexer.nextToken();
                return Boolean.FALSE;
            case 8:
                lexer.nextToken();
                return null;
            case 9:
                lexer.nextToken(18);
                if (lexer.token() == 18) {
                    lexer.nextToken(10);
                    accept(10);
                    long longValue = lexer.integerValue().longValue();
                    accept(2);
                    accept(11);
                    return new Date(longValue);
                }
                throw new JSONException("syntax error");
            case 12:
                return parseObject(new JSONObject(isEnabled(Feature.OrderedField)), obj);
            case 14:
                JSONArray jSONArray = new JSONArray();
                parseArray(jSONArray, obj);
                return jSONArray;
            case 20:
                if (lexer.isBlankInput()) {
                    return null;
                }
                throw new JSONException("unterminated json string, pos " + lexer.getBufferPosition());
            case 21:
                lexer.nextToken();
                HashSet hashSet = new HashSet();
                parseArray(hashSet, obj);
                return hashSet;
            case 22:
                lexer.nextToken();
                TreeSet treeSet = new TreeSet();
                parseArray(treeSet, obj);
                return treeSet;
            case 23:
                lexer.nextToken();
                return null;
        }
    }

    public void config(Feature feature, boolean z) {
        getLexer().config(feature, z);
    }

    public boolean isEnabled(Feature feature) {
        return getLexer().isEnabled(feature);
    }

    public JSONLexer getLexer() {
        return this.lexer;
    }

    public final void accept(int i) {
        JSONLexer lexer = getLexer();
        if (lexer.token() == i) {
            lexer.nextToken();
            return;
        }
        throw new JSONException("syntax error, expect " + JSONToken.name(i) + ", actual " + JSONToken.name(lexer.token()));
    }

    public final void accept(int i, int i2) {
        JSONLexer lexer = getLexer();
        if (lexer.token() == i) {
            lexer.nextToken(i2);
            return;
        }
        throw new JSONException("syntax error, expect " + JSONToken.name(i) + ", actual " + JSONToken.name(lexer.token()));
    }

    @Override // java.io.Closeable, java.lang.AutoCloseable
    public void close() {
        JSONLexer lexer = getLexer();
        try {
            if (isEnabled(Feature.AutoCloseSource) && lexer.token() != 20) {
                throw new JSONException("not close json text, token : " + JSONToken.name(lexer.token()));
            }
        } finally {
            lexer.close();
        }
    }

    public void handleResovleTask(Object obj) {
        Object obj2;
        List<ResolveTask> list = this.resolveTaskList;
        if (list != null) {
            int size = list.size();
            for (int i = 0; i < size; i++) {
                ResolveTask resolveTask = this.resolveTaskList.get(i);
                FieldDeserializer fieldDeserializer = resolveTask.getFieldDeserializer();
                if (fieldDeserializer != null) {
                    Object obj3 = null;
                    if (resolveTask.getOwnerContext() != null) {
                        obj3 = resolveTask.getOwnerContext().getObject();
                    }
                    String referenceValue = resolveTask.getReferenceValue();
                    if (referenceValue.startsWith("$")) {
                        obj2 = getObject(referenceValue);
                    } else {
                        obj2 = resolveTask.getContext().getObject();
                    }
                    fieldDeserializer.setValue(obj3, obj2);
                }
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ResolveTask {
        private final ParseContext context;
        private FieldDeserializer fieldDeserializer;
        private ParseContext ownerContext;
        private final String referenceValue;

        public ResolveTask(ParseContext parseContext, String str) {
            this.context = parseContext;
            this.referenceValue = str;
        }

        public ParseContext getContext() {
            return this.context;
        }

        public String getReferenceValue() {
            return this.referenceValue;
        }

        public FieldDeserializer getFieldDeserializer() {
            return this.fieldDeserializer;
        }

        public void setFieldDeserializer(FieldDeserializer fieldDeserializer) {
            this.fieldDeserializer = fieldDeserializer;
        }

        public ParseContext getOwnerContext() {
            return this.ownerContext;
        }

        public void setOwnerContext(ParseContext parseContext) {
            this.ownerContext = parseContext;
        }
    }
}
