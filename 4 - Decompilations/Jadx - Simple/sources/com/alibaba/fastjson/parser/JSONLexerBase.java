package com.alibaba.fastjson.parser;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.util.IOUtils;
import com.facebook.react.fabric.mounting.LayoutMetricsConversions;
import java.io.Closeable;
import java.lang.ref.SoftReference;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public abstract class JSONLexerBase implements JSONLexer, Closeable {
    private static final Map<String, Integer> DEFAULT_KEYWORDS;
    protected static final int INT_MULTMIN_RADIX_TEN = -214748364;
    protected static final int INT_N_MULTMAX_RADIX_TEN = -214748364;
    protected static final long MULTMIN_RADIX_TEN = -922337203685477580L;
    protected static final long N_MULTMAX_RADIX_TEN = -922337203685477580L;
    protected int bp;
    protected char ch;
    protected int eofPos;
    protected boolean hasSpecial;
    protected int np;
    protected int pos;
    protected char[] sbuf;
    protected int sp;
    protected int token;
    private static final ThreadLocal<SoftReference<char[]>> SBUF_REF_LOCAL = new ThreadLocal<>();
    protected static final char[] typeFieldName = ("\"" + JSON.DEFAULT_TYPE_KEY + "\":\"").toCharArray();
    protected static final int[] digits = new int[103];
    protected int features = JSON.DEFAULT_PARSER_FEATURE;
    protected Calendar calendar = null;
    public int matchStat = 0;
    protected Map<String, Integer> keywods = DEFAULT_KEYWORDS;

    public static boolean isWhitespace(char c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == '\f' || c == '\b';
    }

    public abstract String addSymbol(int i, int i2, int i3, SymbolTable symbolTable);

    protected abstract void arrayCopy(int i, char[] cArr, int i2, int i3);

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public abstract byte[] bytesValue();

    protected abstract boolean charArrayCompare(char[] cArr);

    public abstract char charAt(int i);

    protected abstract void copyTo(int i, int i2, char[] cArr);

    public abstract int indexOf(char c, int i);

    public abstract boolean isEOF();

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public abstract char next();

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public abstract String numberString();

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public abstract String stringVal();

    public abstract String subString(int i, int i2);

    static {
        HashMap hashMap = new HashMap();
        hashMap.put("null", 8);
        hashMap.put("new", 9);
        hashMap.put("true", 6);
        hashMap.put("false", 7);
        hashMap.put("undefined", 23);
        DEFAULT_KEYWORDS = hashMap;
        for (int i = 48; i <= 57; i++) {
            digits[i] = i - 48;
        }
        for (int i2 = 97; i2 <= 102; i2++) {
            digits[i2] = (i2 - 97) + 10;
        }
        for (int i3 = 65; i3 <= 70; i3++) {
            digits[i3] = (i3 - 65) + 10;
        }
    }

    protected void lexError(String str, Object... objArr) {
        this.token = 1;
    }

    public JSONLexerBase() {
        SoftReference<char[]> softReference = SBUF_REF_LOCAL.get();
        if (softReference != null) {
            this.sbuf = softReference.get();
            SBUF_REF_LOCAL.set(null);
        }
        if (this.sbuf == null) {
            this.sbuf = new char[64];
        }
    }

    public final int matchStat() {
        return this.matchStat;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void nextToken() {
        this.sp = 0;
        while (true) {
            this.pos = this.bp;
            char c = this.ch;
            if (c == '\"') {
                scanString();
                return;
            } else if (c == ',') {
                next();
                this.token = 16;
                return;
            } else if (c < '0' || c > '9') {
                char c2 = this.ch;
                if (c2 == '-') {
                    scanNumber();
                    return;
                }
                switch (c2) {
                    case '\b':
                    case '\t':
                    case '\n':
                    case '\f':
                    case '\r':
                    case ' ':
                        next();
                    case '\'':
                        if (isEnabled(Feature.AllowSingleQuotes)) {
                            scanStringSingleQuote();
                            return;
                        }
                        throw new JSONException("Feature.AllowSingleQuotes is false");
                    case '(':
                        next();
                        this.token = 10;
                        return;
                    case ')':
                        next();
                        this.token = 11;
                        return;
                    case ':':
                        next();
                        this.token = 17;
                        return;
                    case 'N':
                        scanNULL();
                        return;
                    case 'S':
                        scanSet();
                        return;
                    case 'T':
                        scanTreeSet();
                        return;
                    case '[':
                        next();
                        this.token = 14;
                        return;
                    case ']':
                        next();
                        this.token = 15;
                        return;
                    case 'f':
                        scanFalse();
                        return;
                    case 'n':
                        scanNullOrNew();
                        return;
                    case 't':
                        scanTrue();
                        return;
                    case 'u':
                        scanUndefined();
                        return;
                    case '{':
                        next();
                        this.token = 12;
                        return;
                    case '}':
                        next();
                        this.token = 13;
                        return;
                    default:
                        if (!isEOF()) {
                            lexError("illegal.char", String.valueOf((int) this.ch));
                            next();
                            return;
                        } else if (this.token != 20) {
                            this.token = 20;
                            int i = this.eofPos;
                            this.bp = i;
                            this.pos = i;
                            return;
                        } else {
                            throw new JSONException("EOF error");
                        }
                }
            } else {
                scanNumber();
                return;
            }
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void nextToken(int i) {
        this.sp = 0;
        while (true) {
            if (i == 2) {
                char c = this.ch;
                if (c < '0' || c > '9') {
                    char c2 = this.ch;
                    if (c2 == '\"') {
                        this.pos = this.bp;
                        scanString();
                        return;
                    } else if (c2 == '[') {
                        this.token = 14;
                        next();
                        return;
                    } else if (c2 == '{') {
                        this.token = 12;
                        next();
                        return;
                    }
                } else {
                    this.pos = this.bp;
                    scanNumber();
                    return;
                }
            } else if (i == 4) {
                char c3 = this.ch;
                if (c3 == '\"') {
                    this.pos = this.bp;
                    scanString();
                    return;
                } else if (c3 < '0' || c3 > '9') {
                    char c4 = this.ch;
                    if (c4 == '[') {
                        this.token = 14;
                        next();
                        return;
                    } else if (c4 == '{') {
                        this.token = 12;
                        next();
                        return;
                    }
                } else {
                    this.pos = this.bp;
                    scanNumber();
                    return;
                }
            } else if (i == 12) {
                char c5 = this.ch;
                if (c5 == '{') {
                    this.token = 12;
                    next();
                    return;
                } else if (c5 == '[') {
                    this.token = 14;
                    next();
                    return;
                }
            } else if (i != 18) {
                if (i != 20) {
                    switch (i) {
                        case 14:
                            char c6 = this.ch;
                            if (c6 == '[') {
                                this.token = 14;
                                next();
                                return;
                            } else if (c6 == '{') {
                                this.token = 12;
                                next();
                                return;
                            }
                            break;
                        case 15:
                            if (this.ch == ']') {
                                this.token = 15;
                                next();
                                return;
                            }
                            break;
                        case 16:
                            char c7 = this.ch;
                            if (c7 == ',') {
                                this.token = 16;
                                next();
                                return;
                            } else if (c7 == '}') {
                                this.token = 13;
                                next();
                                return;
                            } else if (c7 == ']') {
                                this.token = 15;
                                next();
                                return;
                            } else if (c7 == 26) {
                                this.token = 20;
                                return;
                            }
                            break;
                    }
                }
                if (this.ch == 26) {
                    this.token = 20;
                    return;
                }
            } else {
                nextIdent();
                return;
            }
            char c8 = this.ch;
            if (c8 == ' ' || c8 == '\n' || c8 == '\r' || c8 == '\t' || c8 == '\f' || c8 == '\b') {
                next();
            } else {
                nextToken();
                return;
            }
        }
    }

    public final void nextIdent() {
        while (isWhitespace(this.ch)) {
            next();
        }
        char c = this.ch;
        if (c == '_' || Character.isLetter(c)) {
            scanIdent();
        } else {
            nextToken();
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void nextTokenWithColon() {
        nextTokenWithChar(':');
    }

    public final void nextTokenWithComma() {
        nextTokenWithChar(':');
    }

    public final void nextTokenWithChar(char c) {
        this.sp = 0;
        while (true) {
            char c2 = this.ch;
            if (c2 == c) {
                next();
                nextToken();
                return;
            } else if (c2 == ' ' || c2 == '\n' || c2 == '\r' || c2 == '\t' || c2 == '\f' || c2 == '\b') {
                next();
            } else {
                throw new JSONException("not match " + c + " - " + this.ch);
            }
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final int token() {
        return this.token;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final String tokenName() {
        return JSONToken.name(this.token);
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final int pos() {
        return this.pos;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final int getBufferPosition() {
        return this.bp;
    }

    public final String stringDefaultValue() {
        if (isEnabled(Feature.InitStringFieldAsEmpty)) {
            return "";
        }
        return null;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final Number integerValue() throws NumberFormatException {
        long j;
        int i;
        long j2;
        boolean z = false;
        if (this.np == -1) {
            this.np = 0;
        }
        int i2 = this.np;
        int i3 = this.sp + i2;
        char c = ' ';
        char charAt = charAt(i3 - 1);
        if (charAt == 'B') {
            i3--;
            c = 'B';
        } else if (charAt == 'L') {
            i3--;
            c = 'L';
        } else if (charAt == 'S') {
            i3--;
            c = 'S';
        }
        if (charAt(this.np) == '-') {
            j = Long.MIN_VALUE;
            i2++;
            z = true;
        } else {
            j = -9223372036854775807L;
        }
        long j3 = -922337203685477580L;
        if (i2 < i3) {
            i = i2 + 1;
            j2 = (long) (-digits[charAt(i2)]);
        } else {
            j2 = 0;
            i = i2;
        }
        while (i < i3) {
            int i4 = i + 1;
            int i5 = digits[charAt(i)];
            if (j2 < j3) {
                return new BigInteger(numberString());
            }
            long j4 = j2 * 10;
            long j5 = (long) i5;
            if (j4 < j + j5) {
                return new BigInteger(numberString());
            }
            j2 = j4 - j5;
            i = i4;
            j3 = -922337203685477580L;
        }
        if (!z) {
            long j6 = -j2;
            if (j6 > 2147483647L || c == 'L') {
                return Long.valueOf(j6);
            }
            if (c == 'S') {
                return Short.valueOf((short) ((int) j6));
            }
            if (c == 'B') {
                return Byte.valueOf((byte) ((int) j6));
            }
            return Integer.valueOf((int) j6);
        } else if (i <= this.np + 1) {
            throw new NumberFormatException(numberString());
        } else if (j2 < -2147483648L || c == 'L') {
            return Long.valueOf(j2);
        } else {
            if (c == 'S') {
                return Short.valueOf((short) ((int) j2));
            }
            if (c == 'B') {
                return Byte.valueOf((byte) ((int) j2));
            }
            return Integer.valueOf((int) j2);
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void nextTokenWithColon(int i) {
        nextTokenWithChar(':');
    }

    public final void nextTokenWithComma(int i) {
        nextTokenWithChar(',');
    }

    public final void nextTokenWithChar(char c, int i) {
        this.sp = 0;
        while (true) {
            char c2 = this.ch;
            if (c2 == c) {
                next();
                while (true) {
                    if (i == 2) {
                        char c3 = this.ch;
                        if (c3 >= '0' && c3 <= '9') {
                            this.pos = this.bp;
                            scanNumber();
                            return;
                        } else if (this.ch == '\"') {
                            this.pos = this.bp;
                            scanString();
                            return;
                        }
                    } else if (i == 4) {
                        char c4 = this.ch;
                        if (c4 == '\"') {
                            this.pos = this.bp;
                            scanString();
                            return;
                        } else if (c4 >= '0' && c4 <= '9') {
                            this.pos = this.bp;
                            scanNumber();
                            return;
                        }
                    } else if (i == 12) {
                        char c5 = this.ch;
                        if (c5 == '{') {
                            this.token = 12;
                            next();
                            return;
                        } else if (c5 == '[') {
                            this.token = 14;
                            next();
                            return;
                        }
                    } else if (i == 14) {
                        char c6 = this.ch;
                        if (c6 == '[') {
                            this.token = 14;
                            next();
                            return;
                        } else if (c6 == '{') {
                            this.token = 12;
                            next();
                            return;
                        }
                    }
                    if (isWhitespace(this.ch)) {
                        next();
                    } else {
                        nextToken();
                        return;
                    }
                }
            } else if (isWhitespace(c2)) {
                next();
            } else {
                throw new JSONException("not match " + i + " - " + this.ch);
            }
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public float floatValue() {
        return Float.parseFloat(numberString());
    }

    public double doubleValue() {
        return Double.parseDouble(numberString());
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public void config(Feature feature, boolean z) {
        this.features = Feature.config(this.features, feature, z);
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final boolean isEnabled(Feature feature) {
        return Feature.isEnabled(this.features, feature);
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final char getCurrent() {
        return this.ch;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final String scanSymbol(SymbolTable symbolTable) {
        skipWhitespace();
        char c = this.ch;
        if (c == '\"') {
            return scanSymbol(symbolTable, '\"');
        }
        if (c == '\'') {
            if (isEnabled(Feature.AllowSingleQuotes)) {
                return scanSymbol(symbolTable, '\'');
            }
            throw new JSONException("syntax error");
        } else if (c == '}') {
            next();
            this.token = 13;
            return null;
        } else if (c == ',') {
            next();
            this.token = 16;
            return null;
        } else if (c == 26) {
            this.token = 20;
            return null;
        } else if (isEnabled(Feature.AllowUnQuotedFieldNames)) {
            return scanSymbolUnQuoted(symbolTable);
        } else {
            throw new JSONException("syntax error");
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final String scanSymbol(SymbolTable symbolTable, char c) {
        String str;
        this.np = this.bp;
        this.sp = 0;
        boolean z = false;
        int i = 0;
        while (true) {
            char next = next();
            if (next == c) {
                this.token = 4;
                if (!z) {
                    int i2 = this.np;
                    str = addSymbol(i2 == -1 ? 0 : i2 + 1, this.sp, i, symbolTable);
                } else {
                    str = symbolTable.addSymbol(this.sbuf, 0, this.sp, i);
                }
                this.sp = 0;
                next();
                return str;
            } else if (next == 26) {
                throw new JSONException("unclosed.str");
            } else if (next == '\\') {
                if (!z) {
                    int i3 = this.sp;
                    char[] cArr = this.sbuf;
                    if (i3 >= cArr.length) {
                        int length = cArr.length * 2;
                        if (i3 <= length) {
                            i3 = length;
                        }
                        char[] cArr2 = new char[i3];
                        char[] cArr3 = this.sbuf;
                        System.arraycopy(cArr3, 0, cArr2, 0, cArr3.length);
                        this.sbuf = cArr2;
                    }
                    arrayCopy(this.np + 1, this.sbuf, 0, this.sp);
                    z = true;
                }
                char next2 = next();
                switch (next2) {
                    case '/':
                        i = (i * 31) + 47;
                        putChar('/');
                        continue;
                    case '0':
                        i = (i * 31) + next2;
                        putChar(0);
                        continue;
                    case '1':
                        i = (i * 31) + next2;
                        putChar(1);
                        continue;
                    case '2':
                        i = (i * 31) + next2;
                        putChar(2);
                        continue;
                    case '3':
                        i = (i * 31) + next2;
                        putChar(3);
                        continue;
                    case '4':
                        i = (i * 31) + next2;
                        putChar(4);
                        continue;
                    case '5':
                        i = (i * 31) + next2;
                        putChar(5);
                        continue;
                    case '6':
                        i = (i * 31) + next2;
                        putChar(6);
                        continue;
                    case '7':
                        i = (i * 31) + next2;
                        putChar(7);
                        continue;
                    default:
                        switch (next2) {
                            case 't':
                                i = (i * 31) + 9;
                                putChar('\t');
                                continue;
                            case 'u':
                                int parseInt = Integer.parseInt(new String(new char[]{next(), next(), next(), next()}), 16);
                                i = (i * 31) + parseInt;
                                putChar((char) parseInt);
                                continue;
                            case 'v':
                                i = (i * 31) + 11;
                                putChar(11);
                                continue;
                            default:
                                switch (next2) {
                                    case '\"':
                                        i = (i * 31) + 34;
                                        putChar('\"');
                                        continue;
                                    case '\'':
                                        i = (i * 31) + 39;
                                        putChar('\'');
                                        continue;
                                    case 'F':
                                    case 'f':
                                        i = (i * 31) + 12;
                                        putChar('\f');
                                        continue;
                                    case '\\':
                                        i = (i * 31) + 92;
                                        putChar('\\');
                                        continue;
                                    case 'b':
                                        i = (i * 31) + 8;
                                        putChar('\b');
                                        continue;
                                    case 'n':
                                        i = (i * 31) + 10;
                                        putChar('\n');
                                        continue;
                                    case 'r':
                                        i = (i * 31) + 13;
                                        putChar('\r');
                                        continue;
                                    case 'x':
                                        char next3 = next();
                                        this.ch = next3;
                                        char next4 = next();
                                        this.ch = next4;
                                        int[] iArr = digits;
                                        char c2 = (char) ((iArr[next3] * 16) + iArr[next4]);
                                        i = (i * 31) + c2;
                                        putChar(c2);
                                        continue;
                                        continue;
                                        continue;
                                    default:
                                        this.ch = next2;
                                        throw new JSONException("unclosed.str.lit");
                                }
                        }
                }
            } else {
                i = (i * 31) + next;
                if (!z) {
                    this.sp++;
                } else {
                    int i4 = this.sp;
                    char[] cArr4 = this.sbuf;
                    if (i4 == cArr4.length) {
                        putChar(next);
                    } else {
                        this.sp = i4 + 1;
                        cArr4[i4] = next;
                    }
                }
            }
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void resetStringPosition() {
        this.sp = 0;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final String scanSymbolUnQuoted(SymbolTable symbolTable) {
        boolean[] zArr = IOUtils.firstIdentifierFlags;
        int i = this.ch;
        if (i >= zArr.length || zArr[i]) {
            boolean[] zArr2 = IOUtils.identifierFlags;
            this.np = this.bp;
            this.sp = 1;
            while (true) {
                char next = next();
                if (next < zArr2.length && !zArr2[next]) {
                    break;
                }
                i = (i * 31) + next;
                this.sp++;
            }
            this.ch = charAt(this.bp);
            this.token = 18;
            if (this.sp == 4 && i == 3392903 && charAt(this.np) == 'n' && charAt(this.np + 1) == 'u' && charAt(this.np + 2) == 'l' && charAt(this.np + 3) == 'l') {
                return null;
            }
            return addSymbol(this.np, this.sp, i, symbolTable);
        }
        throw new JSONException("illegal identifier : " + this.ch);
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void scanString() {
        this.np = this.bp;
        this.hasSpecial = false;
        while (true) {
            char next = next();
            if (next == '\"') {
                this.token = 4;
                this.ch = next();
                return;
            } else if (next == 26) {
                throw new JSONException("unclosed string : " + next);
            } else if (next == '\\') {
                if (!this.hasSpecial) {
                    this.hasSpecial = true;
                    int i = this.sp;
                    char[] cArr = this.sbuf;
                    if (i >= cArr.length) {
                        int length = cArr.length * 2;
                        if (i <= length) {
                            i = length;
                        }
                        char[] cArr2 = new char[i];
                        char[] cArr3 = this.sbuf;
                        System.arraycopy(cArr3, 0, cArr2, 0, cArr3.length);
                        this.sbuf = cArr2;
                    }
                    copyTo(this.np + 1, this.sp, this.sbuf);
                }
                char next2 = next();
                switch (next2) {
                    case '/':
                        putChar('/');
                        continue;
                    case '0':
                        putChar(0);
                        continue;
                    case '1':
                        putChar(1);
                        continue;
                    case '2':
                        putChar(2);
                        continue;
                    case '3':
                        putChar(3);
                        continue;
                    case '4':
                        putChar(4);
                        continue;
                    case '5':
                        putChar(5);
                        continue;
                    case '6':
                        putChar(6);
                        continue;
                    case '7':
                        putChar(7);
                        continue;
                    default:
                        switch (next2) {
                            case 't':
                                putChar('\t');
                                continue;
                            case 'u':
                                putChar((char) Integer.parseInt(new String(new char[]{next(), next(), next(), next()}), 16));
                                continue;
                            case 'v':
                                putChar(11);
                                continue;
                            default:
                                switch (next2) {
                                    case '\"':
                                        putChar('\"');
                                        continue;
                                    case '\'':
                                        putChar('\'');
                                        continue;
                                    case 'F':
                                    case 'f':
                                        putChar('\f');
                                        continue;
                                    case '\\':
                                        putChar('\\');
                                        continue;
                                    case 'b':
                                        putChar('\b');
                                        continue;
                                    case 'n':
                                        putChar('\n');
                                        continue;
                                    case 'r':
                                        putChar('\r');
                                        continue;
                                    case 'x':
                                        char next3 = next();
                                        char next4 = next();
                                        int[] iArr = digits;
                                        putChar((char) ((iArr[next3] * 16) + iArr[next4]));
                                        continue;
                                        continue;
                                        continue;
                                    default:
                                        this.ch = next2;
                                        throw new JSONException("unclosed string : " + next2);
                                }
                        }
                }
            } else if (!this.hasSpecial) {
                this.sp++;
            } else {
                int i2 = this.sp;
                char[] cArr4 = this.sbuf;
                if (i2 == cArr4.length) {
                    putChar(next);
                } else {
                    this.sp = i2 + 1;
                    cArr4[i2] = next;
                }
            }
        }
    }

    public Calendar getCalendar() {
        return this.calendar;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final int intValue() {
        int i;
        int i2;
        boolean z;
        int i3 = 0;
        if (this.np == -1) {
            this.np = 0;
        }
        int i4 = this.np;
        int i5 = this.sp + i4;
        if (charAt(i4) == '-') {
            i2 = i4 + 1;
            z = true;
            i = LayoutMetricsConversions.REACT_CONSTRAINT_UNDEFINED;
        } else {
            i2 = i4;
            z = false;
            i = -2147483647;
        }
        if (i2 < i5) {
            i2++;
            i3 = -digits[charAt(i2)];
        }
        while (i2 < i5) {
            int i6 = i2 + 1;
            char charAt = charAt(i2);
            if (charAt == 'L' || charAt == 'S' || charAt == 'B') {
                i2 = i6;
                break;
            }
            int i7 = digits[charAt];
            if (i3 >= -214748364) {
                int i8 = i3 * 10;
                if (i8 >= i + i7) {
                    i3 = i8 - i7;
                    i2 = i6;
                } else {
                    throw new NumberFormatException(numberString());
                }
            } else {
                throw new NumberFormatException(numberString());
            }
        }
        if (!z) {
            return -i3;
        }
        if (i2 > this.np + 1) {
            return i3;
        }
        throw new NumberFormatException(numberString());
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer, java.io.Closeable, java.lang.AutoCloseable
    public void close() {
        char[] cArr = this.sbuf;
        if (cArr.length <= 8192) {
            SBUF_REF_LOCAL.set(new SoftReference<>(cArr));
        }
        this.sbuf = null;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final boolean isRef() {
        if (this.sp == 4 && charAt(this.np + 1) == '$' && charAt(this.np + 2) == 'r' && charAt(this.np + 3) == 'e' && charAt(this.np + 4) == 'f') {
            return true;
        }
        return false;
    }

    public int scanType(String str) {
        this.matchStat = 0;
        if (!charArrayCompare(typeFieldName)) {
            return -2;
        }
        int length = this.bp + typeFieldName.length;
        int length2 = str.length();
        for (int i = 0; i < length2; i++) {
            if (str.charAt(i) != charAt(length + i)) {
                return -1;
            }
        }
        int i2 = length + length2;
        if (charAt(i2) != '\"') {
            return -1;
        }
        int i3 = i2 + 1;
        this.ch = charAt(i3);
        char c = this.ch;
        if (c == ',') {
            int i4 = i3 + 1;
            this.ch = charAt(i4);
            this.bp = i4;
            this.token = 16;
            return 3;
        }
        if (c == '}') {
            i3++;
            this.ch = charAt(i3);
            char c2 = this.ch;
            if (c2 == ',') {
                this.token = 16;
                i3++;
                this.ch = charAt(i3);
            } else if (c2 == ']') {
                this.token = 15;
                i3++;
                this.ch = charAt(i3);
            } else if (c2 == '}') {
                this.token = 13;
                i3++;
                this.ch = charAt(i3);
            } else if (c2 != 26) {
                return -1;
            } else {
                this.token = 20;
            }
            this.matchStat = 4;
        }
        this.bp = i3;
        return this.matchStat;
    }

    public final boolean matchField(char[] cArr) {
        if (!charArrayCompare(cArr)) {
            return false;
        }
        this.bp += cArr.length;
        this.ch = charAt(this.bp);
        char c = this.ch;
        if (c == '{') {
            next();
            this.token = 12;
            return true;
        } else if (c == '[') {
            next();
            this.token = 14;
            return true;
        } else {
            nextToken();
            return true;
        }
    }

    public String scanFieldString(char[] cArr) {
        boolean z = false;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return stringDefaultValue();
        }
        int length = cArr.length;
        int i = length + 1;
        if (charAt(this.bp + length) != '\"') {
            this.matchStat = -1;
            return stringDefaultValue();
        }
        int indexOf = indexOf('\"', this.bp + cArr.length + 1);
        if (indexOf != -1) {
            int length2 = this.bp + cArr.length + 1;
            String subString = subString(length2, indexOf - length2);
            int length3 = this.bp + cArr.length + 1;
            while (true) {
                if (length3 >= indexOf) {
                    break;
                } else if (charAt(length3) == '\\') {
                    z = true;
                    break;
                } else {
                    length3++;
                }
            }
            if (z) {
                this.matchStat = -1;
                return stringDefaultValue();
            }
            int i2 = this.bp;
            int length4 = i + (indexOf - ((cArr.length + i2) + 1)) + 1;
            int i3 = length4 + 1;
            char charAt = charAt(i2 + length4);
            if (charAt == ',') {
                this.bp += i3 - 1;
                next();
                this.matchStat = 3;
                return subString;
            } else if (charAt == '}') {
                int i4 = i3 + 1;
                char charAt2 = charAt(this.bp + i3);
                if (charAt2 == ',') {
                    this.token = 16;
                    this.bp += i4 - 1;
                    next();
                } else if (charAt2 == ']') {
                    this.token = 15;
                    this.bp += i4 - 1;
                    next();
                } else if (charAt2 == '}') {
                    this.token = 13;
                    this.bp += i4 - 1;
                    next();
                } else if (charAt2 == 26) {
                    this.token = 20;
                    this.bp += i4 - 1;
                    this.ch = 26;
                } else {
                    this.matchStat = -1;
                    return stringDefaultValue();
                }
                this.matchStat = 4;
                return subString;
            } else {
                this.matchStat = -1;
                return stringDefaultValue();
            }
        } else {
            throw new JSONException("unclosed str");
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public String scanString(char c) {
        boolean z = false;
        this.matchStat = 0;
        char charAt = charAt(this.bp + 0);
        if (charAt == 'n') {
            if (charAt(this.bp + 1) != 'u' || charAt(this.bp + 1 + 1) != 'l' || charAt(this.bp + 1 + 2) != 'l') {
                this.matchStat = -1;
                return null;
            } else if (charAt(this.bp + 4) == c) {
                this.bp += 4;
                next();
                this.matchStat = 3;
                return null;
            } else {
                this.matchStat = -1;
                return null;
            }
        } else if (charAt != '\"') {
            this.matchStat = -1;
            return stringDefaultValue();
        } else {
            int i = this.bp + 1;
            int indexOf = indexOf('\"', i);
            if (indexOf != -1) {
                String subString = subString(this.bp + 1, indexOf - i);
                int i2 = this.bp + 1;
                while (true) {
                    if (i2 >= indexOf) {
                        break;
                    } else if (charAt(i2) == '\\') {
                        z = true;
                        break;
                    } else {
                        i2++;
                    }
                }
                if (z) {
                    this.matchStat = -1;
                    return stringDefaultValue();
                }
                int i3 = this.bp;
                int i4 = (indexOf - (i3 + 1)) + 1 + 1;
                int i5 = i4 + 1;
                if (charAt(i3 + i4) == c) {
                    this.bp += i5 - 1;
                    next();
                    this.matchStat = 3;
                    return subString;
                }
                this.matchStat = -1;
                return subString;
            }
            throw new JSONException("unclosed str");
        }
    }

    public String scanFieldSymbol(char[] cArr, SymbolTable symbolTable) {
        int i = 0;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return null;
        }
        int length = cArr.length;
        int i2 = length + 1;
        if (charAt(this.bp + length) != '\"') {
            this.matchStat = -1;
            return null;
        }
        while (true) {
            int i3 = i2 + 1;
            char charAt = charAt(this.bp + i2);
            if (charAt == '\"') {
                int i4 = this.bp;
                int length2 = cArr.length + i4 + 1;
                String addSymbol = addSymbol(length2, ((i4 + i3) - length2) - 1, i, symbolTable);
                int i5 = i3 + 1;
                char charAt2 = charAt(this.bp + i3);
                if (charAt2 == ',') {
                    this.bp += i5 - 1;
                    next();
                    this.matchStat = 3;
                    return addSymbol;
                } else if (charAt2 == '}') {
                    int i6 = i5 + 1;
                    char charAt3 = charAt(this.bp + i5);
                    if (charAt3 == ',') {
                        this.token = 16;
                        this.bp += i6 - 1;
                        next();
                    } else if (charAt3 == ']') {
                        this.token = 15;
                        this.bp += i6 - 1;
                        next();
                    } else if (charAt3 == '}') {
                        this.token = 13;
                        this.bp += i6 - 1;
                        next();
                    } else if (charAt3 == 26) {
                        this.token = 20;
                        this.bp += i6 - 1;
                        this.ch = 26;
                    } else {
                        this.matchStat = -1;
                        return null;
                    }
                    this.matchStat = 4;
                    return addSymbol;
                } else {
                    this.matchStat = -1;
                    return null;
                }
            } else {
                i = (i * 31) + charAt;
                if (charAt == '\\') {
                    this.matchStat = -1;
                    return null;
                }
                i2 = i3;
            }
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public Enum<?> scanEnum(Class<?> cls, SymbolTable symbolTable, char c) {
        String scanSymbolWithSeperator = scanSymbolWithSeperator(symbolTable, c);
        if (scanSymbolWithSeperator == null) {
            return null;
        }
        return Enum.valueOf(cls, scanSymbolWithSeperator);
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public String scanSymbolWithSeperator(SymbolTable symbolTable, char c) {
        this.matchStat = 0;
        char charAt = charAt(this.bp + 0);
        if (charAt == 'n') {
            if (charAt(this.bp + 1) != 'u' || charAt(this.bp + 1 + 1) != 'l' || charAt(this.bp + 1 + 2) != 'l') {
                this.matchStat = -1;
                return null;
            } else if (charAt(this.bp + 4) == c) {
                this.bp += 4;
                next();
                this.matchStat = 3;
                return null;
            } else {
                this.matchStat = -1;
                return null;
            }
        } else if (charAt != '\"') {
            this.matchStat = -1;
            return null;
        } else {
            int i = 1;
            int i2 = 0;
            while (true) {
                int i3 = i + 1;
                char charAt2 = charAt(this.bp + i);
                if (charAt2 == '\"') {
                    int i4 = this.bp;
                    int i5 = i4 + 0 + 1;
                    String addSymbol = addSymbol(i5, ((i4 + i3) - i5) - 1, i2, symbolTable);
                    int i6 = i3 + 1;
                    if (charAt(this.bp + i3) == c) {
                        this.bp += i6 - 1;
                        next();
                        this.matchStat = 3;
                        return addSymbol;
                    }
                    this.matchStat = -1;
                    return addSymbol;
                }
                i2 = (i2 * 31) + charAt2;
                if (charAt2 == '\\') {
                    this.matchStat = -1;
                    return null;
                }
                i = i3;
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:25:0x005e, code lost:
        r8 = r7.bp;
        r0 = r0 + r8;
        r9.add(subString(r0, ((r8 + r5) - r0) - 1));
        r0 = r5 + 1;
        r8 = charAt(r7.bp + r5);
     */
    /* JADX WARN: Code restructure failed: missing block: B:26:0x0077, code lost:
        if (r8 != ',') goto L_0x0084;
     */
    /* JADX WARN: Code restructure failed: missing block: B:27:0x0079, code lost:
        r0 = r0 + 1;
        r8 = charAt(r7.bp + r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x0086, code lost:
        if (r8 != ']') goto L_0x00fc;
     */
    /* JADX WARN: Code restructure failed: missing block: B:30:0x0088, code lost:
        r5 = r0 + 1;
        r8 = charAt(r7.bp + r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x0091, code lost:
        if (r8 != ',') goto L_0x00a1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x0093, code lost:
        r7.bp += r5 - 1;
        next();
        r7.matchStat = 3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:33:0x00a0, code lost:
        return r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:35:0x00a3, code lost:
        if (r8 != '}') goto L_0x00f9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:36:0x00a5, code lost:
        r6 = r5 + 1;
        r8 = charAt(r7.bp + r5);
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x00ae, code lost:
        if (r8 != ',') goto L_0x00bf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:38:0x00b0, code lost:
        r7.token = 16;
        r7.bp += r6 - 1;
        next();
     */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x00bf, code lost:
        if (r8 != ']') goto L_0x00d0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:40:0x00c1, code lost:
        r7.token = 15;
        r7.bp += r6 - 1;
        next();
     */
    /* JADX WARN: Code restructure failed: missing block: B:41:0x00d0, code lost:
        if (r8 != '}') goto L_0x00e1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:42:0x00d2, code lost:
        r7.token = 13;
        r7.bp += r6 - 1;
        next();
     */
    /* JADX WARN: Code restructure failed: missing block: B:44:0x00e3, code lost:
        if (r8 != 26) goto L_0x00f6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:45:0x00e5, code lost:
        r7.bp += r6 - 1;
        r7.token = 20;
        r7.ch = 26;
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x00f2, code lost:
        r7.matchStat = 4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:47:0x00f5, code lost:
        return r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:48:0x00f6, code lost:
        r7.matchStat = -1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x00f8, code lost:
        return null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:50:0x00f9, code lost:
        r7.matchStat = -1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x00fb, code lost:
        return null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x00fc, code lost:
        r7.matchStat = -1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x00fe, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public java.util.Collection<java.lang.String> scanFieldStringArray(char[] r8, java.lang.Class<?> r9) {
        /*
        // Method dump skipped, instructions count: 277
        */
        throw new UnsupportedOperationException("Method not decompiled: com.alibaba.fastjson.parser.JSONLexerBase.scanFieldStringArray(char[], java.lang.Class):java.util.Collection");
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public Collection<String> scanStringArray(Class<?> cls, char c) {
        Collection<String> collection;
        int i;
        char c2;
        this.matchStat = 0;
        if (cls.isAssignableFrom(HashSet.class)) {
            collection = new HashSet<>();
        } else if (cls.isAssignableFrom(ArrayList.class)) {
            collection = new ArrayList<>();
        } else {
            try {
                collection = (Collection) cls.newInstance();
            } catch (Exception e) {
                throw new JSONException(e.getMessage(), e);
            }
        }
        char charAt = charAt(this.bp + 0);
        if (charAt == 'n') {
            if (charAt(this.bp + 1) != 'u' || charAt(this.bp + 1 + 1) != 'l' || charAt(this.bp + 1 + 2) != 'l') {
                this.matchStat = -1;
                return null;
            } else if (charAt(this.bp + 4) == c) {
                this.bp += 4;
                next();
                this.matchStat = 3;
                return null;
            } else {
                this.matchStat = -1;
                return null;
            }
        } else if (charAt != '[') {
            this.matchStat = -1;
            return null;
        } else {
            char charAt2 = charAt(this.bp + 1);
            int i2 = 2;
            while (true) {
                if (charAt2 == 'n' && charAt(this.bp + i2) == 'u' && charAt(this.bp + i2 + 1) == 'l' && charAt(this.bp + i2 + 2) == 'l') {
                    int i3 = i2 + 3;
                    i = i3 + 1;
                    c2 = charAt(this.bp + i3);
                } else if (charAt2 != '\"') {
                    this.matchStat = -1;
                    return null;
                } else {
                    int i4 = i2;
                    while (true) {
                        int i5 = i4 + 1;
                        char charAt3 = charAt(this.bp + i4);
                        if (charAt3 == '\"') {
                            int i6 = this.bp;
                            int i7 = i2 + i6;
                            collection.add(subString(i7, ((i6 + i5) - i7) - 1));
                            i = i5 + 1;
                            c2 = charAt(this.bp + i5);
                            break;
                        } else if (charAt3 == '\\') {
                            this.matchStat = -1;
                            return null;
                        } else {
                            i4 = i5;
                        }
                    }
                }
                if (c2 == ',') {
                    i2 = i + 1;
                    charAt2 = charAt(this.bp + i);
                } else if (c2 == ']') {
                    int i8 = i + 1;
                    if (charAt(this.bp + i) == c) {
                        this.bp += i8 - 1;
                        next();
                        this.matchStat = 3;
                        return collection;
                    }
                    this.matchStat = -1;
                    return collection;
                } else {
                    this.matchStat = -1;
                    return null;
                }
            }
        }
    }

    public int scanFieldInt(char[] cArr) {
        int i;
        char charAt;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return 0;
        }
        int length = cArr.length;
        int i2 = length + 1;
        char charAt2 = charAt(this.bp + length);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0;
        }
        int i3 = digits[charAt2];
        while (true) {
            i = i2 + 1;
            charAt = charAt(this.bp + i2);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            i3 = (i3 * 10) + digits[charAt];
            i2 = i;
        }
        if (charAt == '.') {
            this.matchStat = -1;
            return 0;
        } else if (i3 < 0) {
            this.matchStat = -1;
            return 0;
        } else if (charAt == ',') {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return i3;
        } else if (charAt == '}') {
            int i4 = i + 1;
            char charAt3 = charAt(this.bp + i);
            if (charAt3 == ',') {
                this.token = 16;
                this.bp += i4 - 1;
                next();
            } else if (charAt3 == ']') {
                this.token = 15;
                this.bp += i4 - 1;
                next();
            } else if (charAt3 == '}') {
                this.token = 13;
                this.bp += i4 - 1;
                next();
            } else if (charAt3 == 26) {
                this.token = 20;
                this.bp += i4 - 1;
                this.ch = 26;
            } else {
                this.matchStat = -1;
                return 0;
            }
            this.matchStat = 4;
            return i3;
        } else {
            this.matchStat = -1;
            return 0;
        }
    }

    public boolean scanBoolean(char c) {
        boolean z = false;
        this.matchStat = 0;
        char charAt = charAt(this.bp + 0);
        int i = 5;
        if (charAt == 't') {
            if (charAt(this.bp + 1) == 'r' && charAt(this.bp + 1 + 1) == 'u' && charAt(this.bp + 1 + 2) == 'e') {
                charAt = charAt(this.bp + 4);
                z = true;
            } else {
                this.matchStat = -1;
                return false;
            }
        } else if (charAt != 'f') {
            i = 1;
        } else if (charAt(this.bp + 1) == 'a' && charAt(this.bp + 1 + 1) == 'l' && charAt(this.bp + 1 + 2) == 's' && charAt(this.bp + 1 + 3) == 'e') {
            charAt = charAt(this.bp + 5);
            i = 6;
        } else {
            this.matchStat = -1;
            return false;
        }
        if (charAt == c) {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            return z;
        }
        this.matchStat = -1;
        return z;
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public int scanInt(char c) {
        int i;
        char charAt;
        this.matchStat = 0;
        char charAt2 = charAt(this.bp + 0);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0;
        }
        int i2 = digits[charAt2];
        int i3 = 1;
        while (true) {
            i = i3 + 1;
            charAt = charAt(this.bp + i3);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            i2 = (i2 * 10) + digits[charAt];
            i3 = i;
        }
        if (charAt == '.') {
            this.matchStat = -1;
            return 0;
        } else if (i2 < 0) {
            this.matchStat = -1;
            return 0;
        } else if (charAt == c) {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return i2;
        } else {
            this.matchStat = -1;
            return i2;
        }
    }

    public boolean scanFieldBoolean(char[] cArr) {
        boolean z;
        int i;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return false;
        }
        int length = cArr.length;
        int i2 = length + 1;
        char charAt = charAt(this.bp + length);
        if (charAt == 't') {
            int i3 = i2 + 1;
            if (charAt(this.bp + i2) != 'r') {
                this.matchStat = -1;
                return false;
            }
            int i4 = i3 + 1;
            if (charAt(this.bp + i3) != 'u') {
                this.matchStat = -1;
                return false;
            }
            i = i4 + 1;
            if (charAt(this.bp + i4) != 'e') {
                this.matchStat = -1;
                return false;
            }
            z = true;
        } else if (charAt == 'f') {
            int i5 = i2 + 1;
            if (charAt(this.bp + i2) != 'a') {
                this.matchStat = -1;
                return false;
            }
            int i6 = i5 + 1;
            if (charAt(this.bp + i5) != 'l') {
                this.matchStat = -1;
                return false;
            }
            int i7 = i6 + 1;
            if (charAt(this.bp + i6) != 's') {
                this.matchStat = -1;
                return false;
            }
            int i8 = i7 + 1;
            if (charAt(this.bp + i7) != 'e') {
                this.matchStat = -1;
                return false;
            }
            i = i8;
            z = false;
        } else {
            this.matchStat = -1;
            return false;
        }
        int i9 = i + 1;
        char charAt2 = charAt(this.bp + i);
        if (charAt2 == ',') {
            this.bp += i9 - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return z;
        } else if (charAt2 == '}') {
            int i10 = i9 + 1;
            char charAt3 = charAt(this.bp + i9);
            if (charAt3 == ',') {
                this.token = 16;
                this.bp += i10 - 1;
                next();
            } else if (charAt3 == ']') {
                this.token = 15;
                this.bp += i10 - 1;
                next();
            } else if (charAt3 == '}') {
                this.token = 13;
                this.bp += i10 - 1;
                next();
            } else if (charAt3 == 26) {
                this.token = 20;
                this.bp += i10 - 1;
                this.ch = 26;
            } else {
                this.matchStat = -1;
                return false;
            }
            this.matchStat = 4;
            return z;
        } else {
            this.matchStat = -1;
            return false;
        }
    }

    public long scanFieldLong(char[] cArr) {
        int i;
        char charAt;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return 0;
        }
        int length = cArr.length;
        int i2 = length + 1;
        char charAt2 = charAt(this.bp + length);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0;
        }
        long j = (long) digits[charAt2];
        while (true) {
            i = i2 + 1;
            charAt = charAt(this.bp + i2);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            j = (j * 10) + ((long) digits[charAt]);
            i2 = i;
        }
        if (charAt == '.') {
            this.matchStat = -1;
            return 0;
        } else if (j < 0) {
            this.matchStat = -1;
            return 0;
        } else if (charAt == ',') {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return j;
        } else if (charAt == '}') {
            int i3 = i + 1;
            char charAt3 = charAt(this.bp + i);
            if (charAt3 == ',') {
                this.token = 16;
                this.bp += i3 - 1;
                next();
            } else if (charAt3 == ']') {
                this.token = 15;
                this.bp += i3 - 1;
                next();
            } else if (charAt3 == '}') {
                this.token = 13;
                this.bp += i3 - 1;
                next();
            } else if (charAt3 == 26) {
                this.token = 20;
                this.bp += i3 - 1;
                this.ch = 26;
            } else {
                this.matchStat = -1;
                return 0;
            }
            this.matchStat = 4;
            return j;
        } else {
            this.matchStat = -1;
            return 0;
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public long scanLong(char c) {
        int i;
        char charAt;
        this.matchStat = 0;
        char charAt2 = charAt(this.bp + 0);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0;
        }
        long j = (long) digits[charAt2];
        int i2 = 1;
        while (true) {
            i = i2 + 1;
            charAt = charAt(this.bp + i2);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            j = (j * 10) + ((long) digits[charAt]);
            i2 = i;
        }
        if (charAt == '.') {
            this.matchStat = -1;
            return 0;
        } else if (j < 0) {
            this.matchStat = -1;
            return 0;
        } else if (charAt == c) {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return j;
        } else {
            this.matchStat = -1;
            return j;
        }
    }

    public final float scanFieldFloat(char[] cArr) {
        int i;
        char charAt;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return 0.0f;
        }
        int length = cArr.length;
        int i2 = length + 1;
        char charAt2 = charAt(this.bp + length);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0.0f;
        }
        while (true) {
            i = i2 + 1;
            charAt = charAt(this.bp + i2);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            i2 = i;
        }
        if (charAt == '.') {
            int i3 = i + 1;
            char charAt3 = charAt(this.bp + i);
            if (charAt3 >= '0' && charAt3 <= '9') {
                while (true) {
                    i = i3 + 1;
                    charAt = charAt(this.bp + i3);
                    if (charAt < '0' || charAt > '9') {
                        break;
                    }
                    i3 = i;
                }
            } else {
                this.matchStat = -1;
                return 0.0f;
            }
        }
        int i4 = this.bp;
        int length2 = cArr.length + i4;
        float parseFloat = Float.parseFloat(subString(length2, ((i4 + i) - length2) - 1));
        if (charAt == ',') {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return parseFloat;
        } else if (charAt == '}') {
            int i5 = i + 1;
            char charAt4 = charAt(this.bp + i);
            if (charAt4 == ',') {
                this.token = 16;
                this.bp += i5 - 1;
                next();
            } else if (charAt4 == ']') {
                this.token = 15;
                this.bp += i5 - 1;
                next();
            } else if (charAt4 == '}') {
                this.token = 13;
                this.bp += i5 - 1;
                next();
            } else if (charAt4 == 26) {
                this.bp += i5 - 1;
                this.token = 20;
                this.ch = 26;
            } else {
                this.matchStat = -1;
                return 0.0f;
            }
            this.matchStat = 4;
            return parseFloat;
        } else {
            this.matchStat = -1;
            return 0.0f;
        }
    }

    public final float scanFloat(char c) {
        int i;
        char charAt;
        int i2;
        char c2;
        this.matchStat = 0;
        char charAt2 = charAt(this.bp + 0);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0.0f;
        }
        int i3 = 1;
        while (true) {
            i = i3 + 1;
            charAt = charAt(this.bp + i3);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            i3 = i;
        }
        if (charAt == '.') {
            int i4 = i + 1;
            char charAt3 = charAt(this.bp + i);
            if (charAt3 >= '0' && charAt3 <= '9') {
                while (true) {
                    i2 = i4 + 1;
                    c2 = charAt(this.bp + i4);
                    if (c2 < '0' || c2 > '9') {
                        break;
                    }
                    i4 = i2;
                }
            } else {
                this.matchStat = -1;
                return 0.0f;
            }
        } else {
            c2 = charAt;
            i2 = i;
        }
        int i5 = this.bp;
        float parseFloat = Float.parseFloat(subString(i5, ((i5 + i2) - i5) - 1));
        if (c2 == c) {
            this.bp += i2 - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return parseFloat;
        }
        this.matchStat = -1;
        return parseFloat;
    }

    public final double scanFieldDouble(char[] cArr) {
        int i;
        char charAt;
        this.matchStat = 0;
        if (!charArrayCompare(cArr)) {
            this.matchStat = -2;
            return 0.0d;
        }
        int length = cArr.length;
        int i2 = length + 1;
        char charAt2 = charAt(this.bp + length);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0.0d;
        }
        while (true) {
            i = i2 + 1;
            charAt = charAt(this.bp + i2);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            i2 = i;
        }
        if (charAt == '.') {
            int i3 = i + 1;
            char charAt3 = charAt(this.bp + i);
            if (charAt3 >= '0' && charAt3 <= '9') {
                while (true) {
                    i = i3 + 1;
                    charAt = charAt(this.bp + i3);
                    if (charAt < '0' || charAt > '9') {
                        break;
                    }
                    i3 = i;
                }
            } else {
                this.matchStat = -1;
                return 0.0d;
            }
        }
        if (charAt == 'e' || charAt == 'E') {
            int i4 = i + 1;
            charAt = charAt(this.bp + i);
            if (charAt == '+' || charAt == '-') {
                i = i4 + 1;
                charAt = charAt(this.bp + i4);
            } else {
                i = i4;
            }
            while (charAt >= '0' && charAt <= '9') {
                i++;
                charAt = charAt(this.bp + i);
            }
        }
        int i5 = this.bp;
        int length2 = cArr.length + i5;
        double parseDouble = Double.parseDouble(subString(length2, ((i5 + i) - length2) - 1));
        if (charAt == ',') {
            this.bp += i - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return parseDouble;
        } else if (charAt == '}') {
            int i6 = i + 1;
            char charAt4 = charAt(this.bp + i);
            if (charAt4 == ',') {
                this.token = 16;
                this.bp += i6 - 1;
                next();
            } else if (charAt4 == ']') {
                this.token = 15;
                this.bp += i6 - 1;
                next();
            } else if (charAt4 == '}') {
                this.token = 13;
                this.bp += i6 - 1;
                next();
            } else if (charAt4 == 26) {
                this.token = 20;
                this.bp += i6 - 1;
                this.ch = 26;
            } else {
                this.matchStat = -1;
                return 0.0d;
            }
            this.matchStat = 4;
            return parseDouble;
        } else {
            this.matchStat = -1;
            return 0.0d;
        }
    }

    public final double scanFieldDouble(char c) {
        int i;
        char charAt;
        int i2;
        this.matchStat = 0;
        char charAt2 = charAt(this.bp + 0);
        if (charAt2 < '0' || charAt2 > '9') {
            this.matchStat = -1;
            return 0.0d;
        }
        int i3 = 1;
        while (true) {
            i = i3 + 1;
            charAt = charAt(this.bp + i3);
            if (charAt < '0' || charAt > '9') {
                break;
            }
            i3 = i;
        }
        if (charAt == '.') {
            int i4 = i + 1;
            char charAt3 = charAt(this.bp + i);
            if (charAt3 >= '0' && charAt3 <= '9') {
                while (true) {
                    i2 = i4 + 1;
                    charAt = charAt(this.bp + i4);
                    if (charAt < '0' || charAt > '9') {
                        break;
                    }
                    i4 = i2;
                }
            } else {
                this.matchStat = -1;
                return 0.0d;
            }
        } else {
            i2 = i;
        }
        if (charAt == 'e' || charAt == 'E') {
            int i5 = i2 + 1;
            char charAt4 = charAt(this.bp + i2);
            if (charAt4 == '+' || charAt4 == '-') {
                i2 = i5 + 1;
                charAt = charAt(this.bp + i5);
            } else {
                i2 = i5;
                charAt = charAt4;
            }
            while (charAt >= '0' && charAt <= '9') {
                i2++;
                charAt = charAt(this.bp + i2);
            }
        }
        int i6 = this.bp;
        double parseDouble = Double.parseDouble(subString(i6, ((i6 + i2) - i6) - 1));
        if (charAt == c) {
            this.bp += i2 - 1;
            next();
            this.matchStat = 3;
            this.token = 16;
            return parseDouble;
        }
        this.matchStat = -1;
        return parseDouble;
    }

    public final void scanTrue() {
        if (this.ch == 't') {
            next();
            if (this.ch == 'r') {
                next();
                if (this.ch == 'u') {
                    next();
                    if (this.ch == 'e') {
                        next();
                        char c = this.ch;
                        if (c == ' ' || c == ',' || c == '}' || c == ']' || c == '\n' || c == '\r' || c == '\t' || c == 26 || c == '\f' || c == '\b' || c == ':') {
                            this.token = 6;
                            return;
                        }
                        throw new JSONException("scan true error");
                    }
                    throw new JSONException("error parse true");
                }
                throw new JSONException("error parse true");
            }
            throw new JSONException("error parse true");
        }
        throw new JSONException("error parse true");
    }

    public final void scanTreeSet() {
        if (this.ch == 'T') {
            next();
            if (this.ch == 'r') {
                next();
                if (this.ch == 'e') {
                    next();
                    if (this.ch == 'e') {
                        next();
                        if (this.ch == 'S') {
                            next();
                            if (this.ch == 'e') {
                                next();
                                if (this.ch == 't') {
                                    next();
                                    char c = this.ch;
                                    if (c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == '\f' || c == '\b' || c == '[' || c == '(') {
                                        this.token = 22;
                                        return;
                                    }
                                    throw new JSONException("scan set error");
                                }
                                throw new JSONException("error parse true");
                            }
                            throw new JSONException("error parse true");
                        }
                        throw new JSONException("error parse true");
                    }
                    throw new JSONException("error parse true");
                }
                throw new JSONException("error parse true");
            }
            throw new JSONException("error parse true");
        }
        throw new JSONException("error parse true");
    }

    public final void scanNullOrNew() {
        if (this.ch == 'n') {
            next();
            char c = this.ch;
            if (c == 'u') {
                next();
                if (this.ch == 'l') {
                    next();
                    if (this.ch == 'l') {
                        next();
                        char c2 = this.ch;
                        if (c2 == ' ' || c2 == ',' || c2 == '}' || c2 == ']' || c2 == '\n' || c2 == '\r' || c2 == '\t' || c2 == 26 || c2 == '\f' || c2 == '\b') {
                            this.token = 8;
                            return;
                        }
                        throw new JSONException("scan true error");
                    }
                    throw new JSONException("error parse l");
                }
                throw new JSONException("error parse l");
            } else if (c == 'e') {
                next();
                if (this.ch == 'w') {
                    next();
                    char c3 = this.ch;
                    if (c3 == ' ' || c3 == ',' || c3 == '}' || c3 == ']' || c3 == '\n' || c3 == '\r' || c3 == '\t' || c3 == 26 || c3 == '\f' || c3 == '\b') {
                        this.token = 9;
                        return;
                    }
                    throw new JSONException("scan true error");
                }
                throw new JSONException("error parse w");
            } else {
                throw new JSONException("error parse e");
            }
        } else {
            throw new JSONException("error parse null or new");
        }
    }

    public final void scanNULL() {
        if (this.ch == 'N') {
            next();
            if (this.ch == 'U') {
                next();
                if (this.ch == 'L') {
                    next();
                    if (this.ch == 'L') {
                        next();
                        char c = this.ch;
                        if (c == ' ' || c == ',' || c == '}' || c == ']' || c == '\n' || c == '\r' || c == '\t' || c == 26 || c == '\f' || c == '\b') {
                            this.token = 8;
                            return;
                        }
                        throw new JSONException("scan NULL error");
                    }
                    throw new JSONException("error parse NULL");
                }
                throw new JSONException("error parse U");
            }
            return;
        }
        throw new JSONException("error parse NULL");
    }

    public final void scanUndefined() {
        if (this.ch == 'u') {
            next();
            if (this.ch == 'n') {
                next();
                if (this.ch == 'd') {
                    next();
                    if (this.ch == 'e') {
                        next();
                        if (this.ch == 'f') {
                            next();
                            if (this.ch == 'i') {
                                next();
                                if (this.ch == 'n') {
                                    next();
                                    if (this.ch == 'e') {
                                        next();
                                        if (this.ch == 'd') {
                                            next();
                                            char c = this.ch;
                                            if (c == ' ' || c == ',' || c == '}' || c == ']' || c == '\n' || c == '\r' || c == '\t' || c == 26 || c == '\f' || c == '\b') {
                                                this.token = 23;
                                                return;
                                            }
                                            throw new JSONException("scan false error");
                                        }
                                        throw new JSONException("error parse false");
                                    }
                                    throw new JSONException("error parse false");
                                }
                                throw new JSONException("error parse false");
                            }
                            throw new JSONException("error parse false");
                        }
                        throw new JSONException("error parse false");
                    }
                    throw new JSONException("error parse false");
                }
                throw new JSONException("error parse false");
            }
            throw new JSONException("error parse false");
        }
        throw new JSONException("error parse false");
    }

    public final void scanFalse() {
        if (this.ch == 'f') {
            next();
            if (this.ch == 'a') {
                next();
                if (this.ch == 'l') {
                    next();
                    if (this.ch == 's') {
                        next();
                        if (this.ch == 'e') {
                            next();
                            char c = this.ch;
                            if (c == ' ' || c == ',' || c == '}' || c == ']' || c == '\n' || c == '\r' || c == '\t' || c == 26 || c == '\f' || c == '\b' || c == ':') {
                                this.token = 7;
                                return;
                            }
                            throw new JSONException("scan false error");
                        }
                        throw new JSONException("error parse false");
                    }
                    throw new JSONException("error parse false");
                }
                throw new JSONException("error parse false");
            }
            throw new JSONException("error parse false");
        }
        throw new JSONException("error parse false");
    }

    public final void scanIdent() {
        this.np = this.bp - 1;
        this.hasSpecial = false;
        do {
            this.sp++;
            next();
        } while (Character.isLetterOrDigit(this.ch));
        Integer num = this.keywods.get(stringVal());
        if (num != null) {
            this.token = num.intValue();
        } else {
            this.token = 18;
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final boolean isBlankInput() {
        int i = 0;
        while (true) {
            char charAt = charAt(i);
            if (charAt == 26) {
                return true;
            }
            if (!isWhitespace(charAt)) {
                return false;
            }
            i++;
        }
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final void skipWhitespace() {
        while (this.ch < IOUtils.whitespaceFlags.length && IOUtils.whitespaceFlags[this.ch]) {
            next();
        }
    }

    private void scanStringSingleQuote() {
        this.np = this.bp;
        this.hasSpecial = false;
        while (true) {
            char next = next();
            if (next == '\'') {
                this.token = 4;
                next();
                return;
            } else if (next == 26) {
                throw new JSONException("unclosed single-quote string");
            } else if (next == '\\') {
                if (!this.hasSpecial) {
                    this.hasSpecial = true;
                    int i = this.sp;
                    char[] cArr = this.sbuf;
                    if (i > cArr.length) {
                        char[] cArr2 = new char[i * 2];
                        System.arraycopy(cArr, 0, cArr2, 0, cArr.length);
                        this.sbuf = cArr2;
                    }
                    copyTo(this.np + 1, this.sp, this.sbuf);
                }
                char next2 = next();
                switch (next2) {
                    case '/':
                        putChar('/');
                        continue;
                    case '0':
                        putChar(0);
                        continue;
                    case '1':
                        putChar(1);
                        continue;
                    case '2':
                        putChar(2);
                        continue;
                    case '3':
                        putChar(3);
                        continue;
                    case '4':
                        putChar(4);
                        continue;
                    case '5':
                        putChar(5);
                        continue;
                    case '6':
                        putChar(6);
                        continue;
                    case '7':
                        putChar(7);
                        continue;
                    default:
                        switch (next2) {
                            case 't':
                                putChar('\t');
                                continue;
                            case 'u':
                                putChar((char) Integer.parseInt(new String(new char[]{next(), next(), next(), next()}), 16));
                                continue;
                            case 'v':
                                putChar(11);
                                continue;
                            default:
                                switch (next2) {
                                    case '\"':
                                        putChar('\"');
                                        continue;
                                    case '\'':
                                        putChar('\'');
                                        continue;
                                    case 'F':
                                    case 'f':
                                        putChar('\f');
                                        continue;
                                    case '\\':
                                        putChar('\\');
                                        continue;
                                    case 'b':
                                        putChar('\b');
                                        continue;
                                    case 'n':
                                        putChar('\n');
                                        continue;
                                    case 'r':
                                        putChar('\r');
                                        continue;
                                    case 'x':
                                        char next3 = next();
                                        char next4 = next();
                                        int[] iArr = digits;
                                        putChar((char) ((iArr[next3] * 16) + iArr[next4]));
                                        continue;
                                        continue;
                                        continue;
                                    default:
                                        this.ch = next2;
                                        throw new JSONException("unclosed single-quote string");
                                }
                        }
                }
            } else if (!this.hasSpecial) {
                this.sp++;
            } else {
                int i2 = this.sp;
                char[] cArr3 = this.sbuf;
                if (i2 == cArr3.length) {
                    putChar(next);
                } else {
                    this.sp = i2 + 1;
                    cArr3[i2] = next;
                }
            }
        }
    }

    public final void scanSet() {
        if (this.ch == 'S') {
            next();
            if (this.ch == 'e') {
                next();
                if (this.ch == 't') {
                    next();
                    char c = this.ch;
                    if (c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == '\f' || c == '\b' || c == '[' || c == '(') {
                        this.token = 21;
                        return;
                    }
                    throw new JSONException("scan set error");
                }
                throw new JSONException("error parse true");
            }
            throw new JSONException("error parse true");
        }
        throw new JSONException("error parse true");
    }

    protected final void putChar(char c) {
        int i = this.sp;
        char[] cArr = this.sbuf;
        if (i == cArr.length) {
            char[] cArr2 = new char[cArr.length * 2];
            System.arraycopy(cArr, 0, cArr2, 0, cArr.length);
            this.sbuf = cArr2;
        }
        char[] cArr3 = this.sbuf;
        int i2 = this.sp;
        this.sp = i2 + 1;
        cArr3[i2] = c;
    }

    /* JADX WARN: Removed duplicated region for block: B:50:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00ce  */
    @Override // com.alibaba.fastjson.parser.JSONLexer
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final void scanNumber() {
        /*
        // Method dump skipped, instructions count: 210
        */
        throw new UnsupportedOperationException("Method not decompiled: com.alibaba.fastjson.parser.JSONLexerBase.scanNumber():void");
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final long longValue() throws NumberFormatException {
        long j;
        long j2;
        boolean z = false;
        if (this.np == -1) {
            this.np = 0;
        }
        int i = this.np;
        int i2 = this.sp + i;
        if (charAt(i) == '-') {
            j = Long.MIN_VALUE;
            i++;
            z = true;
        } else {
            j = -9223372036854775807L;
        }
        if (i < i2) {
            i++;
            j2 = (long) (-digits[charAt(i)]);
        } else {
            j2 = 0;
        }
        while (i < i2) {
            int i3 = i + 1;
            char charAt = charAt(i);
            if (charAt == 'L' || charAt == 'S' || charAt == 'B') {
                i = i3;
                break;
            }
            int i4 = digits[charAt];
            if (j2 >= -922337203685477580L) {
                long j3 = j2 * 10;
                long j4 = (long) i4;
                if (j3 >= j + j4) {
                    j2 = j3 - j4;
                    i = i3;
                } else {
                    throw new NumberFormatException(numberString());
                }
            } else {
                throw new NumberFormatException(numberString());
            }
        }
        if (!z) {
            return -j2;
        }
        if (i > this.np + 1) {
            return j2;
        }
        throw new NumberFormatException(numberString());
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final Number decimalValue(boolean z) {
        char charAt = charAt((this.np + this.sp) - 1);
        if (charAt == 'F') {
            return Float.valueOf(Float.parseFloat(numberString()));
        }
        if (charAt == 'D') {
            return Double.valueOf(Double.parseDouble(numberString()));
        }
        if (z) {
            return decimalValue();
        }
        return Double.valueOf(doubleValue());
    }

    @Override // com.alibaba.fastjson.parser.JSONLexer
    public final BigDecimal decimalValue() {
        return new BigDecimal(numberString());
    }
}
