package com.alibaba.fastjson;

import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.TypeUtils;
import com.jd.lib.unification.album.utils.Const;
import java.io.Closeable;
import java.io.Reader;
import java.lang.reflect.Type;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class JSONReader implements Closeable {
    private JSONStreamContext context;
    private final DefaultJSONParser parser;

    public JSONReader(Reader reader) {
        this(new JSONReaderScanner(reader));
    }

    public JSONReader(JSONLexer jSONLexer) {
        this(new DefaultJSONParser(jSONLexer));
    }

    public JSONReader(DefaultJSONParser defaultJSONParser) {
        this.parser = defaultJSONParser;
    }

    public void config(Feature feature, boolean z) {
        this.parser.config(feature, z);
    }

    public void startObject() {
        if (this.context == null) {
            this.context = new JSONStreamContext(null, 1001);
        } else {
            startStructure();
            this.context = new JSONStreamContext(this.context, 1001);
        }
        this.parser.accept(12, 18);
    }

    public void endObject() {
        this.parser.accept(13);
        endStructure();
    }

    public void startArray() {
        if (this.context == null) {
            this.context = new JSONStreamContext(null, Const.OPEN_VIDEO_EDITOR_REQUEST_CODE);
        } else {
            startStructure();
            this.context = new JSONStreamContext(this.context, Const.OPEN_VIDEO_EDITOR_REQUEST_CODE);
        }
        this.parser.accept(14);
    }

    public void endArray() {
        this.parser.accept(15);
        endStructure();
    }

    private void startStructure() {
        switch (this.context.getState()) {
            case 1001:
            case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                return;
            case Const.PICTURE_CLICK_REQUEST_CODE:
                this.parser.accept(17);
                return;
            case Const.PREVIEW_CLICK_REQUEST_CODE:
            case Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE:
                this.parser.accept(16);
                return;
            default:
                throw new JSONException("illegal state : " + this.context.getState());
        }
    }

    private void endStructure() {
        int i;
        this.context = this.context.getParent();
        JSONStreamContext jSONStreamContext = this.context;
        if (jSONStreamContext != null) {
            switch (jSONStreamContext.getState()) {
                case 1001:
                case Const.PREVIEW_CLICK_REQUEST_CODE:
                    i = Const.PICTURE_CLICK_REQUEST_CODE;
                    break;
                case Const.PICTURE_CLICK_REQUEST_CODE:
                    i = Const.PREVIEW_CLICK_REQUEST_CODE;
                    break;
                case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                    i = Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE;
                    break;
                default:
                    i = -1;
                    break;
            }
            if (i != -1) {
                this.context.setState(i);
            }
        }
    }

    public boolean hasNext() {
        if (this.context != null) {
            int i = this.parser.getLexer().token();
            int state = this.context.getState();
            switch (state) {
                case 1001:
                case Const.PREVIEW_CLICK_REQUEST_CODE:
                    if (i != 13) {
                        return true;
                    }
                    return false;
                case Const.PICTURE_CLICK_REQUEST_CODE:
                default:
                    throw new JSONException("illegal state : " + state);
                case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                case Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE:
                    if (i != 15) {
                        return true;
                    }
                    return false;
            }
        } else {
            throw new JSONException("context is null");
        }
    }

    @Override // java.io.Closeable, java.lang.AutoCloseable
    public void close() {
        IOUtils.close(this.parser);
    }

    public Integer readInteger() {
        Object obj;
        if (this.context == null) {
            obj = this.parser.parse();
        } else {
            readBefore();
            obj = this.parser.parse();
            readAfter();
        }
        return TypeUtils.castToInt(obj);
    }

    public Long readLong() {
        Object obj;
        if (this.context == null) {
            obj = this.parser.parse();
        } else {
            readBefore();
            obj = this.parser.parse();
            readAfter();
        }
        return TypeUtils.castToLong(obj);
    }

    public String readString() {
        Object obj;
        if (this.context == null) {
            obj = this.parser.parse();
        } else {
            readBefore();
            obj = this.parser.parse();
            readAfter();
        }
        return TypeUtils.castToString(obj);
    }

    public <T> T readObject(TypeReference<T> typeReference) {
        return (T) readObject(typeReference.getType());
    }

    public <T> T readObject(Type type) {
        if (this.context == null) {
            return (T) this.parser.parseObject(type);
        }
        readBefore();
        T t = (T) this.parser.parseObject(type);
        readAfter();
        return t;
    }

    public <T> T readObject(Class<T> cls) {
        if (this.context == null) {
            return (T) this.parser.parseObject((Class<Object>) cls);
        }
        readBefore();
        T t = (T) this.parser.parseObject((Class<Object>) cls);
        readAfter();
        return t;
    }

    public void readObject(Object obj) {
        if (this.context == null) {
            this.parser.parseObject(obj);
            return;
        }
        readBefore();
        this.parser.parseObject(obj);
        readAfter();
    }

    public Object readObject() {
        Object obj;
        if (this.context == null) {
            return this.parser.parse();
        }
        readBefore();
        int state = this.context.getState();
        if (state == 1001 || state == 1003) {
            obj = this.parser.parseKey();
        } else {
            obj = this.parser.parse();
        }
        readAfter();
        return obj;
    }

    public Object readObject(Map map) {
        if (this.context == null) {
            return this.parser.parseObject(map);
        }
        readBefore();
        Object parseObject = this.parser.parseObject(map);
        readAfter();
        return parseObject;
    }

    private void readBefore() {
        int state = this.context.getState();
        switch (state) {
            case 1001:
            case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                return;
            case Const.PICTURE_CLICK_REQUEST_CODE:
                this.parser.accept(17);
                return;
            case Const.PREVIEW_CLICK_REQUEST_CODE:
                this.parser.accept(16, 18);
                return;
            case Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE:
                this.parser.accept(16);
                return;
            default:
                throw new JSONException("illegal state : " + state);
        }
    }

    private void readAfter() {
        int state = this.context.getState();
        int i = Const.PICTURE_CLICK_REQUEST_CODE;
        switch (state) {
            case 1001:
            case Const.PREVIEW_CLICK_REQUEST_CODE:
                break;
            case Const.PICTURE_CLICK_REQUEST_CODE:
                i = Const.PREVIEW_CLICK_REQUEST_CODE;
                break;
            case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                i = Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE;
                break;
            case Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE:
                i = -1;
                break;
            default:
                throw new JSONException("illegal state : " + state);
        }
        if (i != -1) {
            this.context.setState(i);
        }
    }
}
