package com.huawei.hms.framework.network.grs.c;

import android.content.Context;
import android.os.SystemClock;
import android.text.TextUtils;
import com.huawei.hms.framework.common.Logger;
import com.huawei.hms.framework.network.grs.GrsBaseInfo;
import com.huawei.hms.framework.network.grs.a.a;
import com.huawei.hms.framework.network.grs.b.b;
import com.huawei.hms.framework.network.grs.c.b.c;
import com.huawei.hms.framework.network.grs.d.d;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.json.JSONArray;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class d implements a {
    private static final String a;
    private GrsBaseInfo b;
    private Context c;
    private a d;
    private e e;
    private c k;
    private ArrayList<Future<e>> f = new ArrayList<>();
    private ArrayList<e> g = new ArrayList<>();
    private JSONArray h = new JSONArray();
    private ArrayList<String> i = new ArrayList<>();
    private ArrayList<String> j = new ArrayList<>();
    private long l = 1;

    public d(GrsBaseInfo grsBaseInfo, Context context, a aVar) {
        this.b = grsBaseInfo;
        this.c = context;
        this.d = aVar;
        b();
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x0087 A[LOOP:0: B:3:0x0004->B:33:0x0087, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x007f A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private com.huawei.hms.framework.network.grs.c.e a(java.util.concurrent.ExecutorService r13, java.util.ArrayList<java.lang.String> r14, java.lang.String r15) {
        /*
            r12 = this;
            r0 = 0
            r1 = 0
            r9 = r1
            r1 = 0
        L_0x0004:
            int r2 = r14.size()
            if (r1 >= r2) goto L_0x008b
            java.lang.Object r2 = r14.get(r1)
            r3 = r2
            java.lang.String r3 = (java.lang.String) r3
            boolean r2 = android.text.TextUtils.isEmpty(r3)
            r10 = 1
            if (r2 != 0) goto L_0x007c
            com.huawei.hms.framework.network.grs.c.b r11 = new com.huawei.hms.framework.network.grs.c.b
            android.content.Context r6 = r12.c
            com.huawei.hms.framework.network.grs.GrsBaseInfo r8 = r12.b
            r2 = r11
            r4 = r1
            r5 = r12
            r7 = r15
            r2.<init>(r3, r4, r5, r6, r7, r8)
            java.util.concurrent.Callable r2 = r11.f()
            java.util.concurrent.Future r2 = r13.submit(r2)
            java.util.ArrayList<java.util.concurrent.Future<com.huawei.hms.framework.network.grs.c.e>> r3 = r12.f
            r3.add(r2)
            long r3 = r12.l     // Catch: CancellationException -> 0x0072, ExecutionException -> 0x0066, InterruptedException -> 0x005b, TimeoutException -> 0x0052
            java.util.concurrent.TimeUnit r5 = java.util.concurrent.TimeUnit.SECONDS     // Catch: CancellationException -> 0x0072, ExecutionException -> 0x0066, InterruptedException -> 0x005b, TimeoutException -> 0x0052
            java.lang.Object r2 = r2.get(r3, r5)     // Catch: CancellationException -> 0x0072, ExecutionException -> 0x0066, InterruptedException -> 0x005b, TimeoutException -> 0x0052
            com.huawei.hms.framework.network.grs.c.e r2 = (com.huawei.hms.framework.network.grs.c.e) r2     // Catch: CancellationException -> 0x0072, ExecutionException -> 0x0066, InterruptedException -> 0x005b, TimeoutException -> 0x0052
            if (r2 == 0) goto L_0x0050
            boolean r3 = r2.m()     // Catch: CancellationException -> 0x0073, ExecutionException -> 0x004e, InterruptedException -> 0x004c, TimeoutException -> 0x0053
            if (r3 == 0) goto L_0x0050
            java.lang.String r3 = com.huawei.hms.framework.network.grs.c.d.a     // Catch: CancellationException -> 0x0073, ExecutionException -> 0x004e, InterruptedException -> 0x004c, TimeoutException -> 0x0053
            java.lang.String r4 = "grs request return body is not null and is OK."
            com.huawei.hms.framework.common.Logger.i(r3, r4)     // Catch: CancellationException -> 0x0073, ExecutionException -> 0x004e, InterruptedException -> 0x004c, TimeoutException -> 0x0053
            goto L_0x007a
        L_0x004c:
            r3 = move-exception
            goto L_0x005e
        L_0x004e:
            r3 = move-exception
            goto L_0x0069
        L_0x0050:
            r10 = 0
            goto L_0x007a
        L_0x0052:
            r2 = r9
        L_0x0053:
            java.lang.String r3 = com.huawei.hms.framework.network.grs.c.d.a
            java.lang.String r4 = "the wait timed out"
            com.huawei.hms.framework.common.Logger.w(r3, r4)
            goto L_0x0070
        L_0x005b:
            r2 = move-exception
            r3 = r2
            r2 = r9
        L_0x005e:
            java.lang.String r4 = com.huawei.hms.framework.network.grs.c.d.a
            java.lang.String r5 = "the current thread was interrupted while waiting"
            com.huawei.hms.framework.common.Logger.w(r4, r5, r3)
            goto L_0x007a
        L_0x0066:
            r2 = move-exception
            r3 = r2
            r2 = r9
        L_0x0069:
            java.lang.String r4 = com.huawei.hms.framework.network.grs.c.d.a
            java.lang.String r5 = "the computation threw an ExecutionException"
            com.huawei.hms.framework.common.Logger.w(r4, r5, r3)
        L_0x0070:
            r9 = r2
            goto L_0x007c
        L_0x0072:
            r2 = r9
        L_0x0073:
            java.lang.String r3 = com.huawei.hms.framework.network.grs.c.d.a
            java.lang.String r4 = "{requestServer} the computation was cancelled"
            com.huawei.hms.framework.common.Logger.i(r3, r4)
        L_0x007a:
            r9 = r2
            goto L_0x007d
        L_0x007c:
            r10 = 0
        L_0x007d:
            if (r10 == 0) goto L_0x0087
            java.lang.String r13 = com.huawei.hms.framework.network.grs.c.d.a
            java.lang.String r14 = "needBreak is true so need break current circulation"
            com.huawei.hms.framework.common.Logger.v(r13, r14)
            goto L_0x008b
        L_0x0087:
            int r1 = r1 + 1
            goto L_0x0004
        L_0x008b:
            com.huawei.hms.framework.network.grs.c.e r13 = r12.b(r9)
            return r13
        */
        throw new UnsupportedOperationException("Method not decompiled: com.huawei.hms.framework.network.grs.c.d.a(java.util.concurrent.ExecutorService, java.util.ArrayList, java.lang.String):com.huawei.hms.framework.network.grs.c.e");
    }

    private e b(e eVar) {
        String str;
        String str2;
        Throwable e;
        int size = this.f.size();
        for (int i = 0; i < size && (eVar == null || !eVar.m()); i++) {
            try {
                eVar = this.f.get(i).get(40000, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e2) {
                e = e2;
                str2 = a;
                str = "{checkResponse} when check result, find InterruptedException, check others";
                Logger.w(str2, str, e);
            } catch (CancellationException unused) {
                Logger.i(a, "{checkResponse} when check result, find CancellationException, check others");
            } catch (ExecutionException e3) {
                e = e3;
                str2 = a;
                str = "{checkResponse} when check result, find ExecutionException, check others";
                Logger.w(str2, str, e);
            } catch (TimeoutException unused2) {
                Logger.w(a, "{checkResponse} when check result, find TimeoutException, cancel current request task");
                if (!this.f.get(i).isCancelled()) {
                    this.f.get(i).cancel(true);
                }
            }
        }
        return eVar;
    }

    public e b(ExecutorService executorService, String str) {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        e a2 = a(executorService, this.j, str);
        int b = a2 == null ? 0 : a2.b();
        Logger.v(a, "use 2.0 interface return http's code isï¼š{%s}", Integer.valueOf(b));
        if (b == 404 || b == 401) {
            if (!TextUtils.isEmpty(c()) || !TextUtils.isEmpty(this.b.getAppName())) {
                this.f.clear();
                Logger.i(a, "this env has not deploy new interface,so use old interface.");
                a2 = a(executorService, this.i, str);
            } else {
                Logger.i(a, "request grs server use 1.0 API must set appName,please check.");
                return null;
            }
        }
        g.a(this.g, SystemClock.elapsedRealtime() - elapsedRealtime, this.h, this.c);
        return a2;
    }

    private void b() {
        c a2 = com.huawei.hms.framework.network.grs.c.a.a.a(this.c);
        if (a2 == null) {
            Logger.w(a, "g*s***_se****er_conf*** maybe has a big error");
            return;
        }
        a(a2);
        List<String> a3 = a2.a();
        if (a3 == null || a3.size() <= 0) {
            Logger.v(a, "maybe grs_base_url config with [],please check.");
        } else if (a3.size() <= 10) {
            String c = a2.c();
            String b = a2.b();
            if (a3.size() > 0) {
                for (String str : a3) {
                    if (!str.startsWith("https://")) {
                        Logger.w(a, "grs server just support https scheme url,please check.");
                    } else {
                        StringBuilder sb = new StringBuilder();
                        sb.append(str);
                        Locale locale = Locale.ROOT;
                        Object[] objArr = new Object[1];
                        objArr[0] = TextUtils.isEmpty(c()) ? this.b.getAppName() : c();
                        sb.append(String.format(locale, c, objArr));
                        String grsReqParamJoint = this.b.getGrsReqParamJoint(false, false, "1.0", this.c);
                        if (!TextUtils.isEmpty(grsReqParamJoint)) {
                            sb.append("?");
                            sb.append(grsReqParamJoint);
                        }
                        this.i.add(sb.toString());
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(str);
                        sb2.append(b);
                        String grsReqParamJoint2 = this.b.getGrsReqParamJoint(false, false, c(), this.c);
                        if (!TextUtils.isEmpty(grsReqParamJoint2)) {
                            sb2.append("?");
                            sb2.append(grsReqParamJoint2);
                        }
                        this.j.add(sb2.toString());
                    }
                }
            }
            Logger.v(a, "request to GRS server url is{%s} and {%s}", this.i, this.j);
        } else {
            throw new IllegalArgumentException("grs_base_url's count is larger than MAX value 10");
        }
    }

    private String c() {
        com.huawei.hms.framework.network.grs.local.model.a a2 = b.a(this.c.getPackageName(), this.b).a();
        if (a2 == null) {
            return "";
        }
        String a3 = a2.a();
        Logger.v(a, "get appName from local assets is{%s}", a3);
        return a3;
    }

    public c a() {
        return this.k;
    }

    public e a(ExecutorService executorService, String str) {
        String str2;
        Throwable e;
        String str3;
        if (this.i == null || this.j == null) {
            return null;
        }
        try {
            c a2 = a();
            return (e) executorService.submit(new c(this, executorService, str)).get((long) (a2 != null ? a2.d() : 10), TimeUnit.SECONDS);
        } catch (InterruptedException e2) {
            e = e2;
            str2 = a;
            str3 = "{submitExcutorTaskWithTimeout} the current thread was interrupted while waiting";
            Logger.w(str2, str3, e);
            return null;
        } catch (CancellationException unused) {
            Logger.i(a, "{submitExcutorTaskWithTimeout} the computation was cancelled");
            return null;
        } catch (ExecutionException e3) {
            e = e3;
            str2 = a;
            str3 = "{submitExcutorTaskWithTimeout} the computation threw an ExecutionException";
            Logger.w(str2, str3, e);
            return null;
        } catch (TimeoutException unused2) {
            Logger.w(a, "{submitExcutorTaskWithTimeout} the wait timed out");
            return null;
        } catch (Exception e4) {
            e = e4;
            str2 = a;
            str3 = "{submitExcutorTaskWithTimeout} catch Exception";
            Logger.w(str2, str3, e);
            return null;
        }
    }

    public void a(c cVar) {
        this.k = cVar;
    }

    @Override // com.huawei.hms.framework.network.grs.c.a
    public synchronized void a(e eVar) {
        this.g.add(eVar);
        e eVar2 = this.e;
        if (eVar2 == null || !eVar2.m()) {
            if (eVar.l()) {
                Logger.i(a, "GRS server open 503 limiting strategy.");
                com.huawei.hms.framework.network.grs.d.d.a(this.b.getGrsParasKey(false, true, this.c), new d.a(eVar.j(), SystemClock.elapsedRealtime()));
            } else if (!eVar.m()) {
                Logger.v(a, "grsResponseResult has exception so need return");
            } else {
                this.e = eVar;
                this.d.a(this.b, this.e, this.c);
                for (int i = 0; i < this.f.size(); i++) {
                    if (!this.i.get(i).equals(eVar.k()) && !this.j.get(i).equals(eVar.k()) && !this.f.get(i).isCancelled()) {
                        Logger.i(a, "future cancel");
                        this.f.get(i).cancel(true);
                    }
                }
            }
        } else {
            Logger.v(a, "grsResponseResult is ok");
        }
    }
}
