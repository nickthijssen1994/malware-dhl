package com.huawei.hms.support.api.push.pushselfshow.prepare;

import android.annotation.TargetApi;
import android.app.Notification;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.text.TextUtils;
import com.huawei.hms.android.HwBuildEx;
import com.huawei.hms.support.api.push.pushselfshow.entity.PushSelfShowMessage;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.huawei.hms.support.api.push.pushselfshow.utils.ResourceLoader;
import com.huawei.hms.support.log.HMSLog;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class NotificationIconUtil {
    public static final int ICON_RES_SIZE = 3;
    public static final int INDEX_DRAWABLE = 1;
    public static final int INDEX_RESNAME = 2;
    public static final String SPLIT_CHAR = "/";
    public static final String TAG = "PushSelfShowLog";

    public static Bitmap buildLeftIcon(Context context, PushSelfShowMessage pushSelfShowMessage) {
        if (context == null || pushSelfShowMessage == null) {
            return null;
        }
        try {
            if (HwBuildEx.VERSION.EMUI_SDK_INT >= 11) {
                HMSLog.i("PushSelfShowLog", "huawei phone, and emui5.0, need not show large icon.");
                return null;
            } else if ("com.huawei.android.pushagent".equals(pushSelfShowMessage.getDispPkgName())) {
                return null;
            } else {
                StringBuilder sb = new StringBuilder();
                sb.append("get left bitmap from ");
                sb.append(pushSelfShowMessage.getDispPkgName());
                HMSLog.i("PushSelfShowLog", sb.toString());
                return ((BitmapDrawable) context.getPackageManager().getApplicationIcon(pushSelfShowMessage.getDispPkgName())).getBitmap();
            }
        } catch (PackageManager.NameNotFoundException e) {
            HMSLog.e("PushSelfShowLog", "" + e.toString(), e);
            return null;
        } catch (Exception e2) {
            HMSLog.e("PushSelfShowLog", "" + e2.toString(), e2);
            return null;
        }
    }

    public static int getDefaultSmallIconId(Context context) {
        int i = context.getApplicationInfo().icon;
        if (i != 0) {
            return i;
        }
        int identifier = context.getResources().getIdentifier("btn_star_big_on", "drawable", "android");
        HMSLog.d("PushSelfShowLog", "icon is btn_star_big_on ");
        if (identifier != 0) {
            return identifier;
        }
        HMSLog.d("PushSelfShowLog", "icon is sym_def_app_icon ");
        return 17301651;
    }

    public static int getSmallIconId(Context context, PushSelfShowMessage pushSelfShowMessage) {
        int i = 0;
        if (context == null || pushSelfShowMessage == null) {
            HMSLog.i("PushSelfShowLog", "enter getSmallIconId, context or msg is null");
            return 0;
        }
        if (!TextUtils.isEmpty(pushSelfShowMessage.getIcon())) {
            String[] split = pushSelfShowMessage.getIcon().split("/");
            if (split.length == 3) {
                i = ResourceLoader.loadResourceId(context, split[1], split[2]);
            }
        }
        if (i == 0) {
            i = ResourceLoader.loadDrawableResourceIdByMetaDataName(context, PushSelfShowConstant.HMS_DEFAULT_NOTI_ICON);
        }
        return i != 0 ? i : getDefaultSmallIconId(context);
    }

    @TargetApi(23)
    public static void setSmallIcon(Context context, Notification.Builder builder, PushSelfShowMessage pushSelfShowMessage) {
        if (context == null || builder == null || pushSelfShowMessage == null) {
            HMSLog.e("PushSelfShowLog", "msg is null");
        } else {
            builder.setSmallIcon(getSmallIconId(context, pushSelfShowMessage));
        }
    }
}
