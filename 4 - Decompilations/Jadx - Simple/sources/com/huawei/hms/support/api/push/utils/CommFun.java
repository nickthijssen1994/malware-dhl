package com.huawei.hms.support.api.push.utils;

import android.content.Context;
import android.content.pm.PackageManager;
import android.text.TextUtils;
import com.huawei.agconnect.config.AGConnectServicesConfig;
import com.huawei.hms.android.HwBuildEx;
import com.huawei.hms.support.log.HMSLog;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public abstract class CommFun {
    public static final int EMUI_8_0_1 = 15;
    public static final int EMUI_9_1 = 19;
    public static final int PROFILE_NC_MIN_VERSION = 110001400;
    public static final String TAG = "CommFun";
    public static final Object LOCK = new Object();
    public static int existFrameworkPush = -1;

    public static boolean checkFrameworkPushExist(Context context) {
        HMSLog.d(TAG, "existFrameworkPush:" + existFrameworkPush);
        try {
            File file = new File("/system/framework/hwpush.jar");
            if (isCustExistHwPush()) {
                HMSLog.d(TAG, "push jarFile is exist");
                return true;
            } else if (!file.isFile()) {
                return false;
            } else {
                HMSLog.d(TAG, "push jarFile is exist");
                return true;
            }
        } catch (Exception e) {
            HMSLog.e(TAG, "get Apk version faild ,Exception e= " + e.toString());
            return false;
        }
    }

    public static String getApkVersionName(Context context) {
        try {
            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;
        } catch (PackageManager.NameNotFoundException unused) {
            HMSLog.d(TAG, "package not exist");
            return "0.0";
        } catch (Exception e) {
            HMSLog.e(TAG, "getApkVersionName error" + e.getMessage());
            return "0.0";
        }
    }

    public static long getNCVersionCode(Context context) {
        try {
            return (long) context.getPackageManager().getPackageInfo("com.huawei.android.pushagent", 0).versionCode;
        } catch (Exception unused) {
            HMSLog.e(TAG, "get nc versionCode error");
            return -1;
        }
    }

    public static String getProjectId(Context context) {
        return AGConnectServicesConfig.fromContext(context).getString("client/project_id");
    }

    public static boolean isCustExistHwPush() {
        try {
            Class<?> cls = Class.forName("huawei.cust.HwCfgFilePolicy");
            int intValue = ((Integer) cls.getDeclaredField("CUST_TYPE_CONFIG").get(cls)).intValue();
            Method declaredMethod = cls.getDeclaredMethod("getCfgFile", String.class, Integer.TYPE);
            Object[] objArr = new Object[2];
            objArr[0] = "jars/hwpush.jar";
            objArr[1] = Integer.valueOf(intValue);
            File file = (File) declaredMethod.invoke(cls, objArr);
            if (file != null && file.exists()) {
                StringBuilder sb = new StringBuilder();
                sb.append("get push cust File path is ");
                sb.append(file.getCanonicalPath());
                HMSLog.d(TAG, sb.toString());
                return true;
            }
        } catch (IOException unused) {
            HMSLog.e(TAG, "check jarFile exist but get not path");
        } catch (ClassNotFoundException unused2) {
            HMSLog.e(TAG, "HwCfgFilePolicy ClassNotFoundException");
        } catch (IllegalAccessException unused3) {
            HMSLog.e(TAG, "check cust exist push IllegalAccessException.");
        } catch (IllegalArgumentException unused4) {
            HMSLog.e(TAG, "check cust exist push IllegalArgumentException.");
        } catch (NoSuchFieldException unused5) {
            HMSLog.e(TAG, "check cust exist push NoSuchFieldException.");
        } catch (NoSuchMethodException unused6) {
            HMSLog.e(TAG, "check cust exist push NoSuchMethodException.");
        } catch (SecurityException unused7) {
            HMSLog.e(TAG, "check cust exist push SecurityException.");
        } catch (InvocationTargetException unused8) {
            HMSLog.e(TAG, "check cust exist push InvocationTargetException.");
        }
        return false;
    }

    public static boolean isEmui10Plus() {
        return HwBuildEx.VERSION.EMUI_SDK_INT >= 21;
    }

    public static boolean isEmui8Plus() {
        return HwBuildEx.VERSION.EMUI_SDK_INT >= 15;
    }

    public static boolean isEmui91Below() {
        return HwBuildEx.VERSION.EMUI_SDK_INT < 19;
    }

    public static boolean isFrameworkPushExist(Context context) {
        HMSLog.d(TAG, "existFrameworkPush:" + existFrameworkPush);
        synchronized (LOCK) {
            boolean z = false;
            if (-1 != existFrameworkPush) {
                if (1 == existFrameworkPush) {
                    z = true;
                }
                return z;
            }
            if (checkFrameworkPushExist(context)) {
                existFrameworkPush = 1;
            } else {
                existFrameworkPush = 0;
            }
            if (1 == existFrameworkPush) {
                return true;
            }
            return false;
        }
    }

    public static boolean isInstalled(Context context, String str) {
        if (context != null && !TextUtils.isEmpty(str)) {
            try {
                if (context.getPackageManager().getApplicationInfo(str, 0) == null) {
                    return false;
                }
                StringBuilder sb = new StringBuilder();
                sb.append(str);
                sb.append(" is installed");
                HMSLog.d(TAG, sb.toString());
                return true;
            } catch (PackageManager.NameNotFoundException unused) {
            }
        }
        return false;
    }

    public static boolean isOldMsg(JSONObject jSONObject, JSONObject jSONObject2, String str) {
        return jSONObject == null || (TextUtils.isEmpty(str) && jSONObject2 == null);
    }
}
