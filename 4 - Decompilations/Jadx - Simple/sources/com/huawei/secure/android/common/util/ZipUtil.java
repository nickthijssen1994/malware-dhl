package com.huawei.secure.android.common.util;

import android.text.TextUtils;
import android.util.Log;
import com.facebook.common.statfs.StatFsHelper;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.zip.ZipInputStream;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ZipUtil {
    private static final int A = 4096;
    private static final String B = "../";
    private static final String C = "..\\";
    private static final String TAG = "ZipUtil";
    private static final int y = 104857600;
    private static final int z = 100;

    @Deprecated
    public static boolean unZip(String str, String str2, boolean z2) throws SecurityCommonException {
        return unZip(str, str2, StatFsHelper.DEFAULT_DISK_RED_LEVEL_IN_BYTES, 100, z2);
    }

    /* JADX WARN: Removed duplicated region for block: B:70:0x013d  */
    @java.lang.Deprecated
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static boolean unZip(java.lang.String r16, java.lang.String r17, long r18, int r20, boolean r21) throws com.huawei.secure.android.common.util.SecurityCommonException {
        /*
        // Method dump skipped, instructions count: 330
        */
        throw new UnsupportedOperationException("Method not decompiled: com.huawei.secure.android.common.util.ZipUtil.unZip(java.lang.String, java.lang.String, long, int, boolean):boolean");
    }

    public static List<File> unZipNew(String str, String str2, boolean z2) throws SecurityCommonException {
        return unZipNew(str, str2, StatFsHelper.DEFAULT_DISK_RED_LEVEL_IN_BYTES, 100, z2);
    }

    public static List<File> unZipNew(String str, String str2, long j, int i, boolean z2) throws SecurityCommonException {
        if (!a(str, str2, j, i)) {
            return null;
        }
        if (str2.endsWith(File.separator) && str2.length() > File.separator.length()) {
            str2 = str2.substring(0, str2.length() - File.separator.length());
        }
        return a(f(str), f(str2), j, z2);
    }

    /* JADX WARN: Code restructure failed: missing block: B:58:0x00fa, code lost:
        if (r3 == false) goto L_0x00fc;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0130  */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v2, types: [java.io.Closeable] */
    /* JADX WARN: Type inference failed for: r6v3 */
    /* JADX WARN: Type inference failed for: r6v4, types: [java.io.Closeable, java.util.zip.ZipFile] */
    /* JADX WARN: Unknown variable types count: 1 */
    @android.annotation.SuppressLint({"NewApi"})
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static java.util.List<java.io.File> a(java.io.File r16, java.io.File r17, long r18, boolean r20) {
        /*
        // Method dump skipped, instructions count: 309
        */
        throw new UnsupportedOperationException("Method not decompiled: com.huawei.secure.android.common.util.ZipUtil.a(java.io.File, java.io.File, long, boolean):java.util.List");
    }

    private static String d(String str) {
        if (TextUtils.isEmpty(str)) {
            return str;
        }
        int lastIndexOf = str.lastIndexOf(File.separator);
        return lastIndexOf == -1 ? str : str.substring(lastIndexOf + 1);
    }

    private static boolean a(File file) {
        if (file == null) {
            return false;
        }
        if (file.exists()) {
            return file.isFile();
        }
        if (!b(file.getParentFile())) {
            return false;
        }
        try {
            return file.createNewFile();
        } catch (IOException unused) {
            Log.e(TAG, "createOrExistsFile IOException ");
            return false;
        }
    }

    private static void e(String str) {
        if (!TextUtils.isEmpty(str) && h(str)) {
            Log.e(TAG, "IllegalArgumentException--path is not a standard path");
            throw new IllegalArgumentException("path is not a standard path");
        }
    }

    private static boolean b(File file) {
        return file != null && (!file.exists() ? file.mkdirs() : file.isDirectory());
    }

    private static File f(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        return g(str);
    }

    private static File g(String str) {
        e(str);
        return new File(str);
    }

    /* JADX WARN: Removed duplicated region for block: B:7:0x0015 A[Catch: IOException -> 0x0053, all -> 0x0050, TryCatch #6 {IOException -> 0x0053, all -> 0x0050, blocks: (B:4:0x0007, B:5:0x000e, B:7:0x0015, B:12:0x0031, B:14:0x003b), top: B:39:0x0007 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static boolean a(java.lang.String r10, long r11, int r13) {
        /*
            r0 = 0
            r1 = 0
            java.util.zip.ZipFile r2 = new java.util.zip.ZipFile     // Catch: IOException -> 0x0058, all -> 0x0056
            r2.<init>(r10)     // Catch: IOException -> 0x0058, all -> 0x0056
            java.util.Enumeration r10 = r2.entries()     // Catch: IOException -> 0x0053, all -> 0x0050
            r3 = 0
            r1 = 0
        L_0x000e:
            boolean r5 = r10.hasMoreElements()     // Catch: IOException -> 0x0053, all -> 0x0050
            r6 = 1
            if (r5 == 0) goto L_0x0043
            java.lang.Object r5 = r10.nextElement()     // Catch: IOException -> 0x0053, all -> 0x0050
            java.util.zip.ZipEntry r5 = (java.util.zip.ZipEntry) r5     // Catch: IOException -> 0x0053, all -> 0x0050
            long r7 = r5.getSize()     // Catch: IOException -> 0x0053, all -> 0x0050
            long r3 = r3 + r7
            int r1 = r1 + r6
            java.lang.String r6 = r5.getName()     // Catch: IOException -> 0x0053, all -> 0x0050
            boolean r6 = h(r6)     // Catch: IOException -> 0x0053, all -> 0x0050
            if (r6 != 0) goto L_0x003b
            if (r1 >= r13) goto L_0x003b
            int r6 = (r3 > r11 ? 1 : (r3 == r11 ? 0 : -1))
            if (r6 > 0) goto L_0x003b
            long r5 = r5.getSize()     // Catch: IOException -> 0x0053, all -> 0x0050
            r7 = -1
            int r9 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r9 != 0) goto L_0x000e
        L_0x003b:
            java.lang.String r10 = "ZipUtil"
            java.lang.String r11 = "File name is invalid or too many files or too big"
            com.huawei.secure.android.common.util.LogsUtil.e(r10, r11)     // Catch: IOException -> 0x0053, all -> 0x0050
            goto L_0x0044
        L_0x0043:
            r0 = 1
        L_0x0044:
            r2.close()     // Catch: IOException -> 0x0048
            goto L_0x0078
        L_0x0048:
            java.lang.String r10 = "ZipUtil"
            java.lang.String r11 = "close zipFile IOException "
            com.huawei.secure.android.common.util.LogsUtil.e(r10, r11)
            goto L_0x0078
        L_0x0050:
            r10 = move-exception
            r1 = r2
            goto L_0x0079
        L_0x0053:
            r10 = move-exception
            r1 = r2
            goto L_0x0059
        L_0x0056:
            r10 = move-exception
            goto L_0x0079
        L_0x0058:
            r10 = move-exception
        L_0x0059:
            java.lang.String r11 = "ZipUtil"
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch: all -> 0x0056
            r12.<init>()     // Catch: all -> 0x0056
            java.lang.String r13 = "not a valid zip file, IOException : "
            r12.append(r13)     // Catch: all -> 0x0056
            java.lang.String r10 = r10.getMessage()     // Catch: all -> 0x0056
            r12.append(r10)     // Catch: all -> 0x0056
            java.lang.String r10 = r12.toString()     // Catch: all -> 0x0056
            com.huawei.secure.android.common.util.LogsUtil.e(r11, r10)     // Catch: all -> 0x0056
            if (r1 == 0) goto L_0x0078
            r1.close()     // Catch: IOException -> 0x0048
        L_0x0078:
            return r0
        L_0x0079:
            if (r1 == 0) goto L_0x0086
            r1.close()     // Catch: IOException -> 0x007f
            goto L_0x0086
        L_0x007f:
            java.lang.String r11 = "ZipUtil"
            java.lang.String r12 = "close zipFile IOException "
            com.huawei.secure.android.common.util.LogsUtil.e(r11, r12)
        L_0x0086:
            throw r10
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.huawei.secure.android.common.util.ZipUtil.a(java.lang.String, long, int):boolean");
    }

    private static void c(File file) {
        if (file != null) {
            if (file.isFile()) {
                d(file);
            } else if (file.isDirectory()) {
                File[] listFiles = file.listFiles();
                if (listFiles == null || listFiles.length == 0) {
                    d(file);
                    return;
                }
                for (File file2 : listFiles) {
                    c(file2);
                }
                d(file);
            }
        }
    }

    private static boolean a(String str, String str2, long j, int i) throws SecurityCommonException {
        if (TextUtils.isEmpty(str) || h(str)) {
            LogsUtil.e(TAG, "zip file is not valid");
            return false;
        } else if (TextUtils.isEmpty(str2) || h(str2)) {
            LogsUtil.e(TAG, "target directory is not valid");
            return false;
        } else if (a(str, j, i)) {
            return true;
        } else {
            LogsUtil.e(TAG, "zip file contains valid chars or too many files");
            throw new SecurityCommonException("unsecure zipfile!");
        }
    }

    private static boolean a(List<File> list) {
        try {
            for (File file : list) {
                c(file);
            }
            return true;
        } catch (Exception e) {
            LogsUtil.e(TAG, "unzip fail delete file failed" + e.getMessage());
            return false;
        }
    }

    private static void a(FileInputStream fileInputStream, BufferedOutputStream bufferedOutputStream, ZipInputStream zipInputStream, FileOutputStream fileOutputStream) {
        IOUtil.closeSecure((InputStream) fileInputStream);
        IOUtil.closeSecure((OutputStream) bufferedOutputStream);
        IOUtil.closeSecure((InputStream) zipInputStream);
        IOUtil.closeSecure((OutputStream) fileOutputStream);
    }

    private static void d(File file) {
        if (file != null && !file.delete()) {
            LogsUtil.e(TAG, "delete file error");
        }
    }

    private static void e(File file) {
        if (file != null && !file.exists() && !file.mkdirs()) {
            LogsUtil.e(TAG, "mkdirs error , files exists or IOException.");
        }
    }

    private static boolean h(String str) {
        if (TextUtils.isEmpty(str)) {
            Log.e(TAG, "isContainInvalidStr: name is null");
            return true;
        } else if (str.contains(B) || str.contains(C) || str.contains("..") || str.contains("./") || str.contains(".\\.\\") || str.contains("%00")) {
            return true;
        } else {
            return false;
        }
    }
}
