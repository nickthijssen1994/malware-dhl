package com.caverock.androidsvg;

import android.util.Log;
import com.caverock.androidsvg.SVG;
import com.caverock.androidsvg.SVGParser;
import com.facebook.react.fabric.mounting.LayoutMetricsConversions;
import com.facebook.react.uimanager.events.TouchesHelper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class CSSParser {
    private MediaType a;
    private Source b;
    private boolean c;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum AttribOp {
        EXISTS,
        EQUALS,
        INCLUDES,
        DASHMATCH
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum Combinator {
        DESCENDANT,
        CHILD,
        FOLLOWS
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum MediaType {
        all,
        aural,
        braille,
        embossed,
        handheld,
        print,
        projection,
        screen,
        speech,
        tty,
        tv
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum Source {
        Document,
        RenderOptions
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface c {
        boolean a(l lVar, SVG.ai aiVar);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum PseudoClassIdents {
        target,
        root,
        nth_child,
        nth_last_child,
        nth_of_type,
        nth_last_of_type,
        first_child,
        last_child,
        first_of_type,
        last_of_type,
        only_child,
        only_of_type,
        empty,
        not,
        lang,
        link,
        visited,
        hover,
        active,
        focus,
        enabled,
        disabled,
        checked,
        indeterminate,
        UNSUPPORTED;
        
        private static final Map<String, PseudoClassIdents> cache = new HashMap();

        static {
            PseudoClassIdents[] values = values();
            for (PseudoClassIdents pseudoClassIdents : values) {
                if (pseudoClassIdents != UNSUPPORTED) {
                    cache.put(pseudoClassIdents.name().replace('_', '-'), pseudoClassIdents);
                }
            }
        }

        public static PseudoClassIdents fromString(String str) {
            PseudoClassIdents pseudoClassIdents = cache.get(str);
            if (pseudoClassIdents != null) {
                return pseudoClassIdents;
            }
            return UNSUPPORTED;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class a {
        public final String a;
        final AttribOp b;
        public final String c;

        a(String str, AttribOp attribOp, String str2) {
            this.a = str;
            this.b = attribOp;
            this.c = str2;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class o {
        Combinator a;
        String b;
        List<a> c = null;
        List<c> d = null;

        o(Combinator combinator, String str) {
            this.a = null;
            this.b = null;
            this.a = combinator == null ? Combinator.DESCENDANT : combinator;
            this.b = str;
        }

        void a(String str, AttribOp attribOp, String str2) {
            if (this.c == null) {
                this.c = new ArrayList();
            }
            this.c.add(new a(str, attribOp, str2));
        }

        void a(c cVar) {
            if (this.d == null) {
                this.d = new ArrayList();
            }
            this.d.add(cVar);
        }

        public String toString() {
            StringBuilder sb = new StringBuilder();
            if (this.a == Combinator.CHILD) {
                sb.append("> ");
            } else if (this.a == Combinator.FOLLOWS) {
                sb.append("+ ");
            }
            String str = this.b;
            if (str == null) {
                str = "*";
            }
            sb.append(str);
            List<a> list = this.c;
            if (list != null) {
                for (a aVar : list) {
                    sb.append('[');
                    sb.append(aVar.a);
                    switch (aVar.b) {
                        case EQUALS:
                            sb.append('=');
                            sb.append(aVar.c);
                            break;
                        case INCLUDES:
                            sb.append("~=");
                            sb.append(aVar.c);
                            break;
                        case DASHMATCH:
                            sb.append("|=");
                            sb.append(aVar.c);
                            break;
                    }
                    sb.append(']');
                }
            }
            List<c> list2 = this.d;
            if (list2 != null) {
                for (c cVar : list2) {
                    sb.append(':');
                    sb.append(cVar);
                }
            }
            return sb.toString();
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class m {
        private List<k> a = null;

        void a(k kVar) {
            if (this.a == null) {
                this.a = new ArrayList();
            }
            for (int i = 0; i < this.a.size(); i++) {
                if (this.a.get(i).a.b > kVar.a.b) {
                    this.a.add(i, kVar);
                    return;
                }
            }
            this.a.add(kVar);
        }

        public void a(m mVar) {
            List<k> list = mVar.a;
            if (list != null) {
                if (this.a == null) {
                    this.a = new ArrayList(list.size());
                }
                for (k kVar : mVar.a) {
                    a(kVar);
                }
            }
        }

        public List<k> a() {
            return this.a;
        }

        public boolean b() {
            List<k> list = this.a;
            return list == null || list.isEmpty();
        }

        public int c() {
            List<k> list = this.a;
            if (list != null) {
                return list.size();
            }
            return 0;
        }

        public void a(Source source) {
            List<k> list = this.a;
            if (list != null) {
                Iterator<k> it = list.iterator();
                while (it.hasNext()) {
                    if (it.next().c == source) {
                        it.remove();
                    }
                }
            }
        }

        public String toString() {
            if (this.a == null) {
                return "";
            }
            StringBuilder sb = new StringBuilder();
            for (k kVar : this.a) {
                sb.append(kVar.toString());
                sb.append('\n');
            }
            return sb.toString();
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class k {
        n a;
        SVG.Style b;
        Source c;

        k(n nVar, SVG.Style style, Source source) {
            this.a = null;
            this.b = null;
            this.a = nVar;
            this.b = style;
            this.c = source;
        }

        public String toString() {
            return String.valueOf(this.a) + " {...} (src=" + this.c + ")";
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class n {
        List<o> a;
        int b;

        private n() {
            this.a = null;
            this.b = 0;
        }

        void a(o oVar) {
            if (this.a == null) {
                this.a = new ArrayList();
            }
            this.a.add(oVar);
        }

        int a() {
            List<o> list = this.a;
            if (list == null) {
                return 0;
            }
            return list.size();
        }

        o a(int i) {
            return this.a.get(i);
        }

        boolean b() {
            List<o> list = this.a;
            return list == null || list.isEmpty();
        }

        void c() {
            this.b += 1000000;
        }

        void d() {
            this.b += 1000;
        }

        void e() {
            this.b++;
        }

        public String toString() {
            StringBuilder sb = new StringBuilder();
            for (o oVar : this.a) {
                sb.append(oVar);
                sb.append(' ');
            }
            sb.append('[');
            sb.append(this.b);
            sb.append(']');
            return sb.toString();
        }
    }

    CSSParser() {
        this(MediaType.screen, Source.Document);
    }

    public CSSParser(Source source) {
        this(MediaType.screen, source);
    }

    public CSSParser(MediaType mediaType, Source source) {
        this.a = null;
        this.b = null;
        this.c = false;
        this.a = mediaType;
        this.b = source;
    }

    public m a(String str) {
        b bVar = new b(str);
        bVar.g();
        return c(bVar);
    }

    public static boolean a(String str, MediaType mediaType) {
        b bVar = new b(str);
        bVar.g();
        return a(a(bVar), mediaType);
    }

    private static void a(String str, Object... objArr) {
        Log.w("CSSParser", String.format(str, objArr));
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class b extends SVGParser.f {
        private int c(int i) {
            if (i >= 48 && i <= 57) {
                return i - 48;
            }
            if (i >= 65 && i <= 70) {
                return (i - 65) + 10;
            }
            if (i < 97 || i > 102) {
                return -1;
            }
            return (i - 97) + 10;
        }

        b(String str) {
            super(str.replaceAll("(?s)/\\*.*?\\*/", ""));
        }

        String a() {
            int w = w();
            if (w == this.b) {
                return null;
            }
            String substring = this.a.substring(this.b, w);
            this.b = w;
            return substring;
        }

        private int w() {
            if (f()) {
                return this.b;
            }
            int i = this.b;
            int i2 = this.b;
            int charAt = this.a.charAt(this.b);
            if (charAt == 45) {
                charAt = n();
            }
            if ((charAt >= 65 && charAt <= 90) || ((charAt >= 97 && charAt <= 122) || charAt == 95)) {
                int n = n();
                while (true) {
                    if ((n < 65 || n > 90) && ((n < 97 || n > 122) && !((n >= 48 && n <= 57) || n == 45 || n == 95))) {
                        break;
                    }
                    n = n();
                }
                i2 = this.b;
            }
            this.b = i;
            return i2;
        }

        public List<n> x() throws CSSParseException {
            if (f()) {
                return null;
            }
            ArrayList arrayList = new ArrayList(1);
            n nVar = new n();
            while (!f() && a(nVar)) {
                if (h()) {
                    arrayList.add(nVar);
                    nVar = new n();
                }
            }
            if (!nVar.b()) {
                arrayList.add(nVar);
            }
            return arrayList;
        }

        /* JADX WARN: Removed duplicated region for block: B:16:0x0036  */
        /* JADX WARN: Removed duplicated region for block: B:17:0x003c  */
        /* JADX WARN: Removed duplicated region for block: B:23:0x0053  */
        /* JADX WARN: Removed duplicated region for block: B:79:0x0132  */
        /* JADX WARN: Removed duplicated region for block: B:81:0x0137  */
        /* Code decompiled incorrectly, please refer to instructions dump */
        boolean a(com.caverock.androidsvg.CSSParser.n r10) throws com.caverock.androidsvg.CSSParseException {
            /*
            // Method dump skipped, instructions count: 314
            */
            throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.CSSParser.b.a(com.caverock.androidsvg.CSSParser$n):boolean");
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public static class a {
            public int a;
            public int b;

            a(int i, int i2) {
                this.a = i;
                this.b = i2;
            }
        }

        private a y() throws CSSParseException {
            a aVar;
            b bVar;
            if (f()) {
                return null;
            }
            int i = this.b;
            if (!a('(')) {
                return null;
            }
            g();
            int i2 = 1;
            if (a("odd")) {
                aVar = new a(2, 1);
            } else {
                int i3 = 0;
                if (a("even")) {
                    aVar = new a(2, 0);
                } else {
                    int i4 = (!a('+') && a('-')) ? -1 : 1;
                    b a2 = b.a(this.a, this.b, this.c, false);
                    if (a2 != null) {
                        this.b = a2.a();
                    }
                    if (a('n') || a('N')) {
                        if (a2 == null) {
                            a2 = new b(1, this.b);
                        }
                        g();
                        boolean a3 = a('+');
                        if (!a3 && (a3 = a('-'))) {
                            i2 = -1;
                        }
                        if (a3) {
                            g();
                            bVar = b.a(this.a, this.b, this.c, false);
                            if (bVar != null) {
                                this.b = bVar.a();
                            } else {
                                this.b = i;
                                return null;
                            }
                        } else {
                            bVar = null;
                        }
                    } else {
                        i2 = i4;
                        bVar = a2;
                        i4 = 1;
                        a2 = null;
                    }
                    int b = a2 == null ? 0 : i4 * a2.b();
                    if (bVar != null) {
                        i3 = i2 * bVar.b();
                    }
                    aVar = new a(b, i3);
                }
            }
            g();
            if (a(')')) {
                return aVar;
            }
            this.b = i;
            return null;
        }

        private List<String> z() throws CSSParseException {
            if (f()) {
                return null;
            }
            int i = this.b;
            if (!a('(')) {
                return null;
            }
            g();
            ArrayList arrayList = null;
            do {
                String a2 = a();
                if (a2 == null) {
                    this.b = i;
                    return null;
                }
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(a2);
                g();
            } while (h());
            if (a(')')) {
                return arrayList;
            }
            this.b = i;
            return null;
        }

        /* JADX WARN: Code restructure failed: missing block: B:38:0x002e, code lost:
            continue;
         */
        /* Code decompiled incorrectly, please refer to instructions dump */
        private java.util.List<com.caverock.androidsvg.CSSParser.n> A() throws com.caverock.androidsvg.CSSParseException {
            /*
                r6 = this;
                boolean r0 = r6.f()
                r1 = 0
                if (r0 == 0) goto L_0x0008
                return r1
            L_0x0008:
                int r0 = r6.b
                r2 = 40
                boolean r2 = r6.a(r2)
                if (r2 != 0) goto L_0x0013
                return r1
            L_0x0013:
                r6.g()
                java.util.List r2 = r6.x()
                if (r2 != 0) goto L_0x001f
                r6.b = r0
                return r1
            L_0x001f:
                r3 = 41
                boolean r3 = r6.a(r3)
                if (r3 != 0) goto L_0x002a
                r6.b = r0
                return r1
            L_0x002a:
                java.util.Iterator r0 = r2.iterator()
            L_0x002e:
                boolean r3 = r0.hasNext()
                if (r3 == 0) goto L_0x006d
                java.lang.Object r3 = r0.next()
                com.caverock.androidsvg.CSSParser$n r3 = (com.caverock.androidsvg.CSSParser.n) r3
                java.util.List<com.caverock.androidsvg.CSSParser$o> r4 = r3.a
                if (r4 != 0) goto L_0x003f
                goto L_0x006d
            L_0x003f:
                java.util.List<com.caverock.androidsvg.CSSParser$o> r3 = r3.a
                java.util.Iterator r3 = r3.iterator()
            L_0x0045:
                boolean r4 = r3.hasNext()
                if (r4 == 0) goto L_0x002e
                java.lang.Object r4 = r3.next()
                com.caverock.androidsvg.CSSParser$o r4 = (com.caverock.androidsvg.CSSParser.o) r4
                java.util.List<com.caverock.androidsvg.CSSParser$c> r5 = r4.d
                if (r5 != 0) goto L_0x0056
                goto L_0x002e
            L_0x0056:
                java.util.List<com.caverock.androidsvg.CSSParser$c> r4 = r4.d
                java.util.Iterator r4 = r4.iterator()
            L_0x005c:
                boolean r5 = r4.hasNext()
                if (r5 == 0) goto L_0x0045
                java.lang.Object r5 = r4.next()
                com.caverock.androidsvg.CSSParser$c r5 = (com.caverock.androidsvg.CSSParser.c) r5
                boolean r5 = r5 instanceof com.caverock.androidsvg.CSSParser.f
                if (r5 == 0) goto L_0x005c
                return r1
            L_0x006d:
                return r2
            */
            throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.CSSParser.b.A():java.util.List");
        }

        private void a(n nVar, o oVar) throws CSSParseException {
            c cVar;
            String a2 = a();
            if (a2 != null) {
                PseudoClassIdents fromString = PseudoClassIdents.fromString(a2);
                switch (fromString) {
                    case first_child:
                        d dVar = new d(0, 1, true, false, null);
                        nVar.d();
                        cVar = dVar;
                        break;
                    case last_child:
                        d dVar2 = new d(0, 1, false, false, null);
                        nVar.d();
                        cVar = dVar2;
                        break;
                    case only_child:
                        cVar = new h(false, null);
                        nVar.d();
                        break;
                    case first_of_type:
                        d dVar3 = new d(0, 1, true, true, oVar.b);
                        nVar.d();
                        cVar = dVar3;
                        break;
                    case last_of_type:
                        d dVar4 = new d(0, 1, false, true, oVar.b);
                        nVar.d();
                        cVar = dVar4;
                        break;
                    case only_of_type:
                        cVar = new h(true, oVar.b);
                        nVar.d();
                        break;
                    case root:
                        cVar = new i();
                        nVar.d();
                        break;
                    case empty:
                        cVar = new e();
                        nVar.d();
                        break;
                    case nth_child:
                    case nth_last_child:
                    case nth_of_type:
                    case nth_last_of_type:
                        boolean z = fromString == PseudoClassIdents.nth_child || fromString == PseudoClassIdents.nth_of_type;
                        boolean z2 = fromString == PseudoClassIdents.nth_of_type || fromString == PseudoClassIdents.nth_last_of_type;
                        a y = y();
                        if (y != null) {
                            d dVar5 = new d(y.a, y.b, z, z2, oVar.b);
                            nVar.d();
                            cVar = dVar5;
                            break;
                        } else {
                            throw new CSSParseException("Invalid or missing parameter section for pseudo class: " + a2);
                        }
                    case not:
                        List<n> A = A();
                        if (A != null) {
                            f fVar = new f(A);
                            nVar.b = fVar.a();
                            cVar = fVar;
                            break;
                        } else {
                            throw new CSSParseException("Invalid or missing parameter section for pseudo class: " + a2);
                        }
                    case target:
                        cVar = new j();
                        nVar.d();
                        break;
                    case lang:
                        z();
                        cVar = new g(a2);
                        nVar.d();
                        break;
                    case link:
                    case visited:
                    case hover:
                    case active:
                    case focus:
                    case enabled:
                    case disabled:
                    case checked:
                    case indeterminate:
                        cVar = new g(a2);
                        nVar.d();
                        break;
                    default:
                        throw new CSSParseException("Unsupported pseudo class: " + a2);
                }
                oVar.a(cVar);
                return;
            }
            throw new CSSParseException("Invalid pseudo class");
        }

        private String B() {
            if (f()) {
                return null;
            }
            String u = u();
            if (u != null) {
                return u;
            }
            return a();
        }

        String b() {
            if (f()) {
                return null;
            }
            int i = this.b;
            int i2 = this.b;
            int charAt = this.a.charAt(this.b);
            while (charAt != -1 && charAt != 59 && charAt != 125 && charAt != 33 && !b(charAt)) {
                if (!a(charAt)) {
                    i2 = this.b + 1;
                }
                charAt = n();
            }
            if (this.b > i) {
                return this.a.substring(i, i2);
            }
            this.b = i;
            return null;
        }

        String c() {
            int c;
            if (f()) {
                return null;
            }
            char charAt = this.a.charAt(this.b);
            if (!(charAt == '\'' || charAt == '\"')) {
                return null;
            }
            StringBuilder sb = new StringBuilder();
            this.b++;
            int intValue = k().intValue();
            while (intValue != -1 && intValue != charAt) {
                if (intValue == 92) {
                    intValue = k().intValue();
                    if (intValue != -1) {
                        if (intValue == 10 || intValue == 13 || intValue == 12) {
                            intValue = k().intValue();
                        } else {
                            int c2 = c(intValue);
                            if (c2 != -1) {
                                int i = intValue;
                                for (int i2 = 1; i2 <= 5 && (c = c((i = k().intValue()))) != -1; i2++) {
                                    c2 = (c2 * 16) + c;
                                }
                                intValue = i;
                                sb.append((char) c2);
                            }
                        }
                    }
                }
                sb.append((char) intValue);
                intValue = k().intValue();
            }
            return sb.toString();
        }

        String d() {
            if (f()) {
                return null;
            }
            int i = this.b;
            if (!a("url(")) {
                return null;
            }
            g();
            String c = c();
            if (c == null) {
                c = e();
            }
            if (c == null) {
                this.b = i;
                return null;
            }
            g();
            if (f() || a(")")) {
                return c;
            }
            this.b = i;
            return null;
        }

        String e() {
            char charAt;
            int c;
            StringBuilder sb = new StringBuilder();
            while (!f() && (charAt = this.a.charAt(this.b)) != '\'' && charAt != '\"' && charAt != '(' && charAt != ')' && !a((int) charAt) && !Character.isISOControl((int) charAt)) {
                this.b++;
                if (charAt == '\\') {
                    if (!f()) {
                        String str = this.a;
                        int i = this.b;
                        this.b = i + 1;
                        charAt = str.charAt(i);
                        if (!(charAt == '\n' || charAt == '\r' || charAt == '\f')) {
                            int c2 = c((int) charAt);
                            if (c2 != -1) {
                                for (int i2 = 1; i2 <= 5 && !f() && (c = c((int) this.a.charAt(this.b))) != -1; i2++) {
                                    this.b++;
                                    c2 = (c2 * 16) + c;
                                }
                                sb.append((char) c2);
                            }
                        }
                    }
                }
                sb.append((char) charAt);
            }
            if (sb.length() == 0) {
                return null;
            }
            return sb.toString();
        }
    }

    private static boolean a(List<MediaType> list, MediaType mediaType) {
        for (MediaType mediaType2 : list) {
            if (mediaType2 == MediaType.all) {
                return true;
            }
            if (mediaType2 == mediaType) {
                return true;
            }
        }
        return false;
    }

    private static List<MediaType> a(b bVar) {
        String p;
        ArrayList arrayList = new ArrayList();
        while (!bVar.f() && (p = bVar.p()) != null) {
            try {
                arrayList.add(MediaType.valueOf(p));
            } catch (IllegalArgumentException unused) {
            }
            if (!bVar.h()) {
                break;
            }
        }
        return arrayList;
    }

    private void a(m mVar, b bVar) throws CSSParseException {
        String a2 = bVar.a();
        bVar.g();
        if (a2 != null) {
            if (!this.c && a2.equals("media")) {
                List<MediaType> a3 = a(bVar);
                if (bVar.a('{')) {
                    bVar.g();
                    if (a(a3, this.a)) {
                        this.c = true;
                        mVar.a(c(bVar));
                        this.c = false;
                    } else {
                        c(bVar);
                    }
                    if (!bVar.f() && !bVar.a('}')) {
                        throw new CSSParseException("Invalid @media rule: expected '}' at end of rule set");
                    }
                } else {
                    throw new CSSParseException("Invalid @media rule: missing rule set");
                }
            } else if (this.c || !a2.equals("import")) {
                a("Ignoring @%s rule", a2);
                b(bVar);
            } else {
                String d2 = bVar.d();
                if (d2 == null) {
                    d2 = bVar.c();
                }
                if (d2 != null) {
                    bVar.g();
                    List<MediaType> a4 = a(bVar);
                    if (!bVar.f() && !bVar.a(';')) {
                        throw new CSSParseException("Invalid @media rule: expected '}' at end of rule set");
                    } else if (SVG.e() != null && a(a4, this.a)) {
                        String b2 = SVG.e().b(d2);
                        if (b2 != null) {
                            mVar.a(a(b2));
                        } else {
                            return;
                        }
                    }
                } else {
                    throw new CSSParseException("Invalid @import rule: expected string or url()");
                }
            }
            bVar.g();
            return;
        }
        throw new CSSParseException("Invalid '@' rule");
    }

    private void b(b bVar) {
        int i2 = 0;
        while (!bVar.f()) {
            int intValue = bVar.k().intValue();
            if (intValue != 59 || i2 != 0) {
                if (intValue == 123) {
                    i2++;
                } else if (intValue == 125 && i2 > 0 && i2 - 1 == 0) {
                    return;
                }
            } else {
                return;
            }
        }
    }

    private m c(b bVar) {
        m mVar = new m();
        while (!bVar.f()) {
            try {
                if (!bVar.a("<!--") && !bVar.a("-->")) {
                    if (!bVar.a('@')) {
                        if (!b(mVar, bVar)) {
                            break;
                        }
                    } else {
                        a(mVar, bVar);
                    }
                }
            } catch (CSSParseException e2) {
                Log.e("CSSParser", "CSS parser terminated early due to error: " + e2.getMessage());
            }
        }
        return mVar;
    }

    private boolean b(m mVar, b bVar) throws CSSParseException {
        List<n> x = bVar.x();
        if (x == null || x.isEmpty()) {
            return false;
        }
        if (bVar.a('{')) {
            bVar.g();
            SVG.Style d2 = d(bVar);
            bVar.g();
            for (n nVar : x) {
                mVar.a(new k(nVar, d2, this.b));
            }
            return true;
        }
        throw new CSSParseException("Malformed rule block: expected '{'");
    }

    private SVG.Style d(b bVar) throws CSSParseException {
        SVG.Style style = new SVG.Style();
        do {
            String a2 = bVar.a();
            bVar.g();
            if (bVar.a(':')) {
                bVar.g();
                String b2 = bVar.b();
                if (b2 != null) {
                    bVar.g();
                    if (bVar.a('!')) {
                        bVar.g();
                        if (bVar.a("important")) {
                            bVar.g();
                        } else {
                            throw new CSSParseException("Malformed rule set: found unexpected '!'");
                        }
                    }
                    bVar.a(';');
                    SVGParser.a(style, a2, b2);
                    bVar.g();
                    if (bVar.f()) {
                        break;
                    }
                } else {
                    throw new CSSParseException("Expected property value");
                }
            } else {
                throw new CSSParseException("Expected ':'");
            }
        } while (!bVar.a('}'));
        return style;
    }

    public static List<String> b(String str) {
        b bVar = new b(str);
        ArrayList arrayList = null;
        while (!bVar.f()) {
            String o2 = bVar.o();
            if (o2 != null) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(o2);
                bVar.g();
            }
        }
        return arrayList;
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class l {
        SVG.ai a;

        public String toString() {
            SVG.ai aiVar = this.a;
            return aiVar != null ? String.format("<%s id=\"%s\">", aiVar.a(), this.a.p) : "";
        }
    }

    public static boolean a(l lVar, n nVar, SVG.ai aiVar) {
        ArrayList arrayList = new ArrayList();
        for (SVG.ag agVar = aiVar.v; agVar != null; agVar = ((SVG.ak) agVar).v) {
            arrayList.add(0, agVar);
        }
        int size = arrayList.size() - 1;
        if (nVar.a() == 1) {
            return a(lVar, nVar.a(0), arrayList, size, aiVar);
        }
        return a(lVar, nVar, nVar.a() - 1, arrayList, size, aiVar);
    }

    private static boolean a(l lVar, n nVar, int i2, List<SVG.ag> list, int i3, SVG.ai aiVar) {
        o a2 = nVar.a(i2);
        if (!a(lVar, a2, list, i3, aiVar)) {
            return false;
        }
        if (a2.a == Combinator.DESCENDANT) {
            if (i2 == 0) {
                return true;
            }
            for (int i4 = i3; i4 >= 0; i4--) {
                if (a(lVar, nVar, i2 - 1, list, i4)) {
                    return true;
                }
            }
            return false;
        } else if (a2.a == Combinator.CHILD) {
            return a(lVar, nVar, i2 - 1, list, i3);
        } else {
            int a3 = a(list, i3, aiVar);
            if (a3 <= 0) {
                return false;
            }
            return a(lVar, nVar, i2 - 1, list, i3, (SVG.ai) aiVar.v.b().get(a3 - 1));
        }
    }

    private static boolean a(l lVar, n nVar, int i2, List<SVG.ag> list, int i3) {
        o a2 = nVar.a(i2);
        SVG.ai aiVar = (SVG.ai) list.get(i3);
        if (!a(lVar, a2, list, i3, aiVar)) {
            return false;
        }
        if (a2.a == Combinator.DESCENDANT) {
            if (i2 == 0) {
                return true;
            }
            int i4 = i3;
            while (i4 > 0) {
                i4--;
                if (a(lVar, nVar, i2 - 1, list, i4)) {
                    return true;
                }
            }
            return false;
        } else if (a2.a == Combinator.CHILD) {
            return a(lVar, nVar, i2 - 1, list, i3 - 1);
        } else {
            int a3 = a(list, i3, aiVar);
            if (a3 <= 0) {
                return false;
            }
            return a(lVar, nVar, i2 - 1, list, i3, (SVG.ai) aiVar.v.b().get(a3 - 1));
        }
    }

    private static int a(List<SVG.ag> list, int i2, SVG.ai aiVar) {
        int i3 = 0;
        if (i2 < 0) {
            return 0;
        }
        if (list.get(i2) != aiVar.v) {
            return -1;
        }
        for (SVG.ak akVar : aiVar.v.b()) {
            if (akVar == aiVar) {
                return i3;
            }
            i3++;
        }
        return -1;
    }

    private static boolean a(l lVar, o oVar, List<SVG.ag> list, int i2, SVG.ai aiVar) {
        if (!(oVar.b == null || oVar.b.equals(aiVar.a().toLowerCase(Locale.US)))) {
            return false;
        }
        if (oVar.c != null) {
            for (a aVar : oVar.c) {
                String str = aVar.a;
                char c2 = 65535;
                int hashCode = str.hashCode();
                if (hashCode != 3355) {
                    if (hashCode == 94742904 && str.equals("class")) {
                        c2 = 1;
                    }
                } else if (str.equals("id")) {
                    c2 = 0;
                }
                switch (c2) {
                    case 0:
                        if (aVar.c.equals(aiVar.p)) {
                            break;
                        } else {
                            return false;
                        }
                    case 1:
                        if (aiVar.t != null && aiVar.t.contains(aVar.c)) {
                            break;
                        } else {
                            return false;
                        }
                    default:
                        return false;
                }
            }
        }
        if (oVar.d != null) {
            for (c cVar : oVar.d) {
                if (!cVar.a(lVar, aiVar)) {
                    return false;
                }
            }
        }
        return true;
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class d implements c {
        private int a;
        private int b;
        private boolean c;
        private boolean d;
        private String e;

        d(int i, int i2, boolean z, boolean z2, String str) {
            this.a = i;
            this.b = i2;
            this.c = z;
            this.d = z2;
            this.e = str;
        }

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            int i;
            int i2;
            String a = (!this.d || this.e != null) ? this.e : aiVar.a();
            if (aiVar.v != null) {
                Iterator<SVG.ak> it = aiVar.v.b().iterator();
                i2 = 0;
                i = 0;
                while (it.hasNext()) {
                    SVG.ai aiVar2 = (SVG.ai) it.next();
                    if (aiVar2 == aiVar) {
                        i2 = i;
                    }
                    if (a == null || aiVar2.a().equals(a)) {
                        i++;
                    }
                }
            } else {
                i2 = 0;
                i = 1;
            }
            int i3 = this.c ? i2 + 1 : i - i2;
            int i4 = this.a;
            if (i4 != 0) {
                int i5 = this.b;
                if ((i3 - i5) % i4 != 0) {
                    return false;
                }
                if (Integer.signum(i3 - i5) == 0 || Integer.signum(i3 - this.b) == Integer.signum(this.a)) {
                    return true;
                }
                return false;
            } else if (i3 == this.b) {
                return true;
            } else {
                return false;
            }
        }

        public String toString() {
            String str = this.c ? "" : "last-";
            if (this.d) {
                return String.format("nth-%schild(%dn%+d of type <%s>)", str, Integer.valueOf(this.a), Integer.valueOf(this.b), this.e);
            }
            return String.format("nth-%schild(%dn%+d)", str, Integer.valueOf(this.a), Integer.valueOf(this.b));
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class h implements c {
        private boolean a;
        private String b;

        public h(boolean z, String str) {
            this.a = z;
            this.b = str;
        }

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            int i;
            String a = (!this.a || this.b != null) ? this.b : aiVar.a();
            if (aiVar.v != null) {
                Iterator<SVG.ak> it = aiVar.v.b().iterator();
                i = 0;
                while (it.hasNext()) {
                    SVG.ai aiVar2 = (SVG.ai) it.next();
                    if (a == null || aiVar2.a().equals(a)) {
                        i++;
                    }
                }
            } else {
                i = 1;
            }
            if (i == 1) {
                return true;
            }
            return false;
        }

        public String toString() {
            if (this.a) {
                return String.format("only-of-type <%s>", this.b);
            }
            return String.format("only-child", new Object[0]);
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class i implements c {
        public String toString() {
            return "root";
        }

        private i() {
        }

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            return aiVar.v == null;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class e implements c {
        public String toString() {
            return "empty";
        }

        private e() {
        }

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            if (!(aiVar instanceof SVG.ag) || ((SVG.ag) aiVar).b().size() == 0) {
                return true;
            }
            return false;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class f implements c {
        private List<n> a;

        f(List<n> list) {
            this.a = list;
        }

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            for (n nVar : this.a) {
                if (CSSParser.a(lVar, nVar, aiVar)) {
                    return false;
                }
            }
            return true;
        }

        int a() {
            int i = LayoutMetricsConversions.REACT_CONSTRAINT_UNDEFINED;
            for (n nVar : this.a) {
                if (nVar.b > i) {
                    i = nVar.b;
                }
            }
            return i;
        }

        public String toString() {
            return "not(" + this.a + ")";
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class j implements c {
        public String toString() {
            return TouchesHelper.TARGET_KEY;
        }

        private j() {
        }

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            return lVar != null && aiVar == lVar.a;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class g implements c {
        private String a;

        @Override // com.caverock.androidsvg.CSSParser.c
        public boolean a(l lVar, SVG.ai aiVar) {
            return false;
        }

        g(String str) {
            this.a = str;
        }

        public String toString() {
            return this.a;
        }
    }
}
