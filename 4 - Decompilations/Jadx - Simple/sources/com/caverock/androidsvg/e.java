package com.caverock.androidsvg;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.DashPathEffect;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathMeasure;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.RadialGradient;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.os.Build;
import android.util.Base64;
import android.util.Log;
import com.alibaba.fastjson.asm.Opcodes;
import com.caverock.androidsvg.CSSParser;
import com.caverock.androidsvg.PreserveAspectRatio;
import com.caverock.androidsvg.SVG;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class e {
    private static HashSet<String> h;
    private Canvas a;
    private float b;
    private SVG c;
    private g d;
    private Stack<g> e;
    private Stack<SVG.ag> f;
    private Stack<Matrix> g;
    private CSSParser.l i = null;

    private static int a(float f2) {
        int i2 = (int) (f2 * 256.0f);
        if (i2 < 0) {
            return 0;
        }
        if (i2 > 255) {
            return 255;
        }
        return i2;
    }

    private float b(float f2, float f3, float f4, float f5) {
        return (f2 * f4) + (f3 * f5);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void f(String str, Object... objArr) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class g {
        SVG.Style a;
        boolean b;
        boolean c;
        Paint d;
        Paint e;
        SVG.a f;
        SVG.a g;
        boolean h;

        g() {
            this.d = new Paint();
            this.d.setFlags(Opcodes.INSTANCEOF);
            if (Build.VERSION.SDK_INT >= 14) {
                this.d.setHinting(0);
            }
            this.d.setStyle(Paint.Style.FILL);
            this.d.setTypeface(Typeface.DEFAULT);
            this.e = new Paint();
            this.e.setFlags(Opcodes.INSTANCEOF);
            if (Build.VERSION.SDK_INT >= 14) {
                this.e.setHinting(0);
            }
            this.e.setStyle(Paint.Style.STROKE);
            this.e.setTypeface(Typeface.DEFAULT);
            this.a = SVG.Style.a();
        }

        g(g gVar) {
            this.b = gVar.b;
            this.c = gVar.c;
            this.d = new Paint(gVar.d);
            this.e = new Paint(gVar.e);
            SVG.a aVar = gVar.f;
            if (aVar != null) {
                this.f = new SVG.a(aVar);
            }
            SVG.a aVar2 = gVar.g;
            if (aVar2 != null) {
                this.g = new SVG.a(aVar2);
            }
            this.h = gVar.h;
            try {
                this.a = (SVG.Style) gVar.a.clone();
            } catch (CloneNotSupportedException e) {
                Log.e("SVGAndroidRenderer", "Unexpected clone error", e);
                this.a = SVG.Style.a();
            }
        }
    }

    private void e() {
        this.d = new g();
        this.e = new Stack<>();
        a(this.d, SVG.Style.a());
        g gVar = this.d;
        gVar.f = null;
        gVar.h = false;
        this.e.push(new g(gVar));
        this.g = new Stack<>();
        this.f = new Stack<>();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public e(Canvas canvas, float f2) {
        this.a = canvas;
        this.b = f2;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public float a() {
        return this.b;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public float b() {
        return this.d.d.getTextSize();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public float c() {
        return this.d.d.getTextSize() / 2.0f;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public SVG.a d() {
        if (this.d.g != null) {
            return this.d.g;
        }
        return this.d.f;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void a(SVG svg, d dVar) {
        PreserveAspectRatio preserveAspectRatio;
        SVG.a aVar;
        if (dVar != null) {
            this.c = svg;
            SVG.ac a2 = svg.a();
            if (a2 == null) {
                d("Nothing to render. Document is empty.", new Object[0]);
                return;
            }
            if (dVar.c()) {
                SVG.ai e = this.c.e(dVar.e);
                if (e == null || !(e instanceof SVG.bb)) {
                    Log.w("SVGAndroidRenderer", String.format("View element with id \"%s\" not found.", dVar.e));
                    return;
                }
                SVG.bb bbVar = (SVG.bb) e;
                if (bbVar.x == null) {
                    Log.w("SVGAndroidRenderer", String.format("View element with id \"%s\" is missing a viewBox attribute.", dVar.e));
                    return;
                } else {
                    aVar = bbVar.x;
                    preserveAspectRatio = bbVar.w;
                }
            } else {
                aVar = dVar.d() ? dVar.d : a2.x;
                preserveAspectRatio = dVar.b() ? dVar.b : a2.w;
            }
            if (dVar.a()) {
                svg.a(dVar.a);
            }
            if (dVar.f()) {
                this.i = new CSSParser.l();
                this.i.a = svg.e(dVar.c);
            }
            e();
            b((SVG.ak) a2);
            f();
            SVG.a aVar2 = new SVG.a(dVar.f);
            if (a2.c != null) {
                aVar2.c = a2.c.a(this, aVar2.c);
            }
            if (a2.d != null) {
                aVar2.d = a2.d.a(this, aVar2.d);
            }
            a(a2, aVar2, aVar, preserveAspectRatio);
            g();
            if (dVar.a()) {
                svg.d();
                return;
            }
            return;
        }
        throw new NullPointerException("renderOptions shouldn't be null");
    }

    private void a(SVG.ak akVar) {
        if (!(akVar instanceof SVG.r)) {
            f();
            b(akVar);
            if (akVar instanceof SVG.ac) {
                a((SVG.ac) akVar);
            } else if (akVar instanceof SVG.ba) {
                a((SVG.ba) akVar);
            } else if (akVar instanceof SVG.ap) {
                a((SVG.ap) akVar);
            } else if (akVar instanceof SVG.k) {
                a((SVG.k) akVar);
            } else if (akVar instanceof SVG.m) {
                a((SVG.m) akVar);
            } else if (akVar instanceof SVG.t) {
                a((SVG.t) akVar);
            } else if (akVar instanceof SVG.z) {
                a((SVG.z) akVar);
            } else if (akVar instanceof SVG.c) {
                a((SVG.c) akVar);
            } else if (akVar instanceof SVG.h) {
                a((SVG.h) akVar);
            } else if (akVar instanceof SVG.o) {
                a((SVG.o) akVar);
            } else if (akVar instanceof SVG.y) {
                a((SVG.y) akVar);
            } else if (akVar instanceof SVG.x) {
                a((SVG.x) akVar);
            } else if (akVar instanceof SVG.at) {
                a((SVG.at) akVar);
            }
            g();
        }
    }

    private void a(SVG.ag agVar, boolean z) {
        if (z) {
            a(agVar);
        }
        for (SVG.ak akVar : agVar.b()) {
            a(akVar);
        }
        if (z) {
            h();
        }
    }

    private void f() {
        this.a.save();
        this.e.push(this.d);
        this.d = new g(this.d);
    }

    private void g() {
        this.a.restore();
        this.d = this.e.pop();
    }

    private void a(SVG.ag agVar) {
        this.f.push(agVar);
        this.g.push(this.a.getMatrix());
    }

    private void h() {
        this.f.pop();
        this.g.pop();
    }

    private void a(g gVar, SVG.ai aiVar) {
        gVar.a.a(aiVar.v == null);
        if (aiVar.r != null) {
            a(gVar, aiVar.r);
        }
        if (this.c.c()) {
            for (CSSParser.k kVar : this.c.b()) {
                if (CSSParser.a(this.i, kVar.a, aiVar)) {
                    a(gVar, kVar.b);
                }
            }
        }
        if (aiVar.s != null) {
            a(gVar, aiVar.s);
        }
    }

    private void b(SVG.ak akVar) {
        if (akVar instanceof SVG.ai) {
            SVG.ai aiVar = (SVG.ai) akVar;
            if (aiVar.q != null) {
                this.d.h = aiVar.q.booleanValue();
            }
        }
    }

    private void a(SVG.ah ahVar, Path path) {
        if (this.d.a.b instanceof SVG.s) {
            SVG.ak b2 = this.c.b(((SVG.s) this.d.a.b).a);
            if (b2 instanceof SVG.w) {
                a(ahVar, path, (SVG.w) b2);
                return;
            }
        }
        this.a.drawPath(path, this.d.d);
    }

    private void a(Path path) {
        if (this.d.a.L == SVG.Style.VectorEffect.NonScalingStroke) {
            Matrix matrix = this.a.getMatrix();
            Path path2 = new Path();
            path.transform(matrix, path2);
            this.a.setMatrix(new Matrix());
            Shader shader = this.d.e.getShader();
            Matrix matrix2 = new Matrix();
            if (shader != null) {
                shader.getLocalMatrix(matrix2);
                Matrix matrix3 = new Matrix(matrix2);
                matrix3.postConcat(matrix);
                shader.setLocalMatrix(matrix3);
            }
            this.a.drawPath(path2, this.d.e);
            this.a.setMatrix(matrix);
            if (shader != null) {
                shader.setLocalMatrix(matrix2);
                return;
            }
            return;
        }
        this.a.drawPath(path, this.d.e);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void d(String str, Object... objArr) {
        Log.w("SVGAndroidRenderer", String.format(str, objArr));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void e(String str, Object... objArr) {
        Log.e("SVGAndroidRenderer", String.format(str, objArr));
    }

    private void a(SVG.ac acVar) {
        a(acVar, a(acVar.a, acVar.b, acVar.c, acVar.d), acVar.x, acVar.w);
    }

    private void a(SVG.ac acVar, SVG.a aVar) {
        a(acVar, aVar, acVar.x, acVar.w);
    }

    private void a(SVG.ac acVar, SVG.a aVar, SVG.a aVar2, PreserveAspectRatio preserveAspectRatio) {
        f("Svg render", new Object[0]);
        if (aVar.c != 0.0f && aVar.d != 0.0f) {
            if (preserveAspectRatio == null) {
                preserveAspectRatio = acVar.w != null ? acVar.w : PreserveAspectRatio.c;
            }
            a(this.d, acVar);
            if (m()) {
                g gVar = this.d;
                gVar.f = aVar;
                if (!gVar.a.v.booleanValue()) {
                    a(this.d.f.a, this.d.f.b, this.d.f.c, this.d.f.d);
                }
                b(acVar, this.d.f);
                if (aVar2 != null) {
                    this.a.concat(a(this.d.f, aVar2, preserveAspectRatio));
                    this.d.g = acVar.x;
                } else {
                    this.a.translate(this.d.f.a, this.d.f.b);
                }
                boolean i2 = i();
                p();
                a((SVG.ag) acVar, true);
                if (i2) {
                    b((SVG.ah) acVar);
                }
                a((SVG.ah) acVar);
            }
        }
    }

    private SVG.a a(SVG.n nVar, SVG.n nVar2, SVG.n nVar3, SVG.n nVar4) {
        float f2 = 0.0f;
        float a2 = nVar != null ? nVar.a(this) : 0.0f;
        if (nVar2 != null) {
            f2 = nVar2.b(this);
        }
        SVG.a d2 = d();
        return new SVG.a(a2, f2, nVar3 != null ? nVar3.a(this) : d2.c, nVar4 != null ? nVar4.b(this) : d2.d);
    }

    private void a(SVG.k kVar) {
        f("Group render", new Object[0]);
        a(this.d, kVar);
        if (m()) {
            if (kVar.b != null) {
                this.a.concat(kVar.b);
            }
            d(kVar);
            boolean i2 = i();
            a((SVG.ag) kVar, true);
            if (i2) {
                b((SVG.ah) kVar);
            }
            a((SVG.ah) kVar);
        }
    }

    private void a(SVG.ah ahVar) {
        if (ahVar.v != null && ahVar.o != null) {
            Matrix matrix = new Matrix();
            if (this.g.peek().invert(matrix)) {
                float[] fArr = {ahVar.o.a, ahVar.o.b, ahVar.o.a(), ahVar.o.b, ahVar.o.a(), ahVar.o.b(), ahVar.o.a, ahVar.o.b()};
                matrix.preConcat(this.a.getMatrix());
                matrix.mapPoints(fArr);
                RectF rectF = new RectF(fArr[0], fArr[1], fArr[0], fArr[1]);
                for (int i2 = 2; i2 <= 6; i2 += 2) {
                    if (fArr[i2] < rectF.left) {
                        rectF.left = fArr[i2];
                    }
                    if (fArr[i2] > rectF.right) {
                        rectF.right = fArr[i2];
                    }
                    int i3 = i2 + 1;
                    if (fArr[i3] < rectF.top) {
                        rectF.top = fArr[i3];
                    }
                    if (fArr[i3] > rectF.bottom) {
                        rectF.bottom = fArr[i3];
                    }
                }
                SVG.ah ahVar2 = (SVG.ah) this.f.peek();
                if (ahVar2.o == null) {
                    ahVar2.o = SVG.a.a(rectF.left, rectF.top, rectF.right, rectF.bottom);
                } else {
                    ahVar2.o.a(SVG.a.a(rectF.left, rectF.top, rectF.right, rectF.bottom));
                }
            }
        }
    }

    private boolean i() {
        SVG.ak b2;
        if (!j()) {
            return false;
        }
        this.a.saveLayerAlpha(null, a(this.d.a.m.floatValue()), 31);
        this.e.push(this.d);
        this.d = new g(this.d);
        if (this.d.a.G == null || ((b2 = this.c.b(this.d.a.G)) != null && (b2 instanceof SVG.q))) {
            return true;
        }
        e("Mask reference '%s' not found", this.d.a.G);
        this.d.a.G = null;
        return true;
    }

    private void b(SVG.ah ahVar) {
        a(ahVar, ahVar.o);
    }

    private void a(SVG.ah ahVar, SVG.a aVar) {
        if (this.d.a.G != null) {
            Paint paint = new Paint();
            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
            this.a.saveLayer(null, paint, 31);
            Paint paint2 = new Paint();
            paint2.setColorFilter(new ColorMatrixColorFilter(new ColorMatrix(new float[]{0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.2127f, 0.7151f, 0.0722f, 0.0f, 0.0f})));
            this.a.saveLayer(null, paint2, 31);
            SVG.q qVar = (SVG.q) this.c.b(this.d.a.G);
            a(qVar, ahVar, aVar);
            this.a.restore();
            Paint paint3 = new Paint();
            paint3.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
            this.a.saveLayer(null, paint3, 31);
            a(qVar, ahVar, aVar);
            this.a.restore();
            this.a.restore();
        }
        g();
    }

    private boolean j() {
        return this.d.a.m.floatValue() < 1.0f || this.d.a.G != null;
    }

    private void a(SVG.ap apVar) {
        f("Switch render", new Object[0]);
        a(this.d, apVar);
        if (m()) {
            if (apVar.b != null) {
                this.a.concat(apVar.b);
            }
            d(apVar);
            boolean i2 = i();
            b(apVar);
            if (i2) {
                b((SVG.ah) apVar);
            }
            a((SVG.ah) apVar);
        }
    }

    private void b(SVG.ap apVar) {
        Set<String> e;
        String language = Locale.getDefault().getLanguage();
        f e2 = SVG.e();
        for (SVG.ak akVar : apVar.b()) {
            if (akVar instanceof SVG.ad) {
                SVG.ad adVar = (SVG.ad) akVar;
                if (adVar.d() == null && ((e = adVar.e()) == null || (!e.isEmpty() && e.contains(language)))) {
                    Set<String> c2 = adVar.c();
                    if (c2 != null) {
                        if (h == null) {
                            k();
                        }
                        if (!c2.isEmpty() && h.containsAll(c2)) {
                        }
                    }
                    Set<String> f2 = adVar.f();
                    if (f2 != null) {
                        if (!f2.isEmpty() && e2 != null) {
                            for (String str : f2) {
                                if (!e2.c(str)) {
                                    break;
                                }
                            }
                        }
                    }
                    Set<String> g2 = adVar.g();
                    if (g2 != null) {
                        if (!g2.isEmpty() && e2 != null) {
                            for (String str2 : g2) {
                                if (e2.a(str2, this.d.a.q.intValue(), String.valueOf(this.d.a.r)) == null) {
                                    break;
                                }
                            }
                        }
                    }
                    a(akVar);
                    return;
                }
            }
        }
    }

    private static synchronized void k() {
        synchronized (e.class) {
            h = new HashSet<>();
            h.add("Structure");
            h.add("BasicStructure");
            h.add("ConditionalProcessing");
            h.add("Image");
            h.add("Style");
            h.add("ViewportAttribute");
            h.add("Shape");
            h.add("BasicText");
            h.add("PaintAttribute");
            h.add("BasicPaintAttribute");
            h.add("OpacityAttribute");
            h.add("BasicGraphicsAttribute");
            h.add("Marker");
            h.add("Gradient");
            h.add("Pattern");
            h.add("Clip");
            h.add("BasicClip");
            h.add("Mask");
            h.add("View");
        }
    }

    private void a(SVG.ba baVar) {
        f("Use render", new Object[0]);
        if (baVar.e != null && baVar.e.b()) {
            return;
        }
        if (baVar.f == null || !baVar.f.b()) {
            a(this.d, baVar);
            if (m()) {
                SVG.ak b2 = baVar.u.b(baVar.a);
                if (b2 == null) {
                    e("Use reference '%s' not found", baVar.a);
                    return;
                }
                if (baVar.b != null) {
                    this.a.concat(baVar.b);
                }
                float f2 = 0.0f;
                float a2 = baVar.c != null ? baVar.c.a(this) : 0.0f;
                if (baVar.d != null) {
                    f2 = baVar.d.b(this);
                }
                this.a.translate(a2, f2);
                d(baVar);
                boolean i2 = i();
                a((SVG.ag) baVar);
                if (b2 instanceof SVG.ac) {
                    SVG.a a3 = a((SVG.n) null, (SVG.n) null, baVar.e, baVar.f);
                    f();
                    a((SVG.ac) b2, a3);
                    g();
                } else if (b2 instanceof SVG.aq) {
                    SVG.a a4 = a((SVG.n) null, (SVG.n) null, baVar.e != null ? baVar.e : new SVG.n(100.0f, SVG.Unit.percent), baVar.f != null ? baVar.f : new SVG.n(100.0f, SVG.Unit.percent));
                    f();
                    a((SVG.aq) b2, a4);
                    g();
                } else {
                    a(b2);
                }
                h();
                if (i2) {
                    b((SVG.ah) baVar);
                }
                a((SVG.ah) baVar);
            }
        }
    }

    private void a(SVG.t tVar) {
        f("Path render", new Object[0]);
        if (tVar.a != null) {
            a(this.d, tVar);
            if (!m() || !n()) {
                return;
            }
            if (this.d.c || this.d.b) {
                if (tVar.e != null) {
                    this.a.concat(tVar.e);
                }
                Path a2 = new c(tVar.a).a();
                if (tVar.o == null) {
                    tVar.o = b(a2);
                }
                a((SVG.ah) tVar);
                c((SVG.ah) tVar);
                d(tVar);
                boolean i2 = i();
                if (this.d.b) {
                    a2.setFillType(o());
                    a(tVar, a2);
                }
                if (this.d.c) {
                    a(a2);
                }
                a((SVG.j) tVar);
                if (i2) {
                    b((SVG.ah) tVar);
                }
            }
        }
    }

    private SVG.a b(Path path) {
        RectF rectF = new RectF();
        path.computeBounds(rectF, true);
        return new SVG.a(rectF.left, rectF.top, rectF.width(), rectF.height());
    }

    private void a(SVG.z zVar) {
        f("Rect render", new Object[0]);
        if (zVar.c != null && zVar.d != null && !zVar.c.b() && !zVar.d.b()) {
            a(this.d, zVar);
            if (m() && n()) {
                if (zVar.e != null) {
                    this.a.concat(zVar.e);
                }
                Path b2 = b(zVar);
                a((SVG.ah) zVar);
                c((SVG.ah) zVar);
                d(zVar);
                boolean i2 = i();
                if (this.d.b) {
                    a(zVar, b2);
                }
                if (this.d.c) {
                    a(b2);
                }
                if (i2) {
                    b((SVG.ah) zVar);
                }
            }
        }
    }

    private void a(SVG.c cVar) {
        f("Circle render", new Object[0]);
        if (cVar.c != null && !cVar.c.b()) {
            a(this.d, cVar);
            if (m() && n()) {
                if (cVar.e != null) {
                    this.a.concat(cVar.e);
                }
                Path b2 = b(cVar);
                a((SVG.ah) cVar);
                c((SVG.ah) cVar);
                d(cVar);
                boolean i2 = i();
                if (this.d.b) {
                    a(cVar, b2);
                }
                if (this.d.c) {
                    a(b2);
                }
                if (i2) {
                    b((SVG.ah) cVar);
                }
            }
        }
    }

    private void a(SVG.h hVar) {
        f("Ellipse render", new Object[0]);
        if (hVar.c != null && hVar.d != null && !hVar.c.b() && !hVar.d.b()) {
            a(this.d, hVar);
            if (m() && n()) {
                if (hVar.e != null) {
                    this.a.concat(hVar.e);
                }
                Path b2 = b(hVar);
                a((SVG.ah) hVar);
                c((SVG.ah) hVar);
                d(hVar);
                boolean i2 = i();
                if (this.d.b) {
                    a(hVar, b2);
                }
                if (this.d.c) {
                    a(b2);
                }
                if (i2) {
                    b((SVG.ah) hVar);
                }
            }
        }
    }

    private void a(SVG.o oVar) {
        f("Line render", new Object[0]);
        a(this.d, oVar);
        if (m() && n() && this.d.c) {
            if (oVar.e != null) {
                this.a.concat(oVar.e);
            }
            Path c2 = c(oVar);
            a((SVG.ah) oVar);
            c((SVG.ah) oVar);
            d(oVar);
            boolean i2 = i();
            a(c2);
            a((SVG.j) oVar);
            if (i2) {
                b((SVG.ah) oVar);
            }
        }
    }

    private List<b> b(SVG.o oVar) {
        float a2 = oVar.a != null ? oVar.a.a(this) : 0.0f;
        float b2 = oVar.b != null ? oVar.b.b(this) : 0.0f;
        float a3 = oVar.c != null ? oVar.c.a(this) : 0.0f;
        float b3 = oVar.d != null ? oVar.d.b(this) : 0.0f;
        ArrayList arrayList = new ArrayList(2);
        float f2 = a3 - a2;
        float f3 = b3 - b2;
        arrayList.add(new b(a2, b2, f2, f3));
        arrayList.add(new b(a3, b3, f2, f3));
        return arrayList;
    }

    private void a(SVG.x xVar) {
        f("PolyLine render", new Object[0]);
        a(this.d, xVar);
        if (!m() || !n()) {
            return;
        }
        if (this.d.c || this.d.b) {
            if (xVar.e != null) {
                this.a.concat(xVar.e);
            }
            if (xVar.a.length >= 2) {
                Path c2 = c(xVar);
                a((SVG.ah) xVar);
                c2.setFillType(o());
                c((SVG.ah) xVar);
                d(xVar);
                boolean i2 = i();
                if (this.d.b) {
                    a(xVar, c2);
                }
                if (this.d.c) {
                    a(c2);
                }
                a((SVG.j) xVar);
                if (i2) {
                    b((SVG.ah) xVar);
                }
            }
        }
    }

    private List<b> b(SVG.x xVar) {
        int length = xVar.a.length;
        if (length < 2) {
            return null;
        }
        ArrayList arrayList = new ArrayList();
        b bVar = new b(xVar.a[0], xVar.a[1], 0.0f, 0.0f);
        float f2 = 0.0f;
        float f3 = 0.0f;
        for (int i2 = 2; i2 < length; i2 += 2) {
            f2 = xVar.a[i2];
            f3 = xVar.a[i2 + 1];
            bVar.a(f2, f3);
            arrayList.add(bVar);
            bVar = new b(f2, f3, f2 - bVar.a, f3 - bVar.b);
        }
        if (!(xVar instanceof SVG.y)) {
            arrayList.add(bVar);
        } else if (!(f2 == xVar.a[0] || f3 == xVar.a[1])) {
            float f4 = xVar.a[0];
            float f5 = xVar.a[1];
            bVar.a(f4, f5);
            arrayList.add(bVar);
            b bVar2 = new b(f4, f5, f4 - bVar.a, f5 - bVar.b);
            bVar2.a((b) arrayList.get(0));
            arrayList.add(bVar2);
            arrayList.set(0, bVar2);
        }
        return arrayList;
    }

    private void a(SVG.y yVar) {
        f("Polygon render", new Object[0]);
        a(this.d, yVar);
        if (!m() || !n()) {
            return;
        }
        if (this.d.c || this.d.b) {
            if (yVar.e != null) {
                this.a.concat(yVar.e);
            }
            if (yVar.a.length >= 2) {
                Path c2 = c((SVG.x) yVar);
                a((SVG.ah) yVar);
                c((SVG.ah) yVar);
                d(yVar);
                boolean i2 = i();
                if (this.d.b) {
                    a(yVar, c2);
                }
                if (this.d.c) {
                    a(c2);
                }
                a((SVG.j) yVar);
                if (i2) {
                    b((SVG.ah) yVar);
                }
            }
        }
    }

    private void a(SVG.at atVar) {
        f("Text render", new Object[0]);
        a(this.d, atVar);
        if (m()) {
            if (atVar.a != null) {
                this.a.concat(atVar.a);
            }
            float f2 = 0.0f;
            float a2 = (atVar.b == null || atVar.b.size() == 0) ? 0.0f : ((SVG.n) atVar.b.get(0)).a(this);
            float b2 = (atVar.c == null || atVar.c.size() == 0) ? 0.0f : ((SVG.n) atVar.c.get(0)).b(this);
            float a3 = (atVar.d == null || atVar.d.size() == 0) ? 0.0f : ((SVG.n) atVar.d.get(0)).a(this);
            if (!(atVar.e == null || atVar.e.size() == 0)) {
                f2 = ((SVG.n) atVar.e.get(0)).b(this);
            }
            SVG.Style.TextAnchor l = l();
            if (l != SVG.Style.TextAnchor.Start) {
                float a4 = a((SVG.av) atVar);
                a2 = l == SVG.Style.TextAnchor.Middle ? a2 - (a4 / 2.0f) : a2 - a4;
            }
            if (atVar.o == null) {
                h hVar = new h(a2, b2);
                a((SVG.av) atVar, (i) hVar);
                atVar.o = new SVG.a(hVar.c.left, hVar.c.top, hVar.c.width(), hVar.c.height());
            }
            a((SVG.ah) atVar);
            c((SVG.ah) atVar);
            d(atVar);
            boolean i2 = i();
            a((SVG.av) atVar, new C0000e(a2 + a3, b2 + f2));
            if (i2) {
                b((SVG.ah) atVar);
            }
        }
    }

    private SVG.Style.TextAnchor l() {
        if (this.d.a.t == SVG.Style.TextDirection.LTR || this.d.a.u == SVG.Style.TextAnchor.Middle) {
            return this.d.a.u;
        }
        return this.d.a.u == SVG.Style.TextAnchor.Start ? SVG.Style.TextAnchor.End : SVG.Style.TextAnchor.Start;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* renamed from: com.caverock.androidsvg.e$e  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public class C0000e extends i {
        float b;
        float c;

        C0000e(float f, float f2) {
            super();
            this.b = f;
            this.c = f2;
        }

        @Override // com.caverock.androidsvg.e.i
        public void a(String str) {
            e.f("TextSequence render", new Object[0]);
            if (e.this.n()) {
                if (e.this.d.b) {
                    e.this.a.drawText(str, this.b, this.c, e.this.d.d);
                }
                if (e.this.d.c) {
                    e.this.a.drawText(str, this.b, this.c, e.this.d.e);
                }
            }
            this.b += e.this.d.d.measureText(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public abstract class i {
        public abstract void a(String str);

        public boolean a(SVG.av avVar) {
            return true;
        }

        private i() {
        }
    }

    private void a(SVG.av avVar, i iVar) {
        if (m()) {
            Iterator it = avVar.i.iterator();
            boolean z = true;
            while (it.hasNext()) {
                SVG.ak akVar = (SVG.ak) it.next();
                if (akVar instanceof SVG.az) {
                    iVar.a(a(((SVG.az) akVar).a, z, !it.hasNext()));
                } else {
                    a(akVar, iVar);
                }
                z = false;
            }
        }
    }

    private void a(SVG.ak akVar, i iVar) {
        float f2;
        float f3;
        float f4;
        SVG.Style.TextAnchor l;
        if (iVar.a((SVG.av) akVar)) {
            if (akVar instanceof SVG.aw) {
                f();
                a((SVG.aw) akVar);
                g();
                return;
            }
            boolean z = true;
            if (akVar instanceof SVG.as) {
                f("TSpan render", new Object[0]);
                f();
                SVG.as asVar = (SVG.as) akVar;
                a(this.d, asVar);
                if (m()) {
                    if (asVar.b == null || asVar.b.size() <= 0) {
                        z = false;
                    }
                    boolean z2 = iVar instanceof C0000e;
                    float f5 = 0.0f;
                    if (z2) {
                        float a2 = !z ? ((C0000e) iVar).b : ((SVG.n) asVar.b.get(0)).a(this);
                        f3 = (asVar.c == null || asVar.c.size() == 0) ? ((C0000e) iVar).c : ((SVG.n) asVar.c.get(0)).b(this);
                        f2 = (asVar.d == null || asVar.d.size() == 0) ? 0.0f : ((SVG.n) asVar.d.get(0)).a(this);
                        if (!(asVar.e == null || asVar.e.size() == 0)) {
                            f5 = ((SVG.n) asVar.e.get(0)).b(this);
                        }
                        f4 = f5;
                        f5 = a2;
                    } else {
                        f4 = 0.0f;
                        f3 = 0.0f;
                        f2 = 0.0f;
                    }
                    if (z && (l = l()) != SVG.Style.TextAnchor.Start) {
                        float a3 = a((SVG.av) asVar);
                        f5 = l == SVG.Style.TextAnchor.Middle ? f5 - (a3 / 2.0f) : f5 - a3;
                    }
                    c((SVG.ah) asVar.h());
                    if (z2) {
                        C0000e eVar = (C0000e) iVar;
                        eVar.b = f5 + f2;
                        eVar.c = f3 + f4;
                    }
                    boolean i2 = i();
                    a((SVG.av) asVar, iVar);
                    if (i2) {
                        b((SVG.ah) asVar);
                    }
                }
                g();
            } else if (akVar instanceof SVG.ar) {
                f();
                SVG.ar arVar = (SVG.ar) akVar;
                a(this.d, arVar);
                if (m()) {
                    c((SVG.ah) arVar.h());
                    SVG.ak b2 = akVar.u.b(arVar.a);
                    if (b2 == null || !(b2 instanceof SVG.av)) {
                        e("Tref reference '%s' not found", arVar.a);
                    } else {
                        StringBuilder sb = new StringBuilder();
                        a((SVG.av) b2, sb);
                        if (sb.length() > 0) {
                            iVar.a(sb.toString());
                        }
                    }
                }
                g();
            }
        }
    }

    private void a(SVG.aw awVar) {
        f("TextPath render", new Object[0]);
        a(this.d, awVar);
        if (m() && n()) {
            SVG.ak b2 = awVar.u.b(awVar.a);
            if (b2 == null) {
                e("TextPath reference '%s' not found", awVar.a);
                return;
            }
            SVG.t tVar = (SVG.t) b2;
            Path a2 = new c(tVar.a).a();
            if (tVar.e != null) {
                a2.transform(tVar.e);
            }
            float a3 = awVar.b != null ? awVar.b.a(this, new PathMeasure(a2, false).getLength()) : 0.0f;
            SVG.Style.TextAnchor l = l();
            if (l != SVG.Style.TextAnchor.Start) {
                float a4 = a((SVG.av) awVar);
                a3 = l == SVG.Style.TextAnchor.Middle ? a3 - (a4 / 2.0f) : a3 - a4;
            }
            c((SVG.ah) awVar.h());
            boolean i2 = i();
            a((SVG.av) awVar, (i) new d(a2, a3, 0.0f));
            if (i2) {
                b((SVG.ah) awVar);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class d extends C0000e {
        private Path f;

        d(Path path, float f, float f2) {
            super(f, f2);
            this.f = path;
        }

        @Override // com.caverock.androidsvg.e.C0000e, com.caverock.androidsvg.e.i
        public void a(String str) {
            if (e.this.n()) {
                if (e.this.d.b) {
                    e.this.a.drawTextOnPath(str, this.f, this.b, this.c, e.this.d.d);
                }
                if (e.this.d.c) {
                    e.this.a.drawTextOnPath(str, this.f, this.b, this.c, e.this.d.e);
                }
            }
            this.b += e.this.d.d.measureText(str);
        }
    }

    private float a(SVG.av avVar) {
        j jVar = new j();
        a(avVar, (i) jVar);
        return jVar.a;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class j extends i {
        float a;

        private j() {
            super();
            this.a = 0.0f;
        }

        @Override // com.caverock.androidsvg.e.i
        public void a(String str) {
            this.a += e.this.d.d.measureText(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class h extends i {
        float a;
        float b;
        RectF c = new RectF();

        h(float f, float f2) {
            super();
            this.a = f;
            this.b = f2;
        }

        @Override // com.caverock.androidsvg.e.i
        public boolean a(SVG.av avVar) {
            if (!(avVar instanceof SVG.aw)) {
                return true;
            }
            SVG.aw awVar = (SVG.aw) avVar;
            SVG.ak b = avVar.u.b(awVar.a);
            if (b == null) {
                e.e("TextPath path reference '%s' not found", awVar.a);
                return false;
            }
            SVG.t tVar = (SVG.t) b;
            Path a = new c(tVar.a).a();
            if (tVar.e != null) {
                a.transform(tVar.e);
            }
            RectF rectF = new RectF();
            a.computeBounds(rectF, true);
            this.c.union(rectF);
            return false;
        }

        @Override // com.caverock.androidsvg.e.i
        public void a(String str) {
            if (e.this.n()) {
                Rect rect = new Rect();
                e.this.d.d.getTextBounds(str, 0, str.length(), rect);
                RectF rectF = new RectF(rect);
                rectF.offset(this.a, this.b);
                this.c.union(rectF);
            }
            this.a += e.this.d.d.measureText(str);
        }
    }

    private void a(SVG.av avVar, StringBuilder sb) {
        Iterator it = avVar.i.iterator();
        boolean z = true;
        while (it.hasNext()) {
            SVG.ak akVar = (SVG.ak) it.next();
            if (akVar instanceof SVG.av) {
                a((SVG.av) akVar, sb);
            } else if (akVar instanceof SVG.az) {
                sb.append(a(((SVG.az) akVar).a, z, !it.hasNext()));
            }
            z = false;
        }
    }

    private String a(String str, boolean z, boolean z2) {
        if (this.d.h) {
            return str.replaceAll("[\\n\\t]", " ");
        }
        String replaceAll = str.replaceAll("\\n", "").replaceAll("\\t", " ");
        if (z) {
            replaceAll = replaceAll.replaceAll("^\\s+", "");
        }
        if (z2) {
            replaceAll = replaceAll.replaceAll("\\s+$", "");
        }
        return replaceAll.replaceAll("\\s{2,}", " ");
    }

    private void a(SVG.aq aqVar, SVG.a aVar) {
        f("Symbol render", new Object[0]);
        if (aVar.c != 0.0f && aVar.d != 0.0f) {
            PreserveAspectRatio preserveAspectRatio = aqVar.w != null ? aqVar.w : PreserveAspectRatio.c;
            a(this.d, aqVar);
            g gVar = this.d;
            gVar.f = aVar;
            if (!gVar.a.v.booleanValue()) {
                a(this.d.f.a, this.d.f.b, this.d.f.c, this.d.f.d);
            }
            if (aqVar.x != null) {
                this.a.concat(a(this.d.f, aqVar.x, preserveAspectRatio));
                this.d.g = aqVar.x;
            } else {
                this.a.translate(this.d.f.a, this.d.f.b);
            }
            boolean i2 = i();
            a((SVG.ag) aqVar, true);
            if (i2) {
                b((SVG.ah) aqVar);
            }
            a((SVG.ah) aqVar);
        }
    }

    private void a(SVG.m mVar) {
        int i2 = 0;
        f("Image render", new Object[0]);
        if (mVar.d != null && !mVar.d.b() && mVar.e != null && !mVar.e.b() && mVar.a != null) {
            PreserveAspectRatio preserveAspectRatio = mVar.w != null ? mVar.w : PreserveAspectRatio.c;
            Bitmap a2 = a(mVar.a);
            if (a2 == null) {
                f e = SVG.e();
                if (e != null) {
                    a2 = e.a(mVar.a);
                } else {
                    return;
                }
            }
            if (a2 == null) {
                e("Could not locate image '%s'", mVar.a);
                return;
            }
            SVG.a aVar = new SVG.a(0.0f, 0.0f, (float) a2.getWidth(), (float) a2.getHeight());
            a(this.d, mVar);
            if (m() && n()) {
                if (mVar.f != null) {
                    this.a.concat(mVar.f);
                }
                this.d.f = new SVG.a(mVar.b != null ? mVar.b.a(this) : 0.0f, mVar.c != null ? mVar.c.b(this) : 0.0f, mVar.d.a(this), mVar.e.a(this));
                if (!this.d.a.v.booleanValue()) {
                    a(this.d.f.a, this.d.f.b, this.d.f.c, this.d.f.d);
                }
                mVar.o = this.d.f;
                a((SVG.ah) mVar);
                d(mVar);
                boolean i3 = i();
                p();
                this.a.save();
                this.a.concat(a(this.d.f, aVar, preserveAspectRatio));
                if (this.d.a.M != SVG.Style.RenderQuality.optimizeSpeed) {
                    i2 = 2;
                }
                this.a.drawBitmap(a2, 0.0f, 0.0f, new Paint(i2));
                this.a.restore();
                if (i3) {
                    b((SVG.ah) mVar);
                }
            }
        }
    }

    private Bitmap a(String str) {
        int indexOf;
        if (!str.startsWith("data:") || str.length() < 14 || (indexOf = str.indexOf(44)) < 12 || !";base64".equals(str.substring(indexOf - 7, indexOf))) {
            return null;
        }
        try {
            byte[] decode = Base64.decode(str.substring(indexOf + 1), 0);
            return BitmapFactory.decodeByteArray(decode, 0, decode.length);
        } catch (Exception e) {
            Log.e("SVGAndroidRenderer", "Could not decode bad Data URL", e);
            return null;
        }
    }

    private boolean m() {
        if (this.d.a.A != null) {
            return this.d.a.A.booleanValue();
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean n() {
        if (this.d.a.B != null) {
            return this.d.a.B.booleanValue();
        }
        return true;
    }

    private Matrix a(SVG.a aVar, SVG.a aVar2, PreserveAspectRatio preserveAspectRatio) {
        Matrix matrix = new Matrix();
        if (preserveAspectRatio == null || preserveAspectRatio.a() == null) {
            return matrix;
        }
        float f2 = aVar.c / aVar2.c;
        float f3 = aVar.d / aVar2.d;
        float f4 = -aVar2.a;
        float f5 = -aVar2.b;
        if (preserveAspectRatio.equals(PreserveAspectRatio.b)) {
            matrix.preTranslate(aVar.a, aVar.b);
            matrix.preScale(f2, f3);
            matrix.preTranslate(f4, f5);
            return matrix;
        }
        float max = preserveAspectRatio.b() == PreserveAspectRatio.Scale.slice ? Math.max(f2, f3) : Math.min(f2, f3);
        float f6 = aVar.c / max;
        float f7 = aVar.d / max;
        switch (preserveAspectRatio.a()) {
            case xMidYMin:
            case xMidYMid:
            case xMidYMax:
                f4 -= (aVar2.c - f6) / 2.0f;
                break;
            case xMaxYMin:
            case xMaxYMid:
            case xMaxYMax:
                f4 -= aVar2.c - f6;
                break;
        }
        switch (preserveAspectRatio.a()) {
            case xMidYMid:
            case xMaxYMid:
            case xMinYMid:
                f5 -= (aVar2.d - f7) / 2.0f;
                break;
            case xMidYMax:
            case xMaxYMax:
            case xMinYMax:
                f5 -= aVar2.d - f7;
                break;
        }
        matrix.preTranslate(aVar.a, aVar.b);
        matrix.preScale(max, max);
        matrix.preTranslate(f4, f5);
        return matrix;
    }

    private boolean a(SVG.Style style, long j2) {
        return (j2 & style.a) != 0;
    }

    private void a(g gVar, SVG.Style style) {
        if (a(style, 4096)) {
            gVar.a.n = style.n;
        }
        if (a(style, 2048)) {
            gVar.a.m = style.m;
        }
        boolean z = false;
        if (a(style, 1)) {
            gVar.a.b = style.b;
            gVar.b = (style.b == null || style.b == SVG.e.c) ? false : true;
        }
        if (a(style, 4)) {
            gVar.a.d = style.d;
        }
        if (a(style, 6149)) {
            a(gVar, true, gVar.a.b);
        }
        if (a(style, 2)) {
            gVar.a.c = style.c;
        }
        if (a(style, 8)) {
            gVar.a.e = style.e;
            gVar.c = (style.e == null || style.e == SVG.e.c) ? false : true;
        }
        if (a(style, 16)) {
            gVar.a.f = style.f;
        }
        if (a(style, 6168)) {
            a(gVar, false, gVar.a.e);
        }
        if (a(style, 34359738368L)) {
            gVar.a.L = style.L;
        }
        if (a(style, 32)) {
            gVar.a.g = style.g;
            gVar.e.setStrokeWidth(gVar.a.g.c(this));
        }
        if (a(style, 64)) {
            gVar.a.h = style.h;
            switch (style.h) {
                case Butt:
                    gVar.e.setStrokeCap(Paint.Cap.BUTT);
                    break;
                case Round:
                    gVar.e.setStrokeCap(Paint.Cap.ROUND);
                    break;
                case Square:
                    gVar.e.setStrokeCap(Paint.Cap.SQUARE);
                    break;
            }
        }
        if (a(style, 128)) {
            gVar.a.i = style.i;
            switch (style.i) {
                case Miter:
                    gVar.e.setStrokeJoin(Paint.Join.MITER);
                    break;
                case Round:
                    gVar.e.setStrokeJoin(Paint.Join.ROUND);
                    break;
                case Bevel:
                    gVar.e.setStrokeJoin(Paint.Join.BEVEL);
                    break;
            }
        }
        if (a(style, 256)) {
            gVar.a.j = style.j;
            gVar.e.setStrokeMiter(style.j.floatValue());
        }
        if (a(style, 512)) {
            gVar.a.k = style.k;
        }
        if (a(style, 1024)) {
            gVar.a.l = style.l;
        }
        Typeface typeface = null;
        if (a(style, 1536)) {
            if (gVar.a.k == null) {
                gVar.e.setPathEffect(null);
            } else {
                int length = gVar.a.k.length;
                int i2 = length % 2 == 0 ? length : length * 2;
                float[] fArr = new float[i2];
                float f2 = 0.0f;
                for (int i3 = 0; i3 < i2; i3++) {
                    fArr[i3] = gVar.a.k[i3 % length].c(this);
                    f2 += fArr[i3];
                }
                if (f2 == 0.0f) {
                    gVar.e.setPathEffect(null);
                } else {
                    float c2 = gVar.a.l.c(this);
                    if (c2 < 0.0f) {
                        c2 = (c2 % f2) + f2;
                    }
                    gVar.e.setPathEffect(new DashPathEffect(fArr, c2));
                }
            }
        }
        if (a(style, 16384)) {
            float b2 = b();
            gVar.a.p = style.p;
            gVar.d.setTextSize(style.p.a(this, b2));
            gVar.e.setTextSize(style.p.a(this, b2));
        }
        if (a(style, 8192)) {
            gVar.a.o = style.o;
        }
        if (a(style, 32768)) {
            if (style.q.intValue() == -1 && gVar.a.q.intValue() > 100) {
                SVG.Style style2 = gVar.a;
                style2.q = Integer.valueOf(style2.q.intValue() - 100);
            } else if (style.q.intValue() != 1 || gVar.a.q.intValue() >= 900) {
                gVar.a.q = style.q;
            } else {
                SVG.Style style3 = gVar.a;
                style3.q = Integer.valueOf(style3.q.intValue() + 100);
            }
        }
        if (a(style, 65536)) {
            gVar.a.r = style.r;
        }
        if (a(style, 106496)) {
            if (!(gVar.a.o == null || this.c == null)) {
                f e = SVG.e();
                for (String str : gVar.a.o) {
                    Typeface a2 = a(str, gVar.a.q, gVar.a.r);
                    if (a2 != null || e == null) {
                        typeface = a2;
                        continue;
                    } else {
                        typeface = e.a(str, gVar.a.q.intValue(), String.valueOf(gVar.a.r));
                        continue;
                    }
                    if (typeface != null) {
                    }
                }
            }
            if (typeface == null) {
                typeface = a("serif", gVar.a.q, gVar.a.r);
            }
            gVar.d.setTypeface(typeface);
            gVar.e.setTypeface(typeface);
        }
        if (a(style, 131072)) {
            gVar.a.s = style.s;
            gVar.d.setStrikeThruText(style.s == SVG.Style.TextDecoration.LineThrough);
            gVar.d.setUnderlineText(style.s == SVG.Style.TextDecoration.Underline);
            if (Build.VERSION.SDK_INT >= 17) {
                gVar.e.setStrikeThruText(style.s == SVG.Style.TextDecoration.LineThrough);
                Paint paint = gVar.e;
                if (style.s == SVG.Style.TextDecoration.Underline) {
                    z = true;
                }
                paint.setUnderlineText(z);
            }
        }
        if (a(style, 68719476736L)) {
            gVar.a.t = style.t;
        }
        if (a(style, 262144)) {
            gVar.a.u = style.u;
        }
        if (a(style, 524288)) {
            gVar.a.v = style.v;
        }
        if (a(style, 2097152)) {
            gVar.a.x = style.x;
        }
        if (a(style, 4194304)) {
            gVar.a.y = style.y;
        }
        if (a(style, 8388608)) {
            gVar.a.z = style.z;
        }
        if (a(style, 16777216)) {
            gVar.a.A = style.A;
        }
        if (a(style, 33554432)) {
            gVar.a.B = style.B;
        }
        if (a(style, 1048576)) {
            gVar.a.w = style.w;
        }
        if (a(style, 268435456)) {
            gVar.a.E = style.E;
        }
        if (a(style, 536870912)) {
            gVar.a.F = style.F;
        }
        if (a(style, 1073741824)) {
            gVar.a.G = style.G;
        }
        if (a(style, 67108864)) {
            gVar.a.C = style.C;
        }
        if (a(style, 134217728)) {
            gVar.a.D = style.D;
        }
        if (a(style, 8589934592L)) {
            gVar.a.J = style.J;
        }
        if (a(style, 17179869184L)) {
            gVar.a.K = style.K;
        }
        if (a(style, 137438953472L)) {
            gVar.a.M = style.M;
        }
    }

    private void a(g gVar, boolean z, SVG.al alVar) {
        int i2;
        float floatValue = (z ? gVar.a.d : gVar.a.f).floatValue();
        if (alVar instanceof SVG.e) {
            i2 = ((SVG.e) alVar).a;
        } else if (alVar instanceof SVG.f) {
            i2 = gVar.a.n.a;
        } else {
            return;
        }
        int a2 = a(i2, floatValue);
        if (z) {
            gVar.d.setColor(a2);
        } else {
            gVar.e.setColor(a2);
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x0055, code lost:
        if (r6.equals("sans-serif") != false) goto L_0x0059;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private android.graphics.Typeface a(java.lang.String r6, java.lang.Integer r7, com.caverock.androidsvg.SVG.Style.FontStyle r8) {
        /*
            r5 = this;
            com.caverock.androidsvg.SVG$Style$FontStyle r0 = com.caverock.androidsvg.SVG.Style.FontStyle.Italic
            r1 = 1
            r2 = 0
            if (r8 != r0) goto L_0x0008
            r8 = 1
            goto L_0x0009
        L_0x0008:
            r8 = 0
        L_0x0009:
            int r7 = r7.intValue()
            r0 = 500(0x1f4, float:7.0E-43)
            r3 = 3
            r4 = 2
            if (r7 <= r0) goto L_0x0019
            if (r8 == 0) goto L_0x0017
            r7 = 3
            goto L_0x001e
        L_0x0017:
            r7 = 1
            goto L_0x001e
        L_0x0019:
            if (r8 == 0) goto L_0x001d
            r7 = 2
            goto L_0x001e
        L_0x001d:
            r7 = 0
        L_0x001e:
            r8 = -1
            int r0 = r6.hashCode()
            switch(r0) {
                case -1536685117: goto L_0x004f;
                case -1431958525: goto L_0x0045;
                case -1081737434: goto L_0x003b;
                case 109326717: goto L_0x0031;
                case 1126973893: goto L_0x0027;
                default: goto L_0x0026;
            }
        L_0x0026:
            goto L_0x0058
        L_0x0027:
            java.lang.String r0 = "cursive"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0058
            r1 = 3
            goto L_0x0059
        L_0x0031:
            java.lang.String r0 = "serif"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0058
            r1 = 0
            goto L_0x0059
        L_0x003b:
            java.lang.String r0 = "fantasy"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0058
            r1 = 4
            goto L_0x0059
        L_0x0045:
            java.lang.String r0 = "monospace"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0058
            r1 = 2
            goto L_0x0059
        L_0x004f:
            java.lang.String r0 = "sans-serif"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0058
            goto L_0x0059
        L_0x0058:
            r1 = -1
        L_0x0059:
            switch(r1) {
                case 0: goto L_0x007a;
                case 1: goto L_0x0073;
                case 2: goto L_0x006c;
                case 3: goto L_0x0065;
                case 4: goto L_0x005e;
                default: goto L_0x005c;
            }
        L_0x005c:
            r6 = 0
            goto L_0x0080
        L_0x005e:
            android.graphics.Typeface r6 = android.graphics.Typeface.SANS_SERIF
            android.graphics.Typeface r6 = android.graphics.Typeface.create(r6, r7)
            goto L_0x0080
        L_0x0065:
            android.graphics.Typeface r6 = android.graphics.Typeface.SANS_SERIF
            android.graphics.Typeface r6 = android.graphics.Typeface.create(r6, r7)
            goto L_0x0080
        L_0x006c:
            android.graphics.Typeface r6 = android.graphics.Typeface.MONOSPACE
            android.graphics.Typeface r6 = android.graphics.Typeface.create(r6, r7)
            goto L_0x0080
        L_0x0073:
            android.graphics.Typeface r6 = android.graphics.Typeface.SANS_SERIF
            android.graphics.Typeface r6 = android.graphics.Typeface.create(r6, r7)
            goto L_0x0080
        L_0x007a:
            android.graphics.Typeface r6 = android.graphics.Typeface.SERIF
            android.graphics.Typeface r6 = android.graphics.Typeface.create(r6, r7)
        L_0x0080:
            return r6
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.e.a(java.lang.String, java.lang.Integer, com.caverock.androidsvg.SVG$Style$FontStyle):android.graphics.Typeface");
    }

    private static int a(int i2, float f2) {
        int i3 = 255;
        int round = Math.round(((float) ((i2 >> 24) & 255)) * f2);
        if (round < 0) {
            i3 = 0;
        } else if (round <= 255) {
            i3 = round;
        }
        return (i2 & 16777215) | (i3 << 24);
    }

    private Path.FillType o() {
        if (this.d.a.c == null || this.d.a.c != SVG.Style.FillRule.EvenOdd) {
            return Path.FillType.WINDING;
        }
        return Path.FillType.EVEN_ODD;
    }

    private void a(float f2, float f3, float f4, float f5) {
        float f6 = f4 + f2;
        float f7 = f5 + f3;
        if (this.d.a.w != null) {
            f2 += this.d.a.w.d.a(this);
            f3 += this.d.a.w.a.b(this);
            f6 -= this.d.a.w.b.a(this);
            f7 -= this.d.a.w.c.b(this);
        }
        this.a.clipRect(f2, f3, f6, f7);
    }

    private void p() {
        int i2;
        if (this.d.a.J instanceof SVG.e) {
            i2 = ((SVG.e) this.d.a.J).a;
        } else if (this.d.a.J instanceof SVG.f) {
            i2 = this.d.a.n.a;
        } else {
            return;
        }
        if (this.d.a.K != null) {
            i2 = a(i2, this.d.a.K.floatValue());
        }
        this.a.drawColor(i2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class c implements SVG.v {
        Path a = new Path();
        float b;
        float c;

        c(SVG.u uVar) {
            if (uVar != null) {
                uVar.a(this);
            }
        }

        Path a() {
            return this.a;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2) {
            this.a.moveTo(f, f2);
            this.b = f;
            this.c = f2;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void b(float f, float f2) {
            this.a.lineTo(f, f2);
            this.b = f;
            this.c = f2;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, float f4, float f5, float f6) {
            this.a.cubicTo(f, f2, f3, f4, f5, f6);
            this.b = f5;
            this.c = f6;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, float f4) {
            this.a.quadTo(f, f2, f3, f4);
            this.b = f3;
            this.c = f4;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, boolean z, boolean z2, float f4, float f5) {
            e.b(this.b, this.c, f, f2, f3, z, z2, f4, f5, this);
            this.b = f4;
            this.c = f5;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void b() {
            this.a.close();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void b(float f2, float f3, float f4, float f5, float f6, boolean z, boolean z2, float f7, float f8, SVG.v vVar) {
        float f9;
        SVG.v vVar2;
        if (!(f2 == f7 && f3 == f8)) {
            if (f4 == 0.0f) {
                f9 = f7;
                vVar2 = vVar;
            } else if (f5 == 0.0f) {
                vVar2 = vVar;
                f9 = f7;
            } else {
                float abs = Math.abs(f4);
                float abs2 = Math.abs(f5);
                double d2 = (double) f6;
                Double.isNaN(d2);
                double radians = Math.toRadians(d2 % 360.0d);
                double cos = Math.cos(radians);
                double sin = Math.sin(radians);
                double d3 = (double) (f2 - f7);
                Double.isNaN(d3);
                double d4 = d3 / 2.0d;
                double d5 = (double) (f3 - f8);
                Double.isNaN(d5);
                double d6 = d5 / 2.0d;
                double d7 = (cos * d4) + (sin * d6);
                double d8 = ((-sin) * d4) + (d6 * cos);
                double d9 = (double) (abs * abs);
                double d10 = (double) (abs2 * abs2);
                double d11 = d7 * d7;
                double d12 = d8 * d8;
                Double.isNaN(d9);
                Double.isNaN(d10);
                double d13 = (d11 / d9) + (d12 / d10);
                if (d13 > 0.99999d) {
                    double sqrt = Math.sqrt(d13) * 1.00001d;
                    double d14 = (double) abs;
                    Double.isNaN(d14);
                    abs = (float) (d14 * sqrt);
                    double d15 = (double) abs2;
                    Double.isNaN(d15);
                    abs2 = (float) (sqrt * d15);
                    d9 = (double) (abs * abs);
                    d10 = (double) (abs2 * abs2);
                }
                double d16 = 1.0d;
                double d17 = z == z2 ? -1.0d : 1.0d;
                double d18 = d9 * d10;
                double d19 = d9 * d12;
                double d20 = d10 * d11;
                double d21 = ((d18 - d19) - d20) / (d19 + d20);
                if (d21 < 0.0d) {
                    d21 = 0.0d;
                }
                double sqrt2 = d17 * Math.sqrt(d21);
                double d22 = (double) abs;
                Double.isNaN(d22);
                double d23 = (double) abs2;
                Double.isNaN(d23);
                double d24 = ((d22 * d8) / d23) * sqrt2;
                Double.isNaN(d23);
                Double.isNaN(d22);
                double d25 = sqrt2 * (-((d23 * d7) / d22));
                double d26 = (double) (f2 + f7);
                Double.isNaN(d26);
                double d27 = (double) (f3 + f8);
                Double.isNaN(d27);
                double d28 = (d26 / 2.0d) + ((cos * d24) - (sin * d25));
                double d29 = (d27 / 2.0d) + (sin * d24) + (cos * d25);
                Double.isNaN(d22);
                double d30 = (d7 - d24) / d22;
                Double.isNaN(d23);
                double d31 = (d8 - d25) / d23;
                Double.isNaN(d22);
                double d32 = ((-d7) - d24) / d22;
                Double.isNaN(d23);
                double d33 = ((-d8) - d25) / d23;
                double d34 = (d30 * d30) + (d31 * d31);
                double acos = (d31 < 0.0d ? -1.0d : 1.0d) * Math.acos(d30 / Math.sqrt(d34));
                double sqrt3 = Math.sqrt(d34 * ((d32 * d32) + (d33 * d33)));
                double d35 = (d30 * d32) + (d31 * d33);
                if ((d30 * d33) - (d31 * d32) < 0.0d) {
                    d16 = -1.0d;
                }
                double a2 = d16 * a(d35 / sqrt3);
                if (!z2 && a2 > 0.0d) {
                    a2 -= 6.283185307179586d;
                } else if (z2 && a2 < 0.0d) {
                    a2 += 6.283185307179586d;
                }
                float[] a3 = a(acos % 6.283185307179586d, a2 % 6.283185307179586d);
                Matrix matrix = new Matrix();
                matrix.postScale(abs, abs2);
                matrix.postRotate(f6);
                matrix.postTranslate((float) d28, (float) d29);
                matrix.mapPoints(a3);
                a3[a3.length - 2] = f7;
                a3[a3.length - 1] = f8;
                for (int i2 = 0; i2 < a3.length; i2 += 6) {
                    vVar.a(a3[i2], a3[i2 + 1], a3[i2 + 2], a3[i2 + 3], a3[i2 + 4], a3[i2 + 5]);
                }
                return;
            }
            vVar2.b(f9, f8);
        }
    }

    private static double a(double d2) {
        if (d2 < -1.0d) {
            return 3.141592653589793d;
        }
        if (d2 > 1.0d) {
            return 0.0d;
        }
        return Math.acos(d2);
    }

    private static float[] a(double d2, double d3) {
        int ceil = (int) Math.ceil((Math.abs(d3) * 2.0d) / 3.141592653589793d);
        double d4 = (double) ceil;
        Double.isNaN(d4);
        double d5 = d3 / d4;
        double d6 = d5 / 2.0d;
        double sin = (Math.sin(d6) * 1.3333333333333333d) / (Math.cos(d6) + 1.0d);
        float[] fArr = new float[ceil * 6];
        int i2 = 0;
        int i3 = 0;
        while (i2 < ceil) {
            double d7 = (double) i2;
            Double.isNaN(d7);
            double d8 = d2 + (d7 * d5);
            double cos = Math.cos(d8);
            double sin2 = Math.sin(d8);
            int i4 = i3 + 1;
            fArr[i3] = (float) (cos - (sin * sin2));
            int i5 = i4 + 1;
            fArr[i4] = (float) (sin2 + (cos * sin));
            double d9 = d8 + d5;
            double cos2 = Math.cos(d9);
            double sin3 = Math.sin(d9);
            int i6 = i5 + 1;
            fArr[i5] = (float) ((sin * sin3) + cos2);
            int i7 = i6 + 1;
            fArr[i6] = (float) (sin3 - (sin * cos2));
            int i8 = i7 + 1;
            fArr[i7] = (float) cos2;
            i3 = i8 + 1;
            fArr[i8] = (float) sin3;
            i2++;
            d5 = d5;
        }
        return fArr;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class b {
        float a;
        float b;
        float c;
        float d;
        boolean e = false;

        b(float f, float f2, float f3, float f4) {
            this.c = 0.0f;
            this.d = 0.0f;
            this.a = f;
            this.b = f2;
            double sqrt = Math.sqrt((double) ((f3 * f3) + (f4 * f4)));
            if (sqrt != 0.0d) {
                double d = (double) f3;
                Double.isNaN(d);
                this.c = (float) (d / sqrt);
                double d2 = (double) f4;
                Double.isNaN(d2);
                this.d = (float) (d2 / sqrt);
            }
        }

        void a(float f, float f2) {
            float f3 = f - this.a;
            float f4 = f2 - this.b;
            double sqrt = Math.sqrt((double) ((f3 * f3) + (f4 * f4)));
            if (sqrt != 0.0d) {
                double d = (double) f3;
                Double.isNaN(d);
                f3 = (float) (d / sqrt);
                double d2 = (double) f4;
                Double.isNaN(d2);
                f4 = (float) (d2 / sqrt);
            }
            if (f3 == (-this.c) && f4 == (-this.d)) {
                this.e = true;
                this.c = -f4;
                this.d = f3;
                return;
            }
            this.c += f3;
            this.d += f4;
        }

        void a(b bVar) {
            if (bVar.c == (-this.c)) {
                float f = bVar.d;
                if (f == (-this.d)) {
                    this.e = true;
                    this.c = -f;
                    this.d = bVar.c;
                    return;
                }
            }
            this.c += bVar.c;
            this.d += bVar.d;
        }

        public String toString() {
            return "(" + this.a + "," + this.b + " " + this.c + "," + this.d + ")";
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class a implements SVG.v {
        private float c;
        private float d;
        private boolean i;
        private List<b> b = new ArrayList();
        private b e = null;
        private boolean f = false;
        private boolean g = true;
        private int h = -1;

        a(SVG.u uVar) {
            if (uVar != null) {
                uVar.a(this);
                if (this.i) {
                    this.e.a(this.b.get(this.h));
                    this.b.set(this.h, this.e);
                    this.i = false;
                }
                b bVar = this.e;
                if (bVar != null) {
                    this.b.add(bVar);
                }
            }
        }

        List<b> a() {
            return this.b;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2) {
            if (this.i) {
                this.e.a(this.b.get(this.h));
                this.b.set(this.h, this.e);
                this.i = false;
            }
            b bVar = this.e;
            if (bVar != null) {
                this.b.add(bVar);
            }
            this.c = f;
            this.d = f2;
            this.e = new b(f, f2, 0.0f, 0.0f);
            this.h = this.b.size();
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void b(float f, float f2) {
            this.e.a(f, f2);
            this.b.add(this.e);
            this.e = new b(f, f2, f - this.e.a, f2 - this.e.b);
            this.i = false;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, float f4, float f5, float f6) {
            if (this.g || this.f) {
                this.e.a(f, f2);
                this.b.add(this.e);
                this.f = false;
            }
            this.e = new b(f5, f6, f5 - f3, f6 - f4);
            this.i = false;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, float f4) {
            this.e.a(f, f2);
            this.b.add(this.e);
            this.e = new b(f3, f4, f3 - f, f4 - f2);
            this.i = false;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, boolean z, boolean z2, float f4, float f5) {
            this.f = true;
            this.g = false;
            e.b(this.e.a, this.e.b, f, f2, f3, z, z2, f4, f5, this);
            this.g = true;
            this.i = false;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void b() {
            this.b.add(this.e);
            b(this.c, this.d);
            this.i = true;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x004d  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0076  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x009b  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00a9  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00bc A[ADDED_TO_REGION, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00bd  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00d8  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0116  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void a(com.caverock.androidsvg.SVG.j r11) {
        /*
        // Method dump skipped, instructions count: 289
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.e.a(com.caverock.androidsvg.SVG$j):void");
    }

    private b a(b bVar, b bVar2, b bVar3) {
        float b2 = b(bVar2.c, bVar2.d, bVar2.a - bVar.a, bVar2.b - bVar.b);
        if (b2 == 0.0f) {
            b2 = b(bVar2.c, bVar2.d, bVar3.a - bVar2.a, bVar3.b - bVar2.b);
        }
        if (b2 > 0.0f) {
            return bVar2;
        }
        if (b2 == 0.0f && (bVar2.c > 0.0f || bVar2.d >= 0.0f)) {
            return bVar2;
        }
        bVar2.c = -bVar2.c;
        bVar2.d = -bVar2.d;
        return bVar2;
    }

    /* JADX WARN: Removed duplicated region for block: B:15:0x003c  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x003f  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0067  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x006e  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x0073  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x007a  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0081  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0088  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x008e  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0154  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void a(com.caverock.androidsvg.SVG.p r11, com.caverock.androidsvg.e.b r12) {
        /*
        // Method dump skipped, instructions count: 382
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.e.a(com.caverock.androidsvg.SVG$p, com.caverock.androidsvg.e$b):void");
    }

    private g c(SVG.ak akVar) {
        g gVar = new g();
        a(gVar, SVG.Style.a());
        return a(akVar, gVar);
    }

    private g a(SVG.ak akVar, g gVar) {
        ArrayList<SVG.ai> arrayList = new ArrayList();
        while (true) {
            if (akVar instanceof SVG.ai) {
                arrayList.add(0, (SVG.ai) akVar);
            }
            if (akVar.v == null) {
                break;
            }
            akVar = (SVG.ak) akVar.v;
        }
        for (SVG.ai aiVar : arrayList) {
            a(gVar, aiVar);
        }
        gVar.g = this.d.g;
        gVar.f = this.d.f;
        return gVar;
    }

    private void c(SVG.ah ahVar) {
        if (this.d.a.b instanceof SVG.s) {
            a(true, ahVar.o, (SVG.s) this.d.a.b);
        }
        if (this.d.a.e instanceof SVG.s) {
            a(false, ahVar.o, (SVG.s) this.d.a.e);
        }
    }

    private void a(boolean z, SVG.a aVar, SVG.s sVar) {
        SVG.ak b2 = this.c.b(sVar.a);
        if (b2 == null) {
            Object[] objArr = new Object[2];
            objArr[0] = z ? "Fill" : "Stroke";
            objArr[1] = sVar.a;
            e("%s reference '%s' not found", objArr);
            if (sVar.b != null) {
                a(this.d, z, sVar.b);
            } else if (z) {
                this.d.b = false;
            } else {
                this.d.c = false;
            }
        } else if (b2 instanceof SVG.aj) {
            a(z, aVar, (SVG.aj) b2);
        } else if (b2 instanceof SVG.an) {
            a(z, aVar, (SVG.an) b2);
        } else if (b2 instanceof SVG.aa) {
            a(z, (SVG.aa) b2);
        }
    }

    private void a(boolean z, SVG.a aVar, SVG.aj ajVar) {
        float f2;
        float f3;
        float f4;
        float f5;
        Shader.TileMode tileMode;
        if (ajVar.e != null) {
            a(ajVar, ajVar.e);
        }
        int i2 = 0;
        boolean z2 = ajVar.b != null && ajVar.b.booleanValue();
        Paint paint = z ? this.d.d : this.d.e;
        if (z2) {
            SVG.a d2 = d();
            float a2 = ajVar.f != null ? ajVar.f.a(this) : 0.0f;
            float b2 = ajVar.g != null ? ajVar.g.b(this) : 0.0f;
            f3 = ajVar.h != null ? ajVar.h.a(this) : d2.c;
            f5 = a2;
            f4 = b2;
            f2 = ajVar.i != null ? ajVar.i.b(this) : 0.0f;
        } else {
            float a3 = ajVar.f != null ? ajVar.f.a(this, 1.0f) : 0.0f;
            float a4 = ajVar.g != null ? ajVar.g.a(this, 1.0f) : 0.0f;
            float a5 = ajVar.h != null ? ajVar.h.a(this, 1.0f) : 1.0f;
            f5 = a3;
            f2 = ajVar.i != null ? ajVar.i.a(this, 1.0f) : 0.0f;
            f4 = a4;
            f3 = a5;
        }
        f();
        this.d = c(ajVar);
        Matrix matrix = new Matrix();
        if (!z2) {
            matrix.preTranslate(aVar.a, aVar.b);
            matrix.preScale(aVar.c, aVar.d);
        }
        if (ajVar.c != null) {
            matrix.preConcat(ajVar.c);
        }
        int size = ajVar.a.size();
        if (size == 0) {
            g();
            if (z) {
                this.d.b = false;
            } else {
                this.d.c = false;
            }
        } else {
            int[] iArr = new int[size];
            float[] fArr = new float[size];
            float f6 = -1.0f;
            for (SVG.ak akVar : ajVar.a) {
                SVG.ab abVar = (SVG.ab) akVar;
                float floatValue = abVar.a != null ? abVar.a.floatValue() : 0.0f;
                if (i2 == 0 || floatValue >= f6) {
                    fArr[i2] = floatValue;
                    f6 = floatValue;
                } else {
                    fArr[i2] = f6;
                }
                f();
                a(this.d, abVar);
                SVG.e eVar = (SVG.e) this.d.a.C;
                if (eVar == null) {
                    eVar = SVG.e.b;
                }
                iArr[i2] = a(eVar.a, this.d.a.D.floatValue());
                i2++;
                g();
            }
            if ((f5 == f3 && f4 == f2) || size == 1) {
                g();
                paint.setColor(iArr[size - 1]);
                return;
            }
            Shader.TileMode tileMode2 = Shader.TileMode.CLAMP;
            if (ajVar.d != null) {
                if (ajVar.d == SVG.GradientSpread.reflect) {
                    tileMode = Shader.TileMode.MIRROR;
                } else if (ajVar.d == SVG.GradientSpread.repeat) {
                    tileMode = Shader.TileMode.REPEAT;
                }
                g();
                LinearGradient linearGradient = new LinearGradient(f5, f4, f3, f2, iArr, fArr, tileMode);
                linearGradient.setLocalMatrix(matrix);
                paint.setShader(linearGradient);
                paint.setAlpha(a(this.d.a.d.floatValue()));
            }
            tileMode = tileMode2;
            g();
            LinearGradient linearGradient2 = new LinearGradient(f5, f4, f3, f2, iArr, fArr, tileMode);
            linearGradient2.setLocalMatrix(matrix);
            paint.setShader(linearGradient2);
            paint.setAlpha(a(this.d.a.d.floatValue()));
        }
    }

    private void a(boolean z, SVG.a aVar, SVG.an anVar) {
        float f2;
        float f3;
        float f4;
        Shader.TileMode tileMode;
        if (anVar.e != null) {
            a(anVar, anVar.e);
        }
        int i2 = 0;
        boolean z2 = anVar.b != null && anVar.b.booleanValue();
        Paint paint = z ? this.d.d : this.d.e;
        if (z2) {
            SVG.n nVar = new SVG.n(50.0f, SVG.Unit.percent);
            float a2 = anVar.f != null ? anVar.f.a(this) : nVar.a(this);
            float b2 = anVar.g != null ? anVar.g.b(this) : nVar.b(this);
            if (anVar.h != null) {
                nVar = anVar.h;
            }
            f2 = nVar.c(this);
            f4 = a2;
            f3 = b2;
        } else {
            float a3 = anVar.f != null ? anVar.f.a(this, 1.0f) : 0.5f;
            float a4 = anVar.g != null ? anVar.g.a(this, 1.0f) : 0.5f;
            f4 = a3;
            f2 = anVar.h != null ? anVar.h.a(this, 1.0f) : 0.5f;
            f3 = a4;
        }
        f();
        this.d = c(anVar);
        Matrix matrix = new Matrix();
        if (!z2) {
            matrix.preTranslate(aVar.a, aVar.b);
            matrix.preScale(aVar.c, aVar.d);
        }
        if (anVar.c != null) {
            matrix.preConcat(anVar.c);
        }
        int size = anVar.a.size();
        if (size == 0) {
            g();
            if (z) {
                this.d.b = false;
            } else {
                this.d.c = false;
            }
        } else {
            int[] iArr = new int[size];
            float[] fArr = new float[size];
            float f5 = -1.0f;
            Iterator it = anVar.a.iterator();
            while (true) {
                float f6 = 0.0f;
                if (!it.hasNext()) {
                    break;
                }
                SVG.ab abVar = (SVG.ab) ((SVG.ak) it.next());
                if (abVar.a != null) {
                    f6 = abVar.a.floatValue();
                }
                if (i2 == 0 || f6 >= f5) {
                    fArr[i2] = f6;
                    f5 = f6;
                } else {
                    fArr[i2] = f5;
                }
                f();
                a(this.d, abVar);
                SVG.e eVar = (SVG.e) this.d.a.C;
                if (eVar == null) {
                    eVar = SVG.e.b;
                }
                iArr[i2] = a(eVar.a, this.d.a.D.floatValue());
                i2++;
                g();
            }
            if (f2 == 0.0f || size == 1) {
                g();
                paint.setColor(iArr[size - 1]);
                return;
            }
            Shader.TileMode tileMode2 = Shader.TileMode.CLAMP;
            if (anVar.d != null) {
                if (anVar.d == SVG.GradientSpread.reflect) {
                    tileMode = Shader.TileMode.MIRROR;
                } else if (anVar.d == SVG.GradientSpread.repeat) {
                    tileMode = Shader.TileMode.REPEAT;
                }
                g();
                RadialGradient radialGradient = new RadialGradient(f4, f3, f2, iArr, fArr, tileMode);
                radialGradient.setLocalMatrix(matrix);
                paint.setShader(radialGradient);
                paint.setAlpha(a(this.d.a.d.floatValue()));
            }
            tileMode = tileMode2;
            g();
            RadialGradient radialGradient2 = new RadialGradient(f4, f3, f2, iArr, fArr, tileMode);
            radialGradient2.setLocalMatrix(matrix);
            paint.setShader(radialGradient2);
            paint.setAlpha(a(this.d.a.d.floatValue()));
        }
    }

    private void a(SVG.i iVar, String str) {
        SVG.ak b2 = iVar.u.b(str);
        if (b2 == null) {
            d("Gradient reference '%s' not found", str);
        } else if (!(b2 instanceof SVG.i)) {
            e("Gradient href attributes must point to other gradient elements", new Object[0]);
        } else if (b2 == iVar) {
            e("Circular reference in gradient href attribute '%s'", str);
        } else {
            SVG.i iVar2 = (SVG.i) b2;
            if (iVar.b == null) {
                iVar.b = iVar2.b;
            }
            if (iVar.c == null) {
                iVar.c = iVar2.c;
            }
            if (iVar.d == null) {
                iVar.d = iVar2.d;
            }
            if (iVar.a.isEmpty()) {
                iVar.a = iVar2.a;
            }
            try {
                if (iVar instanceof SVG.aj) {
                    a((SVG.aj) iVar, (SVG.aj) b2);
                } else {
                    a((SVG.an) iVar, (SVG.an) b2);
                }
            } catch (ClassCastException unused) {
            }
            if (iVar2.e != null) {
                a(iVar, iVar2.e);
            }
        }
    }

    private void a(SVG.aj ajVar, SVG.aj ajVar2) {
        if (ajVar.f == null) {
            ajVar.f = ajVar2.f;
        }
        if (ajVar.g == null) {
            ajVar.g = ajVar2.g;
        }
        if (ajVar.h == null) {
            ajVar.h = ajVar2.h;
        }
        if (ajVar.i == null) {
            ajVar.i = ajVar2.i;
        }
    }

    private void a(SVG.an anVar, SVG.an anVar2) {
        if (anVar.f == null) {
            anVar.f = anVar2.f;
        }
        if (anVar.g == null) {
            anVar.g = anVar2.g;
        }
        if (anVar.h == null) {
            anVar.h = anVar2.h;
        }
        if (anVar.i == null) {
            anVar.i = anVar2.i;
        }
        if (anVar.j == null) {
            anVar.j = anVar2.j;
        }
    }

    private void a(boolean z, SVG.aa aaVar) {
        boolean z2 = true;
        if (z) {
            if (a(aaVar.r, 2147483648L)) {
                this.d.a.b = aaVar.r.H;
                g gVar = this.d;
                if (aaVar.r.H == null) {
                    z2 = false;
                }
                gVar.b = z2;
            }
            if (a(aaVar.r, 4294967296L)) {
                this.d.a.d = aaVar.r.I;
            }
            if (a(aaVar.r, 6442450944L)) {
                g gVar2 = this.d;
                a(gVar2, z, gVar2.a.b);
                return;
            }
            return;
        }
        if (a(aaVar.r, 2147483648L)) {
            this.d.a.e = aaVar.r.H;
            g gVar3 = this.d;
            if (aaVar.r.H == null) {
                z2 = false;
            }
            gVar3.c = z2;
        }
        if (a(aaVar.r, 4294967296L)) {
            this.d.a.f = aaVar.r.I;
        }
        if (a(aaVar.r, 6442450944L)) {
            g gVar4 = this.d;
            a(gVar4, z, gVar4.a.e);
        }
    }

    private void d(SVG.ah ahVar) {
        b(ahVar, ahVar.o);
    }

    private void b(SVG.ah ahVar, SVG.a aVar) {
        if (this.d.a.E != null) {
            if (Build.VERSION.SDK_INT >= 19) {
                Path c2 = c(ahVar, aVar);
                if (c2 != null) {
                    this.a.clipPath(c2);
                    return;
                }
                return;
            }
            d(ahVar, aVar);
        }
    }

    @TargetApi(19)
    private Path c(SVG.ah ahVar, SVG.a aVar) {
        Path a2;
        SVG.ak b2 = ahVar.u.b(this.d.a.E);
        boolean z = false;
        if (b2 == null) {
            e("ClipPath reference '%s' not found", this.d.a.E);
            return null;
        }
        SVG.d dVar = (SVG.d) b2;
        this.e.push(this.d);
        this.d = c((SVG.ak) dVar);
        if (dVar.a == null || dVar.a.booleanValue()) {
            z = true;
        }
        Matrix matrix = new Matrix();
        if (!z) {
            matrix.preTranslate(aVar.a, aVar.b);
            matrix.preScale(aVar.c, aVar.d);
        }
        if (dVar.b != null) {
            matrix.preConcat(dVar.b);
        }
        Path path = new Path();
        for (SVG.ak akVar : dVar.i) {
            if ((akVar instanceof SVG.ah) && (a2 = a((SVG.ah) akVar, true)) != null) {
                path.op(a2, Path.Op.UNION);
            }
        }
        if (this.d.a.E != null) {
            if (dVar.o == null) {
                dVar.o = b(path);
            }
            Path c2 = c(dVar, dVar.o);
            if (c2 != null) {
                path.op(c2, Path.Op.INTERSECT);
            }
        }
        path.transform(matrix);
        this.d = this.e.pop();
        return path;
    }

    @TargetApi(19)
    private Path a(SVG.ah ahVar, boolean z) {
        Path path;
        Path c2;
        this.e.push(this.d);
        this.d = new g(this.d);
        a(this.d, ahVar);
        if (!m() || !n()) {
            this.d = this.e.pop();
            return null;
        }
        if (ahVar instanceof SVG.ba) {
            if (!z) {
                e("<use> elements inside a <clipPath> cannot reference another <use>", new Object[0]);
            }
            SVG.ba baVar = (SVG.ba) ahVar;
            SVG.ak b2 = ahVar.u.b(baVar.a);
            if (b2 == null) {
                e("Use reference '%s' not found", baVar.a);
                this.d = this.e.pop();
                return null;
            } else if (!(b2 instanceof SVG.ah)) {
                this.d = this.e.pop();
                return null;
            } else {
                path = a((SVG.ah) b2, false);
                if (path == null) {
                    return null;
                }
                if (baVar.o == null) {
                    baVar.o = b(path);
                }
                if (baVar.b != null) {
                    path.transform(baVar.b);
                }
            }
        } else if (ahVar instanceof SVG.j) {
            SVG.j jVar = (SVG.j) ahVar;
            if (ahVar instanceof SVG.t) {
                path = new c(((SVG.t) ahVar).a).a();
                if (ahVar.o == null) {
                    ahVar.o = b(path);
                }
            } else {
                path = ahVar instanceof SVG.z ? b((SVG.z) ahVar) : ahVar instanceof SVG.c ? b((SVG.c) ahVar) : ahVar instanceof SVG.h ? b((SVG.h) ahVar) : ahVar instanceof SVG.x ? c((SVG.x) ahVar) : null;
            }
            if (path == null) {
                return null;
            }
            if (jVar.o == null) {
                jVar.o = b(path);
            }
            if (jVar.e != null) {
                path.transform(jVar.e);
            }
            path.setFillType(s());
        } else if (ahVar instanceof SVG.at) {
            SVG.at atVar = (SVG.at) ahVar;
            path = b(atVar);
            if (path == null) {
                return null;
            }
            if (atVar.a != null) {
                path.transform(atVar.a);
            }
            path.setFillType(s());
        } else {
            e("Invalid %s element found in clipPath definition", ahVar.a());
            return null;
        }
        if (!(this.d.a.E == null || (c2 = c(ahVar, ahVar.o)) == null)) {
            path.op(c2, Path.Op.INTERSECT);
        }
        this.d = this.e.pop();
        return path;
    }

    private void d(SVG.ah ahVar, SVG.a aVar) {
        SVG.ak b2 = ahVar.u.b(this.d.a.E);
        if (b2 == null) {
            e("ClipPath reference '%s' not found", this.d.a.E);
            return;
        }
        SVG.d dVar = (SVG.d) b2;
        if (dVar.i.isEmpty()) {
            this.a.clipRect(0, 0, 0, 0);
            return;
        }
        boolean z = dVar.a == null || dVar.a.booleanValue();
        if (!(ahVar instanceof SVG.k) || z) {
            q();
            if (!z) {
                Matrix matrix = new Matrix();
                matrix.preTranslate(aVar.a, aVar.b);
                matrix.preScale(aVar.c, aVar.d);
                this.a.concat(matrix);
            }
            if (dVar.b != null) {
                this.a.concat(dVar.b);
            }
            this.d = c((SVG.ak) dVar);
            d(dVar);
            Path path = new Path();
            for (SVG.ak akVar : dVar.i) {
                a(akVar, true, path, new Matrix());
            }
            this.a.clipPath(path);
            r();
            return;
        }
        d("<clipPath clipPathUnits=\"objectBoundingBox\"> is not supported when referenced from container elements (like %s)", ahVar.a());
    }

    private void a(SVG.ak akVar, boolean z, Path path, Matrix matrix) {
        if (m()) {
            q();
            if (akVar instanceof SVG.ba) {
                if (z) {
                    a((SVG.ba) akVar, path, matrix);
                } else {
                    e("<use> elements inside a <clipPath> cannot reference another <use>", new Object[0]);
                }
            } else if (akVar instanceof SVG.t) {
                a((SVG.t) akVar, path, matrix);
            } else if (akVar instanceof SVG.at) {
                a((SVG.at) akVar, path, matrix);
            } else if (akVar instanceof SVG.j) {
                a((SVG.j) akVar, path, matrix);
            } else {
                e("Invalid %s element found in clipPath definition", akVar.toString());
            }
            r();
        }
    }

    private void q() {
        a.a(this.a, a.a);
        this.e.push(this.d);
        this.d = new g(this.d);
    }

    private void r() {
        this.a.restore();
        this.d = this.e.pop();
    }

    private Path.FillType s() {
        if (this.d.a.F == null || this.d.a.F != SVG.Style.FillRule.EvenOdd) {
            return Path.FillType.WINDING;
        }
        return Path.FillType.EVEN_ODD;
    }

    private void a(SVG.t tVar, Path path, Matrix matrix) {
        a(this.d, tVar);
        if (m() && n()) {
            if (tVar.e != null) {
                matrix.preConcat(tVar.e);
            }
            Path a2 = new c(tVar.a).a();
            if (tVar.o == null) {
                tVar.o = b(a2);
            }
            d(tVar);
            path.setFillType(s());
            path.addPath(a2, matrix);
        }
    }

    private void a(SVG.j jVar, Path path, Matrix matrix) {
        Path path2;
        a(this.d, jVar);
        if (m() && n()) {
            if (jVar.e != null) {
                matrix.preConcat(jVar.e);
            }
            if (jVar instanceof SVG.z) {
                path2 = b((SVG.z) jVar);
            } else if (jVar instanceof SVG.c) {
                path2 = b((SVG.c) jVar);
            } else if (jVar instanceof SVG.h) {
                path2 = b((SVG.h) jVar);
            } else if (jVar instanceof SVG.x) {
                path2 = c((SVG.x) jVar);
            } else {
                return;
            }
            d(jVar);
            path.setFillType(s());
            path.addPath(path2, matrix);
        }
    }

    private void a(SVG.ba baVar, Path path, Matrix matrix) {
        a(this.d, baVar);
        if (m() && n()) {
            if (baVar.b != null) {
                matrix.preConcat(baVar.b);
            }
            SVG.ak b2 = baVar.u.b(baVar.a);
            if (b2 == null) {
                e("Use reference '%s' not found", baVar.a);
                return;
            }
            d(baVar);
            a(b2, false, path, matrix);
        }
    }

    private void a(SVG.at atVar, Path path, Matrix matrix) {
        a(this.d, atVar);
        if (m()) {
            if (atVar.a != null) {
                matrix.preConcat(atVar.a);
            }
            float f2 = 0.0f;
            float a2 = (atVar.b == null || atVar.b.size() == 0) ? 0.0f : ((SVG.n) atVar.b.get(0)).a(this);
            float b2 = (atVar.c == null || atVar.c.size() == 0) ? 0.0f : ((SVG.n) atVar.c.get(0)).b(this);
            float a3 = (atVar.d == null || atVar.d.size() == 0) ? 0.0f : ((SVG.n) atVar.d.get(0)).a(this);
            if (!(atVar.e == null || atVar.e.size() == 0)) {
                f2 = ((SVG.n) atVar.e.get(0)).b(this);
            }
            if (this.d.a.u != SVG.Style.TextAnchor.Start) {
                float a4 = a((SVG.av) atVar);
                a2 = this.d.a.u == SVG.Style.TextAnchor.Middle ? a2 - (a4 / 2.0f) : a2 - a4;
            }
            if (atVar.o == null) {
                h hVar = new h(a2, b2);
                a((SVG.av) atVar, (i) hVar);
                atVar.o = new SVG.a(hVar.c.left, hVar.c.top, hVar.c.width(), hVar.c.height());
            }
            d(atVar);
            Path path2 = new Path();
            a((SVG.av) atVar, new f(a2 + a3, b2 + f2, path2));
            path.setFillType(s());
            path.addPath(path2, matrix);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public class f extends i {
        float a;
        float b;
        Path c;

        f(float f, float f2, Path path) {
            super();
            this.a = f;
            this.b = f2;
            this.c = path;
        }

        @Override // com.caverock.androidsvg.e.i
        public boolean a(SVG.av avVar) {
            if (!(avVar instanceof SVG.aw)) {
                return true;
            }
            e.d("Using <textPath> elements in a clip path is not supported.", new Object[0]);
            return false;
        }

        @Override // com.caverock.androidsvg.e.i
        public void a(String str) {
            if (e.this.n()) {
                Path path = new Path();
                e.this.d.d.getTextPath(str, 0, str.length(), this.a, this.b, path);
                this.c.addPath(path);
            }
            this.a += e.this.d.d.measureText(str);
        }
    }

    private Path c(SVG.o oVar) {
        float f2 = 0.0f;
        float a2 = oVar.a == null ? 0.0f : oVar.a.a(this);
        float b2 = oVar.b == null ? 0.0f : oVar.b.b(this);
        float a3 = oVar.c == null ? 0.0f : oVar.c.a(this);
        if (oVar.d != null) {
            f2 = oVar.d.b(this);
        }
        if (oVar.o == null) {
            oVar.o = new SVG.a(Math.min(a2, a3), Math.min(b2, f2), Math.abs(a3 - a2), Math.abs(f2 - b2));
        }
        Path path = new Path();
        path.moveTo(a2, b2);
        path.lineTo(a3, f2);
        return path;
    }

    private Path b(SVG.z zVar) {
        float f2;
        float f3;
        Path path;
        if (zVar.f == null && zVar.g == null) {
            f3 = 0.0f;
            f2 = 0.0f;
        } else if (zVar.f == null) {
            f3 = zVar.g.b(this);
            f2 = f3;
        } else if (zVar.g == null) {
            f3 = zVar.f.a(this);
            f2 = f3;
        } else {
            f3 = zVar.f.a(this);
            f2 = zVar.g.b(this);
        }
        float min = Math.min(f3, zVar.c.a(this) / 2.0f);
        float min2 = Math.min(f2, zVar.d.b(this) / 2.0f);
        float a2 = zVar.a != null ? zVar.a.a(this) : 0.0f;
        float b2 = zVar.b != null ? zVar.b.b(this) : 0.0f;
        float a3 = zVar.c.a(this);
        float b3 = zVar.d.b(this);
        if (zVar.o == null) {
            zVar.o = new SVG.a(a2, b2, a3, b3);
        }
        float f4 = a2 + a3;
        float f5 = b2 + b3;
        Path path2 = new Path();
        if (min == 0.0f || min2 == 0.0f) {
            path = path2;
            path.moveTo(a2, b2);
            path.lineTo(f4, b2);
            path.lineTo(f4, f5);
            path.lineTo(a2, f5);
            path.lineTo(a2, b2);
        } else {
            float f6 = min * 0.5522848f;
            float f7 = 0.5522848f * min2;
            float f8 = b2 + min2;
            path2.moveTo(a2, f8);
            float f9 = f8 - f7;
            float f10 = a2 + min;
            float f11 = f10 - f6;
            path2.cubicTo(a2, f9, f11, b2, f10, b2);
            float f12 = f4 - min;
            path2.lineTo(f12, b2);
            float f13 = f12 + f6;
            path2.cubicTo(f13, b2, f4, f9, f4, f8);
            float f14 = f5 - min2;
            path2.lineTo(f4, f14);
            float f15 = f7 + f14;
            path = path2;
            path2.cubicTo(f4, f15, f13, f5, f12, f5);
            path.lineTo(f10, f5);
            path.cubicTo(f11, f5, a2, f15, a2, f14);
            path.lineTo(a2, f8);
        }
        path.close();
        return path;
    }

    private Path b(SVG.c cVar) {
        float f2 = 0.0f;
        float a2 = cVar.a != null ? cVar.a.a(this) : 0.0f;
        if (cVar.b != null) {
            f2 = cVar.b.b(this);
        }
        float c2 = cVar.c.c(this);
        float f3 = a2 - c2;
        float f4 = f2 - c2;
        float f5 = a2 + c2;
        float f6 = f2 + c2;
        if (cVar.o == null) {
            float f7 = 2.0f * c2;
            cVar.o = new SVG.a(f3, f4, f7, f7);
        }
        float f8 = 0.5522848f * c2;
        Path path = new Path();
        path.moveTo(a2, f4);
        float f9 = a2 + f8;
        float f10 = f2 - f8;
        path.cubicTo(f9, f4, f5, f10, f5, f2);
        float f11 = f2 + f8;
        path.cubicTo(f5, f11, f9, f6, a2, f6);
        float f12 = a2 - f8;
        path.cubicTo(f12, f6, f3, f11, f3, f2);
        path.cubicTo(f3, f10, f12, f4, a2, f4);
        path.close();
        return path;
    }

    private Path b(SVG.h hVar) {
        float f2 = 0.0f;
        float a2 = hVar.a != null ? hVar.a.a(this) : 0.0f;
        if (hVar.b != null) {
            f2 = hVar.b.b(this);
        }
        float a3 = hVar.c.a(this);
        float b2 = hVar.d.b(this);
        float f3 = a2 - a3;
        float f4 = f2 - b2;
        float f5 = a2 + a3;
        float f6 = f2 + b2;
        if (hVar.o == null) {
            hVar.o = new SVG.a(f3, f4, a3 * 2.0f, 2.0f * b2);
        }
        float f7 = a3 * 0.5522848f;
        float f8 = 0.5522848f * b2;
        Path path = new Path();
        path.moveTo(a2, f4);
        float f9 = a2 + f7;
        float f10 = f2 - f8;
        path.cubicTo(f9, f4, f5, f10, f5, f2);
        float f11 = f8 + f2;
        path.cubicTo(f5, f11, f9, f6, a2, f6);
        float f12 = a2 - f7;
        path.cubicTo(f12, f6, f3, f11, f3, f2);
        path.cubicTo(f3, f10, f12, f4, a2, f4);
        path.close();
        return path;
    }

    private Path c(SVG.x xVar) {
        Path path = new Path();
        path.moveTo(xVar.a[0], xVar.a[1]);
        for (int i2 = 2; i2 < xVar.a.length; i2 += 2) {
            path.lineTo(xVar.a[i2], xVar.a[i2 + 1]);
        }
        if (xVar instanceof SVG.y) {
            path.close();
        }
        if (xVar.o == null) {
            xVar.o = b(path);
        }
        return path;
    }

    private Path b(SVG.at atVar) {
        float f2 = 0.0f;
        float a2 = (atVar.b == null || atVar.b.size() == 0) ? 0.0f : ((SVG.n) atVar.b.get(0)).a(this);
        float b2 = (atVar.c == null || atVar.c.size() == 0) ? 0.0f : ((SVG.n) atVar.c.get(0)).b(this);
        float a3 = (atVar.d == null || atVar.d.size() == 0) ? 0.0f : ((SVG.n) atVar.d.get(0)).a(this);
        if (!(atVar.e == null || atVar.e.size() == 0)) {
            f2 = ((SVG.n) atVar.e.get(0)).b(this);
        }
        if (this.d.a.u != SVG.Style.TextAnchor.Start) {
            float a4 = a((SVG.av) atVar);
            a2 = this.d.a.u == SVG.Style.TextAnchor.Middle ? a2 - (a4 / 2.0f) : a2 - a4;
        }
        if (atVar.o == null) {
            h hVar = new h(a2, b2);
            a((SVG.av) atVar, (i) hVar);
            atVar.o = new SVG.a(hVar.c.left, hVar.c.top, hVar.c.width(), hVar.c.height());
        }
        Path path = new Path();
        a((SVG.av) atVar, new f(a2 + a3, b2 + f2, path));
        return path;
    }

    private void a(SVG.ah ahVar, Path path, SVG.w wVar) {
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        boolean z = wVar.a != null && wVar.a.booleanValue();
        if (wVar.h != null) {
            a(wVar, wVar.h);
        }
        if (z) {
            f5 = wVar.d != null ? wVar.d.a(this) : 0.0f;
            float b2 = wVar.e != null ? wVar.e.b(this) : 0.0f;
            f3 = wVar.f != null ? wVar.f.a(this) : 0.0f;
            f2 = b2;
            f4 = wVar.g != null ? wVar.g.b(this) : 0.0f;
        } else {
            float a2 = wVar.d != null ? wVar.d.a(this, 1.0f) : 0.0f;
            float a3 = wVar.e != null ? wVar.e.a(this, 1.0f) : 0.0f;
            float a4 = wVar.f != null ? wVar.f.a(this, 1.0f) : 0.0f;
            float a5 = wVar.g != null ? wVar.g.a(this, 1.0f) : 0.0f;
            f5 = (a2 * ahVar.o.c) + ahVar.o.a;
            float f7 = (a3 * ahVar.o.d) + ahVar.o.b;
            float f8 = a4 * ahVar.o.c;
            f4 = a5 * ahVar.o.d;
            f2 = f7;
            f3 = f8;
        }
        if (!(f3 == 0.0f || f4 == 0.0f)) {
            PreserveAspectRatio preserveAspectRatio = wVar.w != null ? wVar.w : PreserveAspectRatio.c;
            f();
            this.a.clipPath(path);
            g gVar = new g();
            a(gVar, SVG.Style.a());
            gVar.a.v = false;
            this.d = a(wVar, gVar);
            SVG.a aVar = ahVar.o;
            if (wVar.c != null) {
                this.a.concat(wVar.c);
                Matrix matrix = new Matrix();
                if (wVar.c.invert(matrix)) {
                    float[] fArr = {ahVar.o.a, ahVar.o.b, ahVar.o.a(), ahVar.o.b, ahVar.o.a(), ahVar.o.b(), ahVar.o.a, ahVar.o.b()};
                    matrix.mapPoints(fArr);
                    RectF rectF = new RectF(fArr[0], fArr[1], fArr[0], fArr[1]);
                    for (int i2 = 2; i2 <= 6; i2 += 2) {
                        if (fArr[i2] < rectF.left) {
                            rectF.left = fArr[i2];
                        }
                        if (fArr[i2] > rectF.right) {
                            rectF.right = fArr[i2];
                        }
                        int i3 = i2 + 1;
                        if (fArr[i3] < rectF.top) {
                            rectF.top = fArr[i3];
                        }
                        if (fArr[i3] > rectF.bottom) {
                            rectF.bottom = fArr[i3];
                        }
                    }
                    aVar = new SVG.a(rectF.left, rectF.top, rectF.right - rectF.left, rectF.bottom - rectF.top);
                }
            }
            float floor = f5 + (((float) Math.floor((double) ((aVar.a - f5) / f3))) * f3);
            float a6 = aVar.a();
            float b3 = aVar.b();
            SVG.a aVar2 = new SVG.a(0.0f, 0.0f, f3, f4);
            boolean i4 = i();
            for (float floor2 = f2 + (((float) Math.floor((double) ((aVar.b - f2) / f4))) * f4); floor2 < b3; floor2 += f4) {
                float f9 = floor;
                while (f9 < a6) {
                    aVar2.a = f9;
                    aVar2.b = floor2;
                    f();
                    if (!this.d.a.v.booleanValue()) {
                        f6 = floor;
                        a(aVar2.a, aVar2.b, aVar2.c, aVar2.d);
                    } else {
                        f6 = floor;
                    }
                    if (wVar.x != null) {
                        this.a.concat(a(aVar2, wVar.x, preserveAspectRatio));
                    } else {
                        boolean z2 = wVar.b == null || wVar.b.booleanValue();
                        this.a.translate(f9, floor2);
                        if (!z2) {
                            this.a.scale(ahVar.o.c, ahVar.o.d);
                        }
                    }
                    for (SVG.ak akVar : wVar.i) {
                        a(akVar);
                    }
                    g();
                    f9 += f3;
                    floor = f6;
                }
            }
            if (i4) {
                b((SVG.ah) wVar);
            }
            g();
        }
    }

    private void a(SVG.w wVar, String str) {
        SVG.ak b2 = wVar.u.b(str);
        if (b2 == null) {
            d("Pattern reference '%s' not found", str);
        } else if (!(b2 instanceof SVG.w)) {
            e("Pattern href attributes must point to other pattern elements", new Object[0]);
        } else if (b2 == wVar) {
            e("Circular reference in pattern href attribute '%s'", str);
        } else {
            SVG.w wVar2 = (SVG.w) b2;
            if (wVar.a == null) {
                wVar.a = wVar2.a;
            }
            if (wVar.b == null) {
                wVar.b = wVar2.b;
            }
            if (wVar.c == null) {
                wVar.c = wVar2.c;
            }
            if (wVar.d == null) {
                wVar.d = wVar2.d;
            }
            if (wVar.e == null) {
                wVar.e = wVar2.e;
            }
            if (wVar.f == null) {
                wVar.f = wVar2.f;
            }
            if (wVar.g == null) {
                wVar.g = wVar2.g;
            }
            if (wVar.i.isEmpty()) {
                wVar.i = wVar2.i;
            }
            if (wVar.x == null) {
                wVar.x = wVar2.x;
            }
            if (wVar.w == null) {
                wVar.w = wVar2.w;
            }
            if (wVar2.h != null) {
                a(wVar, wVar2.h);
            }
        }
    }

    private void a(SVG.q qVar, SVG.ah ahVar, SVG.a aVar) {
        float f2;
        float f3;
        f("Mask render", new Object[0]);
        boolean z = true;
        if (qVar.a != null && qVar.a.booleanValue()) {
            f3 = qVar.e != null ? qVar.e.a(this) : aVar.c;
            f2 = qVar.f != null ? qVar.f.b(this) : aVar.d;
        } else {
            float f4 = 1.2f;
            float a2 = qVar.e != null ? qVar.e.a(this, 1.0f) : 1.2f;
            if (qVar.f != null) {
                f4 = qVar.f.a(this, 1.0f);
            }
            f3 = a2 * aVar.c;
            f2 = f4 * aVar.d;
        }
        if (f3 != 0.0f && f2 != 0.0f) {
            f();
            this.d = c((SVG.ak) qVar);
            this.d.a.m = Float.valueOf(1.0f);
            boolean i2 = i();
            this.a.save();
            if (qVar.b != null && !qVar.b.booleanValue()) {
                z = false;
            }
            if (!z) {
                this.a.translate(aVar.a, aVar.b);
                this.a.scale(aVar.c, aVar.d);
            }
            a((SVG.ag) qVar, false);
            this.a.restore();
            if (i2) {
                a(ahVar, aVar);
            }
            g();
        }
    }
}
