package com.caverock.androidsvg;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Picture;
import com.caverock.androidsvg.CSSParser;
import com.facebook.react.views.textinput.ReactEditTextInputConnectionWrapper;
import com.huawei.hms.support.api.push.pushselfshow.entity.PushSelfShowMessage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class SVG {
    private static f a;
    private static boolean b;
    private ac c = null;
    private String d = "";
    private String e = "";
    private float f = 96.0f;
    private CSSParser.m g = new CSSParser.m();
    private Map<String, ai> h = new HashMap();

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum GradientSpread {
        pad,
        reflect,
        repeat
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum Unit {
        px,
        em,
        ex,
        in,
        cm,
        mm,
        pt,
        pc,
        percent
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ac extends ao {
        n a;
        n b;
        n c;
        n d;
        public String e;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "svg";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface ad {
        void a(String str);

        void a(Set<String> set);

        void b(Set<String> set);

        Set<String> c();

        void c(Set<String> set);

        String d();

        void d(Set<String> set);

        Set<String> e();

        Set<String> f();

        Set<String> g();
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface ag {
        void a(ak akVar) throws SVGParseException;

        List<ak> b();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class aj extends i {
        n f;
        n g;
        n h;
        n i;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "linearGradient";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class an extends i {
        n f;
        n g;
        n h;
        n i;
        n j;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "radialGradient";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ap extends k {
        @Override // com.caverock.androidsvg.SVG.k, com.caverock.androidsvg.SVG.ak
        String a() {
            return "switch";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class aq extends ao implements r {
        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "symbol";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface au {
        ay h();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface ay {
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ba extends k {
        String a;
        n c;
        n d;
        n e;
        n f;

        @Override // com.caverock.androidsvg.SVG.k, com.caverock.androidsvg.SVG.ak
        String a() {
            return "use";
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class bb extends ao implements r {
        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "view";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class c extends j {
        n a;
        n b;
        n c;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "circle";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class d extends k implements r {
        Boolean a;

        @Override // com.caverock.androidsvg.SVG.k, com.caverock.androidsvg.SVG.ak
        String a() {
            return "clipPath";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class g extends k implements r {
        @Override // com.caverock.androidsvg.SVG.k, com.caverock.androidsvg.SVG.ak
        String a() {
            return "defs";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class h extends j {
        n a;
        n b;
        n c;
        n d;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "ellipse";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface l {
        void a(Matrix matrix);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class o extends j {
        n a;
        n b;
        n c;
        n d;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "line";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class p extends ao implements r {
        boolean a;
        n b;
        n c;
        n d;
        n e;
        Float f;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "marker";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class q extends ae implements r {
        Boolean a;
        Boolean b;
        n c;
        n d;
        n e;
        n f;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "mask";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface r {
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class t extends j {
        u a;
        Float b;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "path";
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface v {
        void a(float f, float f2);

        void a(float f, float f2, float f3, float f4);

        void a(float f, float f2, float f3, float f4, float f5, float f6);

        void a(float f, float f2, float f3, boolean z, boolean z2, float f4, float f5);

        void b();

        void b(float f, float f2);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class w extends ao implements r {
        Boolean a;
        Boolean b;
        Matrix c;
        n d;
        n e;
        n f;
        n g;
        String h;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "pattern";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class x extends j {
        float[] a;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "polyline";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class y extends x {
        @Override // com.caverock.androidsvg.SVG.x, com.caverock.androidsvg.SVG.ak
        String a() {
            return "polygon";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class z extends j {
        n a;
        n b;
        n c;
        n d;
        n f;
        n g;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "rect";
        }
    }

    public static SVG a(InputStream inputStream) throws SVGParseException {
        return new SVGParser().a(inputStream, b);
    }

    public static SVG a(String str) throws SVGParseException {
        return new SVGParser().a(new ByteArrayInputStream(str.getBytes()), b);
    }

    public static SVG a(Context context, int i2) throws SVGParseException {
        return a(context.getResources(), i2);
    }

    public static SVG a(Resources resources, int i2) throws SVGParseException {
        SVGParser sVGParser = new SVGParser();
        InputStream openRawResource = resources.openRawResource(i2);
        try {
            return sVGParser.a(openRawResource, b);
        } finally {
            try {
                openRawResource.close();
            } catch (IOException unused) {
            }
        }
    }

    public Picture a(int i2, int i3) {
        return a(i2, i3, null);
    }

    public Picture a(d dVar) {
        a aVar = (dVar == null || !dVar.d()) ? this.c.x : dVar.d;
        if (dVar != null && dVar.e()) {
            return a((int) Math.ceil((double) dVar.f.a()), (int) Math.ceil((double) dVar.f.b()), dVar);
        } else if (this.c.c != null && this.c.c.b != Unit.percent && this.c.d != null && this.c.d.b != Unit.percent) {
            return a((int) Math.ceil((double) this.c.c.a(this.f)), (int) Math.ceil((double) this.c.d.a(this.f)), dVar);
        } else if (this.c.c != null && aVar != null) {
            float a2 = this.c.c.a(this.f);
            return a((int) Math.ceil((double) a2), (int) Math.ceil((double) ((aVar.d * a2) / aVar.c)), dVar);
        } else if (this.c.d == null || aVar == null) {
            return a(512, 512, dVar);
        } else {
            float a3 = this.c.d.a(this.f);
            return a((int) Math.ceil((double) ((aVar.c * a3) / aVar.d)), (int) Math.ceil((double) a3), dVar);
        }
    }

    public Picture a(int i2, int i3, d dVar) {
        Picture picture = new Picture();
        Canvas beginRecording = picture.beginRecording(i2, i3);
        if (dVar == null || dVar.f == null) {
            dVar = dVar == null ? new d() : new d(dVar);
            dVar.a(0.0f, 0.0f, (float) i2, (float) i3);
        }
        new e(beginRecording, this.f).a(this, dVar);
        picture.endRecording();
        return picture;
    }

    public ac a() {
        return this.c;
    }

    public void a(ac acVar) {
        this.c = acVar;
    }

    public ak b(String str) {
        if (str == null) {
            return null;
        }
        String f2 = f(str);
        if (f2.length() <= 1 || !f2.startsWith("#")) {
            return null;
        }
        return e(f2.substring(1));
    }

    private String f(String str) {
        if (str.startsWith("\"") && str.endsWith("\"")) {
            str = str.substring(1, str.length() - 1).replace("\\\"", "\"");
        } else if (str.startsWith("'") && str.endsWith("'")) {
            str = str.substring(1, str.length() - 1).replace("\\'", "'");
        }
        return str.replace("\\\n", "").replace("\\A", ReactEditTextInputConnectionWrapper.NEWLINE_RAW_VALUE);
    }

    public void a(CSSParser.m mVar) {
        this.g.a(mVar);
    }

    public List<CSSParser.k> b() {
        return this.g.a();
    }

    public boolean c() {
        return !this.g.b();
    }

    public void d() {
        this.g.a(CSSParser.Source.RenderOptions);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class a {
        float a;
        float b;
        float c;
        float d;

        public a(float f, float f2, float f3, float f4) {
            this.a = f;
            this.b = f2;
            this.c = f3;
            this.d = f4;
        }

        public a(a aVar) {
            this.a = aVar.a;
            this.b = aVar.b;
            this.c = aVar.c;
            this.d = aVar.d;
        }

        public static a a(float f, float f2, float f3, float f4) {
            return new a(f, f2, f3 - f, f4 - f2);
        }

        public float a() {
            return this.a + this.c;
        }

        public float b() {
            return this.b + this.d;
        }

        public void a(a aVar) {
            float f = aVar.a;
            if (f < this.a) {
                this.a = f;
            }
            float f2 = aVar.b;
            if (f2 < this.b) {
                this.b = f2;
            }
            if (aVar.a() > a()) {
                this.c = aVar.a() - this.a;
            }
            if (aVar.b() > b()) {
                this.d = aVar.b() - this.b;
            }
        }

        public String toString() {
            return "[" + this.a + " " + this.b + " " + this.c + " " + this.d + "]";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class Style implements Cloneable {
        Boolean A;
        Boolean B;
        al C;
        Float D;
        String E;
        FillRule F;
        String G;
        al H;
        Float I;
        al J;
        Float K;
        VectorEffect L;
        RenderQuality M;
        long a = 0;
        al b;
        FillRule c;
        Float d;
        al e;
        Float f;
        n g;
        LineCap h;
        LineJoin i;
        Float j;
        n[] k;
        n l;
        Float m;
        e n;
        List<String> o;
        n p;
        Integer q;
        FontStyle r;
        TextDecoration s;
        TextDirection t;
        TextAnchor u;
        Boolean v;
        b w;
        String x;
        String y;
        String z;

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum FillRule {
            NonZero,
            EvenOdd
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum FontStyle {
            Normal,
            Italic,
            Oblique
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum LineCap {
            Butt,
            Round,
            Square
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum LineJoin {
            Miter,
            Round,
            Bevel
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum RenderQuality {
            auto,
            optimizeQuality,
            optimizeSpeed
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum TextAnchor {
            Start,
            Middle,
            End
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum TextDecoration {
            None,
            Underline,
            Overline,
            LineThrough,
            Blink
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum TextDirection {
            LTR,
            RTL
        }

        /* compiled from: TbsSdkJava */
        /* loaded from: classes.dex */
        public enum VectorEffect {
            None,
            NonScalingStroke
        }

        public static Style a() {
            Style style = new Style();
            style.a = -1;
            style.b = e.b;
            style.c = FillRule.NonZero;
            style.d = Float.valueOf(1.0f);
            style.e = null;
            style.f = Float.valueOf(1.0f);
            style.g = new n(1.0f);
            style.h = LineCap.Butt;
            style.i = LineJoin.Miter;
            style.j = Float.valueOf(4.0f);
            style.k = null;
            style.l = new n(0.0f);
            style.m = Float.valueOf(1.0f);
            style.n = e.b;
            style.o = null;
            style.p = new n(12.0f, Unit.pt);
            style.q = 400;
            style.r = FontStyle.Normal;
            style.s = TextDecoration.None;
            style.t = TextDirection.LTR;
            style.u = TextAnchor.Start;
            style.v = true;
            style.w = null;
            style.x = null;
            style.y = null;
            style.z = null;
            style.A = Boolean.TRUE;
            style.B = Boolean.TRUE;
            style.C = e.b;
            style.D = Float.valueOf(1.0f);
            style.E = null;
            style.F = FillRule.NonZero;
            style.G = null;
            style.H = null;
            style.I = Float.valueOf(1.0f);
            style.J = null;
            style.K = Float.valueOf(1.0f);
            style.L = VectorEffect.None;
            style.M = RenderQuality.auto;
            return style;
        }

        public void a(boolean z) {
            this.A = Boolean.TRUE;
            this.v = z ? Boolean.TRUE : Boolean.FALSE;
            this.w = null;
            this.E = null;
            this.m = Float.valueOf(1.0f);
            this.C = e.b;
            this.D = Float.valueOf(1.0f);
            this.G = null;
            this.H = null;
            this.I = Float.valueOf(1.0f);
            this.J = null;
            this.K = Float.valueOf(1.0f);
            this.L = VectorEffect.None;
        }

        @Override // java.lang.Object
        public Object clone() throws CloneNotSupportedException {
            Style style = (Style) super.clone();
            n[] nVarArr = this.k;
            if (nVarArr != null) {
                style.k = (n[]) nVarArr.clone();
            }
            return style;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class al implements Cloneable {
        al() {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class e extends al {
        static final e b = new e(-16777216);
        static final e c = new e(0);
        int a;

        public e(int i) {
            this.a = i;
        }

        @Override // java.lang.Object
        public String toString() {
            return String.format("#%08x", Integer.valueOf(this.a));
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class f extends al {
        private static f a = new f();

        private f() {
        }

        public static f a() {
            return a;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class s extends al {
        String a;
        al b;

        public s(String str, al alVar) {
            this.a = str;
            this.b = alVar;
        }

        @Override // java.lang.Object
        public String toString() {
            return this.a + " " + this.b;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class n implements Cloneable {
        float a;
        Unit b;

        public n(float f, Unit unit) {
            this.a = f;
            this.b = unit;
        }

        public n(float f) {
            this.a = f;
            this.b = Unit.px;
        }

        public float a() {
            return this.a;
        }

        public float a(e eVar) {
            switch (this.b) {
                case px:
                    return this.a;
                case em:
                    return this.a * eVar.b();
                case ex:
                    return this.a * eVar.c();
                case in:
                    return this.a * eVar.a();
                case cm:
                    return (this.a * eVar.a()) / 2.54f;
                case mm:
                    return (this.a * eVar.a()) / 25.4f;
                case pt:
                    return (this.a * eVar.a()) / 72.0f;
                case pc:
                    return (this.a * eVar.a()) / 6.0f;
                case percent:
                    a d = eVar.d();
                    if (d == null) {
                        return this.a;
                    }
                    return (this.a * d.c) / 100.0f;
                default:
                    return this.a;
            }
        }

        public float b(e eVar) {
            if (this.b != Unit.percent) {
                return a(eVar);
            }
            a d = eVar.d();
            if (d == null) {
                return this.a;
            }
            return (this.a * d.d) / 100.0f;
        }

        public float c(e eVar) {
            if (this.b != Unit.percent) {
                return a(eVar);
            }
            a d = eVar.d();
            if (d == null) {
                return this.a;
            }
            float f = d.c;
            float f2 = d.d;
            if (f == f2) {
                return (this.a * f) / 100.0f;
            }
            return (this.a * ((float) (Math.sqrt((double) ((f * f) + (f2 * f2))) / 1.414213562373095d))) / 100.0f;
        }

        public float a(e eVar, float f) {
            if (this.b == Unit.percent) {
                return (this.a * f) / 100.0f;
            }
            return a(eVar);
        }

        public float a(float f) {
            int i = AnonymousClass1.a[this.b.ordinal()];
            if (i == 1) {
                return this.a;
            }
            switch (i) {
                case 4:
                    return this.a * f;
                case 5:
                    return (this.a * f) / 2.54f;
                case 6:
                    return (this.a * f) / 25.4f;
                case 7:
                    return (this.a * f) / 72.0f;
                case 8:
                    return (this.a * f) / 6.0f;
                default:
                    return this.a;
            }
        }

        public boolean b() {
            return this.a == 0.0f;
        }

        public boolean c() {
            return this.a < 0.0f;
        }

        @Override // java.lang.Object
        public String toString() {
            return String.valueOf(this.a) + this.b;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class b {
        n a;
        n b;
        n c;
        n d;

        public b(n nVar, n nVar2, n nVar3, n nVar4) {
            this.a = nVar;
            this.b = nVar2;
            this.c = nVar3;
            this.d = nVar4;
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ak {
        SVG u;
        ag v;

        String a() {
            return "";
        }

        ak() {
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class ai extends ak {
        String p = null;
        Boolean q = null;
        Style r = null;
        Style s = null;
        List<String> t = null;

        ai() {
        }

        public String toString() {
            return a();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class ah extends ai {
        a o = null;

        ah() {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class af extends ah implements ad {
        Set<String> h = null;
        String i = null;
        Set<String> j = null;
        Set<String> k = null;
        Set<String> l = null;

        af() {
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void a(Set<String> set) {
            this.h = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> c() {
            return this.h;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void a(String str) {
            this.i = str;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public String d() {
            return this.i;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void b(Set<String> set) {
            this.j = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> e() {
            return this.j;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void c(Set<String> set) {
            this.k = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> f() {
            return this.k;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void d(Set<String> set) {
            this.l = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> g() {
            return this.l;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class ae extends ah implements ad, ag {
        List<ak> i = new ArrayList();
        Set<String> j = null;
        String k = null;
        Set<String> l = null;
        Set<String> m = null;
        Set<String> n = null;

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> e() {
            return null;
        }

        ae() {
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public List<ak> b() {
            return this.i;
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public void a(ak akVar) throws SVGParseException {
            this.i.add(akVar);
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void a(Set<String> set) {
            this.j = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> c() {
            return this.j;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void a(String str) {
            this.k = str;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public String d() {
            return this.k;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void b(Set<String> set) {
            this.l = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void c(Set<String> set) {
            this.m = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> f() {
            return this.m;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public void d(Set<String> set) {
            this.n = set;
        }

        @Override // com.caverock.androidsvg.SVG.ad
        public Set<String> g() {
            return this.n;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class am extends ae {
        PreserveAspectRatio w = null;

        am() {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class ao extends am {
        a x;

        ao() {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class k extends ae implements l {
        Matrix b;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return PushSelfShowMessage.NOTIFY_GROUP;
        }

        @Override // com.caverock.androidsvg.SVG.l
        public void a(Matrix matrix) {
            this.b = matrix;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class j extends af implements l {
        Matrix e;

        j() {
        }

        @Override // com.caverock.androidsvg.SVG.l
        public void a(Matrix matrix) {
            this.e = matrix;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class av extends ae {
        av() {
        }

        @Override // com.caverock.androidsvg.SVG.ae, com.caverock.androidsvg.SVG.ag
        public void a(ak akVar) throws SVGParseException {
            if (akVar instanceof au) {
                this.i.add(akVar);
                return;
            }
            throw new SVGParseException("Text content elements cannot contain " + akVar + " elements.");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class ax extends av {
        List<n> b;
        List<n> c;
        List<n> d;
        List<n> e;

        ax() {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class at extends ax implements ay, l {
        Matrix a;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "text";
        }

        @Override // com.caverock.androidsvg.SVG.l
        public void a(Matrix matrix) {
            this.a = matrix;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class as extends ax implements au {
        private ay a;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "tspan";
        }

        public void a(ay ayVar) {
            this.a = ayVar;
        }

        @Override // com.caverock.androidsvg.SVG.au
        public ay h() {
            return this.a;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class az extends ak implements au {
        String a;
        private ay b;

        public az(String str) {
            this.a = str;
        }

        public String toString() {
            return "TextChild: '" + this.a + "'";
        }

        @Override // com.caverock.androidsvg.SVG.au
        public ay h() {
            return this.b;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ar extends av implements au {
        String a;
        private ay b;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "tref";
        }

        public void a(ay ayVar) {
            this.b = ayVar;
        }

        @Override // com.caverock.androidsvg.SVG.au
        public ay h() {
            return this.b;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class aw extends av implements au {
        String a;
        n b;
        private ay c;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "textPath";
        }

        public void a(ay ayVar) {
            this.c = ayVar;
        }

        @Override // com.caverock.androidsvg.SVG.au
        public ay h() {
            return this.c;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class i extends ai implements ag {
        List<ak> a = new ArrayList();
        Boolean b;
        Matrix c;
        GradientSpread d;
        String e;

        i() {
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public List<ak> b() {
            return this.a;
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public void a(ak akVar) throws SVGParseException {
            if (akVar instanceof ab) {
                this.a.add(akVar);
                return;
            }
            throw new SVGParseException("Gradient elements cannot contain " + akVar + " elements.");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ab extends ai implements ag {
        Float a;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "stop";
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public void a(ak akVar) {
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public List<ak> b() {
            return Collections.emptyList();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class m extends am implements l {
        String a;
        n b;
        n c;
        n d;
        n e;
        Matrix f;

        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "image";
        }

        @Override // com.caverock.androidsvg.SVG.l
        public void a(Matrix matrix) {
            this.f = matrix;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class aa extends ai implements ag {
        @Override // com.caverock.androidsvg.SVG.ak
        String a() {
            return "solidColor";
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public void a(ak akVar) {
        }

        @Override // com.caverock.androidsvg.SVG.ag
        public List<ak> b() {
            return Collections.emptyList();
        }
    }

    public void c(String str) {
        this.d = str;
    }

    public void d(String str) {
        this.e = str;
    }

    public static f e() {
        return a;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class u implements v {
        private int b = 0;
        private int d = 0;
        private byte[] a = new byte[8];
        private float[] c = new float[16];

        public boolean a() {
            return this.b == 0;
        }

        private void a(byte b) {
            int i = this.b;
            byte[] bArr = this.a;
            if (i == bArr.length) {
                byte[] bArr2 = new byte[bArr.length * 2];
                System.arraycopy(bArr, 0, bArr2, 0, bArr.length);
                this.a = bArr2;
            }
            byte[] bArr3 = this.a;
            int i2 = this.b;
            this.b = i2 + 1;
            bArr3[i2] = b;
        }

        private void a(int i) {
            float[] fArr = this.c;
            if (fArr.length < this.d + i) {
                float[] fArr2 = new float[fArr.length * 2];
                System.arraycopy(fArr, 0, fArr2, 0, fArr.length);
                this.c = fArr2;
            }
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2) {
            a((byte) 0);
            a(2);
            float[] fArr = this.c;
            int i = this.d;
            this.d = i + 1;
            fArr[i] = f;
            int i2 = this.d;
            this.d = i2 + 1;
            fArr[i2] = f2;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void b(float f, float f2) {
            a((byte) 1);
            a(2);
            float[] fArr = this.c;
            int i = this.d;
            this.d = i + 1;
            fArr[i] = f;
            int i2 = this.d;
            this.d = i2 + 1;
            fArr[i2] = f2;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, float f4, float f5, float f6) {
            a((byte) 2);
            a(6);
            float[] fArr = this.c;
            int i = this.d;
            this.d = i + 1;
            fArr[i] = f;
            int i2 = this.d;
            this.d = i2 + 1;
            fArr[i2] = f2;
            int i3 = this.d;
            this.d = i3 + 1;
            fArr[i3] = f3;
            int i4 = this.d;
            this.d = i4 + 1;
            fArr[i4] = f4;
            int i5 = this.d;
            this.d = i5 + 1;
            fArr[i5] = f5;
            int i6 = this.d;
            this.d = i6 + 1;
            fArr[i6] = f6;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, float f4) {
            a((byte) 3);
            a(4);
            float[] fArr = this.c;
            int i = this.d;
            this.d = i + 1;
            fArr[i] = f;
            int i2 = this.d;
            this.d = i2 + 1;
            fArr[i2] = f2;
            int i3 = this.d;
            this.d = i3 + 1;
            fArr[i3] = f3;
            int i4 = this.d;
            this.d = i4 + 1;
            fArr[i4] = f4;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void a(float f, float f2, float f3, boolean z, boolean z2, float f4, float f5) {
            a((byte) ((z ? 2 : 0) | 4 | (z2 ? 1 : 0)));
            a(5);
            float[] fArr = this.c;
            int i = this.d;
            this.d = i + 1;
            fArr[i] = f;
            int i2 = this.d;
            this.d = i2 + 1;
            fArr[i2] = f2;
            int i3 = this.d;
            this.d = i3 + 1;
            fArr[i3] = f3;
            int i4 = this.d;
            this.d = i4 + 1;
            fArr[i4] = f4;
            int i5 = this.d;
            this.d = i5 + 1;
            fArr[i5] = f5;
        }

        @Override // com.caverock.androidsvg.SVG.v
        public void b() {
            a((byte) 8);
        }

        public void a(v vVar) {
            int i = 0;
            for (int i2 = 0; i2 < this.b; i2++) {
                byte b = this.a[i2];
                if (b != 8) {
                    switch (b) {
                        case 0:
                            float[] fArr = this.c;
                            int i3 = i + 1;
                            float f = fArr[i];
                            i = i3 + 1;
                            vVar.a(f, fArr[i3]);
                            continue;
                        case 1:
                            float[] fArr2 = this.c;
                            int i4 = i + 1;
                            float f2 = fArr2[i];
                            i = i4 + 1;
                            vVar.b(f2, fArr2[i4]);
                            continue;
                        case 2:
                            float[] fArr3 = this.c;
                            int i5 = i + 1;
                            float f3 = fArr3[i];
                            int i6 = i5 + 1;
                            float f4 = fArr3[i5];
                            int i7 = i6 + 1;
                            float f5 = fArr3[i6];
                            int i8 = i7 + 1;
                            float f6 = fArr3[i7];
                            int i9 = i8 + 1;
                            float f7 = fArr3[i8];
                            i = i9 + 1;
                            vVar.a(f3, f4, f5, f6, f7, fArr3[i9]);
                            continue;
                        case 3:
                            float[] fArr4 = this.c;
                            int i10 = i + 1;
                            int i11 = i10 + 1;
                            int i12 = i11 + 1;
                            i = i12 + 1;
                            vVar.a(fArr4[i], fArr4[i10], fArr4[i11], fArr4[i12]);
                            continue;
                        default:
                            boolean z = (b & 2) != 0;
                            boolean z2 = (b & 1) != 0;
                            float[] fArr5 = this.c;
                            int i13 = i + 1;
                            float f8 = fArr5[i];
                            int i14 = i13 + 1;
                            float f9 = fArr5[i13];
                            int i15 = i14 + 1;
                            float f10 = fArr5[i14];
                            int i16 = i15 + 1;
                            i = i16 + 1;
                            vVar.a(f8, f9, f10, z, z2, fArr5[i15], fArr5[i16]);
                            continue;
                    }
                } else {
                    vVar.b();
                }
            }
        }
    }

    public ai e(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        if (str.equals(this.c.p)) {
            return this.c;
        }
        if (this.h.containsKey(str)) {
            return this.h.get(str);
        }
        ai a2 = a(this.c, str);
        this.h.put(str, a2);
        return a2;
    }

    private ai a(ag agVar, String str) {
        ai a2;
        ai aiVar = (ai) agVar;
        if (str.equals(aiVar.p)) {
            return aiVar;
        }
        for (ak akVar : agVar.b()) {
            if (akVar instanceof ai) {
                ai aiVar2 = (ai) akVar;
                if (str.equals(aiVar2.p)) {
                    return aiVar2;
                }
                if ((akVar instanceof ag) && (a2 = a((ag) akVar, str)) != null) {
                    return a2;
                }
            }
        }
        return null;
    }
}
