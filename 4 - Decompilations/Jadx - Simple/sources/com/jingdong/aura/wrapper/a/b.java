package com.jingdong.aura.wrapper.a;

import android.annotation.TargetApi;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Debug;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class b {
    private static final Executor b;
    static final Queue<c> a = new LinkedList();
    private static final BlockingQueue<Runnable> c = new LinkedBlockingQueue(128);

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class a implements RejectedExecutionHandler {
        @Override // java.util.concurrent.RejectedExecutionHandler
        public void rejectedExecution(Runnable runnable, ThreadPoolExecutor threadPoolExecutor) {
            Object[] array = b.c.toArray();
            StringBuilder sb = new StringBuilder();
            sb.append('[');
            for (Object obj : array) {
                if (obj.getClass().isAnonymousClass()) {
                    sb.append(a(obj));
                    sb.append(',');
                    sb.append(' ');
                } else {
                    sb.append(obj.getClass());
                    sb.append(',');
                    sb.append(' ');
                }
            }
            sb.append(']');
            throw new RejectedExecutionException("Task " + runnable.toString() + " rejected from " + threadPoolExecutor.toString() + " in " + sb.toString());
        }

        private Object a(Object obj) {
            try {
                Field declaredField = obj.getClass().getDeclaredField("this$0");
                declaredField.setAccessible(true);
                return declaredField.get(obj);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return obj;
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                return obj;
            } catch (NoSuchFieldException e3) {
                e3.printStackTrace();
                return obj;
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static abstract class c implements Runnable {
        public final String d;

        public c(String str) {
            this.d = str;
        }

        @Override // java.lang.Object
        public String toString() {
            return getClass().getName() + "@" + this.d;
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.wrapper.a.b$b  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    static class AsyncTaskC0046b extends AsyncTask<Void, Void, Void> {
        private final c a;

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public Void doInBackground(Void... voidArr) {
            return b(voidArr);
        }

        public AsyncTaskC0046b(c cVar) {
            this.a = cVar;
        }

        protected Void b(Void... voidArr) {
            b.c(this.a);
            return null;
        }

        @Override // java.lang.Object
        public String toString() {
            return getClass().getSimpleName() + "@" + this.a;
        }
    }

    @TargetApi(11)
    public static void a(c cVar) {
        AsyncTaskC0046b bVar = new AsyncTaskC0046b(cVar);
        if (Build.VERSION.SDK_INT < 11) {
            bVar.execute(new Void[0]);
        } else {
            bVar.executeOnExecutor(b, new Void[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void c(c cVar) {
        long nanoTime = System.nanoTime();
        long threadCpuTimeNanos = Debug.threadCpuTimeNanos();
        try {
            cVar.run();
            PrintStream printStream = System.out;
            printStream.println("Timing - " + Thread.currentThread().getName() + " " + cVar.d + ": " + ((Debug.threadCpuTimeNanos() - threadCpuTimeNanos) / 1000000) + "ms (cpu) / " + ((System.nanoTime() - nanoTime) / 1000000) + "ms (real)");
        } catch (RuntimeException unused) {
            PrintStream printStream2 = System.out;
            printStream2.println("Exception in " + cVar.d);
            PrintStream printStream3 = System.out;
            printStream3.println("Timing - " + Thread.currentThread().getName() + " " + cVar.d + " (failed): " + ((Debug.threadCpuTimeNanos() - threadCpuTimeNanos) / 1000000) + "ms (cpu) / " + ((System.nanoTime() - nanoTime) / 1000000) + "ms (real)");
        } catch (Throwable th) {
            th.printStackTrace();
            PrintStream printStream4 = System.out;
            printStream4.println("Timing - " + Thread.currentThread().getName() + " " + cVar.d + " (failed): " + ((Debug.threadCpuTimeNanos() - threadCpuTimeNanos) / 1000000) + "ms (cpu) / " + ((System.nanoTime() - nanoTime) / 1000000) + "ms (real)");
        }
    }

    static {
        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(8, 16, 1, TimeUnit.SECONDS, c, new ThreadFactory() { // from class: com.jingdong.aura.wrapper.a.b.1
            private final AtomicInteger a = new AtomicInteger(1);

            @Override // java.util.concurrent.ThreadFactory
            public Thread newThread(Runnable runnable) {
                return new Thread(runnable, "CoordTask #" + this.a.getAndIncrement());
            }
        }, new a());
        b = threadPoolExecutor;
        d.a(threadPoolExecutor);
    }
}
