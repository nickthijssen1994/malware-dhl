package com.jingdong.aura.core.util;

import android.app.ActivityManager;
import android.app.Application;
import android.os.Process;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class g {
    private static String a;

    public static boolean a(Application application) {
        return a(application, d(application));
    }

    public static String a(int i) {
        Throwable th;
        BufferedReader bufferedReader;
        FileNotFoundException e;
        BufferedReader bufferedReader2;
        IOException e2;
        BufferedReader bufferedReader3;
        InputStreamReader inputStreamReader;
        InputStreamReader inputStreamReader2;
        InputStreamReader inputStreamReader3;
        try {
            try {
                InputStreamReader inputStreamReader4 = null;
                try {
                    InputStreamReader inputStreamReader5 = new InputStreamReader(new FileInputStream("/proc/" + i + "/cmdline"));
                    try {
                        BufferedReader bufferedReader4 = new BufferedReader(inputStreamReader5);
                        try {
                            char[] cArr = new char[64];
                            bufferedReader4.read(cArr);
                            int length = cArr.length;
                            int i2 = 0;
                            int i3 = 0;
                            while (i2 < length && cArr[i2] != 0) {
                                i3++;
                                i2++;
                            }
                            String str = new String(cArr, 0, i3);
                            try {
                                inputStreamReader5.close();
                            } catch (IOException e3) {
                                e3.printStackTrace();
                            }
                            try {
                                bufferedReader4.close();
                            } catch (IOException e4) {
                                e4.printStackTrace();
                            }
                            return str;
                        } catch (FileNotFoundException e5) {
                            e = e5;
                            inputStreamReader = inputStreamReader5;
                            bufferedReader2 = bufferedReader4;
                            inputStreamReader4 = inputStreamReader;
                            e.printStackTrace();
                            if (inputStreamReader4 != null) {
                                try {
                                    inputStreamReader4.close();
                                } catch (IOException e6) {
                                    e6.printStackTrace();
                                }
                            }
                            if (bufferedReader2 == null) {
                                return "";
                            }
                            bufferedReader2.close();
                            return "";
                        } catch (IOException e7) {
                            e2 = e7;
                            inputStreamReader2 = inputStreamReader5;
                            bufferedReader3 = bufferedReader4;
                            inputStreamReader4 = inputStreamReader2;
                            e2.printStackTrace();
                            if (inputStreamReader4 != null) {
                                try {
                                    inputStreamReader4.close();
                                } catch (IOException e8) {
                                    e8.printStackTrace();
                                }
                            }
                            if (bufferedReader3 == null) {
                                return "";
                            }
                            bufferedReader3.close();
                            return "";
                        } catch (Throwable th2) {
                            th = th2;
                            inputStreamReader3 = inputStreamReader5;
                            bufferedReader = bufferedReader4;
                            inputStreamReader4 = inputStreamReader3;
                            if (inputStreamReader4 != null) {
                                try {
                                    inputStreamReader4.close();
                                } catch (IOException e9) {
                                    e9.printStackTrace();
                                }
                            }
                            if (bufferedReader != null) {
                                try {
                                    bufferedReader.close();
                                } catch (IOException e10) {
                                    e10.printStackTrace();
                                }
                            }
                            throw th;
                        }
                    } catch (FileNotFoundException e11) {
                        e = e11;
                        inputStreamReader = inputStreamReader5;
                        bufferedReader2 = null;
                    } catch (IOException e12) {
                        e2 = e12;
                        inputStreamReader2 = inputStreamReader5;
                        bufferedReader3 = null;
                    } catch (Throwable th3) {
                        th = th3;
                        inputStreamReader3 = inputStreamReader5;
                        bufferedReader = null;
                    }
                } catch (FileNotFoundException e13) {
                    e = e13;
                    bufferedReader2 = null;
                } catch (IOException e14) {
                    e2 = e14;
                    bufferedReader3 = null;
                } catch (Throwable th4) {
                    th = th4;
                    bufferedReader = null;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        } catch (IOException e15) {
            while (true) {
                e15.printStackTrace();
                return "";
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:9:0x0014, code lost:
        if (r0.length() == 0) goto L_0x0016;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static boolean a(android.app.Application r1, java.lang.String r2) {
        /*
            boolean r0 = android.text.TextUtils.isEmpty(r2)
            if (r0 != 0) goto L_0x002f
            if (r1 != 0) goto L_0x0009
            goto L_0x002f
        L_0x0009:
            r0 = 0
            java.lang.String r0 = b(r1)     // Catch: Throwable -> 0x0018
            if (r0 == 0) goto L_0x0016
            int r1 = r0.length()     // Catch: Throwable -> 0x0018
            if (r1 != 0) goto L_0x0018
        L_0x0016:
            java.lang.String r0 = ""
        L_0x0018:
            boolean r1 = android.text.TextUtils.isEmpty(r0)
            if (r1 == 0) goto L_0x002a
            int r1 = android.os.Process.myPid()
            java.lang.String r1 = a(r1)
            java.lang.String r0 = r1.trim()
        L_0x002a:
            boolean r1 = r2.equals(r0)
            return r1
        L_0x002f:
            r1 = 0
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.util.g.a(android.app.Application, java.lang.String):boolean");
    }

    public static String b(Application application) {
        String str = a;
        if (str != null) {
            return str;
        }
        a = c(application);
        return a;
    }

    private static String c(Application application) {
        ActivityManager.RunningAppProcessInfo runningAppProcessInfo;
        Throwable th;
        byte[] bArr;
        Throwable th2;
        FileInputStream fileInputStream;
        int myPid = Process.myPid();
        if (application == null || myPid <= 0) {
            return "";
        }
        FileInputStream fileInputStream2 = null;
        try {
            Iterator<ActivityManager.RunningAppProcessInfo> it = ((ActivityManager) application.getSystemService("activity")).getRunningAppProcesses().iterator();
            while (true) {
                if (!it.hasNext()) {
                    runningAppProcessInfo = null;
                    break;
                }
                runningAppProcessInfo = it.next();
                if (runningAppProcessInfo.pid == myPid) {
                    break;
                }
            }
        } catch (Throwable th3) {
            th3.printStackTrace();
            runningAppProcessInfo = null;
        }
        if (runningAppProcessInfo != null) {
            return runningAppProcessInfo.processName;
        }
        try {
            try {
                bArr = new byte[128];
                try {
                    fileInputStream = new FileInputStream("/proc/" + myPid + "/cmdline");
                } catch (Throwable th4) {
                    th2 = th4;
                }
            } catch (Throwable th5) {
                th = th5;
            }
            try {
                int read = fileInputStream.read(bArr);
                if (read > 0) {
                    for (int i = 0; i < read; i++) {
                        if (bArr[i] <= 128 && bArr[i] > 0) {
                        }
                        read = i;
                        break;
                    }
                    String str = new String(bArr, 0, read);
                    try {
                        fileInputStream.close();
                    } catch (Throwable th6) {
                        th6.printStackTrace();
                    }
                    return str;
                }
                fileInputStream.close();
                return "";
            } catch (Throwable th7) {
                th2 = th7;
                fileInputStream2 = fileInputStream;
                th2.printStackTrace();
                if (fileInputStream2 == null) {
                    return "";
                }
                fileInputStream2.close();
                return "";
            }
        } catch (Throwable th8) {
            while (true) {
                th8.printStackTrace();
                return "";
            }
        }
    }

    private static String d(Application application) {
        return application.getPackageName();
    }
}
