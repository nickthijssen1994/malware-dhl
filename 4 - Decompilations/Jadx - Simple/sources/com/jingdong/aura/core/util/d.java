package com.jingdong.aura.core.util;

import android.text.TextUtils;
import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.runing.k;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.util.zip.ZipFile;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class d {
    public static String a(String str) {
        Throwable th;
        FileChannel fileChannel;
        FileInputStream fileInputStream;
        FileChannel fileChannel2;
        Exception e;
        try {
            try {
                MessageDigest instance = MessageDigest.getInstance("MD5");
                File file = new File(str);
                if (file.exists() && file.isFile()) {
                    fileInputStream = new FileInputStream(file);
                    try {
                        fileChannel2 = fileInputStream.getChannel();
                        try {
                            instance.update(fileChannel2.map(FileChannel.MapMode.READ_ONLY, 0, file.length()));
                            byte[] digest = instance.digest();
                            StringBuilder sb = new StringBuilder(digest.length * 2);
                            for (byte b : digest) {
                                sb.append("0123456789abcdef".charAt((b >> 4) & 15));
                                sb.append("0123456789abcdef".charAt(b & 15));
                            }
                            String sb2 = sb.toString();
                            if (fileChannel2 != null) {
                                try {
                                    fileChannel2.close();
                                } catch (Exception e2) {
                                    e2.printStackTrace();
                                }
                            }
                            try {
                                fileInputStream.close();
                            } catch (Exception e3) {
                                e3.printStackTrace();
                            }
                            return sb2;
                        } catch (Exception e4) {
                            e = e4;
                            e.printStackTrace();
                            e.a("getMD5", str + "get md5 failed", "FileUtils.getMD5", e);
                            if (fileChannel2 != null) {
                                try {
                                    fileChannel2.close();
                                } catch (Exception e5) {
                                    e5.printStackTrace();
                                }
                            }
                            if (fileInputStream != null) {
                                try {
                                    fileInputStream.close();
                                } catch (Exception e6) {
                                    e6.printStackTrace();
                                }
                            }
                            return null;
                        }
                    } catch (Exception e7) {
                        e = e7;
                        fileChannel2 = null;
                    } catch (Throwable th2) {
                        th = th2;
                        fileChannel = null;
                        if (fileChannel != null) {
                            try {
                                fileChannel.close();
                            } catch (Exception e8) {
                                e8.printStackTrace();
                            }
                        }
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (Exception e9) {
                                e9.printStackTrace();
                            }
                        }
                        throw th;
                    }
                }
                return null;
            } catch (Exception e10) {
                e = e10;
                fileInputStream = null;
                fileChannel2 = null;
            } catch (Throwable th3) {
                th = th3;
                fileInputStream = null;
                fileChannel = null;
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public static String b(String str) {
        String a = a(str);
        if (a == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder();
        byte[] bytes = a.getBytes();
        int length = bytes.length;
        int i = 0;
        while (i < length) {
            int i2 = i + 1;
            int i3 = i2 >= length ? i2 - length : i2;
            int i4 = i + 4;
            if (i4 >= length) {
                i4 -= length;
            }
            sb.append("e70d12f4985ac3b6".charAt((bytes[i] + bytes[i3] + bytes[i4]) & 15));
            i = i2;
        }
        return sb.toString();
    }

    /* JADX WARN: Removed duplicated region for block: B:51:0x006b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0075 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0061 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static void a(java.io.InputStream r4, java.io.File r5) {
        /*
            r0 = 0
            java.io.FileOutputStream r1 = new java.io.FileOutputStream     // Catch: Throwable -> 0x003a, all -> 0x0037
            r1.<init>(r5)     // Catch: Throwable -> 0x003a, all -> 0x0037
            java.nio.channels.FileChannel r0 = r1.getChannel()     // Catch: Throwable -> 0x0035, all -> 0x005e
            r5 = 4096(0x1000, float:5.74E-42)
            byte[] r5 = new byte[r5]     // Catch: Throwable -> 0x0035, all -> 0x005e
        L_0x000e:
            int r2 = r4.read(r5)     // Catch: Throwable -> 0x0035, all -> 0x005e
            if (r2 > 0) goto L_0x002c
            if (r4 == 0) goto L_0x001e
            r4.close()     // Catch: Exception -> 0x001a
            goto L_0x001e
        L_0x001a:
            r4 = move-exception
            r4.printStackTrace()
        L_0x001e:
            if (r0 == 0) goto L_0x0028
            r0.close()     // Catch: Exception -> 0x0024
            goto L_0x0028
        L_0x0024:
            r4 = move-exception
            r4.printStackTrace()
        L_0x0028:
            r1.close()     // Catch: Exception -> 0x0059
            goto L_0x005d
        L_0x002c:
            r3 = 0
            java.nio.ByteBuffer r2 = java.nio.ByteBuffer.wrap(r5, r3, r2)     // Catch: Throwable -> 0x0035, all -> 0x005e
            r0.write(r2)     // Catch: Throwable -> 0x0035, all -> 0x005e
            goto L_0x000e
        L_0x0035:
            r5 = move-exception
            goto L_0x003c
        L_0x0037:
            r5 = move-exception
            r1 = r0
            goto L_0x005f
        L_0x003a:
            r5 = move-exception
            r1 = r0
        L_0x003c:
            r5.printStackTrace()     // Catch: all -> 0x005e
            if (r4 == 0) goto L_0x0049
            r4.close()     // Catch: Exception -> 0x0045
            goto L_0x0049
        L_0x0045:
            r4 = move-exception
            r4.printStackTrace()
        L_0x0049:
            if (r0 == 0) goto L_0x0053
            r0.close()     // Catch: Exception -> 0x004f
            goto L_0x0053
        L_0x004f:
            r4 = move-exception
            r4.printStackTrace()
        L_0x0053:
            if (r1 == 0) goto L_0x005d
            r1.close()     // Catch: Exception -> 0x0059
            goto L_0x005d
        L_0x0059:
            r4 = move-exception
            r4.printStackTrace()
        L_0x005d:
            return
        L_0x005e:
            r5 = move-exception
        L_0x005f:
            if (r4 == 0) goto L_0x0069
            r4.close()     // Catch: Exception -> 0x0065
            goto L_0x0069
        L_0x0065:
            r4 = move-exception
            r4.printStackTrace()
        L_0x0069:
            if (r0 == 0) goto L_0x0073
            r0.close()     // Catch: Exception -> 0x006f
            goto L_0x0073
        L_0x006f:
            r4 = move-exception
            r4.printStackTrace()
        L_0x0073:
            if (r1 == 0) goto L_0x007d
            r1.close()     // Catch: Exception -> 0x0079
            goto L_0x007d
        L_0x0079:
            r4 = move-exception
            r4.printStackTrace()
        L_0x007d:
            throw r5
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.util.d.a(java.io.InputStream, java.io.File):void");
    }

    public static File a() {
        File filesDir = k.a.getFilesDir();
        if (filesDir != null) {
            return filesDir;
        }
        return new File("/data/data/" + k.a.getPackageName() + "/files");
    }

    public static void a(ZipFile zipFile) {
        if (zipFile != null) {
            try {
                zipFile.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static boolean a(String str, String str2) {
        if (TextUtils.isEmpty(str) || TextUtils.isEmpty(str2) || !new File(str).exists() || !new File(str2).exists()) {
            return false;
        }
        String a = a(str);
        String a2 = a(str2);
        if (TextUtils.isEmpty(a) || TextUtils.isEmpty(a2)) {
            return false;
        }
        return a.equals(a2);
    }
}
