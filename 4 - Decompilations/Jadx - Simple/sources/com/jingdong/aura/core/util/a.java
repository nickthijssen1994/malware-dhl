package com.jingdong.aura.core.util;

import android.os.Process;
import com.jingdong.aura.core.runing.k;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import java.io.File;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class a {
    static final b a = c.a(a.class);
    private static String b;
    private static a c;
    private Map<String, C0045a> d = new ConcurrentHashMap();

    static {
        if (k.a.getApplicationContext() != null) {
            b = i.a(Process.myPid());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.util.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public class C0045a {
        FileChannel a;
        RandomAccessFile b;
        FileLock c;
        int d;

        C0045a(FileLock fileLock, int i, RandomAccessFile randomAccessFile, FileChannel fileChannel) {
            this.c = fileLock;
            this.d = i;
            this.b = randomAccessFile;
            this.a = fileChannel;
        }
    }

    public static a a() {
        if (c == null) {
            c = new a();
        }
        return c;
    }

    private int a(String str, FileLock fileLock, RandomAccessFile randomAccessFile, FileChannel fileChannel) {
        Integer num;
        Integer.valueOf(0);
        if (this.d.containsKey(str)) {
            C0045a aVar = this.d.get(str);
            int i = aVar.d;
            aVar.d = i + 1;
            num = Integer.valueOf(i);
        } else {
            Integer num2 = 1;
            this.d.put(str, new C0045a(fileLock, num2.intValue(), randomAccessFile, fileChannel));
            num = num2;
        }
        return num.intValue();
    }

    private int a(String str) {
        Integer num = 0;
        if (this.d.containsKey(str)) {
            C0045a aVar = this.d.get(str);
            int i = aVar.d - 1;
            aVar.d = i;
            num = Integer.valueOf(i);
            if (num.intValue() <= 0) {
                this.d.remove(str);
            }
        }
        return num.intValue();
    }

    public boolean a(File file) {
        if (file == null) {
            return false;
        }
        try {
            File file2 = new File(file.getParentFile().getAbsolutePath().concat("/lock"));
            if (!file2.exists()) {
                file2.createNewFile();
            }
            RandomAccessFile randomAccessFile = new RandomAccessFile(file2.getAbsolutePath(), "rw");
            FileChannel channel = randomAccessFile.getChannel();
            FileLock lock = channel.lock();
            if (!lock.isValid()) {
                return false;
            }
            a(file2.getAbsolutePath(), lock, randomAccessFile, channel);
            return true;
        } catch (Exception e) {
            b bVar = a;
            bVar.e(b + " FileLock " + file.getParentFile().getAbsolutePath().concat("/lock") + " Lock FAIL! " + e.getMessage());
            return false;
        }
    }

    public void b(File file) {
        C0045a aVar;
        File file2 = new File(file.getParentFile().getAbsolutePath().concat("/lock"));
        if (file2.exists() && this.d.containsKey(file2.getAbsolutePath()) && (aVar = this.d.get(file2.getAbsolutePath())) != null) {
            FileLock fileLock = aVar.c;
            RandomAccessFile randomAccessFile = aVar.b;
            FileChannel fileChannel = aVar.a;
            try {
                if (a(file2.getAbsolutePath()) <= 0) {
                    if (fileLock != null && fileLock.isValid()) {
                        fileLock.release();
                    }
                    if (randomAccessFile != null) {
                        randomAccessFile.close();
                    }
                    if (fileChannel != null) {
                        fileChannel.close();
                    }
                }
            } catch (Exception e) {
                b bVar = a;
                bVar.e(b + " FileLock " + file.getParentFile().getAbsolutePath().concat("/lock") + " unlock FAIL! " + e.getMessage());
            }
        }
    }
}
