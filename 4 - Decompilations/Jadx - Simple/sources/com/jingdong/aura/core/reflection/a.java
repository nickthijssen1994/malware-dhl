package com.jingdong.aura.core.reflection;

import android.app.Application;
import android.app.Instrumentation;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import androidx.databinding.DataBinderMapperProxy;
import com.jingdong.aura.core.reflection.Hack;
import com.jingdong.aura.core.reflection.c;
import com.jingdong.aura.core.runing.e;
import com.jingdong.aura.core.runing.j;
import com.jingdong.aura.core.runing.k;
import com.jingdong.aura.core.util.a.c;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class a {
    private static final com.jingdong.aura.core.util.a.b a = c.a(a.class);
    private static Object c = null;
    private static Object b = null;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static final class b implements Handler.Callback {
        final Object a;
        final Handler b;

        b(Handler handler, Object obj) {
            this.b = handler;
            this.a = obj;
        }

        @Override // android.os.Handler.Callback
        public boolean handleMessage(Message message) {
            RuntimeException runtimeException;
            RuntimeException runtimeException2;
            try {
                a.c();
                a.b(message);
                com.jingdong.aura.wrapper.mhCallback.a.a().a(message);
                this.b.handleMessage(message);
                a.c();
                return true;
            } finally {
                if (runtimeException != null) {
                    throw runtimeException;
                }
            }
        }
    }

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jingdong.aura.core.reflection.a$a */
    /* loaded from: classes.dex */
    public static class RunnableC0043a implements Runnable {
        RunnableC0043a() {
        }

        @Override // java.lang.Runnable
        public void run() {
            try {
                Object unused = a.c = b.b.a(b.a.a(), new Object[0]);
            } catch (Exception e) {
                e.printStackTrace();
            }
            synchronized (b.b) {
                b.b.notify();
            }
        }
    }

    public static Object a() {
        if (c == null) {
            if (Thread.currentThread().getId() == Looper.getMainLooper().getThread().getId()) {
                c = b.b.a(null, new Object[0]);
            } else {
                Handler handler = new Handler(Looper.getMainLooper());
                synchronized (b.b) {
                    handler.post(new RunnableC0043a());
                    b.b.wait();
                }
            }
        }
        return c;
    }

    public static Handler b() {
        Object a2 = a();
        if (a2 != null) {
            try {
                Handler handler = (Handler) b.a.b("mH").b(Hack.a("android.app.ActivityThread$H").a()).a((Hack.d<Object, T2>) a2);
                Field declaredField = Handler.class.getDeclaredField("mCallback");
                declaredField.setAccessible(true);
                declaredField.set(handler, new b(handler, a2));
                return null;
            } catch (Hack.HackDeclaration.HackAssertionException e) {
                e.printStackTrace();
                return null;
            }
        } else {
            throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
        }
    }

    public static void c() {
        Object a2 = a();
        if (a2 != null) {
            Object a3 = a(k.a, a2, k.a.getPackageName());
            if (a3 == null && (a3 = a(k.a, a2)) == null) {
                throw new RuntimeException("can't create loadedApk");
            } else if (!(b.L.a((Hack.d<Object, ClassLoader>) a3) instanceof e)) {
                b.L.a((Hack.d<Object, ClassLoader>) a3, k.b);
                b.N.a((Hack.d<Object, Resources>) a3, k.d);
            }
        } else {
            throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
        }
    }

    public static Object a(Application application, Object obj, String str) {
        WeakReference weakReference = (WeakReference) b.f.a((Hack.d<Object, Map<String, Object>>) obj).get(str);
        if (weakReference == null || weakReference.get() == null) {
            return null;
        }
        b = weakReference.get();
        return weakReference.get();
    }

    public static Object a(Application application, Object obj) {
        Method method;
        try {
            ApplicationInfo applicationInfo = application.getPackageManager().getApplicationInfo(application.getPackageName(), 1152);
            application.getPackageManager();
            Resources resources = application.getResources();
            if (resources instanceof com.jingdong.aura.core.runing.resource.b) {
                method = resources.getClass().getSuperclass().getSuperclass().getDeclaredMethod("getCompatibilityInfo", new Class[0]);
            } else if (resources.getClass().getName().equals("android.content.res.MiuiResources")) {
                method = resources.getClass().getSuperclass().getDeclaredMethod("getCompatibilityInfo", new Class[0]);
            } else {
                method = resources.getClass().getDeclaredMethod("getCompatibilityInfo", new Class[0]);
            }
            method.setAccessible(true);
            Class<?> cls = Class.forName("android.content.res.CompatibilityInfo");
            Object invoke = method.invoke(application.getResources(), new Object[0]);
            Method declaredMethod = b.a.a().getDeclaredMethod("getPackageInfoNoCheck", ApplicationInfo.class, cls);
            declaredMethod.setAccessible(true);
            Object invoke2 = declaredMethod.invoke(obj, applicationInfo, invoke);
            b = invoke2;
            return invoke2;
        } catch (Throwable th) {
            th.printStackTrace();
            throw new RuntimeException(th);
        }
    }

    public static void a(String str, ClassLoader classLoader) {
        Object a2 = a();
        if (a2 != null) {
            Object a3 = a(k.a, a2, str);
            if (a3 == null) {
                a3 = a(k.a, a2);
            }
            if (a3 != null) {
                b.L.a((Hack.d<Object, ClassLoader>) a3, classLoader);
                return;
            }
            throw new Exception("Failed to get ActivityThread.mLoadedApk");
        }
        throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
    }

    public static void a(String str, Application application) {
        Object a2 = a();
        if (a2 != null) {
            Object a3 = a(application, a2, application.getPackageName());
            if (a3 != null) {
                b.J.a((Hack.d<Object, Application>) a3, application);
                b.d.a((Hack.d<Object, Application>) a2, application);
                return;
            }
            throw new Exception("Failed to get ActivityThread.mLoadedApk");
        }
        throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
    }

    public static void a(Application application, Resources resources) {
        Object a2 = a();
        if (a2 != null) {
            Object a3 = a(application, a2, application.getPackageName());
            if (a3 == null) {
                a3 = a(application, a2);
                if (a3 == null) {
                    throw new RuntimeException("Failed to get ActivityThread.mLoadedApk");
                } else if (!(b.L.a((Hack.d<Object, ClassLoader>) a3) instanceof e)) {
                    b.L.a((Hack.d<Object, ClassLoader>) a3, k.b);
                }
            }
            b.N.a((Hack.d<Object, Resources>) a3, resources);
            b.q.a((Hack.d<Object, Resources>) application.getBaseContext(), resources);
            b.r.a((Hack.d<Object, Resources.Theme>) application.getBaseContext(), (Object) null);
            return;
        }
        throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
    }

    public static Instrumentation d() {
        Object a2 = a();
        if (a2 != null) {
            return b.e.a((Hack.d<Object, Instrumentation>) a2);
        }
        throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
    }

    public static void a(Instrumentation instrumentation) {
        Object a2 = a();
        if (a2 != null) {
            b.e.a((Hack.d<Object, Instrumentation>) a2, instrumentation);
            return;
        }
        throw new Exception("Failed to get ActivityThread.sCurrentActivityThread");
    }

    public static void e() {
        j jVar = new j(k.a.getBaseContext());
        Object a2 = b.g.a((Hack.d<Object, Object>) null);
        k.c = (PackageManager) b.aj.a(k.a.getBaseContext(), a2);
        b.g.a((Hack.d<Object, Object>) null, (c.a<?>) jVar);
        try {
            PackageManager packageManager = k.a.getPackageManager();
            Field declaredField = Class.forName("android.app.ApplicationPackageManager").getDeclaredField("mPM");
            declaredField.setAccessible(true);
            declaredField.set(packageManager, b.g.a((Hack.d<Object, Object>) null));
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }

    public static DataBinderMapperProxy f() {
        try {
            Hack.d a2 = new Hack.b(Class.forName("androidx.databinding.DataBindingUtil")).a("sMapper");
            DataBinderMapperProxy dataBinderMapperProxy = new DataBinderMapperProxy(a2.a((Hack.d) null));
            a2.a((Hack.d) null, dataBinderMapperProxy);
            return dataBinderMapperProxy;
        } catch (Throwable unused) {
            return null;
        }
    }

    public static void b(Message message) {
        Intent c2;
        try {
            if (message.what == 100) {
                Object obj = message.obj;
                Field declaredField = Class.forName("android.app.ActivityThread$ActivityClientRecord").getDeclaredField("intent");
                declaredField.setAccessible(true);
                Intent c3 = com.jingdong.aura.core.shadow.c.c((Intent) declaredField.get(obj));
                if (c3 != null) {
                    declaredField.set(obj, c3);
                }
            }
            if (message.what == 159 && Build.VERSION.SDK_INT >= 28) {
                Object obj2 = message.obj;
                Field declaredField2 = Class.forName("android.app.servertransaction.ClientTransaction").getDeclaredField("mActivityCallbacks");
                declaredField2.setAccessible(true);
                Class<?> cls = Class.forName("android.app.servertransaction.LaunchActivityItem");
                Field declaredField3 = cls.getDeclaredField("mIntent");
                declaredField3.setAccessible(true);
                for (Object obj3 : (List) declaredField2.get(obj2)) {
                    if (cls.isInstance(obj3) && (c2 = com.jingdong.aura.core.shadow.c.c((Intent) declaredField3.get(obj3))) != null) {
                        declaredField3.set(obj3, c2);
                    }
                }
            }
        } catch (Throwable th) {
            com.jingdong.aura.core.b.e.a("hackLaunchActivityMessage", "hackLaunchActivityMessage failed, message.what: " + message.what, "hackLaunchActivityMessage", th);
        }
    }
}
