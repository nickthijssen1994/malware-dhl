package com.jingdong.aura.core.reflection;

import android.app.Application;
import android.app.Instrumentation;
import android.app.Service;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Build;
import android.view.ContextThemeWrapper;
import com.jd.push.common.constant.Constants;
import com.jingdong.aura.core.reflection.Hack;
import com.jingdong.aura.core.util.a.c;
import dalvik.system.DexClassLoader;
import java.util.ArrayList;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class b extends Hack.HackDeclaration implements Hack.a {
    public static Hack.b<Object> C;
    public static Hack.b<Object> D;
    public static Hack.e E;
    public static Hack.e F;
    public static Hack.e G;
    public static Hack.b<Object> H;
    public static Hack.d<Object, String> I;
    public static Hack.d<Object, Application> J;
    public static Hack.d<Object, ClassLoader> K;
    public static Hack.d<Object, ClassLoader> L;
    public static Hack.d<Object, String> M;
    public static Hack.d<Object, Resources> N;
    public static Hack.b<Resources> O;
    public static Hack.d<Resources, Object> P;
    public static Hack.b<Service> Q;
    public static Hack.b<Object> R;
    public static Hack.b<Object> S;
    public static Hack.b<Object> T;
    public static Hack.d<Object, Object> U;
    public static Hack.d<Object, Object> V;
    public static Hack.d<Object, Object> W;
    public static Hack.b<Object> X;
    public static Hack.b<Object> Y;
    public static Hack.b<Object> Z;
    public static Hack.b<Object> a;
    public static Hack.b<Object> aa;
    public static Hack.b<Object> ab;
    public static Hack.d<Object, String> ac;
    public static Hack.d<Object, ArrayList<Object>> ad;
    public static Hack.d<Object, ApplicationInfo> ae;
    public static Hack.d<Object, Object> af;
    public static Hack.e ag;
    public static Hack.c ah;
    public static Hack.b<Object> ai;
    public static Hack.c aj;
    public static Hack.e b;
    public static Hack.d<Object, ArrayList<Application>> c;
    public static Hack.d<Object, Application> d;
    public static Hack.d<Object, Instrumentation> e;
    public static Hack.d<Object, Map<String, Object>> f;
    public static Hack.d<Object, Object> g;
    public static Hack.b<Application> h;
    public static Hack.e i;
    public static Hack.b<AssetManager> j;
    public static Hack.e k;
    public static Hack.e l;
    public static Hack.e m;
    public static Hack.b<ClassLoader> n;
    public static Hack.e o;
    public static Hack.b<Object> p;
    public static Hack.d<Object, Resources> q;
    public static Hack.d<Object, Resources.Theme> r;
    public static Hack.b<ContextWrapper> s;
    public static Hack.d<ContextWrapper, Context> t;
    public static Hack.b<ContextThemeWrapper> u;
    public static Hack.d<ContextThemeWrapper, Context> v;
    public static Hack.d<ContextThemeWrapper, Resources> w;
    public static Hack.d<ContextThemeWrapper, Resources.Theme> x;
    public static Hack.b<DexClassLoader> y;
    public static Hack.e z;
    private AssertionArrayException ao = null;
    private static final com.jingdong.aura.core.util.a.b an = c.a(b.class);
    public static boolean al = false;
    public static boolean am = false;
    public static boolean ak = false;
    public static ArrayList<Hack.e> A = new ArrayList<>();
    public static ArrayList<Hack.e> B = new ArrayList<>();

    public static boolean a() {
        if (am) {
            return al;
        }
        b bVar = new b();
        try {
            Hack.a(bVar);
            if (Build.VERSION.SDK_INT == 11) {
                bVar.a(new Hack.HackDeclaration.HackAssertionException("Hack Assertion Failed: Android OS Version 11"));
            }
            b();
            e();
            c();
            d();
            if (bVar.ao == null) {
                al = true;
                return al;
            }
            al = false;
            throw bVar.ao;
        } finally {
            Hack.a((Hack.a) null);
            am = true;
        }
    }

    public static void b() {
        if (Build.VERSION.SDK_INT <= 8) {
            H = Hack.a("android.app.ActivityThread$PackageInfo");
        } else {
            H = Hack.a("android.app.LoadedApk");
        }
        a = Hack.a("android.app.ActivityThread");
        O = Hack.a(Resources.class);
        h = Hack.a(Application.class);
        j = Hack.a(AssetManager.class);
        C = Hack.a("android.content.pm.IPackageManager");
        Q = Hack.a(Service.class);
        p = Hack.a("android.app.ContextImpl");
        s = Hack.a(ContextWrapper.class);
        u = Hack.a(ContextThemeWrapper.class);
        ak = true;
        n = Hack.a(ClassLoader.class);
        y = Hack.a(DexClassLoader.class);
        D = Hack.a("dalvik.system.LexFile");
        ak = false;
        R = Hack.a("android.app.ActivityManagerNative");
        S = Hack.a("android.app.ActivityManager");
        T = Hack.a("android.util.Singleton");
        X = Hack.a("android.content.pm.PackageParser");
        Y = Hack.a("android.content.pm.PackageParser$Component");
        Z = Hack.a("android.content.pm.PackageParser$Activity");
        aa = Hack.a("android.content.pm.PackageParser$Package");
        ab = Hack.a("android.content.pm.PackageParser$ActivityIntentInfo");
        ai = Hack.a("android.app.ApplicationPackageManager");
    }

    public static void c() {
        e = a.b("mInstrumentation").b(Instrumentation.class);
        c = a.b("mAllApplications").a(ArrayList.class);
        d = a.b("mInitialApplication").b(Application.class);
        f = a.b("mPackages").a(Map.class);
        g = a.a("sPackageManager").b(C.a());
        J = H.b("mApplication").b(Application.class);
        N = H.b("mResources").b(Resources.class);
        M = H.b("mResDir").b(String.class);
        L = H.b("mClassLoader").b(ClassLoader.class);
        K = H.b("mBaseClassLoader").b(ClassLoader.class);
        I = H.b("mAppDir").b(String.class);
        q = p.b("mResources").b(Resources.class);
        r = p.b("mTheme").b(Resources.Theme.class);
        ak = true;
        v = u.b("mBase").b(Context.class);
        ak = false;
        x = u.b("mTheme").b(Resources.Theme.class);
        try {
            if (Build.VERSION.SDK_INT >= 17 && u.a().getDeclaredField("mResources") != null) {
                w = u.b("mResources").b(Resources.class);
            }
        } catch (NoSuchFieldException unused) {
            com.jingdong.aura.core.util.a.b bVar = an;
            bVar.d("Not found ContextThemeWrapper.mResources on VERSION " + Build.VERSION.SDK_INT);
        }
        t = s.b("mBase").b(Context.class);
        P = O.b("mAssets");
        if (Build.VERSION.SDK_INT > 25 || (Build.VERSION.SDK_INT == 25 && Build.VERSION.PREVIEW_SDK_INT > 0)) {
            W = S.a("IActivityManagerSingleton");
        } else {
            V = R.a("gDefault");
        }
        U = T.b("mInstance");
        ac = aa.b(Constants.JdPushMsg.JSON_KEY_PKG_NAME_full).a(String.class);
        ad = aa.b("activities").a(ArrayList.class);
        ae = aa.b("applicationInfo").b(ApplicationInfo.class);
        af = ab.b("activity").b(Z.a());
    }

    public static void d() {
        b = a.a("currentActivityThread", new Class[0]);
        k = j.a("addAssetPath", String.class);
        i = h.a("attach", Context.class);
        o = n.a("findLibrary", String.class);
        Hack.b<Object> bVar = D;
        if (!(bVar == null || bVar.a() == null)) {
            G = D.a("loadLex", String.class, Integer.TYPE);
            F = D.a("loadClass", String.class, ClassLoader.class);
            E = D.a("close", new Class[0]);
            z = y.a("findClass", String.class);
        }
        try {
            if (Build.VERSION.SDK_INT > 20) {
                m = j.a("getResourceIdentifier", String.class, String.class, String.class);
                l = j.a("ensureStringBlocks", new Class[0]);
            }
        } catch (Throwable unused) {
        }
        ag = Y.a("getComponentName", new Class[0]);
    }

    public static void e() {
        if (Build.VERSION.SDK_INT <= 20) {
            ah = X.a(String.class);
        } else {
            ah = X.a(new Class[0]);
        }
        aj = ai.a(p.a(), C.a());
    }

    @Override // com.jingdong.aura.core.reflection.Hack.a
    public boolean a(Hack.HackDeclaration.HackAssertionException hackAssertionException) {
        if (ak) {
            return true;
        }
        if (this.ao == null) {
            this.ao = new AssertionArrayException("aura hack assert failed");
        }
        this.ao.addException(hackAssertionException);
        return true;
    }
}
