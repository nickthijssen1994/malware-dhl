package com.jingdong.aura.core.nativelib;

import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import com.jingdong.aura.core.util.k;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class AuraNative {
    private static final b a = c.a(AuraNative.class);
    private static boolean b;
    private static boolean c;

    private static native void compile(String str, String str2, boolean z, String str3, boolean z2, int i);

    public static native boolean verifySign(String str);

    static {
        b = false;
        try {
            System.loadLibrary("aura");
            b = true;
        } catch (UnsatisfiedLinkError e) {
            e.printStackTrace();
        }
        try {
            if (com.jingdong.aura.core.b.c.z()) {
                System.loadLibrary("aurautils");
                c = true;
            }
        } catch (Exception e2) {
            e.a("AuraNative", "aurautils loaded failed", "AuraNative", e2);
        }
    }

    public static boolean a(String str) {
        if (!c) {
            a.b("mIsLoadedAuraUtils is false, loade aurautils failed! ");
            return false;
        }
        try {
        } catch (Throwable th) {
            th.printStackTrace();
            e.a("AuraNative", "vefiySignByAura failed", "AuraNative.vefiySignByAura", th);
        }
        if (verifySign(str)) {
            return true;
        }
        return false;
    }

    public static boolean a(String str, String str2) {
        if (!b || !com.jingdong.aura.core.b.c.o()) {
            b bVar = a;
            bVar.b("not use AuraNative to opt dex. sIsLoadedNativeLibry = " + b + ", AuraConfigInternal.getIsUseAuraDexOpt()" + com.jingdong.aura.core.b.c.o());
            return false;
        }
        boolean s = com.jingdong.aura.core.b.c.s();
        int r = com.jingdong.aura.core.b.c.r();
        try {
            if (!k.b().booleanValue()) {
                compile(str, str2, false, "", s, r);
                return true;
            }
            compile(str, str2, true, k.a(), s, r);
            return true;
        } catch (Throwable th) {
            a.b("Exception while try to compile code >>>", th);
            return false;
        }
    }
}
