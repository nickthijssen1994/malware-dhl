package com.jingdong.aura.core.runing.resource;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.ContextThemeWrapper;
import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.b.h;
import com.jingdong.aura.core.reflection.Hack;
import com.jingdong.aura.core.reflection.a;
import com.jingdong.aura.core.runing.d;
import com.jingdong.aura.core.runing.k;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class DelegateResourcesUtils {
    private static boolean isIgnoreBrands = e.a();
    private static final b log = c.a(DelegateResourcesUtils.class);

    public static boolean isLowLevel() {
        if (Build.VERSION.SDK_INT <= 20) {
            return true;
        }
        if (Build.VERSION.SDK_INT > 27 || !isIgnoreBrands) {
            return false;
        }
        return true;
    }

    public static int getFieldValueOfR(Class<?> cls, String str) {
        if (cls == null) {
            return 0;
        }
        try {
            Field declaredField = cls.getDeclaredField(str);
            if (declaredField == null) {
                return 0;
            }
            if (!declaredField.isAccessible()) {
                declaredField.setAccessible(true);
            }
            return ((Integer) declaredField.get(null)).intValue();
        } catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException unused) {
            return 0;
        }
    }

    public static void tryAddAssetPath(AssetManager assetManager, String str) {
        try {
            if (Integer.parseInt(com.jingdong.aura.core.reflection.b.k.a(assetManager, str).toString()) == 0) {
                for (int i = 0; i < 3; i++) {
                    if (Integer.parseInt(com.jingdong.aura.core.reflection.b.k.a(assetManager, str).toString()) == 0) {
                        if (i == 3) {
                            e.a("com.jingdong.aura", "Add asset path failed", "DelegateResources.tryAddAssetPath", null);
                        }
                    } else {
                        return;
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            e.a("com.jingdong.aura", "", "DelegateResources.tryAddAssetPath_2", e);
        }
    }

    public static long getFileLength(String str) {
        if (str == null) {
            return -2;
        }
        File file = new File(str);
        if (!file.exists()) {
            return -4;
        }
        return file.length();
    }

    public static List<String> getOriginAssetsPath(AssetManager assetManager) {
        if (Build.VERSION.SDK_INT >= 28) {
            return getApkAssets(assetManager);
        }
        ArrayList arrayList = new ArrayList();
        try {
            Method declaredMethod = assetManager.getClass().getDeclaredMethod("getStringBlockCount", new Class[0]);
            declaredMethod.setAccessible(true);
            int intValue = ((Integer) declaredMethod.invoke(assetManager, new Object[0])).intValue();
            int i = 0;
            while (i < intValue) {
                i++;
                String str = (String) assetManager.getClass().getMethod("getCookieName", Integer.TYPE).invoke(assetManager, Integer.valueOf(i));
                if (!TextUtils.isEmpty(str)) {
                    arrayList.add(str);
                }
            }
            return arrayList;
        } catch (Exception e) {
            e.printStackTrace();
            arrayList.clear();
            return arrayList;
        }
    }

    private static List<String> getApkAssets(AssetManager assetManager) {
        ArrayList arrayList = new ArrayList();
        try {
            Method declaredMethod = Class.forName("android.content.res.ApkAssets").getDeclaredMethod("getAssetPath", new Class[0]);
            declaredMethod.setAccessible(true);
            Method declaredMethod2 = Class.forName("android.content.res.AssetManager").getDeclaredMethod("getApkAssets", new Class[0]);
            declaredMethod2.setAccessible(true);
            Object[] objArr = (Object[]) declaredMethod2.invoke(assetManager, new Object[0]);
            for (Object obj : objArr) {
                String str = (String) declaredMethod.invoke(obj, new Object[0]);
                if (!TextUtils.isEmpty(str)) {
                    arrayList.add(str);
                }
            }
            return arrayList;
        } catch (Exception e) {
            e.printStackTrace();
            arrayList.clear();
            return arrayList;
        }
    }

    public static Resources constructResources(AssetManager assetManager, Resources resources, a aVar) {
        if (resources == null || !resources.getClass().getName().equals("android.content.res.MiuiResources") || Build.VERSION.SDK_INT >= 29) {
            return aVar.a(assetManager, resources);
        }
        Constructor<?> declaredConstructor = Class.forName("android.content.res.MiuiResources").getDeclaredConstructor(AssetManager.class, DisplayMetrics.class, Configuration.class);
        declaredConstructor.setAccessible(true);
        return (Resources) declaredConstructor.newInstance(assetManager, resources.getDisplayMetrics(), resources.getConfiguration());
    }

    public static void updateResources(Application application, AssetManager assetManager, Resources resources) {
        if (k.d == null || k.d.getAssets() != assetManager || !(k.d instanceof b)) {
            k.d = resources;
            a.a(application, resources);
        }
    }

    public static String getAssetHistoryPaths(Set<String> set) {
        if (set == null || set.isEmpty()) {
            return "newDelegateResources []";
        }
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("newDelegateResources [");
        for (String str : set) {
            stringBuffer.append(str);
            stringBuffer.append("(");
            stringBuffer.append(getFileLength(str));
            stringBuffer.append("),");
        }
        if (stringBuffer.length() > 0) {
            stringBuffer.setLength(stringBuffer.length() - 1);
        }
        stringBuffer.append("]");
        return stringBuffer.toString();
    }

    public static void printAssetPath(String str, Set<String> set, b bVar) {
        if (bVar != null && bVar.b()) {
            StringBuilder sb = new StringBuilder(getAssetHistoryPaths(set));
            if (str != null) {
                sb.append(" Add new path:" + str);
            }
            bVar.b(sb.toString());
        }
    }

    public static String getRuntimeAssetHistoryPaths() {
        a a = a.a();
        if (a == null) {
            return "";
        }
        if (a instanceof f) {
            return getAssetHistoryPaths(((f) a).a);
        }
        return a instanceof g ? getAssetHistoryPaths(((g) a).a) : "";
    }

    public static int getResIdentifier(String str, String str2, String str3, Map<String, Integer> map) {
        List<org.osgi.framework.a> g;
        ClassLoader e;
        int intValue;
        if (str2 == null && str3 == null) {
            String substring = str.substring(str.indexOf("/") + 1);
            str2 = str.substring(str.indexOf(":") + 1, str.indexOf("/"));
            str = substring;
        }
        if (!TextUtils.isEmpty(str) && !TextUtils.isEmpty(str2) && (g = com.jingdong.aura.core.b.b.b.g()) != null && !g.isEmpty()) {
            Iterator<org.osgi.framework.a> it = com.jingdong.aura.core.b.b.b.g().iterator();
            while (it.hasNext()) {
                h hVar = (org.osgi.framework.a) it.next();
                String n = hVar.n();
                String str4 = n + ":" + str;
                if (map.isEmpty() && map.containsKey(str4) && (intValue = map.get(str4).intValue()) != 0) {
                    return intValue;
                }
                h hVar2 = hVar;
                if (hVar2.b().c() && (e = hVar2.e()) != null) {
                    try {
                        int fieldValueOfR = getFieldValueOfR(e.loadClass(n + ".R$" + str2), str);
                        if (fieldValueOfR != 0) {
                            map.put(str4, Integer.valueOf(fieldValueOfR));
                            return fieldValueOfR;
                        }
                        continue;
                    } catch (ClassNotFoundException unused) {
                    }
                }
            }
        }
        return 0;
    }

    public static void ensureResourcesInjected(Activity activity) {
        updateConfiguration(activity);
        d dVar = new d(activity.getBaseContext(), activity.getClass().getClassLoader());
        if (com.jingdong.aura.core.reflection.b.w != null) {
            try {
                validateActivityResource(activity);
            } catch (Throwable unused) {
            }
            com.jingdong.aura.core.reflection.b.w.a((Hack.d<ContextThemeWrapper, Resources>) activity, k.d);
        }
        if (!(com.jingdong.aura.core.reflection.b.v == null || com.jingdong.aura.core.reflection.b.v.a() == null)) {
            com.jingdong.aura.core.reflection.b.v.a((Hack.d<ContextThemeWrapper, Context>) activity, dVar);
        }
        com.jingdong.aura.core.reflection.b.t.a((Hack.d<ContextWrapper, Context>) activity, dVar);
    }

    public static void updateConfiguration(Activity activity) {
        if (!com.jingdong.aura.core.b.c.D()) {
            log.b("not update configuration!");
            return;
        }
        Configuration configuration = k.d.getConfiguration();
        Configuration configuration2 = activity.getBaseContext().getResources().getConfiguration();
        if (!configuration.equals(configuration2)) {
            log.b("update configuration");
            k.d.updateConfiguration(configuration2, activity.getBaseContext().getResources().getDisplayMetrics());
            return;
        }
        log.b("configuration not changed");
    }

    private static boolean validateActivityResource(Activity activity) {
        Resources resources;
        String str;
        h a = com.jingdong.aura.core.b.b.b.a(com.jingdong.aura.core.a.a.a().e(activity.getLocalClassName()));
        String absolutePath = a != null ? a.b().a().getAbsolutePath() : null;
        if (com.jingdong.aura.core.reflection.b.w != null) {
            resources = com.jingdong.aura.core.reflection.b.w.a((Hack.d<ContextThemeWrapper, Resources>) activity);
        } else {
            resources = activity.getResources();
        }
        Resources resources2 = k.d;
        if (resources == resources2) {
            return true;
        }
        List<String> assetPathFromResources = getAssetPathFromResources(resources);
        String runtimeAssetHistoryPaths = getRuntimeAssetHistoryPaths();
        List<String> assetPathFromResources2 = getAssetPathFromResources(resources2);
        if (absolutePath == null || assetPathFromResources == null || assetPathFromResources.contains(absolutePath)) {
            str = null;
        } else {
            String str2 = "Activity Resources path not contains:" + a.b().a().getAbsolutePath();
            if (!runtimeAssetHistoryPaths.contains(absolutePath)) {
                str2 = str2 + "paths in history not contains:" + a.b().a().getAbsolutePath();
            }
            if (!assetPathFromResources2.contains(absolutePath)) {
                str2 = str2 + "paths in runtime not contains:" + a.b().a().getAbsolutePath();
            }
            if (!a.b().a().exists()) {
                str2 = str2 + "  Bundle archive file not exist:" + a.b().a().getAbsolutePath();
            }
            str = str2 + " Activity Resources paths length:" + assetPathFromResources.size();
        }
        if (str == null) {
            return true;
        }
        e.a(a.n(), "", "InstrumentationHook.validateActivityResource", null);
        return false;
    }

    public static List<String> getAssetPathFromResources(Resources resources) {
        try {
            return getOriginAssetsPath((AssetManager) com.jingdong.aura.core.reflection.b.P.a((Hack.d<Resources, Object>) resources));
        } catch (Exception e) {
            b bVar = log;
            bVar.b("DelegateResource" + e.getCause());
            return null;
        }
    }

    public static Configuration getRawConfiguration(Activity activity) {
        long nanoTime = System.nanoTime();
        if (activity != null) {
            try {
                return getConfigurationRecursive(activity.getBaseContext(), 0);
            } finally {
                long nanoTime2 = System.nanoTime() - nanoTime;
                b bVar = log;
                bVar.b("getRawConfiguration spend " + nanoTime2 + " nanoSeconds.");
            }
        } else {
            long nanoTime3 = System.nanoTime() - nanoTime;
            b bVar2 = log;
            StringBuilder sb = new StringBuilder();
            sb.append("getRawConfiguration spend ");
            sb.append(nanoTime3);
            sb.append(" nanoSeconds.");
            bVar2.b(sb.toString());
            return null;
        }
    }

    public static Configuration getConfigurationRecursive(Context context, int i) {
        if (i >= 15) {
            return null;
        }
        int i2 = i + 1;
        if (context instanceof d) {
            return getConfigurationRecursive(((d) context).getBaseContext(), i2);
        }
        b bVar = log;
        bVar.b("getConfigurationRecursive successfully with depth " + i2);
        return context.getResources().getConfiguration();
    }
}
