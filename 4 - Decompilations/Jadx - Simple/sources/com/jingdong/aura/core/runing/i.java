package com.jingdong.aura.core.runing;

import android.content.res.XmlResourceParser;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import com.jingdong.aura.core.a.a;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import org.xmlpull.v1.XmlPullParser;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class i {
    static b l = c.a("PackageLite");
    public String a;
    public int b;
    public int c;
    public int d;
    public String i;
    public int j;
    public String k;
    public final Set<String> e = new HashSet();
    public final Set<String> g = new HashSet();
    public final Set<String> f = new HashSet();
    public Bundle h = new Bundle();
    public final Set<String> m = new HashSet();
    public final Set<String> n = new HashSet();
    public final Set<String> o = new HashSet();
    public final Set<String> p = new HashSet();

    i() {
    }

    /* JADX WARN: Code restructure failed: missing block: B:13:0x0052, code lost:
        if (r3 != null) goto L_0x00a1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:24:0x009f, code lost:
        if (r3 == null) goto L_0x00a4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:25:0x00a1, code lost:
        r3.close();
     */
    /* JADX WARN: Code restructure failed: missing block: B:26:0x00a4, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static com.jingdong.aura.core.runing.i a(java.io.File r8) {
        /*
            r0 = 0
            java.lang.Class<android.content.res.AssetManager> r1 = android.content.res.AssetManager.class
            java.lang.Object r1 = r1.newInstance()     // Catch: Exception -> 0x005a, all -> 0x0057
            android.content.res.AssetManager r1 = (android.content.res.AssetManager) r1     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.Class<android.content.res.AssetManager> r2 = android.content.res.AssetManager.class
            java.lang.String r3 = "addAssetPath"
            r4 = 1
            java.lang.Class[] r5 = new java.lang.Class[r4]     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.Class<java.lang.String> r6 = java.lang.String.class
            r7 = 0
            r5[r7] = r6     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.reflect.Method r2 = r2.getMethod(r3, r5)     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.Object[] r3 = new java.lang.Object[r4]     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.String r4 = r8.getAbsolutePath()     // Catch: Exception -> 0x005a, all -> 0x0057
            r3[r7] = r4     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.Object r2 = r2.invoke(r1, r3)     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch: Exception -> 0x005a, all -> 0x0057
            int r2 = r2.intValue()     // Catch: Exception -> 0x005a, all -> 0x0057
            java.lang.String r3 = "AndroidManifest.xml"
            android.content.res.XmlResourceParser r3 = r1.openXmlResourceParser(r2, r3)     // Catch: Exception -> 0x005a, all -> 0x0057
            com.jingdong.aura.core.shadow.b r4 = com.jingdong.aura.core.shadow.b.a()     // Catch: Exception -> 0x0055, all -> 0x00a5
            java.lang.String r5 = r8.getAbsolutePath()     // Catch: Exception -> 0x0055, all -> 0x00a5
            r4.a(r1, r2, r5)     // Catch: Exception -> 0x0055, all -> 0x00a5
            if (r3 == 0) goto L_0x0052
            com.jingdong.aura.core.runing.i r1 = a(r3)     // Catch: Exception -> 0x0055, all -> 0x00a5
            if (r1 != 0) goto L_0x0049
            com.jingdong.aura.core.runing.i r1 = new com.jingdong.aura.core.runing.i     // Catch: Exception -> 0x0055, all -> 0x00a5
            r1.<init>()     // Catch: Exception -> 0x0055, all -> 0x00a5
        L_0x0049:
            r3.close()     // Catch: Exception -> 0x0055, all -> 0x00a5
            if (r3 == 0) goto L_0x0051
            r3.close()
        L_0x0051:
            return r1
        L_0x0052:
            if (r3 == 0) goto L_0x00a4
            goto L_0x00a1
        L_0x0055:
            r1 = move-exception
            goto L_0x005c
        L_0x0057:
            r8 = move-exception
            r3 = r0
            goto L_0x00a6
        L_0x005a:
            r1 = move-exception
            r3 = r0
        L_0x005c:
            r1.printStackTrace()     // Catch: all -> 0x00a5
            java.lang.String r2 = "parse failed. "
            if (r8 == 0) goto L_0x0087
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch: all -> 0x00a5
            r4.<init>()     // Catch: all -> 0x00a5
            r4.append(r2)     // Catch: all -> 0x00a5
            java.lang.String r2 = r8.getAbsolutePath()     // Catch: all -> 0x00a5
            r4.append(r2)     // Catch: all -> 0x00a5
            java.lang.String r2 = " "
            r4.append(r2)     // Catch: all -> 0x00a5
            java.lang.String r8 = r8.getAbsolutePath()     // Catch: all -> 0x00a5
            java.lang.String r8 = com.jingdong.aura.core.util.d.a(r8)     // Catch: all -> 0x00a5
            r4.append(r8)     // Catch: all -> 0x00a5
            java.lang.String r8 = r4.toString()     // Catch: all -> 0x00a5
            goto L_0x0098
        L_0x0087:
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch: all -> 0x00a5
            r8.<init>()     // Catch: all -> 0x00a5
            r8.append(r2)     // Catch: all -> 0x00a5
            java.lang.String r2 = "null"
            r8.append(r2)     // Catch: all -> 0x00a5
            java.lang.String r8 = r8.toString()     // Catch: all -> 0x00a5
        L_0x0098:
            java.lang.String r2 = "PackageLite"
            java.lang.String r4 = "PackageLite.parse"
            com.jingdong.aura.core.b.e.a(r2, r8, r4, r1)     // Catch: all -> 0x00a5
            if (r3 == 0) goto L_0x00a4
        L_0x00a1:
            r3.close()
        L_0x00a4:
            return r0
        L_0x00a5:
            r8 = move-exception
        L_0x00a6:
            if (r3 == 0) goto L_0x00ab
            r3.close()
        L_0x00ab:
            throw r8
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.runing.i.a(java.io.File):com.jingdong.aura.core.runing.i");
    }

    protected static i a(XmlResourceParser xmlResourceParser) {
        int next = xmlResourceParser.next();
        i iVar = new i();
        while (next != 1) {
            switch (next) {
                case 1:
                    xmlResourceParser.close();
                    break;
                case 2:
                    if (xmlResourceParser.getName().equals("manifest")) {
                        a(xmlResourceParser, iVar);
                    }
                    if (!xmlResourceParser.getName().equals("application")) {
                        break;
                    } else if (!a(iVar, xmlResourceParser, xmlResourceParser)) {
                        return null;
                    } else {
                        return iVar;
                    }
            }
            next = xmlResourceParser.next();
        }
        return iVar;
    }

    private static void a(XmlResourceParser xmlResourceParser, i iVar) {
        for (int i = 0; i < xmlResourceParser.getAttributeCount(); i++) {
            String attributeName = xmlResourceParser.getAttributeName(i);
            if (attributeName.equalsIgnoreCase("package")) {
                iVar.i = xmlResourceParser.getAttributeValue(i);
            }
            if (attributeName.equals("versionCode")) {
                iVar.j = xmlResourceParser.getAttributeIntValue(i, 0);
            } else if (attributeName.equals("versionName")) {
                iVar.k = xmlResourceParser.getAttributeValue(i);
            }
        }
    }

    private static boolean a(i iVar, XmlPullParser xmlPullParser, AttributeSet attributeSet) {
        String str = iVar.i;
        for (int i = 0; i < attributeSet.getAttributeCount(); i++) {
            String attributeName = attributeSet.getAttributeName(i);
            if (attributeName.equals("name")) {
                iVar.a = a(str, (CharSequence) attributeSet.getAttributeValue(i));
            } else if (attributeName.equals("icon")) {
                iVar.c = attributeSet.getAttributeResourceValue(i, 0);
            } else if (attributeName.equals("label")) {
                iVar.d = attributeSet.getAttributeResourceValue(i, 0);
            } else if (attributeName.equals("description")) {
                iVar.b = attributeSet.getAttributeResourceValue(i, 0);
            }
        }
        int depth = xmlPullParser.getDepth();
        while (true) {
            int next = xmlPullParser.next();
            if (next == 1 || (next == 3 && xmlPullParser.getDepth() <= depth)) {
                break;
            } else if (!(next == 3 || next == 4)) {
                String name = xmlPullParser.getName();
                if (name.equals("activity")) {
                    a(iVar, xmlPullParser, attributeSet, false, name);
                } else if (name.equals("receiver")) {
                    a(iVar, xmlPullParser, attributeSet, true, name);
                } else if (name.equals("service")) {
                    a(iVar, xmlPullParser, attributeSet, true, name);
                } else if (name.equals("provider")) {
                    a(iVar, xmlPullParser, attributeSet, false, name);
                } else if (!name.equals("activity-alias")) {
                    if (xmlPullParser.getName().equals("meta-data")) {
                        b(iVar, xmlPullParser, attributeSet);
                    } else if (!name.equals("uses-library")) {
                        name.equals("uses-package");
                    }
                }
            }
        }
        return true;
    }

    private static void b(i iVar, XmlPullParser xmlPullParser, AttributeSet attributeSet) {
        String str = null;
        String str2 = null;
        int i = 0;
        for (int i2 = 0; i2 < attributeSet.getAttributeCount(); i2++) {
            String attributeName = attributeSet.getAttributeName(i2);
            if (attributeName.equals("name")) {
                str2 = attributeSet.getAttributeValue(i2);
                i++;
            } else if (attributeName.equals("value")) {
                str = attributeSet.getAttributeValue(i2);
                i++;
            }
            if (i >= 2) {
                break;
            }
        }
        if (!(str2 == null || str == null)) {
            if ("auraFragment".equals(str2) || "manualComponents".equals(str2)) {
                for (String str3 : str.split(",")) {
                    iVar.f.add(str3.trim());
                }
                return;
            }
            iVar.h.putString(str2, str);
        }
    }

    private static String a(String str, CharSequence charSequence) {
        if (charSequence == null || charSequence.length() <= 0) {
            PrintStream printStream = System.out;
            printStream.println("Empty class name in package " + str);
            return null;
        }
        String charSequence2 = charSequence.toString();
        char charAt = charSequence2.charAt(0);
        if (charAt == '.') {
            return (str + charSequence2).intern();
        } else if (charSequence2.indexOf(46) < 0) {
            return (str + '.' + charSequence2).intern();
        } else if (charAt >= 'a' && charAt <= 'z') {
            return charSequence2.intern();
        } else {
            PrintStream printStream2 = System.out;
            printStream2.println("Bad class name " + charSequence2 + " in package " + str);
            return null;
        }
    }

    private static void a(i iVar, XmlPullParser xmlPullParser, AttributeSet attributeSet, boolean z, String str) {
        String str2 = iVar.i;
        for (int i = 0; i < attributeSet.getAttributeCount(); i++) {
            if (attributeSet.getAttributeName(i).equals("name")) {
                String attributeValue = attributeSet.getAttributeValue(i);
                if (attributeValue.startsWith(".")) {
                    attributeValue = str2.concat(attributeValue);
                }
                a(iVar, str, attributeValue);
                iVar.e.add(attributeValue);
                if (z) {
                    iVar.g.add(attributeValue);
                }
            }
        }
    }

    private static void a(i iVar, String str, String str2) {
        if (!TextUtils.isEmpty(str) && !TextUtils.isEmpty(str2)) {
            char c = 65535;
            int hashCode = str.hashCode();
            if (hashCode != -1655966961) {
                if (hashCode != -987494927) {
                    if (hashCode != -808719889) {
                        if (hashCode == 1984153269 && str.equals("service")) {
                            c = 1;
                        }
                    } else if (str.equals("receiver")) {
                        c = 3;
                    }
                } else if (str.equals("provider")) {
                    c = 2;
                }
            } else if (str.equals("activity")) {
                c = 0;
            }
            switch (c) {
                case 0:
                    iVar.m.add(str2);
                    return;
                case 1:
                    iVar.p.add(str2);
                    return;
                case 2:
                    iVar.n.add(str2);
                    return;
                case 3:
                    iVar.o.add(str2);
                    return;
                default:
                    return;
            }
        }
    }

    public static a.C0042a a(String str, String str2) {
        i a;
        if (str == null || str2 == null) {
            return null;
        }
        File file = new File(str);
        if (!file.exists() || (a = a(file)) == null) {
            return null;
        }
        a.C0042a aVar = new a.C0042a();
        aVar.e = a.i;
        aVar.h = a.k;
        aVar.i = (long) a.j;
        aVar.f = b(file);
        aVar.j = a.a;
        aVar.k = str2;
        aVar.g = file.length();
        aVar.m = 2;
        aVar.n = null;
        aVar.a = new ArrayList();
        aVar.a.addAll(a.e);
        aVar.b = new ArrayList();
        aVar.b.addAll(a.f);
        aVar.o = new ArrayList();
        aVar.o.addAll(a.m);
        aVar.p = new ArrayList();
        aVar.p.addAll(a.p);
        aVar.q = new ArrayList();
        aVar.q.addAll(a.n);
        aVar.r = new ArrayList();
        aVar.r.addAll(a.o);
        aVar.c = new ArrayList();
        b bVar = l;
        bVar.c("bundleInfo =" + aVar);
        Bundle bundle = a.h;
        if (!(bundle == null || bundle.get("dependency") == null)) {
            String obj = a.h.get("dependency").toString();
            if (!TextUtils.isEmpty(obj)) {
                aVar.c.addAll(Arrays.asList(obj.split(",")));
            }
        }
        aVar.d = new ArrayList();
        Bundle bundle2 = a.h;
        if (!(bundle2 == null || bundle2.get("auraDependentSo") == null)) {
            String obj2 = a.h.get("auraDependentSo").toString();
            if (!TextUtils.isEmpty(obj2)) {
                aVar.d.addAll(Arrays.asList(obj2.split(",")));
            }
        }
        return aVar;
    }

    /*  JADX ERROR: JadxRuntimeException in pass: SSATransform
        jadx.core.utils.exceptions.JadxRuntimeException: Not initialized variable reg: 1, insn: 0x0034: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]), block:B:19:0x0034
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVarsInBlock(SSATransform.java:171)
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVariables(SSATransform.java:143)
        	at jadx.core.dex.visitors.ssa.SSATransform.process(SSATransform.java:60)
        	at jadx.core.dex.visitors.ssa.SSATransform.visit(SSATransform.java:41)
        */
    public static boolean b(
    /*  JADX ERROR: JadxRuntimeException in pass: SSATransform
        jadx.core.utils.exceptions.JadxRuntimeException: Not initialized variable reg: 1, insn: 0x0034: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]), block:B:19:0x0034
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVarsInBlock(SSATransform.java:171)
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVariables(SSATransform.java:143)
        	at jadx.core.dex.visitors.ssa.SSATransform.process(SSATransform.java:60)
        */
    /*  JADX ERROR: Method generation error
        jadx.core.utils.exceptions.JadxRuntimeException: Code variable not set in r4v0 ??
        	at jadx.core.dex.instructions.args.SSAVar.getCodeVar(SSAVar.java:228)
        	at jadx.core.codegen.MethodGen.addMethodArguments(MethodGen.java:198)
        	at jadx.core.codegen.MethodGen.addDefinition(MethodGen.java:151)
        	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:364)
        	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:304)
        	at jadx.core.codegen.ClassGen.lambda$addInnerClsAndMethods$2(ClassGen.java:270)
        	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
        	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
        */
}
