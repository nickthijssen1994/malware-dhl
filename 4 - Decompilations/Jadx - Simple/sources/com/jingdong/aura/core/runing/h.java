package com.jingdong.aura.core.runing;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.Application;
import android.app.Instrumentation;
import android.app.UiAutomation;
import android.content.ComponentName;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.text.TextUtils;
import android.view.ContextThemeWrapper;
import android.view.KeyEvent;
import android.view.MotionEvent;
import com.jingdong.aura.core.a.a;
import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.reflection.Hack;
import com.jingdong.aura.core.runing.resource.DelegateResourcesUtils;
import com.jingdong.aura.core.util.FakeActivity;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import com.jingdong.aura.core.util.d;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.osgi.framework.BundleException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class h extends Instrumentation {
    private Context c;
    private Instrumentation d;
    private static Map<String, Integer> b = new HashMap();
    private static final b a = c.a(h.class);

    public h(Instrumentation instrumentation, Context context) {
        this.c = context;
        this.d = instrumentation;
    }

    @Override // android.app.Instrumentation
    public Activity newActivity(Class<?> cls, Context context, IBinder iBinder, Application application, Intent intent, ActivityInfo activityInfo, CharSequence charSequence, Activity activity, String str, Object obj) {
        Activity newActivity = this.d.newActivity(cls, context, iBinder, application, intent, activityInfo, charSequence, activity, str, obj);
        if (k.a.getPackageName().equals(activityInfo.packageName) && com.jingdong.aura.core.reflection.b.w != null && (newActivity instanceof ContextThemeWrapper)) {
            com.jingdong.aura.core.reflection.b.w.a((Hack.d<ContextThemeWrapper, Resources>) newActivity, k.d);
        }
        return newActivity;
    }

    @Override // android.app.Instrumentation
    public Activity newActivity(ClassLoader classLoader, String str, Intent intent) {
        b bVar = a;
        bVar.a("newActivity called. className = " + str);
        Activity a2 = a(classLoader, str, intent);
        if (a2 == null) {
            try {
                a2 = this.d.newActivity(classLoader, str, intent);
            } catch (Throwable th) {
                a.a("newActivity() catched a throwable", th);
                String e = a.a().e(str);
                if (e != null) {
                    if (b.containsKey(e)) {
                        Map<String, Integer> map = b;
                        map.put(e, Integer.valueOf(map.get(e).intValue() + 1));
                    } else {
                        b.put(e, 1);
                    }
                    org.osgi.framework.a a3 = com.jingdong.aura.core.b.b.b.a(e);
                    String a4 = a(e, str);
                    if (a3 != null) {
                        try {
                            a3.m();
                        } catch (BundleException e2) {
                            a.a("uninstall bundle failed.", e2);
                        }
                    }
                    ArrayList<String> k = com.jingdong.aura.core.b.c.k(e);
                    if (k == null || k.size() <= 0 || TextUtils.isEmpty(com.jingdong.aura.core.b.c.d().getProvidedBundleNotFoundPageName())) {
                        e.a(e, "newActivity failed. error count = " + b.get(e) + ". " + a4, "InstrumentaionHook.newActivity_2", th);
                        com.jingdong.aura.core.b.b.b.c(e);
                    } else {
                        e.a(e, "newActivity failed. try to start provided not found page", "InstrumentaionHook.newActivity_4", th);
                        return a(classLoader, str, intent, e, k);
                    }
                } else {
                    e.a(e, "newActivity failed.", "InstrumentaionHook.newActivity_3", th);
                }
                Activity b2 = b(classLoader, str, intent);
                if (b2 != null) {
                    a2 = b2;
                } else {
                    throw th;
                }
            }
        }
        if (a2 != null && (a2 instanceof ContextThemeWrapper) && (classLoader instanceof e) && com.jingdong.aura.core.reflection.b.w != null) {
            a.a("hook contextThemeWrapper.mResources 1");
            com.jingdong.aura.core.reflection.b.w.a((Hack.d<ContextThemeWrapper, Resources>) a2, k.d);
        }
        a.a("newActivity end.");
        return a2;
    }

    private String a(String str, String str2) {
        String str3;
        String str4 = "";
        try {
            com.jingdong.aura.core.b.h a2 = com.jingdong.aura.core.b.b.b.a(str);
            if (a2 == null) {
                return "bundleImpl:null";
            }
            String str5 = str4 + "versioncode:" + a2.o() + ";";
            i a3 = f.a(a2.n());
            if (a3 == null) {
                str3 = str5 + "packageLite:null;";
            } else {
                String str6 = str5 + "packageLite:not null,";
                if (!a3.e.contains(str2) && !a3.f.contains(str2)) {
                    str3 = str6 + "not contain;";
                }
                str3 = str6 + "contain;";
            }
            File a4 = a2.b().a();
            if (a4 == null || !a4.exists()) {
                str4 = str3 + "archiveFile:null;md5:null;";
            } else {
                str4 = str3 + "archiveFile:" + a4.getAbsolutePath() + ";md5:" + d.a(a4.getAbsolutePath()) + ";";
            }
            ClassLoader e = a2.e();
            StringBuilder sb = new StringBuilder();
            sb.append(str4);
            sb.append(";classloader:");
            sb.append(e == null ? "null" : "not null");
            return sb.toString();
        } catch (Exception e2) {
            e2.printStackTrace();
            return str4;
        }
    }

    private Activity a(ClassLoader classLoader, String str, Intent intent) {
        Intent intent2;
        List<ActivityManager.RunningTaskInfo> runningTasks = ((ActivityManager) this.c.getSystemService("activity")).getRunningTasks(1);
        if (runningTasks == null || runningTasks.size() <= 0 || runningTasks.get(0).numActivities <= 1 || com.jingdong.aura.core.b.c.d() == null) {
            intent2 = null;
        } else {
            if (intent.getComponent() == null) {
                intent.setClassName(this.c, str);
            }
            intent2 = com.jingdong.aura.core.b.c.d().isRedirectToLoadingDexPage(intent);
        }
        if (intent2 == null) {
            return null;
        }
        String className = intent2.getComponent().getClassName();
        a.d("redirectToLoadingDexPage to : " + className);
        return this.d.newActivity(classLoader, className, intent2);
    }

    private Activity a(ClassLoader classLoader, String str, Intent intent, String str2, ArrayList<String> arrayList) {
        String providedBundleNotFoundPageName = com.jingdong.aura.core.b.c.d().getProvidedBundleNotFoundPageName();
        if (!TextUtils.isEmpty(providedBundleNotFoundPageName)) {
            Intent intent2 = new Intent();
            intent2.setComponent(new ComponentName(k.a, providedBundleNotFoundPageName));
            Uri data = intent.getData();
            Bundle extras = intent.getExtras();
            if (data != null) {
                intent2.setData(data);
            }
            if (extras != null) {
                intent2.replaceExtras(extras);
            }
            intent2.setExtrasClassLoader(k.b);
            intent2.putExtra("aura_target_classname", str);
            intent2.putExtra("aura_target_bundlename", str2);
            intent2.putStringArrayListExtra("aura_not_prepared_bundlename", arrayList);
            intent2.addFlags(268435456);
            this.c.startActivity(intent2);
            b bVar = a;
            bVar.d("start provided not found page: " + intent2.getComponent().getClassName());
        }
        Intent intent3 = new Intent();
        intent3.setClass(this.c, FakeActivity.class);
        String className = intent3.getComponent().getClassName();
        b bVar2 = a;
        bVar2.d("redirectToClassNotFoundPage to : " + className);
        return this.d.newActivity(classLoader, className, intent3);
    }

    private Activity b(ClassLoader classLoader, String str, Intent intent) {
        Intent intent2;
        List<ActivityManager.RunningTaskInfo> runningTasks = ((ActivityManager) this.c.getSystemService("activity")).getRunningTasks(1);
        if (runningTasks == null || runningTasks.size() <= 0 || runningTasks.get(0).numActivities <= 1 || com.jingdong.aura.core.b.c.d() == null) {
            intent2 = null;
        } else {
            if (intent.getComponent() == null) {
                intent.setClassName(this.c, str);
            }
            intent2 = com.jingdong.aura.core.b.c.d().getClassNotFoundPage(intent);
        }
        if (intent2 == null) {
            return null;
        }
        String className = intent2.getComponent().getClassName();
        a.d("redirectToClassNotFoundPage to : " + className);
        return this.d.newActivity(classLoader, className, intent2);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnCreate(Activity activity, Bundle bundle) {
        a(activity);
        if (!k.a.getPackageName().equals(activity.getPackageName())) {
            this.d.callActivityOnCreate(activity, bundle);
            b(activity);
            return;
        }
        DelegateResourcesUtils.updateConfiguration(activity);
        d dVar = new d(activity.getBaseContext(), activity.getClass().getClassLoader());
        if (!(com.jingdong.aura.core.reflection.b.v == null || com.jingdong.aura.core.reflection.b.v.a() == null)) {
            com.jingdong.aura.core.reflection.b.v.a((Hack.d<ContextThemeWrapper, Context>) activity, dVar);
        }
        com.jingdong.aura.core.reflection.b.t.a((Hack.d<ContextWrapper, Context>) activity, dVar);
        if (activity.getClass().getClassLoader() instanceof com.jingdong.aura.core.b.a.c) {
            try {
                ((com.jingdong.aura.core.b.a.c) activity.getClass().getClassLoader()).a().j();
                if (com.jingdong.aura.core.b.c.n()) {
                    Intent intent = activity.getIntent();
                    ClassLoader classLoader = activity.getClassLoader();
                    if (classLoader == null) {
                        classLoader = activity.getClass().getClassLoader();
                    }
                    if (!(intent == null || classLoader == null)) {
                        intent.setExtrasClassLoader(classLoader);
                    }
                }
            } catch (BundleException e) {
                b bVar = a;
                bVar.b(e.getMessage() + " Caused by: ", e.getNestedException());
            }
        }
        try {
            DelegateResourcesUtils.ensureResourcesInjected(activity);
            this.d.callActivityOnCreate(activity, bundle);
            b(activity);
        } catch (Exception e2) {
            if (!e2.toString().contains("android.content.res.Resources") || e2.toString().contains("OutOfMemoryError")) {
                e2.printStackTrace();
            }
            a(activity, bundle, e2);
        }
    }

    @Override // android.app.Instrumentation
    @TargetApi(18)
    public UiAutomation getUiAutomation() {
        return this.d.getUiAutomation();
    }

    @Override // android.app.Instrumentation
    public void onCreate(Bundle bundle) {
        this.d.onCreate(bundle);
    }

    @Override // android.app.Instrumentation
    public void start() {
        this.d.start();
    }

    @Override // android.app.Instrumentation
    public void onStart() {
        this.d.onStart();
    }

    @Override // android.app.Instrumentation
    public boolean onException(Object obj, Throwable th) {
        return this.d.onException(obj, th);
    }

    @Override // android.app.Instrumentation
    public void sendStatus(int i, Bundle bundle) {
        this.d.sendStatus(i, bundle);
    }

    @Override // android.app.Instrumentation
    public void finish(int i, Bundle bundle) {
        this.d.finish(i, bundle);
    }

    @Override // android.app.Instrumentation
    public void setAutomaticPerformanceSnapshots() {
        this.d.setAutomaticPerformanceSnapshots();
    }

    @Override // android.app.Instrumentation
    public void startPerformanceSnapshot() {
        this.d.startPerformanceSnapshot();
    }

    @Override // android.app.Instrumentation
    public void endPerformanceSnapshot() {
        this.d.endPerformanceSnapshot();
    }

    @Override // android.app.Instrumentation
    public void onDestroy() {
        this.d.onDestroy();
    }

    @Override // android.app.Instrumentation
    public Context getContext() {
        return this.d.getContext();
    }

    @Override // android.app.Instrumentation
    public ComponentName getComponentName() {
        return this.d.getComponentName();
    }

    @Override // android.app.Instrumentation
    public Context getTargetContext() {
        return this.d.getTargetContext();
    }

    @Override // android.app.Instrumentation
    public boolean isProfiling() {
        return this.d.isProfiling();
    }

    @Override // android.app.Instrumentation
    public void startProfiling() {
        this.d.startProfiling();
    }

    @Override // android.app.Instrumentation
    public void stopProfiling() {
        this.d.stopProfiling();
    }

    @Override // android.app.Instrumentation
    public void setInTouchMode(boolean z) {
        this.d.setInTouchMode(z);
    }

    @Override // android.app.Instrumentation
    public void waitForIdle(Runnable runnable) {
        this.d.waitForIdle(runnable);
    }

    @Override // android.app.Instrumentation
    public void waitForIdleSync() {
        this.d.waitForIdleSync();
    }

    @Override // android.app.Instrumentation
    public void runOnMainSync(Runnable runnable) {
        this.d.runOnMainSync(runnable);
    }

    @Override // android.app.Instrumentation
    public Activity startActivitySync(Intent intent) {
        return this.d.startActivitySync(intent);
    }

    @Override // android.app.Instrumentation
    public void addMonitor(Instrumentation.ActivityMonitor activityMonitor) {
        this.d.addMonitor(activityMonitor);
    }

    @Override // android.app.Instrumentation
    public Instrumentation.ActivityMonitor addMonitor(IntentFilter intentFilter, Instrumentation.ActivityResult activityResult, boolean z) {
        return this.d.addMonitor(intentFilter, activityResult, z);
    }

    @Override // android.app.Instrumentation
    public Instrumentation.ActivityMonitor addMonitor(String str, Instrumentation.ActivityResult activityResult, boolean z) {
        return this.d.addMonitor(str, activityResult, z);
    }

    @Override // android.app.Instrumentation
    public boolean checkMonitorHit(Instrumentation.ActivityMonitor activityMonitor, int i) {
        return this.d.checkMonitorHit(activityMonitor, i);
    }

    @Override // android.app.Instrumentation
    public Activity waitForMonitor(Instrumentation.ActivityMonitor activityMonitor) {
        return this.d.waitForMonitor(activityMonitor);
    }

    @Override // android.app.Instrumentation
    public Activity waitForMonitorWithTimeout(Instrumentation.ActivityMonitor activityMonitor, long j) {
        return this.d.waitForMonitorWithTimeout(activityMonitor, j);
    }

    @Override // android.app.Instrumentation
    public void removeMonitor(Instrumentation.ActivityMonitor activityMonitor) {
        this.d.removeMonitor(activityMonitor);
    }

    @Override // android.app.Instrumentation
    public boolean invokeMenuActionSync(Activity activity, int i, int i2) {
        return this.d.invokeMenuActionSync(activity, i, i2);
    }

    @Override // android.app.Instrumentation
    public boolean invokeContextMenuAction(Activity activity, int i, int i2) {
        return this.d.invokeContextMenuAction(activity, i, i2);
    }

    @Override // android.app.Instrumentation
    public void sendStringSync(String str) {
        this.d.sendStringSync(str);
    }

    @Override // android.app.Instrumentation
    public void sendKeySync(KeyEvent keyEvent) {
        this.d.sendKeySync(keyEvent);
    }

    @Override // android.app.Instrumentation
    public void sendKeyDownUpSync(int i) {
        this.d.sendKeyDownUpSync(i);
    }

    @Override // android.app.Instrumentation
    public void sendCharacterSync(int i) {
        this.d.sendCharacterSync(i);
    }

    @Override // android.app.Instrumentation
    public void sendPointerSync(MotionEvent motionEvent) {
        this.d.sendPointerSync(motionEvent);
    }

    @Override // android.app.Instrumentation
    public void sendTrackballEventSync(MotionEvent motionEvent) {
        this.d.sendTrackballEventSync(motionEvent);
    }

    @Override // android.app.Instrumentation
    public Application newApplication(ClassLoader classLoader, String str, Context context) {
        return this.d.newApplication(classLoader, str, context);
    }

    @Override // android.app.Instrumentation
    public void callApplicationOnCreate(Application application) {
        this.d.callApplicationOnCreate(application);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnDestroy(Activity activity) {
        this.d.callActivityOnDestroy(activity);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnRestoreInstanceState(Activity activity, Bundle bundle) {
        this.d.callActivityOnRestoreInstanceState(activity, bundle);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnPostCreate(Activity activity, Bundle bundle) {
        this.d.callActivityOnPostCreate(activity, bundle);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnNewIntent(Activity activity, Intent intent) {
        this.d.callActivityOnNewIntent(activity, intent);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnStart(Activity activity) {
        this.d.callActivityOnStart(activity);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnRestart(Activity activity) {
        this.d.callActivityOnRestart(activity);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnResume(Activity activity) {
        this.d.callActivityOnResume(activity);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnStop(Activity activity) {
        this.d.callActivityOnStop(activity);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnSaveInstanceState(Activity activity, Bundle bundle) {
        this.d.callActivityOnSaveInstanceState(activity, bundle);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnPause(Activity activity) {
        this.d.callActivityOnPause(activity);
    }

    @Override // android.app.Instrumentation
    public void callActivityOnUserLeaving(Activity activity) {
        this.d.callActivityOnUserLeaving(activity);
    }

    @Override // android.app.Instrumentation
    public void startAllocCounting() {
        this.d.startAllocCounting();
    }

    @Override // android.app.Instrumentation
    public void stopAllocCounting() {
        this.d.stopAllocCounting();
    }

    @Override // android.app.Instrumentation
    public Bundle getAllocCounts() {
        return this.d.getAllocCounts();
    }

    @Override // android.app.Instrumentation
    public Bundle getBinderCounts() {
        return this.d.getBinderCounts();
    }

    private void a(Activity activity, Bundle bundle, Exception exc) {
        String str;
        if (com.jingdong.aura.core.reflection.b.w != null) {
            try {
                str = "(1)Paths in ContextThemeWrapper_mResources:" + DelegateResourcesUtils.getAssetPathFromResources(com.jingdong.aura.core.reflection.b.w.a((Hack.d<ContextThemeWrapper, Resources>) activity)) + " paths in runtime:" + DelegateResourcesUtils.getRuntimeAssetHistoryPaths();
            } catch (Exception e) {
                str = "(2)paths in runtime:" + DelegateResourcesUtils.getRuntimeAssetHistoryPaths() + " getAssetPath fail: " + e;
            }
            throw new RuntimeException(str, exc);
        }
        throw new RuntimeException("(3)ContextThemeWrapper_mResources is null paths in runtime:" + DelegateResourcesUtils.getRuntimeAssetHistoryPaths(), exc);
    }

    private void a(Activity activity) {
        if (com.jingdong.aura.core.b.c.c() && com.jingdong.aura.core.b.c.t() != null) {
            com.jingdong.aura.core.b.c.t().beforeCallActivityOnCreate(activity);
        }
    }

    private void b(Activity activity) {
        if (com.jingdong.aura.core.b.c.c() && com.jingdong.aura.core.b.c.t() != null) {
            com.jingdong.aura.core.b.c.t().afterCallActivityOnCreate(activity);
        }
    }
}
