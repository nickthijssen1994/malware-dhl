package com.jingdong.aura.core.runing;

import android.content.pm.PackageInfo;
import android.text.TextUtils;
import com.jingdong.aura.core.a.a;
import com.jingdong.aura.core.a.d;
import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.h;
import com.jingdong.aura.core.util.i;
import java.io.File;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipFile;
import org.osgi.framework.BundleException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class c {
    private static Hashtable<Integer, String> a = new Hashtable<>();
    private static int b = 0;
    private static b c = com.jingdong.aura.core.util.a.c.a(c.class);

    public static String a(String str) {
        for (int i = 0; i < a.size(); i++) {
            if ((a.get(Integer.valueOf(i)) + "").contains(str + "")) {
                return a.get(Integer.valueOf(i)) + "";
            }
        }
        return "";
    }

    private static void a(String str, String str2) {
        Hashtable<Integer, String> hashtable = a;
        Integer valueOf = Integer.valueOf(b);
        hashtable.put(valueOf, " Not found class " + str + " because " + str2);
        b = b + 1;
        b = b % 10;
    }

    public static void b(String str) {
        if (str != null) {
            try {
                synchronized (str) {
                    d.a();
                    String b2 = com.jingdong.aura.core.a.c.a().b(str);
                    if (h.a(b2)) {
                        b2 = a.a().e(str);
                    }
                    if (TextUtils.isEmpty(b2)) {
                        b bVar = c;
                        bVar.e("Failed to find the bundle in BundleInfoList for component " + b2);
                        a(str, "not found in BundleInfoList!");
                        return;
                    }
                    c(b2);
                }
            } catch (Exception e) {
                if (!i.a(str)) {
                    e.a("ClassNotFound", "checkInstallBundleIfNeed failed " + str, "ClassLoadFromBundle", e);
                    return;
                }
                throw e;
            }
        }
    }

    public static void c(String str) {
        if (!TextUtils.isEmpty(str)) {
            if (d.a(str) || a.a().c(str)) {
                e(str);
            } else {
                a(str, "not found in mInternalBundles!");
            }
        }
    }

    public static Class<?> d(String str) {
        ClassLoader e;
        List<org.osgi.framework.a> g = com.jingdong.aura.core.b.b.b.g();
        Class<?> cls = null;
        if (g != null && !g.isEmpty()) {
            Iterator<org.osgi.framework.a> it = g.iterator();
            while (it.hasNext()) {
                com.jingdong.aura.core.b.h hVar = (org.osgi.framework.a) it.next();
                i a2 = f.a(hVar.n());
                if (a2 != null && (a2.e.contains(str) || a2.f.contains(str))) {
                    try {
                        cls = a(hVar, str, g);
                        continue;
                    } catch (Exception e2) {
                        if (!i.a(str)) {
                            e.a("ClassNotFound", "loadClassFromInstalledBundles failed " + str, "loadClassFromInstalledBundles", e2);
                            continue;
                        } else {
                            throw e2;
                        }
                    }
                }
                if (cls != null) {
                    return cls;
                }
            }
        }
        if (g != null && !g.isEmpty()) {
            Iterator<org.osgi.framework.a> it2 = com.jingdong.aura.core.b.b.b.g().iterator();
            while (it2.hasNext()) {
                com.jingdong.aura.core.b.h hVar2 = (org.osgi.framework.a) it2.next();
                hVar2.f().d();
                try {
                    hVar2.j();
                } catch (BundleException e3) {
                    e3.printStackTrace();
                }
                if (hVar2.f().c() && (e = hVar2.e()) != null) {
                    try {
                        cls = e.loadClass(str);
                        if (cls != null) {
                            return cls;
                        }
                    } catch (ClassNotFoundException unused) {
                        continue;
                    }
                }
            }
        }
        return cls;
    }

    private static Class<?> a(com.jingdong.aura.core.b.h hVar, String str, List<org.osgi.framework.a> list) {
        hVar.f().d();
        ClassLoader e = hVar.e();
        try {
            hVar.j();
        } catch (BundleException e2) {
            e2.printStackTrace();
        }
        if (e != null) {
            try {
                Class<?> loadClass = e.loadClass(str);
                if (loadClass != null) {
                    return loadClass;
                }
            } catch (ClassNotFoundException e3) {
                StringBuilder sb = new StringBuilder();
                sb.append("Can't find class ");
                sb.append(str);
                sb.append(" in BundleClassLoader:");
                sb.append(hVar.n());
                sb.append("[");
                sb.append(list == null ? 0 : list.size());
                sb.append("]. classloader = ");
                sb.append(e == null ? "null" : "not null");
                sb.append(". packageversion ");
                sb.append(a());
                throw new ClassNotFoundException(sb.toString(), e3);
            }
        }
        StringBuilder sb2 = new StringBuilder();
        sb2.append("Can't find class ");
        sb2.append(str);
        sb2.append(" in BundleClassLoader: ");
        sb2.append(hVar.n());
        sb2.append(" [");
        sb2.append(list.size());
        sb2.append("]");
        sb2.append(e == null ? "classloader is null" : "classloader not null");
        sb2.append(" packageversion ");
        sb2.append(a());
        throw new ClassNotFoundException(sb2.toString());
    }

    private static void e(String str) {
        List<String> a2 = a.a().a(str);
        if (a2 != null && a2.size() > 0) {
            for (int i = 0; i < a2.size(); i++) {
                e(a2.get(i));
            }
        }
        if (com.jingdong.aura.core.b.b.b.a(str) == null && !f(str) && com.jingdong.aura.core.b.a.a().a(str) == null) {
            g(str);
        }
    }

    private static boolean f(String str) {
        if (!com.jingdong.aura.core.b.c.c() || str == null) {
            return false;
        }
        String concat = "lib".concat(str).concat(".so");
        String d = com.jingdong.aura.core.b.b.b.d("com.jingdong.aura.AppDirectory.debug");
        if (d == null) {
            return false;
        }
        File file = new File(new File(d, "lib"), concat);
        if (!file.exists()) {
            return false;
        }
        c(str, "disk size not enough from ClassLoadFromBundle.loadDebugBundleFile for bundle " + str);
        try {
            com.jingdong.aura.core.b.a.a().a(str, file, (long) i.b(k.a, file.getAbsolutePath()), com.jingdong.aura.core.util.d.a(file.getAbsolutePath()));
            return true;
        } catch (Throwable th) {
            th.printStackTrace();
            return false;
        }
    }

    private static void g(String str) {
        File file;
        String str2;
        long j;
        if (!a.a().c(str)) {
            File i = i(str);
            if (i == null) {
                b(str, "lib".concat(str).concat(".so"));
                return;
            }
            file = i;
        } else {
            file = null;
        }
        c(str, "disk size not enough from ClassLoadFromBundle.loadOriginalBundle_2 for bundle " + str);
        try {
            a.C0042a f = a.a().f(str);
            if (f != null) {
                long j2 = f.i;
                str2 = f.k;
                j = j2;
            } else {
                str2 = "";
                j = 0;
            }
            com.jingdong.aura.core.b.a.a().a(str, file, j, str2);
        } catch (Throwable th) {
            c.b("failed to install bundle " + str, th);
            throw new RuntimeException("Aura failed to install bundle " + str + ", from ClassLoadFromBundle.loadOriginalBundle_1 ", th);
        }
    }

    private static File h(String str) {
        File file = null;
        if (str == null) {
            return null;
        }
        String d = com.jingdong.aura.core.b.b.b.d("com.jingdong.aura.AppDirectory");
        if (d != null) {
            file = new File(new File(d, "lib"), str);
        }
        if (file == null || !file.exists()) {
            return (k.a == null || k.a.getApplicationInfo() == null || k.a.getApplicationInfo().nativeLibraryDir == null) ? file : new File(k.a.getApplicationInfo().nativeLibraryDir, str);
        }
        return file;
    }

    private static void b(String str, String str2) {
        String str3;
        long j;
        c(str, "disk size not enough from ClassLoadFromBundle.installFromApkZip for bundle" + str);
        try {
            a.C0042a f = a.a().f(str);
            if (f != null) {
                long j2 = f.i;
                str3 = f.k;
                j = j2;
            } else {
                str3 = "";
                j = 0;
            }
            com.jingdong.aura.core.b.a.a().a(str, d.b(str2), j, str3);
        } catch (Exception e) {
            c.a("Failed to install bundle " + str2 + " from APK zipfile ", e);
            throw new RuntimeException("Failed to install bundle " + str2 + " from APK zipfile ", e);
        }
    }

    private static int a() {
        PackageInfo packageInfo;
        try {
            packageInfo = k.a.getPackageManager().getPackageInfo(k.a.getPackageName(), 0);
        } catch (Throwable th) {
            c.b("Error to get PackageInfo >>>", th);
            packageInfo = new PackageInfo();
        }
        return packageInfo.versionCode;
    }

    private static void c(String str, String str2) {
        if (!com.jingdong.aura.core.b.c.a(str)) {
            c.e("disk size not enough");
            throw new RuntimeException(str2);
        }
    }

    private static File i(String str) {
        String concat = "lib".concat(str).concat(".so");
        File h = h(concat);
        if (h == null) {
            return null;
        }
        if (a(str, h)) {
            return h;
        }
        if (d.a(str)) {
            return null;
        }
        b bVar = c;
        bVar.e(" can not find the library " + concat + " for bundle" + str);
        throw new RuntimeException("can not find the library " + concat + " for bundle" + str + " from ClassLoadFromBundle.loadOriginalBundle_3");
    }

    private static boolean a(String str, File file) {
        ZipFile zipFile;
        Throwable th;
        try {
            zipFile = new ZipFile(file);
            try {
                if (!file.exists() || !file.isFile() || !file.canRead() || file.length() <= 0) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(file.exists() ? "exist" : "not exit");
                    sb.append(file.isFile() ? "isFile" : "not file");
                    sb.append(file.canRead() ? "canRead" : "can note read");
                    sb.append(file.length());
                    sb.toString();
                    com.jingdong.aura.core.util.d.a(zipFile);
                    return false;
                }
                com.jingdong.aura.core.util.d.a(zipFile);
                return true;
            } catch (Exception unused) {
                com.jingdong.aura.core.util.d.a(zipFile);
                return false;
            } catch (Throwable th2) {
                th = th2;
                com.jingdong.aura.core.util.d.a(zipFile);
                throw th;
            }
        } catch (Exception unused2) {
            zipFile = null;
        } catch (Throwable th3) {
            th = th3;
            zipFile = null;
        }
    }
}
