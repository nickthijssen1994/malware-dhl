package com.jingdong.aura.core.runing;

import android.annotation.SuppressLint;
import android.app.Application;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Looper;
import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.b.h;
import com.jingdong.aura.core.util.a.c;
import com.jingdong.aura.core.util.d;
import java.io.File;
import java.util.zip.ZipFile;
import org.osgi.framework.BundleEvent;
import org.osgi.framework.g;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class b implements g {
    private static final com.jingdong.aura.core.util.a.b a = c.a(b.class);

    private void b(org.osgi.framework.a aVar) {
    }

    private void c(org.osgi.framework.a aVar) {
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    private class a extends AsyncTask<org.osgi.framework.a, Void, Void> {
        private a() {
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public Void doInBackground(org.osgi.framework.a... aVarArr) {
            b.this.e(aVarArr[0]);
            return null;
        }
    }

    @SuppressLint({"NewApi"})
    public void bundleChanged(BundleEvent bundleEvent) {
        int type = bundleEvent.getType();
        if (type == 4) {
            f(bundleEvent.getBundle());
        } else if (type == 8) {
            c(bundleEvent.getBundle());
        } else if (type != 16) {
            switch (type) {
                case 0:
                    a(bundleEvent.getBundle());
                    return;
                case 1:
                    b(bundleEvent.getBundle());
                    return;
                case 2:
                    if (a()) {
                        if (Looper.myLooper() == null) {
                            Looper.prepare();
                        }
                        e(bundleEvent.getBundle());
                        return;
                    } else if (com.jingdong.aura.core.b.b.b.f()) {
                        a aVar = new a();
                        if (Build.VERSION.SDK_INT > 11) {
                            aVar.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, bundleEvent.getBundle());
                            return;
                        } else {
                            aVar.execute(bundleEvent.getBundle());
                            return;
                        }
                    } else {
                        e(bundleEvent.getBundle());
                        return;
                    }
                default:
                    return;
            }
        } else {
            d(bundleEvent.getBundle());
        }
    }

    private void a(org.osgi.framework.a aVar) {
        long currentTimeMillis = System.currentTimeMillis();
        h hVar = (h) aVar;
        if (f.a(aVar.n()) == null) {
            i a2 = i.a(hVar.b().a());
            com.jingdong.aura.core.util.a.b bVar = a;
            bVar.c("Bundle installation info " + aVar.n() + ":" + a2.e);
            f.a(aVar.n(), a2);
        }
        try {
            if (a(hVar.b().a())) {
                a.c("process resources");
                com.jingdong.aura.core.runing.resource.a.a(k.a, k.d, hVar.b().a().getAbsolutePath());
            } else {
                a.c("public bundle do not process resources");
            }
        } catch (Throwable th) {
            com.jingdong.aura.core.util.a.b bVar2 = a;
            bVar2.b("Could not load resource in bundle " + hVar.n(), th);
        }
        a.c("loaded() spend " + (System.currentTimeMillis() - currentTimeMillis) + " milliseconds");
        e.a("AuraMaiDianBundleLoaded", aVar.n(), hVar.o(), String.valueOf(System.currentTimeMillis() - currentTimeMillis), "BundleLifecycleHandler.loaded");
    }

    private void d(org.osgi.framework.a aVar) {
        f.b(aVar.n());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void e(org.osgi.framework.a aVar) {
        h hVar = (h) aVar;
        long currentTimeMillis = System.currentTimeMillis();
        i a2 = f.a(hVar.n());
        if (a2 != null) {
            String str = a2.a;
            if (com.jingdong.aura.core.util.h.b(str)) {
                try {
                    a(str, hVar.e()).onCreate();
                } catch (Throwable th) {
                    a.b("Error to start application >>>", th);
                }
            }
        }
        com.jingdong.aura.core.util.a.b bVar = a;
        bVar.c("started() spend " + (System.currentTimeMillis() - currentTimeMillis) + " milliseconds");
    }

    protected static Application a(String str, ClassLoader classLoader) {
        Class<?> loadClass = classLoader.loadClass(str);
        if (loadClass != null) {
            Application application = (Application) loadClass.newInstance();
            com.jingdong.aura.core.reflection.b.i.a(application, k.a);
            return application;
        }
        throw new ClassNotFoundException(str);
    }

    private void f(org.osgi.framework.a aVar) {
        Application application = f.a.get(aVar.n());
        if (application != null) {
            application.onTerminate();
            f.a.remove(aVar.n());
        }
    }

    private boolean a() {
        if (Build.VERSION.SDK_INT >= 28) {
            return false;
        }
        try {
            return com.jingdong.aura.core.util.h.b((String) Class.forName("android.os.SystemProperties").getDeclaredMethod("get", String.class).invoke(null, "ro.lewa.version"));
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean a(File file) {
        Throwable th;
        Exception e;
        ZipFile zipFile;
        boolean z = true;
        ZipFile zipFile2 = null;
        try {
            try {
                zipFile = new ZipFile(file);
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            if (zipFile.getEntry("resources.arsc") == null) {
                z = false;
            }
            d.a(zipFile);
            return z;
        } catch (Exception e3) {
            e = e3;
            zipFile2 = zipFile;
            a.a(e.getMessage(), e);
            d.a(zipFile2);
            return true;
        } catch (Throwable th3) {
            th = th3;
            zipFile2 = zipFile;
            d.a(zipFile2);
            throw th;
        }
    }
}
