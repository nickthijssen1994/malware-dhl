package com.jingdong.aura.core.b.b;

import android.app.Application;
import android.os.Build;
import com.jingdong.aura.core.b.i;
import com.jingdong.aura.core.util.a.c;
import com.jingdong.aura.core.util.d;
import com.jingdong.aura.core.util.f;
import com.jingdong.aura.core.util.g;
import com.jingdong.aura.core.util.h;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.concurrent.ConcurrentHashMap;
import org.osgi.framework.BundleException;
import org.osgi.framework.a;
import org.osgi.framework.e;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class b {
    public static boolean d;
    private static d h;
    private static e j;
    private static ClassLoader k;
    private static String o;
    private static final com.jingdong.aura.core.util.a.b g = c.a(b.class);
    private static boolean i = false;
    private static List<e> l = new ArrayList();
    private static Map<String, List<e>> m = new HashMap();
    public static boolean a = true;
    public static boolean b = true;
    public static boolean c = true;
    private static String n = null;
    private static String p = null;
    private static List<String> q = new ArrayList();
    private static int r = 1;
    private static int s = 0;
    private static Map<i, i> t = new ConcurrentHashMap();
    private static int u = 0;
    static boolean e = false;
    static Map<String, String> f = new HashMap();

    private b() {
    }

    public static void a(Application application, Properties properties) {
        h = new d(properties);
        a(application);
    }

    private static void a(Application application) {
        boolean z;
        int i2;
        i = true;
        g.a("---------------------------------------------------------");
        com.jingdong.aura.core.util.a.b bVar = g;
        bVar.a("  Aura 1.2.36.15 on " + Build.MODEL + "/" + Build.CPU_ABI + "/" + Build.VERSION.RELEASE + " SDK version " + Build.VERSION.SDK_INT + " starting ...");
        g.a("---------------------------------------------------------");
        long currentTimeMillis = System.currentTimeMillis();
        m();
        n();
        boolean a2 = h.a("osgi.init", false);
        if (a2) {
            i2 = -1;
            z = false;
        } else {
            i2 = o();
            z = true;
        }
        if (i2 == -1) {
            File file = new File(o);
            boolean a3 = g.a(application);
            if (a2 && file.exists() && a3) {
                g.b("Purging storage ...");
                try {
                    f.a(file);
                } catch (Throwable th) {
                    throw new RuntimeException("deleteDirectory failed", th);
                }
            }
            if (a2 && a3) {
                g.b("deleting storage Directory ...");
                f.a();
            }
            try {
                file.mkdirs();
                Integer.getInteger("osgi.maxLevel", (Integer) 1).intValue();
                r = h.a("osgi.startlevel.bundle", 1);
                i2 = h.a("osgi.startlevel.framework", 1);
                z = false;
            } catch (Throwable th2) {
                throw new RuntimeException("mkdirs failed", th2);
            }
        }
        c.a(0, j, null);
        j.a((a[]) a.a().toArray(new a[a.b()]), i2, false);
        i = false;
        if (!z) {
            try {
                p();
            } catch (Throwable th3) {
                throw new RuntimeException("storeProfile failed", th3);
            }
        }
        long currentTimeMillis2 = System.currentTimeMillis() - currentTimeMillis;
        g.a("---------------------------------------------------------");
        com.jingdong.aura.core.util.a.b bVar2 = g;
        StringBuilder sb = new StringBuilder();
        sb.append("  Framework ");
        sb.append(z ? "restarted" : "started");
        sb.append(" in ");
        sb.append(currentTimeMillis2);
        sb.append(" milliseconds.");
        bVar2.a(sb.toString());
        g.a("---------------------------------------------------------");
        j.a(32);
        try {
            c.a(1, j, null);
        } catch (Throwable th4) {
            throw new RuntimeException("notifyFrameworkListeners failed", th4);
        }
    }

    private static void m() {
        File a2 = d.a();
        if (a2 == null || !a2.exists()) {
            a2 = d.a();
        }
        n = h.a("com.aura.basedir", a2.getAbsolutePath());
        d dVar = h;
        p = dVar.a("com.aura.jars", "file:" + n);
        u = h.a("com.aura.classloader.buffersize", 10240);
        b = h.a("com.aura.debug.packages", false);
        c = h.a("com.aura.debug.services", false);
        a = h.a("com.aura.debug.classloading", false);
        if (h.a("com.aura.debug", false)) {
            g.b("SETTING ALL DEBUG FLAGS");
            b = true;
            c = true;
            a = true;
        }
        d = h.a("com.aura.strictStartup", false);
        String a3 = h.a("org.osgi.framework.system.packages");
        if (a3 != null) {
            StringTokenizer stringTokenizer = new StringTokenizer(a3, ",");
            int countTokens = stringTokenizer.countTokens();
            for (int i2 = 0; i2 < countTokens; i2++) {
                com.jingdong.aura.core.b.f.a(stringTokenizer.nextToken().trim());
            }
        }
        d dVar2 = h;
        dVar2.b("org.osgi.framework.executionenvironment", System.getProperty("java.specification.name") + "/" + System.getProperty("java.specification.version"));
        String property = System.getProperty("os.name");
        if (property == null) {
            property = "undefined";
        }
        h.b("org.osgi.framework.os.name", property);
        String property2 = System.getProperty("os.version");
        if (property2 == null) {
            property2 = "undefined";
        }
        h.b("org.osgi.framework.os.version", property2);
        String property3 = System.getProperty("os.arch");
        if (property3 == null) {
            property3 = "undefined";
        }
        h.b("org.osgi.framework.processor", property3);
        h.b("org.osgi.framework.version", "1.2.36.15");
        h.b("org.osgi.framework.vendor", "Aura");
        String language = Locale.getDefault().getLanguage();
        if (language == null) {
            language = "en";
        }
        h.b("org.osgi.framework.language", language);
    }

    private static void n() {
        StringBuilder sb = new StringBuilder();
        d dVar = h;
        sb.append(dVar.a("com.aura.storage", dVar.a("org.osgi.framework.dir", n + File.separatorChar + "aura")));
        sb.append(File.separatorChar);
        o = sb.toString();
        j = new e();
        j.a(8);
    }

    private static int o() {
        try {
            g.b("Restoring profile");
            File file = new File(o, "meta");
            if (!file.exists()) {
                g.b("Profile not found, performing clean start ...");
                return -1;
            }
            DataInputStream dataInputStream = new DataInputStream(new FileInputStream(file));
            int readInt = dataInputStream.readInt();
            String[] e2 = h.e(dataInputStream.readUTF(), ",");
            if (e2 != null) {
                q.addAll(Arrays.asList(e2));
            }
            dataInputStream.close();
            return readInt;
        } catch (Exception e3) {
            e3.printStackTrace();
            return 0;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:28:0x0076, code lost:
        r1 = com.jingdong.aura.core.a.a.a().i(r13);
     */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x0082, code lost:
        if (android.text.TextUtils.isEmpty(r1) != false) goto L_0x008c;
     */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x0088, code lost:
        if (r1.equals(r18) != false) goto L_0x008c;
     */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x008a, code lost:
        r10 = r1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:33:0x008c, code lost:
        r10 = r18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:34:0x008d, code lost:
        if (r14 == null) goto L_0x00a2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:35:0x008f, code lost:
        r0 = new com.jingdong.aura.core.b.h(r12, r13, r16, new com.jingdong.aura.core.b.g(), null, r14, true, r10);
     */
    /* JADX WARN: Code restructure failed: missing block: B:36:0x00a2, code lost:
        r0 = new com.jingdong.aura.core.b.h(r12, r13, r16, new com.jingdong.aura.core.b.g(), r15, null, true, r10);
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x00b4, code lost:
        a();
     */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x00c1, code lost:
        return r0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static com.jingdong.aura.core.b.h a(java.lang.String r13, java.io.File r14, java.io.InputStream r15, long r16, java.lang.String r18) {
        /*
        // Method dump skipped, instructions count: 244
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.b.b.b.a(java.lang.String, java.io.File, java.io.InputStream, long, java.lang.String):com.jingdong.aura.core.b.h");
    }

    public static boolean a(String str, InputStream inputStream, int i2, String str2) {
        if (str == null || inputStream == null) {
            g.a("locations and files must not be null");
            return false;
        }
        String valueOf = String.valueOf(System.currentTimeMillis());
        new File(new File(o, "wal"), valueOf).mkdirs();
        com.jingdong.aura.core.util.c.a(str);
        try {
            com.jingdong.aura.core.b.h a2 = a(str);
            if (a2 != null) {
                a2.a(inputStream, i2, str2);
            } else {
                File file = new File(o, str);
                if (file.exists()) {
                    com.jingdong.aura.core.util.a.b bVar = g;
                    bVar.b("checkUpdateBundle. " + str);
                    com.jingdong.aura.core.b.h.a(file, str, i2, inputStream, str2);
                } else {
                    com.jingdong.aura.core.util.a.b bVar2 = g;
                    bVar2.b("new bundleImpl. " + str);
                    new com.jingdong.aura.core.b.h(file, str, (long) i2, new com.jingdong.aura.core.b.g(), inputStream, null, false, str2);
                }
            }
            q.add(valueOf);
            a();
            return true;
        } finally {
            com.jingdong.aura.core.util.c.b(str);
        }
    }

    private static com.jingdong.aura.core.b.h a(File file, String str, long j2, String str2) {
        if (file == null || str == null) {
            return null;
        }
        long b2 = com.jingdong.aura.core.b.c.h.b(file);
        if (!com.jingdong.aura.core.b.c.h.a(j2, str2, b2, com.jingdong.aura.core.b.c.h.a(file, b2))) {
            return a(str, file, b2);
        }
        return null;
    }

    private static void p() {
        for (com.jingdong.aura.core.b.h hVar : (com.jingdong.aura.core.b.h[]) g().toArray(new com.jingdong.aura.core.b.h[g().size()])) {
            hVar.p();
        }
        a();
    }

    static void a() {
        try {
            File file = new File(o, "meta");
            if (!file.getParentFile().exists()) {
                file.getParentFile().mkdirs();
            }
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException e2) {
                    g.a(e2.getMessage(), e2);
                }
            }
            DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream(file));
            dataOutputStream.writeInt(s);
            String a2 = h.a(q.toArray(), ",");
            if (a2 == null) {
                a2 = "";
            }
            dataOutputStream.writeUTF(a2);
            dataOutputStream.flush();
            dataOutputStream.close();
        } catch (IOException e3) {
            com.jingdong.aura.core.b.e.a("com.jingdong.aura", "storeMetadata failed", "Framework.storeMetadata", e3);
            g.b("Could not save meta data.", e3);
        }
    }

    private static com.jingdong.aura.core.b.h a(String str, File file, long j2) {
        try {
            return new com.jingdong.aura.core.b.h(file, new com.jingdong.aura.core.b.g(), j2);
        } catch (Throwable th) {
            com.jingdong.aura.core.b.e.a(str, "restore bundle failed " + str, "Framework.restoreFromExistedBundle", th);
            com.jingdong.aura.core.util.a.b bVar = g;
            bVar.b("restore bundle failed: " + str, th);
            th.printStackTrace();
            return null;
        }
    }

    public static void a(ClassLoader classLoader) {
        k = classLoader;
    }

    public static ClassLoader b() {
        return k;
    }

    public static a c() {
        return j;
    }

    public static List d() {
        return l;
    }

    public static Map<String, List<e>> e() {
        return m;
    }

    public static boolean f() {
        return i;
    }

    public static void a(org.osgi.framework.b bVar) {
        c.a(bVar);
    }

    public static void b(org.osgi.framework.b bVar) {
        c.b(bVar);
    }

    public static void a(org.osgi.framework.c cVar) {
        c.a(cVar);
    }

    public static void a(int i2, a aVar) {
        c.a(i2, aVar);
    }

    public static void a(int i2, a aVar, Throwable th) {
        c.a(i2, aVar, th);
    }

    public static List<a> g() {
        return a.a();
    }

    public static String h() {
        List<a> g2 = g();
        if (g2 == null || g2.isEmpty()) {
            return "";
        }
        StringBuilder sb = new StringBuilder("InstalledBundles[");
        Iterator<a> it = g2.iterator();
        while (it.hasNext()) {
            com.jingdong.aura.core.b.h hVar = (a) it.next();
            sb.append(hVar.n());
            sb.append(":");
            sb.append(hVar.o());
            sb.append(";");
        }
        sb.append("]");
        return sb.toString();
    }

    public static a a(String str) {
        return a.a(str);
    }

    public static void a(String str, a aVar) {
        a.a(str, aVar);
    }

    public static void b(String str) {
        a.b(str);
    }

    public static void c(String str) {
        if (str != null) {
            File file = new File(o, str);
            com.jingdong.aura.core.util.a.a().a(file);
            if (file.exists()) {
                f.a(file);
            }
            com.jingdong.aura.core.util.a.a().b(file);
        }
    }

    public static void i() {
        List<String> d2 = com.jingdong.aura.core.a.a.a().d();
        if (d2 != null) {
            for (String str : d2) {
                if (str != null) {
                    a a2 = a(str);
                    if (a2 != null) {
                        try {
                            a2.m();
                        } catch (BundleException e2) {
                            e2.printStackTrace();
                        }
                    }
                    c(str);
                }
            }
            f.a();
        }
    }

    public static File j() {
        return new File(o);
    }

    public static String d(String str) {
        return h.a(str);
    }

    public static int k() {
        return r;
    }

    public static int l() {
        return s;
    }

    public static void a(int i2) {
        s = i2;
    }
}
