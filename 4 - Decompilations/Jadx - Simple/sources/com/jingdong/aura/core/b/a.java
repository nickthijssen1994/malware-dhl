package com.jingdong.aura.core.b;

import android.app.Application;
import androidx.databinding.DataBinderMapperProxy;
import com.jingdong.aura.core.runing.g;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import com.jingdong.aura.wrapper.AuraInitializer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class a {
    private static final b a = c.a(a.class);
    private static a d;
    private com.jingdong.aura.core.runing.b b;
    private g c;
    private AuraInitializer.a e;
    private DataBinderMapperProxy f;

    public static a a() {
        if (d == null) {
            d = new a();
        }
        return d;
    }

    /* JADX WARN: Removed duplicated region for block: B:22:0x00b8 A[Catch: Exception -> 0x00c7, TryCatch #0 {Exception -> 0x00c7, blocks: (B:19:0x00a2, B:20:0x00b2, B:22:0x00b8, B:24:0x00c2), top: B:28:0x00a2 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public void a(android.app.Application r5) {
        /*
            r4 = this;
            com.jingdong.aura.core.util.a.b r0 = com.jingdong.aura.core.b.a.a
            java.lang.String r1 = "init called"
            r0.a(r1)
            boolean r0 = com.jingdong.aura.core.b.c.a()
            if (r0 != 0) goto L_0x000e
            return
        L_0x000e:
            if (r5 != 0) goto L_0x0011
            return
        L_0x0011:
            com.jingdong.aura.core.b.c.a = r5
            java.lang.String r0 = r5.getPackageName()
            com.jingdong.aura.core.reflection.b.a()
            java.lang.Class<com.jingdong.aura.core.b.a> r1 = com.jingdong.aura.core.b.a.class
            java.lang.ClassLoader r1 = r1.getClassLoader()
            com.jingdong.aura.core.runing.e r2 = new com.jingdong.aura.core.runing.e
            r2.<init>(r1)
            com.jingdong.aura.core.b.b.b.a(r1)
            com.jingdong.aura.core.runing.k.b = r2
            android.content.res.Resources r1 = r5.getResources()
            com.jingdong.aura.core.runing.k.d = r1
            com.jingdong.aura.core.runing.k.a = r5
            com.jingdong.aura.core.reflection.a.a(r0, r2)
            com.jingdong.aura.core.runing.h r1 = new com.jingdong.aura.core.runing.h
            android.app.Instrumentation r2 = com.jingdong.aura.core.reflection.a.d()
            android.content.Context r3 = r5.getBaseContext()
            r1.<init>(r2, r3)
            com.jingdong.aura.core.reflection.a.a(r1)
            com.jingdong.aura.core.reflection.a.a(r0, r5)
            com.jingdong.aura.core.runing.b r0 = new com.jingdong.aura.core.runing.b
            r0.<init>()
            r4.b = r0
            com.jingdong.aura.core.runing.b r0 = r4.b
            com.jingdong.aura.core.b.b.b.a(r0)
            com.jingdong.aura.core.runing.g r0 = new com.jingdong.aura.core.runing.g
            r0.<init>()
            r4.c = r0
            com.jingdong.aura.core.runing.g r0 = r4.c
            com.jingdong.aura.core.b.b.b.a(r0)
            com.jingdong.aura.core.runing.a r0 = new com.jingdong.aura.core.runing.a     // Catch: Throwable -> 0x0092
            r0.<init>()     // Catch: Throwable -> 0x0092
            int r1 = android.os.Build.VERSION.SDK_INT     // Catch: Throwable -> 0x0092
            r2 = 25
            if (r1 > r2) goto L_0x0081
            int r1 = android.os.Build.VERSION.SDK_INT     // Catch: Throwable -> 0x0092
            if (r1 != r2) goto L_0x0074
            int r1 = android.os.Build.VERSION.PREVIEW_SDK_INT     // Catch: Throwable -> 0x0092
            if (r1 <= 0) goto L_0x0074
            goto L_0x0081
        L_0x0074:
            com.jingdong.aura.core.reflection.Hack$d<java.lang.Object, java.lang.Object> r1 = com.jingdong.aura.core.reflection.b.V     // Catch: Throwable -> 0x0092
            com.jingdong.aura.core.reflection.Hack$b<java.lang.Object> r2 = com.jingdong.aura.core.reflection.b.R     // Catch: Throwable -> 0x0092
            java.lang.Class r2 = r2.a()     // Catch: Throwable -> 0x0092
            java.lang.Object r1 = r1.a(r2)     // Catch: Throwable -> 0x0092
            goto L_0x008d
        L_0x0081:
            com.jingdong.aura.core.reflection.Hack$d<java.lang.Object, java.lang.Object> r1 = com.jingdong.aura.core.reflection.b.W     // Catch: Throwable -> 0x0092
            com.jingdong.aura.core.reflection.Hack$b<java.lang.Object> r2 = com.jingdong.aura.core.reflection.b.S     // Catch: Throwable -> 0x0092
            java.lang.Class r2 = r2.a()     // Catch: Throwable -> 0x0092
            java.lang.Object r1 = r1.a(r2)     // Catch: Throwable -> 0x0092
        L_0x008d:
            com.jingdong.aura.core.reflection.Hack$d<java.lang.Object, java.lang.Object> r2 = com.jingdong.aura.core.reflection.b.U     // Catch: Throwable -> 0x0092
            r2.a(r1, r0)     // Catch: Throwable -> 0x0092
        L_0x0092:
            com.jingdong.aura.core.reflection.a.b()
            com.jingdong.aura.core.reflection.a.e()
            androidx.databinding.DataBinderMapperProxy r0 = com.jingdong.aura.core.reflection.a.f()
            r4.f = r0
            int r0 = android.os.Process.myPid()
            java.lang.String r1 = "activity"
            java.lang.Object r5 = r5.getSystemService(r1)     // Catch: Exception -> 0x00c7
            android.app.ActivityManager r5 = (android.app.ActivityManager) r5     // Catch: Exception -> 0x00c7
            java.util.List r5 = r5.getRunningAppProcesses()     // Catch: Exception -> 0x00c7
            java.util.Iterator r5 = r5.iterator()     // Catch: Exception -> 0x00c7
        L_0x00b2:
            boolean r1 = r5.hasNext()     // Catch: Exception -> 0x00c7
            if (r1 == 0) goto L_0x00c7
            java.lang.Object r1 = r5.next()     // Catch: Exception -> 0x00c7
            android.app.ActivityManager$RunningAppProcessInfo r1 = (android.app.ActivityManager.RunningAppProcessInfo) r1     // Catch: Exception -> 0x00c7
            int r2 = r1.pid     // Catch: Exception -> 0x00c7
            if (r2 != r0) goto L_0x00b2
            java.lang.String r1 = r1.processName     // Catch: Exception -> 0x00c7
            com.jingdong.aura.core.runing.k.e = r1     // Catch: Exception -> 0x00c7
            goto L_0x00b2
        L_0x00c7:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.b.a.a(android.app.Application):void");
    }

    public void a(Application application, Properties properties) {
        a.a("startup called");
        if (c.a()) {
            com.jingdong.aura.core.b.b.b.a(application, properties);
            DataBinderMapperProxy dataBinderMapperProxy = this.f;
            if (dataBinderMapperProxy != null) {
                com.jingdong.aura.core.b.b.b.b((org.osgi.framework.b) dataBinderMapperProxy);
            }
        }
    }

    public void a(org.osgi.framework.b bVar) {
        com.jingdong.aura.core.b.b.b.b(bVar);
    }

    public List<org.osgi.framework.a> b() {
        a.a("getBundles called");
        return com.jingdong.aura.core.b.b.b.g();
    }

    public org.osgi.framework.a a(String str) {
        a.a("getBundle called");
        return com.jingdong.aura.core.b.b.b.a(str);
    }

    public File b(String str) {
        h a2 = com.jingdong.aura.core.b.b.b.a(str);
        if (a2 != null) {
            return a2.b().a();
        }
        return null;
    }

    public void a(String str, File file, long j, String str2) {
        b bVar = a;
        bVar.a("installBundle called file.  location=" + str + ", versionCode=" + j + ", md5=" + str2);
        e.a("AuraMaiDianInstallBundle", str, (int) j, "", "installBundleFile");
        com.jingdong.aura.core.b.b.b.a(str, file, null, j, str2);
    }

    public void a(String str, InputStream inputStream, long j, String str2) {
        b bVar = a;
        bVar.a("installBundle called stream. location=" + str + ", versionCode=" + j + ", md5=" + str2);
        e.a("AuraMaiDianInstallBundle", str, (int) j, "", "installBundleInputStream");
        com.jingdong.aura.core.b.b.b.a(str, null, inputStream, j, str2);
    }

    public void c(String str) {
        com.jingdong.aura.core.runing.c.c(str);
    }

    public boolean a(String str, String str2, int i, String str3) {
        Throwable th;
        FileNotFoundException e;
        Throwable th2;
        FileInputStream fileInputStream;
        a.a("Update called");
        FileInputStream fileInputStream2 = null;
        if (str2 == null) {
            a.c("path is null");
            e.a(str, i, "bundle update failed, because apkFile path is null form Aura.update for bundle" + str, "Aura.update", (Throwable) null);
            return false;
        } else if (!c.a()) {
            e.a(str, i, "bundle update failed, because AuraConfigInternal.isUseAura is false form Aura.update for bundle" + str, "Aura.update", (Throwable) null);
            return false;
        } else if (!c.a(1)) {
            e.a(str, i, "bundle update failed, because disk size not enough  form Aura.update for bundle" + str, "Aura.update", (Throwable) null);
            return false;
        } else {
            File file = new File(str2);
            try {
                try {
                    if (!file.exists()) {
                        b bVar = a;
                        bVar.c("path not exists. " + str2);
                        e.a(str, i, "bundle update failed, because apkFile not exist form Aura.update for bundle" + str, "Aura.update", (Throwable) null);
                        return false;
                    }
                    try {
                        fileInputStream = new FileInputStream(file);
                    } catch (FileNotFoundException e2) {
                        e = e2;
                    } catch (Throwable th3) {
                        th2 = th3;
                    }
                    try {
                        boolean a2 = com.jingdong.aura.core.b.b.b.a(str, fileInputStream, i, str3);
                        try {
                            fileInputStream.close();
                        } catch (IOException e3) {
                            e3.printStackTrace();
                        }
                        return a2;
                    } catch (FileNotFoundException e4) {
                        e = e4;
                        fileInputStream2 = fileInputStream;
                        e.a(str, i, "bundle update failed 1 " + str, "Aura.update", e);
                        e.printStackTrace();
                        if (fileInputStream2 != null) {
                            fileInputStream2.close();
                        }
                        return false;
                    } catch (Throwable th4) {
                        th2 = th4;
                        fileInputStream2 = fileInputStream;
                        e.a(str, i, "update bundle failed 2" + str, "Aura.update", th2);
                        th2.printStackTrace();
                        if (fileInputStream2 != null) {
                            fileInputStream2.close();
                        }
                        return false;
                    }
                } catch (IOException e5) {
                    e5.printStackTrace();
                }
            } catch (Throwable th5) {
                th = th5;
            }
        }
    }

    public AuraInitializer.a c() {
        return this.e;
    }

    public void a(AuraInitializer.a aVar) {
        this.e = aVar;
    }
}
