package com.jingdong.aura.core.b.b;

import android.annotation.SuppressLint;
import com.jingdong.aura.core.b.h;
import com.jingdong.aura.core.b.j;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import com.jingdong.aura.core.util.i;
import java.io.PrintStream;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import org.osgi.a.a.a;
import org.osgi.framework.BundleException;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class e implements a, org.osgi.a.b.a, org.osgi.framework.a {
    private static final b a = c.a(e.class);
    private final Dictionary<String, String> b = new Hashtable();
    private final org.osgi.framework.e[] c;
    private int d;

    public void l() {
    }

    public String n() {
        return "System Bundle";
    }

    public String toString() {
        return "SystemBundle";
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public e() {
        this.b.put("Bundle-Name", "System Bundle");
        this.b.put("Bundle-Version", "1.2.36.15");
        this.b.put("Bundle-Vendor", "Aura");
        org.osgi.framework.e jVar = new j(this, this, null, new String[]{org.osgi.a.b.a.class.getName(), a.class.getName()});
        i.a(b.e(), org.osgi.a.b.a.class.getName(), jVar);
        i.a(b.e(), a.class.getName(), jVar);
        b.d().add(jVar);
        this.c = new org.osgi.framework.e[]{jVar};
    }

    public void a(int i) {
        this.d = i;
    }

    public void m() {
        throw new BundleException("Cannot uninstall the System Bundle");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @SuppressLint({"UseSparseArrays"})
    public void a(org.osgi.framework.a[] aVarArr, int i, boolean z) {
        int i2;
        if (b.l() != i) {
            boolean z2 = i > b.l();
            int l = z2 ? i - b.l() : b.l() - i;
            HashMap hashMap = new HashMap(0);
            for (int i3 = 0; i3 < aVarArr.length; i3++) {
                if (aVarArr[i3] != b.c() && (z || ((h) aVarArr[i3]).d())) {
                    h hVar = (h) aVarArr[i3];
                    if (z2) {
                        i2 = (hVar.c() - b.l()) - 1;
                    } else {
                        i2 = b.l() - hVar.c();
                    }
                    if (i2 >= 0 && i2 < l) {
                        i.a(hashMap, Integer.valueOf(i2), hVar);
                    }
                }
            }
            for (int i4 = 0; i4 < l; i4++) {
                if (z2) {
                    b.a(b.l() + 1);
                } else {
                    b.a(b.l() - 1);
                }
                List list = (List) hashMap.get(Integer.valueOf(i4));
                if (list != null) {
                    h[] hVarArr = (h[]) list.toArray(new h[list.size()]);
                    for (int i5 = 0; i5 < hVarArr.length; i5++) {
                        if (z2) {
                            try {
                                PrintStream printStream = System.out;
                                printStream.println("STARTING " + hVarArr[i5].n());
                                hVarArr[i5].j();
                            } catch (Throwable th) {
                                th.printStackTrace();
                                th.printStackTrace();
                                b.a(2, b.c(), th);
                            }
                        } else if (hVarArr[i5].a() != 1) {
                            PrintStream printStream2 = System.out;
                            printStream2.println("STOPPING " + hVarArr[i5].n());
                            try {
                                hVarArr[(hVarArr.length - i5) - 1].k();
                            } catch (BundleException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }
            b.a(i);
        }
    }
}
