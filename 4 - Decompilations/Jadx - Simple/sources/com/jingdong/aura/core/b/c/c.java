package com.jingdong.aura.core.b.c;

import android.os.Build;
import android.text.TextUtils;
import com.jingdong.aura.core.a.a;
import com.jingdong.aura.core.b.e;
import com.jingdong.aura.core.runing.i;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.d;
import com.jingdong.aura.core.util.f;
import com.jingdong.aura.core.util.h;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class c {
    private static final b a = com.jingdong.aura.core.util.a.c.a(c.class);
    private final String b;
    private final File c;
    private final long d;
    private final String e;
    private final File f;
    private final String g;
    private ZipFile h;
    private d i;

    public c(String str, long j, File file, InputStream inputStream, String str2) {
        this.b = str;
        this.d = j;
        this.c = file;
        if (this.c.exists()) {
            f.a(this.c);
        }
        this.c.mkdirs();
        this.e = "file:";
        this.f = new File(file, "bundle.zip");
        this.g = str2;
        d.a(inputStream, this.f);
        if (i.b(this.f)) {
            b(this.f);
            c(this.f);
            i();
        }
        a(this.f, c());
        h();
        this.i = new e().a(this.b, (int) this.d, this.f, this.c);
    }

    public c(String str, long j, File file, File file2, String str2) {
        this.b = str;
        this.d = j;
        this.c = file;
        if (this.c.exists()) {
            f.a(this.c);
        }
        this.c.mkdirs();
        this.g = str2;
        b bVar = a;
        bVar.b("Build.HARDWARE ＝ " + Build.HARDWARE.toLowerCase());
        if (!Build.HARDWARE.toLowerCase().contains("mt6592") || !file2.getName().endsWith(".so")) {
            this.e = "reference:" + file2.getAbsolutePath();
            this.f = file2;
        } else {
            this.e = "file:";
            this.f = new File(file, "bundle.zip");
            try {
                Runtime.getRuntime().exec(String.format("ln -s %s %s", file2.getAbsolutePath(), this.f.getAbsolutePath())).waitFor();
            } catch (InterruptedException e) {
                a.a("wait ln -s for coopad failed.", e);
            }
        }
        if (i.b(this.f)) {
            b(this.f);
            c(file2);
            i();
        }
        h();
        this.i = new e().a(this.b, (int) this.d, this.f, this.c);
    }

    public c(String str, long j, File file) {
        this.b = str;
        File file2 = new File(file, "meta");
        if (file2.exists()) {
            DataInputStream dataInputStream = new DataInputStream(new FileInputStream(file2));
            this.e = dataInputStream.readUTF();
            this.g = dataInputStream.readUTF();
            dataInputStream.close();
            this.d = j;
            this.c = file;
            if (!this.c.exists()) {
                this.c.mkdirs();
            }
            if (h.a(this.e, "reference:")) {
                this.f = new File(h.d(this.e, "reference:"));
            } else {
                this.f = new File(file, "bundle.zip");
            }
            if (this.f.exists()) {
                this.i = new e().a(this.b, (int) this.d, this.f, this.c);
                if (com.jingdong.aura.core.b.c.p()) {
                    this.i.d();
                } else {
                    this.i.e();
                }
                i();
                return;
            }
            throw new IOException("Restore from existed bundle failed! Could not find bundleFile " + this.f.getAbsolutePath());
        }
        throw new IOException("Could not find meta file in " + file.getAbsolutePath());
    }

    public boolean a() {
        int i = 0;
        if (!c(this.g)) {
            g();
            return false;
        }
        File file = new File(String.format("%s%s%s", this.c, File.separator, "lib"));
        while (!a(file)) {
            f.a(file);
            b(this.f);
            c(this.f);
            i();
            i++;
            if (i >= com.jingdong.aura.core.b.c.k()) {
                break;
            }
        }
        boolean a2 = a(file);
        if (!a2) {
            g();
        }
        return a2;
    }

    private boolean c(String str) {
        if (str == null || !"file:".equalsIgnoreCase(this.e)) {
            return true;
        }
        File file = this.f;
        if (file == null || !file.exists() || !str.equals(d.a(this.f.getAbsolutePath()))) {
            return false;
        }
        return true;
    }

    /* JADX WARN: Removed duplicated region for block: B:38:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0090 A[ADDED_TO_REGION, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private boolean a(java.io.File r10) {
        /*
            r9 = this;
            boolean r0 = r10.exists()
            r1 = 1
            if (r0 != 0) goto L_0x0008
            return r1
        L_0x0008:
            java.io.File[] r10 = r10.listFiles()
            r0 = 0
            r2 = 0
        L_0x000e:
            int r3 = r10.length
            if (r2 >= r3) goto L_0x00b2
            r3 = r10[r2]
            boolean r3 = r3.isFile()
            if (r3 == 0) goto L_0x00ae
            r3 = r10[r2]
            java.lang.String r3 = r3.getAbsolutePath()
            java.lang.String r4 = ".so"
            boolean r4 = r3.endsWith(r4)
            if (r4 == 0) goto L_0x00ae
            java.io.File r4 = new java.io.File
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            r5.append(r3)
            java.lang.String r6 = ".md5"
            r5.append(r6)
            java.lang.String r5 = r5.toString()
            r4.<init>(r5)
            boolean r5 = r4.exists()
            if (r5 != 0) goto L_0x0044
            return r0
        L_0x0044:
            r5 = 0
            java.io.DataInputStream r6 = new java.io.DataInputStream     // Catch: FileNotFoundException -> 0x007a, IOException -> 0x0069, all -> 0x0066
            java.io.FileInputStream r7 = new java.io.FileInputStream     // Catch: FileNotFoundException -> 0x007a, IOException -> 0x0069, all -> 0x0066
            r7.<init>(r4)     // Catch: FileNotFoundException -> 0x007a, IOException -> 0x0069, all -> 0x0066
            r6.<init>(r7)     // Catch: FileNotFoundException -> 0x007a, IOException -> 0x0069, all -> 0x0066
            java.lang.String r5 = r6.readUTF()     // Catch: FileNotFoundException -> 0x0064, IOException -> 0x0062, all -> 0x009c
            r6.close()     // Catch: IOException -> 0x0057
            goto L_0x008a
        L_0x0057:
            r4 = move-exception
            com.jingdong.aura.core.util.a.b r6 = com.jingdong.aura.core.b.c.c.a
            java.lang.String r7 = r4.getMessage()
            r6.a(r7, r4)
            goto L_0x008a
        L_0x0062:
            r4 = move-exception
            goto L_0x006b
        L_0x0064:
            r4 = move-exception
            goto L_0x007c
        L_0x0066:
            r10 = move-exception
            r6 = r5
            goto L_0x009d
        L_0x0069:
            r4 = move-exception
            r6 = r5
        L_0x006b:
            com.jingdong.aura.core.util.a.b r7 = com.jingdong.aura.core.b.c.c.a     // Catch: all -> 0x009c
            java.lang.String r8 = r4.getMessage()     // Catch: all -> 0x009c
            r7.a(r8, r4)     // Catch: all -> 0x009c
            if (r6 == 0) goto L_0x008a
            r6.close()     // Catch: IOException -> 0x0057
            goto L_0x008a
        L_0x007a:
            r4 = move-exception
            r6 = r5
        L_0x007c:
            com.jingdong.aura.core.util.a.b r7 = com.jingdong.aura.core.b.c.c.a     // Catch: all -> 0x009c
            java.lang.String r8 = r4.getMessage()     // Catch: all -> 0x009c
            r7.a(r8, r4)     // Catch: all -> 0x009c
            if (r6 == 0) goto L_0x008a
            r6.close()     // Catch: IOException -> 0x0057
        L_0x008a:
            boolean r4 = android.text.TextUtils.isEmpty(r5)
            if (r4 == 0) goto L_0x0091
            return r0
        L_0x0091:
            java.lang.String r3 = com.jingdong.aura.core.util.d.a(r3)
            boolean r3 = r5.equals(r3)
            if (r3 != 0) goto L_0x00ae
            return r0
        L_0x009c:
            r10 = move-exception
        L_0x009d:
            if (r6 == 0) goto L_0x00ad
            r6.close()     // Catch: IOException -> 0x00a3
            goto L_0x00ad
        L_0x00a3:
            r0 = move-exception
            com.jingdong.aura.core.util.a.b r1 = com.jingdong.aura.core.b.c.c.a
            java.lang.String r2 = r0.getMessage()
            r1.a(r2, r0)
        L_0x00ad:
            throw r10
        L_0x00ae:
            int r2 = r2 + 1
            goto L_0x000e
        L_0x00b2:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.b.c.c.a(java.io.File):boolean");
    }

    private void g() {
        b bVar = a;
        bVar.e("deleteRevisionDir " + this.c.getAbsolutePath());
        f.a(this.c);
    }

    public long b() {
        return this.d;
    }

    public File c() {
        return this.c;
    }

    public File d() {
        return this.f;
    }

    public File a(String str) {
        File file = new File(String.format("%s%s%s%s", this.c, File.separator, "lib", File.separator), str);
        if (!file.exists() || !file.isFile()) {
            return null;
        }
        return file;
    }

    public boolean e() {
        return this.i.a();
    }

    public synchronized void f() {
        this.i.b();
    }

    public Class<?> a(String str, ClassLoader classLoader) {
        try {
            if (!e()) {
                f();
            }
            return this.i.c().loadClass(str, classLoader);
        } catch (IllegalArgumentException e) {
            a.a(e.getMessage(), e);
            return null;
        } catch (Throwable th) {
            if (!(th instanceof ClassNotFoundException)) {
                b bVar = a;
                bVar.b("Exception while find class in archive revision: " + this.f.getAbsolutePath(), th);
            }
            return null;
        }
    }

    public List<URL> b(String str) {
        ArrayList arrayList = new ArrayList();
        j();
        ZipFile zipFile = this.h;
        if (!(zipFile == null || zipFile.getEntry(str) == null)) {
            try {
                arrayList.add(new URL("jar:" + this.f.toURL() + "!/" + str));
            } catch (Throwable th) {
                throw new RuntimeException(th);
            }
        }
        return arrayList;
    }

    private void h() {
        Throwable th;
        IOException e;
        File file = new File(this.c, "meta");
        DataOutputStream dataOutputStream = null;
        try {
            try {
                if (!file.getParentFile().exists()) {
                    file.getParentFile().mkdirs();
                }
                if (!file.exists()) {
                    try {
                        file.createNewFile();
                    } catch (IOException e2) {
                        a.a(e2.getMessage(), e2);
                    }
                }
                DataOutputStream dataOutputStream2 = new DataOutputStream(new FileOutputStream(file));
                try {
                    try {
                        dataOutputStream2.writeUTF(this.e);
                        dataOutputStream2.writeUTF(this.g);
                        dataOutputStream2.flush();
                        try {
                            dataOutputStream2.close();
                            try {
                                dataOutputStream2.close();
                            } catch (IOException e3) {
                                a.a(e3.getMessage(), e3);
                            }
                        } catch (IOException e4) {
                            a.a(e4.getMessage(), e4);
                            try {
                                dataOutputStream2.close();
                            } catch (IOException e5) {
                                a.a(e5.getMessage(), e5);
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        dataOutputStream = dataOutputStream2;
                        if (dataOutputStream != null) {
                            try {
                                dataOutputStream.close();
                            } catch (IOException e6) {
                                a.a(e6.getMessage(), e6);
                            }
                        }
                        throw th;
                    }
                } catch (IOException e7) {
                    e = e7;
                    dataOutputStream = dataOutputStream2;
                    b bVar = a;
                    bVar.a("Could not save meta data " + file.getAbsolutePath(), e);
                    throw new IOException("Could not save meta data " + file.getAbsolutePath(), e);
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (IOException e8) {
            e = e8;
        }
    }

    private void i() {
        List<String> a2;
        List<String> b = a.a().b(this.b);
        if (b != null && b.size() > 0 && (a2 = a.a().a(this.b)) != null && a2.size() > 0) {
            b bVar = a;
            bVar.b(this.b + ":installDependencySos:" + b);
            ArrayList<String> arrayList = new ArrayList();
            for (String str : b) {
                if (!TextUtils.isEmpty(str)) {
                    File c = c();
                    File file = new File(c, "lib" + File.separator + str);
                    File c2 = c();
                    File file2 = new File(c2, "lib" + File.separator + str + ".md5");
                    if (!file.exists() || !file2.exists()) {
                        arrayList.add(str);
                        file.delete();
                        file2.delete();
                    }
                }
            }
            if (arrayList.size() <= 0) {
                b bVar2 = a;
                bVar2.b(this.b + ":" + b + "already installed");
                return;
            }
            for (String str2 : arrayList) {
                b bVar3 = a;
                bVar3.b(this.b + ":install so: " + str2);
                if (!TextUtils.isEmpty(str2)) {
                    File c3 = c();
                    File file3 = new File(c3, "lib" + File.separator + str2);
                    File c4 = c();
                    File file4 = new File(c4, "lib" + File.separator + str2 + ".md5");
                    for (String str3 : a2) {
                        b bVar4 = a;
                        bVar4.b(this.b + ":install so form " + str3);
                        com.jingdong.aura.core.b.h a3 = com.jingdong.aura.core.b.b.b.a(str3);
                        if (a3 != null) {
                            File c5 = a3.f().b().c();
                            File file5 = new File(c5, "lib" + File.separator + str2);
                            File c6 = a3.f().b().c();
                            File file6 = new File(c6, "lib" + File.separator + str2 + ".md5");
                            if (file5.exists() && file6.exists()) {
                                try {
                                    Runtime.getRuntime().exec(String.format("ln -s %s %s", file5.getAbsolutePath(), file3.getAbsolutePath())).waitFor();
                                    Runtime.getRuntime().exec(String.format("ln -s %s %s", file6.getAbsolutePath(), file4.getAbsolutePath())).waitFor();
                                } catch (Exception e) {
                                    a.a("wait ln -s for coopad failed.", e);
                                    e.printStackTrace();
                                }
                                if (!file3.exists() || !file4.exists()) {
                                    try {
                                        file3.delete();
                                        file4.delete();
                                        d.a(new FileInputStream(file5), file3);
                                        d.a(new FileInputStream(file6), file4);
                                        b bVar5 = a;
                                        bVar5.b(this.b + ":install so form " + str3 + " success");
                                    } catch (Exception e2) {
                                        e2.printStackTrace();
                                        String str4 = this.b;
                                        e.a(str4, "installDependencySo failed1: " + str2, "BundleArchiveRevision.installDependencySo", e2);
                                    }
                                }
                                if (file3.exists() && file4.exists()) {
                                    break;
                                }
                            }
                        } else {
                            b bVar6 = a;
                            bVar6.d(str3 + ":bundleImpl is null");
                        }
                    }
                }
            }
        }
    }

    /*  JADX ERROR: NullPointerException in pass: BlockProcessor
        java.lang.NullPointerException
        */
    private void b(java.io.File r18) {
        /*
        // Method dump skipped, instructions count: 367
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.b.c.c.b(java.io.File):void");
    }

    private void c(File file) {
        Throwable th;
        ZipFile zipFile;
        ZipFile zipFile2;
        Exception e;
        try {
            zipFile2 = null;
            try {
                zipFile = new ZipFile(file);
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
            zipFile = zipFile2;
        }
        try {
            String a2 = com.jingdong.aura.core.util.e.a(this.b, file);
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            while (entries.hasMoreElements()) {
                ZipEntry zipEntry = (ZipEntry) entries.nextElement();
                String name = zipEntry.getName();
                if (name.indexOf(String.format("%s%s", "lib/", a2)) != -1) {
                    String format = String.format("%s%s%s%s%s", this.c, File.separator, "lib", File.separator, name.substring(name.lastIndexOf(File.separator) + 1, name.length()));
                    if (zipEntry.isDirectory()) {
                        File file2 = new File(format);
                        if (!file2.exists()) {
                            file2.mkdirs();
                        }
                    } else {
                        File file3 = new File(format.substring(0, format.lastIndexOf(File.separator)));
                        if (!file3.exists()) {
                            file3.mkdirs();
                        }
                        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(format));
                        BufferedInputStream bufferedInputStream = new BufferedInputStream(zipFile.getInputStream(zipEntry));
                        byte[] bArr = new byte[4096];
                        while (true) {
                            int read = bufferedInputStream.read(bArr);
                            if (read == -1) {
                                break;
                            }
                            bufferedOutputStream.write(bArr, 0, read);
                        }
                        bufferedOutputStream.close();
                    }
                }
            }
            d.a(zipFile);
        } catch (Exception e3) {
            e = e3;
            zipFile2 = zipFile;
            a.a(e.getMessage(), e);
            d.a(zipFile2);
        } catch (Throwable th3) {
            th = th3;
            d.a(zipFile);
            throw th;
        }
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [int] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void a(java.io.File r6, java.io.File r7) {
        /*
            r5 = this;
            com.jingdong.aura.core.runing.i r6 = com.jingdong.aura.core.runing.i.a(r6)
            if (r6 != 0) goto L_0x0007
            return
        L_0x0007:
            java.util.Set<java.lang.String> r0 = r6.f
            int r0 = r0.size()
            if (r0 > 0) goto L_0x0010
            return
        L_0x0010:
            r0 = 0
            java.io.File r1 = new java.io.File     // Catch: Exception -> 0x0068, all -> 0x0065
            java.lang.String r2 = "manual.ini"
            r1.<init>(r7, r2)     // Catch: Exception -> 0x0068, all -> 0x0065
            boolean r7 = r1.exists()     // Catch: Exception -> 0x0068, all -> 0x0065
            if (r7 != 0) goto L_0x0021
            r1.createNewFile()     // Catch: Exception -> 0x0068, all -> 0x0065
        L_0x0021:
            java.io.FileOutputStream r7 = new java.io.FileOutputStream     // Catch: Exception -> 0x0068, all -> 0x0065
            r7.<init>(r1)     // Catch: Exception -> 0x0068, all -> 0x0065
            java.util.Properties r1 = new java.util.Properties     // Catch: Exception -> 0x0062, all -> 0x0060
            r1.<init>()     // Catch: Exception -> 0x0062, all -> 0x0060
            java.lang.String r2 = ""
            java.util.Set<java.lang.String> r6 = r6.f     // Catch: Exception -> 0x0062, all -> 0x0060
            java.util.Iterator r6 = r6.iterator()     // Catch: Exception -> 0x0062, all -> 0x0060
        L_0x0033:
            boolean r3 = r6.hasNext()     // Catch: Exception -> 0x0062, all -> 0x0060
            if (r3 == 0) goto L_0x0054
            java.lang.Object r3 = r6.next()     // Catch: Exception -> 0x0062, all -> 0x0060
            java.lang.String r3 = (java.lang.String) r3     // Catch: Exception -> 0x0062, all -> 0x0060
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch: Exception -> 0x0062, all -> 0x0060
            r4.<init>()     // Catch: Exception -> 0x0062, all -> 0x0060
            r4.append(r3)     // Catch: Exception -> 0x0062, all -> 0x0060
            java.lang.String r3 = ","
            r4.append(r3)     // Catch: Exception -> 0x0062, all -> 0x0060
            r4.append(r2)     // Catch: Exception -> 0x0062, all -> 0x0060
            java.lang.String r2 = r4.toString()     // Catch: Exception -> 0x0062, all -> 0x0060
            goto L_0x0033
        L_0x0054:
            java.lang.String r6 = "manualComponents"
            r1.setProperty(r6, r2)     // Catch: Exception -> 0x0062, all -> 0x0060
            r1.store(r7, r0)     // Catch: Exception -> 0x0062, all -> 0x0060
            r7.close()     // Catch: Exception -> 0x0072
            goto L_0x0076
        L_0x0060:
            r6 = move-exception
            goto L_0x0077
        L_0x0062:
            r6 = move-exception
            r0 = r7
            goto L_0x0069
        L_0x0065:
            r6 = move-exception
            r7 = r0
            goto L_0x0077
        L_0x0068:
            r6 = move-exception
        L_0x0069:
            r6.printStackTrace()     // Catch: all -> 0x0065
            if (r0 == 0) goto L_0x0076
            r0.close()     // Catch: Exception -> 0x0072
            goto L_0x0076
        L_0x0072:
            r6 = move-exception
            r6.printStackTrace()
        L_0x0076:
            return
        L_0x0077:
            if (r7 == 0) goto L_0x0081
            r7.close()     // Catch: Exception -> 0x007d
            goto L_0x0081
        L_0x007d:
            r7 = move-exception
            r7.printStackTrace()
        L_0x0081:
            throw r6
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.b.c.c.a(java.io.File, java.io.File):void");
    }

    private void j() {
        if (this.h == null) {
            this.h = new ZipFile(this.f, 1);
        }
    }
}
