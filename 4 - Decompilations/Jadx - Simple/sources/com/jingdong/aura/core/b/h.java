package com.jingdong.aura.core.b;

import com.jingdong.aura.core.runing.k;
import com.jingdong.aura.core.util.a.b;
import com.jingdong.aura.core.util.a.c;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Hashtable;
import java.util.List;
import org.osgi.framework.BundleException;
import org.osgi.framework.a;
import org.osgi.framework.e;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class h implements a {
    private static final b a = c.a(h.class);
    private com.jingdong.aura.core.b.c.a b;
    private final File c;
    private ClassLoader d;
    private final g e;
    private int f;
    private Hashtable<String, String> g;
    private String h;
    private boolean i;
    private List<org.osgi.framework.b> j;
    private List<org.osgi.framework.c> k;
    private List<Object> l;
    private List<e> m;
    private i[] n;
    private int o;

    public h(File file, String str, long j, g gVar, InputStream inputStream, File file2, boolean z, String str2) {
        this.g = new Hashtable<>();
        this.o = 0;
        this.i = false;
        this.m = null;
        this.k = null;
        this.j = null;
        this.l = null;
        this.n = null;
        long currentTimeMillis = System.currentTimeMillis();
        this.h = str;
        this.e = gVar;
        this.e.a(this);
        this.f = com.jingdong.aura.core.b.b.b.k();
        this.c = file;
        try {
            if (inputStream != null) {
                this.b = new com.jingdong.aura.core.b.c.b(str, j, file, inputStream, str2);
            } else if (file2 != null) {
                this.b = new com.jingdong.aura.core.b.c.b(str, j, file, file2, str2);
            }
            this.o = 2;
            p();
            if (z) {
                a(false);
                com.jingdong.aura.core.b.b.b.a(str, (a) this);
                com.jingdong.aura.core.b.b.b.a(1, (a) this);
            }
            if (a.c()) {
                b bVar = a;
                bVar.c("Framework: Bundle " + toString() + " created. " + (System.currentTimeMillis() - currentTimeMillis) + " ms");
            }
        } catch (IOException e) {
            a.a(e.getMessage(), e);
            throw new BundleException("new BundleArchive failed", e);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:18:0x007d A[Catch: Exception -> 0x00aa, TRY_LEAVE, TryCatch #3 {Exception -> 0x00aa, blocks: (B:16:0x0060, B:18:0x007d), top: B:32:0x0060 }] */
    /* JADX WARN: Removed duplicated region for block: B:38:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r11v1 */
    /* JADX WARN: Type inference failed for: r11v4 */
    /* JADX WARN: Type inference failed for: r3v12, types: [boolean] */
    /* JADX WARN: Type inference failed for: r3v2 */
    /* JADX WARN: Type inference failed for: r3v6, types: [java.io.DataInputStream] */
    /* JADX WARN: Type inference failed for: r3v8 */
    /* JADX WARN: Type inference failed for: r3v9 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public h(java.io.File r10, com.jingdong.aura.core.b.g r11, long r12) {
        /*
            r9 = this;
            r9.<init>()
            java.util.Hashtable r0 = new java.util.Hashtable
            r0.<init>()
            r9.g = r0
            r0 = 0
            r9.o = r0
            long r1 = java.lang.System.currentTimeMillis()
            r3 = 0
            java.io.DataInputStream r4 = new java.io.DataInputStream     // Catch: Exception -> 0x0045, all -> 0x0042
            java.io.FileInputStream r5 = new java.io.FileInputStream     // Catch: Exception -> 0x0045, all -> 0x0042
            java.io.File r6 = new java.io.File     // Catch: Exception -> 0x0045, all -> 0x0042
            java.lang.String r7 = "meta"
            r6.<init>(r10, r7)     // Catch: Exception -> 0x0045, all -> 0x0042
            r5.<init>(r6)     // Catch: Exception -> 0x0045, all -> 0x0042
            r4.<init>(r5)     // Catch: Exception -> 0x0045, all -> 0x0042
            java.lang.String r3 = r4.readUTF()     // Catch: Exception -> 0x003d, all -> 0x0039
            r9.h = r3     // Catch: Exception -> 0x003d, all -> 0x0039
            int r3 = r4.readInt()     // Catch: Exception -> 0x003d, all -> 0x0039
            r9.f = r3     // Catch: Exception -> 0x003d, all -> 0x0039
            boolean r3 = r4.readBoolean()     // Catch: Exception -> 0x003d, all -> 0x0039
            r9.i = r3     // Catch: Exception -> 0x003d, all -> 0x0039
            r4.close()     // Catch: IOException -> 0x0054
            goto L_0x0054
        L_0x0039:
            r10 = move-exception
            r3 = r4
            goto L_0x00c4
        L_0x003d:
            r3 = move-exception
            r8 = r4
            r4 = r3
            r3 = r8
            goto L_0x0046
        L_0x0042:
            r10 = move-exception
            goto L_0x00c4
        L_0x0045:
            r4 = move-exception
        L_0x0046:
            com.jingdong.aura.core.util.a.b r5 = com.jingdong.aura.core.b.h.a     // Catch: all -> 0x0042
            java.lang.String r6 = r4.getMessage()     // Catch: all -> 0x0042
            r5.a(r6, r4)     // Catch: all -> 0x0042
            if (r3 == 0) goto L_0x0054
            r3.close()     // Catch: IOException -> 0x0054
        L_0x0054:
            r9.e = r11
            com.jingdong.aura.core.b.g r11 = r9.e
            r11.a(r9)
            r9.c = r10
            r11 = 2
            r9.o = r11
            com.jingdong.aura.core.b.c.b r11 = new com.jingdong.aura.core.b.c.b     // Catch: Exception -> 0x00aa
            java.lang.String r3 = r9.h     // Catch: Exception -> 0x00aa
            r11.<init>(r3, r10, r12)     // Catch: Exception -> 0x00aa
            r9.b = r11     // Catch: Exception -> 0x00aa
            r9.a(r0)     // Catch: Exception -> 0x00aa
            java.lang.String r10 = r9.h     // Catch: Exception -> 0x00aa
            com.jingdong.aura.core.b.b.b.a(r10, r9)     // Catch: Exception -> 0x00aa
            r10 = 1
            com.jingdong.aura.core.b.b.b.a(r10, r9)     // Catch: Exception -> 0x00aa
            com.jingdong.aura.core.util.a.b r10 = com.jingdong.aura.core.b.h.a     // Catch: Exception -> 0x00aa
            boolean r10 = r10.c()     // Catch: Exception -> 0x00aa
            if (r10 == 0) goto L_0x00a9
            com.jingdong.aura.core.util.a.b r10 = com.jingdong.aura.core.b.h.a     // Catch: Exception -> 0x00aa
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch: Exception -> 0x00aa
            r11.<init>()     // Catch: Exception -> 0x00aa
            java.lang.String r12 = "Framework: Bundle "
            r11.append(r12)     // Catch: Exception -> 0x00aa
            java.lang.String r12 = r9.toString()     // Catch: Exception -> 0x00aa
            r11.append(r12)     // Catch: Exception -> 0x00aa
            java.lang.String r12 = " loaded. "
            r11.append(r12)     // Catch: Exception -> 0x00aa
            long r12 = java.lang.System.currentTimeMillis()     // Catch: Exception -> 0x00aa
            long r12 = r12 - r1
            r11.append(r12)     // Catch: Exception -> 0x00aa
            java.lang.String r12 = " ms"
            r11.append(r12)     // Catch: Exception -> 0x00aa
            java.lang.String r11 = r11.toString()     // Catch: Exception -> 0x00aa
            r10.c(r11)     // Catch: Exception -> 0x00aa
        L_0x00a9:
            return
        L_0x00aa:
            r10 = move-exception
            org.osgi.framework.BundleException r11 = new org.osgi.framework.BundleException
            java.lang.StringBuilder r12 = new java.lang.StringBuilder
            r12.<init>()
            java.lang.String r13 = "Could not load bundle "
            r12.append(r13)
            java.lang.String r13 = r9.h
            r12.append(r13)
            java.lang.String r12 = r12.toString()
            r11.<init>(r12, r10)
            throw r11
        L_0x00c4:
            if (r3 == 0) goto L_0x00c9
            r3.close()     // Catch: IOException -> 0x00c9
        L_0x00c9:
            throw r10
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.aura.core.b.h.<init>(java.io.File, com.jingdong.aura.core.b.g, long):void");
    }

    public static void a(File file, String str, int i, InputStream inputStream, String str2) {
        try {
            long b = com.jingdong.aura.core.b.c.h.b(file);
            b bVar = a;
            bVar.b("old max version=" + b + ", want new versioncode = " + i);
            long j = (long) i;
            if (b < j) {
                new com.jingdong.aura.core.b.c.b(str, j, file, inputStream, str2);
            }
        } catch (Exception e) {
            b bVar2 = a;
            bVar2.b("location:" + str + ", " + e.getMessage());
            throw new BundleException("Could not update bundle " + str, e);
        }
    }

    public int a() {
        return this.o;
    }

    public com.jingdong.aura.core.b.c.a b() {
        return this.b;
    }

    public int c() {
        return this.f;
    }

    public boolean d() {
        return this.i;
    }

    public ClassLoader e() {
        return this.d;
    }

    public com.jingdong.aura.core.b.c.a f() {
        return this.b;
    }

    public synchronized void g() {
        this.b.d();
    }

    public String h() {
        return f().b().c() + "/lib:" + k.a.getApplicationInfo().nativeLibraryDir + ":" + System.getProperty("java.library.path");
    }

    public String i() {
        return f().b().c() + "/lib";
    }

    private synchronized void a(boolean z) {
        if (this.o != 4) {
            if (this.d == null) {
                this.d = com.jingdong.aura.core.b.a.b.a(this);
            }
            if (z) {
                this.o = 4;
            }
            com.jingdong.aura.core.b.b.b.a(0, (a) this);
        }
    }

    public synchronized void j() {
        if (this.o == 1) {
            throw new IllegalStateException("Cannot start uninstalled bundle " + toString());
        } else if (this.o != 32) {
            if (this.o == 2) {
                a(true);
            }
            this.o = 8;
            this.e.a(true);
            this.o = 32;
            com.jingdong.aura.core.b.b.b.a(2, (a) this);
            if (a.c()) {
                b bVar = a;
                bVar.c("Framework: Bundle " + toString() + " started.");
            }
        }
    }

    public synchronized void k() {
        if (this.o == 1) {
            throw new IllegalStateException("Cannot stop uninstalled bundle " + toString());
        } else if (this.o == 32) {
            this.o = 16;
            if (a.c()) {
                b bVar = a;
                bVar.c("Framework: Bundle " + toString() + " stopped.");
            }
            this.o = 4;
            com.jingdong.aura.core.b.b.b.a(4, (a) this);
            this.e.a(false);
        }
    }

    public void l() {
        this.i = true;
        p();
        if (this.f <= com.jingdong.aura.core.b.b.b.l()) {
            j();
        }
    }

    public void a(InputStream inputStream, int i, String str) {
        if (this.o != 1) {
            try {
                this.b.a(this.h, i, this.c, inputStream, str);
            } catch (Throwable th) {
                throw new BundleException("Could not update bundle " + toString(), th);
            }
        } else {
            throw new IllegalStateException("Cannot update uninstalled bundle " + toString());
        }
    }

    public void m() {
        int i = this.o;
        if (i != 1) {
            if (i == 32) {
                try {
                    k();
                } catch (Throwable th) {
                    com.jingdong.aura.core.b.b.b.a(2, (a) this, th);
                }
            }
            this.o = 1;
            new File(this.c, "meta").delete();
            this.d = null;
            com.jingdong.aura.core.b.b.b.b(toString());
            com.jingdong.aura.core.b.b.b.a(16, (a) this);
            this.e.a(false);
            this.e.a((h) null);
            return;
        }
        throw new IllegalStateException("Bundle " + toString() + " is already uninstalled.");
    }

    public String n() {
        return this.h;
    }

    public int o() {
        com.jingdong.aura.core.b.c.a aVar = this.b;
        if (aVar == null) {
            return 0;
        }
        return aVar.e();
    }

    public String toString() {
        return this.h;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v3, types: [java.lang.Throwable, java.io.IOException] */
    /* JADX WARN: Type inference failed for: r0v9 */
    public void p() {
        Throwable th;
        DataOutputStream e;
        File file;
        IOException e2;
        DataOutputStream dataOutputStream;
        try {
            try {
                file = new File(this.c, "meta");
            } catch (Throwable th2) {
                th = th2;
            }
            try {
                if (!file.getParentFile().exists()) {
                    file.getParentFile().mkdirs();
                }
                FileOutputStream fileOutputStream = new FileOutputStream(file);
                dataOutputStream = new DataOutputStream(fileOutputStream);
                try {
                    dataOutputStream.writeUTF(this.h);
                    dataOutputStream.writeInt(this.f);
                    dataOutputStream.writeBoolean(this.i);
                    dataOutputStream.flush();
                    fileOutputStream.getFD().sync();
                    dataOutputStream.close();
                } catch (IOException e3) {
                    e2 = e3;
                    a.a(e2.getMessage(), e2);
                    if (dataOutputStream != null) {
                        dataOutputStream.close();
                    }
                }
            } catch (IOException e4) {
                e2 = e4;
                dataOutputStream = null;
            } catch (Throwable th3) {
                th = th3;
                e = 0;
                if (e != 0) {
                    try {
                        e.close();
                    } catch (IOException e5) {
                        a.a(e5.getMessage(), e5);
                    }
                }
                throw th;
            }
        } catch (IOException e6) {
            while (true) {
                e = e6;
                a.a(e.getMessage(), e);
                return;
            }
        }
    }
}
