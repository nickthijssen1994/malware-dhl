package com.jingdong.sdk.uuid;

import android.content.Context;
import java.util.Arrays;

/* loaded from: classes.dex */
public final class Request {
    private static long sLastGenerateTime;
    private boolean deviceCodeReadable;
    private boolean fileCacheEnabled;
    private final a[] idSlot;
    private final Context mContext;
    private boolean wifiMacReadable;

    /* loaded from: classes.dex */
    public static class Builder {
        Context context;
        boolean deviceCodeReadable;
        boolean fileCacheEnabled;
        boolean isLoggable;
        int permissionMode;
        boolean wifiMacReadable;
        boolean withoutPermission;
        boolean macMethodCalled = false;
        boolean deviceCodeMethodCalled = false;
        boolean fileCacheMethodCalled = false;
        boolean logMethodCalled = false;

        public Request build() {
            return new Request(this);
        }

        public Builder setContext(Context context) {
            if (context != null) {
                this.context = context;
                return this;
            }
            throw new NullPointerException("context == null");
        }

        public Builder setFileCacheEnabled(boolean z) {
            this.fileCacheMethodCalled = true;
            this.fileCacheEnabled = z;
            return this;
        }

        public Builder setImeiReadable(boolean z) {
            this.deviceCodeMethodCalled = true;
            this.deviceCodeReadable = z;
            return this;
        }

        public Builder setLogEnabled(boolean z) {
            this.logMethodCalled = true;
            this.isLoggable = z;
            return this;
        }

        @Deprecated
        public Builder setPermissionMode(int i) {
            this.permissionMode = i;
            return this;
        }

        public Builder setWifiMacReadable(boolean z) {
            this.macMethodCalled = true;
            this.wifiMacReadable = z;
            return this;
        }

        @Deprecated
        public Builder setWithoutPermission(boolean z) {
            this.withoutPermission = z;
            return this;
        }
    }

    /* loaded from: classes.dex */
    public static class a implements Comparable<a> {
        String a;
        String b;

        public a() {
        }

        public a(String str, String str2) {
            this.a = str;
            this.b = str2;
        }

        int a() {
            char c;
            String str = this.a;
            int hashCode = str.hashCode();
            if (hashCode == 107855) {
                if (str.equals("mac")) {
                    c = 1;
                }
                c = 65535;
            } else if (hashCode == 3236040) {
                if (str.equals("imei")) {
                    c = 0;
                }
                c = 65535;
            } else if (hashCode != 115652350) {
                if (hashCode == 1131700202 && str.equals("androidId")) {
                    c = 2;
                }
                c = 65535;
            } else {
                if (str.equals("randomUUID")) {
                    c = 3;
                }
                c = 65535;
            }
            switch (c) {
                case 0:
                    return 4000;
                case 1:
                    return 3000;
                case 2:
                    return 2000;
                case 3:
                    return 1000;
                default:
                    return -1;
            }
        }

        /* renamed from: a */
        public int compareTo(a aVar) {
            return a() - aVar.a();
        }

        @Override // java.lang.Object
        public String toString() {
            return "Entity{key='" + this.a + "', value='" + this.b + "'}";
        }
    }

    private Request(Builder builder) {
        this.idSlot = new a[]{new a(), new a()};
        g.a(builder.context);
        this.mContext = builder.context;
        this.wifiMacReadable = builder.macMethodCalled ? builder.wifiMacReadable : g.b("wifi_mac_readable", false);
        this.deviceCodeReadable = builder.deviceCodeMethodCalled ? builder.deviceCodeReadable : g.b("device_code_readable", false);
        this.fileCacheEnabled = builder.fileCacheMethodCalled ? builder.fileCacheEnabled : g.b("file_cache_enabled", false);
        d.a(builder.logMethodCalled ? builder.isLoggable : g.b("loggable", false));
    }

    /* JADX WARN: Code restructure failed: missing block: B:20:0x0041, code lost:
        r0 = r4.idSlot;
     */
    /* JADX WARN: Code restructure failed: missing block: B:21:0x0044, code lost:
        if (r1 >= r0.length) goto L_0x0071;
     */
    /* JADX WARN: Code restructure failed: missing block: B:23:0x004e, code lost:
        if (android.text.TextUtils.isEmpty(r0[r1].b) == false) goto L_0x005b;
     */
    /* JADX WARN: Code restructure failed: missing block: B:24:0x0050, code lost:
        r0 = r4.idSlot;
        r0[r1].b = r6;
        r0[r1].a = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:25:0x005b, code lost:
        r0 = new com.jingdong.sdk.uuid.Request.a(r5, r6);
     */
    /* JADX WARN: Code restructure failed: missing block: B:26:0x0068, code lost:
        if (r4.idSlot[r1].compareTo(r0) >= 0) goto L_0x006e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:27:0x006a, code lost:
        r4.idSlot[r1] = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x006e, code lost:
        r1 = r1 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x0071, code lost:
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:36:?, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public void fillingIdSlot(java.lang.String r5, java.lang.String r6) {
        /*
            r4 = this;
            boolean r0 = android.text.TextUtils.isEmpty(r6)
            if (r0 == 0) goto L_0x0007
            return
        L_0x0007:
            java.lang.String r0 = "imei"
            boolean r0 = android.text.TextUtils.equals(r5, r0)
            r1 = 0
            if (r0 == 0) goto L_0x001b
            com.jingdong.sdk.uuid.Request$a[] r0 = r4.idSlot
            r2 = r0[r1]
            r2.b = r6
            r6 = r0[r1]
        L_0x0018:
            r6.a = r5
            return
        L_0x001b:
            java.lang.String r0 = "mac"
            boolean r0 = android.text.TextUtils.equals(r5, r0)
            if (r0 == 0) goto L_0x002d
            com.jingdong.sdk.uuid.Request$a[] r0 = r4.idSlot
            r1 = 1
            r2 = r0[r1]
            r2.b = r6
            r6 = r0[r1]
            goto L_0x0018
        L_0x002d:
            r0 = 0
        L_0x002e:
            com.jingdong.sdk.uuid.Request$a[] r2 = r4.idSlot
            int r3 = r2.length
            if (r0 >= r3) goto L_0x0041
            r2 = r2[r0]
            java.lang.String r2 = r2.a
            boolean r2 = android.text.TextUtils.equals(r2, r5)
            if (r2 == 0) goto L_0x003e
            return
        L_0x003e:
            int r0 = r0 + 1
            goto L_0x002e
        L_0x0041:
            com.jingdong.sdk.uuid.Request$a[] r0 = r4.idSlot
            int r2 = r0.length
            if (r1 >= r2) goto L_0x0071
            r0 = r0[r1]
            java.lang.String r0 = r0.b
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            if (r0 == 0) goto L_0x005b
            com.jingdong.sdk.uuid.Request$a[] r0 = r4.idSlot
            r2 = r0[r1]
            r2.b = r6
            r6 = r0[r1]
            r6.a = r5
            goto L_0x0071
        L_0x005b:
            com.jingdong.sdk.uuid.Request$a r0 = new com.jingdong.sdk.uuid.Request$a
            r0.<init>(r5, r6)
            com.jingdong.sdk.uuid.Request$a[] r2 = r4.idSlot
            r2 = r2[r1]
            int r2 = r2.compareTo(r0)
            if (r2 >= 0) goto L_0x006e
            com.jingdong.sdk.uuid.Request$a[] r2 = r4.idSlot
            r2[r1] = r0
        L_0x006e:
            int r1 = r1 + 1
            goto L_0x0041
        L_0x0071:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.sdk.uuid.Request.fillingIdSlot(java.lang.String, java.lang.String):void");
    }

    public Context getContext() {
        return this.mContext;
    }

    public a[] getIdSlot() {
        return this.idSlot;
    }

    public void initSlot() {
        String[] strArr = e.a;
        for (String str : strArr) {
            fillingIdSlot(str, e.a().a(str));
        }
    }

    public boolean isDeviceCodeReadable() {
        return this.deviceCodeReadable;
    }

    public boolean isFileCacheEnabled() {
        return this.fileCacheEnabled;
    }

    public boolean isWifiMacReadable() {
        return this.wifiMacReadable;
    }

    public boolean shouldReGenerate() {
        return System.currentTimeMillis() - sLastGenerateTime > 60000;
    }

    public String toString() {
        return "Request: loggable=" + d.a + ", wifiMacReadable=" + this.wifiMacReadable + ", deviceCodeReadable=" + this.deviceCodeReadable + ", fileCacheEnabled=" + this.fileCacheEnabled + ", idSlot=" + Arrays.toString(this.idSlot);
    }
}
