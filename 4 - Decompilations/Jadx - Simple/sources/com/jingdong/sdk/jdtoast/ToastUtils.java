package com.jingdong.sdk.jdtoast;

import android.app.Application;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import com.jingdong.jdsdk.widget.JDToast;
import com.jingdong.jdsdk.widget.newtoast.NewToastUtils;
import com.jingdong.jdsdk.widget.newtoast.ToastCenterStyle;
import com.jingdong.jdsdk.widget.newtoast.ToastDefaultStyle;

/* loaded from: classes.dex */
public class ToastUtils {
    private static JDToast centerToast;
    private static JDToast centerToastNoIcon;
    private static Handler mHandler;
    private static JDToast sToast;

    public static int dip2px(float f) {
        return (int) ((f * 160.0f) + 0.5f);
    }

    private static Handler getHandler() {
        if (mHandler == null) {
            mHandler = new Handler(Looper.getMainLooper());
        }
        return mHandler;
    }

    public static void init(Application application) {
        NewToastUtils.init(application);
    }

    private static boolean isMainThread() {
        return Looper.getMainLooper() == Looper.myLooper();
    }

    public static void longToast(Context context, int i) {
        showToastPrivate(context, i, 1);
    }

    public static void longToast(Context context, String str) {
        showToastPrivate(context, str, 1);
    }

    private static void newCenter(Context context, String str, byte b) {
        int i;
        NewToastUtils.initStyle(new ToastCenterStyle());
        View inflate = LayoutInflater.from(context.getApplicationContext()).inflate(R$layout.jd_common_toast_style_center, (ViewGroup) null);
        NewToastUtils.setView(inflate);
        ImageView imageView = (ImageView) inflate.findViewById(R$id.jd_toast_image);
        switch (b) {
            case 1:
                i = R$drawable.jd_toast_exclamation;
                break;
            case 2:
                i = R$drawable.jd_toast_tick;
                break;
            default:
                NewToastUtils.show((CharSequence) str);
        }
        imageView.setBackgroundResource(i);
        NewToastUtils.show((CharSequence) str);
    }

    private static void newCenter(Context context, String str, int i) {
        NewToastUtils.initStyle(new ToastCenterStyle());
        View inflate = LayoutInflater.from(context.getApplicationContext()).inflate(R$layout.jd_common_toast_style_center, (ViewGroup) null);
        NewToastUtils.setView(inflate);
        ((ImageView) inflate.findViewById(R$id.jd_toast_image)).setBackgroundResource(i);
        NewToastUtils.show((CharSequence) str);
    }

    public static void shortToast(Context context, int i) {
        showToastPrivate(context, i, 0);
    }

    public static void shortToast(Context context, String str) {
        showToastPrivate(context, str, 0);
    }

    public static void showCustomCenter(final Context context, final View view) {
        if (view != null) {
            AnonymousClass6 r0 = new Runnable() { // from class: com.jingdong.sdk.jdtoast.ToastUtils.6
                @Override // java.lang.Runnable
                public void run() {
                    if (context != null) {
                        if (ToastUtils.centerToastNoIcon != null) {
                            ToastUtils.centerToastNoIcon.cancel();
                        }
                        JDToast unused = ToastUtils.centerToastNoIcon = new JDToast(context.getApplicationContext(), (byte) 5);
                        ToastUtils.centerToastNoIcon.setCustomViewByCenter(view);
                        ToastUtils.centerToastNoIcon.show();
                    }
                }
            };
            if (isMainThread()) {
                r0.run();
            } else {
                getHandler().post(r0);
            }
        }
    }

    public static void showToast(Context context, String str) {
        longToast(context, str);
    }

    public static void showToastInCenter(final Context context, final byte b, final String str, final int i) {
        if (!NewToastUtils.notificationEnabled) {
            try {
                newCenter(context, str, b);
                return;
            } catch (Throwable th) {
                th.printStackTrace();
            }
        }
        AnonymousClass3 r0 = new Runnable() { // from class: com.jingdong.sdk.jdtoast.ToastUtils.3
            @Override // java.lang.Runnable
            public void run() {
                if (context != null && !TextUtils.isEmpty(str)) {
                    if (ToastUtils.centerToast != null) {
                        ToastUtils.centerToast.cancel();
                    }
                    JDToast unused = ToastUtils.centerToast = new JDToast(context.getApplicationContext(), (byte) 1);
                    ToastUtils.centerToast.setImage(b);
                    ToastUtils.centerToast.setText(str);
                    ToastUtils.centerToast.setDuration(i);
                    ToastUtils.centerToast.show();
                }
            }
        };
        if (isMainThread()) {
            r0.run();
        } else {
            getHandler().post(r0);
        }
    }

    public static void showToastInCenter(final Context context, final int i, final String str, final int i2) {
        if (!NewToastUtils.notificationEnabled) {
            try {
                newCenter(context, str, i);
                return;
            } catch (Throwable th) {
                th.printStackTrace();
            }
        }
        AnonymousClass4 r0 = new Runnable() { // from class: com.jingdong.sdk.jdtoast.ToastUtils.4
            @Override // java.lang.Runnable
            public void run() {
                if (context != null && !TextUtils.isEmpty(str)) {
                    if (ToastUtils.centerToast != null) {
                        ToastUtils.centerToast.cancel();
                    }
                    JDToast unused = ToastUtils.centerToast = new JDToast(context.getApplicationContext(), (byte) 1);
                    ToastUtils.centerToast.setImageResource(i);
                    ToastUtils.centerToast.setText(str);
                    ToastUtils.centerToast.setDuration(i2);
                    ToastUtils.centerToast.show();
                }
            }
        };
        if (isMainThread()) {
            r0.run();
        } else {
            getHandler().post(r0);
        }
    }

    public static void showToastInCenter(Context context, String str) {
        showToastInCenter(context, str, 0);
    }

    public static void showToastInCenter(final Context context, final String str, final int i) {
        if (!NewToastUtils.notificationEnabled) {
            try {
                NewToastUtils.initStyle(new ToastCenterStyle());
                NewToastUtils.setView(R$layout.jd_common_toast_style_bottom);
                NewToastUtils.show((CharSequence) str);
                return;
            } catch (Throwable th) {
                th.printStackTrace();
            }
        }
        AnonymousClass5 r0 = new Runnable() { // from class: com.jingdong.sdk.jdtoast.ToastUtils.5
            @Override // java.lang.Runnable
            public void run() {
                if (context != null && !TextUtils.isEmpty(str)) {
                    if (ToastUtils.centerToastNoIcon != null) {
                        ToastUtils.centerToastNoIcon.cancel();
                    }
                    JDToast unused = ToastUtils.centerToastNoIcon = new JDToast(context.getApplicationContext(), (byte) 4);
                    ToastUtils.centerToastNoIcon.setText(str);
                    ToastUtils.centerToastNoIcon.setDuration(i);
                    ToastUtils.centerToastNoIcon.show();
                }
            }
        };
        if (isMainThread()) {
            r0.run();
        } else {
            getHandler().post(r0);
        }
    }

    private static void showToastPrivate(Context context, int i, int i2) {
        if (context != null) {
            showToastPrivate(context, context.getString(i), i2);
        }
    }

    private static void showToastPrivate(final Context context, final String str, final int i) {
        if (!NewToastUtils.notificationEnabled) {
            NewToastUtils.initStyle(new ToastDefaultStyle());
            NewToastUtils.show((CharSequence) str);
            return;
        }
        AnonymousClass1 r0 = new Runnable() { // from class: com.jingdong.sdk.jdtoast.ToastUtils.1
            @Override // java.lang.Runnable
            public void run() {
                if (context != null && !TextUtils.isEmpty(str)) {
                    if (ToastUtils.sToast != null) {
                        ToastUtils.sToast.cancel();
                    }
                    JDToast unused = ToastUtils.sToast = new JDToast(context.getApplicationContext(), (byte) 2);
                    ToastUtils.sToast.setText(str);
                    ToastUtils.sToast.setDuration(i);
                    ToastUtils.sToast.show();
                }
            }
        };
        if (isMainThread()) {
            r0.run();
        } else {
            getHandler().post(r0);
        }
    }

    private static void showToastPrivateY(final Context context, final String str, final int i) {
        if (!NewToastUtils.notificationEnabled) {
            NewToastUtils.initStyle(new ToastDefaultStyle());
            NewToastUtils.show((CharSequence) str);
            return;
        }
        AnonymousClass2 r0 = new Runnable() { // from class: com.jingdong.sdk.jdtoast.ToastUtils.2
            @Override // java.lang.Runnable
            public void run() {
                if (context != null && !TextUtils.isEmpty(str)) {
                    if (ToastUtils.sToast != null) {
                        ToastUtils.sToast.cancel();
                    }
                    JDToast unused = ToastUtils.sToast = new JDToast(context.getApplicationContext(), ToastUtils.dip2px(100.0f));
                    ToastUtils.sToast.setText(str);
                    ToastUtils.sToast.setDuration(i);
                    ToastUtils.sToast.show();
                }
            }
        };
        if (isMainThread()) {
            r0.run();
        } else {
            getHandler().post(r0);
        }
    }

    public static void showToastY(Context context, int i) {
        showToastPrivateY(context, context.getApplicationContext().getString(i), 0);
    }

    public static void showToastY(Context context, String str) {
        showToastPrivateY(context, str, 0);
    }
}
