package com.jingdong.sdk.aura;

import android.app.ActivityManager;
import android.app.Application;
import android.content.Context;
import android.os.Process;
import com.jingdong.sdk.oklog.OKLog;
import java.io.FileInputStream;
import java.util.Iterator;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
class ProcessUtil {
    private static final String TAG = "ProcessUtil";
    private static String processName;

    ProcessUtil() {
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static boolean isMainProcess(Application application) {
        return isProcess(application, getPackageName(application));
    }

    /*  JADX ERROR: NullPointerException in pass: BlockProcessor
        java.lang.NullPointerException
        */
    static java.lang.String getProcessName(int r8) {
        /*
        // Method dump skipped, instructions count: 183
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.sdk.aura.ProcessUtil.getProcessName(int):java.lang.String");
    }

    /* JADX WARN: Code restructure failed: missing block: B:9:0x0013, code lost:
        if (r0.length() == 0) goto L_0x0015;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    static boolean isProcess(android.app.Application r1, java.lang.String r2) {
        /*
            boolean r0 = android.text.TextUtils.isEmpty(r2)
            if (r0 == 0) goto L_0x0008
            r1 = 0
            return r1
        L_0x0008:
            r0 = 0
            java.lang.String r0 = getProcessName(r1)     // Catch: Throwable -> 0x0017
            if (r0 == 0) goto L_0x0015
            int r1 = r0.length()     // Catch: Throwable -> 0x0017
            if (r1 != 0) goto L_0x0017
        L_0x0015:
            java.lang.String r0 = ""
        L_0x0017:
            boolean r1 = android.text.TextUtils.isEmpty(r0)
            if (r1 == 0) goto L_0x0029
            int r1 = android.os.Process.myPid()
            java.lang.String r1 = getProcessName(r1)
            java.lang.String r0 = r1.trim()
        L_0x0029:
            boolean r1 = r2.equals(r0)
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.sdk.aura.ProcessUtil.isProcess(android.app.Application, java.lang.String):boolean");
    }

    static String getProcessName(Context context) {
        String str = processName;
        if (str != null) {
            return str;
        }
        processName = getProcessNameInternal(context);
        return processName;
    }

    private static String getProcessNameInternal(Context context) {
        ActivityManager.RunningAppProcessInfo runningAppProcessInfo;
        Throwable th;
        byte[] bArr;
        Throwable th2;
        FileInputStream fileInputStream;
        int myPid = Process.myPid();
        if (context == null || myPid <= 0) {
            return "";
        }
        FileInputStream fileInputStream2 = null;
        try {
            Iterator<ActivityManager.RunningAppProcessInfo> it = ((ActivityManager) context.getSystemService("activity")).getRunningAppProcesses().iterator();
            while (true) {
                if (!it.hasNext()) {
                    runningAppProcessInfo = null;
                    break;
                }
                runningAppProcessInfo = it.next();
                if (runningAppProcessInfo.pid == myPid) {
                    break;
                }
            }
        } catch (Throwable th3) {
            OKLog.e("", "getProcessNameInternal exception:", th3);
            runningAppProcessInfo = null;
        }
        if (runningAppProcessInfo != null) {
            return runningAppProcessInfo.processName;
        }
        try {
            try {
                bArr = new byte[128];
                try {
                    fileInputStream = new FileInputStream("/proc/" + myPid + "/cmdline");
                } catch (Throwable th4) {
                    th2 = th4;
                }
            } catch (Throwable th5) {
                th = th5;
            }
            try {
                int read = fileInputStream.read(bArr);
                if (read > 0) {
                    for (int i = 0; i < read; i++) {
                        if (bArr[i] <= 128 && bArr[i] > 0) {
                        }
                        read = i;
                        break;
                    }
                    String str = new String(bArr, 0, read);
                    try {
                        fileInputStream.close();
                    } catch (Throwable unused) {
                    }
                    return str;
                }
                fileInputStream.close();
                return "";
            } catch (Throwable th6) {
                th = th6;
                fileInputStream2 = fileInputStream;
                if (fileInputStream2 != null) {
                    try {
                        fileInputStream2.close();
                    } catch (Throwable unused2) {
                    }
                }
                throw th;
            }
        } catch (Throwable unused3) {
            return "";
        }
    }

    private static String getPackageName(Application application) {
        return application.getPackageName();
    }
}
