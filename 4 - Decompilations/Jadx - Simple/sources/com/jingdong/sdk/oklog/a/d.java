package com.jingdong.sdk.oklog.a;

import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.oklog.OKLogConfig;
import com.jingdong.sdk.oklog.reporter.AbsLogReporter;
import java.util.HashMap;
import java.util.Locale;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* loaded from: classes.dex */
public class d implements e {
    private static final String a = System.getProperty("line.separator");
    private AbsLogReporter b;
    private a c;

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static class a extends Handler {
        AbsLogReporter a;

        public a(Looper looper, AbsLogReporter absLogReporter) {
            super(looper);
            this.a = absLogReporter;
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            try {
                HashMap<String, String> hashMap = new HashMap<>();
                String str = "";
                String str2 = "";
                Object[] objArr = (Object[]) message.obj;
                int i = message.what;
                if (objArr != null && objArr.length == 4) {
                    String str3 = (String) objArr[0];
                    String str4 = (String) objArr[1];
                    Throwable th = (Throwable) objArr[2];
                    String str5 = (String) objArr[3];
                    if (th != null) {
                        str2 = th.toString();
                        int indexOf = str2.indexOf(":");
                        if (indexOf != -1) {
                            str2 = str2.substring(0, indexOf);
                        }
                        str = Log.getStackTraceString(th);
                        if (!TextUtils.isEmpty(str) && str.contains(d.a)) {
                            str = str.replaceAll(d.a, " <br> ");
                        }
                        if (!TextUtils.isEmpty(str)) {
                            str = " <br> " + str;
                        }
                    }
                    HashMap<String, String> additionalData = this.a.getAdditionalData();
                    if (additionalData != null) {
                        hashMap.putAll(additionalData);
                    }
                    hashMap.put("exceptionType", str2);
                    hashMap.put("className", str5);
                    hashMap.put("methodStack", str);
                    hashMap.put(RemoteMessageConst.MessageBody.MSG, str4);
                    Locale locale = Locale.ENGLISH;
                    Object[] objArr2 = new Object[1];
                    double currentTimeMillis = (double) System.currentTimeMillis();
                    Double.isNaN(currentTimeMillis);
                    objArr2[0] = Double.valueOf((currentTimeMillis + 0.0d) / 1000.0d);
                    hashMap.put("occurTime", String.format(locale, "%.6f", objArr2));
                    hashMap.put("logLevel", f.a(i));
                    hashMap.put("logTag", str3);
                    this.a.report(hashMap);
                }
            } catch (Throwable unused) {
            }
        }
    }

    public d(AbsLogReporter absLogReporter) {
        this.b = absLogReporter;
        HandlerThread handlerThread = new HandlerThread("OKLog-ReportHandler", 1);
        handlerThread.start();
        this.c = new a(handlerThread.getLooper(), absLogReporter);
    }

    private int a(StackTraceElement[] stackTraceElementArr) {
        for (int i = 5; i < stackTraceElementArr.length; i++) {
            String className = stackTraceElementArr[i].getClassName();
            if (!(a(className) || className.equals(d.class.getName()) || className.equals(OKLogConfig.class.getName()) || className.equals(OKLog.class.getName()))) {
                return i;
            }
        }
        return 0;
    }

    private void a(String str, int i, Throwable th, Object... objArr) {
        AbsLogReporter absLogReporter = this.b;
        if (absLogReporter != null && absLogReporter.isReportable(i)) {
            String a2 = f.a(objArr);
            if (th != null || !TextUtils.isEmpty(a2)) {
                a(i, str, a2, th);
            }
        }
    }

    public static boolean a(String str) {
        if (OKLogConfig.LOG_WRAPPER_CLASS_NAMES != null) {
            for (String str2 : OKLogConfig.LOG_WRAPPER_CLASS_NAMES) {
                if (str2.equals(str)) {
                    return true;
                }
            }
        }
        return false;
    }

    private String b() {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        return stackTrace[Math.min(a(stackTrace), stackTrace.length)].getClassName();
    }

    public void a(int i, String str, String str2, Throwable th) {
        AbsLogReporter absLogReporter = this.b;
        if (absLogReporter != null && absLogReporter.isReportable(i)) {
            String b = b();
            Message obtainMessage = this.c.obtainMessage();
            obtainMessage.what = i;
            obtainMessage.obj = new Object[]{str, str2, th, b};
            this.c.sendMessage(obtainMessage);
        }
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void a(a aVar) {
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void a(String str, String str2) {
        if (this.b != null) {
            if (TextUtils.isEmpty(str2)) {
                a(str, "Empty/Null json content");
                return;
            }
            try {
                String trim = str2.trim();
                if (trim.startsWith("{")) {
                    a(str, new JSONObject(trim).toString(2));
                } else if (trim.startsWith("[")) {
                    a(str, new JSONArray(trim).toString(2));
                } else {
                    b("Invalid Json", new Object[0]);
                }
            } catch (JSONException unused) {
                b("Invalid Json", new Object[0]);
            }
        }
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void a(String str, Object... objArr) {
        a(str, 3, (Throwable) null, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void a(Throwable th, String str, Object... objArr) {
        a(str, 3, th, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void b(String str, Object... objArr) {
        a(str, 6, (Throwable) null, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void b(Throwable th, String str, Object... objArr) {
        a(str, 6, th, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void c(String str, Object... objArr) {
        a(str, 4, (Throwable) null, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void c(Throwable th, String str, Object... objArr) {
        a(str, 4, th, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void d(String str, Object... objArr) {
        a(str, 5, (Throwable) null, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void d(Throwable th, String str, Object... objArr) {
        a(str, 5, th, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void e(String str, Object... objArr) {
        a(str, 2, (Throwable) null, objArr);
    }

    @Override // com.jingdong.sdk.oklog.a.e
    public void e(Throwable th, String str, Object... objArr) {
        a(str, 2, th, objArr);
    }
}
