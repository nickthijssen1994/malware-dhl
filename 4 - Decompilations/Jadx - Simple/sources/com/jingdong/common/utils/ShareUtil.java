package com.jingdong.common.utils;

import android.app.Activity;
import android.app.Application;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.huawei.hms.framework.common.ContainerUtils;
import com.huawei.hms.push.constant.RemoteMessageConst;
import com.jd.fireeye.common.b;
import com.jingdong.appshare.R$drawable;
import com.jingdong.appshare.R$string;
import com.jingdong.common.entity.ShareInfo;
import com.jingdong.common.share.ShareActivity;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.utils.DPIUtil;
import com.jingdong.sdk.utils.security.Base64;
import java.io.ByteArrayOutputStream;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import javax.crypto.Cipher;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ShareUtil {
    public static final int ACTION_BACK;
    public static final int ACTION_LOTTERY;
    public static final int ACTION_OPEN;
    public static final int ACTION_PANEL;
    public static final String HEIGHT_MODE;
    public static final int REQUEST_CODE;
    public static final int RESULT_BLOCK;
    public static final int RESULT_CANCEL;
    public static final int RESULT_CLOSE;
    public static final int RESULT_ERROR;
    public static final int RESULT_SUCCESS;
    public static final String SEPARATOR_SIGN;
    public static final String S_COPY_URL;
    public static final String S_FACEBOOK;
    public static final String S_JCOMMANDWX;
    public static final String S_QQ_FRIENDS;
    public static final String S_QQ_ZONE;
    public static final String S_QRCODE;
    public static final String S_SINA_WEIBO;
    public static final String S_WX_FRIENDS;
    public static final String S_WX_MOMENTS;
    private static final String TAG;
    public static final String WIDTH_MODE;
    public static long mLastUsedTime;
    public static String shareActivityAction;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface CallbackListener {
        void onCancel();

        void onComplete(Object obj);

        void onError(String str);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface ClickCallbackListener {
        void onClick(String str, String str2);
    }

    @Deprecated
    public static void dealSharedPin(Bundle bundle) {
    }

    @Deprecated
    public static void lottery(Activity activity, ShareInfo shareInfo, String str, String str2) {
    }

    public static void setShareId(Activity activity) {
        String readMetaDataFromApplication = ShareTelephoneUtils.readMetaDataFromApplication(activity, "WX_APPID");
        if (!TextUtils.isEmpty(readMetaDataFromApplication) && readMetaDataFromApplication.length() > 3) {
            WeixinUtil.APP_ID = readMetaDataFromApplication.substring(2);
        }
        String readMetaDataFromApplication2 = ShareTelephoneUtils.readMetaDataFromApplication(activity, "QQ_APPID");
        if (!TextUtils.isEmpty(readMetaDataFromApplication2) && readMetaDataFromApplication2.length() > 3) {
            QQUtil.APP_ID = readMetaDataFromApplication2.substring(2);
        }
        String readMetaDataFromApplication3 = ShareTelephoneUtils.readMetaDataFromApplication(activity, "WB_APPID");
        if (!TextUtils.isEmpty(readMetaDataFromApplication3) && readMetaDataFromApplication3.length() > 3) {
            WeiboUtil.APP_ID = readMetaDataFromApplication3.substring(2);
        }
    }

    public static void init(Activity activity) {
        setShareId(activity);
        WeixinUtil.getWXApi();
        WeiboUtil.getWBShareApi();
        QQUtil.getTencentInstance();
    }

    public static void appidConfig(Application application, ConfigBuilder configBuilder) {
        if (application != null && configBuilder != null) {
            JdSdk.getInstance().setApplication(application);
            WeixinUtil.setAppId(configBuilder.weixinId);
            QQUtil.setAppId(configBuilder.qqId);
            WeiboUtil.setAppId(configBuilder.weiboId);
        }
    }

    public static void setWhiteHostList(List<String> list) {
        if (list != null) {
            JdSdk.getInstance().setWhiteHostList(list);
        }
    }

    public static void setHostCheckToast(String str) {
        if (str != null) {
            JdSdk.getInstance().setHostCheckToast(str);
        }
    }

    public static void setIsCheckHost(boolean z) {
        JdSdk.getInstance().setIsCheckHost(z);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class ConfigBuilder {
        private String qqId;
        private String weiboId;
        private String weixinId;

        public static ConfigBuilder create() {
            return new ConfigBuilder();
        }

        public ConfigBuilder setWeixinId(String str) {
            this.weixinId = str;
            return this;
        }

        public ConfigBuilder setQQId(String str) {
            this.qqId = str;
            return this;
        }

        public ConfigBuilder setWeiboId(String str) {
            this.weiboId = str;
            return this;
        }
    }

    public static void showShareDialog(Activity activity, ShareInfo shareInfo) {
        startShareActivityForResult(activity, shareInfo, 1, shareInfo.getShareLogoBytes());
    }

    public static void showShareDialog(Activity activity, ShareInfo shareInfo, CallbackListener callbackListener) {
        if (callbackListener != null) {
            startShareActivityForCallback(activity, shareInfo, 1, shareInfo.getShareLogoBytes(), callbackListener, null);
        } else {
            startShareActivityForResult(activity, shareInfo, 1, shareInfo.getShareLogoBytes());
        }
    }

    public static void showShareDialog(Activity activity, ShareInfo shareInfo, CallbackListener callbackListener, ClickCallbackListener clickCallbackListener) {
        if (callbackListener == null && clickCallbackListener == null) {
            startShareActivityForResult(activity, shareInfo, 1, shareInfo.getShareLogoBytes());
        } else {
            startShareActivityForCallback(activity, shareInfo, 1, shareInfo.getShareLogoBytes(), callbackListener, clickCallbackListener);
        }
    }

    public static void panel(Activity activity, ShareInfo shareInfo) {
        startShareActivityForResult(activity, shareInfo, 1, shareInfo.getShareLogoBytes());
    }

    public static void panelClickCallback(Activity activity, ShareInfo shareInfo, ClickCallbackListener clickCallbackListener) {
        startShareActivityForCallback(activity, shareInfo, 1, shareInfo.getShareLogoBytes(), null, clickCallbackListener);
    }

    public static void sendShare(Activity activity, ShareInfo shareInfo, CallbackListener callbackListener) {
        if (callbackListener != null) {
            startShareActivityForCallback(activity, shareInfo, 2, shareInfo.getShareLogoBytes(), callbackListener, null);
        } else {
            startShareActivityForResult(activity, shareInfo, 2, shareInfo.getShareLogoBytes());
        }
    }

    public static void sendShareCallBack(Activity activity, ShareInfo shareInfo, CallbackListener callbackListener, ClickCallbackListener clickCallbackListener) {
        if (clickCallbackListener == null && callbackListener == null) {
            startShareActivityForResult(activity, shareInfo, 2, shareInfo.getShareLogoBytes());
        } else {
            startShareActivityForCallback(activity, shareInfo, 2, shareInfo.getShareLogoBytes(), callbackListener, clickCallbackListener);
        }
    }

    public static void open(Activity activity, ShareInfo shareInfo) {
        startShareActivityForResult(activity, shareInfo, 2, shareInfo.getShareLogoBytes());
    }

    public static void openClickCallback(Activity activity, ShareInfo shareInfo, ClickCallbackListener clickCallbackListener) {
        startShareActivityForCallback(activity, shareInfo, 2, shareInfo.getShareLogoBytes(), null, clickCallbackListener);
    }

    public static void startShareActivityForResult(Activity activity, ShareInfo shareInfo, int i, byte[] bArr) {
        if (!isColdDown()) {
            Intent intent = new Intent(activity, ShareActivity.class);
            intent.putExtra("action", i);
            intent.putExtra("shareInfo", shareInfo);
            intent.putExtra("bytes", bArr);
            Log.d("ShareActivity", "startActivityForResult");
            activity.startActivityForResult(intent, REQUEST_CODE);
            clearJDTransferActivity(activity);
        }
    }

    public static void startShareActivityForCallback(Activity activity, ShareInfo shareInfo, int i, byte[] bArr, CallbackListener callbackListener, ClickCallbackListener clickCallbackListener) {
        if (shareInfo == null || shareInfo.isCustomQrcode() || !isColdDown()) {
            ShareCallbackListenerParcel shareCallbackListenerParcel = new ShareCallbackListenerParcel(new ShareCallbackListenerBinder(callbackListener, clickCallbackListener));
            Intent intent = new Intent(activity, ShareActivity.class);
            intent.putExtra("action", i);
            intent.putExtra("shareInfo", shareInfo);
            intent.putExtra("bytes", bArr);
            intent.putExtra("parcel", shareCallbackListenerParcel);
            activity.startActivityForResult(intent, REQUEST_CODE);
            clearJDTransferActivity(activity);
        }
    }

    public static void backShareActivity(Activity activity, int i, String str, String str2) {
        Intent intent = new Intent(shareActivityAction);
        intent.putExtra("action", 3);
        intent.putExtra("result", i);
        intent.putExtra("transaction", str);
        intent.putExtra(RemoteMessageConst.MessageBody.MSG, str2);
        activity.startActivity(intent);
    }

    public static void clearJDTransferActivity(Activity activity) {
        if (activity != null && !activity.isFinishing() && activity.toString().contains("JDTransferActivity")) {
            activity.finish();
        }
    }

    public static boolean isColdDown() {
        long j = mLastUsedTime;
        if (j > 0 && j + 1000 > System.currentTimeMillis()) {
            return true;
        }
        mLastUsedTime = System.currentTimeMillis();
        return false;
    }

    public static String getShareUrl(String str, String str2) {
        return addShareUrlParam(addShareUrlParam(addShareUrlParam(addShareUrlParam(addShareUrlParam(str, "ad_od", "share"), "utm_source", "androidpingouapp"), "utm_medium", "pingouappshare"), "utm_campaign", "t_335139774"), "utm_term", str2);
    }

    public static String getShareUrlOnlyRes(String str, String str2) {
        return addShareUrlParam(addShareUrlParam(addShareUrlParam(addShareUrlParam(str, "utm_source", "androidpingouapp"), "utm_medium", "pingouappshare"), "utm_campaign", "t_335139774"), "utm_term", str2);
    }

    public static String addShareUrlParam(String str, String str2, String str3) {
        if (str.contains(str2)) {
            return str;
        }
        StringBuilder sb = new StringBuilder();
        sb.append(str);
        sb.append(str.contains("?") ? ContainerUtils.FIELD_DELIMITER : "?");
        String sb2 = sb.toString();
        return sb2 + str2 + ContainerUtils.KEY_VALUE_DELIMITER + str3;
    }

    public static String[] splitTransaction(String str) {
        if (TextUtils.isEmpty(str)) {
            return new String[]{"", ""};
        }
        String[] split = str.split(SEPARATOR_SIGN);
        return split.length > 1 ? split : new String[]{str, ""};
    }

    public static String urlEncode(String str) {
        if (str == null) {
            return "";
        }
        try {
            return URLEncoder.encode(str, "utf8");
        } catch (Exception e) {
            if (!OKLog.E) {
                return str;
            }
            e.printStackTrace();
            return str;
        }
    }

    public static String urlDecode(String str) {
        if (str == null) {
            return "";
        }
        try {
            return URLDecoder.decode(str, "utf8");
        } catch (Exception e) {
            if (!OKLog.E) {
                return str;
            }
            e.printStackTrace();
            return str;
        }
    }

    public static Bitmap createQRCode(String str) {
        Bitmap bitmap = null;
        try {
            Hashtable hashtable = new Hashtable();
            hashtable.put(EncodeHintType.CHARACTER_SET, "utf-8");
            BitMatrix encode = new QRCodeWriter().encode(str, BarcodeFormat.QR_CODE, DPIUtil.getWidthByDesignValue720(JdSdk.getInstance().getApplicationContext(), 256), DPIUtil.getWidthByDesignValue720(JdSdk.getInstance().getApplicationContext(), 256), hashtable);
            int width = encode.getWidth();
            int height = encode.getHeight();
            int[] iArr = new int[width * height];
            int i = 0;
            int i2 = 0;
            int i3 = 0;
            while (i < height) {
                int i4 = i3;
                int i5 = i2;
                for (int i6 = 0; i6 < width; i6++) {
                    if (encode.get(i6, i)) {
                        if (i5 == 0 && i4 == 0) {
                            i4 = i;
                            i5 = i6;
                        }
                        iArr[(i * width) + i6] = -16777216;
                    } else {
                        iArr[(i * width) + i6] = -1;
                    }
                }
                i++;
                i2 = i5;
                i3 = i4;
            }
            int i7 = width - (i2 * 2);
            int i8 = height - (i3 * 2);
            int[] iArr2 = new int[i7 * i8];
            for (int i9 = 0; i9 < i8; i9++) {
                for (int i10 = 0; i10 < i7; i10++) {
                    iArr2[(i9 * i7) + i10] = iArr[((i9 + i3) * width) + i10 + i2];
                }
            }
            bitmap = Bitmap.createBitmap(i7, i8, Bitmap.Config.ARGB_8888);
            bitmap.setPixels(iArr2, 0, i7, 0, 0, i7, i8);
            return bitmap;
        } catch (Exception e) {
            if (!OKLog.E) {
                return bitmap;
            }
            e.printStackTrace();
            return bitmap;
        }
    }

    public static List<Map<String, Object>> packChannels(List list, boolean z, boolean z2, boolean z3) {
        ArrayList<Object[]> arrayList = new ArrayList();
        arrayList.add(new Object[]{S_JCOMMANDWX, Integer.valueOf(R$drawable.share_to_jcommand_wx_icon), Integer.valueOf(R$string.share_to_jcommand_wx_icon)});
        if (z3) {
            arrayList.add(new Object[]{S_WX_FRIENDS, Integer.valueOf(R$drawable.share_to_wx_friend_icon_image), Integer.valueOf(R$string.share_to_wx_friends)});
            arrayList.add(new Object[]{S_WX_MOMENTS, Integer.valueOf(R$drawable.share_to_wx_circle_icon_image), Integer.valueOf(R$string.share_to_wx_friends_circle)});
        } else {
            arrayList.add(new Object[]{S_WX_FRIENDS, Integer.valueOf(R$drawable.share_to_wx_friend_icon), Integer.valueOf(R$string.share_to_wx_friends)});
            arrayList.add(new Object[]{S_WX_MOMENTS, Integer.valueOf(R$drawable.share_to_wx_circle_icon), Integer.valueOf(R$string.share_to_wx_friends_circle)});
        }
        arrayList.add(new Object[]{S_QQ_FRIENDS, Integer.valueOf(R$drawable.share_to_qq_friend_icon), Integer.valueOf(R$string.share_to_qq_friends)});
        arrayList.add(new Object[]{S_QQ_ZONE, Integer.valueOf(R$drawable.share_to_qzone_icon), Integer.valueOf(R$string.share_to_qzone)});
        arrayList.add(new Object[]{S_SINA_WEIBO, Integer.valueOf(R$drawable.share_to_weibo_icon), Integer.valueOf(R$string.share_to_weibo)});
        arrayList.add(new Object[]{S_COPY_URL, Integer.valueOf(R$drawable.share_to_copy_icon), Integer.valueOf(R$string.share_to_copy)});
        arrayList.add(new Object[]{S_QRCODE, Integer.valueOf(R$drawable.share_to_qr_code_icon), Integer.valueOf(R$string.share_to_qr_code)});
        Application application = JdSdk.getInstance().getApplication();
        ArrayList arrayList2 = new ArrayList();
        for (Object obj : list) {
            for (Object[] objArr : arrayList) {
                if (objArr[0].equals(obj) || (z && objArr[0].toString().equals(S_QRCODE))) {
                    HashMap hashMap = new HashMap();
                    hashMap.put("channel", objArr[0]);
                    hashMap.put("image", objArr[1]);
                    hashMap.put("text", application.getString(Integer.parseInt(objArr[2].toString())));
                    arrayList2.add(hashMap);
                }
            }
        }
        return arrayList2;
    }

    public static void dealSharedPin(Bundle bundle, String str) {
        if (bundle != null && !isColdDown()) {
            String string = bundle.getString("ShareTm", "");
            if (!TextUtils.isEmpty(string) && !TextUtils.isEmpty(str)) {
                String encryptPin = encryptPin(str);
                if (!TextUtils.isEmpty(encryptPin)) {
                    String urlEncode = urlEncode(string);
                    String urlEncode2 = urlEncode(encryptPin);
                    if (!TextUtils.isEmpty(urlEncode) && !TextUtils.isEmpty(urlEncode2)) {
                        String str2 = "https://" + HostConfiguration.getWmpHost() + "/relation/save?src=" + urlEncode + "&dest=" + urlEncode2;
                        if (OKLog.D) {
                            OKLog.d(TAG, str2);
                        }
                    }
                }
            }
        }
    }

    public static String encryptPin(String str) {
        String str2 = str + System.currentTimeMillis() + ((TextUtils.isEmpty(str) || str.length() < 3) ? "abc" : str.substring(0, 3));
        if (OKLog.D) {
            OKLog.d(TAG, "encryptPin: " + str2);
        }
        try {
            byte[] encryptByPublicKey = encryptByPublicKey(str2.getBytes("utf-8"), "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC4Xg//g1DKrpzNH71UFOZLH4MEi0DrBc/ODr5UjuMywf4vxPuZQOfSyN+XZCHDbMOSWvzFdOiR3DgP2lsYJn7RGfDVtFtyXpmdfO6L5qMZZ/rUEV/JF81ewNP/ho+iFjMEg0j9T69YlaMMM+jg6k5uhUJt8HsIpm5I3/8h1w6UvQIDAQAB");
            if (encryptByPublicKey == null || encryptByPublicKey.length <= 0) {
                return "";
            }
            return Base64.encodeBytes(encryptByPublicKey);
        } catch (Exception e) {
            if (!OKLog.E) {
                return "";
            }
            e.printStackTrace();
            return "";
        }
    }

    public static byte[] encryptByPublicKey(byte[] bArr, String str) throws Exception {
        byte[] bArr2;
        PublicKey generatePublic = KeyFactory.getInstance(b.b).generatePublic(new X509EncodedKeySpec(Base64.decode(str)));
        Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        instance.init(1, generatePublic);
        int length = bArr.length;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        int i = 0;
        int i2 = 0;
        while (true) {
            int i3 = length - i;
            if (i3 > 0) {
                if (i3 > 117) {
                    bArr2 = instance.doFinal(bArr, i, 117);
                } else {
                    bArr2 = instance.doFinal(bArr, i, i3);
                }
                byteArrayOutputStream.write(bArr2, 0, bArr2.length);
                i2++;
                i = i2 * 117;
            } else {
                byte[] byteArray = byteArrayOutputStream.toByteArray();
                byteArrayOutputStream.close();
                return byteArray;
            }
        }
    }
}
