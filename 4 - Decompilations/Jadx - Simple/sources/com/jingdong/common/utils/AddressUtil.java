package com.jingdong.common.utils;

import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jingdong.common.entity.AddressGlobal;
import com.jingdong.common.entity.DesCommonUtils;
import com.jingdong.common.entity.UserInfo;
import com.jingdong.jdsdk.utils.JdStringUtils;
import com.jingdong.jdsdk.utils.Md5Encrypt;
import com.jingdong.sdk.oklog.OKLog;
import com.jingdong.sdk.platform.lib.openapi.OpenApiHelper;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class AddressUtil {
    private static final String ADDRESS_CHANGE = "AddressChange";
    private static final String ADDRESS_GLOBAL_ALL = "AddressGlobal";
    private static final String ADDRESS_GLOBAL_TAG = "Global_";
    private static final String TAG = "AddressUtil";
    private static AddressCallback mAddressCallback;

    public static void setAddressCallback(AddressCallback addressCallback) {
        mAddressCallback = addressCallback;
    }

    public static String getGlobalUserKey() {
        String loginUserName = OpenApiHelper.getILoginUserBase().getLoginUserName();
        if (TextUtils.isEmpty(loginUserName)) {
            return "";
        }
        return ADDRESS_GLOBAL_TAG + loginUserName;
    }

    public static String getGlobalUserKeyMD5() {
        String str;
        String loginUserName = OpenApiHelper.getILoginUserBase().getLoginUserName();
        if (!TextUtils.isEmpty(loginUserName)) {
            try {
                str = Md5Encrypt.md5(loginUserName);
            } catch (Exception unused) {
                str = "";
            }
        } else {
            str = "";
        }
        return ADDRESS_GLOBAL_TAG + str;
    }

    public static void updateAddressByAll(AddressGlobal addressGlobal) {
        AddressGlobal addressGlobalByAll = getAddressGlobalByAll();
        if (addressGlobalByAll == null) {
            addressGlobalByAll = new AddressGlobal();
        }
        updateAddressGlobal(AddressGlobal.cloneAddressGlobal(addressGlobal, addressGlobalByAll), 0);
    }

    public static void updateAddressGlobal(AddressGlobal addressGlobal) {
        updateAddressGlobal(addressGlobal, System.currentTimeMillis());
    }

    private static void updateAddressGlobal(AddressGlobal addressGlobal, long j) {
        if (addressGlobal != null) {
            String loginUserName = OpenApiHelper.getILoginUserBase().getLoginUserName();
            if (!addressGlobal.getIsUserAddress() || TextUtils.isEmpty(loginUserName)) {
                if (OKLog.D) {
                    OKLog.d(TAG, "1.更新全局地址缓存 ADDRESS_GLOBAL_ALL = AddressGlobal 三四级地址=" + addressGlobal.getIdProvince() + "-" + addressGlobal.getIdCity() + "-" + addressGlobal.getIdArea() + "-" + addressGlobal.getIdTown());
                }
                addressGlobal.setWhere("");
                addressGlobal.setIsUserAddress(false);
                SPUtils.putString("AddressGlobal", addressGlobal.toString(j));
            } else {
                if (OKLog.D) {
                    OKLog.d(TAG, "1.更新全局地址缓存 ADDRESS_GLOBAL_USER = " + loginUserName + " 三四级地址=" + addressGlobal.getProvinceName() + addressGlobal.getCityName() + addressGlobal.getTownName() + addressGlobal.getAreaName());
                    StringBuilder sb = new StringBuilder();
                    sb.append("2.更新全局地址缓存 ADDRESS_GLOBAL_USER = ");
                    sb.append(loginUserName);
                    sb.append(" 用户全地址=");
                    sb.append(addressGlobal.getWhere());
                    OKLog.d(TAG, sb.toString());
                }
                SPUtils.putString(getGlobalUserKeyMD5(), addressGlobal.toString());
            }
            AddressCallback addressCallback = mAddressCallback;
            if (addressCallback != null) {
                addressCallback.onSaveAddress(addressGlobal);
            }
        }
    }

    public static void clearAddressGlobal() {
        SPUtils.remove("AddressGlobal");
        SPUtils.remove(getGlobalUserKey());
        SPUtils.remove(getGlobalUserKeyMD5());
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00ee  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0142  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0074 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x00d4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static com.jingdong.common.entity.AddressGlobal getAddressGlobal() {
        /*
        // Method dump skipped, instructions count: 326
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.common.utils.AddressUtil.getAddressGlobal():com.jingdong.common.entity.AddressGlobal");
    }

    public static AddressGlobal getAddressGlobalByAll() {
        AddressGlobal addressGlobal = null;
        try {
            String string = SPUtils.getString("AddressGlobal", "");
            if (!TextUtils.isEmpty(string)) {
                addressGlobal = (AddressGlobal) JDJSON.parseObject(string, AddressGlobal.class);
            }
        } catch (Exception e) {
            OKLog.e(TAG, e);
        }
        if (addressGlobal != null) {
            addressGlobal.setIsUserAddress(false);
        }
        return addressGlobal;
    }

    public static void onAddressChanged() {
        SPUtils.putBoolean(ADDRESS_CHANGE, true);
    }

    public static boolean isAddressChanged() {
        try {
            return SPUtils.getBoolean(ADDRESS_CHANGE, false);
        } catch (Exception e) {
            OKLog.e(TAG, e);
            return false;
        }
    }

    public static void clearAddressChange() {
        try {
            SPUtils.putBoolean(ADDRESS_CHANGE, false);
        } catch (Exception e) {
            if (OKLog.D) {
                OKLog.e(TAG, e);
            }
        }
    }

    public static UserInfo getUpdateUserInfo(AddressGlobal addressGlobal) {
        if (addressGlobal == null) {
            return null;
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setUserAddress(addressGlobal);
        return userInfo;
    }

    public static AddressGlobal getDefaultAddress(ArrayList<AddressGlobal> arrayList) {
        if (arrayList == null || arrayList.size() == 0) {
            return null;
        }
        Iterator<AddressGlobal> it = arrayList.iterator();
        while (it.hasNext()) {
            AddressGlobal next = it.next();
            if (next != null && next.getAddressDefault()) {
                return next;
            }
        }
        return null;
    }

    public static boolean isContainCurrentSelectedAddress(AddressGlobal addressGlobal, List<AddressGlobal> list) {
        if (addressGlobal == null || list == null || list.size() <= 0) {
            return false;
        }
        for (AddressGlobal addressGlobal2 : list) {
            if (addressGlobal.getId() != 0 && addressGlobal2.getId() == addressGlobal.getId()) {
                return true;
            }
            if (addressGlobal.getId() != 0 && matchCurrentUserAddress(addressGlobal2, addressGlobal)) {
                return true;
            }
        }
        return false;
    }

    public static boolean matchCurrentUserAddress(AddressGlobal addressGlobal, AddressGlobal addressGlobal2) {
        if (addressGlobal == null || addressGlobal2 == null) {
            return false;
        }
        String name = addressGlobal2.getName();
        String where = addressGlobal2.getWhere();
        String mobile = addressGlobal2.getMobile();
        String name2 = addressGlobal.getName();
        String where2 = addressGlobal.getWhere();
        String mobile2 = addressGlobal.getMobile();
        if (TextUtils.isEmpty(name) || TextUtils.isEmpty(where) || TextUtils.isEmpty(mobile) || TextUtils.isEmpty(name2) || TextUtils.isEmpty(where2) || TextUtils.isEmpty(mobile2) || !TextUtils.equals(name.trim(), name2.trim()) || !TextUtils.equals(where.trim(), where2.trim()) || !TextUtils.equals(mobile.trim(), mobile2.trim())) {
            return false;
        }
        return true;
    }

    public static int getAddressListSize(ArrayList<AddressGlobal> arrayList) {
        if (arrayList == null || arrayList.size() == 0) {
            return 0;
        }
        return arrayList.size();
    }

    public static AddressGlobal getSelectedUserAddress(AddressGlobal addressGlobal, ArrayList<AddressGlobal> arrayList) {
        if (getAddressListSize(arrayList) <= 0) {
            return null;
        }
        if (isContainCurrentSelectedAddress(addressGlobal, arrayList)) {
            return addressGlobal;
        }
        AddressGlobal defaultAddress = getDefaultAddress(arrayList);
        return defaultAddress == null ? getFirstNormalAddress(arrayList) : defaultAddress;
    }

    private static AddressGlobal getFirstNormalAddress(ArrayList<AddressGlobal> arrayList) {
        if (arrayList == null || arrayList.size() <= 0) {
            return null;
        }
        Iterator<AddressGlobal> it = arrayList.iterator();
        while (it.hasNext()) {
            AddressGlobal next = it.next();
            if (next != null) {
                return next;
            }
        }
        return null;
    }

    /*  JADX ERROR: JadxRuntimeException in pass: RegionMakerVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Can't find top splitter block for handler:B:11:0x0025
        	at jadx.core.utils.BlockUtils.getTopSplitterForHandler(BlockUtils.java:1148)
        	at jadx.core.dex.visitors.regions.RegionMaker.processTryCatchBlocks(RegionMaker.java:1019)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:55)
        */
    public static void encodeValue(org.json.JSONObject r1, java.lang.String r2, java.lang.String r3) {
        /*
            if (r1 == 0) goto L_0x002c
            boolean r0 = android.text.TextUtils.isEmpty(r2)
            if (r0 == 0) goto L_0x0009
            goto L_0x002c
        L_0x0009:
            boolean r0 = com.jingdong.jdsdk.utils.JdStringUtils.isEncrypt(r3)     // Catch: Exception -> 0x0025
            if (r0 == 0) goto L_0x0021
            java.lang.String r3 = decodeValue(r3)     // Catch: Exception -> 0x0025
            java.lang.String r0 = com.jingdong.common.entity.DesCommonUtils.key     // Catch: Exception -> 0x001d
            java.lang.String r0 = com.jingdong.common.entity.DesCommonUtils.encryptForDesCbc(r3, r0)     // Catch: Exception -> 0x001d
            r1.put(r2, r0)     // Catch: Exception -> 0x001d
            goto L_0x002b
        L_0x001d:
            r1.put(r2, r3)     // Catch: Exception -> 0x0025
            goto L_0x002b
        L_0x0021:
            r1.put(r2, r3)     // Catch: Exception -> 0x0025
            goto L_0x002b
        L_0x0025:
            r1 = move-exception
            java.lang.String r2 = "AddressUtil"
            com.jingdong.sdk.oklog.OKLog.e(r2, r1)
        L_0x002b:
            return
        L_0x002c:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jingdong.common.utils.AddressUtil.encodeValue(org.json.JSONObject, java.lang.String, java.lang.String):void");
    }

    public static String decodeValue(JSONObject jSONObject, String str) {
        if (jSONObject == null || TextUtils.isEmpty(str)) {
            return "";
        }
        return decodeValue(jSONObject.optString(str));
    }

    public static String decodeValue(String str) {
        if (TextUtils.isEmpty(str)) {
            return "";
        }
        try {
            if (JdStringUtils.isEncrypt(str)) {
                String decryptForDesCbc = DesCommonUtils.decryptForDesCbc(str, DesCommonUtils.key);
                if (!TextUtils.isEmpty(decryptForDesCbc)) {
                    return decryptForDesCbc;
                }
            }
        } catch (Exception e) {
            OKLog.e(TAG, e);
        }
        return str;
    }
}
