package com.jingdong.jdpush_new;

import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Messenger;
import android.text.TextUtils;
import com.jd.push.common.constant.Command;
import com.jd.push.common.util.CommonUtil;
import com.jd.push.common.util.LogUtils;
import com.jd.push.common.util.MakeDeviceTokenListener;
import com.jingdong.common.utils.Configuration;
import com.jingdong.jdpush_new.util.PushUtil;

/* loaded from: classes.dex */
public class JDPushManager {
    private static final String TAG = "JDPushManager";
    private static ServiceConnection connection = new 1();
    private static Messenger mRemoteMessenger;

    public static void bindClientId(Context context, int i, String str, String str2) {
        if (TextUtils.isEmpty(str2)) {
            str2 = CommonUtil.makeDeviceToken(context);
        }
        PushUtil.assembledData(context, i, str, str2, (short) Command.PRO_BIND_CLIENTID);
    }

    public static void disConnect(Context context) {
        try {
            context.unbindService(connection);
        } catch (Exception e) {
            LogUtils.getInstance().e(TAG, e.getMessage());
        }
    }

    public static void getDeviceToken(Context context, MakeDeviceTokenListener makeDeviceTokenListener) {
        PushUtil.getDeviceToken(context, makeDeviceTokenListener);
    }

    private static void initLogcat(Context context) {
        String logCat = CommonUtil.getLogCat(context);
        LogUtils instance = LogUtils.getInstance();
        instance.e("initLogcat", "logCat=" + logCat);
        LogUtils.getInstance().setLogToLogCat(TextUtils.equals(logCat, "1"));
    }

    public static void isConnected(Context context) {
        if (mRemoteMessenger != null) {
            Message obtain = Message.obtain((Handler) null, 9);
            obtain.setData(new Bundle());
            try {
                mRemoteMessenger.send(obtain);
            } catch (Exception unused) {
            }
        }
    }

    public static boolean isStart() {
        return mRemoteMessenger != null;
    }

    public static void reConnect(Context context) {
        LogUtils logUtils;
        String str;
        String str2;
        if (mRemoteMessenger != null) {
            Message obtain = Message.obtain((Handler) null, 7);
            Bundle bundle = new Bundle();
            bundle.putString(Configuration.HOST, CommonUtil.getLongHost(context));
            bundle.putInt("port", CommonUtil.getLongPort(context));
            obtain.setData(bundle);
            try {
                mRemoteMessenger.send(obtain);
                return;
            } catch (Exception unused) {
                logUtils = LogUtils.getInstance();
                str2 = TAG;
                str = "ip重定向失败";
            }
        } else {
            logUtils = LogUtils.getInstance();
            str2 = TAG;
            str = "停止ip重定向...";
        }
        logUtils.e(str2, str);
    }

    public static void recordOpenPushInfo(Context context, String str) {
        PushUtil.recordOpenPushInfoAssembledData(context, (short) Command.PRO_OPEN_MSG, str);
    }

    public static void registDevToken(Context context, int i, String str) {
        PushUtil.registerDevTokenAssembledData(context, i, str, (short) Command.PRO_REG_DT_REQ);
    }

    public static void registerPush(Context context) {
        String str;
        String str2;
        LogUtils logUtils;
        initLogcat(context);
        LogUtils.getInstance().d(TAG, "====启动推送====");
        if (CommonUtil.getAppID(context) != null && CommonUtil.getAppSecret(context) != null) {
            try {
                if (mRemoteMessenger == null) {
                    LogUtils.getInstance().e(TAG, "启动推送服务");
                    JDSPushService.start(context);
                    context.bindService(new Intent(context, JDSPushService.class), connection, 1);
                    return;
                }
                LogUtils.getInstance().e(TAG, "推送服务已经启动，不需要再次启动");
            } catch (Error e) {
                logUtils = LogUtils.getInstance();
                str2 = TAG;
                str = e.toString();
                logUtils.e(str2, str);
            } catch (Exception e2) {
                logUtils = LogUtils.getInstance();
                str2 = TAG;
                str = e2.toString();
                logUtils.e(str2, str);
            }
        }
    }

    public static void unBindClientId(Context context, int i, String str, String str2) {
        if (TextUtils.isEmpty(str2)) {
            str2 = CommonUtil.makeDeviceToken(context);
        }
        PushUtil.assembledData(context, i, str, str2, (short) Command.PRO_UNBIND_CLIENTID);
    }

    public static void unBindDeviceToken(Context context, int i, String str) {
        PushUtil.removeDeviceToken(context, i, str, (short) Command.PRO_UNBIND_CLIENTID_DT);
    }
}
