package com.jd.framework.network.filedown;

import android.content.Context;
import android.util.Log;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.HttpStackFactory;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.toolbox.OkHttpStack;
import com.jd.framework.network.JDResponse;
import com.jd.framework.network.file.JDFileGuider;
import com.jd.framework.network.file.JDFileResponseListener;
import com.jd.framework.network.file.JDStopController;
import com.jd.framework.network.request.JDFileRequest;
import com.jd.framework.network.request.JDFileRequestQueue;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class JDFileRequestConsumer extends Thread {
    private static final int BUFFER_SIZE = 16384;
    public static final String TAG = "JDFileRequestConsumer";
    private final Context mContext;
    private HurlStack mHurlStack;
    private OkHttpStack mOkHttpStack;
    private final JDFileRequestQueue mQueue;
    private volatile boolean mQuit = false;

    public JDFileRequestConsumer(JDFileRequestQueue jDFileRequestQueue, HttpStackFactory httpStackFactory, Context context) {
        this.mQueue = jDFileRequestQueue;
        this.mContext = context;
        if (httpStackFactory != null) {
            this.mHurlStack = httpStackFactory.getHttpStack(false);
            this.mOkHttpStack = httpStackFactory.getHttpStack(true);
        }
    }

    public void quit() {
        this.mQuit = true;
        interrupt();
    }

    @Override // java.lang.Thread, java.lang.Runnable
    public void run() {
        while (true) {
            try {
                performRequest(this.mQueue.take());
            } catch (InterruptedException unused) {
                if (this.mQuit) {
                    return;
                }
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:47:0x014a, code lost:
        if (r14.getUseOkhttpFlag() == false) goto L_0x0169;
     */
    /* JADX WARN: Code restructure failed: missing block: B:48:0x014c, code lost:
        if (r4 == null) goto L_0x0161;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x014e, code lost:
        r2 = r4.body().byteStream();
        r7 = r4.body().contentLength();
        r11 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x0168, code lost:
        throw new java.io.IOException("cannot read from null response");
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x0169, code lost:
        if (r1 == null) goto L_0x01b0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x016b, code lost:
        r2 = r1.getInputStream();
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x0173, code lost:
        r7 = (long) r1.getContentLength();
        r11 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:55:0x0176, code lost:
        saveFile(r14, r13.mContext, r5, r0, r7, r11);
     */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x0181, code lost:
        if (com.android.volley.VolleyLog.DEBUG == false) goto L_0x019d;
     */
    /* JADX WARN: Code restructure failed: missing block: B:57:0x0183, code lost:
        android.util.Log.d(com.jd.framework.network.filedown.JDFileRequestConsumer.TAG, "downsuccess:" + r14.getUrl());
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x019d, code lost:
        r11.close();
     */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x01a0, code lost:
        if (r1 == null) goto L_?;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x01a2, code lost:
        r1.disconnect();
     */
    /* JADX WARN: Code restructure failed: missing block: B:62:0x01b7, code lost:
        throw new java.io.IOException("cannot read from null conn");
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x01b8, code lost:
        r1 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x01bb, code lost:
        if (com.android.volley.VolleyLog.DEBUG != false) goto L_0x01bd;
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x01bd, code lost:
        r1.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:67:0x01c0, code lost:
        r0.onError(new com.jd.framework.network.error.JDFileDownloadError(r14.getUrl(), r1, true));
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x01cc, code lost:
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:75:?, code lost:
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:76:?, code lost:
        return;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v2, types: [com.jd.framework.network.file.JDFileResponseListener] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private void performRequest(com.jd.framework.network.request.JDFileRequest r14) {
        /*
        // Method dump skipped, instructions count: 461
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.framework.network.filedown.JDFileRequestConsumer.performRequest(com.jd.framework.network.request.JDFileRequest):void");
    }

    private void saveFile(JDFileRequest jDFileRequest, Context context, boolean z, JDFileResponseListener<File> jDFileResponseListener, long j, InputStream inputStream) throws IOException {
        JDFileGuider savePath = jDFileRequest.getSavePath();
        savePath.setAvailableSize(j);
        JDFileService.resetSaveFileParam(jDFileRequest, context, savePath, savePath.isImmutable(), savePath.getSpace());
        File fileSavePath = JDFileService.getFileSavePath(savePath, context);
        if (fileSavePath == null) {
            if (VolleyLog.DEBUG) {
                String str = TAG;
                Log.d(str, "requestID:" + jDFileRequest.getSequence() + ",下载失败，存储空间不足！");
            }
            throw new IOException("Not enough storage space！");
        }
        if (z) {
            readAsFile(inputStream, fileSavePath, (long) jDFileRequest.getStartPosBreakpointTransmission(), jDFileResponseListener, savePath.getAvailableSize(), jDFileRequest);
        } else {
            BufferedOutputStream openFileOutput = JDFileService.openFileOutput(jDFileRequest.getSavePath(), fileSavePath);
            try {
                readAsFile(inputStream, openFileOutput, jDFileResponseListener, savePath.getAvailableSize(), jDFileRequest);
                if (openFileOutput != null) {
                    try {
                        openFileOutput.flush();
                    } catch (Throwable th) {
                        if (openFileOutput != null) {
                            openFileOutput.close();
                        }
                        throw th;
                    }
                }
                if (openFileOutput != null) {
                    openFileOutput.close();
                }
                if (jDFileRequest.isStop()) {
                    fileSavePath.delete();
                }
            } catch (Throwable th2) {
                if (openFileOutput != null) {
                    try {
                        openFileOutput.flush();
                    } catch (Throwable th3) {
                        if (openFileOutput != null) {
                            openFileOutput.close();
                        }
                        throw th3;
                    }
                }
                if (openFileOutput != null) {
                    openFileOutput.close();
                }
                throw th2;
            }
        }
        if (!jDFileRequest.isStop()) {
            JDResponse<File> jDResponse = new JDResponse<>();
            jDResponse.setData(fileSavePath);
            jDFileResponseListener.onEnd(jDResponse);
            return;
        }
        jDFileResponseListener.onPause();
    }

    private void readAsFile(InputStream inputStream, File file, long j, JDFileResponseListener<File> jDFileResponseListener, long j2, JDStopController jDStopController) throws IOException {
        RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
        try {
            randomAccessFile.seek(j);
            byte[] bArr = new byte[BUFFER_SIZE];
            int i = (int) j;
            long j3 = 0;
            while (true) {
                int read = inputStream.read(bArr);
                if (read == -1 || jDStopController.isStop()) {
                    break;
                }
                randomAccessFile.write(bArr, 0, read);
                i += read;
                if (jDFileResponseListener != null) {
                    long currentTimeMillis = System.currentTimeMillis();
                    if (currentTimeMillis - j3 > 500) {
                        jDFileResponseListener.onProgress(Long.valueOf(j2).intValue(), i);
                        j3 = currentTimeMillis;
                    }
                }
            }
        } finally {
            randomAccessFile.close();
        }
    }

    private void readAsFile(InputStream inputStream, BufferedOutputStream bufferedOutputStream, JDFileResponseListener<File> jDFileResponseListener, long j, JDStopController jDStopController) throws IOException {
        byte[] bArr = new byte[BUFFER_SIZE];
        int i = 0;
        while (true) {
            int read = inputStream.read(bArr);
            if (read != -1 && !jDStopController.isStop()) {
                bufferedOutputStream.write(bArr, 0, read);
                i += read;
                if (jDFileResponseListener != null) {
                    jDFileResponseListener.onProgress(Long.valueOf(j).intValue(), i);
                }
            } else {
                return;
            }
        }
    }
}
