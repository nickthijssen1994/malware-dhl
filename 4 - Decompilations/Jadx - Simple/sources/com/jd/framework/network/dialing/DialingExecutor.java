package com.jd.framework.network.dialing;

import android.util.Log;
import com.android.volley.VolleyLog;
import com.android.volley.utils.TimeUtils;
import com.jingdong.jdsdk.network.toolbox.GlobalExecutorService;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class DialingExecutor {
    public static final int DEFAULT_DAILING_TIMEOUT = 2000;
    public static final int LOCAL_DNS_DAILING_TIMEOUT = 250;
    public static final String TAG = "DialingExecutor";

    public static IPEntity randomSelect(ArrayList<IPEntity> arrayList, final int i) {
        IPEntity iPEntity;
        if (arrayList == null || arrayList.size() <= 0) {
            return null;
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "Start IP connection test.");
        }
        Future[] futureArr = new Future[arrayList.size()];
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            final IPEntity iPEntity2 = arrayList.get(i2);
            futureArr[i2] = GlobalExecutorService.lightExecutorService().submit(new Callable<IPEntity>() { // from class: com.jd.framework.network.dialing.DialingExecutor.1
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public IPEntity call() throws Exception {
                    return DialingExecutor.customIpTest(IPEntity.this, i);
                }
            });
        }
        ArrayList arrayList2 = new ArrayList();
        for (Future future : futureArr) {
            try {
                iPEntity = (IPEntity) future.get();
            } catch (Exception e) {
                e.printStackTrace();
                iPEntity = null;
            }
            if (iPEntity != null && iPEntity.time > 0) {
                arrayList2.add(iPEntity);
            }
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "IP connection test complete.");
        }
        if (arrayList2.size() > 0) {
            return (IPEntity) arrayList2.get(new Random().nextInt(arrayList2.size()));
        }
        return null;
    }

    public static IPEntity select(ArrayList<IPEntity> arrayList, final int i) {
        IPEntity iPEntity;
        IPEntity iPEntity2 = null;
        if (arrayList == null || arrayList.size() <= 0) {
            return null;
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "Start IP connection test.");
        }
        Future[] futureArr = new Future[arrayList.size()];
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            final IPEntity iPEntity3 = arrayList.get(i2);
            futureArr[i2] = GlobalExecutorService.lightExecutorService().submit(new Callable<IPEntity>() { // from class: com.jd.framework.network.dialing.DialingExecutor.2
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public IPEntity call() throws Exception {
                    return DialingExecutor.customIpTest(IPEntity.this, i);
                }
            });
        }
        ArrayList arrayList2 = new ArrayList();
        for (Future future : futureArr) {
            try {
                iPEntity = (IPEntity) future.get();
            } catch (Exception e) {
                e.printStackTrace();
                iPEntity = null;
            }
            if (iPEntity != null && iPEntity.time > 0) {
                arrayList2.add(iPEntity);
            }
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "IP connection test complete.");
        }
        if (arrayList2.size() > 0) {
            Iterator it = arrayList2.iterator();
            while (it.hasNext()) {
                IPEntity iPEntity4 = (IPEntity) it.next();
                if (iPEntity2 == null || iPEntity2.time > iPEntity4.time) {
                    iPEntity2 = iPEntity4;
                }
            }
        }
        return iPEntity2;
    }

    public static IPEntity select(final IPEntity iPEntity, final int i) {
        IPEntity iPEntity2;
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "Start IP connection test.");
        }
        try {
            iPEntity2 = (IPEntity) GlobalExecutorService.lightExecutorService().submit(new Callable<IPEntity>() { // from class: com.jd.framework.network.dialing.DialingExecutor.3
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public IPEntity call() throws Exception {
                    return DialingExecutor.customIpTest(IPEntity.this, i);
                }
            }).get();
        } catch (Exception e) {
            e.printStackTrace();
            iPEntity2 = null;
        }
        if (iPEntity2 != null && iPEntity2.time > 0) {
            return iPEntity2;
        }
        if (VolleyLog.DEBUG) {
            Log.d(TAG, "IP connection test complete.");
        }
        return iPEntity2;
    }

    /* JADX WARN: Removed duplicated region for block: B:30:0x005b  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static long connect(java.lang.String r6, int r7, int r8) {
        /*
            if (r7 != 0) goto L_0x0004
            r7 = 443(0x1bb, float:6.21E-43)
        L_0x0004:
            r0 = 0
            r1 = 0
            long r3 = java.lang.System.currentTimeMillis()     // Catch: IOException -> 0x0040, all -> 0x003d
            java.net.Socket r5 = new java.net.Socket     // Catch: IOException -> 0x003b, all -> 0x003d
            r5.<init>()     // Catch: IOException -> 0x003b, all -> 0x003d
            java.net.InetSocketAddress r0 = new java.net.InetSocketAddress     // Catch: IOException -> 0x0038, all -> 0x0036
            r0.<init>(r6, r7)     // Catch: IOException -> 0x0038, all -> 0x0036
            r5.connect(r0, r8)     // Catch: IOException -> 0x0038, all -> 0x0036
            r7 = 255(0xff, float:3.57E-43)
            r5.sendUrgentData(r7)     // Catch: IOException -> 0x0038, all -> 0x0036
            long r1 = java.lang.System.currentTimeMillis()     // Catch: IOException -> 0x0038, all -> 0x0036
            boolean r7 = r5.isClosed()     // Catch: IOException -> 0x0031
            if (r7 != 0) goto L_0x002a
            r5.shutdownInput()     // Catch: IOException -> 0x0031
        L_0x002a:
            r5.shutdownOutput()     // Catch: IOException -> 0x0031
            r5.close()     // Catch: IOException -> 0x0031
            goto L_0x0056
        L_0x0031:
            r7 = move-exception
            r7.printStackTrace()
            goto L_0x0056
        L_0x0036:
            r6 = move-exception
            goto L_0x007a
        L_0x0038:
            r7 = move-exception
            r0 = r5
            goto L_0x0042
        L_0x003b:
            r7 = move-exception
            goto L_0x0042
        L_0x003d:
            r6 = move-exception
            r5 = r0
            goto L_0x007a
        L_0x0040:
            r7 = move-exception
            r3 = r1
        L_0x0042:
            r7.printStackTrace()     // Catch: all -> 0x003d
            if (r0 == 0) goto L_0x0050
            boolean r7 = r0.isClosed()     // Catch: IOException -> 0x0031
            if (r7 != 0) goto L_0x0050
            r0.shutdownInput()     // Catch: IOException -> 0x0031
        L_0x0050:
            r0.shutdownOutput()     // Catch: IOException -> 0x0031
            r0.close()     // Catch: IOException -> 0x0031
        L_0x0056:
            long r1 = r1 - r3
            boolean r7 = com.android.volley.VolleyLog.DEBUG
            if (r7 == 0) goto L_0x0079
            java.lang.String r7 = com.jd.framework.network.dialing.DialingExecutor.TAG
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r0 = "ip : "
            r8.append(r0)
            r8.append(r6)
            java.lang.String r6 = ", rtt time : "
            r8.append(r6)
            r8.append(r1)
            java.lang.String r6 = r8.toString()
            android.util.Log.d(r7, r6)
        L_0x0079:
            return r1
        L_0x007a:
            if (r5 == 0) goto L_0x0085
            boolean r7 = r5.isClosed()     // Catch: IOException -> 0x008c
            if (r7 != 0) goto L_0x0085
            r5.shutdownInput()     // Catch: IOException -> 0x008c
        L_0x0085:
            r5.shutdownOutput()     // Catch: IOException -> 0x008c
            r5.close()     // Catch: IOException -> 0x008c
            goto L_0x0090
        L_0x008c:
            r7 = move-exception
            r7.printStackTrace()
        L_0x0090:
            throw r6
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.framework.network.dialing.DialingExecutor.connect(java.lang.String, int, int):long");
    }

    public static IPEntity customIpTest(IPEntity iPEntity, int i) {
        iPEntity.time = connect(iPEntity.key, 443, i);
        iPEntity.updateTime = TimeUtils.getCurrentTime();
        return iPEntity;
    }
}
