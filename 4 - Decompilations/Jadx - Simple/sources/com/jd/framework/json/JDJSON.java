package com.jd.framework.json;

import com.jd.JSONException;
import com.jd.a;
import com.jd.b;
import com.jd.c;
import com.jd.parser.Feature;
import com.jd.parser.a.e;
import com.jd.parser.a.g;
import com.jd.parser.d;
import com.jd.parser.l;
import com.jd.push.common.util.DateUtils;
import com.jd.serializer.SerializerFeature;
import com.jd.serializer.ab;
import com.jd.serializer.m;
import com.jd.serializer.n;
import com.jd.serializer.r;
import com.jd.serializer.u;
import com.jd.serializer.v;
import com.jd.serializer.x;
import com.jd.serializer.y;
import com.jd.serializer.z;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public abstract class JDJSON implements a, b {
    public static final String DEFAULT_TYPE_KEY;
    public static final String VERSION;
    public static TimeZone defaultTimeZone = TimeZone.getDefault();
    public static Locale defaultLocale = Locale.getDefault();
    public static int DEFAULT_PARSER_FEATURE = ((Feature.UseBigDecimal.mask | 0) | Feature.SortFeidFastMatch.mask) | Feature.IgnoreNotMatch.mask;
    public static String DEFFAULT_DATE_FORMAT = DateUtils.TIME_FORMAT;
    public static boolean debug = true;
    public static int DEFAULT_GENERATE_FEATURE = (((SerializerFeature.QuoteFieldNames.mask | 0) | SerializerFeature.SkipTransientField.mask) | SerializerFeature.WriteEnumUsingToString.mask) | SerializerFeature.SortField.mask;

    public static void init(boolean z) {
        debug = z;
    }

    public static final Object parse(String str) {
        return parse(str, DEFAULT_PARSER_FEATURE);
    }

    public static final Object parse(String str, int i) {
        if (str == null) {
            return null;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, l.b, i);
        Object b = bVar.b((Object) null);
        bVar.c(b);
        bVar.close();
        return b;
    }

    public static final Object parse(byte[] bArr, Feature... featureArr) {
        try {
            return parseObject(new String(bArr, "UTF-8"), featureArr);
        } catch (UnsupportedEncodingException e) {
            throw new JSONException("UTF-8 not support", e);
        }
    }

    public static final Object parse(String str, Feature... featureArr) {
        int i = DEFAULT_PARSER_FEATURE;
        for (Feature feature : featureArr) {
            i |= feature.mask;
        }
        return parse(str, i);
    }

    public static final JDJSONObject parseObject(String str, Feature... featureArr) {
        return (JDJSONObject) parse(str, featureArr);
    }

    public static final JDJSONObject parseObject(String str) {
        Object parse = parse(str);
        if (parse instanceof JDJSONObject) {
            return (JDJSONObject) parse;
        }
        return (JDJSONObject) toJSON(parse);
    }

    public static final <T> T parseObject(String str, c<T> cVar, Feature... featureArr) {
        return (T) parseObject(str, cVar.b, l.b, DEFAULT_PARSER_FEATURE, featureArr);
    }

    public static final <T> T parseObject(String str, Class<T> cls, Feature... featureArr) {
        return (T) parseObject(str, cls, l.b, DEFAULT_PARSER_FEATURE, featureArr);
    }

    public static final <T> T parseObject(String str, Class<T> cls, g gVar, Feature... featureArr) {
        return (T) parseObject(str, cls, l.b, gVar, DEFAULT_PARSER_FEATURE, featureArr);
    }

    public static final <T> T parseObject(String str, Type type, Feature... featureArr) {
        return (T) parseObject(str, type, l.b, DEFAULT_PARSER_FEATURE, featureArr);
    }

    public static final <T> T parseObject(String str, Type type, g gVar, Feature... featureArr) {
        return (T) parseObject(str, type, l.b, gVar, DEFAULT_PARSER_FEATURE, featureArr);
    }

    public static final <T> T parseObject(String str, Type type, int i, Feature... featureArr) {
        if (str == null) {
            return null;
        }
        for (Feature feature : featureArr) {
            i |= feature.mask;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, l.b, i);
        T t = (T) bVar.a(type);
        bVar.c(t);
        bVar.close();
        return t;
    }

    public static final <T> T parseObject(String str, Type type, l lVar, int i, Feature... featureArr) {
        return (T) parseObject(str, type, lVar, null, i, featureArr);
    }

    public static final <T> T parseObject(String str, Type type, l lVar, g gVar, int i, Feature... featureArr) {
        if (str == null) {
            return null;
        }
        for (Feature feature : featureArr) {
            i |= feature.mask;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, lVar, i);
        if (gVar instanceof com.jd.parser.a.c) {
            bVar.e().add((com.jd.parser.a.c) gVar);
        }
        if (gVar instanceof com.jd.parser.a.b) {
            bVar.d().add((com.jd.parser.a.b) gVar);
        }
        if (gVar instanceof e) {
            bVar.h = (e) gVar;
        }
        T t = (T) bVar.a(type);
        bVar.c(t);
        bVar.close();
        return t;
    }

    public static final <T> T parseObject(byte[] bArr, Type type, Feature... featureArr) {
        try {
            return (T) parseObject(new String(bArr, "UTF-8"), type, featureArr);
        } catch (UnsupportedEncodingException unused) {
            throw new JSONException("UTF-8 not support");
        }
    }

    public static final <T> T parseObject(char[] cArr, int i, Type type, Feature... featureArr) {
        if (cArr == null || cArr.length == 0) {
            return null;
        }
        int i2 = DEFAULT_PARSER_FEATURE;
        for (Feature feature : featureArr) {
            i2 |= feature.mask;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(cArr, i, l.b, i2);
        T t = (T) bVar.a(type);
        bVar.c(t);
        bVar.close();
        return t;
    }

    public static final <T> T parseObject(String str, Class<T> cls) {
        return (T) parseObject(str, (Class<Object>) cls, new Feature[0]);
    }

    public static final JDJSONArray parseArray(String str) {
        JDJSONArray jDJSONArray = null;
        if (str == null) {
            return null;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, l.b);
        d dVar = bVar.c;
        int a = dVar.a();
        if (a == 8) {
            dVar.e();
        } else if (a != 20) {
            jDJSONArray = new JDJSONArray();
            bVar.b((Collection) jDJSONArray);
            bVar.c(jDJSONArray);
        }
        bVar.close();
        return jDJSONArray;
    }

    public static final <T> List<T> parseArray(String str, Class<T> cls) {
        ArrayList arrayList = null;
        if (str == null) {
            return null;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, l.b);
        d dVar = bVar.c;
        int a = dVar.a();
        if (a == 8) {
            dVar.e();
        } else if (a != 20 || !dVar.n()) {
            arrayList = new ArrayList();
            bVar.a((Class<?>) cls, (Collection) arrayList);
            bVar.c(arrayList);
        }
        bVar.close();
        return arrayList;
    }

    public static final List<Object> parseArray(String str, Type[] typeArr) {
        List<Object> list = null;
        if (str == null) {
            return null;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, l.b);
        Object[] a = bVar.a(typeArr);
        if (a != null) {
            list = Arrays.asList(a);
        }
        bVar.c(list);
        bVar.close();
        return list;
    }

    public static final <T> List<T> parseTemplateArray(String str, Type[] typeArr) {
        List<T> list = null;
        if (str == null) {
            return null;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, l.b);
        Object[] a = bVar.a(typeArr);
        if (a != null) {
            list = Arrays.asList(a);
        }
        bVar.c(list);
        bVar.close();
        return list;
    }

    public static Object parse(String str, l lVar) {
        return parse(str, lVar, DEFAULT_PARSER_FEATURE);
    }

    public static Object parse(String str, l lVar, int i) {
        if (str == null) {
            return null;
        }
        com.jd.parser.b bVar = new com.jd.parser.b(str, lVar, i);
        Object g = bVar.g();
        bVar.c(g);
        bVar.close();
        return g;
    }

    public static final String toJSONString(Object obj) {
        return toJSONString(obj, x.a, null, null, DEFAULT_GENERATE_FEATURE, new SerializerFeature[0]);
    }

    public static final String toJSONString(Object obj, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final String toJSONString(Object obj, int i, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, x.a, null, null, i, serializerFeatureArr);
    }

    public static final String toJSONStringWithDateFormat(Object obj, String str, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, x.a, null, str, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final String toJSONString(Object obj, y yVar, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, x.a, new y[]{yVar}, null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final String toJSONString(Object obj, y[] yVarArr, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, x.a, yVarArr, null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final byte[] toJSONBytes(Object obj, SerializerFeature... serializerFeatureArr) {
        z zVar = new z((Writer) null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
        try {
            new m(zVar, x.a).b(obj);
            return zVar.a("UTF-8");
        } finally {
            zVar.close();
        }
    }

    public static final String toJSONString(Object obj, x xVar, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, xVar, null, null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final String toJSONString(Object obj, x xVar, y yVar, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, xVar, new y[]{yVar}, null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final String toJSONString(Object obj, x xVar, y[] yVarArr, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, xVar, yVarArr, null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
    }

    public static final String toJSONStringZ(Object obj, x xVar, SerializerFeature... serializerFeatureArr) {
        return toJSONString(obj, x.a, null, null, 0, serializerFeatureArr);
    }

    public static final byte[] toJSONBytes(Object obj, x xVar, SerializerFeature... serializerFeatureArr) {
        z zVar = new z((Writer) null, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
        try {
            new m(zVar, xVar).b(obj);
            return zVar.a("UTF-8");
        } finally {
            zVar.close();
        }
    }

    public static final String toJSONString(Object obj, boolean z) {
        if (!z) {
            return toJSONString(obj);
        }
        return toJSONString(obj, SerializerFeature.PrettyFormat);
    }

    public static final void writeJSONStringTo(Object obj, Writer writer, SerializerFeature... serializerFeatureArr) {
        z zVar = new z(writer, DEFAULT_GENERATE_FEATURE, serializerFeatureArr);
        try {
            new m(zVar, x.a).b(obj);
        } finally {
            zVar.close();
        }
    }

    public String toString() {
        return toJSONString();
    }

    @Override // com.jd.a
    public String toJSONString() {
        z zVar = new z((Writer) null, DEFAULT_GENERATE_FEATURE, SerializerFeature.EMPTY);
        try {
            new m(zVar, x.a).b(this);
            return zVar.toString();
        } finally {
            zVar.close();
        }
    }

    @Override // com.jd.b
    public void writeJSONString(Appendable appendable) {
        z zVar;
        try {
            zVar = new z((Writer) null, DEFAULT_GENERATE_FEATURE, SerializerFeature.EMPTY);
            try {
                new m(zVar, x.a).b(this);
                appendable.append(zVar.toString());
            } catch (IOException e) {
                throw new JSONException(e.getMessage(), e);
            }
        } finally {
            zVar.close();
        }
    }

    public static final Object toJSON(Object obj) {
        return toJSON(obj, x.a);
    }

    @Deprecated
    public static final Object toJSON(Object obj, l lVar) {
        return toJSON(obj, x.a);
    }

    public static Object toJSON(Object obj, x xVar) {
        Map map;
        if (obj == null) {
            return null;
        }
        if (obj instanceof JDJSON) {
            return (JDJSON) obj;
        }
        if (obj instanceof Map) {
            Map map2 = (Map) obj;
            int size = map2.size();
            if (map2 instanceof LinkedHashMap) {
                map = new LinkedHashMap(size);
            } else if (map2 instanceof TreeMap) {
                map = new TreeMap();
            } else {
                map = new HashMap(size);
            }
            JDJSONObject jDJSONObject = new JDJSONObject(map);
            for (Map.Entry entry : map2.entrySet()) {
                jDJSONObject.put(com.jd.a.d.a(entry.getKey()), toJSON(entry.getValue()));
            }
            return jDJSONObject;
        } else if (obj instanceof Collection) {
            Collection<Object> collection = (Collection) obj;
            JDJSONArray jDJSONArray = new JDJSONArray(collection.size());
            for (Object obj2 : collection) {
                jDJSONArray.add(toJSON(obj2));
            }
            return jDJSONArray;
        } else {
            Class<?> cls = obj.getClass();
            if (cls.isEnum()) {
                return ((Enum) obj).name();
            }
            if (cls.isArray()) {
                int length = Array.getLength(obj);
                JDJSONArray jDJSONArray2 = new JDJSONArray(length);
                for (int i = 0; i < length; i++) {
                    jDJSONArray2.add(toJSON(Array.get(obj, i)));
                }
                return jDJSONArray2;
            } else if (l.a(cls)) {
                return obj;
            } else {
                n a = xVar.a(cls);
                if (!(a instanceof n)) {
                    return null;
                }
                n nVar = a;
                JDJSONObject jDJSONObject2 = new JDJSONObject();
                try {
                    for (Map.Entry entry2 : nVar.a(obj).entrySet()) {
                        jDJSONObject2.put((String) entry2.getKey(), toJSON(entry2.getValue()));
                    }
                    return jDJSONObject2;
                } catch (Exception e) {
                    throw new JSONException("toJSON error", e);
                }
            }
        }
    }

    public static final <T> T toJavaObject(JDJSON jdjson, Class<T> cls) {
        return (T) com.jd.a.d.a((Object) jdjson, (Class<Object>) cls, l.b);
    }

    public <T> T toJavaObject(Class<T> cls) {
        return (T) com.jd.a.d.a((Object) this, (Class<Object>) cls, l.a());
    }

    public static String toJSONString(Object obj, x xVar, y[] yVarArr, String str, int i, SerializerFeature... serializerFeatureArr) {
        z zVar = new z((Writer) null, i, serializerFeatureArr);
        try {
            m mVar = new m(zVar, xVar);
            for (SerializerFeature serializerFeature : serializerFeatureArr) {
                mVar.a(serializerFeature, true);
            }
            if (!(str == null || str.length() == 0)) {
                mVar.a(str);
                mVar.a(SerializerFeature.WriteDateUseDateFormat, true);
            }
            if (yVarArr != null) {
                for (y yVar : yVarArr) {
                    if (yVar != null) {
                        if (yVar instanceof v) {
                            mVar.i().add((v) yVar);
                        }
                        if (yVar instanceof r) {
                            mVar.h().add((r) yVar);
                        }
                        if (yVar instanceof ab) {
                            mVar.b().add((ab) yVar);
                        }
                        if (yVar instanceof u) {
                            mVar.j().add((u) yVar);
                        }
                        if (yVar instanceof com.jd.serializer.d) {
                            mVar.f().add((com.jd.serializer.d) yVar);
                        }
                        if (yVar instanceof com.jd.serializer.a) {
                            mVar.g().add((com.jd.serializer.a) yVar);
                        }
                    }
                }
            }
            mVar.b(obj);
            return zVar.toString();
        } finally {
            zVar.close();
        }
    }
}
