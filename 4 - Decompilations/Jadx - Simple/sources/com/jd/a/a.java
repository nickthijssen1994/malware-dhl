package com.jd.a;

import com.jd.framework.json.anotation.JSONField;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class a implements Comparable<a> {
    public final String a;
    public final Method b;
    public final Field c;
    public final boolean d;
    public final boolean e;
    public final Class<?> f;
    public final Type g;
    public final Class<?> h;
    public final boolean i;
    public final boolean j;
    public final String k;
    public final long l;
    public final String[] m;
    private int n;
    private final JSONField o;
    private final JSONField p;

    public a(String str, Class<?> cls, Class<?> cls2, Type type, Field field, int i, int i2) {
        this.n = 0;
        this.a = str;
        this.h = cls;
        this.f = cls2;
        this.g = type;
        this.b = null;
        this.c = field;
        this.n = i;
        boolean z = true;
        this.j = cls2.isEnum() && !com.jd.a.class.isAssignableFrom(cls2);
        this.o = null;
        this.p = null;
        if (field != null) {
            int modifiers = field.getModifiers();
            if ((modifiers & 1) == 0 && this.b != null) {
                z = false;
            }
            this.d = z;
            this.e = Modifier.isTransient(modifiers);
        } else {
            this.d = false;
            this.e = false;
        }
        this.i = false;
        long j = -3750763034362895579L;
        for (int i3 = 0; i3 < str.length(); i3++) {
            j = (j ^ ((long) str.charAt(i3))) * 1099511628211L;
        }
        this.l = j;
        this.k = null;
        this.m = new String[0];
    }

    /* JADX WARN: Code restructure failed: missing block: B:83:0x0136, code lost:
        r13 = r4.h.getTypeParameters();
        r0 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x013e, code lost:
        if (r0 >= r13.length) goto L_0x014e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0146, code lost:
        if (r7.equals(r13[r0]) == false) goto L_0x014b;
     */
    /* JADX WARN: Code restructure failed: missing block: B:88:0x0148, code lost:
        r12 = r14[r0];
     */
    /* JADX WARN: Code restructure failed: missing block: B:89:0x014b, code lost:
        r0 = r0 + 1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public a(java.lang.String r5, java.lang.reflect.Method r6, java.lang.reflect.Field r7, java.lang.Class<?> r8, java.lang.reflect.Type r9, int r10, int r11, com.jd.framework.json.anotation.JSONField r12, com.jd.framework.json.anotation.JSONField r13, boolean r14) {
        /*
        // Method dump skipped, instructions count: 425
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.a.a.<init>(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Field, java.lang.Class, java.lang.reflect.Type, int, int, com.jd.framework.json.anotation.JSONField, com.jd.framework.json.anotation.JSONField, boolean):void");
    }

    public static Type a(Class<?> cls, Type type, Type type2) {
        ParameterizedType parameterizedType;
        TypeVariable<Class<? super Object>>[] typeVariableArr;
        if (cls == null || type == null) {
            return type2;
        }
        if (type2 instanceof GenericArrayType) {
            Type genericComponentType = ((GenericArrayType) type2).getGenericComponentType();
            Type a = a(cls, type, genericComponentType);
            return genericComponentType != a ? Array.newInstance(d.c(a), 0).getClass() : type2;
        } else if (!d.a(type)) {
            return type2;
        } else {
            if (type2 instanceof TypeVariable) {
                ParameterizedType parameterizedType2 = (ParameterizedType) d.b(type);
                Class<?> c = d.c((Type) parameterizedType2);
                TypeVariable typeVariable = (TypeVariable) type2;
                for (int i = 0; i < c.getTypeParameters().length; i++) {
                    if (c.getTypeParameters()[i].getName().equals(typeVariable.getName())) {
                        return parameterizedType2.getActualTypeArguments()[i];
                    }
                }
            }
            if (type2 instanceof ParameterizedType) {
                ParameterizedType parameterizedType3 = (ParameterizedType) type2;
                Type[] actualTypeArguments = parameterizedType3.getActualTypeArguments();
                if (type instanceof ParameterizedType) {
                    parameterizedType = (ParameterizedType) type;
                    typeVariableArr = cls.getTypeParameters();
                } else if (cls.getGenericSuperclass() instanceof ParameterizedType) {
                    parameterizedType = (ParameterizedType) cls.getGenericSuperclass();
                    typeVariableArr = cls.getSuperclass().getTypeParameters();
                } else {
                    typeVariableArr = null;
                    parameterizedType = null;
                }
                Type[] typeArr = null;
                boolean z = false;
                for (int i2 = 0; i2 < actualTypeArguments.length && parameterizedType != null; i2++) {
                    Type type3 = actualTypeArguments[i2];
                    if (type3 instanceof TypeVariable) {
                        TypeVariable typeVariable2 = (TypeVariable) type3;
                        Type[] typeArr2 = typeArr;
                        boolean z2 = z;
                        for (int i3 = 0; i3 < typeVariableArr.length; i3++) {
                            if (typeVariableArr[i3].getName().equals(typeVariable2.getName())) {
                                if (typeArr2 == null) {
                                    typeArr2 = parameterizedType.getActualTypeArguments();
                                }
                                actualTypeArguments[i2] = typeArr2[i3];
                                z2 = true;
                            }
                        }
                        z = z2;
                        typeArr = typeArr2;
                    }
                }
                if (z) {
                    return new c(actualTypeArguments, parameterizedType3.getOwnerType(), parameterizedType3.getRawType());
                }
            }
            return type2;
        }
    }

    @Override // java.lang.Object
    public String toString() {
        return this.a;
    }

    /* renamed from: a */
    public int compareTo(a aVar) {
        int i = this.n;
        int i2 = aVar.n;
        if (i < i2) {
            return -1;
        }
        if (i > i2) {
            return 1;
        }
        return this.a.compareTo(aVar.a);
    }

    public boolean b(a aVar) {
        return aVar == this || compareTo(aVar) == 0;
    }

    public JSONField a() {
        JSONField jSONField = this.o;
        if (jSONField != null) {
            return jSONField;
        }
        return this.p;
    }

    public Object a(Object obj) throws IllegalAccessException, InvocationTargetException {
        if (this.d) {
            return this.c.get(obj);
        }
        return this.b.invoke(obj, new Object[0]);
    }

    public void a(Object obj, Object obj2) throws IllegalAccessException, InvocationTargetException {
        Method method = this.b;
        if (method != null) {
            method.invoke(obj, obj2);
        } else {
            this.c.set(obj, obj2);
        }
    }
}
