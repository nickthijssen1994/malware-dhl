package com.jd.a;

import com.facebook.react.devsupport.StackTraceHelper;
import com.jd.JSONException;
import com.jd.PropertyNamingStrategy;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONObject;
import com.jd.framework.json.anotation.JSONField;
import com.jd.framework.json.anotation.JSONType;
import com.jd.parser.f;
import com.jd.parser.l;
import com.jd.push.common.util.DateUtils;
import com.jd.serializer.SerializerFeature;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.AccessControlException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class d {
    public static boolean a;
    private static boolean b;
    private static volatile Class c;
    private static volatile boolean d;
    private static volatile boolean e;
    private static volatile Constructor f;
    private static volatile Method g;
    private static volatile Method h;
    private static volatile Method i;
    private static volatile boolean j;
    private static volatile Map<Class, String[]> k;
    private static volatile boolean l;
    private static ConcurrentMap<String, Class<?>> m = new ConcurrentHashMap();

    public static boolean a(Class cls) {
        if (c == null && !d) {
            try {
                c = Class.forName("kotlin.Metadata");
            } catch (Throwable unused) {
                d = true;
            }
        }
        if (c == null) {
            return false;
        }
        return cls.isAnnotationPresent(c);
    }

    private static boolean a(Class cls, String str) {
        String[] strArr;
        if (k == null && !l) {
            try {
                HashMap hashMap = new HashMap();
                hashMap.put(Class.forName("kotlin.ranges.CharRange"), new String[]{"getEndInclusive", "isEmpty"});
                hashMap.put(Class.forName("kotlin.ranges.IntRange"), new String[]{"getEndInclusive", "isEmpty"});
                hashMap.put(Class.forName("kotlin.ranges.LongRange"), new String[]{"getEndInclusive", "isEmpty"});
                hashMap.put(Class.forName("kotlin.ranges.ClosedFloatRange"), new String[]{"getEndInclusive", "isEmpty"});
                hashMap.put(Class.forName("kotlin.ranges.ClosedDoubleRange"), new String[]{"getEndInclusive", "isEmpty"});
                k = hashMap;
            } catch (Throwable unused) {
                l = true;
            }
        }
        if (k == null || (strArr = k.get(cls)) == null || Arrays.binarySearch(strArr, str) < 0) {
            return false;
        }
        return true;
    }

    public static String[] b(Class cls) {
        if (f == null && !e) {
            try {
                Class<?> cls2 = Class.forName("kotlin.reflect.jvm.internal.KClassImpl");
                f = cls2.getConstructor(Class.class);
                g = cls2.getMethod("getConstructors", new Class[0]);
                h = Class.forName("kotlin.reflect.KFunction").getMethod("getParameters", new Class[0]);
                i = Class.forName("kotlin.reflect.KParameter").getMethod("getName", new Class[0]);
            } catch (Throwable unused) {
                e = true;
            }
        }
        if (f == null || j) {
            return null;
        }
        try {
            Iterator it = ((Iterable) g.invoke(f.newInstance(cls), new Object[0])).iterator();
            Object obj = null;
            while (it.hasNext()) {
                obj = it.next();
                it.hasNext();
            }
            List list = (List) h.invoke(obj, new Object[0]);
            String[] strArr = new String[list.size()];
            for (int i2 = 0; i2 < list.size(); i2++) {
                strArr[i2] = (String) i.invoke(list.get(i2), new Object[0]);
            }
            return strArr;
        } catch (Throwable unused2) {
            j = true;
            return null;
        }
    }

    public static final String a(Object obj) {
        if (obj == null) {
            return null;
        }
        return obj.toString();
    }

    public static final Byte b(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Byte.valueOf(((Number) obj).byteValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str)) {
                return null;
            }
            try {
                return Byte.valueOf(Byte.parseByte(str));
            } catch (NumberFormatException e2) {
                if (!l.a) {
                    return null;
                }
                throw e2;
            }
        } else if (!l.a) {
            return null;
        } else {
            throw new JSONException("can not cast to byte, value : " + obj);
        }
    }

    public static final Character c(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Character) {
            return (Character) obj;
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0) {
                return null;
            }
            if (str.length() == 1) {
                try {
                    return Character.valueOf(str.charAt(0));
                } catch (Exception e2) {
                    if (!l.a) {
                        return null;
                    }
                    throw e2;
                }
            } else if (!l.a) {
                return null;
            } else {
                throw new JSONException("can not cast to char, value : " + obj);
            }
        } else if (!l.a) {
            return null;
        } else {
            throw new JSONException("can not cast to char, value : " + obj);
        }
    }

    public static final Short d(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Short.valueOf(((Number) obj).shortValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str)) {
                return null;
            }
            try {
                return Short.valueOf(Short.parseShort(str));
            } catch (Exception e2) {
                if (!l.a) {
                    return null;
                }
                throw e2;
            }
        } else if (!l.a) {
            return null;
        } else {
            throw new JSONException("can not cast to short, value : " + obj);
        }
    }

    public static final BigDecimal e(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof BigDecimal) {
            return (BigDecimal) obj;
        }
        if (obj instanceof BigInteger) {
            return new BigDecimal((BigInteger) obj);
        }
        String obj2 = obj.toString();
        if (obj2.length() == 0 || "null".equals(obj2)) {
            return null;
        }
        try {
            return new BigDecimal(obj2);
        } catch (NumberFormatException e2) {
            if (!l.a) {
                return null;
            }
            throw e2;
        }
    }

    public static final BigInteger f(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof BigInteger) {
            return (BigInteger) obj;
        }
        if ((obj instanceof Float) || (obj instanceof Double)) {
            return BigInteger.valueOf(((Number) obj).longValue());
        }
        String obj2 = obj.toString();
        if (obj2.length() == 0 || "null".equals(obj2)) {
            return null;
        }
        try {
            return new BigInteger(obj2);
        } catch (NumberFormatException e2) {
            if (!l.a) {
                return null;
            }
            throw e2;
        }
    }

    public static final Float g(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Float.valueOf(((Number) obj).floatValue());
        }
        if (obj instanceof String) {
            String obj2 = obj.toString();
            if (obj2.length() == 0 || "null".equals(obj2)) {
                return null;
            }
            try {
                return Float.valueOf(Float.parseFloat(obj2));
            } catch (NumberFormatException e2) {
                if (!l.a) {
                    return null;
                }
                throw e2;
            }
        } else if (!l.a) {
            return null;
        } else {
            throw new JSONException("can not cast to float, value : " + obj);
        }
    }

    public static final Double h(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Double.valueOf(((Number) obj).doubleValue());
        }
        if (obj instanceof String) {
            String obj2 = obj.toString();
            if (obj2.length() == 0 || "null".equals(obj2)) {
                return null;
            }
            try {
                return Double.valueOf(Double.parseDouble(obj2));
            } catch (NumberFormatException e2) {
                if (!l.a) {
                    return null;
                }
                throw e2;
            }
        } else if (!l.a) {
            return null;
        } else {
            throw new JSONException("can not cast to double, value : " + obj);
        }
    }

    public static final Date i(Object obj) {
        String str;
        if (obj == null) {
            return null;
        }
        if (obj instanceof Calendar) {
            return ((Calendar) obj).getTime();
        }
        if (obj instanceof Date) {
            return (Date) obj;
        }
        long j2 = -1;
        if (obj instanceof Number) {
            j2 = ((Number) obj).longValue();
        }
        if (obj instanceof String) {
            String str2 = (String) obj;
            if (str2.indexOf(45) != -1) {
                if (str2.length() == JDJSON.DEFFAULT_DATE_FORMAT.length()) {
                    str = JDJSON.DEFFAULT_DATE_FORMAT;
                } else if (str2.length() == 10) {
                    str = DateUtils.DATE_FORMAT;
                } else if (str2.length() == 19) {
                    str = DateUtils.TIME_FORMAT;
                } else {
                    str = (str2.length() == 29 && str2.charAt(26) == ':' && str2.charAt(28) == '0') ? "yyyy-MM-dd'T'HH:mm:ss.SSSXXX" : "yyyy-MM-dd HH:mm:ss.SSS";
                }
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(str, JDJSON.defaultLocale);
                simpleDateFormat.setTimeZone(JDJSON.defaultTimeZone);
                try {
                    return simpleDateFormat.parse(str2);
                } catch (ParseException unused) {
                    throw new JSONException("can not cast to Date, value : " + str2);
                }
            } else if (str2.length() == 0 || "null".equals(str2)) {
                return null;
            } else {
                j2 = Long.parseLong(str2);
            }
        }
        if (j2 >= 0) {
            return new Date(j2);
        }
        throw new JSONException("can not cast to Date, value : " + obj);
    }

    public static final Long j(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Number) {
            return Long.valueOf(((Number) obj).longValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str)) {
                return null;
            }
            try {
                return Long.valueOf(Long.parseLong(str));
            } catch (NumberFormatException unused) {
                com.jd.parser.d dVar = new com.jd.parser.d(str);
                Calendar calendar = dVar.b(false) ? dVar.o : null;
                dVar.b();
                if (calendar != null) {
                    return Long.valueOf(calendar.getTimeInMillis());
                }
            }
        }
        if (!l.a) {
            return null;
        }
        throw new JSONException("can not cast to long, value : " + obj);
    }

    public static final Integer k(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Integer) {
            return (Integer) obj;
        }
        if (obj instanceof Number) {
            return Integer.valueOf(((Number) obj).intValue());
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str)) {
                return null;
            }
            try {
                return Integer.valueOf(Integer.parseInt(str));
            } catch (NumberFormatException e2) {
                if (!l.a) {
                    return null;
                }
                throw e2;
            }
        } else if (!l.a) {
            return null;
        } else {
            throw new JSONException("can not cast to int, value : " + obj);
        }
    }

    public static final byte[] l(Object obj) {
        if (obj instanceof byte[]) {
            return (byte[]) obj;
        }
        if (obj instanceof String) {
            String str = (String) obj;
            return com.jd.parser.d.a(str, 0, str.length());
        }
        throw new JSONException("can not cast to int, value : " + obj);
    }

    public static final Boolean m(Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof Boolean) {
            return (Boolean) obj;
        }
        if (obj instanceof Number) {
            boolean z = true;
            if (((Number) obj).intValue() != 1) {
                z = false;
            }
            return Boolean.valueOf(z);
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str)) {
                return null;
            }
            if ("true".equalsIgnoreCase(str) || "1".equals(str)) {
                return Boolean.TRUE;
            }
            if ("false".equalsIgnoreCase(str) || "0".equals(str)) {
                return Boolean.FALSE;
            }
        }
        if (!l.a) {
            return null;
        }
        throw new JSONException("can not cast to boolean, value : " + obj);
    }

    public static final <T> T a(Object obj, Class<T> cls) {
        return (T) a(obj, (Class<Object>) cls, l.b);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T a(Object obj, Class<T> cls, l lVar) {
        T t;
        if (obj == 0) {
            return null;
        }
        if (cls == null) {
            throw new IllegalArgumentException("clazz is null");
        } else if (cls == obj.getClass()) {
            return obj;
        } else {
            if (!(obj instanceof Map)) {
                int i2 = 0;
                if (cls.isArray()) {
                    if (obj instanceof Collection) {
                        Collection<Object> collection = (Collection) obj;
                        T t2 = (T) Array.newInstance(cls.getComponentType(), collection.size());
                        for (Object obj2 : collection) {
                            Array.set(t2, i2, a(obj2, (Class<Object>) cls.getComponentType(), lVar));
                            i2++;
                        }
                        return t2;
                    } else if (cls == byte[].class) {
                        return (T) l(obj);
                    }
                }
                if (cls.isAssignableFrom(obj.getClass())) {
                    return obj;
                }
                if (cls == Boolean.TYPE || cls == Boolean.class) {
                    return (T) m(obj);
                }
                if (cls == Byte.TYPE || cls == Byte.class) {
                    return (T) b(obj);
                }
                if ((cls == Character.TYPE || cls == Character.class) && (obj instanceof String)) {
                    String str = (String) obj;
                    if (str.length() == 1) {
                        return (T) Character.valueOf(str.charAt(0));
                    }
                }
                if (cls == Short.TYPE || cls == Short.class) {
                    return (T) d(obj);
                }
                if (cls == Integer.TYPE || cls == Integer.class) {
                    return (T) k(obj);
                }
                if (cls == Long.TYPE || cls == Long.class) {
                    return (T) j(obj);
                }
                if (cls == Float.TYPE || cls == Float.class) {
                    return (T) g(obj);
                }
                if (cls == Double.TYPE || cls == Double.class) {
                    return (T) h(obj);
                }
                if (cls == String.class) {
                    return (T) a(obj);
                }
                if (cls == BigDecimal.class) {
                    return (T) e(obj);
                }
                if (cls == BigInteger.class) {
                    return (T) f(obj);
                }
                if (cls == Date.class) {
                    return (T) i(obj);
                }
                if (cls.isEnum()) {
                    return (T) b(obj, cls, lVar);
                }
                if (Calendar.class.isAssignableFrom(cls)) {
                    Date i3 = i(obj);
                    if (cls == Calendar.class) {
                        t = (T) Calendar.getInstance(JDJSON.defaultTimeZone, JDJSON.defaultLocale);
                    } else {
                        try {
                            t = (T) ((Calendar) cls.newInstance());
                        } catch (Exception e2) {
                            throw new JSONException("can not cast to : " + cls.getName(), e2);
                        }
                    }
                    ((Calendar) t).setTime(i3);
                    return t;
                }
                if (obj instanceof String) {
                    String str2 = (String) obj;
                    if (str2.length() == 0 || "null".equals(str2)) {
                        return null;
                    }
                    if (cls == Currency.class) {
                        return (T) Currency.getInstance(str2);
                    }
                }
                throw new JSONException("can not cast to : " + cls.getName());
            } else if (cls == Map.class) {
                return obj;
            } else {
                Map map = (Map) obj;
                if (cls != Object.class || map.containsKey(JDJSON.DEFAULT_TYPE_KEY)) {
                    return (T) a((Map<String, Object>) map, (Class<Object>) cls, lVar);
                }
                return obj;
            }
        }
    }

    public static final <T> T b(Object obj, Class<T> cls, l lVar) {
        try {
            if (obj instanceof String) {
                String str = (String) obj;
                if (str.length() == 0) {
                    return null;
                }
                return (T) Enum.valueOf(cls, str);
            }
            if (obj instanceof Number) {
                int intValue = ((Number) obj).intValue();
                T[] enumConstants = cls.getEnumConstants();
                if (intValue < enumConstants.length) {
                    return enumConstants[intValue];
                }
            }
            throw new JSONException("can not cast to : " + cls.getName());
        } catch (Exception e2) {
            throw new JSONException("can not cast to : " + cls.getName(), e2);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T a(Object obj, Type type, l lVar) {
        if (obj == 0) {
            return null;
        }
        if (type instanceof Class) {
            return (T) a(obj, (Class<Object>) ((Class) type), lVar);
        }
        if (type instanceof ParameterizedType) {
            return (T) a(obj, (ParameterizedType) type, lVar);
        }
        if (obj instanceof String) {
            String str = (String) obj;
            if (str.length() == 0 || "null".equals(str)) {
                return null;
            }
        }
        if (type instanceof TypeVariable) {
            return obj;
        }
        throw new JSONException("can not cast to : " + type);
    }

    /* JADX WARN: Type inference failed for: r7v2, types: [T, java.util.Map, java.util.HashMap] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <T> T a(java.lang.Object r6, java.lang.reflect.ParameterizedType r7, com.jd.parser.l r8) {
        /*
            java.lang.reflect.Type r0 = r7.getRawType()
            java.lang.Class<java.util.Set> r1 = java.util.Set.class
            r2 = 0
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.HashSet> r1 = java.util.HashSet.class
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.TreeSet> r1 = java.util.TreeSet.class
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.List> r1 = java.util.List.class
            if (r0 == r1) goto L_0x0019
            java.lang.Class<java.util.ArrayList> r1 = java.util.ArrayList.class
            if (r0 != r1) goto L_0x005a
        L_0x0019:
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            r1 = r1[r2]
            boolean r3 = r6 instanceof java.lang.Iterable
            if (r3 == 0) goto L_0x005a
            java.lang.Class<java.util.Set> r7 = java.util.Set.class
            if (r0 == r7) goto L_0x003c
            java.lang.Class<java.util.HashSet> r7 = java.util.HashSet.class
            if (r0 != r7) goto L_0x002c
            goto L_0x003c
        L_0x002c:
            java.lang.Class<java.util.TreeSet> r7 = java.util.TreeSet.class
            if (r0 != r7) goto L_0x0036
            java.util.TreeSet r7 = new java.util.TreeSet
            r7.<init>()
            goto L_0x0041
        L_0x0036:
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            goto L_0x0041
        L_0x003c:
            java.util.HashSet r7 = new java.util.HashSet
            r7.<init>()
        L_0x0041:
            java.lang.Iterable r6 = (java.lang.Iterable) r6
            java.util.Iterator r6 = r6.iterator()
        L_0x0047:
            boolean r0 = r6.hasNext()
            if (r0 == 0) goto L_0x0059
            java.lang.Object r0 = r6.next()
            java.lang.Object r0 = a(r0, r1, r8)
            r7.add(r0)
            goto L_0x0047
        L_0x0059:
            return r7
        L_0x005a:
            java.lang.Class<java.util.Map> r1 = java.util.Map.class
            r3 = 1
            if (r0 == r1) goto L_0x0063
            java.lang.Class<java.util.HashMap> r1 = java.util.HashMap.class
            if (r0 != r1) goto L_0x00a3
        L_0x0063:
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            r1 = r1[r2]
            java.lang.reflect.Type[] r4 = r7.getActualTypeArguments()
            r4 = r4[r3]
            boolean r5 = r6 instanceof java.util.Map
            if (r5 == 0) goto L_0x00a3
            java.util.HashMap r7 = new java.util.HashMap
            r7.<init>()
            java.util.Map r6 = (java.util.Map) r6
            java.util.Set r6 = r6.entrySet()
            java.util.Iterator r6 = r6.iterator()
        L_0x0082:
            boolean r0 = r6.hasNext()
            if (r0 == 0) goto L_0x00a2
            java.lang.Object r0 = r6.next()
            java.util.Map$Entry r0 = (java.util.Map.Entry) r0
            java.lang.Object r2 = r0.getKey()
            java.lang.Object r2 = a(r2, r1, r8)
            java.lang.Object r0 = r0.getValue()
            java.lang.Object r0 = a(r0, r4, r8)
            r7.put(r2, r0)
            goto L_0x0082
        L_0x00a2:
            return r7
        L_0x00a3:
            boolean r1 = r6 instanceof java.lang.String
            if (r1 == 0) goto L_0x00ba
            r1 = r6
            java.lang.String r1 = (java.lang.String) r1
            int r4 = r1.length()
            if (r4 == 0) goto L_0x00b8
            java.lang.String r4 = "null"
            boolean r1 = r4.equals(r1)
            if (r1 == 0) goto L_0x00ba
        L_0x00b8:
            r6 = 0
            return r6
        L_0x00ba:
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            int r1 = r1.length
            if (r1 != r3) goto L_0x00d0
            java.lang.reflect.Type[] r1 = r7.getActualTypeArguments()
            r1 = r1[r2]
            boolean r1 = r1 instanceof java.lang.reflect.WildcardType
            if (r1 == 0) goto L_0x00d0
            java.lang.Object r6 = a(r6, r0, r8)
            return r6
        L_0x00d0:
            com.jd.JSONException r6 = new com.jd.JSONException
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r0 = "can not cast to : "
            r8.append(r0)
            r8.append(r7)
            java.lang.String r7 = r8.toString()
            r6.<init>(r7)
            throw r6
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.a.d.a(java.lang.Object, java.lang.reflect.ParameterizedType, com.jd.parser.l):java.lang.Object");
    }

    public static final <T> T a(Map<String, Object> map, Class<T> cls, l lVar) {
        JDJSONObject jDJSONObject;
        int i2 = 0;
        try {
            if (cls == StackTraceElement.class) {
                String str = (String) map.get("className");
                String str2 = (String) map.get("methodName");
                String str3 = (String) map.get("fileName");
                Number number = (Number) map.get(StackTraceHelper.LINE_NUMBER_KEY);
                if (number != null) {
                    i2 = number.intValue();
                }
                return (T) new StackTraceElement(str, str2, str3, i2);
            }
            Object obj = map.get(JDJSON.DEFAULT_TYPE_KEY);
            f fVar = null;
            if (obj instanceof String) {
                String str4 = (String) obj;
                Class<?> a2 = a(str4, (ClassLoader) null);
                if (a2 == null) {
                    throw new ClassNotFoundException(str4 + " not found");
                } else if (!a2.equals(cls)) {
                    return (T) a(map, (Class<Object>) a2, lVar);
                }
            }
            if (cls.isInterface()) {
                if (map instanceof JDJSONObject) {
                    jDJSONObject = (JDJSONObject) map;
                } else {
                    jDJSONObject = new JDJSONObject(map);
                }
                if (lVar == null) {
                    lVar = l.a();
                }
                if (lVar.a(cls) != null) {
                    return (T) JDJSON.parseObject(JDJSON.toJSONString(jDJSONObject), cls);
                }
                return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{cls}, jDJSONObject);
            } else if (cls == String.class && (map instanceof JDJSONObject)) {
                return (T) map.toString();
            } else {
                if (lVar == null) {
                    lVar = l.b;
                }
                com.jd.parser.a.f a3 = lVar.a(cls);
                if (a3 instanceof f) {
                    fVar = (f) a3;
                }
                if (fVar != null) {
                    return (T) fVar.a(map, lVar);
                }
                throw new JSONException("can not get javaBeanDeserializer");
            }
        } catch (Exception e2) {
            throw new JSONException(e2.getMessage(), e2);
        }
    }

    static {
        m.put("byte", Byte.TYPE);
        m.put("short", Short.TYPE);
        m.put("int", Integer.TYPE);
        m.put("long", Long.TYPE);
        m.put("float", Float.TYPE);
        m.put("double", Double.TYPE);
        m.put("boolean", Boolean.TYPE);
        m.put("char", Character.TYPE);
        m.put("[byte", byte[].class);
        m.put("[short", short[].class);
        m.put("[int", int[].class);
        m.put("[long", long[].class);
        m.put("[float", float[].class);
        m.put("[double", double[].class);
        m.put("[boolean", boolean[].class);
        m.put("[char", char[].class);
        m.put("[B", byte[].class);
        m.put("[S", short[].class);
        m.put("[I", int[].class);
        m.put("[J", long[].class);
        m.put("[F", float[].class);
        m.put("[D", double[].class);
        m.put("[C", char[].class);
        m.put("[Z", boolean[].class);
        m.put(HashMap.class.getName(), HashMap.class);
    }

    public static Class<?> a(String str, ClassLoader classLoader) {
        Exception e2;
        if (str == null || str.length() == 0) {
            return null;
        }
        if (str.length() < 256) {
            Class<?> cls = m.get(str);
            if (cls != null) {
                return cls;
            }
            if (str.charAt(0) == '[') {
                return Array.newInstance(a(str.substring(1), classLoader), 0).getClass();
            }
            if (str.startsWith("L") && str.endsWith(";")) {
                return a(str.substring(1, str.length() - 1), classLoader);
            }
            if (classLoader != null) {
                try {
                    cls = classLoader.loadClass(str);
                    m.put(str, cls);
                    return cls;
                } catch (Exception e3) {
                    e3.printStackTrace();
                }
            }
            try {
                ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
                if (!(contextClassLoader == null || contextClassLoader == classLoader)) {
                    Class<?> loadClass = contextClassLoader.loadClass(str);
                    try {
                        m.put(str, loadClass);
                        return loadClass;
                    } catch (Exception e4) {
                        e2 = e4;
                        cls = loadClass;
                        e2.printStackTrace();
                        cls = Class.forName(str);
                        m.put(str, cls);
                        return cls;
                    }
                }
            } catch (Exception e5) {
                e2 = e5;
            }
            try {
                cls = Class.forName(str);
                m.put(str, cls);
                return cls;
            } catch (Exception e6) {
                e6.printStackTrace();
                return cls;
            }
        } else {
            throw new JSONException("className too long. " + str);
        }
    }

    public static List<a> a(Class<?> cls, int i2, boolean z, JSONType jSONType, Map<String, String> map, boolean z2, boolean z3, boolean z4, PropertyNamingStrategy propertyNamingStrategy) {
        Field[] fieldArr;
        Map<String, String> map2;
        LinkedHashMap linkedHashMap;
        boolean z5;
        String[] strArr;
        int i3;
        int i4;
        PropertyNamingStrategy propertyNamingStrategy2;
        short[] sArr;
        String[] strArr2;
        Annotation[][] annotationArr;
        Constructor<?>[] constructorArr;
        JSONField jSONField;
        Field[] fieldArr2;
        HashMap hashMap;
        Map<String, String> map3;
        LinkedHashMap linkedHashMap2;
        Field[] fieldArr3;
        int i5;
        int i6;
        LinkedHashMap linkedHashMap3;
        HashMap hashMap2;
        Method method;
        String str;
        char c2;
        Field[] fieldArr4;
        LinkedHashMap linkedHashMap4;
        String str2;
        JSONField jSONField2;
        PropertyNamingStrategy propertyNamingStrategy3;
        int i7;
        int i8;
        Field[] fieldArr5;
        String str3;
        String str4;
        JSONField jSONField3;
        int i9;
        LinkedHashMap linkedHashMap5;
        String str5;
        String str6;
        Annotation[][] annotationArr2;
        Constructor<?>[] constructorArr2;
        String[] strArr3;
        int i10;
        int i11 = i2;
        JSONType jSONType2 = jSONType;
        Map<String, String> map4 = map;
        PropertyNamingStrategy propertyNamingStrategy4 = propertyNamingStrategy;
        LinkedHashMap linkedHashMap6 = new LinkedHashMap();
        HashMap hashMap3 = new HashMap();
        Field[] declaredFields = cls.getDeclaredFields();
        if (!z) {
            boolean a2 = a((Class) cls);
            ArrayList<Method> arrayList = new ArrayList();
            Class<?> cls2 = cls;
            while (cls2 != null && cls2 != Object.class) {
                Method[] declaredMethods = cls2.getDeclaredMethods();
                for (Method method2 : declaredMethods) {
                    int modifiers = method2.getModifiers();
                    if ((modifiers & 8) == 0 && (modifiers & 2) == 0 && (modifiers & 256) == 0 && (modifiers & 4) == 0 && !method2.getReturnType().equals(Void.TYPE) && method2.getParameterTypes().length == 0 && method2.getReturnType() != ClassLoader.class && method2.getDeclaringClass() != Object.class) {
                        arrayList.add(method2);
                    }
                }
                cls2 = cls2.getSuperclass();
            }
            Annotation[][] annotationArr3 = null;
            Constructor<?>[] constructorArr3 = null;
            String[] strArr4 = null;
            short[] sArr2 = null;
            for (Method method3 : arrayList) {
                String name = method3.getName();
                if (!name.equals("getMetaClass") || !method3.getReturnType().getName().equals("groovy.lang.MetaClass")) {
                    JSONField jSONField4 = z3 ? (JSONField) method3.getAnnotation(JSONField.class) : null;
                    if (jSONField4 == null && z3) {
                        jSONField4 = a(cls, method3);
                    }
                    if (!a2 || !a(cls, name)) {
                        if (jSONField4 != null || !a2) {
                            strArr2 = strArr4;
                            sArr = sArr2;
                            jSONField = jSONField4;
                            annotationArr = annotationArr3;
                            constructorArr = constructorArr3;
                        } else {
                            if (constructorArr3 == null) {
                                Constructor<?>[] declaredConstructors = cls.getDeclaredConstructors();
                                annotationArr2 = annotationArr3;
                                if (declaredConstructors.length == 1) {
                                    Annotation[][] parameterAnnotations = declaredConstructors[0].getParameterAnnotations();
                                    String[] b2 = b((Class) cls);
                                    if (b2 != null) {
                                        String[] strArr5 = new String[b2.length];
                                        constructorArr2 = declaredConstructors;
                                        System.arraycopy(b2, 0, strArr5, 0, b2.length);
                                        Arrays.sort(strArr5);
                                        short[] sArr3 = new short[b2.length];
                                        annotationArr2 = parameterAnnotations;
                                        for (short s = 0; s < b2.length; s = (short) (s + 1)) {
                                            sArr3[Arrays.binarySearch(strArr5, b2[s])] = s;
                                        }
                                        strArr4 = strArr5;
                                        sArr2 = sArr3;
                                    } else {
                                        constructorArr2 = declaredConstructors;
                                        annotationArr2 = parameterAnnotations;
                                        strArr4 = b2;
                                    }
                                } else {
                                    constructorArr2 = declaredConstructors;
                                }
                            } else {
                                annotationArr2 = annotationArr3;
                                constructorArr2 = constructorArr3;
                            }
                            if (strArr4 == null || sArr2 == null || !name.startsWith("get")) {
                                strArr3 = strArr4;
                            } else {
                                String a3 = a(name.substring(3));
                                int binarySearch = Arrays.binarySearch(strArr4, a3);
                                if (binarySearch < 0) {
                                    i10 = binarySearch;
                                    int i12 = 0;
                                    while (true) {
                                        if (i12 >= strArr4.length) {
                                            break;
                                        } else if (a3.equalsIgnoreCase(strArr4[i12])) {
                                            i10 = i12;
                                            break;
                                        } else {
                                            i12++;
                                        }
                                    }
                                } else {
                                    i10 = binarySearch;
                                }
                                if (i10 >= 0) {
                                    Annotation[] annotationArr4 = annotationArr2[sArr2[i10]];
                                    if (annotationArr4 != null) {
                                        int length = annotationArr4.length;
                                        int i13 = 0;
                                        while (i13 < length) {
                                            Annotation annotation = annotationArr4[i13];
                                            if (annotation instanceof JSONField) {
                                                jSONField = (JSONField) annotation;
                                                sArr = sArr2;
                                                strArr2 = strArr4;
                                                annotationArr = annotationArr2;
                                                constructorArr = constructorArr2;
                                                break;
                                            }
                                            i13++;
                                            strArr4 = strArr4;
                                            annotationArr4 = annotationArr4;
                                        }
                                        strArr3 = strArr4;
                                    } else {
                                        strArr3 = strArr4;
                                    }
                                } else {
                                    strArr3 = strArr4;
                                }
                            }
                            sArr = sArr2;
                            strArr2 = strArr3;
                            annotationArr = annotationArr2;
                            constructorArr = constructorArr2;
                            jSONField = jSONField4;
                        }
                        if (jSONField != null) {
                            if (!jSONField.serialize()) {
                                fieldArr2 = declaredFields;
                                hashMap = hashMap3;
                                linkedHashMap2 = linkedHashMap6;
                                map3 = map4;
                            } else {
                                i6 = jSONField.ordinal();
                                i5 = SerializerFeature.of(jSONField.serialzeFeatures());
                                if (jSONField.name().length() != 0) {
                                    String name2 = jSONField.name();
                                    if (map4 != null) {
                                        String str7 = map4.get(name2);
                                        if (str7 == null) {
                                            fieldArr2 = declaredFields;
                                            hashMap = hashMap3;
                                            linkedHashMap2 = linkedHashMap6;
                                            map3 = map4;
                                        } else {
                                            str6 = str7;
                                        }
                                    } else {
                                        str6 = name2;
                                    }
                                    a(cls, method3, i11);
                                    hashMap = hashMap3;
                                    linkedHashMap6.put(str6, new a(str6, method3, null, cls, null, i6, i5, jSONField, null, true));
                                    linkedHashMap2 = linkedHashMap6;
                                    map3 = map4;
                                    fieldArr2 = declaredFields;
                                    i11 = i2;
                                } else {
                                    fieldArr3 = declaredFields;
                                    hashMap = hashMap3;
                                    linkedHashMap3 = linkedHashMap6;
                                }
                            }
                            linkedHashMap6 = linkedHashMap2;
                            map4 = map3;
                            constructorArr3 = constructorArr;
                            annotationArr3 = annotationArr;
                            strArr4 = strArr2;
                            sArr2 = sArr;
                            hashMap3 = hashMap;
                            declaredFields = fieldArr2;
                            jSONType2 = jSONType;
                            propertyNamingStrategy4 = propertyNamingStrategy;
                        } else {
                            fieldArr3 = declaredFields;
                            hashMap = hashMap3;
                            linkedHashMap3 = linkedHashMap6;
                            i6 = 0;
                            i5 = 0;
                        }
                        if (name.startsWith("get")) {
                            if (name.length() < 4) {
                                linkedHashMap2 = linkedHashMap3;
                                fieldArr2 = fieldArr3;
                                i11 = i2;
                                map3 = map;
                            } else if (name.equals("getClass")) {
                                linkedHashMap2 = linkedHashMap3;
                                map3 = map4;
                                fieldArr2 = fieldArr3;
                                i11 = i2;
                            } else {
                                char charAt = name.charAt(3);
                                if (Character.isUpperCase(charAt)) {
                                    if (a) {
                                        str4 = a(name.substring(3));
                                    } else {
                                        str4 = Character.toLowerCase(name.charAt(3)) + name.substring(4);
                                    }
                                } else if (charAt == '_') {
                                    str4 = name.substring(4);
                                } else if (charAt == 'f') {
                                    str4 = name.substring(3);
                                } else if (name.length() < 5 || !Character.isUpperCase(name.charAt(4))) {
                                    linkedHashMap2 = linkedHashMap3;
                                    fieldArr2 = fieldArr3;
                                    i11 = i2;
                                    map3 = map;
                                } else {
                                    str4 = a(name.substring(3));
                                }
                                if (a(cls, jSONType2, str4)) {
                                    linkedHashMap2 = linkedHashMap3;
                                    map3 = map4;
                                    fieldArr2 = fieldArr3;
                                    i11 = i2;
                                } else {
                                    Field a4 = a(cls, str4, fieldArr3, hashMap);
                                    if (a4 != null) {
                                        JSONField jSONField5 = z3 ? (JSONField) a4.getAnnotation(JSONField.class) : null;
                                        if (jSONField5 == null) {
                                            jSONField3 = jSONField5;
                                        } else if (!jSONField5.serialize()) {
                                            fieldArr2 = fieldArr3;
                                            hashMap = hashMap;
                                            linkedHashMap2 = linkedHashMap3;
                                            map3 = map4;
                                            i11 = i2;
                                        } else {
                                            int ordinal = jSONField5.ordinal();
                                            int of = SerializerFeature.of(jSONField5.serialzeFeatures());
                                            if (jSONField5.name().length() != 0) {
                                                str4 = jSONField5.name();
                                                if (map4 != null) {
                                                    str4 = map4.get(str4);
                                                    if (str4 == null) {
                                                        fieldArr2 = fieldArr3;
                                                        hashMap = hashMap;
                                                        linkedHashMap2 = linkedHashMap3;
                                                        map3 = map4;
                                                        i11 = i2;
                                                    } else {
                                                        jSONField3 = jSONField5;
                                                        i5 = of;
                                                        i6 = ordinal;
                                                    }
                                                } else {
                                                    jSONField3 = jSONField5;
                                                    i5 = of;
                                                    i6 = ordinal;
                                                }
                                            } else {
                                                jSONField3 = jSONField5;
                                                i5 = of;
                                                i6 = ordinal;
                                            }
                                        }
                                    } else {
                                        jSONField3 = null;
                                    }
                                    if (propertyNamingStrategy4 != null) {
                                        str4 = propertyNamingStrategy4.translate(str4);
                                    }
                                    if (map4 != null) {
                                        String str8 = map4.get(str4);
                                        if (str8 == null) {
                                            fieldArr2 = fieldArr3;
                                            hashMap = hashMap;
                                            linkedHashMap2 = linkedHashMap3;
                                            map3 = map4;
                                            i11 = i2;
                                        } else {
                                            str5 = str8;
                                            linkedHashMap5 = linkedHashMap3;
                                            i9 = i2;
                                        }
                                    } else {
                                        str5 = str4;
                                        linkedHashMap5 = linkedHashMap3;
                                        i9 = i2;
                                    }
                                    a(cls, method3, i9);
                                    fieldArr4 = fieldArr3;
                                    str = name;
                                    method = method3;
                                    hashMap2 = hashMap;
                                    c2 = 'f';
                                    linkedHashMap4 = linkedHashMap5;
                                    linkedHashMap4.put(str5, new a(str5, method3, a4, cls, null, i6, i5, jSONField, jSONField3, z4));
                                }
                            }
                            linkedHashMap6 = linkedHashMap2;
                            map4 = map3;
                            constructorArr3 = constructorArr;
                            annotationArr3 = annotationArr;
                            strArr4 = strArr2;
                            sArr2 = sArr;
                            hashMap3 = hashMap;
                            declaredFields = fieldArr2;
                            jSONType2 = jSONType;
                            propertyNamingStrategy4 = propertyNamingStrategy;
                        } else {
                            str = name;
                            method = method3;
                            linkedHashMap4 = linkedHashMap3;
                            fieldArr4 = fieldArr3;
                            hashMap2 = hashMap;
                            c2 = 'f';
                        }
                        if (!str.startsWith("is")) {
                            linkedHashMap2 = linkedHashMap4;
                            fieldArr2 = fieldArr4;
                            hashMap = hashMap2;
                            i11 = i2;
                            map3 = map;
                        } else if (str.length() < 3) {
                            linkedHashMap2 = linkedHashMap4;
                            fieldArr2 = fieldArr4;
                            hashMap = hashMap2;
                            i11 = i2;
                            map3 = map;
                        } else {
                            char charAt2 = str.charAt(2);
                            if (Character.isUpperCase(charAt2)) {
                                if (a) {
                                    str2 = a(str.substring(2));
                                } else {
                                    str2 = Character.toLowerCase(str.charAt(2)) + str.substring(3);
                                }
                            } else if (charAt2 == '_') {
                                str2 = str.substring(3);
                            } else if (charAt2 == c2) {
                                str2 = str.substring(2);
                            } else {
                                linkedHashMap2 = linkedHashMap4;
                                fieldArr2 = fieldArr4;
                                hashMap = hashMap2;
                                i11 = i2;
                                map3 = map;
                            }
                            if (a(cls, jSONType2, str2)) {
                                linkedHashMap2 = linkedHashMap4;
                                fieldArr2 = fieldArr4;
                                hashMap = hashMap2;
                                i11 = i2;
                                map3 = map;
                            } else {
                                Field a5 = a(cls, str2, fieldArr4, hashMap2);
                                Field a6 = a5 == null ? a(cls, str, fieldArr4, hashMap2) : a5;
                                if (a6 != null) {
                                    JSONField jSONField6 = z3 ? (JSONField) a6.getAnnotation(JSONField.class) : null;
                                    if (jSONField6 == null) {
                                        map3 = map;
                                        i8 = i6;
                                        i7 = i5;
                                        propertyNamingStrategy3 = propertyNamingStrategy;
                                        jSONField2 = jSONField6;
                                    } else if (!jSONField6.serialize()) {
                                        linkedHashMap2 = linkedHashMap4;
                                        fieldArr2 = fieldArr4;
                                        hashMap = hashMap2;
                                        i11 = i2;
                                        map3 = map;
                                    } else {
                                        int ordinal2 = jSONField6.ordinal();
                                        int of2 = SerializerFeature.of(jSONField6.serialzeFeatures());
                                        if (jSONField6.name().length() != 0) {
                                            str2 = jSONField6.name();
                                            map3 = map;
                                            if (map3 != null) {
                                                str2 = map3.get(str2);
                                                if (str2 == null) {
                                                    linkedHashMap2 = linkedHashMap4;
                                                    fieldArr2 = fieldArr4;
                                                    hashMap = hashMap2;
                                                    i11 = i2;
                                                } else {
                                                    jSONField2 = jSONField6;
                                                    i8 = ordinal2;
                                                    i7 = of2;
                                                    propertyNamingStrategy3 = propertyNamingStrategy;
                                                }
                                            } else {
                                                jSONField2 = jSONField6;
                                                i8 = ordinal2;
                                                i7 = of2;
                                                propertyNamingStrategy3 = propertyNamingStrategy;
                                            }
                                        } else {
                                            map3 = map;
                                            jSONField2 = jSONField6;
                                            i8 = ordinal2;
                                            i7 = of2;
                                            propertyNamingStrategy3 = propertyNamingStrategy;
                                        }
                                    }
                                } else {
                                    map3 = map;
                                    i8 = i6;
                                    i7 = i5;
                                    propertyNamingStrategy3 = propertyNamingStrategy;
                                    jSONField2 = null;
                                }
                                if (propertyNamingStrategy3 != null) {
                                    str2 = propertyNamingStrategy3.translate(str2);
                                }
                                if (map3 != null) {
                                    String str9 = map3.get(str2);
                                    if (str9 == null) {
                                        linkedHashMap2 = linkedHashMap4;
                                        fieldArr2 = fieldArr4;
                                        hashMap = hashMap2;
                                        i11 = i2;
                                    } else {
                                        str3 = str9;
                                        fieldArr5 = fieldArr4;
                                        i11 = i2;
                                    }
                                } else {
                                    str3 = str2;
                                    fieldArr5 = fieldArr4;
                                    i11 = i2;
                                }
                                a(cls, a6, i11);
                                a(cls, method, i11);
                                hashMap = hashMap2;
                                fieldArr2 = fieldArr5;
                                linkedHashMap2 = linkedHashMap4;
                                linkedHashMap2.put(str3, new a(str3, method, a6, cls, null, i8, i7, jSONField, jSONField2, z4));
                            }
                        }
                        linkedHashMap6 = linkedHashMap2;
                        map4 = map3;
                        constructorArr3 = constructorArr;
                        annotationArr3 = annotationArr;
                        strArr4 = strArr2;
                        sArr2 = sArr;
                        hashMap3 = hashMap;
                        declaredFields = fieldArr2;
                        jSONType2 = jSONType;
                        propertyNamingStrategy4 = propertyNamingStrategy;
                    }
                }
            }
            fieldArr = declaredFields;
            linkedHashMap = linkedHashMap6;
            map2 = map4;
        } else {
            fieldArr = declaredFields;
            linkedHashMap = linkedHashMap6;
            map2 = map4;
        }
        ArrayList<Field> arrayList2 = new ArrayList(fieldArr.length);
        for (Field field : fieldArr) {
            if ((field.getModifiers() & 8) == 0 && !field.getName().equals("this$0") && (field.getModifiers() & 1) != 0) {
                arrayList2.add(field);
            }
        }
        Class<? super Object> superclass = cls.getSuperclass();
        while (superclass != null && superclass != Object.class) {
            Field[] declaredFields2 = superclass.getDeclaredFields();
            for (Field field2 : declaredFields2) {
                if ((field2.getModifiers() & 8) == 0 && (field2.getModifiers() & 1) != 0) {
                    arrayList2.add(field2);
                }
            }
            superclass = superclass.getSuperclass();
        }
        for (Field field3 : arrayList2) {
            JSONField jSONField7 = z3 ? (JSONField) field3.getAnnotation(JSONField.class) : null;
            String name3 = field3.getName();
            if (jSONField7 == null) {
                i3 = 0;
                i4 = 0;
            } else if (jSONField7.serialize()) {
                int ordinal3 = jSONField7.ordinal();
                int of3 = SerializerFeature.of(jSONField7.serialzeFeatures());
                if (jSONField7.name().length() != 0) {
                    name3 = jSONField7.name();
                    i3 = ordinal3;
                    i4 = of3;
                } else {
                    i3 = ordinal3;
                    i4 = of3;
                }
            }
            if (map2 != null) {
                name3 = map2.get(name3);
                if (name3 != null) {
                    propertyNamingStrategy2 = propertyNamingStrategy;
                }
            } else {
                propertyNamingStrategy2 = propertyNamingStrategy;
            }
            String translate = propertyNamingStrategy2 != null ? propertyNamingStrategy2.translate(name3) : name3;
            if (!linkedHashMap.containsKey(translate)) {
                a(cls, field3, i11);
                linkedHashMap.put(translate, new a(translate, null, field3, cls, null, i3, i4, null, jSONField7, z4));
            }
        }
        ArrayList arrayList3 = new ArrayList();
        if (jSONType != null) {
            strArr = jSONType.orders();
            if (strArr != null && strArr.length == linkedHashMap.size()) {
                int length2 = strArr.length;
                int i14 = 0;
                while (true) {
                    if (i14 >= length2) {
                        z5 = true;
                        break;
                    } else if (!linkedHashMap.containsKey(strArr[i14])) {
                        z5 = false;
                        break;
                    } else {
                        i14++;
                    }
                }
            } else {
                z5 = false;
            }
        } else {
            strArr = null;
            z5 = false;
        }
        if (z5) {
            for (String str10 : strArr) {
                arrayList3.add((a) linkedHashMap.get(str10));
            }
        } else {
            for (a aVar : linkedHashMap.values()) {
                arrayList3.add(aVar);
            }
            if (z2) {
                Collections.sort(arrayList3);
            }
        }
        return arrayList3;
    }

    public static JSONField a(Class<?> cls, Method method) {
        boolean z;
        JSONField annotation;
        boolean z2;
        JSONField annotation2;
        for (Class<?> cls2 : cls.getInterfaces()) {
            Method[] methods = cls2.getMethods();
            for (Method method2 : methods) {
                if (method2.getName().equals(method.getName())) {
                    Class<?>[] parameterTypes = method2.getParameterTypes();
                    Class<?>[] parameterTypes2 = method.getParameterTypes();
                    if (parameterTypes.length != parameterTypes2.length) {
                        continue;
                    } else {
                        int i2 = 0;
                        while (true) {
                            if (i2 >= parameterTypes.length) {
                                z2 = true;
                                break;
                            } else if (!parameterTypes[i2].equals(parameterTypes2[i2])) {
                                z2 = false;
                                break;
                            } else {
                                i2++;
                            }
                        }
                        if (z2 && (annotation2 = method2.getAnnotation(JSONField.class)) != null) {
                            return annotation2;
                        }
                    }
                }
            }
        }
        Class<? super Object> superclass = cls.getSuperclass();
        if (superclass != null && Modifier.isAbstract(superclass.getModifiers())) {
            Class<?>[] parameterTypes3 = method.getParameterTypes();
            Method[] methods2 = superclass.getMethods();
            for (Method method3 : methods2) {
                Class<?>[] parameterTypes4 = method3.getParameterTypes();
                if (parameterTypes4.length == parameterTypes3.length && method3.getName().equals(method.getName())) {
                    int i3 = 0;
                    while (true) {
                        if (i3 >= parameterTypes3.length) {
                            z = true;
                            break;
                        } else if (!parameterTypes4[i3].equals(parameterTypes3[i3])) {
                            z = false;
                            break;
                        } else {
                            i3++;
                        }
                    }
                    if (z && (annotation = method3.getAnnotation(JSONField.class)) != null) {
                        return annotation;
                    }
                }
            }
        }
        return null;
    }

    private static boolean a(Class<?> cls, JSONType jSONType, String str) {
        if (!(jSONType == null || jSONType.ignores() == null)) {
            for (String str2 : jSONType.ignores()) {
                if (str.equalsIgnoreCase(str2)) {
                    return true;
                }
            }
        }
        Class<? super Object> superclass = cls.getSuperclass();
        if (superclass == Object.class || superclass == null || !a(superclass, superclass.getAnnotation(JSONType.class), str)) {
            return false;
        }
        return true;
    }

    public static boolean a(Type type) {
        Type genericSuperclass;
        if (type instanceof ParameterizedType) {
            return true;
        }
        if (!(type instanceof Class) || (genericSuperclass = ((Class) type).getGenericSuperclass()) == Object.class || !a(genericSuperclass)) {
            return false;
        }
        return true;
    }

    public static Type b(Type type) {
        return type instanceof Class ? b(((Class) type).getGenericSuperclass()) : type;
    }

    public static Class<?> c(Type type) {
        if (type.getClass() == Class.class) {
            return (Class) type;
        }
        if (type instanceof ParameterizedType) {
            return c(((ParameterizedType) type).getRawType());
        }
        if (type instanceof TypeVariable) {
            return (Class) ((TypeVariable) type).getBounds()[0];
        }
        if (!(type instanceof WildcardType)) {
            return Object.class;
        }
        Type[] upperBounds = ((WildcardType) type).getUpperBounds();
        if (upperBounds.length == 1) {
            return c(upperBounds[0]);
        }
        return Object.class;
    }

    public static String a(String str) {
        if (str == null || str.length() == 0 || (str.length() > 1 && Character.isUpperCase(str.charAt(1)) && Character.isUpperCase(str.charAt(0)))) {
            return str;
        }
        char[] charArray = str.toCharArray();
        charArray[0] = Character.toLowerCase(charArray[0]);
        return new String(charArray);
    }

    public static boolean a(Class<?> cls, Member member, int i2) {
        if (member == null || !b) {
            return false;
        }
        Class<? super Object> superclass = cls.getSuperclass();
        if ((superclass == null || superclass == Object.class) && (member.getModifiers() & 1) != 0 && (i2 & 1) != 0) {
            return false;
        }
        try {
            ((AccessibleObject) member).setAccessible(true);
            return true;
        } catch (AccessControlException unused) {
            b = false;
            return false;
        }
    }

    public static Field a(Class<?> cls, String str, Field[] fieldArr, Map<Class<?>, Field[]> map) {
        Field b2 = b(cls, str, fieldArr, map);
        if (b2 == null) {
            b2 = b(cls, "_" + str, fieldArr, map);
        }
        if (b2 == null) {
            b2 = b(cls, "m_" + str, fieldArr, map);
        }
        if (b2 != null) {
            return b2;
        }
        return b(cls, "m" + str.substring(0, 1).toUpperCase() + str.substring(1), fieldArr, map);
    }

    private static Field b(Class<?> cls, String str, Field[] fieldArr, Map<Class<?>, Field[]> map) {
        char charAt;
        char charAt2;
        for (Field field : fieldArr) {
            String name = field.getName();
            if (str.equals(name)) {
                return field;
            }
            if (str.length() > 2 && (charAt = str.charAt(0)) >= 'a' && charAt <= 'z' && (charAt2 = str.charAt(1)) >= 'A' && charAt2 <= 'Z' && str.equalsIgnoreCase(name)) {
                return field;
            }
        }
        Class<? super Object> superclass = cls.getSuperclass();
        Field[] fieldArr2 = null;
        if (superclass == null || superclass == Object.class) {
            return null;
        }
        if (map != null) {
            fieldArr2 = map.get(superclass);
        }
        if (fieldArr2 == null) {
            fieldArr2 = superclass.getDeclaredFields();
            if (map != null) {
                map.put(superclass, fieldArr2);
            }
        }
        return a(superclass, str, fieldArr2, map);
    }

    public static Type d(Type type) {
        Type type2;
        if (type instanceof ParameterizedType) {
            type2 = ((ParameterizedType) type).getActualTypeArguments()[0];
            if (type2 instanceof WildcardType) {
                Type[] upperBounds = ((WildcardType) type2).getUpperBounds();
                if (upperBounds.length == 1) {
                    type2 = upperBounds[0];
                }
            }
        } else {
            if (type instanceof Class) {
                Class cls = (Class) type;
                if (!cls.getName().startsWith("java.")) {
                    type2 = d(cls.getGenericSuperclass());
                }
            }
            type2 = null;
        }
        return type2 == null ? Object.class : type2;
    }

    public static Object c(Class<?> cls) {
        if (cls == Byte.TYPE) {
            return (byte) 0;
        }
        if (cls == Short.TYPE) {
            return (short) 0;
        }
        if (cls == Integer.TYPE) {
            return 0;
        }
        if (cls == Long.TYPE) {
            return 0L;
        }
        if (cls == Float.TYPE) {
            return Float.valueOf(0.0f);
        }
        if (cls == Double.TYPE) {
            return Double.valueOf(0.0d);
        }
        if (cls == Boolean.TYPE) {
            return Boolean.FALSE;
        }
        return cls == Character.TYPE ? '0' : null;
    }

    public static boolean a(Type[] typeArr, TypeVariable[] typeVariableArr, Type[] typeArr2) {
        if (typeArr2 == null || typeVariableArr.length == 0) {
            return false;
        }
        boolean z = false;
        for (int i2 = 0; i2 < typeArr.length; i2++) {
            Type type = typeArr[i2];
            if (type instanceof ParameterizedType) {
                ParameterizedType parameterizedType = (ParameterizedType) type;
                Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
                if (a(actualTypeArguments, typeVariableArr, typeArr2)) {
                    typeArr[i2] = new c(actualTypeArguments, parameterizedType.getOwnerType(), parameterizedType.getRawType());
                    z = true;
                }
            } else if (type instanceof TypeVariable) {
                boolean z2 = z;
                for (int i3 = 0; i3 < typeVariableArr.length; i3++) {
                    if (type.equals(typeVariableArr[i3])) {
                        typeArr[i2] = typeArr2[i3];
                        z2 = true;
                    }
                }
                z = z2;
            }
        }
        return z;
    }

    public static long b(String str) {
        long j2 = -3750763034362895579L;
        for (int i2 = 0; i2 < str.length(); i2++) {
            char charAt = str.charAt(i2);
            if (!(charAt == '_' || charAt == '-')) {
                if (charAt >= 'A' && charAt <= 'Z') {
                    charAt = (char) (charAt + ' ');
                }
                j2 = (j2 ^ ((long) charAt)) * 1099511628211L;
            }
        }
        return j2;
    }
}
