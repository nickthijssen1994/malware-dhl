package com.jd.hybrid.downloader;

import android.content.Context;
import com.android.volley.toolbox.HttpStackFactory;
import com.jd.framework.network.request.JDFileRequest;
import com.jd.hybrid.downloader.a.c;
import com.jd.libs.hybrid.base.a;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/* loaded from: classes.dex */
public class f {
    private static f d;
    private Context f;
    public AtomicInteger a = new AtomicInteger(0);
    private HttpStackFactory e = new HttpStackFactory();
    volatile ConcurrentLinkedQueue<Integer> c = new ConcurrentLinkedQueue<>();
    final ThreadPoolExecutor b = new ThreadPoolExecutor(1, 1, 15, TimeUnit.SECONDS, new PriorityBlockingQueue(), new ThreadPoolExecutor.DiscardOldestPolicy());
    private final Object h = new Object();
    private List<com.jd.hybrid.downloader.a.a> g = new ArrayList(4);

    /* loaded from: classes.dex */
    class a implements Comparable<a>, Runnable {
        private final JDFileRequest b;
        private final int c;

        public a(JDFileRequest jDFileRequest, int i) {
            this.b = jDFileRequest;
            this.c = i;
        }

        @Override // java.lang.Comparable
        public final /* bridge */ /* synthetic */ int compareTo(a aVar) {
            return aVar.c - this.c;
        }

        /* JADX WARN: Type inference failed for: r10v0, types: [com.jd.framework.network.file.JDFileResponseListener] */
        /* JADX WARN: Unknown variable types count: 1 */
        @Override // java.lang.Runnable
        /* Code decompiled incorrectly, please refer to instructions dump */
        public final void run() {
            /*
            // Method dump skipped, instructions count: 517
            */
            throw new UnsupportedOperationException("Method not decompiled: com.jd.hybrid.downloader.f.a.run():void");
        }
    }

    /* loaded from: classes.dex */
    public static class b implements Comparable<b> {
        JDFileRequest a;
        int b;

        public b(JDFileRequest jDFileRequest, int i) {
            this.a = jDFileRequest;
            this.b = i;
        }

        @Override // java.lang.Comparable
        public final /* bridge */ /* synthetic */ int compareTo(b bVar) {
            return bVar.b - this.b;
        }
    }

    private f(Context context) {
        this.f = context.getApplicationContext();
        this.b.allowCoreThreadTimeOut(true);
        this.g.add(new c(this.h));
        this.g.add(new com.jd.hybrid.downloader.a.b(this.f, this.h));
        com.jd.libs.hybrid.base.a.a(new a.AbstractC0028a() { // from class: com.jd.hybrid.downloader.f.1
            @Override // com.jd.libs.hybrid.base.a.AbstractC0028a
            public final void a() {
                if (f.a(f.this)) {
                    synchronized (f.this.h) {
                        f.this.h.notifyAll();
                    }
                }
            }
        });
    }

    public static f a(Context context) {
        if (d == null) {
            synchronized (f.class) {
                if (d == null) {
                    d = new f(context);
                }
            }
        }
        return d;
    }

    static /* synthetic */ boolean a(f fVar) {
        boolean z = true;
        for (com.jd.hybrid.downloader.a.a aVar : fVar.g) {
            if (!aVar.a()) {
                aVar.b();
                z = false;
            } else if (fVar.c.isEmpty()) {
                aVar.c();
            }
        }
        return z;
    }
}
