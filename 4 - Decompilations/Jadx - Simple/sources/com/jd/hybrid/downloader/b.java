package com.jd.hybrid.downloader;

import android.content.Context;
import com.android.volley.VolleyLog;
import com.jd.framework.network.JDResponse;
import com.jd.framework.network.error.JDError;
import com.jd.framework.network.file.JDFileGuider;
import com.jd.framework.network.file.JDFileResponseListener;
import com.jd.framework.network.request.JDFileRequest;
import com.jd.hybrid.downloader.f;
import com.jd.libs.hybrid.base.b.c;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/* loaded from: classes.dex */
public class b {
    private static b b;
    private Context a;
    private Map<c, JDFileRequest> c;

    /* loaded from: classes.dex */
    public static class a {
        Context a;

        private a(Context context) {
            this.a = context;
        }

        /* synthetic */ a(Context context, byte b) {
            this(context);
        }
    }

    /* renamed from: com.jd.hybrid.downloader.b$b */
    /* loaded from: classes.dex */
    public class C0024b implements JDFileResponseListener<File> {
        private final JDFileRequest b;
        private final c c;
        private final a d;

        private C0024b(JDFileRequest jDFileRequest, c cVar) {
            b.this = r1;
            this.b = jDFileRequest;
            this.c = cVar;
            this.d = cVar.f();
        }

        /* synthetic */ C0024b(b bVar, JDFileRequest jDFileRequest, c cVar, byte b) {
            this(jDFileRequest, cVar);
        }

        private void a() {
            b.this.c.remove(this.c);
        }

        @Override // com.jd.framework.network.JDResponseListener
        public final void onCancel() {
            c.c("DownloadClient", "Download cancel " + this.c.b());
            a();
            a aVar = this.d;
            if (aVar != null) {
                aVar.onCancel();
            }
        }

        @Override // com.jd.framework.network.JDResponseListener
        public final void onEnd(JDResponse<File> jDResponse) {
            c.c("DownloadClient", "Download complete " + this.c.b());
            com.jd.hybrid.downloader.b.b h = this.c.h();
            if (h == null || h.a(jDResponse.getData())) {
                a();
                a aVar = this.d;
                if (aVar != null) {
                    aVar.onEnd(jDResponse);
                    return;
                }
                return;
            }
            c.c("DownloadClient", "File not available " + jDResponse.getData().getAbsolutePath());
            jDResponse.getData().delete();
            onError(new JDError("文件校验失败"));
        }

        @Override // com.jd.framework.network.JDResponseListener
        public final void onError(JDError jDError) {
            c.e("DownloadClient", "Download error (" + this.c.b() + ") Error: code = " + jDError.getStatusCode() + ", msg = " + jDError.getMessage());
            c.a("DownloadClient", jDError);
            a();
            a aVar = this.d;
            if (aVar != null) {
                aVar.onError(jDError);
            }
        }

        @Override // com.jd.framework.network.file.JDFileResponseListener
        public final void onPause() {
            if (this.d != null) {
                this.c.f().onPause();
            }
        }

        @Override // com.jd.framework.network.file.JDFileResponseListener
        public final void onProgress(int i, int i2) {
            a aVar = this.d;
            if (aVar != null) {
                aVar.onProgress(i, i2);
            }
        }

        @Override // com.jd.framework.network.JDResponseListener
        public final void onStart() {
            c.c("DownloadClient", "Download start " + this.c.b());
            a aVar = this.d;
            if (aVar != null) {
                aVar.onStart();
            }
        }
    }

    private b(Context context) {
        this.c = new ConcurrentHashMap();
        this.a = context.getApplicationContext();
    }

    private /* synthetic */ b(Context context, byte b2) {
        this(context);
    }

    public static a a(Context context) {
        return new a(context, (byte) 0);
    }

    public static b a() {
        if (b == null) {
            c.e("DownloadClient", "Hybrid SDK is not initialized!");
        }
        return b;
    }

    public static void a(a aVar) {
        if (b == null) {
            synchronized (c.class) {
                if (b == null) {
                    b = new b(aVar.a, (byte) 0);
                }
            }
            return;
        }
        throw new RuntimeException("duplicate initialize!");
    }

    public JDFileRequest a(c cVar) {
        if (this.c.containsKey(cVar)) {
            c.c("DownloadClient", "Existed download request, priority = " + cVar.g() + ", url: " + cVar.b());
            return this.c.get(cVar);
        }
        JDFileGuider jDFileGuider = new JDFileGuider();
        jDFileGuider.setSpace(cVar.e() ? 2 : 1);
        jDFileGuider.setChildDirName(cVar.c());
        jDFileGuider.setFileName(cVar.d());
        jDFileGuider.setMode(1);
        jDFileGuider.setImmutable(false);
        JDFileRequest jDFileRequest = new JDFileRequest(cVar.b());
        jDFileRequest.setResponseListener((JDFileResponseListener<File>) new C0024b(this, jDFileRequest, cVar, (byte) 0));
        jDFileRequest.setSavePath(jDFileGuider);
        jDFileRequest.setAttemptsTime(0);
        this.c.put(cVar, jDFileRequest);
        int g = cVar.g();
        f a2 = f.a(this.a);
        f.b bVar = new f.b(jDFileRequest, g);
        if (VolleyLog.DEBUG) {
            c.c("JDFileDownloader", "==== total file request count ===> " + a2.a.incrementAndGet());
        }
        f.a aVar = new f.a(bVar.a, bVar.b);
        a2.c.offer(Integer.valueOf(aVar.hashCode()));
        a2.b.execute(aVar);
        c.b("DownloadClient", null, cVar.a() + "加入下载列表");
        c.c("DownloadClient", "Add to download queue, priority = " + cVar.g() + ", url: " + cVar.b());
        return jDFileRequest;
    }

    public List<JDFileRequest> a(List<c> list, boolean z) {
        if (list.size() > 1 && !z) {
            Collections.sort(list);
        }
        ArrayList arrayList = new ArrayList(list.size());
        for (c cVar : list) {
            arrayList.add(a(cVar));
        }
        return arrayList;
    }
}
