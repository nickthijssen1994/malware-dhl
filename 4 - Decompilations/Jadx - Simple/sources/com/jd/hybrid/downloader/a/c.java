package com.jd.hybrid.downloader.a;

import com.jd.libs.hybrid.base.a;
import java.util.Timer;
import java.util.TimerTask;

/* loaded from: classes.dex */
public final class c implements a {
    final Object a;
    private Timer b;
    private TimerTask c;

    public c(Object obj) {
        this.a = obj;
    }

    @Override // com.jd.hybrid.downloader.a.a
    public final boolean a() {
        ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();
        while (true) {
            ThreadGroup parent = threadGroup.getParent();
            if (parent == null) {
                break;
            }
            threadGroup = parent;
        }
        try {
            int enumerate = threadGroup.enumerate(new Thread[threadGroup.activeCount() * 2]);
            boolean z = enumerate <= a.b;
            com.jd.libs.hybrid.base.b.c.c("ThreadDownloadCondition", "Current thread count: " + enumerate + ", requirement = " + a.b + ", condition pass = " + z);
            return z;
        } catch (Exception unused) {
            return false;
        }
    }

    @Override // com.jd.hybrid.downloader.a.a
    public final void b() {
        if (this.b == null) {
            this.b = new Timer();
            this.c = new TimerTask() { // from class: com.jd.hybrid.downloader.a.c.1
                @Override // java.util.TimerTask, java.lang.Runnable
                public final void run() {
                    if (!c.this.a()) {
                        com.jd.libs.hybrid.base.b.c.c("ThreadDownloadCondition", "Download condition(thread count) DISABLE");
                        return;
                    }
                    com.jd.libs.hybrid.base.b.c.c("ThreadDownloadCondition", "Download condition(thread count) ENABLE");
                    c.this.c();
                    synchronized (c.this.a) {
                        c.this.a.notifyAll();
                    }
                }
            };
            this.b.scheduleAtFixedRate(this.c, 10000, 10000);
            com.jd.libs.hybrid.base.b.c.c("ThreadDownloadCondition", "register timer of thread count listener.");
        }
    }

    @Override // com.jd.hybrid.downloader.a.a
    public final void c() {
        Timer timer = this.b;
        if (timer != null) {
            timer.cancel();
            com.jd.libs.hybrid.base.b.c.c("ThreadDownloadCondition", "unregister timer of thread count listener.");
        }
        this.b = null;
        this.c = null;
    }
}
