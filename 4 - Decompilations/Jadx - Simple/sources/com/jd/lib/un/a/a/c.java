package com.jd.lib.un.a.a;

import android.content.Context;
import android.graphics.Point;
import android.hardware.Camera;
import android.os.Handler;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import com.facebook.imagepipeline.common.RotationOptions;
import java.util.List;

/* loaded from: classes.dex */
public final class c extends SurfaceView implements SurfaceHolder.Callback {
    public boolean b;
    private e c;
    private Camera.PreviewCallback i;
    private a k;
    private long m;
    private float n;
    private int o;
    private boolean e = true;
    private boolean f = true;
    private boolean g = false;
    private boolean h = true;
    private float j = 0.1f;
    private Runnable l = new Runnable() { // from class: com.jd.lib.un.a.a.c.1
        @Override // java.lang.Runnable
        public final void run() {
            if (c.this.c != null && c.this.e && c.this.f && c.this.g) {
                c.this.b();
            }
        }
    };
    Camera.AutoFocusCallback a = new Camera.AutoFocusCallback() { // from class: com.jd.lib.un.a.a.c.2
        @Override // android.hardware.Camera.AutoFocusCallback
        public final void onAutoFocus(boolean z, Camera camera) {
            c.this.e();
        }
    };
    private Handler d = new Handler();

    /* loaded from: classes.dex */
    public interface a {
        void a();
    }

    public c(Context context, e eVar, Camera.PreviewCallback previewCallback) {
        super(context);
        this.k = (a) context;
        a(eVar, previewCallback);
        getHolder().addCallback(this);
        getHolder().setType(3);
    }

    private static float a(MotionEvent motionEvent) {
        float x = motionEvent.getX(1) - motionEvent.getX(0);
        float y = motionEvent.getY(1) - motionEvent.getY(0);
        return (float) Math.sqrt((double) ((x * x) + (y * y)));
    }

    private Point a(Point point) {
        return getDisplayOrientation() % 180 == 0 ? point : new Point(point.y, point.x);
    }

    private void a(int i, int i2) {
        ViewGroup.LayoutParams layoutParams = getLayoutParams();
        if (getDisplayOrientation() % 180 != 0) {
            i2 = i;
            i = i2;
        }
        if (this.h) {
            float f = (float) i;
            float width = ((float) ((View) getParent()).getWidth()) / f;
            float f2 = (float) i2;
            float height = ((float) ((View) getParent()).getHeight()) / f2;
            if (width <= height) {
                width = height;
            }
            i = Math.round(f * width);
            i2 = Math.round(f2 * width);
        }
        layoutParams.width = i;
        layoutParams.height = i2;
        setLayoutParams(layoutParams);
    }

    private void a(Camera.Size size) {
        int i;
        int i2;
        Point a2 = a(new Point(getWidth(), getHeight()));
        float f = ((float) size.width) / ((float) size.height);
        if (((float) a2.x) / ((float) a2.y) > f) {
            i = (int) (((float) a2.y) * f);
            i2 = a2.y;
        } else {
            i = a2.x;
            i2 = (int) (((float) a2.x) / f);
        }
        a(i, i2);
    }

    private void d() {
        Camera.Size optimalPreviewSize = getOptimalPreviewSize();
        Camera.Parameters parameters = this.c.a.getParameters();
        parameters.setPreviewSize(optimalPreviewSize.width, optimalPreviewSize.height);
        this.c.a.setParameters(parameters);
        a(optimalPreviewSize);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void e() {
        this.d.postDelayed(this.l, 1000);
    }

    private Camera.Size getOptimalPreviewSize() {
        e eVar = this.c;
        Camera.Size size = null;
        if (eVar == null) {
            return null;
        }
        List<Camera.Size> supportedPreviewSizes = eVar.a.getParameters().getSupportedPreviewSizes();
        int width = getWidth();
        int height = getHeight();
        if (f.a(getContext()) == 1) {
            height = width;
            width = height;
        }
        double d = (double) width;
        double d2 = (double) height;
        Double.isNaN(d);
        Double.isNaN(d2);
        double d3 = d / d2;
        if (supportedPreviewSizes == null) {
            return null;
        }
        double d4 = Double.MAX_VALUE;
        double d5 = Double.MAX_VALUE;
        for (Camera.Size size2 : supportedPreviewSizes) {
            double d6 = (double) size2.width;
            double d7 = (double) size2.height;
            Double.isNaN(d6);
            Double.isNaN(d7);
            if (Math.abs((d6 / d7) - d3) <= ((double) this.j) && ((double) Math.abs(size2.height - height)) < d5) {
                d5 = (double) Math.abs(size2.height - height);
                size = size2;
            }
        }
        if (size == null) {
            for (Camera.Size size3 : supportedPreviewSizes) {
                if (((double) Math.abs(size3.height - height)) < d4) {
                    d4 = (double) Math.abs(size3.height - height);
                    size = size3;
                }
            }
        }
        return size;
    }

    public final void a() {
        if (this.c != null) {
            try {
                getHolder().addCallback(this);
                this.e = true;
                d();
                this.c.a.setPreviewDisplay(getHolder());
                this.c.a.setDisplayOrientation(getDisplayOrientation());
                this.c.a.setOneShotPreviewCallback(this.i);
                this.c.a.startPreview();
                if (!this.f) {
                    return;
                }
                if (this.g) {
                    b();
                } else {
                    e();
                }
            } catch (Exception e) {
                Log.e("CameraPreview", e.toString(), e);
            }
        }
    }

    public final void a(e eVar, Camera.PreviewCallback previewCallback) {
        this.c = eVar;
        this.i = previewCallback;
    }

    public final void b() {
        try {
            this.c.a.autoFocus(this.a);
        } catch (RuntimeException unused) {
            e();
        }
    }

    public final void c() {
        if (this.c != null) {
            try {
                this.e = false;
                getHolder().removeCallback(this);
                this.c.a.cancelAutoFocus();
                this.c.a.setOneShotPreviewCallback(null);
                this.c.a.stopPreview();
            } catch (Exception e) {
                Log.e("CameraPreview", e.toString(), e);
            }
        }
    }

    public final int getDisplayOrientation() {
        int i = 0;
        if (this.c == null) {
            return 0;
        }
        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
        if (this.c.b == -1) {
            Camera.getCameraInfo(0, cameraInfo);
        } else {
            Camera.getCameraInfo(this.c.b, cameraInfo);
        }
        switch (((WindowManager) getContext().getSystemService("window")).getDefaultDisplay().getRotation()) {
            case 1:
                i = 90;
                break;
            case 2:
                i = 180;
                break;
            case 3:
                i = RotationOptions.ROTATE_270;
                break;
        }
        return (cameraInfo.facing == 1 ? 360 - ((cameraInfo.orientation + i) % 360) : (cameraInfo.orientation - i) + 360) % 360;
    }

    /* JADX WARN: Code restructure failed: missing block: B:44:0x00a5, code lost:
        if (r10 == 1) goto L_0x00fb;
     */
    @Override // android.view.View
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final boolean onTouchEvent(android.view.MotionEvent r10) {
        /*
        // Method dump skipped, instructions count: 298
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.lib.un.a.a.c.onTouchEvent(android.view.MotionEvent):boolean");
    }

    public final void setAspectTolerance(float f) {
        this.j = f;
    }

    public final void setAutoFocus(boolean z) {
        e eVar = this.c;
        if (eVar != null && this.e && z != this.f) {
            this.f = z;
            if (!this.f) {
                eVar.a.cancelAutoFocus();
            } else if (this.g) {
                b();
            } else {
                e();
            }
        }
    }

    public final void setShouldScaleToFill(boolean z) {
        this.h = z;
    }

    @Override // android.view.SurfaceHolder.Callback
    public final void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
        if (surfaceHolder.getSurface() != null) {
            c();
            a();
        }
    }

    @Override // android.view.SurfaceHolder.Callback
    public final void surfaceCreated(SurfaceHolder surfaceHolder) {
        this.g = true;
    }

    @Override // android.view.SurfaceHolder.Callback
    public final void surfaceDestroyed(SurfaceHolder surfaceHolder) {
        this.g = false;
        c();
    }
}
