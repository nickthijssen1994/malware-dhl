package com.jd.lib.un.a.a;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.CornerPathEffect;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.NinePatchDrawable;
import android.view.View;
import com.jd.scan.R;

/* loaded from: classes.dex */
public final class i extends View implements g {
    private static final int[] h = {0, 64, 128, 192, 255, 192, 128, 64};
    protected boolean e;
    private Rect g;
    private boolean o;
    private boolean p;
    private float q;
    private Rect s;
    private int i = 0;
    private final int j = getResources().getColor(R.color.viewfinder_laser);
    private final int k = getResources().getColor(R.color.viewfinder_mask);
    private final int l = getResources().getColor(R.color.viewfinder_border);
    private final int m = getResources().getInteger(R.integer.viewfinder_border_width);
    private final int n = getResources().getInteger(R.integer.viewfinder_border_length);
    private int r = 0;
    private int t = 0;
    protected Paint a = new Paint();
    protected Paint b = new Paint();
    protected Paint c = new Paint();
    protected Paint f = new Paint();
    protected int d = this.n;
    private Bitmap u = BitmapFactory.decodeResource(getResources(), R.drawable.laser_line);
    private NinePatchDrawable v = (NinePatchDrawable) getResources().getDrawable(R.drawable.border_shape);

    public i(Context context) {
        super(context);
        this.a.setColor(this.j);
        this.a.setStyle(Paint.Style.FILL);
        this.b.setColor(this.k);
        this.c.setColor(this.l);
        this.c.setStyle(Paint.Style.STROKE);
        this.c.setStrokeWidth((float) this.m);
        this.c.setAntiAlias(true);
        this.f.setColor(-16711936);
        this.f.setStyle(Paint.Style.STROKE);
        this.f.setStrokeWidth((float) this.m);
        this.f.setAntiAlias(true);
    }

    private synchronized void b() {
        int i;
        int i2;
        Point point = new Point(getWidth(), getHeight());
        int a = f.a(getContext());
        if (this.e) {
            i2 = (int) (((float) (a != 1 ? getHeight() : getWidth())) * 0.625f);
            i = i2;
        } else if (a != 1) {
            int height = (int) (((float) getHeight()) * 0.625f);
            i2 = (int) (((float) height) * 1.4f);
            i = height;
        } else {
            i2 = (int) (((float) getWidth()) * 0.6666667f);
            i = (int) (((float) i2) * 1.0f);
        }
        if (i2 > getWidth()) {
            i2 = getWidth() - 50;
        }
        if (i > getHeight()) {
            i = getHeight() - 50;
        }
        int i3 = (point.x - i2) / 2;
        int i4 = ((point.y - i) * 10) / 35;
        this.g = new Rect(this.r + i3, this.r + i4, (i3 + i2) - this.r, (i4 + i) - this.r);
    }

    @Override // com.jd.lib.un.a.a.g
    public final void a() {
        b();
        invalidate();
    }

    public final Rect getFramingRect() {
        return this.g;
    }

    @Override // android.view.View
    public final void onDraw(Canvas canvas) {
        Rect rect;
        int i;
        if (getFramingRect() != null) {
            this.v.setBounds(getFramingRect());
            this.v.draw(canvas);
            if (this.o) {
                Rect framingRect = getFramingRect();
                int i2 = framingRect.top + 10;
                int height = (framingRect.height() + framingRect.top) - 10;
                if (this.t < i2 - this.u.getHeight()) {
                    this.t = i2 - this.u.getHeight();
                }
                RectF rectF = new RectF(2.0f, (float) this.t, (float) (getWidth() - 1), (float) (this.t + this.u.getHeight()));
                int height2 = this.u.getHeight() / 2;
                if (this.t < (height - this.u.getHeight()) + height2) {
                    this.t += 7;
                    if (this.t <= i2 - this.u.getHeight() || this.t >= i2 + this.u.getHeight()) {
                        if (this.t <= (framingRect.bottom + 10) - this.u.getHeight() || this.t >= framingRect.bottom + 10 + height2) {
                            this.i = 255;
                            this.a.setAlpha(this.i);
                        } else {
                            int i3 = this.i;
                            if (i3 > 0) {
                                this.a.setAlpha(i3);
                                i = this.i - 30;
                            }
                        }
                        canvas.drawBitmap(this.u, (Rect) null, rectF, this.a);
                        postInvalidateDelayed(10, 0, 0, getWidth(), framingRect.bottom + 10 + height2);
                    } else {
                        int i4 = this.i;
                        if (i4 < 255) {
                            this.a.setAlpha(i4);
                            i = this.i + 30;
                        }
                        canvas.drawBitmap(this.u, (Rect) null, rectF, this.a);
                        postInvalidateDelayed(10, 0, 0, getWidth(), framingRect.bottom + 10 + height2);
                    }
                } else {
                    this.t = i2 - this.u.getHeight();
                    i = 0;
                }
                this.i = i;
                canvas.drawBitmap(this.u, (Rect) null, rectF, this.a);
                postInvalidateDelayed(10, 0, 0, getWidth(), framingRect.bottom + 10 + height2);
            }
            if (this.p && (rect = this.s) != null) {
                Path path = new Path();
                path.moveTo((float) rect.left, (float) (rect.top + this.d));
                path.lineTo((float) rect.left, (float) rect.top);
                path.lineTo((float) (rect.left + this.d), (float) rect.top);
                canvas.drawPath(path, this.f);
                path.moveTo((float) rect.right, (float) (rect.top + this.d));
                path.lineTo((float) rect.right, (float) rect.top);
                path.lineTo((float) (rect.right - this.d), (float) rect.top);
                canvas.drawPath(path, this.f);
                path.moveTo((float) rect.right, (float) (rect.bottom - this.d));
                path.lineTo((float) rect.right, (float) rect.bottom);
                path.lineTo((float) (rect.right - this.d), (float) rect.bottom);
                canvas.drawPath(path, this.f);
                path.moveTo((float) rect.left, (float) (rect.bottom - this.d));
                path.lineTo((float) rect.left, (float) rect.bottom);
                path.lineTo((float) (rect.left + this.d), (float) rect.bottom);
                canvas.drawPath(path, this.f);
            }
        }
    }

    @Override // android.view.View
    protected final void onSizeChanged(int i, int i2, int i3, int i4) {
        b();
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setBorderAlpha(float f) {
        this.q = f;
        this.c.setAlpha((int) (255.0f * f));
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setBorderColor(int i) {
        this.c.setColor(i);
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setBorderCornerRadius(int i) {
        this.c.setPathEffect(new CornerPathEffect((float) i));
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setBorderCornerRounded(boolean z) {
        Paint paint;
        Paint.Join join;
        if (z) {
            paint = this.c;
            join = Paint.Join.ROUND;
        } else {
            paint = this.c;
            join = Paint.Join.BEVEL;
        }
        paint.setStrokeJoin(join);
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setBorderLineLength(int i) {
        this.d = i;
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setBorderStrokeWidth(int i) {
        this.c.setStrokeWidth((float) i);
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setDrawDetect(boolean z) {
        this.p = z;
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setLaserColor(int i) {
        this.a.setColor(i);
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setLaserEnabled(boolean z) {
        this.o = z;
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setMaskColor(int i) {
        this.b.setColor(i);
    }

    @Override // com.jd.lib.un.a.a.g
    public final void setSquareViewFinder(boolean z) {
        this.e = z;
    }

    public final void setViewFinderOffset(int i) {
        this.r = i;
    }
}
