package com.jd.lib.un.utils;

import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.List;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class UnFileIOUtils {
    public static boolean writeFileFromIS(File file, InputStream inputStream) {
        return writeFileFromIS(file, inputStream, false);
    }

    public static boolean writeFileFromIS(String str, InputStream inputStream, boolean z) {
        return writeFileFromIS(getFileByPath(str), inputStream, z);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r0v1, types: [java.io.OutputStream] */
    /* JADX WARN: Type inference failed for: r0v5 */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static boolean writeFileFromIS(java.io.File r4, java.io.InputStream r5, boolean r6) {
        /*
            boolean r0 = createOrExistsFile(r4)
            r1 = 0
            if (r0 == 0) goto L_0x0070
            if (r5 != 0) goto L_0x000b
            goto L_0x0070
        L_0x000b:
            r0 = 0
            java.io.BufferedOutputStream r2 = new java.io.BufferedOutputStream     // Catch: IOException -> 0x0042, all -> 0x0040
            java.io.FileOutputStream r3 = new java.io.FileOutputStream     // Catch: IOException -> 0x0042, all -> 0x0040
            r3.<init>(r4, r6)     // Catch: IOException -> 0x0042, all -> 0x0040
            r2.<init>(r3)     // Catch: IOException -> 0x0042, all -> 0x0040
            r4 = 8192(0x2000, float:1.14794E-41)
            byte[] r4 = new byte[r4]     // Catch: IOException -> 0x003d, all -> 0x003a
        L_0x001a:
            int r6 = r4.length     // Catch: IOException -> 0x003d, all -> 0x003a
            int r6 = r5.read(r4, r1, r6)     // Catch: IOException -> 0x003d, all -> 0x003a
            r0 = -1
            if (r6 == r0) goto L_0x0026
            r2.write(r4, r1, r6)     // Catch: IOException -> 0x003d, all -> 0x003a
            goto L_0x001a
        L_0x0026:
            r4 = 1
            if (r5 == 0) goto L_0x0031
            r5.close()     // Catch: IOException -> 0x002d
            goto L_0x0031
        L_0x002d:
            r5 = move-exception
            r5.printStackTrace()
        L_0x0031:
            r2.close()     // Catch: IOException -> 0x0035
            goto L_0x0039
        L_0x0035:
            r5 = move-exception
            r5.printStackTrace()
        L_0x0039:
            return r4
        L_0x003a:
            r4 = move-exception
            r0 = r2
            goto L_0x005b
        L_0x003d:
            r4 = move-exception
            r0 = r2
            goto L_0x0043
        L_0x0040:
            r4 = move-exception
            goto L_0x005b
        L_0x0042:
            r4 = move-exception
        L_0x0043:
            r4.printStackTrace()     // Catch: all -> 0x0040
            if (r5 == 0) goto L_0x0050
            r5.close()     // Catch: IOException -> 0x004c
            goto L_0x0050
        L_0x004c:
            r4 = move-exception
            r4.printStackTrace()
        L_0x0050:
            if (r0 == 0) goto L_0x005a
            r0.close()     // Catch: IOException -> 0x0056
            goto L_0x005a
        L_0x0056:
            r4 = move-exception
            r4.printStackTrace()
        L_0x005a:
            return r1
        L_0x005b:
            if (r5 == 0) goto L_0x0065
            r5.close()     // Catch: IOException -> 0x0061
            goto L_0x0065
        L_0x0061:
            r5 = move-exception
            r5.printStackTrace()
        L_0x0065:
            if (r0 == 0) goto L_0x006f
            r0.close()     // Catch: IOException -> 0x006b
            goto L_0x006f
        L_0x006b:
            r5 = move-exception
            r5.printStackTrace()
        L_0x006f:
            throw r4
        L_0x0070:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.lib.un.utils.UnFileIOUtils.writeFileFromIS(java.io.File, java.io.InputStream, boolean):boolean");
    }

    public static boolean writeFileFromBytesByStream(String str, byte[] bArr) {
        return writeFileFromBytesByStream(getFileByPath(str), bArr, false);
    }

    public static boolean writeFileFromBytesByStream(File file, byte[] bArr, boolean z) {
        Throwable th;
        IOException e;
        BufferedOutputStream bufferedOutputStream;
        if (bArr == null || !createOrExistsFile(file)) {
            return false;
        }
        BufferedOutputStream bufferedOutputStream2 = null;
        try {
            try {
                bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file, z));
            } catch (IOException e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            bufferedOutputStream.write(bArr);
            try {
                bufferedOutputStream.close();
            } catch (IOException e3) {
                e3.printStackTrace();
            }
            return true;
        } catch (IOException e4) {
            e = e4;
            bufferedOutputStream2 = bufferedOutputStream;
            e.printStackTrace();
            if (bufferedOutputStream2 != null) {
                try {
                    bufferedOutputStream2.close();
                } catch (IOException e5) {
                    e5.printStackTrace();
                }
            }
            return false;
        } catch (Throwable th3) {
            th = th3;
            bufferedOutputStream2 = bufferedOutputStream;
            if (bufferedOutputStream2 != null) {
                try {
                    bufferedOutputStream2.close();
                } catch (IOException e6) {
                    e6.printStackTrace();
                }
            }
            throw th;
        }
    }

    public static boolean writeFileFromString(String str, String str2) {
        return writeFileFromString(getFileByPath(str), str2, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r1v5 */
    public static boolean writeFileFromString(File file, String str, boolean z) {
        Throwable th;
        BufferedWriter bufferedWriter;
        IOException e;
        BufferedWriter bufferedWriter2;
        if (file == null || str == null || (r1 = createOrExistsFile(file)) == 0) {
            return false;
        }
        try {
            bufferedWriter = null;
            try {
                bufferedWriter2 = new BufferedWriter(new FileWriter(file, z));
            } catch (IOException e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            bufferedWriter2.write(str);
            try {
                bufferedWriter2.close();
            } catch (IOException e3) {
                e3.printStackTrace();
            }
            return true;
        } catch (IOException e4) {
            e = e4;
            bufferedWriter = bufferedWriter2;
            e.printStackTrace();
            if (bufferedWriter != null) {
                try {
                    bufferedWriter.close();
                } catch (IOException e5) {
                    e5.printStackTrace();
                }
            }
            return false;
        } catch (Throwable th3) {
            th = th3;
            BufferedWriter createOrExistsFile = bufferedWriter2;
            if (createOrExistsFile != 0) {
                try {
                    createOrExistsFile.close();
                } catch (IOException e6) {
                    e6.printStackTrace();
                }
            }
            throw th;
        }
    }

    public static List<String> readFile2List(String str) {
        return readFile2List(getFileByPath(str), null);
    }

    public static List<String> readFile2List(File file, String str) {
        return readFile2List(file, 0, Integer.MAX_VALUE, str);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0095 A[Catch: IOException -> 0x0091, TryCatch #6 {IOException -> 0x0091, blocks: (B:57:0x008d, B:61:0x0095, B:63:0x009a), top: B:72:0x008d }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x009a A[Catch: IOException -> 0x0091, TRY_LEAVE, TryCatch #6 {IOException -> 0x0091, blocks: (B:57:0x008d, B:61:0x0095, B:63:0x009a), top: B:72:0x008d }] */
    /* JADX WARN: Removed duplicated region for block: B:72:0x008d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r5v1, types: [java.io.InputStreamReader] */
    /* JADX WARN: Type inference failed for: r5v10, types: [boolean] */
    /* JADX WARN: Type inference failed for: r5v11 */
    /* JADX WARN: Type inference failed for: r5v12 */
    /* JADX WARN: Type inference failed for: r5v13, types: [java.io.InputStreamReader] */
    /* JADX WARN: Type inference failed for: r5v17 */
    /* JADX WARN: Type inference failed for: r5v18 */
    /* JADX WARN: Type inference failed for: r5v3 */
    /* JADX WARN: Type inference failed for: r5v4, types: [java.io.InputStreamReader] */
    /* JADX WARN: Type inference failed for: r5v6 */
    /* JADX WARN: Type inference failed for: r5v7 */
    /* JADX WARN: Type inference failed for: r5v8 */
    /* JADX WARN: Type inference failed for: r5v9 */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static java.util.List<java.lang.String> readFile2List(java.io.File r5, int r6, int r7, java.lang.String r8) {
        /*
            boolean r0 = isFileExists(r5)
            r1 = 0
            if (r0 != 0) goto L_0x0008
            return r1
        L_0x0008:
            if (r6 <= r7) goto L_0x000b
            return r1
        L_0x000b:
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch: IOException -> 0x006b, all -> 0x0067
            r0.<init>()     // Catch: IOException -> 0x006b, all -> 0x0067
            java.io.FileInputStream r2 = new java.io.FileInputStream     // Catch: IOException -> 0x006b, all -> 0x0067
            r2.<init>(r5)     // Catch: IOException -> 0x006b, all -> 0x0067
            boolean r5 = com.jd.lib.un.utils.UnStringUtils.isSpace(r8)     // Catch: IOException -> 0x0063, all -> 0x0060
            r3 = 1
            if (r5 == 0) goto L_0x0027
            java.io.InputStreamReader r5 = new java.io.InputStreamReader     // Catch: IOException -> 0x0063, all -> 0x0060
            r5.<init>(r2)     // Catch: IOException -> 0x0063, all -> 0x0060
            java.io.BufferedReader r8 = new java.io.BufferedReader     // Catch: IOException -> 0x005d, all -> 0x005b
            r8.<init>(r5)     // Catch: IOException -> 0x005d, all -> 0x005b
            goto L_0x0031
        L_0x0027:
            java.io.InputStreamReader r5 = new java.io.InputStreamReader     // Catch: IOException -> 0x0063, all -> 0x0060
            r5.<init>(r2, r8)     // Catch: IOException -> 0x0063, all -> 0x0060
            java.io.BufferedReader r8 = new java.io.BufferedReader     // Catch: IOException -> 0x005d, all -> 0x005b
            r8.<init>(r5)     // Catch: IOException -> 0x005d, all -> 0x005b
        L_0x0031:
            java.lang.String r4 = r8.readLine()     // Catch: IOException -> 0x0059, all -> 0x0089
            if (r4 == 0) goto L_0x0044
            if (r3 <= r7) goto L_0x003a
            goto L_0x0044
        L_0x003a:
            if (r6 > r3) goto L_0x0041
            if (r3 > r7) goto L_0x0041
            r0.add(r4)     // Catch: IOException -> 0x0059, all -> 0x0089
        L_0x0041:
            int r3 = r3 + 1
            goto L_0x0031
        L_0x0044:
            if (r8 == 0) goto L_0x004c
            r8.close()     // Catch: IOException -> 0x004a
            goto L_0x004c
        L_0x004a:
            r5 = move-exception
            goto L_0x0055
        L_0x004c:
            if (r5 == 0) goto L_0x0051
            r5.close()     // Catch: IOException -> 0x004a
        L_0x0051:
            r2.close()     // Catch: IOException -> 0x004a
            goto L_0x0058
        L_0x0055:
            r5.printStackTrace()
        L_0x0058:
            return r0
        L_0x0059:
            r6 = move-exception
            goto L_0x006f
        L_0x005b:
            r6 = move-exception
            goto L_0x008b
        L_0x005d:
            r6 = move-exception
            r8 = r1
            goto L_0x006f
        L_0x0060:
            r6 = move-exception
            r5 = r1
            goto L_0x008b
        L_0x0063:
            r6 = move-exception
            r5 = r1
            r8 = r5
            goto L_0x006f
        L_0x0067:
            r6 = move-exception
            r5 = r1
            r2 = r5
            goto L_0x008b
        L_0x006b:
            r6 = move-exception
            r5 = r1
            r8 = r5
            r2 = r8
        L_0x006f:
            r6.printStackTrace()     // Catch: all -> 0x0089
            if (r8 == 0) goto L_0x007a
            r8.close()     // Catch: IOException -> 0x0078
            goto L_0x007a
        L_0x0078:
            r5 = move-exception
            goto L_0x0085
        L_0x007a:
            if (r5 == 0) goto L_0x007f
            r5.close()     // Catch: IOException -> 0x0078
        L_0x007f:
            if (r2 == 0) goto L_0x0088
            r2.close()     // Catch: IOException -> 0x0078
            goto L_0x0088
        L_0x0085:
            r5.printStackTrace()
        L_0x0088:
            return r1
        L_0x0089:
            r6 = move-exception
            r1 = r8
        L_0x008b:
            if (r1 == 0) goto L_0x0093
            r1.close()     // Catch: IOException -> 0x0091
            goto L_0x0093
        L_0x0091:
            r5 = move-exception
            goto L_0x009e
        L_0x0093:
            if (r5 == 0) goto L_0x0098
            r5.close()     // Catch: IOException -> 0x0091
        L_0x0098:
            if (r2 == 0) goto L_0x00a1
            r2.close()     // Catch: IOException -> 0x0091
            goto L_0x00a1
        L_0x009e:
            r5.printStackTrace()
        L_0x00a1:
            throw r6
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.lib.un.utils.UnFileIOUtils.readFile2List(java.io.File, int, int, java.lang.String):java.util.List");
    }

    public static String readFile2String(String str) {
        return readFile2String(getFileByPath(str), null);
    }

    public static String readFile2String(File file, String str) {
        byte[] readFile2BytesByStream = readFile2BytesByStream(file);
        if (readFile2BytesByStream == null) {
            return null;
        }
        if (UnStringUtils.isSpace(str)) {
            return new String(readFile2BytesByStream);
        }
        try {
            return new String(readFile2BytesByStream, str);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return "";
        }
    }

    public static byte[] readFile2BytesByStream(File file) {
        if (!isFileExists(file)) {
            return null;
        }
        try {
            return is2Bytes(new FileInputStream(file));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:54:0x0059 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static byte[] is2Bytes(java.io.InputStream r7) {
        /*
            r0 = 0
            if (r7 != 0) goto L_0x0004
            return r0
        L_0x0004:
            java.io.ByteArrayOutputStream r1 = new java.io.ByteArrayOutputStream     // Catch: IOException -> 0x0036, all -> 0x0031
            r1.<init>()     // Catch: IOException -> 0x0036, all -> 0x0031
            r2 = 8192(0x2000, float:1.14794E-41)
            byte[] r2 = new byte[r2]     // Catch: IOException -> 0x002f, all -> 0x004e
        L_0x000d:
            int r3 = r2.length     // Catch: IOException -> 0x002f, all -> 0x004e
            r4 = 0
            int r3 = r7.read(r2, r4, r3)     // Catch: IOException -> 0x002f, all -> 0x004e
            r5 = -1
            if (r3 == r5) goto L_0x001a
            r1.write(r2, r4, r3)     // Catch: IOException -> 0x002f, all -> 0x004e
            goto L_0x000d
        L_0x001a:
            byte[] r0 = r1.toByteArray()     // Catch: IOException -> 0x002f, all -> 0x004e
            r7.close()     // Catch: IOException -> 0x0022
            goto L_0x0026
        L_0x0022:
            r7 = move-exception
            r7.printStackTrace()
        L_0x0026:
            r1.close()     // Catch: IOException -> 0x002a
            goto L_0x002e
        L_0x002a:
            r7 = move-exception
            r7.printStackTrace()
        L_0x002e:
            return r0
        L_0x002f:
            r2 = move-exception
            goto L_0x0038
        L_0x0031:
            r1 = move-exception
            r6 = r1
            r1 = r0
            r0 = r6
            goto L_0x004f
        L_0x0036:
            r2 = move-exception
            r1 = r0
        L_0x0038:
            r2.printStackTrace()     // Catch: all -> 0x004e
            r7.close()     // Catch: IOException -> 0x003f
            goto L_0x0043
        L_0x003f:
            r7 = move-exception
            r7.printStackTrace()
        L_0x0043:
            if (r1 == 0) goto L_0x004d
            r1.close()     // Catch: IOException -> 0x0049
            goto L_0x004d
        L_0x0049:
            r7 = move-exception
            r7.printStackTrace()
        L_0x004d:
            return r0
        L_0x004e:
            r0 = move-exception
        L_0x004f:
            r7.close()     // Catch: IOException -> 0x0053
            goto L_0x0057
        L_0x0053:
            r7 = move-exception
            r7.printStackTrace()
        L_0x0057:
            if (r1 == 0) goto L_0x0061
            r1.close()     // Catch: IOException -> 0x005d
            goto L_0x0061
        L_0x005d:
            r7 = move-exception
            r7.printStackTrace()
        L_0x0061:
            throw r0
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.lib.un.utils.UnFileIOUtils.is2Bytes(java.io.InputStream):byte[]");
    }

    private static boolean isFileExists(File file) {
        return file != null && file.exists();
    }

    private static File getFileByPath(String str) {
        if (UnStringUtils.isSpace(str)) {
            return null;
        }
        return new File(str);
    }

    private static boolean createOrExistsFile(File file) {
        if (file == null) {
            return false;
        }
        if (file.exists()) {
            return file.isFile();
        }
        if (!createOrExistsDir(file.getParentFile())) {
            return false;
        }
        try {
            return file.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    private static boolean createOrExistsDir(File file) {
        return file != null && (!file.exists() ? file.mkdirs() : file.isDirectory());
    }
}
