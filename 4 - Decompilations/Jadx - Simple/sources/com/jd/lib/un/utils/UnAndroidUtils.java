package com.jd.lib.un.utils;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.res.Resources;
import android.graphics.Rect;
import android.os.Build;
import android.provider.Settings;
import android.text.TextUtils;
import android.view.DisplayCutout;
import android.view.View;
import android.view.Window;
import android.view.WindowInsets;
import androidx.annotation.RequiresApi;
import com.jd.lib.un.utils.config.UnUtilsConfig;
import com.jingdong.app.mall.bundle.mobileConfig.JDMobileConfig;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import org.json.JSONArray;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class UnAndroidUtils {
    private static final String BRAND_HUAWEI = "HUAWEI";
    private static final String BRAND_OPPO = "OPPO";
    private static final String BRAND_VIVO = "VIVO";
    private static final String BRAND_XIAOMI = "XIAOMI";
    private static final int D_MODEL_SPLIT_LEN = 25;
    public static final int NOTCH_IN_SCREEN_VOIO = 32;
    private static String[] cutoutPhoneModels = {""};
    private static String foldModelJson;
    private static List<String> foldModelList;
    private static Boolean isMatex;
    private static String thisModel;

    public static int getStatusBarHeight(Activity activity) {
        int identifier = activity.getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (identifier > 0) {
            return activity.getResources().getDimensionPixelSize(identifier);
        }
        return 0;
    }

    public static String getBrand() {
        return UnStringUtils.spilitSubString(Build.MANUFACTURER, 12).replaceAll(" ", "");
    }

    public static String getModel() {
        return UnStringUtils.spilitSubString(Build.MODEL, 25).replaceAll(" ", "");
    }

    public static int getAndroidVersion() {
        return Build.VERSION.SDK_INT;
    }

    @RequiresApi(api = 17)
    public static boolean isFullScreenModel(Context context) {
        try {
            String string = Settings.Global.getString(context.getContentResolver(), "policy_control");
            if (string != null) {
                string = string.trim();
            }
            if (!TextUtils.equals("immersive.full=*", string)) {
                if (!TextUtils.equals("immersive.status=*", string)) {
                    return false;
                }
            }
            return true;
        } catch (Exception e) {
            if (UnLog.D) {
                e.printStackTrace();
            }
            return false;
        }
    }

    public static boolean isFullScreen(Activity activity) {
        return activity != null && (activity.getWindow().getAttributes().flags & 1024) == 1024;
    }

    /* JADX WARN: Code restructure failed: missing block: B:9:0x0057, code lost:
        if (r1.contains("hw-magic-windows") != false) goto L_0x0059;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static boolean mateXEasyClientNew(android.app.Activity r5) {
        /*
            r0 = 0
            com.jd.lib.un.utils.config.UnUtilsConfig r1 = com.jd.lib.un.utils.config.UnUtilsConfig.getInstance()     // Catch: Exception -> 0x005c
            android.content.res.Configuration r1 = r1.getConfiguration(r5)     // Catch: Exception -> 0x005c
            java.lang.String r1 = r1.toString()     // Catch: Exception -> 0x005c
            boolean r2 = com.jd.lib.un.utils.UnLog.D     // Catch: Exception -> 0x005c
            if (r2 == 0) goto L_0x0049
            java.lang.String r2 = "UnAndroidUtils"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch: Exception -> 0x005c
            r3.<init>()     // Catch: Exception -> 0x005c
            java.lang.String r4 = "config:"
            r3.append(r4)     // Catch: Exception -> 0x005c
            r3.append(r1)     // Catch: Exception -> 0x005c
            java.lang.String r3 = r3.toString()     // Catch: Exception -> 0x005c
            com.jd.lib.un.utils.UnLog.d(r2, r3)     // Catch: Exception -> 0x005c
            java.lang.String r2 = "UnAndroidUtils"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch: Exception -> 0x005c
            r3.<init>()     // Catch: Exception -> 0x005c
            java.lang.String r4 = "config-context:"
            r3.append(r4)     // Catch: Exception -> 0x005c
            android.content.res.Resources r5 = r5.getResources()     // Catch: Exception -> 0x005c
            android.content.res.Configuration r5 = r5.getConfiguration()     // Catch: Exception -> 0x005c
            java.lang.String r5 = r5.toString()     // Catch: Exception -> 0x005c
            r3.append(r5)     // Catch: Exception -> 0x005c
            java.lang.String r5 = r3.toString()     // Catch: Exception -> 0x005c
            com.jd.lib.un.utils.UnLog.d(r2, r5)     // Catch: Exception -> 0x005c
        L_0x0049:
            java.lang.String r5 = "hwMultiwindow-magic"
            boolean r5 = r1.contains(r5)     // Catch: Exception -> 0x005c
            if (r5 != 0) goto L_0x0059
            java.lang.String r5 = "hw-magic-windows"
            boolean r5 = r1.contains(r5)     // Catch: Exception -> 0x005c
            if (r5 == 0) goto L_0x0060
        L_0x0059:
            r5 = 1
            r0 = 1
            goto L_0x0060
        L_0x005c:
            r5 = move-exception
            r5.printStackTrace()
        L_0x0060:
            boolean r5 = com.jd.lib.un.utils.UnLog.D
            if (r5 == 0) goto L_0x007a
            java.lang.String r5 = "UnAndroidUtils"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "matex-easy-client-new:"
            r1.append(r2)
            r1.append(r0)
            java.lang.String r1 = r1.toString()
            com.jd.lib.un.utils.UnLog.d(r5, r1)
        L_0x007a:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.lib.un.utils.UnAndroidUtils.mateXEasyClientNew(android.app.Activity):boolean");
    }

    public static boolean mateXEasyClient(Context context) {
        boolean z = false;
        if (!isMatex(context) || context == null) {
            return false;
        }
        if ((context instanceof Activity) && useMatexNewFun()) {
            return mateXEasyClientNew((Activity) context);
        }
        try {
            z = context.getPackageManager().getApplicationInfo(context.getPackageName(), 128).metaData.getBoolean("EasyGoClient");
            if (UnLog.D) {
                UnLog.d("UnAndroidUtils", "matex-easy-client-old:" + z);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return z;
    }

    public static boolean isTabletDevice(Context context) {
        if (context == null) {
            return false;
        }
        Context context2 = context;
        for (int i = 0; i < 10; i++) {
            if (context2 instanceof ContextWrapper) {
                context2 = ((ContextWrapper) context2).getBaseContext();
            }
        }
        if ((context2.getResources().getConfiguration().screenLayout & 15) >= 3) {
            return true;
        }
        return false;
    }

    public static int computeUsableHeight(Activity activity) {
        View findViewById;
        if (activity == null || (findViewById = activity.findViewById(16908290)) == null) {
            return 0;
        }
        Rect rect = new Rect();
        findViewById.getWindowVisibleDisplayFrame(rect);
        return rect.bottom;
    }

    public static String getSystemProperties(String str) {
        try {
            Class<?> cls = Class.forName("android.os.SystemProperties");
            return (String) cls.getMethod("get", String.class).invoke(cls, str);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            return "";
        } catch (IllegalAccessException e2) {
            e2.printStackTrace();
            return "";
        } catch (IllegalArgumentException e3) {
            e3.printStackTrace();
            return "";
        } catch (NoSuchMethodException e4) {
            e4.printStackTrace();
            return "";
        } catch (InvocationTargetException e5) {
            e5.printStackTrace();
            return "";
        }
    }

    public static boolean isDisplayCutoutLocal(Context context) {
        if (isNotchScreen(((Activity) context).getWindow())) {
            return true;
        }
        String brand = getBrand();
        if (TextUtils.isEmpty(brand)) {
            return false;
        }
        if (TextUtils.equals(BRAND_HUAWEI, brand.toUpperCase())) {
            return hasNotchInScreenAtHuawei(context);
        }
        if (TextUtils.equals(BRAND_VIVO, brand.toUpperCase())) {
            return hasNotchInScreenAtVivo(context);
        }
        if (TextUtils.equals(BRAND_OPPO, brand.toUpperCase())) {
            return hasNotchInScreenAtOppo(context);
        }
        if (TextUtils.equals(BRAND_XIAOMI, brand.toUpperCase())) {
            return hasNotchInScreenXiaomi(context);
        }
        return false;
    }

    public static boolean isAndroidPCut(Activity activity) {
        WindowInsets rootWindowInsets;
        View decorView = activity.getWindow().getDecorView();
        if (decorView == null || Build.VERSION.SDK_INT < 28 || (rootWindowInsets = decorView.getRootWindowInsets()) == null || rootWindowInsets.getDisplayCutout() == null) {
            return false;
        }
        return true;
    }

    public static boolean isNotchScreen(Window window) {
        WindowInsets rootWindowInsets;
        DisplayCutout displayCutout;
        if (Build.VERSION.SDK_INT < 28 || (rootWindowInsets = window.getDecorView().getRootWindowInsets()) == null || (displayCutout = rootWindowInsets.getDisplayCutout()) == null || displayCutout.getBoundingRects() == null) {
            return false;
        }
        return true;
    }

    public static boolean hasNotchInScreenAtHuawei(Context context) {
        try {
            try {
                Class<?> loadClass = context.getClassLoader().loadClass("com.huawei.android.util.HwNotchSizeUtil");
                return ((Boolean) loadClass.getMethod("hasNotchInScreen", new Class[0]).invoke(loadClass, new Object[0])).booleanValue();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return false;
            } catch (NoSuchMethodException e2) {
                e2.printStackTrace();
                return false;
            } catch (Exception e3) {
                e3.printStackTrace();
                return false;
            }
        } catch (Throwable unused) {
        }
    }

    public static boolean hasNotchInScreenAtOppo(Context context) {
        return context.getPackageManager().hasSystemFeature("com.oppo.feature.screen.heteromorphism");
    }

    public static boolean hasNotchInScreenAtVivo(Context context) {
        try {
            try {
                try {
                    Class<?> loadClass = context.getClassLoader().loadClass("android.util.FtFeature");
                    return ((Boolean) loadClass.getMethod("isFeatureSupport", Integer.TYPE).invoke(loadClass, 32)).booleanValue();
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                    return false;
                }
            } catch (ClassNotFoundException e2) {
                e2.printStackTrace();
                return false;
            } catch (Exception e3) {
                e3.printStackTrace();
                return false;
            }
        } catch (Throwable unused) {
        }
    }

    public static boolean hasNotchInScreenXiaomi(Context context) {
        return TextUtils.equals(getSystemProperties("ro.miui.notch"), "1");
    }

    public static boolean checkDeviceHasNavigationBar(Activity activity) {
        try {
            Resources resources = activity.getResources();
            int identifier = resources.getIdentifier("config_showNavigationBar", "bool", "android");
            boolean z = identifier > 0 ? resources.getBoolean(identifier) : false;
            try {
                Class<?> cls = Class.forName("android.os.SystemProperties");
                String str = (String) cls.getMethod("get", String.class).invoke(cls, "qemu.hw.mainkeys");
                if ("1".equals(str)) {
                    return false;
                }
                if ("0".equals(str)) {
                    return true;
                }
                return z;
            } catch (Exception unused) {
                return z;
            }
        } catch (Exception unused2) {
            return false;
        }
    }

    public static boolean isMatex(Context context) {
        Boolean bool = isMatex;
        if (bool != null) {
            return bool.booleanValue();
        }
        if (BRAND_HUAWEI.equalsIgnoreCase(Build.BRAND) && ("unknownRLI".equalsIgnoreCase(Build.DEVICE) || "HWTAH".equalsIgnoreCase(Build.DEVICE) || "unknownRHA".equalsIgnoreCase(Build.DEVICE) || "HWTAH-C".equalsIgnoreCase(Build.DEVICE))) {
            isMatex = true;
            return true;
        } else if (!useMatexNewFun()) {
            return false;
        } else {
            if (!BRAND_HUAWEI.equalsIgnoreCase(Build.MANUFACTURER) || !context.getPackageManager().hasSystemFeature("com.huawei.hardware.sensor.posture")) {
                isMatex = false;
            } else {
                isMatex = true;
            }
            return isMatex.booleanValue();
        }
    }

    public static boolean isMatex() {
        if (UnUtilsConfig.getInstance().getApplication() != null) {
            return isMatex(UnUtilsConfig.getInstance().getApplication());
        }
        return BRAND_HUAWEI.equalsIgnoreCase(Build.BRAND) && ("unknownRLI".equalsIgnoreCase(Build.DEVICE) || "HWTAH".equalsIgnoreCase(Build.DEVICE) || "unknownRHA".equalsIgnoreCase(Build.DEVICE) || "HWTAH-C".equalsIgnoreCase(Build.DEVICE));
    }

    public static boolean isFoldScreen() {
        String brand = getBrand();
        if (thisModel == null) {
            thisModel = getModel();
        }
        if (TextUtils.isEmpty(brand) || TextUtils.isEmpty(thisModel)) {
            return false;
        }
        String upperCase = brand.toUpperCase();
        if (TextUtils.equals(upperCase, BRAND_HUAWEI) && (thisModel.contains("ANL") || thisModel.contains("TAH") || thisModel.contains("RLI") || thisModel.contains("TXL"))) {
            return true;
        }
        if (!TextUtils.equals(upperCase, "SAMSUNG") || (!TextUtils.equals(thisModel, "SM-F9000") && !TextUtils.equals(thisModel, "SM-F9160"))) {
            return isModelInList(thisModel);
        }
        return true;
    }

    private static boolean isModelInList(String str) {
        if (TextUtils.isEmpty(str)) {
            return false;
        }
        try {
            String config = JDMobileConfig.getInstance().getConfig("unification", "baseConfig", "foldScreen");
            if (TextUtils.equals(config, foldModelJson) && foldModelList != null) {
                return foldModelList.contains(str);
            }
            foldModelJson = config;
            JSONArray jSONArray = new JSONArray(foldModelJson);
            if (jSONArray.length() == 0) {
                return false;
            }
            foldModelList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                foldModelList.add(jSONArray.getString(i));
            }
            return foldModelList.contains(str);
        } catch (Throwable th) {
            th.printStackTrace();
            return false;
        }
    }

    private static boolean useMatexNewFun() {
        try {
            String config = JDMobileConfig.getInstance().getConfig("unification", "baseConfig", "matexEasyClient");
            if (!TextUtils.isEmpty(config)) {
                if (!TextUtils.equals(config, "1")) {
                    return false;
                }
            }
            return true;
        } catch (Throwable unused) {
            return false;
        }
    }
}
