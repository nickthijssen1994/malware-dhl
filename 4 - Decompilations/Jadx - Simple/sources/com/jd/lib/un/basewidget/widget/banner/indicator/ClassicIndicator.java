package com.jd.lib.un.basewidget.widget.banner.indicator;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.View;
import androidx.annotation.Nullable;
import com.jd.lib.un.basewidget.R;
import com.jd.lib.un.basewidget.widget.banner.indicator.BaseIndicator;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class ClassicIndicator extends BaseIndicator {
    private int mLastSelected;
    private Paint normalPaint;
    private int normalPointColor;
    private int pointRadius;
    private int pointSpace;
    private Paint selectedPaint;
    private int selectedPointColor;
    private float selectedPointLeft;

    public ClassicIndicator(Context context) {
        this(context, null);
    }

    public ClassicIndicator(Context context, @Nullable AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public ClassicIndicator(Context context, @Nullable AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.pointRadius = dp2px(5);
        this.normalPointColor = -7829368;
        this.selectedPointColor = -1;
        this.pointSpace = dp2px(10);
        this.mLastSelected = -1;
        initConfig(attributeSet);
        initDrawConfig();
    }

    @Override // com.jd.lib.un.basewidget.widget.banner.indicator.BaseIndicator
    protected void initSelected(int i) {
        setCurrentItem(i);
    }

    private void initDrawConfig() {
        this.normalPaint = new Paint(1);
        this.normalPaint.setStrokeJoin(Paint.Join.ROUND);
        this.normalPaint.setStrokeCap(Paint.Cap.ROUND);
        this.normalPaint.setStyle(Paint.Style.FILL);
        this.normalPaint.setColor(this.normalPointColor);
        this.selectedPaint = new Paint(1);
        this.selectedPaint.setStrokeJoin(Paint.Join.ROUND);
        this.selectedPaint.setStrokeCap(Paint.Cap.ROUND);
        this.selectedPaint.setStyle(Paint.Style.FILL);
        this.selectedPaint.setColor(this.selectedPointColor);
    }

    private void initConfig(AttributeSet attributeSet) {
        if (attributeSet != null) {
            TypedArray obtainStyledAttributes = getContext().obtainStyledAttributes(attributeSet, R.styleable.ClassicIndicator, 0, 0);
            int indexCount = obtainStyledAttributes.getIndexCount();
            for (int i = 0; i < indexCount; i++) {
                int index = obtainStyledAttributes.getIndex(i);
                if (index == R.styleable.ClassicIndicator_classic_radius) {
                    this.pointRadius = obtainStyledAttributes.getDimensionPixelOffset(index, this.pointRadius);
                } else if (index == R.styleable.ClassicIndicator_classic_color_normal) {
                    this.normalPointColor = obtainStyledAttributes.getColor(index, this.normalPointColor);
                } else if (index == R.styleable.ClassicIndicator_classic_color_selected) {
                    this.selectedPointColor = obtainStyledAttributes.getColor(index, this.selectedPointColor);
                } else if (index == R.styleable.ClassicIndicator_classic_space) {
                    this.pointSpace = obtainStyledAttributes.getDimensionPixelOffset(index, this.pointSpace);
                } else if (index == R.styleable.ClassicIndicator_classic_loop) {
                    this.isSupportLoop = obtainStyledAttributes.getBoolean(index, this.isSupportLoop);
                }
            }
            obtainStyledAttributes.recycle();
            setPadding(10, 5, 5, 10);
        }
    }

    @Override // android.view.View
    protected void onMeasure(int i, int i2) {
        super.onMeasure(i, i2);
        int mode = View.MeasureSpec.getMode(i);
        int size = View.MeasureSpec.getSize(i);
        int mode2 = View.MeasureSpec.getMode(i2);
        int size2 = View.MeasureSpec.getSize(i2);
        if (mode != 1073741824) {
            size = getPaddingLeft() + getPaddingRight() + (getCount() * this.pointRadius * 2) + ((getCount() - 1) * this.pointSpace);
        }
        if (mode2 != 1073741824) {
            size2 = getPaddingTop() + getPaddingBottom() + (this.pointRadius * 2);
        }
        setMeasuredDimension(size, size2);
        configPointLayout();
    }

    private void configPointLayout() {
        clearIndicatorPoint();
        for (int i = 0; i < getCount(); i++) {
            BaseIndicator.IndicatorPoint indicatorPoint = new BaseIndicator.IndicatorPoint();
            indicatorPoint.left = getPaddingLeft() + ((this.pointSpace + (this.pointRadius * 2)) * i);
            indicatorPoint.top = getPaddingTop();
            indicatorPoint.bottom = indicatorPoint.top + (this.pointRadius * 2);
            indicatorPoint.right = indicatorPoint.left + (this.pointRadius * 2);
            indicatorPoint.index = i;
            indicatorPoint.rect = new RectF((float) indicatorPoint.left, (float) indicatorPoint.top, (float) indicatorPoint.right, (float) indicatorPoint.bottom);
            addIndicatorPoint(indicatorPoint);
        }
    }

    @Override // android.view.View
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        drawNormalPoint(canvas);
        drawSelectedPoint(canvas);
    }

    private void drawSelectedPoint(Canvas canvas) {
        canvas.drawCircle(this.selectedPointLeft + ((float) this.pointRadius), (float) (getPaddingTop() + (((getMeasuredHeight() - getPaddingTop()) - getPaddingBottom()) / 2)), (float) this.pointRadius, this.selectedPaint);
    }

    private void drawNormalPoint(Canvas canvas) {
        for (BaseIndicator.IndicatorPoint indicatorPoint : this.indicatorPoints) {
            canvas.drawCircle((float) (indicatorPoint.left + this.pointRadius), (float) (indicatorPoint.top + ((indicatorPoint.bottom - indicatorPoint.top) / 2)), (float) this.pointRadius, this.normalPaint);
        }
    }

    public void onPageScrolled(int i, float f, int i2) {
        setCurrentItem(i, f);
    }

    @Override // com.jd.lib.un.basewidget.widget.banner.indicator.BaseIndicator
    public void onPageSelected(int i) {
        super.onPageSelected(i);
        this.mLastSelected = i;
    }

    private void setCurrentItem(int i) {
        setCurrentItem(i, 0.0f);
    }

    private void setCurrentItem(int i, float f) {
        int paddingLeft = getPaddingLeft() + ((this.pointSpace + (this.pointRadius * 2)) * i);
        if (!this.isSupportLoop || i != getCount() - 1) {
            this.selectedPointLeft = ((float) paddingLeft) + (((float) (this.pointSpace + (this.pointRadius * 2))) * f);
        } else if (i == getCount() - 1) {
            if (this.mLastSelected == 0) {
                int paddingLeft2 = getPaddingLeft();
                int paddingLeft3 = getPaddingLeft() + getPaddingRight();
                int i2 = this.pointRadius;
                this.selectedPointLeft = ((float) paddingLeft2) + (((float) (-(paddingLeft3 + (i2 * 2 * 2)))) * (1.0f - f));
                if (this.selectedPointLeft < ((float) ((-i2) * 2))) {
                    this.selectedPointLeft = ((float) getMeasuredWidth()) + this.selectedPointLeft + ((float) (this.pointRadius * 2));
                }
            } else {
                this.selectedPointLeft = ((float) paddingLeft) + (((float) (getPaddingLeft() + getPaddingRight() + (this.pointRadius * 2 * 2))) * f);
                if (this.selectedPointLeft > ((float) getMeasuredWidth())) {
                    this.selectedPointLeft = (this.selectedPointLeft - ((float) getMeasuredWidth())) - ((float) (this.pointRadius * 2));
                }
            }
        }
        invalidate();
    }
}
