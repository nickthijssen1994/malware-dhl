package com.jd.lib.un.basewidget.widget.a;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.jingdong.common.DpiUtil;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class b extends Drawable {
    private Paint a = new Paint();
    private String b;
    private int c;
    private float d;
    private float e;
    private Context f;

    @Override // android.graphics.drawable.Drawable
    public int getOpacity() {
        return 0;
    }

    @Override // android.graphics.drawable.Drawable
    public void setAlpha(int i) {
    }

    @Override // android.graphics.drawable.Drawable
    public void setColorFilter(@Nullable ColorFilter colorFilter) {
    }

    public b(Context context) {
        this.f = context;
    }

    @Override // android.graphics.drawable.Drawable
    public void draw(@NonNull Canvas canvas) {
        int i = getBounds().right;
        int i2 = getBounds().bottom;
        int sqrt = (int) Math.sqrt((double) ((i * i) + (i2 * i2)));
        this.a.setColor(this.c);
        this.a.setTextSize((float) DpiUtil.dip2px(this.f, this.d));
        this.a.setAntiAlias(true);
        float measureText = this.a.measureText(this.b);
        int i3 = 0;
        canvas.drawColor(0);
        canvas.rotate(-30.0f);
        int dip2px = DpiUtil.dip2px(this.f, 80.0f);
        int dip2px2 = DpiUtil.dip2px(this.f, 60.0f);
        int dip2px3 = DpiUtil.dip2px(this.f, 20.0f);
        double tan = Math.tan(Math.toRadians((double) Math.abs(this.e)));
        double cos = Math.cos(Math.toRadians((double) Math.abs(this.e)));
        Log.d("watermark", cos + " cos");
        while (true) {
            float f = (float) dip2px3;
            if (f < ((float) i) + measureText) {
                double d = (double) i3;
                float f2 = ((float) dip2px2) + measureText;
                double d2 = (double) f2;
                Double.isNaN(d2);
                Double.isNaN(d);
                int i4 = (int) (d * d2 * tan);
                Log.d("watermark", "startY:" + i4);
                int i5 = -dip2px;
                while (i5 <= sqrt) {
                    String str = this.b;
                    double d3 = (double) dip2px3;
                    double d4 = (double) i5;
                    Double.isNaN(d4);
                    Double.isNaN(d3);
                    canvas.drawText(str, (float) ((int) (d3 - (d4 * tan))), (float) (i5 + i4), this.a);
                    i5 += dip2px;
                    i = i;
                    sqrt = sqrt;
                    dip2px2 = dip2px2;
                    dip2px3 = dip2px3;
                }
                i3++;
                dip2px3 = (int) (f + f2);
                measureText = measureText;
            } else {
                canvas.save();
                canvas.restore();
                return;
            }
        }
    }

    public b a(String str) {
        this.b = str;
        return this;
    }

    public b a(int i) {
        this.c = i;
        return this;
    }

    public b a(float f) {
        this.d = f;
        return this;
    }

    public b b(float f) {
        this.e = f;
        return this;
    }
}
