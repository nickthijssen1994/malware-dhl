package com.jd.lib.un.basewidget.widget.simple.header;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import androidx.annotation.ColorInt;
import androidx.annotation.NonNull;
import com.facebook.imagepipeline.common.RotationOptions;
import com.facebook.react.views.text.ReactBaseTextShadowNode;
import com.jd.lib.un.basewidget.widget.simple.abs.AbsRefreshInternal;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshSpinner;
import com.jd.lib.un.basewidget.widget.simple.constant.RefreshState;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshHeader;
import com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshLayout;
import com.jd.lib.un.basewidget.widget.simple.utils.DpiUtils;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class BezierRadarHeader extends AbsRefreshInternal implements RefreshHeader {
    protected int a;
    protected int b;
    protected boolean c;
    protected boolean d;
    protected boolean e;
    protected boolean f;
    protected Path g;
    protected Paint h;
    protected int i;
    protected int j;
    protected int k;
    protected float l;
    protected float m;
    protected float n;
    protected float o;
    protected int p;
    protected float q;
    protected float r;
    protected float s;
    protected Animator t;
    protected RectF u;

    public BezierRadarHeader(Context context) {
        this(context, null);
    }

    public BezierRadarHeader(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public BezierRadarHeader(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.f = false;
        this.k = -1;
        this.p = 0;
        this.q = 0.0f;
        this.r = 0.0f;
        this.s = 0.0f;
        this.u = new RectF(0.0f, 0.0f, 0.0f, 0.0f);
        this.mSpinnerStyle = RefreshSpinner.SCALE;
        this.g = new Path();
        this.h = new Paint();
        this.h.setAntiAlias(true);
        this.n = (float) DpiUtils.dp2px(7.0f);
        this.q = (float) DpiUtils.dp2px(20.0f);
        this.r = (float) DpiUtils.dp2px(7.0f);
        this.h.setStrokeWidth((float) DpiUtils.dp2px(3.0f));
        setMinimumHeight(DpiUtils.dp2px(100.0f));
        if (isInEditMode()) {
            this.i = 1000;
            this.s = 1.0f;
            this.p = RotationOptions.ROTATE_270;
        } else {
            this.s = 0.0f;
        }
        b(-1);
        a(-14540254);
    }

    @Override // android.view.View, android.view.ViewGroup
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        Animator animator = this.t;
        if (animator != null) {
            animator.removeAllListeners();
            this.t.end();
            this.t = null;
        }
    }

    @Override // android.view.View, android.view.ViewGroup
    protected void dispatchDraw(Canvas canvas) {
        int width = getWidth();
        int height = getHeight();
        a(canvas, width);
        a(canvas, width, height);
        b(canvas, width, height);
        c(canvas, width, height);
        super.dispatchDraw(canvas);
    }

    protected void a(Canvas canvas, int i) {
        this.g.reset();
        this.g.lineTo(0.0f, (float) this.i);
        Path path = this.g;
        int i2 = this.k;
        if (i2 < 0) {
            i2 = i / 2;
        }
        int i3 = this.i;
        float f = (float) i;
        path.quadTo((float) i2, (float) (this.j + i3), f, (float) i3);
        this.g.lineTo(f, 0.0f);
        this.h.setColor(this.b);
        canvas.drawPath(this.g, this.h);
    }

    protected void a(Canvas canvas, int i, int i2) {
        float f = 0.0f;
        if (this.l > 0.0f) {
            this.h.setColor(this.a);
            float f2 = (float) i2;
            float px2dp = (float) DpiUtils.px2dp(f2);
            float f3 = (float) (i / 7);
            float f4 = this.m;
            float f5 = (f3 * f4) - (f4 > 1.0f ? ((f4 - 1.0f) * f3) / f4 : 0.0f);
            float f6 = this.m;
            float f7 = 2.0f;
            if (f6 > 1.0f) {
                f = (((f6 - 1.0f) * f2) / 2.0f) / f6;
            }
            float f8 = f2 - f;
            int i3 = 0;
            while (i3 < 7) {
                float f9 = (((float) i3) + 1.0f) - 4.0f;
                Paint paint = this.h;
                double abs = (double) (this.l * (1.0f - ((Math.abs(f9) / 7.0f) * f7)) * 255.0f);
                double d = (double) px2dp;
                Double.isNaN(d);
                Double.isNaN(abs);
                paint.setAlpha((int) (abs * (1.0d - (1.0d / Math.pow((d / 800.0d) + 1.0d, 15.0d)))));
                float f10 = this.n * (1.0f - (1.0f / ((px2dp / 10.0f) + 1.0f)));
                canvas.drawCircle((((float) (i / 2)) - (f10 / 2.0f)) + (f9 * f5), f8 / 2.0f, f10, this.h);
                i3++;
                f5 = f5;
                f7 = 2.0f;
            }
            this.h.setAlpha(255);
        }
    }

    protected void b(Canvas canvas, int i, int i2) {
        if (this.t != null || isInEditMode()) {
            float f = this.q;
            float f2 = this.s;
            float f3 = f * f2;
            float f4 = this.r * f2;
            this.h.setColor(this.a);
            this.h.setStyle(Paint.Style.FILL);
            float f5 = (float) (i / 2);
            float f6 = (float) (i2 / 2);
            canvas.drawCircle(f5, f6, f3, this.h);
            this.h.setStyle(Paint.Style.STROKE);
            float f7 = f4 + f3;
            canvas.drawCircle(f5, f6, f7, this.h);
            this.h.setColor((this.b & 16777215) | ReactBaseTextShadowNode.DEFAULT_TEXT_SHADOW_COLOR);
            this.h.setStyle(Paint.Style.FILL);
            this.u.set(f5 - f3, f6 - f3, f5 + f3, f3 + f6);
            canvas.drawArc(this.u, 270.0f, (float) this.p, true, this.h);
            this.h.setStyle(Paint.Style.STROKE);
            this.u.set(f5 - f7, f6 - f7, f5 + f7, f6 + f7);
            canvas.drawArc(this.u, 270.0f, (float) this.p, false, this.h);
            this.h.setStyle(Paint.Style.FILL);
        }
    }

    protected void c(Canvas canvas, int i, int i2) {
        if (this.o > 0.0f) {
            this.h.setColor(this.a);
            canvas.drawCircle((float) (i / 2), (float) (i2 / 2), this.o, this.h);
        }
    }

    @Override // com.jd.lib.un.basewidget.widget.simple.abs.AbsRefreshInternal, com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshInternal
    public void onMoving(boolean z, float f, int i, int i2, int i3) {
        if (z || this.e) {
            this.e = true;
            this.i = Math.min(i2, i);
            this.j = (int) (((float) Math.max(0, i - i2)) * 1.9f);
            this.m = f;
        }
    }

    @Override // com.jd.lib.un.basewidget.widget.simple.abs.AbsRefreshInternal, com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshInternal
    public void onReleased(@NonNull RefreshLayout refreshLayout, int i, int i2) {
        this.i = i;
        this.e = false;
        ValueAnimator ofInt = ValueAnimator.ofInt(0, 360);
        ofInt.setDuration(720L);
        ofInt.setRepeatCount(-1);
        ofInt.setInterpolator(new AccelerateDecelerateInterpolator());
        ofInt.addUpdateListener(new a((byte) 4));
        DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
        ofFloat.setInterpolator(decelerateInterpolator);
        ofFloat.addUpdateListener(new a((byte) 2));
        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
        ofFloat.setInterpolator(decelerateInterpolator);
        ofFloat2.addUpdateListener(new a((byte) 0));
        AnimatorSet animatorSet = new AnimatorSet();
        animatorSet.playSequentially(ofFloat, ofFloat2, ofInt);
        animatorSet.start();
        int i3 = this.j;
        ValueAnimator ofInt2 = ValueAnimator.ofInt(i3, 0, -((int) (((float) i3) * 0.8f)), 0, -((int) (((float) i3) * 0.4f)), 0);
        ofInt2.addUpdateListener(new a((byte) 1));
        ofInt2.setInterpolator(decelerateInterpolator);
        ofInt2.setDuration(800L);
        ofInt2.start();
        this.t = animatorSet;
    }

    @Override // com.jd.lib.un.basewidget.widget.simple.abs.AbsRefreshInternal, com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshInternal
    public int onFinish(@NonNull RefreshLayout refreshLayout, boolean z) {
        Animator animator = this.t;
        if (animator != null) {
            animator.removeAllListeners();
            this.t.end();
            this.t = null;
        }
        int width = getWidth();
        int height = getHeight();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, (float) Math.sqrt((double) ((width * width) + (height * height))));
        ofFloat.setDuration(400L);
        ofFloat.addUpdateListener(new a((byte) 3));
        ofFloat.start();
        return 400;
    }

    @Override // com.jd.lib.un.basewidget.widget.simple.abs.AbsRefreshInternal, com.jd.lib.un.basewidget.widget.simple.listener.OnStateChangedListener
    public void onStateChanged(@NonNull RefreshLayout refreshLayout, @NonNull RefreshState refreshState, @NonNull RefreshState refreshState2) {
        switch (refreshState2) {
            case None:
            case PullDownToRefresh:
                this.l = 1.0f;
                this.s = 0.0f;
                this.o = 0.0f;
                return;
            default:
                return;
        }
    }

    @Override // com.jd.lib.un.basewidget.widget.simple.abs.AbsRefreshInternal, com.jd.lib.un.basewidget.widget.simple.interfaces.RefreshInternal
    @Deprecated
    public void setPrimaryColors(@ColorInt int... iArr) {
        if (iArr.length > 0 && !this.c) {
            a(iArr[0]);
            this.c = false;
        }
        if (iArr.length > 1 && !this.d) {
            b(iArr[1]);
            this.d = false;
        }
    }

    public BezierRadarHeader a(@ColorInt int i) {
        this.b = i;
        this.c = true;
        return this;
    }

    public BezierRadarHeader b(@ColorInt int i) {
        this.a = i;
        this.d = true;
        return this;
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    protected class a implements ValueAnimator.AnimatorUpdateListener {
        byte a;

        a(byte b) {
            this.a = b;
        }

        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            byte b = this.a;
            if (b == 0) {
                BezierRadarHeader.this.s = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            } else if (1 == b) {
                if (BezierRadarHeader.this.e) {
                    valueAnimator.cancel();
                    return;
                } else {
                    BezierRadarHeader.this.j = ((Integer) valueAnimator.getAnimatedValue()).intValue() / 2;
                }
            } else if (2 == b) {
                BezierRadarHeader.this.l = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            } else if (3 == b) {
                BezierRadarHeader.this.o = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            } else if (4 == b) {
                BezierRadarHeader.this.p = ((Integer) valueAnimator.getAnimatedValue()).intValue();
            }
            BezierRadarHeader.this.invalidate();
        }
    }
}
