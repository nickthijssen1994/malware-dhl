package com.jd.lib.unification;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;
import cn.com.union.fido.common.MIMEType;
import com.facebook.react.uimanager.ViewProps;
import com.jd.lib.unification.album.activity.MediaPreviewActivity;
import com.jd.lib.unification.album.activity.PhotoAlbumActivity;
import com.jd.lib.unification.album.entity.AlbumConstant;
import com.jd.lib.unification.album.entity.AlbumParam;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.entity.VideoConstant;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.video.recorder.VideoRecorderActivity;
import java.util.ArrayList;
import java.util.Iterator;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class UnAlbumStartUtils {
    public static void startAlbum(Activity activity, AlbumParam albumParam, int i) {
        if (activity != null) {
            Intent intent = new Intent(activity, PhotoAlbumActivity.class);
            if (albumParam != null) {
                intent.putExtra(AlbumConstant.ALBUM_PARAM, albumParam);
            }
            activity.startActivityForResult(intent, i);
        }
    }

    public static void startCamera(Activity activity, AlbumParam albumParam, String str, int i) {
        if (activity != null) {
            Intent intent = new Intent(activity, VideoRecorderActivity.class);
            VideoParam videoParam = new VideoParam();
            if (albumParam != null) {
                if (albumParam.cameraOrVideoAction == 1 || albumParam.cameraOrVideoAction == 3) {
                    videoParam.recordMaxTime = Integer.parseInt(albumParam.videoMaxTime);
                    videoParam.recordMinTime = Integer.parseInt(albumParam.videoMinTime);
                    if (albumParam.cameraOrVideoAction == 1) {
                        videoParam.recordFunctionControl = 0;
                    } else {
                        videoParam.recordFunctionControl = 1;
                    }
                    int i2 = albumParam.videoEditorAction;
                    if (i2 != 0) {
                        videoParam.editorFunctionControl = i2 - 1;
                        videoParam.needEditor = true;
                        videoParam.cutMaxTime = Long.parseLong(albumParam.videoMaxTime) * 1000;
                        videoParam.cutMinTime = Long.parseLong(albumParam.videoMinTime) * 1000;
                    } else {
                        videoParam.needEditor = false;
                    }
                } else {
                    videoParam.recordFunctionControl = 2;
                }
                videoParam.needEditorPic = albumParam.needEditorPic;
                if (str.equals("0")) {
                    videoParam.recordCurrentState = Integer.valueOf("0").intValue();
                } else {
                    videoParam.recordCurrentState = Integer.valueOf("1").intValue();
                }
                videoParam.cropShape = albumParam.cropShape;
                videoParam.cropCircleRadius = albumParam.cropCircleRadius;
                videoParam.cropRectX = albumParam.cropRectX;
                videoParam.cropRectY = albumParam.cropRectY;
                videoParam.coverImagePath = albumParam.coverImagePath;
                videoParam.isCoverImageBg = albumParam.isCoverImageBg;
                videoParam.cameraSupport = albumParam.cameraSupport;
            }
            intent.putExtra(VideoConstant.VIDEO_PARAM, videoParam);
            activity.startActivityForResult(intent, i);
        }
    }

    public static void startPreview(Context context, ArrayList<LocalMedia> arrayList, int i) {
        if (context != null && arrayList != null && arrayList.size() != 0) {
            if (i >= arrayList.size()) {
                i = 0;
            }
            Intent intent = new Intent(context, MediaPreviewActivity.class);
            intent.putParcelableArrayListExtra("MEDIA_LIST", arrayList);
            intent.putExtra(ViewProps.POSITION, i);
            context.startActivity(intent);
        }
    }

    public static void startPicturePreview(Context context, ArrayList<String> arrayList, int i) {
        if (context != null && arrayList != null && arrayList.size() != 0) {
            if (i >= arrayList.size()) {
                i = 0;
            }
            ArrayList arrayList2 = new ArrayList();
            Iterator<String> it = arrayList.iterator();
            while (it.hasNext()) {
                String next = it.next();
                if (!TextUtils.isEmpty(next)) {
                    LocalMedia localMedia = new LocalMedia();
                    localMedia.setPath(next);
                    localMedia.setPictureType(MIMEType.MIME_TYPE_JPEG);
                    arrayList2.add(localMedia);
                }
            }
            startPreview(context, arrayList2, i);
        }
    }
}
