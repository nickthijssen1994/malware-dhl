package com.jd.lib.unification.album.utils;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.provider.MediaStore;
import android.text.TextUtils;
import com.jd.lib.un.utils.UnStringUtils;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class FileUtil {
    public static final String VIDEO_COMPRESS_SAVE_DIR = "/cVideo";

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.io.Closeable] */
    /* JADX WARN: Type inference failed for: r1v3 */
    /* JADX WARN: Type inference failed for: r1v4 */
    /* JADX WARN: Type inference failed for: r1v5 */
    /* JADX WARN: Type inference failed for: r1v6, types: [java.io.FileInputStream, java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r6v0, types: [java.io.File] */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.io.Closeable] */
    /* JADX WARN: Type inference failed for: r6v6 */
    /* JADX WARN: Type inference failed for: r6v9 */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static java.lang.String copyFile(java.lang.String r5, java.io.File r6) {
        /*
            java.lang.String r0 = android.os.Environment.DIRECTORY_DCIM
            java.io.File r0 = android.os.Environment.getExternalStoragePublicDirectory(r0)
            boolean r1 = r0.exists()
            if (r1 != 0) goto L_0x000f
            r0.mkdir()
        L_0x000f:
            boolean r5 = com.jd.lib.unification.album.utils.PictureMimeType.isVideo(r5)
            if (r5 == 0) goto L_0x0037
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r0 = r0.getAbsolutePath()
            r5.append(r0)
            java.lang.String r0 = "/"
            r5.append(r0)
            long r0 = java.lang.System.currentTimeMillis()
            r5.append(r0)
            java.lang.String r0 = ".mp4"
            r5.append(r0)
            java.lang.String r5 = r5.toString()
            goto L_0x0058
        L_0x0037:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r0 = r0.getAbsolutePath()
            r5.append(r0)
            java.lang.String r0 = "/"
            r5.append(r0)
            long r0 = java.lang.System.currentTimeMillis()
            r5.append(r0)
            java.lang.String r0 = ".jpg"
            r5.append(r0)
            java.lang.String r5 = r5.toString()
        L_0x0058:
            boolean r0 = com.jd.lib.un.utils.UnStringUtils.isEmpty(r5)
            if (r0 == 0) goto L_0x0061
            java.lang.String r5 = ""
            return r5
        L_0x0061:
            r0 = 0
            java.io.FileInputStream r1 = new java.io.FileInputStream     // Catch: IOException -> 0x0093, all -> 0x008f
            r1.<init>(r6)     // Catch: IOException -> 0x0093, all -> 0x008f
            java.io.FileOutputStream r6 = new java.io.FileOutputStream     // Catch: IOException -> 0x008a, all -> 0x0087
            r6.<init>(r5)     // Catch: IOException -> 0x008a, all -> 0x0087
            r0 = 1024(0x400, float:1.435E-42)
            byte[] r0 = new byte[r0]     // Catch: IOException -> 0x0085, all -> 0x00a1
        L_0x0070:
            int r2 = r1.read(r0)     // Catch: IOException -> 0x0085, all -> 0x00a1
            if (r2 <= 0) goto L_0x007b
            r3 = 0
            r6.write(r0, r3, r2)     // Catch: IOException -> 0x0085, all -> 0x00a1
            goto L_0x0070
        L_0x007b:
            r6.flush()     // Catch: IOException -> 0x0085, all -> 0x00a1
            r6.close()     // Catch: IOException -> 0x0085, all -> 0x00a1
            r1.close()     // Catch: IOException -> 0x0085, all -> 0x00a1
            goto L_0x009a
        L_0x0085:
            r0 = move-exception
            goto L_0x0097
        L_0x0087:
            r5 = move-exception
            r6 = r0
            goto L_0x00a2
        L_0x008a:
            r6 = move-exception
            r4 = r0
            r0 = r6
            r6 = r4
            goto L_0x0097
        L_0x008f:
            r5 = move-exception
            r6 = r0
            r1 = r6
            goto L_0x00a2
        L_0x0093:
            r6 = move-exception
            r1 = r0
            r0 = r6
            r6 = r1
        L_0x0097:
            r0.printStackTrace()     // Catch: all -> 0x00a1
        L_0x009a:
            closeQuietly(r1)
            closeQuietly(r6)
            return r5
        L_0x00a1:
            r5 = move-exception
        L_0x00a2:
            closeQuietly(r1)
            closeQuietly(r6)
            throw r5
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.lib.unification.album.utils.FileUtil.copyFile(java.lang.String, java.io.File):java.lang.String");
    }

    private static void closeQuietly(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static String saveMediaFile(Activity activity, String str, String str2) {
        String copyFile = copyFile(str2, new File(str));
        if (UnStringUtils.isEmpty(copyFile)) {
            return "";
        }
        File file = new File(copyFile);
        String absolutePath = file.getAbsolutePath();
        Uri fromFile = Uri.fromFile(file);
        ContentValues contentValues = new ContentValues(2);
        if (PictureMimeType.isVideo(str2)) {
            contentValues.put("mime_type", str2);
            contentValues.put("_data", absolutePath);
            activity.getContentResolver().insert(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, contentValues);
            activity.sendBroadcast(new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE", fromFile));
        } else {
            contentValues.put("mime_type", str2);
            contentValues.put("_data", absolutePath);
            activity.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);
            activity.sendBroadcast(new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE", fromFile));
        }
        return absolutePath;
    }

    public static long getVideoDuration(String str) {
        File file = new File(str);
        if (!file.exists()) {
            return -100;
        }
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        mediaMetadataRetriever.setDataSource(file.getAbsolutePath());
        String extractMetadata = mediaMetadataRetriever.extractMetadata(9);
        if (TextUtils.isEmpty(extractMetadata)) {
            return 0;
        }
        return Long.parseLong(extractMetadata);
    }
}
