package com.jd.lib.unification.album.utils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import com.jingdong.common.DpiUtil;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class BitmapUtil {
    public static Bitmap getFitSampleBitmap(Context context, String str) {
        if (str == null) {
            return null;
        }
        int readPictureDegree = ExifUtil.readPictureDegree(str);
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(str, options);
        if (options.outHeight < 0 || options.outWidth < 0) {
            return null;
        }
        options.inSampleSize = getFitInSampleSize(context, options, readPictureDegree);
        options.inJustDecodeBounds = false;
        Bitmap decodeFile = BitmapFactory.decodeFile(str, options);
        return readPictureDegree != 0 ? rotateBitmap(decodeFile, readPictureDegree) : decodeFile;
    }

    private static Bitmap rotateBitmap(Bitmap bitmap, int i) {
        Matrix matrix = new Matrix();
        matrix.postRotate((float) i);
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
    }

    private static int getFitInSampleSize(Context context, BitmapFactory.Options options, int i) {
        int i2;
        int i3;
        int width = DpiUtil.getWidth(context);
        int height = DpiUtil.getHeight(context);
        if (i == 90 || i == 270) {
            i2 = options.outHeight;
            i3 = options.outWidth;
        } else {
            i2 = options.outWidth;
            i3 = options.outHeight;
        }
        if (i2 > width || i3 > height) {
            return Math.max(Math.round(((float) i2) / ((float) width)), Math.round(((float) i3) / ((float) height)));
        }
        return 1;
    }

    public static float getScale(Context context, Bitmap bitmap) {
        int width = bitmap.getWidth();
        return Math.min(((float) DpiUtil.getHeight(context)) / ((float) bitmap.getHeight()), ((float) DpiUtil.getWidth(context)) / ((float) width));
    }
}
