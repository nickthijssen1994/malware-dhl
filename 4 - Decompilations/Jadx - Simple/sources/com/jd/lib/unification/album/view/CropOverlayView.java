package com.jd.lib.unification.album.view;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.graphics.Region;
import android.os.Build;
import android.util.AttributeSet;
import android.view.View;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.jd.lib.unification.album.builder.CropImageOption;
import com.jd.lib.unification.album.mInterface.CropOverlayViewLayoutFinishLitener;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class CropOverlayView extends View {
    private Paint bgPaint;
    private Paint borderPaint;
    private float circleRadius;
    private CropOverlayViewLayoutFinishLitener cropOverlayViewLayoutFinishLitener;
    int h;
    private boolean laidOut;
    private Context mContext;
    private CropShape mCropShape;
    private RectF mEdges;
    private Path mPath;
    private float rectX;
    private float rectY;
    int w;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum CropShape {
        RECTANGLE,
        CIRCLE
    }

    public void setCropOverlayViewLayoutFinishLitener(CropOverlayViewLayoutFinishLitener cropOverlayViewLayoutFinishLitener) {
        this.cropOverlayViewLayoutFinishLitener = cropOverlayViewLayoutFinishLitener;
    }

    public CropOverlayView(Context context) {
        this(context, null);
    }

    public CropOverlayView(Context context, @Nullable AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public CropOverlayView(Context context, @Nullable AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.mPath = new Path();
        this.mEdges = new RectF();
        this.bgPaint = new Paint();
        this.bgPaint.setAntiAlias(true);
        this.bgPaint.setColor(Color.argb(119, 0, 0, 0));
        this.bgPaint.setStyle(Paint.Style.FILL);
        this.borderPaint = new Paint();
        this.borderPaint.setAntiAlias(true);
        this.borderPaint.setColor(-1);
        this.borderPaint.setStrokeWidth((float) DpiUtil.dip2px(context, 2.0f));
        this.borderPaint.setStyle(Paint.Style.STROKE);
        this.mContext = context;
    }

    public void processStyledAttributes(@NonNull TypedArray typedArray) {
        this.mCropShape = typedArray.getInt(R.styleable.CropImageView_crop_overlay_crop_shape, 0) == 0 ? CropShape.RECTANGLE : CropShape.CIRCLE;
        this.circleRadius = typedArray.getDimension(R.styleable.CropImageView_crop_overlay_circle_radius, 0.0f);
        this.rectX = typedArray.getDimension(R.styleable.CropImageView_crop_overlay_rectX, 0.0f);
        this.rectY = typedArray.getDimension(R.styleable.CropImageView_crop_overlay_rectY, 0.0f);
    }

    public void setCropOption(CropImageOption cropImageOption) {
        this.mCropShape = cropImageOption.getCropShape();
        this.circleRadius = cropImageOption.getCropCircleRadius();
        this.rectX = cropImageOption.getCropRectX();
        this.rectY = cropImageOption.getCropRectY();
    }

    private void initEdges() {
        defaultEdges();
        if (this.mCropShape == CropShape.RECTANGLE) {
            this.mEdges.left = ((((float) this.w) - this.rectX) / 20.0f) + ((float) DpiUtil.dip2px(this.mContext, 2.0f));
            this.mEdges.top = ((((float) this.h) - this.rectY) / 2.0f) + ((float) DpiUtil.dip2px(this.mContext, 2.0f));
            RectF rectF = this.mEdges;
            rectF.right = (rectF.left + this.rectX) - ((float) DpiUtil.dip2px(this.mContext, 2.0f));
            RectF rectF2 = this.mEdges;
            rectF2.bottom = (rectF2.top + this.rectY) - ((float) DpiUtil.dip2px(this.mContext, 2.0f));
        } else if (this.mCropShape == CropShape.CIRCLE) {
            this.mEdges.left = ((((float) this.w) - (this.circleRadius * 2.0f)) / 2.0f) + ((float) DpiUtil.dip2px(this.mContext, 2.0f));
            this.mEdges.top = ((((float) this.h) - (this.circleRadius * 2.0f)) / 2.0f) + ((float) DpiUtil.dip2px(this.mContext, 2.0f));
            RectF rectF3 = this.mEdges;
            rectF3.right = (rectF3.left + (this.circleRadius * 2.0f)) - ((float) DpiUtil.dip2px(this.mContext, 2.0f));
            RectF rectF4 = this.mEdges;
            rectF4.bottom = (rectF4.top + (this.circleRadius * 2.0f)) - ((float) DpiUtil.dip2px(this.mContext, 2.0f));
        }
        UnLog.d("CropOverlayView", "mEdges  " + this.mEdges.left + ":" + this.mEdges.top + ":" + this.mEdges.right + ":" + this.mEdges.bottom);
    }

    private void defaultEdges() {
        if (this.mCropShape == CropShape.RECTANGLE) {
            float f = this.rectX;
            if (f > ((float) this.w) || f <= 0.0f) {
                this.rectX = (float) ((this.w / 2) - DpiUtil.dip2px(this.mContext, 10.0f));
            }
            float f2 = this.rectY;
            if (f2 > ((float) this.h) || f2 <= 0.0f) {
                this.rectY = this.rectX;
                return;
            }
            return;
        }
        float f3 = this.circleRadius;
        if (2.0f * f3 > ((float) this.w) || f3 <= 0.0f) {
            this.circleRadius = (float) ((this.w / 2) - DpiUtil.dip2px(this.mContext, 10.0f));
        }
    }

    public RectF getEdges() {
        return this.mEdges;
    }

    public CropShape getCropShape() {
        return this.mCropShape;
    }

    @Override // android.view.View
    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        super.onLayout(z, i, i2, i3, i4);
        if (z) {
            this.w = getWidth();
            this.h = getHeight();
            initEdges();
            if (!this.laidOut) {
                this.laidOut = true;
                CropOverlayViewLayoutFinishLitener cropOverlayViewLayoutFinishLitener = this.cropOverlayViewLayoutFinishLitener;
                if (cropOverlayViewLayoutFinishLitener != null) {
                    cropOverlayViewLayoutFinishLitener.cropImageInfo(null);
                }
            }
        }
    }

    @Override // android.view.View
    protected void onDraw(Canvas canvas) {
        if (this.mCropShape == CropShape.CIRCLE || this.mCropShape == CropShape.RECTANGLE) {
            drawBg(canvas);
            drawBorders(canvas);
        }
    }

    private void drawBg(Canvas canvas) {
        this.mPath.reset();
        if (this.mCropShape == CropShape.RECTANGLE) {
            this.mPath.addRect(this.mEdges, Path.Direction.CW);
        } else {
            this.mPath.addCircle((float) (this.w / 2), (float) (this.h / 2), this.circleRadius, Path.Direction.CW);
        }
        canvas.save();
        if (Build.VERSION.SDK_INT >= 26) {
            canvas.clipOutPath(this.mPath);
        } else {
            canvas.clipPath(this.mPath, Region.Op.XOR);
        }
        canvas.drawRect(0.0f, 0.0f, (float) this.w, (float) this.h, this.bgPaint);
        canvas.restore();
    }

    private void drawBorders(Canvas canvas) {
        if (this.mCropShape == CropShape.RECTANGLE) {
            canvas.drawRect(this.mEdges, this.borderPaint);
        } else {
            canvas.drawOval(this.mEdges, this.borderPaint);
        }
    }
}
