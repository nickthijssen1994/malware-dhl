package com.jd.lib.unification.album.filter.filter;

import android.graphics.Bitmap;
import android.opengl.GLSurfaceView;
import android.os.Build;
import com.jingdong.common.UnLog;
import java.nio.IntBuffer;
import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;
import javax.microedition.khronos.opengles.GL10;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class PixelBuffer {
    static final boolean LIST_CONFIGS = false;
    static final String TAG = "PixelBuffer";
    Bitmap mBitmap;
    EGLConfig[] mEGLConfigs;
    EGLSurface mEGLSurface;
    int mHeight;
    GLSurfaceView.Renderer mRenderer;
    int mWidth;
    EGL10 mEGL = (EGL10) EGLContext.getEGL();
    EGLDisplay mEGLDisplay = this.mEGL.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
    EGLConfig mEGLConfig = chooseConfig();
    EGLContext mEGLContext = this.mEGL.eglCreateContext(this.mEGLDisplay, this.mEGLConfig, EGL10.EGL_NO_CONTEXT, new int[]{12440, 2, 12344});
    GL10 mGL = (GL10) this.mEGLContext.getGL();
    String mThreadOwner = Thread.currentThread().getName();

    public PixelBuffer(int i, int i2) {
        this.mWidth = i;
        this.mHeight = i2;
        int[] iArr = {12375, this.mWidth, 12374, this.mHeight, 12344};
        this.mEGL.eglInitialize(this.mEGLDisplay, new int[2]);
        this.mEGLSurface = this.mEGL.eglCreatePbufferSurface(this.mEGLDisplay, this.mEGLConfig, iArr);
        EGL10 egl10 = this.mEGL;
        EGLDisplay eGLDisplay = this.mEGLDisplay;
        EGLSurface eGLSurface = this.mEGLSurface;
        egl10.eglMakeCurrent(eGLDisplay, eGLSurface, eGLSurface, this.mEGLContext);
    }

    public void setRenderer(GLSurfaceView.Renderer renderer) {
        this.mRenderer = renderer;
        if (Thread.currentThread().getName().equals(this.mThreadOwner)) {
            this.mRenderer.onSurfaceCreated(this.mGL, this.mEGLConfig);
            this.mRenderer.onSurfaceChanged(this.mGL, this.mWidth, this.mHeight);
        } else if (UnLog.E) {
            UnLog.e(TAG, "setRenderer: This thread does not own the OpenGL context.");
        }
    }

    public Bitmap getBitmap() {
        if (this.mRenderer == null) {
            if (UnLog.E) {
                UnLog.e(TAG, "getBitmap: Renderer was not set.");
            }
            return null;
        } else if (!Thread.currentThread().getName().equals(this.mThreadOwner)) {
            if (UnLog.E) {
                UnLog.e(TAG, "getBitmap: This thread does not own the OpenGL context.");
            }
            return null;
        } else {
            this.mRenderer.onDrawFrame(this.mGL);
            this.mRenderer.onDrawFrame(this.mGL);
            convertToBitmap();
            return this.mBitmap;
        }
    }

    public void destroy() {
        this.mRenderer.onDrawFrame(this.mGL);
        this.mRenderer.onDrawFrame(this.mGL);
        this.mEGL.eglMakeCurrent(this.mEGLDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);
        this.mEGL.eglDestroySurface(this.mEGLDisplay, this.mEGLSurface);
        this.mEGL.eglDestroyContext(this.mEGLDisplay, this.mEGLContext);
        this.mEGL.eglTerminate(this.mEGLDisplay);
    }

    private EGLConfig chooseConfig() {
        int[] iArr = {12325, 0, 12326, 0, 12324, 8, 12323, 8, 12322, 8, 12321, 8, 12352, 4, 12344};
        int[] iArr2 = new int[1];
        this.mEGL.eglChooseConfig(this.mEGLDisplay, iArr, null, 0, iArr2);
        int i = iArr2[0];
        this.mEGLConfigs = new EGLConfig[i];
        this.mEGL.eglChooseConfig(this.mEGLDisplay, iArr, this.mEGLConfigs, i, iArr2);
        return this.mEGLConfigs[0];
    }

    private void listConfig() {
        EGLConfig[] eGLConfigArr = this.mEGLConfigs;
        for (EGLConfig eGLConfig : eGLConfigArr) {
            getConfigAttrib(eGLConfig, 12325);
            getConfigAttrib(eGLConfig, 12326);
            getConfigAttrib(eGLConfig, 12324);
            getConfigAttrib(eGLConfig, 12323);
            getConfigAttrib(eGLConfig, 12322);
            getConfigAttrib(eGLConfig, 12321);
        }
    }

    private int getConfigAttrib(EGLConfig eGLConfig, int i) {
        int[] iArr = new int[1];
        if (this.mEGL.eglGetConfigAttrib(this.mEGLDisplay, eGLConfig, i, iArr)) {
            return iArr[0];
        }
        return 0;
    }

    private void convertToBitmap() {
        Bitmap.Config config;
        int i = this.mWidth;
        int i2 = this.mHeight;
        int[] iArr = new int[i * i2];
        IntBuffer allocate = IntBuffer.allocate(i * i2);
        this.mGL.glReadPixels(0, 0, this.mWidth, this.mHeight, 6408, 5121, allocate);
        int[] array = allocate.array();
        for (int i3 = 0; i3 < this.mHeight; i3++) {
            int i4 = 0;
            while (true) {
                int i5 = this.mWidth;
                if (i4 < i5) {
                    iArr[(((this.mHeight - i3) - 1) * i5) + i4] = array[(i5 * i3) + i4];
                    i4++;
                }
            }
        }
        if (Build.VERSION.SDK_INT >= 21) {
            config = Bitmap.Config.ARGB_4444;
        } else {
            config = Bitmap.Config.ARGB_8888;
        }
        try {
            this.mBitmap = Bitmap.createBitmap(this.mWidth, this.mHeight, config);
            this.mBitmap.copyPixelsFromBuffer(IntBuffer.wrap(iArr));
        } catch (Exception e) {
            if (UnLog.E) {
                e.printStackTrace();
            }
        }
    }
}
