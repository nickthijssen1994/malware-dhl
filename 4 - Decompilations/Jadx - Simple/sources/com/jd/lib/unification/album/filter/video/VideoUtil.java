package com.jd.lib.unification.album.filter.video;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.CamcorderProfile;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.text.TextUtils;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.TranslateAnimation;
import com.jd.lib.unification.album.filter.FilterTools;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.UnLog;
import java.io.File;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class VideoUtil {
    private static final String TAG = "VideoUtil";

    public static int getVideoBitRate(int i, int i2) {
        return (i >= 1920 || i2 >= 1920) ? 4194304 : 2097152;
    }

    public static void deleteFile(String str) {
        File file = new File(str);
        if (file.exists()) {
            file.delete();
        }
    }

    public static Animation getTranslateYAnim(float f, Animation.AnimationListener animationListener) {
        TranslateAnimation translateAnimation = new TranslateAnimation(1, 0.0f, 1, 0.0f, 1, 0.0f, 2, f);
        translateAnimation.setInterpolator(new LinearInterpolator());
        translateAnimation.setFillAfter(false);
        translateAnimation.setDuration(1000);
        if (animationListener != null) {
            translateAnimation.setAnimationListener(animationListener);
        }
        return translateAnimation;
    }

    public static Animation getAppearTranslateYAnim(float f, Animation.AnimationListener animationListener) {
        TranslateAnimation translateAnimation = new TranslateAnimation(1, 0.0f, 1, 0.0f, 2, f, 1, 0.0f);
        translateAnimation.setInterpolator(new LinearInterpolator());
        translateAnimation.setFillAfter(false);
        translateAnimation.setDuration(200);
        if (animationListener != null) {
            translateAnimation.setAnimationListener(animationListener);
        }
        return translateAnimation;
    }

    public static Animation getTranslateXAnim(float f, Animation.AnimationListener animationListener) {
        TranslateAnimation translateAnimation = new TranslateAnimation(2, f, 1, 0.0f, 1, 0.0f, 1, 0.0f);
        translateAnimation.setInterpolator(new LinearInterpolator());
        translateAnimation.setFillAfter(false);
        translateAnimation.setDuration(200);
        if (animationListener != null) {
            translateAnimation.setAnimationListener(animationListener);
        }
        return translateAnimation;
    }

    public static Animation getAlphaAnim(Animation.AnimationListener animationListener) {
        AlphaAnimation alphaAnimation = new AlphaAnimation(1.0f, 0.0f);
        alphaAnimation.setInterpolator(new LinearInterpolator());
        alphaAnimation.setFillAfter(false);
        alphaAnimation.setDuration(200);
        if (animationListener != null) {
            alphaAnimation.setAnimationListener(animationListener);
        }
        return alphaAnimation;
    }

    public static Bitmap toTurn(Context context, Bitmap bitmap, int i, boolean z, int i2, int i3) {
        if (bitmap == null) {
            return bitmap;
        }
        Matrix matrix = new Matrix();
        matrix.postRotate((float) i);
        Bitmap createBitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
        if (!z) {
            return createBitmap;
        }
        int width = createBitmap.getWidth();
        float createCenterPictureRate = createCenterPictureRate(context, width, createBitmap.getHeight());
        int i4 = (int) (((float) i2) * createCenterPictureRate);
        return Bitmap.createBitmap(createBitmap, (width / 2) - (i4 / 2), (int) (((float) i3) * createCenterPictureRate), i4, i4);
    }

    private static float createCenterPictureRate(Context context, int i, int i2) {
        return Math.min(((float) i) / ((float) DpiUtil.getWidth(context)), ((float) i2) / ((float) DpiUtil.getHeight(context)));
    }

    public static String createFilterVideoName(String str, FilterTools.FilterType filterType, boolean z) {
        String name = new File(str).getName();
        String str2 = "";
        if (!TextUtils.isEmpty(name)) {
            String[] split = name.split("\\.");
            if (split.length >= 2) {
                StringBuffer stringBuffer = new StringBuffer();
                stringBuffer.append(System.currentTimeMillis());
                stringBuffer.append("_");
                if (z) {
                    stringBuffer.append("cut");
                    stringBuffer.append("_");
                }
                stringBuffer.append("filter-");
                stringBuffer.append(FilterTools.getFilterName(filterType));
                stringBuffer.append(".");
                stringBuffer.append(split[1]);
                str2 = stringBuffer.toString();
                if (UnLog.D) {
                    UnLog.e(TAG, "outName:" + str2);
                }
            }
        }
        return str2;
    }

    public static String createOutVideoName(String str) {
        if (!TextUtils.isEmpty(str)) {
            String name = new File(str).getName();
            if (!TextUtils.isEmpty(name)) {
                String[] split = name.split("\\.");
                if (split.length >= 2) {
                    StringBuffer stringBuffer = new StringBuffer();
                    stringBuffer.append(System.currentTimeMillis());
                    stringBuffer.append("_");
                    stringBuffer.append("cut.");
                    stringBuffer.append(split[1]);
                    if (UnLog.D) {
                        UnLog.e(TAG, "outName:" + stringBuffer.toString());
                    }
                    return stringBuffer.toString();
                }
            }
        }
        return "";
    }

    public static String createOutVideoPath(String str) {
        if (TextUtils.isEmpty(str)) {
            return "";
        }
        String str2 = Environment.getExternalStorageDirectory().getAbsolutePath() + "/jd/video/";
        File file = new File(str2);
        if (!file.exists()) {
            file.mkdirs();
        }
        if (UnLog.D) {
            UnLog.d(TAG, "videoOutPath:" + str2);
        }
        return str2;
    }

    public static void galleryAddPic(Context context, File file) {
        if (file != null) {
            Intent intent = new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE");
            intent.setData(Uri.fromFile(file));
            context.sendBroadcast(intent);
        }
    }

    public static boolean isSupportFilter() {
        return Build.VERSION.SDK_INT >= 18;
    }

    public static int getFramRate() {
        CamcorderProfile camcorderProfile;
        if (CamcorderProfile.hasProfile(0, 5)) {
            camcorderProfile = CamcorderProfile.get(0, 5);
        } else if (CamcorderProfile.hasProfile(0, 4)) {
            camcorderProfile = CamcorderProfile.get(4);
        } else if (CamcorderProfile.hasProfile(0, 7)) {
            camcorderProfile = CamcorderProfile.get(7);
        } else {
            camcorderProfile = CamcorderProfile.get(0, 0);
        }
        if (camcorderProfile == null) {
            return -1;
        }
        if (UnLog.D) {
            UnLog.d(TAG, "videoFrameRate:" + camcorderProfile.videoFrameRate);
        }
        return camcorderProfile.videoFrameRate;
    }
}
