package com.jd.lib.unification.album.view;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ValueAnimator;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewTreeObserver;
import androidx.annotation.Nullable;
import androidx.core.view.ViewCompat;
import androidx.viewpager.widget.ViewPager;
import com.jingdong.common.DpiUtil;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class DropDownViewPager extends ViewPager {
    public static final int BACK_DURATION = 300;
    public static final int DRAG_GAP_PX = 50;
    private static final int DURATION = 300;
    public static final String EXTRA_VIEW_INFO = "EXTRA_VIEW_INFO";
    public static final String HEIGHT = "height";
    public static final String LEFT = "left";
    public static final float MIN_SCALE_WEIGHT = 0.25f;
    public static final int STATUS_BACK = 2;
    public static final int STATUS_MOVING = 1;
    public static final int STATUS_NORMAL = 0;
    public static final String TAG = "DropDownViewPager";
    public static final String TOP = "top";
    public static final String WIDTH = "width";
    private Context context;
    private int currentPageStatus;
    @Nullable
    private DropViewPagerListener dropViewPagerListener;
    private float mLastMotionX;
    private float mLastMotionY;
    private int mOriginCenterX;
    private int mOriginCenterY;
    private int mOriginHeight;
    private int mOriginLeft;
    private int mOriginTop;
    private int mOriginWidth;
    private float mScaleX;
    private float mScaleY;
    private float mTargetHeight;
    private float mTargetWidth;
    private float mTranslationX;
    private float mTranslationY;
    private String mUniqueIdentifier;
    @Nullable
    private VelocityTracker mVelocityTracker;
    private int touchSlop;
    private int currentStatus = 0;
    public boolean canScroll = true;
    private boolean enterAnimationEnd = true;
    private boolean finishWithAnimationStart = false;
    private float currentAlpha = 1.0f;
    private boolean supportAnimation = false;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface DropViewPagerListener {
        boolean canDropDown();

        @Nullable
        View getCurrentView();

        Intent getIntent();

        @Nullable
        String getUniqueIdentifier();

        void onDropDownRecovered(boolean z);

        void onDropDownRelease(String str, boolean z);

        void onDropDownStart(boolean z);

        void onPageScrollStateChanged(int i);

        void onPageScrolled(int i, float f, int i2);

        void onPageSelected(int i);
    }

    public DropDownViewPager(Context context) {
        super(context);
        onInit(context);
        this.context = context;
    }

    public DropDownViewPager(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        onInit(context);
        this.context = context;
    }

    private void onInit(Context context) {
        this.touchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
        setBackgroundColor(0);
        addOnPageChangeListener(new ViewPager.OnPageChangeListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.1
            public void onPageScrolled(int i, float f, int i2) {
                if (DropDownViewPager.this.dropViewPagerListener != null) {
                    DropDownViewPager.this.dropViewPagerListener.onPageScrolled(i, f, i2);
                }
            }

            public void onPageSelected(int i) {
                if (DropDownViewPager.this.dropViewPagerListener != null) {
                    DropDownViewPager.this.dropViewPagerListener.onPageSelected(i);
                }
            }

            public void onPageScrollStateChanged(int i) {
                DropDownViewPager.this.currentPageStatus = i;
                if (DropDownViewPager.this.dropViewPagerListener != null) {
                    DropDownViewPager.this.dropViewPagerListener.onPageScrollStateChanged(i);
                }
            }
        });
        getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.2
            @Override // android.view.ViewTreeObserver.OnGlobalLayoutListener
            public void onGlobalLayout() {
                if (Build.VERSION.SDK_INT >= 16) {
                    DropDownViewPager.this.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                }
                if (DropDownViewPager.this.dropViewPagerListener == null) {
                    DropDownViewPager.this.supportAnimation = false;
                    DropDownViewPager.this.setBackgroundColor(-16777216);
                    return;
                }
                DropDownViewPager dropDownViewPager = DropDownViewPager.this;
                dropDownViewPager.mUniqueIdentifier = dropDownViewPager.dropViewPagerListener.getUniqueIdentifier();
                Bundle bundle = null;
                if (DropDownViewPager.this.dropViewPagerListener.getIntent() != null) {
                    bundle = DropDownViewPager.this.dropViewPagerListener.getIntent().getBundleExtra(DropDownViewPager.EXTRA_VIEW_INFO);
                }
                if (bundle == null || bundle.getInt("left", -1) == -1) {
                    DropDownViewPager.this.supportAnimation = false;
                    DropDownViewPager.this.setBackgroundColor(-16777216);
                    DropDownViewPager.this.dropViewPagerListener.onDropDownRecovered(true);
                    return;
                }
                View currentView = DropDownViewPager.this.dropViewPagerListener.getCurrentView();
                if (currentView == null) {
                    DropDownViewPager.this.supportAnimation = false;
                    DropDownViewPager.this.setBackgroundColor(-16777216);
                    DropDownViewPager.this.dropViewPagerListener.onDropDownRecovered(true);
                    return;
                }
                DropDownViewPager.this.supportAnimation = true;
                DropDownViewPager.this.mOriginLeft = bundle.getInt("left", 0);
                DropDownViewPager.this.mOriginTop = bundle.getInt("top", 0);
                DropDownViewPager.this.mOriginWidth = bundle.getInt("width", 0);
                DropDownViewPager.this.mOriginHeight = bundle.getInt("height", 0);
                DropDownViewPager dropDownViewPager2 = DropDownViewPager.this;
                dropDownViewPager2.mOriginCenterX = dropDownViewPager2.mOriginLeft + (DropDownViewPager.this.mOriginWidth / 2);
                DropDownViewPager dropDownViewPager3 = DropDownViewPager.this;
                dropDownViewPager3.mOriginCenterY = dropDownViewPager3.mOriginTop + (DropDownViewPager.this.mOriginHeight / 2);
                int[] iArr = new int[2];
                currentView.getLocationOnScreen(iArr);
                DropDownViewPager.this.mTargetWidth = (float) currentView.getWidth();
                DropDownViewPager.this.mTargetHeight = (float) currentView.getHeight();
                DropDownViewPager dropDownViewPager4 = DropDownViewPager.this;
                dropDownViewPager4.mScaleX = ((float) dropDownViewPager4.mOriginWidth) / DropDownViewPager.this.mTargetWidth;
                DropDownViewPager dropDownViewPager5 = DropDownViewPager.this;
                dropDownViewPager5.mScaleY = ((float) dropDownViewPager5.mOriginHeight) / DropDownViewPager.this.mTargetHeight;
                float f = ((float) iArr[0]) + (DropDownViewPager.this.mTargetWidth / 2.0f);
                float f2 = ((float) iArr[1]) + (DropDownViewPager.this.mTargetHeight / 2.0f);
                DropDownViewPager dropDownViewPager6 = DropDownViewPager.this;
                dropDownViewPager6.mTranslationX = ((float) dropDownViewPager6.mOriginCenterX) - f;
                DropDownViewPager dropDownViewPager7 = DropDownViewPager.this;
                dropDownViewPager7.mTranslationY = ((float) dropDownViewPager7.mOriginCenterY) - f2;
                currentView.setTranslationX(DropDownViewPager.this.mTranslationX);
                currentView.setTranslationY(DropDownViewPager.this.mTranslationY);
                currentView.setScaleX(DropDownViewPager.this.mScaleX);
                currentView.setScaleY(DropDownViewPager.this.mScaleY);
                DropDownViewPager.this.performEnterAnimation(currentView);
            }
        });
    }

    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
        try {
            if (!this.canScroll) {
                return false;
            }
            switch (motionEvent.getAction() & 255) {
                case 0:
                    this.mLastMotionX = motionEvent.getRawX();
                    this.mLastMotionY = motionEvent.getRawY();
                    break;
                case 2:
                    if (this.dropViewPagerListener != null && motionEvent.getPointerCount() == 1) {
                        float rawY = motionEvent.getRawY() - this.mLastMotionY;
                        float abs = Math.abs(motionEvent.getRawX() - this.mLastMotionX);
                        float abs2 = Math.abs(rawY);
                        if (rawY <= 0.0f || Math.sqrt((double) ((abs * abs) + (abs2 * abs2))) < ((double) this.touchSlop) || abs2 <= abs || !this.dropViewPagerListener.canDropDown()) {
                            return DropDownViewPager.super.onInterceptTouchEvent(motionEvent);
                        }
                        this.dropViewPagerListener.onDropDownStart(false);
                        return onTouchEvent(motionEvent);
                    }
                    break;
            }
            return DropDownViewPager.super.onInterceptTouchEvent(motionEvent);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            return false;
        }
    }

    public void setDropViewPagerListener(@Nullable DropViewPagerListener dropViewPagerListener) {
        this.dropViewPagerListener = dropViewPagerListener;
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (!this.canScroll) {
            return false;
        }
        int action = motionEvent.getAction() & 255;
        int i = this.currentStatus;
        if (i == 2) {
            return false;
        }
        switch (action) {
            case 0:
                this.mLastMotionX = motionEvent.getRawX();
                this.mLastMotionY = motionEvent.getRawY();
                addIntoVelocity(motionEvent);
                break;
            case 1:
            case 3:
                if (i == 1) {
                    float rawX = motionEvent.getRawX();
                    float rawY = motionEvent.getRawY();
                    if (computeYVelocity() >= 500.0f || Math.abs(rawY - this.mLastMotionY) > ((float) (DpiUtil.getHeight(this.context) / 4))) {
                        if (this.dropViewPagerListener != null) {
                            finishWithAnimationFromDropDown("2");
                            break;
                        }
                    } else {
                        setupBack(rawX, rawY);
                        break;
                    }
                } else {
                    return DropDownViewPager.super.onTouchEvent(motionEvent);
                }
                break;
            case 2:
                addIntoVelocity(motionEvent);
                int rawY2 = (int) (motionEvent.getRawY() - this.mLastMotionY);
                if (rawY2 <= 50 && this.currentStatus != 1) {
                    return DropDownViewPager.super.onTouchEvent(motionEvent);
                }
                if (this.currentPageStatus != 1 && (rawY2 > 50 || this.currentStatus == 1)) {
                    setupMoving(motionEvent.getRawX(), motionEvent.getRawY());
                    return true;
                }
                break;
        }
        return DropDownViewPager.super.onTouchEvent(motionEvent);
    }

    private void setupBack(final float f, final float f2) {
        this.currentStatus = 2;
        float f3 = this.mLastMotionY;
        if (f2 != f3) {
            ValueAnimator ofFloat = ValueAnimator.ofFloat(f2, f3);
            ofFloat.setDuration(300L);
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.3
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                    DropDownViewPager.this.setupMoving((((floatValue - DropDownViewPager.this.mLastMotionY) / (f2 - DropDownViewPager.this.mLastMotionY)) * (f - DropDownViewPager.this.mLastMotionX)) + DropDownViewPager.this.mLastMotionX, floatValue);
                    if (floatValue == DropDownViewPager.this.mLastMotionY && DropDownViewPager.this.currentStatus != 0) {
                        DropDownViewPager.this.mLastMotionY = 0.0f;
                        DropDownViewPager.this.mLastMotionX = 0.0f;
                        DropDownViewPager.this.currentStatus = 0;
                        if (DropDownViewPager.this.dropViewPagerListener != null) {
                            DropDownViewPager.this.dropViewPagerListener.onDropDownRecovered(false);
                        }
                    }
                }
            });
            ofFloat.start();
            return;
        }
        float f4 = this.mLastMotionX;
        if (f != f4) {
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(f, f4);
            ofFloat2.setDuration(300L);
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.4
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                    DropDownViewPager.this.setupMoving(floatValue, (((floatValue - DropDownViewPager.this.mLastMotionX) / (f - DropDownViewPager.this.mLastMotionX)) * (f2 - DropDownViewPager.this.mLastMotionY)) + DropDownViewPager.this.mLastMotionY);
                    if (floatValue == DropDownViewPager.this.mLastMotionX) {
                        DropDownViewPager.this.mLastMotionY = 0.0f;
                        DropDownViewPager.this.mLastMotionX = 0.0f;
                        DropDownViewPager.this.currentStatus = 0;
                    }
                }
            });
            ofFloat2.start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setupMoving(float f, float f2) {
        float f3;
        DropViewPagerListener dropViewPagerListener = this.dropViewPagerListener;
        if (dropViewPagerListener != null && dropViewPagerListener.getCurrentView() != null) {
            this.currentStatus = 1;
            float f4 = f - this.mLastMotionX;
            float f5 = f2 - this.mLastMotionY;
            float f6 = 1.0f;
            if (f5 > 0.0f) {
                f3 = 1.0f - (Math.abs(f5) / ((float) DpiUtil.getHeight(this.context)));
                f6 = 1.0f - (Math.abs(f5) / ((float) (DpiUtil.getHeight(this.context) / 2)));
            } else {
                f3 = 1.0f;
            }
            ViewCompat.setTranslationX(this.dropViewPagerListener.getCurrentView(), f4);
            ViewCompat.setTranslationY(this.dropViewPagerListener.getCurrentView(), f5);
            setupScale(f3);
            setupBackground(f6);
            this.currentAlpha = f6;
        }
    }

    private void setupScale(float f) {
        DropViewPagerListener dropViewPagerListener = this.dropViewPagerListener;
        if (dropViewPagerListener != null && dropViewPagerListener.getCurrentView() != null) {
            float min = Math.min(Math.max(f, 0.25f), 1.0f);
            ViewCompat.setScaleX(this.dropViewPagerListener.getCurrentView(), min);
            ViewCompat.setScaleY(this.dropViewPagerListener.getCurrentView(), min);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setupBackground(float f) {
        setBackgroundColor(convertPercentToBlackAlphaColor(f));
    }

    private int convertPercentToBlackAlphaColor(float f) {
        String lowerCase = Integer.toHexString((int) (Math.min(1.0f, Math.max(0.0f, f)) * 255.0f)).toLowerCase();
        StringBuilder sb = new StringBuilder();
        sb.append("#");
        sb.append(lowerCase.length() < 2 ? "0" : "");
        sb.append(lowerCase);
        sb.append("000000");
        return Color.parseColor(sb.toString());
    }

    private void addIntoVelocity(MotionEvent motionEvent) {
        if (this.mVelocityTracker == null) {
            this.mVelocityTracker = VelocityTracker.obtain();
        }
        VelocityTracker velocityTracker = this.mVelocityTracker;
        if (velocityTracker != null && motionEvent != null) {
            velocityTracker.addMovement(motionEvent);
        }
    }

    private float computeYVelocity() {
        VelocityTracker velocityTracker = this.mVelocityTracker;
        if (velocityTracker == null) {
            return 0.0f;
        }
        velocityTracker.computeCurrentVelocity(1000);
        float yVelocity = this.mVelocityTracker.getYVelocity();
        releaseVelocity();
        return yVelocity;
    }

    private void releaseVelocity() {
        VelocityTracker velocityTracker = this.mVelocityTracker;
        if (velocityTracker != null) {
            velocityTracker.clear();
            this.mVelocityTracker.recycle();
            this.mVelocityTracker = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void performEnterAnimation(final View view) {
        ValueAnimator ofFloat = ValueAnimator.ofFloat(view.getX(), 0.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.5
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                View view2 = view;
                if (view2 != null) {
                    ViewCompat.setX(view2, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                }
            }
        });
        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(view.getY(), 0.0f);
        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.6
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                View view2 = view;
                if (view2 != null) {
                    ViewCompat.setY(view2, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                }
            }
        });
        ValueAnimator ofFloat3 = ValueAnimator.ofFloat(Math.max(this.mScaleX, this.mScaleY), 1.0f);
        ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.7
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                Float f = (Float) valueAnimator.getAnimatedValue();
                View view2 = view;
                if (view2 != null) {
                    ViewCompat.setScaleX(view2, f.floatValue());
                }
                DropDownViewPager.this.setupBackground(f.floatValue());
            }
        });
        ValueAnimator ofFloat4 = ValueAnimator.ofFloat(Math.max(this.mScaleX, this.mScaleY), 1.0f);
        ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.8
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                View view2 = view;
                if (view2 != null) {
                    ViewCompat.setScaleY(view2, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                }
            }
        });
        AnimatorSet animatorSet = new AnimatorSet();
        animatorSet.setDuration(300L);
        animatorSet.play(ofFloat).with(ofFloat2).with(ofFloat3).with(ofFloat4);
        animatorSet.addListener(new AnimatorListenerAdapter() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.9
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationStart(Animator animator) {
                DropDownViewPager.this.enterAnimationEnd = false;
                if (DropDownViewPager.this.dropViewPagerListener != null) {
                    DropDownViewPager.this.dropViewPagerListener.onDropDownStart(true);
                }
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                animator.removeAllListeners();
                DropDownViewPager.this.enterAnimationEnd = true;
                if (DropDownViewPager.this.dropViewPagerListener != null) {
                    DropDownViewPager.this.dropViewPagerListener.onDropDownRecovered(true);
                }
            }
        });
        animatorSet.start();
    }

    public void finishWithAnimation(final String str) {
        if (this.enterAnimationEnd && !this.finishWithAnimationStart) {
            this.finishWithAnimationStart = true;
            DropViewPagerListener dropViewPagerListener = this.dropViewPagerListener;
            if (dropViewPagerListener != null) {
                final View currentView = dropViewPagerListener.getCurrentView();
                if (!this.supportAnimation || currentView == null) {
                    this.dropViewPagerListener.onDropDownRelease(str, false);
                    return;
                }
                boolean z = TextUtils.isEmpty(this.mUniqueIdentifier) || !TextUtils.equals(this.mUniqueIdentifier, this.dropViewPagerListener.getUniqueIdentifier());
                float f = 0.0f;
                ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, this.mTranslationX);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.10
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                        View view = currentView;
                        if (view != null) {
                            ViewCompat.setX(view, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                        }
                    }
                });
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, this.mTranslationY);
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.11
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                        View view = currentView;
                        if (view != null) {
                            ViewCompat.setY(view, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                        }
                    }
                });
                float[] fArr = new float[2];
                fArr[0] = 1.0f;
                fArr[1] = z ? 0.0f : Math.max(this.mScaleX, this.mScaleY);
                ValueAnimator ofFloat3 = ValueAnimator.ofFloat(fArr);
                ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.12
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                        Float f2 = (Float) valueAnimator.getAnimatedValue();
                        View view = currentView;
                        if (view != null) {
                            ViewCompat.setScaleX(view, f2.floatValue());
                        }
                        DropDownViewPager.this.setupBackground(f2.floatValue());
                    }
                });
                float[] fArr2 = new float[2];
                fArr2[0] = 1.0f;
                if (!z) {
                    f = Math.max(this.mScaleX, this.mScaleY);
                }
                fArr2[1] = f;
                ValueAnimator ofFloat4 = ValueAnimator.ofFloat(fArr2);
                ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.13
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                        View view = currentView;
                        if (view != null) {
                            ViewCompat.setScaleY(view, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                        }
                    }
                });
                AnimatorSet animatorSet = new AnimatorSet();
                animatorSet.setDuration(300L);
                if (z) {
                    animatorSet.play(ofFloat3).with(ofFloat4);
                } else {
                    animatorSet.play(ofFloat).with(ofFloat2).with(ofFloat3).with(ofFloat4);
                }
                animatorSet.addListener(new AnimatorListenerAdapter() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.14
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationStart(Animator animator) {
                        if (DropDownViewPager.this.dropViewPagerListener != null) {
                            DropDownViewPager.this.dropViewPagerListener.onDropDownStart(false);
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        animator.removeAllListeners();
                        if (DropDownViewPager.this.dropViewPagerListener != null) {
                            DropDownViewPager.this.dropViewPagerListener.onDropDownRelease(str, true);
                        }
                    }
                });
                animatorSet.start();
            }
        }
    }

    public void finishWithAnimationFromDropDown(final String str) {
        if (this.enterAnimationEnd && !this.finishWithAnimationStart) {
            this.finishWithAnimationStart = true;
            DropViewPagerListener dropViewPagerListener = this.dropViewPagerListener;
            if (dropViewPagerListener != null) {
                final View currentView = dropViewPagerListener.getCurrentView();
                if (currentView == null) {
                    this.dropViewPagerListener.onDropDownRelease(str, false);
                    return;
                }
                ValueAnimator ofFloat = ValueAnimator.ofFloat(currentView.getScaleX(), 0.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.15
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                        Float f = (Float) valueAnimator.getAnimatedValue();
                        View view = currentView;
                        if (view != null) {
                            ViewCompat.setScaleX(view, f.floatValue());
                        }
                        DropDownViewPager dropDownViewPager = DropDownViewPager.this;
                        dropDownViewPager.setupBackground(dropDownViewPager.currentAlpha * f.floatValue());
                    }
                });
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(currentView.getScaleY(), 0.0f);
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.16
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                        View view = currentView;
                        if (view != null) {
                            ViewCompat.setScaleY(view, ((Float) valueAnimator.getAnimatedValue()).floatValue());
                        }
                    }
                });
                AnimatorSet animatorSet = new AnimatorSet();
                animatorSet.setDuration(300L);
                animatorSet.play(ofFloat).with(ofFloat2);
                animatorSet.addListener(new AnimatorListenerAdapter() { // from class: com.jd.lib.unification.album.view.DropDownViewPager.17
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationStart(Animator animator) {
                        if (DropDownViewPager.this.dropViewPagerListener != null) {
                            DropDownViewPager.this.dropViewPagerListener.onDropDownStart(false);
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        animator.removeAllListeners();
                        if (DropDownViewPager.this.dropViewPagerListener != null) {
                            DropDownViewPager.this.dropViewPagerListener.onDropDownRelease(str, true);
                        }
                    }
                });
                animatorSet.start();
            }
        }
    }

    public static Bundle captureValues(View view) {
        Bundle bundle = new Bundle();
        if (view == null) {
            return bundle;
        }
        int[] iArr = new int[2];
        view.getLocationOnScreen(iArr);
        bundle.putInt("left", iArr[0]);
        bundle.putInt("top", iArr[1]);
        bundle.putInt("width", view.getWidth());
        bundle.putInt("height", view.getHeight());
        return bundle;
    }
}
