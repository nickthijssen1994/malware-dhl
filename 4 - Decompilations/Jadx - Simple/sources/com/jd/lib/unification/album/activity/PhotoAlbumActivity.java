package com.jd.lib.unification.album.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.SimpleItemAnimator;
import com.facebook.react.uimanager.ViewProps;
import com.jd.lib.un.utils.UnStringUtils;
import com.jd.lib.unification.album.adapter.PictureAlbumAdapter;
import com.jd.lib.unification.album.adapter.SelectAlbumAdapter;
import com.jd.lib.unification.album.entity.AlbumConstant;
import com.jd.lib.unification.album.entity.AlbumParam;
import com.jd.lib.unification.album.entity.ImageConstant;
import com.jd.lib.unification.album.entity.ImageParam;
import com.jd.lib.unification.album.entity.LocalMedia;
import com.jd.lib.unification.album.entity.LocalMediaFolder;
import com.jd.lib.unification.album.entity.VideoConstant;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.album.mInterface.IBack;
import com.jd.lib.unification.album.mInterface.IDialogListener;
import com.jd.lib.unification.album.utils.AlbumUtils;
import com.jd.lib.unification.album.utils.Const;
import com.jd.lib.unification.album.utils.DialogUtils;
import com.jd.lib.unification.album.utils.FileUtil;
import com.jd.lib.unification.album.utils.GridSpacingItemDecoration;
import com.jd.lib.unification.album.utils.LocalMediaCache;
import com.jd.lib.unification.album.utils.LocalMediaUtil;
import com.jd.lib.unification.album.utils.PictureMimeType;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionFail;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionSuccess;
import com.jd.lib.unification.album.utils.permission.core.PermissionHelper;
import com.jd.lib.unification.album.view.DropDownViewPager;
import com.jd.lib.unification.album.view.FolderPopWindow;
import com.jd.lib.unification.image.editor.ImageEditorActivity;
import com.jd.lib.unification.video.recorder.VideoRecorderActivity;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import java.io.File;
import java.util.ArrayList;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class PhotoAlbumActivity extends AlbumBaseActivity implements View.OnClickListener, PictureAlbumAdapter.ClickPictureCallBack, PictureAlbumAdapter.OnItemClickListener, SelectAlbumAdapter.OnItemClickListener, FolderPopWindow.OnDismissCallBack {
    private AlbumParam albumParam;
    private TextView albumTitle;
    private RelativeLayout albumTitleLayout;
    public float cropCircleRadius;
    public float cropRectX;
    public float cropRectY;
    public int cropShape;
    private boolean isImageLoaded;
    private boolean isVideoLoaded;
    private ImageView mBack;
    private Button mConfirm;
    private ArrayList<LocalMedia> mSelectImages;
    private PictureAlbumAdapter pictureAlbumAdapter;
    private FolderPopWindow popWindow;
    private TextView previewButton;
    private RelativeLayout rlBottom;
    private String source;
    private View titleBarView;
    private final ArrayList<LocalMedia> mMedias = new ArrayList<>();
    private ArrayList<LocalMedia> mCurrentMediaList = new ArrayList<>();
    private final ArrayList<LocalMediaFolder> mMediaFolders = new ArrayList<>();
    private int cameraOrVideoAction = 0;
    private String videoMinDuration = IBack.CLICK_PIC;
    private String videoMaxDuration = "10";
    private int loadCameraOrVideo = 0;
    private int videoEditorAction = 0;
    private boolean picEditor = false;
    private boolean showAnimatePic = false;
    private int needSelectCount = 2;
    private boolean isStartPreviewActivity = false;

    @Override // com.jd.lib.unification.album.activity.AlbumBaseActivity, com.jingdong.common.unification.statusbar.IStatusController
    public int statusBarHint() {
        return 1;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // com.jd.lib.unification.album.activity.AlbumBaseActivity
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.lib_uni_album_activity_photo_album);
        Intent intent = getIntent();
        if (intent != null && (intent.getParcelableExtra(AlbumConstant.ALBUM_PARAM) instanceof AlbumParam)) {
            this.albumParam = (AlbumParam) intent.getParcelableExtra(AlbumConstant.ALBUM_PARAM);
            AlbumParam albumParam = this.albumParam;
            if (albumParam != null) {
                this.source = albumParam.source;
                this.cameraOrVideoAction = this.albumParam.cameraOrVideoAction;
                this.loadCameraOrVideo = this.albumParam.loadCameraOrVideo;
                int i = this.loadCameraOrVideo;
                if (i == 0 || i == 2) {
                    this.videoMinDuration = this.albumParam.videoMinTime;
                    this.videoMaxDuration = this.albumParam.videoMaxTime;
                    this.videoEditorAction = this.albumParam.videoEditorAction;
                    if (UnStringUtils.isEmpty(this.videoMinDuration)) {
                        this.videoMinDuration = String.valueOf(3L);
                    }
                    if (UnStringUtils.isEmpty(this.videoMaxDuration)) {
                        this.videoMaxDuration = String.valueOf(10L);
                    }
                }
                if (this.albumParam.selectedMedia != null && !this.albumParam.selectedMedia.isEmpty()) {
                    this.mSelectImages = new ArrayList<>();
                    this.mSelectImages.addAll(this.albumParam.selectedMedia);
                }
                this.picEditor = this.albumParam.needEditorPic;
                this.cropShape = this.albumParam.cropShape;
                this.cropCircleRadius = this.albumParam.cropCircleRadius;
                this.cropRectX = this.albumParam.cropRectX;
                this.cropRectY = this.albumParam.cropRectY;
                this.showAnimatePic = this.albumParam.showAnimatePic;
                this.needSelectCount = this.albumParam.canSelectMediaCount;
                if (this.needSelectCount <= 0) {
                    this.needSelectCount = 9;
                }
            }
        }
        if (this.mSelectImages == null) {
            this.mSelectImages = new ArrayList<>();
        }
        initViews();
        registerListener();
        applyPermission();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void initViews() {
        this.titleBarView = findViewById(R.id.lib_ec_photo_album_title_bar);
        this.mBack = (ImageView) findViewById(R.id.lib_ec_photo_album_left);
        this.albumTitle = (TextView) findViewById(R.id.lib_ec_photo_album_title);
        RecyclerView findViewById = findViewById(R.id.lib_ec_photo_album_recyclerView);
        findViewById.setHasFixedSize(true);
        findViewById.addItemDecoration(new GridSpacingItemDecoration(4, DpiUtil.dip2px(this, 4.0f), false));
        findViewById.setLayoutManager(new GridLayoutManager(this, 4));
        if (findViewById.getItemAnimator() instanceof SimpleItemAnimator) {
            findViewById.getItemAnimator().setSupportsChangeAnimations(false);
        }
        this.rlBottom = (RelativeLayout) findViewById(R.id.lib_ec_photo_album_bottom);
        this.previewButton = (TextView) findViewById(R.id.lib_ec_album_preview);
        this.mConfirm = (Button) findViewById(R.id.lib_ec_photo_album_confirm);
        if (this.loadCameraOrVideo == 1) {
            this.rlBottom.setVisibility(this.needSelectCount == 1 ? 8 : 0);
        }
        this.popWindow = new FolderPopWindow(this, this.mMediaFolders);
        this.popWindow.setOnItemClickListener(this);
        this.popWindow.setOnDismissCallBack(this);
        if (this.pictureAlbumAdapter == null) {
            this.pictureAlbumAdapter = new PictureAlbumAdapter(this, this.cameraOrVideoAction, this.source, this.videoMinDuration, this.videoMaxDuration, this.mCurrentMediaList, this.mSelectImages, this.needSelectCount);
        }
        findViewById.setAdapter(this.pictureAlbumAdapter);
        this.pictureAlbumAdapter.setCallBack(this);
        setBottomStatusBar(this.mSelectImages);
        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) this.titleBarView.getLayoutParams();
        if (UnStatusBarTintUtil.isEnable(this)) {
            layoutParams.height = UnStatusBarTintUtil.getStatusBarHeight(this) + DpiUtil.dip2px(this, 49.0f);
            if (!UnStatusBarTintUtil.setStatusBarLightMode(this)) {
                UnStatusBarTintUtil.setDefaultBg(this, false);
            }
        } else {
            layoutParams.height = DpiUtil.dip2px(this, 49.0f);
        }
        this.titleBarView.setLayoutParams(layoutParams);
    }

    private void registerListener() {
        this.mBack.setOnClickListener(this);
        this.albumTitle.setOnClickListener(this);
        this.previewButton.setOnClickListener(this);
        this.mConfirm.setOnClickListener(this);
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void applyPermission() {
        PermissionHelper.with((Activity) this).permissions(Build.VERSION.SDK_INT >= 16 ? new String[]{"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"} : new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}).requestCode(200).lisener(this).request();
    }

    @PermissionSuccess(requestCode = 200)
    public void onSucess() {
        loadMediaData();
    }

    @PermissionFail(requestCode = 200)
    public void onFail() {
        finish();
    }

    private void loadMediaData() {
        int i = this.loadCameraOrVideo;
        if (i == 0) {
            loadLocalMedia(true);
        } else if (i == 1) {
            loadLocalMedia(false);
        } else {
            loadLocalVideo();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void loadLocalMedia(final boolean z) {
        Log.d("medial", "loadLocalMedia");
        LocalMediaUtil.localMedia(1, 0, 0, false, this, new LocalMediaUtil.LocalMediaLoadListener() { // from class: com.jd.lib.unification.album.activity.PhotoAlbumActivity.1
            @Override // com.jd.lib.unification.album.utils.LocalMediaUtil.LocalMediaLoadListener
            public void loadComplete(final ArrayList<LocalMediaFolder> arrayList) {
                PhotoAlbumActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.album.activity.PhotoAlbumActivity.1.1
                    @Override // java.lang.Runnable
                    public void run() {
                        if (!PhotoAlbumActivity.this.isImageLoaded) {
                            PhotoAlbumActivity.this.isImageLoaded = true;
                            ArrayList arrayList2 = arrayList;
                            if (arrayList2 != null && arrayList2.size() > 0) {
                                PhotoAlbumActivity.this.mMedias.addAll(((LocalMediaFolder) arrayList.get(0)).getImages());
                                for (int i = 1; i < arrayList.size(); i++) {
                                    PhotoAlbumActivity.this.mMediaFolders.add(arrayList.get(i));
                                }
                            }
                            if (z) {
                                PhotoAlbumActivity.this.loadLocalVideo();
                            } else {
                                PhotoAlbumActivity.this.fillData();
                            }
                        }
                    }
                });
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    public void loadLocalVideo() {
        Log.d("medial", "loadLocalVideo");
        int i = this.videoEditorAction;
        boolean z = i == 1 || i == 2;
        long j = 3;
        if (!UnStringUtils.isEmpty(this.videoMinDuration)) {
            j = Long.parseLong(this.videoMinDuration);
        }
        LocalMediaUtil.localMedia(2, j, !UnStringUtils.isEmpty(this.videoMaxDuration) ? Long.parseLong(this.videoMaxDuration) : 10, z, this, new LocalMediaUtil.LocalMediaLoadListener() { // from class: com.jd.lib.unification.album.activity.PhotoAlbumActivity.2
            @Override // com.jd.lib.unification.album.utils.LocalMediaUtil.LocalMediaLoadListener
            public void loadComplete(final ArrayList<LocalMediaFolder> arrayList) {
                PhotoAlbumActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.album.activity.PhotoAlbumActivity.2.1
                    @Override // java.lang.Runnable
                    public void run() {
                        if (!PhotoAlbumActivity.this.isVideoLoaded) {
                            PhotoAlbumActivity.this.isVideoLoaded = true;
                            ArrayList arrayList2 = arrayList;
                            if (arrayList2 != null) {
                                if (arrayList2.size() > 0) {
                                    PhotoAlbumActivity.this.mMedias.addAll(((LocalMediaFolder) arrayList.get(0)).getImages());
                                    PhotoAlbumActivity.this.filterDuplicateAlbum(arrayList, PhotoAlbumActivity.this.mMediaFolders);
                                }
                                if (PhotoAlbumActivity.this.mMedias.size() != 0) {
                                    LocalMediaUtil.sortMediaByDate(PhotoAlbumActivity.this.mMedias);
                                    PhotoAlbumActivity.this.fillData();
                                }
                            }
                        }
                    }
                });
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void filterDuplicateAlbum(ArrayList<LocalMediaFolder> arrayList, ArrayList<LocalMediaFolder> arrayList2) {
        for (int i = 1; i < arrayList.size(); i++) {
            LocalMediaFolder localMediaFolder = arrayList.get(i);
            boolean z = false;
            int i2 = 0;
            while (true) {
                if (i2 >= arrayList2.size()) {
                    break;
                }
                LocalMediaFolder localMediaFolder2 = arrayList2.get(i2);
                if (localMediaFolder.getName().equals(localMediaFolder2.getName())) {
                    localMediaFolder2.getImages().addAll(localMediaFolder.getImages());
                    localMediaFolder2.setImageNum(localMediaFolder2.getImages().size());
                    z = true;
                    break;
                }
                i2++;
            }
            if (!z) {
                arrayList2.add(localMediaFolder);
            }
        }
    }

    private void setFirstFolder(ArrayList<LocalMedia> arrayList) {
        LocalMediaFolder localMediaFolder = new LocalMediaFolder();
        localMediaFolder.setFirstImagePath(arrayList.get(0).getPath());
        String string = getString(R.string.uni_album_title);
        localMediaFolder.setImageNum(arrayList.size());
        localMediaFolder.setName(string);
        localMediaFolder.setImages(arrayList);
        this.mMediaFolders.add(0, localMediaFolder);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void fillData() {
        if (!this.mMedias.isEmpty()) {
            setFirstFolder(this.mMedias);
            this.mCurrentMediaList = this.mMediaFolders.get(0).getImages();
            PictureAlbumAdapter pictureAlbumAdapter = this.pictureAlbumAdapter;
            if (pictureAlbumAdapter != null) {
                pictureAlbumAdapter.setData(this.mCurrentMediaList, this.mSelectImages);
                this.pictureAlbumAdapter.setOnItemClickListener(this);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void addVideo(String str) {
        LocalMedia localMedia = new LocalMedia(str, FileUtil.getVideoDuration(str), true, PictureMimeType.createVideoType(str));
        localMedia.setPicture(false);
        this.mCurrentMediaList.add(0, localMedia);
        this.mSelectImages.add(0, localMedia);
        this.pictureAlbumAdapter.setData(this.mCurrentMediaList, this.mSelectImages);
        setBottomStatusBar(this.mSelectImages);
    }

    private void returnPathAndFinish(Intent intent) {
        ArrayList<LocalMedia> arrayList;
        int intExtra = intent.getIntExtra("videoRecordReturnState", 0);
        boolean z = true;
        if (this.needSelectCount == 1 && (arrayList = this.mSelectImages) != null) {
            arrayList.clear();
            String str = "";
            if (intExtra == 100) {
                str = intent.getStringExtra("videoPath");
                z = false;
            } else if (intExtra == 101) {
                str = intent.getStringExtra("photoPath");
            }
            this.mSelectImages.add(new LocalMedia(str, false, z));
            onConfirm();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void showMedia(Intent intent) {
        int intExtra = intent.getIntExtra("videoRecordReturnState", 0);
        if (intExtra == 100) {
            final String stringExtra = intent.getStringExtra("videoPath");
            if (!UnStringUtils.isEmpty(stringExtra) && new File(stringExtra).exists()) {
                ArrayList<LocalMedia> arrayList = this.mSelectImages;
                if (arrayList == null || arrayList.size() <= 0) {
                    addVideo(stringExtra);
                } else if (!PictureMimeType.isVideo(this.mSelectImages.get(0).getPictureType())) {
                    addVideo(stringExtra);
                } else if (!AlbumUtils.getVideoReplaceReminders(this)) {
                    DialogUtils.getInstance().showReplaceVideoDialog(this, getString(R.string.uni_album_replace_video_prompt_toast), new IDialogListener() { // from class: com.jd.lib.unification.album.activity.PhotoAlbumActivity.3
                        @Override // com.jd.lib.unification.album.mInterface.IDialogListener
                        public void onLeftClick() {
                        }

                        /* JADX WARN: Type inference failed for: r0v0, types: [android.content.Context, com.jd.lib.unification.album.activity.PhotoAlbumActivity] */
                        @Override // com.jd.lib.unification.album.mInterface.IDialogListener
                        public void onCheckClick(boolean z) {
                            AlbumUtils.setVideoReplaceReminders(PhotoAlbumActivity.this, z);
                        }

                        @Override // com.jd.lib.unification.album.mInterface.IDialogListener
                        public void onRightClick() {
                            PhotoAlbumActivity.this.mSelectImages.remove(0);
                            PhotoAlbumActivity.this.addVideo(stringExtra);
                        }
                    });
                } else {
                    this.mSelectImages.remove(0);
                    addVideo(stringExtra);
                }
            }
        } else if (intExtra == 101) {
            String stringExtra2 = intent.getStringExtra("photoPath");
            if (!UnStringUtils.isEmpty(stringExtra2) && new File(stringExtra2).exists()) {
                ArrayList<LocalMedia> arrayList2 = this.mSelectImages;
                if (arrayList2 == null || arrayList2.size() != this.needSelectCount) {
                    LocalMedia localMedia = new LocalMedia(stringExtra2, true, true);
                    this.mCurrentMediaList.add(0, localMedia);
                    if (this.mSelectImages == null) {
                        this.mSelectImages = new ArrayList<>();
                    }
                    this.mSelectImages.add(localMedia);
                    this.pictureAlbumAdapter.setData(this.mCurrentMediaList, this.mSelectImages);
                    setBottomStatusBar(this.mSelectImages);
                    return;
                }
                Toast.makeText((Context) this, (CharSequence) getString(R.string.uni_album_select_max_toast, new Object[]{Integer.valueOf(this.needSelectCount)}), 0).show();
            }
        }
    }

    private void onConfirm() {
        Intent intent = new Intent();
        intent.putParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS, this.mSelectImages);
        LocalMediaCache.getInstance().clear();
        intent.putExtra("back_finish", true);
        setResult(-1, intent);
        finish();
    }

    @Override // android.view.View.OnClickListener
    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.lib_ec_photo_album_left) {
            LocalMediaCache.getInstance().clear();
            finish();
        } else if (id == R.id.lib_ec_photo_album_title) {
            ArrayList<LocalMediaFolder> arrayList = this.mMediaFolders;
            if (arrayList != null && arrayList.size() != 0) {
                showPopUpWindow();
            }
        } else if (id == R.id.lib_ec_album_preview) {
            goPreviewActivity();
        } else if (id == R.id.lib_ec_photo_album_confirm) {
            onConfirm();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void goPreviewActivity() {
        if (!AlbumUtils.isFastDoubleClick()) {
            Intent intent = new Intent((Context) this, (Class<?>) PicturePreviewActivity.class);
            LocalMediaCache.getInstance().putList(this.mSelectImages);
            intent.putExtra("source", this.source);
            intent.putParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS, this.mSelectImages);
            intent.putExtra(ViewProps.POSITION, 0);
            int i = this.loadCameraOrVideo;
            if (i == 0 || i == 2) {
                intent.putExtra("loadVideo", true);
                intent.putExtra(AlbumConstant.VIDEO_MIN_DURATION, this.videoMinDuration);
                intent.putExtra(AlbumConstant.VIDEO_MAX_DURATION, this.videoMaxDuration);
                intent.putExtra(AlbumConstant.VIDEO_EDITOR_ACTION, this.videoEditorAction);
            }
            intent.putExtra("needEditorPic", this.picEditor);
            intent.putExtra(AlbumConstant.PIC_BEAUTIFY_ANIMATE_SWITCH, this.showAnimatePic);
            intent.putExtra(AlbumConstant.CAN_SELECT_MEDIA_COUNT, this.needSelectCount);
            startActivityForResult(intent, Const.PREVIEW_CLICK_REQUEST_CODE);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void showPopUpWindow() {
        FolderPopWindow folderPopWindow = this.popWindow;
        if (folderPopWindow != null) {
            if (folderPopWindow.isShowing()) {
                this.popWindow.dismiss();
                this.mBack.setVisibility(0);
                return;
            }
            this.albumTitle.setCompoundDrawablesWithIntrinsicBounds((Drawable) null, (Drawable) null, ContextCompat.getDrawable(this, R.drawable.lib_uni_album_photo_album_up_arrow), (Drawable) null);
            this.popWindow.showAsDropDown(this.titleBarView);
            this.mBack.setVisibility(8);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // com.jd.lib.unification.album.view.FolderPopWindow.OnDismissCallBack
    public void onDismissCallBack() {
        this.albumTitle.setCompoundDrawablesWithIntrinsicBounds((Drawable) null, (Drawable) null, ContextCompat.getDrawable(this, R.drawable.lib_uni_album_photo_album_down_arrow), (Drawable) null);
        this.mBack.setVisibility(0);
    }

    protected void onDestroy() {
        super.onDestroy();
        FolderPopWindow folderPopWindow = this.popWindow;
        if (folderPopWindow != null && folderPopWindow.isShowing()) {
            this.popWindow.dismiss();
        }
    }

    @Override // com.jd.lib.unification.album.adapter.SelectAlbumAdapter.OnItemClickListener
    public void onItemClick(String str, ArrayList<LocalMedia> arrayList) {
        FolderPopWindow folderPopWindow = this.popWindow;
        if (folderPopWindow != null && folderPopWindow.isShowing()) {
            this.popWindow.dismiss();
        }
        this.mCurrentMediaList = arrayList;
        this.albumTitle.setText(str);
        this.pictureAlbumAdapter.setData(this.mCurrentMediaList, this.mSelectImages);
    }

    @Override // com.jd.lib.unification.album.adapter.PictureAlbumAdapter.ClickPictureCallBack
    public void onSelectChange(ArrayList<LocalMedia> arrayList) {
        this.mSelectImages = arrayList;
        setBottomStatusBar(arrayList);
    }

    private void setBottomStatusBar(ArrayList<LocalMedia> arrayList) {
        if (arrayList == null) {
            return;
        }
        if (arrayList.size() == 0) {
            this.previewButton.setEnabled(false);
            this.mConfirm.setEnabled(false);
            this.mConfirm.setText(getString(R.string.uni_album_complete));
            return;
        }
        this.previewButton.setEnabled(true);
        this.mConfirm.setEnabled(true);
        Button button = this.mConfirm;
        button.setText(getString(R.string.uni_album_complete) + " " + arrayList.size() + getString(R.string.uni_album_slash) + this.needSelectCount);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // com.jd.lib.unification.album.adapter.PictureAlbumAdapter.ClickPictureCallBack
    public void openVideo() {
        PermissionHelper.with((Activity) this).permissions("android.permission.CAMERA", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE").requestCode(300).lisener(this).request();
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // com.jd.lib.unification.album.adapter.PictureAlbumAdapter.ClickPictureCallBack
    public void openCamera() {
        PermissionHelper.with((Activity) this).permissions("android.permission.CAMERA", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE").requestCode(400).lisener(this).request();
    }

    @PermissionSuccess(requestCode = 300)
    public void onSucessOpenVideo() {
        openMediaCenter("0");
    }

    @PermissionFail(requestCode = 300)
    public void onFailOpenVideo() {
        finish();
    }

    @PermissionSuccess(requestCode = 400)
    public void onSucessOpenCamera() {
        openMediaCenter("1");
    }

    @PermissionFail(requestCode = 400)
    public void onFailOpenCamera() {
        finish();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void openMediaCenter(String str) {
        Intent intent = new Intent((Context) this, (Class<?>) VideoRecorderActivity.class);
        VideoParam videoParam = new VideoParam();
        int i = this.cameraOrVideoAction;
        if (i == 1 || i == 3) {
            videoParam.recordMaxTime = Integer.parseInt(this.videoMaxDuration);
            videoParam.recordMinTime = Integer.parseInt(this.videoMinDuration);
            if (this.cameraOrVideoAction == 1) {
                videoParam.recordFunctionControl = 0;
            } else {
                videoParam.recordFunctionControl = 1;
            }
            int i2 = this.videoEditorAction;
            if (i2 != 0) {
                videoParam.editorFunctionControl = i2 - 1;
                videoParam.needEditor = true;
                videoParam.cutMaxTime = Long.parseLong(this.videoMaxDuration) * 1000;
                videoParam.cutMinTime = Long.parseLong(this.videoMinDuration) * 1000;
            } else {
                videoParam.needEditor = false;
            }
        } else {
            videoParam.recordFunctionControl = 2;
        }
        videoParam.needEditorPic = this.picEditor;
        if (str.equals("1")) {
            videoParam.recordCurrentState = Integer.valueOf("1").intValue();
        } else if (str.equals("0")) {
            videoParam.recordCurrentState = Integer.valueOf("0").intValue();
        }
        videoParam.cropShape = this.cropShape;
        videoParam.cropCircleRadius = this.cropCircleRadius;
        videoParam.cropRectX = this.cropRectX;
        videoParam.cropRectY = this.cropRectY;
        AlbumParam albumParam = this.albumParam;
        if (albumParam != null) {
            videoParam.coverImagePath = albumParam.coverImagePath;
            videoParam.isCoverImageBg = this.albumParam.isCoverImageBg;
            videoParam.cameraSupport = this.albumParam.cameraSupport;
        }
        intent.putExtra(VideoConstant.VIDEO_PARAM, videoParam);
        startActivityForResult(intent, 1001);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // com.jd.lib.unification.album.adapter.PictureAlbumAdapter.OnItemClickListener
    public void onPictureItemClick(ArrayList<LocalMedia> arrayList, ArrayList<LocalMedia> arrayList2, int i, View view) {
        int i2;
        if (!this.isStartPreviewActivity && !AlbumUtils.isFastDoubleClick()) {
            LocalMedia localMedia = arrayList.get(i);
            if (this.needSelectCount != 1) {
                boolean isVideo = PictureMimeType.isVideo(localMedia.getPictureType());
                long duration = localMedia.getDuration();
                if (isVideo && duration > 600000) {
                    Toast.makeText((Context) this, (CharSequence) getString(R.string.uni_album_over_ten_minutes_toast), 0).show();
                } else if (!isVideo || duration >= Long.parseLong(this.videoMinDuration) * 1000) {
                    this.isStartPreviewActivity = true;
                    this.mSelectImages = arrayList2;
                    Intent intent = new Intent((Context) this, (Class<?>) PicturePreviewActivity.class);
                    LocalMediaCache.getInstance().putList(arrayList);
                    intent.putExtra("source", this.source);
                    intent.putParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS, this.mSelectImages);
                    intent.putExtra(ViewProps.POSITION, i);
                    int i3 = this.loadCameraOrVideo;
                    if (i3 == 0 || i3 == 2) {
                        intent.putExtra("loadVideo", true);
                        intent.putExtra(AlbumConstant.VIDEO_MIN_DURATION, this.videoMinDuration);
                        intent.putExtra(AlbumConstant.VIDEO_MAX_DURATION, this.videoMaxDuration);
                        intent.putExtra(AlbumConstant.VIDEO_EDITOR_ACTION, this.videoEditorAction);
                    }
                    intent.putExtra("needEditorPic", this.picEditor);
                    intent.putExtra(AlbumConstant.PIC_BEAUTIFY_ANIMATE_SWITCH, this.showAnimatePic);
                    intent.putExtra(AlbumConstant.CROP_SHAPE, this.cropShape);
                    intent.putExtra(AlbumConstant.CROP_CIRCLE_RADIUS, this.cropCircleRadius);
                    intent.putExtra(AlbumConstant.CROP_RECTX, this.cropRectX);
                    intent.putExtra(AlbumConstant.CROP_RECTY, this.cropRectY);
                    intent.putExtra(AlbumConstant.CAN_SELECT_MEDIA_COUNT, this.needSelectCount);
                    startActivityForResult(this, intent, Const.PICTURE_CLICK_REQUEST_CODE, view);
                } else {
                    Toast.makeText((Context) this, (CharSequence) getString(R.string.uni_album_less_three_seconds_toast, new Object[]{this.videoMinDuration}), 0).show();
                }
            } else if (localMedia == null) {
            } else {
                if (this.picEditor || (i2 = this.cropShape) == 0 || i2 == 1) {
                    toImageEditorActivity(arrayList.get(i).getPath());
                    return;
                }
                this.mSelectImages.clear();
                this.mSelectImages.add(arrayList.get(i));
                onConfirm();
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void toImageEditorActivity(String str) {
        Intent intent = new Intent((Context) this, (Class<?>) ImageEditorActivity.class);
        ImageParam imageParam = new ImageParam();
        imageParam.editorImagePath = str;
        int i = this.cropShape;
        int i2 = 1;
        if ((i == 0 || i == 1) && this.picEditor) {
            i2 = 0;
        } else {
            int i3 = this.cropShape;
            if (!(i3 == 0 || i3 == 1)) {
                i2 = this.picEditor ? 2 : -1;
            }
        }
        imageParam.editorFunction = i2;
        imageParam.cropShape = this.cropShape;
        imageParam.cropCircleRadius = this.cropCircleRadius;
        imageParam.cropRectX = this.cropRectX;
        imageParam.cropRectY = this.cropRectY;
        intent.putExtra(ImageConstant.IMAGE_PARAM, imageParam);
        startActivityForResult(intent, Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE);
    }

    public void startActivityForResult(FragmentActivity fragmentActivity, Intent intent, int i, View view) {
        if (fragmentActivity != null && intent != null && view != null) {
            intent.putExtra(DropDownViewPager.EXTRA_VIEW_INFO, DropDownViewPager.captureValues(view));
            fragmentActivity.startActivityForResult(intent, i);
            fragmentActivity.overridePendingTransition(0, 0);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    protected void onActivityResult(int i, int i2, Intent intent) {
        this.isStartPreviewActivity = false;
        if (i2 == -1) {
            switch (i) {
                case 1001:
                    if (intent == null) {
                        return;
                    }
                    if (this.needSelectCount == 1) {
                        returnPathAndFinish(intent);
                        return;
                    } else {
                        showMedia(intent);
                        return;
                    }
                case Const.PICTURE_CLICK_REQUEST_CODE:
                    if (intent != null) {
                        this.mSelectImages = intent.getParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS);
                        ArrayList parcelableArrayListExtra = intent.getParcelableArrayListExtra(Const.NEW_EDIT_VIDEO);
                        this.mCurrentMediaList = LocalMediaCache.getInstance().popList();
                        if (parcelableArrayListExtra != null && parcelableArrayListExtra.size() > 0) {
                            for (int i3 = 0; i3 < parcelableArrayListExtra.size(); i3++) {
                                if (this.mCurrentMediaList == null) {
                                    this.mCurrentMediaList = new ArrayList<>();
                                }
                                this.mCurrentMediaList.add(0, parcelableArrayListExtra.get(i3));
                            }
                        }
                        if (intent.getBooleanExtra("back_finish", false)) {
                            onConfirm();
                            return;
                        }
                        this.pictureAlbumAdapter.setData(this.mCurrentMediaList, this.mSelectImages);
                        setBottomStatusBar(this.mSelectImages);
                        return;
                    }
                    return;
                case Const.PREVIEW_CLICK_REQUEST_CODE:
                    if (intent != null) {
                        this.mSelectImages = intent.getParcelableArrayListExtra(AlbumConstant.SELECT_MEDIAS);
                        ArrayList parcelableArrayListExtra2 = intent.getParcelableArrayListExtra(Const.NEW_EDIT_PIC);
                        if (parcelableArrayListExtra2 != null && parcelableArrayListExtra2.size() > 0) {
                            for (int i4 = 0; i4 < parcelableArrayListExtra2.size(); i4++) {
                                if (this.mCurrentMediaList == null) {
                                    this.mCurrentMediaList = new ArrayList<>();
                                }
                                this.mCurrentMediaList.add(0, parcelableArrayListExtra2.get(i4));
                            }
                        }
                        ArrayList parcelableArrayListExtra3 = intent.getParcelableArrayListExtra(Const.NEW_EDIT_VIDEO);
                        if (parcelableArrayListExtra3 != null && parcelableArrayListExtra3.size() > 0) {
                            for (int i5 = 0; i5 < parcelableArrayListExtra3.size(); i5++) {
                                if (this.mCurrentMediaList == null) {
                                    this.mCurrentMediaList = new ArrayList<>();
                                }
                                this.mCurrentMediaList.add(0, parcelableArrayListExtra3.get(i5));
                            }
                        }
                        if (intent.getBooleanExtra("back_finish", false)) {
                            onConfirm();
                            return;
                        }
                        this.pictureAlbumAdapter.setData(this.mCurrentMediaList, this.mSelectImages);
                        setBottomStatusBar(this.mSelectImages);
                        return;
                    }
                    return;
                case Const.OPEN_VIDEO_EDITOR_REQUEST_CODE:
                default:
                    return;
                case Const.OPEN_PIC_BEAUTIFY_REQUEST_CODE:
                    if (intent.getBooleanExtra("editorReturn", false)) {
                        LocalMedia localMedia = new LocalMedia(intent.getStringExtra(ImageConstant.IMAGE_EDITOR_RETURN_PATH), true, true);
                        ArrayList<LocalMedia> arrayList = this.mSelectImages;
                        if (arrayList != null) {
                            arrayList.clear();
                        } else {
                            this.mSelectImages = new ArrayList<>();
                        }
                        this.mSelectImages.add(localMedia);
                        onConfirm();
                        return;
                    }
                    return;
            }
        }
    }
}
