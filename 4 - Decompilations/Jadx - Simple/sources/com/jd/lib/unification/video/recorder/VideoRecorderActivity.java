package com.jd.lib.unification.video.recorder;

import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.view.MotionEvent;
import android.view.OrientationEventListener;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.fragment.app.FragmentActivity;
import com.facebook.imagepipeline.common.RotationOptions;
import com.jd.lib.unification.album.entity.AlbumConstant;
import com.jd.lib.unification.album.entity.ImageConstant;
import com.jd.lib.unification.album.entity.ImageParam;
import com.jd.lib.unification.album.entity.VideoConstant;
import com.jd.lib.unification.album.entity.VideoParam;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionFail;
import com.jd.lib.unification.album.utils.permission.annotation.PermissionSuccess;
import com.jd.lib.unification.album.utils.permission.core.PermissionHelper;
import com.jd.lib.unification.image.editor.ImageEditorActivity;
import com.jd.lib.unification.video.VideoToast;
import com.jd.lib.unification.video.editor.VideoEditorActivity;
import com.jd.lib.unification.video.recorder.CameraManager;
import com.jd.lib.unification.video.recorder.VideoRecorderView;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.widget.image.UnNetImageView;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class VideoRecorderActivity extends FragmentActivity implements View.OnClickListener {
    private static final int PICTURE_FAILED = 103;
    private static final int PICTURE_FINISH = 102;
    private static final int RECORD_FAILED = 104;
    private static final int RECORD_FINISH = 101;
    private static final int RECORD_PROGRESS = 100;
    private static final String TAG = "VideoRecorderActivity";
    private TextView backTv;
    private Animation bottomAnim;
    private RelativeLayout bottomLayout;
    private TextView cameraTv;
    private Animation cancelAnim;
    private TextView cancelTv;
    private TextView centerTv;
    private TextView circleImgView;
    private UnNetImageView coverImage;
    private String coverImagePath;
    private Animation finishAnim;
    private RelativeLayout finishBtLayout;
    private TextView finishTv;
    private boolean isCoverImageBg;
    private boolean isSquarePhoto;
    private TextView leftTv;
    private TextView ligthTv;
    private OrientationEventListener mOrientationListener;
    private VideoPlayerView playerView;
    private LinearLayout progressLayout;
    private CircleProgressView progressView;
    private VideoRecorderView recorderView;
    private TextView rightTv;
    private File rootFile;
    private TextView timeTv;
    private Animation titleAnim;
    private RelativeLayout titleLayout;
    private VideoParam videoParam;
    private int recordMinTime = 3;
    private int recordMaxTime = 10;
    private int currentTime = 0;
    private int currentOrientation = 0;
    private float currentRotate = 0.0f;
    private boolean isRecord = false;
    private int functionControl = 0;
    private int currentState = 0;
    private int cameraSupport = 0;
    private float x1 = 0.0f;
    private float x2 = 0.0f;
    private boolean canOnTouch = true;
    private int squarePhotoWidth = 0;
    private List<File> deleteFiles = new ArrayList();
    private Handler handler = new Handler() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1
        @Override // android.os.Handler
        public void handleMessage(final Message message) {
            switch (message.what) {
                case 100:
                    VideoRecorderActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1.1
                        @Override // java.lang.Runnable
                        public void run() {
                            int i = message.arg1;
                            if ((i - VideoRecorderActivity.this.currentTime) % 1000 == 0 || i - VideoRecorderActivity.this.currentTime < 0) {
                                TextView textView = VideoRecorderActivity.this.timeTv;
                                textView.setText(((i - VideoRecorderActivity.this.currentTime) / 1000) + "");
                            } else {
                                TextView textView2 = VideoRecorderActivity.this.timeTv;
                                textView2.setText((((i - VideoRecorderActivity.this.currentTime) / 1000) + 1) + "");
                            }
                            CircleProgressView circleProgressView = VideoRecorderActivity.this.progressView;
                            double maxProgress = (double) VideoRecorderActivity.this.progressView.getMaxProgress();
                            Double.isNaN(maxProgress);
                            double d = (double) i;
                            Double.isNaN(d);
                            double d2 = (maxProgress * 1.0d) / d;
                            double d3 = (double) VideoRecorderActivity.this.currentTime;
                            Double.isNaN(d3);
                            circleProgressView.setProgress((int) (d2 * d3));
                        }
                    });
                    return;
                case 101:
                    VideoRecorderActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1.2
                        @Override // java.lang.Runnable
                        public void run() {
                            VideoRecorderActivity.this.closeLight();
                            VideoRecorderActivity.this.bottomLayout.setVisibility(8);
                            VideoRecorderActivity.this.progressLayout.setVisibility(8);
                            VideoRecorderActivity.this.finishBtLayout.setVisibility(0);
                            if (VideoRecorderActivity.this.cancelAnim == null) {
                                VideoRecorderActivity.this.cancelAnim = VideoUtil.getTranslateXAnim(0.2f, null);
                            } else {
                                VideoRecorderActivity.this.cancelAnim.reset();
                            }
                            VideoRecorderActivity.this.cancelTv.startAnimation(VideoRecorderActivity.this.cancelAnim);
                            if (VideoRecorderActivity.this.finishAnim == null) {
                                VideoRecorderActivity.this.finishAnim = VideoUtil.getTranslateXAnim(-0.2f, null);
                            } else {
                                VideoRecorderActivity.this.finishAnim.reset();
                            }
                            VideoRecorderActivity.this.finishTv.startAnimation(VideoRecorderActivity.this.finishAnim);
                            String str = "";
                            if (VideoRecorderActivity.this.recorderView.getVecordFile() != null) {
                                str = VideoRecorderActivity.this.recorderView.getVecordFile().getPath();
                            }
                            VideoRecorderActivity.this.playerView.setVisibility(0);
                            VideoRecorderActivity.this.playerView.playVideo(str, new MediaPlayer.OnErrorListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1.2.1
                                /* JADX WARN: Type inference failed for: r2v3, types: [android.content.Context, com.jd.lib.unification.video.recorder.VideoRecorderActivity] */
                                /* JADX WARN: Type inference failed for: r4v4, types: [android.content.Context, com.jd.lib.unification.video.recorder.VideoRecorderActivity] */
                                @Override // android.media.MediaPlayer.OnErrorListener
                                public boolean onError(MediaPlayer mediaPlayer, int i, int i2) {
                                    VideoToast.showToast(VideoRecorderActivity.this, VideoRecorderActivity.this.getResources().getString(R.string.uni_video_play_error), DpiUtil.dip2px((Context) VideoRecorderActivity.this, 170.0f));
                                    return true;
                                }
                            });
                            VideoRecorderActivity.this.recorderView.setVisibility(8);
                        }
                    });
                    return;
                case 102:
                    VideoRecorderActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1.4
                        @Override // java.lang.Runnable
                        public void run() {
                            VideoRecorderActivity.this.titleLayout.setVisibility(8);
                            VideoRecorderActivity.this.bottomLayout.setVisibility(8);
                            VideoRecorderActivity.this.finishBtLayout.setVisibility(0);
                            if (VideoRecorderActivity.this.cancelAnim == null) {
                                VideoRecorderActivity.this.cancelAnim = VideoUtil.getTranslateXAnim(0.2f, null);
                            } else {
                                VideoRecorderActivity.this.cancelAnim.reset();
                            }
                            VideoRecorderActivity.this.cancelTv.startAnimation(VideoRecorderActivity.this.cancelAnim);
                            if (VideoRecorderActivity.this.finishAnim == null) {
                                VideoRecorderActivity.this.finishAnim = VideoUtil.getTranslateXAnim(-0.2f, null);
                            } else {
                                VideoRecorderActivity.this.finishAnim.reset();
                            }
                            VideoRecorderActivity.this.finishTv.startAnimation(VideoRecorderActivity.this.finishAnim);
                            VideoRecorderActivity.this.closeLight();
                            VideoRecorderActivity.this.playerView.setVisibility(0);
                            VideoRecorderActivity.this.playerView.playPic((Bitmap) message.getData().get("picBitmap"));
                            VideoRecorderActivity.this.recorderView.setVisibility(8);
                        }
                    });
                    return;
                case 103:
                    VideoRecorderActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1.5
                        /* JADX WARN: Type inference failed for: r0v1, types: [android.content.Context, com.jd.lib.unification.video.recorder.VideoRecorderActivity] */
                        /* JADX WARN: Type inference failed for: r2v2, types: [android.content.Context, com.jd.lib.unification.video.recorder.VideoRecorderActivity] */
                        @Override // java.lang.Runnable
                        public void run() {
                            VideoToast.showToast(VideoRecorderActivity.this, VideoRecorderActivity.this.getResources().getString(R.string.uni_video_pic_failed), DpiUtil.dip2px((Context) VideoRecorderActivity.this, 170.0f));
                            VideoRecorderActivity.this.deleteFiles.add(VideoRecorderActivity.this.recorderView.getPicFile());
                            VideoRecorderActivity.this.recorderView.setPicFile(null);
                            VideoRecorderActivity.this.resetData();
                            VideoRecorderActivity.this.recorderView.release();
                            VideoRecorderActivity.this.recorderView.startPreview();
                        }
                    });
                    return;
                case 104:
                    VideoRecorderActivity.this.runOnUiThread(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.1.3
                        /* JADX WARN: Type inference failed for: r0v1, types: [android.content.Context, com.jd.lib.unification.video.recorder.VideoRecorderActivity] */
                        /* JADX WARN: Type inference failed for: r2v2, types: [android.content.Context, com.jd.lib.unification.video.recorder.VideoRecorderActivity] */
                        @Override // java.lang.Runnable
                        public void run() {
                            VideoToast.showToast(VideoRecorderActivity.this, VideoRecorderActivity.this.getResources().getString(R.string.uni_video_record_failed), DpiUtil.dip2px((Context) VideoRecorderActivity.this, 170.0f));
                            VideoRecorderActivity.this.deleteFiles.add(VideoRecorderActivity.this.recorderView.getVecordFile());
                            VideoRecorderActivity.this.recorderView.setVecordFile(null);
                            VideoRecorderActivity.this.resetData();
                            VideoRecorderActivity.this.recorderView.release();
                            VideoRecorderActivity.this.recorderView.startPreview();
                        }
                    });
                    return;
                default:
                    return;
            }
        }
    };

    @PermissionFail(requestCode = AlbumConstant.RECORD_AUDIO_PERMI2)
    public void onFailRecord() {
    }

    protected void onCreate(Bundle bundle) {
        VideoRecorderActivity.super.onCreate(bundle);
        setContentView(R.layout.lib_uni_video_recorder_activity);
        this.titleLayout = (RelativeLayout) findViewById(R.id.titleLayout);
        this.backTv = (TextView) findViewById(R.id.backTv);
        this.cameraTv = (TextView) findViewById(R.id.cameraTv);
        this.ligthTv = (TextView) findViewById(R.id.lightTv);
        this.bottomLayout = (RelativeLayout) findViewById(R.id.bottomLayout);
        this.leftTv = (TextView) findViewById(R.id.leftTv);
        this.centerTv = (TextView) findViewById(R.id.centerTv);
        this.rightTv = (TextView) findViewById(R.id.rightTv);
        this.progressLayout = (LinearLayout) findViewById(R.id.progressLayout);
        this.recorderView = (VideoRecorderView) findViewById(R.id.recorderview);
        this.playerView = (VideoPlayerView) findViewById(R.id.playview);
        this.backTv.setOnClickListener(this);
        this.cameraTv.setOnClickListener(this);
        this.ligthTv.setOnClickListener(this);
        this.playerView.setVisibility(8);
        this.timeTv = (TextView) findViewById(R.id.timeTv);
        this.circleImgView = (TextView) findViewById(R.id.circleImage);
        this.progressView = (CircleProgressView) findViewById(R.id.circleProgressbar);
        this.finishBtLayout = (RelativeLayout) findViewById(R.id.finishBtLayout);
        this.cancelTv = (TextView) findViewById(R.id.cancelTv);
        this.finishTv = (TextView) findViewById(R.id.finishTv);
        this.coverImage = findViewById(R.id.coverImage);
        checkPermissions();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void checkPermissions() {
        PermissionHelper.with((Activity) this).permissions("android.permission.CAMERA", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE").requestCode(400).lisener(this).request();
    }

    @PermissionSuccess(requestCode = 400)
    public void onSucessCamera() {
        initView();
    }

    @PermissionFail(requestCode = 400)
    public void onFailCamera() {
        finish();
    }

    private void initView() {
        this.recorderView.setVisibility(0);
        this.leftTv.setOnClickListener(this);
        this.rightTv.setOnClickListener(this);
        this.progressLayout.setOnClickListener(this);
        this.circleImgView.setOnClickListener(this);
        this.cancelTv.setOnClickListener(this);
        this.finishTv.setOnClickListener(this);
        initData();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void initData() {
        this.squarePhotoWidth = DpiUtil.getWidth(this);
        if (this.rootFile == null) {
            if (Build.VERSION.SDK_INT >= 19) {
                this.rootFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
            } else {
                this.rootFile = Environment.getExternalStorageDirectory();
            }
        }
        this.rootFile = new File(this.rootFile, "jdimage");
        if (!this.rootFile.exists()) {
            this.rootFile.mkdirs();
        }
        if (getIntent().getSerializableExtra(VideoConstant.VIDEO_PARAM) instanceof VideoParam) {
            this.videoParam = (VideoParam) getIntent().getSerializableExtra(VideoConstant.VIDEO_PARAM);
            VideoParam videoParam = this.videoParam;
            if (videoParam != null) {
                this.functionControl = videoParam.recordFunctionControl;
                this.currentState = this.videoParam.recordCurrentState;
                this.recordMaxTime = this.videoParam.recordMaxTime;
                this.recordMinTime = this.videoParam.recordMinTime;
                this.isSquarePhoto = this.videoParam.isSquarePhoto;
                this.coverImagePath = this.videoParam.coverImagePath;
                this.isCoverImageBg = this.videoParam.isCoverImageBg;
                this.squarePhotoWidth = this.videoParam.squarePhotoWidth > 0 ? this.videoParam.squarePhotoWidth : DpiUtil.getWidth(this);
                this.cameraSupport = this.videoParam.cameraSupport;
            }
            if (this.cameraSupport != 0) {
                this.cameraTv.setVisibility(8);
                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) this.ligthTv.getLayoutParams();
                layoutParams.rightMargin = DpiUtil.dip2px(this, 15.0f);
                layoutParams.addRule(11);
            }
            if (this.cameraSupport == 2) {
                this.recorderView.initSurface(1);
                this.ligthTv.setVisibility(8);
            } else {
                this.recorderView.initSurface(0);
            }
            if (this.currentState == 0) {
                PermissionHelper.with((Activity) this).permissions("android.permission.RECORD_AUDIO").requestCode(500).lisener(this).request();
            } else {
                contimueInitData();
            }
        }
    }

    @PermissionSuccess(requestCode = 500)
    public void onSucess() {
        contimueInitData();
    }

    @PermissionFail(requestCode = 500)
    public void onFail() {
        finish();
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void contimueInitData() {
        functionControl();
        this.progressView.setMaxProgress(this.recordMaxTime * 10);
        this.recorderView.setRecordMaxTime(this.recordMaxTime * 1000);
        this.recorderView.setSquarePhoto(this.isSquarePhoto);
        this.recorderView.setSquarePhotoWidth(this.squarePhotoWidth);
        TextView textView = this.timeTv;
        textView.setText(this.recordMaxTime + "");
        this.recorderView.setRootFile(this.rootFile);
        this.recorderView.setOnRecordProgressListener(new VideoRecorderView.OnRecordProgressListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.2
            @Override // com.jd.lib.unification.video.recorder.VideoRecorderView.OnRecordProgressListener
            public void onProgressChanged(int i, int i2) {
                VideoRecorderActivity.this.currentTime = i2;
                Message message = new Message();
                message.arg1 = i;
                message.what = 100;
                VideoRecorderActivity.this.handler.handleMessage(message);
            }
        });
        this.mOrientationListener = new OrientationEventListener(this, 3) { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.3
            @Override // android.view.OrientationEventListener
            public void onOrientationChanged(int i) {
                int i2;
                if (i != -1) {
                    if (i > 350 || i < 10) {
                        i2 = 0;
                    } else if (i > 80 && i < 100) {
                        i2 = 90;
                    } else if (i > 170 && i < 190) {
                        i2 = 180;
                    } else if (i > 260 && i < 280) {
                        i2 = RotationOptions.ROTATE_270;
                    } else {
                        return;
                    }
                    VideoRecorderActivity.this.rotateViews(i2);
                }
            }
        };
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // android.view.View.OnClickListener
    public void onClick(View view) {
        int id = view.getId();
        VideoToast.cancel();
        int i = 1;
        if (id == R.id.circleImage) {
            if (this.currentState != 0) {
                this.recorderView.takePhoto(this.currentOrientation, new CameraManager.OnFinishPicListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.7
                    @Override // com.jd.lib.unification.video.recorder.CameraManager.OnFinishPicListener
                    public void onFinishPic(Bitmap bitmap) {
                        Message message = new Message();
                        message.what = 102;
                        Bundle bundle = new Bundle();
                        bundle.putParcelable("picBitmap", bitmap);
                        message.setData(bundle);
                        VideoRecorderActivity.this.coverImage.setVisibility(8);
                        VideoRecorderActivity.this.handler.sendMessage(message);
                    }

                    @Override // com.jd.lib.unification.video.recorder.CameraManager.OnFinishPicListener
                    public void onFailedPic() {
                        VideoRecorderActivity.this.handler.sendEmptyMessage(103);
                    }
                });
                this.circleImgView.setEnabled(false);
                this.canOnTouch = false;
            } else if (!this.isRecord) {
                this.recorderView.record(this.currentOrientation, new VideoRecorderView.OnRecordFinishListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.4
                    @Override // com.jd.lib.unification.video.recorder.VideoRecorderView.OnRecordFinishListener
                    public void onRecordFinish() {
                        VideoRecorderActivity.this.isRecord = false;
                        VideoRecorderActivity.this.handler.sendEmptyMessage(101);
                    }

                    @Override // com.jd.lib.unification.video.recorder.VideoRecorderView.OnRecordFinishListener
                    public void onRecordFailed() {
                        VideoRecorderActivity.this.isRecord = false;
                        VideoRecorderActivity.this.handler.sendEmptyMessage(104);
                    }
                });
                this.isRecord = true;
                Animation animation = this.titleAnim;
                if (animation == null) {
                    this.titleAnim = VideoUtil.getTranslateYAnim(-1.0f, new Animation.AnimationListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.5
                        @Override // android.view.animation.Animation.AnimationListener
                        public void onAnimationEnd(Animation animation2) {
                        }

                        @Override // android.view.animation.Animation.AnimationListener
                        public void onAnimationRepeat(Animation animation2) {
                        }

                        @Override // android.view.animation.Animation.AnimationListener
                        public void onAnimationStart(Animation animation2) {
                        }
                    });
                } else {
                    animation.reset();
                }
                this.titleLayout.startAnimation(this.titleAnim);
                this.titleLayout.setVisibility(8);
                Animation animation2 = this.bottomAnim;
                if (animation2 == null) {
                    this.bottomAnim = VideoUtil.getTranslateYAnim(1.0f, new Animation.AnimationListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.6
                        @Override // android.view.animation.Animation.AnimationListener
                        public void onAnimationEnd(Animation animation3) {
                        }

                        @Override // android.view.animation.Animation.AnimationListener
                        public void onAnimationRepeat(Animation animation3) {
                        }

                        @Override // android.view.animation.Animation.AnimationListener
                        public void onAnimationStart(Animation animation3) {
                            VideoRecorderActivity.this.progressLayout.setVisibility(0);
                        }
                    });
                } else {
                    animation2.reset();
                }
                this.bottomLayout.startAnimation(this.bottomAnim);
                this.bottomLayout.setVisibility(8);
                this.canOnTouch = false;
            }
        } else if (id == R.id.progressLayout) {
            this.recorderView.stop();
            this.isRecord = false;
            if (this.recorderView.getTimeCount() > this.recordMinTime * 1000) {
                this.handler.sendEmptyMessage(101);
                return;
            }
            Resources resources = getResources();
            int i2 = R.string.uni_video_re_recording;
            VideoToast.showToast(this, resources.getString(i2, this.recordMinTime + ""), DpiUtil.dip2px(this, 170.0f));
            this.deleteFiles.add(this.recorderView.getVecordFile());
            this.recorderView.setVecordFile(null);
            resetData();
            this.recorderView.startPreview();
        } else if (id == R.id.leftTv) {
            setSelectPic();
        } else if (id == R.id.rightTv) {
            setSelectVideo();
        } else if (id == R.id.backTv) {
            finish();
        } else if (id == R.id.cameraTv) {
            this.recorderView.closeLight();
            this.recorderView.changeCameraFaceing();
            if (this.recorderView.getCameraPosition() == 1) {
                this.ligthTv.setVisibility(8);
                return;
            }
            this.ligthTv.setVisibility(0);
            this.ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
        } else if (id == R.id.lightTv) {
            if (this.recorderView.openOrCloseLight(this.currentState)) {
                this.ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_open);
            } else {
                this.ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
            }
        } else if (id == R.id.cancelTv) {
            if (this.currentState == 0) {
                this.deleteFiles.add(this.recorderView.getVecordFile());
                this.recorderView.setVecordFile(null);
            } else {
                this.coverImage.setVisibility(0);
                this.deleteFiles.add(this.recorderView.getPicFile());
                this.recorderView.setPicFile(null);
            }
            resetData();
        } else if (id != R.id.finishTv) {
        } else {
            if (this.currentState == 0) {
                VideoUtil.galleryAddPic(this, this.recorderView.getVecordFile());
                VideoParam videoParam = this.videoParam;
                if (videoParam == null || !videoParam.needEditor) {
                    Intent intent = getIntent();
                    intent.putExtra("videoRecordReturnState", 100);
                    if (this.recorderView.getVecordFile() != null) {
                        intent.putExtra("videoPath", this.recorderView.getVecordFile().getAbsolutePath());
                    }
                    setResult(-1, intent);
                    finish();
                    return;
                }
                if (this.recorderView.getVecordFile() != null) {
                    this.videoParam.editorVideoPath = this.recorderView.getVecordFile().getAbsolutePath();
                }
                Intent intent2 = new Intent((Context) this, (Class<?>) VideoEditorActivity.class);
                intent2.putExtra(VideoConstant.VIDEO_PARAM, this.videoParam);
                startActivityForResult(intent2, 101);
                this.playerView.destory();
                return;
            }
            VideoUtil.galleryAddPic(this, this.recorderView.getPicFile());
            String str = TAG;
            Log.d(str, "needEditorPic:" + this.videoParam.needEditorPic + " cropShape" + this.videoParam.cropShape);
            VideoParam videoParam2 = this.videoParam;
            if ((videoParam2 != null && videoParam2.needEditorPic) || this.videoParam.cropShape == 0 || this.videoParam.cropShape == 1) {
                ImageParam imageParam = new ImageParam();
                if (this.recorderView.getPicFile() != null) {
                    imageParam.editorImagePath = this.recorderView.getPicFile().getAbsolutePath();
                }
                if ((this.videoParam.cropShape == 0 || this.videoParam.cropShape == 1) && this.videoParam.needEditorPic) {
                    i = 0;
                } else if (!(this.videoParam.cropShape == 0 || this.videoParam.cropShape == 1)) {
                    i = this.videoParam.needEditorPic ? 2 : -1;
                }
                imageParam.editorFunction = i;
                imageParam.cropShape = this.videoParam.cropShape;
                imageParam.cropCircleRadius = this.videoParam.cropCircleRadius;
                imageParam.cropRectX = this.videoParam.cropRectX;
                imageParam.cropRectY = this.videoParam.cropRectY;
                Intent intent3 = new Intent((Context) this, (Class<?>) ImageEditorActivity.class);
                intent3.putExtra(ImageConstant.IMAGE_PARAM, imageParam);
                startActivityForResult(intent3, 102);
                this.playerView.destory();
                return;
            }
            Intent intent4 = getIntent();
            intent4.putExtra("videoRecordReturnState", 101);
            if (this.recorderView.getPicFile() != null) {
                intent4.putExtra("photoPath", this.recorderView.getPicFile().getAbsolutePath());
            }
            setResult(-1, intent4);
            finish();
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        VideoRecorderActivity.super.onActivityResult(i, i2, intent);
        if (i == 101 && i2 == -1) {
            if (intent != null) {
                if (intent.getBooleanExtra("editorReturn", false)) {
                    String stringExtra = intent.getStringExtra(VideoConstant.VIDEO_EDITOR_OUT_PATH);
                    intent.putExtra("videoRecordReturnState", 100);
                    intent.putExtra("videoPath", stringExtra);
                    setResult(-1, intent);
                    finish();
                    return;
                }
                resetData();
            }
        } else if (i != 102 || i2 != -1 || intent == null) {
        } else {
            if (intent.getBooleanExtra("editorReturn", false)) {
                String stringExtra2 = intent.getStringExtra(ImageConstant.IMAGE_EDITOR_RETURN_PATH);
                intent.putExtra("videoRecordReturnState", 101);
                intent.putExtra("photoPath", stringExtra2);
                setResult(-1, intent);
                finish();
                return;
            }
            resetData();
        }
    }

    private void functionControl() {
        switch (this.functionControl) {
            case 0:
                if (this.currentState == 1) {
                    setSelectPic();
                    return;
                } else {
                    setSelectVideo();
                    return;
                }
            case 1:
                this.centerTv.setText(getString(R.string.uni_video_video));
                this.leftTv.setText("");
                this.rightTv.setText("");
                this.currentState = 0;
                this.circleImgView.setText(getResources().getString(R.string.uni_video_click_take));
                return;
            case 2:
                this.centerTv.setText(getString(R.string.uni_video_photo));
                this.leftTv.setText("");
                this.rightTv.setText("");
                this.currentState = 1;
                this.circleImgView.setText("");
                setCoverImage();
                if (this.isSquarePhoto) {
                    this.recorderView.setMaskViewVisibility(0);
                    return;
                } else {
                    this.recorderView.setMaskViewVisibility(8);
                    return;
                }
            default:
                return;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void resetData() {
        this.recorderView.setVisibility(0);
        this.playerView.destory();
        this.playerView.setVisibility(8);
        this.currentTime = 0;
        this.isRecord = false;
        this.canOnTouch = true;
        Animation animation = this.bottomAnim;
        if (animation != null) {
            animation.cancel();
        }
        this.bottomLayout.clearAnimation();
        Animation animation2 = this.titleAnim;
        if (animation2 != null) {
            animation2.cancel();
        }
        this.titleLayout.clearAnimation();
        closeLight();
        this.ligthTv.setVisibility(0);
        this.ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
        this.progressLayout.setVisibility(8);
        this.progressView.setProgress(-1);
        this.finishBtLayout.setVisibility(8);
        this.cancelTv.clearAnimation();
        this.finishTv.clearAnimation();
        this.bottomLayout.setVisibility(0);
        this.circleImgView.setEnabled(true);
        TextView textView = this.timeTv;
        textView.setText(this.recordMaxTime + "");
        this.titleLayout.setVisibility(0);
    }

    protected void onResume() {
        VideoRecorderActivity.super.onResume();
        OrientationEventListener orientationEventListener = this.mOrientationListener;
        if (orientationEventListener != null && orientationEventListener.canDetectOrientation()) {
            this.mOrientationListener.enable();
        }
        try {
            int cameraPosition = this.recorderView.getCameraPosition();
            Log.d("camera", "id: " + cameraPosition);
            if (cameraPosition == 1) {
                this.handler.post(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderActivity.8
                    @Override // java.lang.Runnable
                    public void run() {
                        VideoRecorderActivity.this.recorderView.changeCameraFaceing();
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (this.isRecord) {
            resetData();
            this.recorderView.startPreview();
        }
        VideoPlayerView videoPlayerView = this.playerView;
        if (videoPlayerView != null) {
            videoPlayerView.resume();
        }
    }

    protected void onPause() {
        VideoRecorderActivity.super.onPause();
        OrientationEventListener orientationEventListener = this.mOrientationListener;
        if (orientationEventListener != null) {
            orientationEventListener.disable();
        }
        if (this.isRecord) {
            this.recorderView.stop();
            this.deleteFiles.add(this.recorderView.getVecordFile());
            this.recorderView.setVecordFile(null);
        }
        VideoPlayerView videoPlayerView = this.playerView;
        if (videoPlayerView != null) {
            videoPlayerView.pause();
        }
    }

    protected void onDestroy() {
        VideoRecorderActivity.super.onDestroy();
        VideoRecorderView videoRecorderView = this.recorderView;
        if (videoRecorderView != null) {
            videoRecorderView.stop();
            this.recorderView.release();
        }
        VideoPlayerView videoPlayerView = this.playerView;
        if (videoPlayerView != null) {
            videoPlayerView.destory();
        }
        this.handler.removeCallbacksAndMessages(null);
        VideoToast.cancel();
        List<File> list = this.deleteFiles;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < this.deleteFiles.size(); i++) {
                File file = this.deleteFiles.get(i);
                if (file != null && file.exists()) {
                    file.delete();
                }
            }
        }
    }

    public void onBackPressed() {
        try {
            if (this.finishBtLayout.getVisibility() == 0) {
                if (this.currentState == 0) {
                    this.recorderView.deleteVocordFile();
                } else {
                    this.recorderView.deletePicFile();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        VideoRecorderActivity.super.onBackPressed();
    }

    public void rotateViews(int i) {
        int i2 = this.currentOrientation;
        if (i != i2) {
            float f = this.currentRotate;
            int i3 = -(i - i2);
            if (i3 == 270) {
                i3 = -90;
            } else if (i3 == -270) {
                i3 = 90;
            }
            float f2 = ((float) i3) + f;
            this.currentOrientation = i;
            this.currentRotate = f2;
            ObjectAnimator ofFloat = ObjectAnimator.ofFloat(this.cameraTv, "Rotation", f, f2);
            ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(this.ligthTv, "Rotation", f, f2);
            ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(this.progressLayout, "Rotation", f, f2);
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.setDuration(200L);
            animatorSet.setInterpolator(new LinearInterpolator());
            animatorSet.playTogether(ofFloat, ofFloat2, ofFloat3);
            animatorSet.start();
        }
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0) {
            this.x1 = motionEvent.getX();
            VideoToast.cancel();
        }
        if (motionEvent.getAction() == 1) {
            this.x2 = motionEvent.getX();
            float f = this.x1;
            float f2 = this.x2;
            if (f - f2 > 50.0f) {
                if (this.canOnTouch && this.functionControl == 0 && this.currentState == 1) {
                    setSelectVideo();
                }
            } else if (f2 - f > 50.0f && this.canOnTouch && this.functionControl == 0 && this.currentState == 0) {
                setSelectPic();
            }
        }
        return VideoRecorderActivity.super.onTouchEvent(motionEvent);
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void setSelectVideo() {
        PermissionHelper.with((Activity) this).permissions("android.permission.RECORD_AUDIO").requestCode(AlbumConstant.RECORD_AUDIO_PERMI2).lisener(this).request();
    }

    @PermissionSuccess(requestCode = AlbumConstant.RECORD_AUDIO_PERMI2)
    public void onSucessRecord() {
        accessSelectVideo();
    }

    private void accessSelectVideo() {
        this.centerTv.setText(getString(R.string.uni_video_video));
        this.leftTv.setText(getString(R.string.uni_video_photo));
        this.rightTv.setText(" ");
        this.coverImage.setVisibility(8);
        this.currentState = 0;
        closeLight();
        this.circleImgView.setText(getResources().getString(R.string.uni_video_click_take));
        this.recorderView.setMaskViewVisibility(8);
    }

    private void setSelectPic() {
        this.centerTv.setText(getString(R.string.uni_video_photo));
        this.leftTv.setText(" ");
        this.rightTv.setText(getString(R.string.uni_video_video));
        this.currentState = 1;
        this.circleImgView.setText("");
        setCoverImage();
        closeLight();
        if (this.isSquarePhoto) {
            this.recorderView.setMaskViewVisibility(0);
        } else {
            this.recorderView.setMaskViewVisibility(8);
        }
    }

    private void setCoverImage() {
        if (!TextUtils.isEmpty(this.coverImagePath)) {
            this.coverImage.setVisibility(0);
            try {
                int parseInt = Integer.parseInt(this.coverImagePath);
                if (this.isCoverImageBg) {
                    this.coverImage.setBackgroundResource(parseInt);
                } else {
                    this.coverImage.setImage(parseInt);
                }
            } catch (Exception e) {
                e.printStackTrace();
                this.coverImage.setImage(this.coverImagePath);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void closeLight() {
        this.recorderView.closeLight();
        this.ligthTv.setBackgroundResource(R.drawable.lib_uni_video_recoder_light_close);
    }
}
