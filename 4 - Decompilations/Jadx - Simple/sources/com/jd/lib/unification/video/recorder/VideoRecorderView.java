package com.jd.lib.unification.video.recorder;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Rect;
import android.media.MediaRecorder;
import android.os.Build;
import android.os.Environment;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.widget.FrameLayout;
import com.facebook.imagepipeline.common.RotationOptions;
import com.huawei.hms.android.HwBuildEx;
import com.jd.lib.unification.album.filter.video.VideoUtil;
import com.jd.lib.unification.video.recorder.CameraManager;
import com.jd.unalbumwidget.R;
import com.jingdong.common.DpiUtil;
import com.jingdong.common.unification.statusbar.UnStatusBarTintUtil;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class VideoRecorderView extends FrameLayout implements MediaRecorder.OnErrorListener {
    private static final String PIC_DIR = "pictures";
    private static final String TAG = "VideoRecorderView";
    private static final String VIDEO_DIR = "video";
    private CameraManager cameraManager;
    private boolean isSquarePhoto;
    private Context mContext;
    private MediaRecorder mMediaRecorder;
    private OnRecordFinishListener mOnRecordFinishListener;
    private File mPicFile;
    private int mRecordMaxTime;
    private File mRootFile;
    private SurfaceHolder mSurfaceHolder;
    private SurfaceView mSurfaceView;
    private int mTimeCount;
    private Timer mTimer;
    private File mVecordFile;
    private PhotoMaskView maskView;
    private OnRecordProgressListener onRecordProgressListener;
    private int orientation;
    private int squareMarginTop;
    private int squarePhotoWidth;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface OnRecordFinishListener {
        void onRecordFailed();

        void onRecordFinish();
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface OnRecordProgressListener {
        void onProgressChanged(int i, int i2);
    }

    public VideoRecorderView(Context context) {
        this(context, null);
    }

    public VideoRecorderView(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public VideoRecorderView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.mRecordMaxTime = HwBuildEx.VersionCodes.CUR_DEVELOPMENT;
        this.mVecordFile = null;
        this.mPicFile = null;
        this.mContext = context;
        this.cameraManager = new CameraManager(this.mContext);
        LayoutInflater.from(context).inflate(R.layout.lib_uni_video_recorder_view, this);
        this.mSurfaceView = (SurfaceView) findViewById(R.id.surfaceview);
        this.squareMarginTop = DpiUtil.dip2px(this.mContext, 80.0f);
        this.maskView = (PhotoMaskView) findViewById(R.id.maskView);
    }

    public void initSurface(int i) {
        this.mSurfaceHolder = this.mSurfaceView.getHolder();
        this.mSurfaceHolder.addCallback(new CustomCallBack(i));
        this.mSurfaceHolder.setType(3);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    private class CustomCallBack implements SurfaceHolder.Callback {
        private int camera;

        @Override // android.view.SurfaceHolder.Callback
        public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
        }

        public CustomCallBack(int i) {
            this.camera = i;
        }

        @Override // android.view.SurfaceHolder.Callback
        public void surfaceCreated(SurfaceHolder surfaceHolder) {
            try {
                VideoRecorderView.this.cameraManager.initCamera(surfaceHolder, this.camera);
            } catch (IOException unused) {
            }
        }

        @Override // android.view.SurfaceHolder.Callback
        public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
            VideoRecorderView.this.cameraManager.freeCameraResource();
        }
    }

    public void record(int i, OnRecordFinishListener onRecordFinishListener) {
        final int i2;
        this.orientation = i;
        this.mOnRecordFinishListener = onRecordFinishListener;
        createRecordDir();
        try {
            this.mTimeCount = -10;
            int i3 = 700;
            if (UnStatusBarTintUtil.equalsModel("HM1SW")) {
                i3 = 0;
                i2 = -200;
            } else {
                i2 = 200;
            }
            this.mTimer = new Timer();
            AnonymousClass1 r2 = new TimerTask() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderView.1
                @Override // java.util.TimerTask, java.lang.Runnable
                public void run() {
                    VideoRecorderView.this.mTimeCount += 10;
                    if (VideoRecorderView.this.onRecordProgressListener != null) {
                        VideoRecorderView.this.onRecordProgressListener.onProgressChanged(VideoRecorderView.this.mRecordMaxTime, VideoRecorderView.this.mTimeCount);
                    }
                    if (VideoRecorderView.this.mTimeCount == VideoRecorderView.this.mRecordMaxTime + i2) {
                        VideoRecorderView.this.stop();
                        if (VideoRecorderView.this.mOnRecordFinishListener != null) {
                            VideoRecorderView.this.mOnRecordFinishListener.onRecordFinish();
                        }
                    }
                }
            };
            initRecord();
            this.mTimer.schedule(r2, (long) i3, 10);
        } catch (Exception unused) {
            OnRecordFinishListener onRecordFinishListener2 = this.mOnRecordFinishListener;
            if (onRecordFinishListener2 != null) {
                onRecordFinishListener2.onRecordFailed();
            }
            OnRecordFinishListener onRecordFinishListener3 = this.mOnRecordFinishListener;
            if (onRecordFinishListener3 != null) {
                onRecordFinishListener3.onRecordFailed();
            }
        }
    }

    public void takePhoto(int i, final CameraManager.OnFinishPicListener onFinishPicListener) {
        this.orientation = i;
        createPictureFile();
        this.cameraManager.takePicture(new CameraManager.OnFinishPicListener() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderView.2
            @Override // com.jd.lib.unification.video.recorder.CameraManager.OnFinishPicListener
            public void onFinishPic(Bitmap bitmap) {
                Bitmap turn = VideoUtil.toTurn(VideoRecorderView.this.mContext, bitmap, VideoRecorderView.this.getRotationDegree(), VideoRecorderView.this.isSquarePhoto, VideoRecorderView.this.squarePhotoWidth, VideoRecorderView.this.squareMarginTop);
                VideoRecorderView videoRecorderView = VideoRecorderView.this;
                videoRecorderView.saveBitmapToSd(turn, videoRecorderView.mPicFile);
                CameraManager.OnFinishPicListener onFinishPicListener2 = onFinishPicListener;
                if (onFinishPicListener2 != null) {
                    onFinishPicListener2.onFinishPic(turn);
                }
            }

            @Override // com.jd.lib.unification.video.recorder.CameraManager.OnFinishPicListener
            public void onFailedPic() {
                CameraManager.OnFinishPicListener onFinishPicListener2 = onFinishPicListener;
                if (onFinishPicListener2 != null) {
                    onFinishPicListener2.onFailedPic();
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void saveBitmapToSd(final Bitmap bitmap, final File file) {
        new Thread(new Runnable() { // from class: com.jd.lib.unification.video.recorder.VideoRecorderView.3
            @Override // java.lang.Runnable
            public void run() {
                try {
                    FileOutputStream fileOutputStream = new FileOutputStream(file);
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
                    fileOutputStream.flush();
                    fileOutputStream.close();
                } catch (Exception unused) {
                }
            }
        }).start();
    }

    private void initRecord() throws Exception {
        if (this.mMediaRecorder == null) {
            this.mMediaRecorder = new MediaRecorder();
        }
        this.mMediaRecorder.reset();
        if (this.cameraManager.getCamera() != null) {
            this.cameraManager.unLock();
            this.mMediaRecorder.setCamera(this.cameraManager.getCamera());
        }
        this.mMediaRecorder.setOnErrorListener(this);
        this.mMediaRecorder.setPreviewDisplay(this.mSurfaceHolder.getSurface());
        try {
            this.mMediaRecorder.setVideoSource(1);
        } catch (Exception unused) {
        }
        try {
            this.mMediaRecorder.setAudioSource(1);
        } catch (Exception unused2) {
        }
        this.mMediaRecorder.setAudioEncodingBitRate(131072);
        this.mMediaRecorder.setAudioChannels(2);
        this.mMediaRecorder.setAudioSamplingRate(44100);
        try {
            this.mMediaRecorder.setOutputFormat(2);
        } catch (Exception unused3) {
            this.mMediaRecorder.setOutputFormat(0);
        }
        this.mMediaRecorder.setAudioEncoder(3);
        this.mMediaRecorder.setVideoEncoder(2);
        this.mMediaRecorder.setVideoSize(this.cameraManager.getVideoWidth(), this.cameraManager.getVideoHeight());
        this.mMediaRecorder.setVideoEncodingBitRate(VideoUtil.getVideoBitRate(this.cameraManager.getVideoWidth(), this.cameraManager.getVideoHeight()));
        this.mMediaRecorder.setMaxDuration(this.mRecordMaxTime + 500);
        int framRate = VideoUtil.getFramRate();
        if (framRate != -1) {
            this.mMediaRecorder.setVideoFrameRate(framRate);
        }
        this.mMediaRecorder.setOrientationHint(getRotationDegree());
        this.mMediaRecorder.setOutputFile(this.mVecordFile.getAbsolutePath());
        this.mMediaRecorder.prepare();
        try {
            this.mMediaRecorder.start();
        } catch (Exception unused4) {
        }
    }

    public void changeCameraFaceing() {
        this.cameraManager.changeCameraFaceing();
    }

    public boolean openOrCloseLight(int i) {
        return this.cameraManager.openOrCloseLight(i);
    }

    public void closeLight() {
        this.cameraManager.closeLight();
    }

    private void createRecordDir() {
        if (this.mRootFile == null) {
            if (Build.VERSION.SDK_INT >= 19) {
                this.mRootFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
            } else {
                this.mRootFile = Environment.getExternalStorageDirectory();
            }
        }
        File file = new File(this.mRootFile, VIDEO_DIR);
        if (!file.exists()) {
            file.mkdirs();
        }
        try {
            this.mVecordFile = new File(file, System.currentTimeMillis() + ".mp4");
        } catch (Exception unused) {
        }
    }

    private File createPictureFile() {
        if (this.mRootFile == null) {
            if (Build.VERSION.SDK_INT >= 19) {
                this.mRootFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
            } else {
                this.mRootFile = Environment.getExternalStorageDirectory();
            }
        }
        File file = new File(this.mRootFile, PIC_DIR);
        if (!file.exists()) {
            file.mkdirs();
        }
        this.mPicFile = new File(file, System.currentTimeMillis() + ".jpg");
        return this.mPicFile;
    }

    public void stop() {
        stopRecord();
        stopPreview();
    }

    public void release() {
        releaseRecord();
        this.cameraManager.freeCameraResource();
    }

    public void stopPreview() {
        this.cameraManager.stopPreview();
    }

    public void startPreview() {
        this.cameraManager.startPreview();
    }

    public void stopRecord() {
        Timer timer = this.mTimer;
        if (timer != null) {
            timer.cancel();
        }
        MediaRecorder mediaRecorder = this.mMediaRecorder;
        if (mediaRecorder != null) {
            mediaRecorder.setOnErrorListener(null);
            this.mMediaRecorder.setPreviewDisplay(null);
            try {
                this.mMediaRecorder.stop();
            } catch (Exception unused) {
            }
        }
    }

    private void releaseRecord() {
        MediaRecorder mediaRecorder = this.mMediaRecorder;
        if (mediaRecorder != null) {
            mediaRecorder.setOnErrorListener(null);
            try {
                this.mMediaRecorder.release();
            } catch (Exception unused) {
            }
        }
        this.mMediaRecorder = null;
    }

    public int getTimeCount() {
        return this.mTimeCount;
    }

    public File getVecordFile() {
        return this.mVecordFile;
    }

    public void deleteVocordFile() {
        File file = this.mVecordFile;
        if (file != null) {
            file.delete();
        }
    }

    public void deletePicFile() {
        File file = this.mPicFile;
        if (file != null) {
            file.delete();
        }
    }

    public File getPicFile() {
        return this.mPicFile;
    }

    public void setVecordFile(File file) {
        this.mVecordFile = file;
    }

    public void setPicFile(File file) {
        this.mPicFile = file;
    }

    public void setRecordMaxTime(int i) {
        this.mRecordMaxTime = i;
    }

    public void setOnRecordProgressListener(OnRecordProgressListener onRecordProgressListener) {
        this.onRecordProgressListener = onRecordProgressListener;
    }

    @Override // android.media.MediaRecorder.OnErrorListener
    public void onError(MediaRecorder mediaRecorder, int i, int i2) {
        if (mediaRecorder != null) {
            try {
                mediaRecorder.reset();
            } catch (IllegalStateException | Exception unused) {
            }
        }
    }

    @Override // android.view.View
    public void setVisibility(int i) {
        this.mSurfaceView.setVisibility(i);
        super.setVisibility(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getRotationDegree() {
        if (!UnStatusBarTintUtil.equalsModel("Nexus5X") || this.cameraManager.getCameraID() != 0) {
            int i = this.orientation;
            if (i == 0) {
                if (this.cameraManager.getCameraID() == 1) {
                    return RotationOptions.ROTATE_270;
                }
                return 90;
            } else if (i == 180) {
                if (this.cameraManager.getCameraID() == 1) {
                    return 90;
                }
                return RotationOptions.ROTATE_270;
            } else if (i == 90) {
                return 180;
            } else {
                return 0;
            }
        } else {
            int i2 = this.orientation;
            if (i2 == 0) {
                return RotationOptions.ROTATE_270;
            }
            if (i2 == 180) {
                return 90;
            }
            if (i2 != 90 && i2 == 270) {
                return 180;
            }
            return 0;
        }
    }

    public void setRootFile(File file) {
        this.mRootFile = file;
    }

    public int getCameraPosition() {
        return this.cameraManager.getCameraID();
    }

    public void setSquarePhoto(boolean z) {
        this.isSquarePhoto = z;
    }

    public void setSquarePhotoWidth(int i) {
        this.squarePhotoWidth = i;
        this.maskView.setCenterRect(createCenterScreenRect());
    }

    public void setMaskViewVisibility(int i) {
        this.maskView.setVisibility(i);
    }

    private Rect createCenterScreenRect() {
        int i = this.squarePhotoWidth;
        int width = (DpiUtil.getWidth(this.mContext) / 2) - (i / 2);
        int i2 = this.squareMarginTop;
        return new Rect(width, i2, width + i, i + i2);
    }
}
