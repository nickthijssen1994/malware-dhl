package com.jd.lib.unification.video.recorder;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.View;
import com.jingdong.common.DpiUtil;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class CircleProgressView extends View {
    private static final String TAG = "CircleProgressBar";
    private int mCircleLineStrokeWidth;
    private Context mContext;
    private int mMaxProgress = 100;
    private int mProgress = -1;
    private final RectF mRectF = new RectF();
    private final Paint mPaint = new Paint();

    public CircleProgressView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.mContext = context;
    }

    @Override // android.view.View
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        int width = getWidth();
        int height = getHeight();
        if (width != height) {
            width = Math.min(width, height);
            height = width;
        }
        this.mCircleLineStrokeWidth = DpiUtil.dip2px(this.mContext, 6.0f);
        this.mPaint.setAntiAlias(true);
        this.mPaint.setColor(Color.argb(191, 240, 242, 245));
        canvas.drawColor(0);
        this.mPaint.setStrokeWidth((float) this.mCircleLineStrokeWidth);
        this.mPaint.setStyle(Paint.Style.STROKE);
        this.mPaint.setStrokeCap(Paint.Cap.ROUND);
        RectF rectF = this.mRectF;
        int i = this.mCircleLineStrokeWidth;
        rectF.left = (float) (i / 2);
        rectF.top = (float) (i / 2);
        rectF.right = (float) (width - (i / 2));
        rectF.bottom = (float) (height - (i / 2));
        canvas.drawArc(rectF, -90.0f, 360.0f, false, this.mPaint);
        this.mPaint.setColor(Color.parseColor("#f23030"));
        int i2 = this.mProgress;
        if (i2 >= 0) {
            canvas.drawArc(this.mRectF, -90.0f, (((float) i2) / ((float) this.mMaxProgress)) * 360.0f, false, this.mPaint);
        }
        this.mPaint.setStyle(Paint.Style.FILL);
        RectF rectF2 = new RectF();
        int i3 = width / 2;
        rectF2.left = (float) (i3 - DpiUtil.dip2px(this.mContext, 15.0f));
        int i4 = height / 2;
        rectF2.top = (float) (i4 - DpiUtil.dip2px(this.mContext, 15.0f));
        rectF2.right = (float) (i3 + DpiUtil.dip2px(this.mContext, 15.0f));
        rectF2.bottom = (float) (i4 + DpiUtil.dip2px(this.mContext, 15.0f));
        canvas.drawRoundRect(rectF2, (float) DpiUtil.dip2px(this.mContext, 6.0f), (float) DpiUtil.dip2px(this.mContext, 6.0f), this.mPaint);
    }

    public int getMaxProgress() {
        return this.mMaxProgress;
    }

    public void setMaxProgress(int i) {
        this.mMaxProgress = i;
    }

    public void setProgress(int i) {
        this.mProgress = i;
        invalidate();
    }

    public void setProgressNotInUiThread(int i) {
        this.mProgress = i;
        postInvalidate();
    }
}
