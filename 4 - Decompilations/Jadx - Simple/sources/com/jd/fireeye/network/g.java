package com.jd.fireeye.network;

import com.huawei.hms.framework.common.ContainerUtils;
import java.io.UnsupportedEncodingException;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class g {
    private int a;
    private byte[] b;
    private Map<String, String> c;

    private byte[] d() {
        return this.b;
    }

    public final void a(byte[] bArr) {
        this.b = bArr;
    }

    private Map<String, String> e() {
        return this.c;
    }

    public final int a() {
        return this.a;
    }

    public final void a(int i) {
        this.a = i;
    }

    public final void a(Map<String, String> map) {
        this.c = map;
    }

    private String f() {
        byte[] bArr = this.b;
        if (bArr == null) {
            return "";
        }
        try {
            return new String(bArr, a(this.c, "UTF-8"));
        } catch (UnsupportedEncodingException unused) {
            return new String(this.b);
        }
    }

    public final JSONObject b() {
        if (this.b == null) {
            return null;
        }
        try {
            return new JSONObject(f());
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        } catch (Exception unused) {
            return null;
        }
    }

    private JSONArray g() {
        if (this.b == null) {
            return null;
        }
        try {
            return new JSONArray(f());
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        } catch (Exception unused) {
            return null;
        }
    }

    private static String a(Map<String, String> map, String str) {
        String str2;
        if (!(map == null || map.isEmpty() || (str2 = map.get("Content-Type")) == null)) {
            String[] split = str2.split(";");
            for (int i = 1; i < split.length; i++) {
                String[] split2 = split[i].trim().split(ContainerUtils.KEY_VALUE_DELIMITER);
                if (split2.length == 2 && split2[0].equals("charset")) {
                    return split2[1];
                }
            }
        }
        return str;
    }

    public final boolean c() {
        int i = this.a;
        return i >= 200 && i < 300;
    }

    private String b(Map<String, String> map) {
        String str;
        if (!(map == null || map.isEmpty() || (str = map.get("Content-Type")) == null)) {
            String[] split = str.split(";");
            for (int i = 1; i < split.length; i++) {
                String[] split2 = split[i].trim().split(ContainerUtils.KEY_VALUE_DELIMITER);
                if (split2.length == 2 && split2[0].equals("charset")) {
                    return split2[1];
                }
            }
        }
        return "UTF-8";
    }
}
