package com.jd.fireeye.network;

import android.text.TextUtils;
import com.alibaba.fastjson.support.spring.FastJsonJsonView;
import com.facebook.common.util.UriUtil;
import com.jd.fireeye.network.d;
import com.jd.lib.un.utils.UnTimeUtils;
import com.jd.sentry.performance.network.instrumentation.urlconnection.ShooterUrlConnectionInstrumentation;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLException;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class f implements Runnable {
    private static final String a;
    private static Map<Object, WeakReference<f>> b = Collections.synchronizedMap(new WeakHashMap());
    private Future c;
    private int d;
    private int f;
    private String g;
    private boolean h;
    private h k;
    private Object l;
    private Integer m;
    private int e = 1;
    private final AtomicBoolean i = new AtomicBoolean();
    private int j = 15000;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface a {
        public static final int a;
        public static final int b;
    }

    private static Map<String, String> j() {
        return null;
    }

    private void m() {
    }

    protected String c() {
        return null;
    }

    public f(String str) {
        this.g = str;
    }

    private f(String str, int i) {
        this.g = str;
        this.f = i;
    }

    public final void a(h hVar) {
        this.k = hVar;
    }

    public final void a(Object obj) {
        this.l = obj;
    }

    private Object e() {
        return this.l;
    }

    public final int a() {
        int i = this.e;
        if (i <= 0) {
            return 1;
        }
        return i;
    }

    private void b(int i) {
        this.e = i;
    }

    private void a(boolean z) {
        this.h = z;
    }

    private void f() {
        this.i.set(true);
        Future future = this.c;
        if (future != null) {
            future.cancel(true);
        }
    }

    private static void b(Object obj) {
        WeakReference<f> weakReference;
        f fVar;
        if (obj != null && (weakReference = b.get(obj)) != null && (fVar = weakReference.get()) != null) {
            fVar.f();
            weakReference.clear();
        }
    }

    private static void g() {
        f fVar;
        if (!b.isEmpty()) {
            for (Map.Entry<Object, WeakReference<f>> entry : b.entrySet()) {
                WeakReference<f> value = entry.getValue();
                if (!(value == null || (fVar = value.get()) == null)) {
                    fVar.f();
                    value.clear();
                }
            }
        }
    }

    public final boolean b() {
        return this.i.get();
    }

    private int h() {
        return this.j;
    }

    public final void a(int i) {
        this.j = UnTimeUtils.MIN;
    }

    private boolean i() {
        return this.h;
    }

    private Integer k() {
        return this.m;
    }

    private void a(Integer num) {
        this.m = num;
    }

    private void a(g gVar) {
        h hVar = this.k;
        if (hVar != null) {
            hVar.a(gVar);
        }
    }

    private void a(NetworkException networkException) {
        h hVar = this.k;
        if (hVar != null) {
            hVar.a();
        }
    }

    private String l() {
        return this.g;
    }

    public final void d() {
        if (this.l == null) {
            this.l = Long.valueOf(System.currentTimeMillis());
        }
        Object obj = this.l;
        if (obj != null) {
            b.put(obj, new WeakReference<>(this));
        }
        this.c = d.a.a.a(this);
    }

    private int n() {
        return this.f;
    }

    private void p() {
        Object obj = this.l;
        if (obj != null) {
            try {
                b.remove(obj);
            } catch (Exception unused) {
            }
        }
    }

    private void q() throws NetworkException {
        NetworkException networkException;
        boolean z;
        if (c.a()) {
            new HashMap();
            String c = c();
            NetworkException networkException2 = null;
            boolean z2 = true;
            while (z2) {
                try {
                    this.d++;
                    if (c.b) {
                        b.a(a, "Request.tag = " + this.l + ", url = " + this.g + " executionCount = " + this.d);
                    }
                    g a2 = a((Map<String, String>) null, c);
                    if (c.b) {
                        b.a(a, "Response.tag = " + this.l + ", response.responseCode = " + a2.a());
                    }
                    if (!a2.c()) {
                        throw new NetworkException(a2.a());
                    } else if (!this.i.get() && this.k != null) {
                        this.k.a(a2);
                        return;
                    } else {
                        return;
                    }
                } catch (NetworkException e) {
                    boolean a3 = i.a(e, this.d, this);
                    int a4 = e.a();
                    if (a4 == 0) {
                        a4 = a.c;
                    }
                    networkException2 = new NetworkException(e, a4);
                    z2 = a3;
                } catch (SocketTimeoutException e2) {
                    if (c.b) {
                        e2.printStackTrace();
                    }
                    z = i.a(e2, this.d, this);
                    networkException = new NetworkException(e2, (int) a.a);
                    z2 = z;
                    networkException2 = networkException;
                } catch (SSLException e3) {
                    if (c.b) {
                        e3.printStackTrace();
                    }
                    z = i.a(e3, this.d, this);
                    networkException = new NetworkException(e3, (int) a.f);
                    z2 = z;
                    networkException2 = networkException;
                } catch (Exception e4) {
                    if (!this.i.get()) {
                        z = i.a(e4, this.d, this);
                        if (z && this.h && !TextUtils.isEmpty(this.g) && this.g.startsWith("https://")) {
                            this.g = this.g.replaceFirst("https://", "http://");
                            if (c.b) {
                                b.a(a, "Request.tag = " + this.l + ", after replace, url  = " + this.g);
                            }
                        }
                        networkException = new NetworkException(e4, (int) a.b);
                        if (c.b) {
                            e4.printStackTrace();
                        }
                        z2 = z;
                        networkException2 = networkException;
                    } else {
                        return;
                    }
                }
            }
            throw networkException2;
        }
    }

    private static byte[] a(HttpURLConnection httpURLConnection) throws IOException {
        InputStream inputStream;
        ByteArrayOutputStream byteArrayOutputStream;
        Throwable th;
        try {
            inputStream = httpURLConnection.getInputStream();
            try {
                byteArrayOutputStream = new ByteArrayOutputStream();
                try {
                    byte[] bArr = new byte[1024];
                    while (true) {
                        int read = inputStream.read(bArr);
                        if (read == -1) {
                            break;
                        }
                        byteArrayOutputStream.write(bArr, 0, read);
                    }
                    byteArrayOutputStream.flush();
                    byteArrayOutputStream.close();
                    inputStream.close();
                    byte[] byteArray = byteArrayOutputStream.toByteArray();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    byteArrayOutputStream.close();
                    return byteArray;
                } catch (IOException unused) {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    if (byteArrayOutputStream != null) {
                        byteArrayOutputStream.close();
                    }
                    return null;
                } catch (Throwable th2) {
                    th = th2;
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    if (byteArrayOutputStream != null) {
                        byteArrayOutputStream.close();
                    }
                    throw th;
                }
            } catch (IOException unused2) {
                byteArrayOutputStream = null;
            } catch (Throwable th3) {
                th = th3;
                byteArrayOutputStream = null;
            }
        } catch (IOException unused3) {
            inputStream = null;
            byteArrayOutputStream = null;
        } catch (Throwable th4) {
            th = th4;
            byteArrayOutputStream = null;
            inputStream = null;
        }
    }

    private static void b(HttpURLConnection httpURLConnection, String str) throws IOException {
        if (httpURLConnection != null) {
            DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
            if (str != null) {
                dataOutputStream.write(str.getBytes());
            }
            dataOutputStream.flush();
            dataOutputStream.close();
        }
    }

    private static HttpURLConnection b(URL url) throws IOException {
        if (UriUtil.HTTPS_SCHEME.equals(url.getProtocol().toLowerCase())) {
            return (HttpsURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
        }
        return (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
    }

    @Override // java.lang.Runnable
    public void run() {
        try {
            if (this.i.get()) {
                p();
                return;
            }
            try {
                q();
            } catch (NetworkException e) {
                e.printStackTrace();
                if (!this.i.get() && this.k != null) {
                    this.k.a();
                }
            }
            p();
        } catch (InterruptedException e2) {
            e2.printStackTrace();
        }
    }

    private void o() throws InterruptedException {
        NetworkException networkException;
        boolean z;
        try {
            if (!this.i.get()) {
                if (c.a()) {
                    new HashMap();
                    String c = c();
                    NetworkException networkException2 = null;
                    boolean z2 = true;
                    while (z2) {
                        try {
                            this.d++;
                            if (c.b) {
                                b.a(a, "Request.tag = " + this.l + ", url = " + this.g + " executionCount = " + this.d);
                            }
                            g a2 = a((Map<String, String>) null, c);
                            if (c.b) {
                                b.a(a, "Response.tag = " + this.l + ", response.responseCode = " + a2.a());
                            }
                            if (!a2.c()) {
                                throw new NetworkException(a2.a());
                            } else if (!this.i.get() && this.k != null) {
                                this.k.a(a2);
                            }
                        } catch (NetworkException e) {
                            boolean a3 = i.a(e, this.d, this);
                            int a4 = e.a();
                            if (a4 == 0) {
                                a4 = a.c;
                            }
                            networkException2 = new NetworkException(e, a4);
                            z2 = a3;
                        } catch (SocketTimeoutException e2) {
                            if (c.b) {
                                e2.printStackTrace();
                            }
                            z = i.a(e2, this.d, this);
                            networkException = new NetworkException(e2, (int) a.a);
                            z2 = z;
                            networkException2 = networkException;
                        } catch (SSLException e3) {
                            if (c.b) {
                                e3.printStackTrace();
                            }
                            z = i.a(e3, this.d, this);
                            networkException = new NetworkException(e3, (int) a.f);
                            z2 = z;
                            networkException2 = networkException;
                        } catch (Exception e4) {
                            if (!this.i.get()) {
                                z = i.a(e4, this.d, this);
                                if (z && this.h && !TextUtils.isEmpty(this.g) && this.g.startsWith("https://")) {
                                    this.g = this.g.replaceFirst("https://", "http://");
                                    if (c.b) {
                                        b.a(a, "Request.tag = " + this.l + ", after replace, url  = " + this.g);
                                    }
                                }
                                networkException = new NetworkException(e4, (int) a.b);
                                if (c.b) {
                                    e4.printStackTrace();
                                }
                                z2 = z;
                                networkException2 = networkException;
                            }
                        }
                    }
                    throw networkException2;
                }
            }
        } catch (NetworkException e5) {
            e5.printStackTrace();
            if (!this.i.get() && this.k != null) {
                this.k.a();
            }
        } finally {
            p();
        }
    }

    private g a(Map<String, String> map, String str) throws Exception {
        HttpURLConnection httpURLConnection;
        if (!this.i.get()) {
            URL url = new URL(this.g);
            if (UriUtil.HTTPS_SCHEME.equals(url.getProtocol().toLowerCase())) {
                httpURLConnection = (HttpsURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
            } else {
                httpURLConnection = (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
            }
            int i = this.j;
            httpURLConnection.setConnectTimeout(i);
            httpURLConnection.setReadTimeout(i);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            if (map != null && !map.isEmpty()) {
                for (String str2 : map.keySet()) {
                    httpURLConnection.addRequestProperty(str2, map.get(str2));
                }
            }
            httpURLConnection.setRequestProperty("Charset", "UTF-8");
            httpURLConnection.setRequestProperty("Content-Type", FastJsonJsonView.DEFAULT_CONTENT_TYPE);
            switch (this.f) {
                case 0:
                    httpURLConnection.setRequestMethod("POST");
                    if (httpURLConnection != null) {
                        DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
                        if (str != null) {
                            dataOutputStream.write(str.getBytes());
                        }
                        dataOutputStream.flush();
                        dataOutputStream.close();
                        break;
                    }
                    break;
                case 1:
                    httpURLConnection.setRequestMethod("GET");
                    break;
            }
            if (!this.i.get()) {
                int responseCode = httpURLConnection.getResponseCode();
                if (responseCode != -1) {
                    g gVar = new g();
                    HashMap hashMap = new HashMap();
                    for (Map.Entry<String, List<String>> entry : httpURLConnection.getHeaderFields().entrySet()) {
                        if (entry.getKey() != null) {
                            hashMap.put(entry.getKey(), entry.getValue().get(0));
                        }
                    }
                    gVar.a(responseCode);
                    gVar.a(hashMap);
                    gVar.a(a(httpURLConnection));
                    if (!this.i.get()) {
                        return gVar;
                    }
                    throw new NetworkException(a.e);
                }
                throw new NetworkException(responseCode);
            }
            throw new NetworkException(a.e);
        }
        throw new NetworkException(a.e);
    }

    private void a(HttpURLConnection httpURLConnection, String str) throws IOException {
        switch (this.f) {
            case 0:
                httpURLConnection.setRequestMethod("POST");
                if (httpURLConnection != null) {
                    DataOutputStream dataOutputStream = new DataOutputStream(httpURLConnection.getOutputStream());
                    if (str != null) {
                        dataOutputStream.write(str.getBytes());
                    }
                    dataOutputStream.flush();
                    dataOutputStream.close();
                    return;
                }
                return;
            case 1:
                httpURLConnection.setRequestMethod("GET");
                return;
            default:
                return;
        }
    }

    private HttpURLConnection a(URL url) throws IOException {
        HttpURLConnection httpURLConnection;
        if (UriUtil.HTTPS_SCHEME.equals(url.getProtocol().toLowerCase())) {
            httpURLConnection = (HttpsURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
        } else {
            httpURLConnection = (HttpURLConnection) ShooterUrlConnectionInstrumentation.openConnection(url.openConnection());
        }
        int i = this.j;
        httpURLConnection.setConnectTimeout(i);
        httpURLConnection.setReadTimeout(i);
        httpURLConnection.setDoInput(true);
        httpURLConnection.setDoOutput(true);
        return httpURLConnection;
    }
}
