package com.jd.fireeye.security.fireeye;

import android.annotation.SuppressLint;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.hardware.Sensor;
import android.os.Build;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Base64;
import com.facebook.react.uimanager.ViewProps;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.jd.fireeye.common.c;
import com.jd.fireeye.common.f;
import com.jd.fireeye.common.g;
import com.jd.fireeye.common.i;
import com.jd.fireeye.common.j;
import com.jd.fireeye.common.k;
import com.jd.fireeye.common.l;
import com.jd.fireeye.common.m;
import com.jd.fireeye.common.o;
import com.jd.fireeye.common.p;
import com.jd.fireeye.common.q;
import com.jd.fireeye.common.r;
import com.jd.fireeye.common.s;
import com.jd.fireeye.network.h;
import com.jd.fireeye.security.b;
import com.jd.fireeye.security.d;
import com.jd.lib.un.utils.UnTimeUtils;
import com.jd.push.common.constant.Constants;
import com.jingdong.common.utils.Configuration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class a {
    private static final String a;
    private static final String b;
    private static final String c;
    private static final String d;
    private static final String e;
    private static final String f;
    private static final a g = new a();
    private Hashtable<String, Boolean> h = new Hashtable<>();
    private String i = "";

    private static String b() {
        return b.e() ? c : b;
    }

    private static String c() {
        return b.e() ? e : d;
    }

    public static a a() {
        return g;
    }

    private a() {
    }

    public final void a(JSONObject jSONObject, FireEyeCallback fireEyeCallback) {
        if (jSONObject == null) {
            g.a(a, "event param is NULL!");
            return;
        }
        String i = b.i();
        this.i = f();
        b bVar = new b(this, b.e() ? e : d, jSONObject);
        bVar.a((h) new c(this, fireEyeCallback));
        bVar.a(UnTimeUtils.MIN);
        bVar.a("EventRequest." + i + "." + System.currentTimeMillis());
        bVar.d();
    }

    public final void b(JSONObject jSONObject, FireEyeCallback fireEyeCallback) {
        if (jSONObject == null) {
            g.a(a, "event param is NULL!");
            return;
        }
        String i = b.i();
        String optString = jSONObject.optString("devicecode");
        if (!TextUtils.isEmpty(optString)) {
            b.a(optString);
        }
        String optString2 = jSONObject.optString("oaId");
        if (!TextUtils.isEmpty(optString2)) {
            b.b(optString2);
        }
        Boolean bool = this.h.get(i);
        if ((bool == null || !bool.booleanValue()) && !q.b(i, false)) {
            this.i = f();
            this.h.put(i, Boolean.TRUE);
            d dVar = new d(this, b.e() ? c : b, jSONObject);
            dVar.a((h) new e(this, fireEyeCallback));
            dVar.a(UnTimeUtils.MIN);
            dVar.a("ActiveRequest." + i + "." + System.currentTimeMillis());
            dVar.d();
        }
    }

    private static void a(String str) {
        q.a(b.i(), true);
        if (!TextUtils.isEmpty(str)) {
            q.a("activeUuid", str);
        }
    }

    private void a(com.jd.fireeye.network.g gVar, FireEyeCallback fireEyeCallback, boolean z) {
        try {
            JSONObject b2 = gVar.b();
            String str = "";
            if (b2 != null) {
                str = b2.optString("code");
                if (g.a) {
                    g.b(a, String.format("fire report response json: \n%s", com.jd.fireeye.common.h.a(b2.toString())));
                }
            }
            if (TextUtils.equals("0", str)) {
                if (g.a) {
                    g.b(a, b.i() + " report success");
                }
                if (z) {
                    String optString = b2.optString("activeUuid");
                    q.a(b.i(), true);
                    if (!TextUtils.isEmpty(optString)) {
                        q.a("activeUuid", optString);
                    }
                }
                if (fireEyeCallback == null) {
                    return;
                }
                if (fireEyeCallback instanceof DeepLinkFireEyeCallback) {
                    ((DeepLinkFireEyeCallback) fireEyeCallback).onSuccess(b2);
                } else {
                    fireEyeCallback.onSuccess();
                }
            } else {
                if (g.a) {
                    g.a(a, b.i() + " report failed");
                }
                if (fireEyeCallback != null) {
                    fireEyeCallback.onFail();
                }
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    private JSONObject a(JSONObject jSONObject) {
        return com.jd.fireeye.common.b.b(a(jSONObject, false).toString());
    }

    private JSONObject b(JSONObject jSONObject) {
        return com.jd.fireeye.common.b.b(a(jSONObject, true).toString());
    }

    public JSONObject a(JSONObject jSONObject, boolean z) {
        try {
            if (g.a) {
                g.b(a, String.format("active json param: \n%s", com.jd.fireeye.common.h.a(jSONObject.toString())));
            }
            JSONObject jSONObject2 = new JSONObject();
            jSONObject2.put(Configuration.UNION_ID, b.b());
            jSONObject2.put(Configuration.SUB_UNION_ID, b.c());
            jSONObject2.put("devicecode", b.a());
            jSONObject2.put("sdkverison", c.a);
            jSONObject2.put("osversion", com.jd.fireeye.common.a.a());
            jSONObject2.put("appversion", com.jd.fireeye.common.a.b(b.a));
            jSONObject2.put("clientos", "android");
            jSONObject2.put("brand", Build.BRAND);
            jSONObject2.put("idfa", "");
            jSONObject2.put("model", Build.MODEL);
            jSONObject2.put("currenttime", s.a());
            jSONObject2.put("originalsubunionId", k.a());
            jSONObject2.put("imei", d());
            jSONObject2.put("mac", e());
            jSONObject2.put("imsi", m.g(b.a));
            jSONObject2.put("imeiAndMeid", "");
            jSONObject2.put(Configuration.PARTNER, b.d());
            jSONObject2.put("networkinfo", j.a(b.a));
            jSONObject2.put("installtionid", b.f());
            jSONObject2.put("androidId", r.c(b.a));
            jSONObject2.put("ua", m.m(b.a));
            jSONObject2.put("oaId", b.j());
            jSONObject2.put("yodaId", this.i);
            if (b.a != null) {
                HashMap a2 = com.jd.fireeye.security.c.a(b.a);
                jSONObject2.put("smartChannelId", a2.get(com.jd.fireeye.security.c.a));
                jSONObject2.put("smartClickTime", a2.get(com.jd.fireeye.security.c.b));
                jSONObject2.put("smartInstallTime", a2.get(com.jd.fireeye.security.c.c));
            }
            try {
                jSONObject2.put("appkey", b.i());
                jSONObject2.put("gisinfo", jSONObject.optString("gisinfo"));
                jSONObject2.put("isFromOpenApp", jSONObject.optBoolean("isFromOpenApp"));
                if (z) {
                    jSONObject2.put("rcode", a(b.a, z));
                } else {
                    jSONObject2.put("activeUuid", q.b("activeUuid", ""));
                    jSONObject2.put("eventNumber", jSONObject.optString("eventNumber"));
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
            return jSONObject2;
        } catch (Exception e3) {
            e3.printStackTrace();
            return new JSONObject();
        }
    }

    private static String d() {
        try {
            return m.k();
        } catch (Exception unused) {
            return "";
        }
    }

    private static String e() {
        try {
            return m.l();
        } catch (Exception unused) {
            return "";
        }
    }

    private static String f() {
        String charSequence;
        try {
            ClipboardManager clipboardManager = (ClipboardManager) b.a.getSystemService("clipboard");
            if (clipboardManager == null) {
                return "";
            }
            ClipData primaryClip = clipboardManager.getPrimaryClip();
            if (primaryClip == null) {
                return PushSelfShowConstant.ACTION_APP_OUT_OF_DATE_EVENT_ID;
            }
            if (primaryClip.getItemCount() <= 0) {
                return "";
            }
            for (int i = 0; i < primaryClip.getItemCount(); i++) {
                ClipData.Item itemAt = primaryClip.getItemAt(i);
                if (!(itemAt == null || itemAt.getText() == null || (charSequence = itemAt.getText().toString()) == null || charSequence.length() != 34 || charSequence.charAt(0) != charSequence.charAt(33))) {
                    return charSequence;
                }
            }
            return "";
        } catch (Exception e2) {
            e2.printStackTrace();
            return "";
        }
    }

    private void b(JSONObject jSONObject, boolean z) throws JSONException {
        jSONObject.put(Configuration.UNION_ID, b.b());
        jSONObject.put(Configuration.SUB_UNION_ID, b.c());
        jSONObject.put("devicecode", b.a());
        jSONObject.put("sdkverison", c.a);
        jSONObject.put("osversion", com.jd.fireeye.common.a.a());
        jSONObject.put("appversion", com.jd.fireeye.common.a.b(b.a));
        jSONObject.put("clientos", "android");
        jSONObject.put("brand", Build.BRAND);
        jSONObject.put("idfa", "");
        jSONObject.put("model", Build.MODEL);
        jSONObject.put("currenttime", s.a());
        jSONObject.put("originalsubunionId", k.a());
        jSONObject.put("imei", d());
        jSONObject.put("mac", e());
        jSONObject.put("imsi", m.g(b.a));
        jSONObject.put("imeiAndMeid", "");
        jSONObject.put(Configuration.PARTNER, b.d());
        jSONObject.put("networkinfo", j.a(b.a));
        jSONObject.put("installtionid", b.f());
        jSONObject.put("androidId", r.c(b.a));
        jSONObject.put("ua", m.m(b.a));
        jSONObject.put("oaId", b.j());
        jSONObject.put("yodaId", this.i);
        if (b.a != null) {
            HashMap a2 = com.jd.fireeye.security.c.a(b.a);
            jSONObject.put("smartChannelId", a2.get(com.jd.fireeye.security.c.a));
            jSONObject.put("smartClickTime", a2.get(com.jd.fireeye.security.c.b));
            jSONObject.put("smartInstallTime", a2.get(com.jd.fireeye.security.c.c));
        }
    }

    private static void c(JSONObject jSONObject) throws Exception {
        String str = "";
        String b2 = q.b(f, "");
        if (!TextUtils.isEmpty(b2)) {
            str = new String(Base64.decode(b2.getBytes(), 2));
        }
        jSONObject.put("lastUUID", str);
    }

    @SuppressLint({"NewApi"})
    private JSONObject a(Context context, boolean z) throws Exception {
        JSONObject jSONObject;
        JSONObject jSONObject2;
        JSONObject jSONObject3 = new JSONObject();
        String a2 = r.a(context);
        jSONObject3.put("deviceId", "");
        jSONObject3.put(Configuration.CLIENT, "android");
        jSONObject3.put("clientVersion", com.jd.fireeye.common.a.b(context));
        jSONObject3.put(Constants.JdPushMsg.JSON_KEY_OS_VERSION, Build.VERSION.RELEASE);
        StringBuilder sb = new StringBuilder();
        sb.append(com.jd.fireeye.common.a.a(context));
        jSONObject3.put("build", sb.toString());
        jSONObject3.put("screen", m.d(context));
        jSONObject3.put(Constants.JdPushMsg.JSON_KEY_UUID, a2);
        jSONObject3.put("androidId", Settings.Secure.getString(context.getContentResolver(), "android_id"));
        jSONObject3.put("openudid", "");
        jSONObject3.put("networkInfo", j.a(context));
        jSONObject3.put("isQEmuDriverExist", m.d());
        jSONObject3.put("isPipeExist", m.c());
        jSONObject3.put("tags", Build.TAGS);
        jSONObject3.put("board", Build.BOARD);
        jSONObject3.put("bootloader", Build.BOOTLOADER);
        jSONObject3.put("device", Build.DEVICE);
        jSONObject3.put(ViewProps.DISPLAY, Build.DISPLAY);
        jSONObject3.put("fingerprint", Build.FINGERPRINT);
        jSONObject3.put("hardware", Build.HARDWARE);
        jSONObject3.put("sdkLevel", Build.VERSION.SDK_INT);
        jSONObject3.put("sdCid", m.a());
        jSONObject3.put("freeDiskSpace", m.a(context));
        jSONObject3.put("totalDiskSpace", m.b(context));
        jSONObject3.put("memSize", m.c(context));
        jSONObject3.put("btMac", r.d(context));
        jSONObject3.put("imei", d());
        jSONObject3.put("wifiMac", e());
        jSONObject3.put("imsi", m.g(context));
        jSONObject3.put("imeiAndMeid", "");
        jSONObject3.put("maxCpuFrequency", m.f());
        jSONObject3.put("minCpuFrequency", m.g());
        jSONObject3.put("cpuType", m.b());
        jSONObject3.put("carrierName", j.b(context));
        jSONObject3.put("phoneNumber", m.i(context));
        StringBuilder sb2 = new StringBuilder();
        List<Sensor> e2 = m.e(context);
        if (e2 != null) {
            int i = 0;
            while (i < e2.size() && i < 10) {
                Sensor sensor = e2.get(i);
                sb2.append(sensor.getName() + "," + sensor.getResolution() + "," + sensor.getVendor());
                sb2.append("@");
                i++;
            }
        }
        if (sb2.length() > 0) {
            jSONObject3.put("sensors", sb2.deleteCharAt(sb2.length() - 1).toString());
        }
        jSONObject3.put("ipAddress", m.i());
        jSONObject3.put("model", Build.MODEL);
        jSONObject3.put("mobileCountryCode", m.j(context));
        jSONObject3.put("mobileNetworkCode", m.k(context));
        jSONObject3.put("isoCountryCode", m.f(context));
        jSONObject3.put("appBundleIdentifier", context.getPackageName());
        jSONObject3.put("platform", Build.MODEL);
        jSONObject3.put("deviceName", Build.DEVICE);
        jSONObject3.put("currentTime", s.a());
        jSONObject3.put("serial", Build.SERIAL);
        jSONObject3.put("simSerialNumber", m.h(context));
        jSONObject3.put("physicalCpu", m.h());
        jSONObject3.put("isRoot", m.j());
        jSONObject3.put("rootConfirm", p.a());
        jSONObject3.put("rootSuspicious", p.a(context));
        jSONObject3.put("cpuFrequency", m.e());
        jSONObject3.put("imeiPermission", l.a(context));
        jSONObject3.put("oaId", b.j());
        if (!d.e) {
            jSONObject = o.b(context);
        } else {
            jSONObject = o.a(context);
        }
        if (!d.f) {
            jSONObject2 = f.b(context);
        } else {
            jSONObject2 = f.a(context);
        }
        com.jd.fireeye.common.h.a(jSONObject3, i.b().a(), jSONObject, jSONObject2);
        return jSONObject3;
    }

    public static /* synthetic */ void a(a aVar, com.jd.fireeye.network.g gVar, FireEyeCallback fireEyeCallback, boolean z) {
        try {
            JSONObject b2 = gVar.b();
            String str = "";
            if (b2 != null) {
                str = b2.optString("code");
                if (g.a) {
                    g.b(a, String.format("fire report response json: \n%s", com.jd.fireeye.common.h.a(b2.toString())));
                }
            }
            if (TextUtils.equals("0", str)) {
                if (g.a) {
                    g.b(a, b.i() + " report success");
                }
                if (z) {
                    String optString = b2.optString("activeUuid");
                    q.a(b.i(), true);
                    if (!TextUtils.isEmpty(optString)) {
                        q.a("activeUuid", optString);
                    }
                }
                if (fireEyeCallback == null) {
                    return;
                }
                if (fireEyeCallback instanceof DeepLinkFireEyeCallback) {
                    ((DeepLinkFireEyeCallback) fireEyeCallback).onSuccess(b2);
                } else {
                    fireEyeCallback.onSuccess();
                }
            } else {
                if (g.a) {
                    g.a(a, b.i() + " report failed");
                }
                if (fireEyeCallback != null) {
                    fireEyeCallback.onFail();
                }
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    public static /* synthetic */ JSONObject b(a aVar, JSONObject jSONObject) {
        return com.jd.fireeye.common.b.b(aVar.a(jSONObject, true).toString());
    }
}
