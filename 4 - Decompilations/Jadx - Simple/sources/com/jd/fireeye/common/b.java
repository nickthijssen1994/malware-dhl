package com.jd.fireeye.common;

import android.util.Base64;
import java.io.IOException;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class b {
    public static final String a;
    public static final String b;
    public static final String c;
    public static final String d;

    public static byte[] a(String str) throws IOException {
        return Base64.decode(str.getBytes(), 0);
    }

    public static String a(byte[] bArr) {
        return new String(Base64.encode(bArr, 0));
    }

    public static String a() {
        Random random = new Random();
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < 16; i++) {
            stringBuffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".charAt(random.nextInt(62)));
        }
        return stringBuffer.toString();
    }

    private static byte[] a(byte[] bArr, String str, int i) throws Exception {
        SecretKeySpec secretKeySpec = new SecretKeySpec(str.getBytes("UTF-8"), a);
        IvParameterSpec ivParameterSpec = new IvParameterSpec(d.getBytes("UTF-8"));
        Cipher instance = Cipher.getInstance("AES/CBC/PKCS5Padding");
        instance.init(i, secretKeySpec, ivParameterSpec);
        return instance.doFinal(bArr);
    }

    private static String b(String str, String str2) throws Exception {
        return a(a(str.getBytes("UTF-8"), str2, 1));
    }

    public static JSONObject b(String str) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("appkey", com.jd.fireeye.security.b.i());
            jSONObject.put("head", com.jd.fireeye.security.b.g());
            jSONObject.put("info", URLEncoder.encode(a(a(str.getBytes("UTF-8"), com.jd.fireeye.security.b.h(), 1)), "UTF-8"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jSONObject;
    }

    private static String c(String str, String str2) throws Exception {
        return new String(a(a(str), str2, 2), "UTF-8");
    }

    public static String a(String str, String str2) throws Exception {
        PublicKey generatePublic = KeyFactory.getInstance(b).generatePublic(new X509EncodedKeySpec(a(str2)));
        Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        instance.init(1, generatePublic);
        return a(instance.doFinal(str.getBytes("UTF-8")));
    }

    private static String d(String str, String str2) throws Exception {
        PrivateKey generatePrivate = KeyFactory.getInstance(b).generatePrivate(new PKCS8EncodedKeySpec(a(str2)));
        Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        instance.init(2, generatePrivate);
        return new String(instance.doFinal(a(str)), "UTF-8");
    }
}
