package com.jd.fireeye.common;

import android.app.ActivityManager;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.text.format.Formatter;
import android.util.DisplayMetrics;
import android.util.Log;
import android.webkit.WebSettings;
import android.webkit.WebView;
import com.jd.fireeye.security.b;
import com.jd.fireeye.security.d;
import com.jingdong.sdk.uuid.Request;
import com.jingdong.sdk.uuid.UUID;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.List;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class m {
    public static final String a = "unknow";
    private static final String b = "JDMob.Security.Phone";
    private static String c = "";

    public static String a(Context context) {
        try {
            StatFs statFs = new StatFs(Environment.getDataDirectory().getPath());
            return Formatter.formatFileSize(context, ((long) statFs.getAvailableBlocks()) * ((long) statFs.getBlockSize()));
        } catch (Exception unused) {
            return a;
        }
    }

    public static String b(Context context) {
        try {
            StatFs statFs = new StatFs(Environment.getDataDirectory().getPath());
            return Formatter.formatFileSize(context, ((long) statFs.getBlockCount()) * ((long) statFs.getBlockSize()));
        } catch (Exception unused) {
            return a;
        }
    }

    public static String c(Context context) {
        long[] n = n(context);
        return n != null ? Formatter.formatFileSize(context, n[0]) : a;
    }

    private static long[] n(Context context) {
        Throwable th;
        BufferedReader bufferedReader;
        Exception e;
        BufferedReader bufferedReader2;
        try {
            bufferedReader = null;
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            bufferedReader2 = new BufferedReader(new InputStreamReader(new FileInputStream(new File("/proc/meminfo"))), 1024);
            String str = null;
            String str2 = null;
            while (true) {
                try {
                    String readLine = bufferedReader2.readLine();
                    if (readLine != null) {
                        if (readLine.startsWith("MemTotal")) {
                            str = readLine;
                        } else if (readLine.startsWith("MemFree")) {
                            str2 = readLine;
                        }
                        if (str != null && str2 != null) {
                            break;
                        }
                    } else {
                        break;
                    }
                } catch (Exception e2) {
                    e = e2;
                    if (g.a) {
                        Log.e(b, e.getLocalizedMessage(), e);
                    }
                    if (bufferedReader2 != null) {
                        try {
                            bufferedReader2.close();
                        } catch (IOException e3) {
                            if (g.a) {
                                Log.e(b, e3.getLocalizedMessage(), e3);
                            }
                        }
                    }
                    return null;
                }
            }
            ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
            ((ActivityManager) context.getSystemService("activity")).getMemoryInfo(memoryInfo);
            long[] jArr = {a(str), a(str2), memoryInfo.availMem};
            try {
                bufferedReader2.close();
            } catch (IOException e4) {
                if (g.a) {
                    Log.e(b, e4.getLocalizedMessage(), e4);
                }
            }
            return jArr;
        } catch (Exception e5) {
            e = e5;
            bufferedReader2 = null;
        } catch (Throwable th3) {
            th = th3;
            if (0 != 0) {
                try {
                    bufferedReader.close();
                } catch (IOException e6) {
                    if (g.a) {
                        Log.e(b, e6.getLocalizedMessage(), e6);
                    }
                }
            }
            throw th;
        }
    }

    private static long a(String str) {
        if (str == null) {
            return -1;
        }
        int indexOf = str.indexOf(58);
        if (indexOf != -1) {
            String trim = str.substring(indexOf + 1).trim();
            int lastIndexOf = trim.lastIndexOf(32);
            if (lastIndexOf != -1) {
                String substring = trim.substring(lastIndexOf + 1);
                try {
                    long parseLong = Long.parseLong(trim.substring(0, lastIndexOf).trim());
                    if ("kb".equalsIgnoreCase(substring)) {
                        return parseLong * 1024;
                    }
                    if ("mb".equalsIgnoreCase(substring)) {
                        return parseLong * 1048576;
                    }
                    if ("gb".equalsIgnoreCase(substring)) {
                        return parseLong * 1073741824;
                    }
                    if (!g.a) {
                        return parseLong;
                    }
                    Log.w(b, "Unexpected mem unit format: " + trim);
                    return parseLong;
                } catch (Exception e) {
                    if (!g.a) {
                        return -1;
                    }
                    Log.e(b, e.getLocalizedMessage(), e);
                    return -1;
                }
            } else if (!g.a) {
                return -1;
            } else {
                Log.e(b, "Unexpected mem value format: " + trim);
                return -1;
            }
        } else if (!g.a) {
            return -1;
        } else {
            Log.e(b, "Unexpected mem format: " + str);
            return -1;
        }
    }

    private static boolean m() {
        return Environment.getExternalStorageState().equals("mounted");
    }

    public static String b() {
        try {
            return new BufferedReader(new FileReader("/proc/cpuinfo")).readLine().split(":\\s+", 2)[1];
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return a;
        } catch (IOException e2) {
            e2.printStackTrace();
            return a;
        }
    }

    public static String d(Context context) {
        DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
        int i = displayMetrics.widthPixels;
        int i2 = displayMetrics.heightPixels;
        return i2 + "*" + i;
    }

    public static List<Sensor> e(Context context) {
        return ((SensorManager) context.getSystemService("sensor")).getSensorList(-1);
    }

    public static String f(Context context) {
        try {
            String networkCountryIso = ((TelephonyManager) context.getSystemService("phone")).getNetworkCountryIso();
            return TextUtils.isEmpty(networkCountryIso) ? "" : networkCountryIso;
        } catch (Exception unused) {
            return "";
        }
    }

    public static boolean c() {
        try {
            String[] strArr = {"/dev/socket/qemud", "/dev/qemu_pipe"};
            boolean z = false;
            for (int i = 0; i < 2; i++) {
                if (new File(strArr[i]).exists()) {
                    z = true;
                }
            }
            return z;
        } catch (Exception unused) {
            return false;
        }
    }

    public static boolean d() {
        File file = new File("/proc/tty/drivers");
        if (!file.exists() || !file.canRead()) {
            return false;
        }
        byte[] bArr = new byte[(int) file.length()];
        try {
            FileInputStream fileInputStream = new FileInputStream(file);
            fileInputStream.read(bArr);
            fileInputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e2) {
            e2.printStackTrace();
        }
        if (new String(bArr).indexOf("goldfish") != -1) {
            return true;
        }
        return false;
    }

    public static String e() {
        int i;
        FileReader fileReader;
        BufferedReader bufferedReader;
        Throwable th;
        BufferedReader bufferedReader2 = null;
        try {
            fileReader = new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq");
            try {
                bufferedReader = new BufferedReader(fileReader);
                try {
                    i = Integer.parseInt(bufferedReader.readLine().trim());
                    try {
                        fileReader.close();
                    } catch (IOException unused) {
                    }
                    try {
                        bufferedReader.close();
                    } catch (IOException unused2) {
                        return s.a((double) i) + "GHz";
                    }
                } catch (Exception unused3) {
                    bufferedReader2 = bufferedReader;
                    if (fileReader != null) {
                        try {
                            fileReader.close();
                        } catch (IOException unused4) {
                        }
                    }
                    if (bufferedReader2 != null) {
                        try {
                            bufferedReader2.close();
                        } catch (IOException unused5) {
                        }
                    }
                    i = 0;
                    return s.a((double) i) + "GHz";
                } catch (Throwable th2) {
                    th = th2;
                    if (fileReader != null) {
                        try {
                            fileReader.close();
                        } catch (IOException unused6) {
                        }
                    }
                    if (bufferedReader != null) {
                        try {
                            bufferedReader.close();
                        } catch (IOException unused7) {
                        }
                    }
                    throw th;
                }
            } catch (Exception unused8) {
            } catch (Throwable th3) {
                th = th3;
                bufferedReader = null;
            }
        } catch (Exception unused9) {
            fileReader = null;
        } catch (Throwable th4) {
            th = th4;
            bufferedReader = null;
            fileReader = null;
        }
    }

    public static String f() {
        FileReader fileReader;
        BufferedReader bufferedReader;
        Throwable th;
        BufferedReader bufferedReader2 = null;
        try {
            fileReader = new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq");
            try {
                bufferedReader = new BufferedReader(fileReader);
                try {
                    String readLine = bufferedReader.readLine();
                    int parseInt = readLine != null ? Integer.parseInt(readLine.trim()) : 0;
                    String str = s.a((double) parseInt) + "GHz";
                    try {
                        fileReader.close();
                    } catch (IOException unused) {
                    }
                    try {
                        bufferedReader.close();
                    } catch (IOException unused2) {
                    }
                    return str;
                } catch (Exception unused3) {
                    bufferedReader2 = bufferedReader;
                    if (fileReader != null) {
                        try {
                            fileReader.close();
                        } catch (IOException unused4) {
                        }
                    }
                    if (bufferedReader2 == null) {
                        return "";
                    }
                    try {
                        bufferedReader2.close();
                        return "";
                    } catch (IOException unused5) {
                        return "";
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (fileReader != null) {
                        try {
                            fileReader.close();
                        } catch (IOException unused6) {
                        }
                    }
                    if (bufferedReader != null) {
                        try {
                            bufferedReader.close();
                        } catch (IOException unused7) {
                        }
                    }
                    throw th;
                }
            } catch (Exception unused8) {
            } catch (Throwable th3) {
                th = th3;
                bufferedReader = null;
            }
        } catch (Exception unused9) {
            fileReader = null;
        } catch (Throwable th4) {
            th = th4;
            bufferedReader = null;
            fileReader = null;
        }
    }

    public static String g() {
        FileReader fileReader;
        BufferedReader bufferedReader;
        Throwable th;
        BufferedReader bufferedReader2 = null;
        try {
            fileReader = new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq");
            try {
                bufferedReader = new BufferedReader(fileReader);
            } catch (Exception unused) {
            } catch (Throwable th2) {
                th = th2;
                bufferedReader = null;
            }
        } catch (Exception unused2) {
            fileReader = null;
        } catch (Throwable th3) {
            th = th3;
            bufferedReader = null;
            fileReader = null;
        }
        try {
            int parseInt = Integer.parseInt(bufferedReader.readLine().trim());
            String str = s.a((double) parseInt) + "GHz";
            try {
                fileReader.close();
            } catch (IOException unused3) {
            }
            try {
                bufferedReader.close();
            } catch (IOException unused4) {
            }
            return str;
        } catch (Exception unused5) {
            bufferedReader2 = bufferedReader;
            if (fileReader != null) {
                try {
                    fileReader.close();
                } catch (IOException unused6) {
                }
            }
            if (bufferedReader2 == null) {
                return "";
            }
            try {
                bufferedReader2.close();
                return "";
            } catch (IOException unused7) {
                return "";
            }
        } catch (Throwable th4) {
            th = th4;
            if (fileReader != null) {
                try {
                    fileReader.close();
                } catch (IOException unused8) {
                }
            }
            if (bufferedReader != null) {
                try {
                    bufferedReader.close();
                } catch (IOException unused9) {
                }
            }
            throw th;
        }
    }

    public static int h() {
        try {
            return new File("/sys/devices/system/cpu/").listFiles(new n()).length;
        } catch (Exception unused) {
            return 1;
        }
    }

    public static String i() {
        try {
            StringBuffer stringBuffer = new StringBuffer();
            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
            while (networkInterfaces.hasMoreElements()) {
                Enumeration<InetAddress> inetAddresses = networkInterfaces.nextElement().getInetAddresses();
                while (inetAddresses.hasMoreElements()) {
                    InetAddress nextElement = inetAddresses.nextElement();
                    if (!nextElement.isLoopbackAddress()) {
                        String hostAddress = nextElement.getHostAddress();
                        if (!TextUtils.isEmpty(hostAddress)) {
                            if (nextElement instanceof Inet4Address) {
                                hostAddress = hostAddress + "%ipv4";
                            }
                            if (stringBuffer.length() == 0) {
                                stringBuffer.append(hostAddress);
                            } else {
                                stringBuffer.append(", ");
                                stringBuffer.append(hostAddress);
                            }
                        }
                    }
                }
            }
            String stringBuffer2 = stringBuffer.toString();
            return !TextUtils.isEmpty(stringBuffer2) ? stringBuffer2 : "";
        } catch (SocketException unused) {
            return "";
        }
    }

    public static boolean j() {
        try {
            if (!new File("/system/bin/su").exists() && !new File("/system/xbin/su").exists() && !new File("/su/bin/su").exists()) {
                if (!new File("/su/xbin/su").exists()) {
                    return false;
                }
            }
            return true;
        } catch (Exception unused) {
            return false;
        }
    }

    public static String k() {
        String n;
        try {
            String str = "";
            String a2 = b.a();
            if (a2 != null && !"".equals(a2) && a2.contains("-")) {
                String[] split = a2.split("-");
                if (split.length > 0) {
                    str = split[0];
                }
            }
            if ("1b41a7042ce724d9ecaa5a15fe9fab7a".equals(b.i()) || "ad6abe1c6328a29a383b682e3f881496".equals(b.i()) || !TextUtils.isEmpty(str) || (n = n()) == null || "".equals(n) || !n.contains("-")) {
                return str;
            }
            String[] split2 = n.split("-");
            return split2.length > 0 ? split2[0] : str;
        } catch (Exception unused) {
            return "";
        }
    }

    public static String l() {
        String n;
        try {
            String str = "";
            String a2 = b.a();
            if (a2 != null && !"".equals(a2) && a2.contains("-")) {
                String[] split = a2.split("-");
                if (split.length > 1) {
                    str = split[1];
                }
            }
            if ("1b41a7042ce724d9ecaa5a15fe9fab7a".equals(b.i()) || "ad6abe1c6328a29a383b682e3f881496".equals(b.i()) || !TextUtils.isEmpty(str) || (n = n()) == null || "".equals(n) || !n.contains("-")) {
                return str;
            }
            String[] split2 = n.split("-");
            return split2.length > 1 ? split2[1] : str;
        } catch (Exception unused) {
            return "";
        }
    }

    private static String n() {
        return UUID.readDeviceUUIDBySync(new Request.Builder().setContext(b.a).setLogEnabled(false).setWifiMacReadable(true).setImeiReadable(true).setFileCacheEnabled(false).build());
    }

    public static String g(Context context) {
        try {
            if (!d.d || !l.a(context)) {
                return "";
            }
            String subscriberId = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId();
            return TextUtils.isEmpty(subscriberId) ? "" : subscriberId;
        } catch (Exception unused) {
            return "";
        }
    }

    public static String h(Context context) {
        try {
            if (!d.d || !l.a(context)) {
                return "";
            }
            String simSerialNumber = ((TelephonyManager) context.getSystemService("phone")).getSimSerialNumber();
            return TextUtils.isEmpty(simSerialNumber) ? "" : simSerialNumber;
        } catch (Exception unused) {
            return "";
        }
    }

    public static String i(Context context) {
        try {
            if (!d.d || !l.a(context)) {
                return "";
            }
            String line1Number = ((TelephonyManager) context.getSystemService("phone")).getLine1Number();
            return TextUtils.isEmpty(line1Number) ? "" : line1Number;
        } catch (Exception unused) {
            return "";
        }
    }

    public static String j(Context context) {
        String subscriberId;
        try {
            if (!d.d || !l.a(context) || (subscriberId = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId()) == null) {
                return "";
            }
            if (subscriberId.startsWith("46000") || subscriberId.startsWith("46002") || subscriberId.startsWith("46001") || subscriberId.startsWith("46003")) {
                return subscriberId.substring(0, 3);
            }
            return "";
        } catch (Exception unused) {
            return "";
        }
    }

    public static String k(Context context) {
        String subscriberId;
        try {
            if (!d.d || !l.a(context) || (subscriberId = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId()) == null) {
                return "";
            }
            if (subscriberId.startsWith("46000") || subscriberId.startsWith("46002") || subscriberId.startsWith("46001") || subscriberId.startsWith("46003")) {
                return subscriberId.substring(3, 5);
            }
            return "";
        } catch (Exception unused) {
            return "";
        }
    }

    public static void l(Context context) {
        if (d.k) {
            try {
                if (Build.VERSION.SDK_INT < 17) {
                    c = new WebView(context).getSettings().getUserAgentString();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static String m(Context context) {
        if (!d.k) {
            return "";
        }
        try {
            if (Build.VERSION.SDK_INT >= 17) {
                c = WebSettings.getDefaultUserAgent(context);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return c;
    }

    public static String a() {
        if (!Environment.getExternalStorageState().equals("mounted")) {
            return a;
        }
        try {
            File file = new File("/sys/class/mmc_host/mmc1");
            if (!file.exists()) {
                return a;
            }
            String str = null;
            File[] listFiles = file.listFiles();
            int i = 0;
            while (true) {
                if (i >= listFiles.length) {
                    break;
                } else if (listFiles[i].toString().contains("mmc1:")) {
                    str = listFiles[i].toString();
                    listFiles[i].toString().subSequence(str.length() - 4, str.length());
                    break;
                } else {
                    i++;
                }
            }
            return new BufferedReader(new FileReader(str + "/cid")).readLine();
        } catch (Exception unused) {
            return a;
        }
    }
}
