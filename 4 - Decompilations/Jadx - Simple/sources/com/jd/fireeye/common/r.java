package com.jd.fireeye.common;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import com.jd.fireeye.security.b;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.UUID;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class r {
    private static final String a = "JDMob.Security.UniqueId";
    private static final String b = "cpa_ududud_new";
    private static final String c = "device_installtion_id";
    private static final String d = "02:00:00:00:00:00";
    private static final boolean e = false;
    private static volatile String f;
    private static String g;

    private static boolean a() {
        if (TextUtils.isEmpty(f)) {
            a(b.a);
        }
        String f2 = f(b.a);
        boolean equals = TextUtils.equals(f, f2);
        g.b(a, "cachedUniqueIdInSDK = " + f + ", getUniqueIdRealTimeInSDK = " + f2 + ", isSame = " + equals);
        if (!equals) {
            f = f2;
            if (s.a(f2)) {
                q.a(b, Base64.encodeToString(f2.getBytes(), 2));
            }
        }
        return equals;
    }

    public static String a(Context context) {
        String e2 = e(context);
        return e2 == null ? "" : e2;
    }

    private static String e(Context context) {
        if (!TextUtils.isEmpty(f)) {
            return f;
        }
        String b2 = q.b(b, "");
        if (!TextUtils.isEmpty(b2)) {
            String str = new String(Base64.decode(b2.getBytes(), 2));
            if (s.b(str)) {
                f = str;
                return str;
            }
        }
        String f2 = f(context);
        if (s.b(f2)) {
            f = f2;
            try {
                if (s.a(f2)) {
                    q.a(b, Base64.encodeToString(f2.getBytes(), 2));
                }
            } catch (Exception unused) {
            }
        }
        g.b(a, "init cachedUniqueIdInSDK = " + f2 + ",cachedUniqueIdInSDK = " + f);
        return f2;
    }

    private static String f(Context context) {
        StringBuilder sb = new StringBuilder();
        sb.append(m.k());
        sb.append("-");
        String h = h(context);
        if (!TextUtils.isEmpty(h)) {
            sb.append(h.replace(":", ""));
        }
        sb.append("-");
        sb.append(c(context));
        return sb.toString();
    }

    public static String b(Context context) {
        if (!TextUtils.isEmpty(g) && g.length() > 2) {
            return g;
        }
        StringBuilder sb = new StringBuilder();
        sb.append(m.k());
        sb.append("-");
        String h = h(context);
        if (!TextUtils.isEmpty(h)) {
            sb.append(h.replace(":", ""));
        }
        String sb2 = sb.toString();
        g = sb2;
        return sb2;
    }

    private static String g(Context context) {
        String string = q.a(context).getString(c, "");
        if (!TextUtils.isEmpty(string)) {
            Log.i(a, "UniqueId.cached = " + string);
            return string;
        }
        String uuid = UUID.randomUUID().toString();
        g.b(a, "UniqueId.randomUUID = " + uuid);
        q.a(c, uuid);
        return uuid;
    }

    public static String c(Context context) {
        try {
            return Settings.Secure.getString(context.getContentResolver(), "android_id");
        } catch (Exception unused) {
            return "";
        }
    }

    private static String h(Context context) {
        try {
            if (context != null) {
                if (Build.VERSION.SDK_INT < 23) {
                    String macAddress = ((WifiManager) context.getSystemService("wifi")).getConnectionInfo().getMacAddress();
                    if (!TextUtils.equals(d, macAddress)) {
                        g.b(a, "mac below 23 = " + macAddress);
                        return macAddress;
                    }
                }
                String c2 = c();
                g.b(a, "get mac from NI = " + c2);
                return c2;
            } else if (!g.a) {
                return "";
            } else {
                g.b(a, "get mac in sdk,context is null");
                return "";
            }
        } catch (Exception e2) {
            e2.printStackTrace();
            return "";
        }
    }

    private static String b() {
        String c2 = c();
        g.b(a, "get mac from NI = " + c2);
        return c2;
    }

    private static String c() {
        try {
            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {
                if (networkInterface.getName().equalsIgnoreCase("wlan0")) {
                    byte[] hardwareAddress = networkInterface.getHardwareAddress();
                    if (hardwareAddress == null) {
                        return "";
                    }
                    StringBuilder sb = new StringBuilder();
                    int length = hardwareAddress.length;
                    for (int i = 0; i < length; i++) {
                        sb.append(String.format("%02x:", Byte.valueOf(hardwareAddress[i])));
                    }
                    if (sb.length() > 0) {
                        sb.deleteCharAt(sb.length() - 1);
                    }
                    return sb.toString();
                }
            }
            return "";
        } catch (Exception unused) {
            return "";
        }
    }

    private static String d() {
        String str = "";
        try {
            LineNumberReader lineNumberReader = new LineNumberReader(new InputStreamReader(Runtime.getRuntime().exec("cat /sys/class/net/wlan0/address ").getInputStream()));
            while (str != null) {
                str = lineNumberReader.readLine();
                if (str != null) {
                    return str.trim();
                }
            }
            return "";
        } catch (IOException e2) {
            e2.printStackTrace();
            return "";
        }
    }

    public static String d(Context context) {
        boolean z = false;
        if (context != null) {
            try {
                if (!s.b()) {
                    z = true;
                } else if (context.getPackageManager().checkPermission("android.permission.BLUETOOTH", context.getPackageName()) == 0) {
                    z = true;
                }
            } catch (Exception unused) {
                return "";
            }
        }
        if (!z) {
            return "";
        }
        BluetoothAdapter defaultAdapter = BluetoothAdapter.getDefaultAdapter();
        String str = "";
        if (defaultAdapter != null) {
            str = defaultAdapter.getAddress();
        }
        if (TextUtils.isEmpty(str) || TextUtils.equals(d, str)) {
            str = Settings.Secure.getString(context.getContentResolver(), "bluetooth_address");
        }
        return TextUtils.isEmpty(str) ? "" : str;
    }
}
