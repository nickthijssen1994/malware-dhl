package com.jd.sentry.performance.block.a;

import com.jd.sentry.Sentry;
import com.jd.sentry.performance.block.b.b;
import com.jd.sentry.util.Log;
import java.util.concurrent.atomic.AtomicBoolean;

/* loaded from: classes.dex */
public abstract class a {
    protected long b;
    protected AtomicBoolean a = new AtomicBoolean(false);
    private Runnable c = new Runnable() { // from class: com.jd.sentry.performance.block.a.a.1
        @Override // java.lang.Runnable
        public void run() {
            if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                Log.d("block", "mRunnable start doSample ====> " + getClass().getSimpleName());
            }
            a.this.d();
            if (a.this.a.get()) {
                b.a().postDelayed(a.this.c, a.this.c());
            }
        }
    };

    public a(long j) {
        this.b = j;
    }

    public void a() {
        if (!this.a.get()) {
            this.a.set(true);
            b.a().removeCallbacks(this.c);
            b.a().postDelayed(this.c, (long) Sentry.getSentryConfig().getBlockContext().e());
        }
    }

    public void b() {
        if (this.a.get()) {
            this.a.set(false);
            b.a().removeCallbacks(this.c);
        }
    }

    abstract long c();

    abstract void d();
}
