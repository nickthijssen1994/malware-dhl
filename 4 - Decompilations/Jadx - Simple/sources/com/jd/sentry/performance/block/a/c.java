package com.jd.sentry.performance.block.a;

import com.jd.sentry.Sentry;
import com.jd.sentry.performance.block.c.d;
import com.jd.sentry.performance.block.c.e;
import com.jd.sentry.performance.block.e.a;
import com.jd.sentry.util.Log;
import java.util.ArrayList;
import java.util.LinkedHashMap;

/* loaded from: classes.dex */
public class c extends a {
    private static final LinkedHashMap<Long, d> c = new LinkedHashMap<>();
    private int d;
    private Thread e;

    public c(Thread thread, int i, long j) {
        super(j);
        this.d = 40;
        this.e = thread;
        this.d = i;
    }

    public c(Thread thread, long j) {
        this(thread, 40, j);
    }

    public ArrayList<e> a(long j, long j2, String str) {
        ArrayList<e> arrayList = new ArrayList<>();
        synchronized (c) {
            String str2 = "";
            String str3 = "";
            for (Long l : c.keySet()) {
                if (j < l.longValue() && l.longValue() < j2) {
                    if (!c.get(l).d.equals(str2) || !c.get(l).e.equals(str3)) {
                        e eVar = new e();
                        eVar.a = str;
                        eVar.e = l.longValue();
                        eVar.g = c.get(l).d;
                        eVar.h = c.get(l).e;
                        eVar.f = c.get(l).a();
                        if (c.get(l).c != null && c.get(l).c.length > 1) {
                            eVar.i = eVar.g;
                            StackTraceElement[] stackTraceElementArr = c.get(l).c;
                            int length = stackTraceElementArr.length;
                            int i = 0;
                            while (true) {
                                if (i >= length) {
                                    break;
                                }
                                StackTraceElement stackTraceElement = stackTraceElementArr[i];
                                if (a.a().a(stackTraceElement.toString())) {
                                    eVar.i = stackTraceElement.toString();
                                    break;
                                }
                                i++;
                            }
                        }
                        arrayList.add(eVar);
                        str2 = eVar.g;
                        str3 = eVar.h;
                    } else {
                        arrayList.get(arrayList.size() - 1).j++;
                        arrayList.get(arrayList.size() - 1).k = true;
                    }
                }
            }
        }
        return arrayList;
    }

    @Override // com.jd.sentry.performance.block.a.a
    long c() {
        return (long) Sentry.getSentryConfig().getBlockContext().c();
    }

    @Override // com.jd.sentry.performance.block.a.a
    protected void d() {
        d remove;
        if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
            Log.d("block", "StackSampler doSample");
        }
        try {
            d b = d.b();
            StackTraceElement[] stackTrace = this.e.getStackTrace();
            synchronized (c) {
                if (c.size() == this.d && this.d > 0 && (remove = c.remove(c.keySet().iterator().next())) != null) {
                    remove.c();
                }
                if (stackTrace.length > 2) {
                    b.c = stackTrace;
                    b.d = stackTrace[0].toString();
                    b.e = stackTrace[1].toString();
                    c.put(Long.valueOf(System.currentTimeMillis()), b);
                }
            }
        } catch (Exception e) {
            Log.e(e.getMessage());
        }
    }
}
