package com.jd.sentry.performance.block.d;

import com.jd.sentry.Sentry;
import com.jd.sentry.util.Log;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/* loaded from: classes.dex */
public class a {
    final C0041a a;
    private b b;
    private ArrayDeque<com.jd.sentry.performance.block.c.a> c;
    private Thread d;
    private boolean e;
    private volatile boolean f;
    private final Runnable g;

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: com.jd.sentry.performance.block.d.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public static class C0041a {
        int a;

        C0041a() {
        }

        public void a() {
            this.a++;
        }

        public void b() {
            this.a = 0;
        }
    }

    public a() {
        this(new b(5, 30000));
    }

    public a(b bVar) {
        this.g = new Runnable() { // from class: com.jd.sentry.performance.block.d.a.1
            @Override // java.lang.Runnable
            public void run() {
                if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                    Log.d("block", "BlockCacheMemory submitRunnable run....");
                }
                while (true) {
                    if (a.this.f) {
                        synchronized (a.this) {
                            try {
                                a.this.wait();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    if (a.this.b.b <= 0) {
                        break;
                    }
                    long j = a.this.b.b;
                    synchronized (a.this) {
                        try {
                            a.this.wait(j);
                        } catch (InterruptedException unused) {
                        }
                    }
                    try {
                        a.this.c();
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                    Log.d("block", "BlockCacheMemory mPoolParams.delayTimeDataSubmitToDisk must > 0L");
                }
            }
        };
        this.b = bVar;
        this.c = new ArrayDeque<>();
        this.a = new C0041a();
        this.d = new Thread(this.g, "BlockCacheMemoryPool");
        this.d.setDaemon(false);
        this.d.setPriority(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void c() {
        if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
            Log.d("block", "BlockCacheMemory submitDataDisk....");
        }
        synchronized (this) {
            if (this.c == null || this.c.size() != 0) {
                ArrayList arrayList = new ArrayList();
                int size = this.c.size();
                for (int i = 0; i < size; i++) {
                    com.jd.sentry.performance.block.c.a remove = this.c.remove();
                    if (remove != null) {
                        arrayList.addAll(remove.a());
                        remove.b();
                    }
                }
                this.a.b();
                com.jd.sentry.strategy.a blockDetectStratety = Sentry.getSentryConfig().getBlockDetectStratety();
                if (blockDetectStratety != null) {
                    if (Sentry.isDebug() && Sentry.getSentryConfig().isEnableBlockDetect() && Log.LOGSWITCH) {
                        Iterator it = arrayList.iterator();
                        while (it.hasNext()) {
                            HashMap hashMap = (HashMap) it.next();
                            StringBuffer stringBuffer = new StringBuffer();
                            for (Object obj : hashMap.keySet()) {
                                Object obj2 = hashMap.get(obj);
                                stringBuffer.append(obj.toString() + " " + obj2.toString() + " ");
                            }
                            if (Log.LOGSWITCH && Log.LOGSWICTH_BLOCK) {
                                Log.d("BlockCacheMemoryPool", "testStr is " + ((Object) stringBuffer));
                            }
                        }
                    }
                    blockDetectStratety.a(arrayList);
                }
            }
        }
    }

    public void a() {
        synchronized (this) {
            if (this.f) {
                notify();
            } else if (!this.e) {
                this.d.start();
                this.e = true;
            }
            this.f = false;
        }
    }

    public void a(com.jd.sentry.performance.block.c.a aVar) {
        synchronized (this) {
            this.c.offer(aVar);
            this.a.a();
        }
        if (this.a.a >= this.b.a) {
            try {
                c();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void b() {
        if (this.e) {
            this.f = true;
        }
    }
}
