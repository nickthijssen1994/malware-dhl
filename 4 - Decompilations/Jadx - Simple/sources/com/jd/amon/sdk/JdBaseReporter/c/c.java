package com.jd.amon.sdk.JdBaseReporter.c;

import com.jd.amon.sdk.JdBaseReporter.d.b;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.zip.GZIPInputStream;
import javax.net.ssl.HttpsURLConnection;

/* loaded from: classes.dex */
public abstract class c {
    protected static final String b = "com.jd.amon.sdk.JdBaseReporter.c.c";
    b a;
    protected URL c;
    protected int d;
    protected int e;
    protected int f;
    protected String h;
    protected String i;
    protected byte[] m;
    protected int g = 2;
    protected boolean l = false;
    protected String n = "utf-8";
    protected String o = "utf-8";
    protected boolean p = true;
    protected long q = 0;
    protected long r = 0;
    protected HashMap<String, String> j = new HashMap<>();
    protected HashMap<String, String> k = new HashMap<>();

    public c() {
    }

    public c(int i, int i2, int i3, String str, String str2, boolean z) {
        a(i, i2, i3, str, str2, z);
    }

    public void a() {
        this.a.a();
    }

    public void a(int i, int i2, int i3, String str, String str2, boolean z) {
        this.e = i;
        this.f = i2;
        this.g = i3;
        this.n = str;
        this.o = str2;
        this.p = z;
    }

    public void a(b bVar) {
        this.a = bVar;
    }

    public void a(String str) {
        this.i = str;
    }

    public void a(String str, String str2) {
        this.j.put(str, str2);
    }

    protected void a(HttpURLConnection httpURLConnection) {
        httpURLConnection.getLastModified();
        Map<String, List<String>> headerFields = httpURLConnection.getHeaderFields();
        if (headerFields != null) {
            for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {
                int i = 0;
                String str = "";
                for (String str2 : entry.getValue()) {
                    if (i > 0) {
                        str = str + "<--->";
                    }
                    str = str + str2;
                    i++;
                }
                this.k.put(String.valueOf(entry.getKey()).toLowerCase(Locale.getDefault()), str);
            }
        }
    }

    protected void a(HttpURLConnection httpURLConnection, ByteArrayOutputStream byteArrayOutputStream) {
        String str;
        a(httpURLConnection);
        byte[] byteArray = byteArrayOutputStream.toByteArray();
        if (byteArray == null || byteArray.length == 0) {
            this.m = null;
            return;
        }
        HashMap<String, String> c = c();
        if (!(c == null || (str = c.get("content-encoding")) == null || !str.contains("gzip"))) {
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
            ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream(1024);
            GZIPInputStream gZIPInputStream = new GZIPInputStream(byteArrayInputStream);
            byte[] bArr = new byte[1024];
            while (true) {
                int read = gZIPInputStream.read(bArr, 0, 1024);
                if (read == -1) {
                    break;
                }
                byteArrayOutputStream2.write(bArr, 0, read);
            }
            gZIPInputStream.close();
            byteArray = byteArrayOutputStream2.toByteArray();
        }
        this.m = byteArray;
    }

    public String b() {
        return this.i;
    }

    public void b(String str) {
        this.h = str;
    }

    public HashMap<String, String> c() {
        return this.k;
    }

    public HashMap<String, String> d() {
        return this.j;
    }

    public byte[] e() {
        return this.m;
    }

    public HttpsURLConnection f() {
        if (!"".equals(this.h)) {
            this.c = new URL(this.h);
            URL url = this.c;
            if (url != null) {
                HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();
                if (httpsURLConnection != null) {
                    return httpsURLConnection;
                }
                throw new IOException(b + "|getConnect|mConn is empty");
            }
            throw new IOException(b + "|getConnect|mUrl is empty");
        }
        throw new IOException(b + "|getConnect|mStrUrl is empty");
    }
}
