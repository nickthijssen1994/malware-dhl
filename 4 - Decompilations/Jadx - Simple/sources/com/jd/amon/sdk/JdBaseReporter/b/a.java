package com.jd.amon.sdk.JdBaseReporter.b;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.huawei.hms.support.api.push.pushselfshow.utils.PushSelfShowConstant;
import com.jd.amon.sdk.JdBaseReporter.f.e;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

/* loaded from: classes.dex */
public class a {
    protected String a;
    protected Context b;
    private long c;

    public a(Context context, String str) {
        this.b = context;
        this.a = str;
    }

    private boolean a(long j) {
        return 100000 <= j;
    }

    private SQLiteDatabase f() {
        return b.a(this.b).getReadableDatabase();
    }

    private SQLiteDatabase g() {
        return b.a(this.b).getWritableDatabase();
    }

    /* JADX WARN: Code restructure failed: missing block: B:17:0x0079, code lost:
        if (r11.isClosed() == false) goto L_0x007b;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public int a(long r20, long r22) {
        /*
        // Method dump skipped, instructions count: 303
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.amon.sdk.JdBaseReporter.b.a.a(long, long):int");
    }

    /* JADX WARN: Code restructure failed: missing block: B:16:0x0093, code lost:
        if (r0 == false) goto L_0x00cf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x00b1, code lost:
        if (r0 == false) goto L_0x00cf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:27:0x00cd, code lost:
        if (r0 == false) goto L_0x00cf;
     */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x00cf, code lost:
        r4.close();
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v21 */
    /* JADX WARN: Type inference failed for: r0v22 */
    /* JADX WARN: Type inference failed for: r4v0, types: [long] */
    /* JADX WARN: Type inference failed for: r4v1, types: [android.database.Cursor] */
    /* JADX WARN: Type inference failed for: r4v5, types: [android.database.Cursor] */
    /* JADX WARN: Type inference failed for: r4v7, types: [android.database.Cursor] */
    /* JADX WARN: Type inference failed for: r4v8 */
    /* JADX WARN: Type inference failed for: r4v9 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public java.util.ArrayList<com.jd.amon.sdk.JdBaseReporter.e.d> a(java.lang.Long r18) {
        /*
        // Method dump skipped, instructions count: 256
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.amon.sdk.JdBaseReporter.b.a.a(java.lang.Long):java.util.ArrayList");
    }

    public void a() {
    }

    public void a(SQLiteDatabase sQLiteDatabase) {
        sQLiteDatabase.execSQL("CREATE TABLE " + this.a + " (id INTEGER PRIMARY KEY, time TEXT, data TEXT, reserve TEXT);");
        StringBuilder sb = new StringBuilder();
        sb.append("create index if not exists timeindex on ");
        sb.append(this.a);
        sb.append("(");
        sb.append("time");
        sb.append(")");
        sQLiteDatabase.execSQL(sb.toString());
    }

    public void a(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        sQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + this.a);
        a(sQLiteDatabase);
    }

    public void a(List<String> list) {
        if (!a(d()) && list != null && list.size() > 0) {
            try {
                SQLiteDatabase g = g();
                SQLiteStatement compileStatement = g.compileStatement("insert into " + this.a + "(time,data,reserve)values(?,?,?)");
                g.beginTransaction();
                int i = 0;
                for (String str : list) {
                    compileStatement.bindString(1, String.valueOf(System.currentTimeMillis()));
                    compileStatement.bindString(2, str);
                    compileStatement.bindString(3, PushSelfShowConstant.ACTION_APP_OUT_OF_DATE_EVENT_ID);
                    if (compileStatement.executeInsert() != -1) {
                        i++;
                    }
                }
                g.setTransactionSuccessful();
                g.endTransaction();
                this.c += (long) i;
                e.a("批量插入数据成功,总量:" + list.size() + "成功量:" + i);
            } catch (Exception e) {
                e.d("批量插入数据失败");
                e.printStackTrace();
                com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "put", e);
            }
        }
    }

    public void a(List<HashMap<String, String>> list, String str) {
        if (!a(d()) && list != null && list.size() > 0) {
            try {
                SQLiteDatabase g = g();
                SQLiteStatement compileStatement = g.compileStatement("insert into " + this.a + "(time,data,reserve)values(?,?,?)");
                g.beginTransaction();
                int i = 0;
                for (HashMap<String, String> hashMap : list) {
                    compileStatement.bindString(1, String.valueOf(System.currentTimeMillis()));
                    compileStatement.bindString(2, com.jd.amon.sdk.JdBaseReporter.a.a.a(hashMap));
                    compileStatement.bindString(3, str);
                    if (compileStatement.executeInsert() != -1) {
                        i++;
                    }
                }
                g.setTransactionSuccessful();
                g.endTransaction();
                this.c += (long) i;
                e.a("批量插入数据成功,总量:" + list.size() + "成功量:" + i);
            } catch (Exception e) {
                e.d("批量插入数据失败");
                e.printStackTrace();
                com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "putHashMap", e);
            }
        }
    }

    public String b() {
        return this.a;
    }

    /* JADX WARN: Code restructure failed: missing block: B:13:0x005d, code lost:
        if (r1.isClosed() == false) goto L_0x003e;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public long c() {
        /*
            r13 = this;
            r0 = 1
            r1 = 0
            r2 = 0
            java.lang.String[] r6 = new java.lang.String[r0]     // Catch: Exception -> 0x0044, all -> 0x0042
            java.lang.String r0 = "count(*)"
            r12 = 0
            r6[r12] = r0     // Catch: Exception -> 0x0044, all -> 0x0042
            android.database.sqlite.SQLiteDatabase r4 = r13.f()     // Catch: Exception -> 0x0044, all -> 0x0042
            java.lang.String r5 = r13.a     // Catch: Exception -> 0x0044, all -> 0x0042
            r7 = 0
            r8 = 0
            r9 = 0
            r10 = 0
            r11 = 0
            android.database.Cursor r1 = r4.query(r5, r6, r7, r8, r9, r10, r11)     // Catch: Exception -> 0x0044, all -> 0x0042
            r1.moveToFirst()     // Catch: Exception -> 0x0044, all -> 0x0042
            int r0 = r1.getInt(r12)     // Catch: Exception -> 0x0044, all -> 0x0042
            long r2 = (long) r0     // Catch: Exception -> 0x0044, all -> 0x0042
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch: Exception -> 0x0044, all -> 0x0042
            r0.<init>()     // Catch: Exception -> 0x0044, all -> 0x0042
            java.lang.String r4 = "数据库数据量实时查询 结果为："
            r0.append(r4)     // Catch: Exception -> 0x0044, all -> 0x0042
            r0.append(r2)     // Catch: Exception -> 0x0044, all -> 0x0042
            java.lang.String r0 = r0.toString()     // Catch: Exception -> 0x0044, all -> 0x0042
            com.jd.amon.sdk.JdBaseReporter.f.e.a(r0)     // Catch: Exception -> 0x0044, all -> 0x0042
            if (r1 == 0) goto L_0x0060
            boolean r0 = r1.isClosed()
            if (r0 != 0) goto L_0x0060
        L_0x003e:
            r1.close()
            goto L_0x0060
        L_0x0042:
            r0 = move-exception
            goto L_0x0061
        L_0x0044:
            r0 = move-exception
            r0.printStackTrace()     // Catch: all -> 0x0042
            com.jd.amon.sdk.JdBaseReporter.a r4 = com.jd.amon.sdk.JdBaseReporter.a.a()     // Catch: all -> 0x0042
            com.jd.amon.sdk.JdBaseReporter.d.a r4 = r4.c()     // Catch: all -> 0x0042
            java.lang.String r5 = "BaseTable"
            java.lang.String r6 = "querySize"
            r4.a(r5, r6, r0)     // Catch: all -> 0x0042
            if (r1 == 0) goto L_0x0060
            boolean r0 = r1.isClosed()
            if (r0 != 0) goto L_0x0060
            goto L_0x003e
        L_0x0060:
            return r2
        L_0x0061:
            if (r1 == 0) goto L_0x006c
            boolean r2 = r1.isClosed()
            if (r2 != 0) goto L_0x006c
            r1.close()
        L_0x006c:
            throw r0
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.amon.sdk.JdBaseReporter.b.a.c():long");
    }

    public long d() {
        if (this.c <= 0) {
            this.c = c();
        }
        return this.c;
    }

    public void e() {
        if (d() > 0) {
            Calendar instance = Calendar.getInstance();
            instance.set(instance.get(1), instance.get(2), instance.get(5), 0, 0, 0);
            long timeInMillis = instance.getTimeInMillis();
            if (e.a) {
                e.a("BaseTable", this.a + " ---> before clean obsolete size is " + this.c);
            }
            String str = "DELETE FROM " + this.a + " WHERE CAST(time AS LONG) < " + timeInMillis;
            try {
                try {
                    g().beginTransaction();
                    g().execSQL(str);
                    g().setTransactionSuccessful();
                } catch (Exception e) {
                    e.printStackTrace();
                    com.jd.amon.sdk.JdBaseReporter.a.a().c().a("BaseTable", "removeObsoleteData", e);
                }
                this.c = c();
                if (e.a) {
                    e.a("BaseTable", this.a + " ---> after clean obsolete size is " + this.c);
                }
            } finally {
                g().endTransaction();
            }
        } else if (e.a) {
            e.a("BaseTable", this.a + " --->  mCurrentSize <= 0 return ");
        }
    }
}
