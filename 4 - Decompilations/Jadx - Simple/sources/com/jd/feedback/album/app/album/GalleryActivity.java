package com.jd.feedback.album.app.album;

import android.content.res.Resources;
import android.os.Bundle;
import androidx.annotation.Nullable;
import com.jd.feedback.R;
import com.jd.feedback.album.app.a;
import com.jd.feedback.album.d;
import com.jd.feedback.album.mvp.BaseActivity;
import java.util.ArrayList;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class GalleryActivity extends BaseActivity implements a.c {
    public static ArrayList<d> a;
    public static int b;
    public static int c;
    public static a d;
    static final /* synthetic */ boolean e = !GalleryActivity.class.desiredAssertionStatus();
    private com.jd.feedback.album.a.c.a f;
    private int j;
    private int k;
    private a.d<d> l;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface a {
        void b(d dVar);

        void e();
    }

    @Override // com.jd.feedback.album.app.a.c
    public final void a() {
    }

    @Override // com.jd.feedback.album.app.a.c
    public final void b() {
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // com.jd.feedback.album.mvp.BaseActivity
    public void onCreate(@Nullable Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.album_activity_gallery);
        this.l = new com.jd.feedback.album.app.gallery.a(this, this);
        Bundle extras = getIntent().getExtras();
        if (e || extras != null) {
            this.f = (com.jd.feedback.album.a.c.a) extras.getParcelable("KEY_INPUT_WIDGET");
            this.j = extras.getInt("KEY_INPUT_FUNCTION");
            this.k = extras.getInt("KEY_INPUT_LIMIT_COUNT");
            this.l.a(this.f, true);
            this.l.a(a);
            int i = c;
            if (i == 0) {
                a(i);
            } else {
                this.l.a(i);
            }
            e();
            return;
        }
        throw new AssertionError();
    }

    private void e() {
        String string = getString(R.string.album_menu_finish);
        this.l.b(string + "(" + b + " / " + this.k + ")");
    }

    @Override // com.jd.feedback.album.app.a.c
    public final void a(int i) {
        c = i;
        a.d<d> dVar = this.l;
        dVar.c((c + 1) + " / " + a.size());
        d dVar2 = a.get(i);
        this.l.b(dVar2.l);
        this.l.d(dVar2.m);
        if (dVar2.k == 2) {
            this.l.a(com.jd.feedback.album.c.a.a(dVar2.i));
            this.l.a(true);
            return;
        }
        this.l.a(false);
    }

    @Override // com.jd.feedback.album.app.a.c
    public final void c() {
        int i;
        d dVar = a.get(c);
        if (dVar.l) {
            dVar.l = false;
            d.b(dVar);
            b--;
        } else if (b >= this.k) {
            switch (this.j) {
                case 0:
                    i = R.plurals.album_check_image_limit;
                    break;
                case 1:
                    i = R.plurals.album_check_video_limit;
                    break;
                case 2:
                    i = R.plurals.album_check_album_limit;
                    break;
                default:
                    throw new AssertionError("This should not be the case.");
            }
            a.d<d> dVar2 = this.l;
            Resources resources = getResources();
            int i2 = this.k;
            dVar2.a((CharSequence) resources.getQuantityString(i, i2, Integer.valueOf(i2)));
            this.l.b(false);
        } else {
            dVar.l = true;
            d.b(dVar);
            b++;
        }
        e();
    }

    @Override // com.jd.feedback.album.app.a.c
    public final void d() {
        int i;
        if (b == 0) {
            switch (this.j) {
                case 0:
                    i = R.string.album_check_image_little;
                    break;
                case 1:
                    i = R.string.album_check_video_little;
                    break;
                case 2:
                    i = R.string.album_check_album_little;
                    break;
                default:
                    throw new AssertionError("This should not be the case.");
            }
            this.l.h(i);
            return;
        }
        d.e();
        finish();
    }

    public void onBackPressed() {
        finish();
    }

    public void finish() {
        a = null;
        b = 0;
        c = 0;
        d = null;
        super.finish();
    }
}
