package com.jd.feedback.album.app.album.a;

import android.os.AsyncTask;
import com.jd.feedback.R;
import com.jd.feedback.album.d;
import com.jd.feedback.album.e;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class a extends AsyncTask<Void, Void, b> {
    private int a;
    private List<d> b;
    private b c;
    private AbstractC0021a d;

    /* compiled from: TbsSdkJava */
    /* renamed from: com.jd.feedback.album.app.album.a.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public interface AbstractC0021a {
        void a(ArrayList<e> arrayList, ArrayList<d> arrayList2);
    }

    @Override // android.os.AsyncTask
    protected final /* synthetic */ void onPostExecute(b bVar) {
        b bVar2 = bVar;
        this.d.a(bVar2.a, bVar2.b);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    static class b {
        ArrayList<e> a;
        ArrayList<d> b;

        b() {
        }
    }

    public a(int i, List<d> list, b bVar, AbstractC0021a aVar) {
        this.a = i;
        this.b = list;
        this.c = bVar;
        this.d = aVar;
    }

    @Override // android.os.AsyncTask
    protected final /* synthetic */ b doInBackground(Void[] voidArr) {
        ArrayList<e> arrayList;
        switch (this.a) {
            case 0:
                b bVar = this.c;
                HashMap hashMap = new HashMap();
                e eVar = new e();
                eVar.c = true;
                eVar.a = bVar.a.getString(R.string.album_all_images);
                bVar.a(hashMap, eVar);
                arrayList = new ArrayList<>();
                Collections.sort(eVar.b);
                arrayList.add(eVar);
                for (Map.Entry<String, e> entry : hashMap.entrySet()) {
                    e value = entry.getValue();
                    Collections.sort(value.b);
                    arrayList.add(value);
                }
                break;
            case 1:
                arrayList = this.c.a();
                break;
            case 2:
                arrayList = this.c.b();
                break;
            default:
                throw new AssertionError("This should not be the case.");
        }
        ArrayList<d> arrayList2 = new ArrayList<>();
        List<d> list = this.b;
        if (list != null && !list.isEmpty()) {
            ArrayList<d> arrayList3 = arrayList.get(0).b;
            for (d dVar : this.b) {
                for (int i = 0; i < arrayList3.size(); i++) {
                    d dVar2 = arrayList3.get(i);
                    if (dVar.equals(dVar2)) {
                        dVar2.l = true;
                        arrayList2.add(dVar2);
                    }
                }
            }
        }
        b bVar2 = new b();
        bVar2.a = arrayList;
        bVar2.b = arrayList2;
        return bVar2;
    }
}
