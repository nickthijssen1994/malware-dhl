package com.jd.feedback.album.mvp;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import androidx.annotation.DrawableRes;
import androidx.appcompat.view.SupportMenuInflater;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;
import com.jd.feedback.R;
import com.jd.feedback.album.mvp.e;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
final class a extends e<Activity> {
    e.a a;
    private View c;
    private Toolbar d;
    private Drawable e;

    /* JADX INFO: Access modifiers changed from: package-private */
    public a(Activity activity) {
        super(activity);
        this.c = activity.findViewById(16908290);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final MenuInflater b() {
        return new SupportMenuInflater((Context) this.b);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final Menu c() {
        Toolbar toolbar = this.d;
        if (toolbar == null) {
            return null;
        }
        return toolbar.getMenu();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void a(e.a aVar) {
        this.a = aVar;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void a(Drawable drawable) {
        this.e = drawable;
        Toolbar toolbar = this.d;
        if (toolbar != null) {
            toolbar.setNavigationIcon(drawable);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void a(CharSequence charSequence) {
        Toolbar toolbar = this.d;
        if (toolbar != null) {
            toolbar.setTitle(charSequence);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void b(CharSequence charSequence) {
        Toolbar toolbar = this.d;
        if (toolbar != null) {
            toolbar.setSubtitle(charSequence);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void a() {
        this.d = ((Activity) this.b).findViewById(R.id.toolbar);
        Activity activity = (Activity) this.b;
        if (this.d != null) {
            a(activity.getTitle());
            this.d.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() { // from class: com.jd.feedback.album.mvp.a.1
                public final boolean onMenuItemClick(MenuItem menuItem) {
                    if (a.this.a == null) {
                        return true;
                    }
                    a.this.a.a(menuItem);
                    return true;
                }
            });
            this.d.setNavigationOnClickListener(new View.OnClickListener() { // from class: com.jd.feedback.album.mvp.a.2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    if (a.this.a != null) {
                        a.this.a.a();
                    }
                }
            });
            this.e = this.d.getNavigationIcon();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void a(@DrawableRes int i) {
        a(ContextCompat.getDrawable((Context) this.b, i));
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final Context d() {
        return (Context) this.b;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @Override // com.jd.feedback.album.mvp.e
    public final void e() {
        InputMethodManager inputMethodManager;
        Activity activity = (Activity) this.b;
        View currentFocus = activity.getCurrentFocus();
        if (currentFocus != null && (inputMethodManager = (InputMethodManager) activity.getSystemService("input_method")) != null) {
            inputMethodManager.hideSoftInputFromWindow(currentFocus.getWindowToken(), 0);
        }
    }
}
