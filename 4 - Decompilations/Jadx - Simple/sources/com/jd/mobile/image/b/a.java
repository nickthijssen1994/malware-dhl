package com.jd.mobile.image.b;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.text.TextUtils;
import android.view.View;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.core.view.ViewCompat;
import com.facebook.animated.giflite.GifDecoder;
import com.facebook.common.executors.CallerThreadExecutor;
import com.facebook.common.executors.UiThreadImmediateExecutorService;
import com.facebook.drawee.R;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.drawee.controller.BaseControllerListener;
import com.facebook.drawee.drawable.ScalingUtils;
import com.facebook.drawee.generic.GenericDraweeHierarchy;
import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;
import com.facebook.drawee.interfaces.DraweeController;
import com.facebook.drawee.view.DraweeHolder;
import com.facebook.drawee.view.SimpleDraweeView;
import com.facebook.fresco.animation.drawable.AnimatedDrawable2;
import com.facebook.imagepipeline.common.ImageDecodeOptions;
import com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder;
import com.facebook.imagepipeline.common.RotationOptions;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.image.ImageInfo;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequestBuilder;
import com.jd.mobile.image.ImageRequestListener;
import com.jd.mobile.image.a.b;
import com.jd.mobile.image.a.c;
import com.jingdong.JdImageToolKit;
import com.jingdong.app.util.image.JDDisplayImageOptions;
import com.jingdong.app.util.image.placeholder.JDPlaceholderDrawable;
import com.jingdong.jdsdk.widget.ExceptionDrawable;
import java.util.concurrent.Executor;
import javax.annotation.Nullable;

/* loaded from: classes.dex */
public class a {

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: com.jd.mobile.image.b.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public static class C0037a implements ImageRequestListener<EncodedImage> {
        final /* synthetic */ String a;
        final /* synthetic */ com.jd.mobile.image.a b;

        C0037a(String str, com.jd.mobile.image.a aVar) {
            this.a = str;
            this.b = aVar;
        }

        /* renamed from: a */
        public void onSuccess(EncodedImage encodedImage) {
            if (encodedImage != null) {
                try {
                    if (encodedImage.getInputStream() != null) {
                        c.a(this.a, c.a(encodedImage.getInputStream()));
                        if (this.b != null) {
                            this.b.a(this.a);
                        }
                    }
                } catch (Throwable th) {
                    com.jd.mobile.image.a aVar = this.b;
                    if (aVar != null) {
                        aVar.onFailure(th);
                    }
                }
            }
        }

        @Override // com.jd.mobile.image.ImageRequestListener
        public void onCancel() {
            com.jd.mobile.image.a aVar = this.b;
            if (aVar != null) {
                aVar.onCancel();
            }
        }

        @Override // com.jd.mobile.image.ImageRequestListener
        public void onFailure(Throwable th) {
            com.jd.mobile.image.a aVar = this.b;
            if (aVar != null) {
                aVar.onFailure(th);
            }
        }
    }

    public static GenericDraweeHierarchy a(View view, JDDisplayImageOptions jDDisplayImageOptions) {
        Drawable drawable;
        Drawable drawable2;
        boolean z = view instanceof SimpleDraweeView;
        GenericDraweeHierarchyBuilder builder = z ? ((SimpleDraweeView) view).getHierarchy().getBuilder() : new GenericDraweeHierarchyBuilder(view.getResources());
        if (jDDisplayImageOptions.getColorFilter() != null) {
            builder.setActualImageColorFilter(jDDisplayImageOptions.getColorFilter());
        }
        builder.setFadeDuration(jDDisplayImageOptions.getFadeDurationMs());
        if (jDDisplayImageOptions.getRoundingParams() != null) {
            builder.setRoundingParams(jDDisplayImageOptions.getRoundingParams());
        }
        if (builder.getRoundingParams() != null) {
            builder.getRoundingParams().setPaintFilterBitmap(true);
        }
        Resources resources = Fresco.getContext().getResources();
        int placeholder = jDDisplayImageOptions.getPlaceholder();
        ScalingUtils.ScaleType scaleType = null;
        JDPlaceholderDrawable drawable3 = (placeholder <= 0 || placeholder > 23) ? placeholder != 0 ? resources.getDrawable(placeholder) : null : new JDPlaceholderDrawable(placeholder, builder.getRoundingParams());
        try {
            try {
                drawable = b.a(jDDisplayImageOptions.getImageOnLoading(resources));
            } catch (Throwable unused) {
            }
        } catch (Throwable unused2) {
            drawable = null;
        }
        try {
            try {
                drawable2 = b.a(jDDisplayImageOptions.getImageOnFail(resources));
            } catch (Throwable unused3) {
            }
        } catch (Throwable unused4) {
            drawable2 = null;
        }
        if (drawable3 == null) {
            drawable3 = new JDPlaceholderDrawable(17, builder.getRoundingParams());
        }
        if (view instanceof ImageView) {
            scaleType = com.jd.mobile.image.a.a.a(((ImageView) view).getScaleType());
        }
        if (scaleType == null) {
            scaleType = ScalingUtils.ScaleType.FIT_CENTER;
        }
        if (jDDisplayImageOptions.getActualImageScaleType() != null) {
            builder.setActualImageScaleType(jDDisplayImageOptions.getActualImageScaleType());
        } else {
            builder.setActualImageScaleType(scaleType);
        }
        if (drawable2 != null) {
            builder.setFailureImage(drawable2, scaleType);
        } else if (jDDisplayImageOptions.isUsingDefaultPlaceholder()) {
            builder.setFailureImage((Drawable) drawable3, scaleType);
        }
        if (JdImageToolKit.getEngine().getImageControllerImpl().needNoImage()) {
            String string = JdImageToolKit.getEngine().getApplicationContext().getString(R.string.image_need_long_click);
            if (!TextUtils.isEmpty(jDDisplayImageOptions.getNoImageText())) {
                string = jDDisplayImageOptions.getNoImageText();
            }
            builder.setFailureImage((Drawable) new ExceptionDrawable(string, jDDisplayImageOptions.getNoImageTextSize(), jDDisplayImageOptions.getNoImageTextGap()), scaleType);
        } else if (drawable != null) {
            builder.setPlaceholderImage(drawable, scaleType);
        } else if (jDDisplayImageOptions.isUsingDefaultPlaceholder()) {
            builder.setPlaceholderImage((Drawable) drawable3, scaleType);
        }
        GenericDraweeHierarchy build = builder.build();
        if (z) {
            build.setChangeImageListener(((SimpleDraweeView) view).getChangeImageListener());
        }
        return build;
    }

    public static DraweeController a(final View view, ImageRequest imageRequest, DraweeController draweeController, final JDDisplayImageOptions jDDisplayImageOptions, final ImageRequestListener<ImageInfo> imageRequestListener) {
        return Fresco.newDraweeControllerBuilder().setOldController(draweeController).setImageRequest(imageRequest).setControllerListener(new BaseControllerListener<ImageInfo>() { // from class: com.jd.mobile.image.b.a.4
            /* renamed from: a */
            public void onFinalImageSet(String str, @Nullable ImageInfo imageInfo, @Nullable Animatable animatable, Drawable drawable) {
                super.onFinalImageSet(str, imageInfo, animatable, drawable);
                if (imageInfo != null) {
                    com.jd.mobile.image.a.a.a(imageInfo, view);
                    if (animatable != null) {
                        if (jDDisplayImageOptions.isTapToControlAnimationEnabled()) {
                            com.jd.mobile.image.a.a.a(view, animatable);
                        }
                        if (jDDisplayImageOptions.getLoopCountOfAnimation() > 0) {
                            ((AnimatedDrawable2) animatable).setAnimationListener(new com.jd.mobile.image.b.b.a(jDDisplayImageOptions.getLoopCountOfAnimation()));
                        }
                    }
                    ImageRequestListener imageRequestListener2 = imageRequestListener;
                    if (imageRequestListener2 != null) {
                        imageRequestListener2.onSuccess(imageInfo);
                    }
                }
            }

            @Override // com.facebook.drawee.controller.BaseControllerListener, com.facebook.drawee.controller.ControllerListener
            public void onCancelled() {
                super.onCancelled();
                ImageRequestListener imageRequestListener2 = imageRequestListener;
                if (imageRequestListener2 != null) {
                    imageRequestListener2.onCancel();
                }
            }

            @Override // com.facebook.drawee.controller.BaseControllerListener, com.facebook.drawee.controller.ControllerListener
            public void onFailure(String str, Throwable th) {
                super.onFailure(str, th);
                ImageRequestListener imageRequestListener2 = imageRequestListener;
                if (imageRequestListener2 != null) {
                    imageRequestListener2.onFailure(th);
                }
            }
        }).setTapToRetryEnabled(false).setAutoPlayAnimations(true).build();
    }

    private static ImageRequest a(@NonNull Uri uri, JDDisplayImageOptions jDDisplayImageOptions) {
        ImageRequestBuilder c = c(uri, jDDisplayImageOptions);
        if (c != null) {
            return c.build();
        }
        return null;
    }

    public static ImageRequest a(String str, JDDisplayImageOptions jDDisplayImageOptions) {
        if (TextUtils.isEmpty(str)) {
            str = "This string represent the uri is empty";
        }
        return a(Uri.parse(str), jDDisplayImageOptions);
    }

    public static void a(Uri uri, JDDisplayImageOptions jDDisplayImageOptions, ImageRequestListener<EncodedImage> imageRequestListener) {
        if (uri != null) {
            if (jDDisplayImageOptions == null) {
                jDDisplayImageOptions = JDDisplayImageOptions.createSimple();
            }
            Fresco.getImagePipeline().fetchEncodedImage(b(uri, jDDisplayImageOptions), null).subscribe(new 2(imageRequestListener), CallerThreadExecutor.getInstance());
        }
    }

    public static void a(Uri uri, JDDisplayImageOptions jDDisplayImageOptions, ImageRequestListener<Bitmap> imageRequestListener, Executor executor) {
        if (uri != null) {
            if (jDDisplayImageOptions == null) {
                jDDisplayImageOptions = JDDisplayImageOptions.createSimple();
            }
            Fresco.getImagePipeline().fetchDecodedImage(a(uri, jDDisplayImageOptions), (Object) null, jDDisplayImageOptions.getImageRequestLevel()).subscribe(new 1(imageRequestListener), executor);
        }
    }

    public static void a(Uri uri, String str, com.jd.mobile.image.a aVar) {
        a(uri, (JDDisplayImageOptions) null, new C0037a(str, aVar));
    }

    public static void a(View view, Uri uri, JDDisplayImageOptions jDDisplayImageOptions, ImageRequestListener<ImageInfo> imageRequestListener) {
        if (uri != null) {
            if (jDDisplayImageOptions == null) {
                jDDisplayImageOptions = JDDisplayImageOptions.createSimple();
            }
            if (jDDisplayImageOptions.getResizeOptions() == null && jDDisplayImageOptions.isScale()) {
                jDDisplayImageOptions.setResizeOptions(com.jd.mobile.image.a.a.a(view));
            }
            ImageRequest a = a(uri, jDDisplayImageOptions);
            GenericDraweeHierarchy a2 = a(view, jDDisplayImageOptions);
            if (view instanceof SimpleDraweeView) {
                SimpleDraweeView simpleDraweeView = (SimpleDraweeView) view;
                simpleDraweeView.setHierarchy(a2);
                simpleDraweeView.setController(a(view, a, simpleDraweeView.getController(), jDDisplayImageOptions, imageRequestListener));
                return;
            }
            DraweeHolder draweeHolder = (DraweeHolder) view.getTag(R.id.fresco_drawee);
            if (draweeHolder == null) {
                draweeHolder = DraweeHolder.create(a2, view.getContext());
            }
            draweeHolder.setController(a(view, a, draweeHolder.getController(), jDDisplayImageOptions, imageRequestListener));
            if (ViewCompat.isAttachedToWindow(view)) {
                draweeHolder.onAttach();
            }
            View.OnAttachStateChangeListener onAttachStateChangeListener = (com.jd.mobile.image.b.b.b) view.getTag(R.id.attach_change_listener);
            if (onAttachStateChangeListener == null) {
                onAttachStateChangeListener = new com.jd.mobile.image.b.b.b(draweeHolder);
                view.addOnAttachStateChangeListener(onAttachStateChangeListener);
            }
            view.setTag(R.id.fresco_drawee, draweeHolder);
            view.setTag(R.id.attach_change_listener, onAttachStateChangeListener);
            if (view instanceof ImageView) {
                ((ImageView) view).setImageDrawable(draweeHolder.getTopLevelDrawable());
            } else if (Build.VERSION.SDK_INT >= 16) {
                view.setBackground(draweeHolder.getTopLevelDrawable());
            } else {
                view.setBackgroundDrawable(draweeHolder.getTopLevelDrawable());
            }
        }
    }

    public static void a(String str, ImageRequestListener<String> imageRequestListener) {
        Fresco.getImagePipeline().prefetchToDiskCache(b(str, (JDDisplayImageOptions) null), null).subscribe(new 3(imageRequestListener, str), UiThreadImmediateExecutorService.getInstance());
    }

    private static ImageRequest b(@NonNull Uri uri, JDDisplayImageOptions jDDisplayImageOptions) {
        if (jDDisplayImageOptions == null) {
            jDDisplayImageOptions = JDDisplayImageOptions.createSimple();
        }
        return d(uri, jDDisplayImageOptions).build();
    }

    public static ImageRequest b(String str, JDDisplayImageOptions jDDisplayImageOptions) {
        if (TextUtils.isEmpty(str)) {
            str = "This string represent the uri is empty";
        }
        return b(Uri.parse(str), jDDisplayImageOptions);
    }

    private static ImageRequestBuilder c(@NonNull Uri uri, JDDisplayImageOptions jDDisplayImageOptions) {
        ImageRequestBuilder d = d(uri, jDDisplayImageOptions);
        d.setRotationOptions(jDDisplayImageOptions.isConsiderExifParams() ? RotationOptions.autoRotate() : RotationOptions.disableRotation());
        d.setIsUseThumbnail(jDDisplayImageOptions.isUseThumbnail());
        if (!jDDisplayImageOptions.isCacheOnDisk()) {
            d.disableDiskCache();
        }
        if (!jDDisplayImageOptions.isCacheInMemory()) {
            d.disableMemoryCache();
        }
        d.setResizeOptions(jDDisplayImageOptions.getResizeOptions());
        d.setPostprocessor(jDDisplayImageOptions.getPostProcessor());
        ImageDecodeOptionsBuilder bitmapConfig = ImageDecodeOptions.newBuilder().setBitmapConfig(Bitmap.Config.RGB_565);
        if (jDDisplayImageOptions.getBitmapConfig() != null) {
            bitmapConfig.setBitmapConfig(jDDisplayImageOptions.getBitmapConfig());
        }
        if (jDDisplayImageOptions.isUsingJavaGifDecoder()) {
            bitmapConfig.setCustomImageDecoder(new GifDecoder());
        }
        if (jDDisplayImageOptions.isForceStaticImage()) {
            bitmapConfig.setForceStaticImage(true);
        }
        d.setImageDecodeOptions(bitmapConfig.build());
        if (jDDisplayImageOptions.getNetworkImageRequestListener() != null) {
            d.setRequestListener(jDDisplayImageOptions.getNetworkImageRequestListener());
        }
        ImageRequest build = d.build();
        build.setForce2HttpFlag(JdImageToolKit.getEngine().getNetworkParameterImpl().isForce2HttpFlag());
        build.setUseDomainFlag(JdImageToolKit.getEngine().getNetworkParameterImpl().isUseDomainFlag());
        return d;
    }

    private static ImageRequestBuilder d(@NonNull Uri uri, JDDisplayImageOptions jDDisplayImageOptions) {
        return ImageRequestBuilder.newBuilderWithSource(uri).setLowestPermittedRequestLevel(jDDisplayImageOptions.getImageRequestLevel());
    }
}
