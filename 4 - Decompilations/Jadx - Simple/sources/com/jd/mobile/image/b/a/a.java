package com.jd.mobile.image.b.a;

import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Log;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.backends.okhttp3.ImgNetStatisticTool;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.producers.BaseNetworkFetcher;
import com.facebook.imagepipeline.producers.Consumer;
import com.facebook.imagepipeline.producers.FetchState;
import com.facebook.imagepipeline.producers.NetworkFetcher;
import com.facebook.imagepipeline.producers.ProducerContext;
import com.facebook.imagepipeline.request.ImageRequest;
import com.jd.sentry.performance.network.instrumentation.okhttp3.ShooterOkhttp3Instrumentation;
import com.jingdong.JdImageToolKit;
import com.jingdong.app.util.image.assist.JDFailReason;
import com.jingdong.app.util.image.assist.JDFailType;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import okhttp3.Call;
import okhttp3.OkHttpClient;

/* loaded from: classes.dex */
public class a extends BaseNetworkFetcher<C0038a> {
    private final OkHttpClient a = ShooterOkhttp3Instrumentation.builderInit(new OkHttpClient.Builder()).connectTimeout(15000, TimeUnit.MILLISECONDS).readTimeout(20000, TimeUnit.MILLISECONDS).build();
    private Executor b = this.a.dispatcher().executorService();

    /* renamed from: com.jd.mobile.image.b.a.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public static class C0038a extends FetchState {
        public long a;
        public long b;
        public long c;

        public C0038a(Consumer<EncodedImage> consumer, ProducerContext producerContext) {
            super(consumer, producerContext);
        }
    }

    public a() {
        this.a.readTimeoutMillis();
    }

    private static String a(String str) {
        try {
            String host = new URL(str).getHost();
            if (!TextUtils.isEmpty(host)) {
                return host;
            }
            throw new MalformedURLException(str);
        } catch (MalformedURLException unused) {
            return null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(C0038a aVar, String str, Throwable th) {
        ImageRequest imageRequest = aVar.getContext().getImageRequest();
        if (!imageRequest.isUseDomainFlag()) {
            String a = a(str);
            JdImageToolKit.getEngine().getExceptionReportHandlerImpl().reportBitmapException(imageRequest.getSourceUri().toString(), new JDFailReason(JDFailType.UNKNOWN, new Fresco.JDImageNetworkException(th, imageRequest.isUseDomainFlag(), str, a)), JdImageToolKit.getEngine().getImageControllerImpl().getThisPageInfo());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d3  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public void a(java.lang.String r16, final com.jd.mobile.image.b.a.a.C0038a r17, final com.facebook.imagepipeline.producers.NetworkFetcher.Callback r18, final boolean r19) {
        /*
        // Method dump skipped, instructions count: 286
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.mobile.image.b.a.a.a(java.lang.String, com.jd.mobile.image.b.a.a$a, com.facebook.imagepipeline.producers.NetworkFetcher$Callback, boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(Call call, Throwable th, NetworkFetcher.Callback callback) {
        if (call == null || !call.isCanceled()) {
            callback.onFailure(th);
        } else {
            callback.onCancellation();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void b() {
        if (ImgNetStatisticTool.isSendLastResult() && JdImageToolKit.getEngine().getNetStatReporter() != null) {
            HashMap hashMap = new HashMap();
            hashMap.put(ImgNetStatisticTool.KEY_TOTAL_IMG_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getTotalCount()));
            hashMap.put(ImgNetStatisticTool.KEY_SUCCEED_IMG_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getSuccessCount()));
            hashMap.put(ImgNetStatisticTool.KEY_SUCCEED_IMG_DOMAIN_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getDomainSuccessCount()));
            hashMap.put(ImgNetStatisticTool.KEY_SUCCEED_IMG_BAK_IP_REQUEST_COUNT, Integer.valueOf(ImgNetStatisticTool.getSuccImgBakIpRequestCount()));
            JdImageToolKit.getEngine().getNetStatReporter().saveStatisticData(hashMap);
        }
    }

    /* renamed from: a */
    public C0038a createFetchState(Consumer<EncodedImage> consumer, ProducerContext producerContext) {
        return new C0038a(consumer, producerContext);
    }

    /* renamed from: a */
    public void onFetchCompletion(C0038a aVar, int i) {
        aVar.c = SystemClock.elapsedRealtime();
    }

    /* renamed from: a */
    public void fetch(C0038a aVar, NetworkFetcher.Callback callback) {
        try {
            aVar.a = SystemClock.elapsedRealtime();
            int incrementTotalCountAndGet = ImgNetStatisticTool.incrementTotalCountAndGet();
            if (Fresco.isLog) {
                Log.d("facebook", ">>>>>>>>>>>>>>>current total count : " + incrementTotalCountAndGet);
            }
            a(aVar.getUri().toString(), aVar, callback, false);
        } catch (Exception e) {
            a((Call) null, e, callback);
        }
    }

    /* renamed from: b */
    public Map<String, String> getExtraMap(C0038a aVar, int i) {
        HashMap hashMap = new HashMap(4);
        hashMap.put("queue_time", Long.toString(aVar.b - aVar.a));
        hashMap.put("fetch_time", Long.toString(aVar.c - aVar.b));
        hashMap.put("total_time", Long.toString(aVar.c - aVar.a));
        hashMap.put("image_size", Integer.toString(i));
        return hashMap;
    }
}
