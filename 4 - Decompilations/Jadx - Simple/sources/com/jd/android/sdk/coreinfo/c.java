package com.jd.android.sdk.coreinfo;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.hardware.fingerprint.FingerprintManager;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.os.storage.StorageManager;
import android.os.storage.StorageVolume;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import androidx.annotation.RequiresPermission;
import com.facebook.react.modules.deviceinfo.DeviceInfoModule;
import com.facebook.react.uimanager.ViewProps;
import com.jd.android.sdk.coreinfo.a.b;
import com.jd.android.sdk.coreinfo.a.e;
import com.jd.android.sdk.coreinfo.c.a;
import com.jd.android.sdk.coreinfo.c.d;
import com.jd.android.sdk.coreinfo.c.f;
import java.io.File;
import java.lang.reflect.Method;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.List;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
final class c {
    private static String a = "";
    private static String b = "";
    private static String c = "";
    private static String d = "";
    private static String e = "";
    private static String f = "";
    private static String g = "";
    private static String h = "";
    private static String i = "";
    private static long j = 0;
    private static long k = 0;
    private static long l = 0;
    private static boolean m = false;
    private static boolean n = false;
    private static boolean o = false;
    private static boolean p = false;
    private static boolean q = false;
    private static boolean r = false;
    private static boolean s = false;
    private static boolean t = false;
    private static boolean u = false;
    private static boolean v = false;
    private static String w = "";

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    static String a(Context context) {
        if (TextUtils.isEmpty(a)) {
            a = com.jd.android.sdk.coreinfo.c.c.a(b.a(context), "");
        }
        return a;
    }

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    static String b(Context context) {
        if (TextUtils.isEmpty(b)) {
            b = com.jd.android.sdk.coreinfo.c.c.a(e.a(context), "");
        }
        return b;
    }

    static String a() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.DEVICE, "");
    }

    static String b() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.PRODUCT, "");
    }

    static String c() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.MANUFACTURER, "");
    }

    static String d() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.BRAND, "");
    }

    static String e() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.MODEL, "");
    }

    static String f() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.BOARD, "");
    }

    static String g() {
        if (TextUtils.isEmpty(c)) {
            c = f.a("ro.board.platform", "");
        }
        return c;
    }

    static String[] h() {
        if (Build.VERSION.SDK_INT >= 21) {
            return Build.SUPPORTED_ABIS;
        }
        return TextUtils.isEmpty(Build.CPU_ABI2) ? new String[]{Build.CPU_ABI} : new String[]{Build.CPU_ABI, Build.CPU_ABI2};
    }

    static String i() {
        if (TextUtils.isEmpty(d)) {
            d = com.jd.android.sdk.coreinfo.c.c.a(Build.getRadioVersion(), "");
        }
        return d;
    }

    static String j() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.HARDWARE, "");
    }

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    static String k() {
        if (TextUtils.isEmpty(e)) {
            if (Build.VERSION.SDK_INT >= 26) {
                try {
                    e = com.jd.android.sdk.coreinfo.c.c.a(Build.getSerial(), "");
                } catch (SecurityException e2) {
                    a.b(DeviceInfoModule.NAME, "DeviceInfo.getHardwareSerialNo() exception: " + e2.getMessage());
                    return "";
                }
            } else {
                e = com.jd.android.sdk.coreinfo.c.c.a(Build.SERIAL, "");
            }
        }
        return e;
    }

    static String l() {
        return com.jd.android.sdk.coreinfo.c.c.a(Build.BOOTLOADER, "");
    }

    static String m() {
        if (TextUtils.isEmpty(f)) {
            f = com.jd.android.sdk.coreinfo.c.c.a(com.jd.android.sdk.coreinfo.a.c.a(), "");
        }
        return f;
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x007b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0076 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    static java.lang.String n() {
        /*
            java.lang.String r0 = com.jd.android.sdk.coreinfo.c.g
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            if (r0 == 0) goto L_0x007f
            java.lang.String r0 = ""
            r1 = 0
            java.io.InputStreamReader r2 = new java.io.InputStreamReader     // Catch: Throwable -> 0x0064, all -> 0x0060
            java.lang.Runtime r3 = java.lang.Runtime.getRuntime()     // Catch: Throwable -> 0x0064, all -> 0x0060
            java.lang.String r4 = "cat /proc/cpuinfo | grep Serial"
            java.lang.Process r3 = r3.exec(r4)     // Catch: Throwable -> 0x0064, all -> 0x0060
            java.io.InputStream r3 = r3.getInputStream()     // Catch: Throwable -> 0x0064, all -> 0x0060
            r2.<init>(r3)     // Catch: Throwable -> 0x0064, all -> 0x0060
            java.io.LineNumberReader r3 = new java.io.LineNumberReader     // Catch: Throwable -> 0x005a, all -> 0x0057
            r3.<init>(r2)     // Catch: Throwable -> 0x005a, all -> 0x0057
            r1 = 0
        L_0x0024:
            r4 = 100
            if (r1 >= r4) goto L_0x0069
            java.lang.String r4 = r3.readLine()     // Catch: Throwable -> 0x0049, all -> 0x0047
            if (r4 == 0) goto L_0x004d
            java.lang.String r5 = "Serial"
            int r5 = r4.indexOf(r5)     // Catch: Throwable -> 0x0049, all -> 0x0047
            if (r5 < 0) goto L_0x004d
            java.lang.String r5 = ":"
            int r5 = r4.indexOf(r5)     // Catch: Throwable -> 0x0049, all -> 0x0047
            int r5 = r5 + 1
            java.lang.String r4 = r4.substring(r5)     // Catch: Throwable -> 0x0049, all -> 0x0047
            java.lang.String r0 = r4.trim()     // Catch: Throwable -> 0x0049, all -> 0x0047
            goto L_0x0069
        L_0x0047:
            r0 = move-exception
            goto L_0x0074
        L_0x0049:
            r4 = move-exception
            r4.printStackTrace()     // Catch: Throwable -> 0x0052, all -> 0x0047
        L_0x004d:
            int r1 = r1 + 1
            int r1 = r1 + 1
            goto L_0x0024
        L_0x0052:
            r1 = move-exception
            r6 = r2
            r2 = r1
            r1 = r6
            goto L_0x0066
        L_0x0057:
            r0 = move-exception
            r3 = r1
            goto L_0x0074
        L_0x005a:
            r3 = move-exception
            r6 = r3
            r3 = r1
            r1 = r2
            r2 = r6
            goto L_0x0066
        L_0x0060:
            r0 = move-exception
            r2 = r1
            r3 = r2
            goto L_0x0074
        L_0x0064:
            r2 = move-exception
            r3 = r1
        L_0x0066:
            r2.printStackTrace()     // Catch: all -> 0x0072
        L_0x0069:
            java.lang.String r1 = ""
            java.lang.String r0 = com.jd.android.sdk.coreinfo.c.c.a(r0, r1)
            com.jd.android.sdk.coreinfo.c.g = r0
            goto L_0x007f
        L_0x0072:
            r0 = move-exception
            r2 = r1
        L_0x0074:
            if (r2 == 0) goto L_0x0079
            r2.close()     // Catch: Exception -> 0x0079
        L_0x0079:
            if (r3 == 0) goto L_0x007e
            r3.close()     // Catch: Exception -> 0x007e
        L_0x007e:
            throw r0
        L_0x007f:
            java.lang.String r0 = com.jd.android.sdk.coreinfo.c.g
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.android.sdk.coreinfo.c.n():java.lang.String");
    }

    static String o() {
        if (TextUtils.isEmpty(h)) {
            try {
                h = String.valueOf(new File("/sys/devices/system/cpu/").listFiles(new com.jd.android.sdk.coreinfo.b.a()).length);
            } catch (Exception e2) {
                a.a(DeviceInfoModule.NAME, "An exception happens when call getCPUNum()", e2);
                return "1";
            }
        }
        return h;
    }

    static String p() {
        if (TextUtils.isEmpty(i)) {
            String a2 = d.a("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq", false);
            if (a2.length() == 0) {
                return "";
            }
            i = com.jd.android.sdk.coreinfo.c.c.a(a2, "");
        }
        return i;
    }

    @RequiresPermission("android.permission.READ_PHONE_STATE")
    static String c(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            return com.jd.android.sdk.coreinfo.c.c.a(((TelephonyManager) context.getSystemService("phone")).getSimSerialNumber(), "");
        } catch (SecurityException e2) {
            a.b(DeviceInfoModule.NAME, "DeviceInfo.getSimSerialNo() exception: " + e2.getMessage());
            return "";
        }
    }

    static String q() {
        return com.jd.android.sdk.coreinfo.c.c.a(d.a("/sys/block/mmcblk0/device/cid", false), "");
    }

    static long d(Context context) {
        long j2;
        if (j <= 0) {
            if (Build.VERSION.SDK_INT < 16) {
                try {
                    String a2 = d.a("/proc/meminfo", true);
                    if (a2.length() == 0) {
                        j2 = 0;
                    } else {
                        int indexOf = a2.indexOf("MemTotal:");
                        j2 = Long.parseLong(a2.substring(indexOf + 9, a2.indexOf("kB", indexOf)).trim());
                    }
                    j = j2;
                } catch (Exception e2) {
                    a.a(DeviceInfoModule.NAME, "An exception happens when call getMemTotalSizeLowerAPI16()", e2);
                    return 0;
                }
            } else if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return 0;
            } else {
                try {
                    ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
                    ((ActivityManager) context.getSystemService("activity")).getMemoryInfo(memoryInfo);
                    j = memoryInfo.totalMem >> 10;
                } catch (Exception e3) {
                    a.a(DeviceInfoModule.NAME, "An exception happens when call getMemTotalSize()", e3);
                    return 0;
                }
            }
        }
        return j;
    }

    static long e(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return 0;
        }
        try {
            ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
            ((ActivityManager) context.getSystemService("activity")).getMemoryInfo(memoryInfo);
            return memoryInfo.availMem >> 10;
        } catch (Exception e2) {
            a.a(DeviceInfoModule.NAME, "An exception happens when call getMemAvailSize()", e2);
            return 0;
        }
    }

    static long r() {
        if (k <= 0) {
            try {
                k = a(Environment.getDataDirectory().getPath());
            } catch (Exception e2) {
                a.a(DeviceInfoModule.NAME, "An exception happens when call getRomSize()", e2);
                return 0;
            }
        }
        return k;
    }

    static long s() {
        if (l <= 0) {
            try {
                l = a(Environment.getExternalStorageDirectory().getPath());
            } catch (Exception e2) {
                a.a(DeviceInfoModule.NAME, "An exception happens when call getExternalStorageSize()", e2);
                return 0;
            }
        }
        return l;
    }

    private static long a(String str) {
        StatFs statFs = new StatFs(str);
        if (Build.VERSION.SDK_INT >= 18) {
            return statFs.getBlockCountLong() * statFs.getBlockSizeLong();
        }
        return (long) (statFs.getBlockCount() * statFs.getBlockSize());
    }

    static String f(Context context) {
        if (context == null) {
            return "";
        }
        try {
            return String.valueOf(context.getResources().getDisplayMetrics().densityDpi);
        } catch (Exception e2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getDensityDpi()", e2);
            return "";
        }
    }

    static String g(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
            return displayMetrics.widthPixels + "*" + displayMetrics.heightPixels;
        } catch (Exception e2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getDisplayMetrics()", e2);
            return "";
        }
    }

    static boolean h(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return false;
        }
        try {
            if (Build.VERSION.SDK_INT < 24) {
                return n(context);
            }
            List<StorageVolume> storageVolumes = ((StorageManager) context.getSystemService("storage")).getStorageVolumes();
            if (storageVolumes != null) {
                for (StorageVolume storageVolume : storageVolumes) {
                    if (storageVolume.isRemovable() && storageVolume.getState().equals("mounted")) {
                        return true;
                    }
                }
            }
            return false;
        } catch (Exception e2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call storageIsRemovable()", e2);
            return false;
        }
    }

    private static boolean n(Context context) {
        StorageManager storageManager = (StorageManager) context.getSystemService("storage");
        try {
            Method method = StorageManager.class.getMethod("getVolumeList", new Class[0]);
            method.setAccessible(true);
            Object[] objArr = (Object[]) method.invoke(storageManager, new Object[0]);
            if (objArr != null) {
                for (Object obj : objArr) {
                    if (((Boolean) obj.getClass().getMethod("isRemovable", new Class[0]).invoke(obj, new Object[0])).booleanValue() && ((String) obj.getClass().getMethod("getState", new Class[0]).invoke(obj, new Object[0])).equals("mounted")) {
                        return true;
                    }
                }
            }
        } catch (Exception e2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call storageIsRemovable()", e2);
        }
        return false;
    }

    static boolean a(Context context, int i2) {
        if (!n) {
            boolean z = false;
            if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return false;
            }
            SensorManager sensorManager = (SensorManager) context.getSystemService("sensor");
            if (sensorManager == null) {
                return false;
            }
            List<Sensor> sensorList = sensorManager.getSensorList(i2);
            if (sensorList != null && sensorList.size() > 0) {
                z = true;
            }
            m = z;
            n = true;
        }
        return m;
    }

    static boolean i(Context context) {
        if (!p) {
            boolean z = false;
            if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return false;
            }
            LocationManager locationManager = (LocationManager) context.getSystemService("location");
            if (locationManager == null) {
                return false;
            }
            List<String> allProviders = locationManager.getAllProviders();
            if (allProviders != null && allProviders.contains("gps")) {
                z = true;
            }
            o = z;
            p = true;
        }
        return o;
    }

    @RequiresPermission("android.permission.USE_FINGERPRINT")
    @TargetApi(23)
    static boolean j(Context context) {
        FingerprintManager fingerprintManager;
        if (!r) {
            if (context == null) {
                a.b(DeviceInfoModule.NAME, "context is null");
                return false;
            } else if (Build.VERSION.SDK_INT < 23 || (fingerprintManager = (FingerprintManager) context.getSystemService("fingerprint")) == null) {
                return false;
            } else {
                try {
                    q = fingerprintManager.isHardwareDetected();
                    r = true;
                } catch (Throwable th) {
                    a.a(DeviceInfoModule.NAME, "An error occors when call isFingerprintAvailable()", th);
                    return false;
                }
            }
        }
        return q;
    }

    @RequiresPermission(allOf = {"android.permission.ACCESS_WIFI_STATE", "android.permission.INTERNET"})
    static String k(Context context) {
        return com.jd.android.sdk.coreinfo.c.c.a(com.jd.android.sdk.coreinfo.a.d.a(context), "");
    }

    @RequiresPermission("android.permission.INTERNET")
    static String t() {
        try {
            a.a(DeviceInfoModule.NAME, "get wifi mac by getWifiMacAddressOver23()");
            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {
                if (networkInterface.getName().equalsIgnoreCase("wlan0")) {
                    byte[] hardwareAddress = networkInterface.getHardwareAddress();
                    if (hardwareAddress == null) {
                        return "";
                    }
                    StringBuilder sb = new StringBuilder();
                    int length = hardwareAddress.length;
                    for (int i2 = 0; i2 < length; i2++) {
                        sb.append(String.format("%02x:", Byte.valueOf(hardwareAddress[i2])));
                    }
                    if (sb.length() > 0) {
                        sb.deleteCharAt(sb.length() - 1);
                    }
                    return sb.toString();
                }
            }
            return "";
        } catch (Exception e2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getWifiMacAddressOver23()", e2);
            return "";
        }
    }

    @RequiresPermission("android.permission.ACCESS_NETWORK_STATE")
    static String l(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
            if (connectivityManager == null) {
                return "";
            }
            NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
            if (activeNetworkInfo == null) {
                return ViewProps.NONE;
            }
            if (!activeNetworkInfo.isAvailable()) {
                return ViewProps.NONE;
            }
            try {
                NetworkInfo networkInfo = connectivityManager.getNetworkInfo(1);
                if (!(networkInfo == null || networkInfo.getState() == null)) {
                    NetworkInfo.State state = networkInfo.getState();
                    if (state == NetworkInfo.State.CONNECTED) {
                        return "wifi";
                    }
                    if (state == NetworkInfo.State.CONNECTING) {
                        return "wifi";
                    }
                }
            } catch (Throwable th) {
                a.a(DeviceInfoModule.NAME, "An exception happends when call getNetworkType()", th);
            }
            return o(context);
        } catch (Throwable th2) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getNetworkType()", th2);
            return "";
        }
    }

    private static String o(Context context) {
        if (context == null) {
            a.b(DeviceInfoModule.NAME, "context is null");
            return "";
        }
        try {
            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService("phone");
            if (telephonyManager == null) {
                return "";
            }
            int networkType = telephonyManager.getNetworkType();
            if (networkType == 20) {
                return "5g";
            }
            switch (networkType) {
                case 1:
                case 2:
                case 4:
                case 7:
                case 11:
                case 16:
                    return "2g";
                case 3:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 17:
                    return "3g";
                case 13:
                    return "4g";
                default:
                    return "mobile";
            }
        } catch (Throwable th) {
            a.a(DeviceInfoModule.NAME, "An exception happends when call getMobileDataType()", th);
            return "";
        }
    }

    static String m(Context context) {
        if (TextUtils.isEmpty(w)) {
            w = com.jd.android.sdk.coreinfo.c.c.a(com.jd.android.sdk.coreinfo.a.a.a(context), "");
        }
        return w;
    }
}
