package com.jd.android.sdk.coreinfo.c;

import java.io.BufferedReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class e extends Thread {
    private boolean a;
    private InputStream b;
    private StringBuilder c = new StringBuilder();
    private volatile boolean d;

    public e(InputStream inputStream) {
        this.a = false;
        this.d = false;
        this.b = inputStream;
        this.d = false;
        this.a = false;
    }

    @Override // java.lang.Thread, java.lang.Runnable
    public final void run() {
        BufferedReader bufferedReader;
        Throwable th;
        BufferedReader bufferedReader2 = null;
        try {
            bufferedReader = new BufferedReader(new InputStreamReader(this.b));
            try {
                String str = "";
                if (this.a) {
                    str = System.getProperty("line.separator");
                }
                while (true) {
                    String readLine = bufferedReader.readLine();
                    if (readLine != null) {
                        this.c.append(readLine + str);
                    } else {
                        a(bufferedReader);
                        a(this.b);
                        this.d = true;
                        synchronized (this) {
                            notify();
                        }
                        return;
                    }
                }
            } catch (IOException unused) {
                bufferedReader2 = bufferedReader;
                a(bufferedReader2);
                a(this.b);
                this.d = true;
                synchronized (this) {
                    notify();
                }
            } catch (Throwable th2) {
                th = th2;
                a(bufferedReader);
                a(this.b);
                this.d = true;
                synchronized (this) {
                    notify();
                }
                throw th;
            }
        } catch (IOException unused2) {
        } catch (Throwable th3) {
            th = th3;
            bufferedReader = null;
        }
    }

    public final String a() {
        if (!this.d) {
            synchronized (this) {
                try {
                    if (!this.d) {
                        wait();
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        return this.c.toString();
    }

    private static void a(Closeable closeable) {
        try {
            closeable.close();
        } catch (Exception unused) {
        }
    }
}
