package com.jd.phc;

import android.content.Context;
import android.text.TextUtils;
import android.util.Base64;
import com.huawei.hms.support.hianalytics.HiAnalyticsConstant;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONObject;
import phc.b;
import phc.c;
import phc.d;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class PHCEngine {
    public static Server a = Server.Official;
    private static PHCEngine b;
    private Context c;
    private String d;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum Server {
        Pre,
        Official
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface a {
        void onGetNormalDSecretFailed(String str, String str2);
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public enum PHCCipherSuite {
        AES_CBC_PKCS5Padding(0),
        AES_CTR_NoPadding(1),
        RC4(2),
        RC4_CRC32CHECKSUM(4);
        
        private int value;

        PHCCipherSuite(int i) {
            this.value = i;
        }

        public int value() {
            return this.value;
        }
    }

    private PHCEngine(Context context) {
        this.c = context.getApplicationContext();
        this.d = context.getPackageName();
    }

    public static PHCEngine a(Context context) {
        if (b == null) {
            synchronized (PHCEngine.class) {
                if (b == null) {
                    b = new PHCEngine(context);
                }
            }
        }
        return b;
    }

    public void a(a aVar) {
        a(Server.Official, aVar);
    }

    public void a(Server server, a aVar) {
        a = server;
        if (aVar != null && d.b()) {
            new b(this.c, aVar).execute((Object[]) null);
        }
    }

    public void a(boolean z) {
        phc.a.a(z);
    }

    public String a(Map<String, String> map, PHCCipherSuite pHCCipherSuite) throws IllegalArgumentException {
        if (map == null || map.isEmpty() || pHCCipherSuite == null) {
            throw new IllegalArgumentException("plaintext can not null;");
        }
        try {
            long currentTimeMillis = System.currentTimeMillis();
            ByteBuffer order = ByteBuffer.allocate(8).order(ByteOrder.BIG_ENDIAN);
            order.putLong(currentTimeMillis);
            int i = d.c;
            byte[] bArr = d.a;
            String str = d.b;
            if (bArr == null) {
                bArr = Base64.decode("BHqxx7mF6ozKsygZ3HUozSM7rED0qHts6lZNeFRdOls=", 2);
                str = "JM9F1ywUPwflvMIpYPok0tt5k9kW4ArJEU3lfLhxBqw=";
                i = -1;
            }
            byte[] a2 = PHCNativeLoader.a().a(bArr, str, this.d, order.array());
            JSONObject jSONObject = new JSONObject();
            for (String str2 : map.keySet()) {
                jSONObject.put(str2, Base64.encodeToString(PHCNativeLoader.a().a(a2, pHCCipherSuite.value(), map.get(str2).getBytes()), 2));
            }
            JSONObject jSONObject2 = new JSONObject();
            jSONObject2.put("hdid", str);
            jSONObject2.put("ts", currentTimeMillis);
            jSONObject2.put("ridx", i);
            jSONObject2.put("cipher", jSONObject);
            jSONObject2.put("ciphertype", pHCCipherSuite.value());
            jSONObject2.put(HiAnalyticsConstant.HaKey.BI_KEY_VERSION, c.a());
            jSONObject2.put("appname", this.d);
            return jSONObject2.toString();
        } catch (Exception e) {
            if (!phc.a.a) {
                return "";
            }
            e.printStackTrace();
            return "";
        } catch (Throwable th) {
            if (!phc.a.a) {
                return "";
            }
            th.printStackTrace();
            return "";
        }
    }

    public Map<String, String> a(String str) throws IllegalArgumentException {
        if (!TextUtils.isEmpty(str)) {
            try {
                JSONObject jSONObject = new JSONObject(str);
                long optLong = jSONObject.optLong("ts");
                jSONObject.optString(HiAnalyticsConstant.HaKey.BI_KEY_VERSION);
                int optInt = jSONObject.optInt("ciphertype");
                String optString = jSONObject.optString("cipher");
                String optString2 = jSONObject.optString("hdid");
                String optString3 = jSONObject.optString("appname");
                int optInt2 = jSONObject.optInt("ridx");
                byte[] bArr = d.a;
                if (optInt2 == -1) {
                    bArr = Base64.decode("BHqxx7mF6ozKsygZ3HUozSM7rED0qHts6lZNeFRdOls=", 2);
                } else if (bArr == null) {
                    return null;
                }
                ByteBuffer order = ByteBuffer.allocate(8).order(ByteOrder.BIG_ENDIAN);
                order.putLong(optLong);
                byte[] a2 = PHCNativeLoader.a().a(bArr, optString2, optString3, order.array());
                JSONObject jSONObject2 = new JSONObject(optString);
                HashMap hashMap = new HashMap();
                Iterator<String> keys = jSONObject2.keys();
                while (keys.hasNext()) {
                    String next = keys.next();
                    hashMap.put(next, new String(PHCNativeLoader.a().b(a2, optInt, Base64.decode(jSONObject2.optString(next), 2)), Charset.forName("UTF-8")));
                }
                return hashMap;
            } catch (Exception e) {
                if (phc.a.a) {
                    e.printStackTrace();
                }
                return null;
            } catch (Throwable th) {
                if (phc.a.a) {
                    th.printStackTrace();
                }
                return null;
            }
        } else {
            throw new IllegalArgumentException("plaintext can not null;");
        }
    }
}
