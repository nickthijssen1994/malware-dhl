package com.jd.libs.hybrid.offlineload.db;

import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.jd.libs.hybrid.offlineload.db.converter.RoomDateConverts;
import com.jd.libs.hybrid.offlineload.entity.CommonEntity;
import com.jd.libs.hybrid.offlineload.entity.FileDetail;
import java.util.List;

/* loaded from: classes.dex */
public final class b implements a {
    final RoomDateConverts a = new RoomDateConverts();
    private final RoomDatabase b;
    private final EntityInsertionAdapter c;
    private final EntityDeletionOrUpdateAdapter d;
    private final EntityDeletionOrUpdateAdapter e;
    private final SharedSQLiteStatement f;

    public b(RoomDatabase roomDatabase) {
        this.b = roomDatabase;
        this.c = new EntityInsertionAdapter<CommonEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.1
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                CommonEntity commonEntity = (CommonEntity) obj;
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, commonEntity.getId());
                }
                if (commonEntity.getUrl() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, commonEntity.getUrl());
                }
                supportSQLiteStatement.bindLong(3, (long) commonEntity.getVersionCode());
                if (commonEntity.getMd5() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, commonEntity.getMd5());
                }
                supportSQLiteStatement.bindLong(5, commonEntity.isAvailable() ? 1 : 0);
                supportSQLiteStatement.bindLong(6, commonEntity.getCreateTimestamp());
                String fromStringMap = b.this.a.fromStringMap(commonEntity.getHeadersMap());
                if (fromStringMap == null) {
                    supportSQLiteStatement.bindNull(7);
                } else {
                    supportSQLiteStatement.bindString(7, fromStringMap);
                }
                FileDetail fileDetail = commonEntity.getFileDetail();
                if (fileDetail != null) {
                    if (fileDetail.getPath() == null) {
                        supportSQLiteStatement.bindNull(8);
                    } else {
                        supportSQLiteStatement.bindString(8, fileDetail.getPath());
                    }
                    supportSQLiteStatement.bindLong(9, fileDetail.getLastModified());
                    supportSQLiteStatement.bindLong(10, fileDetail.getTotalSpace());
                    return;
                }
                supportSQLiteStatement.bindNull(8);
                supportSQLiteStatement.bindNull(9);
                supportSQLiteStatement.bindNull(10);
            }

            public final String createQuery() {
                return "INSERT OR REPLACE INTO `HybridOfflineCommonEntity`(`id`,`url`,`versionCode`,`md5`,`available`,`createTimestamp`,`headersMap`,`localfile_path`,`localfile_lastModified`,`localfile_totalSpace`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }
        };
        this.d = new EntityDeletionOrUpdateAdapter<CommonEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.2
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                CommonEntity commonEntity = (CommonEntity) obj;
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, commonEntity.getId());
                }
            }

            public final String createQuery() {
                return "DELETE FROM `HybridOfflineCommonEntity` WHERE `id` = ?";
            }
        };
        this.e = new EntityDeletionOrUpdateAdapter<CommonEntity>(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.3
            public final /* synthetic */ void bind(SupportSQLiteStatement supportSQLiteStatement, Object obj) {
                CommonEntity commonEntity = (CommonEntity) obj;
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, commonEntity.getId());
                }
                if (commonEntity.getUrl() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, commonEntity.getUrl());
                }
                supportSQLiteStatement.bindLong(3, (long) commonEntity.getVersionCode());
                if (commonEntity.getMd5() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, commonEntity.getMd5());
                }
                supportSQLiteStatement.bindLong(5, commonEntity.isAvailable() ? 1 : 0);
                supportSQLiteStatement.bindLong(6, commonEntity.getCreateTimestamp());
                String fromStringMap = b.this.a.fromStringMap(commonEntity.getHeadersMap());
                if (fromStringMap == null) {
                    supportSQLiteStatement.bindNull(7);
                } else {
                    supportSQLiteStatement.bindString(7, fromStringMap);
                }
                FileDetail fileDetail = commonEntity.getFileDetail();
                if (fileDetail != null) {
                    if (fileDetail.getPath() == null) {
                        supportSQLiteStatement.bindNull(8);
                    } else {
                        supportSQLiteStatement.bindString(8, fileDetail.getPath());
                    }
                    supportSQLiteStatement.bindLong(9, fileDetail.getLastModified());
                    supportSQLiteStatement.bindLong(10, fileDetail.getTotalSpace());
                } else {
                    supportSQLiteStatement.bindNull(8);
                    supportSQLiteStatement.bindNull(9);
                    supportSQLiteStatement.bindNull(10);
                }
                if (commonEntity.getId() == null) {
                    supportSQLiteStatement.bindNull(11);
                } else {
                    supportSQLiteStatement.bindString(11, commonEntity.getId());
                }
            }

            public final String createQuery() {
                return "UPDATE OR ABORT `HybridOfflineCommonEntity` SET `id` = ?,`url` = ?,`versionCode` = ?,`md5` = ?,`available` = ?,`createTimestamp` = ?,`headersMap` = ?,`localfile_path` = ?,`localfile_lastModified` = ?,`localfile_totalSpace` = ? WHERE `id` = ?";
            }
        };
        this.f = new SharedSQLiteStatement(roomDatabase) { // from class: com.jd.libs.hybrid.offlineload.db.b.4
            public final String createQuery() {
                return "DELETE FROM HybridOfflineCommonEntity";
            }
        };
    }

    /* JADX WARN: Removed duplicated region for block: B:19:0x00b4  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x00b6  */
    @Override // com.jd.libs.hybrid.offlineload.db.a
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final java.util.List<com.jd.libs.hybrid.offlineload.entity.CommonEntity> a() {
        /*
            r18 = this;
            r1 = r18
            java.lang.String r0 = "SELECT * FROM HybridOfflineCommonEntity"
            r2 = 0
            androidx.room.RoomSQLiteQuery r3 = androidx.room.RoomSQLiteQuery.acquire(r0, r2)
            androidx.room.RoomDatabase r0 = r1.b
            android.database.Cursor r4 = r0.query(r3)
            java.lang.String r0 = "id"
            int r0 = r4.getColumnIndexOrThrow(r0)     // Catch: all -> 0x00ea
            java.lang.String r5 = "url"
            int r5 = r4.getColumnIndexOrThrow(r5)     // Catch: all -> 0x00ea
            java.lang.String r6 = "versionCode"
            int r6 = r4.getColumnIndexOrThrow(r6)     // Catch: all -> 0x00ea
            java.lang.String r7 = "md5"
            int r7 = r4.getColumnIndexOrThrow(r7)     // Catch: all -> 0x00ea
            java.lang.String r8 = "available"
            int r8 = r4.getColumnIndexOrThrow(r8)     // Catch: all -> 0x00ea
            java.lang.String r9 = "createTimestamp"
            int r9 = r4.getColumnIndexOrThrow(r9)     // Catch: all -> 0x00ea
            java.lang.String r10 = "headersMap"
            int r10 = r4.getColumnIndexOrThrow(r10)     // Catch: all -> 0x00ea
            java.lang.String r11 = "localfile_path"
            int r11 = r4.getColumnIndexOrThrow(r11)     // Catch: all -> 0x00ea
            java.lang.String r12 = "localfile_lastModified"
            int r12 = r4.getColumnIndexOrThrow(r12)     // Catch: all -> 0x00ea
            java.lang.String r13 = "localfile_totalSpace"
            int r13 = r4.getColumnIndexOrThrow(r13)     // Catch: all -> 0x00ea
            java.util.ArrayList r14 = new java.util.ArrayList     // Catch: all -> 0x00ea
            int r15 = r4.getCount()     // Catch: all -> 0x00ea
            r14.<init>(r15)     // Catch: all -> 0x00ea
        L_0x0054:
            boolean r15 = r4.moveToNext()     // Catch: all -> 0x00ea
            if (r15 == 0) goto L_0x00e1
            boolean r15 = r4.isNull(r11)     // Catch: all -> 0x00ea
            if (r15 == 0) goto L_0x0071
            boolean r15 = r4.isNull(r12)     // Catch: all -> 0x00ea
            if (r15 == 0) goto L_0x0071
            boolean r15 = r4.isNull(r13)     // Catch: all -> 0x00ea
            if (r15 != 0) goto L_0x006d
            goto L_0x0071
        L_0x006d:
            r15 = 0
            r16 = r3
            goto L_0x008d
        L_0x0071:
            com.jd.libs.hybrid.offlineload.entity.FileDetail r15 = new com.jd.libs.hybrid.offlineload.entity.FileDetail     // Catch: all -> 0x00ea
            r15.<init>()     // Catch: all -> 0x00ea
            java.lang.String r2 = r4.getString(r11)     // Catch: all -> 0x00ea
            r15.setPath(r2)     // Catch: all -> 0x00ea
            r16 = r3
            long r2 = r4.getLong(r12)     // Catch: all -> 0x00df
            r15.setLastModified(r2)     // Catch: all -> 0x00df
            long r2 = r4.getLong(r13)     // Catch: all -> 0x00df
            r15.setTotalSpace(r2)     // Catch: all -> 0x00df
        L_0x008d:
            com.jd.libs.hybrid.offlineload.entity.CommonEntity r2 = new com.jd.libs.hybrid.offlineload.entity.CommonEntity     // Catch: all -> 0x00df
            r2.<init>()     // Catch: all -> 0x00df
            java.lang.String r3 = r4.getString(r0)     // Catch: all -> 0x00df
            r2.setId(r3)     // Catch: all -> 0x00df
            java.lang.String r3 = r4.getString(r5)     // Catch: all -> 0x00df
            r2.setUrl(r3)     // Catch: all -> 0x00df
            int r3 = r4.getInt(r6)     // Catch: all -> 0x00df
            r2.setVersionCode(r3)     // Catch: all -> 0x00df
            java.lang.String r3 = r4.getString(r7)     // Catch: all -> 0x00df
            r2.setMd5(r3)     // Catch: all -> 0x00df
            int r3 = r4.getInt(r8)     // Catch: all -> 0x00df
            if (r3 == 0) goto L_0x00b6
            r3 = 1
            goto L_0x00b7
        L_0x00b6:
            r3 = 0
        L_0x00b7:
            r2.setAvailable(r3)     // Catch: all -> 0x00df
            r3 = r5
            r17 = r6
            long r5 = r4.getLong(r9)     // Catch: all -> 0x00df
            r2.setCreateTimestamp(r5)     // Catch: all -> 0x00df
            java.lang.String r5 = r4.getString(r10)     // Catch: all -> 0x00df
            com.jd.libs.hybrid.offlineload.db.converter.RoomDateConverts r6 = r1.a     // Catch: all -> 0x00df
            java.util.Map r5 = r6.fromString(r5)     // Catch: all -> 0x00df
            r2.setHeadersMap(r5)     // Catch: all -> 0x00df
            r2.setFileDetail(r15)     // Catch: all -> 0x00df
            r14.add(r2)     // Catch: all -> 0x00df
            r5 = r3
            r3 = r16
            r6 = r17
            r2 = 0
            goto L_0x0054
        L_0x00df:
            r0 = move-exception
            goto L_0x00ed
        L_0x00e1:
            r16 = r3
            r4.close()
            r16.release()
            return r14
        L_0x00ea:
            r0 = move-exception
            r16 = r3
        L_0x00ed:
            r4.close()
            r16.release()
            throw r0
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.libs.hybrid.offlineload.db.b.a():java.util.List");
    }

    @Override // com.jd.libs.hybrid.offlineload.db.a
    public final void a(CommonEntity commonEntity) {
        this.b.beginTransaction();
        try {
            this.e.handle(commonEntity);
            this.b.setTransactionSuccessful();
        } finally {
            this.b.endTransaction();
        }
    }

    @Override // com.jd.libs.hybrid.offlineload.db.a
    public final void a(List<CommonEntity> list) {
        this.b.beginTransaction();
        try {
            this.c.insert(list);
            this.b.setTransactionSuccessful();
        } finally {
            this.b.endTransaction();
        }
    }

    @Override // com.jd.libs.hybrid.offlineload.db.a
    public final void b() {
        SupportSQLiteStatement acquire = this.f.acquire();
        this.b.beginTransaction();
        try {
            acquire.executeUpdateDelete();
            this.b.setTransactionSuccessful();
        } finally {
            this.b.endTransaction();
            this.f.release(acquire);
        }
    }

    @Override // com.jd.libs.hybrid.offlineload.db.a
    public final void b(CommonEntity commonEntity) {
        this.b.beginTransaction();
        try {
            this.d.handle(commonEntity);
            this.b.setTransactionSuccessful();
        } finally {
            this.b.endTransaction();
        }
    }

    @Override // com.jd.libs.hybrid.offlineload.db.a
    public final void b(List<CommonEntity> list) {
        this.b.beginTransaction();
        try {
            this.e.handleMultiple(list);
            this.b.setTransactionSuccessful();
        } finally {
            this.b.endTransaction();
        }
    }

    @Override // com.jd.libs.hybrid.offlineload.db.a
    public final void c(List<CommonEntity> list) {
        this.b.beginTransaction();
        try {
            this.d.handleMultiple(list);
            this.b.setTransactionSuccessful();
        } finally {
            this.b.endTransaction();
        }
    }
}
