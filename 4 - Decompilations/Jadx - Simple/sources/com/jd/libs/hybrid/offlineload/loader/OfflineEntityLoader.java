package com.jd.libs.hybrid.offlineload.loader;

import android.os.Build;
import android.text.TextUtils;
import com.jd.framework.json.JDJSON;
import com.jd.libs.hybrid.base.a;
import com.jd.libs.hybrid.base.b.c;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.jd.push.common.constant.Constants;
import com.jingdong.common.network.HttpGroupUtils;
import com.jingdong.common.utils.Configuration;
import com.jingdong.jdsdk.network.toolbox.HttpError;
import com.jingdong.jdsdk.network.toolbox.HttpGroup;
import com.jingdong.jdsdk.network.toolbox.HttpResponse;
import com.jingdong.jdsdk.network.toolbox.HttpSetting;
import com.jingdong.jdsdk.network.utils.Base64;
import com.jingdong.jdsdk.utils.JSONObjectProxy;

/* loaded from: classes.dex */
public class OfflineEntityLoader {

    /* loaded from: classes.dex */
    public interface Callback<T> {

        /* loaded from: classes.dex */
        public static class a extends Exception {
        }

        void a(Exception exc);

        void a(T t);
    }

    /* loaded from: classes.dex */
    static abstract class a implements HttpGroup.OnAllListener {
        a() {
        }

        public void onEnd(HttpResponse httpResponse) {
        }

        public void onError(HttpError httpError) {
        }

        public void onProgress(int i, int i2) {
        }

        public void onStart() {
        }
    }

    private static String a() {
        try {
            return com.jd.libs.hybrid.base.a.c().getPackageManager().getPackageInfo(com.jd.libs.hybrid.base.a.c().getPackageName(), 0).versionName;
        } catch (Exception e) {
            c.a("OfflineEntityLoader", e);
            return "";
        }
    }

    private static void a(HttpSetting httpSetting) {
        httpSetting.putQueryParam(Configuration.CLIENT, "android");
        httpSetting.putQueryParam("clientVersion", a());
        httpSetting.putQueryParam(Constants.JdPushMsg.JSON_KEY_OS_VERSION, Build.VERSION.RELEASE);
        httpSetting.putQueryParam("d_model", Build.MODEL);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static String b(String str) {
        String str2;
        String concat;
        if (!TextUtils.isEmpty(str)) {
            try {
                int length = str.length();
                if (length > 3) {
                    int i = length - 3;
                    int charAt = str.charAt(i) - '0';
                    if (charAt < 0 || charAt > 9) {
                        str2 = "OfflineEntityLoader";
                        concat = "Fail to decrypt. Encrypted string's insert-count is wrong, count = ".concat(String.valueOf(charAt));
                    } else {
                        return new String(Base64.decode((str.substring(0, i) + str.substring(length - 2)).substring(charAt)), "utf-8");
                    }
                } else {
                    str2 = "OfflineEntityLoader";
                    concat = "Fail to decrypt. Encrypted string too short, string = ".concat(String.valueOf(str));
                }
                c.e(str2, concat);
            } catch (Exception e) {
                c.a("OfflineEntityLoader", "Fail to decrypt.", (Throwable) e);
            }
        }
        c.e("OfflineEntityLoader", "Return the raw data = ".concat(String.valueOf(str)));
        return str;
    }

    public void a(final Callback<String> callback) {
        HttpSetting httpSetting = new HttpSetting();
        httpSetting.setCacheMode(2);
        httpSetting.setPost(false);
        if (a.b.e()) {
            httpSetting.setUseHttps(false);
        }
        if (a.b.b()) {
            httpSetting.setFunctionId("hybrid");
            httpSetting.putJsonParam("api-version", "1.2.0");
            httpSetting.putJsonParam("app-key", com.jd.libs.hybrid.base.a.d());
            httpSetting.putJsonParam("app-type", "android");
            a(httpSetting);
            httpSetting.setHost(a.b.c());
        } else {
            httpSetting.setFinalUrl(a.b.a() + "?api-version=1.2.0&app-key=" + com.jd.libs.hybrid.base.a.d() + "&app-type=android&client=android&clientVersion=" + a());
        }
        httpSetting.setListener(new a() { // from class: com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.1
            @Override // com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.a
            public final void onEnd(HttpResponse httpResponse) {
                try {
                    JSONObjectProxy jSONObject = httpResponse.getJSONObject();
                    if (jSONObject == null || !jSONObject.has("data")) {
                        callback.a((Exception) new IllegalArgumentException());
                        return;
                    }
                    callback.a((Callback) OfflineEntityLoader.b(jSONObject.getString("data")));
                } catch (Exception e) {
                    Callback callback2 = callback;
                    if (callback2 != null) {
                        callback2.a(e);
                    }
                }
            }

            @Override // com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.a
            public final void onError(HttpError httpError) {
                Callback callback2 = callback;
                if (callback2 != null) {
                    callback2.a((Exception) httpError);
                }
            }
        });
        c.c("OfflineEntityLoader", "Start to request all configs.");
        HttpGroupUtils.getHttpGroupaAsynPool().add(httpSetting);
    }

    public void a(String str, final Callback<OfflineEntity> callback) {
        HttpSetting httpSetting = new HttpSetting();
        httpSetting.setCacheMode(2);
        httpSetting.setPost(false);
        if (a.b.e()) {
            httpSetting.setUseHttps(false);
        }
        if (a.b.b()) {
            httpSetting.setFunctionId("hybridResourceItem");
            httpSetting.putJsonParam("id", str);
            httpSetting.putJsonParam("app-key", com.jd.libs.hybrid.base.a.d());
            httpSetting.putJsonParam("app-type", "android");
            httpSetting.putJsonParam("api-version", "1.2.0");
            a(httpSetting);
            httpSetting.setHost(a.b.c());
        } else {
            httpSetting.setFinalUrl(a.b.a() + "/resource/item?id=" + str + "&api-version=1.2.0&app-key=" + com.jd.libs.hybrid.base.a.d() + "&app-type=android&client=android&clientVersion=" + a());
            if (com.jd.libs.hybrid.base.a.b()) {
                httpSetting.setUseHttps(false);
            }
        }
        httpSetting.setListener(new a() { // from class: com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.2
            @Override // com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.a
            public final void onEnd(HttpResponse httpResponse) {
                try {
                    JSONObjectProxy jSONObject = httpResponse.getJSONObject();
                    if (jSONObject != null && jSONObject.has("data")) {
                        String b = OfflineEntityLoader.b(jSONObject.getString("data"));
                        if (!TextUtils.isEmpty(b) && !b.equalsIgnoreCase("null")) {
                            if (callback != null) {
                                OfflineEntity offlineEntity = (OfflineEntity) JDJSON.parseObject(b, OfflineEntity.class);
                                if (offlineEntity.useful()) {
                                    callback.a((Callback) offlineEntity);
                                    return;
                                } else {
                                    callback.a((Exception) new IllegalArgumentException());
                                    return;
                                }
                            } else {
                                return;
                            }
                        }
                        callback.a((Exception) new Callback.a());
                        return;
                    }
                    callback.a((Exception) new IllegalArgumentException());
                } catch (Exception e) {
                    Callback callback2 = callback;
                    if (callback2 != null) {
                        callback2.a(e);
                    }
                }
            }

            @Override // com.jd.libs.hybrid.offlineload.loader.OfflineEntityLoader.a
            public final void onError(HttpError httpError) {
                Callback callback2 = callback;
                if (callback2 != null) {
                    callback2.a((Exception) httpError);
                }
            }
        });
        c.c("OfflineEntityLoader", "Start to request config for appId = ".concat(String.valueOf(str)));
        HttpGroupUtils.getHttpGroupaAsynPool().add(httpSetting);
    }
}
