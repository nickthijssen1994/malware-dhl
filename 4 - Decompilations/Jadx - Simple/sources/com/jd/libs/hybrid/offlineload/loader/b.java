package com.jd.libs.hybrid.offlineload.loader;

import android.content.Context;
import android.text.TextUtils;
import com.jd.framework.network.JDResponse;
import com.jd.framework.network.error.JDError;
import com.jd.libs.hybrid.offlineload.a;
import com.jd.libs.hybrid.offlineload.a.d;
import com.jd.libs.hybrid.offlineload.db.OfflineDatabase;
import com.jd.libs.hybrid.offlineload.db.c;
import com.jd.libs.hybrid.offlineload.entity.FileDetail;
import com.jd.libs.hybrid.offlineload.entity.OfflineEntity;
import com.jd.libs.hybrid.offlineload.entity.OfflineFiles;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import net.lingala.zip4j.exception.ZipException;

/* loaded from: classes.dex */
public final class b {
    final Context a;
    final c b;
    final OfflineEntityLoader c = new OfflineEntityLoader();

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public class a extends com.jd.hybrid.downloader.a {
        private final OfflineEntity b;
        private final int c;

        a(OfflineEntity offlineEntity, int i) {
            this.b = offlineEntity;
            this.c = i;
        }

        static /* synthetic */ void a(a aVar, OfflineEntity offlineEntity, boolean z) {
            d.a(offlineEntity);
            offlineEntity.setZipFile((FileDetail) null);
            offlineEntity.setAvailable(false);
            if (z) {
                OfflineDatabase.a(b.this.a).a().a(offlineEntity);
            }
        }

        static /* synthetic */ void a(String str, String str2) {
            if (com.jd.libs.hybrid.base.b.c.a()) {
                com.jd.libs.hybrid.base.b.c.b("OfflineService", null, "项目(" + str + ")离线包下载或解压失败，原因:" + str2);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static boolean b(String str, String str2, String str3) {
            try {
                net.lingala.zip4j.a aVar = new net.lingala.zip4j.a(str);
                if (aVar.a()) {
                    if (TextUtils.isEmpty(str3)) {
                        com.jd.libs.hybrid.base.b.c.e("OfflineService", "[Offline-file] zip is encrypted, but password is empty.");
                        return false;
                    }
                    aVar.a(str3.toCharArray());
                }
                aVar.a(str2);
                return true;
            } catch (ZipException e) {
                com.jd.libs.hybrid.base.b.c.e("OfflineService", e.getMessage());
                return false;
            }
        }

        @Override // com.jd.hybrid.downloader.a, com.jd.framework.network.JDResponseListener
        public final void onEnd(JDResponse<File> jDResponse) {
            final File data = jDResponse.getData();
            com.jd.libs.hybrid.base.b.a.a().b().execute(new Runnable() { // from class: com.jd.libs.hybrid.offlineload.loader.b.a.1
                @Override // java.lang.Runnable
                public final void run() {
                    com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Start to unzip, file at " + data.getAbsolutePath() + ", app url = " + a.this.b.getDocumentUrl());
                    a.this.b.setZipFile(new FileDetail(data));
                    String a = d.a(b.this.a, a.this.b.getAppid(), null);
                    if (TextUtils.isEmpty(a)) {
                        a.a(a.this.b.getAppid(), "获取解压路径为空");
                        com.jd.libs.hybrid.base.b.c.e("OfflineService", "[Offline-file] unzip dest path is null/empty, will not try again until app next startup.");
                        c.b(a.this.b);
                    } else if (a.this.b.getFileInfo().getFileType().equalsIgnoreCase("zip")) {
                        try {
                            if (a.b(data.getAbsolutePath(), a, a.this.b.getFileInfo().getPassword())) {
                                String appid = a.this.b.getAppid();
                                String a2 = d.a(b.this.a, appid, a.this.b.getDocumentDir());
                                String a3 = d.a(b.this.a, appid, a.this.b.getSourceDir());
                                if (TextUtils.isEmpty(a2)) {
                                    a.a(a.this.b.getAppid(), "获取本地html文件路径为空");
                                    com.jd.libs.hybrid.base.b.c.e("OfflineService", "[Offline-file] local html file path is null/empty.");
                                    d.a(b.this.a, a.this.b);
                                    return;
                                }
                                File file = new File(a2);
                                if (TextUtils.isEmpty(a3)) {
                                    a.a(a.this.b.getAppid(), "获取本地静态资源路径为空");
                                    com.jd.libs.hybrid.base.b.c.e("OfflineService", "[Offline-file] local static file path is null/empty.");
                                    d.a(b.this.a, a.this.b);
                                    return;
                                }
                                File file2 = new File(a3);
                                if (!(file.exists() && (TextUtils.isEmpty(a.this.b.getSourceDir()) || file2.exists()))) {
                                    d.a(b.this.a, a.this.b);
                                    a.a(a.this.b.getAppid(), "缺少必要文件");
                                    com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Download error: missing files. Zip: " + data.getAbsolutePath() + ", unzip path: " + a);
                                    return;
                                }
                                a.this.b.setAvailable(true);
                                a.this.b.setDocumentFile(new FileDetail(file));
                                a.this.b.setSourceFile(new FileDetail(file2));
                                b.this.b.a(a.this.b);
                                if (com.jd.libs.hybrid.base.b.c.a()) {
                                    com.jd.libs.hybrid.base.b.c.b("OfflineService", null, "项目(" + a.this.b.getAppid() + ")离线包下载完毕，已可用。");
                                }
                                com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Download and update offline config success for " + a.this.b.getDocumentUrl());
                                return;
                            }
                            a.a(a.this.b.getAppid(), "解压失败");
                            com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Unzip fail " + a.this.b.getDocumentUrl());
                            a.a(a.this, a.this.b, a.this.b.isAvailable());
                        } catch (Exception e) {
                            String appid2 = a.this.b.getAppid();
                            a.a(appid2, "内部错误，" + e.getMessage());
                            com.jd.libs.hybrid.base.b.c.e("OfflineService", e.getMessage());
                        }
                    } else {
                        a.a(a.this.b.getAppid(), "下载的文件不是一个zip文件");
                        com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Save fail " + a.this.b.getDocumentUrl() + " is not a zip, delete it.");
                        a aVar = a.this;
                        a.a(aVar, aVar.b, a.this.b.isAvailable());
                    }
                }
            });
        }

        @Override // com.jd.hybrid.downloader.a, com.jd.framework.network.JDResponseListener
        public final void onError(JDError jDError) {
            if (this.c < com.jd.libs.hybrid.base.a.f) {
                com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Retry download " + this.b.getDocumentUrl());
                b.a(b.this, this.b, this.c + 1);
                c.c(this.b);
                return;
            }
            c.b(this.b);
        }
    }

    public b(Context context) {
        this.a = context.getApplicationContext();
        this.b = OfflineDatabase.a(this.a).a();
    }

    static /* synthetic */ OfflineFiles a(boolean z, OfflineEntity offlineEntity) {
        return z ? new OfflineFiles(true, offlineEntity.getDocumentUrl(), offlineEntity.getOriginalUrl(), offlineEntity.getSourceRoot(), offlineEntity.getDocumentFile().getPath(), offlineEntity.getSourceFile().getPath(), offlineEntity.getFileInfo().getVersionCode()) : new OfflineFiles(false, offlineEntity.getDocumentUrl(), offlineEntity.getOriginalUrl(), offlineEntity.getSourceRoot(), null, null, offlineEntity.getFileInfo().getVersionCode());
    }

    static /* synthetic */ List a(b bVar, a.b bVar2) {
        ArrayList<OfflineEntity> arrayList;
        String str;
        StringBuilder sb;
        int size = bVar2.a != null ? bVar2.a.size() : 0;
        int size2 = bVar2.b != null ? bVar2.b.size() : 0;
        if (size > 0 || size2 > 0) {
            arrayList = new ArrayList(size + size2);
            if (size > 0) {
                arrayList.addAll(bVar2.a);
            }
            if (size2 > 0) {
                arrayList.addAll(bVar2.b);
            }
        } else {
            arrayList = null;
        }
        if (arrayList == null || arrayList.isEmpty()) {
            com.jd.libs.hybrid.base.b.c.c("OfflineService", "[Offline-file] Final local offline config list is empty, no need to download.");
            return null;
        }
        Collections.sort(arrayList);
        ArrayList arrayList2 = new ArrayList();
        int i = 0;
        for (OfflineEntity offlineEntity : arrayList) {
            i++;
            if (com.jd.libs.hybrid.base.a.b()) {
                com.jd.libs.hybrid.base.b.c.b("OfflineService", null, String.format(Locale.getDefault(), "%d:项目(%s)的离线包优先级=%s", Integer.valueOf(i), offlineEntity.getAppid(), Float.valueOf(offlineEntity.getPriority())));
            }
            if (i <= com.jd.libs.hybrid.base.a.h) {
                if (!offlineEntity.isAvailable()) {
                    if (!c.a(offlineEntity)) {
                        arrayList2.add(offlineEntity);
                        if (com.jd.libs.hybrid.base.a.b()) {
                            str = "OfflineService-Priority";
                            sb = new StringBuilder("[Offline-file] Need to download because its priority is high enough within max count(");
                            sb.append(com.jd.libs.hybrid.base.a.h);
                            sb.append("), priority = ");
                        }
                    } else if (com.jd.libs.hybrid.base.a.b()) {
                        str = "OfflineService-Priority";
                        sb = new StringBuilder("[Offline-file] Need to download but it has exceed the max retry count, priority = ");
                    }
                } else if (com.jd.libs.hybrid.base.a.b()) {
                    str = "OfflineService-Priority";
                    sb = new StringBuilder("[Offline-file] Do nothing for existed offline files because its priority is high enough within max count(");
                    sb.append(com.jd.libs.hybrid.base.a.h);
                    sb.append("), priority = ");
                }
            } else if (offlineEntity.isAvailable()) {
                if (com.jd.libs.hybrid.base.a.b()) {
                    com.jd.libs.hybrid.base.b.c.c("OfflineService-Priority", "[Offline-file] Delete existed offline files because of exceeding max count(" + com.jd.libs.hybrid.base.a.h + "), priority = " + offlineEntity.getPriority() + ", url: " + offlineEntity.getDocumentUrl());
                }
                d.a(bVar.a, offlineEntity);
                offlineEntity.setAvailable(false);
                offlineEntity.setZipFile((FileDetail) null);
                offlineEntity.setDocumentFile((FileDetail) null);
                offlineEntity.setSourceFile((FileDetail) null);
                if (bVar2.b == null) {
                    bVar2.b = new ArrayList();
                }
                if (!bVar2.b.contains(offlineEntity)) {
                    bVar2.b.add(offlineEntity);
                }
            } else if (com.jd.libs.hybrid.base.a.b()) {
                str = "OfflineService-Priority";
                sb = new StringBuilder("[Offline-file] Won't download because of exceeding max count(");
                sb.append(com.jd.libs.hybrid.base.a.h);
                sb.append("), priority = ");
            }
            sb.append(offlineEntity.getPriority());
            sb.append(", url: ");
            sb.append(offlineEntity.getDocumentUrl());
            com.jd.libs.hybrid.base.b.c.c(str, sb.toString());
        }
        return arrayList2;
    }

    static /* synthetic */ void a(b bVar, final OfflineEntity offlineEntity) {
        com.jd.libs.hybrid.base.b.a.a().b().execute(new Runnable() { // from class: com.jd.libs.hybrid.offlineload.loader.b.5
            @Override // java.lang.Runnable
            public final void run() {
                try {
                    d.a(b.this.a, offlineEntity);
                    b.this.b.b(offlineEntity);
                } catch (Exception e) {
                    com.jd.libs.hybrid.base.b.c.a("OfflineService", e);
                }
            }
        });
    }

    static /* synthetic */ void a(b bVar, OfflineEntity offlineEntity, int i) {
        bVar.a(Collections.singletonList(offlineEntity), i, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(List<OfflineEntity> list, int i, boolean z) {
        int lastIndexOf;
        com.jd.hybrid.downloader.b a2 = com.jd.hybrid.downloader.b.a();
        if (a2 != null) {
            ArrayList arrayList = new ArrayList(list.size());
            for (OfflineEntity offlineEntity : list) {
                String url = offlineEntity.getFileInfo().getUrl();
                String str = "项目(" + offlineEntity.getAppid() + ")离线包";
                String substring = (url.endsWith("/") || -1 == (lastIndexOf = url.lastIndexOf("/"))) ? "" : url.substring(lastIndexOf + 1);
                if (TextUtils.isEmpty(substring)) {
                    substring = com.jd.libs.hybrid.offlineload.a.c.a();
                }
                com.jd.hybrid.downloader.c cVar = new com.jd.hybrid.downloader.c(str, url, "hybrid/.preload/.zip", (System.currentTimeMillis() + ((long) new Random().nextInt(1000))) + "_" + substring, true, (int) (offlineEntity.getPriority() * 1000.0f));
                cVar.a(0);
                cVar.a(new com.jd.hybrid.downloader.b.a(offlineEntity.getFileInfo().getMd5()));
                cVar.a(new a(offlineEntity, i));
                arrayList.add(cVar);
            }
            a2.a(arrayList, z);
        }
    }
}
