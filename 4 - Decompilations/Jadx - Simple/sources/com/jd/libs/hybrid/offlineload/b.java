package com.jd.libs.hybrid.offlineload;

import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import androidx.annotation.CallSuper;
import com.jd.framework.json.JDJSON;
import com.jd.libs.hybrid.base.b.c;
import com.jd.libs.hybrid.offlineload.a;
import com.jd.libs.hybrid.offlineload.entity.CommonFile;
import com.jd.libs.hybrid.offlineload.entity.OfflineFiles;
import com.jd.sentry.performance.network.instrumentation.x5webview.ShooterX5WebViewClient;
import com.tencent.smtt.export.external.interfaces.WebResourceRequest;
import com.tencent.smtt.export.external.interfaces.WebResourceResponse;
import com.tencent.smtt.sdk.WebView;
import java.util.List;
import java.util.Map;

/* loaded from: classes.dex */
public class b extends ShooterX5WebViewClient {
    private a a;
    private String b;
    private volatile List<CommonFile> d;
    private volatile OfflineFiles e;
    private Uri m;
    private Uri n;
    private volatile WebView c = null;
    private volatile boolean f = false;
    private volatile Handler g = null;
    private volatile Runnable h = null;
    private volatile boolean i = false;
    private int j = com.jd.libs.hybrid.base.a.a;
    private boolean k = false;
    private a l = null;
    private boolean o = false;

    /* loaded from: classes.dex */
    public interface a {
        void a();

        void a(String str, String str2);

        void a(String str, boolean z, boolean z2);
    }

    public b(String str) {
        if (com.jd.libs.hybrid.base.a.a()) {
            this.b = str;
            if (!TextUtils.isEmpty(str)) {
                this.a = new a(com.jd.libs.hybrid.base.a.c());
                this.a.a(str, new a.AbstractC0032a<OfflineFiles>() { // from class: com.jd.libs.hybrid.offlineload.b.1
                    @Override // com.jd.libs.hybrid.offlineload.a.AbstractC0032a
                    public final /* synthetic */ void a(OfflineFiles offlineFiles) {
                        OfflineFiles offlineFiles2 = offlineFiles;
                        if (!b.this.i) {
                            if (c.a()) {
                                c.c("OfflineWebClient", "Callback for fetching latest info of entry url(" + b.this.b + ") from network, Info = " + JDJSON.toJSONString(offlineFiles2));
                            }
                            if (b.this.f) {
                                b.this.a(false, offlineFiles2);
                            }
                        }
                    }

                    @Override // com.jd.libs.hybrid.offlineload.a.AbstractC0032a
                    public final /* synthetic */ void a(OfflineFiles offlineFiles, boolean z) {
                        String str2;
                        String str3;
                        OfflineFiles offlineFiles2 = offlineFiles;
                        if (!b.this.i) {
                            b.this.e = null;
                            b.this.f = false;
                            if (offlineFiles2 == null) {
                                c.d("OfflineWebClient", "Offline config of entry url(" + b.this.b + ") CANNOT found in local database.");
                                return;
                            }
                            b.this.e = offlineFiles2;
                            if (b.this.e.isAvailable()) {
                                if (c.a()) {
                                    c.a("OfflineWebClient", "找到(" + b.this.b + ")离线包配置信息，离线文件可用，配置信息:", JDJSON.toJSONString(b.this.e));
                                }
                                StringBuilder sb = new StringBuilder("Offline config and local files of entry url(");
                                sb.append(b.this.b);
                                sb.append(") Found in local database.");
                                if (c.a()) {
                                    str3 = " Info: " + JDJSON.toJSONString(offlineFiles2);
                                } else {
                                    str3 = "";
                                }
                                sb.append(str3);
                                c.d("OfflineWebClient", sb.toString());
                                if (z) {
                                    c.c("OfflineWebClient", "Need to fetch the latest info from network");
                                    b.this.g = new Handler(Looper.getMainLooper());
                                    b.this.h = new Runnable() { // from class: com.jd.libs.hybrid.offlineload.b.1.1
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            c.c("OfflineWebClient", "Timer finished.");
                                            b.this.a(true, (OfflineFiles) null);
                                        }
                                    };
                                    c.c("OfflineWebClient", "Start timer of " + b.this.j + "ms.");
                                    b.this.f = true;
                                    b.this.g.postDelayed(b.this.h, (long) b.this.j);
                                    return;
                                }
                                return;
                            }
                            StringBuilder sb2 = new StringBuilder("Offline local files is NOT available even though config of entry url(");
                            sb2.append(b.this.b);
                            sb2.append(") is found in local database.");
                            if (c.a()) {
                                str2 = " Info: " + JDJSON.toJSONString(offlineFiles2);
                            } else {
                                str2 = "";
                            }
                            sb2.append(str2);
                            c.d("OfflineWebClient", sb2.toString());
                            if (c.a()) {
                                c.a("OfflineWebClient", "找到(" + b.this.b + ")离线包配置信息，但离线文件未下载完毕，配置信息:", JDJSON.toJSONString(b.this.e));
                            }
                        }
                    }
                });
                this.a.a(new a.AbstractC0032a<List<CommonFile>>() { // from class: com.jd.libs.hybrid.offlineload.b.2
                    @Override // com.jd.libs.hybrid.offlineload.a.AbstractC0032a
                    public final /* bridge */ /* synthetic */ void a(List<CommonFile> list) {
                    }

                    @Override // com.jd.libs.hybrid.offlineload.a.AbstractC0032a
                    public final /* bridge */ /* synthetic */ void a(List<CommonFile> list, boolean z) {
                        List<CommonFile> list2 = list;
                        if (!b.this.i) {
                            b.this.d = list2;
                        }
                    }
                });
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x022f A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:107:0x0265 A[Catch: Exception -> 0x027b, TRY_LEAVE, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x010b A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0193 A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x01f5 A[Catch: Exception -> 0x027b, TryCatch #0 {Exception -> 0x027b, blocks: (B:13:0x0029, B:15:0x002d, B:16:0x0030, B:18:0x0035, B:20:0x003d, B:22:0x004d, B:24:0x0055, B:28:0x0068, B:30:0x006c, B:32:0x0074, B:34:0x0084, B:36:0x008c, B:43:0x00a4, B:45:0x00b0, B:47:0x00c0, B:48:0x00ef, B:50:0x00fc, B:51:0x0105, B:53:0x010b, B:55:0x0116, B:57:0x011c, B:62:0x012c, B:65:0x0137, B:67:0x013f, B:69:0x0147, B:71:0x014f, B:74:0x0158, B:76:0x0160, B:79:0x0169, B:81:0x0171, B:85:0x018d, B:87:0x0193, B:91:0x01a3, B:92:0x01ee, B:94:0x01f5, B:96:0x021b, B:97:0x0224, B:98:0x0227, B:100:0x022f, B:103:0x0236, B:105:0x0244, B:106:0x0261, B:107:0x0265), top: B:113:0x0029 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private com.jd.libs.hybrid.offlineload.OfflineWebRezResp a(com.tencent.smtt.sdk.WebView r12, android.net.Uri r13) {
        /*
        // Method dump skipped, instructions count: 649
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.libs.hybrid.offlineload.b.a(com.tencent.smtt.sdk.WebView, android.net.Uri):com.jd.libs.hybrid.offlineload.OfflineWebRezResp");
    }

    private String a(Uri uri, Map<String, String> map) {
        if (uri != null && !TextUtils.isEmpty(uri.toString()) && this.d != null && !this.d.isEmpty()) {
            for (CommonFile commonFile : this.d) {
                if (commonFile.getUrl().equalsIgnoreCase(uri.toString())) {
                    if (commonFile.getHeaderParams() != null) {
                        map.putAll(commonFile.getHeaderParams());
                        map.put("X-Cache", "jd");
                    }
                    return commonFile.getFilePath();
                }
            }
        }
        return null;
    }

    private static void a(String str, Map<String, String> map) {
        for (String str2 : map.keySet()) {
            if (!(TextUtils.isEmpty(str2) || !str2.equals(str) || TextUtils.isEmpty(map.get(str2)))) {
                map.remove(str2);
                return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public synchronized void a(boolean z, OfflineFiles offlineFiles) {
        String str;
        String str2;
        if (this.f) {
            this.f = false;
            if (this.g != null) {
                if (this.h != null) {
                    c.c("OfflineWebClient", "Cancel timer.");
                    this.g.removeCallbacks(this.h);
                    this.h = null;
                }
                this.g = null;
            }
            if (this.e != null && offlineFiles != null) {
                boolean z2 = true;
                if (this.e.getVersion() != offlineFiles.getVersion()) {
                    c.d("OfflineWebClient", "Latest info differs with cache, load URL for web on network.");
                    if (c.a()) {
                        c.a("OfflineWebClient", "最新配置已变更，不使用离线包，重新加载线上H5。最新配置：", JDJSON.toJSONString(offlineFiles));
                    }
                } else if (!offlineFiles.isAvailable()) {
                    c.d("OfflineWebClient", "Fail to fetch latest info, load URL for web on network.");
                    if (c.a()) {
                        c.a("OfflineWebClient", "未能成功获取到最新线上配置，不使用离线包，重新加载线上H5");
                    }
                } else {
                    z2 = false;
                }
                if (z2) {
                    this.m = null;
                    this.n = null;
                    this.e = offlineFiles;
                    c();
                    return;
                }
                c.c("OfflineWebClient", "Latest info's version is same with cache's, do nothing.");
            } else if (z) {
                c.d("OfflineWebClient", "Fetch info timeout, load URL for real web.");
                if (c.a()) {
                    str = "OfflineWebClient";
                    str2 = "规定时间内未能获取到最新线上配置，不使用离线包，重新加载线上H5";
                    c.a(str, str2);
                }
                this.m = null;
                this.n = null;
                this.e = null;
                c();
            } else {
                c.d("OfflineWebClient", "Has no config on server, load URL for real web.");
                if (c.a()) {
                    str = "OfflineWebClient";
                    str2 = "最新线上配置已下线此离线包配置，不使用离线包，重新加载线上H5";
                    c.a(str, str2);
                }
                this.m = null;
                this.n = null;
                this.e = null;
                c();
            }
        }
    }

    private void c() {
        if (this.c != null) {
            AnonymousClass3 r0 = new Runnable() { // from class: com.jd.libs.hybrid.offlineload.b.3
                @Override // java.lang.Runnable
                public final void run() {
                    c.c("OfflineWebClient", "Reload for real web.");
                    if (b.this.l != null) {
                        b.this.l.a();
                    }
                    if (b.this.c != null) {
                        b.this.c.reload();
                    }
                }
            };
            if (Looper.myLooper() == Looper.getMainLooper()) {
                r0.run();
            } else {
                this.c.post(r0);
            }
        }
    }

    private void d() {
        this.m = Uri.parse(this.e.getHtmlPath());
        this.n = !TextUtils.isEmpty(this.e.getOriginHtmlPath()) ? Uri.parse(this.e.getOriginHtmlPath()) : null;
    }

    public OfflineFiles a() {
        return this.e;
    }

    public void a(a aVar) {
        this.l = aVar;
    }

    public void b() {
        c.c("OfflineWebClient", "Calling destroy for OfflineWebClient.");
        this.i = true;
        this.c = null;
        this.f = false;
        this.d = null;
        this.e = null;
        if (this.g != null) {
            if (this.h != null) {
                this.g.removeCallbacks(this.h);
                this.h = null;
            }
            this.g = null;
        }
        this.a = null;
    }

    public void onPageFinished(WebView webView, String str) {
        this.k = false;
        b.super.onPageFinished(webView, str);
    }

    public void onPageStarted(WebView webView, String str, Bitmap bitmap) {
        b.super.onPageStarted(webView, str, bitmap);
        if (!this.o && this.e != null && !TextUtils.isEmpty(this.e.getHtmlPath())) {
            if (this.m == null) {
                d();
            }
            Uri parse = Uri.parse(str);
            Uri uri = this.m;
            boolean z = false;
            boolean z2 = (uri == null || uri.getHost() == null || !this.m.getHost().equals(parse.getHost()) || this.m.getPath() == null || !this.m.getPath().equals(parse.getPath())) ? false : true;
            Uri uri2 = this.n;
            if (!(uri2 == null || uri2.getHost() == null || !this.n.getHost().equals(parse.getHost()) || this.n.getPath() == null || !this.n.getPath().equals(parse.getPath()))) {
                z = true;
            }
            if (z2 || z) {
                this.o = true;
                a aVar = this.l;
                if (aVar != null) {
                    aVar.a(str, true, this.k);
                }
            }
        }
    }

    @CallSuper
    public WebResourceResponse shouldInterceptRequest(WebView webView, WebResourceRequest webResourceRequest) {
        OfflineWebRezResp a2;
        this.c = webView;
        return (Build.VERSION.SDK_INT < 21 || (a2 = a(webView, webResourceRequest.getUrl())) == null) ? b.super.shouldInterceptRequest(webView, webResourceRequest) : a2;
    }
}
