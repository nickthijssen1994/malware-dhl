package com.jd.libs.hybrid.preload;

import android.content.Context;
import android.net.Uri;
import android.os.SystemClock;
import android.text.TextUtils;
import com.huawei.hms.framework.common.ContainerUtils;
import com.jd.framework.json.JDJSONObject;
import com.jd.libs.hybrid.base.a;
import com.jd.libs.hybrid.base.b.c;
import com.jd.libs.hybrid.preload.a.b;
import com.jd.libs.hybrid.preload.a.d;
import com.jd.libs.hybrid.preload.c;
import com.jd.libs.hybrid.preload.entity.PreloadInfoEntity;
import com.jingdong.jdsdk.network.toolbox.HttpResponse;
import com.tencent.smtt.sdk.CookieManager;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/* loaded from: classes.dex */
public class a {
    private static b a;
    private static a c;
    private Map<String, AbstractC0035a> b;
    private d d;

    /* renamed from: com.jd.libs.hybrid.preload.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public interface AbstractC0035a {
        void a(int i, String str);
    }

    private a() {
        if (c != null) {
            throw new IllegalStateException("instance is not null !");
        }
    }

    public static a a() {
        if (c == null) {
            synchronized (a.class) {
                if (c == null) {
                    c = new a();
                }
            }
        }
        return c;
    }

    public static String a(String str, String str2, String str3) {
        if (TextUtils.isEmpty(str) || TextUtils.isEmpty(str2)) {
            return str;
        }
        return str.replaceAll("(" + str2 + "=[^&]*)", str2 + ContainerUtils.KEY_VALUE_DELIMITER + str3);
    }

    private static Map<String, String> a(Map<String, String> map, String str) {
        List<String> queryParameters;
        if (TextUtils.isEmpty(str)) {
            return new HashMap();
        }
        try {
            Uri parse = Uri.parse(str);
            Set<String> queryParameterNames = parse.getQueryParameterNames();
            if (!queryParameterNames.isEmpty()) {
                if (map == null) {
                    map = new HashMap<>(queryParameterNames.size());
                }
                for (String str2 : queryParameterNames) {
                    if (!map.containsKey(str2) && (queryParameters = parse.getQueryParameters(str2)) != null && !queryParameters.isEmpty()) {
                        map.put(str2, queryParameters.get(queryParameters.size() - 1));
                    }
                }
            }
            c.c("DataProvider", "uri getUriQueryMap -->".concat(String.valueOf(map)));
            return map;
        } catch (Exception e) {
            c.e("DataProvider", "uri getUriQueryMap error -->" + e.toString());
            return new HashMap();
        }
    }

    static /* synthetic */ void a(a aVar, String str) {
        AbstractC0035a aVar2;
        Map<String, AbstractC0035a> map = aVar.b;
        if (map != null && (aVar2 = map.get(str)) != null) {
            d dVar = aVar.d;
            if (dVar == null) {
                aVar2.a(-2, null);
                return;
            }
            int c2 = dVar.c(str);
            if (c2 == 1) {
                aVar2.a(200, aVar.d.d(str));
            } else if (c2 == 2) {
                aVar2.a(-1, null);
            } else {
                aVar2.a(-2, null);
            }
            aVar.d.b(str);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    static /* synthetic */ void a(a aVar, String str, PreloadInfoEntity preloadInfoEntity, Map map, String str2) {
        HashMap hashMap;
        if (preloadInfoEntity == null) {
            return;
        }
        if (!("0".equals(preloadInfoEntity.getRequestType()) || "1".equals(preloadInfoEntity.getRequestType()) || "2".equals(preloadInfoEntity.getRequestType()))) {
            return;
        }
        if ("1".equals(preloadInfoEntity.getRequestType()) && TextUtils.isEmpty(preloadInfoEntity.getRequestUrl())) {
            return;
        }
        if (!"0".equals(preloadInfoEntity.getRequestType()) || !TextUtils.isEmpty(preloadInfoEntity.getFunctionId())) {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            if (c.a()) {
                c.a("DataProvider", "开始预加载数据(业务url:" + str + ")");
            }
            if (aVar.d == null) {
                aVar.d = new d();
            }
            final String str3 = preloadInfoEntity.getAppid() + "_" + str2;
            d dVar = aVar.d;
            if (!(str3 == null || dVar.a == null || dVar.b == null)) {
                dVar.a.put(str3, 0);
            }
            d dVar2 = new d(str, "0".equals(preloadInfoEntity.getRequestType()));
            if (a.b.e()) {
                dVar2.setUseHttps(false);
            }
            if (!"0".equals(preloadInfoEntity.getRequestType())) {
                String a2 = CustomParamProvider.a();
                c.c("DataProvider", "preLoad userAgent -->".concat(String.valueOf(a2)));
                if (!TextUtils.isEmpty(a2)) {
                    dVar2.d = a2;
                    if (preloadInfoEntity.getRequestUrl() != null) {
                        dVar2.setUrl(preloadInfoEntity.getRequestUrl());
                    }
                } else {
                    d dVar3 = aVar.d;
                    if (!(str3 == null || dVar3.a == null || dVar3.b == null)) {
                        dVar3.a.remove(str3);
                        dVar3.b.remove(str3);
                    }
                    c.e("DataProvider", "preload onError --> This is Non-GateWay request, but UserAgent is null/empty.");
                    if (c.a()) {
                        c.b("DataProvider", "此非网关类型的预加载请求中，UserAgent为空，放弃预加载。");
                        return;
                    }
                    return;
                }
            }
            Uri parse = !TextUtils.isEmpty(preloadInfoEntity.getRequestUrl()) ? Uri.parse(preloadInfoEntity.getRequestUrl()) : null;
            Map hashMap2 = new HashMap();
            dVar2.setHost((parse == null || TextUtils.isEmpty(parse.getHost())) ? a.b.c() : parse.getHost());
            if (!TextUtils.isEmpty(preloadInfoEntity.getRequestUrl())) {
                hashMap2 = a(hashMap2, preloadInfoEntity.getRequestUrl());
            }
            if (!(preloadInfoEntity.getHeader() == null && CustomParamProvider.b() == null)) {
                Map headerMap = dVar2.getHeaderMap();
                if (headerMap == null || headerMap.size() == 0) {
                    headerMap = new HashMap();
                    dVar2.setHeaderMap(headerMap);
                }
                if (preloadInfoEntity.getHeader() != null) {
                    headerMap.putAll(preloadInfoEntity.getHeader());
                }
                if (CustomParamProvider.b() != null) {
                    headerMap.putAll(CustomParamProvider.b());
                }
            }
            if (a == null || preloadInfoEntity.getExtraKeys() == null || preloadInfoEntity.getExtraKeys().isEmpty()) {
                hashMap = null;
            } else {
                hashMap = new HashMap();
                for (String str4 : preloadInfoEntity.getExtraKeys()) {
                    if (!TextUtils.isEmpty(str4)) {
                        hashMap.put(str4, a.a(str4));
                    }
                }
            }
            if (!"0".equals(preloadInfoEntity.getRequestType()) && preloadInfoEntity.getMappings() != null && !preloadInfoEntity.getMappings().isEmpty()) {
                hashMap = new HashMap();
                for (String str5 : preloadInfoEntity.getMappings().keySet()) {
                    String str6 = (String) preloadInfoEntity.getMappings().get(str5);
                    if (!TextUtils.isEmpty(str6)) {
                        hashMap.put(str6, CustomParamProvider.a(str5));
                    }
                }
            }
            Map a3 = (preloadInfoEntity.getUrlParamsState() != 1 || TextUtils.isEmpty(str)) ? map : a(map, str);
            HashMap hashMap3 = new HashMap();
            JDJSONObject jDJSONObject = new JDJSONObject();
            if (hashMap != null && !hashMap.isEmpty()) {
                hashMap3.putAll(hashMap);
                jDJSONObject.putAll(hashMap);
            }
            if (hashMap2 != null && !hashMap2.isEmpty()) {
                hashMap3.putAll(hashMap2);
            }
            if (preloadInfoEntity.getParams() != null && !preloadInfoEntity.getParams().isEmpty()) {
                hashMap3.putAll(preloadInfoEntity.getParams());
            }
            if (preloadInfoEntity.getBody() != null && !preloadInfoEntity.getBody().isEmpty()) {
                jDJSONObject.putAll(preloadInfoEntity.getBody());
            }
            if (a3 != null && !a3.isEmpty()) {
                hashMap3.putAll(a3);
                jDJSONObject.putAll(a3);
            }
            String url = dVar2.getUrl();
            HashMap hashMap4 = new HashMap();
            for (Map.Entry entry : hashMap3.entrySet()) {
                if (preloadInfoEntity != null && !TextUtils.isEmpty((CharSequence) entry.getKey())) {
                    dVar2.putQueryParam((String) entry.getKey(), (String) entry.getValue());
                    if (hashMap2 == null || !hashMap2.containsKey(entry.getKey())) {
                        hashMap4.put(entry.getKey(), entry.getValue());
                    } else {
                        url = a(url, (String) entry.getKey(), (String) entry.getValue());
                    }
                }
            }
            dVar2.c = hashMap4;
            dVar2.setRequestUrl(url);
            if (!jDJSONObject.isEmpty()) {
                dVar2.putJsonParam(jDJSONObject);
                dVar2.b = jDJSONObject;
            }
            dVar2.setPost(!"get".equalsIgnoreCase(preloadInfoEntity.getMethod()));
            if ("0".equals(preloadInfoEntity.getRequestType())) {
                dVar2.setFunctionId(preloadInfoEntity.getFunctionId());
            }
            dVar2.setUseFastJsonParser(true);
            dVar2.setEffect(0);
            dVar2.setBusinessLayerCheckSwitch(false);
            c.a("接口预加载查询耗时：" + (SystemClock.elapsedRealtime() - elapsedRealtime));
            if (a.b.d() != null) {
                Map headerMap2 = dVar2.getHeaderMap();
                headerMap2.put("User-Agent", dVar2.d);
                headerMap2.put("Origin", str);
                headerMap2.put("Cookie", CookieManager.getInstance().getCookie(str) == null ? "" : CookieManager.getInstance().getCookie(str));
                headerMap2.put("Referer", str);
                JDJSONObject jDJSONObject2 = dVar2.b;
                a.b.d().a(dVar2.getRequestUrl(), headerMap2, dVar2.getMapParams(), jDJSONObject2 != null ? jDJSONObject2.getInnerMap() : null, dVar2.isPost(), new a.b.c() { // from class: com.jd.libs.hybrid.preload.a.3
                });
            } else {
                AnonymousClass2 r1 = new b() { // from class: com.jd.libs.hybrid.preload.a.2
                    @Override // com.jd.libs.hybrid.preload.a.b
                    public final void a(com.jd.libs.hybrid.preload.a.a aVar2) {
                        if (a.this.d != null) {
                            a.this.d.a(str3);
                        }
                        if (c.a()) {
                            c.a("DataProvider", "预加载失败，error：" + aVar2.toString());
                        }
                        a.a(a.this, str3);
                    }

                    @Override // com.jd.libs.hybrid.preload.a.b
                    public final void a(com.jd.libs.hybrid.preload.a.c cVar) {
                        HttpResponse httpResponse = cVar.b;
                        String jSONString = (httpResponse == null || httpResponse.getFastJsonObject() == null) ? cVar.a : httpResponse.getFastJsonObject().toJSONString();
                        if (a.this.d != null) {
                            a.this.d.a(str3, jSONString);
                        }
                        if (c.a()) {
                            c.a("DataProvider", "预加载成功：", jSONString);
                        }
                        a.a(a.this, str3);
                    }
                };
                if (dVar2.a) {
                    c.c("OKHttpSetting", "preload(GateWay) setHttpListener -->");
                    dVar2.setListener(
                    /*  JADX ERROR: Method code generation error
                        jadx.core.utils.exceptions.CodegenException: Error generate insn: 0x03da: INVOKE  
                          (r5v4 'dVar2' com.jd.libs.hybrid.preload.a.d)
                          (wrap: com.jingdong.jdsdk.network.toolbox.HttpGroup$HttpTaskListener : 0x03d7: CONSTRUCTOR  (r0v14 com.jingdong.jdsdk.network.toolbox.HttpGroup$HttpTaskListener A[REMOVE]) = (r5v4 'dVar2' com.jd.libs.hybrid.preload.a.d), (r1v6 'r1' com.jd.libs.hybrid.preload.a$2) call: com.jd.libs.hybrid.preload.a.d.1.<init>(com.jd.libs.hybrid.preload.a.d, com.jd.libs.hybrid.preload.a.b):void type: CONSTRUCTOR)
                         type: VIRTUAL call: com.jd.libs.hybrid.preload.a.d.setListener(com.jingdong.jdsdk.network.toolbox.HttpGroup$HttpTaskListener):void in method: com.jd.libs.hybrid.preload.a.a(com.jd.libs.hybrid.preload.a, java.lang.String, com.jd.libs.hybrid.preload.entity.PreloadInfoEntity, java.util.Map, java.lang.String):void, file: classes.dex
                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:270)
                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:233)
                        	at jadx.core.codegen.RegionGen.makeSimpleBlock(RegionGen.java:90)
                        	at jadx.core.dex.nodes.IBlock.generate(IBlock.java:15)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.codegen.RegionGen.makeRegionIndent(RegionGen.java:79)
                        	at jadx.core.codegen.RegionGen.makeIf(RegionGen.java:122)
                        	at jadx.core.dex.regions.conditions.IfRegion.generate(IfRegion.java:137)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.codegen.RegionGen.makeRegionIndent(RegionGen.java:79)
                        	at jadx.core.codegen.RegionGen.makeIf(RegionGen.java:136)
                        	at jadx.core.dex.regions.conditions.IfRegion.generate(IfRegion.java:137)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.codegen.RegionGen.makeRegionIndent(RegionGen.java:79)
                        	at jadx.core.codegen.RegionGen.makeIf(RegionGen.java:122)
                        	at jadx.core.dex.regions.conditions.IfRegion.generate(IfRegion.java:137)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.dex.regions.Region.generate(Region.java:35)
                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                        	at jadx.core.codegen.MethodGen.addRegionInsns(MethodGen.java:255)
                        	at jadx.core.codegen.MethodGen.addInstructions(MethodGen.java:248)
                        	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:369)
                        	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:304)
                        	at jadx.core.codegen.ClassGen.lambda$addInnerClsAndMethods$2(ClassGen.java:270)
                        	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
                        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
                        	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
                        	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
                        Caused by: jadx.core.utils.exceptions.JadxRuntimeException: Expected class to be processed at this point, class: com.jd.libs.hybrid.preload.a.d, state: GENERATED_AND_UNLOADED
                        	at jadx.core.dex.nodes.ClassNode.ensureProcessed(ClassNode.java:268)
                        	at jadx.core.codegen.InsnGen.makeConstructor(InsnGen.java:668)
                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:378)
                        	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:132)
                        	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:117)
                        	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:104)
                        	at jadx.core.codegen.InsnGen.generateMethodArguments(InsnGen.java:974)
                        	at jadx.core.codegen.InsnGen.makeInvoke(InsnGen.java:799)
                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:382)
                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:263)
                        	... 47 more
                        */
                    /*
                    // Method dump skipped, instructions count: 1174
                    */
                    throw new UnsupportedOperationException("Method not decompiled: com.jd.libs.hybrid.preload.a.a(com.jd.libs.hybrid.preload.a, java.lang.String, com.jd.libs.hybrid.preload.entity.PreloadInfoEntity, java.util.Map, java.lang.String):void");
                }

                @Deprecated
                public static void a(b bVar) {
                    a = bVar;
                }

                public synchronized void a(Context context, String str, String str2) {
                    a(context, str, null, str2);
                }

                public synchronized void a(Context context, final String str, final Map<String, String> map, final String str2) {
                    if (!TextUtils.isEmpty(str)) {
                        SystemClock.elapsedRealtime();
                        new c(context).a(str, new c.a() { // from class: com.jd.libs.hybrid.preload.a.1
                            @Override // com.jd.libs.hybrid.preload.c.a
                            public final void a(PreloadInfoEntity preloadInfoEntity) {
                                a.a(a.this, str, preloadInfoEntity, map, str2);
                            }
                        });
                    }
                }

                public synchronized void a(String str) {
                    com.jd.libs.hybrid.base.b.c.c("DataProvider", "Calling preload destroy for timestamp = ".concat(String.valueOf(str)));
                    if (this.d != null) {
                        this.d.b(str);
                    }
                    if (this.b != null) {
                        String str2 = null;
                        for (String str3 : this.b.keySet()) {
                            if (str3.endsWith(str)) {
                                str2 = str3;
                            }
                        }
                        if (str2 != null) {
                            this.b.remove(str2);
                        }
                    }
                }

                public synchronized void a(String str, AbstractC0035a aVar) {
                    if (this.d == null) {
                        aVar.a(-2, null);
                        return;
                    }
                    int c2 = this.d.c(str);
                    if (c2 == 1) {
                        aVar.a(200, this.d.d(str));
                        this.d.b(str);
                    } else if (c2 == 2) {
                        aVar.a(-1, null);
                        this.d.b(str);
                    } else if (c2 == 0) {
                        if (this.b == null) {
                            this.b = new HashMap();
                        }
                        this.b.put(str, aVar);
                    } else {
                        aVar.a(-2, null);
                    }
                }
            }
