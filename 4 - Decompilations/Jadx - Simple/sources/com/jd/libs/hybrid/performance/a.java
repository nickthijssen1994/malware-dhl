package com.jd.libs.hybrid.performance;

import android.text.TextUtils;
import android.util.Log;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONObject;
import com.jd.lib.unification.album.mInterface.IBack;
import com.jingdong.sdk.oklog.OKLog;
import java.net.InetAddress;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import performance.jd.jdreportperformance.entity.StategyEntity;

/* loaded from: classes.dex */
public class a {
    private static a a;
    private boolean b;
    private ExecutorService c;
    private volatile boolean d;

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: com.jd.libs.hybrid.performance.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public static class RunnableC0034a implements Runnable {
        HashMap<String, String> a;
        boolean b;
        String c;

        RunnableC0034a(Map<String, String> map, boolean z, String str) {
            this.a = new HashMap<>(map);
            this.b = z;
            this.c = str;
        }

        @Override // java.lang.Runnable
        public final void run() {
            try {
                if (a.a().c()) {
                    this.a.put("cpu", com.jd.libs.hybrid.performance.a.a.a());
                    this.a.put("usedMem", com.jd.libs.hybrid.performance.a.a.c());
                    this.a.put("mem", com.jd.libs.hybrid.performance.a.a.b());
                    this.a.put("isLowMem", com.jd.libs.hybrid.performance.a.a.d());
                }
                if (this.b && !this.a.containsKey("resolvedIp")) {
                    this.a.put("resolvedIp", a.b(new URL(this.c).getHost()));
                }
            } catch (Exception e) {
                Log.e("WebPerfManager", e.getMessage(), e);
            }
            a.a().a(this.a);
        }
    }

    private a() {
        boolean z = false;
        this.b = false;
        this.d = false;
        try {
            StategyEntity a2 = d.a(WebPerfMonitor.getApplication(), "7", IBack.PHOTO_BACK);
            if (a2 != null) {
                this.b = "1".equals(a2.ret);
                if (this.b) {
                    this.c = Executors.newFixedThreadPool(1);
                }
                JDJSONObject parseObject = JDJSON.parseObject(a2.param);
                if (parseObject != null && 1 == parseObject.getIntValue("detail")) {
                    z = true;
                }
                this.d = z;
                if (OKLog.D) {
                    OKLog.d("WebPerfManager", "新版性能监控初始化, enable = " + this.b + ", reportDetail = " + this.d);
                }
            }
        } catch (Exception e) {
            Log.e("WebPerfManager", e.getMessage(), e);
        }
    }

    public static a a() {
        if (a == null) {
            synchronized (a.class) {
                if (a == null) {
                    a = new a();
                }
            }
        }
        return a;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static String b(String str) {
        if (TextUtils.isEmpty(str)) {
            return "";
        }
        try {
            InetAddress byName = InetAddress.getByName(str);
            return byName != null ? byName.getHostAddress() : "";
        } catch (Exception unused) {
            return "";
        }
    }

    public synchronized void a(b bVar) {
        if (this.b && bVar != null && !bVar.f()) {
            if (bVar.g() != null && !bVar.g().isEmpty()) {
                if (this.c != null) {
                    try {
                        if (!bVar.c("occurTime")) {
                            double currentTimeMillis = (double) System.currentTimeMillis();
                            Double.isNaN(currentTimeMillis);
                            bVar.a("occurTime", new DecimalFormat("0.000000").format(currentTimeMillis / 1000.0d));
                        }
                        bVar.c(true);
                        this.c.submit(new RunnableC0034a(bVar.g(), bVar.b(), !TextUtils.isEmpty(bVar.e()) ? bVar.e() : bVar.d()));
                    } catch (Exception e) {
                        Log.e("WebPerfManager", e.getMessage(), e);
                    }
                }
            }
        }
    }

    public void a(HashMap<String, String> hashMap) {
        if (this.b && hashMap != null && !hashMap.isEmpty()) {
            try {
                if (!hashMap.containsKey("occurTime")) {
                    double currentTimeMillis = (double) System.currentTimeMillis();
                    Double.isNaN(currentTimeMillis);
                    hashMap.put("occurTime", new DecimalFormat("0.000000").format(currentTimeMillis / 1000.0d));
                }
                hashMap.put("typeId", "7");
                hashMap.put("chId", IBack.PHOTO_BACK);
                if (OKLog.D) {
                    OKLog.d("WebPerfManager", "上报性能数据 = " + hashMap.toString());
                }
                d.a(hashMap);
            } catch (Exception e) {
                Log.e("WebPerfManager", e.getMessage(), e);
            }
        }
    }

    public boolean b() {
        return this.b;
    }

    public boolean c() {
        return this.d;
    }
}
