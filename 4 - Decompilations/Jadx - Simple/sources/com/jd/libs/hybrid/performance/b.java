package com.jd.libs.hybrid.performance;

import android.text.TextUtils;
import android.util.Log;
import com.jd.framework.json.JDJSONArray;
import com.jd.framework.json.JDJSONObject;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/* loaded from: classes.dex */
public class b {
    private long a;
    private String f;
    private String g;
    private volatile Map<String, String> h;
    private volatile JDJSONObject i;
    private JDJSONArray k;
    private JDJSONArray l;
    private volatile boolean b = false;
    private volatile boolean c = false;
    private volatile boolean d = false;
    private volatile String e = null;
    private boolean j = false;

    public b(long j) {
        this.a = j;
    }

    public long a() {
        return this.a;
    }

    public void a(long j) {
        if (j > 0) {
            double d = (double) j;
            Double.isNaN(d);
            try {
                a("occurTime", new DecimalFormat("0.000000").format(d / 1000.0d));
            } catch (Exception e) {
                Log.e("WebPerformance", e.getMessage(), e);
            }
        }
    }

    public void a(JDJSONObject jDJSONObject) {
        if (jDJSONObject != null) {
            if (this.k == null) {
                this.k = new JDJSONArray();
            }
            this.k.add(jDJSONObject);
            a("sourceError", this.k.toJSONString());
        }
    }

    public void a(String str) {
        this.g = str;
    }

    public void a(String str, Object obj) {
        JDJSONObject jDJSONObject;
        Object obj2;
        if (!f() && !TextUtils.isEmpty(str) && obj != null) {
            if (this.i == null) {
                this.i = new JDJSONObject();
            }
            if (this.h == null) {
                this.h = new ConcurrentHashMap();
            }
            try {
                if (obj instanceof String) {
                    jDJSONObject = this.i;
                    obj2 = (String) obj;
                } else if (obj instanceof JDJSONObject) {
                    jDJSONObject = this.i;
                    obj2 = (JDJSONObject) obj;
                } else if (obj instanceof JDJSONArray) {
                    jDJSONObject = this.i;
                    obj2 = (JDJSONArray) obj;
                } else {
                    if (obj instanceof Map) {
                        jDJSONObject = this.i;
                        obj2 = (Map) obj;
                    }
                    this.h.put("extra", this.i.toJSONString());
                }
                jDJSONObject.put(str, obj2);
                this.h.put("extra", this.i.toJSONString());
            } catch (Exception e) {
                Log.e("WebPerformance", e.getMessage(), e);
            }
        }
    }

    public void a(String str, String str2) {
        if (!f() && !TextUtils.isEmpty(str) && str2 != null) {
            if (this.h == null) {
                this.h = new ConcurrentHashMap();
            }
            this.h.put(str, str2);
            if ("url".equals(str)) {
                this.f = str2;
            }
        }
    }

    public void a(String str, String str2, Object obj) {
        if (!f() && !TextUtils.isEmpty(str) && !TextUtils.isEmpty(str2) && obj != null) {
            if (this.i == null) {
                this.i = new JDJSONObject();
            }
            if (this.h == null) {
                this.h = new ConcurrentHashMap();
            }
            try {
                Object obj2 = this.i.get(str);
                if (!(obj2 instanceof JDJSONObject)) {
                    obj2 = new JDJSONObject(5);
                }
                JDJSONObject jDJSONObject = (JDJSONObject) obj2;
                jDJSONObject.put(str2, obj);
                this.i.put(str, (Object) jDJSONObject);
                this.h.put("extra", this.i.toJSONString());
            } catch (Exception e) {
                Log.e("WebPerformance", e.getMessage(), e);
            }
        }
    }

    public void a(String str, Map<String, String> map) {
        if (!f() && !TextUtils.isEmpty(str) && map != null && !map.isEmpty()) {
            if (this.h == null) {
                this.h = new ConcurrentHashMap();
            }
            JDJSONObject jDJSONObject = new JDJSONObject();
            for (String str2 : map.keySet()) {
                jDJSONObject.put(str2, (Object) map.get(str2));
            }
            this.h.put(str, jDJSONObject.toJSONString());
        }
    }

    public void a(boolean z) {
        this.b = z;
    }

    public String b(String str) {
        if (TextUtils.isEmpty(str) || this.h == null) {
            return null;
        }
        return this.h.get(str);
    }

    public void b(JDJSONObject jDJSONObject) {
        if (jDJSONObject != null) {
            if (this.l == null) {
                this.l = new JDJSONArray();
            }
            this.l.add(jDJSONObject);
            a("sslError", this.l.toJSONString());
        }
    }

    public void b(boolean z) {
        this.c = z;
        if (z) {
            a(true);
        }
    }

    public boolean b() {
        return this.b;
    }

    public void c(boolean z) {
        this.d = z;
    }

    public boolean c() {
        return this.c;
    }

    public boolean c(String str) {
        if (TextUtils.isEmpty(str) || this.h == null || this.h.isEmpty()) {
            return false;
        }
        return this.h.containsKey(str);
    }

    public String d() {
        return this.f;
    }

    public void d(String str) {
        if (!f()) {
            this.e = str;
        }
    }

    public String e() {
        return this.g;
    }

    public boolean f() {
        return this.d;
    }

    public Map<String, String> g() {
        return this.h;
    }

    public boolean h() {
        return !TextUtils.isEmpty(this.e);
    }

    public String i() {
        return this.e;
    }

    public String toString() {
        return this.h != null ? this.h.toString() : "";
    }
}
