package com.jd.parser;

import com.jd.framework.json.JDJSONArray;
import com.jd.parser.a.d;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public final class m extends d {
    private final int a;
    private final List f;
    private final b g;
    private final Object h;
    private final Map i;
    private final Collection j;

    @Override // com.jd.parser.a.d
    public void a(b bVar, Object obj, Type type, Map<String, Object> map) {
    }

    public m(b bVar, List list, int i) {
        super(null, null, 0);
        this.g = bVar;
        this.a = i;
        this.f = list;
        this.h = null;
        this.i = null;
        this.j = null;
    }

    public m(Map map, Object obj) {
        super(null, null, 0);
        this.g = null;
        this.a = -1;
        this.f = null;
        this.h = obj;
        this.i = map;
        this.j = null;
    }

    public m(Collection collection) {
        super(null, null, 0);
        this.g = null;
        this.a = -1;
        this.f = null;
        this.h = null;
        this.i = null;
        this.j = collection;
    }

    @Override // com.jd.parser.a.d
    public void a(Object obj, Object obj2) {
        JDJSONArray jDJSONArray;
        Object relatedArray;
        Map map = this.i;
        if (map != null) {
            map.put(this.h, obj2);
            return;
        }
        Collection collection = this.j;
        if (collection != null) {
            collection.add(obj2);
            return;
        }
        this.f.set(this.a, obj2);
        List list = this.f;
        if ((list instanceof JDJSONArray) && (relatedArray = (jDJSONArray = (JDJSONArray) list).getRelatedArray()) != null && Array.getLength(relatedArray) > this.a) {
            if (jDJSONArray.getComponentType() != null) {
                obj2 = com.jd.a.d.a(obj2, jDJSONArray.getComponentType(), this.g.b);
            }
            Array.set(relatedArray, this.a, obj2);
        }
    }
}
