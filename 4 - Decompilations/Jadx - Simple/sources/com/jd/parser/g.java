package com.jd.parser;

import com.jd.a.a;
import com.jd.framework.json.anotation.JSONType;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class g {
    final Constructor<?> a;
    final int b;
    final Constructor<?> c;
    final Method d;
    final a[] e;
    final a[] f;
    final JSONType g;
    boolean h = false;
    final boolean i;
    public final String j;
    public final String k;
    public final int l;
    public final String[] m;

    g(Class<?> cls, Constructor<?> constructor, Constructor<?> constructor2, Method method, a[] aVarArr, a[] aVarArr2, JSONType jSONType, String[] strArr) {
        int i;
        boolean z;
        int i2 = 0;
        this.a = constructor;
        this.c = constructor2;
        this.d = method;
        this.e = aVarArr;
        this.g = jSONType;
        if (strArr == null || strArr.length != aVarArr.length) {
            this.m = strArr;
        } else {
            this.m = null;
        }
        if (jSONType != null) {
            String typeName = jSONType.typeName();
            this.j = typeName.length() <= 0 ? cls.getName() : typeName;
            String typeKey = jSONType.typeKey();
            this.k = typeKey.length() <= 0 ? null : typeKey;
            i = 0;
            for (Feature feature : jSONType.parseFeatures()) {
                i |= feature.mask;
            }
        } else {
            this.j = cls.getName();
            this.k = null;
            i = 0;
        }
        this.l = i;
        if (jSONType != null) {
            Feature[] parseFeatures = jSONType.parseFeatures();
            z = false;
            for (Feature feature2 : parseFeatures) {
                if (feature2 == Feature.SupportArrayToBean) {
                    z = true;
                }
            }
        } else {
            z = false;
        }
        this.i = z;
        a[] a = a(aVarArr, aVarArr2);
        this.f = Arrays.equals(aVarArr, a) ? aVarArr : a;
        if (constructor != null) {
            i2 = constructor.getParameterTypes().length;
        } else if (method != null) {
            i2 = method.getParameterTypes().length;
        }
        this.b = i2;
    }

    private a[] a(a[] aVarArr, a[] aVarArr2) {
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        JSONType jSONType = this.g;
        if (jSONType == null) {
            return aVarArr2;
        }
        String[] orders = jSONType.orders();
        if (!(orders == null || orders.length == 0)) {
            int i = 0;
            while (true) {
                if (i >= orders.length) {
                    z = true;
                    break;
                }
                int i2 = 0;
                while (true) {
                    if (i2 >= aVarArr2.length) {
                        z4 = false;
                        break;
                    } else if (aVarArr2[i2].a.equals(orders[i])) {
                        z4 = true;
                        break;
                    } else {
                        i2++;
                    }
                }
                if (!z4) {
                    z = false;
                    break;
                }
                i++;
            }
            if (!z) {
                return aVarArr2;
            }
            if (orders.length == aVarArr.length) {
                int i3 = 0;
                while (true) {
                    if (i3 >= orders.length) {
                        z3 = true;
                        break;
                    } else if (!aVarArr2[i3].a.equals(orders[i3])) {
                        z3 = false;
                        break;
                    } else {
                        i3++;
                    }
                }
                if (z3) {
                    return aVarArr2;
                }
                a[] aVarArr3 = new a[aVarArr2.length];
                for (int i4 = 0; i4 < orders.length; i4++) {
                    int i5 = 0;
                    while (true) {
                        if (i5 >= aVarArr2.length) {
                            break;
                        } else if (aVarArr2[i5].a.equals(orders[i4])) {
                            aVarArr3[i4] = aVarArr2[i5];
                            break;
                        } else {
                            i5++;
                        }
                    }
                }
                this.h = true;
                return aVarArr3;
            }
            a[] aVarArr4 = new a[aVarArr2.length];
            for (int i6 = 0; i6 < orders.length; i6++) {
                int i7 = 0;
                while (true) {
                    if (i7 >= aVarArr2.length) {
                        break;
                    } else if (aVarArr2[i7].a.equals(orders[i6])) {
                        aVarArr4[i6] = aVarArr2[i7];
                        break;
                    } else {
                        i7++;
                    }
                }
            }
            int length = orders.length;
            for (int i8 = 0; i8 < aVarArr2.length; i8++) {
                int i9 = 0;
                while (i9 < aVarArr4.length && i9 < length) {
                    if (aVarArr4[i8].b(aVarArr2[i9])) {
                        z2 = true;
                        break;
                    }
                    i9++;
                }
                z2 = false;
                if (!z2) {
                    aVarArr4[length] = aVarArr2[i8];
                    length++;
                }
            }
            this.h = true;
        }
        return aVarArr2;
    }

    static boolean a(List<a> list, a aVar, boolean z) {
        if (!z) {
            int size = list.size();
            for (int i = 0; i < size; i++) {
                a aVar2 = list.get(i);
                if (aVar2.a.equals(aVar.a) && (!aVar2.i || aVar.i)) {
                    return false;
                }
            }
        }
        list.add(aVar);
        return true;
    }

    /* JADX WARN: Removed duplicated region for block: B:244:0x05a2  */
    /* JADX WARN: Removed duplicated region for block: B:256:0x0611  */
    /* JADX WARN: Removed duplicated region for block: B:259:0x0621  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x0627  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static com.jd.parser.g a(java.lang.Class<?> r38, int r39, java.lang.reflect.Type r40, boolean r41, boolean r42, boolean r43, boolean r44, com.jd.PropertyNamingStrategy r45) {
        /*
        // Method dump skipped, instructions count: 2210
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.parser.g.a(java.lang.Class, int, java.lang.reflect.Type, boolean, boolean, boolean, boolean, com.jd.PropertyNamingStrategy):com.jd.parser.g");
    }
}
