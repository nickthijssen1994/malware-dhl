package com.jd.parser;

import com.jd.JSONException;
import com.jd.a.a;
import com.jd.framework.json.JDJSONObject;
import com.jd.parser.a.b;
import com.jd.parser.a.c;
import com.jd.parser.a.d;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class f implements com.jd.parser.a.f {
    protected final Class<?> a;
    public final g b;
    private final d[] c;
    private final d[] d;
    private final Map<String, d> e;
    private ConcurrentMap<String, Object> f;
    private transient long[] g;
    private transient int[] h;

    public f(l lVar, Class<?> cls, Type type) {
        this(lVar, cls, type, g.a(cls, cls.getModifiers(), type, false, true, true, true, lVar.e));
    }

    public f(l lVar, Class<?> cls, Type type, g gVar) {
        this.a = cls;
        this.b = gVar;
        this.d = new d[gVar.f.length];
        int length = gVar.f.length;
        HashMap hashMap = null;
        int i = 0;
        while (i < length) {
            a aVar = gVar.f[i];
            d a = lVar.a(lVar, cls, aVar);
            this.d[i] = a;
            String[] strArr = aVar.m;
            HashMap hashMap2 = hashMap;
            for (String str : strArr) {
                if (hashMap2 == null) {
                    hashMap2 = new HashMap();
                }
                hashMap2.put(str, a);
            }
            i++;
            hashMap = hashMap2;
        }
        this.e = hashMap;
        this.c = new d[gVar.e.length];
        int length2 = gVar.e.length;
        for (int i2 = 0; i2 < length2; i2++) {
            this.c[i2] = a(gVar.e[i2].a);
        }
    }

    public Object a(b bVar, Type type) {
        Object obj;
        if ((type instanceof Class) && this.a.isInterface()) {
            return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{(Class) type}, new JDJSONObject((bVar.c.c & Feature.OrderedField.mask) != 0));
        } else if (this.b.a == null && this.b.d == null) {
            return null;
        } else {
            if (this.b.d != null && this.b.b > 0) {
                return null;
            }
            try {
                Constructor<?> constructor = this.b.a;
                if (this.b.b != 0) {
                    obj = constructor.newInstance(bVar.d.a);
                } else if (constructor != null) {
                    obj = constructor.newInstance(new Object[0]);
                } else {
                    obj = this.b.d.invoke(null, new Object[0]);
                }
                if (!(bVar == null || (bVar.c.c & Feature.InitStringFieldAsEmpty.mask) == 0)) {
                    a[] aVarArr = this.b.e;
                    for (a aVar : aVarArr) {
                        if (aVar.f == String.class) {
                            aVar.a(obj, "");
                        }
                    }
                }
                return obj;
            } catch (Exception e) {
                throw new JSONException("create instance error, class " + this.a.getName(), e);
            }
        }
    }

    @Override // com.jd.parser.a.f
    public <T> T a(b bVar, Type type, Object obj) {
        return (T) b(bVar, type, obj, null);
    }

    private <T> T a(b bVar, Type type, Object obj, Object obj2) {
        char c;
        char c2;
        char c3;
        char c4;
        char c5;
        Enum r8;
        char c6;
        char c7;
        char c8;
        char c9;
        char c10;
        char c11;
        String str;
        char c12;
        char c13;
        char c14;
        char c15;
        char c16;
        d dVar = bVar.c;
        T t = (T) a(bVar, type);
        int length = this.d.length;
        int i = 0;
        while (i < length) {
            char c17 = i == length + -1 ? ']' : ',';
            d dVar2 = this.d[i];
            a aVar = dVar2.b;
            Class<?> cls = aVar.f;
            try {
                if (cls == Integer.TYPE) {
                    int s = (int) dVar.s();
                    if (aVar.d) {
                        aVar.c.setInt(t, s);
                    } else {
                        dVar2.a(t, new Integer(s));
                    }
                    if (dVar.d == ',') {
                        int i2 = dVar.e + 1;
                        dVar.e = i2;
                        if (i2 >= dVar.r) {
                            c16 = 26;
                        } else {
                            c16 = dVar.q.charAt(i2);
                        }
                        dVar.d = c16;
                        dVar.a = 16;
                    } else if (dVar.d == ']') {
                        int i3 = dVar.e + 1;
                        dVar.e = i3;
                        if (i3 >= dVar.r) {
                            c15 = 26;
                        } else {
                            c15 = dVar.q.charAt(i3);
                        }
                        dVar.d = c15;
                        dVar.a = 15;
                    } else {
                        dVar.e();
                    }
                } else if (cls == String.class) {
                    if (dVar.d == '\"') {
                        str = dVar.b('\"');
                    } else if (dVar.d != 'n' || !dVar.q.startsWith("null", dVar.e)) {
                        throw new JSONException("not match string. feild : " + obj);
                    } else {
                        dVar.e += 4;
                        int i4 = dVar.e;
                        if (dVar.e >= dVar.r) {
                            c14 = 26;
                        } else {
                            c14 = dVar.q.charAt(i4);
                        }
                        dVar.d = c14;
                        str = null;
                    }
                    if (aVar.d) {
                        aVar.c.set(t, str);
                    } else {
                        dVar2.a(t, str);
                    }
                    if (dVar.d == ',') {
                        int i5 = dVar.e + 1;
                        dVar.e = i5;
                        if (i5 >= dVar.r) {
                            c13 = 26;
                        } else {
                            c13 = dVar.q.charAt(i5);
                        }
                        dVar.d = c13;
                        dVar.a = 16;
                    } else if (dVar.d == ']') {
                        int i6 = dVar.e + 1;
                        dVar.e = i6;
                        if (i6 >= dVar.r) {
                            c12 = 26;
                        } else {
                            c12 = dVar.q.charAt(i6);
                        }
                        dVar.d = c12;
                        dVar.a = 15;
                    } else {
                        dVar.e();
                    }
                } else if (cls == Long.TYPE) {
                    long s2 = dVar.s();
                    if (aVar.d) {
                        aVar.c.setLong(t, s2);
                    } else {
                        dVar2.a(t, new Long(s2));
                    }
                    if (dVar.d == ',') {
                        int i7 = dVar.e + 1;
                        dVar.e = i7;
                        if (i7 >= dVar.r) {
                            c11 = 26;
                        } else {
                            c11 = dVar.q.charAt(i7);
                        }
                        dVar.d = c11;
                        dVar.a = 16;
                    } else if (dVar.d == ']') {
                        int i8 = dVar.e + 1;
                        dVar.e = i8;
                        if (i8 >= dVar.r) {
                            c10 = 26;
                        } else {
                            c10 = dVar.q.charAt(i8);
                        }
                        dVar.d = c10;
                        dVar.a = 15;
                    } else {
                        dVar.e();
                    }
                } else if (cls == Boolean.TYPE) {
                    boolean q = dVar.q();
                    if (aVar.d) {
                        aVar.c.setBoolean(t, q);
                    } else {
                        dVar2.a(t, Boolean.valueOf(q));
                    }
                    if (dVar.d == ',') {
                        int i9 = dVar.e + 1;
                        dVar.e = i9;
                        if (i9 >= dVar.r) {
                            c9 = 26;
                        } else {
                            c9 = dVar.q.charAt(i9);
                        }
                        dVar.d = c9;
                        dVar.a = 16;
                    } else if (dVar.d == ']') {
                        int i10 = dVar.e + 1;
                        dVar.e = i10;
                        if (i10 >= dVar.r) {
                            c8 = 26;
                        } else {
                            c8 = dVar.q.charAt(i10);
                        }
                        dVar.d = c8;
                        dVar.a = 15;
                    } else {
                        dVar.e();
                    }
                } else if (cls.isEnum()) {
                    char c18 = dVar.d;
                    if (c18 == '\"') {
                        String a = dVar.a(bVar.a);
                        if (a == null) {
                            r8 = null;
                        } else {
                            r8 = Enum.valueOf(cls, a);
                        }
                    } else if (c18 < '0' || c18 > '9') {
                        throw new JSONException("illegal enum." + dVar.h());
                    } else {
                        r8 = ((c) ((a) dVar2).a(bVar.b)).a[(int) dVar.s()];
                    }
                    dVar2.a(t, r8);
                    if (dVar.d == ',') {
                        int i11 = dVar.e + 1;
                        dVar.e = i11;
                        if (i11 >= dVar.r) {
                            c7 = 26;
                        } else {
                            c7 = dVar.q.charAt(i11);
                        }
                        dVar.d = c7;
                        dVar.a = 16;
                    } else if (dVar.d == ']') {
                        int i12 = dVar.e + 1;
                        dVar.e = i12;
                        if (i12 >= dVar.r) {
                            c6 = 26;
                        } else {
                            c6 = dVar.q.charAt(i12);
                        }
                        dVar.d = c6;
                        dVar.a = 15;
                    } else {
                        dVar.e();
                    }
                } else if (cls == Date.class && dVar.d == '1') {
                    dVar2.a(t, new Date(dVar.s()));
                    if (dVar.d == ',') {
                        int i13 = dVar.e + 1;
                        dVar.e = i13;
                        if (i13 >= dVar.r) {
                            c5 = 26;
                        } else {
                            c5 = dVar.q.charAt(i13);
                        }
                        dVar.d = c5;
                        dVar.a = 16;
                    } else if (dVar.d == ']') {
                        int i14 = dVar.e + 1;
                        dVar.e = i14;
                        if (i14 >= dVar.r) {
                            c4 = 26;
                        } else {
                            c4 = dVar.q.charAt(i14);
                        }
                        dVar.d = c4;
                        dVar.a = 15;
                    } else {
                        dVar.e();
                    }
                } else {
                    if (dVar.d == '[') {
                        int i15 = dVar.e + 1;
                        dVar.e = i15;
                        if (i15 >= dVar.r) {
                            c3 = 26;
                        } else {
                            c3 = dVar.q.charAt(i15);
                        }
                        dVar.d = c3;
                        dVar.a = 14;
                    } else if (dVar.d == '{') {
                        int i16 = dVar.e + 1;
                        dVar.e = i16;
                        if (i16 >= dVar.r) {
                            c2 = 26;
                        } else {
                            c2 = dVar.q.charAt(i16);
                        }
                        dVar.d = c2;
                        dVar.a = 12;
                    } else {
                        dVar.e();
                    }
                    dVar2.a(bVar, t, aVar.g, null);
                    if (c17 == ']') {
                        if (dVar.a != 15) {
                            throw new JSONException("syntax error");
                        }
                    } else if (c17 == ',' && dVar.a != 16) {
                        throw new JSONException("syntax error");
                    }
                }
                i++;
            } catch (IllegalAccessException e) {
                throw new JSONException("set " + aVar.a + "error", e);
            }
        }
        if (dVar.d == ',') {
            int i17 = dVar.e + 1;
            dVar.e = i17;
            if (i17 >= dVar.r) {
                c = 26;
            } else {
                c = dVar.q.charAt(i17);
            }
            dVar.d = c;
            dVar.a = 16;
        } else {
            dVar.e();
        }
        return t;
    }

    /* JADX WARN: Code restructure failed: missing block: B:236:0x041c, code lost:
        r10.a(':');
        r0 = r10.a;
        r1 = 4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:237:0x0422, code lost:
        if (r0 != 4) goto L_0x04a4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x0424, code lost:
        r0 = r10.m();
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x042e, code lost:
        if ("@".equals(r0) == false) goto L_0x0434;
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x0430, code lost:
        r6 = (T) r14.a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x043a, code lost:
        if ("..".equals(r0) == false) goto L_0x0451;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x043c, code lost:
        r1 = r14.b;
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x0440, code lost:
        if (r1.a == null) goto L_0x0445;
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x0442, code lost:
        r6 = (T) r1.a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x0445, code lost:
        r35.a(new com.jd.parser.b.a(r1, r0));
        r35.e = 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:249:0x0457, code lost:
        if ("$".equals(r0) == false) goto L_0x0474;
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x0459, code lost:
        r1 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:252:0x045c, code lost:
        if (r1.b == null) goto L_0x0461;
     */
    /* JADX WARN: Code restructure failed: missing block: B:253:0x045e, code lost:
        r1 = r1.b;
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x0463, code lost:
        if (r1.a == null) goto L_0x0468;
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x0465, code lost:
        r6 = (T) r1.a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:257:0x0468, code lost:
        r35.a(new com.jd.parser.b.a(r1, r0));
        r35.e = 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:258:0x0474, code lost:
        r35.a(new com.jd.parser.b.a(r14, r0));
        r35.e = 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:259:0x047f, code lost:
        r10.b(13);
     */
    /* JADX WARN: Code restructure failed: missing block: B:260:0x0486, code lost:
        if (r10.a != 13) goto L_0x049a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:261:0x0488, code lost:
        r10.b(16);
        r35.a(r14, r6, r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:263:0x0492, code lost:
        if (r20 == null) goto L_0x0496;
     */
    /* JADX WARN: Code restructure failed: missing block: B:264:0x0494, code lost:
        r20.a = r6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:265:0x0496, code lost:
        r35.a(r14);
     */
    /* JADX WARN: Code restructure failed: missing block: B:266:0x0499, code lost:
        return (T) r6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:269:0x04a3, code lost:
        throw new com.jd.JSONException("illegal ref");
     */
    /* JADX WARN: Code restructure failed: missing block: B:271:0x04c0, code lost:
        throw new com.jd.JSONException("illegal ref, " + com.jd.parser.e.a(r0));
     */
    /* JADX WARN: Code restructure failed: missing block: B:272:0x04c1, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:275:0x04c6, code lost:
        r12 = r1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:293:0x051b, code lost:
        r2 = a(r35.b, r34.b, r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:294:0x0523, code lost:
        if (r2 != null) goto L_0x054b;
     */
    /* JADX WARN: Code restructure failed: missing block: B:295:0x0525, code lost:
        r12 = com.jd.a.d.a(r1, r35.b.d);
        r0 = com.jd.a.d.c(r36);
     */
    /* JADX WARN: Code restructure failed: missing block: B:296:0x0531, code lost:
        if (r0 == null) goto L_0x0544;
     */
    /* JADX WARN: Code restructure failed: missing block: B:297:0x0533, code lost:
        if (r12 == null) goto L_0x053c;
     */
    /* JADX WARN: Code restructure failed: missing block: B:299:0x0539, code lost:
        if (r0.isAssignableFrom(r12) == false) goto L_0x053c;
     */
    /* JADX WARN: Code restructure failed: missing block: B:302:0x0543, code lost:
        throw new com.jd.JSONException("type not match");
     */
    /* JADX WARN: Code restructure failed: missing block: B:303:0x0544, code lost:
        r2 = r35.b.a((java.lang.reflect.Type) r12);
     */
    /* JADX WARN: Code restructure failed: missing block: B:304:0x054b, code lost:
        r12 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:306:0x054e, code lost:
        if ((r2 instanceof com.jd.parser.f) == false) goto L_0x0561;
     */
    /* JADX WARN: Code restructure failed: missing block: B:307:0x0550, code lost:
        r2 = (com.jd.parser.f) r2;
        r0 = (T) r2.b(r35, r12, r37, null);
     */
    /* JADX WARN: Code restructure failed: missing block: B:308:0x0557, code lost:
        if (r3 == null) goto L_0x0565;
     */
    /* JADX WARN: Code restructure failed: missing block: B:309:0x0559, code lost:
        r2.a(r3).a(r0, r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:310:0x0561, code lost:
        r0 = (T) r2.a(r35, r12, r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:311:0x0565, code lost:
        if (r4 == null) goto L_0x0569;
     */
    /* JADX WARN: Code restructure failed: missing block: B:312:0x0567, code lost:
        r4.a = r6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:313:0x0569, code lost:
        r35.a(r14);
     */
    /* JADX WARN: Code restructure failed: missing block: B:314:0x056c, code lost:
        return r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:432:0x0726, code lost:
        r1 = r19;
        r12 = r21;
     */
    /* JADX WARN: Code restructure failed: missing block: B:492:0x0849, code lost:
        throw new com.jd.JSONException("syntax error, unexpect token " + com.jd.parser.e.a(r10.a));
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:284:0x04e1 A[Catch: all -> 0x05b1, TryCatch #7 {all -> 0x05b1, blocks: (B:278:0x04cd, B:282:0x04d7, B:284:0x04e1, B:286:0x04ee, B:288:0x04fb, B:290:0x0501, B:293:0x051b, B:295:0x0525, B:298:0x0535, B:301:0x053c, B:302:0x0543, B:303:0x0544, B:305:0x054c, B:307:0x0550, B:309:0x0559, B:310:0x0561, B:315:0x056d, B:316:0x0574, B:323:0x0586, B:325:0x058c, B:328:0x059d), top: B:515:0x04cd }] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0061 A[Catch: all -> 0x0042, TRY_LEAVE, TryCatch #1 {all -> 0x0042, blocks: (B:17:0x0032, B:19:0x0037, B:27:0x004c, B:29:0x0052, B:35:0x0061, B:41:0x0070, B:46:0x007c, B:48:0x0086, B:51:0x008d, B:53:0x00a2, B:54:0x00aa, B:55:0x00b3, B:59:0x00b9), top: B:506:0x0030 }] */
    /* JADX WARN: Removed duplicated region for block: B:428:0x0718  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x071d A[Catch: all -> 0x0852, TryCatch #8 {all -> 0x0852, blocks: (B:335:0x05be, B:337:0x05ce, B:342:0x05d7, B:347:0x05e0, B:352:0x05e9, B:358:0x05f7, B:359:0x0602, B:360:0x060d, B:361:0x0615, B:362:0x061c, B:365:0x062b, B:370:0x0635, B:375:0x063e, B:380:0x0647, B:385:0x0650, B:386:0x0657, B:388:0x065b, B:390:0x065f, B:391:0x0664, B:392:0x066d, B:394:0x0671, B:396:0x0675, B:397:0x0679, B:398:0x0682, B:400:0x0686, B:402:0x068a, B:403:0x0690, B:404:0x069a, B:406:0x069e, B:408:0x06a2, B:409:0x06a6, B:411:0x06af, B:412:0x06c7, B:413:0x06c8, B:414:0x06cd, B:418:0x06e1, B:420:0x06fb, B:422:0x0701, B:424:0x070c, B:426:0x0712, B:429:0x071d, B:431:0x0723, B:486:0x0811, B:488:0x0817, B:491:0x082d, B:492:0x0849, B:493:0x084a, B:494:0x0851), top: B:516:0x05be, inners: #12 }] */
    /* JADX WARN: Removed duplicated region for block: B:500:0x085d  */
    /* JADX WARN: Removed duplicated region for block: B:590:0x056d A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r1v20 */
    /* JADX WARN: Type inference failed for: r1v21 */
    /* JADX WARN: Type inference failed for: r1v22 */
    /* JADX WARN: Type inference failed for: r35v0, types: [com.jd.parser.b] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private <T> T b(com.jd.parser.b r35, java.lang.reflect.Type r36, java.lang.Object r37, java.lang.Object r38) {
        /*
        // Method dump skipped, instructions count: 2152
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.parser.f.b(com.jd.parser.b, java.lang.reflect.Type, java.lang.Object, java.lang.Object):java.lang.Object");
    }

    protected d a(long j) {
        int i = 0;
        while (true) {
            d[] dVarArr = this.d;
            if (i >= dVarArr.length) {
                return null;
            }
            d dVar = dVarArr[i];
            if (dVar.b.l == j) {
                return dVar;
            }
            i++;
        }
    }

    public d a(String str) {
        if (str == null) {
            return null;
        }
        int i = 0;
        if (this.b.h) {
            while (true) {
                d[] dVarArr = this.d;
                if (i >= dVarArr.length) {
                    return null;
                }
                d dVar = dVarArr[i];
                if (dVar.b.a.equalsIgnoreCase(str)) {
                    return dVar;
                }
                i++;
            }
        } else {
            int length = this.d.length - 1;
            while (i <= length) {
                int i2 = (i + length) >>> 1;
                int compareTo = this.d[i2].b.a.compareTo(str);
                if (compareTo < 0) {
                    i = i2 + 1;
                } else if (compareTo <= 0) {
                    return this.d[i2];
                } else {
                    length = i2 - 1;
                }
            }
            Map<String, d> map = this.e;
            if (map != null) {
                return map.get(str);
            }
            return null;
        }
    }

    private boolean a(b bVar, String str, Object obj, Type type, Map<String, Object> map) {
        boolean z;
        d dVar = bVar.c;
        d a = a(str);
        if (a == null) {
            long b = com.jd.a.d.b(str);
            if (this.g == null) {
                long[] jArr = new long[this.d.length];
                int i = 0;
                while (true) {
                    d[] dVarArr = this.d;
                    if (i >= dVarArr.length) {
                        break;
                    }
                    jArr[i] = com.jd.a.d.b(dVarArr[i].b.a);
                    i++;
                }
                Arrays.sort(jArr);
                this.g = jArr;
            }
            int binarySearch = Arrays.binarySearch(this.g, b);
            if (binarySearch < 0) {
                z = str.startsWith("is");
                if (z) {
                    binarySearch = Arrays.binarySearch(this.g, com.jd.a.d.b(str.substring(2)));
                }
            } else {
                z = false;
            }
            if (binarySearch >= 0) {
                if (this.h == null) {
                    int[] iArr = new int[this.g.length];
                    Arrays.fill(iArr, -1);
                    int i2 = 0;
                    while (true) {
                        d[] dVarArr2 = this.d;
                        if (i2 >= dVarArr2.length) {
                            break;
                        }
                        int binarySearch2 = Arrays.binarySearch(this.g, com.jd.a.d.b(dVarArr2[i2].b.a));
                        if (binarySearch2 >= 0) {
                            iArr[binarySearch2] = i2;
                        }
                        i2++;
                    }
                    this.h = iArr;
                }
                int i3 = this.h[binarySearch];
                if (i3 != -1) {
                    a = this.d[i3];
                    Class<?> cls = a.b.f;
                    if (!(!z || cls == Boolean.TYPE || cls == Boolean.class)) {
                        a = null;
                    }
                }
            }
        }
        int i4 = Feature.SupportNonPublicField.mask;
        if (a == null && !((bVar.c.c & i4) == 0 && (i4 & this.b.l) == 0)) {
            if (this.f == null) {
                ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap(1, 0.75f, 1);
                Class<?> cls2 = this.a;
                while (cls2 != null && cls2 != Object.class) {
                    Field[] declaredFields = cls2.getDeclaredFields();
                    for (Field field : declaredFields) {
                        String name = field.getName();
                        if (a(name) == null) {
                            int modifiers = field.getModifiers();
                            if ((modifiers & 16) == 0 && (modifiers & 8) == 0) {
                                concurrentHashMap.put(name, field);
                            }
                        }
                    }
                    cls2 = cls2.getSuperclass();
                }
                this.f = concurrentHashMap;
            }
            Object obj2 = this.f.get(str);
            if (obj2 != null) {
                if (obj2 instanceof d) {
                    a = (d) obj2;
                } else {
                    Field field2 = (Field) obj2;
                    field2.setAccessible(true);
                    a = new a(bVar.b, this.a, new a(str, field2.getDeclaringClass(), field2.getType(), field2.getGenericType(), field2, 0, 0));
                    this.f.put(str, a);
                }
            }
        }
        if (a == null) {
            a(bVar, obj, str);
            return false;
        }
        dVar.a(':');
        a.a(bVar, obj, type, map);
        return true;
    }

    void a(b bVar, Object obj, String str) {
        Object obj2;
        d dVar = bVar.c;
        if ((bVar.c.c & Feature.IgnoreNotMatch.mask) != 0) {
            dVar.a(':');
            Type type = null;
            List<c> list = bVar.f;
            if (list != null) {
                for (c cVar : list) {
                    type = cVar.a(obj, str);
                }
            }
            if (type == null) {
                obj2 = bVar.g();
            } else {
                obj2 = bVar.a(type);
            }
            if (obj instanceof com.jd.parser.a.a) {
                ((com.jd.parser.a.a) obj).a(str, obj2);
                return;
            }
            List<b> list2 = bVar.g;
            if (list2 != null) {
                for (b bVar2 : list2) {
                    bVar2.a(obj, str, obj2);
                }
                return;
            }
            return;
        }
        throw new JSONException("setter not found, class " + this.a.getName() + ", property " + str);
    }

    public Object a(Map<String, Object> map, l lVar) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        if (this.b.c == null) {
            Object a = a((b) null, this.a);
            for (Map.Entry<String, Object> entry : map.entrySet()) {
                d a2 = a(entry.getKey());
                if (a2 != null) {
                    Object value = entry.getValue();
                    Method method = a2.b.b;
                    if (method != null) {
                        method.invoke(a, com.jd.a.d.a(value, method.getGenericParameterTypes()[0], lVar));
                    } else {
                        a2.b.c.set(a, com.jd.a.d.a(value, a2.b.g, lVar));
                    }
                }
            }
            return a;
        }
        a[] aVarArr = this.b.e;
        int length = aVarArr.length;
        Object[] objArr = new Object[length];
        for (int i = 0; i < length; i++) {
            a aVar = aVarArr[i];
            Object obj = map.get(aVar.a);
            if (obj == null) {
                obj = com.jd.a.d.c(aVar.f);
            }
            objArr[i] = obj;
        }
        if (this.b.c == null) {
            return null;
        }
        try {
            return this.b.c.newInstance(objArr);
        } catch (Exception e) {
            throw new JSONException("create instance error, " + this.b.c.toGenericString(), e);
        }
    }

    protected f a(l lVar, g gVar, String str) {
        if (gVar.g == null) {
            return null;
        }
        for (Class cls : gVar.g.seeAlso()) {
            com.jd.parser.a.f a = lVar.a((Type) cls);
            if (a instanceof f) {
                f fVar = (f) a;
                g gVar2 = fVar.b;
                if (gVar2.j.equals(str)) {
                    return fVar;
                }
                f a2 = a(lVar, gVar2, str);
                if (a2 != null) {
                    return a2;
                }
            }
        }
        return null;
    }
}
