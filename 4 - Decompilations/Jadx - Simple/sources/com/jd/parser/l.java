package com.jd.parser;

import com.jd.PropertyNamingStrategy;
import com.jd.a.a;
import com.jd.a.b;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.anotation.JSONType;
import com.jd.parser.a.d;
import com.jd.parser.a.f;
import com.jd.serializer.aa;
import com.jd.serializer.e;
import com.jd.serializer.g;
import com.jd.serializer.h;
import com.jd.serializer.k;
import com.jd.serializer.q;
import com.jd.serializer.s;
import java.io.Closeable;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.regex.Pattern;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class l {
    public static boolean a = JDJSON.debug;
    public static l b = new l();
    public ClassLoader d;
    public PropertyNamingStrategy e;
    private final b<f> f = new b<>(1024);
    public final n c = new n(16384);

    public static l a() {
        return b;
    }

    public l() {
        this.f.a(SimpleDateFormat.class, q.a);
        this.f.a(Date.class, h.a);
        this.f.a(Calendar.class, h.a);
        this.f.a(Map.class, j.a);
        this.f.a(HashMap.class, j.a);
        this.f.a(LinkedHashMap.class, j.a);
        this.f.a(TreeMap.class, j.a);
        this.f.a(ConcurrentMap.class, j.a);
        this.f.a(ConcurrentHashMap.class, j.a);
        this.f.a(Collection.class, g.a);
        this.f.a(List.class, g.a);
        this.f.a(ArrayList.class, g.a);
        this.f.a(Object.class, h.a);
        this.f.a(String.class, aa.a);
        this.f.a(Character.TYPE, q.a);
        this.f.a(Character.class, q.a);
        this.f.a(Byte.TYPE, s.a);
        this.f.a(Byte.class, s.a);
        this.f.a(Short.TYPE, s.a);
        this.f.a(Short.class, s.a);
        this.f.a(Integer.TYPE, k.a);
        this.f.a(Integer.class, k.a);
        this.f.a(Long.TYPE, k.a);
        this.f.a(Long.class, k.a);
        this.f.a(BigInteger.class, e.a);
        this.f.a(BigDecimal.class, e.a);
        this.f.a(Float.TYPE, s.a);
        this.f.a(Float.class, s.a);
        this.f.a(Double.TYPE, s.a);
        this.f.a(Double.class, s.a);
        this.f.a(Boolean.TYPE, com.jd.serializer.f.a);
        this.f.a(Boolean.class, com.jd.serializer.f.a);
        this.f.a(Class.class, q.a);
        this.f.a(char[].class, com.jd.serializer.b.a);
        this.f.a(Object[].class, com.jd.serializer.b.a);
        this.f.a(UUID.class, q.a);
        this.f.a(TimeZone.class, q.a);
        this.f.a(Locale.class, q.a);
        this.f.a(Currency.class, q.a);
        this.f.a(URI.class, q.a);
        this.f.a(URL.class, q.a);
        this.f.a(Pattern.class, q.a);
        this.f.a(Charset.class, q.a);
        this.f.a(Number.class, s.a);
        this.f.a(StackTraceElement.class, q.a);
        this.f.a(Serializable.class, h.a);
        this.f.a(Cloneable.class, h.a);
        this.f.a(Comparable.class, h.a);
        this.f.a(Closeable.class, h.a);
    }

    public f a(Type type) {
        f a2 = this.f.a(type);
        if (a2 != null) {
            return a2;
        }
        if (type instanceof Class) {
            return a((Class) type, type);
        }
        if (type instanceof ParameterizedType) {
            Type rawType = ((ParameterizedType) type).getRawType();
            if (rawType instanceof Class) {
                return a((Class) rawType, type);
            }
            return a(rawType);
        }
        if (type instanceof WildcardType) {
            Type[] upperBounds = ((WildcardType) type).getUpperBounds();
            if (upperBounds.length == 1) {
                return a(upperBounds[0]);
            }
        }
        return h.a;
    }

    public f a(Class<?> cls, Type type) {
        f fVar;
        JSONType annotation;
        Class<?> mappingTo;
        f a2 = this.f.a(type);
        if (a2 != null) {
            return a2;
        }
        if (type == null) {
            type = cls;
        }
        f a3 = this.f.a(type);
        if (a3 != null) {
            return a3;
        }
        if (!a(cls) && (annotation = cls.getAnnotation(JSONType.class)) != null && (mappingTo = annotation.mappingTo()) != Void.class) {
            return a(mappingTo, mappingTo);
        }
        if ((type instanceof WildcardType) || (type instanceof TypeVariable) || (type instanceof ParameterizedType)) {
            a3 = this.f.a(cls);
        }
        if (a3 != null) {
            return a3;
        }
        f a4 = this.f.a(type);
        if (a4 != null) {
            return a4;
        }
        if (cls.isEnum()) {
            fVar = new c(cls);
        } else if (cls.isArray()) {
            fVar = com.jd.serializer.b.a;
        } else if (cls == Set.class || cls == HashSet.class || cls == Collection.class || cls == List.class || cls == ArrayList.class) {
            fVar = g.a;
        } else if (Collection.class.isAssignableFrom(cls)) {
            fVar = g.a;
        } else if (Map.class.isAssignableFrom(cls)) {
            fVar = j.a;
        } else if (Throwable.class.isAssignableFrom(cls)) {
            fVar = new o(this, cls);
        } else {
            fVar = cls.getName().equals("android.net.Uri") ? q.a : new f(this, cls, type);
        }
        a(type, fVar);
        return fVar;
    }

    public d a(l lVar, Class<?> cls, a aVar) {
        Class<?> cls2 = aVar.f;
        if (cls2 == List.class || cls2 == ArrayList.class || (cls2.isArray() && !cls2.getComponentType().isPrimitive())) {
            return new i(lVar, cls, aVar);
        }
        return new a(lVar, cls, aVar);
    }

    public void a(Type type, f fVar) {
        this.f.a(type, fVar);
    }

    public static boolean a(Class<?> cls) {
        return cls.isPrimitive() || cls == Boolean.class || cls == Character.class || cls == Byte.class || cls == Short.class || cls == Integer.class || cls == Long.class || cls == Float.class || cls == Double.class || cls == BigInteger.class || cls == BigDecimal.class || cls == String.class || cls == Date.class || cls == java.sql.Date.class || cls == Time.class || cls == Timestamp.class;
    }
}
