package com.jd.parser;

import com.jd.JSONException;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONObject;
import com.jd.parser.a.f;
import com.jd.parser.b;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class j implements f {
    public static j a = new j();

    j() {
    }

    @Override // com.jd.parser.a.f
    public <T> T a(b bVar, Type type, Object obj) {
        if (type == JDJSONObject.class && bVar.h == null) {
            return (T) bVar.b();
        }
        d dVar = bVar.c;
        if (dVar.a == 8) {
            dVar.b(16);
            return null;
        }
        Map<?, ?> a2 = a(type);
        k kVar = bVar.d;
        try {
            bVar.a(kVar, a2, obj);
            if (!(type instanceof ParameterizedType)) {
                return (T) bVar.a(a2, obj);
            }
            ParameterizedType parameterizedType = (ParameterizedType) type;
            Type type2 = parameterizedType.getActualTypeArguments()[0];
            Type type3 = parameterizedType.getActualTypeArguments()[1];
            if (String.class == type2) {
                return (T) a(bVar, a2, type3, obj);
            }
            return (T) a(bVar, a2, type2, type3, obj);
        } finally {
            bVar.a(kVar);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:66:0x012b, code lost:
        return r9;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static java.util.Map a(com.jd.parser.b r8, java.util.Map<java.lang.String, java.lang.Object> r9, java.lang.reflect.Type r10, java.lang.Object r11) {
        /*
        // Method dump skipped, instructions count: 364
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.parser.j.a(com.jd.parser.b, java.util.Map, java.lang.reflect.Type, java.lang.Object):java.util.Map");
    }

    public static Object a(b bVar, Map<Object, Object> map, Type type, Type type2, Object obj) {
        Object obj2;
        Object obj3;
        d dVar = bVar.c;
        int i = dVar.a;
        int i2 = 16;
        if (i == 12 || i == 16) {
            f a2 = bVar.b.a(type);
            f a3 = bVar.b.a(type2);
            dVar.e();
            k kVar = bVar.d;
            while (true) {
                try {
                    int i3 = dVar.a;
                    if (i3 == 13) {
                        dVar.b(i2);
                        return map;
                    } else if (i3 != 4 || dVar.h != 4 || !dVar.q.startsWith("$ref", dVar.k + 1) || dVar.a(Feature.DisableSpecialKeyDetect)) {
                        if (map.size() != 0 || i3 != 4) {
                            obj2 = null;
                        } else if (!JDJSON.DEFAULT_TYPE_KEY.equals(dVar.m())) {
                            obj2 = null;
                        } else if (!dVar.a(Feature.DisableSpecialKeyDetect)) {
                            dVar.a(':');
                            dVar.b(16);
                            if (dVar.a == 13) {
                                dVar.e();
                                return map;
                            }
                            dVar.e();
                            obj2 = null;
                        } else {
                            obj2 = null;
                        }
                        Object a4 = a2.a(bVar, type, obj2);
                        if (dVar.a == 17) {
                            dVar.e();
                            Object a5 = a3.a(bVar, type2, a4);
                            if (bVar.e == 1) {
                                bVar.b(map, a4);
                            }
                            map.put(a4, a5);
                            if (dVar.a == 16) {
                                dVar.e();
                            }
                            i2 = 16;
                        } else {
                            throw new JSONException("syntax error, expect :, actual " + dVar.a);
                        }
                    } else {
                        dVar.a(':');
                        if (dVar.a == 4) {
                            String m = dVar.m();
                            if ("..".equals(m)) {
                                obj3 = kVar.b.a;
                            } else if ("$".equals(m)) {
                                k kVar2 = kVar;
                                while (kVar2.b != null) {
                                    kVar2 = kVar2.b;
                                }
                                obj3 = kVar2.a;
                            } else {
                                bVar.a(new b.a(kVar, m));
                                bVar.e = 1;
                                obj3 = null;
                            }
                            dVar.b(13);
                            if (dVar.a == 13) {
                                dVar.b(16);
                                return obj3;
                            }
                            throw new JSONException("illegal ref");
                        }
                        throw new JSONException("illegal ref, " + e.a(i3));
                    }
                } finally {
                    bVar.a(kVar);
                }
            }
        } else {
            throw new JSONException("syntax error, expect {, actual " + e.a(i));
        }
    }

    protected Map<?, ?> a(Type type) {
        if (type == Properties.class) {
            return new Properties();
        }
        if (type == Hashtable.class) {
            return new Hashtable();
        }
        if (type == IdentityHashMap.class) {
            return new IdentityHashMap();
        }
        if (type == SortedMap.class || type == TreeMap.class) {
            return new TreeMap();
        }
        if (type == ConcurrentMap.class || type == ConcurrentHashMap.class) {
            return new ConcurrentHashMap();
        }
        if (type == Map.class || type == HashMap.class) {
            return new HashMap();
        }
        if (type == LinkedHashMap.class) {
            return new LinkedHashMap();
        }
        if (type == JDJSONObject.class) {
            return new JDJSONObject();
        }
        if (type instanceof ParameterizedType) {
            ParameterizedType parameterizedType = (ParameterizedType) type;
            Type rawType = parameterizedType.getRawType();
            if (EnumMap.class.equals(rawType)) {
                return new EnumMap((Class) parameterizedType.getActualTypeArguments()[0]);
            }
            return a(rawType);
        }
        Class cls = (Class) type;
        if (!cls.isInterface()) {
            try {
                return (Map) cls.newInstance();
            } catch (Exception e) {
                throw new JSONException("unsupport type " + type, e);
            }
        } else {
            throw new JSONException("unsupport type " + type);
        }
    }
}
