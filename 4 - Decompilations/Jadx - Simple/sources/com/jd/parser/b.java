package com.jd.parser;

import com.jd.JSONException;
import com.jd.a.d;
import com.jd.framework.json.JDJSON;
import com.jd.framework.json.JDJSONArray;
import com.jd.framework.json.JDJSONObject;
import com.jd.parser.a.c;
import com.jd.parser.a.e;
import com.jd.parser.a.f;
import com.jd.serializer.aa;
import com.jd.serializer.k;
import java.io.Closeable;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public class b implements Closeable {
    public final n a;
    public l b;
    public final d c;
    protected k d;
    public int e;
    protected List<c> f;
    protected List<com.jd.parser.a.b> g;
    public e h;
    private String i;
    private DateFormat j;
    private k[] k;
    private int l;
    private List<a> m;

    public DateFormat a() {
        if (this.j == null) {
            this.j = new SimpleDateFormat(this.i, this.c.n);
            this.j.setTimeZone(this.c.m);
        }
        return this.j;
    }

    public b(String str, l lVar) {
        this(new d(str, JDJSON.DEFAULT_PARSER_FEATURE), lVar);
    }

    public b(String str, l lVar, int i) {
        this(new d(str, i), lVar);
    }

    public b(char[] cArr, int i, l lVar, int i2) {
        this(new d(cArr, i, i2), lVar);
    }

    public b(d dVar, l lVar) {
        this.i = JDJSON.DEFFAULT_DATE_FORMAT;
        this.l = 0;
        this.e = 0;
        this.f = null;
        this.g = null;
        this.h = null;
        this.c = dVar;
        this.b = lVar;
        this.a = lVar.c;
        char c = 26;
        if (dVar.d == '{') {
            int i = dVar.e + 1;
            dVar.e = i;
            dVar.d = i < dVar.r ? dVar.q.charAt(i) : c;
            dVar.a = 12;
        } else if (dVar.d == '[') {
            int i2 = dVar.e + 1;
            dVar.e = i2;
            dVar.d = i2 < dVar.r ? dVar.q.charAt(i2) : c;
            dVar.a = 14;
        } else {
            dVar.e();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:125:0x0238, code lost:
        r3.b(16);
     */
    /* JADX WARN: Code restructure failed: missing block: B:126:0x023f, code lost:
        if (r3.a != 13) goto L_0x02b0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:127:0x0241, code lost:
        r3.b(16);
     */
    /* JADX WARN: Code restructure failed: missing block: B:128:0x0244, code lost:
        r2 = r17.b.a((java.lang.reflect.Type) r6);
     */
    /* JADX WARN: Code restructure failed: missing block: B:129:0x024c, code lost:
        if ((r2 instanceof com.jd.parser.f) == false) goto L_0x0283;
     */
    /* JADX WARN: Code restructure failed: missing block: B:130:0x024e, code lost:
        r2 = (com.jd.parser.f) r2;
        r3 = r2.a((com.jd.parser.b) r17, r6);
        r0 = r18.entrySet().iterator();
     */
    /* JADX WARN: Code restructure failed: missing block: B:132:0x0260, code lost:
        if (r0.hasNext() == false) goto L_0x0280;
     */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x0262, code lost:
        r4 = (java.util.Map.Entry) r0.next();
        r7 = r4.getKey();
     */
    /* JADX WARN: Code restructure failed: missing block: B:134:0x026e, code lost:
        if ((r7 instanceof java.lang.String) == false) goto L_0x025c;
     */
    /* JADX WARN: Code restructure failed: missing block: B:135:0x0270, code lost:
        r7 = r2.a((java.lang.String) r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:136:0x0276, code lost:
        if (r7 == null) goto L_0x025c;
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x0278, code lost:
        r7.a(r3, r4.getValue());
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x0280, code lost:
        r16 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:139:0x0283, code lost:
        r16 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:140:0x0285, code lost:
        if (r16 != null) goto L_0x02a2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x0289, code lost:
        if (r6 != java.lang.Cloneable.class) goto L_0x0291;
     */
    /* JADX WARN: Code restructure failed: missing block: B:143:0x028b, code lost:
        r16 = new java.util.HashMap();
     */
    /* JADX WARN: Code restructure failed: missing block: B:145:0x0297, code lost:
        if ("java.util.Collections$EmptyMap".equals(r5) == false) goto L_0x029e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:146:0x0299, code lost:
        r16 = java.util.Collections.emptyMap();
     */
    /* JADX WARN: Code restructure failed: missing block: B:147:0x029e, code lost:
        r16 = r6.newInstance();
     */
    /* JADX WARN: Code restructure failed: missing block: B:148:0x02a2, code lost:
        if (r13 != false) goto L_0x02a6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:149:0x02a4, code lost:
        r17.d = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:150:0x02a6, code lost:
        return r16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x02a7, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:153:0x02af, code lost:
        throw new com.jd.JSONException("create instance error", r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:154:0x02b0, code lost:
        r17.e = 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x02b5, code lost:
        if (r17.d == null) goto L_0x02be;
     */
    /* JADX WARN: Code restructure failed: missing block: B:157:0x02b9, code lost:
        if ((r19 instanceof java.lang.Integer) != false) goto L_0x02be;
     */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x02bb, code lost:
        f();
     */
    /* JADX WARN: Code restructure failed: missing block: B:160:0x02c2, code lost:
        if (r18.size() <= 0) goto L_0x02d2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:161:0x02c4, code lost:
        r0 = com.jd.a.d.a((java.lang.Object) r18, (java.lang.Class<java.lang.Object>) r6, r17.b);
        a(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:162:0x02cd, code lost:
        if (r13 != false) goto L_0x02d1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:163:0x02cf, code lost:
        r17.d = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x02d1, code lost:
        return r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:165:0x02d2, code lost:
        r0 = r17.b.a((java.lang.reflect.Type) r6).a(r17, r6, r19);
     */
    /* JADX WARN: Code restructure failed: missing block: B:166:0x02dc, code lost:
        if (r13 != false) goto L_0x02e0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:167:0x02de, code lost:
        r17.d = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:168:0x02e0, code lost:
        return r0;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:292:0x04da A[Catch: all -> 0x06cc, TryCatch #2 {all -> 0x06cc, blocks: (B:20:0x0065, B:23:0x006f, B:26:0x0078, B:29:0x0087, B:31:0x0091, B:34:0x0099, B:35:0x00b9, B:38:0x00c0, B:41:0x00ca, B:42:0x00d0, B:48:0x00e3, B:50:0x00ed, B:51:0x00f0, B:54:0x00f8, B:55:0x0110, B:65:0x0123, B:66:0x0129, B:68:0x012e, B:69:0x0133, B:71:0x0139, B:72:0x013d, B:75:0x0145, B:76:0x015f, B:77:0x0160, B:78:0x017a, B:84:0x0184, B:87:0x0193, B:89:0x019d, B:90:0x01bd, B:91:0x01be, B:94:0x01cb, B:97:0x01d7, B:98:0x01dd, B:114:0x01fc, B:117:0x0206, B:118:0x020b, B:120:0x0211, B:122:0x0219, B:124:0x022b, B:125:0x0238, B:127:0x0241, B:128:0x0244, B:130:0x024e, B:131:0x025c, B:133:0x0262, B:135:0x0270, B:137:0x0278, B:143:0x028b, B:144:0x0291, B:146:0x0299, B:147:0x029e, B:152:0x02a8, B:153:0x02af, B:154:0x02b0, B:156:0x02b7, B:158:0x02bb, B:159:0x02be, B:161:0x02c4, B:165:0x02d2, B:172:0x02e8, B:174:0x02f0, B:176:0x02f7, B:178:0x0306, B:180:0x030e, B:183:0x0313, B:185:0x0317, B:187:0x031e, B:189:0x0326, B:191:0x032a, B:192:0x032d, B:193:0x0338, B:196:0x0341, B:198:0x0345, B:199:0x0348, B:201:0x034c, B:202:0x0350, B:203:0x035c, B:205:0x0367, B:207:0x036b, B:211:0x0375, B:212:0x038f, B:213:0x0390, B:214:0x03ac, B:217:0x03b1, B:223:0x03c2, B:225:0x03c8, B:227:0x03d3, B:228:0x03d9, B:230:0x03de, B:231:0x03e3, B:238:0x03f4, B:241:0x0401, B:244:0x0411, B:245:0x0417, B:247:0x0420, B:252:0x042d, B:253:0x0430, B:255:0x043a, B:256:0x043e, B:257:0x0441, B:259:0x0445, B:266:0x0459, B:267:0x0473, B:270:0x0478, B:273:0x0484, B:274:0x048a, B:276:0x049b, B:277:0x04a6, B:280:0x04af, B:282:0x04b5, B:285:0x04bb, B:287:0x04c1, B:289:0x04c9, B:292:0x04da, B:295:0x04e2, B:296:0x04e4, B:298:0x04e9, B:300:0x04f2, B:301:0x04f6, B:303:0x04fb, B:304:0x04fe, B:306:0x0504, B:308:0x050b, B:315:0x051c, B:316:0x0536, B:319:0x053b, B:321:0x0547, B:324:0x055a, B:326:0x0566, B:327:0x0573, B:331:0x057d, B:334:0x0589, B:337:0x0596, B:338:0x059c, B:341:0x05a8, B:344:0x05b5, B:345:0x05bb, B:347:0x05c4, B:350:0x05d1, B:351:0x05d7, B:354:0x05e2, B:357:0x05ef, B:358:0x05f5, B:361:0x0600, B:364:0x060d, B:365:0x0613, B:366:0x061a, B:368:0x061f, B:372:0x0629, B:373:0x0643, B:374:0x0644, B:376:0x0655, B:377:0x0659, B:379:0x0662, B:384:0x066e, B:387:0x067b, B:388:0x0695, B:389:0x0696, B:390:0x06b0, B:391:0x06b1, B:392:0x06cb), top: B:400:0x0065, inners: #0, #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:298:0x04e9 A[Catch: all -> 0x06cc, TryCatch #2 {all -> 0x06cc, blocks: (B:20:0x0065, B:23:0x006f, B:26:0x0078, B:29:0x0087, B:31:0x0091, B:34:0x0099, B:35:0x00b9, B:38:0x00c0, B:41:0x00ca, B:42:0x00d0, B:48:0x00e3, B:50:0x00ed, B:51:0x00f0, B:54:0x00f8, B:55:0x0110, B:65:0x0123, B:66:0x0129, B:68:0x012e, B:69:0x0133, B:71:0x0139, B:72:0x013d, B:75:0x0145, B:76:0x015f, B:77:0x0160, B:78:0x017a, B:84:0x0184, B:87:0x0193, B:89:0x019d, B:90:0x01bd, B:91:0x01be, B:94:0x01cb, B:97:0x01d7, B:98:0x01dd, B:114:0x01fc, B:117:0x0206, B:118:0x020b, B:120:0x0211, B:122:0x0219, B:124:0x022b, B:125:0x0238, B:127:0x0241, B:128:0x0244, B:130:0x024e, B:131:0x025c, B:133:0x0262, B:135:0x0270, B:137:0x0278, B:143:0x028b, B:144:0x0291, B:146:0x0299, B:147:0x029e, B:152:0x02a8, B:153:0x02af, B:154:0x02b0, B:156:0x02b7, B:158:0x02bb, B:159:0x02be, B:161:0x02c4, B:165:0x02d2, B:172:0x02e8, B:174:0x02f0, B:176:0x02f7, B:178:0x0306, B:180:0x030e, B:183:0x0313, B:185:0x0317, B:187:0x031e, B:189:0x0326, B:191:0x032a, B:192:0x032d, B:193:0x0338, B:196:0x0341, B:198:0x0345, B:199:0x0348, B:201:0x034c, B:202:0x0350, B:203:0x035c, B:205:0x0367, B:207:0x036b, B:211:0x0375, B:212:0x038f, B:213:0x0390, B:214:0x03ac, B:217:0x03b1, B:223:0x03c2, B:225:0x03c8, B:227:0x03d3, B:228:0x03d9, B:230:0x03de, B:231:0x03e3, B:238:0x03f4, B:241:0x0401, B:244:0x0411, B:245:0x0417, B:247:0x0420, B:252:0x042d, B:253:0x0430, B:255:0x043a, B:256:0x043e, B:257:0x0441, B:259:0x0445, B:266:0x0459, B:267:0x0473, B:270:0x0478, B:273:0x0484, B:274:0x048a, B:276:0x049b, B:277:0x04a6, B:280:0x04af, B:282:0x04b5, B:285:0x04bb, B:287:0x04c1, B:289:0x04c9, B:292:0x04da, B:295:0x04e2, B:296:0x04e4, B:298:0x04e9, B:300:0x04f2, B:301:0x04f6, B:303:0x04fb, B:304:0x04fe, B:306:0x0504, B:308:0x050b, B:315:0x051c, B:316:0x0536, B:319:0x053b, B:321:0x0547, B:324:0x055a, B:326:0x0566, B:327:0x0573, B:331:0x057d, B:334:0x0589, B:337:0x0596, B:338:0x059c, B:341:0x05a8, B:344:0x05b5, B:345:0x05bb, B:347:0x05c4, B:350:0x05d1, B:351:0x05d7, B:354:0x05e2, B:357:0x05ef, B:358:0x05f5, B:361:0x0600, B:364:0x060d, B:365:0x0613, B:366:0x061a, B:368:0x061f, B:372:0x0629, B:373:0x0643, B:374:0x0644, B:376:0x0655, B:377:0x0659, B:379:0x0662, B:384:0x066e, B:387:0x067b, B:388:0x0695, B:389:0x0696, B:390:0x06b0, B:391:0x06b1, B:392:0x06cb), top: B:400:0x0065, inners: #0, #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:300:0x04f2 A[Catch: all -> 0x06cc, TryCatch #2 {all -> 0x06cc, blocks: (B:20:0x0065, B:23:0x006f, B:26:0x0078, B:29:0x0087, B:31:0x0091, B:34:0x0099, B:35:0x00b9, B:38:0x00c0, B:41:0x00ca, B:42:0x00d0, B:48:0x00e3, B:50:0x00ed, B:51:0x00f0, B:54:0x00f8, B:55:0x0110, B:65:0x0123, B:66:0x0129, B:68:0x012e, B:69:0x0133, B:71:0x0139, B:72:0x013d, B:75:0x0145, B:76:0x015f, B:77:0x0160, B:78:0x017a, B:84:0x0184, B:87:0x0193, B:89:0x019d, B:90:0x01bd, B:91:0x01be, B:94:0x01cb, B:97:0x01d7, B:98:0x01dd, B:114:0x01fc, B:117:0x0206, B:118:0x020b, B:120:0x0211, B:122:0x0219, B:124:0x022b, B:125:0x0238, B:127:0x0241, B:128:0x0244, B:130:0x024e, B:131:0x025c, B:133:0x0262, B:135:0x0270, B:137:0x0278, B:143:0x028b, B:144:0x0291, B:146:0x0299, B:147:0x029e, B:152:0x02a8, B:153:0x02af, B:154:0x02b0, B:156:0x02b7, B:158:0x02bb, B:159:0x02be, B:161:0x02c4, B:165:0x02d2, B:172:0x02e8, B:174:0x02f0, B:176:0x02f7, B:178:0x0306, B:180:0x030e, B:183:0x0313, B:185:0x0317, B:187:0x031e, B:189:0x0326, B:191:0x032a, B:192:0x032d, B:193:0x0338, B:196:0x0341, B:198:0x0345, B:199:0x0348, B:201:0x034c, B:202:0x0350, B:203:0x035c, B:205:0x0367, B:207:0x036b, B:211:0x0375, B:212:0x038f, B:213:0x0390, B:214:0x03ac, B:217:0x03b1, B:223:0x03c2, B:225:0x03c8, B:227:0x03d3, B:228:0x03d9, B:230:0x03de, B:231:0x03e3, B:238:0x03f4, B:241:0x0401, B:244:0x0411, B:245:0x0417, B:247:0x0420, B:252:0x042d, B:253:0x0430, B:255:0x043a, B:256:0x043e, B:257:0x0441, B:259:0x0445, B:266:0x0459, B:267:0x0473, B:270:0x0478, B:273:0x0484, B:274:0x048a, B:276:0x049b, B:277:0x04a6, B:280:0x04af, B:282:0x04b5, B:285:0x04bb, B:287:0x04c1, B:289:0x04c9, B:292:0x04da, B:295:0x04e2, B:296:0x04e4, B:298:0x04e9, B:300:0x04f2, B:301:0x04f6, B:303:0x04fb, B:304:0x04fe, B:306:0x0504, B:308:0x050b, B:315:0x051c, B:316:0x0536, B:319:0x053b, B:321:0x0547, B:324:0x055a, B:326:0x0566, B:327:0x0573, B:331:0x057d, B:334:0x0589, B:337:0x0596, B:338:0x059c, B:341:0x05a8, B:344:0x05b5, B:345:0x05bb, B:347:0x05c4, B:350:0x05d1, B:351:0x05d7, B:354:0x05e2, B:357:0x05ef, B:358:0x05f5, B:361:0x0600, B:364:0x060d, B:365:0x0613, B:366:0x061a, B:368:0x061f, B:372:0x0629, B:373:0x0643, B:374:0x0644, B:376:0x0655, B:377:0x0659, B:379:0x0662, B:384:0x066e, B:387:0x067b, B:388:0x0695, B:389:0x0696, B:390:0x06b0, B:391:0x06b1, B:392:0x06cb), top: B:400:0x0065, inners: #0, #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:301:0x04f6 A[Catch: all -> 0x06cc, TryCatch #2 {all -> 0x06cc, blocks: (B:20:0x0065, B:23:0x006f, B:26:0x0078, B:29:0x0087, B:31:0x0091, B:34:0x0099, B:35:0x00b9, B:38:0x00c0, B:41:0x00ca, B:42:0x00d0, B:48:0x00e3, B:50:0x00ed, B:51:0x00f0, B:54:0x00f8, B:55:0x0110, B:65:0x0123, B:66:0x0129, B:68:0x012e, B:69:0x0133, B:71:0x0139, B:72:0x013d, B:75:0x0145, B:76:0x015f, B:77:0x0160, B:78:0x017a, B:84:0x0184, B:87:0x0193, B:89:0x019d, B:90:0x01bd, B:91:0x01be, B:94:0x01cb, B:97:0x01d7, B:98:0x01dd, B:114:0x01fc, B:117:0x0206, B:118:0x020b, B:120:0x0211, B:122:0x0219, B:124:0x022b, B:125:0x0238, B:127:0x0241, B:128:0x0244, B:130:0x024e, B:131:0x025c, B:133:0x0262, B:135:0x0270, B:137:0x0278, B:143:0x028b, B:144:0x0291, B:146:0x0299, B:147:0x029e, B:152:0x02a8, B:153:0x02af, B:154:0x02b0, B:156:0x02b7, B:158:0x02bb, B:159:0x02be, B:161:0x02c4, B:165:0x02d2, B:172:0x02e8, B:174:0x02f0, B:176:0x02f7, B:178:0x0306, B:180:0x030e, B:183:0x0313, B:185:0x0317, B:187:0x031e, B:189:0x0326, B:191:0x032a, B:192:0x032d, B:193:0x0338, B:196:0x0341, B:198:0x0345, B:199:0x0348, B:201:0x034c, B:202:0x0350, B:203:0x035c, B:205:0x0367, B:207:0x036b, B:211:0x0375, B:212:0x038f, B:213:0x0390, B:214:0x03ac, B:217:0x03b1, B:223:0x03c2, B:225:0x03c8, B:227:0x03d3, B:228:0x03d9, B:230:0x03de, B:231:0x03e3, B:238:0x03f4, B:241:0x0401, B:244:0x0411, B:245:0x0417, B:247:0x0420, B:252:0x042d, B:253:0x0430, B:255:0x043a, B:256:0x043e, B:257:0x0441, B:259:0x0445, B:266:0x0459, B:267:0x0473, B:270:0x0478, B:273:0x0484, B:274:0x048a, B:276:0x049b, B:277:0x04a6, B:280:0x04af, B:282:0x04b5, B:285:0x04bb, B:287:0x04c1, B:289:0x04c9, B:292:0x04da, B:295:0x04e2, B:296:0x04e4, B:298:0x04e9, B:300:0x04f2, B:301:0x04f6, B:303:0x04fb, B:304:0x04fe, B:306:0x0504, B:308:0x050b, B:315:0x051c, B:316:0x0536, B:319:0x053b, B:321:0x0547, B:324:0x055a, B:326:0x0566, B:327:0x0573, B:331:0x057d, B:334:0x0589, B:337:0x0596, B:338:0x059c, B:341:0x05a8, B:344:0x05b5, B:345:0x05bb, B:347:0x05c4, B:350:0x05d1, B:351:0x05d7, B:354:0x05e2, B:357:0x05ef, B:358:0x05f5, B:361:0x0600, B:364:0x060d, B:365:0x0613, B:366:0x061a, B:368:0x061f, B:372:0x0629, B:373:0x0643, B:374:0x0644, B:376:0x0655, B:377:0x0659, B:379:0x0662, B:384:0x066e, B:387:0x067b, B:388:0x0695, B:389:0x0696, B:390:0x06b0, B:391:0x06b1, B:392:0x06cb), top: B:400:0x0065, inners: #0, #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:303:0x04fb A[Catch: all -> 0x06cc, TryCatch #2 {all -> 0x06cc, blocks: (B:20:0x0065, B:23:0x006f, B:26:0x0078, B:29:0x0087, B:31:0x0091, B:34:0x0099, B:35:0x00b9, B:38:0x00c0, B:41:0x00ca, B:42:0x00d0, B:48:0x00e3, B:50:0x00ed, B:51:0x00f0, B:54:0x00f8, B:55:0x0110, B:65:0x0123, B:66:0x0129, B:68:0x012e, B:69:0x0133, B:71:0x0139, B:72:0x013d, B:75:0x0145, B:76:0x015f, B:77:0x0160, B:78:0x017a, B:84:0x0184, B:87:0x0193, B:89:0x019d, B:90:0x01bd, B:91:0x01be, B:94:0x01cb, B:97:0x01d7, B:98:0x01dd, B:114:0x01fc, B:117:0x0206, B:118:0x020b, B:120:0x0211, B:122:0x0219, B:124:0x022b, B:125:0x0238, B:127:0x0241, B:128:0x0244, B:130:0x024e, B:131:0x025c, B:133:0x0262, B:135:0x0270, B:137:0x0278, B:143:0x028b, B:144:0x0291, B:146:0x0299, B:147:0x029e, B:152:0x02a8, B:153:0x02af, B:154:0x02b0, B:156:0x02b7, B:158:0x02bb, B:159:0x02be, B:161:0x02c4, B:165:0x02d2, B:172:0x02e8, B:174:0x02f0, B:176:0x02f7, B:178:0x0306, B:180:0x030e, B:183:0x0313, B:185:0x0317, B:187:0x031e, B:189:0x0326, B:191:0x032a, B:192:0x032d, B:193:0x0338, B:196:0x0341, B:198:0x0345, B:199:0x0348, B:201:0x034c, B:202:0x0350, B:203:0x035c, B:205:0x0367, B:207:0x036b, B:211:0x0375, B:212:0x038f, B:213:0x0390, B:214:0x03ac, B:217:0x03b1, B:223:0x03c2, B:225:0x03c8, B:227:0x03d3, B:228:0x03d9, B:230:0x03de, B:231:0x03e3, B:238:0x03f4, B:241:0x0401, B:244:0x0411, B:245:0x0417, B:247:0x0420, B:252:0x042d, B:253:0x0430, B:255:0x043a, B:256:0x043e, B:257:0x0441, B:259:0x0445, B:266:0x0459, B:267:0x0473, B:270:0x0478, B:273:0x0484, B:274:0x048a, B:276:0x049b, B:277:0x04a6, B:280:0x04af, B:282:0x04b5, B:285:0x04bb, B:287:0x04c1, B:289:0x04c9, B:292:0x04da, B:295:0x04e2, B:296:0x04e4, B:298:0x04e9, B:300:0x04f2, B:301:0x04f6, B:303:0x04fb, B:304:0x04fe, B:306:0x0504, B:308:0x050b, B:315:0x051c, B:316:0x0536, B:319:0x053b, B:321:0x0547, B:324:0x055a, B:326:0x0566, B:327:0x0573, B:331:0x057d, B:334:0x0589, B:337:0x0596, B:338:0x059c, B:341:0x05a8, B:344:0x05b5, B:345:0x05bb, B:347:0x05c4, B:350:0x05d1, B:351:0x05d7, B:354:0x05e2, B:357:0x05ef, B:358:0x05f5, B:361:0x0600, B:364:0x060d, B:365:0x0613, B:366:0x061a, B:368:0x061f, B:372:0x0629, B:373:0x0643, B:374:0x0644, B:376:0x0655, B:377:0x0659, B:379:0x0662, B:384:0x066e, B:387:0x067b, B:388:0x0695, B:389:0x0696, B:390:0x06b0, B:391:0x06b1, B:392:0x06cb), top: B:400:0x0065, inners: #0, #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:312:0x0512  */
    /* JADX WARN: Removed duplicated region for block: B:431:0x0504 A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r10v0 */
    /* JADX WARN: Type inference failed for: r10v1, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r10v2 */
    /* JADX WARN: Type inference failed for: r10v3 */
    /* JADX WARN: Type inference failed for: r17v0, types: [com.jd.parser.b] */
    /* JADX WARN: Type inference failed for: r3v0, types: [com.jd.parser.d] */
    /* JADX WARN: Type inference failed for: r6v100, types: [java.lang.Object] */
    /* JADX WARN: Type inference failed for: r6v57, types: [com.jd.parser.d] */
    /* JADX WARN: Type inference failed for: r6v98, types: [java.lang.Number] */
    /* JADX WARN: Type inference failed for: r6v99, types: [java.lang.Number] */
    /* JADX WARN: Unknown variable types count: 3 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public final java.lang.Object a(java.util.Map r18, java.lang.Object r19) {
        /*
        // Method dump skipped, instructions count: 1747
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jd.parser.b.a(java.util.Map, java.lang.Object):java.lang.Object");
    }

    public <T> T a(Class<T> cls) {
        return (T) a(cls, (Object) null);
    }

    public <T> T a(Type type) {
        return (T) a(type, (Object) null);
    }

    public <T> T a(Type type, Object obj) {
        if (this.c.a == 8) {
            this.c.e();
            return null;
        }
        if (this.c.a == 4) {
            if (type == byte[].class) {
                T t = (T) this.c.l();
                this.c.e();
                return t;
            } else if (type == char[].class) {
                String m = this.c.m();
                this.c.e();
                return (T) m.toCharArray();
            }
        }
        try {
            return (T) this.b.a(type).a(this, type, obj);
        } catch (JSONException e) {
            throw e;
        } catch (Exception e2) {
            throw new JSONException(e2.getMessage(), e2);
        }
    }

    public void a(Class<?> cls, Collection collection) {
        a((Type) cls, collection);
    }

    public void a(Type type, Collection collection) {
        a(type, collection, (Object) null);
    }

    /* JADX WARN: Finally extract failed */
    public void a(Type type, Collection collection, Object obj) {
        k kVar;
        String str;
        if (this.c.a == 21 || this.c.a == 22) {
            this.c.e();
        }
        if (this.c.a == 14) {
            if (Integer.TYPE == type) {
                kVar = k.a;
                this.c.b(2);
            } else if (String.class == type) {
                kVar = aa.a;
                this.c.b(4);
            } else {
                kVar = this.b.a(type);
                this.c.b(12);
            }
            k kVar2 = this.d;
            if (!this.c.t) {
                a(this.d, collection, obj);
            }
            int i = 0;
            while (true) {
                try {
                    if (this.c.a == 16) {
                        this.c.e();
                    } else if (this.c.a == 15) {
                        this.d = kVar2;
                        this.c.b(16);
                        return;
                    } else {
                        Object obj2 = null;
                        if (Integer.TYPE == type) {
                            collection.add(k.a.a(this, (Type) null, (Object) null));
                        } else if (String.class == type) {
                            if (this.c.a == 4) {
                                str = this.c.m();
                                this.c.b(16);
                            } else {
                                Object g = g();
                                if (g == null) {
                                    str = null;
                                } else {
                                    str = g.toString();
                                }
                            }
                            collection.add(str);
                        } else {
                            if (this.c.a == 8) {
                                this.c.e();
                            } else {
                                obj2 = kVar.a(this, type, Integer.valueOf(i));
                            }
                            collection.add(obj2);
                            if (this.e == 1) {
                                a(collection);
                            }
                        }
                        if (this.c.a == 16) {
                            this.c.e();
                        }
                        i++;
                    }
                } catch (Throwable th) {
                    this.d = kVar2;
                    throw th;
                }
            }
        } else {
            throw new JSONException("exepct '[', but " + e.a(this.c.a) + ", " + this.c.h());
        }
    }

    public Object[] a(Type[] typeArr) {
        Object obj;
        boolean z;
        Class<?> cls;
        if (this.c.a == 8) {
            this.c.b(16);
            return null;
        } else if (this.c.a == 14) {
            Object[] objArr = new Object[typeArr.length];
            if (typeArr.length == 0) {
                this.c.b(15);
                if (this.c.a == 15) {
                    this.c.b(16);
                    return new Object[0];
                }
                throw new JSONException("syntax error, " + this.c.h());
            }
            this.c.b(2);
            for (int i = 0; i < typeArr.length; i++) {
                if (this.c.a == 8) {
                    this.c.b(16);
                    obj = null;
                } else {
                    Type type = typeArr[i];
                    if (type == Integer.TYPE || type == Integer.class) {
                        if (this.c.a == 2) {
                            obj = Integer.valueOf(this.c.k());
                            this.c.b(16);
                        } else {
                            obj = d.a(g(), type, this.b);
                        }
                    } else if (type != String.class) {
                        if (i != typeArr.length - 1 || !(type instanceof Class)) {
                            cls = null;
                            z = false;
                        } else {
                            Class cls2 = (Class) type;
                            z = cls2.isArray();
                            cls = cls2.getComponentType();
                        }
                        if (!z || this.c.a == 14) {
                            obj = this.b.a(type).a(this, type, null);
                        } else {
                            ArrayList arrayList = new ArrayList();
                            f a2 = this.b.a((Type) cls);
                            if (this.c.a != 15) {
                                while (true) {
                                    arrayList.add(a2.a(this, type, null));
                                    if (this.c.a != 16) {
                                        break;
                                    }
                                    this.c.b(12);
                                }
                                if (this.c.a != 15) {
                                    throw new JSONException("syntax error, " + this.c.h());
                                }
                            }
                            obj = d.a(arrayList, type, this.b);
                        }
                    } else if (this.c.a == 4) {
                        obj = this.c.m();
                        this.c.b(16);
                    } else {
                        obj = d.a(g(), type, this.b);
                    }
                }
                objArr[i] = obj;
                if (this.c.a == 15) {
                    break;
                } else if (this.c.a == 16) {
                    if (i == typeArr.length - 1) {
                        this.c.b(15);
                    } else {
                        this.c.b(2);
                    }
                } else {
                    throw new JSONException("syntax error, " + this.c.h());
                }
            }
            if (this.c.a == 15) {
                this.c.b(16);
                return objArr;
            }
            throw new JSONException("syntax error, " + this.c.h());
        } else {
            throw new JSONException("syntax error, " + this.c.h());
        }
    }

    public void a(Object obj) {
        Object obj2;
        Class<?> cls = obj.getClass();
        f a2 = this.b.a((Type) cls);
        f fVar = a2 instanceof f ? (f) a2 : null;
        int i = this.c.a;
        if (i == 12 || i == 16) {
            while (true) {
                String a3 = this.c.a(this.a);
                if (a3 == null) {
                    if (this.c.a == 13) {
                        this.c.b(16);
                        return;
                    } else if (this.c.a == 16) {
                        continue;
                    }
                }
                com.jd.parser.a.d a4 = fVar != null ? fVar.a(a3) : null;
                if (a4 != null) {
                    Class<?> cls2 = a4.b.f;
                    Type type = a4.b.g;
                    if (cls2 == Integer.TYPE) {
                        this.c.a(':');
                        obj2 = k.a.a(this, type, (Object) null);
                    } else if (cls2 == String.class) {
                        this.c.a(':');
                        obj2 = h();
                    } else if (cls2 == Long.TYPE) {
                        this.c.a(':');
                        obj2 = k.a.a(this, type, (Object) null);
                    } else {
                        f a5 = this.b.a(cls2, type);
                        this.c.a(':');
                        obj2 = a5.a(this, type, null);
                    }
                    a4.a(obj, obj2);
                    if (this.c.a != 16 && this.c.a == 13) {
                        this.c.b(16);
                        return;
                    }
                } else if ((this.c.c & Feature.IgnoreNotMatch.mask) != 0) {
                    this.c.a(':');
                    g();
                    if (this.c.a == 13) {
                        this.c.e();
                        return;
                    }
                } else {
                    throw new JSONException("setter not found, class " + cls.getName() + ", property " + a3);
                }
            }
        } else {
            throw new JSONException("syntax error, expect {, actual " + e.a(i));
        }
    }

    public void a(Collection collection) {
        if (collection instanceof List) {
            a c = c();
            c.a = new m(this, (List) collection, collection.size() - 1);
            c.b = this.d;
            this.e = 0;
            return;
        }
        a c2 = c();
        c2.a = new m(collection);
        c2.b = this.d;
        this.e = 0;
    }

    public void b(Map map, Object obj) {
        m mVar = new m(map, obj);
        a c = c();
        c.a = mVar;
        c.b = this.d;
        this.e = 0;
    }

    public JDJSONObject b() {
        return (JDJSONObject) a((this.c.c & Feature.OrderedField.mask) != 0 ? new JDJSONObject(new LinkedHashMap()) : new JDJSONObject(), (Object) null);
    }

    public final void b(Collection collection) {
        a(collection, (Object) null);
    }

    public final void a(Collection collection, Object obj) {
        boolean z;
        char c;
        Number number;
        JDJSONObject jDJSONObject;
        char c2;
        char c3;
        char c4;
        int i = this.c.a;
        if (i == 21 || i == 22) {
            this.c.e();
            i = this.c.a;
        }
        if (i == 14) {
            boolean z2 = this.c.t;
            k kVar = this.d;
            if (!z2) {
                a(kVar, collection, obj);
            }
            try {
                char c5 = this.c.d;
                char c6 = ']';
                if (c5 != '\"') {
                    if (c5 == ']') {
                        this.c.c();
                        this.c.b(16);
                        if (z2) {
                            return;
                        }
                        return;
                    }
                    if (c5 == '{') {
                        d dVar = this.c;
                        int i2 = dVar.e + 1;
                        dVar.e = i2;
                        d dVar2 = this.c;
                        if (i2 >= this.c.r) {
                            c4 = 26;
                        } else {
                            c4 = this.c.q.charAt(i2);
                        }
                        dVar2.d = c4;
                        this.c.a = 12;
                    } else {
                        this.c.b(12);
                    }
                    z = false;
                } else if ((this.c.c & Feature.AllowISO8601DateFormat.mask) == 0) {
                    z = true;
                } else {
                    this.c.b(4);
                    z = false;
                }
                int i3 = 0;
                while (true) {
                    if (z && this.c.d == '\"') {
                        String b = this.c.b('\"');
                        char c7 = this.c.d;
                        if (c7 == ',') {
                            d dVar3 = this.c;
                            int i4 = dVar3.e + 1;
                            dVar3.e = i4;
                            d dVar4 = this.c;
                            if (i4 >= this.c.r) {
                                c3 = 26;
                            } else {
                                c3 = this.c.q.charAt(i4);
                            }
                            dVar4.d = c3;
                            collection.add(b);
                            if (this.e == 1) {
                                a(collection);
                            }
                            if (c3 == '\"') {
                                i3++;
                                c6 = ']';
                            } else {
                                this.c.e();
                                z = false;
                            }
                        } else if (c7 == c6) {
                            d dVar5 = this.c;
                            int i5 = dVar5.e + 1;
                            dVar5.e = i5;
                            d dVar6 = this.c;
                            if (i5 >= this.c.r) {
                                c2 = 26;
                            } else {
                                c2 = this.c.q.charAt(i5);
                            }
                            dVar6.d = c2;
                            collection.add(b);
                            if (this.e == 1) {
                                a(collection);
                            }
                            this.c.b(16);
                            if (!z2) {
                                this.d = kVar;
                                return;
                            }
                            return;
                        } else {
                            this.c.e();
                        }
                    }
                    int i6 = this.c.a;
                    while (i6 == 16) {
                        this.c.e();
                        i6 = this.c.a;
                    }
                    JDJSONArray jDJSONArray = null;
                    jDJSONArray = null;
                    switch (i6) {
                        case 2:
                            Number g = this.c.g();
                            this.c.b(16);
                            jDJSONArray = g;
                            break;
                        case 3:
                            if ((this.c.c & Feature.UseBigDecimal.mask) != 0) {
                                number = this.c.a(true);
                            } else {
                                number = this.c.a(false);
                            }
                            this.c.b(16);
                            jDJSONArray = number;
                            break;
                        case 4:
                            String m = this.c.m();
                            this.c.b(16);
                            jDJSONArray = m;
                            if ((this.c.c & Feature.AllowISO8601DateFormat.mask) != 0) {
                                d dVar7 = new d(m);
                                Date date = m;
                                if (dVar7.b(true)) {
                                    date = dVar7.o.getTime();
                                }
                                dVar7.b();
                                jDJSONArray = date;
                                break;
                            }
                            break;
                        case 6:
                            Boolean bool = Boolean.TRUE;
                            this.c.b(16);
                            jDJSONArray = bool;
                            break;
                        case 7:
                            Boolean bool2 = Boolean.FALSE;
                            this.c.b(16);
                            jDJSONArray = bool2;
                            break;
                        case 8:
                            this.c.b(4);
                            break;
                        case 12:
                            if ((this.c.c & Feature.OrderedField.mask) != 0) {
                                jDJSONObject = new JDJSONObject(new LinkedHashMap());
                            } else {
                                jDJSONObject = new JDJSONObject();
                            }
                            jDJSONArray = a(jDJSONObject, Integer.valueOf(i3));
                            break;
                        case 14:
                            JDJSONArray jDJSONArray2 = new JDJSONArray();
                            a(jDJSONArray2, Integer.valueOf(i3));
                            jDJSONArray = jDJSONArray2;
                            break;
                        case 15:
                            this.c.b(16);
                            if (!z2) {
                                this.d = kVar;
                                return;
                            }
                            return;
                        case 20:
                            throw new JSONException("unclosed jsonArray");
                        case 23:
                            this.c.b(4);
                            break;
                        default:
                            jDJSONArray = g();
                            break;
                    }
                    collection.add(jDJSONArray == 1 ? 1 : 0);
                    if (this.e == 1) {
                        a(collection);
                    }
                    if (this.c.a == 16) {
                        char c8 = this.c.d;
                        if (c8 == '\"') {
                            this.c.b = this.c.e;
                            this.c.j();
                        } else if (c8 >= '0' && c8 <= '9') {
                            this.c.b = this.c.e;
                            this.c.p();
                        } else if (c8 == '{') {
                            this.c.a = 12;
                            d dVar8 = this.c;
                            int i7 = dVar8.e + 1;
                            dVar8.e = i7;
                            d dVar9 = this.c;
                            if (i7 >= this.c.r) {
                                c = 26;
                            } else {
                                c = this.c.q.charAt(i7);
                            }
                            dVar9.d = c;
                        } else {
                            this.c.e();
                        }
                    }
                    i3++;
                    c6 = ']';
                }
            } finally {
                if (!z2) {
                    this.d = kVar;
                }
            }
        } else {
            throw new JSONException("syntax error, expect [, actual " + e.a(i) + ", pos " + this.c.b);
        }
    }

    public void a(a aVar) {
        if (this.m == null) {
            this.m = new ArrayList(2);
        }
        this.m.add(aVar);
    }

    public a c() {
        List<a> list = this.m;
        return list.get(list.size() - 1);
    }

    public List<com.jd.parser.a.b> d() {
        if (this.g == null) {
            this.g = new ArrayList(2);
        }
        return this.g;
    }

    public List<c> e() {
        if (this.f == null) {
            this.f = new ArrayList(2);
        }
        return this.f;
    }

    public void a(k kVar) {
        if (!this.c.t) {
            this.d = kVar;
        }
    }

    public void f() {
        this.d = this.d.b;
        k[] kVarArr = this.k;
        int i = this.l;
        kVarArr[i - 1] = null;
        this.l = i - 1;
    }

    public k a(k kVar, Object obj, Object obj2) {
        if (this.c.t) {
            return null;
        }
        this.d = new k(kVar, obj, obj2);
        int i = this.l;
        this.l = i + 1;
        k[] kVarArr = this.k;
        if (kVarArr == null) {
            this.k = new k[8];
        } else if (i >= kVarArr.length) {
            k[] kVarArr2 = new k[(kVarArr.length * 3) / 2];
            System.arraycopy(kVarArr, 0, kVarArr2, 0, kVarArr.length);
            this.k = kVarArr2;
        }
        k[] kVarArr3 = this.k;
        k kVar2 = this.d;
        kVarArr3[i] = kVar2;
        return kVar2;
    }

    public Object g() {
        return b((Object) null);
    }

    public Object b(Object obj) {
        boolean z = true;
        switch (this.c.a) {
            case 2:
                Number g = this.c.g();
                this.c.e();
                return g;
            case 3:
                if ((this.c.c & Feature.UseBigDecimal.mask) == 0) {
                    z = false;
                }
                Number a2 = this.c.a(z);
                this.c.e();
                return a2;
            case 4:
                String m = this.c.m();
                this.c.b(16);
                if ((this.c.c & Feature.AllowISO8601DateFormat.mask) != 0) {
                    d dVar = new d(m);
                    try {
                        if (dVar.b(true)) {
                            return dVar.o.getTime();
                        }
                    } finally {
                        dVar.b();
                    }
                }
                return m;
            case 5:
            case 10:
            case 11:
            case 13:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            default:
                throw new JSONException("syntax error, " + this.c.h());
            case 6:
                this.c.b(16);
                return Boolean.TRUE;
            case 7:
                this.c.b(16);
                return Boolean.FALSE;
            case 8:
            case 23:
                this.c.e();
                return null;
            case 9:
                this.c.b(18);
                if (this.c.a == 18) {
                    this.c.b(10);
                    a(10);
                    long longValue = this.c.g().longValue();
                    a(2);
                    a(11);
                    return new Date(longValue);
                }
                throw new JSONException("syntax error, " + this.c.h());
            case 12:
                return a((this.c.c & Feature.OrderedField.mask) != 0 ? new JDJSONObject(new LinkedHashMap()) : new JDJSONObject(), obj);
            case 14:
                JDJSONArray jDJSONArray = new JDJSONArray();
                a(jDJSONArray, obj);
                return jDJSONArray;
            case 20:
                if (this.c.n()) {
                    return null;
                }
                throw new JSONException("syntax error, " + this.c.h());
            case 21:
                this.c.e();
                HashSet hashSet = new HashSet();
                a(hashSet, obj);
                return hashSet;
            case 22:
                this.c.e();
                TreeSet treeSet = new TreeSet();
                a(treeSet, obj);
                return treeSet;
        }
    }

    public final void a(int i) {
        if (this.c.a == i) {
            this.c.e();
            return;
        }
        throw new JSONException("syntax error, expect " + e.a(i) + ", actual " + e.a(this.c.a));
    }

    @Override // java.io.Closeable, java.lang.AutoCloseable
    public void close() {
        try {
            if (this.c.a != 20) {
                throw new JSONException("not close json text, token : " + e.a(this.c.a));
            }
        } finally {
            this.c.b();
        }
    }

    public void c(Object obj) {
        List<a> list = this.m;
        if (list != null) {
            int size = list.size();
            for (int i = 0; i < size; i++) {
                a aVar = this.m.get(i);
                com.jd.parser.a.d dVar = aVar.a;
                if (dVar != null) {
                    Object obj2 = null;
                    Object obj3 = aVar.b != null ? aVar.b.a : null;
                    String str = aVar.d;
                    if (str.startsWith("$")) {
                        for (int i2 = 0; i2 < this.l; i2++) {
                            if (str.equals(this.k[i2].toString())) {
                                obj2 = this.k[i2].a;
                            }
                        }
                    } else {
                        obj2 = aVar.c.a;
                    }
                    dVar.a(obj3, obj2);
                }
            }
        }
    }

    public String h() {
        int i = this.c.a;
        if (i == 4) {
            String m = this.c.m();
            char c = 26;
            if (this.c.d == ',') {
                d dVar = this.c;
                int i2 = dVar.e + 1;
                dVar.e = i2;
                d dVar2 = this.c;
                if (i2 < dVar2.r) {
                    c = this.c.q.charAt(i2);
                }
                dVar2.d = c;
                this.c.a = 16;
            } else if (this.c.d == ']') {
                d dVar3 = this.c;
                int i3 = dVar3.e + 1;
                dVar3.e = i3;
                d dVar4 = this.c;
                if (i3 < dVar4.r) {
                    c = this.c.q.charAt(i3);
                }
                dVar4.d = c;
                this.c.a = 15;
            } else if (this.c.d == '}') {
                d dVar5 = this.c;
                int i4 = dVar5.e + 1;
                dVar5.e = i4;
                d dVar6 = this.c;
                if (i4 < dVar6.r) {
                    c = this.c.q.charAt(i4);
                }
                dVar6.d = c;
                this.c.a = 13;
            } else {
                this.c.e();
            }
            return m;
        } else if (i == 2) {
            String d = this.c.d();
            this.c.b(16);
            return d;
        } else {
            Object g = g();
            if (g == null) {
                return null;
            }
            return g.toString();
        }
    }

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public static class a {
        public com.jd.parser.a.d a;
        public k b;
        private final k c;
        private final String d;

        public a(k kVar, String str) {
            this.c = kVar;
            this.d = str;
        }
    }
}
