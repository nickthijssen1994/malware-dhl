package cn.bingoogolapple.qrcode.core;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PointF;
import android.graphics.Rect;
import android.hardware.Camera;
import android.os.AsyncTask;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.widget.RelativeLayout;
import cn.bingoogolapple.qrcode.core.CameraPreview;

/* compiled from: TbsSdkJava */
/* loaded from: classes.dex */
public abstract class QRCodeView extends RelativeLayout implements Camera.PreviewCallback {
    private static final int AMBIENT_BRIGHTNESS_DARK;
    private static final long[] AMBIENT_BRIGHTNESS_DARK_LIST = {255, 255, 255, 255};
    private static final int AMBIENT_BRIGHTNESS_WAIT_SCAN_TIME;
    private static final int NO_CAMERA_ID;
    private int mAmbientBrightnessDarkIndex;
    private ValueAnimator mAutoZoomAnimator;
    protected BarcodeType mBarcodeType;
    protected Camera mCamera;
    protected int mCameraId;
    protected CameraPreview mCameraPreview;
    protected a mDelegate;
    private long mLastAmbientBrightnessRecordTime;
    private long mLastAutoZoomTime;
    private long mLastPreviewFrameTime;
    private PointF[] mLocationPoints;
    private Paint mPaint;
    protected c mProcessDataTask;
    protected ScanBoxView mScanBoxView;
    protected boolean mSpotAble;

    /* compiled from: TbsSdkJava */
    /* loaded from: classes.dex */
    public interface a {
        void a();

        void a(String str);

        void a(boolean z);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public abstract d processBitmapData(Bitmap bitmap);

    /* JADX INFO: Access modifiers changed from: protected */
    public abstract d processData(byte[] bArr, int i, int i2, boolean z);

    protected abstract void setupReader();

    public QRCodeView(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public QRCodeView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.mSpotAble = false;
        this.mCameraId = 0;
        this.mBarcodeType = BarcodeType.HIGH_FREQUENCY;
        this.mLastPreviewFrameTime = 0;
        this.mLastAutoZoomTime = 0;
        this.mLastAmbientBrightnessRecordTime = System.currentTimeMillis();
        this.mAmbientBrightnessDarkIndex = 0;
        initView(context, attributeSet);
        setupReader();
    }

    private void initView(Context context, AttributeSet attributeSet) {
        this.mCameraPreview = new CameraPreview(context);
        this.mCameraPreview.setDelegate(new CameraPreview.a() { // from class: cn.bingoogolapple.qrcode.core.QRCodeView.1
            @Override // cn.bingoogolapple.qrcode.core.CameraPreview.a
            public void a() {
                QRCodeView.this.setOneShotPreviewCallback();
            }
        });
        this.mScanBoxView = new ScanBoxView(context);
        this.mScanBoxView.a(this, attributeSet);
        this.mCameraPreview.setId(R.id.bgaqrcode_camera_preview);
        addView(this.mCameraPreview);
        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(context, attributeSet);
        layoutParams.addRule(6, this.mCameraPreview.getId());
        layoutParams.addRule(8, this.mCameraPreview.getId());
        addView(this.mScanBoxView, layoutParams);
        this.mPaint = new Paint();
        this.mPaint.setColor(getScanBoxView().getCornerColor());
        this.mPaint.setStyle(Paint.Style.FILL);
    }

    public void setOneShotPreviewCallback() {
        if (this.mSpotAble && this.mCameraPreview.d()) {
            try {
                this.mCamera.setOneShotPreviewCallback(this);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void setDelegate(a aVar) {
        this.mDelegate = aVar;
    }

    public CameraPreview getCameraPreview() {
        return this.mCameraPreview;
    }

    public ScanBoxView getScanBoxView() {
        return this.mScanBoxView;
    }

    public void showScanRect() {
        ScanBoxView scanBoxView = this.mScanBoxView;
        if (scanBoxView != null) {
            scanBoxView.setVisibility(0);
        }
    }

    public void hiddenScanRect() {
        ScanBoxView scanBoxView = this.mScanBoxView;
        if (scanBoxView != null) {
            scanBoxView.setVisibility(8);
        }
    }

    public void startCamera() {
        startCamera(this.mCameraId);
    }

    public void startCamera(int i) {
        if (this.mCamera == null && Camera.getNumberOfCameras() != 0) {
            int findCameraIdByFacing = findCameraIdByFacing(i);
            if (findCameraIdByFacing != -1) {
                startCameraById(findCameraIdByFacing);
                return;
            }
            if (i == 0) {
                findCameraIdByFacing = findCameraIdByFacing(1);
            } else if (i == 1) {
                findCameraIdByFacing = findCameraIdByFacing(0);
            }
            if (findCameraIdByFacing != -1) {
                startCameraById(findCameraIdByFacing);
            }
        }
    }

    private int findCameraIdByFacing(int i) {
        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
        for (int i2 = 0; i2 < Camera.getNumberOfCameras(); i2++) {
            try {
                Camera.getCameraInfo(i2, cameraInfo);
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (cameraInfo.facing == i) {
                return i2;
            }
        }
        return -1;
    }

    private void startCameraById(int i) {
        try {
            this.mCameraId = i;
            this.mCamera = Camera.open(i);
            this.mCameraPreview.setCamera(this.mCamera);
        } catch (Exception e) {
            e.printStackTrace();
            a aVar = this.mDelegate;
            if (aVar != null) {
                aVar.a();
            }
        }
    }

    public void stopCamera() {
        try {
            stopSpotAndHiddenRect();
            if (this.mCamera != null) {
                this.mCameraPreview.a();
                this.mCameraPreview.setCamera(null);
                this.mCamera.release();
                this.mCamera = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void startSpot() {
        this.mSpotAble = true;
        startCamera();
        setOneShotPreviewCallback();
    }

    public void stopSpot() {
        this.mSpotAble = false;
        c cVar = this.mProcessDataTask;
        if (cVar != null) {
            cVar.b();
            this.mProcessDataTask = null;
        }
        Camera camera = this.mCamera;
        if (camera != null) {
            try {
                camera.setOneShotPreviewCallback(null);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void stopSpotAndHiddenRect() {
        stopSpot();
        hiddenScanRect();
    }

    public void startSpotAndShowRect() {
        startSpot();
        showScanRect();
    }

    public void openFlashlight() {
        postDelayed(new Runnable() { // from class: cn.bingoogolapple.qrcode.core.QRCodeView.2
            @Override // java.lang.Runnable
            public void run() {
                QRCodeView.this.mCameraPreview.b();
            }
        }, this.mCameraPreview.d() ? 0 : 500);
    }

    public void closeFlashlight() {
        this.mCameraPreview.c();
    }

    public void onDestroy() {
        stopCamera();
        this.mDelegate = null;
    }

    public void changeToScanBarcodeStyle() {
        if (!this.mScanBoxView.getIsBarcode()) {
            this.mScanBoxView.setIsBarcode(true);
        }
    }

    public void changeToScanQRCodeStyle() {
        if (this.mScanBoxView.getIsBarcode()) {
            this.mScanBoxView.setIsBarcode(false);
        }
    }

    public boolean getIsScanBarcodeStyle() {
        return this.mScanBoxView.getIsBarcode();
    }

    @Override // android.hardware.Camera.PreviewCallback
    public void onPreviewFrame(byte[] bArr, Camera camera) {
        if (a.a()) {
            a.a("两次 onPreviewFrame 时间间隔：" + (System.currentTimeMillis() - this.mLastPreviewFrameTime));
            this.mLastPreviewFrameTime = System.currentTimeMillis();
        }
        CameraPreview cameraPreview = this.mCameraPreview;
        if (cameraPreview != null && cameraPreview.d()) {
            try {
                handleAmbientBrightness(bArr, camera);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (this.mSpotAble) {
            c cVar = this.mProcessDataTask;
            if (cVar == null || !(cVar.getStatus() == AsyncTask.Status.PENDING || this.mProcessDataTask.getStatus() == AsyncTask.Status.RUNNING)) {
                this.mProcessDataTask = new c(camera, bArr, this, a.a(getContext())).a();
            }
        }
    }

    private void handleAmbientBrightness(byte[] bArr, Camera camera) {
        CameraPreview cameraPreview = this.mCameraPreview;
        if (cameraPreview != null && cameraPreview.d()) {
            long currentTimeMillis = System.currentTimeMillis();
            if (currentTimeMillis - this.mLastAmbientBrightnessRecordTime >= 150) {
                this.mLastAmbientBrightnessRecordTime = currentTimeMillis;
                long j = (long) (camera.getParameters().getPreviewSize().width * camera.getParameters().getPreviewSize().height);
                if (Math.abs(((float) bArr.length) - (((float) j) * 1.5f)) < 1.0E-5f) {
                    boolean z = false;
                    long j2 = 0;
                    for (int i = 0; ((long) i) < j; i += 10) {
                        j2 += ((long) bArr[i]) & 255;
                    }
                    long j3 = j2 / (j / ((long) 10));
                    long[] jArr = AMBIENT_BRIGHTNESS_DARK_LIST;
                    int length = this.mAmbientBrightnessDarkIndex % jArr.length;
                    this.mAmbientBrightnessDarkIndex = length;
                    jArr[length] = j3;
                    this.mAmbientBrightnessDarkIndex++;
                    int length2 = jArr.length;
                    int i2 = 0;
                    while (true) {
                        if (i2 >= length2) {
                            z = true;
                            break;
                        } else if (jArr[i2] > 60) {
                            break;
                        } else {
                            i2++;
                        }
                    }
                    a.a("摄像头环境亮度为：" + j3);
                    a aVar = this.mDelegate;
                    if (aVar != null) {
                        aVar.a(z);
                    }
                }
            }
        }
    }

    public void decodeQRCode(String str) {
        this.mProcessDataTask = new c(str, this).a();
    }

    public void decodeQRCode(Bitmap bitmap) {
        this.mProcessDataTask = new c(bitmap, this).a();
    }

    public void onPostParseData(d dVar) {
        String str;
        if (this.mSpotAble) {
            if (dVar == null) {
                str = null;
            } else {
                str = dVar.a;
            }
            if (TextUtils.isEmpty(str)) {
                try {
                    if (this.mCamera != null) {
                        this.mCamera.setOneShotPreviewCallback(this);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                this.mSpotAble = false;
                try {
                    if (this.mDelegate != null) {
                        this.mDelegate.a(str);
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        }
    }

    public void onPostParseBitmapOrPicture(d dVar) {
        String str;
        if (this.mDelegate != null) {
            if (dVar == null) {
                str = null;
            } else {
                str = dVar.a;
            }
            this.mDelegate.a(str);
        }
    }

    public void onScanBoxRectChanged(Rect rect) {
        this.mCameraPreview.a(rect);
    }

    @Override // android.view.View, android.view.ViewGroup
    protected void dispatchDraw(Canvas canvas) {
        PointF[] pointFArr;
        super.dispatchDraw(canvas);
        if (isShowLocationPoint() && (pointFArr = this.mLocationPoints) != null) {
            for (PointF pointF : pointFArr) {
                canvas.drawCircle(pointF.x, pointF.y, 10.0f, this.mPaint);
            }
            this.mLocationPoints = null;
            postInvalidateDelayed(2000);
        }
    }

    protected boolean isShowLocationPoint() {
        ScanBoxView scanBoxView = this.mScanBoxView;
        return scanBoxView != null && scanBoxView.b();
    }

    protected boolean isAutoZoom() {
        ScanBoxView scanBoxView = this.mScanBoxView;
        return scanBoxView != null && scanBoxView.c();
    }

    protected boolean transformToViewCoordinates(PointF[] pointFArr, Rect rect, boolean z, String str) {
        if (pointFArr == null || pointFArr.length == 0) {
            return false;
        }
        try {
            Camera.Size previewSize = this.mCamera.getParameters().getPreviewSize();
            boolean z2 = this.mCameraId == 1;
            int c = a.c(getContext());
            PointF[] pointFArr2 = new PointF[pointFArr.length];
            int i = 0;
            for (PointF pointF : pointFArr) {
                pointFArr2[i] = transform(pointF.x, pointF.y, (float) previewSize.width, (float) previewSize.height, z2, c, rect);
                i++;
            }
            this.mLocationPoints = pointFArr2;
            postInvalidate();
            if (z) {
                return handleAutoZoom(pointFArr2, str);
            }
            return false;
        } catch (Exception e) {
            this.mLocationPoints = null;
            e.printStackTrace();
            return false;
        }
    }

    private boolean handleAutoZoom(PointF[] pointFArr, final String str) {
        if (this.mCamera == null || this.mScanBoxView == null || pointFArr == null || pointFArr.length < 1) {
            return false;
        }
        ValueAnimator valueAnimator = this.mAutoZoomAnimator;
        if ((valueAnimator != null && valueAnimator.isRunning()) || System.currentTimeMillis() - this.mLastAutoZoomTime < 1200) {
            return true;
        }
        Camera.Parameters parameters = this.mCamera.getParameters();
        if (!parameters.isZoomSupported()) {
            return false;
        }
        float f = pointFArr[0].x;
        float f2 = pointFArr[0].y;
        float f3 = pointFArr[1].x;
        float f4 = pointFArr[1].y;
        float abs = Math.abs(f - f3);
        float abs2 = Math.abs(f2 - f4);
        if (((int) Math.sqrt((double) ((abs * abs) + (abs2 * abs2)))) > this.mScanBoxView.getRectWidth() / 4) {
            return false;
        }
        final int maxZoom = parameters.getMaxZoom();
        final int i = maxZoom / 4;
        final int zoom = parameters.getZoom();
        post(new Runnable() { // from class: cn.bingoogolapple.qrcode.core.QRCodeView.3
            @Override // java.lang.Runnable
            public void run() {
                QRCodeView qRCodeView = QRCodeView.this;
                int i2 = zoom;
                qRCodeView.startAutoZoom(i2, Math.min(i + i2, maxZoom), str);
            }
        });
        return true;
    }

    public void startAutoZoom(int i, int i2, final String str) {
        this.mAutoZoomAnimator = ValueAnimator.ofInt(i, i2);
        this.mAutoZoomAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: cn.bingoogolapple.qrcode.core.QRCodeView.4
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                if (QRCodeView.this.mCameraPreview != null && QRCodeView.this.mCameraPreview.d()) {
                    int intValue = ((Integer) valueAnimator.getAnimatedValue()).intValue();
                    Camera.Parameters parameters = QRCodeView.this.mCamera.getParameters();
                    parameters.setZoom(intValue);
                    QRCodeView.this.mCamera.setParameters(parameters);
                }
            }
        });
        this.mAutoZoomAnimator.addListener(new AnimatorListenerAdapter() { // from class: cn.bingoogolapple.qrcode.core.QRCodeView.5
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                QRCodeView.this.onPostParseData(new d(str));
            }
        });
        this.mAutoZoomAnimator.setDuration(600L);
        this.mAutoZoomAnimator.setRepeatCount(0);
        this.mAutoZoomAnimator.start();
        this.mLastAutoZoomTime = System.currentTimeMillis();
    }

    @Override // android.view.View, android.view.ViewGroup
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        ValueAnimator valueAnimator = this.mAutoZoomAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
    }

    private PointF transform(float f, float f2, float f3, float f4, boolean z, int i, Rect rect) {
        PointF pointF;
        int width = getWidth();
        int height = getHeight();
        if (a.a(getContext())) {
            float f5 = (float) width;
            float f6 = (float) height;
            pointF = new PointF((f4 - f) * (f5 / f4), (f3 - f2) * (f6 / f3));
            pointF.y = f6 - pointF.y;
            pointF.x = f5 - pointF.x;
            if (rect == null) {
                pointF.y += (float) i;
            }
        } else {
            float f7 = (float) width;
            pointF = new PointF(f * (f7 / f3), f2 * (((float) height) / f4));
            if (z) {
                pointF.x = f7 - pointF.x;
            }
        }
        if (rect != null) {
            pointF.y += (float) rect.top;
            pointF.x += (float) rect.left;
        }
        return pointF;
    }
}
