package cn.com.union.fido.ui;

import android.annotation.TargetApi;
import android.app.Activity;
import android.hardware.fingerprint.FingerprintManager;
import android.util.Base64;
import cn.com.union.fido.bean.authenticator.RawKeyHandle;
import cn.com.union.fido.bean.authenticator.command.RegisterCommand;
import cn.com.union.fido.bean.authenticator.command.SignCommand;
import cn.com.union.fido.bean.authenticator.command.SignResponse;
import cn.com.union.fido.bean.authenticator.tag.TAG_EXTENSION;
import cn.com.union.fido.bean.authenticator.tag.TAG_UAFV1_AUTH_ASSERTION;
import cn.com.union.fido.bean.authenticator.tag.TAG_UAFV1_SIGNED_DATA;
import cn.com.union.fido.bean.authenticator.tag.TAG_USERNAME_AND_KEYHANDLE;
import cn.com.union.fido.bean.uafclient.Operation;
import cn.com.union.fido.db.SignCounterManager;
import cn.com.union.fido.util.CryptoTools;
import cn.com.union.fido.util.StringTools;
import cn.com.union.fido.util.UAFTools;
import cn.com.union.fido.util.Utility;
import cn.com.union.fido.util.asn1.ASN1Set;
import cn.com.union.fido.util.asn1.x509.X509Name;
import cn.com.union.fido.util.p10.PKCS10CertificationRequest;
import com.jdcn.fido.utils.TrackerUtil;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.Signature;
import java.util.ArrayList;
import java.util.List;

/* loaded from: classes.dex */
public class FidoSignUtil {
    private SignCommand signCommand = new SignCommand();
    private RegisterCommand registerCommand = new RegisterCommand();
    private List<RawKeyHandle> remainingKeyhandleList = new ArrayList();

    private void getKeyHandle(Activity activity, byte[] bArr) {
        this.signCommand.deserialize(bArr);
        this.remainingKeyhandleList = new ArrayList();
        for (String str : this.signCommand.keyHandles) {
            RawKeyHandle generateDecryptedKeyHandle = UAFTools.generateDecryptedKeyHandle(activity, str);
            if (generateDecryptedKeyHandle != null && generateDecryptedKeyHandle.KHAccessToken.equals(this.signCommand.khAccessToken)) {
                this.remainingKeyhandleList.add(generateDecryptedKeyHandle);
            }
        }
    }

    private PrivateKey getPrivateHandle(Activity activity, IAuthPresenter iAuthPresenter) {
        PrivateKey privateKey;
        if (iAuthPresenter.getOpType().equals(Operation.Reg.name())) {
            this.registerCommand.deserialize(iAuthPresenter.getFidoCmd());
            privateKey = UAFTools.genUAuthKeyPair(2, StringTools.urlSafeBase64Enc(CryptoTools.hash(this.registerCommand.userName + "004B#0001" + this.registerCommand.extensions.get(1).data, "SHA256")), activity).getPrivate();
        } else {
            privateKey = null;
        }
        if (!iAuthPresenter.getOpType().equals(Operation.Auth.name())) {
            return privateKey;
        }
        getKeyHandle(activity, iAuthPresenter.getFidoCmd());
        if (this.remainingKeyhandleList.size() != 1) {
            return privateKey;
        }
        RawKeyHandle rawKeyHandle = this.remainingKeyhandleList.get(0);
        String str = rawKeyHandle.PrivateKey;
        return UAFTools.getUAuthPrivateKeyTEE(257, str, StringTools.urlSafeBase64Enc(CryptoTools.hash(rawKeyHandle.Username + "004B#0001" + this.signCommand.extensions.get(1).data, "SHA256")));
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r14v1, types: [byte[]] */
    /* JADX WARN: Type inference failed for: r14v11 */
    /* JADX WARN: Type inference failed for: r14v7 */
    /* JADX WARN: Type inference failed for: r14v9 */
    /* JADX WARN: Type inference failed for: r2v12, types: [byte[]] */
    /* JADX WARN: Type inference failed for: r3v10 */
    /* JADX WARN: Type inference failed for: r3v25 */
    /* JADX WARN: Type inference failed for: r3v35 */
    /* JADX WARN: Type inference failed for: r3v36 */
    /* JADX WARN: Type inference failed for: r3v37 */
    /* JADX WARN: Type inference failed for: r3v38, types: [cn.com.union.fido.bean.authenticator.tag.TAG_EXTENSION] */
    /* JADX WARN: Type inference failed for: r3v8, types: [cn.com.union.fido.bean.authenticator.tag.TAG_EXTENSION] */
    /* JADX WARN: Type inference failed for: r3v9 */
    /* JADX WARN: Unknown variable types count: 2 */
    @android.annotation.TargetApi(23)
    /* Code decompiled incorrectly, please refer to instructions dump */
    public cn.com.union.fido.bean.authenticator.command.RegisterResponse doRegProcess(android.app.Activity r22, android.hardware.fingerprint.FingerprintManager.CryptoObject r23, java.lang.String r24) {
        /*
        // Method dump skipped, instructions count: 829
        */
        throw new UnsupportedOperationException("Method not decompiled: cn.com.union.fido.ui.FidoSignUtil.doRegProcess(android.app.Activity, android.hardware.fingerprint.FingerprintManager$CryptoObject, java.lang.String):cn.com.union.fido.bean.authenticator.command.RegisterResponse");
    }

    @TargetApi(23)
    public SignResponse doSignProcess(Activity activity, FingerprintManager.CryptoObject cryptoObject, String str) {
        byte[] bArr;
        SignCounterManager signCounterManager = new SignCounterManager(activity);
        SignResponse signResponse = new SignResponse();
        String str2 = this.signCommand.transactionContent;
        List<TAG_EXTENSION> list = this.signCommand.extensions;
        if (this.remainingKeyhandleList.size() == 0) {
            signResponse.statusCode = 2;
        } else if (this.remainingKeyhandleList.size() > 1) {
            ArrayList arrayList = new ArrayList();
            for (RawKeyHandle rawKeyHandle : this.remainingKeyhandleList) {
                String str3 = rawKeyHandle.Username;
                String generateEncryptedKeyHandleAhth = UAFTools.generateEncryptedKeyHandleAhth(activity, rawKeyHandle);
                TAG_USERNAME_AND_KEYHANDLE tag_username_and_keyhandle = new TAG_USERNAME_AND_KEYHANDLE();
                tag_username_and_keyhandle.keyHandle = generateEncryptedKeyHandleAhth;
                tag_username_and_keyhandle.userName = str3;
                arrayList.add(tag_username_and_keyhandle);
            }
            signResponse.userNameAndKeyHandle = arrayList;
        } else if (this.remainingKeyhandleList.size() == 1) {
            RawKeyHandle rawKeyHandle2 = this.remainingKeyhandleList.get(0);
            String generateEncryptedKeyHandleAhth2 = UAFTools.generateEncryptedKeyHandleAhth(activity, rawKeyHandle2);
            TAG_UAFV1_SIGNED_DATA tag_uafv1_signed_data = new TAG_UAFV1_SIGNED_DATA();
            tag_uafv1_signed_data.authenticationMode = 1;
            if (StringTools.isValidateString(str2)) {
                tag_uafv1_signed_data.tcHash = CryptoTools.hash(str2, "SHA256");
                tag_uafv1_signed_data.authenticationMode = 2;
            }
            TAG_UAFV1_AUTH_ASSERTION tag_uafv1_auth_assertion = new TAG_UAFV1_AUTH_ASSERTION();
            tag_uafv1_signed_data.aaid = "004B#0001";
            tag_uafv1_signed_data.authenticatorVersion = 1;
            tag_uafv1_signed_data.signatureAlgAndEncoding = 2;
            tag_uafv1_signed_data.authnrNonce = CryptoTools.genRandom(8);
            tag_uafv1_signed_data.finalChallenge = this.signCommand.finalChallenge;
            TAG_EXTENSION tag_extension = null;
            if (tag_uafv1_signed_data.authenticationMode == 1) {
                tag_uafv1_signed_data.tcHash = null;
            }
            String hash2Hex = CryptoTools.hash2Hex(generateEncryptedKeyHandleAhth2);
            if (hash2Hex == null) {
                return null;
            }
            String substring = hash2Hex.substring(0, 32);
            tag_uafv1_signed_data.keyID = Utility.strToByte(substring);
            int updateOrAddCounter = signCounterManager.updateOrAddCounter("004B#0001", substring, rawKeyHandle2.Username);
            if (-1 == updateOrAddCounter) {
                return null;
            }
            tag_uafv1_signed_data.signCounter = updateOrAddCounter;
            tag_uafv1_signed_data.uvi = UAFTools.genUVI(substring, str);
            byte[] serialize = tag_uafv1_signed_data.serialize();
            try {
                String str4 = rawKeyHandle2.PrivateKey;
                KeyPair uAuthKeyPairTEE = UAFTools.getUAuthKeyPairTEE(257, str4, rawKeyHandle2.Username + "004B#0001");
                Signature signature = cryptoObject.getSignature();
                if (list == null || list.size() != 3) {
                    signature.update(serialize);
                } else if (Boolean.parseBoolean(list.get(2).data)) {
                    PKCS10CertificationRequest pKCS10CertificationRequest = new PKCS10CertificationRequest("SHA256withRSA", new X509Name("CN=" + rawKeyHandle2.Username + ",O=cfca" + System.currentTimeMillis() + ",OU=cfca,C=CN"), uAuthKeyPairTEE.getPublic(), (ASN1Set) null, signature);
                    TAG_EXTENSION tag_extension2 = new TAG_EXTENSION();
                    tag_extension2.id = "p10";
                    tag_extension2.data = new String(Base64.encode(pKCS10CertificationRequest.getEncoded(), 0));
                    tag_extension = tag_extension2;
                    bArr = null;
                    tag_uafv1_auth_assertion.signedData = tag_uafv1_signed_data;
                    tag_uafv1_auth_assertion.signature = bArr;
                    tag_uafv1_auth_assertion.extension = tag_extension;
                    signResponse.assertion = tag_uafv1_auth_assertion.serialize();
                    signResponse.statusCode = 0;
                } else {
                    signature.update(serialize);
                }
                bArr = signature.sign();
                tag_uafv1_auth_assertion.signedData = tag_uafv1_signed_data;
                tag_uafv1_auth_assertion.signature = bArr;
                tag_uafv1_auth_assertion.extension = tag_extension;
                signResponse.assertion = tag_uafv1_auth_assertion.serialize();
                signResponse.statusCode = 0;
            } catch (Throwable th) {
                TrackerUtil.appendException("SCENE_TRANS_SIG_EXCEPTION", th);
                return null;
            }
        }
        return signResponse;
    }

    @TargetApi(23)
    public FingerprintManager.CryptoObject genCryptoObject(Activity activity, IAuthPresenter iAuthPresenter) {
        Signature instance = Signature.getInstance("SHA256withECDSA");
        instance.initSign(getPrivateHandle(activity, iAuthPresenter));
        return new FingerprintManager.CryptoObject(instance);
    }
}
