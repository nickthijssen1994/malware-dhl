package cn.com.union.fido.util;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.security.KeyPairGeneratorSpec;
import android.security.keystore.KeyGenParameterSpec;
import android.text.TextUtils;
import cn.com.union.fido.bean.SecCheckResult;
import cn.com.union.fido.util.asn1.ASN1Encodable;
import cn.com.union.fido.util.asn1.ASN1EncodableVector;
import cn.com.union.fido.util.asn1.DERInteger;
import cn.com.union.fido.util.asn1.DERSequence;
import com.jd.fireeye.common.b;
import java.math.BigInteger;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.RSAKeyGenParameterSpec;
import java.util.Arrays;
import java.util.GregorianCalendar;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.security.auth.x500.X500Principal;

/* loaded from: classes.dex */
public class CryptoTools {
    static {
        try {
            System.loadLibrary("cnsse");
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }

    public static byte[] decrypt(String str, String str2) {
        try {
            if (Build.VERSION.SDK_INT < 23) {
                return null;
            }
            SecretKey keyInTee = getKeyInTee(str);
            Cipher instance = Cipher.getInstance("AES/CBC/PKCS7Padding");
            instance.init(2, keyInTee, new IvParameterSpec(str.substring(0, 16).getBytes()));
            return instance.doFinal(StringTools.urlSafeBase64Dec(str2));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] decrypt(byte[] bArr, PrivateKey privateKey) {
        if (Build.VERSION.SDK_INT >= 18) {
            try {
                Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                instance.init(2, privateKey);
                instance.update(bArr);
                return instance.doFinal();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public static void delKeyInTee(String str) {
        try {
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            instance.deleteEntry(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static byte[] doHash(byte[] bArr, String str) {
        try {
            MessageDigest instance = MessageDigest.getInstance(str);
            instance.update(bArr);
            return instance.digest();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] doSignData(PrivateKey privateKey, String str, byte[] bArr) {
        try {
            Signature instance = Signature.getInstance(str);
            instance.initSign(privateKey);
            instance.update(bArr);
            return instance.sign();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] doSignDataTee(PrivateKey privateKey, String str, byte[] bArr) {
        try {
            if (Build.VERSION.SDK_INT < 18) {
                return null;
            }
            Signature instance = Signature.getInstance(str);
            instance.initSign(privateKey);
            instance.update(bArr);
            return instance.sign();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static String encrypt(String str, byte[] bArr) {
        StringBuffer stringBuffer = new StringBuffer();
        byte[] bArr2 = null;
        try {
            if (Build.VERSION.SDK_INT >= 23) {
                SecretKey keyInTee = getKeyInTee(str);
                Cipher instance = Cipher.getInstance("AES/CBC/PKCS7Padding");
                instance.init(1, keyInTee, new IvParameterSpec(str.substring(0, 16).getBytes()));
                bArr2 = instance.doFinal(bArr);
            }
            stringBuffer.append(StringTools.urlSafeBase64Enc(bArr2));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return stringBuffer.toString();
    }

    public static byte[] encrypt(byte[] bArr, PublicKey publicKey) {
        if (Build.VERSION.SDK_INT >= 18) {
            try {
                Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                instance.init(1, publicKey);
                instance.update(bArr);
                return instance.doFinal();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public static KeyPair genAsymmetricKey(String str, int i) {
        try {
            KeyPairGenerator instance = KeyPairGenerator.getInstance(str);
            instance.initialize(i);
            return instance.genKeyPair();
        } catch (Exception e) {
            throw e;
        }
    }

    public static KeyPair genECKeyTee(String str, String str2, boolean z, int i, Context context) {
        KeyPair keyPair;
        try {
            if (Build.VERSION.SDK_INT >= 23) {
                KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(str2, 4);
                builder.setDigests("SHA-256");
                builder.setAlgorithmParameterSpec(new ECGenParameterSpec(str));
                if (z) {
                    builder.setUserAuthenticationRequired(true);
                    if (i > 0) {
                        builder.setUserAuthenticationValidityDurationSeconds(i);
                    }
                }
                if (Build.VERSION.SDK_INT > 29) {
                    builder.setAttestationChallenge("change".getBytes());
                }
                KeyPairGenerator instance = KeyPairGenerator.getInstance("EC", "AndroidKeyStore");
                instance.initialize(builder.build());
                keyPair = instance.generateKeyPair();
            } else {
                keyPair = null;
            }
            if (Build.VERSION.SDK_INT < 19 || Build.VERSION.SDK_INT >= 23) {
                return keyPair;
            }
            GregorianCalendar gregorianCalendar = new GregorianCalendar();
            GregorianCalendar gregorianCalendar2 = new GregorianCalendar();
            gregorianCalendar2.add(1, 100);
            KeyPairGeneratorSpec.Builder alias = new KeyPairGeneratorSpec.Builder(context).setAlias(str2);
            KeyPairGeneratorSpec build = alias.setSubject(new X500Principal("CN=" + str2)).setSerialNumber(BigInteger.ONE).setStartDate(gregorianCalendar.getTime()).setEndDate(gregorianCalendar2.getTime()).setKeySize(256).setKeyType("EC").build();
            KeyPairGenerator instance2 = KeyPairGenerator.getInstance(b.b, "AndroidKeyStore");
            instance2.initialize(build);
            return instance2.generateKeyPair();
        } catch (Exception e) {
            throw e;
        }
    }

    @TargetApi(23)
    public static KeyPair genRSAKeyTee(int i, String str, boolean z, int i2, Context context) {
        try {
            KeyPair keyPair = null;
            if (Build.VERSION.SDK_INT >= 23) {
                KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(str, 4);
                builder.setDigests("SHA-256");
                builder.setAlgorithmParameterSpec(new RSAKeyGenParameterSpec(i, null));
                builder.setSignaturePaddings("PKCS1");
                if (z) {
                    builder.setUserAuthenticationRequired(true);
                    if (i2 > 0) {
                        builder.setUserAuthenticationValidityDurationSeconds(i2);
                    }
                }
                KeyPairGenerator instance = KeyPairGenerator.getInstance(b.b, "AndroidKeyStore");
                instance.initialize(builder.build());
                keyPair = instance.generateKeyPair();
            }
            if (Build.VERSION.SDK_INT < 18 || Build.VERSION.SDK_INT >= 23) {
                return keyPair;
            }
            GregorianCalendar gregorianCalendar = new GregorianCalendar();
            GregorianCalendar gregorianCalendar2 = new GregorianCalendar();
            gregorianCalendar2.add(1, 100);
            KeyPairGeneratorSpec.Builder alias = new KeyPairGeneratorSpec.Builder(context).setAlias(str);
            KeyPairGeneratorSpec build = alias.setSubject(new X500Principal("CN=" + str)).setSerialNumber(BigInteger.ONE).setStartDate(gregorianCalendar.getTime()).setEndDate(gregorianCalendar2.getTime()).setKeySize(i).setKeyType(b.b).build();
            KeyPairGenerator instance2 = KeyPairGenerator.getInstance(b.b, "AndroidKeyStore");
            instance2.initialize(build);
            return instance2.generateKeyPair();
        } catch (Exception e) {
            throw e;
        }
    }

    public static byte[] genRandom(int i) {
        if (i <= 0) {
            return null;
        }
        try {
            if (Build.VERSION.SDK_INT >= 23) {
                SecureRandom instance = SecureRandom.getInstance("SHA1PRNG");
                byte[] generateSeed = instance.generateSeed(i);
                instance.setSeed(generateSeed);
                instance.nextBytes(new byte[i]);
                return generateSeed;
            }
            SecureRandom.getInstance("SHA1PRNG").nextBytes(new byte[i]);
            return null;
        } catch (Exception e) {
            while (true) {
                e.printStackTrace();
                return null;
            }
        }
    }

    public static Key genSymmetryKey(String str, int i) {
        try {
            KeyGenerator instance = KeyGenerator.getInstance(str);
            instance.init(i);
            return instance.generateKey();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private static SecretKey genSymmetryKeyTee(String str, boolean z, int i) {
        try {
            if (Build.VERSION.SDK_INT < 23) {
                return null;
            }
            KeyGenerator instance = KeyGenerator.getInstance(b.a, "AndroidKeyStore");
            KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(str, 3);
            builder.setBlockModes("CBC");
            builder.setRandomizedEncryptionRequired(false);
            builder.setEncryptionPaddings("PKCS7Padding");
            if (z) {
                builder.setUserAuthenticationRequired(true);
                if (i > 0) {
                    builder.setUserAuthenticationValidityDurationSeconds(i);
                }
            }
            instance.init(builder.build());
            return instance.generateKey();
        } catch (Exception e) {
            throw e;
        }
    }

    public static Certificate[] getCertificateChain(String str) {
        try {
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            return instance.getCertificateChain(str);
        } catch (Throwable unused) {
            return null;
        }
    }

    public static byte[] getDERRSAPublicKey(KeyPair keyPair) {
        try {
            RSAPublicKey rSAPublicKey = (RSAPublicKey) keyPair.getPublic();
            BigInteger modulus = rSAPublicKey.getModulus();
            BigInteger publicExponent = rSAPublicKey.getPublicExponent();
            ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
            aSN1EncodableVector.add(new DERInteger(modulus));
            aSN1EncodableVector.add(new DERInteger(publicExponent));
            return new DERSequence(aSN1EncodableVector).getEncoded(ASN1Encodable.DER);
        } catch (Exception e) {
            throw e;
        }
    }

    public static SecretKey getKeyInTee(String str) {
        Exception e;
        SecretKey secretKey = null;
        try {
            if (Build.VERSION.SDK_INT < 23) {
                return null;
            }
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            SecretKey secretKey2 = (SecretKey) instance.getKey(str, null);
            if (secretKey2 != null) {
                return secretKey2;
            }
            try {
                return genSymmetryKeyTee(str, false, 0);
            } catch (Exception e2) {
                e = e2;
                secretKey = secretKey2;
                e.printStackTrace();
                return secretKey;
            }
        } catch (Exception e3) {
            e = e3;
        }
    }

    public static String getKeyString(Key key) {
        byte[] encoded = key.getEncoded();
        if (encoded != null && encoded.length != 0) {
            return StringTools.urlSafeBase64Enc(encoded);
        }
        return "TEEPrivateKey" + Math.random();
    }

    public static PrivateKey getPrivateKeyInTee(String str) {
        try {
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            instance.containsAlias(str);
            return (PrivateKey) instance.getKey(str, null);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static KeyPair getPrivateKeyPairInTee(String str) {
        try {
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            return new KeyPair(instance.getCertificate(str).getPublicKey(), (PrivateKey) instance.getKey(str, null));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static PublicKey getPublicKeyInTee(String str) {
        try {
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            return instance.getCertificate(str).getPublicKey();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] getRAWECPublicKey(KeyPair keyPair) {
        try {
            ECPoint w = ((ECPublicKey) keyPair.getPublic()).getW();
            byte[] asUnsigned32ByteArray = BigIntegerUtil.asUnsigned32ByteArray(w.getAffineX());
            byte[] asUnsigned32ByteArray2 = BigIntegerUtil.asUnsigned32ByteArray(w.getAffineY());
            byte[] bArr = new byte[65];
            bArr[0] = 4;
            System.arraycopy(asUnsigned32ByteArray, 0, bArr, 1, 32);
            System.arraycopy(asUnsigned32ByteArray2, 0, bArr, 33, 32);
            return bArr;
        } catch (Exception e) {
            throw e;
        }
    }

    public static byte[] getRAWRSAPublicKey(KeyPair keyPair) {
        try {
            RSAPublicKey rSAPublicKey = (RSAPublicKey) keyPair.getPublic();
            byte[] asUnsignedNByteArray = BigIntegerUtil.asUnsignedNByteArray(rSAPublicKey.getModulus(), 256);
            byte[] byteArray = rSAPublicKey.getPublicExponent().toByteArray();
            byte[] copyOf = Arrays.copyOf(asUnsignedNByteArray, asUnsignedNByteArray.length + byteArray.length);
            System.arraycopy(byteArray, 0, copyOf, asUnsignedNByteArray.length, byteArray.length);
            return copyOf;
        } catch (Exception e) {
            throw e;
        }
    }

    public static byte[] hash(String str, String str2) {
        if (StringTools.isValidateString(str)) {
            return doHash(str.getBytes(), str2);
        }
        return null;
    }

    public static String hash2Hex(String str) {
        byte[] doHash = StringTools.isValidateString(str) ? doHash(str.getBytes(), "SHA256") : null;
        if (doHash == null || doHash.length <= 0) {
            return null;
        }
        StringBuilder sb = new StringBuilder(doHash.length * 2);
        for (byte b : doHash) {
            int i = b & 255;
            if (i < 16) {
                sb.append("0");
            }
            sb.append(Integer.toHexString(i));
        }
        return sb.toString();
    }

    public static boolean secretKeyDetection(String str) {
        try {
            if (TextUtils.isEmpty(str) || Build.VERSION.SDK_INT < 23) {
                return false;
            }
            KeyStore instance = KeyStore.getInstance("AndroidKeyStore");
            instance.load(null);
            return instance.containsAlias(str);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static byte[] signData(PrivateKey privateKey, String str, String str2) {
        if (StringTools.isValidateString(str2)) {
            return doSignData(privateKey, str, str2.getBytes());
        }
        return null;
    }

    public static byte[] signDataTee(PrivateKey privateKey, String str, String str2) {
        if (StringTools.isValidateString(str2)) {
            return doSignDataTee(privateKey, str, str2.getBytes());
        }
        return null;
    }

    public static SecretKey unwrap(byte[] bArr, PrivateKey privateKey) {
        if (Build.VERSION.SDK_INT >= 18) {
            try {
                Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                instance.init(4, privateKey);
                return (SecretKey) instance.unwrap(bArr, b.a, 3);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public static byte[] wrap(SecretKey secretKey, PublicKey publicKey) {
        if (Build.VERSION.SDK_INT >= 18) {
            try {
                Cipher instance = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                instance.init(3, publicKey);
                return instance.wrap(secretKey);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public native SecCheckResult secCheck(Context context, String str, Signature signature, String str2, byte[] bArr, byte[] bArr2, byte[] bArr3);
}
